
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b63 	.word	0x00000b63
  10:	00000b65 	.word	0x00000b65
  14:	00000b67 	.word	0x00000b67
  18:	00000b69 	.word	0x00000b69
	...
  2c:	00000b6b 	.word	0x00000b6b
  30:	00000b6d 	.word	0x00000b6d
  34:	00000000 	.word	0x00000000
  38:	00000b6f 	.word	0x00000b6f
  3c:	00000b71 	.word	0x00000b71
  40:	00000b73 	.word	0x00000b73
  44:	00000b73 	.word	0x00000b73
  48:	00000b73 	.word	0x00000b73
  4c:	00000b73 	.word	0x00000b73
  50:	00000b73 	.word	0x00000b73
  54:	00000b73 	.word	0x00000b73
  58:	00000b73 	.word	0x00000b73
  5c:	00000b73 	.word	0x00000b73
  60:	00000b73 	.word	0x00000b73
  64:	00000b73 	.word	0x00000b73
  68:	00000b73 	.word	0x00000b73
  6c:	00000b73 	.word	0x00000b73
  70:	00000b73 	.word	0x00000b73
  74:	00000b73 	.word	0x00000b73
  78:	00000b73 	.word	0x00000b73
  7c:	00000b73 	.word	0x00000b73
  80:	00000b73 	.word	0x00000b73
  84:	00000b73 	.word	0x00000b73
  88:	00000b73 	.word	0x00000b73
  8c:	00000b73 	.word	0x00000b73
  90:	00000b73 	.word	0x00000b73
  94:	00000b73 	.word	0x00000b73
  98:	00000b73 	.word	0x00000b73
  9c:	00000b73 	.word	0x00000b73
  a0:	00000b73 	.word	0x00000b73
  a4:	00000b73 	.word	0x00000b73
  a8:	00000b73 	.word	0x00000b73
  ac:	00000b73 	.word	0x00000b73
  b0:	00000b73 	.word	0x00000b73
  b4:	00000b73 	.word	0x00000b73
  b8:	00000b73 	.word	0x00000b73
  bc:	00000b73 	.word	0x00000b73
  c0:	00000b73 	.word	0x00000b73
  c4:	00000b73 	.word	0x00000b73
  c8:	00000b73 	.word	0x00000b73
  cc:	00000b73 	.word	0x00000b73
  d0:	00000b73 	.word	0x00000b73
  d4:	00000b73 	.word	0x00000b73
  d8:	00000b73 	.word	0x00000b73
  dc:	00000b73 	.word	0x00000b73
  e0:	00000b73 	.word	0x00000b73
  e4:	00000b73 	.word	0x00000b73
  e8:	00000b73 	.word	0x00000b73
  ec:	00000b73 	.word	0x00000b73
  f0:	00000b73 	.word	0x00000b73
  f4:	00000b73 	.word	0x00000b73
  f8:	00000b73 	.word	0x00000b73
  fc:	00000b73 	.word	0x00000b73
 100:	00000b73 	.word	0x00000b73
 104:	00000b73 	.word	0x00000b73
 108:	00000b73 	.word	0x00000b73
 10c:	00000b73 	.word	0x00000b73
 110:	00000b73 	.word	0x00000b73
 114:	00000b73 	.word	0x00000b73
 118:	00000b73 	.word	0x00000b73
 11c:	00000b73 	.word	0x00000b73
 120:	00000b73 	.word	0x00000b73
 124:	00000b73 	.word	0x00000b73
 128:	00000b73 	.word	0x00000b73
 12c:	00000b73 	.word	0x00000b73
 130:	00000b73 	.word	0x00000b73
 134:	00000b73 	.word	0x00000b73
 138:	00000b73 	.word	0x00000b73
 13c:	00000b73 	.word	0x00000b73
 140:	00000b73 	.word	0x00000b73
 144:	00000b73 	.word	0x00000b73
 148:	00000b73 	.word	0x00000b73
 14c:	00000b73 	.word	0x00000b73
 150:	00000b73 	.word	0x00000b73
 154:	00000b73 	.word	0x00000b73
 158:	00000b73 	.word	0x00000b73
 15c:	00000b73 	.word	0x00000b73
 160:	00000b73 	.word	0x00000b73
 164:	00000b73 	.word	0x00000b73
 168:	00000b73 	.word	0x00000b73
 16c:	00000b73 	.word	0x00000b73
 170:	00000b73 	.word	0x00000b73
 174:	00000b73 	.word	0x00000b73
 178:	00000b73 	.word	0x00000b73
 17c:	00000b73 	.word	0x00000b73
 180:	00000b73 	.word	0x00000b73
 184:	00000b73 	.word	0x00000b73
 188:	00000b73 	.word	0x00000b73
 18c:	00000b73 	.word	0x00000b73
 190:	00000b73 	.word	0x00000b73
 194:	00000b73 	.word	0x00000b73
 198:	00000b73 	.word	0x00000b73
 19c:	00000b73 	.word	0x00000b73
 1a0:	00000b73 	.word	0x00000b73
 1a4:	00000b73 	.word	0x00000b73
 1a8:	00000b73 	.word	0x00000b73
 1ac:	00000b73 	.word	0x00000b73
 1b0:	00000b73 	.word	0x00000b73
 1b4:	00000b73 	.word	0x00000b73
 1b8:	00000b73 	.word	0x00000b73
 1bc:	00000b73 	.word	0x00000b73
 1c0:	00000b73 	.word	0x00000b73
 1c4:	00000b73 	.word	0x00000b73
 1c8:	00000b73 	.word	0x00000b73
 1cc:	00000b73 	.word	0x00000b73
 1d0:	00000b73 	.word	0x00000b73
 1d4:	00000b73 	.word	0x00000b73
 1d8:	00000b73 	.word	0x00000b73
 1dc:	00000b73 	.word	0x00000b73
 1e0:	00000b73 	.word	0x00000b73
 1e4:	00000b73 	.word	0x00000b73
 1e8:	00000b73 	.word	0x00000b73
 1ec:	00000b73 	.word	0x00000b73
 1f0:	00000b73 	.word	0x00000b73
 1f4:	00000b73 	.word	0x00000b73
 1f8:	00000b73 	.word	0x00000b73
 1fc:	00000b73 	.word	0x00000b73
 200:	00000b73 	.word	0x00000b73
 204:	00000b73 	.word	0x00000b73
 208:	00000b73 	.word	0x00000b73
 20c:	00000b73 	.word	0x00000b73
 210:	00000b73 	.word	0x00000b73
 214:	00000b73 	.word	0x00000b73
 218:	00000b73 	.word	0x00000b73
 21c:	00000b73 	.word	0x00000b73
 220:	00000b73 	.word	0x00000b73
 224:	00000b73 	.word	0x00000b73
 228:	00000b73 	.word	0x00000b73
 22c:	00000b73 	.word	0x00000b73
 230:	00000b73 	.word	0x00000b73
 234:	00000b73 	.word	0x00000b73
 238:	00000b73 	.word	0x00000b73
 23c:	00000b73 	.word	0x00000b73
 240:	00000b73 	.word	0x00000b73
 244:	00000b73 	.word	0x00000b73
 248:	00000b73 	.word	0x00000b73
 24c:	00000b73 	.word	0x00000b73
 250:	00000b73 	.word	0x00000b73
 254:	00000b73 	.word	0x00000b73
 258:	00000b73 	.word	0x00000b73
 25c:	00000b73 	.word	0x00000b73
 260:	00000b73 	.word	0x00000b73
 264:	00000b73 	.word	0x00000b73
 268:	00000b73 	.word	0x00000b73
 26c:	00000b73 	.word	0x00000b73
 270:	00000b73 	.word	0x00000b73
 274:	00000b73 	.word	0x00000b73
 278:	00000b73 	.word	0x00000b73
 27c:	00000b73 	.word	0x00000b73
 280:	00000b73 	.word	0x00000b73
 284:	00000b73 	.word	0x00000b73
 288:	00000b73 	.word	0x00000b73
 28c:	00000b73 	.word	0x00000b73
 290:	00000b73 	.word	0x00000b73
 294:	00000b73 	.word	0x00000b73
 298:	00000b73 	.word	0x00000b73
 29c:	00000b73 	.word	0x00000b73
 2a0:	00000b73 	.word	0x00000b73
 2a4:	00000b73 	.word	0x00000b73
 2a8:	00000b73 	.word	0x00000b73
 2ac:	00000b73 	.word	0x00000b73
 2b0:	00000b73 	.word	0x00000b73
 2b4:	00000b73 	.word	0x00000b73
 2b8:	00000b73 	.word	0x00000b73
 2bc:	00000b73 	.word	0x00000b73
 2c0:	00000b73 	.word	0x00000b73
 2c4:	00000b73 	.word	0x00000b73
 2c8:	00000b73 	.word	0x00000b73
 2cc:	00000b73 	.word	0x00000b73
 2d0:	00000b73 	.word	0x00000b73
 2d4:	00000b73 	.word	0x00000b73
 2d8:	00000b73 	.word	0x00000b73
 2dc:	00000b73 	.word	0x00000b73
 2e0:	00000b73 	.word	0x00000b73
 2e4:	00000b73 	.word	0x00000b73
 2e8:	00000b73 	.word	0x00000b73
 2ec:	00000b73 	.word	0x00000b73
 2f0:	00000b73 	.word	0x00000b73
 2f4:	00000b73 	.word	0x00000b73
 2f8:	00000b73 	.word	0x00000b73
 2fc:	00000b73 	.word	0x00000b73
 300:	00000b73 	.word	0x00000b73
 304:	00000b73 	.word	0x00000b73
 308:	00000b73 	.word	0x00000b73
 30c:	00000b73 	.word	0x00000b73

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faa5 	bl	9d0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb64 	bl	b58 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91f8 	.word	0x1fff91f8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faaf 	bl	afc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b083      	sub	sp, #12
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    ResultBuffer[1];

    EcuM_Init();
     8b4:	f000 f82c 	bl	910 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b8:	f000 faee 	bl	e98 <SEGGER_RTT_Init>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8bc:	ab01      	add	r3, sp, #4
     8be:	4619      	mov	r1, r3
     8c0:	2000      	movs	r0, #0
     8c2:	f007 fa01 	bl	7cc8 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     8c6:	466b      	mov	r3, sp
     8c8:	4619      	mov	r1, r3
     8ca:	2000      	movs	r0, #0
     8cc:	f006 ff6c 	bl	77a8 <Adc_SetupResultBuffer>
    /*Enable the notification function*/
    Adc_EnableGroupNotification( AdcGroup_0 );
     8d0:	2000      	movs	r0, #0
     8d2:	f007 f8e8 	bl	7aa6 <Adc_EnableGroupNotification>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     8d6:	2000      	movs	r0, #0
     8d8:	f007 f804 	bl	78e4 <Adc_StartGroupConversion>
        /* Wait until the conversion is done, in real world application we shall not wait at all. */
        while( AdcFlag == FALSE );
     8dc:	bf00      	nop
     8de:	4b09      	ldr	r3, [pc, #36]	; (904 <main+0x54>)
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d0fb      	beq.n	8de <main+0x2e>
        AdcFlag = FALSE;
     8e6:	4b07      	ldr	r3, [pc, #28]	; (904 <main+0x54>)
     8e8:	2200      	movs	r2, #0
     8ea:	701a      	strb	r2, [r3, #0]
        /* Display value */
        SEGGER_RTT_printf( 0, "Adc Channel value: %d\n", AdcReadGroupBuffer[0] );
     8ec:	4b06      	ldr	r3, [pc, #24]	; (908 <main+0x58>)
     8ee:	881b      	ldrh	r3, [r3, #0]
     8f0:	461a      	mov	r2, r3
     8f2:	4906      	ldr	r1, [pc, #24]	; (90c <main+0x5c>)
     8f4:	2000      	movs	r0, #0
     8f6:	f000 fe37 	bl	1568 <SEGGER_RTT_printf>
        Delay( 2000u );
     8fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8fe:	f000 f825 	bl	94c <Delay>
    {
     902:	e7e8      	b.n	8d6 <main+0x26>
     904:	1fff8b30 	.word	0x1fff8b30
     908:	1fff8b34 	.word	0x1fff8b34
     90c:	00010204 	.word	0x00010204

00000910 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     910:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     912:	480b      	ldr	r0, [pc, #44]	; (940 <EcuM_Init+0x30>)
     914:	f004 fe7c 	bl	5610 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     918:	2000      	movs	r0, #0
     91a:	f004 fecd 	bl	56b8 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     91e:	2000      	movs	r0, #0
     920:	f004 feee 	bl	5700 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     924:	2000      	movs	r0, #0
     926:	f001 f8de 	bl	1ae6 <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     92a:	2000      	movs	r0, #0
     92c:	f000 ffd8 	bl	18e0 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5  (B1) */
    Port_Init( &Port_Config );
     930:	4804      	ldr	r0, [pc, #16]	; (944 <EcuM_Init+0x34>)
     932:	f005 fa6f 	bl	5e14 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     936:	4804      	ldr	r0, [pc, #16]	; (948 <EcuM_Init+0x38>)
     938:	f006 fee8 	bl	770c <Adc_Init>
}
     93c:	bf00      	nop
     93e:	bd08      	pop	{r3, pc}
     940:	00010edc 	.word	0x00010edc
     944:	0001102c 	.word	0x0001102c
     948:	00010ab4 	.word	0x00010ab4

0000094c <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     94c:	b500      	push	{lr}
     94e:	b087      	sub	sp, #28
     950:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     952:	9b01      	ldr	r3, [sp, #4]
     954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     958:	fb02 f303 	mul.w	r3, r2, r3
     95c:	2101      	movs	r1, #1
     95e:	4618      	mov	r0, r3
     960:	f001 f916 	bl	1b90 <OsIf_MicrosToTicks>
     964:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     966:	2001      	movs	r0, #1
     968:	f001 f8c6 	bl	1af8 <OsIf_GetCounter>
     96c:	4603      	mov	r3, r0
     96e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     970:	2300      	movs	r3, #0
     972:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     974:	ab03      	add	r3, sp, #12
     976:	2101      	movs	r1, #1
     978:	4618      	mov	r0, r3
     97a:	f001 f8d6 	bl	1b2a <OsIf_GetElapsed>
     97e:	4602      	mov	r2, r0
     980:	9b05      	ldr	r3, [sp, #20]
     982:	4413      	add	r3, r2
     984:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     986:	9a05      	ldr	r2, [sp, #20]
     988:	9b04      	ldr	r3, [sp, #16]
     98a:	429a      	cmp	r2, r3
     98c:	d3f2      	bcc.n	974 <Delay+0x28>
}
     98e:	bf00      	nop
     990:	bf00      	nop
     992:	b007      	add	sp, #28
     994:	f85d fb04 	ldr.w	pc, [sp], #4

00000998 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     998:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     99a:	f3ef 8310 	mrs	r3, PRIMASK
     99e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9a0:	4623      	mov	r3, r4
}
     9a2:	4618      	mov	r0, r3
     9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9a8:	4770      	bx	lr

000009aa <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9aa:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ac:	f3ef 8310 	mrs	r3, PRIMASK
     9b0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9b2:	4623      	mov	r3, r4
}
     9b4:	4618      	mov	r0, r3
     9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ba:	4770      	bx	lr

000009bc <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9bc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9be:	f3ef 8310 	mrs	r3, PRIMASK
     9c2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c4:	4623      	mov	r3, r4
}
     9c6:	4618      	mov	r0, r3
     9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9cc:	4770      	bx	lr
	...

000009d0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     9d0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     9d2:	2300      	movs	r3, #0
     9d4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     9d6:	2300      	movs	r3, #0
     9d8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     9da:	2300      	movs	r3, #0
     9dc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9de:	2300      	movs	r3, #0
     9e0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     9e2:	4b44      	ldr	r3, [pc, #272]	; (af4 <init_data_bss+0x124>)
     9e4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     9e6:	4b44      	ldr	r3, [pc, #272]	; (af8 <init_data_bss+0x128>)
     9e8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     9ea:	9b05      	ldr	r3, [sp, #20]
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     9f0:	9b05      	ldr	r3, [sp, #20]
     9f2:	3304      	adds	r3, #4
     9f4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     9f6:	9b05      	ldr	r3, [sp, #20]
     9f8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     9fa:	2300      	movs	r3, #0
     9fc:	9309      	str	r3, [sp, #36]	; 0x24
     9fe:	e03d      	b.n	a7c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a02:	4613      	mov	r3, r2
     a04:	005b      	lsls	r3, r3, #1
     a06:	4413      	add	r3, r2
     a08:	009b      	lsls	r3, r3, #2
     a0a:	461a      	mov	r2, r3
     a0c:	9b03      	ldr	r3, [sp, #12]
     a0e:	4413      	add	r3, r2
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a16:	4613      	mov	r3, r2
     a18:	005b      	lsls	r3, r3, #1
     a1a:	4413      	add	r3, r2
     a1c:	009b      	lsls	r3, r3, #2
     a1e:	461a      	mov	r2, r3
     a20:	9b03      	ldr	r3, [sp, #12]
     a22:	4413      	add	r3, r2
     a24:	681b      	ldr	r3, [r3, #0]
     a26:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a2a:	4613      	mov	r3, r2
     a2c:	005b      	lsls	r3, r3, #1
     a2e:	4413      	add	r3, r2
     a30:	009b      	lsls	r3, r3, #2
     a32:	461a      	mov	r2, r3
     a34:	9b03      	ldr	r3, [sp, #12]
     a36:	4413      	add	r3, r2
     a38:	689b      	ldr	r3, [r3, #8]
     a3a:	4619      	mov	r1, r3
     a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a3e:	4613      	mov	r3, r2
     a40:	005b      	lsls	r3, r3, #1
     a42:	4413      	add	r3, r2
     a44:	009b      	lsls	r3, r3, #2
     a46:	461a      	mov	r2, r3
     a48:	9b03      	ldr	r3, [sp, #12]
     a4a:	4413      	add	r3, r2
     a4c:	685b      	ldr	r3, [r3, #4]
     a4e:	1acb      	subs	r3, r1, r3
     a50:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a52:	2300      	movs	r3, #0
     a54:	9308      	str	r3, [sp, #32]
     a56:	e00a      	b.n	a6e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a58:	9a00      	ldr	r2, [sp, #0]
     a5a:	9b08      	ldr	r3, [sp, #32]
     a5c:	441a      	add	r2, r3
     a5e:	9901      	ldr	r1, [sp, #4]
     a60:	9b08      	ldr	r3, [sp, #32]
     a62:	440b      	add	r3, r1
     a64:	7812      	ldrb	r2, [r2, #0]
     a66:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a68:	9b08      	ldr	r3, [sp, #32]
     a6a:	3301      	adds	r3, #1
     a6c:	9308      	str	r3, [sp, #32]
     a6e:	9a08      	ldr	r2, [sp, #32]
     a70:	9b06      	ldr	r3, [sp, #24]
     a72:	429a      	cmp	r2, r3
     a74:	d3f0      	bcc.n	a58 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a78:	3301      	adds	r3, #1
     a7a:	9309      	str	r3, [sp, #36]	; 0x24
     a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a7e:	9b07      	ldr	r3, [sp, #28]
     a80:	429a      	cmp	r2, r3
     a82:	d3bd      	bcc.n	a00 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a84:	9b04      	ldr	r3, [sp, #16]
     a86:	681b      	ldr	r3, [r3, #0]
     a88:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a8a:	9b04      	ldr	r3, [sp, #16]
     a8c:	3304      	adds	r3, #4
     a8e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a90:	9b04      	ldr	r3, [sp, #16]
     a92:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a94:	2300      	movs	r3, #0
     a96:	9309      	str	r3, [sp, #36]	; 0x24
     a98:	e024      	b.n	ae4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a9c:	00db      	lsls	r3, r3, #3
     a9e:	9a02      	ldr	r2, [sp, #8]
     aa0:	4413      	add	r3, r2
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aa8:	00db      	lsls	r3, r3, #3
     aaa:	9a02      	ldr	r2, [sp, #8]
     aac:	4413      	add	r3, r2
     aae:	685b      	ldr	r3, [r3, #4]
     ab0:	4619      	mov	r1, r3
     ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ab4:	00db      	lsls	r3, r3, #3
     ab6:	9a02      	ldr	r2, [sp, #8]
     ab8:	4413      	add	r3, r2
     aba:	681b      	ldr	r3, [r3, #0]
     abc:	1acb      	subs	r3, r1, r3
     abe:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ac0:	2300      	movs	r3, #0
     ac2:	9308      	str	r3, [sp, #32]
     ac4:	e007      	b.n	ad6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     ac6:	9a01      	ldr	r2, [sp, #4]
     ac8:	9b08      	ldr	r3, [sp, #32]
     aca:	4413      	add	r3, r2
     acc:	2200      	movs	r2, #0
     ace:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ad0:	9b08      	ldr	r3, [sp, #32]
     ad2:	3301      	adds	r3, #1
     ad4:	9308      	str	r3, [sp, #32]
     ad6:	9a08      	ldr	r2, [sp, #32]
     ad8:	9b06      	ldr	r3, [sp, #24]
     ada:	429a      	cmp	r2, r3
     adc:	d3f3      	bcc.n	ac6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae0:	3301      	adds	r3, #1
     ae2:	9309      	str	r3, [sp, #36]	; 0x24
     ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae6:	9b07      	ldr	r3, [sp, #28]
     ae8:	429a      	cmp	r2, r3
     aea:	d3d6      	bcc.n	a9a <init_data_bss+0xca>
        }
    }
}
     aec:	bf00      	nop
     aee:	bf00      	nop
     af0:	b00a      	add	sp, #40	; 0x28
     af2:	4770      	bx	lr
     af4:	0001109c 	.word	0x0001109c
     af8:	000110b8 	.word	0x000110b8

00000afc <sys_m4_cache_init>:
{
     afc:	b084      	sub	sp, #16
     afe:	4603      	mov	r3, r0
     b00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b04:	2300      	movs	r3, #0
     b06:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b0e:	2b00      	cmp	r3, #0
     b10:	d118      	bne.n	b44 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b12:	4b10      	ldr	r3, [pc, #64]	; (b54 <sys_m4_cache_init+0x58>)
     b14:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b18:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b1a:	4b0e      	ldr	r3, [pc, #56]	; (b54 <sys_m4_cache_init+0x58>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	4a0d      	ldr	r2, [pc, #52]	; (b54 <sys_m4_cache_init+0x58>)
     b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b24:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b26:	bf00      	nop
     b28:	4b0a      	ldr	r3, [pc, #40]	; (b54 <sys_m4_cache_init+0x58>)
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b34:	d0f8      	beq.n	b28 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <sys_m4_cache_init+0x58>)
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	4a06      	ldr	r2, [pc, #24]	; (b54 <sys_m4_cache_init+0x58>)
     b3c:	f043 0301 	orr.w	r3, r3, #1
     b40:	6013      	str	r3, [r2, #0]
     b42:	e002      	b.n	b4a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b44:	2301      	movs	r3, #1
     b46:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b4e:	4618      	mov	r0, r3
     b50:	b004      	add	sp, #16
     b52:	4770      	bx	lr
     b54:	e0082000 	.word	0xe0082000

00000b58 <startup_go_to_user_mode>:
}
     b58:	bf00      	nop
     b5a:	4770      	bx	lr

00000b5c <Sys_GetCoreID>:
    return 0U;
     b5c:	2300      	movs	r3, #0
}
     b5e:	4618      	mov	r0, r3
     b60:	4770      	bx	lr

00000b62 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b62:	e7fe      	b.n	b62 <HardFault_Handler>

00000b64 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b64:	e7fe      	b.n	b64 <MemManage_Handler>

00000b66 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b66:	e7fe      	b.n	b66 <BusFault_Handler>

00000b68 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b68:	e7fe      	b.n	b68 <UsageFault_Handler>

00000b6a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b6a:	e7fe      	b.n	b6a <SVC_Handler>

00000b6c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b6c:	e7fe      	b.n	b6c <DebugMon_Handler>

00000b6e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b6e:	e7fe      	b.n	b6e <PendSV_Handler>

00000b70 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b70:	e7fe      	b.n	b70 <SysTick_Handler>

00000b72 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b72:	e7fe      	b.n	b72 <undefined_handler>

00000b74 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     b74:	b500      	push	{lr}
     b76:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     b78:	4b26      	ldr	r3, [pc, #152]	; (c14 <__BSS_SRAM_SIZE+0x84>)
     b7a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     b7c:	22a8      	movs	r2, #168	; 0xa8
     b7e:	2100      	movs	r1, #0
     b80:	9800      	ldr	r0, [sp, #0]
     b82:	f000 fd13 	bl	15ac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     b86:	9b00      	ldr	r3, [sp, #0]
     b88:	2203      	movs	r2, #3
     b8a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     b8c:	9b00      	ldr	r3, [sp, #0]
     b8e:	2203      	movs	r2, #3
     b90:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     b92:	9b00      	ldr	r3, [sp, #0]
     b94:	4a20      	ldr	r2, [pc, #128]	; (c18 <__BSS_SRAM_SIZE+0x88>)
     b96:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     b98:	9b00      	ldr	r3, [sp, #0]
     b9a:	4a20      	ldr	r2, [pc, #128]	; (c1c <__BSS_SRAM_SIZE+0x8c>)
     b9c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     b9e:	9b00      	ldr	r3, [sp, #0]
     ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ba4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     ba6:	9b00      	ldr	r3, [sp, #0]
     ba8:	2200      	movs	r2, #0
     baa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     bac:	9b00      	ldr	r3, [sp, #0]
     bae:	2200      	movs	r2, #0
     bb0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bb2:	9b00      	ldr	r3, [sp, #0]
     bb4:	2200      	movs	r2, #0
     bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     bb8:	9b00      	ldr	r3, [sp, #0]
     bba:	4a17      	ldr	r2, [pc, #92]	; (c18 <__BSS_SRAM_SIZE+0x88>)
     bbc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     bbe:	9b00      	ldr	r3, [sp, #0]
     bc0:	4a17      	ldr	r2, [pc, #92]	; (c20 <__BSS_SRAM_SIZE+0x90>)
     bc2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     bc4:	9b00      	ldr	r3, [sp, #0]
     bc6:	2210      	movs	r2, #16
     bc8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     bca:	9b00      	ldr	r3, [sp, #0]
     bcc:	2200      	movs	r2, #0
     bce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     bd0:	9b00      	ldr	r3, [sp, #0]
     bd2:	2200      	movs	r2, #0
     bd4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bd6:	9b00      	ldr	r3, [sp, #0]
     bd8:	2200      	movs	r2, #0
     bda:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     bdc:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     be0:	2300      	movs	r3, #0
     be2:	9301      	str	r3, [sp, #4]
     be4:	e00c      	b.n	c00 <__BSS_SRAM_SIZE+0x70>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     be6:	9b01      	ldr	r3, [sp, #4]
     be8:	f1c3 030f 	rsb	r3, r3, #15
     bec:	4a0d      	ldr	r2, [pc, #52]	; (c24 <__BSS_SRAM_SIZE+0x94>)
     bee:	5cd1      	ldrb	r1, [r2, r3]
     bf0:	9a00      	ldr	r2, [sp, #0]
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	4413      	add	r3, r2
     bf6:	460a      	mov	r2, r1
     bf8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     bfa:	9b01      	ldr	r3, [sp, #4]
     bfc:	3301      	adds	r3, #1
     bfe:	9301      	str	r3, [sp, #4]
     c00:	9b01      	ldr	r3, [sp, #4]
     c02:	2b0f      	cmp	r3, #15
     c04:	d9ef      	bls.n	be6 <__BSS_SRAM_SIZE+0x56>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c06:	f3bf 8f5f 	dmb	sy
}
     c0a:	bf00      	nop
     c0c:	b003      	add	sp, #12
     c0e:	f85d fb04 	ldr.w	pc, [sp], #4
     c12:	bf00      	nop
     c14:	1fff91fc 	.word	0x1fff91fc
     c18:	0001021c 	.word	0x0001021c
     c1c:	1fff92a4 	.word	0x1fff92a4
     c20:	1fff96a4 	.word	0x1fff96a4
     c24:	00011078 	.word	0x00011078

00000c28 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     c28:	b500      	push	{lr}
     c2a:	b08b      	sub	sp, #44	; 0x2c
     c2c:	9003      	str	r0, [sp, #12]
     c2e:	9102      	str	r1, [sp, #8]
     c30:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     c32:	2300      	movs	r3, #0
     c34:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     c36:	9b03      	ldr	r3, [sp, #12]
     c38:	68db      	ldr	r3, [r3, #12]
     c3a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     c3c:	9b03      	ldr	r3, [sp, #12]
     c3e:	691b      	ldr	r3, [r3, #16]
     c40:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     c42:	9a06      	ldr	r2, [sp, #24]
     c44:	9b07      	ldr	r3, [sp, #28]
     c46:	429a      	cmp	r2, r3
     c48:	d905      	bls.n	c56 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     c4a:	9a06      	ldr	r2, [sp, #24]
     c4c:	9b07      	ldr	r3, [sp, #28]
     c4e:	1ad3      	subs	r3, r2, r3
     c50:	3b01      	subs	r3, #1
     c52:	9309      	str	r3, [sp, #36]	; 0x24
     c54:	e007      	b.n	c66 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     c56:	9b03      	ldr	r3, [sp, #12]
     c58:	689a      	ldr	r2, [r3, #8]
     c5a:	9906      	ldr	r1, [sp, #24]
     c5c:	9b07      	ldr	r3, [sp, #28]
     c5e:	1acb      	subs	r3, r1, r3
     c60:	4413      	add	r3, r2
     c62:	3b01      	subs	r3, #1
     c64:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     c66:	9b03      	ldr	r3, [sp, #12]
     c68:	689a      	ldr	r2, [r3, #8]
     c6a:	9b07      	ldr	r3, [sp, #28]
     c6c:	1ad3      	subs	r3, r2, r3
     c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c70:	4293      	cmp	r3, r2
     c72:	bf28      	it	cs
     c74:	4613      	movcs	r3, r2
     c76:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c7a:	9b01      	ldr	r3, [sp, #4]
     c7c:	4293      	cmp	r3, r2
     c7e:	bf28      	it	cs
     c80:	4613      	movcs	r3, r2
     c82:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     c84:	9b03      	ldr	r3, [sp, #12]
     c86:	685a      	ldr	r2, [r3, #4]
     c88:	9b07      	ldr	r3, [sp, #28]
     c8a:	4413      	add	r3, r2
     c8c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c90:	9902      	ldr	r1, [sp, #8]
     c92:	9805      	ldr	r0, [sp, #20]
     c94:	f000 fc7c 	bl	1590 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     c98:	9a08      	ldr	r2, [sp, #32]
     c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c9c:	4413      	add	r3, r2
     c9e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     ca0:	9a02      	ldr	r2, [sp, #8]
     ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca4:	4413      	add	r3, r2
     ca6:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     ca8:	9a01      	ldr	r2, [sp, #4]
     caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cac:	1ad3      	subs	r3, r2, r3
     cae:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     cb0:	9a07      	ldr	r2, [sp, #28]
     cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cb4:	4413      	add	r3, r2
     cb6:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     cb8:	9b03      	ldr	r3, [sp, #12]
     cba:	689b      	ldr	r3, [r3, #8]
     cbc:	9a07      	ldr	r2, [sp, #28]
     cbe:	429a      	cmp	r2, r3
     cc0:	d101      	bne.n	cc6 <_WriteBlocking+0x9e>
      WrOff = 0u;
     cc2:	2300      	movs	r3, #0
     cc4:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     cc6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     cca:	9b03      	ldr	r3, [sp, #12]
     ccc:	9a07      	ldr	r2, [sp, #28]
     cce:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     cd0:	9b01      	ldr	r3, [sp, #4]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d1b2      	bne.n	c3c <_WriteBlocking+0x14>
  return NumBytesWritten;
     cd6:	9b08      	ldr	r3, [sp, #32]
}
     cd8:	4618      	mov	r0, r3
     cda:	b00b      	add	sp, #44	; 0x2c
     cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00000ce0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     ce0:	b500      	push	{lr}
     ce2:	b089      	sub	sp, #36	; 0x24
     ce4:	9003      	str	r0, [sp, #12]
     ce6:	9102      	str	r1, [sp, #8]
     ce8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     cea:	9b03      	ldr	r3, [sp, #12]
     cec:	68db      	ldr	r3, [r3, #12]
     cee:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     cf0:	9b03      	ldr	r3, [sp, #12]
     cf2:	689a      	ldr	r2, [r3, #8]
     cf4:	9b07      	ldr	r3, [sp, #28]
     cf6:	1ad3      	subs	r3, r2, r3
     cf8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     cfa:	9a06      	ldr	r2, [sp, #24]
     cfc:	9b01      	ldr	r3, [sp, #4]
     cfe:	429a      	cmp	r2, r3
     d00:	d911      	bls.n	d26 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d02:	9b03      	ldr	r3, [sp, #12]
     d04:	685a      	ldr	r2, [r3, #4]
     d06:	9b07      	ldr	r3, [sp, #28]
     d08:	4413      	add	r3, r2
     d0a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d0c:	9a01      	ldr	r2, [sp, #4]
     d0e:	9902      	ldr	r1, [sp, #8]
     d10:	9804      	ldr	r0, [sp, #16]
     d12:	f000 fc3d 	bl	1590 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d16:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     d1a:	9a07      	ldr	r2, [sp, #28]
     d1c:	9b01      	ldr	r3, [sp, #4]
     d1e:	441a      	add	r2, r3
     d20:	9b03      	ldr	r3, [sp, #12]
     d22:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     d24:	e01f      	b.n	d66 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     d26:	9b06      	ldr	r3, [sp, #24]
     d28:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d2a:	9b03      	ldr	r3, [sp, #12]
     d2c:	685a      	ldr	r2, [r3, #4]
     d2e:	9b07      	ldr	r3, [sp, #28]
     d30:	4413      	add	r3, r2
     d32:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     d34:	9a05      	ldr	r2, [sp, #20]
     d36:	9902      	ldr	r1, [sp, #8]
     d38:	9804      	ldr	r0, [sp, #16]
     d3a:	f000 fc29 	bl	1590 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     d3e:	9a01      	ldr	r2, [sp, #4]
     d40:	9b06      	ldr	r3, [sp, #24]
     d42:	1ad3      	subs	r3, r2, r3
     d44:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     d46:	9b03      	ldr	r3, [sp, #12]
     d48:	685b      	ldr	r3, [r3, #4]
     d4a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     d4c:	9a02      	ldr	r2, [sp, #8]
     d4e:	9b06      	ldr	r3, [sp, #24]
     d50:	4413      	add	r3, r2
     d52:	9a05      	ldr	r2, [sp, #20]
     d54:	4619      	mov	r1, r3
     d56:	9804      	ldr	r0, [sp, #16]
     d58:	f000 fc1a 	bl	1590 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d5c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     d60:	9b03      	ldr	r3, [sp, #12]
     d62:	9a05      	ldr	r2, [sp, #20]
     d64:	60da      	str	r2, [r3, #12]
}
     d66:	bf00      	nop
     d68:	b009      	add	sp, #36	; 0x24
     d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00000d6e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     d6e:	b086      	sub	sp, #24
     d70:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     d72:	9b01      	ldr	r3, [sp, #4]
     d74:	691b      	ldr	r3, [r3, #16]
     d76:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     d78:	9b01      	ldr	r3, [sp, #4]
     d7a:	68db      	ldr	r3, [r3, #12]
     d7c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     d7e:	9a04      	ldr	r2, [sp, #16]
     d80:	9b03      	ldr	r3, [sp, #12]
     d82:	429a      	cmp	r2, r3
     d84:	d808      	bhi.n	d98 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     d86:	9b01      	ldr	r3, [sp, #4]
     d88:	689a      	ldr	r2, [r3, #8]
     d8a:	9b03      	ldr	r3, [sp, #12]
     d8c:	1ad2      	subs	r2, r2, r3
     d8e:	9b04      	ldr	r3, [sp, #16]
     d90:	4413      	add	r3, r2
     d92:	3b01      	subs	r3, #1
     d94:	9305      	str	r3, [sp, #20]
     d96:	e004      	b.n	da2 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     d98:	9a04      	ldr	r2, [sp, #16]
     d9a:	9b03      	ldr	r3, [sp, #12]
     d9c:	1ad3      	subs	r3, r2, r3
     d9e:	3b01      	subs	r3, #1
     da0:	9305      	str	r3, [sp, #20]
  }
  return r;
     da2:	9b05      	ldr	r3, [sp, #20]
}
     da4:	4618      	mov	r0, r3
     da6:	b006      	add	sp, #24
     da8:	4770      	bx	lr
	...

00000dac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     dac:	b500      	push	{lr}
     dae:	b089      	sub	sp, #36	; 0x24
     db0:	9003      	str	r0, [sp, #12]
     db2:	9102      	str	r1, [sp, #8]
     db4:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     db6:	9b02      	ldr	r3, [sp, #8]
     db8:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     dba:	9b03      	ldr	r3, [sp, #12]
     dbc:	1c5a      	adds	r2, r3, #1
     dbe:	4613      	mov	r3, r2
     dc0:	005b      	lsls	r3, r3, #1
     dc2:	4413      	add	r3, r2
     dc4:	00db      	lsls	r3, r3, #3
     dc6:	4a20      	ldr	r2, [pc, #128]	; (e48 <SEGGER_RTT_WriteNoLock+0x9c>)
     dc8:	4413      	add	r3, r2
     dca:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     dcc:	9b05      	ldr	r3, [sp, #20]
     dce:	695b      	ldr	r3, [r3, #20]
     dd0:	2b02      	cmp	r3, #2
     dd2:	d029      	beq.n	e28 <SEGGER_RTT_WriteNoLock+0x7c>
     dd4:	2b02      	cmp	r3, #2
     dd6:	d82e      	bhi.n	e36 <SEGGER_RTT_WriteNoLock+0x8a>
     dd8:	2b00      	cmp	r3, #0
     dda:	d002      	beq.n	de2 <SEGGER_RTT_WriteNoLock+0x36>
     ddc:	2b01      	cmp	r3, #1
     dde:	d013      	beq.n	e08 <SEGGER_RTT_WriteNoLock+0x5c>
     de0:	e029      	b.n	e36 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     de2:	9805      	ldr	r0, [sp, #20]
     de4:	f7ff ffc3 	bl	d6e <_GetAvailWriteSpace>
     de8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     dea:	9a04      	ldr	r2, [sp, #16]
     dec:	9b01      	ldr	r3, [sp, #4]
     dee:	429a      	cmp	r2, r3
     df0:	d202      	bcs.n	df8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     df2:	2300      	movs	r3, #0
     df4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     df6:	e021      	b.n	e3c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     df8:	9b01      	ldr	r3, [sp, #4]
     dfa:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     dfc:	9a01      	ldr	r2, [sp, #4]
     dfe:	9906      	ldr	r1, [sp, #24]
     e00:	9805      	ldr	r0, [sp, #20]
     e02:	f7ff ff6d 	bl	ce0 <_WriteNoCheck>
    break;
     e06:	e019      	b.n	e3c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e08:	9805      	ldr	r0, [sp, #20]
     e0a:	f7ff ffb0 	bl	d6e <_GetAvailWriteSpace>
     e0e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     e10:	9a01      	ldr	r2, [sp, #4]
     e12:	9b04      	ldr	r3, [sp, #16]
     e14:	4293      	cmp	r3, r2
     e16:	bf28      	it	cs
     e18:	4613      	movcs	r3, r2
     e1a:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     e1c:	9a07      	ldr	r2, [sp, #28]
     e1e:	9906      	ldr	r1, [sp, #24]
     e20:	9805      	ldr	r0, [sp, #20]
     e22:	f7ff ff5d 	bl	ce0 <_WriteNoCheck>
    break;
     e26:	e009      	b.n	e3c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     e28:	9a01      	ldr	r2, [sp, #4]
     e2a:	9906      	ldr	r1, [sp, #24]
     e2c:	9805      	ldr	r0, [sp, #20]
     e2e:	f7ff fefb 	bl	c28 <_WriteBlocking>
     e32:	9007      	str	r0, [sp, #28]
    break;
     e34:	e002      	b.n	e3c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     e36:	2300      	movs	r3, #0
     e38:	9307      	str	r3, [sp, #28]
    break;
     e3a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     e3c:	9b07      	ldr	r3, [sp, #28]
}
     e3e:	4618      	mov	r0, r3
     e40:	b009      	add	sp, #36	; 0x24
     e42:	f85d fb04 	ldr.w	pc, [sp], #4
     e46:	bf00      	nop
     e48:	1fff91fc 	.word	0x1fff91fc

00000e4c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e4c:	b500      	push	{lr}
     e4e:	b089      	sub	sp, #36	; 0x24
     e50:	9003      	str	r0, [sp, #12]
     e52:	9102      	str	r1, [sp, #8]
     e54:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     e56:	4b0f      	ldr	r3, [pc, #60]	; (e94 <SEGGER_RTT_Write+0x48>)
     e58:	9307      	str	r3, [sp, #28]
     e5a:	9b07      	ldr	r3, [sp, #28]
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	b2db      	uxtb	r3, r3
     e60:	2b53      	cmp	r3, #83	; 0x53
     e62:	d001      	beq.n	e68 <SEGGER_RTT_Write+0x1c>
     e64:	f7ff fe86 	bl	b74 <_DoInit>
  SEGGER_RTT_LOCK();
     e68:	f3ef 8311 	mrs	r3, BASEPRI
     e6c:	f04f 0120 	mov.w	r1, #32
     e70:	f381 8811 	msr	BASEPRI, r1
     e74:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     e76:	9a01      	ldr	r2, [sp, #4]
     e78:	9902      	ldr	r1, [sp, #8]
     e7a:	9803      	ldr	r0, [sp, #12]
     e7c:	f7ff ff96 	bl	dac <SEGGER_RTT_WriteNoLock>
     e80:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     e82:	9b06      	ldr	r3, [sp, #24]
     e84:	f383 8811 	msr	BASEPRI, r3
  return Status;
     e88:	9b05      	ldr	r3, [sp, #20]
}
     e8a:	4618      	mov	r0, r3
     e8c:	b009      	add	sp, #36	; 0x24
     e8e:	f85d fb04 	ldr.w	pc, [sp], #4
     e92:	bf00      	nop
     e94:	1fff91fc 	.word	0x1fff91fc

00000e98 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     e98:	b508      	push	{r3, lr}
  _DoInit();
     e9a:	f7ff fe6b 	bl	b74 <_DoInit>
}
     e9e:	bf00      	nop
     ea0:	bd08      	pop	{r3, pc}

00000ea2 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     ea2:	b500      	push	{lr}
     ea4:	b085      	sub	sp, #20
     ea6:	9001      	str	r0, [sp, #4]
     ea8:	460b      	mov	r3, r1
     eaa:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     eae:	9b01      	ldr	r3, [sp, #4]
     eb0:	689b      	ldr	r3, [r3, #8]
     eb2:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     eb4:	9b03      	ldr	r3, [sp, #12]
     eb6:	1c5a      	adds	r2, r3, #1
     eb8:	9b01      	ldr	r3, [sp, #4]
     eba:	685b      	ldr	r3, [r3, #4]
     ebc:	429a      	cmp	r2, r3
     ebe:	d80f      	bhi.n	ee0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     ec0:	9b01      	ldr	r3, [sp, #4]
     ec2:	681a      	ldr	r2, [r3, #0]
     ec4:	9b03      	ldr	r3, [sp, #12]
     ec6:	4413      	add	r3, r2
     ec8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     ecc:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     ece:	9b03      	ldr	r3, [sp, #12]
     ed0:	1c5a      	adds	r2, r3, #1
     ed2:	9b01      	ldr	r3, [sp, #4]
     ed4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     ed6:	9b01      	ldr	r3, [sp, #4]
     ed8:	68db      	ldr	r3, [r3, #12]
     eda:	1c5a      	adds	r2, r3, #1
     edc:	9b01      	ldr	r3, [sp, #4]
     ede:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     ee0:	9b01      	ldr	r3, [sp, #4]
     ee2:	689a      	ldr	r2, [r3, #8]
     ee4:	9b01      	ldr	r3, [sp, #4]
     ee6:	685b      	ldr	r3, [r3, #4]
     ee8:	429a      	cmp	r2, r3
     eea:	d115      	bne.n	f18 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     eec:	9b01      	ldr	r3, [sp, #4]
     eee:	6918      	ldr	r0, [r3, #16]
     ef0:	9b01      	ldr	r3, [sp, #4]
     ef2:	6819      	ldr	r1, [r3, #0]
     ef4:	9b01      	ldr	r3, [sp, #4]
     ef6:	689b      	ldr	r3, [r3, #8]
     ef8:	461a      	mov	r2, r3
     efa:	f7ff ffa7 	bl	e4c <SEGGER_RTT_Write>
     efe:	4602      	mov	r2, r0
     f00:	9b01      	ldr	r3, [sp, #4]
     f02:	689b      	ldr	r3, [r3, #8]
     f04:	429a      	cmp	r2, r3
     f06:	d004      	beq.n	f12 <_StoreChar+0x70>
      p->ReturnValue = -1;
     f08:	9b01      	ldr	r3, [sp, #4]
     f0a:	f04f 32ff 	mov.w	r2, #4294967295
     f0e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     f10:	e002      	b.n	f18 <_StoreChar+0x76>
      p->Cnt = 0u;
     f12:	9b01      	ldr	r3, [sp, #4]
     f14:	2200      	movs	r2, #0
     f16:	609a      	str	r2, [r3, #8]
}
     f18:	bf00      	nop
     f1a:	b005      	add	sp, #20
     f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f20 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     f20:	b500      	push	{lr}
     f22:	b08b      	sub	sp, #44	; 0x2c
     f24:	9003      	str	r0, [sp, #12]
     f26:	9102      	str	r1, [sp, #8]
     f28:	9201      	str	r2, [sp, #4]
     f2a:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     f2c:	9b02      	ldr	r3, [sp, #8]
     f2e:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     f30:	2301      	movs	r3, #1
     f32:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     f34:	2301      	movs	r3, #1
     f36:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f38:	e007      	b.n	f4a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     f3a:	9a08      	ldr	r2, [sp, #32]
     f3c:	9b01      	ldr	r3, [sp, #4]
     f3e:	fbb2 f3f3 	udiv	r3, r2, r3
     f42:	9308      	str	r3, [sp, #32]
    Width++;
     f44:	9b07      	ldr	r3, [sp, #28]
     f46:	3301      	adds	r3, #1
     f48:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f4a:	9a08      	ldr	r2, [sp, #32]
     f4c:	9b01      	ldr	r3, [sp, #4]
     f4e:	429a      	cmp	r2, r3
     f50:	d2f3      	bcs.n	f3a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     f52:	9a00      	ldr	r2, [sp, #0]
     f54:	9b07      	ldr	r3, [sp, #28]
     f56:	429a      	cmp	r2, r3
     f58:	d901      	bls.n	f5e <_PrintUnsigned+0x3e>
    Width = NumDigits;
     f5a:	9b00      	ldr	r3, [sp, #0]
     f5c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f60:	f003 0301 	and.w	r3, r3, #1
     f64:	2b00      	cmp	r3, #0
     f66:	d128      	bne.n	fba <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f6a:	2b00      	cmp	r3, #0
     f6c:	d025      	beq.n	fba <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f70:	f003 0302 	and.w	r3, r3, #2
     f74:	2b00      	cmp	r3, #0
     f76:	d006      	beq.n	f86 <_PrintUnsigned+0x66>
     f78:	9b00      	ldr	r3, [sp, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d103      	bne.n	f86 <_PrintUnsigned+0x66>
        c = '0';
     f7e:	2330      	movs	r3, #48	; 0x30
     f80:	f88d 301b 	strb.w	r3, [sp, #27]
     f84:	e002      	b.n	f8c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     f86:	2320      	movs	r3, #32
     f88:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     f8c:	e00c      	b.n	fa8 <_PrintUnsigned+0x88>
        FieldWidth--;
     f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f90:	3b01      	subs	r3, #1
     f92:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
     f94:	f89d 301b 	ldrb.w	r3, [sp, #27]
     f98:	4619      	mov	r1, r3
     f9a:	9803      	ldr	r0, [sp, #12]
     f9c:	f7ff ff81 	bl	ea2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
     fa0:	9b03      	ldr	r3, [sp, #12]
     fa2:	68db      	ldr	r3, [r3, #12]
     fa4:	2b00      	cmp	r3, #0
     fa6:	db07      	blt.n	fb8 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     faa:	2b00      	cmp	r3, #0
     fac:	d005      	beq.n	fba <_PrintUnsigned+0x9a>
     fae:	9a07      	ldr	r2, [sp, #28]
     fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fb2:	429a      	cmp	r2, r3
     fb4:	d3eb      	bcc.n	f8e <_PrintUnsigned+0x6e>
     fb6:	e000      	b.n	fba <_PrintUnsigned+0x9a>
          break;
     fb8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     fba:	9b03      	ldr	r3, [sp, #12]
     fbc:	68db      	ldr	r3, [r3, #12]
     fbe:	2b00      	cmp	r3, #0
     fc0:	db55      	blt.n	106e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     fc2:	9b00      	ldr	r3, [sp, #0]
     fc4:	2b01      	cmp	r3, #1
     fc6:	d903      	bls.n	fd0 <_PrintUnsigned+0xb0>
        NumDigits--;
     fc8:	9b00      	ldr	r3, [sp, #0]
     fca:	3b01      	subs	r3, #1
     fcc:	9300      	str	r3, [sp, #0]
     fce:	e009      	b.n	fe4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
     fd0:	9a02      	ldr	r2, [sp, #8]
     fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fd4:	fbb2 f3f3 	udiv	r3, r2, r3
     fd8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
     fda:	9a05      	ldr	r2, [sp, #20]
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	429a      	cmp	r2, r3
     fe0:	d200      	bcs.n	fe4 <_PrintUnsigned+0xc4>
          break;
     fe2:	e005      	b.n	ff0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
     fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe6:	9a01      	ldr	r2, [sp, #4]
     fe8:	fb02 f303 	mul.w	r3, r2, r3
     fec:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     fee:	e7e8      	b.n	fc2 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
     ff0:	9a02      	ldr	r2, [sp, #8]
     ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ff4:	fbb2 f3f3 	udiv	r3, r2, r3
     ff8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
     ffa:	9b05      	ldr	r3, [sp, #20]
     ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ffe:	fb02 f303 	mul.w	r3, r2, r3
    1002:	9a02      	ldr	r2, [sp, #8]
    1004:	1ad3      	subs	r3, r2, r3
    1006:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1008:	4a1b      	ldr	r2, [pc, #108]	; (1078 <_PrintUnsigned+0x158>)
    100a:	9b05      	ldr	r3, [sp, #20]
    100c:	4413      	add	r3, r2
    100e:	781b      	ldrb	r3, [r3, #0]
    1010:	4619      	mov	r1, r3
    1012:	9803      	ldr	r0, [sp, #12]
    1014:	f7ff ff45 	bl	ea2 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1018:	9b03      	ldr	r3, [sp, #12]
    101a:	68db      	ldr	r3, [r3, #12]
    101c:	2b00      	cmp	r3, #0
    101e:	db08      	blt.n	1032 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1020:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1022:	9b01      	ldr	r3, [sp, #4]
    1024:	fbb2 f3f3 	udiv	r3, r2, r3
    1028:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    102a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    102c:	2b00      	cmp	r3, #0
    102e:	d1df      	bne.n	ff0 <_PrintUnsigned+0xd0>
    1030:	e000      	b.n	1034 <_PrintUnsigned+0x114>
        break;
    1032:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1036:	f003 0301 	and.w	r3, r3, #1
    103a:	2b00      	cmp	r3, #0
    103c:	d017      	beq.n	106e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    103e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1040:	2b00      	cmp	r3, #0
    1042:	d014      	beq.n	106e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1044:	e00a      	b.n	105c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1048:	3b01      	subs	r3, #1
    104a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    104c:	2120      	movs	r1, #32
    104e:	9803      	ldr	r0, [sp, #12]
    1050:	f7ff ff27 	bl	ea2 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1054:	9b03      	ldr	r3, [sp, #12]
    1056:	68db      	ldr	r3, [r3, #12]
    1058:	2b00      	cmp	r3, #0
    105a:	db07      	blt.n	106c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    105c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    105e:	2b00      	cmp	r3, #0
    1060:	d005      	beq.n	106e <_PrintUnsigned+0x14e>
    1062:	9a07      	ldr	r2, [sp, #28]
    1064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1066:	429a      	cmp	r2, r3
    1068:	d3ed      	bcc.n	1046 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    106a:	e000      	b.n	106e <_PrintUnsigned+0x14e>
            break;
    106c:	bf00      	nop
}
    106e:	bf00      	nop
    1070:	b00b      	add	sp, #44	; 0x2c
    1072:	f85d fb04 	ldr.w	pc, [sp], #4
    1076:	bf00      	nop
    1078:	0001108c 	.word	0x0001108c

0000107c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    107c:	b500      	push	{lr}
    107e:	b089      	sub	sp, #36	; 0x24
    1080:	9005      	str	r0, [sp, #20]
    1082:	9104      	str	r1, [sp, #16]
    1084:	9203      	str	r2, [sp, #12]
    1086:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1088:	9b04      	ldr	r3, [sp, #16]
    108a:	2b00      	cmp	r3, #0
    108c:	bfb8      	it	lt
    108e:	425b      	neglt	r3, r3
    1090:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1092:	2301      	movs	r3, #1
    1094:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1096:	e007      	b.n	10a8 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1098:	9b03      	ldr	r3, [sp, #12]
    109a:	9a06      	ldr	r2, [sp, #24]
    109c:	fb92 f3f3 	sdiv	r3, r2, r3
    10a0:	9306      	str	r3, [sp, #24]
    Width++;
    10a2:	9b07      	ldr	r3, [sp, #28]
    10a4:	3301      	adds	r3, #1
    10a6:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10a8:	9b03      	ldr	r3, [sp, #12]
    10aa:	9a06      	ldr	r2, [sp, #24]
    10ac:	429a      	cmp	r2, r3
    10ae:	daf3      	bge.n	1098 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    10b0:	9a02      	ldr	r2, [sp, #8]
    10b2:	9b07      	ldr	r3, [sp, #28]
    10b4:	429a      	cmp	r2, r3
    10b6:	d901      	bls.n	10bc <_PrintInt+0x40>
    Width = NumDigits;
    10b8:	9b02      	ldr	r3, [sp, #8]
    10ba:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    10bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10be:	2b00      	cmp	r3, #0
    10c0:	d00a      	beq.n	10d8 <_PrintInt+0x5c>
    10c2:	9b04      	ldr	r3, [sp, #16]
    10c4:	2b00      	cmp	r3, #0
    10c6:	db04      	blt.n	10d2 <_PrintInt+0x56>
    10c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10ca:	f003 0304 	and.w	r3, r3, #4
    10ce:	2b00      	cmp	r3, #0
    10d0:	d002      	beq.n	10d8 <_PrintInt+0x5c>
    FieldWidth--;
    10d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10d4:	3b01      	subs	r3, #1
    10d6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    10d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10da:	f003 0302 	and.w	r3, r3, #2
    10de:	2b00      	cmp	r3, #0
    10e0:	d002      	beq.n	10e8 <_PrintInt+0x6c>
    10e2:	9b02      	ldr	r3, [sp, #8]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d01c      	beq.n	1122 <_PrintInt+0xa6>
    10e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10ea:	f003 0301 	and.w	r3, r3, #1
    10ee:	2b00      	cmp	r3, #0
    10f0:	d117      	bne.n	1122 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    10f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f4:	2b00      	cmp	r3, #0
    10f6:	d014      	beq.n	1122 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10f8:	e00a      	b.n	1110 <_PrintInt+0x94>
        FieldWidth--;
    10fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10fc:	3b01      	subs	r3, #1
    10fe:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1100:	2120      	movs	r1, #32
    1102:	9805      	ldr	r0, [sp, #20]
    1104:	f7ff fecd 	bl	ea2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1108:	9b05      	ldr	r3, [sp, #20]
    110a:	68db      	ldr	r3, [r3, #12]
    110c:	2b00      	cmp	r3, #0
    110e:	db07      	blt.n	1120 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1112:	2b00      	cmp	r3, #0
    1114:	d005      	beq.n	1122 <_PrintInt+0xa6>
    1116:	9a07      	ldr	r2, [sp, #28]
    1118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    111a:	429a      	cmp	r2, r3
    111c:	d3ed      	bcc.n	10fa <_PrintInt+0x7e>
    111e:	e000      	b.n	1122 <_PrintInt+0xa6>
          break;
    1120:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1122:	9b05      	ldr	r3, [sp, #20]
    1124:	68db      	ldr	r3, [r3, #12]
    1126:	2b00      	cmp	r3, #0
    1128:	db4a      	blt.n	11c0 <_PrintInt+0x144>
    if (v < 0) {
    112a:	9b04      	ldr	r3, [sp, #16]
    112c:	2b00      	cmp	r3, #0
    112e:	da07      	bge.n	1140 <_PrintInt+0xc4>
      v = -v;
    1130:	9b04      	ldr	r3, [sp, #16]
    1132:	425b      	negs	r3, r3
    1134:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1136:	212d      	movs	r1, #45	; 0x2d
    1138:	9805      	ldr	r0, [sp, #20]
    113a:	f7ff feb2 	bl	ea2 <_StoreChar>
    113e:	e008      	b.n	1152 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1142:	f003 0304 	and.w	r3, r3, #4
    1146:	2b00      	cmp	r3, #0
    1148:	d003      	beq.n	1152 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    114a:	212b      	movs	r1, #43	; 0x2b
    114c:	9805      	ldr	r0, [sp, #20]
    114e:	f7ff fea8 	bl	ea2 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1152:	9b05      	ldr	r3, [sp, #20]
    1154:	68db      	ldr	r3, [r3, #12]
    1156:	2b00      	cmp	r3, #0
    1158:	db32      	blt.n	11c0 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    115a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    115c:	f003 0302 	and.w	r3, r3, #2
    1160:	2b00      	cmp	r3, #0
    1162:	d01f      	beq.n	11a4 <_PrintInt+0x128>
    1164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1166:	f003 0301 	and.w	r3, r3, #1
    116a:	2b00      	cmp	r3, #0
    116c:	d11a      	bne.n	11a4 <_PrintInt+0x128>
    116e:	9b02      	ldr	r3, [sp, #8]
    1170:	2b00      	cmp	r3, #0
    1172:	d117      	bne.n	11a4 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1176:	2b00      	cmp	r3, #0
    1178:	d014      	beq.n	11a4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    117a:	e00a      	b.n	1192 <_PrintInt+0x116>
            FieldWidth--;
    117c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    117e:	3b01      	subs	r3, #1
    1180:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1182:	2130      	movs	r1, #48	; 0x30
    1184:	9805      	ldr	r0, [sp, #20]
    1186:	f7ff fe8c 	bl	ea2 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    118a:	9b05      	ldr	r3, [sp, #20]
    118c:	68db      	ldr	r3, [r3, #12]
    118e:	2b00      	cmp	r3, #0
    1190:	db07      	blt.n	11a2 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1194:	2b00      	cmp	r3, #0
    1196:	d005      	beq.n	11a4 <_PrintInt+0x128>
    1198:	9a07      	ldr	r2, [sp, #28]
    119a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    119c:	429a      	cmp	r2, r3
    119e:	d3ed      	bcc.n	117c <_PrintInt+0x100>
    11a0:	e000      	b.n	11a4 <_PrintInt+0x128>
              break;
    11a2:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    11a4:	9b05      	ldr	r3, [sp, #20]
    11a6:	68db      	ldr	r3, [r3, #12]
    11a8:	2b00      	cmp	r3, #0
    11aa:	db09      	blt.n	11c0 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    11ac:	9904      	ldr	r1, [sp, #16]
    11ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11b0:	9301      	str	r3, [sp, #4]
    11b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b4:	9300      	str	r3, [sp, #0]
    11b6:	9b02      	ldr	r3, [sp, #8]
    11b8:	9a03      	ldr	r2, [sp, #12]
    11ba:	9805      	ldr	r0, [sp, #20]
    11bc:	f7ff feb0 	bl	f20 <_PrintUnsigned>
      }
    }
  }
}
    11c0:	bf00      	nop
    11c2:	b009      	add	sp, #36	; 0x24
    11c4:	f85d fb04 	ldr.w	pc, [sp], #4

000011c8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    11c8:	b500      	push	{lr}
    11ca:	b0a3      	sub	sp, #140	; 0x8c
    11cc:	9005      	str	r0, [sp, #20]
    11ce:	9104      	str	r1, [sp, #16]
    11d0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    11d2:	ab06      	add	r3, sp, #24
    11d4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    11d6:	2340      	movs	r3, #64	; 0x40
    11d8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    11da:	2300      	movs	r3, #0
    11dc:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    11de:	9b05      	ldr	r3, [sp, #20]
    11e0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    11e2:	2300      	movs	r3, #0
    11e4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    11e6:	9b04      	ldr	r3, [sp, #16]
    11e8:	781b      	ldrb	r3, [r3, #0]
    11ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    11ee:	9b04      	ldr	r3, [sp, #16]
    11f0:	3301      	adds	r3, #1
    11f2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    11f4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    11f8:	2b00      	cmp	r3, #0
    11fa:	f000 819c 	beq.w	1536 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    11fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1202:	2b25      	cmp	r3, #37	; 0x25
    1204:	f040 818b 	bne.w	151e <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1208:	2300      	movs	r3, #0
    120a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    120c:	2301      	movs	r3, #1
    120e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1210:	9b04      	ldr	r3, [sp, #16]
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1218:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    121c:	3b23      	subs	r3, #35	; 0x23
    121e:	2b0d      	cmp	r3, #13
    1220:	d83e      	bhi.n	12a0 <SEGGER_RTT_vprintf+0xd8>
    1222:	a201      	add	r2, pc, #4	; (adr r2, 1228 <SEGGER_RTT_vprintf+0x60>)
    1224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1228:	00001291 	.word	0x00001291
    122c:	000012a1 	.word	0x000012a1
    1230:	000012a1 	.word	0x000012a1
    1234:	000012a1 	.word	0x000012a1
    1238:	000012a1 	.word	0x000012a1
    123c:	000012a1 	.word	0x000012a1
    1240:	000012a1 	.word	0x000012a1
    1244:	000012a1 	.word	0x000012a1
    1248:	00001281 	.word	0x00001281
    124c:	000012a1 	.word	0x000012a1
    1250:	00001261 	.word	0x00001261
    1254:	000012a1 	.word	0x000012a1
    1258:	000012a1 	.word	0x000012a1
    125c:	00001271 	.word	0x00001271
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1260:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1262:	f043 0301 	orr.w	r3, r3, #1
    1266:	931e      	str	r3, [sp, #120]	; 0x78
    1268:	9b04      	ldr	r3, [sp, #16]
    126a:	3301      	adds	r3, #1
    126c:	9304      	str	r3, [sp, #16]
    126e:	e01a      	b.n	12a6 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1270:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1272:	f043 0302 	orr.w	r3, r3, #2
    1276:	931e      	str	r3, [sp, #120]	; 0x78
    1278:	9b04      	ldr	r3, [sp, #16]
    127a:	3301      	adds	r3, #1
    127c:	9304      	str	r3, [sp, #16]
    127e:	e012      	b.n	12a6 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1280:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1282:	f043 0304 	orr.w	r3, r3, #4
    1286:	931e      	str	r3, [sp, #120]	; 0x78
    1288:	9b04      	ldr	r3, [sp, #16]
    128a:	3301      	adds	r3, #1
    128c:	9304      	str	r3, [sp, #16]
    128e:	e00a      	b.n	12a6 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1290:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1292:	f043 0308 	orr.w	r3, r3, #8
    1296:	931e      	str	r3, [sp, #120]	; 0x78
    1298:	9b04      	ldr	r3, [sp, #16]
    129a:	3301      	adds	r3, #1
    129c:	9304      	str	r3, [sp, #16]
    129e:	e002      	b.n	12a6 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    12a0:	2300      	movs	r3, #0
    12a2:	9320      	str	r3, [sp, #128]	; 0x80
    12a4:	bf00      	nop
        }
      } while (v);
    12a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    12a8:	2b00      	cmp	r3, #0
    12aa:	d1b1      	bne.n	1210 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    12ac:	2300      	movs	r3, #0
    12ae:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    12b0:	9b04      	ldr	r3, [sp, #16]
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    12b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12bc:	2b2f      	cmp	r3, #47	; 0x2f
    12be:	d912      	bls.n	12e6 <SEGGER_RTT_vprintf+0x11e>
    12c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12c4:	2b39      	cmp	r3, #57	; 0x39
    12c6:	d80e      	bhi.n	12e6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    12c8:	9b04      	ldr	r3, [sp, #16]
    12ca:	3301      	adds	r3, #1
    12cc:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    12ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    12d0:	4613      	mov	r3, r2
    12d2:	009b      	lsls	r3, r3, #2
    12d4:	4413      	add	r3, r2
    12d6:	005b      	lsls	r3, r3, #1
    12d8:	461a      	mov	r2, r3
    12da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12de:	4413      	add	r3, r2
    12e0:	3b30      	subs	r3, #48	; 0x30
    12e2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    12e4:	e7e4      	b.n	12b0 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    12e6:	2300      	movs	r3, #0
    12e8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    12ea:	9b04      	ldr	r3, [sp, #16]
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    12f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12f6:	2b2e      	cmp	r3, #46	; 0x2e
    12f8:	d11d      	bne.n	1336 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    12fa:	9b04      	ldr	r3, [sp, #16]
    12fc:	3301      	adds	r3, #1
    12fe:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1300:	9b04      	ldr	r3, [sp, #16]
    1302:	781b      	ldrb	r3, [r3, #0]
    1304:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1308:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    130c:	2b2f      	cmp	r3, #47	; 0x2f
    130e:	d912      	bls.n	1336 <SEGGER_RTT_vprintf+0x16e>
    1310:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1314:	2b39      	cmp	r3, #57	; 0x39
    1316:	d80e      	bhi.n	1336 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1318:	9b04      	ldr	r3, [sp, #16]
    131a:	3301      	adds	r3, #1
    131c:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    131e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1320:	4613      	mov	r3, r2
    1322:	009b      	lsls	r3, r3, #2
    1324:	4413      	add	r3, r2
    1326:	005b      	lsls	r3, r3, #1
    1328:	461a      	mov	r2, r3
    132a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    132e:	4413      	add	r3, r2
    1330:	3b30      	subs	r3, #48	; 0x30
    1332:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1334:	e7e4      	b.n	1300 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1336:	9b04      	ldr	r3, [sp, #16]
    1338:	781b      	ldrb	r3, [r3, #0]
    133a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    133e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1342:	2b6c      	cmp	r3, #108	; 0x6c
    1344:	d003      	beq.n	134e <SEGGER_RTT_vprintf+0x186>
    1346:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    134a:	2b68      	cmp	r3, #104	; 0x68
    134c:	d107      	bne.n	135e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    134e:	9b04      	ldr	r3, [sp, #16]
    1350:	3301      	adds	r3, #1
    1352:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1354:	9b04      	ldr	r3, [sp, #16]
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    135c:	e7ef      	b.n	133e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    135e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1362:	2b25      	cmp	r3, #37	; 0x25
    1364:	f000 80d0 	beq.w	1508 <SEGGER_RTT_vprintf+0x340>
    1368:	2b25      	cmp	r3, #37	; 0x25
    136a:	f2c0 80d3 	blt.w	1514 <SEGGER_RTT_vprintf+0x34c>
    136e:	2b78      	cmp	r3, #120	; 0x78
    1370:	f300 80d0 	bgt.w	1514 <SEGGER_RTT_vprintf+0x34c>
    1374:	2b58      	cmp	r3, #88	; 0x58
    1376:	f2c0 80cd 	blt.w	1514 <SEGGER_RTT_vprintf+0x34c>
    137a:	3b58      	subs	r3, #88	; 0x58
    137c:	2b20      	cmp	r3, #32
    137e:	f200 80c9 	bhi.w	1514 <SEGGER_RTT_vprintf+0x34c>
    1382:	a201      	add	r2, pc, #4	; (adr r2, 1388 <SEGGER_RTT_vprintf+0x1c0>)
    1384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1388:	00001479 	.word	0x00001479
    138c:	00001515 	.word	0x00001515
    1390:	00001515 	.word	0x00001515
    1394:	00001515 	.word	0x00001515
    1398:	00001515 	.word	0x00001515
    139c:	00001515 	.word	0x00001515
    13a0:	00001515 	.word	0x00001515
    13a4:	00001515 	.word	0x00001515
    13a8:	00001515 	.word	0x00001515
    13ac:	00001515 	.word	0x00001515
    13b0:	00001515 	.word	0x00001515
    13b4:	0000140d 	.word	0x0000140d
    13b8:	00001431 	.word	0x00001431
    13bc:	00001515 	.word	0x00001515
    13c0:	00001515 	.word	0x00001515
    13c4:	00001515 	.word	0x00001515
    13c8:	00001515 	.word	0x00001515
    13cc:	00001515 	.word	0x00001515
    13d0:	00001515 	.word	0x00001515
    13d4:	00001515 	.word	0x00001515
    13d8:	00001515 	.word	0x00001515
    13dc:	00001515 	.word	0x00001515
    13e0:	00001515 	.word	0x00001515
    13e4:	00001515 	.word	0x00001515
    13e8:	000014e5 	.word	0x000014e5
    13ec:	00001515 	.word	0x00001515
    13f0:	00001515 	.word	0x00001515
    13f4:	0000149d 	.word	0x0000149d
    13f8:	00001515 	.word	0x00001515
    13fc:	00001455 	.word	0x00001455
    1400:	00001515 	.word	0x00001515
    1404:	00001515 	.word	0x00001515
    1408:	00001479 	.word	0x00001479
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    140c:	9b03      	ldr	r3, [sp, #12]
    140e:	681b      	ldr	r3, [r3, #0]
    1410:	1d19      	adds	r1, r3, #4
    1412:	9a03      	ldr	r2, [sp, #12]
    1414:	6011      	str	r1, [r2, #0]
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    141a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    141c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1420:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1424:	ab16      	add	r3, sp, #88	; 0x58
    1426:	4611      	mov	r1, r2
    1428:	4618      	mov	r0, r3
    142a:	f7ff fd3a 	bl	ea2 <_StoreChar>
        break;
    142e:	e072      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	1d19      	adds	r1, r3, #4
    1436:	9a03      	ldr	r2, [sp, #12]
    1438:	6011      	str	r1, [r2, #0]
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    143e:	a816      	add	r0, sp, #88	; 0x58
    1440:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1442:	9301      	str	r3, [sp, #4]
    1444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1446:	9300      	str	r3, [sp, #0]
    1448:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    144a:	220a      	movs	r2, #10
    144c:	9920      	ldr	r1, [sp, #128]	; 0x80
    144e:	f7ff fe15 	bl	107c <_PrintInt>
        break;
    1452:	e060      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1454:	9b03      	ldr	r3, [sp, #12]
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	1d19      	adds	r1, r3, #4
    145a:	9a03      	ldr	r2, [sp, #12]
    145c:	6011      	str	r1, [r2, #0]
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1462:	9920      	ldr	r1, [sp, #128]	; 0x80
    1464:	a816      	add	r0, sp, #88	; 0x58
    1466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1468:	9301      	str	r3, [sp, #4]
    146a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    146c:	9300      	str	r3, [sp, #0]
    146e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1470:	220a      	movs	r2, #10
    1472:	f7ff fd55 	bl	f20 <_PrintUnsigned>
        break;
    1476:	e04e      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1478:	9b03      	ldr	r3, [sp, #12]
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	1d19      	adds	r1, r3, #4
    147e:	9a03      	ldr	r2, [sp, #12]
    1480:	6011      	str	r1, [r2, #0]
    1482:	681b      	ldr	r3, [r3, #0]
    1484:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1486:	9920      	ldr	r1, [sp, #128]	; 0x80
    1488:	a816      	add	r0, sp, #88	; 0x58
    148a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    148c:	9301      	str	r3, [sp, #4]
    148e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1490:	9300      	str	r3, [sp, #0]
    1492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1494:	2210      	movs	r2, #16
    1496:	f7ff fd43 	bl	f20 <_PrintUnsigned>
        break;
    149a:	e03c      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    149c:	9b03      	ldr	r3, [sp, #12]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	1d19      	adds	r1, r3, #4
    14a2:	9a03      	ldr	r2, [sp, #12]
    14a4:	6011      	str	r1, [r2, #0]
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    14aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14ac:	2b00      	cmp	r3, #0
    14ae:	d101      	bne.n	14b4 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    14b0:	4b2c      	ldr	r3, [pc, #176]	; (1564 <SEGGER_RTT_vprintf+0x39c>)
    14b2:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    14b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14b6:	781b      	ldrb	r3, [r3, #0]
    14b8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    14bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14be:	3301      	adds	r3, #1
    14c0:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    14c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14c6:	2b00      	cmp	r3, #0
    14c8:	d00a      	beq.n	14e0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    14ca:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    14ce:	ab16      	add	r3, sp, #88	; 0x58
    14d0:	4611      	mov	r1, r2
    14d2:	4618      	mov	r0, r3
    14d4:	f7ff fce5 	bl	ea2 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    14d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14da:	2b00      	cmp	r3, #0
    14dc:	daea      	bge.n	14b4 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    14de:	e01a      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
              break;
    14e0:	bf00      	nop
        break;
    14e2:	e018      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    14e4:	9b03      	ldr	r3, [sp, #12]
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	1d19      	adds	r1, r3, #4
    14ea:	9a03      	ldr	r2, [sp, #12]
    14ec:	6011      	str	r1, [r2, #0]
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    14f2:	9920      	ldr	r1, [sp, #128]	; 0x80
    14f4:	a816      	add	r0, sp, #88	; 0x58
    14f6:	2300      	movs	r3, #0
    14f8:	9301      	str	r3, [sp, #4]
    14fa:	2308      	movs	r3, #8
    14fc:	9300      	str	r3, [sp, #0]
    14fe:	2308      	movs	r3, #8
    1500:	2210      	movs	r2, #16
    1502:	f7ff fd0d 	bl	f20 <_PrintUnsigned>
        break;
    1506:	e006      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1508:	ab16      	add	r3, sp, #88	; 0x58
    150a:	2125      	movs	r1, #37	; 0x25
    150c:	4618      	mov	r0, r3
    150e:	f7ff fcc8 	bl	ea2 <_StoreChar>
        break;
    1512:	e000      	b.n	1516 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1514:	bf00      	nop
      }
      sFormat++;
    1516:	9b04      	ldr	r3, [sp, #16]
    1518:	3301      	adds	r3, #1
    151a:	9304      	str	r3, [sp, #16]
    151c:	e006      	b.n	152c <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    151e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1522:	ab16      	add	r3, sp, #88	; 0x58
    1524:	4611      	mov	r1, r2
    1526:	4618      	mov	r0, r3
    1528:	f7ff fcbb 	bl	ea2 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    152c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    152e:	2b00      	cmp	r3, #0
    1530:	f6bf ae59 	bge.w	11e6 <SEGGER_RTT_vprintf+0x1e>
    1534:	e000      	b.n	1538 <SEGGER_RTT_vprintf+0x370>
      break;
    1536:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1538:	9b19      	ldr	r3, [sp, #100]	; 0x64
    153a:	2b00      	cmp	r3, #0
    153c:	dd0c      	ble.n	1558 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    153e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1540:	2b00      	cmp	r3, #0
    1542:	d005      	beq.n	1550 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1544:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1546:	ab06      	add	r3, sp, #24
    1548:	4619      	mov	r1, r3
    154a:	9805      	ldr	r0, [sp, #20]
    154c:	f7ff fc7e 	bl	e4c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1550:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1552:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1554:	4413      	add	r3, r2
    1556:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1558:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    155a:	4618      	mov	r0, r3
    155c:	b023      	add	sp, #140	; 0x8c
    155e:	f85d fb04 	ldr.w	pc, [sp], #4
    1562:	bf00      	nop
    1564:	00010228 	.word	0x00010228

00001568 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1568:	b40e      	push	{r1, r2, r3}
    156a:	b500      	push	{lr}
    156c:	b084      	sub	sp, #16
    156e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1570:	ab06      	add	r3, sp, #24
    1572:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1574:	ab02      	add	r3, sp, #8
    1576:	461a      	mov	r2, r3
    1578:	9905      	ldr	r1, [sp, #20]
    157a:	9801      	ldr	r0, [sp, #4]
    157c:	f7ff fe24 	bl	11c8 <SEGGER_RTT_vprintf>
    1580:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1582:	9b03      	ldr	r3, [sp, #12]
}
    1584:	4618      	mov	r0, r3
    1586:	b004      	add	sp, #16
    1588:	f85d eb04 	ldr.w	lr, [sp], #4
    158c:	b003      	add	sp, #12
    158e:	4770      	bx	lr

00001590 <memcpy>:
    1590:	440a      	add	r2, r1
    1592:	4291      	cmp	r1, r2
    1594:	f100 33ff 	add.w	r3, r0, #4294967295
    1598:	d100      	bne.n	159c <memcpy+0xc>
    159a:	4770      	bx	lr
    159c:	b510      	push	{r4, lr}
    159e:	f811 4b01 	ldrb.w	r4, [r1], #1
    15a2:	f803 4f01 	strb.w	r4, [r3, #1]!
    15a6:	4291      	cmp	r1, r2
    15a8:	d1f9      	bne.n	159e <memcpy+0xe>
    15aa:	bd10      	pop	{r4, pc}

000015ac <memset>:
    15ac:	4402      	add	r2, r0
    15ae:	4603      	mov	r3, r0
    15b0:	4293      	cmp	r3, r2
    15b2:	d100      	bne.n	15b6 <memset+0xa>
    15b4:	4770      	bx	lr
    15b6:	f803 1b01 	strb.w	r1, [r3], #1
    15ba:	e7f9      	b.n	15b0 <memset+0x4>

000015bc <IoHwAb_AdcNotification_0>:
{
    15bc:	b508      	push	{r3, lr}
    AdcFlag = TRUE;
    15be:	4b04      	ldr	r3, [pc, #16]	; (15d0 <IoHwAb_AdcNotification_0+0x14>)
    15c0:	2201      	movs	r2, #1
    15c2:	701a      	strb	r2, [r3, #0]
    Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );    
    15c4:	4903      	ldr	r1, [pc, #12]	; (15d4 <IoHwAb_AdcNotification_0+0x18>)
    15c6:	2000      	movs	r0, #0
    15c8:	f006 fa28 	bl	7a1c <Adc_ReadGroup>
}
    15cc:	bf00      	nop
    15ce:	bd08      	pop	{r3, pc}
    15d0:	1fff8b30 	.word	0x1fff8b30
    15d4:	1fff8b34 	.word	0x1fff8b34

000015d8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    15d8:	b086      	sub	sp, #24
    15da:	9003      	str	r0, [sp, #12]
    15dc:	9102      	str	r1, [sp, #8]
    15de:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    15e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    15e4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    15e8:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    15ea:	9b01      	ldr	r3, [sp, #4]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d007      	beq.n	1600 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    15f0:	9b03      	ldr	r3, [sp, #12]
    15f2:	3310      	adds	r3, #16
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	9a05      	ldr	r2, [sp, #20]
    15f8:	4413      	add	r3, r2
    15fa:	681a      	ldr	r2, [r3, #0]
    15fc:	9b01      	ldr	r3, [sp, #4]
    15fe:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1600:	9b03      	ldr	r3, [sp, #12]
    1602:	3310      	adds	r3, #16
    1604:	009b      	lsls	r3, r3, #2
    1606:	9a05      	ldr	r2, [sp, #20]
    1608:	4413      	add	r3, r2
    160a:	9a02      	ldr	r2, [sp, #8]
    160c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    160e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1612:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1616:	bf00      	nop
    1618:	b006      	add	sp, #24
    161a:	4770      	bx	lr

0000161c <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    161c:	b082      	sub	sp, #8
    161e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1620:	9b01      	ldr	r3, [sp, #4]
    1622:	f003 021f 	and.w	r2, r3, #31
    1626:	4905      	ldr	r1, [pc, #20]	; (163c <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1628:	9b01      	ldr	r3, [sp, #4]
    162a:	095b      	lsrs	r3, r3, #5
    162c:	2001      	movs	r0, #1
    162e:	fa00 f202 	lsl.w	r2, r0, r2
    1632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1636:	bf00      	nop
    1638:	b002      	add	sp, #8
    163a:	4770      	bx	lr
    163c:	e000e100 	.word	0xe000e100

00001640 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1640:	b082      	sub	sp, #8
    1642:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1644:	9b01      	ldr	r3, [sp, #4]
    1646:	f003 021f 	and.w	r2, r3, #31
    164a:	4906      	ldr	r1, [pc, #24]	; (1664 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    164c:	9b01      	ldr	r3, [sp, #4]
    164e:	095b      	lsrs	r3, r3, #5
    1650:	2001      	movs	r0, #1
    1652:	fa00 f202 	lsl.w	r2, r0, r2
    1656:	3320      	adds	r3, #32
    1658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    165c:	bf00      	nop
    165e:	b002      	add	sp, #8
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	e000e100 	.word	0xe000e100

00001668 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1668:	b084      	sub	sp, #16
    166a:	9001      	str	r0, [sp, #4]
    166c:	460b      	mov	r3, r1
    166e:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1672:	2304      	movs	r3, #4
    1674:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1678:	f89d 2003 	ldrb.w	r2, [sp, #3]
    167c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1680:	fa02 f103 	lsl.w	r1, r2, r3
    1684:	4a04      	ldr	r2, [pc, #16]	; (1698 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1686:	9b01      	ldr	r3, [sp, #4]
    1688:	b2c9      	uxtb	r1, r1
    168a:	4413      	add	r3, r2
    168c:	460a      	mov	r2, r1
    168e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1692:	bf00      	nop
    1694:	b004      	add	sp, #16
    1696:	4770      	bx	lr
    1698:	e000e100 	.word	0xe000e100

0000169c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    169c:	b084      	sub	sp, #16
    169e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    16a0:	2304      	movs	r3, #4
    16a2:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    16a6:	4a09      	ldr	r2, [pc, #36]	; (16cc <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    16a8:	9b01      	ldr	r3, [sp, #4]
    16aa:	4413      	add	r3, r2
    16ac:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    16b0:	b2db      	uxtb	r3, r3
    16b2:	461a      	mov	r2, r3
    16b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16b8:	fa42 f303 	asr.w	r3, r2, r3
    16bc:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    16c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    16c4:	4618      	mov	r0, r3
    16c6:	b004      	add	sp, #16
    16c8:	4770      	bx	lr
    16ca:	bf00      	nop
    16cc:	e000e100 	.word	0xe000e100

000016d0 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    16d0:	b082      	sub	sp, #8
    16d2:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16d4:	9b01      	ldr	r3, [sp, #4]
    16d6:	f003 021f 	and.w	r2, r3, #31
    16da:	4906      	ldr	r1, [pc, #24]	; (16f4 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    16dc:	9b01      	ldr	r3, [sp, #4]
    16de:	095b      	lsrs	r3, r3, #5
    16e0:	2001      	movs	r0, #1
    16e2:	fa00 f202 	lsl.w	r2, r0, r2
    16e6:	3360      	adds	r3, #96	; 0x60
    16e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    16ec:	bf00      	nop
    16ee:	b002      	add	sp, #8
    16f0:	4770      	bx	lr
    16f2:	bf00      	nop
    16f4:	e000e100 	.word	0xe000e100

000016f8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    16f8:	b500      	push	{lr}
    16fa:	b085      	sub	sp, #20
    16fc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    16fe:	2300      	movs	r3, #0
    1700:	9303      	str	r3, [sp, #12]
    1702:	e05d      	b.n	17c0 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1704:	9b01      	ldr	r3, [sp, #4]
    1706:	6859      	ldr	r1, [r3, #4]
    1708:	9a03      	ldr	r2, [sp, #12]
    170a:	4613      	mov	r3, r2
    170c:	005b      	lsls	r3, r3, #1
    170e:	4413      	add	r3, r2
    1710:	009b      	lsls	r3, r3, #2
    1712:	440b      	add	r3, r1
    1714:	681b      	ldr	r3, [r3, #0]
    1716:	4618      	mov	r0, r3
    1718:	f000 f899 	bl	184e <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	6859      	ldr	r1, [r3, #4]
    1720:	9a03      	ldr	r2, [sp, #12]
    1722:	4613      	mov	r3, r2
    1724:	005b      	lsls	r3, r3, #1
    1726:	4413      	add	r3, r2
    1728:	009b      	lsls	r3, r3, #2
    172a:	440b      	add	r3, r1
    172c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    172e:	9b01      	ldr	r3, [sp, #4]
    1730:	6859      	ldr	r1, [r3, #4]
    1732:	9a03      	ldr	r2, [sp, #12]
    1734:	4613      	mov	r3, r2
    1736:	005b      	lsls	r3, r3, #1
    1738:	4413      	add	r3, r2
    173a:	009b      	lsls	r3, r3, #2
    173c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    173e:	795b      	ldrb	r3, [r3, #5]
    1740:	4619      	mov	r1, r3
    1742:	f000 f869 	bl	1818 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1746:	9b01      	ldr	r3, [sp, #4]
    1748:	6859      	ldr	r1, [r3, #4]
    174a:	9a03      	ldr	r2, [sp, #12]
    174c:	4613      	mov	r3, r2
    174e:	005b      	lsls	r3, r3, #1
    1750:	4413      	add	r3, r2
    1752:	009b      	lsls	r3, r3, #2
    1754:	440b      	add	r3, r1
    1756:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1758:	9b01      	ldr	r3, [sp, #4]
    175a:	6859      	ldr	r1, [r3, #4]
    175c:	9a03      	ldr	r2, [sp, #12]
    175e:	4613      	mov	r3, r2
    1760:	005b      	lsls	r3, r3, #1
    1762:	4413      	add	r3, r2
    1764:	009b      	lsls	r3, r3, #2
    1766:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1768:	689b      	ldr	r3, [r3, #8]
    176a:	2200      	movs	r2, #0
    176c:	4619      	mov	r1, r3
    176e:	f000 f831 	bl	17d4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1772:	9b01      	ldr	r3, [sp, #4]
    1774:	6859      	ldr	r1, [r3, #4]
    1776:	9a03      	ldr	r2, [sp, #12]
    1778:	4613      	mov	r3, r2
    177a:	005b      	lsls	r3, r3, #1
    177c:	4413      	add	r3, r2
    177e:	009b      	lsls	r3, r3, #2
    1780:	440b      	add	r3, r1
    1782:	791b      	ldrb	r3, [r3, #4]
    1784:	2b00      	cmp	r3, #0
    1786:	d00c      	beq.n	17a2 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1788:	9b01      	ldr	r3, [sp, #4]
    178a:	6859      	ldr	r1, [r3, #4]
    178c:	9a03      	ldr	r2, [sp, #12]
    178e:	4613      	mov	r3, r2
    1790:	005b      	lsls	r3, r3, #1
    1792:	4413      	add	r3, r2
    1794:	009b      	lsls	r3, r3, #2
    1796:	440b      	add	r3, r1
    1798:	681b      	ldr	r3, [r3, #0]
    179a:	4618      	mov	r0, r3
    179c:	f000 f828 	bl	17f0 <IntCtrl_Ip_EnableIrq>
    17a0:	e00b      	b.n	17ba <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17a2:	9b01      	ldr	r3, [sp, #4]
    17a4:	6859      	ldr	r1, [r3, #4]
    17a6:	9a03      	ldr	r2, [sp, #12]
    17a8:	4613      	mov	r3, r2
    17aa:	005b      	lsls	r3, r3, #1
    17ac:	4413      	add	r3, r2
    17ae:	009b      	lsls	r3, r3, #2
    17b0:	440b      	add	r3, r1
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	4618      	mov	r0, r3
    17b6:	f000 f825 	bl	1804 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    17ba:	9b03      	ldr	r3, [sp, #12]
    17bc:	3301      	adds	r3, #1
    17be:	9303      	str	r3, [sp, #12]
    17c0:	9b01      	ldr	r3, [sp, #4]
    17c2:	681b      	ldr	r3, [r3, #0]
    17c4:	9a03      	ldr	r2, [sp, #12]
    17c6:	429a      	cmp	r2, r3
    17c8:	d39c      	bcc.n	1704 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    17ca:	2300      	movs	r3, #0
}
    17cc:	4618      	mov	r0, r3
    17ce:	b005      	add	sp, #20
    17d0:	f85d fb04 	ldr.w	pc, [sp], #4

000017d4 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17d4:	b500      	push	{lr}
    17d6:	b085      	sub	sp, #20
    17d8:	9003      	str	r0, [sp, #12]
    17da:	9102      	str	r1, [sp, #8]
    17dc:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    17de:	9a01      	ldr	r2, [sp, #4]
    17e0:	9902      	ldr	r1, [sp, #8]
    17e2:	9803      	ldr	r0, [sp, #12]
    17e4:	f7ff fef8 	bl	15d8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    17e8:	bf00      	nop
    17ea:	b005      	add	sp, #20
    17ec:	f85d fb04 	ldr.w	pc, [sp], #4

000017f0 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    17f0:	b500      	push	{lr}
    17f2:	b083      	sub	sp, #12
    17f4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    17f6:	9801      	ldr	r0, [sp, #4]
    17f8:	f7ff ff10 	bl	161c <IntCtrl_Ip_EnableIrqPrivileged>
}
    17fc:	bf00      	nop
    17fe:	b003      	add	sp, #12
    1800:	f85d fb04 	ldr.w	pc, [sp], #4

00001804 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1804:	b500      	push	{lr}
    1806:	b083      	sub	sp, #12
    1808:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    180a:	9801      	ldr	r0, [sp, #4]
    180c:	f7ff ff18 	bl	1640 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1810:	bf00      	nop
    1812:	b003      	add	sp, #12
    1814:	f85d fb04 	ldr.w	pc, [sp], #4

00001818 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1818:	b500      	push	{lr}
    181a:	b083      	sub	sp, #12
    181c:	9001      	str	r0, [sp, #4]
    181e:	460b      	mov	r3, r1
    1820:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1824:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1828:	4619      	mov	r1, r3
    182a:	9801      	ldr	r0, [sp, #4]
    182c:	f7ff ff1c 	bl	1668 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1830:	bf00      	nop
    1832:	b003      	add	sp, #12
    1834:	f85d fb04 	ldr.w	pc, [sp], #4

00001838 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1838:	b500      	push	{lr}
    183a:	b083      	sub	sp, #12
    183c:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    183e:	9801      	ldr	r0, [sp, #4]
    1840:	f7ff ff2c 	bl	169c <IntCtrl_Ip_GetPriorityPrivileged>
    1844:	4603      	mov	r3, r0
}
    1846:	4618      	mov	r0, r3
    1848:	b003      	add	sp, #12
    184a:	f85d fb04 	ldr.w	pc, [sp], #4

0000184e <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    184e:	b500      	push	{lr}
    1850:	b083      	sub	sp, #12
    1852:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1854:	9801      	ldr	r0, [sp, #4]
    1856:	f7ff ff3b 	bl	16d0 <IntCtrl_Ip_ClearPendingPrivileged>
}
    185a:	bf00      	nop
    185c:	b003      	add	sp, #12
    185e:	f85d fb04 	ldr.w	pc, [sp], #4
    1862:	bf00      	nop

00001864 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1864:	b500      	push	{lr}
    1866:	b083      	sub	sp, #12
    1868:	9001      	str	r0, [sp, #4]
    186a:	460b      	mov	r3, r1
    186c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1870:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1874:	2b00      	cmp	r3, #0
    1876:	d003      	beq.n	1880 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1878:	9801      	ldr	r0, [sp, #4]
    187a:	f7ff ffb9 	bl	17f0 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    187e:	e002      	b.n	1886 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1880:	9801      	ldr	r0, [sp, #4]
    1882:	f7ff ffbf 	bl	1804 <IntCtrl_Ip_DisableIrq>
}
    1886:	bf00      	nop
    1888:	b003      	add	sp, #12
    188a:	f85d fb04 	ldr.w	pc, [sp], #4

0000188e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    188e:	b500      	push	{lr}
    1890:	b083      	sub	sp, #12
    1892:	9001      	str	r0, [sp, #4]
    1894:	460b      	mov	r3, r1
    1896:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    189a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    189e:	4619      	mov	r1, r3
    18a0:	9801      	ldr	r0, [sp, #4]
    18a2:	f7ff ffb9 	bl	1818 <IntCtrl_Ip_SetPriority>
}
    18a6:	bf00      	nop
    18a8:	b003      	add	sp, #12
    18aa:	f85d fb04 	ldr.w	pc, [sp], #4

000018ae <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    18ae:	b500      	push	{lr}
    18b0:	b083      	sub	sp, #12
    18b2:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    18b4:	9801      	ldr	r0, [sp, #4]
    18b6:	f7ff ffbf 	bl	1838 <IntCtrl_Ip_GetPriority>
    18ba:	4603      	mov	r3, r0
}
    18bc:	4618      	mov	r0, r3
    18be:	b003      	add	sp, #12
    18c0:	f85d fb04 	ldr.w	pc, [sp], #4

000018c4 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    18c4:	b500      	push	{lr}
    18c6:	b085      	sub	sp, #20
    18c8:	9003      	str	r0, [sp, #12]
    18ca:	9102      	str	r1, [sp, #8]
    18cc:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    18ce:	9a01      	ldr	r2, [sp, #4]
    18d0:	9902      	ldr	r1, [sp, #8]
    18d2:	9803      	ldr	r0, [sp, #12]
    18d4:	f7ff ff7e 	bl	17d4 <IntCtrl_Ip_InstallHandler>
}
    18d8:	bf00      	nop
    18da:	b005      	add	sp, #20
    18dc:	f85d fb04 	ldr.w	pc, [sp], #4

000018e0 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    18e0:	b500      	push	{lr}
    18e2:	b085      	sub	sp, #20
    18e4:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    18e6:	2300      	movs	r3, #0
    18e8:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    18ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18f0:	4a05      	ldr	r2, [pc, #20]	; (1908 <Platform_Init+0x28>)
    18f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	4618      	mov	r0, r3
    18fa:	f000 f8c7 	bl	1a8c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    18fe:	bf00      	nop
    1900:	b005      	add	sp, #20
    1902:	f85d fb04 	ldr.w	pc, [sp], #4
    1906:	bf00      	nop
    1908:	00010f28 	.word	0x00010f28

0000190c <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    190c:	b500      	push	{lr}
    190e:	b085      	sub	sp, #20
    1910:	9001      	str	r0, [sp, #4]
    1912:	460b      	mov	r3, r1
    1914:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1918:	2300      	movs	r3, #0
    191a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    191e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1922:	4619      	mov	r1, r3
    1924:	9801      	ldr	r0, [sp, #4]
    1926:	f7ff ff9d 	bl	1864 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    192a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    192e:	4618      	mov	r0, r3
    1930:	b005      	add	sp, #20
    1932:	f85d fb04 	ldr.w	pc, [sp], #4

00001936 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1936:	b500      	push	{lr}
    1938:	b085      	sub	sp, #20
    193a:	9001      	str	r0, [sp, #4]
    193c:	460b      	mov	r3, r1
    193e:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1942:	2300      	movs	r3, #0
    1944:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1948:	f89d 3003 	ldrb.w	r3, [sp, #3]
    194c:	4619      	mov	r1, r3
    194e:	9801      	ldr	r0, [sp, #4]
    1950:	f7ff ff9d 	bl	188e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1954:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1958:	4618      	mov	r0, r3
    195a:	b005      	add	sp, #20
    195c:	f85d fb04 	ldr.w	pc, [sp], #4

00001960 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1960:	b500      	push	{lr}
    1962:	b085      	sub	sp, #20
    1964:	9001      	str	r0, [sp, #4]
    1966:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1968:	2300      	movs	r3, #0
    196a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    196e:	9801      	ldr	r0, [sp, #4]
    1970:	f7ff ff9d 	bl	18ae <Platform_Ipw_GetIrqPriority>
    1974:	4603      	mov	r3, r0
    1976:	461a      	mov	r2, r3
    1978:	9b00      	ldr	r3, [sp, #0]
    197a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    197c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1980:	4618      	mov	r0, r3
    1982:	b005      	add	sp, #20
    1984:	f85d fb04 	ldr.w	pc, [sp], #4

00001988 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1988:	b500      	push	{lr}
    198a:	b087      	sub	sp, #28
    198c:	9003      	str	r0, [sp, #12]
    198e:	9102      	str	r1, [sp, #8]
    1990:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1992:	2300      	movs	r3, #0
    1994:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1998:	9a01      	ldr	r2, [sp, #4]
    199a:	9902      	ldr	r1, [sp, #8]
    199c:	9803      	ldr	r0, [sp, #12]
    199e:	f7ff ff91 	bl	18c4 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    19a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    19a6:	4618      	mov	r0, r3
    19a8:	b007      	add	sp, #28
    19aa:	f85d fb04 	ldr.w	pc, [sp], #4
    19ae:	bf00      	nop

000019b0 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    19b0:	b500      	push	{lr}
    19b2:	b085      	sub	sp, #20
    19b4:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19b6:	2300      	movs	r3, #0
    19b8:	9303      	str	r3, [sp, #12]
    19ba:	e05d      	b.n	1a78 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19bc:	9b01      	ldr	r3, [sp, #4]
    19be:	6859      	ldr	r1, [r3, #4]
    19c0:	9a03      	ldr	r2, [sp, #12]
    19c2:	4613      	mov	r3, r2
    19c4:	005b      	lsls	r3, r3, #1
    19c6:	4413      	add	r3, r2
    19c8:	009b      	lsls	r3, r3, #2
    19ca:	440b      	add	r3, r1
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	4618      	mov	r0, r3
    19d0:	f7ff ff3d 	bl	184e <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19d4:	9b01      	ldr	r3, [sp, #4]
    19d6:	6859      	ldr	r1, [r3, #4]
    19d8:	9a03      	ldr	r2, [sp, #12]
    19da:	4613      	mov	r3, r2
    19dc:	005b      	lsls	r3, r3, #1
    19de:	4413      	add	r3, r2
    19e0:	009b      	lsls	r3, r3, #2
    19e2:	440b      	add	r3, r1
    19e4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19e6:	9b01      	ldr	r3, [sp, #4]
    19e8:	6859      	ldr	r1, [r3, #4]
    19ea:	9a03      	ldr	r2, [sp, #12]
    19ec:	4613      	mov	r3, r2
    19ee:	005b      	lsls	r3, r3, #1
    19f0:	4413      	add	r3, r2
    19f2:	009b      	lsls	r3, r3, #2
    19f4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19f6:	795b      	ldrb	r3, [r3, #5]
    19f8:	4619      	mov	r1, r3
    19fa:	f7ff ff0d 	bl	1818 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19fe:	9b01      	ldr	r3, [sp, #4]
    1a00:	6859      	ldr	r1, [r3, #4]
    1a02:	9a03      	ldr	r2, [sp, #12]
    1a04:	4613      	mov	r3, r2
    1a06:	005b      	lsls	r3, r3, #1
    1a08:	4413      	add	r3, r2
    1a0a:	009b      	lsls	r3, r3, #2
    1a0c:	440b      	add	r3, r1
    1a0e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a10:	9b01      	ldr	r3, [sp, #4]
    1a12:	6859      	ldr	r1, [r3, #4]
    1a14:	9a03      	ldr	r2, [sp, #12]
    1a16:	4613      	mov	r3, r2
    1a18:	005b      	lsls	r3, r3, #1
    1a1a:	4413      	add	r3, r2
    1a1c:	009b      	lsls	r3, r3, #2
    1a1e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a20:	689b      	ldr	r3, [r3, #8]
    1a22:	2200      	movs	r2, #0
    1a24:	4619      	mov	r1, r3
    1a26:	f7ff fed5 	bl	17d4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a2a:	9b01      	ldr	r3, [sp, #4]
    1a2c:	6859      	ldr	r1, [r3, #4]
    1a2e:	9a03      	ldr	r2, [sp, #12]
    1a30:	4613      	mov	r3, r2
    1a32:	005b      	lsls	r3, r3, #1
    1a34:	4413      	add	r3, r2
    1a36:	009b      	lsls	r3, r3, #2
    1a38:	440b      	add	r3, r1
    1a3a:	791b      	ldrb	r3, [r3, #4]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d00c      	beq.n	1a5a <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	6859      	ldr	r1, [r3, #4]
    1a44:	9a03      	ldr	r2, [sp, #12]
    1a46:	4613      	mov	r3, r2
    1a48:	005b      	lsls	r3, r3, #1
    1a4a:	4413      	add	r3, r2
    1a4c:	009b      	lsls	r3, r3, #2
    1a4e:	440b      	add	r3, r1
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	4618      	mov	r0, r3
    1a54:	f7ff fecc 	bl	17f0 <IntCtrl_Ip_EnableIrq>
    1a58:	e00b      	b.n	1a72 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	6859      	ldr	r1, [r3, #4]
    1a5e:	9a03      	ldr	r2, [sp, #12]
    1a60:	4613      	mov	r3, r2
    1a62:	005b      	lsls	r3, r3, #1
    1a64:	4413      	add	r3, r2
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	440b      	add	r3, r1
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	4618      	mov	r0, r3
    1a6e:	f7ff fec9 	bl	1804 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a72:	9b03      	ldr	r3, [sp, #12]
    1a74:	3301      	adds	r3, #1
    1a76:	9303      	str	r3, [sp, #12]
    1a78:	9b01      	ldr	r3, [sp, #4]
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	9a03      	ldr	r2, [sp, #12]
    1a7e:	429a      	cmp	r2, r3
    1a80:	d39c      	bcc.n	19bc <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1a82:	2300      	movs	r3, #0
}
    1a84:	4618      	mov	r0, r3
    1a86:	b005      	add	sp, #20
    1a88:	f85d fb04 	ldr.w	pc, [sp], #4

00001a8c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1a8c:	b500      	push	{lr}
    1a8e:	b085      	sub	sp, #20
    1a90:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1a92:	2300      	movs	r3, #0
    1a94:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1a98:	9b01      	ldr	r3, [sp, #4]
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d007      	beq.n	1ab0 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1aa0:	9b01      	ldr	r3, [sp, #4]
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	4618      	mov	r0, r3
    1aa6:	f7ff ff83 	bl	19b0 <Platform_Ipw_InitIntCtrl>
    1aaa:	4603      	mov	r3, r0
    1aac:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1ab0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ab4:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1ab6:	bf00      	nop
    1ab8:	b005      	add	sp, #20
    1aba:	f85d fb04 	ldr.w	pc, [sp], #4

00001abe <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1abe:	2300      	movs	r3, #0
}
    1ac0:	4618      	mov	r0, r3
    1ac2:	4770      	bx	lr

00001ac4 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1ac4:	b082      	sub	sp, #8
    1ac6:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1ac8:	2301      	movs	r3, #1
}
    1aca:	4618      	mov	r0, r3
    1acc:	b002      	add	sp, #8
    1ace:	4770      	bx	lr

00001ad0 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ad0:	b082      	sub	sp, #8
    1ad2:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1ad4:	bf00      	nop
    1ad6:	b002      	add	sp, #8
    1ad8:	4770      	bx	lr

00001ada <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1ada:	b082      	sub	sp, #8
    1adc:	9001      	str	r0, [sp, #4]
    return Micros;
    1ade:	9b01      	ldr	r3, [sp, #4]
}
    1ae0:	4618      	mov	r0, r3
    1ae2:	b002      	add	sp, #8
    1ae4:	4770      	bx	lr

00001ae6 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1ae6:	b500      	push	{lr}
    1ae8:	b083      	sub	sp, #12
    1aea:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1aec:	f000 f86c 	bl	1bc8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1af0:	bf00      	nop
    1af2:	b003      	add	sp, #12
    1af4:	f85d fb04 	ldr.w	pc, [sp], #4

00001af8 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1af8:	b500      	push	{lr}
    1afa:	b085      	sub	sp, #20
    1afc:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1afe:	2300      	movs	r3, #0
    1b00:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b02:	9b01      	ldr	r3, [sp, #4]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d003      	beq.n	1b10 <OsIf_GetCounter+0x18>
    1b08:	9b01      	ldr	r3, [sp, #4]
    1b0a:	2b01      	cmp	r3, #1
    1b0c:	d004      	beq.n	1b18 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b0e:	e007      	b.n	1b20 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b10:	f7ff ffd5 	bl	1abe <OsIf_Timer_Dummy_GetCounter>
    1b14:	9003      	str	r0, [sp, #12]
            break;
    1b16:	e003      	b.n	1b20 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1b18:	f000 f872 	bl	1c00 <OsIf_Timer_System_GetCounter>
    1b1c:	9003      	str	r0, [sp, #12]
            break;
    1b1e:	bf00      	nop
    }

    return Value;
    1b20:	9b03      	ldr	r3, [sp, #12]
}
    1b22:	4618      	mov	r0, r3
    1b24:	b005      	add	sp, #20
    1b26:	f85d fb04 	ldr.w	pc, [sp], #4

00001b2a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1b2a:	b500      	push	{lr}
    1b2c:	b085      	sub	sp, #20
    1b2e:	9001      	str	r0, [sp, #4]
    1b30:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b32:	2300      	movs	r3, #0
    1b34:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b36:	9b00      	ldr	r3, [sp, #0]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d003      	beq.n	1b44 <OsIf_GetElapsed+0x1a>
    1b3c:	9b00      	ldr	r3, [sp, #0]
    1b3e:	2b01      	cmp	r3, #1
    1b40:	d005      	beq.n	1b4e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b42:	e009      	b.n	1b58 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1b44:	9801      	ldr	r0, [sp, #4]
    1b46:	f7ff ffbd 	bl	1ac4 <OsIf_Timer_Dummy_GetElapsed>
    1b4a:	9003      	str	r0, [sp, #12]
            break;
    1b4c:	e004      	b.n	1b58 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1b4e:	9801      	ldr	r0, [sp, #4]
    1b50:	f000 f864 	bl	1c1c <OsIf_Timer_System_GetElapsed>
    1b54:	9003      	str	r0, [sp, #12]
            break;
    1b56:	bf00      	nop
    }

    return Value;
    1b58:	9b03      	ldr	r3, [sp, #12]
}
    1b5a:	4618      	mov	r0, r3
    1b5c:	b005      	add	sp, #20
    1b5e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b62 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1b62:	b500      	push	{lr}
    1b64:	b083      	sub	sp, #12
    1b66:	9001      	str	r0, [sp, #4]
    1b68:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1b6a:	9b00      	ldr	r3, [sp, #0]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d003      	beq.n	1b78 <OsIf_SetTimerFrequency+0x16>
    1b70:	9b00      	ldr	r3, [sp, #0]
    1b72:	2b01      	cmp	r3, #1
    1b74:	d004      	beq.n	1b80 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b76:	e007      	b.n	1b88 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1b78:	9801      	ldr	r0, [sp, #4]
    1b7a:	f7ff ffa9 	bl	1ad0 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1b7e:	e003      	b.n	1b88 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1b80:	9801      	ldr	r0, [sp, #4]
    1b82:	f000 f85b 	bl	1c3c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1b86:	bf00      	nop
    }
}
    1b88:	bf00      	nop
    1b8a:	b003      	add	sp, #12
    1b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b90 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1b90:	b500      	push	{lr}
    1b92:	b085      	sub	sp, #20
    1b94:	9001      	str	r0, [sp, #4]
    1b96:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b98:	2300      	movs	r3, #0
    1b9a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b9c:	9b00      	ldr	r3, [sp, #0]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d003      	beq.n	1baa <OsIf_MicrosToTicks+0x1a>
    1ba2:	9b00      	ldr	r3, [sp, #0]
    1ba4:	2b01      	cmp	r3, #1
    1ba6:	d005      	beq.n	1bb4 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1ba8:	e009      	b.n	1bbe <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1baa:	9801      	ldr	r0, [sp, #4]
    1bac:	f7ff ff95 	bl	1ada <OsIf_Timer_Dummy_MicrosToTicks>
    1bb0:	9003      	str	r0, [sp, #12]
            break;
    1bb2:	e004      	b.n	1bbe <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1bb4:	9801      	ldr	r0, [sp, #4]
    1bb6:	f000 f84f 	bl	1c58 <OsIf_Timer_System_MicrosToTicks>
    1bba:	9003      	str	r0, [sp, #12]
            break;
    1bbc:	bf00      	nop
    }

    return Value;
    1bbe:	9b03      	ldr	r3, [sp, #12]
}
    1bc0:	4618      	mov	r0, r3
    1bc2:	b005      	add	sp, #20
    1bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1bc8:	b500      	push	{lr}
    1bca:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1bcc:	2300      	movs	r3, #0
    1bce:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1bd0:	4a09      	ldr	r2, [pc, #36]	; (1bf8 <OsIf_Timer_System_Init+0x30>)
    1bd2:	9b01      	ldr	r3, [sp, #4]
    1bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bd8:	685a      	ldr	r2, [r3, #4]
    1bda:	4908      	ldr	r1, [pc, #32]	; (1bfc <OsIf_Timer_System_Init+0x34>)
    1bdc:	9b01      	ldr	r3, [sp, #4]
    1bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1be2:	4a06      	ldr	r2, [pc, #24]	; (1bfc <OsIf_Timer_System_Init+0x34>)
    1be4:	9b01      	ldr	r3, [sp, #4]
    1be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bea:	4618      	mov	r0, r3
    1bec:	f000 f868 	bl	1cc0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1bf0:	bf00      	nop
    1bf2:	b003      	add	sp, #12
    1bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    1bf8:	00010f00 	.word	0x00010f00
    1bfc:	1fff8b38 	.word	0x1fff8b38

00001c00 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c00:	b500      	push	{lr}
    1c02:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c04:	2300      	movs	r3, #0
    1c06:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c08:	2300      	movs	r3, #0
    1c0a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1c0c:	f000 f86c 	bl	1ce8 <OsIf_Timer_System_Internal_GetCounter>
    1c10:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c12:	9b01      	ldr	r3, [sp, #4]
}
    1c14:	4618      	mov	r0, r3
    1c16:	b003      	add	sp, #12
    1c18:	f85d fb04 	ldr.w	pc, [sp], #4

00001c1c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1c1c:	b500      	push	{lr}
    1c1e:	b085      	sub	sp, #20
    1c20:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c22:	2300      	movs	r3, #0
    1c24:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c26:	2300      	movs	r3, #0
    1c28:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1c2a:	9801      	ldr	r0, [sp, #4]
    1c2c:	f000 f864 	bl	1cf8 <OsIf_Timer_System_Internal_GetElapsed>
    1c30:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1c32:	9b03      	ldr	r3, [sp, #12]
}
    1c34:	4618      	mov	r0, r3
    1c36:	b005      	add	sp, #20
    1c38:	f85d fb04 	ldr.w	pc, [sp], #4

00001c3c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1c3c:	b084      	sub	sp, #16
    1c3e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c40:	2300      	movs	r3, #0
    1c42:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1c44:	4903      	ldr	r1, [pc, #12]	; (1c54 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1c46:	9b03      	ldr	r3, [sp, #12]
    1c48:	9a01      	ldr	r2, [sp, #4]
    1c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1c4e:	bf00      	nop
    1c50:	b004      	add	sp, #16
    1c52:	4770      	bx	lr
    1c54:	1fff8b38 	.word	0x1fff8b38

00001c58 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5a:	b087      	sub	sp, #28
    1c5c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1c5e:	2100      	movs	r1, #0
    1c60:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1c62:	2100      	movs	r1, #0
    1c64:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1c66:	9901      	ldr	r1, [sp, #4]
    1c68:	2000      	movs	r0, #0
    1c6a:	460e      	mov	r6, r1
    1c6c:	4607      	mov	r7, r0
    1c6e:	4812      	ldr	r0, [pc, #72]	; (1cb8 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1c70:	9904      	ldr	r1, [sp, #16]
    1c72:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1c76:	2000      	movs	r0, #0
    1c78:	460c      	mov	r4, r1
    1c7a:	4605      	mov	r5, r0
    1c7c:	fb04 f007 	mul.w	r0, r4, r7
    1c80:	fb06 f105 	mul.w	r1, r6, r5
    1c84:	4401      	add	r1, r0
    1c86:	fba6 2304 	umull	r2, r3, r6, r4
    1c8a:	4419      	add	r1, r3
    1c8c:	460b      	mov	r3, r1
    1c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1c92:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1c9a:	4a08      	ldr	r2, [pc, #32]	; (1cbc <OsIf_Timer_System_MicrosToTicks+0x64>)
    1c9c:	f04f 0300 	mov.w	r3, #0
    1ca0:	f7fe fc80 	bl	5a4 <__aeabi_uldivmod>
    1ca4:	4602      	mov	r2, r0
    1ca6:	460b      	mov	r3, r1
    1ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1cac:	9b02      	ldr	r3, [sp, #8]
    1cae:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1cb0:	9b05      	ldr	r3, [sp, #20]
}
    1cb2:	4618      	mov	r0, r3
    1cb4:	b007      	add	sp, #28
    1cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cb8:	1fff8b38 	.word	0x1fff8b38
    1cbc:	000f4240 	.word	0x000f4240

00001cc0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1cc0:	b082      	sub	sp, #8
    1cc2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1cc4:	4b07      	ldr	r3, [pc, #28]	; (1ce4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cc6:	2200      	movs	r2, #0
    1cc8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1cca:	4b06      	ldr	r3, [pc, #24]	; (1ce4 <OsIf_Timer_System_Internal_Init+0x24>)
    1ccc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1cd0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1cd2:	4b04      	ldr	r3, [pc, #16]	; (1ce4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cd4:	2200      	movs	r2, #0
    1cd6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1cd8:	4b02      	ldr	r3, [pc, #8]	; (1ce4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cda:	2205      	movs	r2, #5
    1cdc:	601a      	str	r2, [r3, #0]
}
    1cde:	bf00      	nop
    1ce0:	b002      	add	sp, #8
    1ce2:	4770      	bx	lr
    1ce4:	e000e010 	.word	0xe000e010

00001ce8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1ce8:	4b02      	ldr	r3, [pc, #8]	; (1cf4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1cea:	689b      	ldr	r3, [r3, #8]
    1cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1cf0:	4618      	mov	r0, r3
    1cf2:	4770      	bx	lr
    1cf4:	e000e010 	.word	0xe000e010

00001cf8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1cf8:	b084      	sub	sp, #16
    1cfa:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1cfc:	4b10      	ldr	r3, [pc, #64]	; (1d40 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1cfe:	689b      	ldr	r3, [r3, #8]
    1d00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d04:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d06:	2300      	movs	r3, #0
    1d08:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d0a:	9b01      	ldr	r3, [sp, #4]
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	9a02      	ldr	r2, [sp, #8]
    1d10:	429a      	cmp	r2, r3
    1d12:	d909      	bls.n	1d28 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	681a      	ldr	r2, [r3, #0]
    1d18:	9b02      	ldr	r3, [sp, #8]
    1d1a:	1ad3      	subs	r3, r2, r3
    1d1c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d20:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d24:	9303      	str	r3, [sp, #12]
    1d26:	e004      	b.n	1d32 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1d28:	9b01      	ldr	r3, [sp, #4]
    1d2a:	681a      	ldr	r2, [r3, #0]
    1d2c:	9b02      	ldr	r3, [sp, #8]
    1d2e:	1ad3      	subs	r3, r2, r3
    1d30:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	9a02      	ldr	r2, [sp, #8]
    1d36:	601a      	str	r2, [r3, #0]

    return dif;
    1d38:	9b03      	ldr	r3, [sp, #12]
}
    1d3a:	4618      	mov	r0, r3
    1d3c:	b004      	add	sp, #16
    1d3e:	4770      	bx	lr
    1d40:	e000e010 	.word	0xe000e010

00001d44 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1d44:	b082      	sub	sp, #8
    1d46:	9001      	str	r0, [sp, #4]
    1d48:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1d4a:	bf00      	nop
    1d4c:	b002      	add	sp, #8
    1d4e:	4770      	bx	lr

00001d50 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1d50:	b500      	push	{lr}
    1d52:	b085      	sub	sp, #20
    1d54:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1d56:	4b24      	ldr	r3, [pc, #144]	; (1de8 <Clock_Ip_UpdateDriverContext+0x98>)
    1d58:	2201      	movs	r2, #1
    1d5a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1d5c:	4b23      	ldr	r3, [pc, #140]	; (1dec <Clock_Ip_UpdateDriverContext+0x9c>)
    1d5e:	681b      	ldr	r3, [r3, #0]
    1d60:	2102      	movs	r1, #2
    1d62:	4618      	mov	r0, r3
    1d64:	f003 fc32 	bl	55cc <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d68:	2300      	movs	r3, #0
    1d6a:	f88d 300f 	strb.w	r3, [sp, #15]
    1d6e:	e015      	b.n	1d9c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1d70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d74:	9a01      	ldr	r2, [sp, #4]
    1d76:	334a      	adds	r3, #74	; 0x4a
    1d78:	00db      	lsls	r3, r3, #3
    1d7a:	4413      	add	r3, r2
    1d7c:	6858      	ldr	r0, [r3, #4]
    1d7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d82:	9a01      	ldr	r2, [sp, #4]
    1d84:	334a      	adds	r3, #74	; 0x4a
    1d86:	00db      	lsls	r3, r3, #3
    1d88:	4413      	add	r3, r2
    1d8a:	689b      	ldr	r3, [r3, #8]
    1d8c:	4619      	mov	r1, r3
    1d8e:	f001 fadc 	bl	334a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d96:	3301      	adds	r3, #1
    1d98:	f88d 300f 	strb.w	r3, [sp, #15]
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	7bdb      	ldrb	r3, [r3, #15]
    1da0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1da4:	429a      	cmp	r2, r3
    1da6:	d3e3      	bcc.n	1d70 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1da8:	f000 f824 	bl	1df4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1dac:	2301      	movs	r3, #1
    1dae:	f88d 300f 	strb.w	r3, [sp, #15]
    1db2:	e00e      	b.n	1dd2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1db4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	327e      	adds	r2, #126	; 0x7e
    1dbc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1dc0:	490b      	ldr	r1, [pc, #44]	; (1df0 <Clock_Ip_UpdateDriverContext+0xa0>)
    1dc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dc6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1dc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dcc:	3301      	adds	r3, #1
    1dce:	f88d 300f 	strb.w	r3, [sp, #15]
    1dd2:	9b01      	ldr	r3, [sp, #4]
    1dd4:	7cdb      	ldrb	r3, [r3, #19]
    1dd6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dda:	429a      	cmp	r2, r3
    1ddc:	d3ea      	bcc.n	1db4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1dde:	bf00      	nop
    1de0:	bf00      	nop
    1de2:	b005      	add	sp, #20
    1de4:	f85d fb04 	ldr.w	pc, [sp], #4
    1de8:	1fff8b10 	.word	0x1fff8b10
    1dec:	1fff8b3c 	.word	0x1fff8b3c
    1df0:	1fff8b48 	.word	0x1fff8b48

00001df4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1df4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1df6:	4b23      	ldr	r3, [pc, #140]	; (1e84 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1df8:	781b      	ldrb	r3, [r3, #0]
    1dfa:	f083 0301 	eor.w	r3, r3, #1
    1dfe:	b2db      	uxtb	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	d03d      	beq.n	1e80 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e04:	4b1f      	ldr	r3, [pc, #124]	; (1e84 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e06:	2201      	movs	r2, #1
    1e08:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e0a:	4b1f      	ldr	r3, [pc, #124]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e0c:	685b      	ldr	r3, [r3, #4]
    1e0e:	2100      	movs	r1, #0
    1e10:	2000      	movs	r0, #0
    1e12:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1e14:	4b1c      	ldr	r3, [pc, #112]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e16:	689b      	ldr	r3, [r3, #8]
    1e18:	2057      	movs	r0, #87	; 0x57
    1e1a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e1c:	4b1b      	ldr	r3, [pc, #108]	; (1e8c <Clock_Ip_CallEmptyCallbacks+0x98>)
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	2000      	movs	r0, #0
    1e22:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e24:	4b1a      	ldr	r3, [pc, #104]	; (1e90 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	2000      	movs	r0, #0
    1e2a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1e2c:	4b19      	ldr	r3, [pc, #100]	; (1e94 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	2000      	movs	r0, #0
    1e32:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e34:	4b18      	ldr	r3, [pc, #96]	; (1e98 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e36:	685b      	ldr	r3, [r3, #4]
    1e38:	2000      	movs	r0, #0
    1e3a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e3c:	4b16      	ldr	r3, [pc, #88]	; (1e98 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e3e:	689b      	ldr	r3, [r3, #8]
    1e40:	2057      	movs	r0, #87	; 0x57
    1e42:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e44:	4b15      	ldr	r3, [pc, #84]	; (1e9c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e46:	681b      	ldr	r3, [r3, #0]
    1e48:	2000      	movs	r0, #0
    1e4a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1e4c:	4b13      	ldr	r3, [pc, #76]	; (1e9c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e4e:	685b      	ldr	r3, [r3, #4]
    1e50:	2100      	movs	r1, #0
    1e52:	2057      	movs	r0, #87	; 0x57
    1e54:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e56:	4b12      	ldr	r3, [pc, #72]	; (1ea0 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	2000      	movs	r0, #0
    1e5c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e5e:	4b11      	ldr	r3, [pc, #68]	; (1ea4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e60:	685b      	ldr	r3, [r3, #4]
    1e62:	2000      	movs	r0, #0
    1e64:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e66:	4b0f      	ldr	r3, [pc, #60]	; (1ea4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e68:	689b      	ldr	r3, [r3, #8]
    1e6a:	2057      	movs	r0, #87	; 0x57
    1e6c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e6e:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1e70:	685b      	ldr	r3, [r3, #4]
    1e72:	2000      	movs	r0, #0
    1e74:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e76:	4b0d      	ldr	r3, [pc, #52]	; (1eac <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1e78:	681b      	ldr	r3, [r3, #0]
    1e7a:	2100      	movs	r1, #0
    1e7c:	2000      	movs	r0, #0
    1e7e:	4798      	blx	r3
    }
}
    1e80:	bf00      	nop
    1e82:	bd08      	pop	{r3, pc}
    1e84:	1fff8b40 	.word	0x1fff8b40
    1e88:	000108cc 	.word	0x000108cc
    1e8c:	000107e0 	.word	0x000107e0
    1e90:	0001081c 	.word	0x0001081c
    1e94:	00010824 	.word	0x00010824
    1e98:	0001084c 	.word	0x0001084c
    1e9c:	00010858 	.word	0x00010858
    1ea0:	00010890 	.word	0x00010890
    1ea4:	000108dc 	.word	0x000108dc
    1ea8:	00010908 	.word	0x00010908
    1eac:	00010904 	.word	0x00010904

00001eb0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1eb0:	b500      	push	{lr}
    1eb2:	b085      	sub	sp, #20
    1eb4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1eb6:	9b01      	ldr	r3, [sp, #4]
    1eb8:	7adb      	ldrb	r3, [r3, #11]
    1eba:	9303      	str	r3, [sp, #12]
    1ebc:	e01f      	b.n	1efe <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ebe:	9b03      	ldr	r3, [sp, #12]
    1ec0:	1e5a      	subs	r2, r3, #1
    1ec2:	9b01      	ldr	r3, [sp, #4]
    1ec4:	320d      	adds	r2, #13
    1ec6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1eca:	495a      	ldr	r1, [pc, #360]	; (2034 <Clock_Ip_ResetClockConfiguration+0x184>)
    1ecc:	4613      	mov	r3, r2
    1ece:	00db      	lsls	r3, r3, #3
    1ed0:	4413      	add	r3, r2
    1ed2:	440b      	add	r3, r1
    1ed4:	3301      	adds	r3, #1
    1ed6:	781b      	ldrb	r3, [r3, #0]
    1ed8:	461a      	mov	r2, r3
    1eda:	4b57      	ldr	r3, [pc, #348]	; (2038 <Clock_Ip_ResetClockConfiguration+0x188>)
    1edc:	5c9b      	ldrb	r3, [r3, r2]
    1ede:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1ee0:	4a56      	ldr	r2, [pc, #344]	; (203c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1ee2:	9b02      	ldr	r3, [sp, #8]
    1ee4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1ee8:	9a03      	ldr	r2, [sp, #12]
    1eea:	3a01      	subs	r2, #1
    1eec:	320d      	adds	r2, #13
    1eee:	00d2      	lsls	r2, r2, #3
    1ef0:	9901      	ldr	r1, [sp, #4]
    1ef2:	440a      	add	r2, r1
    1ef4:	4610      	mov	r0, r2
    1ef6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1ef8:	9b03      	ldr	r3, [sp, #12]
    1efa:	3b01      	subs	r3, #1
    1efc:	9303      	str	r3, [sp, #12]
    1efe:	9b03      	ldr	r3, [sp, #12]
    1f00:	2b00      	cmp	r3, #0
    1f02:	d1dc      	bne.n	1ebe <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f04:	9b01      	ldr	r3, [sp, #4]
    1f06:	7b9b      	ldrb	r3, [r3, #14]
    1f08:	9303      	str	r3, [sp, #12]
    1f0a:	e026      	b.n	1f5a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f0c:	9b03      	ldr	r3, [sp, #12]
    1f0e:	3b01      	subs	r3, #1
    1f10:	9a01      	ldr	r2, [sp, #4]
    1f12:	3324      	adds	r3, #36	; 0x24
    1f14:	011b      	lsls	r3, r3, #4
    1f16:	4413      	add	r3, r2
    1f18:	3304      	adds	r3, #4
    1f1a:	681a      	ldr	r2, [r3, #0]
    1f1c:	4945      	ldr	r1, [pc, #276]	; (2034 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f1e:	4613      	mov	r3, r2
    1f20:	00db      	lsls	r3, r3, #3
    1f22:	4413      	add	r3, r2
    1f24:	440b      	add	r3, r1
    1f26:	3301      	adds	r3, #1
    1f28:	781b      	ldrb	r3, [r3, #0]
    1f2a:	461a      	mov	r2, r3
    1f2c:	4b44      	ldr	r3, [pc, #272]	; (2040 <Clock_Ip_ResetClockConfiguration+0x190>)
    1f2e:	5c9b      	ldrb	r3, [r3, r2]
    1f30:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1f32:	4944      	ldr	r1, [pc, #272]	; (2044 <Clock_Ip_ResetClockConfiguration+0x194>)
    1f34:	9a02      	ldr	r2, [sp, #8]
    1f36:	4613      	mov	r3, r2
    1f38:	005b      	lsls	r3, r3, #1
    1f3a:	4413      	add	r3, r2
    1f3c:	009b      	lsls	r3, r3, #2
    1f3e:	440b      	add	r3, r1
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	9a03      	ldr	r2, [sp, #12]
    1f44:	3a01      	subs	r2, #1
    1f46:	3224      	adds	r2, #36	; 0x24
    1f48:	0112      	lsls	r2, r2, #4
    1f4a:	9901      	ldr	r1, [sp, #4]
    1f4c:	440a      	add	r2, r1
    1f4e:	3204      	adds	r2, #4
    1f50:	4610      	mov	r0, r2
    1f52:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f54:	9b03      	ldr	r3, [sp, #12]
    1f56:	3b01      	subs	r3, #1
    1f58:	9303      	str	r3, [sp, #12]
    1f5a:	9b03      	ldr	r3, [sp, #12]
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d1d5      	bne.n	1f0c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f60:	9b01      	ldr	r3, [sp, #4]
    1f62:	7a9b      	ldrb	r3, [r3, #10]
    1f64:	9303      	str	r3, [sp, #12]
    1f66:	e02a      	b.n	1fbe <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f68:	9b03      	ldr	r3, [sp, #12]
    1f6a:	1e5a      	subs	r2, r3, #1
    1f6c:	9901      	ldr	r1, [sp, #4]
    1f6e:	4613      	mov	r3, r2
    1f70:	009b      	lsls	r3, r3, #2
    1f72:	4413      	add	r3, r2
    1f74:	00db      	lsls	r3, r3, #3
    1f76:	440b      	add	r3, r1
    1f78:	3340      	adds	r3, #64	; 0x40
    1f7a:	681a      	ldr	r2, [r3, #0]
    1f7c:	492d      	ldr	r1, [pc, #180]	; (2034 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f7e:	4613      	mov	r3, r2
    1f80:	00db      	lsls	r3, r3, #3
    1f82:	4413      	add	r3, r2
    1f84:	440b      	add	r3, r1
    1f86:	3301      	adds	r3, #1
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	461a      	mov	r2, r3
    1f8c:	4b2e      	ldr	r3, [pc, #184]	; (2048 <Clock_Ip_ResetClockConfiguration+0x198>)
    1f8e:	5c9b      	ldrb	r3, [r3, r2]
    1f90:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1f92:	492e      	ldr	r1, [pc, #184]	; (204c <Clock_Ip_ResetClockConfiguration+0x19c>)
    1f94:	9a02      	ldr	r2, [sp, #8]
    1f96:	4613      	mov	r3, r2
    1f98:	009b      	lsls	r3, r3, #2
    1f9a:	4413      	add	r3, r2
    1f9c:	009b      	lsls	r3, r3, #2
    1f9e:	440b      	add	r3, r1
    1fa0:	6819      	ldr	r1, [r3, #0]
    1fa2:	9b03      	ldr	r3, [sp, #12]
    1fa4:	1e5a      	subs	r2, r3, #1
    1fa6:	4613      	mov	r3, r2
    1fa8:	009b      	lsls	r3, r3, #2
    1faa:	4413      	add	r3, r2
    1fac:	00db      	lsls	r3, r3, #3
    1fae:	3340      	adds	r3, #64	; 0x40
    1fb0:	9a01      	ldr	r2, [sp, #4]
    1fb2:	4413      	add	r3, r2
    1fb4:	4618      	mov	r0, r3
    1fb6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fb8:	9b03      	ldr	r3, [sp, #12]
    1fba:	3b01      	subs	r3, #1
    1fbc:	9303      	str	r3, [sp, #12]
    1fbe:	9b03      	ldr	r3, [sp, #12]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d1d1      	bne.n	1f68 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1fc4:	9b01      	ldr	r3, [sp, #4]
    1fc6:	7a5b      	ldrb	r3, [r3, #9]
    1fc8:	9303      	str	r3, [sp, #12]
    1fca:	e02b      	b.n	2024 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fcc:	9b03      	ldr	r3, [sp, #12]
    1fce:	1e5a      	subs	r2, r3, #1
    1fd0:	9901      	ldr	r1, [sp, #4]
    1fd2:	4613      	mov	r3, r2
    1fd4:	009b      	lsls	r3, r3, #2
    1fd6:	4413      	add	r3, r2
    1fd8:	009b      	lsls	r3, r3, #2
    1fda:	440b      	add	r3, r1
    1fdc:	332c      	adds	r3, #44	; 0x2c
    1fde:	681a      	ldr	r2, [r3, #0]
    1fe0:	4914      	ldr	r1, [pc, #80]	; (2034 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fe2:	4613      	mov	r3, r2
    1fe4:	00db      	lsls	r3, r3, #3
    1fe6:	4413      	add	r3, r2
    1fe8:	440b      	add	r3, r1
    1fea:	3301      	adds	r3, #1
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	461a      	mov	r2, r3
    1ff0:	4b17      	ldr	r3, [pc, #92]	; (2050 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1ff2:	5c9b      	ldrb	r3, [r3, r2]
    1ff4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1ff6:	4917      	ldr	r1, [pc, #92]	; (2054 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1ff8:	9a02      	ldr	r2, [sp, #8]
    1ffa:	4613      	mov	r3, r2
    1ffc:	009b      	lsls	r3, r3, #2
    1ffe:	4413      	add	r3, r2
    2000:	009b      	lsls	r3, r3, #2
    2002:	440b      	add	r3, r1
    2004:	6819      	ldr	r1, [r3, #0]
    2006:	9b03      	ldr	r3, [sp, #12]
    2008:	1e5a      	subs	r2, r3, #1
    200a:	4613      	mov	r3, r2
    200c:	009b      	lsls	r3, r3, #2
    200e:	4413      	add	r3, r2
    2010:	009b      	lsls	r3, r3, #2
    2012:	3328      	adds	r3, #40	; 0x28
    2014:	9a01      	ldr	r2, [sp, #4]
    2016:	4413      	add	r3, r2
    2018:	3304      	adds	r3, #4
    201a:	4618      	mov	r0, r3
    201c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    201e:	9b03      	ldr	r3, [sp, #12]
    2020:	3b01      	subs	r3, #1
    2022:	9303      	str	r3, [sp, #12]
    2024:	9b03      	ldr	r3, [sp, #12]
    2026:	2b00      	cmp	r3, #0
    2028:	d1d0      	bne.n	1fcc <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    202a:	bf00      	nop
    202c:	bf00      	nop
    202e:	b005      	add	sp, #20
    2030:	f85d fb04 	ldr.w	pc, [sp], #4
    2034:	000102d0 	.word	0x000102d0
    2038:	000102a0 	.word	0x000102a0
    203c:	00010908 	.word	0x00010908
    2040:	00010280 	.word	0x00010280
    2044:	0001084c 	.word	0x0001084c
    2048:	00010290 	.word	0x00010290
    204c:	000108dc 	.word	0x000108dc
    2050:	00010250 	.word	0x00010250
    2054:	00010824 	.word	0x00010824

00002058 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2058:	b500      	push	{lr}
    205a:	b085      	sub	sp, #20
    205c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    205e:	2301      	movs	r3, #1
    2060:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2062:	9801      	ldr	r0, [sp, #4]
    2064:	f000 f818 	bl	2098 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2068:	4b0a      	ldr	r3, [pc, #40]	; (2094 <Clock_Ip_Init+0x3c>)
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d00a      	beq.n	2086 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2070:	f000 fb74 	bl	275c <Clock_Ip_GetPllStatus>
    2074:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2076:	9b02      	ldr	r3, [sp, #8]
    2078:	2b00      	cmp	r3, #0
    207a:	d106      	bne.n	208a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    207c:	f000 fbf2 	bl	2864 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2080:	2300      	movs	r3, #0
    2082:	9303      	str	r3, [sp, #12]
    2084:	e001      	b.n	208a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2086:	2300      	movs	r3, #0
    2088:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    208a:	9b03      	ldr	r3, [sp, #12]
}
    208c:	4618      	mov	r0, r3
    208e:	b005      	add	sp, #20
    2090:	f85d fb04 	ldr.w	pc, [sp], #4
    2094:	1fff8b44 	.word	0x1fff8b44

00002098 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2098:	b510      	push	{r4, lr}
    209a:	b084      	sub	sp, #16
    209c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    209e:	4a9f      	ldr	r2, [pc, #636]	; (231c <Clock_Ip_InitClock+0x284>)
    20a0:	9b01      	ldr	r3, [sp, #4]
    20a2:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    20a4:	2101      	movs	r1, #1
    20a6:	9801      	ldr	r0, [sp, #4]
    20a8:	f003 fa90 	bl	55cc <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    20ac:	4b9b      	ldr	r3, [pc, #620]	; (231c <Clock_Ip_InitClock+0x284>)
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d030      	beq.n	2116 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    20b4:	2300      	movs	r3, #0
    20b6:	9303      	str	r3, [sp, #12]
    20b8:	e027      	b.n	210a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    20ba:	9901      	ldr	r1, [sp, #4]
    20bc:	9a03      	ldr	r2, [sp, #12]
    20be:	4613      	mov	r3, r2
    20c0:	009b      	lsls	r3, r3, #2
    20c2:	4413      	add	r3, r2
    20c4:	009b      	lsls	r3, r3, #2
    20c6:	440b      	add	r3, r1
    20c8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20cc:	681a      	ldr	r2, [r3, #0]
    20ce:	4994      	ldr	r1, [pc, #592]	; (2320 <Clock_Ip_InitClock+0x288>)
    20d0:	4613      	mov	r3, r2
    20d2:	00db      	lsls	r3, r3, #3
    20d4:	4413      	add	r3, r2
    20d6:	440b      	add	r3, r1
    20d8:	3301      	adds	r3, #1
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	461a      	mov	r2, r3
    20de:	4b91      	ldr	r3, [pc, #580]	; (2324 <Clock_Ip_InitClock+0x28c>)
    20e0:	5c9b      	ldrb	r3, [r3, r2]
    20e2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    20e4:	4a90      	ldr	r2, [pc, #576]	; (2328 <Clock_Ip_InitClock+0x290>)
    20e6:	9b02      	ldr	r3, [sp, #8]
    20e8:	011b      	lsls	r3, r3, #4
    20ea:	4413      	add	r3, r2
    20ec:	6819      	ldr	r1, [r3, #0]
    20ee:	9a03      	ldr	r2, [sp, #12]
    20f0:	4613      	mov	r3, r2
    20f2:	009b      	lsls	r3, r3, #2
    20f4:	4413      	add	r3, r2
    20f6:	009b      	lsls	r3, r3, #2
    20f8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20fc:	9a01      	ldr	r2, [sp, #4]
    20fe:	4413      	add	r3, r2
    2100:	4618      	mov	r0, r3
    2102:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2104:	9b03      	ldr	r3, [sp, #12]
    2106:	3301      	adds	r3, #1
    2108:	9303      	str	r3, [sp, #12]
    210a:	9b01      	ldr	r3, [sp, #4]
    210c:	7c9b      	ldrb	r3, [r3, #18]
    210e:	461a      	mov	r2, r3
    2110:	9b03      	ldr	r3, [sp, #12]
    2112:	4293      	cmp	r3, r2
    2114:	d3d1      	bcc.n	20ba <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2116:	9801      	ldr	r0, [sp, #4]
    2118:	f7ff feca 	bl	1eb0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    211c:	2300      	movs	r3, #0
    211e:	9303      	str	r3, [sp, #12]
    2120:	e029      	b.n	2176 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2122:	9901      	ldr	r1, [sp, #4]
    2124:	9a03      	ldr	r2, [sp, #12]
    2126:	4613      	mov	r3, r2
    2128:	005b      	lsls	r3, r3, #1
    212a:	4413      	add	r3, r2
    212c:	009b      	lsls	r3, r3, #2
    212e:	440b      	add	r3, r1
    2130:	3314      	adds	r3, #20
    2132:	681a      	ldr	r2, [r3, #0]
    2134:	497a      	ldr	r1, [pc, #488]	; (2320 <Clock_Ip_InitClock+0x288>)
    2136:	4613      	mov	r3, r2
    2138:	00db      	lsls	r3, r3, #3
    213a:	4413      	add	r3, r2
    213c:	440b      	add	r3, r1
    213e:	3301      	adds	r3, #1
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	461a      	mov	r2, r3
    2144:	4b79      	ldr	r3, [pc, #484]	; (232c <Clock_Ip_InitClock+0x294>)
    2146:	5c9b      	ldrb	r3, [r3, r2]
    2148:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    214a:	4979      	ldr	r1, [pc, #484]	; (2330 <Clock_Ip_InitClock+0x298>)
    214c:	9a02      	ldr	r2, [sp, #8]
    214e:	4613      	mov	r3, r2
    2150:	005b      	lsls	r3, r3, #1
    2152:	4413      	add	r3, r2
    2154:	009b      	lsls	r3, r3, #2
    2156:	440b      	add	r3, r1
    2158:	6819      	ldr	r1, [r3, #0]
    215a:	9a03      	ldr	r2, [sp, #12]
    215c:	4613      	mov	r3, r2
    215e:	005b      	lsls	r3, r3, #1
    2160:	4413      	add	r3, r2
    2162:	009b      	lsls	r3, r3, #2
    2164:	3310      	adds	r3, #16
    2166:	9a01      	ldr	r2, [sp, #4]
    2168:	4413      	add	r3, r2
    216a:	3304      	adds	r3, #4
    216c:	4618      	mov	r0, r3
    216e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2170:	9b03      	ldr	r3, [sp, #12]
    2172:	3301      	adds	r3, #1
    2174:	9303      	str	r3, [sp, #12]
    2176:	9b01      	ldr	r3, [sp, #4]
    2178:	7a1b      	ldrb	r3, [r3, #8]
    217a:	461a      	mov	r2, r3
    217c:	9b03      	ldr	r3, [sp, #12]
    217e:	4293      	cmp	r3, r2
    2180:	d3cf      	bcc.n	2122 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2182:	2300      	movs	r3, #0
    2184:	9303      	str	r3, [sp, #12]
    2186:	e02a      	b.n	21de <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2188:	9901      	ldr	r1, [sp, #4]
    218a:	9a03      	ldr	r2, [sp, #12]
    218c:	4613      	mov	r3, r2
    218e:	009b      	lsls	r3, r3, #2
    2190:	4413      	add	r3, r2
    2192:	009b      	lsls	r3, r3, #2
    2194:	440b      	add	r3, r1
    2196:	332c      	adds	r3, #44	; 0x2c
    2198:	681a      	ldr	r2, [r3, #0]
    219a:	4961      	ldr	r1, [pc, #388]	; (2320 <Clock_Ip_InitClock+0x288>)
    219c:	4613      	mov	r3, r2
    219e:	00db      	lsls	r3, r3, #3
    21a0:	4413      	add	r3, r2
    21a2:	440b      	add	r3, r1
    21a4:	3301      	adds	r3, #1
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	461a      	mov	r2, r3
    21aa:	4b62      	ldr	r3, [pc, #392]	; (2334 <Clock_Ip_InitClock+0x29c>)
    21ac:	5c9b      	ldrb	r3, [r3, r2]
    21ae:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    21b0:	4961      	ldr	r1, [pc, #388]	; (2338 <Clock_Ip_InitClock+0x2a0>)
    21b2:	9a02      	ldr	r2, [sp, #8]
    21b4:	4613      	mov	r3, r2
    21b6:	009b      	lsls	r3, r3, #2
    21b8:	4413      	add	r3, r2
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	440b      	add	r3, r1
    21be:	3304      	adds	r3, #4
    21c0:	6819      	ldr	r1, [r3, #0]
    21c2:	9a03      	ldr	r2, [sp, #12]
    21c4:	4613      	mov	r3, r2
    21c6:	009b      	lsls	r3, r3, #2
    21c8:	4413      	add	r3, r2
    21ca:	009b      	lsls	r3, r3, #2
    21cc:	3328      	adds	r3, #40	; 0x28
    21ce:	9a01      	ldr	r2, [sp, #4]
    21d0:	4413      	add	r3, r2
    21d2:	3304      	adds	r3, #4
    21d4:	4618      	mov	r0, r3
    21d6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21d8:	9b03      	ldr	r3, [sp, #12]
    21da:	3301      	adds	r3, #1
    21dc:	9303      	str	r3, [sp, #12]
    21de:	9b01      	ldr	r3, [sp, #4]
    21e0:	7a5b      	ldrb	r3, [r3, #9]
    21e2:	461a      	mov	r2, r3
    21e4:	9b03      	ldr	r3, [sp, #12]
    21e6:	4293      	cmp	r3, r2
    21e8:	d3ce      	bcc.n	2188 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    21ea:	9801      	ldr	r0, [sp, #4]
    21ec:	f7ff fdb0 	bl	1d50 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    21f0:	2300      	movs	r3, #0
    21f2:	9303      	str	r3, [sp, #12]
    21f4:	e028      	b.n	2248 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    21f6:	9901      	ldr	r1, [sp, #4]
    21f8:	9a03      	ldr	r2, [sp, #12]
    21fa:	4613      	mov	r3, r2
    21fc:	009b      	lsls	r3, r3, #2
    21fe:	4413      	add	r3, r2
    2200:	009b      	lsls	r3, r3, #2
    2202:	440b      	add	r3, r1
    2204:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2208:	681a      	ldr	r2, [r3, #0]
    220a:	4945      	ldr	r1, [pc, #276]	; (2320 <Clock_Ip_InitClock+0x288>)
    220c:	4613      	mov	r3, r2
    220e:	00db      	lsls	r3, r3, #3
    2210:	4413      	add	r3, r2
    2212:	440b      	add	r3, r1
    2214:	3301      	adds	r3, #1
    2216:	781b      	ldrb	r3, [r3, #0]
    2218:	461a      	mov	r2, r3
    221a:	4b48      	ldr	r3, [pc, #288]	; (233c <Clock_Ip_InitClock+0x2a4>)
    221c:	5c9b      	ldrb	r3, [r3, r2]
    221e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2220:	4a47      	ldr	r2, [pc, #284]	; (2340 <Clock_Ip_InitClock+0x2a8>)
    2222:	9b02      	ldr	r3, [sp, #8]
    2224:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2228:	9a03      	ldr	r2, [sp, #12]
    222a:	4613      	mov	r3, r2
    222c:	009b      	lsls	r3, r3, #2
    222e:	4413      	add	r3, r2
    2230:	009b      	lsls	r3, r3, #2
    2232:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2236:	9a01      	ldr	r2, [sp, #4]
    2238:	4413      	add	r3, r2
    223a:	3304      	adds	r3, #4
    223c:	9903      	ldr	r1, [sp, #12]
    223e:	4618      	mov	r0, r3
    2240:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2242:	9b03      	ldr	r3, [sp, #12]
    2244:	3301      	adds	r3, #1
    2246:	9303      	str	r3, [sp, #12]
    2248:	9b01      	ldr	r3, [sp, #4]
    224a:	7c5b      	ldrb	r3, [r3, #17]
    224c:	461a      	mov	r2, r3
    224e:	9b03      	ldr	r3, [sp, #12]
    2250:	4293      	cmp	r3, r2
    2252:	d3d0      	bcc.n	21f6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2254:	2300      	movs	r3, #0
    2256:	9303      	str	r3, [sp, #12]
    2258:	e026      	b.n	22a8 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    225a:	9901      	ldr	r1, [sp, #4]
    225c:	9a03      	ldr	r2, [sp, #12]
    225e:	4613      	mov	r3, r2
    2260:	005b      	lsls	r3, r3, #1
    2262:	4413      	add	r3, r2
    2264:	009b      	lsls	r3, r3, #2
    2266:	440b      	add	r3, r1
    2268:	f503 730e 	add.w	r3, r3, #568	; 0x238
    226c:	681a      	ldr	r2, [r3, #0]
    226e:	492c      	ldr	r1, [pc, #176]	; (2320 <Clock_Ip_InitClock+0x288>)
    2270:	4613      	mov	r3, r2
    2272:	00db      	lsls	r3, r3, #3
    2274:	4413      	add	r3, r2
    2276:	440b      	add	r3, r1
    2278:	3301      	adds	r3, #1
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	461a      	mov	r2, r3
    227e:	4b31      	ldr	r3, [pc, #196]	; (2344 <Clock_Ip_InitClock+0x2ac>)
    2280:	5c9b      	ldrb	r3, [r3, r2]
    2282:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2284:	4a30      	ldr	r2, [pc, #192]	; (2348 <Clock_Ip_InitClock+0x2b0>)
    2286:	9b02      	ldr	r3, [sp, #8]
    2288:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    228c:	9a03      	ldr	r2, [sp, #12]
    228e:	4613      	mov	r3, r2
    2290:	005b      	lsls	r3, r3, #1
    2292:	4413      	add	r3, r2
    2294:	009b      	lsls	r3, r3, #2
    2296:	f503 730e 	add.w	r3, r3, #568	; 0x238
    229a:	9a01      	ldr	r2, [sp, #4]
    229c:	4413      	add	r3, r2
    229e:	4618      	mov	r0, r3
    22a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22a2:	9b03      	ldr	r3, [sp, #12]
    22a4:	3301      	adds	r3, #1
    22a6:	9303      	str	r3, [sp, #12]
    22a8:	9b01      	ldr	r3, [sp, #4]
    22aa:	7b5b      	ldrb	r3, [r3, #13]
    22ac:	461a      	mov	r2, r3
    22ae:	9b03      	ldr	r3, [sp, #12]
    22b0:	4293      	cmp	r3, r2
    22b2:	d3d2      	bcc.n	225a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    22b4:	2300      	movs	r3, #0
    22b6:	9303      	str	r3, [sp, #12]
    22b8:	e026      	b.n	2308 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    22ba:	9901      	ldr	r1, [sp, #4]
    22bc:	9a03      	ldr	r2, [sp, #12]
    22be:	4613      	mov	r3, r2
    22c0:	005b      	lsls	r3, r3, #1
    22c2:	4413      	add	r3, r2
    22c4:	009b      	lsls	r3, r3, #2
    22c6:	440b      	add	r3, r1
    22c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22cc:	681a      	ldr	r2, [r3, #0]
    22ce:	4914      	ldr	r1, [pc, #80]	; (2320 <Clock_Ip_InitClock+0x288>)
    22d0:	4613      	mov	r3, r2
    22d2:	00db      	lsls	r3, r3, #3
    22d4:	4413      	add	r3, r2
    22d6:	440b      	add	r3, r1
    22d8:	3301      	adds	r3, #1
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	461a      	mov	r2, r3
    22de:	4b1b      	ldr	r3, [pc, #108]	; (234c <Clock_Ip_InitClock+0x2b4>)
    22e0:	5c9b      	ldrb	r3, [r3, r2]
    22e2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    22e4:	4a1a      	ldr	r2, [pc, #104]	; (2350 <Clock_Ip_InitClock+0x2b8>)
    22e6:	9b02      	ldr	r3, [sp, #8]
    22e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    22ec:	9a03      	ldr	r2, [sp, #12]
    22ee:	4613      	mov	r3, r2
    22f0:	005b      	lsls	r3, r3, #1
    22f2:	4413      	add	r3, r2
    22f4:	009b      	lsls	r3, r3, #2
    22f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22fa:	9a01      	ldr	r2, [sp, #4]
    22fc:	4413      	add	r3, r2
    22fe:	4618      	mov	r0, r3
    2300:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2302:	9b03      	ldr	r3, [sp, #12]
    2304:	3301      	adds	r3, #1
    2306:	9303      	str	r3, [sp, #12]
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	7b1b      	ldrb	r3, [r3, #12]
    230c:	461a      	mov	r2, r3
    230e:	9b03      	ldr	r3, [sp, #12]
    2310:	4293      	cmp	r3, r2
    2312:	d3d2      	bcc.n	22ba <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2314:	2300      	movs	r3, #0
    2316:	9303      	str	r3, [sp, #12]
    2318:	e044      	b.n	23a4 <Clock_Ip_InitClock+0x30c>
    231a:	bf00      	nop
    231c:	1fff8b3c 	.word	0x1fff8b3c
    2320:	000102d0 	.word	0x000102d0
    2324:	000102c0 	.word	0x000102c0
    2328:	000108cc 	.word	0x000108cc
    232c:	00010260 	.word	0x00010260
    2330:	00010890 	.word	0x00010890
    2334:	00010250 	.word	0x00010250
    2338:	00010824 	.word	0x00010824
    233c:	000102b0 	.word	0x000102b0
    2340:	00010904 	.word	0x00010904
    2344:	00010240 	.word	0x00010240
    2348:	0001081c 	.word	0x0001081c
    234c:	00010230 	.word	0x00010230
    2350:	000107e0 	.word	0x000107e0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2354:	9901      	ldr	r1, [sp, #4]
    2356:	9a03      	ldr	r2, [sp, #12]
    2358:	4613      	mov	r3, r2
    235a:	005b      	lsls	r3, r3, #1
    235c:	4413      	add	r3, r2
    235e:	009b      	lsls	r3, r3, #2
    2360:	440b      	add	r3, r1
    2362:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2366:	681a      	ldr	r2, [r3, #0]
    2368:	49ac      	ldr	r1, [pc, #688]	; (261c <Clock_Ip_InitClock+0x584>)
    236a:	4613      	mov	r3, r2
    236c:	00db      	lsls	r3, r3, #3
    236e:	4413      	add	r3, r2
    2370:	440b      	add	r3, r1
    2372:	3301      	adds	r3, #1
    2374:	781b      	ldrb	r3, [r3, #0]
    2376:	461a      	mov	r2, r3
    2378:	4ba9      	ldr	r3, [pc, #676]	; (2620 <Clock_Ip_InitClock+0x588>)
    237a:	5c9b      	ldrb	r3, [r3, r2]
    237c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    237e:	4aa9      	ldr	r2, [pc, #676]	; (2624 <Clock_Ip_InitClock+0x58c>)
    2380:	9b02      	ldr	r3, [sp, #8]
    2382:	00db      	lsls	r3, r3, #3
    2384:	4413      	add	r3, r2
    2386:	6859      	ldr	r1, [r3, #4]
    2388:	9a03      	ldr	r2, [sp, #12]
    238a:	4613      	mov	r3, r2
    238c:	005b      	lsls	r3, r3, #1
    238e:	4413      	add	r3, r2
    2390:	009b      	lsls	r3, r3, #2
    2392:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2396:	9a01      	ldr	r2, [sp, #4]
    2398:	4413      	add	r3, r2
    239a:	4618      	mov	r0, r3
    239c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    239e:	9b03      	ldr	r3, [sp, #12]
    23a0:	3301      	adds	r3, #1
    23a2:	9303      	str	r3, [sp, #12]
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	7b5b      	ldrb	r3, [r3, #13]
    23a8:	461a      	mov	r2, r3
    23aa:	9b03      	ldr	r3, [sp, #12]
    23ac:	4293      	cmp	r3, r2
    23ae:	d3d1      	bcc.n	2354 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    23b0:	2300      	movs	r3, #0
    23b2:	9303      	str	r3, [sp, #12]
    23b4:	e029      	b.n	240a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    23b6:	9901      	ldr	r1, [sp, #4]
    23b8:	9a03      	ldr	r2, [sp, #12]
    23ba:	4613      	mov	r3, r2
    23bc:	009b      	lsls	r3, r3, #2
    23be:	4413      	add	r3, r2
    23c0:	00db      	lsls	r3, r3, #3
    23c2:	440b      	add	r3, r1
    23c4:	3340      	adds	r3, #64	; 0x40
    23c6:	681a      	ldr	r2, [r3, #0]
    23c8:	4994      	ldr	r1, [pc, #592]	; (261c <Clock_Ip_InitClock+0x584>)
    23ca:	4613      	mov	r3, r2
    23cc:	00db      	lsls	r3, r3, #3
    23ce:	4413      	add	r3, r2
    23d0:	440b      	add	r3, r1
    23d2:	3301      	adds	r3, #1
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	461a      	mov	r2, r3
    23d8:	4b93      	ldr	r3, [pc, #588]	; (2628 <Clock_Ip_InitClock+0x590>)
    23da:	5c9b      	ldrb	r3, [r3, r2]
    23dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    23de:	4993      	ldr	r1, [pc, #588]	; (262c <Clock_Ip_InitClock+0x594>)
    23e0:	9a02      	ldr	r2, [sp, #8]
    23e2:	4613      	mov	r3, r2
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	4413      	add	r3, r2
    23e8:	009b      	lsls	r3, r3, #2
    23ea:	440b      	add	r3, r1
    23ec:	3304      	adds	r3, #4
    23ee:	6819      	ldr	r1, [r3, #0]
    23f0:	9a03      	ldr	r2, [sp, #12]
    23f2:	4613      	mov	r3, r2
    23f4:	009b      	lsls	r3, r3, #2
    23f6:	4413      	add	r3, r2
    23f8:	00db      	lsls	r3, r3, #3
    23fa:	3340      	adds	r3, #64	; 0x40
    23fc:	9a01      	ldr	r2, [sp, #4]
    23fe:	4413      	add	r3, r2
    2400:	4618      	mov	r0, r3
    2402:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2404:	9b03      	ldr	r3, [sp, #12]
    2406:	3301      	adds	r3, #1
    2408:	9303      	str	r3, [sp, #12]
    240a:	9b01      	ldr	r3, [sp, #4]
    240c:	7a9b      	ldrb	r3, [r3, #10]
    240e:	461a      	mov	r2, r3
    2410:	9b03      	ldr	r3, [sp, #12]
    2412:	4293      	cmp	r3, r2
    2414:	d3cf      	bcc.n	23b6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2416:	2300      	movs	r3, #0
    2418:	9303      	str	r3, [sp, #12]
    241a:	e029      	b.n	2470 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    241c:	9901      	ldr	r1, [sp, #4]
    241e:	9a03      	ldr	r2, [sp, #12]
    2420:	4613      	mov	r3, r2
    2422:	009b      	lsls	r3, r3, #2
    2424:	4413      	add	r3, r2
    2426:	009b      	lsls	r3, r3, #2
    2428:	440b      	add	r3, r1
    242a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    242e:	681a      	ldr	r2, [r3, #0]
    2430:	497a      	ldr	r1, [pc, #488]	; (261c <Clock_Ip_InitClock+0x584>)
    2432:	4613      	mov	r3, r2
    2434:	00db      	lsls	r3, r3, #3
    2436:	4413      	add	r3, r2
    2438:	440b      	add	r3, r1
    243a:	3301      	adds	r3, #1
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	461a      	mov	r2, r3
    2440:	4b7b      	ldr	r3, [pc, #492]	; (2630 <Clock_Ip_InitClock+0x598>)
    2442:	5c9b      	ldrb	r3, [r3, r2]
    2444:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2446:	4a7b      	ldr	r2, [pc, #492]	; (2634 <Clock_Ip_InitClock+0x59c>)
    2448:	9b02      	ldr	r3, [sp, #8]
    244a:	011b      	lsls	r3, r3, #4
    244c:	4413      	add	r3, r2
    244e:	3304      	adds	r3, #4
    2450:	681c      	ldr	r4, [r3, #0]
    2452:	9a03      	ldr	r2, [sp, #12]
    2454:	4613      	mov	r3, r2
    2456:	009b      	lsls	r3, r3, #2
    2458:	4413      	add	r3, r2
    245a:	009b      	lsls	r3, r3, #2
    245c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2460:	9a01      	ldr	r2, [sp, #4]
    2462:	4413      	add	r3, r2
    2464:	9903      	ldr	r1, [sp, #12]
    2466:	4618      	mov	r0, r3
    2468:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    246a:	9b03      	ldr	r3, [sp, #12]
    246c:	3301      	adds	r3, #1
    246e:	9303      	str	r3, [sp, #12]
    2470:	9b01      	ldr	r3, [sp, #4]
    2472:	7c9b      	ldrb	r3, [r3, #18]
    2474:	461a      	mov	r2, r3
    2476:	9b03      	ldr	r3, [sp, #12]
    2478:	4293      	cmp	r3, r2
    247a:	d3cf      	bcc.n	241c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    247c:	2300      	movs	r3, #0
    247e:	9303      	str	r3, [sp, #12]
    2480:	e02a      	b.n	24d8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2482:	9901      	ldr	r1, [sp, #4]
    2484:	9a03      	ldr	r2, [sp, #12]
    2486:	4613      	mov	r3, r2
    2488:	009b      	lsls	r3, r3, #2
    248a:	4413      	add	r3, r2
    248c:	009b      	lsls	r3, r3, #2
    248e:	440b      	add	r3, r1
    2490:	332c      	adds	r3, #44	; 0x2c
    2492:	681a      	ldr	r2, [r3, #0]
    2494:	4961      	ldr	r1, [pc, #388]	; (261c <Clock_Ip_InitClock+0x584>)
    2496:	4613      	mov	r3, r2
    2498:	00db      	lsls	r3, r3, #3
    249a:	4413      	add	r3, r2
    249c:	440b      	add	r3, r1
    249e:	3301      	adds	r3, #1
    24a0:	781b      	ldrb	r3, [r3, #0]
    24a2:	461a      	mov	r2, r3
    24a4:	4b64      	ldr	r3, [pc, #400]	; (2638 <Clock_Ip_InitClock+0x5a0>)
    24a6:	5c9b      	ldrb	r3, [r3, r2]
    24a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    24aa:	4964      	ldr	r1, [pc, #400]	; (263c <Clock_Ip_InitClock+0x5a4>)
    24ac:	9a02      	ldr	r2, [sp, #8]
    24ae:	4613      	mov	r3, r2
    24b0:	009b      	lsls	r3, r3, #2
    24b2:	4413      	add	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	440b      	add	r3, r1
    24b8:	3308      	adds	r3, #8
    24ba:	6819      	ldr	r1, [r3, #0]
    24bc:	9a03      	ldr	r2, [sp, #12]
    24be:	4613      	mov	r3, r2
    24c0:	009b      	lsls	r3, r3, #2
    24c2:	4413      	add	r3, r2
    24c4:	009b      	lsls	r3, r3, #2
    24c6:	3328      	adds	r3, #40	; 0x28
    24c8:	9a01      	ldr	r2, [sp, #4]
    24ca:	4413      	add	r3, r2
    24cc:	3304      	adds	r3, #4
    24ce:	4618      	mov	r0, r3
    24d0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24d2:	9b03      	ldr	r3, [sp, #12]
    24d4:	3301      	adds	r3, #1
    24d6:	9303      	str	r3, [sp, #12]
    24d8:	9b01      	ldr	r3, [sp, #4]
    24da:	7a5b      	ldrb	r3, [r3, #9]
    24dc:	461a      	mov	r2, r3
    24de:	9b03      	ldr	r3, [sp, #12]
    24e0:	4293      	cmp	r3, r2
    24e2:	d3ce      	bcc.n	2482 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    24e4:	2300      	movs	r3, #0
    24e6:	9303      	str	r3, [sp, #12]
    24e8:	e029      	b.n	253e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    24ea:	9901      	ldr	r1, [sp, #4]
    24ec:	9a03      	ldr	r2, [sp, #12]
    24ee:	4613      	mov	r3, r2
    24f0:	009b      	lsls	r3, r3, #2
    24f2:	4413      	add	r3, r2
    24f4:	00db      	lsls	r3, r3, #3
    24f6:	440b      	add	r3, r1
    24f8:	3340      	adds	r3, #64	; 0x40
    24fa:	681a      	ldr	r2, [r3, #0]
    24fc:	4947      	ldr	r1, [pc, #284]	; (261c <Clock_Ip_InitClock+0x584>)
    24fe:	4613      	mov	r3, r2
    2500:	00db      	lsls	r3, r3, #3
    2502:	4413      	add	r3, r2
    2504:	440b      	add	r3, r1
    2506:	3301      	adds	r3, #1
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	461a      	mov	r2, r3
    250c:	4b46      	ldr	r3, [pc, #280]	; (2628 <Clock_Ip_InitClock+0x590>)
    250e:	5c9b      	ldrb	r3, [r3, r2]
    2510:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2512:	4946      	ldr	r1, [pc, #280]	; (262c <Clock_Ip_InitClock+0x594>)
    2514:	9a02      	ldr	r2, [sp, #8]
    2516:	4613      	mov	r3, r2
    2518:	009b      	lsls	r3, r3, #2
    251a:	4413      	add	r3, r2
    251c:	009b      	lsls	r3, r3, #2
    251e:	440b      	add	r3, r1
    2520:	330c      	adds	r3, #12
    2522:	6819      	ldr	r1, [r3, #0]
    2524:	9a03      	ldr	r2, [sp, #12]
    2526:	4613      	mov	r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	4413      	add	r3, r2
    252c:	00db      	lsls	r3, r3, #3
    252e:	3340      	adds	r3, #64	; 0x40
    2530:	9a01      	ldr	r2, [sp, #4]
    2532:	4413      	add	r3, r2
    2534:	4618      	mov	r0, r3
    2536:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2538:	9b03      	ldr	r3, [sp, #12]
    253a:	3301      	adds	r3, #1
    253c:	9303      	str	r3, [sp, #12]
    253e:	9b01      	ldr	r3, [sp, #4]
    2540:	7a9b      	ldrb	r3, [r3, #10]
    2542:	461a      	mov	r2, r3
    2544:	9b03      	ldr	r3, [sp, #12]
    2546:	4293      	cmp	r3, r2
    2548:	d3cf      	bcc.n	24ea <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    254a:	2300      	movs	r3, #0
    254c:	9303      	str	r3, [sp, #12]
    254e:	e025      	b.n	259c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2550:	9a01      	ldr	r2, [sp, #4]
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	3324      	adds	r3, #36	; 0x24
    2556:	011b      	lsls	r3, r3, #4
    2558:	4413      	add	r3, r2
    255a:	3304      	adds	r3, #4
    255c:	681a      	ldr	r2, [r3, #0]
    255e:	492f      	ldr	r1, [pc, #188]	; (261c <Clock_Ip_InitClock+0x584>)
    2560:	4613      	mov	r3, r2
    2562:	00db      	lsls	r3, r3, #3
    2564:	4413      	add	r3, r2
    2566:	440b      	add	r3, r1
    2568:	3301      	adds	r3, #1
    256a:	781b      	ldrb	r3, [r3, #0]
    256c:	461a      	mov	r2, r3
    256e:	4b34      	ldr	r3, [pc, #208]	; (2640 <Clock_Ip_InitClock+0x5a8>)
    2570:	5c9b      	ldrb	r3, [r3, r2]
    2572:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2574:	4933      	ldr	r1, [pc, #204]	; (2644 <Clock_Ip_InitClock+0x5ac>)
    2576:	9a02      	ldr	r2, [sp, #8]
    2578:	4613      	mov	r3, r2
    257a:	005b      	lsls	r3, r3, #1
    257c:	4413      	add	r3, r2
    257e:	009b      	lsls	r3, r3, #2
    2580:	440b      	add	r3, r1
    2582:	3304      	adds	r3, #4
    2584:	681b      	ldr	r3, [r3, #0]
    2586:	9a03      	ldr	r2, [sp, #12]
    2588:	3224      	adds	r2, #36	; 0x24
    258a:	0112      	lsls	r2, r2, #4
    258c:	9901      	ldr	r1, [sp, #4]
    258e:	440a      	add	r2, r1
    2590:	3204      	adds	r2, #4
    2592:	4610      	mov	r0, r2
    2594:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2596:	9b03      	ldr	r3, [sp, #12]
    2598:	3301      	adds	r3, #1
    259a:	9303      	str	r3, [sp, #12]
    259c:	9b01      	ldr	r3, [sp, #4]
    259e:	7b9b      	ldrb	r3, [r3, #14]
    25a0:	461a      	mov	r2, r3
    25a2:	9b03      	ldr	r3, [sp, #12]
    25a4:	4293      	cmp	r3, r2
    25a6:	d3d3      	bcc.n	2550 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    25a8:	4b27      	ldr	r3, [pc, #156]	; (2648 <Clock_Ip_InitClock+0x5b0>)
    25aa:	2200      	movs	r2, #0
    25ac:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    25ae:	4b26      	ldr	r3, [pc, #152]	; (2648 <Clock_Ip_InitClock+0x5b0>)
    25b0:	2200      	movs	r2, #0
    25b2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    25b4:	4b24      	ldr	r3, [pc, #144]	; (2648 <Clock_Ip_InitClock+0x5b0>)
    25b6:	2201      	movs	r2, #1
    25b8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    25ba:	4b23      	ldr	r3, [pc, #140]	; (2648 <Clock_Ip_InitClock+0x5b0>)
    25bc:	2200      	movs	r2, #0
    25be:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    25c0:	f000 fa9c 	bl	2afc <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    25c4:	2300      	movs	r3, #0
    25c6:	9303      	str	r3, [sp, #12]
    25c8:	e04c      	b.n	2664 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    25ca:	9a01      	ldr	r2, [sp, #4]
    25cc:	9b03      	ldr	r3, [sp, #12]
    25ce:	330d      	adds	r3, #13
    25d0:	00db      	lsls	r3, r3, #3
    25d2:	4413      	add	r3, r2
    25d4:	685b      	ldr	r3, [r3, #4]
    25d6:	4a1d      	ldr	r2, [pc, #116]	; (264c <Clock_Ip_InitClock+0x5b4>)
    25d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    25dc:	2b03      	cmp	r3, #3
    25de:	d03b      	beq.n	2658 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    25e0:	9b01      	ldr	r3, [sp, #4]
    25e2:	9a03      	ldr	r2, [sp, #12]
    25e4:	320d      	adds	r2, #13
    25e6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    25ea:	490c      	ldr	r1, [pc, #48]	; (261c <Clock_Ip_InitClock+0x584>)
    25ec:	4613      	mov	r3, r2
    25ee:	00db      	lsls	r3, r3, #3
    25f0:	4413      	add	r3, r2
    25f2:	440b      	add	r3, r1
    25f4:	3301      	adds	r3, #1
    25f6:	781b      	ldrb	r3, [r3, #0]
    25f8:	461a      	mov	r2, r3
    25fa:	4b15      	ldr	r3, [pc, #84]	; (2650 <Clock_Ip_InitClock+0x5b8>)
    25fc:	5c9b      	ldrb	r3, [r3, r2]
    25fe:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2600:	4a14      	ldr	r2, [pc, #80]	; (2654 <Clock_Ip_InitClock+0x5bc>)
    2602:	9b02      	ldr	r3, [sp, #8]
    2604:	00db      	lsls	r3, r3, #3
    2606:	4413      	add	r3, r2
    2608:	685b      	ldr	r3, [r3, #4]
    260a:	9a03      	ldr	r2, [sp, #12]
    260c:	320d      	adds	r2, #13
    260e:	00d2      	lsls	r2, r2, #3
    2610:	9901      	ldr	r1, [sp, #4]
    2612:	440a      	add	r2, r1
    2614:	4610      	mov	r0, r2
    2616:	4798      	blx	r3
    2618:	e021      	b.n	265e <Clock_Ip_InitClock+0x5c6>
    261a:	bf00      	nop
    261c:	000102d0 	.word	0x000102d0
    2620:	00010240 	.word	0x00010240
    2624:	0001081c 	.word	0x0001081c
    2628:	00010290 	.word	0x00010290
    262c:	000108dc 	.word	0x000108dc
    2630:	000102c0 	.word	0x000102c0
    2634:	000108cc 	.word	0x000108cc
    2638:	00010250 	.word	0x00010250
    263c:	00010824 	.word	0x00010824
    2640:	00010280 	.word	0x00010280
    2644:	0001084c 	.word	0x0001084c
    2648:	1fff8b44 	.word	0x1fff8b44
    264c:	0001071c 	.word	0x0001071c
    2650:	000102a0 	.word	0x000102a0
    2654:	00010908 	.word	0x00010908
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2658:	4b3a      	ldr	r3, [pc, #232]	; (2744 <Clock_Ip_InitClock+0x6ac>)
    265a:	2201      	movs	r2, #1
    265c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	3301      	adds	r3, #1
    2662:	9303      	str	r3, [sp, #12]
    2664:	9b01      	ldr	r3, [sp, #4]
    2666:	7adb      	ldrb	r3, [r3, #11]
    2668:	461a      	mov	r2, r3
    266a:	9b03      	ldr	r3, [sp, #12]
    266c:	4293      	cmp	r3, r2
    266e:	d3ac      	bcc.n	25ca <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2670:	4b34      	ldr	r3, [pc, #208]	; (2744 <Clock_Ip_InitClock+0x6ac>)
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	f083 0301 	eor.w	r3, r3, #1
    2678:	b2db      	uxtb	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	d05e      	beq.n	273c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    267e:	2300      	movs	r3, #0
    2680:	9303      	str	r3, [sp, #12]
    2682:	e01f      	b.n	26c4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2684:	9a01      	ldr	r2, [sp, #4]
    2686:	9b03      	ldr	r3, [sp, #12]
    2688:	334e      	adds	r3, #78	; 0x4e
    268a:	00db      	lsls	r3, r3, #3
    268c:	4413      	add	r3, r2
    268e:	685a      	ldr	r2, [r3, #4]
    2690:	492d      	ldr	r1, [pc, #180]	; (2748 <Clock_Ip_InitClock+0x6b0>)
    2692:	4613      	mov	r3, r2
    2694:	00db      	lsls	r3, r3, #3
    2696:	4413      	add	r3, r2
    2698:	440b      	add	r3, r1
    269a:	3301      	adds	r3, #1
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	461a      	mov	r2, r3
    26a0:	4b2a      	ldr	r3, [pc, #168]	; (274c <Clock_Ip_InitClock+0x6b4>)
    26a2:	5c9b      	ldrb	r3, [r3, r2]
    26a4:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    26a6:	4a2a      	ldr	r2, [pc, #168]	; (2750 <Clock_Ip_InitClock+0x6b8>)
    26a8:	9b02      	ldr	r3, [sp, #8]
    26aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    26ae:	9a03      	ldr	r2, [sp, #12]
    26b0:	324e      	adds	r2, #78	; 0x4e
    26b2:	00d2      	lsls	r2, r2, #3
    26b4:	9901      	ldr	r1, [sp, #4]
    26b6:	440a      	add	r2, r1
    26b8:	3204      	adds	r2, #4
    26ba:	4610      	mov	r0, r2
    26bc:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26be:	9b03      	ldr	r3, [sp, #12]
    26c0:	3301      	adds	r3, #1
    26c2:	9303      	str	r3, [sp, #12]
    26c4:	9b01      	ldr	r3, [sp, #4]
    26c6:	7c1b      	ldrb	r3, [r3, #16]
    26c8:	461a      	mov	r2, r3
    26ca:	9b03      	ldr	r3, [sp, #12]
    26cc:	4293      	cmp	r3, r2
    26ce:	d3d9      	bcc.n	2684 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    26d0:	2300      	movs	r3, #0
    26d2:	9303      	str	r3, [sp, #12]
    26d4:	e028      	b.n	2728 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    26d6:	9901      	ldr	r1, [sp, #4]
    26d8:	9a03      	ldr	r2, [sp, #12]
    26da:	4613      	mov	r3, r2
    26dc:	009b      	lsls	r3, r3, #2
    26de:	4413      	add	r3, r2
    26e0:	009b      	lsls	r3, r3, #2
    26e2:	440b      	add	r3, r1
    26e4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26e8:	681a      	ldr	r2, [r3, #0]
    26ea:	4917      	ldr	r1, [pc, #92]	; (2748 <Clock_Ip_InitClock+0x6b0>)
    26ec:	4613      	mov	r3, r2
    26ee:	00db      	lsls	r3, r3, #3
    26f0:	4413      	add	r3, r2
    26f2:	440b      	add	r3, r1
    26f4:	3301      	adds	r3, #1
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	461a      	mov	r2, r3
    26fa:	4b16      	ldr	r3, [pc, #88]	; (2754 <Clock_Ip_InitClock+0x6bc>)
    26fc:	5c9b      	ldrb	r3, [r3, r2]
    26fe:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2700:	4a15      	ldr	r2, [pc, #84]	; (2758 <Clock_Ip_InitClock+0x6c0>)
    2702:	9b02      	ldr	r3, [sp, #8]
    2704:	011b      	lsls	r3, r3, #4
    2706:	4413      	add	r3, r2
    2708:	330c      	adds	r3, #12
    270a:	6819      	ldr	r1, [r3, #0]
    270c:	9a03      	ldr	r2, [sp, #12]
    270e:	4613      	mov	r3, r2
    2710:	009b      	lsls	r3, r3, #2
    2712:	4413      	add	r3, r2
    2714:	009b      	lsls	r3, r3, #2
    2716:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    271a:	9a01      	ldr	r2, [sp, #4]
    271c:	4413      	add	r3, r2
    271e:	4618      	mov	r0, r3
    2720:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	3301      	adds	r3, #1
    2726:	9303      	str	r3, [sp, #12]
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	7c9b      	ldrb	r3, [r3, #18]
    272c:	461a      	mov	r2, r3
    272e:	9b03      	ldr	r3, [sp, #12]
    2730:	4293      	cmp	r3, r2
    2732:	d3d0      	bcc.n	26d6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2734:	2104      	movs	r1, #4
    2736:	9801      	ldr	r0, [sp, #4]
    2738:	f002 ff48 	bl	55cc <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    273c:	bf00      	nop
    273e:	b004      	add	sp, #16
    2740:	bd10      	pop	{r4, pc}
    2742:	bf00      	nop
    2744:	1fff8b44 	.word	0x1fff8b44
    2748:	000102d0 	.word	0x000102d0
    274c:	00010270 	.word	0x00010270
    2750:	00010858 	.word	0x00010858
    2754:	000102c0 	.word	0x000102c0
    2758:	000108cc 	.word	0x000108cc

0000275c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    275c:	b500      	push	{lr}
    275e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2760:	2302      	movs	r3, #2
    2762:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2764:	2300      	movs	r3, #0
    2766:	9304      	str	r3, [sp, #16]
    2768:	e02c      	b.n	27c4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    276a:	4a36      	ldr	r2, [pc, #216]	; (2844 <Clock_Ip_GetPllStatus+0xe8>)
    276c:	9b04      	ldr	r3, [sp, #16]
    276e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2772:	4935      	ldr	r1, [pc, #212]	; (2848 <Clock_Ip_GetPllStatus+0xec>)
    2774:	4613      	mov	r3, r2
    2776:	00db      	lsls	r3, r3, #3
    2778:	4413      	add	r3, r2
    277a:	440b      	add	r3, r1
    277c:	3301      	adds	r3, #1
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	461a      	mov	r2, r3
    2782:	4b32      	ldr	r3, [pc, #200]	; (284c <Clock_Ip_GetPllStatus+0xf0>)
    2784:	5c9b      	ldrb	r3, [r3, r2]
    2786:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2788:	4931      	ldr	r1, [pc, #196]	; (2850 <Clock_Ip_GetPllStatus+0xf4>)
    278a:	9a03      	ldr	r2, [sp, #12]
    278c:	4613      	mov	r3, r2
    278e:	009b      	lsls	r3, r3, #2
    2790:	4413      	add	r3, r2
    2792:	009b      	lsls	r3, r3, #2
    2794:	440b      	add	r3, r1
    2796:	3308      	adds	r3, #8
    2798:	681b      	ldr	r3, [r3, #0]
    279a:	492a      	ldr	r1, [pc, #168]	; (2844 <Clock_Ip_GetPllStatus+0xe8>)
    279c:	9a04      	ldr	r2, [sp, #16]
    279e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    27a2:	4610      	mov	r0, r2
    27a4:	4798      	blx	r3
    27a6:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    27a8:	9b02      	ldr	r3, [sp, #8]
    27aa:	2b01      	cmp	r3, #1
    27ac:	d102      	bne.n	27b4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    27ae:	2301      	movs	r3, #1
    27b0:	9305      	str	r3, [sp, #20]
            break;
    27b2:	e00d      	b.n	27d0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    27b4:	9b02      	ldr	r3, [sp, #8]
    27b6:	2b02      	cmp	r3, #2
    27b8:	d101      	bne.n	27be <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    27ba:	2300      	movs	r3, #0
    27bc:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27be:	9b04      	ldr	r3, [sp, #16]
    27c0:	3301      	adds	r3, #1
    27c2:	9304      	str	r3, [sp, #16]
    27c4:	4b23      	ldr	r3, [pc, #140]	; (2854 <Clock_Ip_GetPllStatus+0xf8>)
    27c6:	789b      	ldrb	r3, [r3, #2]
    27c8:	461a      	mov	r2, r3
    27ca:	9b04      	ldr	r3, [sp, #16]
    27cc:	4293      	cmp	r3, r2
    27ce:	d3cc      	bcc.n	276a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    27d0:	9b05      	ldr	r3, [sp, #20]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d130      	bne.n	2838 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    27d6:	2300      	movs	r3, #0
    27d8:	9304      	str	r3, [sp, #16]
    27da:	e027      	b.n	282c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    27dc:	4a1e      	ldr	r2, [pc, #120]	; (2858 <Clock_Ip_GetPllStatus+0xfc>)
    27de:	9b04      	ldr	r3, [sp, #16]
    27e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27e4:	4918      	ldr	r1, [pc, #96]	; (2848 <Clock_Ip_GetPllStatus+0xec>)
    27e6:	4613      	mov	r3, r2
    27e8:	00db      	lsls	r3, r3, #3
    27ea:	4413      	add	r3, r2
    27ec:	440b      	add	r3, r1
    27ee:	3301      	adds	r3, #1
    27f0:	781b      	ldrb	r3, [r3, #0]
    27f2:	461a      	mov	r2, r3
    27f4:	4b19      	ldr	r3, [pc, #100]	; (285c <Clock_Ip_GetPllStatus+0x100>)
    27f6:	5c9b      	ldrb	r3, [r3, r2]
    27f8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    27fa:	4919      	ldr	r1, [pc, #100]	; (2860 <Clock_Ip_GetPllStatus+0x104>)
    27fc:	9a03      	ldr	r2, [sp, #12]
    27fe:	4613      	mov	r3, r2
    2800:	005b      	lsls	r3, r3, #1
    2802:	4413      	add	r3, r2
    2804:	009b      	lsls	r3, r3, #2
    2806:	440b      	add	r3, r1
    2808:	3308      	adds	r3, #8
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	4912      	ldr	r1, [pc, #72]	; (2858 <Clock_Ip_GetPllStatus+0xfc>)
    280e:	9a04      	ldr	r2, [sp, #16]
    2810:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2814:	4610      	mov	r0, r2
    2816:	4798      	blx	r3
    2818:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    281a:	9b01      	ldr	r3, [sp, #4]
    281c:	2b01      	cmp	r3, #1
    281e:	d102      	bne.n	2826 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2820:	2301      	movs	r3, #1
    2822:	9305      	str	r3, [sp, #20]
                break;
    2824:	e008      	b.n	2838 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2826:	9b04      	ldr	r3, [sp, #16]
    2828:	3301      	adds	r3, #1
    282a:	9304      	str	r3, [sp, #16]
    282c:	4b09      	ldr	r3, [pc, #36]	; (2854 <Clock_Ip_GetPllStatus+0xf8>)
    282e:	78db      	ldrb	r3, [r3, #3]
    2830:	461a      	mov	r2, r3
    2832:	9b04      	ldr	r3, [sp, #16]
    2834:	4293      	cmp	r3, r2
    2836:	d3d1      	bcc.n	27dc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2838:	9b05      	ldr	r3, [sp, #20]
}
    283a:	4618      	mov	r0, r3
    283c:	b007      	add	sp, #28
    283e:	f85d fb04 	ldr.w	pc, [sp], #4
    2842:	bf00      	nop
    2844:	000107d8 	.word	0x000107d8
    2848:	000102d0 	.word	0x000102d0
    284c:	00010290 	.word	0x00010290
    2850:	000108dc 	.word	0x000108dc
    2854:	1fff8b44 	.word	0x1fff8b44
    2858:	000107dc 	.word	0x000107dc
    285c:	00010280 	.word	0x00010280
    2860:	0001084c 	.word	0x0001084c

00002864 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2864:	b500      	push	{lr}
    2866:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2868:	4b55      	ldr	r3, [pc, #340]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    286a:	681b      	ldr	r3, [r3, #0]
    286c:	2b00      	cmp	r3, #0
    286e:	f000 80a2 	beq.w	29b6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2872:	2300      	movs	r3, #0
    2874:	9301      	str	r3, [sp, #4]
    2876:	e02c      	b.n	28d2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2878:	4b51      	ldr	r3, [pc, #324]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    287a:	681a      	ldr	r2, [r3, #0]
    287c:	9b01      	ldr	r3, [sp, #4]
    287e:	330d      	adds	r3, #13
    2880:	00db      	lsls	r3, r3, #3
    2882:	4413      	add	r3, r2
    2884:	685b      	ldr	r3, [r3, #4]
    2886:	4a4f      	ldr	r2, [pc, #316]	; (29c4 <Clock_Ip_DistributePll+0x160>)
    2888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    288c:	2b03      	cmp	r3, #3
    288e:	d11d      	bne.n	28cc <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2890:	4b4b      	ldr	r3, [pc, #300]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    2892:	681b      	ldr	r3, [r3, #0]
    2894:	9a01      	ldr	r2, [sp, #4]
    2896:	320d      	adds	r2, #13
    2898:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    289c:	494a      	ldr	r1, [pc, #296]	; (29c8 <Clock_Ip_DistributePll+0x164>)
    289e:	4613      	mov	r3, r2
    28a0:	00db      	lsls	r3, r3, #3
    28a2:	4413      	add	r3, r2
    28a4:	440b      	add	r3, r1
    28a6:	3301      	adds	r3, #1
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	461a      	mov	r2, r3
    28ac:	4b47      	ldr	r3, [pc, #284]	; (29cc <Clock_Ip_DistributePll+0x168>)
    28ae:	5c9b      	ldrb	r3, [r3, r2]
    28b0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    28b2:	4a47      	ldr	r2, [pc, #284]	; (29d0 <Clock_Ip_DistributePll+0x16c>)
    28b4:	9b00      	ldr	r3, [sp, #0]
    28b6:	00db      	lsls	r3, r3, #3
    28b8:	4413      	add	r3, r2
    28ba:	685b      	ldr	r3, [r3, #4]
    28bc:	4a40      	ldr	r2, [pc, #256]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    28be:	6811      	ldr	r1, [r2, #0]
    28c0:	9a01      	ldr	r2, [sp, #4]
    28c2:	320d      	adds	r2, #13
    28c4:	00d2      	lsls	r2, r2, #3
    28c6:	440a      	add	r2, r1
    28c8:	4610      	mov	r0, r2
    28ca:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28cc:	9b01      	ldr	r3, [sp, #4]
    28ce:	3301      	adds	r3, #1
    28d0:	9301      	str	r3, [sp, #4]
    28d2:	4b3b      	ldr	r3, [pc, #236]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	7adb      	ldrb	r3, [r3, #11]
    28d8:	461a      	mov	r2, r3
    28da:	9b01      	ldr	r3, [sp, #4]
    28dc:	4293      	cmp	r3, r2
    28de:	d3cb      	bcc.n	2878 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    28e0:	4b3c      	ldr	r3, [pc, #240]	; (29d4 <Clock_Ip_DistributePll+0x170>)
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	2b00      	cmp	r3, #0
    28e6:	d066      	beq.n	29b6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    28e8:	2300      	movs	r3, #0
    28ea:	9301      	str	r3, [sp, #4]
    28ec:	e021      	b.n	2932 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    28ee:	4b34      	ldr	r3, [pc, #208]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    28f0:	681a      	ldr	r2, [r3, #0]
    28f2:	9b01      	ldr	r3, [sp, #4]
    28f4:	334e      	adds	r3, #78	; 0x4e
    28f6:	00db      	lsls	r3, r3, #3
    28f8:	4413      	add	r3, r2
    28fa:	685a      	ldr	r2, [r3, #4]
    28fc:	4932      	ldr	r1, [pc, #200]	; (29c8 <Clock_Ip_DistributePll+0x164>)
    28fe:	4613      	mov	r3, r2
    2900:	00db      	lsls	r3, r3, #3
    2902:	4413      	add	r3, r2
    2904:	440b      	add	r3, r1
    2906:	3301      	adds	r3, #1
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	461a      	mov	r2, r3
    290c:	4b32      	ldr	r3, [pc, #200]	; (29d8 <Clock_Ip_DistributePll+0x174>)
    290e:	5c9b      	ldrb	r3, [r3, r2]
    2910:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2912:	4a32      	ldr	r2, [pc, #200]	; (29dc <Clock_Ip_DistributePll+0x178>)
    2914:	9b00      	ldr	r3, [sp, #0]
    2916:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    291a:	4a29      	ldr	r2, [pc, #164]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    291c:	6811      	ldr	r1, [r2, #0]
    291e:	9a01      	ldr	r2, [sp, #4]
    2920:	324e      	adds	r2, #78	; 0x4e
    2922:	00d2      	lsls	r2, r2, #3
    2924:	440a      	add	r2, r1
    2926:	3204      	adds	r2, #4
    2928:	4610      	mov	r0, r2
    292a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    292c:	9b01      	ldr	r3, [sp, #4]
    292e:	3301      	adds	r3, #1
    2930:	9301      	str	r3, [sp, #4]
    2932:	4b23      	ldr	r3, [pc, #140]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    2934:	681b      	ldr	r3, [r3, #0]
    2936:	7c1b      	ldrb	r3, [r3, #16]
    2938:	461a      	mov	r2, r3
    293a:	9b01      	ldr	r3, [sp, #4]
    293c:	4293      	cmp	r3, r2
    293e:	d3d6      	bcc.n	28ee <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2940:	2300      	movs	r3, #0
    2942:	9301      	str	r3, [sp, #4]
    2944:	e02a      	b.n	299c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2946:	4b1e      	ldr	r3, [pc, #120]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    2948:	6819      	ldr	r1, [r3, #0]
    294a:	9a01      	ldr	r2, [sp, #4]
    294c:	4613      	mov	r3, r2
    294e:	009b      	lsls	r3, r3, #2
    2950:	4413      	add	r3, r2
    2952:	009b      	lsls	r3, r3, #2
    2954:	440b      	add	r3, r1
    2956:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    295a:	681a      	ldr	r2, [r3, #0]
    295c:	491a      	ldr	r1, [pc, #104]	; (29c8 <Clock_Ip_DistributePll+0x164>)
    295e:	4613      	mov	r3, r2
    2960:	00db      	lsls	r3, r3, #3
    2962:	4413      	add	r3, r2
    2964:	440b      	add	r3, r1
    2966:	3301      	adds	r3, #1
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	461a      	mov	r2, r3
    296c:	4b1c      	ldr	r3, [pc, #112]	; (29e0 <Clock_Ip_DistributePll+0x17c>)
    296e:	5c9b      	ldrb	r3, [r3, r2]
    2970:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2972:	4a1c      	ldr	r2, [pc, #112]	; (29e4 <Clock_Ip_DistributePll+0x180>)
    2974:	9b00      	ldr	r3, [sp, #0]
    2976:	011b      	lsls	r3, r3, #4
    2978:	4413      	add	r3, r2
    297a:	330c      	adds	r3, #12
    297c:	6819      	ldr	r1, [r3, #0]
    297e:	4b10      	ldr	r3, [pc, #64]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    2980:	6818      	ldr	r0, [r3, #0]
    2982:	9a01      	ldr	r2, [sp, #4]
    2984:	4613      	mov	r3, r2
    2986:	009b      	lsls	r3, r3, #2
    2988:	4413      	add	r3, r2
    298a:	009b      	lsls	r3, r3, #2
    298c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2990:	4403      	add	r3, r0
    2992:	4618      	mov	r0, r3
    2994:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2996:	9b01      	ldr	r3, [sp, #4]
    2998:	3301      	adds	r3, #1
    299a:	9301      	str	r3, [sp, #4]
    299c:	4b08      	ldr	r3, [pc, #32]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	7c9b      	ldrb	r3, [r3, #18]
    29a2:	461a      	mov	r2, r3
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	4293      	cmp	r3, r2
    29a8:	d3cd      	bcc.n	2946 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    29aa:	4b05      	ldr	r3, [pc, #20]	; (29c0 <Clock_Ip_DistributePll+0x15c>)
    29ac:	681b      	ldr	r3, [r3, #0]
    29ae:	2104      	movs	r1, #4
    29b0:	4618      	mov	r0, r3
    29b2:	f002 fe0b 	bl	55cc <Clock_Ip_Command>
        }
    }
}
    29b6:	bf00      	nop
    29b8:	b003      	add	sp, #12
    29ba:	f85d fb04 	ldr.w	pc, [sp], #4
    29be:	bf00      	nop
    29c0:	1fff8b3c 	.word	0x1fff8b3c
    29c4:	0001071c 	.word	0x0001071c
    29c8:	000102d0 	.word	0x000102d0
    29cc:	000102a0 	.word	0x000102a0
    29d0:	00010908 	.word	0x00010908
    29d4:	1fff8b44 	.word	0x1fff8b44
    29d8:	00010270 	.word	0x00010270
    29dc:	00010858 	.word	0x00010858
    29e0:	000102c0 	.word	0x000102c0
    29e4:	000108cc 	.word	0x000108cc

000029e8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    29e8:	b500      	push	{lr}
    29ea:	b085      	sub	sp, #20
    29ec:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29ee:	490c      	ldr	r1, [pc, #48]	; (2a20 <Clock_Ip_DisableClockMonitor+0x38>)
    29f0:	9a01      	ldr	r2, [sp, #4]
    29f2:	4613      	mov	r3, r2
    29f4:	00db      	lsls	r3, r3, #3
    29f6:	4413      	add	r3, r2
    29f8:	440b      	add	r3, r1
    29fa:	3301      	adds	r3, #1
    29fc:	781b      	ldrb	r3, [r3, #0]
    29fe:	461a      	mov	r2, r3
    2a00:	4b08      	ldr	r3, [pc, #32]	; (2a24 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a02:	5c9b      	ldrb	r3, [r3, r2]
    2a04:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a06:	4a08      	ldr	r2, [pc, #32]	; (2a28 <Clock_Ip_DisableClockMonitor+0x40>)
    2a08:	9b03      	ldr	r3, [sp, #12]
    2a0a:	011b      	lsls	r3, r3, #4
    2a0c:	4413      	add	r3, r2
    2a0e:	3308      	adds	r3, #8
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	9801      	ldr	r0, [sp, #4]
    2a14:	4798      	blx	r3
}
    2a16:	bf00      	nop
    2a18:	b005      	add	sp, #20
    2a1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a1e:	bf00      	nop
    2a20:	000102d0 	.word	0x000102d0
    2a24:	000102c0 	.word	0x000102c0
    2a28:	000108cc 	.word	0x000108cc

00002a2c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2a2c:	b082      	sub	sp, #8
    2a2e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2a30:	4a02      	ldr	r2, [pc, #8]	; (2a3c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2a32:	9b01      	ldr	r3, [sp, #4]
    2a34:	6013      	str	r3, [r2, #0]
}
    2a36:	bf00      	nop
    2a38:	b002      	add	sp, #8
    2a3a:	4770      	bx	lr
    2a3c:	1fff8b14 	.word	0x1fff8b14

00002a40 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2a40:	b500      	push	{lr}
    2a42:	b085      	sub	sp, #20
    2a44:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a46:	490c      	ldr	r1, [pc, #48]	; (2a78 <Clock_Ip_DisableModuleClock+0x38>)
    2a48:	9a01      	ldr	r2, [sp, #4]
    2a4a:	4613      	mov	r3, r2
    2a4c:	00db      	lsls	r3, r3, #3
    2a4e:	4413      	add	r3, r2
    2a50:	440b      	add	r3, r1
    2a52:	3301      	adds	r3, #1
    2a54:	781b      	ldrb	r3, [r3, #0]
    2a56:	461a      	mov	r2, r3
    2a58:	4b08      	ldr	r3, [pc, #32]	; (2a7c <Clock_Ip_DisableModuleClock+0x3c>)
    2a5a:	5c9b      	ldrb	r3, [r3, r2]
    2a5c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2a5e:	4a08      	ldr	r2, [pc, #32]	; (2a80 <Clock_Ip_DisableModuleClock+0x40>)
    2a60:	9b03      	ldr	r3, [sp, #12]
    2a62:	00db      	lsls	r3, r3, #3
    2a64:	4413      	add	r3, r2
    2a66:	685b      	ldr	r3, [r3, #4]
    2a68:	2101      	movs	r1, #1
    2a6a:	9801      	ldr	r0, [sp, #4]
    2a6c:	4798      	blx	r3
}
    2a6e:	bf00      	nop
    2a70:	b005      	add	sp, #20
    2a72:	f85d fb04 	ldr.w	pc, [sp], #4
    2a76:	bf00      	nop
    2a78:	000102d0 	.word	0x000102d0
    2a7c:	00010270 	.word	0x00010270
    2a80:	00010858 	.word	0x00010858

00002a84 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2a84:	b500      	push	{lr}
    2a86:	b085      	sub	sp, #20
    2a88:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a8a:	490c      	ldr	r1, [pc, #48]	; (2abc <Clock_Ip_EnableModuleClock+0x38>)
    2a8c:	9a01      	ldr	r2, [sp, #4]
    2a8e:	4613      	mov	r3, r2
    2a90:	00db      	lsls	r3, r3, #3
    2a92:	4413      	add	r3, r2
    2a94:	440b      	add	r3, r1
    2a96:	3301      	adds	r3, #1
    2a98:	781b      	ldrb	r3, [r3, #0]
    2a9a:	461a      	mov	r2, r3
    2a9c:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <Clock_Ip_EnableModuleClock+0x3c>)
    2a9e:	5c9b      	ldrb	r3, [r3, r2]
    2aa0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2aa2:	4a08      	ldr	r2, [pc, #32]	; (2ac4 <Clock_Ip_EnableModuleClock+0x40>)
    2aa4:	9b03      	ldr	r3, [sp, #12]
    2aa6:	00db      	lsls	r3, r3, #3
    2aa8:	4413      	add	r3, r2
    2aaa:	685b      	ldr	r3, [r3, #4]
    2aac:	2100      	movs	r1, #0
    2aae:	9801      	ldr	r0, [sp, #4]
    2ab0:	4798      	blx	r3
}
    2ab2:	bf00      	nop
    2ab4:	b005      	add	sp, #20
    2ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aba:	bf00      	nop
    2abc:	000102d0 	.word	0x000102d0
    2ac0:	00010270 	.word	0x00010270
    2ac4:	00010858 	.word	0x00010858

00002ac8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2ac8:	b500      	push	{lr}
    2aca:	b083      	sub	sp, #12
    2acc:	9001      	str	r0, [sp, #4]
    2ace:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ad0:	4b08      	ldr	r3, [pc, #32]	; (2af4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2ad2:	2200      	movs	r2, #0
    2ad4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2ad6:	4b08      	ldr	r3, [pc, #32]	; (2af8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	2102      	movs	r1, #2
    2adc:	4618      	mov	r0, r3
    2ade:	f002 fd75 	bl	55cc <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2ae2:	9900      	ldr	r1, [sp, #0]
    2ae4:	9801      	ldr	r0, [sp, #4]
    2ae6:	f002 fc51 	bl	538c <Clock_Ip_ClockPowerModeChangeNotification>
}
    2aea:	bf00      	nop
    2aec:	b003      	add	sp, #12
    2aee:	f85d fb04 	ldr.w	pc, [sp], #4
    2af2:	bf00      	nop
    2af4:	1fff8b10 	.word	0x1fff8b10
    2af8:	1fff8b3c 	.word	0x1fff8b3c

00002afc <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2afc:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2afe:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b02:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b04:	4b06      	ldr	r3, [pc, #24]	; (2b20 <Clock_Ip_SetWaitStates+0x24>)
    2b06:	785b      	ldrb	r3, [r3, #1]
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d005      	beq.n	2b18 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2b0c:	9b01      	ldr	r3, [sp, #4]
    2b0e:	3b01      	subs	r3, #1
    2b10:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b12:	9b01      	ldr	r3, [sp, #4]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d1f9      	bne.n	2b0c <Clock_Ip_SetWaitStates+0x10>
    }
}
    2b18:	bf00      	nop
    2b1a:	b002      	add	sp, #8
    2b1c:	4770      	bx	lr
    2b1e:	bf00      	nop
    2b20:	1fff8b44 	.word	0x1fff8b44

00002b24 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b24:	b500      	push	{lr}
    2b26:	b083      	sub	sp, #12
    2b28:	9001      	str	r0, [sp, #4]
    2b2a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2b2c:	4b04      	ldr	r3, [pc, #16]	; (2b40 <Clock_Ip_ReportClockErrors+0x1c>)
    2b2e:	681b      	ldr	r3, [r3, #0]
    2b30:	9900      	ldr	r1, [sp, #0]
    2b32:	9801      	ldr	r0, [sp, #4]
    2b34:	4798      	blx	r3
}
    2b36:	bf00      	nop
    2b38:	b003      	add	sp, #12
    2b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b3e:	bf00      	nop
    2b40:	1fff8b14 	.word	0x1fff8b14

00002b44 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2b44:	b500      	push	{lr}
    2b46:	b085      	sub	sp, #20
    2b48:	9003      	str	r0, [sp, #12]
    2b4a:	9102      	str	r1, [sp, #8]
    2b4c:	9201      	str	r2, [sp, #4]
    2b4e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2b50:	2000      	movs	r0, #0
    2b52:	f7fe ffd1 	bl	1af8 <OsIf_GetCounter>
    2b56:	4602      	mov	r2, r0
    2b58:	9b03      	ldr	r3, [sp, #12]
    2b5a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2b5c:	9b02      	ldr	r3, [sp, #8]
    2b5e:	2200      	movs	r2, #0
    2b60:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2b62:	2100      	movs	r1, #0
    2b64:	9800      	ldr	r0, [sp, #0]
    2b66:	f7ff f813 	bl	1b90 <OsIf_MicrosToTicks>
    2b6a:	4602      	mov	r2, r0
    2b6c:	9b01      	ldr	r3, [sp, #4]
    2b6e:	601a      	str	r2, [r3, #0]
}
    2b70:	bf00      	nop
    2b72:	b005      	add	sp, #20
    2b74:	f85d fb04 	ldr.w	pc, [sp], #4

00002b78 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2b78:	b500      	push	{lr}
    2b7a:	b087      	sub	sp, #28
    2b7c:	9003      	str	r0, [sp, #12]
    2b7e:	9102      	str	r1, [sp, #8]
    2b80:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2b82:	2300      	movs	r3, #0
    2b84:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2b88:	2100      	movs	r1, #0
    2b8a:	9803      	ldr	r0, [sp, #12]
    2b8c:	f7fe ffcd 	bl	1b2a <OsIf_GetElapsed>
    2b90:	4602      	mov	r2, r0
    2b92:	9b02      	ldr	r3, [sp, #8]
    2b94:	681b      	ldr	r3, [r3, #0]
    2b96:	441a      	add	r2, r3
    2b98:	9b02      	ldr	r3, [sp, #8]
    2b9a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2b9c:	9b02      	ldr	r3, [sp, #8]
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	9a01      	ldr	r2, [sp, #4]
    2ba2:	429a      	cmp	r2, r3
    2ba4:	d802      	bhi.n	2bac <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2ba6:	2301      	movs	r3, #1
    2ba8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2bac:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2bb0:	4618      	mov	r0, r3
    2bb2:	b007      	add	sp, #28
    2bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00002bb8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2bb8:	b082      	sub	sp, #8
    2bba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2bbc:	bf00      	nop
    2bbe:	b002      	add	sp, #8
    2bc0:	4770      	bx	lr

00002bc2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2bc2:	b500      	push	{lr}
    2bc4:	b083      	sub	sp, #12
    2bc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bc8:	9b01      	ldr	r3, [sp, #4]
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d002      	beq.n	2bd4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2bce:	9801      	ldr	r0, [sp, #4]
    2bd0:	f000 f8ad 	bl	2d2e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bd4:	bf00      	nop
    2bd6:	b003      	add	sp, #12
    2bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bdc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2bdc:	b500      	push	{lr}
    2bde:	b083      	sub	sp, #12
    2be0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2be2:	9b01      	ldr	r3, [sp, #4]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d002      	beq.n	2bee <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2be8:	9801      	ldr	r0, [sp, #4]
    2bea:	f000 f8cd 	bl	2d88 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bee:	bf00      	nop
    2bf0:	b003      	add	sp, #12
    2bf2:	f85d fb04 	ldr.w	pc, [sp], #4

00002bf6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2bf6:	b500      	push	{lr}
    2bf8:	b083      	sub	sp, #12
    2bfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bfc:	9b01      	ldr	r3, [sp, #4]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d002      	beq.n	2c08 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c02:	9801      	ldr	r0, [sp, #4]
    2c04:	f000 f8ee 	bl	2de4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c08:	bf00      	nop
    2c0a:	b003      	add	sp, #12
    2c0c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c10 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c10:	b500      	push	{lr}
    2c12:	b083      	sub	sp, #12
    2c14:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c16:	9b01      	ldr	r3, [sp, #4]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d002      	beq.n	2c22 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2c1c:	9801      	ldr	r0, [sp, #4]
    2c1e:	f000 f8f9 	bl	2e14 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c22:	bf00      	nop
    2c24:	b003      	add	sp, #12
    2c26:	f85d fb04 	ldr.w	pc, [sp], #4

00002c2a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c2a:	b500      	push	{lr}
    2c2c:	b083      	sub	sp, #12
    2c2e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d002      	beq.n	2c3c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2c36:	9801      	ldr	r0, [sp, #4]
    2c38:	f000 f904 	bl	2e44 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c3c:	bf00      	nop
    2c3e:	b003      	add	sp, #12
    2c40:	f85d fb04 	ldr.w	pc, [sp], #4

00002c44 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c44:	b500      	push	{lr}
    2c46:	b083      	sub	sp, #12
    2c48:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c4a:	9b01      	ldr	r3, [sp, #4]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d002      	beq.n	2c56 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2c50:	9801      	ldr	r0, [sp, #4]
    2c52:	f000 f90f 	bl	2e74 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c56:	bf00      	nop
    2c58:	b003      	add	sp, #12
    2c5a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c5e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c5e:	b500      	push	{lr}
    2c60:	b083      	sub	sp, #12
    2c62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d002      	beq.n	2c70 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2c6a:	9801      	ldr	r0, [sp, #4]
    2c6c:	f000 f91a 	bl	2ea4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c70:	bf00      	nop
    2c72:	b003      	add	sp, #12
    2c74:	f85d fb04 	ldr.w	pc, [sp], #4

00002c78 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c78:	b500      	push	{lr}
    2c7a:	b083      	sub	sp, #12
    2c7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c7e:	9b01      	ldr	r3, [sp, #4]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d002      	beq.n	2c8a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2c84:	9801      	ldr	r0, [sp, #4]
    2c86:	f000 f925 	bl	2ed4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c8a:	bf00      	nop
    2c8c:	b003      	add	sp, #12
    2c8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c92 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c92:	b500      	push	{lr}
    2c94:	b083      	sub	sp, #12
    2c96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d002      	beq.n	2ca4 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2c9e:	9801      	ldr	r0, [sp, #4]
    2ca0:	f000 f930 	bl	2f04 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ca4:	bf00      	nop
    2ca6:	b003      	add	sp, #12
    2ca8:	f85d fb04 	ldr.w	pc, [sp], #4

00002cac <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cac:	b500      	push	{lr}
    2cae:	b083      	sub	sp, #12
    2cb0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cb2:	9b01      	ldr	r3, [sp, #4]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d002      	beq.n	2cbe <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2cb8:	9801      	ldr	r0, [sp, #4]
    2cba:	f000 f93b 	bl	2f34 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cbe:	bf00      	nop
    2cc0:	b003      	add	sp, #12
    2cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cc6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cc6:	b500      	push	{lr}
    2cc8:	b083      	sub	sp, #12
    2cca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ccc:	9b01      	ldr	r3, [sp, #4]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d002      	beq.n	2cd8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2cd2:	9801      	ldr	r0, [sp, #4]
    2cd4:	f000 f946 	bl	2f64 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd8:	bf00      	nop
    2cda:	b003      	add	sp, #12
    2cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ce0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2ce0:	b500      	push	{lr}
    2ce2:	b083      	sub	sp, #12
    2ce4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce6:	9b01      	ldr	r3, [sp, #4]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d002      	beq.n	2cf2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2cec:	9801      	ldr	r0, [sp, #4]
    2cee:	f000 f951 	bl	2f94 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cf2:	bf00      	nop
    2cf4:	b003      	add	sp, #12
    2cf6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cfa <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2cfa:	b500      	push	{lr}
    2cfc:	b083      	sub	sp, #12
    2cfe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d00:	9b01      	ldr	r3, [sp, #4]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d002      	beq.n	2d0c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d06:	9801      	ldr	r0, [sp, #4]
    2d08:	f000 f95e 	bl	2fc8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d0c:	bf00      	nop
    2d0e:	b003      	add	sp, #12
    2d10:	f85d fb04 	ldr.w	pc, [sp], #4

00002d14 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2d14:	b500      	push	{lr}
    2d16:	b083      	sub	sp, #12
    2d18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d1a:	9b01      	ldr	r3, [sp, #4]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d002      	beq.n	2d26 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d20:	9801      	ldr	r0, [sp, #4]
    2d22:	f000 f98b 	bl	303c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d26:	bf00      	nop
    2d28:	b003      	add	sp, #12
    2d2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d2e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d2e:	b086      	sub	sp, #24
    2d30:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d32:	9b01      	ldr	r3, [sp, #4]
    2d34:	681a      	ldr	r2, [r3, #0]
    2d36:	4911      	ldr	r1, [pc, #68]	; (2d7c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2d38:	4613      	mov	r3, r2
    2d3a:	00db      	lsls	r3, r3, #3
    2d3c:	4413      	add	r3, r2
    2d3e:	440b      	add	r3, r1
    2d40:	781b      	ldrb	r3, [r3, #0]
    2d42:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d44:	9b01      	ldr	r3, [sp, #4]
    2d46:	685b      	ldr	r3, [r3, #4]
    2d48:	4a0d      	ldr	r2, [pc, #52]	; (2d80 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2d4a:	5cd3      	ldrb	r3, [r2, r3]
    2d4c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d4e:	4a0d      	ldr	r2, [pc, #52]	; (2d84 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d50:	9b05      	ldr	r3, [sp, #20]
    2d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2d5a:	9b03      	ldr	r3, [sp, #12]
    2d5c:	f023 0307 	bic.w	r3, r3, #7
    2d60:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2d62:	9a03      	ldr	r2, [sp, #12]
    2d64:	9b04      	ldr	r3, [sp, #16]
    2d66:	4313      	orrs	r3, r2
    2d68:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2d6a:	4a06      	ldr	r2, [pc, #24]	; (2d84 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d6c:	9b05      	ldr	r3, [sp, #20]
    2d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d72:	9a03      	ldr	r2, [sp, #12]
    2d74:	601a      	str	r2, [r3, #0]
}
    2d76:	bf00      	nop
    2d78:	b006      	add	sp, #24
    2d7a:	4770      	bx	lr
    2d7c:	000102d0 	.word	0x000102d0
    2d80:	000106c8 	.word	0x000106c8
    2d84:	0001070c 	.word	0x0001070c

00002d88 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d88:	b086      	sub	sp, #24
    2d8a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d8c:	9b01      	ldr	r3, [sp, #4]
    2d8e:	681a      	ldr	r2, [r3, #0]
    2d90:	4911      	ldr	r1, [pc, #68]	; (2dd8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2d92:	4613      	mov	r3, r2
    2d94:	00db      	lsls	r3, r3, #3
    2d96:	4413      	add	r3, r2
    2d98:	440b      	add	r3, r1
    2d9a:	781b      	ldrb	r3, [r3, #0]
    2d9c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d9e:	9b01      	ldr	r3, [sp, #4]
    2da0:	685b      	ldr	r3, [r3, #4]
    2da2:	4a0e      	ldr	r2, [pc, #56]	; (2ddc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2da4:	5cd3      	ldrb	r3, [r2, r3]
    2da6:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2da8:	4a0d      	ldr	r2, [pc, #52]	; (2de0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2daa:	9b05      	ldr	r3, [sp, #20]
    2dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2db4:	9b03      	ldr	r3, [sp, #12]
    2db6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2dba:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2dbc:	9b04      	ldr	r3, [sp, #16]
    2dbe:	021b      	lsls	r3, r3, #8
    2dc0:	9a03      	ldr	r2, [sp, #12]
    2dc2:	4313      	orrs	r3, r2
    2dc4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2dc6:	4a06      	ldr	r2, [pc, #24]	; (2de0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2dc8:	9b05      	ldr	r3, [sp, #20]
    2dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dce:	9a03      	ldr	r2, [sp, #12]
    2dd0:	601a      	str	r2, [r3, #0]
}
    2dd2:	bf00      	nop
    2dd4:	b006      	add	sp, #24
    2dd6:	4770      	bx	lr
    2dd8:	000102d0 	.word	0x000102d0
    2ddc:	000106c8 	.word	0x000106c8
    2de0:	0001070c 	.word	0x0001070c

00002de4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2de4:	b084      	sub	sp, #16
    2de6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2de8:	4b09      	ldr	r3, [pc, #36]	; (2e10 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2dea:	695b      	ldr	r3, [r3, #20]
    2dec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2dee:	9b03      	ldr	r3, [sp, #12]
    2df0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2df4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2df6:	9b01      	ldr	r3, [sp, #4]
    2df8:	685b      	ldr	r3, [r3, #4]
    2dfa:	3b01      	subs	r3, #1
    2dfc:	041b      	lsls	r3, r3, #16
    2dfe:	9a03      	ldr	r2, [sp, #12]
    2e00:	4313      	orrs	r3, r2
    2e02:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e04:	4a02      	ldr	r2, [pc, #8]	; (2e10 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e06:	9b03      	ldr	r3, [sp, #12]
    2e08:	6153      	str	r3, [r2, #20]
}
    2e0a:	bf00      	nop
    2e0c:	b004      	add	sp, #16
    2e0e:	4770      	bx	lr
    2e10:	40064000 	.word	0x40064000

00002e14 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e14:	b084      	sub	sp, #16
    2e16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e18:	4b09      	ldr	r3, [pc, #36]	; (2e40 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e1a:	695b      	ldr	r3, [r3, #20]
    2e1c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2e1e:	9b03      	ldr	r3, [sp, #12]
    2e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e24:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e26:	9b01      	ldr	r3, [sp, #4]
    2e28:	685b      	ldr	r3, [r3, #4]
    2e2a:	3b01      	subs	r3, #1
    2e2c:	011b      	lsls	r3, r3, #4
    2e2e:	9a03      	ldr	r2, [sp, #12]
    2e30:	4313      	orrs	r3, r2
    2e32:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e34:	4a02      	ldr	r2, [pc, #8]	; (2e40 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e36:	9b03      	ldr	r3, [sp, #12]
    2e38:	6153      	str	r3, [r2, #20]
}
    2e3a:	bf00      	nop
    2e3c:	b004      	add	sp, #16
    2e3e:	4770      	bx	lr
    2e40:	40064000 	.word	0x40064000

00002e44 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e44:	b084      	sub	sp, #16
    2e46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e48:	4b09      	ldr	r3, [pc, #36]	; (2e70 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e4a:	695b      	ldr	r3, [r3, #20]
    2e4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2e4e:	9b03      	ldr	r3, [sp, #12]
    2e50:	f023 030f 	bic.w	r3, r3, #15
    2e54:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2e56:	9b01      	ldr	r3, [sp, #4]
    2e58:	685b      	ldr	r3, [r3, #4]
    2e5a:	3b01      	subs	r3, #1
    2e5c:	9a03      	ldr	r2, [sp, #12]
    2e5e:	4313      	orrs	r3, r2
    2e60:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e62:	4a03      	ldr	r2, [pc, #12]	; (2e70 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e64:	9b03      	ldr	r3, [sp, #12]
    2e66:	6153      	str	r3, [r2, #20]
}
    2e68:	bf00      	nop
    2e6a:	b004      	add	sp, #16
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop
    2e70:	40064000 	.word	0x40064000

00002e74 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e74:	b084      	sub	sp, #16
    2e76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e78:	4b09      	ldr	r3, [pc, #36]	; (2ea0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e7a:	699b      	ldr	r3, [r3, #24]
    2e7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2e7e:	9b03      	ldr	r3, [sp, #12]
    2e80:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e84:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2e86:	9b01      	ldr	r3, [sp, #4]
    2e88:	685b      	ldr	r3, [r3, #4]
    2e8a:	3b01      	subs	r3, #1
    2e8c:	041b      	lsls	r3, r3, #16
    2e8e:	9a03      	ldr	r2, [sp, #12]
    2e90:	4313      	orrs	r3, r2
    2e92:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e94:	4a02      	ldr	r2, [pc, #8]	; (2ea0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e96:	9b03      	ldr	r3, [sp, #12]
    2e98:	6193      	str	r3, [r2, #24]
}
    2e9a:	bf00      	nop
    2e9c:	b004      	add	sp, #16
    2e9e:	4770      	bx	lr
    2ea0:	40064000 	.word	0x40064000

00002ea4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ea4:	b084      	sub	sp, #16
    2ea6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2ea8:	4b09      	ldr	r3, [pc, #36]	; (2ed0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2eaa:	699b      	ldr	r3, [r3, #24]
    2eac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2eae:	9b03      	ldr	r3, [sp, #12]
    2eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2eb4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2eb6:	9b01      	ldr	r3, [sp, #4]
    2eb8:	685b      	ldr	r3, [r3, #4]
    2eba:	3b01      	subs	r3, #1
    2ebc:	011b      	lsls	r3, r3, #4
    2ebe:	9a03      	ldr	r2, [sp, #12]
    2ec0:	4313      	orrs	r3, r2
    2ec2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ec4:	4a02      	ldr	r2, [pc, #8]	; (2ed0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2ec6:	9b03      	ldr	r3, [sp, #12]
    2ec8:	6193      	str	r3, [r2, #24]
}
    2eca:	bf00      	nop
    2ecc:	b004      	add	sp, #16
    2ece:	4770      	bx	lr
    2ed0:	40064000 	.word	0x40064000

00002ed4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ed4:	b084      	sub	sp, #16
    2ed6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2ed8:	4b09      	ldr	r3, [pc, #36]	; (2f00 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2eda:	699b      	ldr	r3, [r3, #24]
    2edc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2ede:	9b03      	ldr	r3, [sp, #12]
    2ee0:	f023 030f 	bic.w	r3, r3, #15
    2ee4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2ee6:	9b01      	ldr	r3, [sp, #4]
    2ee8:	685b      	ldr	r3, [r3, #4]
    2eea:	3b01      	subs	r3, #1
    2eec:	9a03      	ldr	r2, [sp, #12]
    2eee:	4313      	orrs	r3, r2
    2ef0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ef2:	4a03      	ldr	r2, [pc, #12]	; (2f00 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2ef4:	9b03      	ldr	r3, [sp, #12]
    2ef6:	6193      	str	r3, [r2, #24]
}
    2ef8:	bf00      	nop
    2efa:	b004      	add	sp, #16
    2efc:	4770      	bx	lr
    2efe:	bf00      	nop
    2f00:	40064000 	.word	0x40064000

00002f04 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f04:	b084      	sub	sp, #16
    2f06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f08:	4b09      	ldr	r3, [pc, #36]	; (2f30 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f0a:	69db      	ldr	r3, [r3, #28]
    2f0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2f16:	9b01      	ldr	r3, [sp, #4]
    2f18:	685b      	ldr	r3, [r3, #4]
    2f1a:	3b01      	subs	r3, #1
    2f1c:	041b      	lsls	r3, r3, #16
    2f1e:	9a03      	ldr	r2, [sp, #12]
    2f20:	4313      	orrs	r3, r2
    2f22:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f24:	4a02      	ldr	r2, [pc, #8]	; (2f30 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f26:	9b03      	ldr	r3, [sp, #12]
    2f28:	61d3      	str	r3, [r2, #28]
}
    2f2a:	bf00      	nop
    2f2c:	b004      	add	sp, #16
    2f2e:	4770      	bx	lr
    2f30:	40064000 	.word	0x40064000

00002f34 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f34:	b084      	sub	sp, #16
    2f36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f38:	4b09      	ldr	r3, [pc, #36]	; (2f60 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f3a:	69db      	ldr	r3, [r3, #28]
    2f3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2f3e:	9b03      	ldr	r3, [sp, #12]
    2f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2f46:	9b01      	ldr	r3, [sp, #4]
    2f48:	685b      	ldr	r3, [r3, #4]
    2f4a:	3b01      	subs	r3, #1
    2f4c:	011b      	lsls	r3, r3, #4
    2f4e:	9a03      	ldr	r2, [sp, #12]
    2f50:	4313      	orrs	r3, r2
    2f52:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f54:	4a02      	ldr	r2, [pc, #8]	; (2f60 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	61d3      	str	r3, [r2, #28]
}
    2f5a:	bf00      	nop
    2f5c:	b004      	add	sp, #16
    2f5e:	4770      	bx	lr
    2f60:	40064000 	.word	0x40064000

00002f64 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f64:	b084      	sub	sp, #16
    2f66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f68:	4b09      	ldr	r3, [pc, #36]	; (2f90 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f6a:	69db      	ldr	r3, [r3, #28]
    2f6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2f6e:	9b03      	ldr	r3, [sp, #12]
    2f70:	f023 030f 	bic.w	r3, r3, #15
    2f74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2f76:	9b01      	ldr	r3, [sp, #4]
    2f78:	685b      	ldr	r3, [r3, #4]
    2f7a:	3b01      	subs	r3, #1
    2f7c:	9a03      	ldr	r2, [sp, #12]
    2f7e:	4313      	orrs	r3, r2
    2f80:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f82:	4a03      	ldr	r2, [pc, #12]	; (2f90 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f84:	9b03      	ldr	r3, [sp, #12]
    2f86:	61d3      	str	r3, [r2, #28]
}
    2f88:	bf00      	nop
    2f8a:	b004      	add	sp, #16
    2f8c:	4770      	bx	lr
    2f8e:	bf00      	nop
    2f90:	40064000 	.word	0x40064000

00002f94 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2f94:	b084      	sub	sp, #16
    2f96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2f98:	4b0a      	ldr	r3, [pc, #40]	; (2fc4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2f9a:	685b      	ldr	r3, [r3, #4]
    2f9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2f9e:	9b03      	ldr	r3, [sp, #12]
    2fa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fa4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	685b      	ldr	r3, [r3, #4]
    2faa:	3b01      	subs	r3, #1
    2fac:	021b      	lsls	r3, r3, #8
    2fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2fb2:	9a03      	ldr	r2, [sp, #12]
    2fb4:	4313      	orrs	r3, r2
    2fb6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2fb8:	4a02      	ldr	r2, [pc, #8]	; (2fc4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2fba:	9b03      	ldr	r3, [sp, #12]
    2fbc:	6053      	str	r3, [r2, #4]
}
    2fbe:	bf00      	nop
    2fc0:	b004      	add	sp, #16
    2fc2:	4770      	bx	lr
    2fc4:	40048000 	.word	0x40048000

00002fc8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fc8:	b084      	sub	sp, #16
    2fca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2fcc:	4919      	ldr	r1, [pc, #100]	; (3034 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2fce:	9b01      	ldr	r3, [sp, #4]
    2fd0:	681a      	ldr	r2, [r3, #0]
    2fd2:	4819      	ldr	r0, [pc, #100]	; (3038 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2fd4:	4613      	mov	r3, r2
    2fd6:	00db      	lsls	r3, r3, #3
    2fd8:	4413      	add	r3, r2
    2fda:	4403      	add	r3, r0
    2fdc:	3305      	adds	r3, #5
    2fde:	781b      	ldrb	r3, [r3, #0]
    2fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2fe4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2fe6:	9b03      	ldr	r3, [sp, #12]
    2fe8:	f023 030f 	bic.w	r3, r3, #15
    2fec:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2fee:	9b01      	ldr	r3, [sp, #4]
    2ff0:	685b      	ldr	r3, [r3, #4]
    2ff2:	3b01      	subs	r3, #1
    2ff4:	f003 0307 	and.w	r3, r3, #7
    2ff8:	9a03      	ldr	r2, [sp, #12]
    2ffa:	4313      	orrs	r3, r2
    2ffc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2ffe:	9b01      	ldr	r3, [sp, #4]
    3000:	7a1b      	ldrb	r3, [r3, #8]
    3002:	3b01      	subs	r3, #1
    3004:	00db      	lsls	r3, r3, #3
    3006:	f003 0308 	and.w	r3, r3, #8
    300a:	9a03      	ldr	r2, [sp, #12]
    300c:	4313      	orrs	r3, r2
    300e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3010:	4908      	ldr	r1, [pc, #32]	; (3034 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3012:	9b01      	ldr	r3, [sp, #4]
    3014:	681a      	ldr	r2, [r3, #0]
    3016:	4808      	ldr	r0, [pc, #32]	; (3038 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3018:	4613      	mov	r3, r2
    301a:	00db      	lsls	r3, r3, #3
    301c:	4413      	add	r3, r2
    301e:	4403      	add	r3, r0
    3020:	3305      	adds	r3, #5
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	461a      	mov	r2, r3
    3026:	9b03      	ldr	r3, [sp, #12]
    3028:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    302c:	bf00      	nop
    302e:	b004      	add	sp, #16
    3030:	4770      	bx	lr
    3032:	bf00      	nop
    3034:	40065000 	.word	0x40065000
    3038:	000102d0 	.word	0x000102d0

0000303c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    303c:	b084      	sub	sp, #16
    303e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3040:	4b10      	ldr	r3, [pc, #64]	; (3084 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3044:	4a0f      	ldr	r2, [pc, #60]	; (3084 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    304a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    304c:	4b0d      	ldr	r3, [pc, #52]	; (3084 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    304e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3050:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3052:	9b03      	ldr	r3, [sp, #12]
    3054:	f023 030f 	bic.w	r3, r3, #15
    3058:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    305a:	9b01      	ldr	r3, [sp, #4]
    305c:	685b      	ldr	r3, [r3, #4]
    305e:	3b01      	subs	r3, #1
    3060:	005b      	lsls	r3, r3, #1
    3062:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3066:	9b01      	ldr	r3, [sp, #4]
    3068:	7a1b      	ldrb	r3, [r3, #8]
    306a:	3b01      	subs	r3, #1
    306c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3070:	4313      	orrs	r3, r2
    3072:	9a03      	ldr	r2, [sp, #12]
    3074:	4313      	orrs	r3, r2
    3076:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3078:	4a02      	ldr	r2, [pc, #8]	; (3084 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    307a:	9b03      	ldr	r3, [sp, #12]
    307c:	6693      	str	r3, [r2, #104]	; 0x68
}
    307e:	bf00      	nop
    3080:	b004      	add	sp, #16
    3082:	4770      	bx	lr
    3084:	40048000 	.word	0x40048000

00003088 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3088:	b082      	sub	sp, #8
    308a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    308c:	bf00      	nop
    308e:	b002      	add	sp, #8
    3090:	4770      	bx	lr
	...

00003094 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3094:	b082      	sub	sp, #8
    3096:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3098:	bf00      	nop
    309a:	b002      	add	sp, #8
    309c:	4770      	bx	lr

0000309e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    309e:	b082      	sub	sp, #8
    30a0:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    30a2:	bf00      	nop
    30a4:	b002      	add	sp, #8
    30a6:	4770      	bx	lr

000030a8 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30a8:	b500      	push	{lr}
    30aa:	b083      	sub	sp, #12
    30ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d002      	beq.n	30ba <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    30b4:	9801      	ldr	r0, [sp, #4]
    30b6:	f000 f86a 	bl	318e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ba:	bf00      	nop
    30bc:	b003      	add	sp, #12
    30be:	f85d fb04 	ldr.w	pc, [sp], #4

000030c2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30c2:	b500      	push	{lr}
    30c4:	b083      	sub	sp, #12
    30c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d002      	beq.n	30d4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    30ce:	9801      	ldr	r0, [sp, #4]
    30d0:	f000 f884 	bl	31dc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    30d4:	bf00      	nop
    30d6:	b003      	add	sp, #12
    30d8:	f85d fb04 	ldr.w	pc, [sp], #4

000030dc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30dc:	b500      	push	{lr}
    30de:	b089      	sub	sp, #36	; 0x24
    30e0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    30e2:	2300      	movs	r3, #0
    30e4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    30e8:	9b01      	ldr	r3, [sp, #4]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d031      	beq.n	3152 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    30ee:	4b1b      	ldr	r3, [pc, #108]	; (315c <Clock_Ip_CompleteSOSC+0x80>)
    30f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30f4:	f003 0301 	and.w	r3, r3, #1
    30f8:	2b00      	cmp	r3, #0
    30fa:	d02a      	beq.n	3152 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30fc:	aa03      	add	r2, sp, #12
    30fe:	a904      	add	r1, sp, #16
    3100:	a805      	add	r0, sp, #20
    3102:	f24c 3350 	movw	r3, #50000	; 0xc350
    3106:	f7ff fd1d 	bl	2b44 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    310a:	4b14      	ldr	r3, [pc, #80]	; (315c <Clock_Ip_CompleteSOSC+0x80>)
    310c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3110:	0e1b      	lsrs	r3, r3, #24
    3112:	f003 0301 	and.w	r3, r3, #1
    3116:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3118:	9a03      	ldr	r2, [sp, #12]
    311a:	a904      	add	r1, sp, #16
    311c:	ab05      	add	r3, sp, #20
    311e:	4618      	mov	r0, r3
    3120:	f7ff fd2a 	bl	2b78 <Clock_Ip_TimeoutExpired>
    3124:	4603      	mov	r3, r0
    3126:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    312a:	9b06      	ldr	r3, [sp, #24]
    312c:	2b00      	cmp	r3, #0
    312e:	d106      	bne.n	313e <Clock_Ip_CompleteSOSC+0x62>
    3130:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3134:	f083 0301 	eor.w	r3, r3, #1
    3138:	b2db      	uxtb	r3, r3
    313a:	2b00      	cmp	r3, #0
    313c:	d1e5      	bne.n	310a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    313e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3142:	2b00      	cmp	r3, #0
    3144:	d005      	beq.n	3152 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3146:	9b01      	ldr	r3, [sp, #4]
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	4619      	mov	r1, r3
    314c:	2001      	movs	r0, #1
    314e:	f7ff fce9 	bl	2b24 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3152:	bf00      	nop
    3154:	b009      	add	sp, #36	; 0x24
    3156:	f85d fb04 	ldr.w	pc, [sp], #4
    315a:	bf00      	nop
    315c:	40064000 	.word	0x40064000

00003160 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3160:	b500      	push	{lr}
    3162:	b083      	sub	sp, #12
    3164:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3166:	9801      	ldr	r0, [sp, #4]
    3168:	f000 f8c0 	bl	32ec <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    316c:	bf00      	nop
    316e:	b003      	add	sp, #12
    3170:	f85d fb04 	ldr.w	pc, [sp], #4

00003174 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3174:	b500      	push	{lr}
    3176:	b083      	sub	sp, #12
    3178:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    317a:	9b01      	ldr	r3, [sp, #4]
    317c:	2b00      	cmp	r3, #0
    317e:	d002      	beq.n	3186 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3180:	9801      	ldr	r0, [sp, #4]
    3182:	f000 f8c3 	bl	330c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3186:	bf00      	nop
    3188:	b003      	add	sp, #12
    318a:	f85d fb04 	ldr.w	pc, [sp], #4

0000318e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    318e:	b082      	sub	sp, #8
    3190:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3192:	4b11      	ldr	r3, [pc, #68]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3194:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3198:	4a0f      	ldr	r2, [pc, #60]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    319a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    319e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    31a2:	4b0d      	ldr	r3, [pc, #52]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31a8:	4a0b      	ldr	r2, [pc, #44]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    31ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    31b2:	4b09      	ldr	r3, [pc, #36]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31b8:	4a07      	ldr	r2, [pc, #28]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    31be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    31c2:	4b05      	ldr	r3, [pc, #20]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31c8:	4a03      	ldr	r2, [pc, #12]	; (31d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ca:	f023 0301 	bic.w	r3, r3, #1
    31ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    31d2:	bf00      	nop
    31d4:	b002      	add	sp, #8
    31d6:	4770      	bx	lr
    31d8:	40064000 	.word	0x40064000

000031dc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    31dc:	b082      	sub	sp, #8
    31de:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    31e0:	9b01      	ldr	r3, [sp, #4]
    31e2:	891b      	ldrh	r3, [r3, #8]
    31e4:	2b01      	cmp	r3, #1
    31e6:	d174      	bne.n	32d2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    31e8:	9b01      	ldr	r3, [sp, #4]
    31ea:	7bdb      	ldrb	r3, [r3, #15]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d002      	beq.n	31f6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    31f0:	2b01      	cmp	r3, #1
    31f2:	d009      	beq.n	3208 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    31f4:	e011      	b.n	321a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    31f6:	4b39      	ldr	r3, [pc, #228]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31fc:	4a37      	ldr	r2, [pc, #220]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31fe:	f023 0308 	bic.w	r3, r3, #8
    3202:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3206:	e008      	b.n	321a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3208:	4b34      	ldr	r3, [pc, #208]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    320a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    320e:	4a33      	ldr	r2, [pc, #204]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3210:	f043 0308 	orr.w	r3, r3, #8
    3214:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3218:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    321a:	4b30      	ldr	r3, [pc, #192]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    321c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3220:	4a2e      	ldr	r2, [pc, #184]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3222:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3226:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    322a:	9b01      	ldr	r3, [sp, #4]
    322c:	685b      	ldr	r3, [r3, #4]
    322e:	4a2c      	ldr	r2, [pc, #176]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3230:	4293      	cmp	r3, r2
    3232:	d90d      	bls.n	3250 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	685b      	ldr	r3, [r3, #4]
    3238:	4a2a      	ldr	r2, [pc, #168]	; (32e4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    323a:	4293      	cmp	r3, r2
    323c:	d208      	bcs.n	3250 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    323e:	4b27      	ldr	r3, [pc, #156]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3240:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3244:	4a25      	ldr	r2, [pc, #148]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3246:	f043 0320 	orr.w	r3, r3, #32
    324a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    324e:	e007      	b.n	3260 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3250:	4b22      	ldr	r3, [pc, #136]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3252:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3256:	4a21      	ldr	r2, [pc, #132]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3258:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    325c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3260:	9b01      	ldr	r3, [sp, #4]
    3262:	7b1b      	ldrb	r3, [r3, #12]
    3264:	2b00      	cmp	r3, #0
    3266:	d108      	bne.n	327a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3268:	4b1c      	ldr	r3, [pc, #112]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    326a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    326e:	4a1b      	ldr	r2, [pc, #108]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3270:	f043 0304 	orr.w	r3, r3, #4
    3274:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3278:	e007      	b.n	328a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    327a:	4b18      	ldr	r3, [pc, #96]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    327c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3280:	4a16      	ldr	r2, [pc, #88]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3282:	f023 0304 	bic.w	r3, r3, #4
    3286:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	7c1b      	ldrb	r3, [r3, #16]
    328e:	2b02      	cmp	r3, #2
    3290:	d011      	beq.n	32b6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3292:	2b02      	cmp	r3, #2
    3294:	dc14      	bgt.n	32c0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3296:	2b00      	cmp	r3, #0
    3298:	d002      	beq.n	32a0 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    329a:	2b01      	cmp	r3, #1
    329c:	d005      	beq.n	32aa <Clock_Ip_SetSOSC_TrustedCall+0xce>
    329e:	e00f      	b.n	32c0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32a0:	4b0e      	ldr	r3, [pc, #56]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a2:	2201      	movs	r2, #1
    32a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32a8:	e014      	b.n	32d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32aa:	4b0c      	ldr	r3, [pc, #48]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    32b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32b4:	e00e      	b.n	32d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32b6:	4b09      	ldr	r3, [pc, #36]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b8:	4a0b      	ldr	r2, [pc, #44]	; (32e8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    32ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    32be:	e009      	b.n	32d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    32c0:	4b06      	ldr	r3, [pc, #24]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32c6:	4a05      	ldr	r2, [pc, #20]	; (32dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32c8:	f043 0301 	orr.w	r3, r3, #1
    32cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    32d0:	e000      	b.n	32d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    32d2:	bf00      	nop
}
    32d4:	bf00      	nop
    32d6:	b002      	add	sp, #8
    32d8:	4770      	bx	lr
    32da:	bf00      	nop
    32dc:	40064000 	.word	0x40064000
    32e0:	003d08ff 	.word	0x003d08ff
    32e4:	007a1200 	.word	0x007a1200
    32e8:	00030001 	.word	0x00030001

000032ec <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    32ec:	b082      	sub	sp, #8
    32ee:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    32f0:	4b05      	ldr	r3, [pc, #20]	; (3308 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32f6:	4a04      	ldr	r2, [pc, #16]	; (3308 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32f8:	f023 0301 	bic.w	r3, r3, #1
    32fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3300:	bf00      	nop
    3302:	b002      	add	sp, #8
    3304:	4770      	bx	lr
    3306:	bf00      	nop
    3308:	40064000 	.word	0x40064000

0000330c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    330c:	b082      	sub	sp, #8
    330e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3310:	9b01      	ldr	r3, [sp, #4]
    3312:	891b      	ldrh	r3, [r3, #8]
    3314:	2b01      	cmp	r3, #1
    3316:	d107      	bne.n	3328 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3318:	4b05      	ldr	r3, [pc, #20]	; (3330 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    331a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    331e:	4a04      	ldr	r2, [pc, #16]	; (3330 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3320:	f043 0301 	orr.w	r3, r3, #1
    3324:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3328:	bf00      	nop
    332a:	b002      	add	sp, #8
    332c:	4770      	bx	lr
    332e:	bf00      	nop
    3330:	40064000 	.word	0x40064000

00003334 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3334:	b082      	sub	sp, #8
    3336:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3338:	bf00      	nop
    333a:	b002      	add	sp, #8
    333c:	4770      	bx	lr

0000333e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    333e:	b082      	sub	sp, #8
    3340:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3342:	2300      	movs	r3, #0
}
    3344:	4618      	mov	r0, r3
    3346:	b002      	add	sp, #8
    3348:	4770      	bx	lr

0000334a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    334a:	b082      	sub	sp, #8
    334c:	9001      	str	r0, [sp, #4]
    334e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3350:	bf00      	nop
    3352:	b002      	add	sp, #8
    3354:	4770      	bx	lr
	...

00003358 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3358:	b082      	sub	sp, #8
    335a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    335c:	bf00      	nop
    335e:	b002      	add	sp, #8
    3360:	4770      	bx	lr

00003362 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3362:	b082      	sub	sp, #8
    3364:	9001      	str	r0, [sp, #4]
    3366:	460b      	mov	r3, r1
    3368:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    336c:	bf00      	nop
    336e:	b002      	add	sp, #8
    3370:	4770      	bx	lr

00003372 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3372:	b500      	push	{lr}
    3374:	b083      	sub	sp, #12
    3376:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3378:	9b01      	ldr	r3, [sp, #4]
    337a:	2b00      	cmp	r3, #0
    337c:	d002      	beq.n	3384 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    337e:	9801      	ldr	r0, [sp, #4]
    3380:	f000 f8e7 	bl	3552 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3384:	bf00      	nop
    3386:	b003      	add	sp, #12
    3388:	f85d fb04 	ldr.w	pc, [sp], #4

0000338c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    338c:	b500      	push	{lr}
    338e:	b085      	sub	sp, #20
    3390:	9001      	str	r0, [sp, #4]
    3392:	460b      	mov	r3, r1
    3394:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3398:	9b01      	ldr	r3, [sp, #4]
    339a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    339c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33a0:	2b00      	cmp	r3, #0
    33a2:	d003      	beq.n	33ac <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    33a4:	2300      	movs	r3, #0
    33a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    33aa:	e002      	b.n	33b2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33ac:	2301      	movs	r3, #1
    33ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    33b2:	ab02      	add	r3, sp, #8
    33b4:	4618      	mov	r0, r3
    33b6:	f7ff ffdc 	bl	3372 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    33ba:	bf00      	nop
    33bc:	b005      	add	sp, #20
    33be:	f85d fb04 	ldr.w	pc, [sp], #4

000033c2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    33c2:	b500      	push	{lr}
    33c4:	b083      	sub	sp, #12
    33c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33c8:	9b01      	ldr	r3, [sp, #4]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d002      	beq.n	33d4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    33ce:	9801      	ldr	r0, [sp, #4]
    33d0:	f000 f8d6 	bl	3580 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33d4:	bf00      	nop
    33d6:	b003      	add	sp, #12
    33d8:	f85d fb04 	ldr.w	pc, [sp], #4

000033dc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33dc:	b500      	push	{lr}
    33de:	b085      	sub	sp, #20
    33e0:	9001      	str	r0, [sp, #4]
    33e2:	460b      	mov	r3, r1
    33e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33e8:	9b01      	ldr	r3, [sp, #4]
    33ea:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d003      	beq.n	33fc <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    33f4:	2300      	movs	r3, #0
    33f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    33fa:	e002      	b.n	3402 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33fc:	2301      	movs	r3, #1
    33fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3402:	ab02      	add	r3, sp, #8
    3404:	4618      	mov	r0, r3
    3406:	f7ff ffdc 	bl	33c2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    340a:	bf00      	nop
    340c:	b005      	add	sp, #20
    340e:	f85d fb04 	ldr.w	pc, [sp], #4

00003412 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3412:	b500      	push	{lr}
    3414:	b083      	sub	sp, #12
    3416:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3418:	9b01      	ldr	r3, [sp, #4]
    341a:	2b00      	cmp	r3, #0
    341c:	d002      	beq.n	3424 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    341e:	9801      	ldr	r0, [sp, #4]
    3420:	f000 f8c6 	bl	35b0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3424:	bf00      	nop
    3426:	b003      	add	sp, #12
    3428:	f85d fb04 	ldr.w	pc, [sp], #4

0000342c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    342c:	b500      	push	{lr}
    342e:	b085      	sub	sp, #20
    3430:	9001      	str	r0, [sp, #4]
    3432:	460b      	mov	r3, r1
    3434:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3438:	9b01      	ldr	r3, [sp, #4]
    343a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    343c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3440:	2b00      	cmp	r3, #0
    3442:	d003      	beq.n	344c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3444:	2300      	movs	r3, #0
    3446:	f8ad 300c 	strh.w	r3, [sp, #12]
    344a:	e002      	b.n	3452 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    344c:	2301      	movs	r3, #1
    344e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3452:	ab02      	add	r3, sp, #8
    3454:	4618      	mov	r0, r3
    3456:	f7ff ffdc 	bl	3412 <Clock_Ip_ClockSetSimClkoutEnable>
}
    345a:	bf00      	nop
    345c:	b005      	add	sp, #20
    345e:	f85d fb04 	ldr.w	pc, [sp], #4

00003462 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3462:	b500      	push	{lr}
    3464:	b083      	sub	sp, #12
    3466:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3468:	9b01      	ldr	r3, [sp, #4]
    346a:	2b00      	cmp	r3, #0
    346c:	d002      	beq.n	3474 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    346e:	9801      	ldr	r0, [sp, #4]
    3470:	f000 f8b6 	bl	35e0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3474:	bf00      	nop
    3476:	b003      	add	sp, #12
    3478:	f85d fb04 	ldr.w	pc, [sp], #4

0000347c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    347c:	b500      	push	{lr}
    347e:	b085      	sub	sp, #20
    3480:	9001      	str	r0, [sp, #4]
    3482:	460b      	mov	r3, r1
    3484:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3488:	9b01      	ldr	r3, [sp, #4]
    348a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    348c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3490:	2b00      	cmp	r3, #0
    3492:	d003      	beq.n	349c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3494:	2300      	movs	r3, #0
    3496:	f8ad 300c 	strh.w	r3, [sp, #12]
    349a:	e002      	b.n	34a2 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    349c:	2301      	movs	r3, #1
    349e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    34a2:	ab02      	add	r3, sp, #8
    34a4:	4618      	mov	r0, r3
    34a6:	f7ff ffdc 	bl	3462 <Clock_Ip_ClockSetPccCgcEnable>
}
    34aa:	bf00      	nop
    34ac:	b005      	add	sp, #20
    34ae:	f85d fb04 	ldr.w	pc, [sp], #4

000034b2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    34b2:	b500      	push	{lr}
    34b4:	b083      	sub	sp, #12
    34b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34b8:	9b01      	ldr	r3, [sp, #4]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d002      	beq.n	34c4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    34be:	9801      	ldr	r0, [sp, #4]
    34c0:	f000 f8bc 	bl	363c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34c4:	bf00      	nop
    34c6:	b003      	add	sp, #12
    34c8:	f85d fb04 	ldr.w	pc, [sp], #4

000034cc <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    34cc:	b500      	push	{lr}
    34ce:	b085      	sub	sp, #20
    34d0:	9001      	str	r0, [sp, #4]
    34d2:	460b      	mov	r3, r1
    34d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d003      	beq.n	34ec <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    34e4:	2300      	movs	r3, #0
    34e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    34ea:	e002      	b.n	34f2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34ec:	2301      	movs	r3, #1
    34ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    34f2:	ab02      	add	r3, sp, #8
    34f4:	4618      	mov	r0, r3
    34f6:	f7ff ffdc 	bl	34b2 <Clock_Ip_ClockSetSimGate>
}
    34fa:	bf00      	nop
    34fc:	b005      	add	sp, #20
    34fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003502 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3502:	b500      	push	{lr}
    3504:	b083      	sub	sp, #12
    3506:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3508:	9b01      	ldr	r3, [sp, #4]
    350a:	2b00      	cmp	r3, #0
    350c:	d002      	beq.n	3514 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    350e:	9801      	ldr	r0, [sp, #4]
    3510:	f000 f8c0 	bl	3694 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3514:	bf00      	nop
    3516:	b003      	add	sp, #12
    3518:	f85d fb04 	ldr.w	pc, [sp], #4

0000351c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    351c:	b500      	push	{lr}
    351e:	b085      	sub	sp, #20
    3520:	9001      	str	r0, [sp, #4]
    3522:	460b      	mov	r3, r1
    3524:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3528:	9b01      	ldr	r3, [sp, #4]
    352a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    352c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3530:	2b00      	cmp	r3, #0
    3532:	d003      	beq.n	353c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3534:	2300      	movs	r3, #0
    3536:	f8ad 300c 	strh.w	r3, [sp, #12]
    353a:	e002      	b.n	3542 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    353c:	2301      	movs	r3, #1
    353e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3542:	ab02      	add	r3, sp, #8
    3544:	4618      	mov	r0, r3
    3546:	f7ff ffdc 	bl	3502 <Clock_Ip_ClockSetSimTraceEnable>
}
    354a:	bf00      	nop
    354c:	b005      	add	sp, #20
    354e:	f85d fb04 	ldr.w	pc, [sp], #4

00003552 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3552:	b084      	sub	sp, #16
    3554:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3556:	4b09      	ldr	r3, [pc, #36]	; (357c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3558:	691b      	ldr	r3, [r3, #16]
    355a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    355c:	9b03      	ldr	r3, [sp, #12]
    355e:	f023 0301 	bic.w	r3, r3, #1
    3562:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3564:	9b01      	ldr	r3, [sp, #4]
    3566:	889b      	ldrh	r3, [r3, #4]
    3568:	461a      	mov	r2, r3
    356a:	9b03      	ldr	r3, [sp, #12]
    356c:	4313      	orrs	r3, r2
    356e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3570:	4a02      	ldr	r2, [pc, #8]	; (357c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3572:	9b03      	ldr	r3, [sp, #12]
    3574:	6113      	str	r3, [r2, #16]
}
    3576:	bf00      	nop
    3578:	b004      	add	sp, #16
    357a:	4770      	bx	lr
    357c:	40048000 	.word	0x40048000

00003580 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3580:	b084      	sub	sp, #16
    3582:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3584:	4b09      	ldr	r3, [pc, #36]	; (35ac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3586:	691b      	ldr	r3, [r3, #16]
    3588:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    358a:	9b03      	ldr	r3, [sp, #12]
    358c:	f023 0302 	bic.w	r3, r3, #2
    3590:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3592:	9b01      	ldr	r3, [sp, #4]
    3594:	889b      	ldrh	r3, [r3, #4]
    3596:	005b      	lsls	r3, r3, #1
    3598:	9a03      	ldr	r2, [sp, #12]
    359a:	4313      	orrs	r3, r2
    359c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    359e:	4a03      	ldr	r2, [pc, #12]	; (35ac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    35a0:	9b03      	ldr	r3, [sp, #12]
    35a2:	6113      	str	r3, [r2, #16]
}
    35a4:	bf00      	nop
    35a6:	b004      	add	sp, #16
    35a8:	4770      	bx	lr
    35aa:	bf00      	nop
    35ac:	40048000 	.word	0x40048000

000035b0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35b0:	b084      	sub	sp, #16
    35b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    35b4:	4b09      	ldr	r3, [pc, #36]	; (35dc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35b6:	685b      	ldr	r3, [r3, #4]
    35b8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    35ba:	9b03      	ldr	r3, [sp, #12]
    35bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    35c0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    35c2:	9b01      	ldr	r3, [sp, #4]
    35c4:	889b      	ldrh	r3, [r3, #4]
    35c6:	02db      	lsls	r3, r3, #11
    35c8:	9a03      	ldr	r2, [sp, #12]
    35ca:	4313      	orrs	r3, r2
    35cc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    35ce:	4a03      	ldr	r2, [pc, #12]	; (35dc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35d0:	9b03      	ldr	r3, [sp, #12]
    35d2:	6053      	str	r3, [r2, #4]
}
    35d4:	bf00      	nop
    35d6:	b004      	add	sp, #16
    35d8:	4770      	bx	lr
    35da:	bf00      	nop
    35dc:	40048000 	.word	0x40048000

000035e0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35e0:	b084      	sub	sp, #16
    35e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    35e4:	4913      	ldr	r1, [pc, #76]	; (3634 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	681a      	ldr	r2, [r3, #0]
    35ea:	4813      	ldr	r0, [pc, #76]	; (3638 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    35ec:	4613      	mov	r3, r2
    35ee:	00db      	lsls	r3, r3, #3
    35f0:	4413      	add	r3, r2
    35f2:	4403      	add	r3, r0
    35f4:	3306      	adds	r3, #6
    35f6:	781b      	ldrb	r3, [r3, #0]
    35f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    35fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3604:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3606:	9b01      	ldr	r3, [sp, #4]
    3608:	889b      	ldrh	r3, [r3, #4]
    360a:	079b      	lsls	r3, r3, #30
    360c:	9a03      	ldr	r2, [sp, #12]
    360e:	4313      	orrs	r3, r2
    3610:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3612:	4908      	ldr	r1, [pc, #32]	; (3634 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3614:	9b01      	ldr	r3, [sp, #4]
    3616:	681a      	ldr	r2, [r3, #0]
    3618:	4807      	ldr	r0, [pc, #28]	; (3638 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    361a:	4613      	mov	r3, r2
    361c:	00db      	lsls	r3, r3, #3
    361e:	4413      	add	r3, r2
    3620:	4403      	add	r3, r0
    3622:	3306      	adds	r3, #6
    3624:	781b      	ldrb	r3, [r3, #0]
    3626:	461a      	mov	r2, r3
    3628:	9b03      	ldr	r3, [sp, #12]
    362a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    362e:	bf00      	nop
    3630:	b004      	add	sp, #16
    3632:	4770      	bx	lr
    3634:	40065000 	.word	0x40065000
    3638:	000102d0 	.word	0x000102d0

0000363c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    363c:	b086      	sub	sp, #24
    363e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3640:	9b01      	ldr	r3, [sp, #4]
    3642:	889b      	ldrh	r3, [r3, #4]
    3644:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3646:	9b01      	ldr	r3, [sp, #4]
    3648:	681a      	ldr	r2, [r3, #0]
    364a:	4910      	ldr	r1, [pc, #64]	; (368c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    364c:	4613      	mov	r3, r2
    364e:	00db      	lsls	r3, r3, #3
    3650:	4413      	add	r3, r2
    3652:	440b      	add	r3, r1
    3654:	3306      	adds	r3, #6
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    365a:	4b0d      	ldr	r3, [pc, #52]	; (3690 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    365e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3660:	2201      	movs	r2, #1
    3662:	9b04      	ldr	r3, [sp, #16]
    3664:	fa02 f303 	lsl.w	r3, r2, r3
    3668:	43db      	mvns	r3, r3
    366a:	9a03      	ldr	r2, [sp, #12]
    366c:	4013      	ands	r3, r2
    366e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3670:	9a05      	ldr	r2, [sp, #20]
    3672:	9b04      	ldr	r3, [sp, #16]
    3674:	fa02 f303 	lsl.w	r3, r2, r3
    3678:	9a03      	ldr	r2, [sp, #12]
    367a:	4313      	orrs	r3, r2
    367c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    367e:	4a04      	ldr	r2, [pc, #16]	; (3690 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3680:	9b03      	ldr	r3, [sp, #12]
    3682:	6413      	str	r3, [r2, #64]	; 0x40
}
    3684:	bf00      	nop
    3686:	b006      	add	sp, #24
    3688:	4770      	bx	lr
    368a:	bf00      	nop
    368c:	000102d0 	.word	0x000102d0
    3690:	40048000 	.word	0x40048000

00003694 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3694:	b084      	sub	sp, #16
    3696:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3698:	4b0a      	ldr	r3, [pc, #40]	; (36c4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    369c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    369e:	9b01      	ldr	r3, [sp, #4]
    36a0:	889b      	ldrh	r3, [r3, #4]
    36a2:	2b01      	cmp	r3, #1
    36a4:	d104      	bne.n	36b0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    36a6:	9b03      	ldr	r3, [sp, #12]
    36a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    36ac:	9303      	str	r3, [sp, #12]
    36ae:	e003      	b.n	36b8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    36b0:	9b03      	ldr	r3, [sp, #12]
    36b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    36b6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    36b8:	4a02      	ldr	r2, [pc, #8]	; (36c4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    36ba:	9b03      	ldr	r3, [sp, #12]
    36bc:	6693      	str	r3, [r2, #104]	; 0x68
}
    36be:	bf00      	nop
    36c0:	b004      	add	sp, #16
    36c2:	4770      	bx	lr
    36c4:	40048000 	.word	0x40048000

000036c8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    36c8:	b082      	sub	sp, #8
    36ca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36cc:	bf00      	nop
    36ce:	b002      	add	sp, #8
    36d0:	4770      	bx	lr

000036d2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    36d2:	b082      	sub	sp, #8
    36d4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    36d6:	bf00      	nop
    36d8:	b002      	add	sp, #8
    36da:	4770      	bx	lr

000036dc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36dc:	b500      	push	{lr}
    36de:	b083      	sub	sp, #12
    36e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36e2:	9b01      	ldr	r3, [sp, #4]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d002      	beq.n	36ee <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    36e8:	9801      	ldr	r0, [sp, #4]
    36ea:	f000 f8d1 	bl	3890 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ee:	bf00      	nop
    36f0:	b003      	add	sp, #12
    36f2:	f85d fb04 	ldr.w	pc, [sp], #4

000036f6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36f6:	b500      	push	{lr}
    36f8:	b083      	sub	sp, #12
    36fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36fc:	9b01      	ldr	r3, [sp, #4]
    36fe:	2b00      	cmp	r3, #0
    3700:	d002      	beq.n	3708 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3702:	9801      	ldr	r0, [sp, #4]
    3704:	f000 f950 	bl	39a8 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3708:	bf00      	nop
    370a:	b003      	add	sp, #12
    370c:	f85d fb04 	ldr.w	pc, [sp], #4

00003710 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3710:	b500      	push	{lr}
    3712:	b083      	sub	sp, #12
    3714:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3716:	9801      	ldr	r0, [sp, #4]
    3718:	f000 f98e 	bl	3a38 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    371c:	bf00      	nop
    371e:	b003      	add	sp, #12
    3720:	f85d fb04 	ldr.w	pc, [sp], #4

00003724 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3724:	b500      	push	{lr}
    3726:	b083      	sub	sp, #12
    3728:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	2b00      	cmp	r3, #0
    372e:	d002      	beq.n	3736 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3730:	9801      	ldr	r0, [sp, #4]
    3732:	f000 f999 	bl	3a68 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3736:	bf00      	nop
    3738:	b003      	add	sp, #12
    373a:	f85d fb04 	ldr.w	pc, [sp], #4

0000373e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    373e:	b500      	push	{lr}
    3740:	b083      	sub	sp, #12
    3742:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3744:	9b01      	ldr	r3, [sp, #4]
    3746:	2b00      	cmp	r3, #0
    3748:	d002      	beq.n	3750 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    374a:	9801      	ldr	r0, [sp, #4]
    374c:	f000 f9b0 	bl	3ab0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3750:	bf00      	nop
    3752:	b003      	add	sp, #12
    3754:	f85d fb04 	ldr.w	pc, [sp], #4

00003758 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3758:	b500      	push	{lr}
    375a:	b083      	sub	sp, #12
    375c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    375e:	9801      	ldr	r0, [sp, #4]
    3760:	f000 f9ba 	bl	3ad8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3764:	bf00      	nop
    3766:	b003      	add	sp, #12
    3768:	f85d fb04 	ldr.w	pc, [sp], #4

0000376c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    376c:	b500      	push	{lr}
    376e:	b083      	sub	sp, #12
    3770:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3772:	9b01      	ldr	r3, [sp, #4]
    3774:	2b00      	cmp	r3, #0
    3776:	d002      	beq.n	377e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3778:	9801      	ldr	r0, [sp, #4]
    377a:	f000 f9bd 	bl	3af8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    377e:	bf00      	nop
    3780:	b003      	add	sp, #12
    3782:	f85d fb04 	ldr.w	pc, [sp], #4

00003786 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3786:	b500      	push	{lr}
    3788:	b083      	sub	sp, #12
    378a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	2b00      	cmp	r3, #0
    3790:	d002      	beq.n	3798 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3792:	9801      	ldr	r0, [sp, #4]
    3794:	f000 f9d4 	bl	3b40 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3798:	bf00      	nop
    379a:	b003      	add	sp, #12
    379c:	f85d fb04 	ldr.w	pc, [sp], #4

000037a0 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    37a0:	b500      	push	{lr}
    37a2:	b083      	sub	sp, #12
    37a4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    37a6:	9801      	ldr	r0, [sp, #4]
    37a8:	f000 f9de 	bl	3b68 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37ac:	bf00      	nop
    37ae:	b003      	add	sp, #12
    37b0:	f85d fb04 	ldr.w	pc, [sp], #4

000037b4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    37b4:	b500      	push	{lr}
    37b6:	b089      	sub	sp, #36	; 0x24
    37b8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    37ba:	2300      	movs	r3, #0
    37bc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    37c0:	4b20      	ldr	r3, [pc, #128]	; (3844 <SetInputSouceSytemClock+0x90>)
    37c2:	695b      	ldr	r3, [r3, #20]
    37c4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    37c6:	9b06      	ldr	r3, [sp, #24]
    37c8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    37cc:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    37ce:	9b01      	ldr	r3, [sp, #4]
    37d0:	061b      	lsls	r3, r3, #24
    37d2:	9a06      	ldr	r2, [sp, #24]
    37d4:	4313      	orrs	r3, r2
    37d6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    37d8:	4a1a      	ldr	r2, [pc, #104]	; (3844 <SetInputSouceSytemClock+0x90>)
    37da:	9b06      	ldr	r3, [sp, #24]
    37dc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37de:	aa02      	add	r2, sp, #8
    37e0:	a903      	add	r1, sp, #12
    37e2:	a804      	add	r0, sp, #16
    37e4:	f24c 3350 	movw	r3, #50000	; 0xc350
    37e8:	f7ff f9ac 	bl	2b44 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    37ec:	4b15      	ldr	r3, [pc, #84]	; (3844 <SetInputSouceSytemClock+0x90>)
    37ee:	691b      	ldr	r3, [r3, #16]
    37f0:	0e1b      	lsrs	r3, r3, #24
    37f2:	f003 030f 	and.w	r3, r3, #15
    37f6:	9a01      	ldr	r2, [sp, #4]
    37f8:	429a      	cmp	r2, r3
    37fa:	bf0c      	ite	eq
    37fc:	2301      	moveq	r3, #1
    37fe:	2300      	movne	r3, #0
    3800:	b2db      	uxtb	r3, r3
    3802:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3804:	9a02      	ldr	r2, [sp, #8]
    3806:	a903      	add	r1, sp, #12
    3808:	ab04      	add	r3, sp, #16
    380a:	4618      	mov	r0, r3
    380c:	f7ff f9b4 	bl	2b78 <Clock_Ip_TimeoutExpired>
    3810:	4603      	mov	r3, r0
    3812:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3816:	9b05      	ldr	r3, [sp, #20]
    3818:	2b00      	cmp	r3, #0
    381a:	d106      	bne.n	382a <SetInputSouceSytemClock+0x76>
    381c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3820:	f083 0301 	eor.w	r3, r3, #1
    3824:	b2db      	uxtb	r3, r3
    3826:	2b00      	cmp	r3, #0
    3828:	d1e0      	bne.n	37ec <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    382a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    382e:	2b00      	cmp	r3, #0
    3830:	d003      	beq.n	383a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3832:	2105      	movs	r1, #5
    3834:	2001      	movs	r0, #1
    3836:	f7ff f975 	bl	2b24 <Clock_Ip_ReportClockErrors>
    }
}
    383a:	bf00      	nop
    383c:	b009      	add	sp, #36	; 0x24
    383e:	f85d fb04 	ldr.w	pc, [sp], #4
    3842:	bf00      	nop
    3844:	40064000 	.word	0x40064000

00003848 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3848:	b500      	push	{lr}
    384a:	b083      	sub	sp, #12
    384c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384e:	9b01      	ldr	r3, [sp, #4]
    3850:	2b00      	cmp	r3, #0
    3852:	d002      	beq.n	385a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3854:	9801      	ldr	r0, [sp, #4]
    3856:	f000 f997 	bl	3b88 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    385a:	bf00      	nop
    385c:	b003      	add	sp, #12
    385e:	f85d fb04 	ldr.w	pc, [sp], #4

00003862 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3862:	b500      	push	{lr}
    3864:	b083      	sub	sp, #12
    3866:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3868:	9b01      	ldr	r3, [sp, #4]
    386a:	2b00      	cmp	r3, #0
    386c:	d002      	beq.n	3874 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    386e:	9801      	ldr	r0, [sp, #4]
    3870:	f000 fa7e 	bl	3d70 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3874:	bf00      	nop
    3876:	b003      	add	sp, #12
    3878:	f85d fb04 	ldr.w	pc, [sp], #4

0000387c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    387c:	b500      	push	{lr}
    387e:	b083      	sub	sp, #12
    3880:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3882:	9801      	ldr	r0, [sp, #4]
    3884:	f000 fab8 	bl	3df8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3888:	bf00      	nop
    388a:	b003      	add	sp, #12
    388c:	f85d fb04 	ldr.w	pc, [sp], #4

00003890 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3890:	b500      	push	{lr}
    3892:	b08b      	sub	sp, #44	; 0x2c
    3894:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3896:	2300      	movs	r3, #0
    3898:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    389c:	9b01      	ldr	r3, [sp, #4]
    389e:	2b00      	cmp	r3, #0
    38a0:	d10b      	bne.n	38ba <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    38a2:	2305      	movs	r3, #5
    38a4:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    38a6:	2301      	movs	r3, #1
    38a8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    38ac:	2301      	movs	r3, #1
    38ae:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    38b2:	2301      	movs	r3, #1
    38b4:	f88d 3010 	strb.w	r3, [sp, #16]
    38b8:	e00e      	b.n	38d8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    38ba:	9b01      	ldr	r3, [sp, #4]
    38bc:	681b      	ldr	r3, [r3, #0]
    38be:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    38c0:	9b01      	ldr	r3, [sp, #4]
    38c2:	79db      	ldrb	r3, [r3, #7]
    38c4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    38c8:	9b01      	ldr	r3, [sp, #4]
    38ca:	889b      	ldrh	r3, [r3, #4]
    38cc:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    38d0:	9b01      	ldr	r3, [sp, #4]
    38d2:	7a1b      	ldrb	r3, [r3, #8]
    38d4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    38d8:	4b32      	ldr	r3, [pc, #200]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38de:	4a31      	ldr	r2, [pc, #196]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    38e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    38e8:	4b2e      	ldr	r3, [pc, #184]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38ee:	4a2d      	ldr	r2, [pc, #180]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38f0:	f023 0301 	bic.w	r3, r3, #1
    38f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    38f8:	4b2a      	ldr	r3, [pc, #168]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38fe:	4a29      	ldr	r2, [pc, #164]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3900:	f023 0304 	bic.w	r3, r3, #4
    3904:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3908:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    390c:	2b01      	cmp	r3, #1
    390e:	d144      	bne.n	399a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3910:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3914:	4a23      	ldr	r2, [pc, #140]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3916:	f003 0301 	and.w	r3, r3, #1
    391a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    391e:	4b21      	ldr	r3, [pc, #132]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3924:	4a1f      	ldr	r2, [pc, #124]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3926:	f043 0301 	orr.w	r3, r3, #1
    392a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    392e:	4b1d      	ldr	r3, [pc, #116]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3930:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3934:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3938:	009b      	lsls	r3, r3, #2
    393a:	f003 0304 	and.w	r3, r3, #4
    393e:	4919      	ldr	r1, [pc, #100]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3940:	4313      	orrs	r3, r2
    3942:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3946:	aa05      	add	r2, sp, #20
    3948:	a906      	add	r1, sp, #24
    394a:	a807      	add	r0, sp, #28
    394c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3950:	f7ff f8f8 	bl	2b44 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3954:	4b13      	ldr	r3, [pc, #76]	; (39a4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    395a:	0e1b      	lsrs	r3, r3, #24
    395c:	f003 0301 	and.w	r3, r3, #1
    3960:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3962:	9a05      	ldr	r2, [sp, #20]
    3964:	a906      	add	r1, sp, #24
    3966:	ab07      	add	r3, sp, #28
    3968:	4618      	mov	r0, r3
    396a:	f7ff f905 	bl	2b78 <Clock_Ip_TimeoutExpired>
    396e:	4603      	mov	r3, r0
    3970:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3974:	9b08      	ldr	r3, [sp, #32]
    3976:	2b00      	cmp	r3, #0
    3978:	d106      	bne.n	3988 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    397a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    397e:	f083 0301 	eor.w	r3, r3, #1
    3982:	b2db      	uxtb	r3, r3
    3984:	2b00      	cmp	r3, #0
    3986:	d1e5      	bne.n	3954 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3988:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    398c:	2b00      	cmp	r3, #0
    398e:	d004      	beq.n	399a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3990:	9b02      	ldr	r3, [sp, #8]
    3992:	4619      	mov	r1, r3
    3994:	2001      	movs	r0, #1
    3996:	f7ff f8c5 	bl	2b24 <Clock_Ip_ReportClockErrors>
        }
    }
}
    399a:	bf00      	nop
    399c:	b00b      	add	sp, #44	; 0x2c
    399e:	f85d fb04 	ldr.w	pc, [sp], #4
    39a2:	bf00      	nop
    39a4:	40064000 	.word	0x40064000

000039a8 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    39a8:	b500      	push	{lr}
    39aa:	b089      	sub	sp, #36	; 0x24
    39ac:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    39ae:	2300      	movs	r3, #0
    39b0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39b4:	4b1f      	ldr	r3, [pc, #124]	; (3a34 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ba:	4a1e      	ldr	r2, [pc, #120]	; (3a34 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39bc:	f043 0301 	orr.w	r3, r3, #1
    39c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    39c4:	4b1b      	ldr	r3, [pc, #108]	; (3a34 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ca:	4a1a      	ldr	r2, [pc, #104]	; (3a34 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39cc:	f043 0304 	orr.w	r3, r3, #4
    39d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39d4:	aa03      	add	r2, sp, #12
    39d6:	a904      	add	r1, sp, #16
    39d8:	a805      	add	r0, sp, #20
    39da:	f24c 3350 	movw	r3, #50000	; 0xc350
    39de:	f7ff f8b1 	bl	2b44 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39e2:	4b14      	ldr	r3, [pc, #80]	; (3a34 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39e8:	0e1b      	lsrs	r3, r3, #24
    39ea:	f003 0301 	and.w	r3, r3, #1
    39ee:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39f0:	9a03      	ldr	r2, [sp, #12]
    39f2:	a904      	add	r1, sp, #16
    39f4:	ab05      	add	r3, sp, #20
    39f6:	4618      	mov	r0, r3
    39f8:	f7ff f8be 	bl	2b78 <Clock_Ip_TimeoutExpired>
    39fc:	4603      	mov	r3, r0
    39fe:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a02:	9b06      	ldr	r3, [sp, #24]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d106      	bne.n	3a16 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a08:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a0c:	f083 0301 	eor.w	r3, r3, #1
    3a10:	b2db      	uxtb	r3, r3
    3a12:	2b00      	cmp	r3, #0
    3a14:	d1e5      	bne.n	39e2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3a16:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d005      	beq.n	3a2a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a1e:	9b01      	ldr	r3, [sp, #4]
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	4619      	mov	r1, r3
    3a24:	2001      	movs	r0, #1
    3a26:	f7ff f87d 	bl	2b24 <Clock_Ip_ReportClockErrors>
    }
}
    3a2a:	bf00      	nop
    3a2c:	b009      	add	sp, #36	; 0x24
    3a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a32:	bf00      	nop
    3a34:	40064000 	.word	0x40064000

00003a38 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3a38:	b082      	sub	sp, #8
    3a3a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3a3c:	4b09      	ldr	r3, [pc, #36]	; (3a64 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a42:	4a08      	ldr	r2, [pc, #32]	; (3a64 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a44:	f023 0301 	bic.w	r3, r3, #1
    3a48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a4c:	4b05      	ldr	r3, [pc, #20]	; (3a64 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a52:	4a04      	ldr	r2, [pc, #16]	; (3a64 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a54:	f023 0304 	bic.w	r3, r3, #4
    3a58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a5c:	bf00      	nop
    3a5e:	b002      	add	sp, #8
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	40064000 	.word	0x40064000

00003a68 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a68:	b082      	sub	sp, #8
    3a6a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3a6c:	4b0f      	ldr	r3, [pc, #60]	; (3aac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a72:	4a0e      	ldr	r2, [pc, #56]	; (3aac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3a78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a7c:	4b0b      	ldr	r3, [pc, #44]	; (3aac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a82:	4a0a      	ldr	r2, [pc, #40]	; (3aac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a84:	f023 0304 	bic.w	r3, r3, #4
    3a88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3a8c:	4b07      	ldr	r3, [pc, #28]	; (3aac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a8e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a92:	9b01      	ldr	r3, [sp, #4]
    3a94:	7a1b      	ldrb	r3, [r3, #8]
    3a96:	009b      	lsls	r3, r3, #2
    3a98:	f003 0304 	and.w	r3, r3, #4
    3a9c:	4903      	ldr	r1, [pc, #12]	; (3aac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a9e:	4313      	orrs	r3, r2
    3aa0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3aa4:	bf00      	nop
    3aa6:	b002      	add	sp, #8
    3aa8:	4770      	bx	lr
    3aaa:	bf00      	nop
    3aac:	40064000 	.word	0x40064000

00003ab0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ab0:	b082      	sub	sp, #8
    3ab2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3ab4:	9b01      	ldr	r3, [sp, #4]
    3ab6:	889b      	ldrh	r3, [r3, #4]
    3ab8:	2b01      	cmp	r3, #1
    3aba:	d107      	bne.n	3acc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3abc:	4b05      	ldr	r3, [pc, #20]	; (3ad4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ac2:	4a04      	ldr	r2, [pc, #16]	; (3ad4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ac4:	f043 0304 	orr.w	r3, r3, #4
    3ac8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3acc:	bf00      	nop
    3ace:	b002      	add	sp, #8
    3ad0:	4770      	bx	lr
    3ad2:	bf00      	nop
    3ad4:	40064000 	.word	0x40064000

00003ad8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3ad8:	b082      	sub	sp, #8
    3ada:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3adc:	4b05      	ldr	r3, [pc, #20]	; (3af4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ae2:	4a04      	ldr	r2, [pc, #16]	; (3af4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ae4:	f023 0304 	bic.w	r3, r3, #4
    3ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3aec:	bf00      	nop
    3aee:	b002      	add	sp, #8
    3af0:	4770      	bx	lr
    3af2:	bf00      	nop
    3af4:	40064000 	.word	0x40064000

00003af8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3af8:	b082      	sub	sp, #8
    3afa:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3afc:	4b0f      	ldr	r3, [pc, #60]	; (3b3c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b02:	4a0e      	ldr	r2, [pc, #56]	; (3b3c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b0c:	4b0b      	ldr	r3, [pc, #44]	; (3b3c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b12:	4a0a      	ldr	r2, [pc, #40]	; (3b3c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b14:	f023 0302 	bic.w	r3, r3, #2
    3b18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3b1c:	4b07      	ldr	r3, [pc, #28]	; (3b3c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b22:	9b01      	ldr	r3, [sp, #4]
    3b24:	7a5b      	ldrb	r3, [r3, #9]
    3b26:	005b      	lsls	r3, r3, #1
    3b28:	f003 0302 	and.w	r3, r3, #2
    3b2c:	4903      	ldr	r1, [pc, #12]	; (3b3c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b2e:	4313      	orrs	r3, r2
    3b30:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b34:	bf00      	nop
    3b36:	b002      	add	sp, #8
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	40064000 	.word	0x40064000

00003b40 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b40:	b082      	sub	sp, #8
    3b42:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b44:	9b01      	ldr	r3, [sp, #4]
    3b46:	889b      	ldrh	r3, [r3, #4]
    3b48:	2b01      	cmp	r3, #1
    3b4a:	d107      	bne.n	3b5c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3b4c:	4b05      	ldr	r3, [pc, #20]	; (3b64 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b52:	4a04      	ldr	r2, [pc, #16]	; (3b64 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b54:	f043 0302 	orr.w	r3, r3, #2
    3b58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b5c:	bf00      	nop
    3b5e:	b002      	add	sp, #8
    3b60:	4770      	bx	lr
    3b62:	bf00      	nop
    3b64:	40064000 	.word	0x40064000

00003b68 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3b68:	b082      	sub	sp, #8
    3b6a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b6c:	4b05      	ldr	r3, [pc, #20]	; (3b84 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b72:	4a04      	ldr	r2, [pc, #16]	; (3b84 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b74:	f023 0302 	bic.w	r3, r3, #2
    3b78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b7c:	bf00      	nop
    3b7e:	b002      	add	sp, #8
    3b80:	4770      	bx	lr
    3b82:	bf00      	nop
    3b84:	40064000 	.word	0x40064000

00003b88 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b88:	b500      	push	{lr}
    3b8a:	b08b      	sub	sp, #44	; 0x2c
    3b8c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b8e:	9b01      	ldr	r3, [sp, #4]
    3b90:	681a      	ldr	r2, [r3, #0]
    3b92:	4975      	ldr	r1, [pc, #468]	; (3d68 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3b94:	4613      	mov	r3, r2
    3b96:	00db      	lsls	r3, r3, #3
    3b98:	4413      	add	r3, r2
    3b9a:	440b      	add	r3, r1
    3b9c:	781b      	ldrb	r3, [r3, #0]
    3b9e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3ba0:	2300      	movs	r3, #0
    3ba2:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3ba6:	2300      	movs	r3, #0
    3ba8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3bac:	4b6f      	ldr	r3, [pc, #444]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bb2:	4a6e      	ldr	r2, [pc, #440]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3bb8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3bbc:	4b6b      	ldr	r3, [pc, #428]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d07d      	beq.n	3cc6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bca:	9b01      	ldr	r3, [sp, #4]
    3bcc:	79db      	ldrb	r3, [r3, #7]
    3bce:	461a      	mov	r2, r3
    3bd0:	4b66      	ldr	r3, [pc, #408]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bd2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3bd6:	f003 0303 	and.w	r3, r3, #3
    3bda:	429a      	cmp	r2, r3
    3bdc:	d10b      	bne.n	3bf6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3bde:	9b01      	ldr	r3, [sp, #4]
    3be0:	799b      	ldrb	r3, [r3, #6]
    3be2:	461a      	mov	r2, r3
    3be4:	4b61      	ldr	r3, [pc, #388]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3be6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bea:	08db      	lsrs	r3, r3, #3
    3bec:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bf0:	429a      	cmp	r2, r3
    3bf2:	f000 80b4 	beq.w	3d5e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3bf6:	4b5d      	ldr	r3, [pc, #372]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bfc:	f003 0301 	and.w	r3, r3, #1
    3c00:	2b00      	cmp	r3, #0
    3c02:	d105      	bne.n	3c10 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c04:	2301      	movs	r3, #1
    3c06:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c0a:	2000      	movs	r0, #0
    3c0c:	f7ff fd66 	bl	36dc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c10:	2002      	movs	r0, #2
    3c12:	f7ff fdcf 	bl	37b4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c16:	4b55      	ldr	r3, [pc, #340]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c18:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c1c:	4a53      	ldr	r2, [pc, #332]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c1e:	f023 0301 	bic.w	r3, r3, #1
    3c22:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c26:	9b01      	ldr	r3, [sp, #4]
    3c28:	889b      	ldrh	r3, [r3, #4]
    3c2a:	2b01      	cmp	r3, #1
    3c2c:	f040 8097 	bne.w	3d5e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c30:	9b01      	ldr	r3, [sp, #4]
    3c32:	79db      	ldrb	r3, [r3, #7]
    3c34:	4a4d      	ldr	r2, [pc, #308]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c36:	f003 0303 	and.w	r3, r3, #3
    3c3a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c3e:	4b4b      	ldr	r3, [pc, #300]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c40:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c44:	9b01      	ldr	r3, [sp, #4]
    3c46:	799b      	ldrb	r3, [r3, #6]
    3c48:	00db      	lsls	r3, r3, #3
    3c4a:	f003 0308 	and.w	r3, r3, #8
    3c4e:	4313      	orrs	r3, r2
    3c50:	4a46      	ldr	r2, [pc, #280]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c52:	f043 0301 	orr.w	r3, r3, #1
    3c56:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c5a:	aa03      	add	r2, sp, #12
    3c5c:	a904      	add	r1, sp, #16
    3c5e:	a805      	add	r0, sp, #20
    3c60:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c64:	f7fe ff6e 	bl	2b44 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c68:	4b40      	ldr	r3, [pc, #256]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c6e:	0e1b      	lsrs	r3, r3, #24
    3c70:	f003 0301 	and.w	r3, r3, #1
    3c74:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c76:	9a03      	ldr	r2, [sp, #12]
    3c78:	a904      	add	r1, sp, #16
    3c7a:	ab05      	add	r3, sp, #20
    3c7c:	4618      	mov	r0, r3
    3c7e:	f7fe ff7b 	bl	2b78 <Clock_Ip_TimeoutExpired>
    3c82:	4603      	mov	r3, r0
    3c84:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c88:	9b06      	ldr	r3, [sp, #24]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d106      	bne.n	3c9c <Clock_Ip_SetFirc_TrustedCall+0x114>
    3c8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c92:	f083 0301 	eor.w	r3, r3, #1
    3c96:	b2db      	uxtb	r3, r3
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d1e5      	bne.n	3c68 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3c9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d005      	beq.n	3cb0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3ca4:	9b01      	ldr	r3, [sp, #4]
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	4619      	mov	r1, r3
    3caa:	2001      	movs	r0, #1
    3cac:	f7fe ff3a 	bl	2b24 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3cb0:	2003      	movs	r0, #3
    3cb2:	f7ff fd7f 	bl	37b4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3cb6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d04f      	beq.n	3d5e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3cbe:	2002      	movs	r0, #2
    3cc0:	f7ff fd26 	bl	3710 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3cc4:	e04b      	b.n	3d5e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cc6:	4b29      	ldr	r3, [pc, #164]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cc8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ccc:	4a27      	ldr	r2, [pc, #156]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cce:	f023 0301 	bic.w	r3, r3, #1
    3cd2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3cd6:	9b01      	ldr	r3, [sp, #4]
    3cd8:	889b      	ldrh	r3, [r3, #4]
    3cda:	2b01      	cmp	r3, #1
    3cdc:	d13f      	bne.n	3d5e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cde:	9b01      	ldr	r3, [sp, #4]
    3ce0:	79db      	ldrb	r3, [r3, #7]
    3ce2:	4a22      	ldr	r2, [pc, #136]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ce4:	f003 0303 	and.w	r3, r3, #3
    3ce8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cec:	4b1f      	ldr	r3, [pc, #124]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cee:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cf2:	9b01      	ldr	r3, [sp, #4]
    3cf4:	799b      	ldrb	r3, [r3, #6]
    3cf6:	00db      	lsls	r3, r3, #3
    3cf8:	f003 0308 	and.w	r3, r3, #8
    3cfc:	4313      	orrs	r3, r2
    3cfe:	4a1b      	ldr	r2, [pc, #108]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d00:	f043 0301 	orr.w	r3, r3, #1
    3d04:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d08:	aa03      	add	r2, sp, #12
    3d0a:	a904      	add	r1, sp, #16
    3d0c:	a805      	add	r0, sp, #20
    3d0e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d12:	f7fe ff17 	bl	2b44 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d16:	4b15      	ldr	r3, [pc, #84]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d18:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d1c:	0e1b      	lsrs	r3, r3, #24
    3d1e:	f003 0301 	and.w	r3, r3, #1
    3d22:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d24:	9a03      	ldr	r2, [sp, #12]
    3d26:	a904      	add	r1, sp, #16
    3d28:	ab05      	add	r3, sp, #20
    3d2a:	4618      	mov	r0, r3
    3d2c:	f7fe ff24 	bl	2b78 <Clock_Ip_TimeoutExpired>
    3d30:	4603      	mov	r3, r0
    3d32:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d36:	9b06      	ldr	r3, [sp, #24]
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d106      	bne.n	3d4a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3d3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d40:	f083 0301 	eor.w	r3, r3, #1
    3d44:	b2db      	uxtb	r3, r3
    3d46:	2b00      	cmp	r3, #0
    3d48:	d1e5      	bne.n	3d16 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3d4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d005      	beq.n	3d5e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d52:	9b01      	ldr	r3, [sp, #4]
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	4619      	mov	r1, r3
    3d58:	2001      	movs	r0, #1
    3d5a:	f7fe fee3 	bl	2b24 <Clock_Ip_ReportClockErrors>
}
    3d5e:	bf00      	nop
    3d60:	b00b      	add	sp, #44	; 0x2c
    3d62:	f85d fb04 	ldr.w	pc, [sp], #4
    3d66:	bf00      	nop
    3d68:	000102d0 	.word	0x000102d0
    3d6c:	40064000 	.word	0x40064000

00003d70 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d70:	b500      	push	{lr}
    3d72:	b089      	sub	sp, #36	; 0x24
    3d74:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d76:	2300      	movs	r3, #0
    3d78:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3d7c:	9b01      	ldr	r3, [sp, #4]
    3d7e:	889b      	ldrh	r3, [r3, #4]
    3d80:	2b01      	cmp	r3, #1
    3d82:	d132      	bne.n	3dea <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3d84:	4b1b      	ldr	r3, [pc, #108]	; (3df4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d8a:	4a1a      	ldr	r2, [pc, #104]	; (3df4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d8c:	f043 0301 	orr.w	r3, r3, #1
    3d90:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d94:	aa03      	add	r2, sp, #12
    3d96:	a904      	add	r1, sp, #16
    3d98:	a805      	add	r0, sp, #20
    3d9a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d9e:	f7fe fed1 	bl	2b44 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3da2:	4b14      	ldr	r3, [pc, #80]	; (3df4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3da4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3da8:	0e1b      	lsrs	r3, r3, #24
    3daa:	f003 0301 	and.w	r3, r3, #1
    3dae:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3db0:	9a03      	ldr	r2, [sp, #12]
    3db2:	a904      	add	r1, sp, #16
    3db4:	ab05      	add	r3, sp, #20
    3db6:	4618      	mov	r0, r3
    3db8:	f7fe fede 	bl	2b78 <Clock_Ip_TimeoutExpired>
    3dbc:	4603      	mov	r3, r0
    3dbe:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dc2:	9b06      	ldr	r3, [sp, #24]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d106      	bne.n	3dd6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3dc8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dcc:	f083 0301 	eor.w	r3, r3, #1
    3dd0:	b2db      	uxtb	r3, r3
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d1e5      	bne.n	3da2 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d005      	beq.n	3dea <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dde:	9b01      	ldr	r3, [sp, #4]
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	4619      	mov	r1, r3
    3de4:	2001      	movs	r0, #1
    3de6:	f7fe fe9d 	bl	2b24 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3dea:	bf00      	nop
    3dec:	b009      	add	sp, #36	; 0x24
    3dee:	f85d fb04 	ldr.w	pc, [sp], #4
    3df2:	bf00      	nop
    3df4:	40064000 	.word	0x40064000

00003df8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3df8:	b082      	sub	sp, #8
    3dfa:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3dfc:	4b05      	ldr	r3, [pc, #20]	; (3e14 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3dfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e02:	4a04      	ldr	r2, [pc, #16]	; (3e14 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e04:	f023 0301 	bic.w	r3, r3, #1
    3e08:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3e0c:	bf00      	nop
    3e0e:	b002      	add	sp, #8
    3e10:	4770      	bx	lr
    3e12:	bf00      	nop
    3e14:	40064000 	.word	0x40064000

00003e18 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3e18:	b082      	sub	sp, #8
    3e1a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e1c:	bf00      	nop
    3e1e:	b002      	add	sp, #8
    3e20:	4770      	bx	lr

00003e22 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e22:	b082      	sub	sp, #8
    3e24:	9001      	str	r0, [sp, #4]
    3e26:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e28:	bf00      	nop
    3e2a:	b002      	add	sp, #8
    3e2c:	4770      	bx	lr

00003e2e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3e2e:	b082      	sub	sp, #8
    3e30:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3e32:	bf00      	nop
    3e34:	b002      	add	sp, #8
    3e36:	4770      	bx	lr

00003e38 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3e38:	b082      	sub	sp, #8
    3e3a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e3c:	bf00      	nop
    3e3e:	b002      	add	sp, #8
    3e40:	4770      	bx	lr

00003e42 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3e42:	b082      	sub	sp, #8
    3e44:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3e46:	2302      	movs	r3, #2
}
    3e48:	4618      	mov	r0, r3
    3e4a:	b002      	add	sp, #8
    3e4c:	4770      	bx	lr

00003e4e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3e4e:	b082      	sub	sp, #8
    3e50:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3e52:	bf00      	nop
    3e54:	b002      	add	sp, #8
    3e56:	4770      	bx	lr

00003e58 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e58:	b500      	push	{lr}
    3e5a:	b083      	sub	sp, #12
    3e5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e5e:	9b01      	ldr	r3, [sp, #4]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d002      	beq.n	3e6a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3e64:	9801      	ldr	r0, [sp, #4]
    3e66:	f000 f870 	bl	3f4a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e6a:	bf00      	nop
    3e6c:	b003      	add	sp, #12
    3e6e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e72 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e72:	b500      	push	{lr}
    3e74:	b083      	sub	sp, #12
    3e76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d002      	beq.n	3e84 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3e7e:	9801      	ldr	r0, [sp, #4]
    3e80:	f000 f89a 	bl	3fb8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e84:	bf00      	nop
    3e86:	b003      	add	sp, #12
    3e88:	f85d fb04 	ldr.w	pc, [sp], #4

00003e8c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3e8c:	b500      	push	{lr}
    3e8e:	b089      	sub	sp, #36	; 0x24
    3e90:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3e92:	2301      	movs	r3, #1
    3e94:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3e96:	2300      	movs	r3, #0
    3e98:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3e9c:	4b1e      	ldr	r3, [pc, #120]	; (3f18 <Clock_Ip_CompleteSpll+0x8c>)
    3e9e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ea2:	f003 0301 	and.w	r3, r3, #1
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d02f      	beq.n	3f0a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3eaa:	aa02      	add	r2, sp, #8
    3eac:	a903      	add	r1, sp, #12
    3eae:	a804      	add	r0, sp, #16
    3eb0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3eb4:	f7fe fe46 	bl	2b44 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3eb8:	4b17      	ldr	r3, [pc, #92]	; (3f18 <Clock_Ip_CompleteSpll+0x8c>)
    3eba:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ebe:	0e1b      	lsrs	r3, r3, #24
    3ec0:	f003 0301 	and.w	r3, r3, #1
    3ec4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ec6:	9a02      	ldr	r2, [sp, #8]
    3ec8:	a903      	add	r1, sp, #12
    3eca:	ab04      	add	r3, sp, #16
    3ecc:	4618      	mov	r0, r3
    3ece:	f7fe fe53 	bl	2b78 <Clock_Ip_TimeoutExpired>
    3ed2:	4603      	mov	r3, r0
    3ed4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3ed8:	9b05      	ldr	r3, [sp, #20]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d106      	bne.n	3eec <Clock_Ip_CompleteSpll+0x60>
    3ede:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ee2:	f083 0301 	eor.w	r3, r3, #1
    3ee6:	b2db      	uxtb	r3, r3
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d1e5      	bne.n	3eb8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3eec:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ef0:	f083 0301 	eor.w	r3, r3, #1
    3ef4:	b2db      	uxtb	r3, r3
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d002      	beq.n	3f00 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3efa:	2302      	movs	r3, #2
    3efc:	9307      	str	r3, [sp, #28]
    3efe:	e006      	b.n	3f0e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f00:	9901      	ldr	r1, [sp, #4]
    3f02:	2001      	movs	r0, #1
    3f04:	f7fe fe0e 	bl	2b24 <Clock_Ip_ReportClockErrors>
    3f08:	e001      	b.n	3f0e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f0a:	2300      	movs	r3, #0
    3f0c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3f0e:	9b07      	ldr	r3, [sp, #28]
}
    3f10:	4618      	mov	r0, r3
    3f12:	b009      	add	sp, #36	; 0x24
    3f14:	f85d fb04 	ldr.w	pc, [sp], #4
    3f18:	40064000 	.word	0x40064000

00003f1c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3f1c:	b500      	push	{lr}
    3f1e:	b083      	sub	sp, #12
    3f20:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f22:	9801      	ldr	r0, [sp, #4]
    3f24:	f000 f886 	bl	4034 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f28:	bf00      	nop
    3f2a:	b003      	add	sp, #12
    3f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f30 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3f30:	b500      	push	{lr}
    3f32:	b083      	sub	sp, #12
    3f34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f36:	9b01      	ldr	r3, [sp, #4]
    3f38:	2b00      	cmp	r3, #0
    3f3a:	d002      	beq.n	3f42 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3f3c:	9801      	ldr	r0, [sp, #4]
    3f3e:	f000 f891 	bl	4064 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f42:	bf00      	nop
    3f44:	b003      	add	sp, #12
    3f46:	f85d fb04 	ldr.w	pc, [sp], #4

00003f4a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f4a:	b082      	sub	sp, #8
    3f4c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f4e:	4b19      	ldr	r3, [pc, #100]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f50:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f54:	4a17      	ldr	r2, [pc, #92]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f5a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3f5e:	4b15      	ldr	r3, [pc, #84]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f60:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f64:	4a13      	ldr	r2, [pc, #76]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3f6a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3f6e:	4b11      	ldr	r3, [pc, #68]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f70:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f74:	4a0f      	ldr	r2, [pc, #60]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f76:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3f7a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3f7e:	4b0d      	ldr	r3, [pc, #52]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f80:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f84:	4a0b      	ldr	r2, [pc, #44]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f86:	f023 0301 	bic.w	r3, r3, #1
    3f8a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3f8e:	4b09      	ldr	r3, [pc, #36]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f90:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f94:	4a07      	ldr	r2, [pc, #28]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3f9a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3f9e:	4b05      	ldr	r3, [pc, #20]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fa0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3fa4:	4a03      	ldr	r2, [pc, #12]	; (3fb4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3faa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3fae:	bf00      	nop
    3fb0:	b002      	add	sp, #8
    3fb2:	4770      	bx	lr
    3fb4:	40064000 	.word	0x40064000

00003fb8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fb8:	b082      	sub	sp, #8
    3fba:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3fbc:	9b01      	ldr	r3, [sp, #4]
    3fbe:	889b      	ldrh	r3, [r3, #4]
    3fc0:	2b01      	cmp	r3, #1
    3fc2:	d12f      	bne.n	4024 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fc4:	4b1a      	ldr	r3, [pc, #104]	; (4030 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fc6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	7b5b      	ldrb	r3, [r3, #13]
    3fce:	3b01      	subs	r3, #1
    3fd0:	021b      	lsls	r3, r3, #8
    3fd2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3fd6:	9b01      	ldr	r3, [sp, #4]
    3fd8:	7d1b      	ldrb	r3, [r3, #20]
    3fda:	3b10      	subs	r3, #16
    3fdc:	041b      	lsls	r3, r3, #16
    3fde:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fe2:	430b      	orrs	r3, r1
    3fe4:	4912      	ldr	r1, [pc, #72]	; (4030 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fe6:	4313      	orrs	r3, r2
    3fe8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3fec:	9b01      	ldr	r3, [sp, #4]
    3fee:	7fdb      	ldrb	r3, [r3, #31]
    3ff0:	2b02      	cmp	r3, #2
    3ff2:	d011      	beq.n	4018 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3ff4:	2b02      	cmp	r3, #2
    3ff6:	dc17      	bgt.n	4028 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d002      	beq.n	4002 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3ffc:	2b01      	cmp	r3, #1
    3ffe:	d005      	beq.n	400c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4000:	e012      	b.n	4028 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4002:	4b0b      	ldr	r3, [pc, #44]	; (4030 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4004:	2200      	movs	r2, #0
    4006:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    400a:	e00e      	b.n	402a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    400c:	4b08      	ldr	r3, [pc, #32]	; (4030 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    400e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4012:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4016:	e008      	b.n	402a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4018:	4b05      	ldr	r3, [pc, #20]	; (4030 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    401a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    401e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4022:	e002      	b.n	402a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4024:	bf00      	nop
    4026:	e000      	b.n	402a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4028:	bf00      	nop
}
    402a:	bf00      	nop
    402c:	b002      	add	sp, #8
    402e:	4770      	bx	lr
    4030:	40064000 	.word	0x40064000

00004034 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4034:	b082      	sub	sp, #8
    4036:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4038:	4b09      	ldr	r3, [pc, #36]	; (4060 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    403a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    403e:	4a08      	ldr	r2, [pc, #32]	; (4060 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4040:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4044:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4048:	4b05      	ldr	r3, [pc, #20]	; (4060 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    404a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    404e:	4a04      	ldr	r2, [pc, #16]	; (4060 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4050:	f023 0301 	bic.w	r3, r3, #1
    4054:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4058:	bf00      	nop
    405a:	b002      	add	sp, #8
    405c:	4770      	bx	lr
    405e:	bf00      	nop
    4060:	40064000 	.word	0x40064000

00004064 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4064:	b082      	sub	sp, #8
    4066:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4068:	9b01      	ldr	r3, [sp, #4]
    406a:	889b      	ldrh	r3, [r3, #4]
    406c:	2b01      	cmp	r3, #1
    406e:	d107      	bne.n	4080 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4070:	4b05      	ldr	r3, [pc, #20]	; (4088 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4072:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4076:	4a04      	ldr	r2, [pc, #16]	; (4088 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4078:	f043 0301 	orr.w	r3, r3, #1
    407c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4080:	bf00      	nop
    4082:	b002      	add	sp, #8
    4084:	4770      	bx	lr
    4086:	bf00      	nop
    4088:	40064000 	.word	0x40064000

0000408c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    408c:	b082      	sub	sp, #8
    408e:	9001      	str	r0, [sp, #4]
    4090:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4092:	bf00      	nop
    4094:	b002      	add	sp, #8
    4096:	4770      	bx	lr

00004098 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4098:	b082      	sub	sp, #8
    409a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    409c:	bf00      	nop
    409e:	b002      	add	sp, #8
    40a0:	4770      	bx	lr

000040a2 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40a2:	b500      	push	{lr}
    40a4:	b083      	sub	sp, #12
    40a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40a8:	9b01      	ldr	r3, [sp, #4]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d002      	beq.n	40b4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    40ae:	9801      	ldr	r0, [sp, #4]
    40b0:	f000 f8ee 	bl	4290 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40b4:	bf00      	nop
    40b6:	b003      	add	sp, #12
    40b8:	f85d fb04 	ldr.w	pc, [sp], #4

000040bc <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40bc:	b500      	push	{lr}
    40be:	b083      	sub	sp, #12
    40c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40c2:	9b01      	ldr	r3, [sp, #4]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d002      	beq.n	40ce <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    40c8:	9801      	ldr	r0, [sp, #4]
    40ca:	f000 f8ff 	bl	42cc <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40ce:	bf00      	nop
    40d0:	b003      	add	sp, #12
    40d2:	f85d fb04 	ldr.w	pc, [sp], #4

000040d6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    40d6:	b500      	push	{lr}
    40d8:	b083      	sub	sp, #12
    40da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40dc:	9b01      	ldr	r3, [sp, #4]
    40de:	2b00      	cmp	r3, #0
    40e0:	d002      	beq.n	40e8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    40e2:	9801      	ldr	r0, [sp, #4]
    40e4:	f000 f912 	bl	430c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40e8:	bf00      	nop
    40ea:	b003      	add	sp, #12
    40ec:	f85d fb04 	ldr.w	pc, [sp], #4

000040f0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40f0:	b500      	push	{lr}
    40f2:	b083      	sub	sp, #12
    40f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40f6:	9b01      	ldr	r3, [sp, #4]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d002      	beq.n	4102 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    40fc:	9801      	ldr	r0, [sp, #4]
    40fe:	f000 f925 	bl	434c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4102:	bf00      	nop
    4104:	b003      	add	sp, #12
    4106:	f85d fb04 	ldr.w	pc, [sp], #4

0000410a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    410a:	b500      	push	{lr}
    410c:	b083      	sub	sp, #12
    410e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4110:	9b01      	ldr	r3, [sp, #4]
    4112:	2b00      	cmp	r3, #0
    4114:	d002      	beq.n	411c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4116:	9801      	ldr	r0, [sp, #4]
    4118:	f000 f936 	bl	4388 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    411c:	bf00      	nop
    411e:	b003      	add	sp, #12
    4120:	f85d fb04 	ldr.w	pc, [sp], #4

00004124 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4124:	b500      	push	{lr}
    4126:	b083      	sub	sp, #12
    4128:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    412a:	9b01      	ldr	r3, [sp, #4]
    412c:	2b00      	cmp	r3, #0
    412e:	d002      	beq.n	4136 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4130:	9801      	ldr	r0, [sp, #4]
    4132:	f000 f949 	bl	43c8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4136:	bf00      	nop
    4138:	b003      	add	sp, #12
    413a:	f85d fb04 	ldr.w	pc, [sp], #4

0000413e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    413e:	b500      	push	{lr}
    4140:	b083      	sub	sp, #12
    4142:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4144:	9b01      	ldr	r3, [sp, #4]
    4146:	2b00      	cmp	r3, #0
    4148:	d002      	beq.n	4150 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    414a:	9801      	ldr	r0, [sp, #4]
    414c:	f000 f958 	bl	4400 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4150:	bf00      	nop
    4152:	b003      	add	sp, #12
    4154:	f85d fb04 	ldr.w	pc, [sp], #4

00004158 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4158:	b500      	push	{lr}
    415a:	b083      	sub	sp, #12
    415c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    415e:	9b01      	ldr	r3, [sp, #4]
    4160:	2b00      	cmp	r3, #0
    4162:	d002      	beq.n	416a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4164:	9801      	ldr	r0, [sp, #4]
    4166:	f000 f969 	bl	443c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    416a:	bf00      	nop
    416c:	b003      	add	sp, #12
    416e:	f85d fb04 	ldr.w	pc, [sp], #4

00004172 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4172:	b500      	push	{lr}
    4174:	b083      	sub	sp, #12
    4176:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4178:	9b01      	ldr	r3, [sp, #4]
    417a:	2b00      	cmp	r3, #0
    417c:	d002      	beq.n	4184 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    417e:	9801      	ldr	r0, [sp, #4]
    4180:	f000 f978 	bl	4474 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4184:	bf00      	nop
    4186:	b003      	add	sp, #12
    4188:	f85d fb04 	ldr.w	pc, [sp], #4

0000418c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    418c:	b500      	push	{lr}
    418e:	b083      	sub	sp, #12
    4190:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4192:	9b01      	ldr	r3, [sp, #4]
    4194:	2b00      	cmp	r3, #0
    4196:	d002      	beq.n	419e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4198:	9801      	ldr	r0, [sp, #4]
    419a:	f000 f989 	bl	44b0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    419e:	bf00      	nop
    41a0:	b003      	add	sp, #12
    41a2:	f85d fb04 	ldr.w	pc, [sp], #4

000041a6 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41a6:	b500      	push	{lr}
    41a8:	b083      	sub	sp, #12
    41aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ac:	9b01      	ldr	r3, [sp, #4]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    41b2:	9801      	ldr	r0, [sp, #4]
    41b4:	f000 f998 	bl	44e8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b8:	bf00      	nop
    41ba:	b003      	add	sp, #12
    41bc:	f85d fb04 	ldr.w	pc, [sp], #4

000041c0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41c0:	b500      	push	{lr}
    41c2:	b083      	sub	sp, #12
    41c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41c6:	9b01      	ldr	r3, [sp, #4]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d002      	beq.n	41d2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    41cc:	9801      	ldr	r0, [sp, #4]
    41ce:	f000 f9a9 	bl	4524 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41d2:	bf00      	nop
    41d4:	b003      	add	sp, #12
    41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000041da <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41da:	b500      	push	{lr}
    41dc:	b083      	sub	sp, #12
    41de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41e0:	9b01      	ldr	r3, [sp, #4]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d002      	beq.n	41ec <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    41e6:	9801      	ldr	r0, [sp, #4]
    41e8:	f000 f9e6 	bl	45b8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ec:	bf00      	nop
    41ee:	b003      	add	sp, #12
    41f0:	f85d fb04 	ldr.w	pc, [sp], #4

000041f4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41f4:	b500      	push	{lr}
    41f6:	b083      	sub	sp, #12
    41f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41fa:	9b01      	ldr	r3, [sp, #4]
    41fc:	2b00      	cmp	r3, #0
    41fe:	d002      	beq.n	4206 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4200:	9801      	ldr	r0, [sp, #4]
    4202:	f000 fa25 	bl	4650 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4206:	bf00      	nop
    4208:	b003      	add	sp, #12
    420a:	f85d fb04 	ldr.w	pc, [sp], #4

0000420e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    420e:	b500      	push	{lr}
    4210:	b083      	sub	sp, #12
    4212:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4214:	9b01      	ldr	r3, [sp, #4]
    4216:	2b00      	cmp	r3, #0
    4218:	d002      	beq.n	4220 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    421a:	9801      	ldr	r0, [sp, #4]
    421c:	f000 fa2a 	bl	4674 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4220:	bf00      	nop
    4222:	b003      	add	sp, #12
    4224:	f85d fb04 	ldr.w	pc, [sp], #4

00004228 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4228:	b500      	push	{lr}
    422a:	b083      	sub	sp, #12
    422c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    422e:	9b01      	ldr	r3, [sp, #4]
    4230:	2b00      	cmp	r3, #0
    4232:	d002      	beq.n	423a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4234:	9801      	ldr	r0, [sp, #4]
    4236:	f000 fa3b 	bl	46b0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    423a:	bf00      	nop
    423c:	b003      	add	sp, #12
    423e:	f85d fb04 	ldr.w	pc, [sp], #4

00004242 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4242:	b500      	push	{lr}
    4244:	b083      	sub	sp, #12
    4246:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	2b00      	cmp	r3, #0
    424c:	d002      	beq.n	4254 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    424e:	9801      	ldr	r0, [sp, #4]
    4250:	f000 fa56 	bl	4700 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4254:	bf00      	nop
    4256:	b003      	add	sp, #12
    4258:	f85d fb04 	ldr.w	pc, [sp], #4

0000425c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    425c:	b500      	push	{lr}
    425e:	b083      	sub	sp, #12
    4260:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	2b00      	cmp	r3, #0
    4266:	d002      	beq.n	426e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4268:	9801      	ldr	r0, [sp, #4]
    426a:	f000 fa79 	bl	4760 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    426e:	bf00      	nop
    4270:	b003      	add	sp, #12
    4272:	f85d fb04 	ldr.w	pc, [sp], #4

00004276 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4276:	b500      	push	{lr}
    4278:	b083      	sub	sp, #12
    427a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    427c:	9b01      	ldr	r3, [sp, #4]
    427e:	2b00      	cmp	r3, #0
    4280:	d002      	beq.n	4288 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4282:	9801      	ldr	r0, [sp, #4]
    4284:	f000 fa8a 	bl	479c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4288:	bf00      	nop
    428a:	b003      	add	sp, #12
    428c:	f85d fb04 	ldr.w	pc, [sp], #4

00004290 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4290:	b084      	sub	sp, #16
    4292:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4294:	4b0b      	ldr	r3, [pc, #44]	; (42c4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4296:	795b      	ldrb	r3, [r3, #5]
    4298:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    429a:	4b0b      	ldr	r3, [pc, #44]	; (42c8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    429c:	695b      	ldr	r3, [r3, #20]
    429e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42a0:	9b02      	ldr	r3, [sp, #8]
    42a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42a6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42a8:	9b03      	ldr	r3, [sp, #12]
    42aa:	061b      	lsls	r3, r3, #24
    42ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42b0:	9a02      	ldr	r2, [sp, #8]
    42b2:	4313      	orrs	r3, r2
    42b4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42b6:	4a04      	ldr	r2, [pc, #16]	; (42c8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    42b8:	9b02      	ldr	r3, [sp, #8]
    42ba:	6153      	str	r3, [r2, #20]
}
    42bc:	bf00      	nop
    42be:	b004      	add	sp, #16
    42c0:	4770      	bx	lr
    42c2:	bf00      	nop
    42c4:	00010638 	.word	0x00010638
    42c8:	40064000 	.word	0x40064000

000042cc <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42cc:	b084      	sub	sp, #16
    42ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	685b      	ldr	r3, [r3, #4]
    42d4:	4a0b      	ldr	r2, [pc, #44]	; (4304 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    42d6:	5cd3      	ldrb	r3, [r2, r3]
    42d8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    42da:	4b0b      	ldr	r3, [pc, #44]	; (4308 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42dc:	695b      	ldr	r3, [r3, #20]
    42de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42e0:	9b02      	ldr	r3, [sp, #8]
    42e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42e6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42e8:	9b03      	ldr	r3, [sp, #12]
    42ea:	061b      	lsls	r3, r3, #24
    42ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42f0:	9a02      	ldr	r2, [sp, #8]
    42f2:	4313      	orrs	r3, r2
    42f4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42f6:	4a04      	ldr	r2, [pc, #16]	; (4308 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42f8:	9b02      	ldr	r3, [sp, #8]
    42fa:	6153      	str	r3, [r2, #20]
}
    42fc:	bf00      	nop
    42fe:	b004      	add	sp, #16
    4300:	4770      	bx	lr
    4302:	bf00      	nop
    4304:	00010638 	.word	0x00010638
    4308:	40064000 	.word	0x40064000

0000430c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    430c:	b084      	sub	sp, #16
    430e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4310:	9b01      	ldr	r3, [sp, #4]
    4312:	685b      	ldr	r3, [r3, #4]
    4314:	4a0b      	ldr	r2, [pc, #44]	; (4344 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4316:	5cd3      	ldrb	r3, [r2, r3]
    4318:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    431a:	4b0b      	ldr	r3, [pc, #44]	; (4348 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    431c:	699b      	ldr	r3, [r3, #24]
    431e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4320:	9b02      	ldr	r3, [sp, #8]
    4322:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4326:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4328:	9b03      	ldr	r3, [sp, #12]
    432a:	061b      	lsls	r3, r3, #24
    432c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4330:	9a02      	ldr	r2, [sp, #8]
    4332:	4313      	orrs	r3, r2
    4334:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4336:	4a04      	ldr	r2, [pc, #16]	; (4348 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4338:	9b02      	ldr	r3, [sp, #8]
    433a:	6193      	str	r3, [r2, #24]
}
    433c:	bf00      	nop
    433e:	b004      	add	sp, #16
    4340:	4770      	bx	lr
    4342:	bf00      	nop
    4344:	00010638 	.word	0x00010638
    4348:	40064000 	.word	0x40064000

0000434c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    434c:	b084      	sub	sp, #16
    434e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4350:	4b0b      	ldr	r3, [pc, #44]	; (4380 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4352:	795b      	ldrb	r3, [r3, #5]
    4354:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4356:	4b0b      	ldr	r3, [pc, #44]	; (4384 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4358:	69db      	ldr	r3, [r3, #28]
    435a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    435c:	9b02      	ldr	r3, [sp, #8]
    435e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4362:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4364:	9b03      	ldr	r3, [sp, #12]
    4366:	061b      	lsls	r3, r3, #24
    4368:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    436c:	9a02      	ldr	r2, [sp, #8]
    436e:	4313      	orrs	r3, r2
    4370:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4372:	4a04      	ldr	r2, [pc, #16]	; (4384 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4374:	9b02      	ldr	r3, [sp, #8]
    4376:	61d3      	str	r3, [r2, #28]
}
    4378:	bf00      	nop
    437a:	b004      	add	sp, #16
    437c:	4770      	bx	lr
    437e:	bf00      	nop
    4380:	00010638 	.word	0x00010638
    4384:	40064000 	.word	0x40064000

00004388 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4388:	b084      	sub	sp, #16
    438a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    438c:	9b01      	ldr	r3, [sp, #4]
    438e:	685b      	ldr	r3, [r3, #4]
    4390:	4a0b      	ldr	r2, [pc, #44]	; (43c0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4392:	5cd3      	ldrb	r3, [r2, r3]
    4394:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4396:	4b0b      	ldr	r3, [pc, #44]	; (43c4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4398:	69db      	ldr	r3, [r3, #28]
    439a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    439c:	9b02      	ldr	r3, [sp, #8]
    439e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43a2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43a4:	9b03      	ldr	r3, [sp, #12]
    43a6:	061b      	lsls	r3, r3, #24
    43a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43ac:	9a02      	ldr	r2, [sp, #8]
    43ae:	4313      	orrs	r3, r2
    43b0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43b2:	4a04      	ldr	r2, [pc, #16]	; (43c4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    43b4:	9b02      	ldr	r3, [sp, #8]
    43b6:	61d3      	str	r3, [r2, #28]
}
    43b8:	bf00      	nop
    43ba:	b004      	add	sp, #16
    43bc:	4770      	bx	lr
    43be:	bf00      	nop
    43c0:	00010638 	.word	0x00010638
    43c4:	40064000 	.word	0x40064000

000043c8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43c8:	b084      	sub	sp, #16
    43ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43cc:	4b0a      	ldr	r3, [pc, #40]	; (43f8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    43ce:	7b9b      	ldrb	r3, [r3, #14]
    43d0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43d2:	4b0a      	ldr	r3, [pc, #40]	; (43fc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43d4:	691b      	ldr	r3, [r3, #16]
    43d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    43d8:	9b02      	ldr	r3, [sp, #8]
    43da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    43de:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    43e0:	9b03      	ldr	r3, [sp, #12]
    43e2:	011b      	lsls	r3, r3, #4
    43e4:	9a02      	ldr	r2, [sp, #8]
    43e6:	4313      	orrs	r3, r2
    43e8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43ea:	4a04      	ldr	r2, [pc, #16]	; (43fc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43ec:	9b02      	ldr	r3, [sp, #8]
    43ee:	6113      	str	r3, [r2, #16]
}
    43f0:	bf00      	nop
    43f2:	b004      	add	sp, #16
    43f4:	4770      	bx	lr
    43f6:	bf00      	nop
    43f8:	000105e0 	.word	0x000105e0
    43fc:	40048000 	.word	0x40048000

00004400 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4400:	b084      	sub	sp, #16
    4402:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4404:	9b01      	ldr	r3, [sp, #4]
    4406:	685b      	ldr	r3, [r3, #4]
    4408:	4a0a      	ldr	r2, [pc, #40]	; (4434 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    440a:	5cd3      	ldrb	r3, [r2, r3]
    440c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    440e:	4b0a      	ldr	r3, [pc, #40]	; (4438 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4410:	691b      	ldr	r3, [r3, #16]
    4412:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4414:	9b02      	ldr	r3, [sp, #8]
    4416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    441a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    441c:	9b03      	ldr	r3, [sp, #12]
    441e:	011b      	lsls	r3, r3, #4
    4420:	9a02      	ldr	r2, [sp, #8]
    4422:	4313      	orrs	r3, r2
    4424:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4426:	4a04      	ldr	r2, [pc, #16]	; (4438 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4428:	9b02      	ldr	r3, [sp, #8]
    442a:	6113      	str	r3, [r2, #16]
}
    442c:	bf00      	nop
    442e:	b004      	add	sp, #16
    4430:	4770      	bx	lr
    4432:	bf00      	nop
    4434:	000105e0 	.word	0x000105e0
    4438:	40048000 	.word	0x40048000

0000443c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    443c:	b084      	sub	sp, #16
    443e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4440:	4b0a      	ldr	r3, [pc, #40]	; (446c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4442:	785b      	ldrb	r3, [r3, #1]
    4444:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4446:	4b0a      	ldr	r3, [pc, #40]	; (4470 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4448:	691b      	ldr	r3, [r3, #16]
    444a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    444c:	9b02      	ldr	r3, [sp, #8]
    444e:	f023 030c 	bic.w	r3, r3, #12
    4452:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4454:	9b03      	ldr	r3, [sp, #12]
    4456:	009b      	lsls	r3, r3, #2
    4458:	9a02      	ldr	r2, [sp, #8]
    445a:	4313      	orrs	r3, r2
    445c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    445e:	4a04      	ldr	r2, [pc, #16]	; (4470 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4460:	9b02      	ldr	r3, [sp, #8]
    4462:	6113      	str	r3, [r2, #16]
}
    4464:	bf00      	nop
    4466:	b004      	add	sp, #16
    4468:	4770      	bx	lr
    446a:	bf00      	nop
    446c:	00010698 	.word	0x00010698
    4470:	40048000 	.word	0x40048000

00004474 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4474:	b084      	sub	sp, #16
    4476:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4478:	9b01      	ldr	r3, [sp, #4]
    447a:	685b      	ldr	r3, [r3, #4]
    447c:	4a0a      	ldr	r2, [pc, #40]	; (44a8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    447e:	5cd3      	ldrb	r3, [r2, r3]
    4480:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4482:	4b0a      	ldr	r3, [pc, #40]	; (44ac <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4484:	691b      	ldr	r3, [r3, #16]
    4486:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4488:	9b02      	ldr	r3, [sp, #8]
    448a:	f023 030c 	bic.w	r3, r3, #12
    448e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4490:	9b03      	ldr	r3, [sp, #12]
    4492:	009b      	lsls	r3, r3, #2
    4494:	9a02      	ldr	r2, [sp, #8]
    4496:	4313      	orrs	r3, r2
    4498:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    449a:	4a04      	ldr	r2, [pc, #16]	; (44ac <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    449c:	9b02      	ldr	r3, [sp, #8]
    449e:	6113      	str	r3, [r2, #16]
}
    44a0:	bf00      	nop
    44a2:	b004      	add	sp, #16
    44a4:	4770      	bx	lr
    44a6:	bf00      	nop
    44a8:	00010698 	.word	0x00010698
    44ac:	40048000 	.word	0x40048000

000044b0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44b0:	b084      	sub	sp, #16
    44b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44b4:	4b0a      	ldr	r3, [pc, #40]	; (44e0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    44b6:	795b      	ldrb	r3, [r3, #5]
    44b8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    44ba:	4b0a      	ldr	r3, [pc, #40]	; (44e4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44bc:	6a1b      	ldr	r3, [r3, #32]
    44be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44c0:	9b02      	ldr	r3, [sp, #8]
    44c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44c6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44c8:	9b03      	ldr	r3, [sp, #12]
    44ca:	061b      	lsls	r3, r3, #24
    44cc:	9a02      	ldr	r2, [sp, #8]
    44ce:	4313      	orrs	r3, r2
    44d0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    44d2:	4a04      	ldr	r2, [pc, #16]	; (44e4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44d4:	9b02      	ldr	r3, [sp, #8]
    44d6:	6213      	str	r3, [r2, #32]
}
    44d8:	bf00      	nop
    44da:	b004      	add	sp, #16
    44dc:	4770      	bx	lr
    44de:	bf00      	nop
    44e0:	00010638 	.word	0x00010638
    44e4:	40064000 	.word	0x40064000

000044e8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44e8:	b084      	sub	sp, #16
    44ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44ec:	9b01      	ldr	r3, [sp, #4]
    44ee:	685b      	ldr	r3, [r3, #4]
    44f0:	4a0a      	ldr	r2, [pc, #40]	; (451c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    44f2:	5cd3      	ldrb	r3, [r2, r3]
    44f4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    44f6:	4b0a      	ldr	r3, [pc, #40]	; (4520 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    44f8:	6a1b      	ldr	r3, [r3, #32]
    44fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44fc:	9b02      	ldr	r3, [sp, #8]
    44fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4502:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4504:	9b03      	ldr	r3, [sp, #12]
    4506:	061b      	lsls	r3, r3, #24
    4508:	9a02      	ldr	r2, [sp, #8]
    450a:	4313      	orrs	r3, r2
    450c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    450e:	4a04      	ldr	r2, [pc, #16]	; (4520 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4510:	9b02      	ldr	r3, [sp, #8]
    4512:	6213      	str	r3, [r2, #32]
}
    4514:	bf00      	nop
    4516:	b004      	add	sp, #16
    4518:	4770      	bx	lr
    451a:	bf00      	nop
    451c:	00010638 	.word	0x00010638
    4520:	40064000 	.word	0x40064000

00004524 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4524:	b086      	sub	sp, #24
    4526:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4528:	4b20      	ldr	r3, [pc, #128]	; (45ac <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    452a:	795b      	ldrb	r3, [r3, #5]
    452c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    452e:	9b01      	ldr	r3, [sp, #4]
    4530:	681a      	ldr	r2, [r3, #0]
    4532:	491f      	ldr	r1, [pc, #124]	; (45b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4534:	4613      	mov	r3, r2
    4536:	00db      	lsls	r3, r3, #3
    4538:	4413      	add	r3, r2
    453a:	440b      	add	r3, r1
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4540:	4b1c      	ldr	r3, [pc, #112]	; (45b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4542:	68db      	ldr	r3, [r3, #12]
    4544:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4546:	9b03      	ldr	r3, [sp, #12]
    4548:	2b03      	cmp	r3, #3
    454a:	d813      	bhi.n	4574 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    454c:	9b03      	ldr	r3, [sp, #12]
    454e:	005b      	lsls	r3, r3, #1
    4550:	3318      	adds	r3, #24
    4552:	2203      	movs	r2, #3
    4554:	fa02 f303 	lsl.w	r3, r2, r3
    4558:	43db      	mvns	r3, r3
    455a:	9a05      	ldr	r2, [sp, #20]
    455c:	4013      	ands	r3, r2
    455e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4560:	9b03      	ldr	r3, [sp, #12]
    4562:	005b      	lsls	r3, r3, #1
    4564:	3318      	adds	r3, #24
    4566:	9a04      	ldr	r2, [sp, #16]
    4568:	fa02 f303 	lsl.w	r3, r2, r3
    456c:	9a05      	ldr	r2, [sp, #20]
    456e:	4313      	orrs	r3, r2
    4570:	9305      	str	r3, [sp, #20]
    4572:	e014      	b.n	459e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4574:	9b03      	ldr	r3, [sp, #12]
    4576:	3b04      	subs	r3, #4
    4578:	005b      	lsls	r3, r3, #1
    457a:	3310      	adds	r3, #16
    457c:	2203      	movs	r2, #3
    457e:	fa02 f303 	lsl.w	r3, r2, r3
    4582:	43db      	mvns	r3, r3
    4584:	9a05      	ldr	r2, [sp, #20]
    4586:	4013      	ands	r3, r2
    4588:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    458a:	9b03      	ldr	r3, [sp, #12]
    458c:	3b04      	subs	r3, #4
    458e:	005b      	lsls	r3, r3, #1
    4590:	3310      	adds	r3, #16
    4592:	9a04      	ldr	r2, [sp, #16]
    4594:	fa02 f303 	lsl.w	r3, r2, r3
    4598:	9a05      	ldr	r2, [sp, #20]
    459a:	4313      	orrs	r3, r2
    459c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    459e:	4a05      	ldr	r2, [pc, #20]	; (45b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45a0:	9b05      	ldr	r3, [sp, #20]
    45a2:	60d3      	str	r3, [r2, #12]
}
    45a4:	bf00      	nop
    45a6:	b006      	add	sp, #24
    45a8:	4770      	bx	lr
    45aa:	bf00      	nop
    45ac:	000105e0 	.word	0x000105e0
    45b0:	000102d0 	.word	0x000102d0
    45b4:	40048000 	.word	0x40048000

000045b8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45b8:	b086      	sub	sp, #24
    45ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45bc:	9b01      	ldr	r3, [sp, #4]
    45be:	685b      	ldr	r3, [r3, #4]
    45c0:	4a20      	ldr	r2, [pc, #128]	; (4644 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    45c2:	5cd3      	ldrb	r3, [r2, r3]
    45c4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45c6:	9b01      	ldr	r3, [sp, #4]
    45c8:	681a      	ldr	r2, [r3, #0]
    45ca:	491f      	ldr	r1, [pc, #124]	; (4648 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    45cc:	4613      	mov	r3, r2
    45ce:	00db      	lsls	r3, r3, #3
    45d0:	4413      	add	r3, r2
    45d2:	440b      	add	r3, r1
    45d4:	781b      	ldrb	r3, [r3, #0]
    45d6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45d8:	4b1c      	ldr	r3, [pc, #112]	; (464c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    45da:	68db      	ldr	r3, [r3, #12]
    45dc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45de:	9b03      	ldr	r3, [sp, #12]
    45e0:	2b03      	cmp	r3, #3
    45e2:	d813      	bhi.n	460c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45e4:	9b03      	ldr	r3, [sp, #12]
    45e6:	005b      	lsls	r3, r3, #1
    45e8:	3318      	adds	r3, #24
    45ea:	2203      	movs	r2, #3
    45ec:	fa02 f303 	lsl.w	r3, r2, r3
    45f0:	43db      	mvns	r3, r3
    45f2:	9a05      	ldr	r2, [sp, #20]
    45f4:	4013      	ands	r3, r2
    45f6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45f8:	9b03      	ldr	r3, [sp, #12]
    45fa:	005b      	lsls	r3, r3, #1
    45fc:	3318      	adds	r3, #24
    45fe:	9a04      	ldr	r2, [sp, #16]
    4600:	fa02 f303 	lsl.w	r3, r2, r3
    4604:	9a05      	ldr	r2, [sp, #20]
    4606:	4313      	orrs	r3, r2
    4608:	9305      	str	r3, [sp, #20]
    460a:	e014      	b.n	4636 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    460c:	9b03      	ldr	r3, [sp, #12]
    460e:	3b04      	subs	r3, #4
    4610:	005b      	lsls	r3, r3, #1
    4612:	3310      	adds	r3, #16
    4614:	2203      	movs	r2, #3
    4616:	fa02 f303 	lsl.w	r3, r2, r3
    461a:	43db      	mvns	r3, r3
    461c:	9a05      	ldr	r2, [sp, #20]
    461e:	4013      	ands	r3, r2
    4620:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4622:	9b03      	ldr	r3, [sp, #12]
    4624:	3b04      	subs	r3, #4
    4626:	005b      	lsls	r3, r3, #1
    4628:	3310      	adds	r3, #16
    462a:	9a04      	ldr	r2, [sp, #16]
    462c:	fa02 f303 	lsl.w	r3, r2, r3
    4630:	9a05      	ldr	r2, [sp, #20]
    4632:	4313      	orrs	r3, r2
    4634:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4636:	4a05      	ldr	r2, [pc, #20]	; (464c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4638:	9b05      	ldr	r3, [sp, #20]
    463a:	60d3      	str	r3, [r2, #12]
}
    463c:	bf00      	nop
    463e:	b006      	add	sp, #24
    4640:	4770      	bx	lr
    4642:	bf00      	nop
    4644:	000105e0 	.word	0x000105e0
    4648:	000102d0 	.word	0x000102d0
    464c:	40048000 	.word	0x40048000

00004650 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4650:	b084      	sub	sp, #16
    4652:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4654:	4b06      	ldr	r3, [pc, #24]	; (4670 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4656:	685b      	ldr	r3, [r3, #4]
    4658:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    465a:	9b03      	ldr	r3, [sp, #12]
    465c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4660:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4662:	4a03      	ldr	r2, [pc, #12]	; (4670 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4664:	9b03      	ldr	r3, [sp, #12]
    4666:	6053      	str	r3, [r2, #4]
}
    4668:	bf00      	nop
    466a:	b004      	add	sp, #16
    466c:	4770      	bx	lr
    466e:	bf00      	nop
    4670:	40048000 	.word	0x40048000

00004674 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4674:	b084      	sub	sp, #16
    4676:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4678:	9b01      	ldr	r3, [sp, #4]
    467a:	685b      	ldr	r3, [r3, #4]
    467c:	4a0a      	ldr	r2, [pc, #40]	; (46a8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    467e:	5cd3      	ldrb	r3, [r2, r3]
    4680:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4682:	4b0a      	ldr	r3, [pc, #40]	; (46ac <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4684:	685b      	ldr	r3, [r3, #4]
    4686:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4688:	9b02      	ldr	r3, [sp, #8]
    468a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    468e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4690:	9b03      	ldr	r3, [sp, #12]
    4692:	011b      	lsls	r3, r3, #4
    4694:	9a02      	ldr	r2, [sp, #8]
    4696:	4313      	orrs	r3, r2
    4698:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    469a:	4a04      	ldr	r2, [pc, #16]	; (46ac <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    469c:	9b02      	ldr	r3, [sp, #8]
    469e:	6053      	str	r3, [r2, #4]
}
    46a0:	bf00      	nop
    46a2:	b004      	add	sp, #16
    46a4:	4770      	bx	lr
    46a6:	bf00      	nop
    46a8:	000105e0 	.word	0x000105e0
    46ac:	40048000 	.word	0x40048000

000046b0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46b0:	b084      	sub	sp, #16
    46b2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    46b4:	9b01      	ldr	r3, [sp, #4]
    46b6:	681a      	ldr	r2, [r3, #0]
    46b8:	490f      	ldr	r1, [pc, #60]	; (46f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    46ba:	4613      	mov	r3, r2
    46bc:	00db      	lsls	r3, r3, #3
    46be:	4413      	add	r3, r2
    46c0:	440b      	add	r3, r1
    46c2:	3304      	adds	r3, #4
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    46c8:	4a0c      	ldr	r2, [pc, #48]	; (46fc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46ca:	9b03      	ldr	r3, [sp, #12]
    46cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46d0:	490a      	ldr	r1, [pc, #40]	; (46fc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    46d6:	9b03      	ldr	r3, [sp, #12]
    46d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    46dc:	4a07      	ldr	r2, [pc, #28]	; (46fc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46de:	9b03      	ldr	r3, [sp, #12]
    46e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46e4:	4905      	ldr	r1, [pc, #20]	; (46fc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    46ea:	9b03      	ldr	r3, [sp, #12]
    46ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46f0:	bf00      	nop
    46f2:	b004      	add	sp, #16
    46f4:	4770      	bx	lr
    46f6:	bf00      	nop
    46f8:	000102d0 	.word	0x000102d0
    46fc:	40065000 	.word	0x40065000

00004700 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4700:	b086      	sub	sp, #24
    4702:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4704:	9b01      	ldr	r3, [sp, #4]
    4706:	681a      	ldr	r2, [r3, #0]
    4708:	4912      	ldr	r1, [pc, #72]	; (4754 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    470a:	4613      	mov	r3, r2
    470c:	00db      	lsls	r3, r3, #3
    470e:	4413      	add	r3, r2
    4710:	440b      	add	r3, r1
    4712:	3304      	adds	r3, #4
    4714:	781b      	ldrb	r3, [r3, #0]
    4716:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	685b      	ldr	r3, [r3, #4]
    471c:	4a0e      	ldr	r2, [pc, #56]	; (4758 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    471e:	5cd3      	ldrb	r3, [r2, r3]
    4720:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4722:	4a0e      	ldr	r2, [pc, #56]	; (475c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4724:	9b05      	ldr	r3, [sp, #20]
    4726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    472a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    472c:	9b03      	ldr	r3, [sp, #12]
    472e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4732:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4734:	9b04      	ldr	r3, [sp, #16]
    4736:	061b      	lsls	r3, r3, #24
    4738:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    473c:	9a03      	ldr	r2, [sp, #12]
    473e:	4313      	orrs	r3, r2
    4740:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4742:	4906      	ldr	r1, [pc, #24]	; (475c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4744:	9b05      	ldr	r3, [sp, #20]
    4746:	9a03      	ldr	r2, [sp, #12]
    4748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    474c:	bf00      	nop
    474e:	b006      	add	sp, #24
    4750:	4770      	bx	lr
    4752:	bf00      	nop
    4754:	000102d0 	.word	0x000102d0
    4758:	00010668 	.word	0x00010668
    475c:	40065000 	.word	0x40065000

00004760 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4760:	b084      	sub	sp, #16
    4762:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4764:	4b0b      	ldr	r3, [pc, #44]	; (4794 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4766:	7f1b      	ldrb	r3, [r3, #28]
    4768:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    476a:	4b0b      	ldr	r3, [pc, #44]	; (4798 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    476c:	685b      	ldr	r3, [r3, #4]
    476e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4770:	9b02      	ldr	r3, [sp, #8]
    4772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4776:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4778:	9b03      	ldr	r3, [sp, #12]
    477a:	031b      	lsls	r3, r3, #12
    477c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4780:	9a02      	ldr	r2, [sp, #8]
    4782:	4313      	orrs	r3, r2
    4784:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4786:	4a04      	ldr	r2, [pc, #16]	; (4798 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4788:	9b02      	ldr	r3, [sp, #8]
    478a:	6053      	str	r3, [r2, #4]
}
    478c:	bf00      	nop
    478e:	b004      	add	sp, #16
    4790:	4770      	bx	lr
    4792:	bf00      	nop
    4794:	000105e0 	.word	0x000105e0
    4798:	40048000 	.word	0x40048000

0000479c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    479c:	b084      	sub	sp, #16
    479e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a0:	9b01      	ldr	r3, [sp, #4]
    47a2:	685b      	ldr	r3, [r3, #4]
    47a4:	4a0b      	ldr	r2, [pc, #44]	; (47d4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    47a6:	5cd3      	ldrb	r3, [r2, r3]
    47a8:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    47aa:	4b0b      	ldr	r3, [pc, #44]	; (47d8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47ac:	685b      	ldr	r3, [r3, #4]
    47ae:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47b0:	9b02      	ldr	r3, [sp, #8]
    47b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47b6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47b8:	9b03      	ldr	r3, [sp, #12]
    47ba:	031b      	lsls	r3, r3, #12
    47bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47c0:	9a02      	ldr	r2, [sp, #8]
    47c2:	4313      	orrs	r3, r2
    47c4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47c6:	4a04      	ldr	r2, [pc, #16]	; (47d8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47c8:	9b02      	ldr	r3, [sp, #8]
    47ca:	6053      	str	r3, [r2, #4]
}
    47cc:	bf00      	nop
    47ce:	b004      	add	sp, #16
    47d0:	4770      	bx	lr
    47d2:	bf00      	nop
    47d4:	000105e0 	.word	0x000105e0
    47d8:	40048000 	.word	0x40048000

000047dc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    47dc:	b500      	push	{lr}
    47de:	b085      	sub	sp, #20
    47e0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    47e2:	2300      	movs	r3, #0
    47e4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    47e8:	9b01      	ldr	r3, [sp, #4]
    47ea:	2b00      	cmp	r3, #0
    47ec:	d037      	beq.n	485e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    47ee:	2300      	movs	r3, #0
    47f0:	9303      	str	r3, [sp, #12]
    47f2:	e02b      	b.n	484c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    47f4:	4b29      	ldr	r3, [pc, #164]	; (489c <DisableSafeClock+0xc0>)
    47f6:	6819      	ldr	r1, [r3, #0]
    47f8:	9a03      	ldr	r2, [sp, #12]
    47fa:	4613      	mov	r3, r2
    47fc:	005b      	lsls	r3, r3, #1
    47fe:	4413      	add	r3, r2
    4800:	009b      	lsls	r3, r3, #2
    4802:	440b      	add	r3, r1
    4804:	3314      	adds	r3, #20
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	2b05      	cmp	r3, #5
    480a:	d11c      	bne.n	4846 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    480c:	2301      	movs	r3, #1
    480e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4812:	4b22      	ldr	r3, [pc, #136]	; (489c <DisableSafeClock+0xc0>)
    4814:	6819      	ldr	r1, [r3, #0]
    4816:	9a03      	ldr	r2, [sp, #12]
    4818:	4613      	mov	r3, r2
    481a:	005b      	lsls	r3, r3, #1
    481c:	4413      	add	r3, r2
    481e:	009b      	lsls	r3, r3, #2
    4820:	440b      	add	r3, r1
    4822:	3318      	adds	r3, #24
    4824:	881b      	ldrh	r3, [r3, #0]
    4826:	2b00      	cmp	r3, #0
    4828:	d118      	bne.n	485c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    482a:	4b1d      	ldr	r3, [pc, #116]	; (48a0 <DisableSafeClock+0xc4>)
    482c:	791b      	ldrb	r3, [r3, #4]
    482e:	4619      	mov	r1, r3
    4830:	4a1c      	ldr	r2, [pc, #112]	; (48a4 <DisableSafeClock+0xc8>)
    4832:	460b      	mov	r3, r1
    4834:	005b      	lsls	r3, r3, #1
    4836:	440b      	add	r3, r1
    4838:	009b      	lsls	r3, r3, #2
    483a:	4413      	add	r3, r2
    483c:	3308      	adds	r3, #8
    483e:	681b      	ldr	r3, [r3, #0]
    4840:	2005      	movs	r0, #5
    4842:	4798      	blx	r3
                }
                break;
    4844:	e00a      	b.n	485c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4846:	9b03      	ldr	r3, [sp, #12]
    4848:	3301      	adds	r3, #1
    484a:	9303      	str	r3, [sp, #12]
    484c:	4b13      	ldr	r3, [pc, #76]	; (489c <DisableSafeClock+0xc0>)
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	7a1b      	ldrb	r3, [r3, #8]
    4852:	461a      	mov	r2, r3
    4854:	9b03      	ldr	r3, [sp, #12]
    4856:	4293      	cmp	r3, r2
    4858:	d3cc      	bcc.n	47f4 <DisableSafeClock+0x18>
    485a:	e000      	b.n	485e <DisableSafeClock+0x82>
                break;
    485c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    485e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4862:	f083 0301 	eor.w	r3, r3, #1
    4866:	b2db      	uxtb	r3, r3
    4868:	2b00      	cmp	r3, #0
    486a:	d013      	beq.n	4894 <DisableSafeClock+0xb8>
    486c:	4b0e      	ldr	r3, [pc, #56]	; (48a8 <DisableSafeClock+0xcc>)
    486e:	781b      	ldrb	r3, [r3, #0]
    4870:	f083 0301 	eor.w	r3, r3, #1
    4874:	b2db      	uxtb	r3, r3
    4876:	2b00      	cmp	r3, #0
    4878:	d00c      	beq.n	4894 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    487a:	4b09      	ldr	r3, [pc, #36]	; (48a0 <DisableSafeClock+0xc4>)
    487c:	791b      	ldrb	r3, [r3, #4]
    487e:	4619      	mov	r1, r3
    4880:	4a08      	ldr	r2, [pc, #32]	; (48a4 <DisableSafeClock+0xc8>)
    4882:	460b      	mov	r3, r1
    4884:	005b      	lsls	r3, r3, #1
    4886:	440b      	add	r3, r1
    4888:	009b      	lsls	r3, r3, #2
    488a:	4413      	add	r3, r2
    488c:	3308      	adds	r3, #8
    488e:	681b      	ldr	r3, [r3, #0]
    4890:	2005      	movs	r0, #5
    4892:	4798      	blx	r3
    }
}
    4894:	bf00      	nop
    4896:	b005      	add	sp, #20
    4898:	f85d fb04 	ldr.w	pc, [sp], #4
    489c:	1fff8ba0 	.word	0x1fff8ba0
    48a0:	00010260 	.word	0x00010260
    48a4:	00010890 	.word	0x00010890
    48a8:	1fff8b18 	.word	0x1fff8b18

000048ac <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    48ac:	4b06      	ldr	r3, [pc, #24]	; (48c8 <SetFircToResetValue_TrustedCall+0x1c>)
    48ae:	2200      	movs	r2, #0
    48b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    48b4:	4b04      	ldr	r3, [pc, #16]	; (48c8 <SetFircToResetValue_TrustedCall+0x1c>)
    48b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48ba:	4a03      	ldr	r2, [pc, #12]	; (48c8 <SetFircToResetValue_TrustedCall+0x1c>)
    48bc:	f043 0301 	orr.w	r3, r3, #1
    48c0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    48c4:	bf00      	nop
    48c6:	4770      	bx	lr
    48c8:	40064000 	.word	0x40064000

000048cc <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    48cc:	b084      	sub	sp, #16
    48ce:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    48d0:	2303      	movs	r3, #3
    48d2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    48d4:	2300      	movs	r3, #0
    48d6:	9302      	str	r3, [sp, #8]
    48d8:	e028      	b.n	492c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    48da:	9b01      	ldr	r3, [sp, #4]
    48dc:	9a02      	ldr	r2, [sp, #8]
    48de:	320d      	adds	r2, #13
    48e0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    48e4:	2b28      	cmp	r3, #40	; 0x28
    48e6:	d10b      	bne.n	4900 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    48e8:	9a01      	ldr	r2, [sp, #4]
    48ea:	9b02      	ldr	r3, [sp, #8]
    48ec:	330d      	adds	r3, #13
    48ee:	00db      	lsls	r3, r3, #3
    48f0:	4413      	add	r3, r2
    48f2:	685b      	ldr	r3, [r3, #4]
    48f4:	4a2b      	ldr	r2, [pc, #172]	; (49a4 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    48f6:	5cd3      	ldrb	r3, [r2, r3]
    48f8:	011b      	lsls	r3, r3, #4
    48fa:	9a03      	ldr	r2, [sp, #12]
    48fc:	4313      	orrs	r3, r2
    48fe:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4900:	9b01      	ldr	r3, [sp, #4]
    4902:	9a02      	ldr	r2, [sp, #8]
    4904:	320d      	adds	r2, #13
    4906:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    490a:	2b29      	cmp	r3, #41	; 0x29
    490c:	d10b      	bne.n	4926 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    490e:	9a01      	ldr	r2, [sp, #4]
    4910:	9b02      	ldr	r3, [sp, #8]
    4912:	330d      	adds	r3, #13
    4914:	00db      	lsls	r3, r3, #3
    4916:	4413      	add	r3, r2
    4918:	685b      	ldr	r3, [r3, #4]
    491a:	4a23      	ldr	r2, [pc, #140]	; (49a8 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    491c:	5cd3      	ldrb	r3, [r2, r3]
    491e:	009b      	lsls	r3, r3, #2
    4920:	9a03      	ldr	r2, [sp, #12]
    4922:	4313      	orrs	r3, r2
    4924:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4926:	9b02      	ldr	r3, [sp, #8]
    4928:	3301      	adds	r3, #1
    492a:	9302      	str	r3, [sp, #8]
    492c:	9b01      	ldr	r3, [sp, #4]
    492e:	7adb      	ldrb	r3, [r3, #11]
    4930:	461a      	mov	r2, r3
    4932:	9b02      	ldr	r3, [sp, #8]
    4934:	4293      	cmp	r3, r2
    4936:	d3d0      	bcc.n	48da <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4938:	2300      	movs	r3, #0
    493a:	9302      	str	r3, [sp, #8]
    493c:	e026      	b.n	498c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    493e:	9a01      	ldr	r2, [sp, #4]
    4940:	9b02      	ldr	r3, [sp, #8]
    4942:	334e      	adds	r3, #78	; 0x4e
    4944:	00db      	lsls	r3, r3, #3
    4946:	4413      	add	r3, r2
    4948:	685b      	ldr	r3, [r3, #4]
    494a:	2b12      	cmp	r3, #18
    494c:	d109      	bne.n	4962 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    494e:	9a01      	ldr	r2, [sp, #4]
    4950:	9b02      	ldr	r3, [sp, #8]
    4952:	334e      	adds	r3, #78	; 0x4e
    4954:	00db      	lsls	r3, r3, #3
    4956:	4413      	add	r3, r2
    4958:	891b      	ldrh	r3, [r3, #8]
    495a:	005b      	lsls	r3, r3, #1
    495c:	9a03      	ldr	r2, [sp, #12]
    495e:	4313      	orrs	r3, r2
    4960:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4962:	9a01      	ldr	r2, [sp, #4]
    4964:	9b02      	ldr	r3, [sp, #8]
    4966:	334e      	adds	r3, #78	; 0x4e
    4968:	00db      	lsls	r3, r3, #3
    496a:	4413      	add	r3, r2
    496c:	685b      	ldr	r3, [r3, #4]
    496e:	2b13      	cmp	r3, #19
    4970:	d109      	bne.n	4986 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4972:	9a01      	ldr	r2, [sp, #4]
    4974:	9b02      	ldr	r3, [sp, #8]
    4976:	334e      	adds	r3, #78	; 0x4e
    4978:	00db      	lsls	r3, r3, #3
    497a:	4413      	add	r3, r2
    497c:	891b      	ldrh	r3, [r3, #8]
    497e:	461a      	mov	r2, r3
    4980:	9b03      	ldr	r3, [sp, #12]
    4982:	4313      	orrs	r3, r2
    4984:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4986:	9b02      	ldr	r3, [sp, #8]
    4988:	3301      	adds	r3, #1
    498a:	9302      	str	r3, [sp, #8]
    498c:	9b01      	ldr	r3, [sp, #4]
    498e:	7c1b      	ldrb	r3, [r3, #16]
    4990:	461a      	mov	r2, r3
    4992:	9b02      	ldr	r3, [sp, #8]
    4994:	4293      	cmp	r3, r2
    4996:	d3d2      	bcc.n	493e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4998:	4a04      	ldr	r2, [pc, #16]	; (49ac <SetSimLpoclksRegister_TrustedCall+0xe0>)
    499a:	9b03      	ldr	r3, [sp, #12]
    499c:	6113      	str	r3, [r2, #16]
}
    499e:	bf00      	nop
    49a0:	b004      	add	sp, #16
    49a2:	4770      	bx	lr
    49a4:	000105e0 	.word	0x000105e0
    49a8:	00010698 	.word	0x00010698
    49ac:	40048000 	.word	0x40048000

000049b0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    49b0:	b500      	push	{lr}
    49b2:	b089      	sub	sp, #36	; 0x24
    49b4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    49b6:	2300      	movs	r3, #0
    49b8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    49bc:	4a21      	ldr	r2, [pc, #132]	; (4a44 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    49be:	9b01      	ldr	r3, [sp, #4]
    49c0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    49c2:	4b21      	ldr	r3, [pc, #132]	; (4a48 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49c4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49c8:	f003 0301 	and.w	r3, r3, #1
    49cc:	2b00      	cmp	r3, #0
    49ce:	d12e      	bne.n	4a2e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    49d0:	4b1e      	ldr	r3, [pc, #120]	; (4a4c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    49d2:	2200      	movs	r2, #0
    49d4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    49d6:	f7ff ff69 	bl	48ac <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49da:	aa03      	add	r2, sp, #12
    49dc:	a904      	add	r1, sp, #16
    49de:	a805      	add	r0, sp, #20
    49e0:	f24c 3350 	movw	r3, #50000	; 0xc350
    49e4:	f7fe f8ae 	bl	2b44 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49e8:	4b17      	ldr	r3, [pc, #92]	; (4a48 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49ee:	0e1b      	lsrs	r3, r3, #24
    49f0:	f003 0301 	and.w	r3, r3, #1
    49f4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49f6:	9a03      	ldr	r2, [sp, #12]
    49f8:	a904      	add	r1, sp, #16
    49fa:	ab05      	add	r3, sp, #20
    49fc:	4618      	mov	r0, r3
    49fe:	f7fe f8bb 	bl	2b78 <Clock_Ip_TimeoutExpired>
    4a02:	4603      	mov	r3, r0
    4a04:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a08:	9b06      	ldr	r3, [sp, #24]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d106      	bne.n	4a1c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4a0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a12:	f083 0301 	eor.w	r3, r3, #1
    4a16:	b2db      	uxtb	r3, r3
    4a18:	2b00      	cmp	r3, #0
    4a1a:	d1e5      	bne.n	49e8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4a1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a20:	2b00      	cmp	r3, #0
    4a22:	d007      	beq.n	4a34 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a24:	2105      	movs	r1, #5
    4a26:	2001      	movs	r0, #1
    4a28:	f7fe f87c 	bl	2b24 <Clock_Ip_ReportClockErrors>
    4a2c:	e002      	b.n	4a34 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4a2e:	4b07      	ldr	r3, [pc, #28]	; (4a4c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a30:	2201      	movs	r2, #1
    4a32:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4a34:	9801      	ldr	r0, [sp, #4]
    4a36:	f7ff ff49 	bl	48cc <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4a3a:	bf00      	nop
    4a3c:	b009      	add	sp, #36	; 0x24
    4a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a42:	bf00      	nop
    4a44:	1fff8ba0 	.word	0x1fff8ba0
    4a48:	40064000 	.word	0x40064000
    4a4c:	1fff8b18 	.word	0x1fff8b18

00004a50 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4a50:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4a52:	2300      	movs	r3, #0
    4a54:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a56:	4b29      	ldr	r3, [pc, #164]	; (4afc <getFircConfig+0xac>)
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d024      	beq.n	4aa8 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a5e:	2300      	movs	r3, #0
    4a60:	9301      	str	r3, [sp, #4]
    4a62:	e01a      	b.n	4a9a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4a64:	4b25      	ldr	r3, [pc, #148]	; (4afc <getFircConfig+0xac>)
    4a66:	6819      	ldr	r1, [r3, #0]
    4a68:	9a01      	ldr	r2, [sp, #4]
    4a6a:	4613      	mov	r3, r2
    4a6c:	005b      	lsls	r3, r3, #1
    4a6e:	4413      	add	r3, r2
    4a70:	009b      	lsls	r3, r3, #2
    4a72:	440b      	add	r3, r1
    4a74:	3314      	adds	r3, #20
    4a76:	681b      	ldr	r3, [r3, #0]
    4a78:	2b05      	cmp	r3, #5
    4a7a:	d10b      	bne.n	4a94 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4a7c:	4b1f      	ldr	r3, [pc, #124]	; (4afc <getFircConfig+0xac>)
    4a7e:	6819      	ldr	r1, [r3, #0]
    4a80:	9a01      	ldr	r2, [sp, #4]
    4a82:	4613      	mov	r3, r2
    4a84:	005b      	lsls	r3, r3, #1
    4a86:	4413      	add	r3, r2
    4a88:	009b      	lsls	r3, r3, #2
    4a8a:	3310      	adds	r3, #16
    4a8c:	440b      	add	r3, r1
    4a8e:	3304      	adds	r3, #4
    4a90:	9300      	str	r3, [sp, #0]
                break;
    4a92:	e009      	b.n	4aa8 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a94:	9b01      	ldr	r3, [sp, #4]
    4a96:	3301      	adds	r3, #1
    4a98:	9301      	str	r3, [sp, #4]
    4a9a:	4b18      	ldr	r3, [pc, #96]	; (4afc <getFircConfig+0xac>)
    4a9c:	681b      	ldr	r3, [r3, #0]
    4a9e:	7a1b      	ldrb	r3, [r3, #8]
    4aa0:	461a      	mov	r2, r3
    4aa2:	9b01      	ldr	r3, [sp, #4]
    4aa4:	4293      	cmp	r3, r2
    4aa6:	d3dd      	bcc.n	4a64 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4aa8:	9b00      	ldr	r3, [sp, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d121      	bne.n	4af2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4aae:	4b14      	ldr	r3, [pc, #80]	; (4b00 <getFircConfig+0xb0>)
    4ab0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4ab2:	4b13      	ldr	r3, [pc, #76]	; (4b00 <getFircConfig+0xb0>)
    4ab4:	2205      	movs	r2, #5
    4ab6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4ab8:	4b12      	ldr	r3, [pc, #72]	; (4b04 <getFircConfig+0xb4>)
    4aba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4abe:	b29b      	uxth	r3, r3
    4ac0:	f003 0301 	and.w	r3, r3, #1
    4ac4:	b29a      	uxth	r2, r3
    4ac6:	4b0e      	ldr	r3, [pc, #56]	; (4b00 <getFircConfig+0xb0>)
    4ac8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4aca:	4b0e      	ldr	r3, [pc, #56]	; (4b04 <getFircConfig+0xb4>)
    4acc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ad0:	b2db      	uxtb	r3, r3
    4ad2:	f003 0303 	and.w	r3, r3, #3
    4ad6:	b2da      	uxtb	r2, r3
    4ad8:	4b09      	ldr	r3, [pc, #36]	; (4b00 <getFircConfig+0xb0>)
    4ada:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <getFircConfig+0xb4>)
    4ade:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ae2:	b2db      	uxtb	r3, r3
    4ae4:	10db      	asrs	r3, r3, #3
    4ae6:	b2db      	uxtb	r3, r3
    4ae8:	f003 0301 	and.w	r3, r3, #1
    4aec:	b2da      	uxtb	r2, r3
    4aee:	4b04      	ldr	r3, [pc, #16]	; (4b00 <getFircConfig+0xb0>)
    4af0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4af2:	9b00      	ldr	r3, [sp, #0]
}
    4af4:	4618      	mov	r0, r3
    4af6:	b002      	add	sp, #8
    4af8:	4770      	bx	lr
    4afa:	bf00      	nop
    4afc:	1fff8ba0 	.word	0x1fff8ba0
    4b00:	1fff8c0c 	.word	0x1fff8c0c
    4b04:	40064000 	.word	0x40064000

00004b08 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b08:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b0a:	2300      	movs	r3, #0
    4b0c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b0e:	4b20      	ldr	r3, [pc, #128]	; (4b90 <getSoscConfig+0x88>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d024      	beq.n	4b60 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b16:	2300      	movs	r3, #0
    4b18:	9301      	str	r3, [sp, #4]
    4b1a:	e01a      	b.n	4b52 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4b1c:	4b1c      	ldr	r3, [pc, #112]	; (4b90 <getSoscConfig+0x88>)
    4b1e:	6819      	ldr	r1, [r3, #0]
    4b20:	9a01      	ldr	r2, [sp, #4]
    4b22:	4613      	mov	r3, r2
    4b24:	009b      	lsls	r3, r3, #2
    4b26:	4413      	add	r3, r2
    4b28:	009b      	lsls	r3, r3, #2
    4b2a:	440b      	add	r3, r1
    4b2c:	332c      	adds	r3, #44	; 0x2c
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	2b08      	cmp	r3, #8
    4b32:	d10b      	bne.n	4b4c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4b34:	4b16      	ldr	r3, [pc, #88]	; (4b90 <getSoscConfig+0x88>)
    4b36:	6819      	ldr	r1, [r3, #0]
    4b38:	9a01      	ldr	r2, [sp, #4]
    4b3a:	4613      	mov	r3, r2
    4b3c:	009b      	lsls	r3, r3, #2
    4b3e:	4413      	add	r3, r2
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	3328      	adds	r3, #40	; 0x28
    4b44:	440b      	add	r3, r1
    4b46:	3304      	adds	r3, #4
    4b48:	9300      	str	r3, [sp, #0]
                break;
    4b4a:	e009      	b.n	4b60 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b4c:	9b01      	ldr	r3, [sp, #4]
    4b4e:	3301      	adds	r3, #1
    4b50:	9301      	str	r3, [sp, #4]
    4b52:	4b0f      	ldr	r3, [pc, #60]	; (4b90 <getSoscConfig+0x88>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	7a5b      	ldrb	r3, [r3, #9]
    4b58:	461a      	mov	r2, r3
    4b5a:	9b01      	ldr	r3, [sp, #4]
    4b5c:	4293      	cmp	r3, r2
    4b5e:	d3dd      	bcc.n	4b1c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b60:	9b00      	ldr	r3, [sp, #0]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d110      	bne.n	4b88 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4b66:	4b0b      	ldr	r3, [pc, #44]	; (4b94 <getSoscConfig+0x8c>)
    4b68:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4b6a:	4b0a      	ldr	r3, [pc, #40]	; (4b94 <getSoscConfig+0x8c>)
    4b6c:	2208      	movs	r2, #8
    4b6e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4b70:	4b09      	ldr	r3, [pc, #36]	; (4b98 <getSoscConfig+0x90>)
    4b72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4b76:	b29b      	uxth	r3, r3
    4b78:	f003 0301 	and.w	r3, r3, #1
    4b7c:	b29a      	uxth	r2, r3
    4b7e:	4b05      	ldr	r3, [pc, #20]	; (4b94 <getSoscConfig+0x8c>)
    4b80:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4b82:	4b04      	ldr	r3, [pc, #16]	; (4b94 <getSoscConfig+0x8c>)
    4b84:	4a05      	ldr	r2, [pc, #20]	; (4b9c <getSoscConfig+0x94>)
    4b86:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4b88:	9b00      	ldr	r3, [sp, #0]
}
    4b8a:	4618      	mov	r0, r3
    4b8c:	b002      	add	sp, #8
    4b8e:	4770      	bx	lr
    4b90:	1fff8ba0 	.word	0x1fff8ba0
    4b94:	1fff8c18 	.word	0x1fff8c18
    4b98:	40064000 	.word	0x40064000
    4b9c:	02625a00 	.word	0x02625a00

00004ba0 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4ba0:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4ba2:	2300      	movs	r3, #0
    4ba4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4ba6:	4b28      	ldr	r3, [pc, #160]	; (4c48 <getSpllConfig+0xa8>)
    4ba8:	681b      	ldr	r3, [r3, #0]
    4baa:	2b00      	cmp	r3, #0
    4bac:	d023      	beq.n	4bf6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4bae:	2300      	movs	r3, #0
    4bb0:	9301      	str	r3, [sp, #4]
    4bb2:	e019      	b.n	4be8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4bb4:	4b24      	ldr	r3, [pc, #144]	; (4c48 <getSpllConfig+0xa8>)
    4bb6:	6819      	ldr	r1, [r3, #0]
    4bb8:	9a01      	ldr	r2, [sp, #4]
    4bba:	4613      	mov	r3, r2
    4bbc:	009b      	lsls	r3, r3, #2
    4bbe:	4413      	add	r3, r2
    4bc0:	00db      	lsls	r3, r3, #3
    4bc2:	440b      	add	r3, r1
    4bc4:	3340      	adds	r3, #64	; 0x40
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	2b09      	cmp	r3, #9
    4bca:	d10a      	bne.n	4be2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4bcc:	4b1e      	ldr	r3, [pc, #120]	; (4c48 <getSpllConfig+0xa8>)
    4bce:	6819      	ldr	r1, [r3, #0]
    4bd0:	9a01      	ldr	r2, [sp, #4]
    4bd2:	4613      	mov	r3, r2
    4bd4:	009b      	lsls	r3, r3, #2
    4bd6:	4413      	add	r3, r2
    4bd8:	00db      	lsls	r3, r3, #3
    4bda:	3340      	adds	r3, #64	; 0x40
    4bdc:	440b      	add	r3, r1
    4bde:	9300      	str	r3, [sp, #0]
                break;
    4be0:	e009      	b.n	4bf6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4be2:	9b01      	ldr	r3, [sp, #4]
    4be4:	3301      	adds	r3, #1
    4be6:	9301      	str	r3, [sp, #4]
    4be8:	4b17      	ldr	r3, [pc, #92]	; (4c48 <getSpllConfig+0xa8>)
    4bea:	681b      	ldr	r3, [r3, #0]
    4bec:	7a9b      	ldrb	r3, [r3, #10]
    4bee:	461a      	mov	r2, r3
    4bf0:	9b01      	ldr	r3, [sp, #4]
    4bf2:	4293      	cmp	r3, r2
    4bf4:	d3de      	bcc.n	4bb4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bf6:	9b00      	ldr	r3, [sp, #0]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d121      	bne.n	4c40 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4bfc:	4b13      	ldr	r3, [pc, #76]	; (4c4c <getSpllConfig+0xac>)
    4bfe:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c00:	4b12      	ldr	r3, [pc, #72]	; (4c4c <getSpllConfig+0xac>)
    4c02:	2209      	movs	r2, #9
    4c04:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c06:	4b12      	ldr	r3, [pc, #72]	; (4c50 <getSpllConfig+0xb0>)
    4c08:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c0c:	b29b      	uxth	r3, r3
    4c0e:	f003 0301 	and.w	r3, r3, #1
    4c12:	b29a      	uxth	r2, r3
    4c14:	4b0d      	ldr	r3, [pc, #52]	; (4c4c <getSpllConfig+0xac>)
    4c16:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4c18:	4b0d      	ldr	r3, [pc, #52]	; (4c50 <getSpllConfig+0xb0>)
    4c1a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c1e:	0a1b      	lsrs	r3, r3, #8
    4c20:	b2db      	uxtb	r3, r3
    4c22:	f003 0307 	and.w	r3, r3, #7
    4c26:	b2da      	uxtb	r2, r3
    4c28:	4b08      	ldr	r3, [pc, #32]	; (4c4c <getSpllConfig+0xac>)
    4c2a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4c2c:	4b08      	ldr	r3, [pc, #32]	; (4c50 <getSpllConfig+0xb0>)
    4c2e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c32:	0c1b      	lsrs	r3, r3, #16
    4c34:	b2db      	uxtb	r3, r3
    4c36:	f003 031f 	and.w	r3, r3, #31
    4c3a:	b2da      	uxtb	r2, r3
    4c3c:	4b03      	ldr	r3, [pc, #12]	; (4c4c <getSpllConfig+0xac>)
    4c3e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4c40:	9b00      	ldr	r3, [sp, #0]
}
    4c42:	4618      	mov	r0, r3
    4c44:	b002      	add	sp, #8
    4c46:	4770      	bx	lr
    4c48:	1fff8ba0 	.word	0x1fff8ba0
    4c4c:	1fff8c2c 	.word	0x1fff8c2c
    4c50:	40064000 	.word	0x40064000

00004c54 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4c54:	b086      	sub	sp, #24
    4c56:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4c58:	2300      	movs	r3, #0
    4c5a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4c5c:	9b01      	ldr	r3, [sp, #4]
    4c5e:	2b1b      	cmp	r3, #27
    4c60:	d00f      	beq.n	4c82 <getSelectorConfig+0x2e>
    4c62:	9b01      	ldr	r3, [sp, #4]
    4c64:	2b1b      	cmp	r3, #27
    4c66:	d80f      	bhi.n	4c88 <getSelectorConfig+0x34>
    4c68:	9b01      	ldr	r3, [sp, #4]
    4c6a:	2b19      	cmp	r3, #25
    4c6c:	d003      	beq.n	4c76 <getSelectorConfig+0x22>
    4c6e:	9b01      	ldr	r3, [sp, #4]
    4c70:	2b1a      	cmp	r3, #26
    4c72:	d003      	beq.n	4c7c <getSelectorConfig+0x28>
    4c74:	e008      	b.n	4c88 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4c76:	2300      	movs	r3, #0
    4c78:	9304      	str	r3, [sp, #16]
            break;
    4c7a:	e008      	b.n	4c8e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4c7c:	2301      	movs	r3, #1
    4c7e:	9304      	str	r3, [sp, #16]
            break;
    4c80:	e005      	b.n	4c8e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4c82:	2302      	movs	r3, #2
    4c84:	9304      	str	r3, [sp, #16]
            break;
    4c86:	e002      	b.n	4c8e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4c88:	2300      	movs	r3, #0
    4c8a:	9304      	str	r3, [sp, #16]
            break;
    4c8c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4c8e:	4b36      	ldr	r3, [pc, #216]	; (4d68 <getSelectorConfig+0x114>)
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	2b00      	cmp	r3, #0
    4c94:	d01d      	beq.n	4cd2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4c96:	2300      	movs	r3, #0
    4c98:	9303      	str	r3, [sp, #12]
    4c9a:	e013      	b.n	4cc4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4c9c:	4b32      	ldr	r3, [pc, #200]	; (4d68 <getSelectorConfig+0x114>)
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	9a03      	ldr	r2, [sp, #12]
    4ca2:	320d      	adds	r2, #13
    4ca4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4ca8:	9a01      	ldr	r2, [sp, #4]
    4caa:	429a      	cmp	r2, r3
    4cac:	d107      	bne.n	4cbe <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4cae:	4b2e      	ldr	r3, [pc, #184]	; (4d68 <getSelectorConfig+0x114>)
    4cb0:	681a      	ldr	r2, [r3, #0]
    4cb2:	9b03      	ldr	r3, [sp, #12]
    4cb4:	330d      	adds	r3, #13
    4cb6:	00db      	lsls	r3, r3, #3
    4cb8:	4413      	add	r3, r2
    4cba:	9305      	str	r3, [sp, #20]
                break;
    4cbc:	e009      	b.n	4cd2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4cbe:	9b03      	ldr	r3, [sp, #12]
    4cc0:	3301      	adds	r3, #1
    4cc2:	9303      	str	r3, [sp, #12]
    4cc4:	4b28      	ldr	r3, [pc, #160]	; (4d68 <getSelectorConfig+0x114>)
    4cc6:	681b      	ldr	r3, [r3, #0]
    4cc8:	7adb      	ldrb	r3, [r3, #11]
    4cca:	461a      	mov	r2, r3
    4ccc:	9b03      	ldr	r3, [sp, #12]
    4cce:	4293      	cmp	r3, r2
    4cd0:	d3e4      	bcc.n	4c9c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cd2:	9b05      	ldr	r3, [sp, #20]
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d140      	bne.n	4d5a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4cd8:	9b04      	ldr	r3, [sp, #16]
    4cda:	00db      	lsls	r3, r3, #3
    4cdc:	4a23      	ldr	r2, [pc, #140]	; (4d6c <getSelectorConfig+0x118>)
    4cde:	4413      	add	r3, r2
    4ce0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4ce2:	4922      	ldr	r1, [pc, #136]	; (4d6c <getSelectorConfig+0x118>)
    4ce4:	9b04      	ldr	r3, [sp, #16]
    4ce6:	9a01      	ldr	r2, [sp, #4]
    4ce8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4cec:	9b01      	ldr	r3, [sp, #4]
    4cee:	2b1b      	cmp	r3, #27
    4cf0:	d025      	beq.n	4d3e <getSelectorConfig+0xea>
    4cf2:	9b01      	ldr	r3, [sp, #4]
    4cf4:	2b1b      	cmp	r3, #27
    4cf6:	d832      	bhi.n	4d5e <getSelectorConfig+0x10a>
    4cf8:	9b01      	ldr	r3, [sp, #4]
    4cfa:	2b19      	cmp	r3, #25
    4cfc:	d003      	beq.n	4d06 <getSelectorConfig+0xb2>
    4cfe:	9b01      	ldr	r3, [sp, #4]
    4d00:	2b1a      	cmp	r3, #26
    4d02:	d00e      	beq.n	4d22 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d04:	e02b      	b.n	4d5e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d06:	4b1a      	ldr	r3, [pc, #104]	; (4d70 <getSelectorConfig+0x11c>)
    4d08:	695b      	ldr	r3, [r3, #20]
    4d0a:	0e1b      	lsrs	r3, r3, #24
    4d0c:	f003 030f 	and.w	r3, r3, #15
    4d10:	4a18      	ldr	r2, [pc, #96]	; (4d74 <getSelectorConfig+0x120>)
    4d12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d16:	4915      	ldr	r1, [pc, #84]	; (4d6c <getSelectorConfig+0x118>)
    4d18:	9b04      	ldr	r3, [sp, #16]
    4d1a:	00db      	lsls	r3, r3, #3
    4d1c:	440b      	add	r3, r1
    4d1e:	605a      	str	r2, [r3, #4]
                break;
    4d20:	e01e      	b.n	4d60 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d22:	4b13      	ldr	r3, [pc, #76]	; (4d70 <getSelectorConfig+0x11c>)
    4d24:	699b      	ldr	r3, [r3, #24]
    4d26:	0e1b      	lsrs	r3, r3, #24
    4d28:	f003 030f 	and.w	r3, r3, #15
    4d2c:	4a11      	ldr	r2, [pc, #68]	; (4d74 <getSelectorConfig+0x120>)
    4d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d32:	490e      	ldr	r1, [pc, #56]	; (4d6c <getSelectorConfig+0x118>)
    4d34:	9b04      	ldr	r3, [sp, #16]
    4d36:	00db      	lsls	r3, r3, #3
    4d38:	440b      	add	r3, r1
    4d3a:	605a      	str	r2, [r3, #4]
                break;
    4d3c:	e010      	b.n	4d60 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4d3e:	4b0c      	ldr	r3, [pc, #48]	; (4d70 <getSelectorConfig+0x11c>)
    4d40:	69db      	ldr	r3, [r3, #28]
    4d42:	0e1b      	lsrs	r3, r3, #24
    4d44:	f003 030f 	and.w	r3, r3, #15
    4d48:	4a0a      	ldr	r2, [pc, #40]	; (4d74 <getSelectorConfig+0x120>)
    4d4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d4e:	4907      	ldr	r1, [pc, #28]	; (4d6c <getSelectorConfig+0x118>)
    4d50:	9b04      	ldr	r3, [sp, #16]
    4d52:	00db      	lsls	r3, r3, #3
    4d54:	440b      	add	r3, r1
    4d56:	605a      	str	r2, [r3, #4]
                break;
    4d58:	e002      	b.n	4d60 <getSelectorConfig+0x10c>
        }
    }
    4d5a:	bf00      	nop
    4d5c:	e000      	b.n	4d60 <getSelectorConfig+0x10c>
                break;
    4d5e:	bf00      	nop

    return ReturnValue;
    4d60:	9b05      	ldr	r3, [sp, #20]
}
    4d62:	4618      	mov	r0, r3
    4d64:	b006      	add	sp, #24
    4d66:	4770      	bx	lr
    4d68:	1fff8ba0 	.word	0x1fff8ba0
    4d6c:	1fff8c54 	.word	0x1fff8c54
    4d70:	40064000 	.word	0x40064000
    4d74:	00010960 	.word	0x00010960

00004d78 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4d78:	b086      	sub	sp, #24
    4d7a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4d7c:	2300      	movs	r3, #0
    4d7e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4d80:	2300      	movs	r3, #0
    4d82:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4d84:	9b01      	ldr	r3, [sp, #4]
    4d86:	2b1f      	cmp	r3, #31
    4d88:	d00f      	beq.n	4daa <getCoreDividerConfig+0x32>
    4d8a:	9b01      	ldr	r3, [sp, #4]
    4d8c:	2b1f      	cmp	r3, #31
    4d8e:	d80f      	bhi.n	4db0 <getCoreDividerConfig+0x38>
    4d90:	9b01      	ldr	r3, [sp, #4]
    4d92:	2b1d      	cmp	r3, #29
    4d94:	d003      	beq.n	4d9e <getCoreDividerConfig+0x26>
    4d96:	9b01      	ldr	r3, [sp, #4]
    4d98:	2b1e      	cmp	r3, #30
    4d9a:	d003      	beq.n	4da4 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d9c:	e008      	b.n	4db0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4d9e:	2300      	movs	r3, #0
    4da0:	9304      	str	r3, [sp, #16]
            break;
    4da2:	e006      	b.n	4db2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4da4:	2301      	movs	r3, #1
    4da6:	9304      	str	r3, [sp, #16]
            break;
    4da8:	e003      	b.n	4db2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4daa:	2302      	movs	r3, #2
    4dac:	9304      	str	r3, [sp, #16]
            break;
    4dae:	e000      	b.n	4db2 <getCoreDividerConfig+0x3a>
                break;
    4db0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4db2:	4b41      	ldr	r3, [pc, #260]	; (4eb8 <getCoreDividerConfig+0x140>)
    4db4:	681b      	ldr	r3, [r3, #0]
    4db6:	2b00      	cmp	r3, #0
    4db8:	d026      	beq.n	4e08 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4dba:	2300      	movs	r3, #0
    4dbc:	9303      	str	r3, [sp, #12]
    4dbe:	e01c      	b.n	4dfa <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4dc0:	4b3d      	ldr	r3, [pc, #244]	; (4eb8 <getCoreDividerConfig+0x140>)
    4dc2:	6819      	ldr	r1, [r3, #0]
    4dc4:	9a03      	ldr	r2, [sp, #12]
    4dc6:	4613      	mov	r3, r2
    4dc8:	005b      	lsls	r3, r3, #1
    4dca:	4413      	add	r3, r2
    4dcc:	009b      	lsls	r3, r3, #2
    4dce:	440b      	add	r3, r1
    4dd0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	9a01      	ldr	r2, [sp, #4]
    4dd8:	429a      	cmp	r2, r3
    4dda:	d10b      	bne.n	4df4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4ddc:	4b36      	ldr	r3, [pc, #216]	; (4eb8 <getCoreDividerConfig+0x140>)
    4dde:	6819      	ldr	r1, [r3, #0]
    4de0:	9a03      	ldr	r2, [sp, #12]
    4de2:	4613      	mov	r3, r2
    4de4:	005b      	lsls	r3, r3, #1
    4de6:	4413      	add	r3, r2
    4de8:	009b      	lsls	r3, r3, #2
    4dea:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4dee:	440b      	add	r3, r1
    4df0:	9305      	str	r3, [sp, #20]
                break;
    4df2:	e009      	b.n	4e08 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4df4:	9b03      	ldr	r3, [sp, #12]
    4df6:	3301      	adds	r3, #1
    4df8:	9303      	str	r3, [sp, #12]
    4dfa:	4b2f      	ldr	r3, [pc, #188]	; (4eb8 <getCoreDividerConfig+0x140>)
    4dfc:	681b      	ldr	r3, [r3, #0]
    4dfe:	7b1b      	ldrb	r3, [r3, #12]
    4e00:	461a      	mov	r2, r3
    4e02:	9b03      	ldr	r3, [sp, #12]
    4e04:	4293      	cmp	r3, r2
    4e06:	d3db      	bcc.n	4dc0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e08:	9b05      	ldr	r3, [sp, #20]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d14d      	bne.n	4eaa <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4e0e:	9a04      	ldr	r2, [sp, #16]
    4e10:	4613      	mov	r3, r2
    4e12:	005b      	lsls	r3, r3, #1
    4e14:	4413      	add	r3, r2
    4e16:	009b      	lsls	r3, r3, #2
    4e18:	4a28      	ldr	r2, [pc, #160]	; (4ebc <getCoreDividerConfig+0x144>)
    4e1a:	4413      	add	r3, r2
    4e1c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4e1e:	4927      	ldr	r1, [pc, #156]	; (4ebc <getCoreDividerConfig+0x144>)
    4e20:	9a04      	ldr	r2, [sp, #16]
    4e22:	4613      	mov	r3, r2
    4e24:	005b      	lsls	r3, r3, #1
    4e26:	4413      	add	r3, r2
    4e28:	009b      	lsls	r3, r3, #2
    4e2a:	440b      	add	r3, r1
    4e2c:	9a01      	ldr	r2, [sp, #4]
    4e2e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4e30:	9b01      	ldr	r3, [sp, #4]
    4e32:	2b1f      	cmp	r3, #31
    4e34:	d029      	beq.n	4e8a <getCoreDividerConfig+0x112>
    4e36:	9b01      	ldr	r3, [sp, #4]
    4e38:	2b1f      	cmp	r3, #31
    4e3a:	d838      	bhi.n	4eae <getCoreDividerConfig+0x136>
    4e3c:	9b01      	ldr	r3, [sp, #4]
    4e3e:	2b1d      	cmp	r3, #29
    4e40:	d003      	beq.n	4e4a <getCoreDividerConfig+0xd2>
    4e42:	9b01      	ldr	r3, [sp, #4]
    4e44:	2b1e      	cmp	r3, #30
    4e46:	d010      	beq.n	4e6a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e48:	e031      	b.n	4eae <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4e4a:	4b1d      	ldr	r3, [pc, #116]	; (4ec0 <getCoreDividerConfig+0x148>)
    4e4c:	695b      	ldr	r3, [r3, #20]
    4e4e:	0c1b      	lsrs	r3, r3, #16
    4e50:	f003 030f 	and.w	r3, r3, #15
    4e54:	1c59      	adds	r1, r3, #1
    4e56:	4819      	ldr	r0, [pc, #100]	; (4ebc <getCoreDividerConfig+0x144>)
    4e58:	9a04      	ldr	r2, [sp, #16]
    4e5a:	4613      	mov	r3, r2
    4e5c:	005b      	lsls	r3, r3, #1
    4e5e:	4413      	add	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	4403      	add	r3, r0
    4e64:	3304      	adds	r3, #4
    4e66:	6019      	str	r1, [r3, #0]
                break;
    4e68:	e022      	b.n	4eb0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4e6a:	4b15      	ldr	r3, [pc, #84]	; (4ec0 <getCoreDividerConfig+0x148>)
    4e6c:	699b      	ldr	r3, [r3, #24]
    4e6e:	0c1b      	lsrs	r3, r3, #16
    4e70:	f003 030f 	and.w	r3, r3, #15
    4e74:	1c59      	adds	r1, r3, #1
    4e76:	4811      	ldr	r0, [pc, #68]	; (4ebc <getCoreDividerConfig+0x144>)
    4e78:	9a04      	ldr	r2, [sp, #16]
    4e7a:	4613      	mov	r3, r2
    4e7c:	005b      	lsls	r3, r3, #1
    4e7e:	4413      	add	r3, r2
    4e80:	009b      	lsls	r3, r3, #2
    4e82:	4403      	add	r3, r0
    4e84:	3304      	adds	r3, #4
    4e86:	6019      	str	r1, [r3, #0]
                break;
    4e88:	e012      	b.n	4eb0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4e8a:	4b0d      	ldr	r3, [pc, #52]	; (4ec0 <getCoreDividerConfig+0x148>)
    4e8c:	69db      	ldr	r3, [r3, #28]
    4e8e:	0c1b      	lsrs	r3, r3, #16
    4e90:	f003 030f 	and.w	r3, r3, #15
    4e94:	1c59      	adds	r1, r3, #1
    4e96:	4809      	ldr	r0, [pc, #36]	; (4ebc <getCoreDividerConfig+0x144>)
    4e98:	9a04      	ldr	r2, [sp, #16]
    4e9a:	4613      	mov	r3, r2
    4e9c:	005b      	lsls	r3, r3, #1
    4e9e:	4413      	add	r3, r2
    4ea0:	009b      	lsls	r3, r3, #2
    4ea2:	4403      	add	r3, r0
    4ea4:	3304      	adds	r3, #4
    4ea6:	6019      	str	r1, [r3, #0]
                break;
    4ea8:	e002      	b.n	4eb0 <getCoreDividerConfig+0x138>
        }
    }
    4eaa:	bf00      	nop
    4eac:	e000      	b.n	4eb0 <getCoreDividerConfig+0x138>
                break;
    4eae:	bf00      	nop

    return ReturnValue;
    4eb0:	9b05      	ldr	r3, [sp, #20]
}
    4eb2:	4618      	mov	r0, r3
    4eb4:	b006      	add	sp, #24
    4eb6:	4770      	bx	lr
    4eb8:	1fff8ba0 	.word	0x1fff8ba0
    4ebc:	1fff8c6c 	.word	0x1fff8c6c
    4ec0:	40064000 	.word	0x40064000

00004ec4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4ec4:	b086      	sub	sp, #24
    4ec6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4ec8:	2300      	movs	r3, #0
    4eca:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4ecc:	2300      	movs	r3, #0
    4ece:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4ed0:	9b01      	ldr	r3, [sp, #4]
    4ed2:	2b23      	cmp	r3, #35	; 0x23
    4ed4:	d00f      	beq.n	4ef6 <getBusDividerConfig+0x32>
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	2b23      	cmp	r3, #35	; 0x23
    4eda:	d80f      	bhi.n	4efc <getBusDividerConfig+0x38>
    4edc:	9b01      	ldr	r3, [sp, #4]
    4ede:	2b21      	cmp	r3, #33	; 0x21
    4ee0:	d003      	beq.n	4eea <getBusDividerConfig+0x26>
    4ee2:	9b01      	ldr	r3, [sp, #4]
    4ee4:	2b22      	cmp	r3, #34	; 0x22
    4ee6:	d003      	beq.n	4ef0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ee8:	e008      	b.n	4efc <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4eea:	2300      	movs	r3, #0
    4eec:	9304      	str	r3, [sp, #16]
            break;
    4eee:	e006      	b.n	4efe <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ef0:	2301      	movs	r3, #1
    4ef2:	9304      	str	r3, [sp, #16]
            break;
    4ef4:	e003      	b.n	4efe <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4ef6:	2302      	movs	r3, #2
    4ef8:	9304      	str	r3, [sp, #16]
            break;
    4efa:	e000      	b.n	4efe <getBusDividerConfig+0x3a>
                break;
    4efc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4efe:	4b41      	ldr	r3, [pc, #260]	; (5004 <getBusDividerConfig+0x140>)
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d026      	beq.n	4f54 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f06:	2300      	movs	r3, #0
    4f08:	9303      	str	r3, [sp, #12]
    4f0a:	e01c      	b.n	4f46 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f0c:	4b3d      	ldr	r3, [pc, #244]	; (5004 <getBusDividerConfig+0x140>)
    4f0e:	6819      	ldr	r1, [r3, #0]
    4f10:	9a03      	ldr	r2, [sp, #12]
    4f12:	4613      	mov	r3, r2
    4f14:	005b      	lsls	r3, r3, #1
    4f16:	4413      	add	r3, r2
    4f18:	009b      	lsls	r3, r3, #2
    4f1a:	440b      	add	r3, r1
    4f1c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	9a01      	ldr	r2, [sp, #4]
    4f24:	429a      	cmp	r2, r3
    4f26:	d10b      	bne.n	4f40 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4f28:	4b36      	ldr	r3, [pc, #216]	; (5004 <getBusDividerConfig+0x140>)
    4f2a:	6819      	ldr	r1, [r3, #0]
    4f2c:	9a03      	ldr	r2, [sp, #12]
    4f2e:	4613      	mov	r3, r2
    4f30:	005b      	lsls	r3, r3, #1
    4f32:	4413      	add	r3, r2
    4f34:	009b      	lsls	r3, r3, #2
    4f36:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f3a:	440b      	add	r3, r1
    4f3c:	9305      	str	r3, [sp, #20]
                break;
    4f3e:	e009      	b.n	4f54 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f40:	9b03      	ldr	r3, [sp, #12]
    4f42:	3301      	adds	r3, #1
    4f44:	9303      	str	r3, [sp, #12]
    4f46:	4b2f      	ldr	r3, [pc, #188]	; (5004 <getBusDividerConfig+0x140>)
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	7b1b      	ldrb	r3, [r3, #12]
    4f4c:	461a      	mov	r2, r3
    4f4e:	9b03      	ldr	r3, [sp, #12]
    4f50:	4293      	cmp	r3, r2
    4f52:	d3db      	bcc.n	4f0c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f54:	9b05      	ldr	r3, [sp, #20]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d14d      	bne.n	4ff6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4f5a:	9a04      	ldr	r2, [sp, #16]
    4f5c:	4613      	mov	r3, r2
    4f5e:	005b      	lsls	r3, r3, #1
    4f60:	4413      	add	r3, r2
    4f62:	009b      	lsls	r3, r3, #2
    4f64:	4a28      	ldr	r2, [pc, #160]	; (5008 <getBusDividerConfig+0x144>)
    4f66:	4413      	add	r3, r2
    4f68:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4f6a:	4927      	ldr	r1, [pc, #156]	; (5008 <getBusDividerConfig+0x144>)
    4f6c:	9a04      	ldr	r2, [sp, #16]
    4f6e:	4613      	mov	r3, r2
    4f70:	005b      	lsls	r3, r3, #1
    4f72:	4413      	add	r3, r2
    4f74:	009b      	lsls	r3, r3, #2
    4f76:	440b      	add	r3, r1
    4f78:	9a01      	ldr	r2, [sp, #4]
    4f7a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4f7c:	9b01      	ldr	r3, [sp, #4]
    4f7e:	2b23      	cmp	r3, #35	; 0x23
    4f80:	d029      	beq.n	4fd6 <getBusDividerConfig+0x112>
    4f82:	9b01      	ldr	r3, [sp, #4]
    4f84:	2b23      	cmp	r3, #35	; 0x23
    4f86:	d838      	bhi.n	4ffa <getBusDividerConfig+0x136>
    4f88:	9b01      	ldr	r3, [sp, #4]
    4f8a:	2b21      	cmp	r3, #33	; 0x21
    4f8c:	d003      	beq.n	4f96 <getBusDividerConfig+0xd2>
    4f8e:	9b01      	ldr	r3, [sp, #4]
    4f90:	2b22      	cmp	r3, #34	; 0x22
    4f92:	d010      	beq.n	4fb6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f94:	e031      	b.n	4ffa <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4f96:	4b1d      	ldr	r3, [pc, #116]	; (500c <getBusDividerConfig+0x148>)
    4f98:	695b      	ldr	r3, [r3, #20]
    4f9a:	091b      	lsrs	r3, r3, #4
    4f9c:	f003 030f 	and.w	r3, r3, #15
    4fa0:	1c59      	adds	r1, r3, #1
    4fa2:	4819      	ldr	r0, [pc, #100]	; (5008 <getBusDividerConfig+0x144>)
    4fa4:	9a04      	ldr	r2, [sp, #16]
    4fa6:	4613      	mov	r3, r2
    4fa8:	005b      	lsls	r3, r3, #1
    4faa:	4413      	add	r3, r2
    4fac:	009b      	lsls	r3, r3, #2
    4fae:	4403      	add	r3, r0
    4fb0:	3304      	adds	r3, #4
    4fb2:	6019      	str	r1, [r3, #0]
                break;
    4fb4:	e022      	b.n	4ffc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4fb6:	4b15      	ldr	r3, [pc, #84]	; (500c <getBusDividerConfig+0x148>)
    4fb8:	699b      	ldr	r3, [r3, #24]
    4fba:	091b      	lsrs	r3, r3, #4
    4fbc:	f003 030f 	and.w	r3, r3, #15
    4fc0:	1c59      	adds	r1, r3, #1
    4fc2:	4811      	ldr	r0, [pc, #68]	; (5008 <getBusDividerConfig+0x144>)
    4fc4:	9a04      	ldr	r2, [sp, #16]
    4fc6:	4613      	mov	r3, r2
    4fc8:	005b      	lsls	r3, r3, #1
    4fca:	4413      	add	r3, r2
    4fcc:	009b      	lsls	r3, r3, #2
    4fce:	4403      	add	r3, r0
    4fd0:	3304      	adds	r3, #4
    4fd2:	6019      	str	r1, [r3, #0]
                break;
    4fd4:	e012      	b.n	4ffc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4fd6:	4b0d      	ldr	r3, [pc, #52]	; (500c <getBusDividerConfig+0x148>)
    4fd8:	69db      	ldr	r3, [r3, #28]
    4fda:	091b      	lsrs	r3, r3, #4
    4fdc:	f003 030f 	and.w	r3, r3, #15
    4fe0:	1c59      	adds	r1, r3, #1
    4fe2:	4809      	ldr	r0, [pc, #36]	; (5008 <getBusDividerConfig+0x144>)
    4fe4:	9a04      	ldr	r2, [sp, #16]
    4fe6:	4613      	mov	r3, r2
    4fe8:	005b      	lsls	r3, r3, #1
    4fea:	4413      	add	r3, r2
    4fec:	009b      	lsls	r3, r3, #2
    4fee:	4403      	add	r3, r0
    4ff0:	3304      	adds	r3, #4
    4ff2:	6019      	str	r1, [r3, #0]
                break;
    4ff4:	e002      	b.n	4ffc <getBusDividerConfig+0x138>
        }
    }
    4ff6:	bf00      	nop
    4ff8:	e000      	b.n	4ffc <getBusDividerConfig+0x138>
                break;
    4ffa:	bf00      	nop

    return ReturnValue;
    4ffc:	9b05      	ldr	r3, [sp, #20]
}
    4ffe:	4618      	mov	r0, r3
    5000:	b006      	add	sp, #24
    5002:	4770      	bx	lr
    5004:	1fff8ba0 	.word	0x1fff8ba0
    5008:	1fff8c90 	.word	0x1fff8c90
    500c:	40064000 	.word	0x40064000

00005010 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5010:	b086      	sub	sp, #24
    5012:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5014:	2300      	movs	r3, #0
    5016:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5018:	2300      	movs	r3, #0
    501a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	2b27      	cmp	r3, #39	; 0x27
    5020:	d00f      	beq.n	5042 <getSlowDividerConfig+0x32>
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	2b27      	cmp	r3, #39	; 0x27
    5026:	d80f      	bhi.n	5048 <getSlowDividerConfig+0x38>
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	2b25      	cmp	r3, #37	; 0x25
    502c:	d003      	beq.n	5036 <getSlowDividerConfig+0x26>
    502e:	9b01      	ldr	r3, [sp, #4]
    5030:	2b26      	cmp	r3, #38	; 0x26
    5032:	d003      	beq.n	503c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5034:	e008      	b.n	5048 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5036:	2300      	movs	r3, #0
    5038:	9304      	str	r3, [sp, #16]
            break;
    503a:	e006      	b.n	504a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    503c:	2301      	movs	r3, #1
    503e:	9304      	str	r3, [sp, #16]
            break;
    5040:	e003      	b.n	504a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5042:	2302      	movs	r3, #2
    5044:	9304      	str	r3, [sp, #16]
            break;
    5046:	e000      	b.n	504a <getSlowDividerConfig+0x3a>
                break;
    5048:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    504a:	4b40      	ldr	r3, [pc, #256]	; (514c <getSlowDividerConfig+0x13c>)
    504c:	681b      	ldr	r3, [r3, #0]
    504e:	2b00      	cmp	r3, #0
    5050:	d026      	beq.n	50a0 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5052:	2300      	movs	r3, #0
    5054:	9303      	str	r3, [sp, #12]
    5056:	e01c      	b.n	5092 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5058:	4b3c      	ldr	r3, [pc, #240]	; (514c <getSlowDividerConfig+0x13c>)
    505a:	6819      	ldr	r1, [r3, #0]
    505c:	9a03      	ldr	r2, [sp, #12]
    505e:	4613      	mov	r3, r2
    5060:	005b      	lsls	r3, r3, #1
    5062:	4413      	add	r3, r2
    5064:	009b      	lsls	r3, r3, #2
    5066:	440b      	add	r3, r1
    5068:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    506c:	681b      	ldr	r3, [r3, #0]
    506e:	9a01      	ldr	r2, [sp, #4]
    5070:	429a      	cmp	r2, r3
    5072:	d10b      	bne.n	508c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5074:	4b35      	ldr	r3, [pc, #212]	; (514c <getSlowDividerConfig+0x13c>)
    5076:	6819      	ldr	r1, [r3, #0]
    5078:	9a03      	ldr	r2, [sp, #12]
    507a:	4613      	mov	r3, r2
    507c:	005b      	lsls	r3, r3, #1
    507e:	4413      	add	r3, r2
    5080:	009b      	lsls	r3, r3, #2
    5082:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5086:	440b      	add	r3, r1
    5088:	9305      	str	r3, [sp, #20]
                break;
    508a:	e009      	b.n	50a0 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    508c:	9b03      	ldr	r3, [sp, #12]
    508e:	3301      	adds	r3, #1
    5090:	9303      	str	r3, [sp, #12]
    5092:	4b2e      	ldr	r3, [pc, #184]	; (514c <getSlowDividerConfig+0x13c>)
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	7b1b      	ldrb	r3, [r3, #12]
    5098:	461a      	mov	r2, r3
    509a:	9b03      	ldr	r3, [sp, #12]
    509c:	4293      	cmp	r3, r2
    509e:	d3db      	bcc.n	5058 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50a0:	9b05      	ldr	r3, [sp, #20]
    50a2:	2b00      	cmp	r3, #0
    50a4:	d14a      	bne.n	513c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    50a6:	9a04      	ldr	r2, [sp, #16]
    50a8:	4613      	mov	r3, r2
    50aa:	005b      	lsls	r3, r3, #1
    50ac:	4413      	add	r3, r2
    50ae:	009b      	lsls	r3, r3, #2
    50b0:	4a27      	ldr	r2, [pc, #156]	; (5150 <getSlowDividerConfig+0x140>)
    50b2:	4413      	add	r3, r2
    50b4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    50b6:	4926      	ldr	r1, [pc, #152]	; (5150 <getSlowDividerConfig+0x140>)
    50b8:	9a04      	ldr	r2, [sp, #16]
    50ba:	4613      	mov	r3, r2
    50bc:	005b      	lsls	r3, r3, #1
    50be:	4413      	add	r3, r2
    50c0:	009b      	lsls	r3, r3, #2
    50c2:	440b      	add	r3, r1
    50c4:	9a01      	ldr	r2, [sp, #4]
    50c6:	601a      	str	r2, [r3, #0]
        switch(Name)
    50c8:	9b01      	ldr	r3, [sp, #4]
    50ca:	2b27      	cmp	r3, #39	; 0x27
    50cc:	d027      	beq.n	511e <getSlowDividerConfig+0x10e>
    50ce:	9b01      	ldr	r3, [sp, #4]
    50d0:	2b27      	cmp	r3, #39	; 0x27
    50d2:	d835      	bhi.n	5140 <getSlowDividerConfig+0x130>
    50d4:	9b01      	ldr	r3, [sp, #4]
    50d6:	2b25      	cmp	r3, #37	; 0x25
    50d8:	d003      	beq.n	50e2 <getSlowDividerConfig+0xd2>
    50da:	9b01      	ldr	r3, [sp, #4]
    50dc:	2b26      	cmp	r3, #38	; 0x26
    50de:	d00f      	beq.n	5100 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50e0:	e02e      	b.n	5140 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    50e2:	4b1c      	ldr	r3, [pc, #112]	; (5154 <getSlowDividerConfig+0x144>)
    50e4:	695b      	ldr	r3, [r3, #20]
    50e6:	f003 030f 	and.w	r3, r3, #15
    50ea:	1c59      	adds	r1, r3, #1
    50ec:	4818      	ldr	r0, [pc, #96]	; (5150 <getSlowDividerConfig+0x140>)
    50ee:	9a04      	ldr	r2, [sp, #16]
    50f0:	4613      	mov	r3, r2
    50f2:	005b      	lsls	r3, r3, #1
    50f4:	4413      	add	r3, r2
    50f6:	009b      	lsls	r3, r3, #2
    50f8:	4403      	add	r3, r0
    50fa:	3304      	adds	r3, #4
    50fc:	6019      	str	r1, [r3, #0]
                break;
    50fe:	e020      	b.n	5142 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5100:	4b14      	ldr	r3, [pc, #80]	; (5154 <getSlowDividerConfig+0x144>)
    5102:	699b      	ldr	r3, [r3, #24]
    5104:	f003 030f 	and.w	r3, r3, #15
    5108:	1c59      	adds	r1, r3, #1
    510a:	4811      	ldr	r0, [pc, #68]	; (5150 <getSlowDividerConfig+0x140>)
    510c:	9a04      	ldr	r2, [sp, #16]
    510e:	4613      	mov	r3, r2
    5110:	005b      	lsls	r3, r3, #1
    5112:	4413      	add	r3, r2
    5114:	009b      	lsls	r3, r3, #2
    5116:	4403      	add	r3, r0
    5118:	3304      	adds	r3, #4
    511a:	6019      	str	r1, [r3, #0]
                break;
    511c:	e011      	b.n	5142 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    511e:	4b0d      	ldr	r3, [pc, #52]	; (5154 <getSlowDividerConfig+0x144>)
    5120:	69db      	ldr	r3, [r3, #28]
    5122:	f003 030f 	and.w	r3, r3, #15
    5126:	1c59      	adds	r1, r3, #1
    5128:	4809      	ldr	r0, [pc, #36]	; (5150 <getSlowDividerConfig+0x140>)
    512a:	9a04      	ldr	r2, [sp, #16]
    512c:	4613      	mov	r3, r2
    512e:	005b      	lsls	r3, r3, #1
    5130:	4413      	add	r3, r2
    5132:	009b      	lsls	r3, r3, #2
    5134:	4403      	add	r3, r0
    5136:	3304      	adds	r3, #4
    5138:	6019      	str	r1, [r3, #0]
                break;
    513a:	e002      	b.n	5142 <getSlowDividerConfig+0x132>
        }
    }
    513c:	bf00      	nop
    513e:	e000      	b.n	5142 <getSlowDividerConfig+0x132>
                break;
    5140:	bf00      	nop

    return ReturnValue;
    5142:	9b05      	ldr	r3, [sp, #20]
}
    5144:	4618      	mov	r0, r3
    5146:	b006      	add	sp, #24
    5148:	4770      	bx	lr
    514a:	bf00      	nop
    514c:	1fff8ba0 	.word	0x1fff8ba0
    5150:	1fff8cb4 	.word	0x1fff8cb4
    5154:	40064000 	.word	0x40064000

00005158 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5158:	b500      	push	{lr}
    515a:	b083      	sub	sp, #12
    515c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    515e:	4b64      	ldr	r3, [pc, #400]	; (52f0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5160:	781b      	ldrb	r3, [r3, #0]
    5162:	f083 0301 	eor.w	r3, r3, #1
    5166:	b2db      	uxtb	r3, r3
    5168:	2b00      	cmp	r3, #0
    516a:	d05b      	beq.n	5224 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    516c:	4b60      	ldr	r3, [pc, #384]	; (52f0 <Clock_Ip_ClockInitializeObjects+0x198>)
    516e:	2201      	movs	r2, #1
    5170:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5172:	4b60      	ldr	r3, [pc, #384]	; (52f4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5174:	785b      	ldrb	r3, [r3, #1]
    5176:	461a      	mov	r2, r3
    5178:	4613      	mov	r3, r2
    517a:	009b      	lsls	r3, r3, #2
    517c:	4413      	add	r3, r2
    517e:	009b      	lsls	r3, r3, #2
    5180:	4a5d      	ldr	r2, [pc, #372]	; (52f8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5182:	4413      	add	r3, r2
    5184:	4a5d      	ldr	r2, [pc, #372]	; (52fc <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5186:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5188:	4b5d      	ldr	r3, [pc, #372]	; (5300 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    518a:	785b      	ldrb	r3, [r3, #1]
    518c:	461a      	mov	r2, r3
    518e:	4613      	mov	r3, r2
    5190:	009b      	lsls	r3, r3, #2
    5192:	4413      	add	r3, r2
    5194:	009b      	lsls	r3, r3, #2
    5196:	4a5b      	ldr	r2, [pc, #364]	; (5304 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5198:	4413      	add	r3, r2
    519a:	4a5b      	ldr	r2, [pc, #364]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    519c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    519e:	4b5b      	ldr	r3, [pc, #364]	; (530c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    51a0:	791b      	ldrb	r3, [r3, #4]
    51a2:	461a      	mov	r2, r3
    51a4:	4613      	mov	r3, r2
    51a6:	005b      	lsls	r3, r3, #1
    51a8:	4413      	add	r3, r2
    51aa:	009b      	lsls	r3, r3, #2
    51ac:	4a58      	ldr	r2, [pc, #352]	; (5310 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    51ae:	4413      	add	r3, r2
    51b0:	4a58      	ldr	r2, [pc, #352]	; (5314 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    51b2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    51b4:	4b58      	ldr	r3, [pc, #352]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51b6:	795b      	ldrb	r3, [r3, #5]
    51b8:	00db      	lsls	r3, r3, #3
    51ba:	4a58      	ldr	r2, [pc, #352]	; (531c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51bc:	4413      	add	r3, r2
    51be:	4a58      	ldr	r2, [pc, #352]	; (5320 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    51c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    51c2:	4b55      	ldr	r3, [pc, #340]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51c4:	79db      	ldrb	r3, [r3, #7]
    51c6:	00db      	lsls	r3, r3, #3
    51c8:	4a54      	ldr	r2, [pc, #336]	; (531c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51ca:	4413      	add	r3, r2
    51cc:	4a55      	ldr	r2, [pc, #340]	; (5324 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    51ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    51d0:	4b55      	ldr	r3, [pc, #340]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51d2:	799b      	ldrb	r3, [r3, #6]
    51d4:	009b      	lsls	r3, r3, #2
    51d6:	4a55      	ldr	r2, [pc, #340]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51d8:	4413      	add	r3, r2
    51da:	4a55      	ldr	r2, [pc, #340]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    51dc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    51de:	4b52      	ldr	r3, [pc, #328]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51e0:	7a1b      	ldrb	r3, [r3, #8]
    51e2:	009b      	lsls	r3, r3, #2
    51e4:	4a51      	ldr	r2, [pc, #324]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51e6:	4413      	add	r3, r2
    51e8:	4a52      	ldr	r2, [pc, #328]	; (5334 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    51ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    51ec:	4b4e      	ldr	r3, [pc, #312]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51ee:	7a5b      	ldrb	r3, [r3, #9]
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	4a4e      	ldr	r2, [pc, #312]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51f4:	4413      	add	r3, r2
    51f6:	4a50      	ldr	r2, [pc, #320]	; (5338 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    51f8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    51fa:	4b4b      	ldr	r3, [pc, #300]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51fc:	7adb      	ldrb	r3, [r3, #11]
    51fe:	009b      	lsls	r3, r3, #2
    5200:	4a4a      	ldr	r2, [pc, #296]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5202:	4413      	add	r3, r2
    5204:	4a4d      	ldr	r2, [pc, #308]	; (533c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5206:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5208:	4b47      	ldr	r3, [pc, #284]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    520a:	7b1b      	ldrb	r3, [r3, #12]
    520c:	009b      	lsls	r3, r3, #2
    520e:	4a47      	ldr	r2, [pc, #284]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5210:	4413      	add	r3, r2
    5212:	4a4b      	ldr	r2, [pc, #300]	; (5340 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5214:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5216:	4b44      	ldr	r3, [pc, #272]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5218:	7b9b      	ldrb	r3, [r3, #14]
    521a:	009b      	lsls	r3, r3, #2
    521c:	4a43      	ldr	r2, [pc, #268]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    521e:	4413      	add	r3, r2
    5220:	4a48      	ldr	r2, [pc, #288]	; (5344 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5222:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5224:	4b48      	ldr	r3, [pc, #288]	; (5348 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5226:	781b      	ldrb	r3, [r3, #0]
    5228:	2b00      	cmp	r3, #0
    522a:	d002      	beq.n	5232 <Clock_Ip_ClockInitializeObjects+0xda>
    522c:	9b01      	ldr	r3, [sp, #4]
    522e:	2b00      	cmp	r3, #0
    5230:	d003      	beq.n	523a <Clock_Ip_ClockInitializeObjects+0xe2>
    5232:	4b46      	ldr	r3, [pc, #280]	; (534c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5234:	781b      	ldrb	r3, [r3, #0]
    5236:	2b00      	cmp	r3, #0
    5238:	d056      	beq.n	52e8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    523a:	f7ff fc09 	bl	4a50 <getFircConfig>
    523e:	4603      	mov	r3, r0
    5240:	4a43      	ldr	r2, [pc, #268]	; (5350 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5242:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5244:	f7ff fc60 	bl	4b08 <getSoscConfig>
    5248:	4603      	mov	r3, r0
    524a:	4a42      	ldr	r2, [pc, #264]	; (5354 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    524c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    524e:	f7ff fca7 	bl	4ba0 <getSpllConfig>
    5252:	4603      	mov	r3, r0
    5254:	4a40      	ldr	r2, [pc, #256]	; (5358 <Clock_Ip_ClockInitializeObjects+0x200>)
    5256:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5258:	2019      	movs	r0, #25
    525a:	f7ff fcfb 	bl	4c54 <getSelectorConfig>
    525e:	4603      	mov	r3, r0
    5260:	4a3e      	ldr	r2, [pc, #248]	; (535c <Clock_Ip_ClockInitializeObjects+0x204>)
    5262:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5264:	201a      	movs	r0, #26
    5266:	f7ff fcf5 	bl	4c54 <getSelectorConfig>
    526a:	4603      	mov	r3, r0
    526c:	4a3c      	ldr	r2, [pc, #240]	; (5360 <Clock_Ip_ClockInitializeObjects+0x208>)
    526e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5270:	201b      	movs	r0, #27
    5272:	f7ff fcef 	bl	4c54 <getSelectorConfig>
    5276:	4603      	mov	r3, r0
    5278:	4a3a      	ldr	r2, [pc, #232]	; (5364 <Clock_Ip_ClockInitializeObjects+0x20c>)
    527a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    527c:	201d      	movs	r0, #29
    527e:	f7ff fd7b 	bl	4d78 <getCoreDividerConfig>
    5282:	4603      	mov	r3, r0
    5284:	4a38      	ldr	r2, [pc, #224]	; (5368 <Clock_Ip_ClockInitializeObjects+0x210>)
    5286:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5288:	201e      	movs	r0, #30
    528a:	f7ff fd75 	bl	4d78 <getCoreDividerConfig>
    528e:	4603      	mov	r3, r0
    5290:	4a36      	ldr	r2, [pc, #216]	; (536c <Clock_Ip_ClockInitializeObjects+0x214>)
    5292:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5294:	201f      	movs	r0, #31
    5296:	f7ff fd6f 	bl	4d78 <getCoreDividerConfig>
    529a:	4603      	mov	r3, r0
    529c:	4a34      	ldr	r2, [pc, #208]	; (5370 <Clock_Ip_ClockInitializeObjects+0x218>)
    529e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    52a0:	2021      	movs	r0, #33	; 0x21
    52a2:	f7ff fe0f 	bl	4ec4 <getBusDividerConfig>
    52a6:	4603      	mov	r3, r0
    52a8:	4a32      	ldr	r2, [pc, #200]	; (5374 <Clock_Ip_ClockInitializeObjects+0x21c>)
    52aa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    52ac:	2022      	movs	r0, #34	; 0x22
    52ae:	f7ff fe09 	bl	4ec4 <getBusDividerConfig>
    52b2:	4603      	mov	r3, r0
    52b4:	4a30      	ldr	r2, [pc, #192]	; (5378 <Clock_Ip_ClockInitializeObjects+0x220>)
    52b6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    52b8:	2023      	movs	r0, #35	; 0x23
    52ba:	f7ff fe03 	bl	4ec4 <getBusDividerConfig>
    52be:	4603      	mov	r3, r0
    52c0:	4a2e      	ldr	r2, [pc, #184]	; (537c <Clock_Ip_ClockInitializeObjects+0x224>)
    52c2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    52c4:	2025      	movs	r0, #37	; 0x25
    52c6:	f7ff fea3 	bl	5010 <getSlowDividerConfig>
    52ca:	4603      	mov	r3, r0
    52cc:	4a2c      	ldr	r2, [pc, #176]	; (5380 <Clock_Ip_ClockInitializeObjects+0x228>)
    52ce:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    52d0:	2026      	movs	r0, #38	; 0x26
    52d2:	f7ff fe9d 	bl	5010 <getSlowDividerConfig>
    52d6:	4603      	mov	r3, r0
    52d8:	4a2a      	ldr	r2, [pc, #168]	; (5384 <Clock_Ip_ClockInitializeObjects+0x22c>)
    52da:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    52dc:	2027      	movs	r0, #39	; 0x27
    52de:	f7ff fe97 	bl	5010 <getSlowDividerConfig>
    52e2:	4603      	mov	r3, r0
    52e4:	4a28      	ldr	r2, [pc, #160]	; (5388 <Clock_Ip_ClockInitializeObjects+0x230>)
    52e6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    52e8:	bf00      	nop
    52ea:	b003      	add	sp, #12
    52ec:	f85d fb04 	ldr.w	pc, [sp], #4
    52f0:	1fff8cd8 	.word	0x1fff8cd8
    52f4:	00010290 	.word	0x00010290
    52f8:	000108dc 	.word	0x000108dc
    52fc:	1fff8ba4 	.word	0x1fff8ba4
    5300:	00010250 	.word	0x00010250
    5304:	00010824 	.word	0x00010824
    5308:	1fff8ba8 	.word	0x1fff8ba8
    530c:	00010260 	.word	0x00010260
    5310:	00010890 	.word	0x00010890
    5314:	1fff8bac 	.word	0x1fff8bac
    5318:	000102a0 	.word	0x000102a0
    531c:	00010908 	.word	0x00010908
    5320:	1fff8bb0 	.word	0x1fff8bb0
    5324:	1fff8bec 	.word	0x1fff8bec
    5328:	00010230 	.word	0x00010230
    532c:	000107e0 	.word	0x000107e0
    5330:	1fff8bb4 	.word	0x1fff8bb4
    5334:	1fff8bf0 	.word	0x1fff8bf0
    5338:	1fff8bb8 	.word	0x1fff8bb8
    533c:	1fff8bf4 	.word	0x1fff8bf4
    5340:	1fff8bbc 	.word	0x1fff8bbc
    5344:	1fff8bf8 	.word	0x1fff8bf8
    5348:	1fff8b19 	.word	0x1fff8b19
    534c:	1fff8b10 	.word	0x1fff8b10
    5350:	1fff8bc0 	.word	0x1fff8bc0
    5354:	1fff8bc4 	.word	0x1fff8bc4
    5358:	1fff8bc8 	.word	0x1fff8bc8
    535c:	1fff8bcc 	.word	0x1fff8bcc
    5360:	1fff8bd0 	.word	0x1fff8bd0
    5364:	1fff8bfc 	.word	0x1fff8bfc
    5368:	1fff8bd4 	.word	0x1fff8bd4
    536c:	1fff8bd8 	.word	0x1fff8bd8
    5370:	1fff8c00 	.word	0x1fff8c00
    5374:	1fff8bdc 	.word	0x1fff8bdc
    5378:	1fff8be0 	.word	0x1fff8be0
    537c:	1fff8c04 	.word	0x1fff8c04
    5380:	1fff8be4 	.word	0x1fff8be4
    5384:	1fff8be8 	.word	0x1fff8be8
    5388:	1fff8c08 	.word	0x1fff8c08

0000538c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    538c:	b500      	push	{lr}
    538e:	b083      	sub	sp, #12
    5390:	9001      	str	r0, [sp, #4]
    5392:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5394:	9b01      	ldr	r3, [sp, #4]
    5396:	2b03      	cmp	r3, #3
    5398:	f000 8090 	beq.w	54bc <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	2b03      	cmp	r3, #3
    53a0:	f200 80d3 	bhi.w	554a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d040      	beq.n	542c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    53aa:	9b01      	ldr	r3, [sp, #4]
    53ac:	3b01      	subs	r3, #1
    53ae:	2b01      	cmp	r3, #1
    53b0:	f200 80cb 	bhi.w	554a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    53b4:	9b00      	ldr	r3, [sp, #0]
    53b6:	2b00      	cmp	r3, #0
    53b8:	f040 80c9 	bne.w	554e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    53bc:	4b68      	ldr	r3, [pc, #416]	; (5560 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    53be:	2200      	movs	r2, #0
    53c0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    53c2:	4b68      	ldr	r3, [pc, #416]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	685b      	ldr	r3, [r3, #4]
    53c8:	4a67      	ldr	r2, [pc, #412]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    53ca:	6812      	ldr	r2, [r2, #0]
    53cc:	4610      	mov	r0, r2
    53ce:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    53d0:	4b66      	ldr	r3, [pc, #408]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	681b      	ldr	r3, [r3, #0]
    53d6:	4a66      	ldr	r2, [pc, #408]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    53d8:	6812      	ldr	r2, [r2, #0]
    53da:	4610      	mov	r0, r2
    53dc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    53de:	4b65      	ldr	r3, [pc, #404]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	681b      	ldr	r3, [r3, #0]
    53e4:	4a64      	ldr	r2, [pc, #400]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    53e6:	6812      	ldr	r2, [r2, #0]
    53e8:	4610      	mov	r0, r2
    53ea:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    53ec:	4b63      	ldr	r3, [pc, #396]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	4a63      	ldr	r2, [pc, #396]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    53f4:	6812      	ldr	r2, [r2, #0]
    53f6:	4610      	mov	r0, r2
    53f8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    53fa:	4b62      	ldr	r3, [pc, #392]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	691b      	ldr	r3, [r3, #16]
    5400:	4a61      	ldr	r2, [pc, #388]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5402:	6812      	ldr	r2, [r2, #0]
    5404:	6812      	ldr	r2, [r2, #0]
    5406:	4610      	mov	r0, r2
    5408:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    540a:	4b60      	ldr	r3, [pc, #384]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	68db      	ldr	r3, [r3, #12]
    5410:	4a5f      	ldr	r2, [pc, #380]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5412:	6812      	ldr	r2, [r2, #0]
    5414:	6812      	ldr	r2, [r2, #0]
    5416:	4610      	mov	r0, r2
    5418:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    541a:	4b5e      	ldr	r3, [pc, #376]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	689b      	ldr	r3, [r3, #8]
    5420:	4a5d      	ldr	r2, [pc, #372]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5422:	6812      	ldr	r2, [r2, #0]
    5424:	6812      	ldr	r2, [r2, #0]
    5426:	4610      	mov	r0, r2
    5428:	4798      	blx	r3
            }
        }
        break;
    542a:	e090      	b.n	554e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    542c:	9b00      	ldr	r3, [sp, #0]
    542e:	2b02      	cmp	r3, #2
    5430:	f040 808f 	bne.w	5552 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5434:	4b4a      	ldr	r3, [pc, #296]	; (5560 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5436:	2201      	movs	r2, #1
    5438:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    543a:	4b56      	ldr	r3, [pc, #344]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	685b      	ldr	r3, [r3, #4]
    5440:	4a55      	ldr	r2, [pc, #340]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5442:	6812      	ldr	r2, [r2, #0]
    5444:	4610      	mov	r0, r2
    5446:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5448:	4b50      	ldr	r3, [pc, #320]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	691b      	ldr	r3, [r3, #16]
    544e:	4a50      	ldr	r2, [pc, #320]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5450:	6812      	ldr	r2, [r2, #0]
    5452:	4610      	mov	r0, r2
    5454:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5456:	4b4d      	ldr	r3, [pc, #308]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	689b      	ldr	r3, [r3, #8]
    545c:	4a4c      	ldr	r2, [pc, #304]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    545e:	6812      	ldr	r2, [r2, #0]
    5460:	4610      	mov	r0, r2
    5462:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5464:	4b47      	ldr	r3, [pc, #284]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	68db      	ldr	r3, [r3, #12]
    546a:	4a47      	ldr	r2, [pc, #284]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    546c:	6812      	ldr	r2, [r2, #0]
    546e:	4610      	mov	r0, r2
    5470:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5472:	4b44      	ldr	r3, [pc, #272]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	689b      	ldr	r3, [r3, #8]
    5478:	4a43      	ldr	r2, [pc, #268]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    547a:	6812      	ldr	r2, [r2, #0]
    547c:	6812      	ldr	r2, [r2, #0]
    547e:	4610      	mov	r0, r2
    5480:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5482:	4b38      	ldr	r3, [pc, #224]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	685b      	ldr	r3, [r3, #4]
    5488:	4a44      	ldr	r2, [pc, #272]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    548a:	6812      	ldr	r2, [r2, #0]
    548c:	4610      	mov	r0, r2
    548e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5490:	4b36      	ldr	r3, [pc, #216]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	4a42      	ldr	r2, [pc, #264]	; (55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5498:	6812      	ldr	r2, [r2, #0]
    549a:	4610      	mov	r0, r2
    549c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    549e:	4b35      	ldr	r3, [pc, #212]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	4a3f      	ldr	r2, [pc, #252]	; (55a4 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    54a6:	6812      	ldr	r2, [r2, #0]
    54a8:	4610      	mov	r0, r2
    54aa:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    54ac:	4b33      	ldr	r3, [pc, #204]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	4a3d      	ldr	r2, [pc, #244]	; (55a8 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    54b4:	6812      	ldr	r2, [r2, #0]
    54b6:	4610      	mov	r0, r2
    54b8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    54ba:	e04a      	b.n	5552 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54bc:	9b00      	ldr	r3, [sp, #0]
    54be:	2b02      	cmp	r3, #2
    54c0:	d149      	bne.n	5556 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54c2:	4b27      	ldr	r3, [pc, #156]	; (5560 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54c4:	2201      	movs	r2, #1
    54c6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54c8:	4b32      	ldr	r3, [pc, #200]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54ca:	681b      	ldr	r3, [r3, #0]
    54cc:	685b      	ldr	r3, [r3, #4]
    54ce:	4a32      	ldr	r2, [pc, #200]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54d0:	6812      	ldr	r2, [r2, #0]
    54d2:	4610      	mov	r0, r2
    54d4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54d6:	4b2d      	ldr	r3, [pc, #180]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54d8:	681b      	ldr	r3, [r3, #0]
    54da:	691b      	ldr	r3, [r3, #16]
    54dc:	4a2c      	ldr	r2, [pc, #176]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54de:	6812      	ldr	r2, [r2, #0]
    54e0:	4610      	mov	r0, r2
    54e2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54e4:	4b29      	ldr	r3, [pc, #164]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	689b      	ldr	r3, [r3, #8]
    54ea:	4a29      	ldr	r2, [pc, #164]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54ec:	6812      	ldr	r2, [r2, #0]
    54ee:	4610      	mov	r0, r2
    54f0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54f2:	4b24      	ldr	r3, [pc, #144]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54f4:	681b      	ldr	r3, [r3, #0]
    54f6:	68db      	ldr	r3, [r3, #12]
    54f8:	4a23      	ldr	r2, [pc, #140]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54fa:	6812      	ldr	r2, [r2, #0]
    54fc:	4610      	mov	r0, r2
    54fe:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5500:	4b20      	ldr	r3, [pc, #128]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	689b      	ldr	r3, [r3, #8]
    5506:	4a20      	ldr	r2, [pc, #128]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	6812      	ldr	r2, [r2, #0]
    550c:	4610      	mov	r0, r2
    550e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5510:	4b26      	ldr	r3, [pc, #152]	; (55ac <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	685b      	ldr	r3, [r3, #4]
    5516:	4a26      	ldr	r2, [pc, #152]	; (55b0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5518:	6812      	ldr	r2, [r2, #0]
    551a:	4610      	mov	r0, r2
    551c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    551e:	4b25      	ldr	r3, [pc, #148]	; (55b4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	681b      	ldr	r3, [r3, #0]
    5524:	4a24      	ldr	r2, [pc, #144]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5526:	6812      	ldr	r2, [r2, #0]
    5528:	4610      	mov	r0, r2
    552a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    552c:	4b23      	ldr	r3, [pc, #140]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	4a23      	ldr	r2, [pc, #140]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5534:	6812      	ldr	r2, [r2, #0]
    5536:	4610      	mov	r0, r2
    5538:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    553a:	4b22      	ldr	r3, [pc, #136]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	4a21      	ldr	r2, [pc, #132]	; (55c8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5542:	6812      	ldr	r2, [r2, #0]
    5544:	4610      	mov	r0, r2
    5546:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5548:	e005      	b.n	5556 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    554a:	bf00      	nop
    554c:	e004      	b.n	5558 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    554e:	bf00      	nop
    5550:	e002      	b.n	5558 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5552:	bf00      	nop
    5554:	e000      	b.n	5558 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5556:	bf00      	nop
    }

}
    5558:	bf00      	nop
    555a:	b003      	add	sp, #12
    555c:	f85d fb04 	ldr.w	pc, [sp], #4
    5560:	1fff8b19 	.word	0x1fff8b19
    5564:	1fff8bb0 	.word	0x1fff8bb0
    5568:	1fff8bd0 	.word	0x1fff8bd0
    556c:	1fff8bb4 	.word	0x1fff8bb4
    5570:	1fff8bd8 	.word	0x1fff8bd8
    5574:	1fff8bb8 	.word	0x1fff8bb8
    5578:	1fff8be0 	.word	0x1fff8be0
    557c:	1fff8bbc 	.word	0x1fff8bbc
    5580:	1fff8be8 	.word	0x1fff8be8
    5584:	1fff8ba4 	.word	0x1fff8ba4
    5588:	1fff8bc8 	.word	0x1fff8bc8
    558c:	1fff8ba8 	.word	0x1fff8ba8
    5590:	1fff8bc4 	.word	0x1fff8bc4
    5594:	1fff8bac 	.word	0x1fff8bac
    5598:	1fff8bc0 	.word	0x1fff8bc0
    559c:	1fff8bcc 	.word	0x1fff8bcc
    55a0:	1fff8bd4 	.word	0x1fff8bd4
    55a4:	1fff8bdc 	.word	0x1fff8bdc
    55a8:	1fff8be4 	.word	0x1fff8be4
    55ac:	1fff8bec 	.word	0x1fff8bec
    55b0:	1fff8bfc 	.word	0x1fff8bfc
    55b4:	1fff8bf0 	.word	0x1fff8bf0
    55b8:	1fff8c00 	.word	0x1fff8c00
    55bc:	1fff8bf4 	.word	0x1fff8bf4
    55c0:	1fff8c04 	.word	0x1fff8c04
    55c4:	1fff8bf8 	.word	0x1fff8bf8
    55c8:	1fff8c08 	.word	0x1fff8c08

000055cc <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    55cc:	b500      	push	{lr}
    55ce:	b083      	sub	sp, #12
    55d0:	9001      	str	r0, [sp, #4]
    55d2:	9100      	str	r1, [sp, #0]
    switch(Command)
    55d4:	9b00      	ldr	r3, [sp, #0]
    55d6:	2b04      	cmp	r3, #4
    55d8:	d010      	beq.n	55fc <Clock_Ip_Command+0x30>
    55da:	9b00      	ldr	r3, [sp, #0]
    55dc:	2b04      	cmp	r3, #4
    55de:	d811      	bhi.n	5604 <Clock_Ip_Command+0x38>
    55e0:	9b00      	ldr	r3, [sp, #0]
    55e2:	2b01      	cmp	r3, #1
    55e4:	d006      	beq.n	55f4 <Clock_Ip_Command+0x28>
    55e6:	9b00      	ldr	r3, [sp, #0]
    55e8:	2b02      	cmp	r3, #2
    55ea:	d10b      	bne.n	5604 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    55ec:	9801      	ldr	r0, [sp, #4]
    55ee:	f7ff fdb3 	bl	5158 <Clock_Ip_ClockInitializeObjects>
            break;
    55f2:	e008      	b.n	5606 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    55f4:	9801      	ldr	r0, [sp, #4]
    55f6:	f7ff f9db 	bl	49b0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    55fa:	e004      	b.n	5606 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    55fc:	9801      	ldr	r0, [sp, #4]
    55fe:	f7ff f8ed 	bl	47dc <DisableSafeClock>
            break;
    5602:	e000      	b.n	5606 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5604:	bf00      	nop
    }
}
    5606:	bf00      	nop
    5608:	b003      	add	sp, #12
    560a:	f85d fb04 	ldr.w	pc, [sp], #4
    560e:	bf00      	nop

00005610 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5610:	b500      	push	{lr}
    5612:	b085      	sub	sp, #20
    5614:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5616:	4a20      	ldr	r2, [pc, #128]	; (5698 <Mcu_Init+0x88>)
    5618:	9b01      	ldr	r3, [sp, #4]
    561a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    561c:	2300      	movs	r3, #0
    561e:	9303      	str	r3, [sp, #12]
    5620:	e010      	b.n	5644 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5622:	4b1d      	ldr	r3, [pc, #116]	; (5698 <Mcu_Init+0x88>)
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	6919      	ldr	r1, [r3, #16]
    5628:	9a03      	ldr	r2, [sp, #12]
    562a:	4613      	mov	r3, r2
    562c:	005b      	lsls	r3, r3, #1
    562e:	4413      	add	r3, r2
    5630:	009b      	lsls	r3, r3, #2
    5632:	440b      	add	r3, r1
    5634:	681b      	ldr	r3, [r3, #0]
    5636:	9a03      	ldr	r2, [sp, #12]
    5638:	b2d1      	uxtb	r1, r2
    563a:	4a18      	ldr	r2, [pc, #96]	; (569c <Mcu_Init+0x8c>)
    563c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    563e:	9b03      	ldr	r3, [sp, #12]
    5640:	3301      	adds	r3, #1
    5642:	9303      	str	r3, [sp, #12]
    5644:	4b14      	ldr	r3, [pc, #80]	; (5698 <Mcu_Init+0x88>)
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	689b      	ldr	r3, [r3, #8]
    564a:	9a03      	ldr	r2, [sp, #12]
    564c:	429a      	cmp	r2, r3
    564e:	d3e8      	bcc.n	5622 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5650:	2300      	movs	r3, #0
    5652:	9303      	str	r3, [sp, #12]
    5654:	e010      	b.n	5678 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5656:	4b10      	ldr	r3, [pc, #64]	; (5698 <Mcu_Init+0x88>)
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	6959      	ldr	r1, [r3, #20]
    565c:	9a03      	ldr	r2, [sp, #12]
    565e:	4613      	mov	r3, r2
    5660:	01db      	lsls	r3, r3, #7
    5662:	1a9b      	subs	r3, r3, r2
    5664:	00db      	lsls	r3, r3, #3
    5666:	440b      	add	r3, r1
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	9a03      	ldr	r2, [sp, #12]
    566c:	b2d1      	uxtb	r1, r2
    566e:	4a0c      	ldr	r2, [pc, #48]	; (56a0 <Mcu_Init+0x90>)
    5670:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5672:	9b03      	ldr	r3, [sp, #12]
    5674:	3301      	adds	r3, #1
    5676:	9303      	str	r3, [sp, #12]
    5678:	4b07      	ldr	r3, [pc, #28]	; (5698 <Mcu_Init+0x88>)
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	68db      	ldr	r3, [r3, #12]
    567e:	9a03      	ldr	r2, [sp, #12]
    5680:	429a      	cmp	r2, r3
    5682:	d3e8      	bcc.n	5656 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5684:	4b04      	ldr	r3, [pc, #16]	; (5698 <Mcu_Init+0x88>)
    5686:	681b      	ldr	r3, [r3, #0]
    5688:	699b      	ldr	r3, [r3, #24]
    568a:	4618      	mov	r0, r3
    568c:	f000 f88a 	bl	57a4 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5690:	bf00      	nop
    5692:	b005      	add	sp, #20
    5694:	f85d fb04 	ldr.w	pc, [sp], #4
    5698:	1fff8ce4 	.word	0x1fff8ce4
    569c:	1fff8ce0 	.word	0x1fff8ce0
    56a0:	1fff8cdc 	.word	0x1fff8cdc

000056a4 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    56a4:	b084      	sub	sp, #16
    56a6:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    56a8:	2301      	movs	r3, #1
    56aa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    56ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    56b2:	4618      	mov	r0, r3
    56b4:	b004      	add	sp, #16
    56b6:	4770      	bx	lr

000056b8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    56b8:	b500      	push	{lr}
    56ba:	b085      	sub	sp, #20
    56bc:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    56be:	4a0e      	ldr	r2, [pc, #56]	; (56f8 <Mcu_InitClock+0x40>)
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	4413      	add	r3, r2
    56c4:	781b      	ldrb	r3, [r3, #0]
    56c6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    56ca:	4b0c      	ldr	r3, [pc, #48]	; (56fc <Mcu_InitClock+0x44>)
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	6959      	ldr	r1, [r3, #20]
    56d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    56d4:	4613      	mov	r3, r2
    56d6:	01db      	lsls	r3, r3, #7
    56d8:	1a9b      	subs	r3, r3, r2
    56da:	00db      	lsls	r3, r3, #3
    56dc:	440b      	add	r3, r1
    56de:	4618      	mov	r0, r3
    56e0:	f000 f86a 	bl	57b8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    56e4:	2300      	movs	r3, #0
    56e6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    56ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    56ee:	4618      	mov	r0, r3
    56f0:	b005      	add	sp, #20
    56f2:	f85d fb04 	ldr.w	pc, [sp], #4
    56f6:	bf00      	nop
    56f8:	1fff8cdc 	.word	0x1fff8cdc
    56fc:	1fff8ce4 	.word	0x1fff8ce4

00005700 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5700:	b500      	push	{lr}
    5702:	b085      	sub	sp, #20
    5704:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5706:	4a0d      	ldr	r2, [pc, #52]	; (573c <Mcu_SetMode+0x3c>)
    5708:	9b01      	ldr	r3, [sp, #4]
    570a:	4413      	add	r3, r2
    570c:	781b      	ldrb	r3, [r3, #0]
    570e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5712:	f009 fad7 	bl	ecc4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5716:	4b0a      	ldr	r3, [pc, #40]	; (5740 <Mcu_SetMode+0x40>)
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	6919      	ldr	r1, [r3, #16]
    571c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5720:	4613      	mov	r3, r2
    5722:	005b      	lsls	r3, r3, #1
    5724:	4413      	add	r3, r2
    5726:	009b      	lsls	r3, r3, #2
    5728:	440b      	add	r3, r1
    572a:	4618      	mov	r0, r3
    572c:	f000 f84e 	bl	57cc <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5730:	f009 faf4 	bl	ed1c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5734:	bf00      	nop
    5736:	b005      	add	sp, #20
    5738:	f85d fb04 	ldr.w	pc, [sp], #4
    573c:	1fff8ce0 	.word	0x1fff8ce0
    5740:	1fff8ce4 	.word	0x1fff8ce4

00005744 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5744:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5746:	2302      	movs	r3, #2
    5748:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    574a:	9b01      	ldr	r3, [sp, #4]
}
    574c:	4618      	mov	r0, r3
    574e:	b002      	add	sp, #8
    5750:	4770      	bx	lr

00005752 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5752:	b500      	push	{lr}
    5754:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5756:	f000 f843 	bl	57e0 <Mcu_Ipw_GetResetReason>
    575a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    575c:	9b01      	ldr	r3, [sp, #4]
}
    575e:	4618      	mov	r0, r3
    5760:	b003      	add	sp, #12
    5762:	f85d fb04 	ldr.w	pc, [sp], #4

00005766 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5766:	b500      	push	{lr}
    5768:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    576a:	f000 f83f 	bl	57ec <Mcu_Ipw_GetResetRawValue>
    576e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5770:	9b01      	ldr	r3, [sp, #4]
}
    5772:	4618      	mov	r0, r3
    5774:	b003      	add	sp, #12
    5776:	f85d fb04 	ldr.w	pc, [sp], #4

0000577a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    577a:	b500      	push	{lr}
    577c:	b083      	sub	sp, #12
    577e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5780:	9801      	ldr	r0, [sp, #4]
    5782:	f000 f839 	bl	57f8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5786:	bf00      	nop
    5788:	b003      	add	sp, #12
    578a:	f85d fb04 	ldr.w	pc, [sp], #4

0000578e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    578e:	b082      	sub	sp, #8
    5790:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5792:	4b03      	ldr	r3, [pc, #12]	; (57a0 <Mcu_ClkSrcFailureNotification+0x12>)
    5794:	681b      	ldr	r3, [r3, #0]
    5796:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5798:	bf00      	nop
    579a:	b002      	add	sp, #8
    579c:	4770      	bx	lr
    579e:	bf00      	nop
    57a0:	1fff8ce4 	.word	0x1fff8ce4

000057a4 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    57a4:	b500      	push	{lr}
    57a6:	b083      	sub	sp, #12
    57a8:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    57aa:	9801      	ldr	r0, [sp, #4]
    57ac:	f000 f882 	bl	58b4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    57b0:	bf00      	nop
    57b2:	b003      	add	sp, #12
    57b4:	f85d fb04 	ldr.w	pc, [sp], #4

000057b8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    57b8:	b500      	push	{lr}
    57ba:	b083      	sub	sp, #12
    57bc:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    57be:	9801      	ldr	r0, [sp, #4]
    57c0:	f7fc fc6a 	bl	2098 <Clock_Ip_InitClock>
}
    57c4:	bf00      	nop
    57c6:	b003      	add	sp, #12
    57c8:	f85d fb04 	ldr.w	pc, [sp], #4

000057cc <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    57cc:	b500      	push	{lr}
    57ce:	b083      	sub	sp, #12
    57d0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    57d2:	9801      	ldr	r0, [sp, #4]
    57d4:	f000 f820 	bl	5818 <Power_Ip_SetMode>
}
    57d8:	bf00      	nop
    57da:	b003      	add	sp, #12
    57dc:	f85d fb04 	ldr.w	pc, [sp], #4

000057e0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    57e0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    57e2:	f000 f84f 	bl	5884 <Power_Ip_GetResetReason>
    57e6:	4603      	mov	r3, r0
}
    57e8:	4618      	mov	r0, r3
    57ea:	bd08      	pop	{r3, pc}

000057ec <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    57ec:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    57ee:	f000 f857 	bl	58a0 <Power_Ip_GetResetRawValue>
    57f2:	4603      	mov	r3, r0
}
    57f4:	4618      	mov	r0, r3
    57f6:	bd08      	pop	{r3, pc}

000057f8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57f8:	b500      	push	{lr}
    57fa:	b083      	sub	sp, #12
    57fc:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    57fe:	9b01      	ldr	r3, [sp, #4]
    5800:	2b00      	cmp	r3, #0
    5802:	d102      	bne.n	580a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5804:	f000 f86c 	bl	58e0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5808:	e001      	b.n	580e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    580a:	f000 f86e 	bl	58ea <Power_Ip_EnableSleepOnExit>
}
    580e:	bf00      	nop
    5810:	b003      	add	sp, #12
    5812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005818 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5818:	b500      	push	{lr}
    581a:	b085      	sub	sp, #20
    581c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    581e:	9b01      	ldr	r3, [sp, #4]
    5820:	685b      	ldr	r3, [r3, #4]
    5822:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5824:	9802      	ldr	r0, [sp, #8]
    5826:	f000 f9f5 	bl	5c14 <Power_Ip_SMC_ModeCheckEntry>
    582a:	4603      	mov	r3, r0
    582c:	2b00      	cmp	r3, #0
    582e:	d002      	beq.n	5836 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5830:	2301      	movs	r3, #1
    5832:	9303      	str	r3, [sp, #12]
    5834:	e003      	b.n	583e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5836:	9801      	ldr	r0, [sp, #4]
    5838:	f000 fa1e 	bl	5c78 <Power_Ip_SMC_ModeConfig>
    583c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    583e:	9b03      	ldr	r3, [sp, #12]
    5840:	2b01      	cmp	r3, #1
    5842:	d103      	bne.n	584c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5844:	21ff      	movs	r1, #255	; 0xff
    5846:	2003      	movs	r0, #3
    5848:	f000 f8f4 	bl	5a34 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    584c:	bf00      	nop
    584e:	b005      	add	sp, #20
    5850:	f85d fb04 	ldr.w	pc, [sp], #4

00005854 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5854:	b084      	sub	sp, #16
    5856:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5858:	230c      	movs	r3, #12
    585a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    585c:	4a08      	ldr	r2, [pc, #32]	; (5880 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    585e:	9b01      	ldr	r3, [sp, #4]
    5860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5864:	2b0e      	cmp	r3, #14
    5866:	d805      	bhi.n	5874 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5868:	4a05      	ldr	r2, [pc, #20]	; (5880 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    586a:	9b01      	ldr	r3, [sp, #4]
    586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5870:	9303      	str	r3, [sp, #12]
    5872:	e001      	b.n	5878 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5874:	230c      	movs	r3, #12
    5876:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5878:	9b03      	ldr	r3, [sp, #12]
}
    587a:	4618      	mov	r0, r3
    587c:	b004      	add	sp, #16
    587e:	4770      	bx	lr
    5880:	0001097c 	.word	0x0001097c

00005884 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5884:	b500      	push	{lr}
    5886:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5888:	f000 f940 	bl	5b0c <Power_Ip_RCM_GetResetReason>
    588c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    588e:	9801      	ldr	r0, [sp, #4]
    5890:	f7ff ffe0 	bl	5854 <Power_Ip_ConvertIntergeToResetType>
    5894:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5896:	9b00      	ldr	r3, [sp, #0]
}
    5898:	4618      	mov	r0, r3
    589a:	b003      	add	sp, #12
    589c:	f85d fb04 	ldr.w	pc, [sp], #4

000058a0 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    58a0:	b500      	push	{lr}
    58a2:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    58a4:	f000 f98a 	bl	5bbc <Power_Ip_RCM_GetResetRawValue>
    58a8:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    58aa:	9b01      	ldr	r3, [sp, #4]
}
    58ac:	4618      	mov	r0, r3
    58ae:	b003      	add	sp, #12
    58b0:	f85d fb04 	ldr.w	pc, [sp], #4

000058b4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    58b4:	b500      	push	{lr}
    58b6:	b083      	sub	sp, #12
    58b8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	4618      	mov	r0, r3
    58c0:	f000 f90e 	bl	5ae0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    58c4:	9b01      	ldr	r3, [sp, #4]
    58c6:	685b      	ldr	r3, [r3, #4]
    58c8:	4618      	mov	r0, r3
    58ca:	f000 f86d 	bl	59a8 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    58ce:	9b01      	ldr	r3, [sp, #4]
    58d0:	689b      	ldr	r3, [r3, #8]
    58d2:	4618      	mov	r0, r3
    58d4:	f000 f990 	bl	5bf8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    58d8:	bf00      	nop
    58da:	b003      	add	sp, #12
    58dc:	f85d fb04 	ldr.w	pc, [sp], #4

000058e0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    58e0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    58e2:	f000 f811 	bl	5908 <Power_Ip_CM4_DisableSleepOnExit>
}
    58e6:	bf00      	nop
    58e8:	bd08      	pop	{r3, pc}

000058ea <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    58ea:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    58ec:	f000 f820 	bl	5930 <Power_Ip_CM4_EnableSleepOnExit>
}
    58f0:	bf00      	nop
    58f2:	bd08      	pop	{r3, pc}

000058f4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    58f4:	b082      	sub	sp, #8
    58f6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    58f8:	4a02      	ldr	r2, [pc, #8]	; (5904 <Power_Ip_InstallNotificationsCallback+0x10>)
    58fa:	9b01      	ldr	r3, [sp, #4]
    58fc:	6013      	str	r3, [r2, #0]
}
    58fe:	bf00      	nop
    5900:	b002      	add	sp, #8
    5902:	4770      	bx	lr
    5904:	1fff8b1c 	.word	0x1fff8b1c

00005908 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5908:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    590a:	2300      	movs	r3, #0
    590c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    590e:	4b07      	ldr	r3, [pc, #28]	; (592c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	685b      	ldr	r3, [r3, #4]
    5914:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5916:	9b01      	ldr	r3, [sp, #4]
    5918:	f023 0302 	bic.w	r3, r3, #2
    591c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    591e:	4b03      	ldr	r3, [pc, #12]	; (592c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	9a01      	ldr	r2, [sp, #4]
    5924:	605a      	str	r2, [r3, #4]
}
    5926:	bf00      	nop
    5928:	b002      	add	sp, #8
    592a:	4770      	bx	lr
    592c:	1fff8b20 	.word	0x1fff8b20

00005930 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5930:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5932:	2300      	movs	r3, #0
    5934:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5936:	4b07      	ldr	r3, [pc, #28]	; (5954 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	685b      	ldr	r3, [r3, #4]
    593c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    593e:	9b01      	ldr	r3, [sp, #4]
    5940:	f043 0302 	orr.w	r3, r3, #2
    5944:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5946:	4b03      	ldr	r3, [pc, #12]	; (5954 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	9a01      	ldr	r2, [sp, #4]
    594c:	605a      	str	r2, [r3, #4]
}
    594e:	bf00      	nop
    5950:	b002      	add	sp, #8
    5952:	4770      	bx	lr
    5954:	1fff8b20 	.word	0x1fff8b20

00005958 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5958:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    595a:	2300      	movs	r3, #0
    595c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    595e:	4b07      	ldr	r3, [pc, #28]	; (597c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	685b      	ldr	r3, [r3, #4]
    5964:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5966:	9b01      	ldr	r3, [sp, #4]
    5968:	f043 0304 	orr.w	r3, r3, #4
    596c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    596e:	4b03      	ldr	r3, [pc, #12]	; (597c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	9a01      	ldr	r2, [sp, #4]
    5974:	605a      	str	r2, [r3, #4]
}
    5976:	bf00      	nop
    5978:	b002      	add	sp, #8
    597a:	4770      	bx	lr
    597c:	1fff8b20 	.word	0x1fff8b20

00005980 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5980:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5982:	2300      	movs	r3, #0
    5984:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5986:	4b07      	ldr	r3, [pc, #28]	; (59a4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	685b      	ldr	r3, [r3, #4]
    598c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    598e:	9b01      	ldr	r3, [sp, #4]
    5990:	f023 0304 	bic.w	r3, r3, #4
    5994:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5996:	4b03      	ldr	r3, [pc, #12]	; (59a4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	9a01      	ldr	r2, [sp, #4]
    599c:	605a      	str	r2, [r3, #4]
}
    599e:	bf00      	nop
    59a0:	b002      	add	sp, #8
    59a2:	4770      	bx	lr
    59a4:	1fff8b20 	.word	0x1fff8b20

000059a8 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    59a8:	b084      	sub	sp, #16
    59aa:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    59ac:	4b20      	ldr	r3, [pc, #128]	; (5a30 <Power_Ip_PMC_PowerInit+0x88>)
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    59b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59b8:	f003 030f 	and.w	r3, r3, #15
    59bc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    59c0:	9b01      	ldr	r3, [sp, #4]
    59c2:	781a      	ldrb	r2, [r3, #0]
    59c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59c8:	4313      	orrs	r3, r2
    59ca:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    59ce:	4a18      	ldr	r2, [pc, #96]	; (5a30 <Power_Ip_PMC_PowerInit+0x88>)
    59d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59d4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    59d6:	4b16      	ldr	r3, [pc, #88]	; (5a30 <Power_Ip_PMC_PowerInit+0x88>)
    59d8:	785b      	ldrb	r3, [r3, #1]
    59da:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    59de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59e2:	f003 031f 	and.w	r3, r3, #31
    59e6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    59ea:	9b01      	ldr	r3, [sp, #4]
    59ec:	785a      	ldrb	r2, [r3, #1]
    59ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59f2:	4313      	orrs	r3, r2
    59f4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    59f8:	4a0d      	ldr	r2, [pc, #52]	; (5a30 <Power_Ip_PMC_PowerInit+0x88>)
    59fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59fe:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a00:	4b0b      	ldr	r3, [pc, #44]	; (5a30 <Power_Ip_PMC_PowerInit+0x88>)
    5a02:	789b      	ldrb	r3, [r3, #2]
    5a04:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a10:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5a14:	9b01      	ldr	r3, [sp, #4]
    5a16:	789a      	ldrb	r2, [r3, #2]
    5a18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a1c:	4313      	orrs	r3, r2
    5a1e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a22:	4a03      	ldr	r2, [pc, #12]	; (5a30 <Power_Ip_PMC_PowerInit+0x88>)
    5a24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a28:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5a2a:	bf00      	nop
    5a2c:	b004      	add	sp, #16
    5a2e:	4770      	bx	lr
    5a30:	4007d000 	.word	0x4007d000

00005a34 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a34:	b500      	push	{lr}
    5a36:	b083      	sub	sp, #12
    5a38:	9001      	str	r0, [sp, #4]
    5a3a:	460b      	mov	r3, r1
    5a3c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5a40:	4b05      	ldr	r3, [pc, #20]	; (5a58 <Power_Ip_ReportPowerErrors+0x24>)
    5a42:	681b      	ldr	r3, [r3, #0]
    5a44:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5a48:	4611      	mov	r1, r2
    5a4a:	9801      	ldr	r0, [sp, #4]
    5a4c:	4798      	blx	r3
}
    5a4e:	bf00      	nop
    5a50:	b003      	add	sp, #12
    5a52:	f85d fb04 	ldr.w	pc, [sp], #4
    5a56:	bf00      	nop
    5a58:	1fff8b1c 	.word	0x1fff8b1c

00005a5c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a5c:	b082      	sub	sp, #8
    5a5e:	9001      	str	r0, [sp, #4]
    5a60:	460b      	mov	r3, r1
    5a62:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5a66:	bf00      	nop
    5a68:	b002      	add	sp, #8
    5a6a:	4770      	bx	lr

00005a6c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5a6c:	b500      	push	{lr}
    5a6e:	b085      	sub	sp, #20
    5a70:	9003      	str	r0, [sp, #12]
    5a72:	9102      	str	r1, [sp, #8]
    5a74:	9201      	str	r2, [sp, #4]
    5a76:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5a78:	2000      	movs	r0, #0
    5a7a:	f7fc f83d 	bl	1af8 <OsIf_GetCounter>
    5a7e:	4602      	mov	r2, r0
    5a80:	9b03      	ldr	r3, [sp, #12]
    5a82:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5a84:	9b02      	ldr	r3, [sp, #8]
    5a86:	2200      	movs	r2, #0
    5a88:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5a8a:	2100      	movs	r1, #0
    5a8c:	9800      	ldr	r0, [sp, #0]
    5a8e:	f7fc f87f 	bl	1b90 <OsIf_MicrosToTicks>
    5a92:	4602      	mov	r2, r0
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	601a      	str	r2, [r3, #0]
}
    5a98:	bf00      	nop
    5a9a:	b005      	add	sp, #20
    5a9c:	f85d fb04 	ldr.w	pc, [sp], #4

00005aa0 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5aa0:	b500      	push	{lr}
    5aa2:	b087      	sub	sp, #28
    5aa4:	9003      	str	r0, [sp, #12]
    5aa6:	9102      	str	r1, [sp, #8]
    5aa8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5aaa:	2300      	movs	r3, #0
    5aac:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5ab0:	2100      	movs	r1, #0
    5ab2:	9803      	ldr	r0, [sp, #12]
    5ab4:	f7fc f839 	bl	1b2a <OsIf_GetElapsed>
    5ab8:	4602      	mov	r2, r0
    5aba:	9b02      	ldr	r3, [sp, #8]
    5abc:	681b      	ldr	r3, [r3, #0]
    5abe:	441a      	add	r2, r3
    5ac0:	9b02      	ldr	r3, [sp, #8]
    5ac2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5ac4:	9b02      	ldr	r3, [sp, #8]
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	9a01      	ldr	r2, [sp, #4]
    5aca:	429a      	cmp	r2, r3
    5acc:	d802      	bhi.n	5ad4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5ace:	2301      	movs	r3, #1
    5ad0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5ad4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5ad8:	4618      	mov	r0, r3
    5ada:	b007      	add	sp, #28
    5adc:	f85d fb04 	ldr.w	pc, [sp], #4

00005ae0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5ae0:	b082      	sub	sp, #8
    5ae2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5ae4:	9b01      	ldr	r3, [sp, #4]
    5ae6:	681a      	ldr	r2, [r3, #0]
    5ae8:	4907      	ldr	r1, [pc, #28]	; (5b08 <Power_Ip_RCM_ResetInit+0x28>)
    5aea:	f641 7307 	movw	r3, #7943	; 0x1f07
    5aee:	4013      	ands	r3, r2
    5af0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5af2:	9b01      	ldr	r3, [sp, #4]
    5af4:	685a      	ldr	r2, [r3, #4]
    5af6:	4904      	ldr	r1, [pc, #16]	; (5b08 <Power_Ip_RCM_ResetInit+0x28>)
    5af8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5afc:	4013      	ands	r3, r2
    5afe:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b00:	bf00      	nop
    5b02:	b002      	add	sp, #8
    5b04:	4770      	bx	lr
    5b06:	bf00      	nop
    5b08:	4007f000 	.word	0x4007f000

00005b0c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5b0c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5b0e:	230c      	movs	r3, #12
    5b10:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b12:	2300      	movs	r3, #0
    5b14:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5b16:	2300      	movs	r3, #0
    5b18:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5b1a:	2300      	movs	r3, #0
    5b1c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b1e:	4b25      	ldr	r3, [pc, #148]	; (5bb4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b20:	699a      	ldr	r2, [r3, #24]
    5b22:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b26:	4013      	ands	r3, r2
    5b28:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5b2a:	9b03      	ldr	r3, [sp, #12]
    5b2c:	2b00      	cmp	r3, #0
    5b2e:	d008      	beq.n	5b42 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5b30:	4920      	ldr	r1, [pc, #128]	; (5bb4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b32:	9a03      	ldr	r2, [sp, #12]
    5b34:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b38:	4013      	ands	r3, r2
    5b3a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b3c:	4a1e      	ldr	r2, [pc, #120]	; (5bb8 <Power_Ip_RCM_GetResetReason+0xac>)
    5b3e:	9b03      	ldr	r3, [sp, #12]
    5b40:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5b42:	4b1d      	ldr	r3, [pc, #116]	; (5bb8 <Power_Ip_RCM_GetResetReason+0xac>)
    5b44:	681b      	ldr	r3, [r3, #0]
    5b46:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5b48:	9a02      	ldr	r2, [sp, #8]
    5b4a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b4e:	4013      	ands	r3, r2
    5b50:	2b82      	cmp	r3, #130	; 0x82
    5b52:	d102      	bne.n	5b5a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5b54:	2305      	movs	r3, #5
    5b56:	9307      	str	r3, [sp, #28]
    5b58:	e027      	b.n	5baa <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b5a:	2300      	movs	r3, #0
    5b5c:	9306      	str	r3, [sp, #24]
    5b5e:	e021      	b.n	5ba4 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5b60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b64:	9b06      	ldr	r3, [sp, #24]
    5b66:	fa22 f303 	lsr.w	r3, r2, r3
    5b6a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5b6c:	9a01      	ldr	r2, [sp, #4]
    5b6e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5b72:	4013      	ands	r3, r2
    5b74:	2b00      	cmp	r3, #0
    5b76:	d012      	beq.n	5b9e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5b78:	9a01      	ldr	r2, [sp, #4]
    5b7a:	9b02      	ldr	r3, [sp, #8]
    5b7c:	4013      	ands	r3, r2
    5b7e:	2b00      	cmp	r3, #0
    5b80:	d00a      	beq.n	5b98 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5b82:	9b05      	ldr	r3, [sp, #20]
    5b84:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5b86:	9b04      	ldr	r3, [sp, #16]
    5b88:	3301      	adds	r3, #1
    5b8a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5b8c:	9b04      	ldr	r3, [sp, #16]
    5b8e:	2b01      	cmp	r3, #1
    5b90:	d902      	bls.n	5b98 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5b92:	230d      	movs	r3, #13
    5b94:	9307      	str	r3, [sp, #28]
                        break;
    5b96:	e008      	b.n	5baa <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5b98:	9b05      	ldr	r3, [sp, #20]
    5b9a:	3301      	adds	r3, #1
    5b9c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b9e:	9b06      	ldr	r3, [sp, #24]
    5ba0:	3301      	adds	r3, #1
    5ba2:	9306      	str	r3, [sp, #24]
    5ba4:	9b06      	ldr	r3, [sp, #24]
    5ba6:	2b1f      	cmp	r3, #31
    5ba8:	d9da      	bls.n	5b60 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5baa:	9b07      	ldr	r3, [sp, #28]
}
    5bac:	4618      	mov	r0, r3
    5bae:	b008      	add	sp, #32
    5bb0:	4770      	bx	lr
    5bb2:	bf00      	nop
    5bb4:	4007f000 	.word	0x4007f000
    5bb8:	1fff8ce8 	.word	0x1fff8ce8

00005bbc <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5bbc:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bbe:	4b0c      	ldr	r3, [pc, #48]	; (5bf0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bc0:	699a      	ldr	r2, [r3, #24]
    5bc2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc6:	4013      	ands	r3, r2
    5bc8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d008      	beq.n	5be2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bd0:	4907      	ldr	r1, [pc, #28]	; (5bf0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bd2:	9a01      	ldr	r2, [sp, #4]
    5bd4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bd8:	4013      	ands	r3, r2
    5bda:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bdc:	4a05      	ldr	r2, [pc, #20]	; (5bf4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5bde:	9b01      	ldr	r3, [sp, #4]
    5be0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5be2:	4b04      	ldr	r3, [pc, #16]	; (5bf4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5be8:	9b00      	ldr	r3, [sp, #0]
}
    5bea:	4618      	mov	r0, r3
    5bec:	b002      	add	sp, #8
    5bee:	4770      	bx	lr
    5bf0:	4007f000 	.word	0x4007f000
    5bf4:	1fff8ce8 	.word	0x1fff8ce8

00005bf8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5bf8:	b082      	sub	sp, #8
    5bfa:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5bfc:	9b01      	ldr	r3, [sp, #4]
    5bfe:	681b      	ldr	r3, [r3, #0]
    5c00:	4a03      	ldr	r2, [pc, #12]	; (5c10 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c06:	6093      	str	r3, [r2, #8]
}
    5c08:	bf00      	nop
    5c0a:	b002      	add	sp, #8
    5c0c:	4770      	bx	lr
    5c0e:	bf00      	nop
    5c10:	4007e000 	.word	0x4007e000

00005c14 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5c14:	b084      	sub	sp, #16
    5c16:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5c18:	2301      	movs	r3, #1
    5c1a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5c1c:	4b15      	ldr	r3, [pc, #84]	; (5c74 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5c1e:	695b      	ldr	r3, [r3, #20]
    5c20:	b2db      	uxtb	r3, r3
    5c22:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c24:	9b01      	ldr	r3, [sp, #4]
    5c26:	2b02      	cmp	r3, #2
    5c28:	d012      	beq.n	5c50 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5c2a:	9b01      	ldr	r3, [sp, #4]
    5c2c:	2b02      	cmp	r3, #2
    5c2e:	d818      	bhi.n	5c62 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5c30:	9b01      	ldr	r3, [sp, #4]
    5c32:	2b00      	cmp	r3, #0
    5c34:	d003      	beq.n	5c3e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5c36:	9b01      	ldr	r3, [sp, #4]
    5c38:	2b01      	cmp	r3, #1
    5c3a:	d003      	beq.n	5c44 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5c3c:	e011      	b.n	5c62 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5c3e:	2300      	movs	r3, #0
    5c40:	9303      	str	r3, [sp, #12]
            break;
    5c42:	e013      	b.n	5c6c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5c44:	9b02      	ldr	r3, [sp, #8]
    5c46:	2b01      	cmp	r3, #1
    5c48:	d10d      	bne.n	5c66 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c4a:	2300      	movs	r3, #0
    5c4c:	9303      	str	r3, [sp, #12]
            break;
    5c4e:	e00a      	b.n	5c66 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5c50:	9b02      	ldr	r3, [sp, #8]
    5c52:	2b01      	cmp	r3, #1
    5c54:	d002      	beq.n	5c5c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5c56:	9b02      	ldr	r3, [sp, #8]
    5c58:	2b10      	cmp	r3, #16
    5c5a:	d106      	bne.n	5c6a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c5c:	2300      	movs	r3, #0
    5c5e:	9303      	str	r3, [sp, #12]
            break;
    5c60:	e003      	b.n	5c6a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5c62:	bf00      	nop
    5c64:	e002      	b.n	5c6c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c66:	bf00      	nop
    5c68:	e000      	b.n	5c6c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c6a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5c6c:	9b03      	ldr	r3, [sp, #12]
}
    5c6e:	4618      	mov	r0, r3
    5c70:	b004      	add	sp, #16
    5c72:	4770      	bx	lr
    5c74:	4007e000 	.word	0x4007e000

00005c78 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5c78:	b500      	push	{lr}
    5c7a:	b08b      	sub	sp, #44	; 0x2c
    5c7c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5c7e:	2300      	movs	r3, #0
    5c80:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5c82:	2300      	movs	r3, #0
    5c84:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5c86:	2300      	movs	r3, #0
    5c88:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5c8c:	9b01      	ldr	r3, [sp, #4]
    5c8e:	685b      	ldr	r3, [r3, #4]
    5c90:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5c92:	9b08      	ldr	r3, [sp, #32]
    5c94:	2b02      	cmp	r3, #2
    5c96:	d076      	beq.n	5d86 <Power_Ip_SMC_ModeConfig+0x10e>
    5c98:	9b08      	ldr	r3, [sp, #32]
    5c9a:	2b02      	cmp	r3, #2
    5c9c:	f200 80ab 	bhi.w	5df6 <Power_Ip_SMC_ModeConfig+0x17e>
    5ca0:	9b08      	ldr	r3, [sp, #32]
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d003      	beq.n	5cae <Power_Ip_SMC_ModeConfig+0x36>
    5ca6:	9b08      	ldr	r3, [sp, #32]
    5ca8:	2b01      	cmp	r3, #1
    5caa:	d034      	beq.n	5d16 <Power_Ip_SMC_ModeConfig+0x9e>
    5cac:	e0a3      	b.n	5df6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5cae:	4b58      	ldr	r3, [pc, #352]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5cb0:	68db      	ldr	r3, [r3, #12]
    5cb2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5cb4:	9b06      	ldr	r3, [sp, #24]
    5cb6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5cba:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5cbc:	4a54      	ldr	r2, [pc, #336]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5cbe:	9b06      	ldr	r3, [sp, #24]
    5cc0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5cc2:	aa02      	add	r2, sp, #8
    5cc4:	a903      	add	r1, sp, #12
    5cc6:	a804      	add	r0, sp, #16
    5cc8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5ccc:	f7ff fece 	bl	5a6c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5cd0:	9a02      	ldr	r2, [sp, #8]
    5cd2:	a903      	add	r1, sp, #12
    5cd4:	ab04      	add	r3, sp, #16
    5cd6:	4618      	mov	r0, r3
    5cd8:	f7ff fee2 	bl	5aa0 <Power_Ip_TimeoutExpired>
    5cdc:	4603      	mov	r3, r0
    5cde:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5ce2:	4b4b      	ldr	r3, [pc, #300]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5ce4:	695b      	ldr	r3, [r3, #20]
    5ce6:	f003 0301 	and.w	r3, r3, #1
    5cea:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5cec:	9b05      	ldr	r3, [sp, #20]
    5cee:	2b01      	cmp	r3, #1
    5cf0:	d006      	beq.n	5d00 <Power_Ip_SMC_ModeConfig+0x88>
    5cf2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5cf6:	f083 0301 	eor.w	r3, r3, #1
    5cfa:	b2db      	uxtb	r3, r3
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d1e7      	bne.n	5cd0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d04:	2b00      	cmp	r3, #0
    5d06:	d079      	beq.n	5dfc <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d08:	2301      	movs	r3, #1
    5d0a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d0c:	21ff      	movs	r1, #255	; 0xff
    5d0e:	2000      	movs	r0, #0
    5d10:	f7ff fe90 	bl	5a34 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d14:	e072      	b.n	5dfc <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5d16:	4b3e      	ldr	r3, [pc, #248]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5d18:	68db      	ldr	r3, [r3, #12]
    5d1a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d1c:	9b06      	ldr	r3, [sp, #24]
    5d1e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d22:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d24:	9b06      	ldr	r3, [sp, #24]
    5d26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5d2a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d2c:	4a38      	ldr	r2, [pc, #224]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5d2e:	9b06      	ldr	r3, [sp, #24]
    5d30:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d32:	aa02      	add	r2, sp, #8
    5d34:	a903      	add	r1, sp, #12
    5d36:	a804      	add	r0, sp, #16
    5d38:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d3c:	f7ff fe96 	bl	5a6c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d40:	9a02      	ldr	r2, [sp, #8]
    5d42:	a903      	add	r1, sp, #12
    5d44:	ab04      	add	r3, sp, #16
    5d46:	4618      	mov	r0, r3
    5d48:	f7ff feaa 	bl	5aa0 <Power_Ip_TimeoutExpired>
    5d4c:	4603      	mov	r3, r0
    5d4e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5d52:	4b2f      	ldr	r3, [pc, #188]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5d54:	695b      	ldr	r3, [r3, #20]
    5d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d5a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d5c:	9b05      	ldr	r3, [sp, #20]
    5d5e:	2b80      	cmp	r3, #128	; 0x80
    5d60:	d006      	beq.n	5d70 <Power_Ip_SMC_ModeConfig+0xf8>
    5d62:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d66:	f083 0301 	eor.w	r3, r3, #1
    5d6a:	b2db      	uxtb	r3, r3
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d1e7      	bne.n	5d40 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5d70:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d74:	2b00      	cmp	r3, #0
    5d76:	d043      	beq.n	5e00 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d78:	2301      	movs	r3, #1
    5d7a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d7c:	21ff      	movs	r1, #255	; 0xff
    5d7e:	2000      	movs	r0, #0
    5d80:	f7ff fe58 	bl	5a34 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d84:	e03c      	b.n	5e00 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5d86:	4b22      	ldr	r3, [pc, #136]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5d88:	68db      	ldr	r3, [r3, #12]
    5d8a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d8c:	9b06      	ldr	r3, [sp, #24]
    5d8e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d92:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5d94:	9b06      	ldr	r3, [sp, #24]
    5d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d9a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d9c:	4a1c      	ldr	r2, [pc, #112]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5d9e:	9b06      	ldr	r3, [sp, #24]
    5da0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5da2:	aa02      	add	r2, sp, #8
    5da4:	a903      	add	r1, sp, #12
    5da6:	a804      	add	r0, sp, #16
    5da8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5dac:	f7ff fe5e 	bl	5a6c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5db0:	9a02      	ldr	r2, [sp, #8]
    5db2:	a903      	add	r1, sp, #12
    5db4:	ab04      	add	r3, sp, #16
    5db6:	4618      	mov	r0, r3
    5db8:	f7ff fe72 	bl	5aa0 <Power_Ip_TimeoutExpired>
    5dbc:	4603      	mov	r3, r0
    5dbe:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5dc2:	4b13      	ldr	r3, [pc, #76]	; (5e10 <Power_Ip_SMC_ModeConfig+0x198>)
    5dc4:	695b      	ldr	r3, [r3, #20]
    5dc6:	f003 0304 	and.w	r3, r3, #4
    5dca:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dcc:	9b05      	ldr	r3, [sp, #20]
    5dce:	2b04      	cmp	r3, #4
    5dd0:	d006      	beq.n	5de0 <Power_Ip_SMC_ModeConfig+0x168>
    5dd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dd6:	f083 0301 	eor.w	r3, r3, #1
    5dda:	b2db      	uxtb	r3, r3
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d1e7      	bne.n	5db0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5de0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5de4:	2b00      	cmp	r3, #0
    5de6:	d00d      	beq.n	5e04 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5de8:	2301      	movs	r3, #1
    5dea:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5dec:	21ff      	movs	r1, #255	; 0xff
    5dee:	2000      	movs	r0, #0
    5df0:	f7ff fe20 	bl	5a34 <Power_Ip_ReportPowerErrors>
            }

            break;
    5df4:	e006      	b.n	5e04 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5df6:	2301      	movs	r3, #1
    5df8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5dfa:	e004      	b.n	5e06 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5dfc:	bf00      	nop
    5dfe:	e002      	b.n	5e06 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e00:	bf00      	nop
    5e02:	e000      	b.n	5e06 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e04:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e08:	4618      	mov	r0, r3
    5e0a:	b00b      	add	sp, #44	; 0x2c
    5e0c:	f85d fb04 	ldr.w	pc, [sp], #4
    5e10:	4007e000 	.word	0x4007e000

00005e14 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5e14:	b500      	push	{lr}
    5e16:	b085      	sub	sp, #20
    5e18:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5e1a:	9b01      	ldr	r3, [sp, #4]
    5e1c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5e1e:	9803      	ldr	r0, [sp, #12]
    5e20:	f000 fbc8 	bl	65b4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e24:	4a03      	ldr	r2, [pc, #12]	; (5e34 <Port_Init+0x20>)
    5e26:	9b03      	ldr	r3, [sp, #12]
    5e28:	6013      	str	r3, [r2, #0]
        }
    }
}
    5e2a:	bf00      	nop
    5e2c:	b005      	add	sp, #20
    5e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    5e32:	bf00      	nop
    5e34:	1fff8cec 	.word	0x1fff8cec

00005e38 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5e38:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5e3a:	4b03      	ldr	r3, [pc, #12]	; (5e48 <Port_RefreshPortDirection+0x10>)
    5e3c:	681b      	ldr	r3, [r3, #0]
    5e3e:	4618      	mov	r0, r3
    5e40:	f000 fc10 	bl	6664 <Port_Ipw_RefreshPortDirection>
    }
}
    5e44:	bf00      	nop
    5e46:	bd08      	pop	{r3, pc}
    5e48:	1fff8cec 	.word	0x1fff8cec

00005e4c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5e4c:	b086      	sub	sp, #24
    5e4e:	9003      	str	r0, [sp, #12]
    5e50:	9102      	str	r1, [sp, #8]
    5e52:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5e54:	23ff      	movs	r3, #255	; 0xff
    5e56:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5e58:	9b03      	ldr	r3, [sp, #12]
    5e5a:	4a39      	ldr	r2, [pc, #228]	; (5f40 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5e5c:	4293      	cmp	r3, r2
    5e5e:	d151      	bne.n	5f04 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5e60:	9b02      	ldr	r3, [sp, #8]
    5e62:	2b10      	cmp	r3, #16
    5e64:	d867      	bhi.n	5f36 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5e66:	a201      	add	r2, pc, #4	; (adr r2, 5e6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e6c:	00005eb1 	.word	0x00005eb1
    5e70:	00005ebf 	.word	0x00005ebf
    5e74:	00005f37 	.word	0x00005f37
    5e78:	00005f37 	.word	0x00005f37
    5e7c:	00005f37 	.word	0x00005f37
    5e80:	00005f37 	.word	0x00005f37
    5e84:	00005f37 	.word	0x00005f37
    5e88:	00005f37 	.word	0x00005f37
    5e8c:	00005f37 	.word	0x00005f37
    5e90:	00005f37 	.word	0x00005f37
    5e94:	00005f37 	.word	0x00005f37
    5e98:	00005f37 	.word	0x00005f37
    5e9c:	00005f37 	.word	0x00005f37
    5ea0:	00005ecd 	.word	0x00005ecd
    5ea4:	00005edb 	.word	0x00005edb
    5ea8:	00005ee9 	.word	0x00005ee9
    5eac:	00005ef7 	.word	0x00005ef7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5eb0:	2301      	movs	r3, #1
    5eb2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5eb4:	9a05      	ldr	r2, [sp, #20]
    5eb6:	9b01      	ldr	r3, [sp, #4]
    5eb8:	4313      	orrs	r3, r2
    5eba:	9305      	str	r3, [sp, #20]
                break;
    5ebc:	e03c      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5ebe:	2302      	movs	r3, #2
    5ec0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ec2:	9a05      	ldr	r2, [sp, #20]
    5ec4:	9b01      	ldr	r3, [sp, #4]
    5ec6:	4313      	orrs	r3, r2
    5ec8:	9305      	str	r3, [sp, #20]
                break;
    5eca:	e035      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5ecc:	2304      	movs	r3, #4
    5ece:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ed0:	9a05      	ldr	r2, [sp, #20]
    5ed2:	9b01      	ldr	r3, [sp, #4]
    5ed4:	4313      	orrs	r3, r2
    5ed6:	9305      	str	r3, [sp, #20]
                break;
    5ed8:	e02e      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5eda:	2308      	movs	r3, #8
    5edc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ede:	9a05      	ldr	r2, [sp, #20]
    5ee0:	9b01      	ldr	r3, [sp, #4]
    5ee2:	4313      	orrs	r3, r2
    5ee4:	9305      	str	r3, [sp, #20]
                break;
    5ee6:	e027      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5ee8:	230e      	movs	r3, #14
    5eea:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5eec:	9a05      	ldr	r2, [sp, #20]
    5eee:	9b01      	ldr	r3, [sp, #4]
    5ef0:	4013      	ands	r3, r2
    5ef2:	9305      	str	r3, [sp, #20]
                break;
    5ef4:	e020      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5ef6:	230d      	movs	r3, #13
    5ef8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5efa:	9a05      	ldr	r2, [sp, #20]
    5efc:	9b01      	ldr	r3, [sp, #4]
    5efe:	4013      	ands	r3, r2
    5f00:	9305      	str	r3, [sp, #20]
                break;
    5f02:	e019      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f04:	9b03      	ldr	r3, [sp, #12]
    5f06:	4a0f      	ldr	r2, [pc, #60]	; (5f44 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f08:	4293      	cmp	r3, r2
    5f0a:	d115      	bne.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5f0c:	9b02      	ldr	r3, [sp, #8]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d003      	beq.n	5f1a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f12:	9b02      	ldr	r3, [sp, #8]
    5f14:	2b01      	cmp	r3, #1
    5f16:	d007      	beq.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5f18:	e00e      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5f1a:	230b      	movs	r3, #11
    5f1c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f1e:	9a05      	ldr	r2, [sp, #20]
    5f20:	9b01      	ldr	r3, [sp, #4]
    5f22:	4013      	ands	r3, r2
    5f24:	9305      	str	r3, [sp, #20]
                break;
    5f26:	e007      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5f28:	2307      	movs	r3, #7
    5f2a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f2c:	9a05      	ldr	r2, [sp, #20]
    5f2e:	9b01      	ldr	r3, [sp, #4]
    5f30:	4013      	ands	r3, r2
    5f32:	9305      	str	r3, [sp, #20]
                break;
    5f34:	e000      	b.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5f36:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5f38:	9b05      	ldr	r3, [sp, #20]
}
    5f3a:	4618      	mov	r0, r3
    5f3c:	b006      	add	sp, #24
    5f3e:	4770      	bx	lr
    5f40:	4004a000 	.word	0x4004a000
    5f44:	4004b000 	.word	0x4004b000

00005f48 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5f48:	b500      	push	{lr}
    5f4a:	b089      	sub	sp, #36	; 0x24
    5f4c:	9003      	str	r0, [sp, #12]
    5f4e:	9102      	str	r1, [sp, #8]
    5f50:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5f52:	9b01      	ldr	r3, [sp, #4]
    5f54:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5f56:	9b01      	ldr	r3, [sp, #4]
    5f58:	2b08      	cmp	r3, #8
    5f5a:	d121      	bne.n	5fa0 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5f5c:	4b13      	ldr	r3, [pc, #76]	; (5fac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f5e:	685b      	ldr	r3, [r3, #4]
    5f60:	f003 030f 	and.w	r3, r3, #15
    5f64:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5f66:	9a06      	ldr	r2, [sp, #24]
    5f68:	9902      	ldr	r1, [sp, #8]
    5f6a:	9803      	ldr	r0, [sp, #12]
    5f6c:	f7ff ff6e 	bl	5e4c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5f70:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5f72:	9b05      	ldr	r3, [sp, #20]
    5f74:	2bff      	cmp	r3, #255	; 0xff
    5f76:	d011      	beq.n	5f9c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5f78:	f009 f934 	bl	f1e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5f7c:	4b0b      	ldr	r3, [pc, #44]	; (5fac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f7e:	685b      	ldr	r3, [r3, #4]
    5f80:	4a0a      	ldr	r2, [pc, #40]	; (5fac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f82:	f023 030f 	bic.w	r3, r3, #15
    5f86:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5f88:	4b08      	ldr	r3, [pc, #32]	; (5fac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f8a:	685a      	ldr	r2, [r3, #4]
    5f8c:	9b05      	ldr	r3, [sp, #20]
    5f8e:	f003 030f 	and.w	r3, r3, #15
    5f92:	4906      	ldr	r1, [pc, #24]	; (5fac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f94:	4313      	orrs	r3, r2
    5f96:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5f98:	f009 f950 	bl	f23c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5f9c:	2300      	movs	r3, #0
    5f9e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5fa0:	9b07      	ldr	r3, [sp, #28]
}
    5fa2:	4618      	mov	r0, r3
    5fa4:	b009      	add	sp, #36	; 0x24
    5fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    5faa:	bf00      	nop
    5fac:	40048000 	.word	0x40048000

00005fb0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5fb0:	b500      	push	{lr}
    5fb2:	b087      	sub	sp, #28
    5fb4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5fb6:	2300      	movs	r3, #0
    5fb8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5fba:	2300      	movs	r3, #0
    5fbc:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5fbe:	2300      	movs	r3, #0
    5fc0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5fc2:	9b01      	ldr	r3, [sp, #4]
    5fc4:	68db      	ldr	r3, [r3, #12]
    5fc6:	2b02      	cmp	r3, #2
    5fc8:	d00a      	beq.n	5fe0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5fca:	9b05      	ldr	r3, [sp, #20]
    5fcc:	f043 0302 	orr.w	r3, r3, #2
    5fd0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5fd2:	9b01      	ldr	r3, [sp, #4]
    5fd4:	68db      	ldr	r3, [r3, #12]
    5fd6:	f003 0301 	and.w	r3, r3, #1
    5fda:	9a05      	ldr	r2, [sp, #20]
    5fdc:	4313      	orrs	r3, r2
    5fde:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5fe0:	9b01      	ldr	r3, [sp, #4]
    5fe2:	699b      	ldr	r3, [r3, #24]
    5fe4:	019b      	lsls	r3, r3, #6
    5fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fea:	9a05      	ldr	r2, [sp, #20]
    5fec:	4313      	orrs	r3, r2
    5fee:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5ff0:	9b01      	ldr	r3, [sp, #4]
    5ff2:	6a1b      	ldr	r3, [r3, #32]
    5ff4:	03db      	lsls	r3, r3, #15
    5ff6:	b29b      	uxth	r3, r3
    5ff8:	9a05      	ldr	r2, [sp, #20]
    5ffa:	4313      	orrs	r3, r2
    5ffc:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5ffe:	9b01      	ldr	r3, [sp, #4]
    6000:	7f1b      	ldrb	r3, [r3, #28]
    6002:	2b00      	cmp	r3, #0
    6004:	d001      	beq.n	600a <Port_Ci_Port_Ip_PinInit+0x5a>
    6006:	2310      	movs	r3, #16
    6008:	e000      	b.n	600c <Port_Ci_Port_Ip_PinInit+0x5c>
    600a:	2300      	movs	r3, #0
    600c:	9a05      	ldr	r2, [sp, #20]
    600e:	4313      	orrs	r3, r2
    6010:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6012:	9b01      	ldr	r3, [sp, #4]
    6014:	691b      	ldr	r3, [r3, #16]
    6016:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6018:	9b01      	ldr	r3, [sp, #4]
    601a:	6818      	ldr	r0, [r3, #0]
    601c:	9b01      	ldr	r3, [sp, #4]
    601e:	689b      	ldr	r3, [r3, #8]
    6020:	9a04      	ldr	r2, [sp, #16]
    6022:	4619      	mov	r1, r3
    6024:	f7ff ff90 	bl	5f48 <Port_Ci_Port_Ip_ConfigureInterleave>
    6028:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    602a:	9b03      	ldr	r3, [sp, #12]
    602c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    602e:	9b04      	ldr	r3, [sp, #16]
    6030:	021b      	lsls	r3, r3, #8
    6032:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6036:	9a05      	ldr	r2, [sp, #20]
    6038:	4313      	orrs	r3, r2
    603a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    603c:	f008 ff38 	bl	eeb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6040:	9b01      	ldr	r3, [sp, #4]
    6042:	681b      	ldr	r3, [r3, #0]
    6044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6048:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	689b      	ldr	r3, [r3, #8]
    604e:	2201      	movs	r2, #1
    6050:	fa02 f303 	lsl.w	r3, r2, r3
    6054:	43db      	mvns	r3, r3
    6056:	9a02      	ldr	r2, [sp, #8]
    6058:	4013      	ands	r3, r2
    605a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    605c:	9b01      	ldr	r3, [sp, #4]
    605e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6062:	2b00      	cmp	r3, #0
    6064:	d001      	beq.n	606a <Port_Ci_Port_Ip_PinInit+0xba>
    6066:	2201      	movs	r2, #1
    6068:	e000      	b.n	606c <Port_Ci_Port_Ip_PinInit+0xbc>
    606a:	2200      	movs	r2, #0
    606c:	9b01      	ldr	r3, [sp, #4]
    606e:	689b      	ldr	r3, [r3, #8]
    6070:	fa02 f303 	lsl.w	r3, r2, r3
    6074:	9a02      	ldr	r2, [sp, #8]
    6076:	4313      	orrs	r3, r2
    6078:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    607a:	9b01      	ldr	r3, [sp, #4]
    607c:	681b      	ldr	r3, [r3, #0]
    607e:	9a02      	ldr	r2, [sp, #8]
    6080:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6084:	f008 ff40 	bl	ef08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6088:	9b04      	ldr	r3, [sp, #16]
    608a:	2b01      	cmp	r3, #1
    608c:	d16d      	bne.n	616a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    608e:	9b01      	ldr	r3, [sp, #4]
    6090:	695b      	ldr	r3, [r3, #20]
    6092:	2b02      	cmp	r3, #2
    6094:	d138      	bne.n	6108 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6096:	9b01      	ldr	r3, [sp, #4]
    6098:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    609c:	2b01      	cmp	r3, #1
    609e:	d10f      	bne.n	60c0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    60a0:	f008 ff58 	bl	ef54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	685b      	ldr	r3, [r3, #4]
    60a8:	6859      	ldr	r1, [r3, #4]
    60aa:	9b01      	ldr	r3, [sp, #4]
    60ac:	689b      	ldr	r3, [r3, #8]
    60ae:	2201      	movs	r2, #1
    60b0:	409a      	lsls	r2, r3
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	685b      	ldr	r3, [r3, #4]
    60b6:	430a      	orrs	r2, r1
    60b8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    60ba:	f008 ff77 	bl	efac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    60be:	e013      	b.n	60e8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    60c0:	9b01      	ldr	r3, [sp, #4]
    60c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60c6:	2b00      	cmp	r3, #0
    60c8:	d10e      	bne.n	60e8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    60ca:	f008 ff95 	bl	eff8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    60ce:	9b01      	ldr	r3, [sp, #4]
    60d0:	685b      	ldr	r3, [r3, #4]
    60d2:	6899      	ldr	r1, [r3, #8]
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	689b      	ldr	r3, [r3, #8]
    60d8:	2201      	movs	r2, #1
    60da:	409a      	lsls	r2, r3
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	685b      	ldr	r3, [r3, #4]
    60e0:	430a      	orrs	r2, r1
    60e2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    60e4:	f008 ffb4 	bl	f050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    60e8:	f008 ffd8 	bl	f09c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    60ec:	9b01      	ldr	r3, [sp, #4]
    60ee:	685b      	ldr	r3, [r3, #4]
    60f0:	6959      	ldr	r1, [r3, #20]
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	689b      	ldr	r3, [r3, #8]
    60f6:	2201      	movs	r2, #1
    60f8:	409a      	lsls	r2, r3
    60fa:	9b01      	ldr	r3, [sp, #4]
    60fc:	685b      	ldr	r3, [r3, #4]
    60fe:	430a      	orrs	r2, r1
    6100:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6102:	f008 fff7 	bl	f0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6106:	e030      	b.n	616a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6108:	f008 ffc8 	bl	f09c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    610c:	9b01      	ldr	r3, [sp, #4]
    610e:	685b      	ldr	r3, [r3, #4]
    6110:	6959      	ldr	r1, [r3, #20]
    6112:	9b01      	ldr	r3, [sp, #4]
    6114:	689b      	ldr	r3, [r3, #8]
    6116:	2201      	movs	r2, #1
    6118:	fa02 f303 	lsl.w	r3, r2, r3
    611c:	43da      	mvns	r2, r3
    611e:	9b01      	ldr	r3, [sp, #4]
    6120:	685b      	ldr	r3, [r3, #4]
    6122:	400a      	ands	r2, r1
    6124:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6126:	f008 ffe5 	bl	f0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    612a:	f009 f809 	bl	f140 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	685b      	ldr	r3, [r3, #4]
    6132:	6999      	ldr	r1, [r3, #24]
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	689b      	ldr	r3, [r3, #8]
    6138:	2201      	movs	r2, #1
    613a:	fa02 f303 	lsl.w	r3, r2, r3
    613e:	43da      	mvns	r2, r3
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	685b      	ldr	r3, [r3, #4]
    6144:	400a      	ands	r2, r1
    6146:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6148:	9b01      	ldr	r3, [sp, #4]
    614a:	695b      	ldr	r3, [r3, #20]
    614c:	2b03      	cmp	r3, #3
    614e:	d10a      	bne.n	6166 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	685b      	ldr	r3, [r3, #4]
    6154:	6999      	ldr	r1, [r3, #24]
    6156:	9b01      	ldr	r3, [sp, #4]
    6158:	689b      	ldr	r3, [r3, #8]
    615a:	2201      	movs	r2, #1
    615c:	409a      	lsls	r2, r3
    615e:	9b01      	ldr	r3, [sp, #4]
    6160:	685b      	ldr	r3, [r3, #4]
    6162:	430a      	orrs	r2, r1
    6164:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6166:	f009 f817 	bl	f198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    616a:	9b01      	ldr	r3, [sp, #4]
    616c:	681b      	ldr	r3, [r3, #0]
    616e:	9a01      	ldr	r2, [sp, #4]
    6170:	6892      	ldr	r2, [r2, #8]
    6172:	9905      	ldr	r1, [sp, #20]
    6174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6178:	bf00      	nop
    617a:	b007      	add	sp, #28
    617c:	f85d fb04 	ldr.w	pc, [sp], #4

00006180 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6180:	b500      	push	{lr}
    6182:	b085      	sub	sp, #20
    6184:	9001      	str	r0, [sp, #4]
    6186:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6188:	2300      	movs	r3, #0
    618a:	9303      	str	r3, [sp, #12]
    618c:	e00d      	b.n	61aa <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    618e:	9a03      	ldr	r2, [sp, #12]
    6190:	4613      	mov	r3, r2
    6192:	009b      	lsls	r3, r3, #2
    6194:	4413      	add	r3, r2
    6196:	00db      	lsls	r3, r3, #3
    6198:	461a      	mov	r2, r3
    619a:	9b00      	ldr	r3, [sp, #0]
    619c:	4413      	add	r3, r2
    619e:	4618      	mov	r0, r3
    61a0:	f7ff ff06 	bl	5fb0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    61a4:	9b03      	ldr	r3, [sp, #12]
    61a6:	3301      	adds	r3, #1
    61a8:	9303      	str	r3, [sp, #12]
    61aa:	9a03      	ldr	r2, [sp, #12]
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	429a      	cmp	r2, r3
    61b0:	d3ed      	bcc.n	618e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    61b2:	2300      	movs	r3, #0
}
    61b4:	4618      	mov	r0, r3
    61b6:	b005      	add	sp, #20
    61b8:	f85d fb04 	ldr.w	pc, [sp], #4

000061bc <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    61bc:	b500      	push	{lr}
    61be:	b087      	sub	sp, #28
    61c0:	9003      	str	r0, [sp, #12]
    61c2:	9102      	str	r1, [sp, #8]
    61c4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    61c6:	9a01      	ldr	r2, [sp, #4]
    61c8:	9902      	ldr	r1, [sp, #8]
    61ca:	9803      	ldr	r0, [sp, #12]
    61cc:	f7ff febc 	bl	5f48 <Port_Ci_Port_Ip_ConfigureInterleave>
    61d0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    61d2:	f009 f859 	bl	f288 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    61d6:	9b03      	ldr	r3, [sp, #12]
    61d8:	9a02      	ldr	r2, [sp, #8]
    61da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61de:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    61e0:	9b04      	ldr	r3, [sp, #16]
    61e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    61e6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    61e8:	9b05      	ldr	r3, [sp, #20]
    61ea:	021b      	lsls	r3, r3, #8
    61ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    61f0:	9a04      	ldr	r2, [sp, #16]
    61f2:	4313      	orrs	r3, r2
    61f4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    61f6:	9b03      	ldr	r3, [sp, #12]
    61f8:	9a02      	ldr	r2, [sp, #8]
    61fa:	9904      	ldr	r1, [sp, #16]
    61fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6200:	f009 f86e 	bl	f2e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6204:	bf00      	nop
    6206:	b007      	add	sp, #28
    6208:	f85d fb04 	ldr.w	pc, [sp], #4

0000620c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    620c:	b500      	push	{lr}
    620e:	b083      	sub	sp, #12
    6210:	9001      	str	r0, [sp, #4]
    6212:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6214:	f009 f88a 	bl	f32c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6218:	9b01      	ldr	r3, [sp, #4]
    621a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    621e:	2101      	movs	r1, #1
    6220:	9b00      	ldr	r3, [sp, #0]
    6222:	fa01 f303 	lsl.w	r3, r1, r3
    6226:	431a      	orrs	r2, r3
    6228:	9b01      	ldr	r3, [sp, #4]
    622a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    622e:	f009 f8a9 	bl	f384 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6232:	bf00      	nop
    6234:	b003      	add	sp, #12
    6236:	f85d fb04 	ldr.w	pc, [sp], #4

0000623a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    623a:	b500      	push	{lr}
    623c:	b083      	sub	sp, #12
    623e:	9001      	str	r0, [sp, #4]
    6240:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6242:	f009 f8c5 	bl	f3d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6246:	9b01      	ldr	r3, [sp, #4]
    6248:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    624c:	2101      	movs	r1, #1
    624e:	9b00      	ldr	r3, [sp, #0]
    6250:	fa01 f303 	lsl.w	r3, r1, r3
    6254:	43db      	mvns	r3, r3
    6256:	401a      	ands	r2, r3
    6258:	9b01      	ldr	r3, [sp, #4]
    625a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    625e:	f009 f8e3 	bl	f428 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6262:	bf00      	nop
    6264:	b003      	add	sp, #12
    6266:	f85d fb04 	ldr.w	pc, [sp], #4

0000626a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    626a:	b082      	sub	sp, #8
    626c:	9001      	str	r0, [sp, #4]
    626e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6270:	9b00      	ldr	r3, [sp, #0]
    6272:	785b      	ldrb	r3, [r3, #1]
    6274:	f003 0201 	and.w	r2, r3, #1
    6278:	9b01      	ldr	r3, [sp, #4]
    627a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    627e:	9b00      	ldr	r3, [sp, #0]
    6280:	789b      	ldrb	r3, [r3, #2]
    6282:	f003 021f 	and.w	r2, r3, #31
    6286:	9b01      	ldr	r3, [sp, #4]
    6288:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    628c:	bf00      	nop
    628e:	b002      	add	sp, #8
    6290:	4770      	bx	lr

00006292 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6292:	b086      	sub	sp, #24
    6294:	9003      	str	r0, [sp, #12]
    6296:	9301      	str	r3, [sp, #4]
    6298:	460b      	mov	r3, r1
    629a:	f8ad 300a 	strh.w	r3, [sp, #10]
    629e:	4613      	mov	r3, r2
    62a0:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    62a4:	2300      	movs	r3, #0
    62a6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    62aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ae:	f043 0301 	orr.w	r3, r3, #1
    62b2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    62b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ba:	f043 0302 	orr.w	r3, r3, #2
    62be:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    62c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62c6:	f043 0310 	orr.w	r3, r3, #16
    62ca:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    62ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62d6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    62da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    62e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    62e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    62ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    62f2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    62f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    62fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    62fe:	4013      	ands	r3, r2
    6300:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6304:	9b01      	ldr	r3, [sp, #4]
    6306:	2b00      	cmp	r3, #0
    6308:	d003      	beq.n	6312 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    630a:	9b01      	ldr	r3, [sp, #4]
    630c:	2b01      	cmp	r3, #1
    630e:	d00a      	beq.n	6326 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6310:	e013      	b.n	633a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6312:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6316:	041a      	lsls	r2, r3, #16
    6318:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    631c:	431a      	orrs	r2, r3
    631e:	9b03      	ldr	r3, [sp, #12]
    6320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6324:	e009      	b.n	633a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6326:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    632a:	041a      	lsls	r2, r3, #16
    632c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6330:	431a      	orrs	r2, r3
    6332:	9b03      	ldr	r3, [sp, #12]
    6334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6338:	bf00      	nop
    }
}
    633a:	bf00      	nop
    633c:	b006      	add	sp, #24
    633e:	4770      	bx	lr

00006340 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6340:	b500      	push	{lr}
    6342:	b087      	sub	sp, #28
    6344:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6346:	9b01      	ldr	r3, [sp, #4]
    6348:	885b      	ldrh	r3, [r3, #2]
    634a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    634e:	9b01      	ldr	r3, [sp, #4]
    6350:	689b      	ldr	r3, [r3, #8]
    6352:	7a1b      	ldrb	r3, [r3, #8]
    6354:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6358:	9b01      	ldr	r3, [sp, #4]
    635a:	689b      	ldr	r3, [r3, #8]
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6360:	9b01      	ldr	r3, [sp, #4]
    6362:	689b      	ldr	r3, [r3, #8]
    6364:	685b      	ldr	r3, [r3, #4]
    6366:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6368:	2300      	movs	r3, #0
    636a:	f8ad 3016 	strh.w	r3, [sp, #22]
    636e:	e111      	b.n	6594 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6370:	9b02      	ldr	r3, [sp, #8]
    6372:	2b02      	cmp	r3, #2
    6374:	d169      	bne.n	644a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6376:	f89d 3013 	ldrb.w	r3, [sp, #19]
    637a:	2b01      	cmp	r3, #1
    637c:	d11a      	bne.n	63b4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    637e:	9b01      	ldr	r3, [sp, #4]
    6380:	685a      	ldr	r2, [r3, #4]
    6382:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6386:	005b      	lsls	r3, r3, #1
    6388:	4413      	add	r3, r2
    638a:	881b      	ldrh	r3, [r3, #0]
    638c:	f003 021f 	and.w	r2, r3, #31
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	6859      	ldr	r1, [r3, #4]
    6394:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6398:	005b      	lsls	r3, r3, #1
    639a:	440b      	add	r3, r1
    639c:	881b      	ldrh	r3, [r3, #0]
    639e:	095b      	lsrs	r3, r3, #5
    63a0:	b29b      	uxth	r3, r3
    63a2:	4619      	mov	r1, r3
    63a4:	4b81      	ldr	r3, [pc, #516]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    63a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63aa:	2101      	movs	r1, #1
    63ac:	fa01 f202 	lsl.w	r2, r1, r2
    63b0:	605a      	str	r2, [r3, #4]
    63b2:	e01d      	b.n	63f0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    63b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d119      	bne.n	63f0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63bc:	9b01      	ldr	r3, [sp, #4]
    63be:	685a      	ldr	r2, [r3, #4]
    63c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63c4:	005b      	lsls	r3, r3, #1
    63c6:	4413      	add	r3, r2
    63c8:	881b      	ldrh	r3, [r3, #0]
    63ca:	f003 021f 	and.w	r2, r3, #31
    63ce:	9b01      	ldr	r3, [sp, #4]
    63d0:	6859      	ldr	r1, [r3, #4]
    63d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63d6:	005b      	lsls	r3, r3, #1
    63d8:	440b      	add	r3, r1
    63da:	881b      	ldrh	r3, [r3, #0]
    63dc:	095b      	lsrs	r3, r3, #5
    63de:	b29b      	uxth	r3, r3
    63e0:	4619      	mov	r1, r3
    63e2:	4b72      	ldr	r3, [pc, #456]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    63e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63e8:	2101      	movs	r1, #1
    63ea:	fa01 f202 	lsl.w	r2, r1, r2
    63ee:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    63f0:	f009 f840 	bl	f474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63f4:	9b01      	ldr	r3, [sp, #4]
    63f6:	685a      	ldr	r2, [r3, #4]
    63f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63fc:	005b      	lsls	r3, r3, #1
    63fe:	4413      	add	r3, r2
    6400:	881b      	ldrh	r3, [r3, #0]
    6402:	095b      	lsrs	r3, r3, #5
    6404:	b29b      	uxth	r3, r3
    6406:	461a      	mov	r2, r3
    6408:	4b68      	ldr	r3, [pc, #416]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    640e:	6959      	ldr	r1, [r3, #20]
    6410:	9b01      	ldr	r3, [sp, #4]
    6412:	685a      	ldr	r2, [r3, #4]
    6414:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6418:	005b      	lsls	r3, r3, #1
    641a:	4413      	add	r3, r2
    641c:	881b      	ldrh	r3, [r3, #0]
    641e:	f003 031f 	and.w	r3, r3, #31
    6422:	2201      	movs	r2, #1
    6424:	409a      	lsls	r2, r3
    6426:	9b01      	ldr	r3, [sp, #4]
    6428:	6858      	ldr	r0, [r3, #4]
    642a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    642e:	005b      	lsls	r3, r3, #1
    6430:	4403      	add	r3, r0
    6432:	881b      	ldrh	r3, [r3, #0]
    6434:	095b      	lsrs	r3, r3, #5
    6436:	b29b      	uxth	r3, r3
    6438:	4618      	mov	r0, r3
    643a:	4b5c      	ldr	r3, [pc, #368]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    643c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6440:	430a      	orrs	r2, r1
    6442:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6444:	f009 f842 	bl	f4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6448:	e086      	b.n	6558 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    644a:	f009 f813 	bl	f474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    644e:	9b01      	ldr	r3, [sp, #4]
    6450:	685a      	ldr	r2, [r3, #4]
    6452:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6456:	005b      	lsls	r3, r3, #1
    6458:	4413      	add	r3, r2
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	095b      	lsrs	r3, r3, #5
    645e:	b29b      	uxth	r3, r3
    6460:	461a      	mov	r2, r3
    6462:	4b52      	ldr	r3, [pc, #328]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    6464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6468:	6959      	ldr	r1, [r3, #20]
    646a:	9b01      	ldr	r3, [sp, #4]
    646c:	685a      	ldr	r2, [r3, #4]
    646e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6472:	005b      	lsls	r3, r3, #1
    6474:	4413      	add	r3, r2
    6476:	881b      	ldrh	r3, [r3, #0]
    6478:	f003 031f 	and.w	r3, r3, #31
    647c:	2201      	movs	r2, #1
    647e:	fa02 f303 	lsl.w	r3, r2, r3
    6482:	43da      	mvns	r2, r3
    6484:	9b01      	ldr	r3, [sp, #4]
    6486:	6858      	ldr	r0, [r3, #4]
    6488:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    648c:	005b      	lsls	r3, r3, #1
    648e:	4403      	add	r3, r0
    6490:	881b      	ldrh	r3, [r3, #0]
    6492:	095b      	lsrs	r3, r3, #5
    6494:	b29b      	uxth	r3, r3
    6496:	4618      	mov	r0, r3
    6498:	4b44      	ldr	r3, [pc, #272]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    649a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    649e:	400a      	ands	r2, r1
    64a0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64a2:	f009 f813 	bl	f4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    64a6:	f009 f837 	bl	f518 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64aa:	9b01      	ldr	r3, [sp, #4]
    64ac:	685a      	ldr	r2, [r3, #4]
    64ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64b2:	005b      	lsls	r3, r3, #1
    64b4:	4413      	add	r3, r2
    64b6:	881b      	ldrh	r3, [r3, #0]
    64b8:	095b      	lsrs	r3, r3, #5
    64ba:	b29b      	uxth	r3, r3
    64bc:	461a      	mov	r2, r3
    64be:	4b3b      	ldr	r3, [pc, #236]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    64c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64c4:	6999      	ldr	r1, [r3, #24]
    64c6:	9b01      	ldr	r3, [sp, #4]
    64c8:	685a      	ldr	r2, [r3, #4]
    64ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ce:	005b      	lsls	r3, r3, #1
    64d0:	4413      	add	r3, r2
    64d2:	881b      	ldrh	r3, [r3, #0]
    64d4:	f003 031f 	and.w	r3, r3, #31
    64d8:	2201      	movs	r2, #1
    64da:	fa02 f303 	lsl.w	r3, r2, r3
    64de:	43da      	mvns	r2, r3
    64e0:	9b01      	ldr	r3, [sp, #4]
    64e2:	6858      	ldr	r0, [r3, #4]
    64e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64e8:	005b      	lsls	r3, r3, #1
    64ea:	4403      	add	r3, r0
    64ec:	881b      	ldrh	r3, [r3, #0]
    64ee:	095b      	lsrs	r3, r3, #5
    64f0:	b29b      	uxth	r3, r3
    64f2:	4618      	mov	r0, r3
    64f4:	4b2d      	ldr	r3, [pc, #180]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    64f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64fa:	400a      	ands	r2, r1
    64fc:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    64fe:	9b02      	ldr	r3, [sp, #8]
    6500:	2b03      	cmp	r3, #3
    6502:	d127      	bne.n	6554 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6504:	9b01      	ldr	r3, [sp, #4]
    6506:	685a      	ldr	r2, [r3, #4]
    6508:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    650c:	005b      	lsls	r3, r3, #1
    650e:	4413      	add	r3, r2
    6510:	881b      	ldrh	r3, [r3, #0]
    6512:	095b      	lsrs	r3, r3, #5
    6514:	b29b      	uxth	r3, r3
    6516:	461a      	mov	r2, r3
    6518:	4b24      	ldr	r3, [pc, #144]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    651a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    651e:	6999      	ldr	r1, [r3, #24]
    6520:	9b01      	ldr	r3, [sp, #4]
    6522:	685a      	ldr	r2, [r3, #4]
    6524:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6528:	005b      	lsls	r3, r3, #1
    652a:	4413      	add	r3, r2
    652c:	881b      	ldrh	r3, [r3, #0]
    652e:	f003 031f 	and.w	r3, r3, #31
    6532:	2201      	movs	r2, #1
    6534:	409a      	lsls	r2, r3
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	6858      	ldr	r0, [r3, #4]
    653a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    653e:	005b      	lsls	r3, r3, #1
    6540:	4403      	add	r3, r0
    6542:	881b      	ldrh	r3, [r3, #0]
    6544:	095b      	lsrs	r3, r3, #5
    6546:	b29b      	uxth	r3, r3
    6548:	4618      	mov	r0, r3
    654a:	4b18      	ldr	r3, [pc, #96]	; (65ac <Port_Ipw_Init_UnusedPins+0x26c>)
    654c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6550:	430a      	orrs	r2, r1
    6552:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6554:	f009 f80c 	bl	f570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6558:	9b01      	ldr	r3, [sp, #4]
    655a:	685a      	ldr	r2, [r3, #4]
    655c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6560:	005b      	lsls	r3, r3, #1
    6562:	4413      	add	r3, r2
    6564:	881b      	ldrh	r3, [r3, #0]
    6566:	095b      	lsrs	r3, r3, #5
    6568:	b29b      	uxth	r3, r3
    656a:	461a      	mov	r2, r3
    656c:	4b10      	ldr	r3, [pc, #64]	; (65b0 <Port_Ipw_Init_UnusedPins+0x270>)
    656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6572:	9a01      	ldr	r2, [sp, #4]
    6574:	6851      	ldr	r1, [r2, #4]
    6576:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    657a:	0052      	lsls	r2, r2, #1
    657c:	440a      	add	r2, r1
    657e:	8812      	ldrh	r2, [r2, #0]
    6580:	f002 021f 	and.w	r2, r2, #31
    6584:	9903      	ldr	r1, [sp, #12]
    6586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    658a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    658e:	3301      	adds	r3, #1
    6590:	f8ad 3016 	strh.w	r3, [sp, #22]
    6594:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6598:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    659c:	429a      	cmp	r2, r3
    659e:	f4ff aee7 	bcc.w	6370 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    65a2:	bf00      	nop
    65a4:	bf00      	nop
    65a6:	b007      	add	sp, #28
    65a8:	f85d fb04 	ldr.w	pc, [sp], #4
    65ac:	000109cc 	.word	0x000109cc
    65b0:	000109b8 	.word	0x000109b8

000065b4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    65b4:	b500      	push	{lr}
    65b6:	b085      	sub	sp, #20
    65b8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    65ba:	9b01      	ldr	r3, [sp, #4]
    65bc:	7c1b      	ldrb	r3, [r3, #16]
    65be:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    65c2:	2300      	movs	r3, #0
    65c4:	f8ad 300e 	strh.w	r3, [sp, #14]
    65c8:	e035      	b.n	6636 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    65ca:	9b01      	ldr	r3, [sp, #4]
    65cc:	695a      	ldr	r2, [r3, #20]
    65ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65d2:	00db      	lsls	r3, r3, #3
    65d4:	4413      	add	r3, r2
    65d6:	781b      	ldrb	r3, [r3, #0]
    65d8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    65dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65e0:	4a1f      	ldr	r2, [pc, #124]	; (6660 <Port_Ipw_Init+0xac>)
    65e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    65e6:	9b01      	ldr	r3, [sp, #4]
    65e8:	695a      	ldr	r2, [r3, #20]
    65ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65ee:	00db      	lsls	r3, r3, #3
    65f0:	4413      	add	r3, r2
    65f2:	4619      	mov	r1, r3
    65f4:	f7ff fe39 	bl	626a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    65f8:	f009 f928 	bl	f84c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    65fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6600:	4a17      	ldr	r2, [pc, #92]	; (6660 <Port_Ipw_Init+0xac>)
    6602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6606:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    660a:	9b01      	ldr	r3, [sp, #4]
    660c:	695a      	ldr	r2, [r3, #20]
    660e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6612:	00db      	lsls	r3, r3, #3
    6614:	4413      	add	r3, r2
    6616:	685a      	ldr	r2, [r3, #4]
    6618:	f89d 300c 	ldrb.w	r3, [sp, #12]
    661c:	4810      	ldr	r0, [pc, #64]	; (6660 <Port_Ipw_Init+0xac>)
    661e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6622:	430a      	orrs	r2, r1
    6624:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6628:	f009 f93c 	bl	f8a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    662c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6630:	3301      	adds	r3, #1
    6632:	f8ad 300e 	strh.w	r3, [sp, #14]
    6636:	f89d 300d 	ldrb.w	r3, [sp, #13]
    663a:	b29b      	uxth	r3, r3
    663c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6640:	429a      	cmp	r2, r3
    6642:	d3c2      	bcc.n	65ca <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6644:	9b01      	ldr	r3, [sp, #4]
    6646:	6a1b      	ldr	r3, [r3, #32]
    6648:	4619      	mov	r1, r3
    664a:	2001      	movs	r0, #1
    664c:	f7ff fd98 	bl	6180 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6650:	9801      	ldr	r0, [sp, #4]
    6652:	f7ff fe75 	bl	6340 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6656:	bf00      	nop
    6658:	b005      	add	sp, #20
    665a:	f85d fb04 	ldr.w	pc, [sp], #4
    665e:	bf00      	nop
    6660:	000109b8 	.word	0x000109b8

00006664 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6664:	b500      	push	{lr}
    6666:	b085      	sub	sp, #20
    6668:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    666a:	9b01      	ldr	r3, [sp, #4]
    666c:	881b      	ldrh	r3, [r3, #0]
    666e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6672:	2300      	movs	r3, #0
    6674:	f8ad 300e 	strh.w	r3, [sp, #14]
    6678:	e0d2      	b.n	6820 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	68d9      	ldr	r1, [r3, #12]
    667e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6682:	4613      	mov	r3, r2
    6684:	009b      	lsls	r3, r3, #2
    6686:	4413      	add	r3, r2
    6688:	009b      	lsls	r3, r3, #2
    668a:	440b      	add	r3, r1
    668c:	7c5b      	ldrb	r3, [r3, #17]
    668e:	f083 0301 	eor.w	r3, r3, #1
    6692:	b2db      	uxtb	r3, r3
    6694:	2b00      	cmp	r3, #0
    6696:	f000 80be 	beq.w	6816 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    669a:	9b01      	ldr	r3, [sp, #4]
    669c:	68d9      	ldr	r1, [r3, #12]
    669e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66a2:	4613      	mov	r3, r2
    66a4:	009b      	lsls	r3, r3, #2
    66a6:	4413      	add	r3, r2
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	440b      	add	r3, r1
    66ac:	7c1b      	ldrb	r3, [r3, #16]
    66ae:	2b00      	cmp	r3, #0
    66b0:	f000 80b1 	beq.w	6816 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    66b4:	9b01      	ldr	r3, [sp, #4]
    66b6:	68d9      	ldr	r1, [r3, #12]
    66b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66bc:	4613      	mov	r3, r2
    66be:	009b      	lsls	r3, r3, #2
    66c0:	4413      	add	r3, r2
    66c2:	009b      	lsls	r3, r3, #2
    66c4:	440b      	add	r3, r1
    66c6:	881b      	ldrh	r3, [r3, #0]
    66c8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    66cc:	9b01      	ldr	r3, [sp, #4]
    66ce:	68d9      	ldr	r1, [r3, #12]
    66d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66d4:	4613      	mov	r3, r2
    66d6:	009b      	lsls	r3, r3, #2
    66d8:	4413      	add	r3, r2
    66da:	009b      	lsls	r3, r3, #2
    66dc:	440b      	add	r3, r1
    66de:	68db      	ldr	r3, [r3, #12]
    66e0:	2b02      	cmp	r3, #2
    66e2:	d11d      	bne.n	6720 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    66e4:	f009 f9fa 	bl	fadc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66ec:	095b      	lsrs	r3, r3, #5
    66ee:	b29b      	uxth	r3, r3
    66f0:	461a      	mov	r2, r3
    66f2:	4b51      	ldr	r3, [pc, #324]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66f8:	6959      	ldr	r1, [r3, #20]
    66fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66fe:	f003 031f 	and.w	r3, r3, #31
    6702:	2201      	movs	r2, #1
    6704:	409a      	lsls	r2, r3
    6706:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    670a:	095b      	lsrs	r3, r3, #5
    670c:	b29b      	uxth	r3, r3
    670e:	4618      	mov	r0, r3
    6710:	4b49      	ldr	r3, [pc, #292]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6712:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6716:	430a      	orrs	r2, r1
    6718:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    671a:	f009 fa0b 	bl	fb34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    671e:	e07a      	b.n	6816 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6720:	9b01      	ldr	r3, [sp, #4]
    6722:	68d9      	ldr	r1, [r3, #12]
    6724:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6728:	4613      	mov	r3, r2
    672a:	009b      	lsls	r3, r3, #2
    672c:	4413      	add	r3, r2
    672e:	009b      	lsls	r3, r3, #2
    6730:	440b      	add	r3, r1
    6732:	68db      	ldr	r3, [r3, #12]
    6734:	2b01      	cmp	r3, #1
    6736:	d00b      	beq.n	6750 <Port_Ipw_RefreshPortDirection+0xec>
    6738:	9b01      	ldr	r3, [sp, #4]
    673a:	68d9      	ldr	r1, [r3, #12]
    673c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6740:	4613      	mov	r3, r2
    6742:	009b      	lsls	r3, r3, #2
    6744:	4413      	add	r3, r2
    6746:	009b      	lsls	r3, r3, #2
    6748:	440b      	add	r3, r1
    674a:	68db      	ldr	r3, [r3, #12]
    674c:	2b03      	cmp	r3, #3
    674e:	d162      	bne.n	6816 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6750:	f009 f9c4 	bl	fadc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6754:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6758:	095b      	lsrs	r3, r3, #5
    675a:	b29b      	uxth	r3, r3
    675c:	461a      	mov	r2, r3
    675e:	4b36      	ldr	r3, [pc, #216]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6764:	6959      	ldr	r1, [r3, #20]
    6766:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    676a:	f003 031f 	and.w	r3, r3, #31
    676e:	2201      	movs	r2, #1
    6770:	fa02 f303 	lsl.w	r3, r2, r3
    6774:	43da      	mvns	r2, r3
    6776:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    677a:	095b      	lsrs	r3, r3, #5
    677c:	b29b      	uxth	r3, r3
    677e:	4618      	mov	r0, r3
    6780:	4b2d      	ldr	r3, [pc, #180]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6782:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6786:	400a      	ands	r2, r1
    6788:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    678a:	f009 f9d3 	bl	fb34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    678e:	f009 f9f7 	bl	fb80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6792:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6796:	095b      	lsrs	r3, r3, #5
    6798:	b29b      	uxth	r3, r3
    679a:	461a      	mov	r2, r3
    679c:	4b26      	ldr	r3, [pc, #152]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67a2:	6999      	ldr	r1, [r3, #24]
    67a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67a8:	f003 031f 	and.w	r3, r3, #31
    67ac:	2201      	movs	r2, #1
    67ae:	fa02 f303 	lsl.w	r3, r2, r3
    67b2:	43da      	mvns	r2, r3
    67b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67b8:	095b      	lsrs	r3, r3, #5
    67ba:	b29b      	uxth	r3, r3
    67bc:	4618      	mov	r0, r3
    67be:	4b1e      	ldr	r3, [pc, #120]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67c4:	400a      	ands	r2, r1
    67c6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67c8:	9b01      	ldr	r3, [sp, #4]
    67ca:	68d9      	ldr	r1, [r3, #12]
    67cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67d0:	4613      	mov	r3, r2
    67d2:	009b      	lsls	r3, r3, #2
    67d4:	4413      	add	r3, r2
    67d6:	009b      	lsls	r3, r3, #2
    67d8:	440b      	add	r3, r1
    67da:	68db      	ldr	r3, [r3, #12]
    67dc:	2b03      	cmp	r3, #3
    67de:	d118      	bne.n	6812 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e4:	095b      	lsrs	r3, r3, #5
    67e6:	b29b      	uxth	r3, r3
    67e8:	461a      	mov	r2, r3
    67ea:	4b13      	ldr	r3, [pc, #76]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67f0:	6999      	ldr	r1, [r3, #24]
    67f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67f6:	f003 031f 	and.w	r3, r3, #31
    67fa:	2201      	movs	r2, #1
    67fc:	409a      	lsls	r2, r3
    67fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6802:	095b      	lsrs	r3, r3, #5
    6804:	b29b      	uxth	r3, r3
    6806:	4618      	mov	r0, r3
    6808:	4b0b      	ldr	r3, [pc, #44]	; (6838 <Port_Ipw_RefreshPortDirection+0x1d4>)
    680a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    680e:	430a      	orrs	r2, r1
    6810:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6812:	f009 f9e1 	bl	fbd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6816:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    681a:	3301      	adds	r3, #1
    681c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6820:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6824:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6828:	429a      	cmp	r2, r3
    682a:	f4ff af26 	bcc.w	667a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    682e:	bf00      	nop
    6830:	bf00      	nop
    6832:	b005      	add	sp, #20
    6834:	f85d fb04 	ldr.w	pc, [sp], #4
    6838:	000109cc 	.word	0x000109cc

0000683c <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    683c:	b500      	push	{lr}
    683e:	b083      	sub	sp, #12
    6840:	4603      	mov	r3, r0
    6842:	460a      	mov	r2, r1
    6844:	f88d 3007 	strb.w	r3, [sp, #7]
    6848:	4613      	mov	r3, r2
    684a:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    684e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6852:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6856:	2100      	movs	r1, #0
    6858:	207b      	movs	r0, #123	; 0x7b
    685a:	f009 fc5d 	bl	10118 <Det_ReportRuntimeError>
}
    685e:	bf00      	nop
    6860:	b003      	add	sp, #12
    6862:	f85d fb04 	ldr.w	pc, [sp], #4

00006866 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6866:	b500      	push	{lr}
    6868:	b085      	sub	sp, #20
    686a:	4603      	mov	r3, r0
    686c:	460a      	mov	r2, r1
    686e:	f88d 3007 	strb.w	r3, [sp, #7]
    6872:	4613      	mov	r3, r2
    6874:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6878:	2300      	movs	r3, #0
    687a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    687e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6882:	490e      	ldr	r1, [pc, #56]	; (68bc <Adc_ValidateNotBusyNoQueue+0x56>)
    6884:	4613      	mov	r3, r2
    6886:	005b      	lsls	r3, r3, #1
    6888:	4413      	add	r3, r2
    688a:	005b      	lsls	r3, r3, #1
    688c:	440b      	add	r3, r1
    688e:	881b      	ldrh	r3, [r3, #0]
    6890:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6894:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6898:	2b00      	cmp	r3, #0
    689a:	d008      	beq.n	68ae <Adc_ValidateNotBusyNoQueue+0x48>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    689c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68a0:	210b      	movs	r1, #11
    68a2:	4618      	mov	r0, r3
    68a4:	f7ff ffca 	bl	683c <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    68a8:	2301      	movs	r3, #1
    68aa:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    68ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    68b2:	4618      	mov	r0, r3
    68b4:	b005      	add	sp, #20
    68b6:	f85d fb04 	ldr.w	pc, [sp], #4
    68ba:	bf00      	nop
    68bc:	1fff8d0c 	.word	0x1fff8d0c

000068c0 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    68c0:	b500      	push	{lr}
    68c2:	b085      	sub	sp, #20
    68c4:	4603      	mov	r3, r0
    68c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    68ca:	460b      	mov	r3, r1
    68cc:	f88d 3005 	strb.w	r3, [sp, #5]
    68d0:	4613      	mov	r3, r2
    68d2:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    68d6:	2301      	movs	r3, #1
    68d8:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    68dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    68e0:	4917      	ldr	r1, [pc, #92]	; (6940 <Adc_ValidateNotBusyNoPrio+0x80>)
    68e2:	4613      	mov	r3, r2
    68e4:	005b      	lsls	r3, r3, #1
    68e6:	4413      	add	r3, r2
    68e8:	00db      	lsls	r3, r3, #3
    68ea:	440b      	add	r3, r1
    68ec:	681b      	ldr	r3, [r3, #0]
    68ee:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    68f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68f4:	f083 0301 	eor.w	r3, r3, #1
    68f8:	b2db      	uxtb	r3, r3
    68fa:	2b00      	cmp	r3, #0
    68fc:	d007      	beq.n	690e <Adc_ValidateNotBusyNoPrio+0x4e>
    68fe:	9b02      	ldr	r3, [sp, #8]
    6900:	2b00      	cmp	r3, #0
    6902:	d004      	beq.n	690e <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6904:	210b      	movs	r1, #11
    6906:	2002      	movs	r0, #2
    6908:	f7ff ff98 	bl	683c <Adc_ReportDetRuntimeError>
    690c:	e011      	b.n	6932 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    690e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6912:	2b00      	cmp	r3, #0
    6914:	d00a      	beq.n	692c <Adc_ValidateNotBusyNoPrio+0x6c>
    6916:	9b02      	ldr	r3, [sp, #8]
    6918:	2b00      	cmp	r3, #0
    691a:	d007      	beq.n	692c <Adc_ValidateNotBusyNoPrio+0x6c>
    691c:	9b02      	ldr	r3, [sp, #8]
    691e:	2b03      	cmp	r3, #3
    6920:	d004      	beq.n	692c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6922:	210b      	movs	r1, #11
    6924:	2002      	movs	r0, #2
    6926:	f7ff ff89 	bl	683c <Adc_ReportDetRuntimeError>
    692a:	e002      	b.n	6932 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    692c:	2300      	movs	r3, #0
    692e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    6932:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6936:	4618      	mov	r0, r3
    6938:	b005      	add	sp, #20
    693a:	f85d fb04 	ldr.w	pc, [sp], #4
    693e:	bf00      	nop
    6940:	1fff8cf4 	.word	0x1fff8cf4

00006944 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    6944:	b500      	push	{lr}
    6946:	b087      	sub	sp, #28
    6948:	4603      	mov	r3, r0
    694a:	460a      	mov	r2, r1
    694c:	f88d 3007 	strb.w	r3, [sp, #7]
    6950:	4613      	mov	r3, r2
    6952:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6956:	2300      	movs	r3, #0
    6958:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    695c:	2300      	movs	r3, #0
    695e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6962:	e02d      	b.n	69c0 <Adc_ValidateCheckGroupNotConversion+0x7c>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    6964:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6968:	4a1d      	ldr	r2, [pc, #116]	; (69e0 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    696a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    696e:	6859      	ldr	r1, [r3, #4]
    6970:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6974:	4613      	mov	r3, r2
    6976:	00db      	lsls	r3, r3, #3
    6978:	1a9b      	subs	r3, r3, r2
    697a:	00db      	lsls	r3, r3, #3
    697c:	440b      	add	r3, r1
    697e:	881b      	ldrh	r3, [r3, #0]
    6980:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6984:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6988:	4916      	ldr	r1, [pc, #88]	; (69e4 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    698a:	4613      	mov	r3, r2
    698c:	005b      	lsls	r3, r3, #1
    698e:	4413      	add	r3, r2
    6990:	00db      	lsls	r3, r3, #3
    6992:	440b      	add	r3, r1
    6994:	681b      	ldr	r3, [r3, #0]
    6996:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6998:	9b03      	ldr	r3, [sp, #12]
    699a:	2b00      	cmp	r3, #0
    699c:	d00b      	beq.n	69b6 <Adc_ValidateCheckGroupNotConversion+0x72>
    699e:	9b03      	ldr	r3, [sp, #12]
    69a0:	2b03      	cmp	r3, #3
    69a2:	d008      	beq.n	69b6 <Adc_ValidateCheckGroupNotConversion+0x72>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    69a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69a8:	210b      	movs	r1, #11
    69aa:	4618      	mov	r0, r3
    69ac:	f7ff ff46 	bl	683c <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    69b0:	2301      	movs	r3, #1
    69b2:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    69b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69ba:	3301      	adds	r3, #1
    69bc:	f8ad 3016 	strh.w	r3, [sp, #22]
    69c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    69c4:	4a06      	ldr	r2, [pc, #24]	; (69e0 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    69c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ca:	891b      	ldrh	r3, [r3, #8]
    69cc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69d0:	429a      	cmp	r2, r3
    69d2:	d3c7      	bcc.n	6964 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    69d4:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    69d8:	4618      	mov	r0, r3
    69da:	b007      	add	sp, #28
    69dc:	f85d fb04 	ldr.w	pc, [sp], #4
    69e0:	1fff8cf0 	.word	0x1fff8cf0
    69e4:	1fff8cf4 	.word	0x1fff8cf4

000069e8 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    69e8:	b500      	push	{lr}
    69ea:	b085      	sub	sp, #20
    69ec:	4603      	mov	r3, r0
    69ee:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    69f2:	2300      	movs	r3, #0
    69f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    69f8:	2301      	movs	r3, #1
    69fa:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    69fe:	2300      	movs	r3, #0
    6a00:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a04:	2300      	movs	r3, #0
    6a06:	f88d 300d 	strb.w	r3, [sp, #13]
    6a0a:	e01d      	b.n	6a48 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a10:	4a1b      	ldr	r2, [pc, #108]	; (6a80 <Adc_ValidateDeInitNotBusy+0x98>)
    6a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a16:	681a      	ldr	r2, [r3, #0]
    6a18:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a1c:	4413      	add	r3, r2
    6a1e:	7f9b      	ldrb	r3, [r3, #30]
    6a20:	2b01      	cmp	r3, #1
    6a22:	d10c      	bne.n	6a3e <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6a24:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a28:	2101      	movs	r1, #1
    6a2a:	4618      	mov	r0, r3
    6a2c:	f7ff ff1b 	bl	6866 <Adc_ValidateNotBusyNoQueue>
    6a30:	4603      	mov	r3, r0
    6a32:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6a36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a3a:	2b01      	cmp	r3, #1
    6a3c:	d009      	beq.n	6a52 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a42:	3301      	adds	r3, #1
    6a44:	f88d 300d 	strb.w	r3, [sp, #13]
    6a48:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a4c:	2b01      	cmp	r3, #1
    6a4e:	d9dd      	bls.n	6a0c <Adc_ValidateDeInitNotBusy+0x24>
    6a50:	e000      	b.n	6a54 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6a52:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6a54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d10b      	bne.n	6a74 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6a5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a60:	4619      	mov	r1, r3
    6a62:	2001      	movs	r0, #1
    6a64:	f7ff ff6e 	bl	6944 <Adc_ValidateCheckGroupNotConversion>
    6a68:	4603      	mov	r3, r0
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d102      	bne.n	6a74 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6a6e:	2300      	movs	r3, #0
    6a70:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6a74:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6a78:	4618      	mov	r0, r3
    6a7a:	b005      	add	sp, #20
    6a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a80:	1fff8cf0 	.word	0x1fff8cf0

00006a84 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6a84:	b500      	push	{lr}
    6a86:	b085      	sub	sp, #20
    6a88:	4603      	mov	r3, r0
    6a8a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6a8e:	2301      	movs	r3, #1
    6a90:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6a94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6a98:	490b      	ldr	r1, [pc, #44]	; (6ac8 <Adc_ValidateSetupBufferNotBusy+0x44>)
    6a9a:	4613      	mov	r3, r2
    6a9c:	005b      	lsls	r3, r3, #1
    6a9e:	4413      	add	r3, r2
    6aa0:	00db      	lsls	r3, r3, #3
    6aa2:	440b      	add	r3, r1
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d004      	beq.n	6ab4 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6aaa:	210b      	movs	r1, #11
    6aac:	200c      	movs	r0, #12
    6aae:	f7ff fec5 	bl	683c <Adc_ReportDetRuntimeError>
    6ab2:	e002      	b.n	6aba <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6ab4:	2300      	movs	r3, #0
    6ab6:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6aba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6abe:	4618      	mov	r0, r3
    6ac0:	b005      	add	sp, #20
    6ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ac6:	bf00      	nop
    6ac8:	1fff8cf4 	.word	0x1fff8cf4

00006acc <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6acc:	b500      	push	{lr}
    6ace:	b085      	sub	sp, #20
    6ad0:	4603      	mov	r3, r0
    6ad2:	460a      	mov	r2, r1
    6ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ad8:	4613      	mov	r3, r2
    6ada:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6ade:	2300      	movs	r3, #0
    6ae0:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6ae4:	2300      	movs	r3, #0
    6ae6:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6aea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6aee:	4a34      	ldr	r2, [pc, #208]	; (6bc0 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af4:	68da      	ldr	r2, [r3, #12]
    6af6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6afa:	005b      	lsls	r3, r3, #1
    6afc:	4413      	add	r3, r2
    6afe:	881b      	ldrh	r3, [r3, #0]
    6b00:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b04:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b08:	4a2d      	ldr	r2, [pc, #180]	; (6bc0 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b0e:	6859      	ldr	r1, [r3, #4]
    6b10:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6b14:	4613      	mov	r3, r2
    6b16:	00db      	lsls	r3, r3, #3
    6b18:	1a9b      	subs	r3, r3, r2
    6b1a:	00db      	lsls	r3, r3, #3
    6b1c:	440b      	add	r3, r1
    6b1e:	689b      	ldr	r3, [r3, #8]
    6b20:	2b00      	cmp	r3, #0
    6b22:	d02f      	beq.n	6b84 <Adc_ValidateStateStartGroupConvNotBusy+0xb8>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b24:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b28:	4a25      	ldr	r2, [pc, #148]	; (6bc0 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b2e:	6859      	ldr	r1, [r3, #4]
    6b30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6b34:	4613      	mov	r3, r2
    6b36:	00db      	lsls	r3, r3, #3
    6b38:	1a9b      	subs	r3, r3, r2
    6b3a:	00db      	lsls	r3, r3, #3
    6b3c:	440b      	add	r3, r1
    6b3e:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b40:	2b01      	cmp	r3, #1
    6b42:	d122      	bne.n	6b8a <Adc_ValidateStateStartGroupConvNotBusy+0xbe>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b44:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b48:	4a1d      	ldr	r2, [pc, #116]	; (6bc0 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b4e:	6859      	ldr	r1, [r3, #4]
    6b50:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6b54:	4613      	mov	r3, r2
    6b56:	00db      	lsls	r3, r3, #3
    6b58:	1a9b      	subs	r3, r3, r2
    6b5a:	00db      	lsls	r3, r3, #3
    6b5c:	440b      	add	r3, r1
    6b5e:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b60:	2b01      	cmp	r3, #1
    6b62:	d112      	bne.n	6b8a <Adc_ValidateStateStartGroupConvNotBusy+0xbe>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6b64:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b68:	4a15      	ldr	r2, [pc, #84]	; (6bc0 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b6e:	6859      	ldr	r1, [r3, #4]
    6b70:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6b74:	4613      	mov	r3, r2
    6b76:	00db      	lsls	r3, r3, #3
    6b78:	1a9b      	subs	r3, r3, r2
    6b7a:	00db      	lsls	r3, r3, #3
    6b7c:	440b      	add	r3, r1
    6b7e:	69db      	ldr	r3, [r3, #28]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b80:	2b00      	cmp	r3, #0
    6b82:	d102      	bne.n	6b8a <Adc_ValidateStateStartGroupConvNotBusy+0xbe>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6b84:	2301      	movs	r3, #1
    6b86:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6b8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b8e:	2b01      	cmp	r3, #1
    6b90:	d104      	bne.n	6b9c <Adc_ValidateStateStartGroupConvNotBusy+0xd0>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6b92:	210b      	movs	r1, #11
    6b94:	2002      	movs	r0, #2
    6b96:	f7ff fe51 	bl	683c <Adc_ReportDetRuntimeError>
    6b9a:	e00b      	b.n	6bb4 <Adc_ValidateStateStartGroupConvNotBusy+0xe8>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6b9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ba0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6ba4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ba8:	4618      	mov	r0, r3
    6baa:	f7ff fe89 	bl	68c0 <Adc_ValidateNotBusyNoPrio>
    6bae:	4603      	mov	r3, r0
    6bb0:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6bb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6bb8:	4618      	mov	r0, r3
    6bba:	b005      	add	sp, #20
    6bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    6bc0:	1fff8cf0 	.word	0x1fff8cf0

00006bc4 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6bc4:	b500      	push	{lr}
    6bc6:	b085      	sub	sp, #20
    6bc8:	4603      	mov	r3, r0
    6bca:	f88d 3007 	strb.w	r3, [sp, #7]
    6bce:	460b      	mov	r3, r1
    6bd0:	f8ad 3004 	strh.w	r3, [sp, #4]
    6bd4:	4613      	mov	r3, r2
    6bd6:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6bda:	2300      	movs	r3, #0
    6bdc:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6be4:	2b0b      	cmp	r3, #11
    6be6:	d03b      	beq.n	6c60 <Adc_ValidateStateNotIdle+0x9c>
    6be8:	2b0b      	cmp	r3, #11
    6bea:	dc4e      	bgt.n	6c8a <Adc_ValidateStateNotIdle+0xc6>
    6bec:	2b03      	cmp	r3, #3
    6bee:	d022      	beq.n	6c36 <Adc_ValidateStateNotIdle+0x72>
    6bf0:	2b04      	cmp	r3, #4
    6bf2:	d14a      	bne.n	6c8a <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6bf4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bf8:	492a      	ldr	r1, [pc, #168]	; (6ca4 <Adc_ValidateStateNotIdle+0xe0>)
    6bfa:	4613      	mov	r3, r2
    6bfc:	005b      	lsls	r3, r3, #1
    6bfe:	4413      	add	r3, r2
    6c00:	00db      	lsls	r3, r3, #3
    6c02:	440b      	add	r3, r1
    6c04:	681b      	ldr	r3, [r3, #0]
    6c06:	2b00      	cmp	r3, #0
    6c08:	d141      	bne.n	6c8e <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6c0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c0e:	4925      	ldr	r1, [pc, #148]	; (6ca4 <Adc_ValidateStateNotIdle+0xe0>)
    6c10:	4613      	mov	r3, r2
    6c12:	005b      	lsls	r3, r3, #1
    6c14:	4413      	add	r3, r2
    6c16:	00db      	lsls	r3, r3, #3
    6c18:	440b      	add	r3, r1
    6c1a:	3304      	adds	r3, #4
    6c1c:	681b      	ldr	r3, [r3, #0]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d135      	bne.n	6c8e <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c26:	210c      	movs	r1, #12
    6c28:	4618      	mov	r0, r3
    6c2a:	f7ff fe07 	bl	683c <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6c2e:	2301      	movs	r3, #1
    6c30:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6c34:	e02b      	b.n	6c8e <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c36:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c3a:	491a      	ldr	r1, [pc, #104]	; (6ca4 <Adc_ValidateStateNotIdle+0xe0>)
    6c3c:	4613      	mov	r3, r2
    6c3e:	005b      	lsls	r3, r3, #1
    6c40:	4413      	add	r3, r2
    6c42:	00db      	lsls	r3, r3, #3
    6c44:	440b      	add	r3, r1
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d122      	bne.n	6c92 <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c50:	210c      	movs	r1, #12
    6c52:	4618      	mov	r0, r3
    6c54:	f7ff fdf2 	bl	683c <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6c58:	2301      	movs	r3, #1
    6c5a:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6c5e:	e018      	b.n	6c92 <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c60:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c64:	490f      	ldr	r1, [pc, #60]	; (6ca4 <Adc_ValidateStateNotIdle+0xe0>)
    6c66:	4613      	mov	r3, r2
    6c68:	005b      	lsls	r3, r3, #1
    6c6a:	4413      	add	r3, r2
    6c6c:	00db      	lsls	r3, r3, #3
    6c6e:	440b      	add	r3, r1
    6c70:	681b      	ldr	r3, [r3, #0]
    6c72:	2b00      	cmp	r3, #0
    6c74:	d10f      	bne.n	6c96 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c7a:	210c      	movs	r1, #12
    6c7c:	4618      	mov	r0, r3
    6c7e:	f7ff fddd 	bl	683c <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6c82:	2301      	movs	r3, #1
    6c84:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6c88:	e005      	b.n	6c96 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6c8a:	bf00      	nop
    6c8c:	e004      	b.n	6c98 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c8e:	bf00      	nop
    6c90:	e002      	b.n	6c98 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c92:	bf00      	nop
    6c94:	e000      	b.n	6c98 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c96:	bf00      	nop
        }
    }

    return ValidState;
    6c98:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c9c:	4618      	mov	r0, r3
    6c9e:	b005      	add	sp, #20
    6ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    6ca4:	1fff8cf4 	.word	0x1fff8cf4

00006ca8 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6ca8:	b084      	sub	sp, #16
    6caa:	4603      	mov	r3, r0
    6cac:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6cb0:	2300      	movs	r3, #0
    6cb2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6cb6:	2300      	movs	r3, #0
    6cb8:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6cbc:	2300      	movs	r3, #0
    6cbe:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cc2:	e055      	b.n	6d70 <Adc_InitGroupsStatus+0xc8>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc8:	4a30      	ldr	r2, [pc, #192]	; (6d8c <Adc_InitGroupsStatus+0xe4>)
    6cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cce:	6859      	ldr	r1, [r3, #4]
    6cd0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6cd4:	4613      	mov	r3, r2
    6cd6:	00db      	lsls	r3, r3, #3
    6cd8:	1a9b      	subs	r3, r3, r2
    6cda:	00db      	lsls	r3, r3, #3
    6cdc:	440b      	add	r3, r1
    6cde:	881b      	ldrh	r3, [r3, #0]
    6ce0:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6ce4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6ce8:	4929      	ldr	r1, [pc, #164]	; (6d90 <Adc_InitGroupsStatus+0xe8>)
    6cea:	4613      	mov	r3, r2
    6cec:	005b      	lsls	r3, r3, #1
    6cee:	4413      	add	r3, r2
    6cf0:	00db      	lsls	r3, r3, #3
    6cf2:	440b      	add	r3, r1
    6cf4:	2200      	movs	r2, #0
    6cf6:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6cf8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cfc:	4924      	ldr	r1, [pc, #144]	; (6d90 <Adc_InitGroupsStatus+0xe8>)
    6cfe:	4613      	mov	r3, r2
    6d00:	005b      	lsls	r3, r3, #1
    6d02:	4413      	add	r3, r2
    6d04:	00db      	lsls	r3, r3, #3
    6d06:	440b      	add	r3, r1
    6d08:	3304      	adds	r3, #4
    6d0a:	2200      	movs	r2, #0
    6d0c:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    6d0e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d12:	491f      	ldr	r1, [pc, #124]	; (6d90 <Adc_InitGroupsStatus+0xe8>)
    6d14:	4613      	mov	r3, r2
    6d16:	005b      	lsls	r3, r3, #1
    6d18:	4413      	add	r3, r2
    6d1a:	00db      	lsls	r3, r3, #3
    6d1c:	440b      	add	r3, r1
    6d1e:	330c      	adds	r3, #12
    6d20:	2200      	movs	r2, #0
    6d22:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    6d24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d28:	4919      	ldr	r1, [pc, #100]	; (6d90 <Adc_InitGroupsStatus+0xe8>)
    6d2a:	4613      	mov	r3, r2
    6d2c:	005b      	lsls	r3, r3, #1
    6d2e:	4413      	add	r3, r2
    6d30:	00db      	lsls	r3, r3, #3
    6d32:	440b      	add	r3, r1
    6d34:	3310      	adds	r3, #16
    6d36:	2200      	movs	r2, #0
    6d38:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    6d3a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d3e:	4914      	ldr	r1, [pc, #80]	; (6d90 <Adc_InitGroupsStatus+0xe8>)
    6d40:	4613      	mov	r3, r2
    6d42:	005b      	lsls	r3, r3, #1
    6d44:	4413      	add	r3, r2
    6d46:	00db      	lsls	r3, r3, #3
    6d48:	440b      	add	r3, r1
    6d4a:	3314      	adds	r3, #20
    6d4c:	2200      	movs	r2, #0
    6d4e:	701a      	strb	r2, [r3, #0]
        /* SWS_Adc_00077 */
#if (ADC_HW_TRIGGER_API == STD_ON)
        Adc_axGroupStatus[GroupId].HwTriggering = ADC_HWTRIGGER_DISABLED;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
        Adc_axGroupStatus[GroupId].Notification = ADC_NOTIFICATION_DISABLED;
    6d50:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d54:	490e      	ldr	r1, [pc, #56]	; (6d90 <Adc_InitGroupsStatus+0xe8>)
    6d56:	4613      	mov	r3, r2
    6d58:	005b      	lsls	r3, r3, #1
    6d5a:	4413      	add	r3, r2
    6d5c:	00db      	lsls	r3, r3, #3
    6d5e:	440b      	add	r3, r1
    6d60:	3308      	adds	r3, #8
    6d62:	2200      	movs	r2, #0
    6d64:	601a      	str	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6d66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d6a:	3301      	adds	r3, #1
    6d6c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d74:	4a05      	ldr	r2, [pc, #20]	; (6d8c <Adc_InitGroupsStatus+0xe4>)
    6d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d7a:	891b      	ldrh	r3, [r3, #8]
    6d7c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d80:	429a      	cmp	r2, r3
    6d82:	d39f      	bcc.n	6cc4 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    6d84:	bf00      	nop
    6d86:	bf00      	nop
    6d88:	b004      	add	sp, #16
    6d8a:	4770      	bx	lr
    6d8c:	1fff8cf0 	.word	0x1fff8cf0
    6d90:	1fff8cf4 	.word	0x1fff8cf4

00006d94 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    6d94:	b084      	sub	sp, #16
    6d96:	4603      	mov	r3, r0
    6d98:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6d9c:	2300      	movs	r3, #0
    6d9e:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    6da2:	2300      	movs	r3, #0
    6da4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6da8:	2300      	movs	r3, #0
    6daa:	f88d 300f 	strb.w	r3, [sp, #15]
    6dae:	e03f      	b.n	6e30 <Adc_InitUnitStatus+0x9c>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6db4:	4a22      	ldr	r2, [pc, #136]	; (6e40 <Adc_InitUnitStatus+0xac>)
    6db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dba:	681a      	ldr	r2, [r3, #0]
    6dbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dc0:	4413      	add	r3, r2
    6dc2:	7f9b      	ldrb	r3, [r3, #30]
    6dc4:	2b01      	cmp	r3, #1
    6dc6:	d12e      	bne.n	6e26 <Adc_InitUnitStatus+0x92>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    6dc8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6dcc:	491d      	ldr	r1, [pc, #116]	; (6e44 <Adc_InitUnitStatus+0xb0>)
    6dce:	4613      	mov	r3, r2
    6dd0:	005b      	lsls	r3, r3, #1
    6dd2:	4413      	add	r3, r2
    6dd4:	005b      	lsls	r3, r3, #1
    6dd6:	440b      	add	r3, r1
    6dd8:	2200      	movs	r2, #0
    6dda:	801a      	strh	r2, [r3, #0]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6ddc:	2300      	movs	r3, #0
    6dde:	f8ad 300c 	strh.w	r3, [sp, #12]
    6de2:	e011      	b.n	6e08 <Adc_InitUnitStatus+0x74>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    6de4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6de8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6dec:	4815      	ldr	r0, [pc, #84]	; (6e44 <Adc_InitUnitStatus+0xb0>)
    6dee:	4613      	mov	r3, r2
    6df0:	005b      	lsls	r3, r3, #1
    6df2:	4413      	add	r3, r2
    6df4:	440b      	add	r3, r1
    6df6:	005b      	lsls	r3, r3, #1
    6df8:	4403      	add	r3, r0
    6dfa:	2200      	movs	r2, #0
    6dfc:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6dfe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e02:	3301      	adds	r3, #1
    6e04:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d0e9      	beq.n	6de4 <Adc_InitUnitStatus+0x50>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    6e10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6e14:	490b      	ldr	r1, [pc, #44]	; (6e44 <Adc_InitUnitStatus+0xb0>)
    6e16:	4613      	mov	r3, r2
    6e18:	005b      	lsls	r3, r3, #1
    6e1a:	4413      	add	r3, r2
    6e1c:	005b      	lsls	r3, r3, #1
    6e1e:	440b      	add	r3, r1
    6e20:	3304      	adds	r3, #4
    6e22:	2200      	movs	r2, #0
    6e24:	701a      	strb	r2, [r3, #0]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e2a:	3301      	adds	r3, #1
    6e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    6e30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e34:	2b01      	cmp	r3, #1
    6e36:	d9bb      	bls.n	6db0 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    6e38:	bf00      	nop
    6e3a:	bf00      	nop
    6e3c:	b004      	add	sp, #16
    6e3e:	4770      	bx	lr
    6e40:	1fff8cf0 	.word	0x1fff8cf0
    6e44:	1fff8d0c 	.word	0x1fff8d0c

00006e48 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    6e48:	b084      	sub	sp, #16
    6e4a:	9001      	str	r0, [sp, #4]
    6e4c:	460b      	mov	r3, r1
    6e4e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    6e52:	2300      	movs	r3, #0
    6e54:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    6e58:	2301      	movs	r3, #1
    6e5a:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    6e5e:	9b01      	ldr	r3, [sp, #4]
    6e60:	7c1b      	ldrb	r3, [r3, #16]
    6e62:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e66:	429a      	cmp	r2, r3
    6e68:	d11c      	bne.n	6ea4 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e6a:	2300      	movs	r3, #0
    6e6c:	f88d 300f 	strb.w	r3, [sp, #15]
    6e70:	e012      	b.n	6e98 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	695a      	ldr	r2, [r3, #20]
    6e76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e7a:	4413      	add	r3, r2
    6e7c:	781b      	ldrb	r3, [r3, #0]
    6e7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e82:	429a      	cmp	r2, r3
    6e84:	d103      	bne.n	6e8e <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    6e86:	2300      	movs	r3, #0
    6e88:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    6e8c:	e00a      	b.n	6ea4 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e92:	3301      	adds	r3, #1
    6e94:	f88d 300f 	strb.w	r3, [sp, #15]
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	7e1b      	ldrb	r3, [r3, #24]
    6e9c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6ea0:	429a      	cmp	r2, r3
    6ea2:	d3e6      	bcc.n	6e72 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    6ea4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6ea8:	4618      	mov	r0, r3
    6eaa:	b004      	add	sp, #16
    6eac:	4770      	bx	lr

00006eae <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    6eae:	b500      	push	{lr}
    6eb0:	b085      	sub	sp, #20
    6eb2:	4603      	mov	r3, r0
    6eb4:	f8ad 3006 	strh.w	r3, [sp, #6]
    6eb8:	460b      	mov	r3, r1
    6eba:	f88d 3005 	strb.w	r3, [sp, #5]
    6ebe:	4613      	mov	r3, r2
    6ec0:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_QueueIndexType QueueIndex = 0U;
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6ec4:	2300      	movs	r3, #0
    6ec6:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    6eca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ece:	4938      	ldr	r1, [pc, #224]	; (6fb0 <Adc_UpdateStatusStartConversion+0x102>)
    6ed0:	4613      	mov	r3, r2
    6ed2:	005b      	lsls	r3, r3, #1
    6ed4:	4413      	add	r3, r2
    6ed6:	00db      	lsls	r3, r3, #3
    6ed8:	440b      	add	r3, r1
    6eda:	2201      	movs	r2, #1
    6edc:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    6ede:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ee2:	4933      	ldr	r1, [pc, #204]	; (6fb0 <Adc_UpdateStatusStartConversion+0x102>)
    6ee4:	4613      	mov	r3, r2
    6ee6:	005b      	lsls	r3, r3, #1
    6ee8:	4413      	add	r3, r2
    6eea:	00db      	lsls	r3, r3, #3
    6eec:	440b      	add	r3, r1
    6eee:	330c      	adds	r3, #12
    6ef0:	2200      	movs	r2, #0
    6ef2:	801a      	strh	r2, [r3, #0]
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6ef4:	f003 ffd4 	bl	aea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6ef8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6efc:	492d      	ldr	r1, [pc, #180]	; (6fb4 <Adc_UpdateStatusStartConversion+0x106>)
    6efe:	4613      	mov	r3, r2
    6f00:	005b      	lsls	r3, r3, #1
    6f02:	4413      	add	r3, r2
    6f04:	005b      	lsls	r3, r3, #1
    6f06:	440b      	add	r3, r1
    6f08:	881b      	ldrh	r3, [r3, #0]
    6f0a:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    6f0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f12:	4928      	ldr	r1, [pc, #160]	; (6fb4 <Adc_UpdateStatusStartConversion+0x106>)
    6f14:	4613      	mov	r3, r2
    6f16:	005b      	lsls	r3, r3, #1
    6f18:	4413      	add	r3, r2
    6f1a:	005b      	lsls	r3, r3, #1
    6f1c:	440b      	add	r3, r1
    6f1e:	3302      	adds	r3, #2
    6f20:	881b      	ldrh	r3, [r3, #0]
    6f22:	b29b      	uxth	r3, r3
    6f24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f28:	429a      	cmp	r2, r3
    6f2a:	d003      	beq.n	6f34 <Adc_UpdateStatusStartConversion+0x86>
    6f2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6f30:	2b00      	cmp	r3, #0
    6f32:	d136      	bne.n	6fa2 <Adc_UpdateStatusStartConversion+0xf4>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    6f34:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f38:	491e      	ldr	r1, [pc, #120]	; (6fb4 <Adc_UpdateStatusStartConversion+0x106>)
    6f3a:	4613      	mov	r3, r2
    6f3c:	005b      	lsls	r3, r3, #1
    6f3e:	4413      	add	r3, r2
    6f40:	005b      	lsls	r3, r3, #1
    6f42:	440b      	add	r3, r1
    6f44:	881b      	ldrh	r3, [r3, #0]
    6f46:	b29b      	uxth	r3, r3
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d11f      	bne.n	6f8c <Adc_UpdateStatusStartConversion+0xde>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    6f4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f50:	4918      	ldr	r1, [pc, #96]	; (6fb4 <Adc_UpdateStatusStartConversion+0x106>)
    6f52:	4613      	mov	r3, r2
    6f54:	005b      	lsls	r3, r3, #1
    6f56:	4413      	add	r3, r2
    6f58:	005b      	lsls	r3, r3, #1
    6f5a:	440b      	add	r3, r1
    6f5c:	3302      	adds	r3, #2
    6f5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f62:	801a      	strh	r2, [r3, #0]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6f64:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f68:	4912      	ldr	r1, [pc, #72]	; (6fb4 <Adc_UpdateStatusStartConversion+0x106>)
    6f6a:	4613      	mov	r3, r2
    6f6c:	005b      	lsls	r3, r3, #1
    6f6e:	4413      	add	r3, r2
    6f70:	005b      	lsls	r3, r3, #1
    6f72:	440b      	add	r3, r1
    6f74:	881b      	ldrh	r3, [r3, #0]
    6f76:	b29b      	uxth	r3, r3
    6f78:	3301      	adds	r3, #1
    6f7a:	b298      	uxth	r0, r3
    6f7c:	490d      	ldr	r1, [pc, #52]	; (6fb4 <Adc_UpdateStatusStartConversion+0x106>)
    6f7e:	4613      	mov	r3, r2
    6f80:	005b      	lsls	r3, r3, #1
    6f82:	4413      	add	r3, r2
    6f84:	005b      	lsls	r3, r3, #1
    6f86:	440b      	add	r3, r1
    6f88:	4602      	mov	r2, r0
    6f8a:	801a      	strh	r2, [r3, #0]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6f8c:	f003 ffb4 	bl	aef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    6f90:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6f94:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f98:	4611      	mov	r1, r2
    6f9a:	4618      	mov	r0, r3
    6f9c:	f002 fc8a 	bl	98b4 <Adc_Ipw_StartNormalConversion>
    6fa0:	e002      	b.n	6fa8 <Adc_UpdateStatusStartConversion+0xfa>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6fa2:	f003 ffa9 	bl	aef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    6fa6:	bf00      	nop
    6fa8:	bf00      	nop
    6faa:	b005      	add	sp, #20
    6fac:	f85d fb04 	ldr.w	pc, [sp], #4
    6fb0:	1fff8cf4 	.word	0x1fff8cf4
    6fb4:	1fff8d0c 	.word	0x1fff8d0c

00006fb8 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    6fb8:	b500      	push	{lr}
    6fba:	b085      	sub	sp, #20
    6fbc:	9001      	str	r0, [sp, #4]
    6fbe:	4608      	mov	r0, r1
    6fc0:	4611      	mov	r1, r2
    6fc2:	461a      	mov	r2, r3
    6fc4:	4603      	mov	r3, r0
    6fc6:	f8ad 3002 	strh.w	r3, [sp, #2]
    6fca:	460b      	mov	r3, r1
    6fcc:	f88d 3001 	strb.w	r3, [sp, #1]
    6fd0:	4613      	mov	r3, r2
    6fd2:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6fd6:	2300      	movs	r3, #0
    6fd8:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    6fdc:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6fe0:	492b      	ldr	r1, [pc, #172]	; (7090 <Adc_StopSwGroupConversion+0xd8>)
    6fe2:	4613      	mov	r3, r2
    6fe4:	005b      	lsls	r3, r3, #1
    6fe6:	4413      	add	r3, r2
    6fe8:	005b      	lsls	r3, r3, #1
    6fea:	440b      	add	r3, r1
    6fec:	881b      	ldrh	r3, [r3, #0]
    6fee:	b29a      	uxth	r2, r3
    6ff0:	9b01      	ldr	r3, [sp, #4]
    6ff2:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6ff4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6ff8:	4925      	ldr	r1, [pc, #148]	; (7090 <Adc_StopSwGroupConversion+0xd8>)
    6ffa:	4613      	mov	r3, r2
    6ffc:	005b      	lsls	r3, r3, #1
    6ffe:	4413      	add	r3, r2
    7000:	005b      	lsls	r3, r3, #1
    7002:	440b      	add	r3, r1
    7004:	881b      	ldrh	r3, [r3, #0]
    7006:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    700a:	2300      	movs	r3, #0
    700c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7010:	e031      	b.n	7076 <Adc_StopSwGroupConversion+0xbe>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    7012:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7016:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    701a:	481d      	ldr	r0, [pc, #116]	; (7090 <Adc_StopSwGroupConversion+0xd8>)
    701c:	4613      	mov	r3, r2
    701e:	005b      	lsls	r3, r3, #1
    7020:	4413      	add	r3, r2
    7022:	440b      	add	r3, r1
    7024:	005b      	lsls	r3, r3, #1
    7026:	4403      	add	r3, r0
    7028:	885b      	ldrh	r3, [r3, #2]
    702a:	b29b      	uxth	r3, r3
    702c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7030:	429a      	cmp	r2, r3
    7032:	d11b      	bne.n	706c <Adc_StopSwGroupConversion+0xb4>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    7034:	9b01      	ldr	r3, [sp, #4]
    7036:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    703a:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    703c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7040:	2b00      	cmp	r3, #0
    7042:	d10b      	bne.n	705c <Adc_StopSwGroupConversion+0xa4>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7044:	f89d 2000 	ldrb.w	r2, [sp]
    7048:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    704c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7050:	4618      	mov	r0, r3
    7052:	f002 fced 	bl	9a30 <Adc_Ipw_StopCurrentConversion>
    7056:	4603      	mov	r3, r0
    7058:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    705c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7060:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7064:	4611      	mov	r1, r2
    7066:	4618      	mov	r0, r3
    7068:	f001 fde8 	bl	8c3c <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    706c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7070:	3301      	adds	r3, #1
    7072:	f8ad 300c 	strh.w	r3, [sp, #12]
    7076:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    707a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    707e:	429a      	cmp	r2, r3
    7080:	d3c7      	bcc.n	7012 <Adc_StopSwGroupConversion+0x5a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    7082:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7086:	4618      	mov	r0, r3
    7088:	b005      	add	sp, #20
    708a:	f85d fb04 	ldr.w	pc, [sp], #4
    708e:	bf00      	nop
    7090:	1fff8d0c 	.word	0x1fff8d0c

00007094 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7094:	b500      	push	{lr}
    7096:	b089      	sub	sp, #36	; 0x24
    7098:	4603      	mov	r3, r0
    709a:	f8ad 3006 	strh.w	r3, [sp, #6]
    709e:	460b      	mov	r3, r1
    70a0:	f88d 3005 	strb.w	r3, [sp, #5]
    70a4:	4613      	mov	r3, r2
    70a6:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    70aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70ae:	4a58      	ldr	r2, [pc, #352]	; (7210 <Adc_UpdateStatusStopConversion+0x17c>)
    70b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b4:	68da      	ldr	r2, [r3, #12]
    70b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    70ba:	005b      	lsls	r3, r3, #1
    70bc:	4413      	add	r3, r2
    70be:	881b      	ldrh	r3, [r3, #0]
    70c0:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    70c4:	2300      	movs	r3, #0
    70c6:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    70ca:	2300      	movs	r3, #0
    70cc:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    70d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70d4:	4a4e      	ldr	r2, [pc, #312]	; (7210 <Adc_UpdateStatusStopConversion+0x17c>)
    70d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70da:	6859      	ldr	r1, [r3, #4]
    70dc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    70e0:	4613      	mov	r3, r2
    70e2:	00db      	lsls	r3, r3, #3
    70e4:	1a9b      	subs	r3, r3, r2
    70e6:	00db      	lsls	r3, r3, #3
    70e8:	440b      	add	r3, r1
    70ea:	689b      	ldr	r3, [r3, #8]
    70ec:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    70ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70f2:	4a47      	ldr	r2, [pc, #284]	; (7210 <Adc_UpdateStatusStopConversion+0x17c>)
    70f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f8:	6859      	ldr	r1, [r3, #4]
    70fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    70fe:	4613      	mov	r3, r2
    7100:	00db      	lsls	r3, r3, #3
    7102:	1a9b      	subs	r3, r3, r2
    7104:	00db      	lsls	r3, r3, #3
    7106:	440b      	add	r3, r1
    7108:	685b      	ldr	r3, [r3, #4]
    710a:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    710c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7110:	4a3f      	ldr	r2, [pc, #252]	; (7210 <Adc_UpdateStatusStopConversion+0x17c>)
    7112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7116:	6859      	ldr	r1, [r3, #4]
    7118:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    711c:	4613      	mov	r3, r2
    711e:	00db      	lsls	r3, r3, #3
    7120:	1a9b      	subs	r3, r3, r2
    7122:	00db      	lsls	r3, r3, #3
    7124:	440b      	add	r3, r1
    7126:	69db      	ldr	r3, [r3, #28]
    7128:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    712a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    712e:	4939      	ldr	r1, [pc, #228]	; (7214 <Adc_UpdateStatusStopConversion+0x180>)
    7130:	4613      	mov	r3, r2
    7132:	005b      	lsls	r3, r3, #1
    7134:	4413      	add	r3, r2
    7136:	00db      	lsls	r3, r3, #3
    7138:	440b      	add	r3, r1
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    713e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7142:	4934      	ldr	r1, [pc, #208]	; (7214 <Adc_UpdateStatusStopConversion+0x180>)
    7144:	4613      	mov	r3, r2
    7146:	005b      	lsls	r3, r3, #1
    7148:	4413      	add	r3, r2
    714a:	00db      	lsls	r3, r3, #3
    714c:	440b      	add	r3, r1
    714e:	330c      	adds	r3, #12
    7150:	2200      	movs	r2, #0
    7152:	801a      	strh	r2, [r3, #0]
#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
     /* disable group notification (SWS_Adc_00155) */
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
    7154:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7158:	492e      	ldr	r1, [pc, #184]	; (7214 <Adc_UpdateStatusStopConversion+0x180>)
    715a:	4613      	mov	r3, r2
    715c:	005b      	lsls	r3, r3, #1
    715e:	4413      	add	r3, r2
    7160:	00db      	lsls	r3, r3, #3
    7162:	440b      	add	r3, r1
    7164:	3308      	adds	r3, #8
    7166:	2200      	movs	r2, #0
    7168:	601a      	str	r2, [r3, #0]
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    716a:	9b06      	ldr	r3, [sp, #24]
    716c:	2b00      	cmp	r3, #0
    716e:	d005      	beq.n	717c <Adc_UpdateStatusStopConversion+0xe8>
    7170:	9b05      	ldr	r3, [sp, #20]
    7172:	2b01      	cmp	r3, #1
    7174:	d110      	bne.n	7198 <Adc_UpdateStatusStopConversion+0x104>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    7176:	9b04      	ldr	r3, [sp, #16]
    7178:	2b00      	cmp	r3, #0
    717a:	d10d      	bne.n	7198 <Adc_UpdateStatusStopConversion+0x104>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    717c:	9b03      	ldr	r3, [sp, #12]
    717e:	2b03      	cmp	r3, #3
    7180:	d10a      	bne.n	7198 <Adc_UpdateStatusStopConversion+0x104>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7182:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7186:	4923      	ldr	r1, [pc, #140]	; (7214 <Adc_UpdateStatusStopConversion+0x180>)
    7188:	4613      	mov	r3, r2
    718a:	005b      	lsls	r3, r3, #1
    718c:	4413      	add	r3, r2
    718e:	00db      	lsls	r3, r3, #3
    7190:	440b      	add	r3, r1
    7192:	2200      	movs	r2, #0
    7194:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    7196:	e036      	b.n	7206 <Adc_UpdateStatusStopConversion+0x172>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    7198:	f89d 3004 	ldrb.w	r3, [sp, #4]
    719c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    71a0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    71a4:	f10d 000a 	add.w	r0, sp, #10
    71a8:	f7ff ff06 	bl	6fb8 <Adc_StopSwGroupConversion>
    71ac:	4603      	mov	r3, r0
    71ae:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    71b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71b6:	4917      	ldr	r1, [pc, #92]	; (7214 <Adc_UpdateStatusStopConversion+0x180>)
    71b8:	4613      	mov	r3, r2
    71ba:	005b      	lsls	r3, r3, #1
    71bc:	4413      	add	r3, r2
    71be:	00db      	lsls	r3, r3, #3
    71c0:	440b      	add	r3, r1
    71c2:	2200      	movs	r2, #0
    71c4:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    71c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    71ca:	2b00      	cmp	r3, #0
    71cc:	d113      	bne.n	71f6 <Adc_UpdateStatusStopConversion+0x162>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    71ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
    71d2:	4911      	ldr	r1, [pc, #68]	; (7218 <Adc_UpdateStatusStopConversion+0x184>)
    71d4:	4613      	mov	r3, r2
    71d6:	005b      	lsls	r3, r3, #1
    71d8:	4413      	add	r3, r2
    71da:	005b      	lsls	r3, r3, #1
    71dc:	440b      	add	r3, r1
    71de:	881b      	ldrh	r3, [r3, #0]
    71e0:	b29b      	uxth	r3, r3
    71e2:	2b00      	cmp	r3, #0
    71e4:	d007      	beq.n	71f6 <Adc_UpdateStatusStopConversion+0x162>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    71e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    71ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    71ee:	4611      	mov	r1, r2
    71f0:	4618      	mov	r0, r3
    71f2:	f002 fb5f 	bl	98b4 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    71f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
    71fa:	2b01      	cmp	r3, #1
    71fc:	d103      	bne.n	7206 <Adc_UpdateStatusStopConversion+0x172>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    71fe:	212b      	movs	r1, #43	; 0x2b
    7200:	2003      	movs	r0, #3
    7202:	f7ff fb1b 	bl	683c <Adc_ReportDetRuntimeError>
}
    7206:	bf00      	nop
    7208:	b009      	add	sp, #36	; 0x24
    720a:	f85d fb04 	ldr.w	pc, [sp], #4
    720e:	bf00      	nop
    7210:	1fff8cf0 	.word	0x1fff8cf0
    7214:	1fff8cf4 	.word	0x1fff8cf4
    7218:	1fff8d0c 	.word	0x1fff8d0c

0000721c <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    721c:	b500      	push	{lr}
    721e:	b085      	sub	sp, #20
    7220:	4603      	mov	r3, r0
    7222:	f8ad 3006 	strh.w	r3, [sp, #6]
    7226:	460b      	mov	r3, r1
    7228:	f88d 3005 	strb.w	r3, [sp, #5]
    722c:	4613      	mov	r3, r2
    722e:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7232:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7236:	4a19      	ldr	r2, [pc, #100]	; (729c <Adc_UpdateStatusReadGroup+0x80>)
    7238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    723c:	68da      	ldr	r2, [r3, #12]
    723e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7242:	005b      	lsls	r3, r3, #1
    7244:	4413      	add	r3, r2
    7246:	881b      	ldrh	r3, [r3, #0]
    7248:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    724c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7250:	4a12      	ldr	r2, [pc, #72]	; (729c <Adc_UpdateStatusReadGroup+0x80>)
    7252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7256:	6859      	ldr	r1, [r3, #4]
    7258:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    725c:	4613      	mov	r3, r2
    725e:	00db      	lsls	r3, r3, #3
    7260:	1a9b      	subs	r3, r3, r2
    7262:	00db      	lsls	r3, r3, #3
    7264:	440b      	add	r3, r1
    7266:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    726a:	2b01      	cmp	r3, #1
    726c:	d109      	bne.n	7282 <Adc_UpdateStatusReadGroup+0x66>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    726e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7272:	f89d 1005 	ldrb.w	r1, [sp, #5]
    7276:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    727a:	4618      	mov	r0, r3
    727c:	f000 f810 	bl	72a0 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    7280:	e007      	b.n	7292 <Adc_UpdateStatusReadGroup+0x76>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    7282:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7286:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    728a:	4611      	mov	r1, r2
    728c:	4618      	mov	r0, r3
    728e:	f000 f8f9 	bl	7484 <Adc_UpdateStatusReadGroupInt>
}
    7292:	bf00      	nop
    7294:	b005      	add	sp, #20
    7296:	f85d fb04 	ldr.w	pc, [sp], #4
    729a:	bf00      	nop
    729c:	1fff8cf0 	.word	0x1fff8cf0

000072a0 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    72a0:	b500      	push	{lr}
    72a2:	b085      	sub	sp, #20
    72a4:	4603      	mov	r3, r0
    72a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    72aa:	460b      	mov	r3, r1
    72ac:	f88d 3005 	strb.w	r3, [sp, #5]
    72b0:	4613      	mov	r3, r2
    72b2:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    72b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    72ba:	4a2d      	ldr	r2, [pc, #180]	; (7370 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    72bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72c0:	68da      	ldr	r2, [r3, #12]
    72c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72c6:	005b      	lsls	r3, r3, #1
    72c8:	4413      	add	r3, r2
    72ca:	881b      	ldrh	r3, [r3, #0]
    72cc:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    72d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    72d4:	4927      	ldr	r1, [pc, #156]	; (7374 <Adc_UpdateStatusReadGroupNoInt+0xd4>)
    72d6:	4613      	mov	r3, r2
    72d8:	005b      	lsls	r3, r3, #1
    72da:	4413      	add	r3, r2
    72dc:	00db      	lsls	r3, r3, #3
    72de:	440b      	add	r3, r1
    72e0:	3304      	adds	r3, #4
    72e2:	2201      	movs	r2, #1
    72e4:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    72e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    72ea:	2b00      	cmp	r3, #0
    72ec:	d03c      	beq.n	7368 <Adc_UpdateStatusReadGroupNoInt+0xc8>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    72ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    72f2:	4a1f      	ldr	r2, [pc, #124]	; (7370 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    72f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f8:	6859      	ldr	r1, [r3, #4]
    72fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72fe:	4613      	mov	r3, r2
    7300:	00db      	lsls	r3, r3, #3
    7302:	1a9b      	subs	r3, r3, r2
    7304:	00db      	lsls	r3, r3, #3
    7306:	440b      	add	r3, r1
    7308:	689b      	ldr	r3, [r3, #8]
    730a:	2b01      	cmp	r3, #1
    730c:	d10a      	bne.n	7324 <Adc_UpdateStatusReadGroupNoInt+0x84>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    730e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7312:	4918      	ldr	r1, [pc, #96]	; (7374 <Adc_UpdateStatusReadGroupNoInt+0xd4>)
    7314:	4613      	mov	r3, r2
    7316:	005b      	lsls	r3, r3, #1
    7318:	4413      	add	r3, r2
    731a:	00db      	lsls	r3, r3, #3
    731c:	440b      	add	r3, r1
    731e:	2201      	movs	r2, #1
    7320:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    7322:	e021      	b.n	7368 <Adc_UpdateStatusReadGroupNoInt+0xc8>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7324:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7328:	4a11      	ldr	r2, [pc, #68]	; (7370 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    732a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    732e:	6859      	ldr	r1, [r3, #4]
    7330:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7334:	4613      	mov	r3, r2
    7336:	00db      	lsls	r3, r3, #3
    7338:	1a9b      	subs	r3, r3, r2
    733a:	00db      	lsls	r3, r3, #3
    733c:	440b      	add	r3, r1
    733e:	695b      	ldr	r3, [r3, #20]
    7340:	2b00      	cmp	r3, #0
    7342:	d111      	bne.n	7368 <Adc_UpdateStatusReadGroupNoInt+0xc8>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7344:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7348:	490a      	ldr	r1, [pc, #40]	; (7374 <Adc_UpdateStatusReadGroupNoInt+0xd4>)
    734a:	4613      	mov	r3, r2
    734c:	005b      	lsls	r3, r3, #1
    734e:	4413      	add	r3, r2
    7350:	00db      	lsls	r3, r3, #3
    7352:	440b      	add	r3, r1
    7354:	2200      	movs	r2, #0
    7356:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    7358:	f89d 2004 	ldrb.w	r2, [sp, #4]
    735c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7360:	4611      	mov	r1, r2
    7362:	4618      	mov	r0, r3
    7364:	f000 f808 	bl	7378 <Adc_UpdateSwQueueIndexNoInt>
}
    7368:	bf00      	nop
    736a:	b005      	add	sp, #20
    736c:	f85d fb04 	ldr.w	pc, [sp], #4
    7370:	1fff8cf0 	.word	0x1fff8cf0
    7374:	1fff8cf4 	.word	0x1fff8cf4

00007378 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    7378:	b500      	push	{lr}
    737a:	b085      	sub	sp, #20
    737c:	4603      	mov	r3, r0
    737e:	460a      	mov	r2, r1
    7380:	f8ad 3006 	strh.w	r3, [sp, #6]
    7384:	4613      	mov	r3, r2
    7386:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    738a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    738e:	4a3b      	ldr	r2, [pc, #236]	; (747c <Adc_UpdateSwQueueIndexNoInt+0x104>)
    7390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7394:	68da      	ldr	r2, [r3, #12]
    7396:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    739a:	005b      	lsls	r3, r3, #1
    739c:	4413      	add	r3, r2
    739e:	881b      	ldrh	r3, [r3, #0]
    73a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    73a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73a8:	4a34      	ldr	r2, [pc, #208]	; (747c <Adc_UpdateSwQueueIndexNoInt+0x104>)
    73aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ae:	6859      	ldr	r1, [r3, #4]
    73b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    73b4:	4613      	mov	r3, r2
    73b6:	00db      	lsls	r3, r3, #3
    73b8:	1a9b      	subs	r3, r3, r2
    73ba:	00db      	lsls	r3, r3, #3
    73bc:	440b      	add	r3, r1
    73be:	789b      	ldrb	r3, [r3, #2]
    73c0:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    73c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    73c8:	492d      	ldr	r1, [pc, #180]	; (7480 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    73ca:	4613      	mov	r3, r2
    73cc:	005b      	lsls	r3, r3, #1
    73ce:	4413      	add	r3, r2
    73d0:	005b      	lsls	r3, r3, #1
    73d2:	440b      	add	r3, r1
    73d4:	881b      	ldrh	r3, [r3, #0]
    73d6:	b29b      	uxth	r3, r3
    73d8:	2b00      	cmp	r3, #0
    73da:	d04b      	beq.n	7474 <Adc_UpdateSwQueueIndexNoInt+0xfc>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    73dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    73e0:	4927      	ldr	r1, [pc, #156]	; (7480 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    73e2:	4613      	mov	r3, r2
    73e4:	005b      	lsls	r3, r3, #1
    73e6:	4413      	add	r3, r2
    73e8:	005b      	lsls	r3, r3, #1
    73ea:	440b      	add	r3, r1
    73ec:	881b      	ldrh	r3, [r3, #0]
    73ee:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    73f2:	2300      	movs	r3, #0
    73f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    73f8:	e01e      	b.n	7438 <Adc_UpdateSwQueueIndexNoInt+0xc0>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    73fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    73fe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7402:	481f      	ldr	r0, [pc, #124]	; (7480 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    7404:	4613      	mov	r3, r2
    7406:	005b      	lsls	r3, r3, #1
    7408:	4413      	add	r3, r2
    740a:	440b      	add	r3, r1
    740c:	005b      	lsls	r3, r3, #1
    740e:	4403      	add	r3, r0
    7410:	885b      	ldrh	r3, [r3, #2]
    7412:	b29b      	uxth	r3, r3
    7414:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7418:	429a      	cmp	r2, r3
    741a:	d108      	bne.n	742e <Adc_UpdateSwQueueIndexNoInt+0xb6>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    741c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7420:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7424:	4611      	mov	r1, r2
    7426:	4618      	mov	r0, r3
    7428:	f001 fc08 	bl	8c3c <Adc_Ipw_RemoveFromQueue>
                    break;
    742c:	e00a      	b.n	7444 <Adc_UpdateSwQueueIndexNoInt+0xcc>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    742e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7432:	3301      	adds	r3, #1
    7434:	f8ad 300e 	strh.w	r3, [sp, #14]
    7438:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    743c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7440:	429a      	cmp	r2, r3
    7442:	d3da      	bcc.n	73fa <Adc_UpdateSwQueueIndexNoInt+0x82>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    7444:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7448:	2b00      	cmp	r3, #0
    744a:	d113      	bne.n	7474 <Adc_UpdateSwQueueIndexNoInt+0xfc>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    744c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7450:	490b      	ldr	r1, [pc, #44]	; (7480 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    7452:	4613      	mov	r3, r2
    7454:	005b      	lsls	r3, r3, #1
    7456:	4413      	add	r3, r2
    7458:	005b      	lsls	r3, r3, #1
    745a:	440b      	add	r3, r1
    745c:	881b      	ldrh	r3, [r3, #0]
    745e:	b29b      	uxth	r3, r3
    7460:	2b00      	cmp	r3, #0
    7462:	d007      	beq.n	7474 <Adc_UpdateSwQueueIndexNoInt+0xfc>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    7464:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7468:	f89d 300b 	ldrb.w	r3, [sp, #11]
    746c:	4611      	mov	r1, r2
    746e:	4618      	mov	r0, r3
    7470:	f002 fa20 	bl	98b4 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    7474:	bf00      	nop
    7476:	b005      	add	sp, #20
    7478:	f85d fb04 	ldr.w	pc, [sp], #4
    747c:	1fff8cf0 	.word	0x1fff8cf0
    7480:	1fff8d0c 	.word	0x1fff8d0c

00007484 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    7484:	b084      	sub	sp, #16
    7486:	4603      	mov	r3, r0
    7488:	460a      	mov	r2, r1
    748a:	f8ad 3006 	strh.w	r3, [sp, #6]
    748e:	4613      	mov	r3, r2
    7490:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7494:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7498:	4a49      	ldr	r2, [pc, #292]	; (75c0 <Adc_UpdateStatusReadGroupInt+0x13c>)
    749a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    749e:	68da      	ldr	r2, [r3, #12]
    74a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74a4:	005b      	lsls	r3, r3, #1
    74a6:	4413      	add	r3, r2
    74a8:	881b      	ldrh	r3, [r3, #0]
    74aa:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    74ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74b2:	4944      	ldr	r1, [pc, #272]	; (75c4 <Adc_UpdateStatusReadGroupInt+0x140>)
    74b4:	4613      	mov	r3, r2
    74b6:	005b      	lsls	r3, r3, #1
    74b8:	4413      	add	r3, r2
    74ba:	00db      	lsls	r3, r3, #3
    74bc:	440b      	add	r3, r1
    74be:	681b      	ldr	r3, [r3, #0]
    74c0:	2b02      	cmp	r3, #2
    74c2:	d10a      	bne.n	74da <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    74c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74c8:	493e      	ldr	r1, [pc, #248]	; (75c4 <Adc_UpdateStatusReadGroupInt+0x140>)
    74ca:	4613      	mov	r3, r2
    74cc:	005b      	lsls	r3, r3, #1
    74ce:	4413      	add	r3, r2
    74d0:	00db      	lsls	r3, r3, #3
    74d2:	440b      	add	r3, r1
    74d4:	2201      	movs	r2, #1
    74d6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    74d8:	e06f      	b.n	75ba <Adc_UpdateStatusReadGroupInt+0x136>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    74da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74de:	4939      	ldr	r1, [pc, #228]	; (75c4 <Adc_UpdateStatusReadGroupInt+0x140>)
    74e0:	4613      	mov	r3, r2
    74e2:	005b      	lsls	r3, r3, #1
    74e4:	4413      	add	r3, r2
    74e6:	00db      	lsls	r3, r3, #3
    74e8:	440b      	add	r3, r1
    74ea:	681b      	ldr	r3, [r3, #0]
    74ec:	2b03      	cmp	r3, #3
    74ee:	d164      	bne.n	75ba <Adc_UpdateStatusReadGroupInt+0x136>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    74f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74f4:	4a32      	ldr	r2, [pc, #200]	; (75c0 <Adc_UpdateStatusReadGroupInt+0x13c>)
    74f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74fa:	6859      	ldr	r1, [r3, #4]
    74fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7500:	4613      	mov	r3, r2
    7502:	00db      	lsls	r3, r3, #3
    7504:	1a9b      	subs	r3, r3, r2
    7506:	00db      	lsls	r3, r3, #3
    7508:	440b      	add	r3, r1
    750a:	695b      	ldr	r3, [r3, #20]
    750c:	2b00      	cmp	r3, #0
    750e:	d154      	bne.n	75ba <Adc_UpdateStatusReadGroupInt+0x136>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7510:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7514:	4a2a      	ldr	r2, [pc, #168]	; (75c0 <Adc_UpdateStatusReadGroupInt+0x13c>)
    7516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    751a:	6859      	ldr	r1, [r3, #4]
    751c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7520:	4613      	mov	r3, r2
    7522:	00db      	lsls	r3, r3, #3
    7524:	1a9b      	subs	r3, r3, r2
    7526:	00db      	lsls	r3, r3, #3
    7528:	440b      	add	r3, r1
    752a:	689b      	ldr	r3, [r3, #8]
    752c:	2b00      	cmp	r3, #0
    752e:	d02f      	beq.n	7590 <Adc_UpdateStatusReadGroupInt+0x10c>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7530:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7534:	4a22      	ldr	r2, [pc, #136]	; (75c0 <Adc_UpdateStatusReadGroupInt+0x13c>)
    7536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    753a:	6859      	ldr	r1, [r3, #4]
    753c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7540:	4613      	mov	r3, r2
    7542:	00db      	lsls	r3, r3, #3
    7544:	1a9b      	subs	r3, r3, r2
    7546:	00db      	lsls	r3, r3, #3
    7548:	440b      	add	r3, r1
    754a:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    754c:	2b01      	cmp	r3, #1
    754e:	d12a      	bne.n	75a6 <Adc_UpdateStatusReadGroupInt+0x122>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7550:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7554:	4a1a      	ldr	r2, [pc, #104]	; (75c0 <Adc_UpdateStatusReadGroupInt+0x13c>)
    7556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    755a:	6859      	ldr	r1, [r3, #4]
    755c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7560:	4613      	mov	r3, r2
    7562:	00db      	lsls	r3, r3, #3
    7564:	1a9b      	subs	r3, r3, r2
    7566:	00db      	lsls	r3, r3, #3
    7568:	440b      	add	r3, r1
    756a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    756c:	2b01      	cmp	r3, #1
    756e:	d11a      	bne.n	75a6 <Adc_UpdateStatusReadGroupInt+0x122>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7570:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7574:	4a12      	ldr	r2, [pc, #72]	; (75c0 <Adc_UpdateStatusReadGroupInt+0x13c>)
    7576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    757a:	6859      	ldr	r1, [r3, #4]
    757c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7580:	4613      	mov	r3, r2
    7582:	00db      	lsls	r3, r3, #3
    7584:	1a9b      	subs	r3, r3, r2
    7586:	00db      	lsls	r3, r3, #3
    7588:	440b      	add	r3, r1
    758a:	69db      	ldr	r3, [r3, #28]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    758c:	2b00      	cmp	r3, #0
    758e:	d10a      	bne.n	75a6 <Adc_UpdateStatusReadGroupInt+0x122>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7590:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7594:	490b      	ldr	r1, [pc, #44]	; (75c4 <Adc_UpdateStatusReadGroupInt+0x140>)
    7596:	4613      	mov	r3, r2
    7598:	005b      	lsls	r3, r3, #1
    759a:	4413      	add	r3, r2
    759c:	00db      	lsls	r3, r3, #3
    759e:	440b      	add	r3, r1
    75a0:	2200      	movs	r2, #0
    75a2:	601a      	str	r2, [r3, #0]
}
    75a4:	e009      	b.n	75ba <Adc_UpdateStatusReadGroupInt+0x136>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    75a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75aa:	4906      	ldr	r1, [pc, #24]	; (75c4 <Adc_UpdateStatusReadGroupInt+0x140>)
    75ac:	4613      	mov	r3, r2
    75ae:	005b      	lsls	r3, r3, #1
    75b0:	4413      	add	r3, r2
    75b2:	00db      	lsls	r3, r3, #3
    75b4:	440b      	add	r3, r1
    75b6:	2201      	movs	r2, #1
    75b8:	601a      	str	r2, [r3, #0]
}
    75ba:	bf00      	nop
    75bc:	b004      	add	sp, #16
    75be:	4770      	bx	lr
    75c0:	1fff8cf0 	.word	0x1fff8cf0
    75c4:	1fff8cf4 	.word	0x1fff8cf4

000075c8 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    75c8:	b084      	sub	sp, #16
    75ca:	4603      	mov	r3, r0
    75cc:	460a      	mov	r2, r1
    75ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    75d2:	4613      	mov	r3, r2
    75d4:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    75d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75dc:	4a49      	ldr	r2, [pc, #292]	; (7704 <Adc_UpdateStatusAfterGetStream+0x13c>)
    75de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e2:	68da      	ldr	r2, [r3, #12]
    75e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75e8:	005b      	lsls	r3, r3, #1
    75ea:	4413      	add	r3, r2
    75ec:	881b      	ldrh	r3, [r3, #0]
    75ee:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    75f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75f6:	4944      	ldr	r1, [pc, #272]	; (7708 <Adc_UpdateStatusAfterGetStream+0x140>)
    75f8:	4613      	mov	r3, r2
    75fa:	005b      	lsls	r3, r3, #1
    75fc:	4413      	add	r3, r2
    75fe:	00db      	lsls	r3, r3, #3
    7600:	440b      	add	r3, r1
    7602:	681b      	ldr	r3, [r3, #0]
    7604:	2b02      	cmp	r3, #2
    7606:	d109      	bne.n	761c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7608:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    760c:	493e      	ldr	r1, [pc, #248]	; (7708 <Adc_UpdateStatusAfterGetStream+0x140>)
    760e:	4613      	mov	r3, r2
    7610:	005b      	lsls	r3, r3, #1
    7612:	4413      	add	r3, r2
    7614:	00db      	lsls	r3, r3, #3
    7616:	440b      	add	r3, r1
    7618:	2201      	movs	r2, #1
    761a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    761c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7620:	4939      	ldr	r1, [pc, #228]	; (7708 <Adc_UpdateStatusAfterGetStream+0x140>)
    7622:	4613      	mov	r3, r2
    7624:	005b      	lsls	r3, r3, #1
    7626:	4413      	add	r3, r2
    7628:	00db      	lsls	r3, r3, #3
    762a:	440b      	add	r3, r1
    762c:	681b      	ldr	r3, [r3, #0]
    762e:	2b03      	cmp	r3, #3
    7630:	d164      	bne.n	76fc <Adc_UpdateStatusAfterGetStream+0x134>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7632:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7636:	4a33      	ldr	r2, [pc, #204]	; (7704 <Adc_UpdateStatusAfterGetStream+0x13c>)
    7638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    763c:	6859      	ldr	r1, [r3, #4]
    763e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7642:	4613      	mov	r3, r2
    7644:	00db      	lsls	r3, r3, #3
    7646:	1a9b      	subs	r3, r3, r2
    7648:	00db      	lsls	r3, r3, #3
    764a:	440b      	add	r3, r1
    764c:	695b      	ldr	r3, [r3, #20]
    764e:	2b00      	cmp	r3, #0
    7650:	d154      	bne.n	76fc <Adc_UpdateStatusAfterGetStream+0x134>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7652:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7656:	4a2b      	ldr	r2, [pc, #172]	; (7704 <Adc_UpdateStatusAfterGetStream+0x13c>)
    7658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    765c:	6859      	ldr	r1, [r3, #4]
    765e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7662:	4613      	mov	r3, r2
    7664:	00db      	lsls	r3, r3, #3
    7666:	1a9b      	subs	r3, r3, r2
    7668:	00db      	lsls	r3, r3, #3
    766a:	440b      	add	r3, r1
    766c:	689b      	ldr	r3, [r3, #8]
    766e:	2b00      	cmp	r3, #0
    7670:	d02f      	beq.n	76d2 <Adc_UpdateStatusAfterGetStream+0x10a>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7672:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7676:	4a23      	ldr	r2, [pc, #140]	; (7704 <Adc_UpdateStatusAfterGetStream+0x13c>)
    7678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    767c:	6859      	ldr	r1, [r3, #4]
    767e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7682:	4613      	mov	r3, r2
    7684:	00db      	lsls	r3, r3, #3
    7686:	1a9b      	subs	r3, r3, r2
    7688:	00db      	lsls	r3, r3, #3
    768a:	440b      	add	r3, r1
    768c:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    768e:	2b01      	cmp	r3, #1
    7690:	d12a      	bne.n	76e8 <Adc_UpdateStatusAfterGetStream+0x120>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7692:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7696:	4a1b      	ldr	r2, [pc, #108]	; (7704 <Adc_UpdateStatusAfterGetStream+0x13c>)
    7698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    769c:	6859      	ldr	r1, [r3, #4]
    769e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    76a2:	4613      	mov	r3, r2
    76a4:	00db      	lsls	r3, r3, #3
    76a6:	1a9b      	subs	r3, r3, r2
    76a8:	00db      	lsls	r3, r3, #3
    76aa:	440b      	add	r3, r1
    76ac:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    76ae:	2b01      	cmp	r3, #1
    76b0:	d11a      	bne.n	76e8 <Adc_UpdateStatusAfterGetStream+0x120>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    76b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76b6:	4a13      	ldr	r2, [pc, #76]	; (7704 <Adc_UpdateStatusAfterGetStream+0x13c>)
    76b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76bc:	6859      	ldr	r1, [r3, #4]
    76be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    76c2:	4613      	mov	r3, r2
    76c4:	00db      	lsls	r3, r3, #3
    76c6:	1a9b      	subs	r3, r3, r2
    76c8:	00db      	lsls	r3, r3, #3
    76ca:	440b      	add	r3, r1
    76cc:	69db      	ldr	r3, [r3, #28]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76ce:	2b00      	cmp	r3, #0
    76d0:	d10a      	bne.n	76e8 <Adc_UpdateStatusAfterGetStream+0x120>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    76d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76d6:	490c      	ldr	r1, [pc, #48]	; (7708 <Adc_UpdateStatusAfterGetStream+0x140>)
    76d8:	4613      	mov	r3, r2
    76da:	005b      	lsls	r3, r3, #1
    76dc:	4413      	add	r3, r2
    76de:	00db      	lsls	r3, r3, #3
    76e0:	440b      	add	r3, r1
    76e2:	2200      	movs	r2, #0
    76e4:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    76e6:	e009      	b.n	76fc <Adc_UpdateStatusAfterGetStream+0x134>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    76e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76ec:	4906      	ldr	r1, [pc, #24]	; (7708 <Adc_UpdateStatusAfterGetStream+0x140>)
    76ee:	4613      	mov	r3, r2
    76f0:	005b      	lsls	r3, r3, #1
    76f2:	4413      	add	r3, r2
    76f4:	00db      	lsls	r3, r3, #3
    76f6:	440b      	add	r3, r1
    76f8:	2201      	movs	r2, #1
    76fa:	601a      	str	r2, [r3, #0]
}
    76fc:	bf00      	nop
    76fe:	b004      	add	sp, #16
    7700:	4770      	bx	lr
    7702:	bf00      	nop
    7704:	1fff8cf0 	.word	0x1fff8cf0
    7708:	1fff8cf4 	.word	0x1fff8cf4

0000770c <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    770c:	b500      	push	{lr}
    770e:	b085      	sub	sp, #20
    7710:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7712:	f002 fad7 	bl	9cc4 <Adc_GetCoreID>
    7716:	4603      	mov	r3, r0
    7718:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    771c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7720:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7724:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7728:	b2db      	uxtb	r3, r3
    772a:	4619      	mov	r1, r3
    772c:	9801      	ldr	r0, [sp, #4]
    772e:	f7ff fb8b 	bl	6e48 <Adc_CheckCurrentCoreId>
    7732:	4603      	mov	r3, r0
    7734:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    7738:	f89d 300e 	ldrb.w	r3, [sp, #14]
    773c:	2b00      	cmp	r3, #0
    773e:	d12c      	bne.n	779a <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    7740:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7744:	b2db      	uxtb	r3, r3
    7746:	4619      	mov	r1, r3
    7748:	4a16      	ldr	r2, [pc, #88]	; (77a4 <Adc_Init+0x98>)
    774a:	9b01      	ldr	r3, [sp, #4]
    774c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7750:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7754:	b2db      	uxtb	r3, r3
    7756:	4618      	mov	r0, r3
    7758:	f7ff fb1c 	bl	6d94 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    775c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7760:	b2db      	uxtb	r3, r3
    7762:	4618      	mov	r0, r3
    7764:	f7ff faa0 	bl	6ca8 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    7768:	f89d 300c 	ldrb.w	r3, [sp, #12]
    776c:	b2db      	uxtb	r3, r3
    776e:	461a      	mov	r2, r3
    7770:	4b0c      	ldr	r3, [pc, #48]	; (77a4 <Adc_Init+0x98>)
    7772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7776:	681b      	ldr	r3, [r3, #0]
    7778:	f89d 200f 	ldrb.w	r2, [sp, #15]
    777c:	4611      	mov	r1, r2
    777e:	4618      	mov	r0, r3
    7780:	f001 ffcc 	bl	971c <Adc_Ipw_Init>
    7784:	4603      	mov	r3, r0
    7786:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    778a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    778e:	2b01      	cmp	r3, #1
    7790:	d103      	bne.n	779a <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    7792:	212b      	movs	r1, #43	; 0x2b
    7794:	2000      	movs	r0, #0
    7796:	f7ff f851 	bl	683c <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    779a:	bf00      	nop
    779c:	b005      	add	sp, #20
    779e:	f85d fb04 	ldr.w	pc, [sp], #4
    77a2:	bf00      	nop
    77a4:	1fff8cf0 	.word	0x1fff8cf0

000077a8 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    77a8:	b500      	push	{lr}
    77aa:	b085      	sub	sp, #20
    77ac:	4603      	mov	r3, r0
    77ae:	9100      	str	r1, [sp, #0]
    77b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    77b4:	2301      	movs	r3, #1
    77b6:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    77ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77be:	4618      	mov	r0, r3
    77c0:	f7ff f960 	bl	6a84 <Adc_ValidateSetupBufferNotBusy>
    77c4:	4603      	mov	r3, r0
    77c6:	2b00      	cmp	r3, #0
    77c8:	d10d      	bne.n	77e6 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    77ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77ce:	4909      	ldr	r1, [pc, #36]	; (77f4 <Adc_SetupResultBuffer+0x4c>)
    77d0:	4613      	mov	r3, r2
    77d2:	005b      	lsls	r3, r3, #1
    77d4:	4413      	add	r3, r2
    77d6:	00db      	lsls	r3, r3, #3
    77d8:	440b      	add	r3, r1
    77da:	3310      	adds	r3, #16
    77dc:	9a00      	ldr	r2, [sp, #0]
    77de:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    77e0:	2300      	movs	r3, #0
    77e2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    77e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    77ea:	4618      	mov	r0, r3
    77ec:	b005      	add	sp, #20
    77ee:	f85d fb04 	ldr.w	pc, [sp], #4
    77f2:	bf00      	nop
    77f4:	1fff8cf4 	.word	0x1fff8cf4

000077f8 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    77f8:	b500      	push	{lr}
    77fa:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    77fc:	2300      	movs	r3, #0
    77fe:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7802:	f002 fa5f 	bl	9cc4 <Adc_GetCoreID>
    7806:	4603      	mov	r3, r0
    7808:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    780c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7810:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7814:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7818:	b2db      	uxtb	r3, r3
    781a:	461a      	mov	r2, r3
    781c:	4b2f      	ldr	r3, [pc, #188]	; (78dc <Adc_DeInit+0xe4>)
    781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7822:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7826:	4611      	mov	r1, r2
    7828:	4618      	mov	r0, r3
    782a:	f7ff fb0d 	bl	6e48 <Adc_CheckCurrentCoreId>
    782e:	4603      	mov	r3, r0
    7830:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7834:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7838:	2b00      	cmp	r3, #0
    783a:	d14b      	bne.n	78d4 <Adc_DeInit+0xdc>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    783c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7840:	b2db      	uxtb	r3, r3
    7842:	4618      	mov	r0, r3
    7844:	f7ff f8d0 	bl	69e8 <Adc_ValidateDeInitNotBusy>
    7848:	4603      	mov	r3, r0
    784a:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    784e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7852:	2b00      	cmp	r3, #0
    7854:	d13e      	bne.n	78d4 <Adc_DeInit+0xdc>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    7856:	f89d 3002 	ldrb.w	r3, [sp, #2]
    785a:	b2db      	uxtb	r3, r3
    785c:	4618      	mov	r0, r3
    785e:	f001 ffa2 	bl	97a6 <Adc_Ipw_DeInit>
    7862:	4603      	mov	r3, r0
    7864:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    7868:	f89d 3003 	ldrb.w	r3, [sp, #3]
    786c:	2b01      	cmp	r3, #1
    786e:	d103      	bne.n	7878 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7870:	212b      	movs	r1, #43	; 0x2b
    7872:	2001      	movs	r0, #1
    7874:	f7fe ffe2 	bl	683c <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7878:	2300      	movs	r3, #0
    787a:	f88d 3007 	strb.w	r3, [sp, #7]
    787e:	e01d      	b.n	78bc <Adc_DeInit+0xc4>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7880:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7884:	b2db      	uxtb	r3, r3
    7886:	461a      	mov	r2, r3
    7888:	4b14      	ldr	r3, [pc, #80]	; (78dc <Adc_DeInit+0xe4>)
    788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    788e:	681a      	ldr	r2, [r3, #0]
    7890:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7894:	4413      	add	r3, r2
    7896:	7f9b      	ldrb	r3, [r3, #30]
    7898:	2b01      	cmp	r3, #1
    789a:	d10a      	bne.n	78b2 <Adc_DeInit+0xba>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    789c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    78a0:	490f      	ldr	r1, [pc, #60]	; (78e0 <Adc_DeInit+0xe8>)
    78a2:	4613      	mov	r3, r2
    78a4:	005b      	lsls	r3, r3, #1
    78a6:	4413      	add	r3, r2
    78a8:	005b      	lsls	r3, r3, #1
    78aa:	440b      	add	r3, r1
    78ac:	3304      	adds	r3, #4
    78ae:	2200      	movs	r2, #0
    78b0:	701a      	strb	r2, [r3, #0]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    78b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b6:	3301      	adds	r3, #1
    78b8:	f88d 3007 	strb.w	r3, [sp, #7]
    78bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78c0:	2b01      	cmp	r3, #1
    78c2:	d9dd      	bls.n	7880 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    78c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    78c8:	b2db      	uxtb	r3, r3
    78ca:	4619      	mov	r1, r3
    78cc:	4b03      	ldr	r3, [pc, #12]	; (78dc <Adc_DeInit+0xe4>)
    78ce:	2200      	movs	r2, #0
    78d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    78d4:	bf00      	nop
    78d6:	b003      	add	sp, #12
    78d8:	f85d fb04 	ldr.w	pc, [sp], #4
    78dc:	1fff8cf0 	.word	0x1fff8cf0
    78e0:	1fff8d0c 	.word	0x1fff8d0c

000078e4 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    78e4:	b500      	push	{lr}
    78e6:	b085      	sub	sp, #20
    78e8:	4603      	mov	r3, r0
    78ea:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    78ee:	2300      	movs	r3, #0
    78f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    78f4:	2300      	movs	r3, #0
    78f6:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    78fa:	f002 f9e3 	bl	9cc4 <Adc_GetCoreID>
    78fe:	4603      	mov	r3, r0
    7900:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7904:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7908:	b2db      	uxtb	r3, r3
    790a:	461a      	mov	r2, r3
    790c:	4b1b      	ldr	r3, [pc, #108]	; (797c <Adc_StartGroupConversion+0x98>)
    790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7912:	68da      	ldr	r2, [r3, #12]
    7914:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7918:	005b      	lsls	r3, r3, #1
    791a:	4413      	add	r3, r2
    791c:	881b      	ldrh	r3, [r3, #0]
    791e:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    7922:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7926:	b2da      	uxtb	r2, r3
    7928:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    792c:	4611      	mov	r1, r2
    792e:	4618      	mov	r0, r3
    7930:	f7ff f8cc 	bl	6acc <Adc_ValidateStateStartGroupConvNotBusy>
    7934:	4603      	mov	r3, r0
    7936:	2b00      	cmp	r3, #0
    7938:	d11b      	bne.n	7972 <Adc_StartGroupConversion+0x8e>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    793a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    793e:	b2db      	uxtb	r3, r3
    7940:	461a      	mov	r2, r3
    7942:	4b0e      	ldr	r3, [pc, #56]	; (797c <Adc_StartGroupConversion+0x98>)
    7944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7948:	6859      	ldr	r1, [r3, #4]
    794a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    794e:	4613      	mov	r3, r2
    7950:	00db      	lsls	r3, r3, #3
    7952:	1a9b      	subs	r3, r3, r2
    7954:	00db      	lsls	r3, r3, #3
    7956:	440b      	add	r3, r1
    7958:	789b      	ldrb	r3, [r3, #2]
    795a:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    795e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7962:	b2da      	uxtb	r2, r3
    7964:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7968:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    796c:	4618      	mov	r0, r3
    796e:	f7ff fa9e 	bl	6eae <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7972:	bf00      	nop
    7974:	b005      	add	sp, #20
    7976:	f85d fb04 	ldr.w	pc, [sp], #4
    797a:	bf00      	nop
    797c:	1fff8cf0 	.word	0x1fff8cf0

00007980 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7980:	b500      	push	{lr}
    7982:	b085      	sub	sp, #20
    7984:	4603      	mov	r3, r0
    7986:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    798a:	2300      	movs	r3, #0
    798c:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7990:	2300      	movs	r3, #0
    7992:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    7996:	f002 f995 	bl	9cc4 <Adc_GetCoreID>
    799a:	4603      	mov	r3, r0
    799c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    79a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79a4:	b2da      	uxtb	r2, r3
    79a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79aa:	4619      	mov	r1, r3
    79ac:	2003      	movs	r0, #3
    79ae:	f7ff f909 	bl	6bc4 <Adc_ValidateStateNotIdle>
    79b2:	4603      	mov	r3, r0
    79b4:	2b00      	cmp	r3, #0
    79b6:	d12a      	bne.n	7a0e <Adc_StopGroupConversion+0x8e>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    79b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79bc:	b2db      	uxtb	r3, r3
    79be:	461a      	mov	r2, r3
    79c0:	4b15      	ldr	r3, [pc, #84]	; (7a18 <Adc_StopGroupConversion+0x98>)
    79c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79c6:	68da      	ldr	r2, [r3, #12]
    79c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79cc:	005b      	lsls	r3, r3, #1
    79ce:	4413      	add	r3, r2
    79d0:	881b      	ldrh	r3, [r3, #0]
    79d2:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    79d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79da:	b2db      	uxtb	r3, r3
    79dc:	461a      	mov	r2, r3
    79de:	4b0e      	ldr	r3, [pc, #56]	; (7a18 <Adc_StopGroupConversion+0x98>)
    79e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79e4:	6859      	ldr	r1, [r3, #4]
    79e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    79ea:	4613      	mov	r3, r2
    79ec:	00db      	lsls	r3, r3, #3
    79ee:	1a9b      	subs	r3, r3, r2
    79f0:	00db      	lsls	r3, r3, #3
    79f2:	440b      	add	r3, r1
    79f4:	789b      	ldrb	r3, [r3, #2]
    79f6:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    79fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79fe:	b2da      	uxtb	r2, r3
    7a00:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7a04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a08:	4618      	mov	r0, r3
    7a0a:	f7ff fb43 	bl	7094 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7a0e:	bf00      	nop
    7a10:	b005      	add	sp, #20
    7a12:	f85d fb04 	ldr.w	pc, [sp], #4
    7a16:	bf00      	nop
    7a18:	1fff8cf0 	.word	0x1fff8cf0

00007a1c <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7a1c:	b500      	push	{lr}
    7a1e:	b085      	sub	sp, #20
    7a20:	4603      	mov	r3, r0
    7a22:	9100      	str	r1, [sp, #0]
    7a24:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7a28:	2301      	movs	r3, #1
    7a2a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7a2e:	2301      	movs	r3, #1
    7a30:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7a34:	f002 f946 	bl	9cc4 <Adc_GetCoreID>
    7a38:	4603      	mov	r3, r0
    7a3a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7a3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a42:	b2da      	uxtb	r2, r3
    7a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a48:	4619      	mov	r1, r3
    7a4a:	2004      	movs	r0, #4
    7a4c:	f7ff f8ba 	bl	6bc4 <Adc_ValidateStateNotIdle>
    7a50:	4603      	mov	r3, r0
    7a52:	2b00      	cmp	r3, #0
    7a54:	d121      	bne.n	7a9a <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7a56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a5a:	b2db      	uxtb	r3, r3
    7a5c:	f10d 020d 	add.w	r2, sp, #13
    7a60:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7a64:	9900      	ldr	r1, [sp, #0]
    7a66:	f002 f882 	bl	9b6e <Adc_Ipw_ReadGroup>
    7a6a:	4603      	mov	r3, r0
    7a6c:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7a70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a74:	2b00      	cmp	r3, #0
    7a76:	d006      	beq.n	7a86 <Adc_ReadGroup+0x6a>
    7a78:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a7c:	f083 0301 	eor.w	r3, r3, #1
    7a80:	b2db      	uxtb	r3, r3
    7a82:	2b00      	cmp	r3, #0
    7a84:	d009      	beq.n	7a9a <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7a86:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7a8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a8e:	b2da      	uxtb	r2, r3
    7a90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a94:	4618      	mov	r0, r3
    7a96:	f7ff fbc1 	bl	721c <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a9e:	4618      	mov	r0, r3
    7aa0:	b005      	add	sp, #20
    7aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00007aa6 <Adc_EnableGroupNotification>:

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
/* SWS_Adc_00372, SWS_Adc_00413 */
/** @implements      Adc_EnableGroupNotification_Activity */
void Adc_EnableGroupNotification(Adc_GroupType Group)
{
    7aa6:	b082      	sub	sp, #8
    7aa8:	4603      	mov	r3, r0
    7aaa:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_NotifyCapablity(ADC_ENABLEGROUPNOTIFICATION_ID, Group, CoreId))
        {
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */
            /* SWS_Adc_00057 */
            Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_ENABLED;
    7aae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ab2:	4906      	ldr	r1, [pc, #24]	; (7acc <Adc_EnableGroupNotification+0x26>)
    7ab4:	4613      	mov	r3, r2
    7ab6:	005b      	lsls	r3, r3, #1
    7ab8:	4413      	add	r3, r2
    7aba:	00db      	lsls	r3, r3, #3
    7abc:	440b      	add	r3, r1
    7abe:	3308      	adds	r3, #8
    7ac0:	2201      	movs	r2, #1
    7ac2:	601a      	str	r2, [r3, #0]
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7ac4:	bf00      	nop
    7ac6:	b002      	add	sp, #8
    7ac8:	4770      	bx	lr
    7aca:	bf00      	nop
    7acc:	1fff8cf4 	.word	0x1fff8cf4

00007ad0 <Adc_DisableGroupNotification>:

/* SWS_Adc_00373, SWS_Adc_00413, SWS_Adc_00416 */
/** @implements      Adc_DisableGroupNotification_Activity */
void Adc_DisableGroupNotification(Adc_GroupType Group)
{
    7ad0:	b082      	sub	sp, #8
    7ad2:	4603      	mov	r3, r0
    7ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_NotifyCapablity(ADC_DISABLEGROUPNOTIFICATION_ID, Group, CoreId))
        {
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */
            /* SWS_Adc_00058 */
            Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
    7ad8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7adc:	4905      	ldr	r1, [pc, #20]	; (7af4 <Adc_DisableGroupNotification+0x24>)
    7ade:	4613      	mov	r3, r2
    7ae0:	005b      	lsls	r3, r3, #1
    7ae2:	4413      	add	r3, r2
    7ae4:	00db      	lsls	r3, r3, #3
    7ae6:	440b      	add	r3, r1
    7ae8:	3308      	adds	r3, #8
    7aea:	2200      	movs	r2, #0
    7aec:	601a      	str	r2, [r3, #0]
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7aee:	bf00      	nop
    7af0:	b002      	add	sp, #8
    7af2:	4770      	bx	lr
    7af4:	1fff8cf4 	.word	0x1fff8cf4

00007af8 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7af8:	b084      	sub	sp, #16
    7afa:	4603      	mov	r3, r0
    7afc:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7b00:	2300      	movs	r3, #0
    7b02:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7b04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b08:	4905      	ldr	r1, [pc, #20]	; (7b20 <Adc_GetGroupStatus+0x28>)
    7b0a:	4613      	mov	r3, r2
    7b0c:	005b      	lsls	r3, r3, #1
    7b0e:	4413      	add	r3, r2
    7b10:	00db      	lsls	r3, r3, #3
    7b12:	440b      	add	r3, r1
    7b14:	681b      	ldr	r3, [r3, #0]
    7b16:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7b18:	9b03      	ldr	r3, [sp, #12]
}
    7b1a:	4618      	mov	r0, r3
    7b1c:	b004      	add	sp, #16
    7b1e:	4770      	bx	lr
    7b20:	1fff8cf4 	.word	0x1fff8cf4

00007b24 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7b24:	b500      	push	{lr}
    7b26:	b085      	sub	sp, #20
    7b28:	4603      	mov	r3, r0
    7b2a:	9100      	str	r1, [sp, #0]
    7b2c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7b30:	f002 f8c8 	bl	9cc4 <Adc_GetCoreID>
    7b34:	4603      	mov	r3, r0
    7b36:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7b3a:	2300      	movs	r3, #0
    7b3c:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7b40:	2300      	movs	r3, #0
    7b42:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7b46:	2300      	movs	r3, #0
    7b48:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7b4c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b50:	b2da      	uxtb	r2, r3
    7b52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b56:	4619      	mov	r1, r3
    7b58:	200b      	movs	r0, #11
    7b5a:	f7ff f833 	bl	6bc4 <Adc_ValidateStateNotIdle>
    7b5e:	4603      	mov	r3, r0
    7b60:	2b00      	cmp	r3, #0
    7b62:	f040 8090 	bne.w	7c86 <Adc_GetStreamLastPointer+0x162>
        {
            *PtrToSamplePtr = NULL_PTR;
    7b66:	9b00      	ldr	r3, [sp, #0]
    7b68:	2200      	movs	r2, #0
    7b6a:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b70:	4949      	ldr	r1, [pc, #292]	; (7c98 <Adc_GetStreamLastPointer+0x174>)
    7b72:	4613      	mov	r3, r2
    7b74:	005b      	lsls	r3, r3, #1
    7b76:	4413      	add	r3, r2
    7b78:	00db      	lsls	r3, r3, #3
    7b7a:	440b      	add	r3, r1
    7b7c:	681b      	ldr	r3, [r3, #0]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	f000 8084 	beq.w	7c8c <Adc_GetStreamLastPointer+0x168>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7b84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b88:	4943      	ldr	r1, [pc, #268]	; (7c98 <Adc_GetStreamLastPointer+0x174>)
    7b8a:	4613      	mov	r3, r2
    7b8c:	005b      	lsls	r3, r3, #1
    7b8e:	4413      	add	r3, r2
    7b90:	00db      	lsls	r3, r3, #3
    7b92:	440b      	add	r3, r1
    7b94:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b96:	2b01      	cmp	r3, #1
    7b98:	d078      	beq.n	7c8c <Adc_GetStreamLastPointer+0x168>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b9a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b9e:	b2db      	uxtb	r3, r3
    7ba0:	461a      	mov	r2, r3
    7ba2:	4b3e      	ldr	r3, [pc, #248]	; (7c9c <Adc_GetStreamLastPointer+0x178>)
    7ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ba8:	68da      	ldr	r2, [r3, #12]
    7baa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7bae:	005b      	lsls	r3, r3, #1
    7bb0:	4413      	add	r3, r2
    7bb2:	881b      	ldrh	r3, [r3, #0]
    7bb4:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7bb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7bbc:	4936      	ldr	r1, [pc, #216]	; (7c98 <Adc_GetStreamLastPointer+0x174>)
    7bbe:	4613      	mov	r3, r2
    7bc0:	005b      	lsls	r3, r3, #1
    7bc2:	4413      	add	r3, r2
    7bc4:	00db      	lsls	r3, r3, #3
    7bc6:	440b      	add	r3, r1
    7bc8:	330c      	adds	r3, #12
    7bca:	881b      	ldrh	r3, [r3, #0]
    7bcc:	b29b      	uxth	r3, r3
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d125      	bne.n	7c1e <Adc_GetStreamLastPointer+0xfa>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7bd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7bd6:	b2db      	uxtb	r3, r3
    7bd8:	461a      	mov	r2, r3
    7bda:	4b30      	ldr	r3, [pc, #192]	; (7c9c <Adc_GetStreamLastPointer+0x178>)
    7bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7be0:	6859      	ldr	r1, [r3, #4]
    7be2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    7be6:	4613      	mov	r3, r2
    7be8:	00db      	lsls	r3, r3, #3
    7bea:	1a9b      	subs	r3, r3, r2
    7bec:	00db      	lsls	r3, r3, #3
    7bee:	440b      	add	r3, r1
    7bf0:	8c1b      	ldrh	r3, [r3, #32]
    7bf2:	3b01      	subs	r3, #1
    7bf4:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7bf8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7bfc:	b2db      	uxtb	r3, r3
    7bfe:	461a      	mov	r2, r3
    7c00:	4b26      	ldr	r3, [pc, #152]	; (7c9c <Adc_GetStreamLastPointer+0x178>)
    7c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c06:	6859      	ldr	r1, [r3, #4]
    7c08:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    7c0c:	4613      	mov	r3, r2
    7c0e:	00db      	lsls	r3, r3, #3
    7c10:	1a9b      	subs	r3, r3, r2
    7c12:	00db      	lsls	r3, r3, #3
    7c14:	440b      	add	r3, r1
    7c16:	8c1b      	ldrh	r3, [r3, #32]
    7c18:	f8ad 300e 	strh.w	r3, [sp, #14]
    7c1c:	e019      	b.n	7c52 <Adc_GetStreamLastPointer+0x12e>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7c1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c22:	491d      	ldr	r1, [pc, #116]	; (7c98 <Adc_GetStreamLastPointer+0x174>)
    7c24:	4613      	mov	r3, r2
    7c26:	005b      	lsls	r3, r3, #1
    7c28:	4413      	add	r3, r2
    7c2a:	00db      	lsls	r3, r3, #3
    7c2c:	440b      	add	r3, r1
    7c2e:	330c      	adds	r3, #12
    7c30:	881b      	ldrh	r3, [r3, #0]
    7c32:	b29b      	uxth	r3, r3
    7c34:	3b01      	subs	r3, #1
    7c36:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7c3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c3e:	4916      	ldr	r1, [pc, #88]	; (7c98 <Adc_GetStreamLastPointer+0x174>)
    7c40:	4613      	mov	r3, r2
    7c42:	005b      	lsls	r3, r3, #1
    7c44:	4413      	add	r3, r2
    7c46:	00db      	lsls	r3, r3, #3
    7c48:	440b      	add	r3, r1
    7c4a:	330c      	adds	r3, #12
    7c4c:	881b      	ldrh	r3, [r3, #0]
    7c4e:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7c52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c56:	4910      	ldr	r1, [pc, #64]	; (7c98 <Adc_GetStreamLastPointer+0x174>)
    7c58:	4613      	mov	r3, r2
    7c5a:	005b      	lsls	r3, r3, #1
    7c5c:	4413      	add	r3, r2
    7c5e:	00db      	lsls	r3, r3, #3
    7c60:	440b      	add	r3, r1
    7c62:	3310      	adds	r3, #16
    7c64:	681a      	ldr	r2, [r3, #0]
    7c66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c6a:	005b      	lsls	r3, r3, #1
    7c6c:	441a      	add	r2, r3
    7c6e:	9b00      	ldr	r3, [sp, #0]
    7c70:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7c72:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7c76:	b2da      	uxtb	r2, r3
    7c78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c7c:	4611      	mov	r1, r2
    7c7e:	4618      	mov	r0, r3
    7c80:	f7ff fca2 	bl	75c8 <Adc_UpdateStatusAfterGetStream>
    7c84:	e002      	b.n	7c8c <Adc_GetStreamLastPointer+0x168>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7c86:	9b00      	ldr	r3, [sp, #0]
    7c88:	2200      	movs	r2, #0
    7c8a:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7c8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7c90:	4618      	mov	r0, r3
    7c92:	b005      	add	sp, #20
    7c94:	f85d fb04 	ldr.w	pc, [sp], #4
    7c98:	1fff8cf4 	.word	0x1fff8cf4
    7c9c:	1fff8cf0 	.word	0x1fff8cf0

00007ca0 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7ca0:	b082      	sub	sp, #8
    7ca2:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7ca4:	9b01      	ldr	r3, [sp, #4]
    7ca6:	222b      	movs	r2, #43	; 0x2b
    7ca8:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7caa:	9b01      	ldr	r3, [sp, #4]
    7cac:	227b      	movs	r2, #123	; 0x7b
    7cae:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7cb0:	9b01      	ldr	r3, [sp, #4]
    7cb2:	2202      	movs	r2, #2
    7cb4:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7cb6:	9b01      	ldr	r3, [sp, #4]
    7cb8:	2200      	movs	r2, #0
    7cba:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7cbc:	9b01      	ldr	r3, [sp, #4]
    7cbe:	2200      	movs	r2, #0
    7cc0:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7cc2:	bf00      	nop
    7cc4:	b002      	add	sp, #8
    7cc6:	4770      	bx	lr

00007cc8 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7cc8:	b500      	push	{lr}
    7cca:	b085      	sub	sp, #20
    7ccc:	4603      	mov	r3, r0
    7cce:	9100      	str	r1, [sp, #0]
    7cd0:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7cd4:	2300      	movs	r3, #0
    7cd6:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7cda:	f001 fff3 	bl	9cc4 <Adc_GetCoreID>
    7cde:	4603      	mov	r3, r0
    7ce0:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7ce4:	9b00      	ldr	r3, [sp, #0]
    7ce6:	2201      	movs	r2, #1
    7ce8:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cee:	2129      	movs	r1, #41	; 0x29
    7cf0:	4618      	mov	r0, r3
    7cf2:	f7fe fdb8 	bl	6866 <Adc_ValidateNotBusyNoQueue>
    7cf6:	4603      	mov	r3, r0
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d115      	bne.n	7d28 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7cfc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7d00:	b2db      	uxtb	r3, r3
    7d02:	4619      	mov	r1, r3
    7d04:	2029      	movs	r0, #41	; 0x29
    7d06:	f7fe fe1d 	bl	6944 <Adc_ValidateCheckGroupNotConversion>
    7d0a:	4603      	mov	r3, r0
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d10b      	bne.n	7d28 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7d10:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7d14:	b2da      	uxtb	r2, r3
    7d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d1a:	9900      	ldr	r1, [sp, #0]
    7d1c:	4618      	mov	r0, r3
    7d1e:	f001 ffa7 	bl	9c70 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7d22:	2301      	movs	r3, #1
    7d24:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7d28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	d007      	beq.n	7d40 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7d30:	9b00      	ldr	r3, [sp, #0]
    7d32:	781b      	ldrb	r3, [r3, #0]
    7d34:	2b01      	cmp	r3, #1
    7d36:	d103      	bne.n	7d40 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7d38:	212b      	movs	r1, #43	; 0x2b
    7d3a:	2029      	movs	r0, #41	; 0x29
    7d3c:	f7fe fd7e 	bl	683c <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7d40:	bf00      	nop
    7d42:	b005      	add	sp, #20
    7d44:	f85d fb04 	ldr.w	pc, [sp], #4

00007d48 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7d48:	b086      	sub	sp, #24
    7d4a:	9003      	str	r0, [sp, #12]
    7d4c:	9102      	str	r1, [sp, #8]
    7d4e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7d50:	9b03      	ldr	r3, [sp, #12]
    7d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7d56:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7d58:	9b02      	ldr	r3, [sp, #8]
    7d5a:	43db      	mvns	r3, r3
    7d5c:	9a05      	ldr	r2, [sp, #20]
    7d5e:	4013      	ands	r3, r2
    7d60:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7d62:	9a05      	ldr	r2, [sp, #20]
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	4313      	orrs	r3, r2
    7d68:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7d6a:	9b03      	ldr	r3, [sp, #12]
    7d6c:	9a05      	ldr	r2, [sp, #20]
    7d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7d72:	bf00      	nop
    7d74:	b006      	add	sp, #24
    7d76:	4770      	bx	lr

00007d78 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7d78:	b086      	sub	sp, #24
    7d7a:	9003      	str	r0, [sp, #12]
    7d7c:	9102      	str	r1, [sp, #8]
    7d7e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7d80:	9b03      	ldr	r3, [sp, #12]
    7d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7d84:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7d86:	9b05      	ldr	r3, [sp, #20]
    7d88:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7d8c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7d8e:	9b02      	ldr	r3, [sp, #8]
    7d90:	015b      	lsls	r3, r3, #5
    7d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7d96:	9a05      	ldr	r2, [sp, #20]
    7d98:	4313      	orrs	r3, r2
    7d9a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7d9c:	9b01      	ldr	r3, [sp, #4]
    7d9e:	f003 0303 	and.w	r3, r3, #3
    7da2:	9a05      	ldr	r2, [sp, #20]
    7da4:	4313      	orrs	r3, r2
    7da6:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7da8:	9b03      	ldr	r3, [sp, #12]
    7daa:	9a05      	ldr	r2, [sp, #20]
    7dac:	641a      	str	r2, [r3, #64]	; 0x40
}
    7dae:	bf00      	nop
    7db0:	b006      	add	sp, #24
    7db2:	4770      	bx	lr

00007db4 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7db4:	b084      	sub	sp, #16
    7db6:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7db8:	2300      	movs	r3, #0
    7dba:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7dbc:	9b01      	ldr	r3, [sp, #4]
    7dbe:	095b      	lsrs	r3, r3, #5
    7dc0:	f003 0303 	and.w	r3, r3, #3
    7dc4:	2b03      	cmp	r3, #3
    7dc6:	d00c      	beq.n	7de2 <Adc_HwAcc_GetClockDivide+0x2e>
    7dc8:	2b03      	cmp	r3, #3
    7dca:	d80d      	bhi.n	7de8 <Adc_HwAcc_GetClockDivide+0x34>
    7dcc:	2b01      	cmp	r3, #1
    7dce:	d002      	beq.n	7dd6 <Adc_HwAcc_GetClockDivide+0x22>
    7dd0:	2b02      	cmp	r3, #2
    7dd2:	d003      	beq.n	7ddc <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7dd4:	e008      	b.n	7de8 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7dd6:	2301      	movs	r3, #1
    7dd8:	9303      	str	r3, [sp, #12]
            break;
    7dda:	e006      	b.n	7dea <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7ddc:	2302      	movs	r3, #2
    7dde:	9303      	str	r3, [sp, #12]
            break;
    7de0:	e003      	b.n	7dea <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7de2:	2303      	movs	r3, #3
    7de4:	9303      	str	r3, [sp, #12]
            break;
    7de6:	e000      	b.n	7dea <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7de8:	bf00      	nop
    }
    return ReturnValue;
    7dea:	9b03      	ldr	r3, [sp, #12]
}
    7dec:	4618      	mov	r0, r3
    7dee:	b004      	add	sp, #16
    7df0:	4770      	bx	lr

00007df2 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7df2:	b084      	sub	sp, #16
    7df4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7df6:	2300      	movs	r3, #0
    7df8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7dfa:	9b01      	ldr	r3, [sp, #4]
    7dfc:	f003 0303 	and.w	r3, r3, #3
    7e00:	2b03      	cmp	r3, #3
    7e02:	d00c      	beq.n	7e1e <Adc_HwAcc_GetInputClock+0x2c>
    7e04:	2b03      	cmp	r3, #3
    7e06:	d80d      	bhi.n	7e24 <Adc_HwAcc_GetInputClock+0x32>
    7e08:	2b01      	cmp	r3, #1
    7e0a:	d002      	beq.n	7e12 <Adc_HwAcc_GetInputClock+0x20>
    7e0c:	2b02      	cmp	r3, #2
    7e0e:	d003      	beq.n	7e18 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7e10:	e008      	b.n	7e24 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7e12:	2301      	movs	r3, #1
    7e14:	9303      	str	r3, [sp, #12]
            break;
    7e16:	e006      	b.n	7e26 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7e18:	2302      	movs	r3, #2
    7e1a:	9303      	str	r3, [sp, #12]
            break;
    7e1c:	e003      	b.n	7e26 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7e1e:	2303      	movs	r3, #3
    7e20:	9303      	str	r3, [sp, #12]
            break;
    7e22:	e000      	b.n	7e26 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7e24:	bf00      	nop
    }
    return ReturnValue;
    7e26:	9b03      	ldr	r3, [sp, #12]
}
    7e28:	4618      	mov	r0, r3
    7e2a:	b004      	add	sp, #16
    7e2c:	4770      	bx	lr

00007e2e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7e2e:	b084      	sub	sp, #16
    7e30:	9001      	str	r0, [sp, #4]
    7e32:	460b      	mov	r3, r1
    7e34:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7e38:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d002      	beq.n	7e46 <Adc_HwAcc_SetSampleTime+0x18>
    7e40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7e44:	e000      	b.n	7e48 <Adc_HwAcc_SetSampleTime+0x1a>
    7e46:	2301      	movs	r3, #1
    7e48:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7e4c:	9b01      	ldr	r3, [sp, #4]
    7e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7e50:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7e52:	9b02      	ldr	r3, [sp, #8]
    7e54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7e58:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7e5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e5e:	9a02      	ldr	r2, [sp, #8]
    7e60:	4313      	orrs	r3, r2
    7e62:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7e64:	9b01      	ldr	r3, [sp, #4]
    7e66:	9a02      	ldr	r2, [sp, #8]
    7e68:	645a      	str	r2, [r3, #68]	; 0x44
}
    7e6a:	bf00      	nop
    7e6c:	b004      	add	sp, #16
    7e6e:	4770      	bx	lr

00007e70 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7e70:	b086      	sub	sp, #24
    7e72:	9003      	str	r0, [sp, #12]
    7e74:	460b      	mov	r3, r1
    7e76:	9201      	str	r2, [sp, #4]
    7e78:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7e7c:	9b03      	ldr	r3, [sp, #12]
    7e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7e82:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7e84:	9b05      	ldr	r3, [sp, #20]
    7e86:	f023 0307 	bic.w	r3, r3, #7
    7e8a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7e8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e90:	2b00      	cmp	r3, #0
    7e92:	d001      	beq.n	7e98 <Adc_HwAcc_SetAveraging+0x28>
    7e94:	2304      	movs	r3, #4
    7e96:	e000      	b.n	7e9a <Adc_HwAcc_SetAveraging+0x2a>
    7e98:	2300      	movs	r3, #0
    7e9a:	9a05      	ldr	r2, [sp, #20]
    7e9c:	4313      	orrs	r3, r2
    7e9e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7ea0:	9b01      	ldr	r3, [sp, #4]
    7ea2:	f003 0303 	and.w	r3, r3, #3
    7ea6:	9a05      	ldr	r2, [sp, #20]
    7ea8:	4313      	orrs	r3, r2
    7eaa:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7eac:	9b03      	ldr	r3, [sp, #12]
    7eae:	9a05      	ldr	r2, [sp, #20]
    7eb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7eb4:	bf00      	nop
    7eb6:	b006      	add	sp, #24
    7eb8:	4770      	bx	lr

00007eba <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    7eba:	b084      	sub	sp, #16
    7ebc:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    7ebe:	2300      	movs	r3, #0
    7ec0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7ec2:	9b01      	ldr	r3, [sp, #4]
    7ec4:	f003 0303 	and.w	r3, r3, #3
    7ec8:	2b03      	cmp	r3, #3
    7eca:	d00c      	beq.n	7ee6 <Adc_HwAcc_GetAverageSelect+0x2c>
    7ecc:	2b03      	cmp	r3, #3
    7ece:	d80d      	bhi.n	7eec <Adc_HwAcc_GetAverageSelect+0x32>
    7ed0:	2b01      	cmp	r3, #1
    7ed2:	d002      	beq.n	7eda <Adc_HwAcc_GetAverageSelect+0x20>
    7ed4:	2b02      	cmp	r3, #2
    7ed6:	d003      	beq.n	7ee0 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7ed8:	e008      	b.n	7eec <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    7eda:	2301      	movs	r3, #1
    7edc:	9303      	str	r3, [sp, #12]
            break;
    7ede:	e006      	b.n	7eee <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7ee0:	2302      	movs	r3, #2
    7ee2:	9303      	str	r3, [sp, #12]
            break;
    7ee4:	e003      	b.n	7eee <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7ee6:	2303      	movs	r3, #3
    7ee8:	9303      	str	r3, [sp, #12]
            break;
    7eea:	e000      	b.n	7eee <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7eec:	bf00      	nop
    }
    return ReturnValue;
    7eee:	9b03      	ldr	r3, [sp, #12]
}
    7ef0:	4618      	mov	r0, r3
    7ef2:	b004      	add	sp, #16
    7ef4:	4770      	bx	lr

00007ef6 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7ef6:	b084      	sub	sp, #16
    7ef8:	9001      	str	r0, [sp, #4]
    7efa:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7efc:	9b01      	ldr	r3, [sp, #4]
    7efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7f02:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7f04:	9b03      	ldr	r3, [sp, #12]
    7f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7f0a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7f0c:	9b00      	ldr	r3, [sp, #0]
    7f0e:	019b      	lsls	r3, r3, #6
    7f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7f14:	9a03      	ldr	r2, [sp, #12]
    7f16:	4313      	orrs	r3, r2
    7f18:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7f1a:	9b01      	ldr	r3, [sp, #4]
    7f1c:	9a03      	ldr	r2, [sp, #12]
    7f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7f22:	bf00      	nop
    7f24:	b004      	add	sp, #16
    7f26:	4770      	bx	lr

00007f28 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7f28:	b084      	sub	sp, #16
    7f2a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7f2c:	2300      	movs	r3, #0
    7f2e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7f30:	9b01      	ldr	r3, [sp, #4]
    7f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7f36:	2b00      	cmp	r3, #0
    7f38:	d001      	beq.n	7f3e <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7f3a:	2301      	movs	r3, #1
    7f3c:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7f3e:	9b03      	ldr	r3, [sp, #12]
}
    7f40:	4618      	mov	r0, r3
    7f42:	b004      	add	sp, #16
    7f44:	4770      	bx	lr

00007f46 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7f46:	b086      	sub	sp, #24
    7f48:	9003      	str	r0, [sp, #12]
    7f4a:	9201      	str	r2, [sp, #4]
    7f4c:	461a      	mov	r2, r3
    7f4e:	460b      	mov	r3, r1
    7f50:	f88d 300b 	strb.w	r3, [sp, #11]
    7f54:	4613      	mov	r3, r2
    7f56:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7f5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f5e:	9b03      	ldr	r3, [sp, #12]
    7f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f64:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7f66:	9b05      	ldr	r3, [sp, #20]
    7f68:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7f6c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7f6e:	9b01      	ldr	r3, [sp, #4]
    7f70:	f003 031f 	and.w	r3, r3, #31
    7f74:	9a05      	ldr	r2, [sp, #20]
    7f76:	4313      	orrs	r3, r2
    7f78:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7f7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7f7e:	2b00      	cmp	r3, #0
    7f80:	d001      	beq.n	7f86 <Adc_HwAcc_SetChannel+0x40>
    7f82:	2340      	movs	r3, #64	; 0x40
    7f84:	e000      	b.n	7f88 <Adc_HwAcc_SetChannel+0x42>
    7f86:	2300      	movs	r3, #0
    7f88:	9a05      	ldr	r2, [sp, #20]
    7f8a:	4313      	orrs	r3, r2
    7f8c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7f8e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f92:	9b03      	ldr	r3, [sp, #12]
    7f94:	9905      	ldr	r1, [sp, #20]
    7f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7f9a:	bf00      	nop
    7f9c:	b006      	add	sp, #24
    7f9e:	4770      	bx	lr

00007fa0 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7fa0:	b082      	sub	sp, #8
    7fa2:	9001      	str	r0, [sp, #4]
    7fa4:	460b      	mov	r3, r1
    7fa6:	f8ad 3002 	strh.w	r3, [sp, #2]
    7faa:	4613      	mov	r3, r2
    7fac:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7fb0:	f8bd 3000 	ldrh.w	r3, [sp]
    7fb4:	b2da      	uxtb	r2, r3
    7fb6:	9b01      	ldr	r3, [sp, #4]
    7fb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    7fbc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7fc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7fc4:	9b01      	ldr	r3, [sp, #4]
    7fc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    7fca:	bf00      	nop
    7fcc:	b002      	add	sp, #8
    7fce:	4770      	bx	lr

00007fd0 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7fd0:	b082      	sub	sp, #8
    7fd2:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7fd4:	9b01      	ldr	r3, [sp, #4]
    7fd6:	099b      	lsrs	r3, r3, #6
    7fd8:	f003 0301 	and.w	r3, r3, #1
    7fdc:	2b00      	cmp	r3, #0
    7fde:	bf14      	ite	ne
    7fe0:	2301      	movne	r3, #1
    7fe2:	2300      	moveq	r3, #0
    7fe4:	b2db      	uxtb	r3, r3
}
    7fe6:	4618      	mov	r0, r3
    7fe8:	b002      	add	sp, #8
    7fea:	4770      	bx	lr

00007fec <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7fec:	b082      	sub	sp, #8
    7fee:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7ff0:	9b01      	ldr	r3, [sp, #4]
    7ff2:	09db      	lsrs	r3, r3, #7
    7ff4:	f003 0301 	and.w	r3, r3, #1
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	bf14      	ite	ne
    7ffc:	2301      	movne	r3, #1
    7ffe:	2300      	moveq	r3, #0
    8000:	b2db      	uxtb	r3, r3
}
    8002:	4618      	mov	r0, r3
    8004:	b002      	add	sp, #8
    8006:	4770      	bx	lr

00008008 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8008:	b084      	sub	sp, #16
    800a:	9001      	str	r0, [sp, #4]
    800c:	460b      	mov	r3, r1
    800e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    8012:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8016:	9b01      	ldr	r3, [sp, #4]
    8018:	3212      	adds	r2, #18
    801a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    801e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8022:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8026:	f3c3 030b 	ubfx	r3, r3, #0, #12
    802a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    802e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8032:	4618      	mov	r0, r3
    8034:	b004      	add	sp, #16
    8036:	4770      	bx	lr

00008038 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8038:	b500      	push	{lr}
    803a:	b085      	sub	sp, #20
    803c:	9003      	str	r0, [sp, #12]
    803e:	9102      	str	r1, [sp, #8]
    8040:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8042:	f004 f825 	bl	c090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8046:	9b02      	ldr	r3, [sp, #8]
    8048:	7a59      	ldrb	r1, [r3, #9]
    804a:	9b02      	ldr	r3, [sp, #8]
    804c:	68db      	ldr	r3, [r3, #12]
    804e:	461a      	mov	r2, r3
    8050:	9803      	ldr	r0, [sp, #12]
    8052:	f7ff ff0d 	bl	7e70 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8056:	f004 f847 	bl	c0e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    805a:	f003 fe7f 	bl	bd5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    805e:	9901      	ldr	r1, [sp, #4]
    8060:	9803      	ldr	r0, [sp, #12]
    8062:	f7ff ff48 	bl	7ef6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8066:	f003 fea5 	bl	bdb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    806a:	f003 fb95 	bl	b798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    806e:	9b02      	ldr	r3, [sp, #8]
    8070:	7a1b      	ldrb	r3, [r3, #8]
    8072:	4619      	mov	r1, r3
    8074:	9803      	ldr	r0, [sp, #12]
    8076:	f7ff feda 	bl	7e2e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    807a:	f003 fbb9 	bl	b7f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    807e:	f003 fae7 	bl	b650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8082:	9b02      	ldr	r3, [sp, #8]
    8084:	6819      	ldr	r1, [r3, #0]
    8086:	9b02      	ldr	r3, [sp, #8]
    8088:	685b      	ldr	r3, [r3, #4]
    808a:	461a      	mov	r2, r3
    808c:	9803      	ldr	r0, [sp, #12]
    808e:	f7ff fe73 	bl	7d78 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    8092:	f003 fb09 	bl	b6a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    8096:	bf00      	nop
    8098:	b005      	add	sp, #20
    809a:	f85d fb04 	ldr.w	pc, [sp], #4

0000809e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    809e:	b500      	push	{lr}
    80a0:	b087      	sub	sp, #28
    80a2:	9001      	str	r0, [sp, #4]
    80a4:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80a6:	4a67      	ldr	r2, [pc, #412]	; (8244 <Adc_Ip_Init+0x1a6>)
    80a8:	9b01      	ldr	r3, [sp, #4]
    80aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ae:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    80b0:	2300      	movs	r3, #0
    80b2:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    80b4:	2300      	movs	r3, #0
    80b6:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    80b8:	9b00      	ldr	r3, [sp, #0]
    80ba:	6819      	ldr	r1, [r3, #0]
    80bc:	9b00      	ldr	r3, [sp, #0]
    80be:	689b      	ldr	r3, [r3, #8]
    80c0:	461a      	mov	r2, r3
    80c2:	9802      	ldr	r0, [sp, #8]
    80c4:	f7ff fe58 	bl	7d78 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    80c8:	9b00      	ldr	r3, [sp, #0]
    80ca:	7b1b      	ldrb	r3, [r3, #12]
    80cc:	4619      	mov	r1, r3
    80ce:	9802      	ldr	r0, [sp, #8]
    80d0:	f7ff fead 	bl	7e2e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    80d4:	9b00      	ldr	r3, [sp, #0]
    80d6:	7b59      	ldrb	r1, [r3, #13]
    80d8:	9b00      	ldr	r3, [sp, #0]
    80da:	691b      	ldr	r3, [r3, #16]
    80dc:	461a      	mov	r2, r3
    80de:	9802      	ldr	r0, [sp, #8]
    80e0:	f7ff fec6 	bl	7e70 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    80e4:	9b00      	ldr	r3, [sp, #0]
    80e6:	695b      	ldr	r3, [r3, #20]
    80e8:	4619      	mov	r1, r3
    80ea:	9801      	ldr	r0, [sp, #4]
    80ec:	f000 f9ea 	bl	84c4 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    80f0:	9b04      	ldr	r3, [sp, #16]
    80f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80f6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    80f8:	9b00      	ldr	r3, [sp, #0]
    80fa:	699b      	ldr	r3, [r3, #24]
    80fc:	019b      	lsls	r3, r3, #6
    80fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8102:	9a05      	ldr	r2, [sp, #20]
    8104:	4313      	orrs	r3, r2
    8106:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8108:	9b00      	ldr	r3, [sp, #0]
    810a:	7f1b      	ldrb	r3, [r3, #28]
    810c:	2b00      	cmp	r3, #0
    810e:	d004      	beq.n	811a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    8110:	9b05      	ldr	r3, [sp, #20]
    8112:	f043 0304 	orr.w	r3, r3, #4
    8116:	9305      	str	r3, [sp, #20]
    8118:	e003      	b.n	8122 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    811a:	9b04      	ldr	r3, [sp, #16]
    811c:	f043 0304 	orr.w	r3, r3, #4
    8120:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    8122:	9b04      	ldr	r3, [sp, #16]
    8124:	f043 0303 	orr.w	r3, r3, #3
    8128:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    812a:	9b00      	ldr	r3, [sp, #0]
    812c:	6a1b      	ldr	r3, [r3, #32]
    812e:	f003 0303 	and.w	r3, r3, #3
    8132:	9a05      	ldr	r2, [sp, #20]
    8134:	4313      	orrs	r3, r2
    8136:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8138:	9b04      	ldr	r3, [sp, #16]
    813a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    813e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    8140:	9b00      	ldr	r3, [sp, #0]
    8142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8146:	2b00      	cmp	r3, #0
    8148:	d001      	beq.n	814e <Adc_Ip_Init+0xb0>
    814a:	2320      	movs	r3, #32
    814c:	e000      	b.n	8150 <Adc_Ip_Init+0xb2>
    814e:	2300      	movs	r3, #0
    8150:	9a05      	ldr	r2, [sp, #20]
    8152:	4313      	orrs	r3, r2
    8154:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8156:	9b00      	ldr	r3, [sp, #0]
    8158:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    815c:	2b00      	cmp	r3, #0
    815e:	d001      	beq.n	8164 <Adc_Ip_Init+0xc6>
    8160:	2310      	movs	r3, #16
    8162:	e000      	b.n	8166 <Adc_Ip_Init+0xc8>
    8164:	2300      	movs	r3, #0
    8166:	9a05      	ldr	r2, [sp, #20]
    8168:	4313      	orrs	r3, r2
    816a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    816c:	9b00      	ldr	r3, [sp, #0]
    816e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    8172:	2b00      	cmp	r3, #0
    8174:	d001      	beq.n	817a <Adc_Ip_Init+0xdc>
    8176:	2308      	movs	r3, #8
    8178:	e000      	b.n	817c <Adc_Ip_Init+0xde>
    817a:	2300      	movs	r3, #0
    817c:	9a05      	ldr	r2, [sp, #20]
    817e:	4313      	orrs	r3, r2
    8180:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    8182:	9b00      	ldr	r3, [sp, #0]
    8184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8186:	461a      	mov	r2, r3
    8188:	9b02      	ldr	r3, [sp, #8]
    818a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    818e:	9b00      	ldr	r3, [sp, #0]
    8190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8192:	461a      	mov	r2, r3
    8194:	9b02      	ldr	r3, [sp, #8]
    8196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    819a:	9a05      	ldr	r2, [sp, #20]
    819c:	9904      	ldr	r1, [sp, #16]
    819e:	9802      	ldr	r0, [sp, #8]
    81a0:	f7ff fdd2 	bl	7d48 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    81a4:	9b00      	ldr	r3, [sp, #0]
    81a6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    81a8:	9b00      	ldr	r3, [sp, #0]
    81aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    81ac:	461a      	mov	r2, r3
    81ae:	9802      	ldr	r0, [sp, #8]
    81b0:	f7ff fef6 	bl	7fa0 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    81b4:	9b00      	ldr	r3, [sp, #0]
    81b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    81ba:	4619      	mov	r1, r3
    81bc:	9801      	ldr	r0, [sp, #4]
    81be:	f000 f955 	bl	846c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    81c2:	9b00      	ldr	r3, [sp, #0]
    81c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    81c6:	2b00      	cmp	r3, #0
    81c8:	d01c      	beq.n	8204 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    81ca:	2300      	movs	r3, #0
    81cc:	f88d 300f 	strb.w	r3, [sp, #15]
    81d0:	e011      	b.n	81f6 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    81d2:	9b00      	ldr	r3, [sp, #0]
    81d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    81d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81da:	4613      	mov	r3, r2
    81dc:	005b      	lsls	r3, r3, #1
    81de:	4413      	add	r3, r2
    81e0:	009b      	lsls	r3, r3, #2
    81e2:	440b      	add	r3, r1
    81e4:	4619      	mov	r1, r3
    81e6:	9801      	ldr	r0, [sp, #4]
    81e8:	f000 f9c2 	bl	8570 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    81ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81f0:	3301      	adds	r3, #1
    81f2:	f88d 300f 	strb.w	r3, [sp, #15]
    81f6:	9b00      	ldr	r3, [sp, #0]
    81f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    81fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8200:	429a      	cmp	r2, r3
    8202:	d3e6      	bcc.n	81d2 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8204:	9b00      	ldr	r3, [sp, #0]
    8206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8208:	490f      	ldr	r1, [pc, #60]	; (8248 <Adc_Ip_Init+0x1aa>)
    820a:	9b01      	ldr	r3, [sp, #4]
    820c:	204c      	movs	r0, #76	; 0x4c
    820e:	fb00 f303 	mul.w	r3, r0, r3
    8212:	440b      	add	r3, r1
    8214:	3308      	adds	r3, #8
    8216:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8218:	9b00      	ldr	r3, [sp, #0]
    821a:	685a      	ldr	r2, [r3, #4]
    821c:	490a      	ldr	r1, [pc, #40]	; (8248 <Adc_Ip_Init+0x1aa>)
    821e:	9b01      	ldr	r3, [sp, #4]
    8220:	204c      	movs	r0, #76	; 0x4c
    8222:	fb00 f303 	mul.w	r3, r0, r3
    8226:	440b      	add	r3, r1
    8228:	3304      	adds	r3, #4
    822a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    822c:	4a06      	ldr	r2, [pc, #24]	; (8248 <Adc_Ip_Init+0x1aa>)
    822e:	9b01      	ldr	r3, [sp, #4]
    8230:	214c      	movs	r1, #76	; 0x4c
    8232:	fb01 f303 	mul.w	r3, r1, r3
    8236:	4413      	add	r3, r2
    8238:	2201      	movs	r2, #1
    823a:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    823c:	bf00      	nop
    823e:	b007      	add	sp, #28
    8240:	f85d fb04 	ldr.w	pc, [sp], #4
    8244:	000109e0 	.word	0x000109e0
    8248:	1fff8d18 	.word	0x1fff8d18

0000824c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    824c:	b500      	push	{lr}
    824e:	b0c3      	sub	sp, #268	; 0x10c
    8250:	ab42      	add	r3, sp, #264	; 0x108
    8252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8256:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8258:	2300      	movs	r3, #0
    825a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    825c:	2303      	movs	r3, #3
    825e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    8260:	2300      	movs	r3, #0
    8262:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8264:	230c      	movs	r3, #12
    8266:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    826a:	2300      	movs	r3, #0
    826c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    8270:	2300      	movs	r3, #0
    8272:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8274:	2300      	movs	r3, #0
    8276:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8278:	2300      	movs	r3, #0
    827a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    827c:	2300      	movs	r3, #0
    827e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    8282:	2300      	movs	r3, #0
    8284:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    8286:	2300      	movs	r3, #0
    8288:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    828c:	2300      	movs	r3, #0
    828e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    8292:	2300      	movs	r3, #0
    8294:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    8298:	2300      	movs	r3, #0
    829a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    829e:	2300      	movs	r3, #0
    82a0:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    82a4:	2300      	movs	r3, #0
    82a6:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    82aa:	2304      	movs	r3, #4
    82ac:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    82b0:	2300      	movs	r3, #0
    82b2:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    82b6:	2310      	movs	r3, #16
    82b8:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    82bc:	2300      	movs	r3, #0
    82be:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    82c2:	e02b      	b.n	831c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    82c4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82c8:	ab42      	add	r3, sp, #264	; 0x108
    82ca:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    82ce:	4613      	mov	r3, r2
    82d0:	005b      	lsls	r3, r3, #1
    82d2:	4413      	add	r3, r2
    82d4:	009b      	lsls	r3, r3, #2
    82d6:	440b      	add	r3, r1
    82d8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82dc:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    82de:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82e2:	ab42      	add	r3, sp, #264	; 0x108
    82e4:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    82e8:	4613      	mov	r3, r2
    82ea:	005b      	lsls	r3, r3, #1
    82ec:	4413      	add	r3, r2
    82ee:	009b      	lsls	r3, r3, #2
    82f0:	440b      	add	r3, r1
    82f2:	3304      	adds	r3, #4
    82f4:	221f      	movs	r2, #31
    82f6:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    82f8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82fc:	ab42      	add	r3, sp, #264	; 0x108
    82fe:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8302:	4613      	mov	r3, r2
    8304:	005b      	lsls	r3, r3, #1
    8306:	4413      	add	r3, r2
    8308:	009b      	lsls	r3, r3, #2
    830a:	440b      	add	r3, r1
    830c:	3308      	adds	r3, #8
    830e:	2200      	movs	r2, #0
    8310:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    8312:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8316:	3301      	adds	r3, #1
    8318:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    831c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8320:	2b0f      	cmp	r3, #15
    8322:	d9cf      	bls.n	82c4 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    8324:	ab02      	add	r3, sp, #8
    8326:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8328:	2300      	movs	r3, #0
    832a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    832c:	aa32      	add	r2, sp, #200	; 0xc8
    832e:	ab42      	add	r3, sp, #264	; 0x108
    8330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8334:	4611      	mov	r1, r2
    8336:	6818      	ldr	r0, [r3, #0]
    8338:	f7ff feb1 	bl	809e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    833c:	4a07      	ldr	r2, [pc, #28]	; (835c <Adc_Ip_DeInit+0x110>)
    833e:	ab42      	add	r3, sp, #264	; 0x108
    8340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8344:	681b      	ldr	r3, [r3, #0]
    8346:	214c      	movs	r1, #76	; 0x4c
    8348:	fb01 f303 	mul.w	r3, r1, r3
    834c:	4413      	add	r3, r2
    834e:	2200      	movs	r2, #0
    8350:	701a      	strb	r2, [r3, #0]
}
    8352:	bf00      	nop
    8354:	b043      	add	sp, #268	; 0x10c
    8356:	f85d fb04 	ldr.w	pc, [sp], #4
    835a:	bf00      	nop
    835c:	1fff8d18 	.word	0x1fff8d18

00008360 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    8360:	b500      	push	{lr}
    8362:	b087      	sub	sp, #28
    8364:	9003      	str	r0, [sp, #12]
    8366:	460b      	mov	r3, r1
    8368:	9201      	str	r2, [sp, #4]
    836a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    836e:	4a0a      	ldr	r2, [pc, #40]	; (8398 <Adc_Ip_SetAveraging+0x38>)
    8370:	9b03      	ldr	r3, [sp, #12]
    8372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8376:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8378:	f003 fde6 	bl	bf48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    837c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8380:	9a01      	ldr	r2, [sp, #4]
    8382:	4619      	mov	r1, r3
    8384:	9805      	ldr	r0, [sp, #20]
    8386:	f7ff fd73 	bl	7e70 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    838a:	f003 fe09 	bl	bfa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    838e:	bf00      	nop
    8390:	b007      	add	sp, #28
    8392:	f85d fb04 	ldr.w	pc, [sp], #4
    8396:	bf00      	nop
    8398:	000109e0 	.word	0x000109e0

0000839c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    839c:	b500      	push	{lr}
    839e:	b085      	sub	sp, #20
    83a0:	9001      	str	r0, [sp, #4]
    83a2:	460b      	mov	r3, r1
    83a4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83a8:	4a09      	ldr	r2, [pc, #36]	; (83d0 <Adc_Ip_SetSampleTime+0x34>)
    83aa:	9b01      	ldr	r3, [sp, #4]
    83ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    83b2:	f003 fa43 	bl	b83c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    83b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    83ba:	4619      	mov	r1, r3
    83bc:	9803      	ldr	r0, [sp, #12]
    83be:	f7ff fd36 	bl	7e2e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    83c2:	f003 fa67 	bl	b894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    83c6:	bf00      	nop
    83c8:	b005      	add	sp, #20
    83ca:	f85d fb04 	ldr.w	pc, [sp], #4
    83ce:	bf00      	nop
    83d0:	000109e0 	.word	0x000109e0

000083d4 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    83d4:	b500      	push	{lr}
    83d6:	b085      	sub	sp, #20
    83d8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83da:	4a0a      	ldr	r2, [pc, #40]	; (8404 <Adc_Ip_EnableDma+0x30>)
    83dc:	9b01      	ldr	r3, [sp, #4]
    83de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    83e4:	f003 fd5e 	bl	bea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    83e8:	9b03      	ldr	r3, [sp, #12]
    83ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    83ee:	f043 0204 	orr.w	r2, r3, #4
    83f2:	9b03      	ldr	r3, [sp, #12]
    83f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    83f8:	f003 fd80 	bl	befc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    83fc:	bf00      	nop
    83fe:	b005      	add	sp, #20
    8400:	f85d fb04 	ldr.w	pc, [sp], #4
    8404:	000109e0 	.word	0x000109e0

00008408 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8408:	b500      	push	{lr}
    840a:	b085      	sub	sp, #20
    840c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    840e:	4a0a      	ldr	r2, [pc, #40]	; (8438 <Adc_Ip_DisableDma+0x30>)
    8410:	9b01      	ldr	r3, [sp, #4]
    8412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8416:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8418:	f003 fbfc 	bl	bc14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    841c:	9b03      	ldr	r3, [sp, #12]
    841e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8422:	f023 0204 	bic.w	r2, r3, #4
    8426:	9b03      	ldr	r3, [sp, #12]
    8428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    842c:	f003 fc1e 	bl	bc6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    8430:	bf00      	nop
    8432:	b005      	add	sp, #20
    8434:	f85d fb04 	ldr.w	pc, [sp], #4
    8438:	000109e0 	.word	0x000109e0

0000843c <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    843c:	b500      	push	{lr}
    843e:	b085      	sub	sp, #20
    8440:	9001      	str	r0, [sp, #4]
    8442:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8444:	4a08      	ldr	r2, [pc, #32]	; (8468 <Adc_Ip_SetTriggerMode+0x2c>)
    8446:	9b01      	ldr	r3, [sp, #4]
    8448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    844c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    844e:	f003 fc33 	bl	bcb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8452:	9900      	ldr	r1, [sp, #0]
    8454:	9803      	ldr	r0, [sp, #12]
    8456:	f7ff fd4e 	bl	7ef6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    845a:	f003 fc59 	bl	bd10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    845e:	bf00      	nop
    8460:	b005      	add	sp, #20
    8462:	f85d fb04 	ldr.w	pc, [sp], #4
    8466:	bf00      	nop
    8468:	000109e0 	.word	0x000109e0

0000846c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    846c:	b500      	push	{lr}
    846e:	b085      	sub	sp, #20
    8470:	9001      	str	r0, [sp, #4]
    8472:	460b      	mov	r3, r1
    8474:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8478:	4a11      	ldr	r2, [pc, #68]	; (84c0 <Adc_Ip_SetContinuousMode+0x54>)
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8480:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    8482:	f003 fe57 	bl	c134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    8486:	9b03      	ldr	r3, [sp, #12]
    8488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    848c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    848e:	9b02      	ldr	r3, [sp, #8]
    8490:	f023 0308 	bic.w	r3, r3, #8
    8494:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    8496:	f89d 3003 	ldrb.w	r3, [sp, #3]
    849a:	2b00      	cmp	r3, #0
    849c:	d001      	beq.n	84a2 <Adc_Ip_SetContinuousMode+0x36>
    849e:	2308      	movs	r3, #8
    84a0:	e000      	b.n	84a4 <Adc_Ip_SetContinuousMode+0x38>
    84a2:	2300      	movs	r3, #0
    84a4:	9a02      	ldr	r2, [sp, #8]
    84a6:	4313      	orrs	r3, r2
    84a8:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    84aa:	9b03      	ldr	r3, [sp, #12]
    84ac:	9a02      	ldr	r2, [sp, #8]
    84ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    84b2:	f003 fe6b 	bl	c18c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    84b6:	bf00      	nop
    84b8:	b005      	add	sp, #20
    84ba:	f85d fb04 	ldr.w	pc, [sp], #4
    84be:	bf00      	nop
    84c0:	000109e0 	.word	0x000109e0

000084c4 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    84c4:	b500      	push	{lr}
    84c6:	b085      	sub	sp, #20
    84c8:	9001      	str	r0, [sp, #4]
    84ca:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84cc:	4a0e      	ldr	r2, [pc, #56]	; (8508 <Adc_Ip_SetResolution+0x44>)
    84ce:	9b01      	ldr	r3, [sp, #4]
    84d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    84d6:	f002 fe7d 	bl	b1d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    84da:	9b03      	ldr	r3, [sp, #12]
    84dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84de:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    84e0:	9b02      	ldr	r3, [sp, #8]
    84e2:	f023 030c 	bic.w	r3, r3, #12
    84e6:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    84e8:	9b00      	ldr	r3, [sp, #0]
    84ea:	009b      	lsls	r3, r3, #2
    84ec:	f003 030c 	and.w	r3, r3, #12
    84f0:	9a02      	ldr	r2, [sp, #8]
    84f2:	4313      	orrs	r3, r2
    84f4:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    84f6:	9b03      	ldr	r3, [sp, #12]
    84f8:	9a02      	ldr	r2, [sp, #8]
    84fa:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    84fc:	f002 fe96 	bl	b22c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    8500:	bf00      	nop
    8502:	b005      	add	sp, #20
    8504:	f85d fb04 	ldr.w	pc, [sp], #4
    8508:	000109e0 	.word	0x000109e0

0000850c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    850c:	b500      	push	{lr}
    850e:	b085      	sub	sp, #20
    8510:	9001      	str	r0, [sp, #4]
    8512:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8514:	4a15      	ldr	r2, [pc, #84]	; (856c <Adc_Ip_SetClockMode+0x60>)
    8516:	9b01      	ldr	r3, [sp, #4]
    8518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    851c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    851e:	f002 fff3 	bl	b508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8522:	9b00      	ldr	r3, [sp, #0]
    8524:	6819      	ldr	r1, [r3, #0]
    8526:	9b00      	ldr	r3, [sp, #0]
    8528:	685b      	ldr	r3, [r3, #4]
    852a:	461a      	mov	r2, r3
    852c:	9803      	ldr	r0, [sp, #12]
    852e:	f7ff fc23 	bl	7d78 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    8532:	f003 f815 	bl	b560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    8536:	f003 f8dd 	bl	b6f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    853a:	9b00      	ldr	r3, [sp, #0]
    853c:	7a1b      	ldrb	r3, [r3, #8]
    853e:	4619      	mov	r1, r3
    8540:	9803      	ldr	r0, [sp, #12]
    8542:	f7ff fc74 	bl	7e2e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    8546:	f003 f901 	bl	b74c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    854a:	f003 fd4f 	bl	bfec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    854e:	9b00      	ldr	r3, [sp, #0]
    8550:	7a59      	ldrb	r1, [r3, #9]
    8552:	9b00      	ldr	r3, [sp, #0]
    8554:	68db      	ldr	r3, [r3, #12]
    8556:	461a      	mov	r2, r3
    8558:	9803      	ldr	r0, [sp, #12]
    855a:	f7ff fc89 	bl	7e70 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    855e:	f003 fd71 	bl	c044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    8562:	bf00      	nop
    8564:	b005      	add	sp, #20
    8566:	f85d fb04 	ldr.w	pc, [sp], #4
    856a:	bf00      	nop
    856c:	000109e0 	.word	0x000109e0

00008570 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    8570:	b510      	push	{r4, lr}
    8572:	b084      	sub	sp, #16
    8574:	9001      	str	r0, [sp, #4]
    8576:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8578:	4a13      	ldr	r2, [pc, #76]	; (85c8 <Adc_Ip_ConfigChannel+0x58>)
    857a:	9b01      	ldr	r3, [sp, #4]
    857c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8580:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    8582:	9b00      	ldr	r3, [sp, #0]
    8584:	685b      	ldr	r3, [r3, #4]
    8586:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    8588:	f003 faf2 	bl	bb70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    858c:	9b00      	ldr	r3, [sp, #0]
    858e:	7819      	ldrb	r1, [r3, #0]
    8590:	9b00      	ldr	r3, [sp, #0]
    8592:	7a1b      	ldrb	r3, [r3, #8]
    8594:	9a02      	ldr	r2, [sp, #8]
    8596:	9803      	ldr	r0, [sp, #12]
    8598:	f7ff fcd5 	bl	7f46 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    859c:	f003 fb14 	bl	bbc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    85a0:	9b00      	ldr	r3, [sp, #0]
    85a2:	781b      	ldrb	r3, [r3, #0]
    85a4:	461c      	mov	r4, r3
    85a6:	9b00      	ldr	r3, [sp, #0]
    85a8:	6859      	ldr	r1, [r3, #4]
    85aa:	4808      	ldr	r0, [pc, #32]	; (85cc <Adc_Ip_ConfigChannel+0x5c>)
    85ac:	9a01      	ldr	r2, [sp, #4]
    85ae:	4613      	mov	r3, r2
    85b0:	00db      	lsls	r3, r3, #3
    85b2:	4413      	add	r3, r2
    85b4:	005b      	lsls	r3, r3, #1
    85b6:	4413      	add	r3, r2
    85b8:	4423      	add	r3, r4
    85ba:	3302      	adds	r3, #2
    85bc:	009b      	lsls	r3, r3, #2
    85be:	4403      	add	r3, r0
    85c0:	6059      	str	r1, [r3, #4]
}
    85c2:	bf00      	nop
    85c4:	b004      	add	sp, #16
    85c6:	bd10      	pop	{r4, pc}
    85c8:	000109e0 	.word	0x000109e0
    85cc:	1fff8d18 	.word	0x1fff8d18

000085d0 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    85d0:	b500      	push	{lr}
    85d2:	b089      	sub	sp, #36	; 0x24
    85d4:	9001      	str	r0, [sp, #4]
    85d6:	460b      	mov	r3, r1
    85d8:	f88d 3003 	strb.w	r3, [sp, #3]
    85dc:	4613      	mov	r3, r2
    85de:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85e2:	4a24      	ldr	r2, [pc, #144]	; (8674 <Adc_Ip_SetDisabledChannel+0xa4>)
    85e4:	9b01      	ldr	r3, [sp, #4]
    85e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ea:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    85ec:	2300      	movs	r3, #0
    85ee:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    85f0:	2100      	movs	r1, #0
    85f2:	4821      	ldr	r0, [pc, #132]	; (8678 <Adc_Ip_SetDisabledChannel+0xa8>)
    85f4:	f7f9 facc 	bl	1b90 <OsIf_MicrosToTicks>
    85f8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    85fa:	2000      	movs	r0, #0
    85fc:	f7f9 fa7c 	bl	1af8 <OsIf_GetCounter>
    8600:	4603      	mov	r3, r0
    8602:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8604:	2300      	movs	r3, #0
    8606:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8608:	f003 f96a 	bl	b8e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    860c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8610:	9b05      	ldr	r3, [sp, #20]
    8612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8616:	f89d 2003 	ldrb.w	r2, [sp, #3]
    861a:	f043 011f 	orr.w	r1, r3, #31
    861e:	9b05      	ldr	r3, [sp, #20]
    8620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8624:	f003 f988 	bl	b938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8628:	f89d 3002 	ldrb.w	r3, [sp, #2]
    862c:	2b00      	cmp	r3, #0
    862e:	d01c      	beq.n	866a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8630:	e008      	b.n	8644 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8632:	ab03      	add	r3, sp, #12
    8634:	2100      	movs	r1, #0
    8636:	4618      	mov	r0, r3
    8638:	f7f9 fa77 	bl	1b2a <OsIf_GetElapsed>
    863c:	4602      	mov	r2, r0
    863e:	9b06      	ldr	r3, [sp, #24]
    8640:	4413      	add	r3, r2
    8642:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8644:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8648:	9b05      	ldr	r3, [sp, #20]
    864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    864e:	f003 031f 	and.w	r3, r3, #31
    8652:	2b1f      	cmp	r3, #31
    8654:	d003      	beq.n	865e <Adc_Ip_SetDisabledChannel+0x8e>
    8656:	9a06      	ldr	r2, [sp, #24]
    8658:	9b04      	ldr	r3, [sp, #16]
    865a:	429a      	cmp	r2, r3
    865c:	d3e9      	bcc.n	8632 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    865e:	9a06      	ldr	r2, [sp, #24]
    8660:	9b04      	ldr	r3, [sp, #16]
    8662:	429a      	cmp	r2, r3
    8664:	d301      	bcc.n	866a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8666:	2302      	movs	r3, #2
    8668:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    866a:	9b07      	ldr	r3, [sp, #28]
}
    866c:	4618      	mov	r0, r3
    866e:	b009      	add	sp, #36	; 0x24
    8670:	f85d fb04 	ldr.w	pc, [sp], #4
    8674:	000109e0 	.word	0x000109e0
    8678:	000186a0 	.word	0x000186a0

0000867c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    867c:	b500      	push	{lr}
    867e:	b087      	sub	sp, #28
    8680:	9003      	str	r0, [sp, #12]
    8682:	9102      	str	r1, [sp, #8]
    8684:	4613      	mov	r3, r2
    8686:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    868a:	4a0a      	ldr	r2, [pc, #40]	; (86b4 <Adc_Ip_StartConversion+0x38>)
    868c:	9b03      	ldr	r3, [sp, #12]
    868e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8692:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    8694:	f003 f976 	bl	b984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8698:	f89d 3007 	ldrb.w	r3, [sp, #7]
    869c:	9a02      	ldr	r2, [sp, #8]
    869e:	2100      	movs	r1, #0
    86a0:	9805      	ldr	r0, [sp, #20]
    86a2:	f7ff fc50 	bl	7f46 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    86a6:	f003 f999 	bl	b9dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    86aa:	bf00      	nop
    86ac:	b007      	add	sp, #28
    86ae:	f85d fb04 	ldr.w	pc, [sp], #4
    86b2:	bf00      	nop
    86b4:	000109e0 	.word	0x000109e0

000086b8 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    86b8:	b084      	sub	sp, #16
    86ba:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    86bc:	4a0b      	ldr	r2, [pc, #44]	; (86ec <Adc_Ip_GetConvActiveFlag+0x34>)
    86be:	9b01      	ldr	r3, [sp, #4]
    86c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c4:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    86c6:	9b03      	ldr	r3, [sp, #12]
    86c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    86cc:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    86ce:	9b02      	ldr	r3, [sp, #8]
    86d0:	09db      	lsrs	r3, r3, #7
    86d2:	f003 0301 	and.w	r3, r3, #1
    86d6:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    86d8:	9b02      	ldr	r3, [sp, #8]
    86da:	2b00      	cmp	r3, #0
    86dc:	bf14      	ite	ne
    86de:	2301      	movne	r3, #1
    86e0:	2300      	moveq	r3, #0
    86e2:	b2db      	uxtb	r3, r3
}
    86e4:	4618      	mov	r0, r3
    86e6:	b004      	add	sp, #16
    86e8:	4770      	bx	lr
    86ea:	bf00      	nop
    86ec:	000109e0 	.word	0x000109e0

000086f0 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    86f0:	b500      	push	{lr}
    86f2:	b085      	sub	sp, #20
    86f4:	9001      	str	r0, [sp, #4]
    86f6:	460b      	mov	r3, r1
    86f8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86fc:	4a08      	ldr	r2, [pc, #32]	; (8720 <Adc_Ip_GetChanInterrupt+0x30>)
    86fe:	9b01      	ldr	r3, [sp, #4]
    8700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8704:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    870c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    870e:	9803      	ldr	r0, [sp, #12]
    8710:	f7ff fc5e 	bl	7fd0 <Adc_HwAcc_GetAIEN>
    8714:	4603      	mov	r3, r0
}
    8716:	4618      	mov	r0, r3
    8718:	b005      	add	sp, #20
    871a:	f85d fb04 	ldr.w	pc, [sp], #4
    871e:	bf00      	nop
    8720:	000109e0 	.word	0x000109e0

00008724 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8724:	b500      	push	{lr}
    8726:	b085      	sub	sp, #20
    8728:	9001      	str	r0, [sp, #4]
    872a:	460b      	mov	r3, r1
    872c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8730:	4a08      	ldr	r2, [pc, #32]	; (8754 <Adc_Ip_GetConvCompleteFlag+0x30>)
    8732:	9b01      	ldr	r3, [sp, #4]
    8734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8738:	f89d 2003 	ldrb.w	r2, [sp, #3]
    873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8740:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    8742:	9803      	ldr	r0, [sp, #12]
    8744:	f7ff fc52 	bl	7fec <Adc_HwAcc_GetCOCO>
    8748:	4603      	mov	r3, r0
}
    874a:	4618      	mov	r0, r3
    874c:	b005      	add	sp, #20
    874e:	f85d fb04 	ldr.w	pc, [sp], #4
    8752:	bf00      	nop
    8754:	000109e0 	.word	0x000109e0

00008758 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8758:	b500      	push	{lr}
    875a:	b085      	sub	sp, #20
    875c:	9001      	str	r0, [sp, #4]
    875e:	460b      	mov	r3, r1
    8760:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8764:	4a07      	ldr	r2, [pc, #28]	; (8784 <Adc_Ip_GetConvData+0x2c>)
    8766:	9b01      	ldr	r3, [sp, #4]
    8768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    876c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    876e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8772:	4619      	mov	r1, r3
    8774:	9803      	ldr	r0, [sp, #12]
    8776:	f7ff fc47 	bl	8008 <Adc_HwAcc_GetData>
    877a:	4603      	mov	r3, r0
}
    877c:	4618      	mov	r0, r3
    877e:	b005      	add	sp, #20
    8780:	f85d fb04 	ldr.w	pc, [sp], #4
    8784:	000109e0 	.word	0x000109e0

00008788 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8788:	b500      	push	{lr}
    878a:	b093      	sub	sp, #76	; 0x4c
    878c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    878e:	4a59      	ldr	r2, [pc, #356]	; (88f4 <Adc_Ip_DoCalibration+0x16c>)
    8790:	9b01      	ldr	r3, [sp, #4]
    8792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8796:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8798:	2300      	movs	r3, #0
    879a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    879c:	2100      	movs	r1, #0
    879e:	4856      	ldr	r0, [pc, #344]	; (88f8 <Adc_Ip_DoCalibration+0x170>)
    87a0:	f7f9 f9f6 	bl	1b90 <OsIf_MicrosToTicks>
    87a4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    87a6:	2000      	movs	r0, #0
    87a8:	f7f9 f9a6 	bl	1af8 <OsIf_GetCounter>
    87ac:	4603      	mov	r3, r0
    87ae:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    87b0:	2300      	movs	r3, #0
    87b2:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    87b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    87ba:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    87bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87be:	089b      	lsrs	r3, r3, #2
    87c0:	f003 0301 	and.w	r3, r3, #1
    87c4:	2b00      	cmp	r3, #0
    87c6:	bf14      	ite	ne
    87c8:	2301      	movne	r3, #1
    87ca:	2300      	moveq	r3, #0
    87cc:	b2db      	uxtb	r3, r3
    87ce:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    87d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    87d4:	f7ff fb71 	bl	7eba <Adc_HwAcc_GetAverageSelect>
    87d8:	4603      	mov	r3, r0
    87da:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    87dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    87e0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    87e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87e4:	b2db      	uxtb	r3, r3
    87e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    87ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    87f0:	4618      	mov	r0, r3
    87f2:	f7ff fb99 	bl	7f28 <Adc_HwAcc_GetTriggerMode>
    87f6:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    87f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    87fc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    87fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8800:	f7ff fad8 	bl	7db4 <Adc_HwAcc_GetClockDivide>
    8804:	4603      	mov	r3, r0
    8806:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8808:	980d      	ldr	r0, [sp, #52]	; 0x34
    880a:	f7ff faf2 	bl	7df2 <Adc_HwAcc_GetInputClock>
    880e:	4603      	mov	r3, r0
    8810:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    8812:	2301      	movs	r3, #1
    8814:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8818:	2303      	movs	r3, #3
    881a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    881c:	230c      	movs	r3, #12
    881e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    8822:	4a36      	ldr	r2, [pc, #216]	; (88fc <Adc_Ip_DoCalibration+0x174>)
    8824:	9b01      	ldr	r3, [sp, #4]
    8826:	214c      	movs	r1, #76	; 0x4c
    8828:	fb01 f303 	mul.w	r3, r1, r3
    882c:	4413      	add	r3, r2
    882e:	3304      	adds	r3, #4
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8834:	9b08      	ldr	r3, [sp, #32]
    8836:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8838:	ab03      	add	r3, sp, #12
    883a:	2200      	movs	r2, #0
    883c:	4619      	mov	r1, r3
    883e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8840:	f7ff fbfa 	bl	8038 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8846:	2200      	movs	r2, #0
    8848:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    884c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    884e:	2200      	movs	r2, #0
    8850:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8856:	2200      	movs	r2, #0
    8858:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    885c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    885e:	2200      	movs	r2, #0
    8860:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8866:	2200      	movs	r2, #0
    8868:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    886c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    886e:	2200      	movs	r2, #0
    8870:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8876:	2200      	movs	r2, #0
    8878:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    887c:	f003 fc08 	bl	c090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8886:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    888a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    888e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8896:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    889a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    889c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    88a0:	f003 fc22 	bl	c0e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    88a4:	e008      	b.n	88b8 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    88a6:	ab0b      	add	r3, sp, #44	; 0x2c
    88a8:	2100      	movs	r1, #0
    88aa:	4618      	mov	r0, r3
    88ac:	f7f9 f93d 	bl	1b2a <OsIf_GetElapsed>
    88b0:	4602      	mov	r2, r0
    88b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88b4:	4413      	add	r3, r2
    88b6:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    88b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    88be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    88c2:	2b00      	cmp	r3, #0
    88c4:	d003      	beq.n	88ce <Adc_Ip_DoCalibration+0x146>
    88c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    88c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88ca:	429a      	cmp	r2, r3
    88cc:	d3eb      	bcc.n	88a6 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    88ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    88d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88d2:	429a      	cmp	r2, r3
    88d4:	d301      	bcc.n	88da <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    88d6:	2302      	movs	r3, #2
    88d8:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    88da:	ab07      	add	r3, sp, #28
    88dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    88de:	4619      	mov	r1, r3
    88e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    88e2:	f7ff fba9 	bl	8038 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    88e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    88ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    88ec:	4618      	mov	r0, r3
    88ee:	b013      	add	sp, #76	; 0x4c
    88f0:	f85d fb04 	ldr.w	pc, [sp], #4
    88f4:	000109e0 	.word	0x000109e0
    88f8:	000186a0 	.word	0x000186a0
    88fc:	1fff8d18 	.word	0x1fff8d18

00008900 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8900:	b500      	push	{lr}
    8902:	b089      	sub	sp, #36	; 0x24
    8904:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8906:	4a1e      	ldr	r2, [pc, #120]	; (8980 <Adc_Ip_ClearLatchedTriggers+0x80>)
    8908:	9b01      	ldr	r3, [sp, #4]
    890a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    890e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8910:	2300      	movs	r3, #0
    8912:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8914:	2100      	movs	r1, #0
    8916:	481b      	ldr	r0, [pc, #108]	; (8984 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8918:	f7f9 f93a 	bl	1b90 <OsIf_MicrosToTicks>
    891c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    891e:	2000      	movs	r0, #0
    8920:	f7f9 f8ea 	bl	1af8 <OsIf_GetCounter>
    8924:	4603      	mov	r3, r0
    8926:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8928:	2300      	movs	r3, #0
    892a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    892c:	f002 fe3e 	bl	b5ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8930:	9b05      	ldr	r3, [sp, #20]
    8932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8938:	9b05      	ldr	r3, [sp, #20]
    893a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    893c:	f002 fe62 	bl	b604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8940:	e008      	b.n	8954 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8942:	ab03      	add	r3, sp, #12
    8944:	2100      	movs	r1, #0
    8946:	4618      	mov	r0, r3
    8948:	f7f9 f8ef 	bl	1b2a <OsIf_GetElapsed>
    894c:	4602      	mov	r2, r0
    894e:	9b06      	ldr	r3, [sp, #24]
    8950:	4413      	add	r3, r2
    8952:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8954:	9b05      	ldr	r3, [sp, #20]
    8956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    895a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    895e:	2b00      	cmp	r3, #0
    8960:	d003      	beq.n	896a <Adc_Ip_ClearLatchedTriggers+0x6a>
    8962:	9a06      	ldr	r2, [sp, #24]
    8964:	9b04      	ldr	r3, [sp, #16]
    8966:	429a      	cmp	r2, r3
    8968:	d3eb      	bcc.n	8942 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    896a:	9a06      	ldr	r2, [sp, #24]
    896c:	9b04      	ldr	r3, [sp, #16]
    896e:	429a      	cmp	r2, r3
    8970:	d301      	bcc.n	8976 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8972:	2302      	movs	r3, #2
    8974:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8976:	9b07      	ldr	r3, [sp, #28]
}
    8978:	4618      	mov	r0, r3
    897a:	b009      	add	sp, #36	; 0x24
    897c:	f85d fb04 	ldr.w	pc, [sp], #4
    8980:	000109e0 	.word	0x000109e0
    8984:	000186a0 	.word	0x000186a0

00008988 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8988:	b500      	push	{lr}
    898a:	b085      	sub	sp, #20
    898c:	9001      	str	r0, [sp, #4]
    898e:	460b      	mov	r3, r1
    8990:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8994:	4a0c      	ldr	r2, [pc, #48]	; (89c8 <Adc_Ip_EnableChannelNotification+0x40>)
    8996:	9b01      	ldr	r3, [sp, #4]
    8998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    899c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    899e:	f003 f843 	bl	ba28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    89a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89a6:	9b03      	ldr	r3, [sp, #12]
    89a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89b0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    89b4:	9b03      	ldr	r3, [sp, #12]
    89b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    89ba:	f003 f861 	bl	ba80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    89be:	bf00      	nop
    89c0:	b005      	add	sp, #20
    89c2:	f85d fb04 	ldr.w	pc, [sp], #4
    89c6:	bf00      	nop
    89c8:	000109e0 	.word	0x000109e0

000089cc <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    89cc:	b500      	push	{lr}
    89ce:	b085      	sub	sp, #20
    89d0:	9001      	str	r0, [sp, #4]
    89d2:	460b      	mov	r3, r1
    89d4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89d8:	4a0c      	ldr	r2, [pc, #48]	; (8a0c <Adc_Ip_DisableChannelNotification+0x40>)
    89da:	9b01      	ldr	r3, [sp, #4]
    89dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    89e2:	f003 f873 	bl	bacc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    89e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89ea:	9b03      	ldr	r3, [sp, #12]
    89ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89f4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    89f8:	9b03      	ldr	r3, [sp, #12]
    89fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    89fe:	f003 f891 	bl	bb24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8a02:	bf00      	nop
    8a04:	b005      	add	sp, #20
    8a06:	f85d fb04 	ldr.w	pc, [sp], #4
    8a0a:	bf00      	nop
    8a0c:	000109e0 	.word	0x000109e0

00008a10 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8a10:	b500      	push	{lr}
    8a12:	b085      	sub	sp, #20
    8a14:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a16:	4a0a      	ldr	r2, [pc, #40]	; (8a40 <Adc_Ip_ClearTrigErrReg+0x30>)
    8a18:	9b01      	ldr	r3, [sp, #4]
    8a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a1e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8a20:	f003 f9ee 	bl	be00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8a24:	9b03      	ldr	r3, [sp, #12]
    8a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a2a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    8a2e:	9b03      	ldr	r3, [sp, #12]
    8a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8a34:	f003 fa10 	bl	be58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8a38:	bf00      	nop
    8a3a:	b005      	add	sp, #20
    8a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    8a40:	000109e0 	.word	0x000109e0

00008a44 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8a44:	b084      	sub	sp, #16
    8a46:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a48:	4a06      	ldr	r2, [pc, #24]	; (8a64 <Adc_Ip_GetTrigErrReg+0x20>)
    8a4a:	9b01      	ldr	r3, [sp, #4]
    8a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a50:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8a52:	9b03      	ldr	r3, [sp, #12]
    8a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a58:	0e1b      	lsrs	r3, r3, #24
    8a5a:	f003 030f 	and.w	r3, r3, #15
}
    8a5e:	4618      	mov	r0, r3
    8a60:	b004      	add	sp, #16
    8a62:	4770      	bx	lr
    8a64:	000109e0 	.word	0x000109e0

00008a68 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8a68:	b082      	sub	sp, #8
    8a6a:	9001      	str	r0, [sp, #4]
    8a6c:	460b      	mov	r3, r1
    8a6e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8a72:	4a06      	ldr	r2, [pc, #24]	; (8a8c <Adc_Ip_GetDataAddress+0x24>)
    8a74:	9b01      	ldr	r3, [sp, #4]
    8a76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8a7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a7e:	3312      	adds	r3, #18
    8a80:	009b      	lsls	r3, r3, #2
    8a82:	4413      	add	r3, r2
}
    8a84:	4618      	mov	r0, r3
    8a86:	b002      	add	sp, #8
    8a88:	4770      	bx	lr
    8a8a:	bf00      	nop
    8a8c:	000109e0 	.word	0x000109e0

00008a90 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8a90:	b088      	sub	sp, #32
    8a92:	9003      	str	r0, [sp, #12]
    8a94:	9102      	str	r1, [sp, #8]
    8a96:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a98:	4a25      	ldr	r2, [pc, #148]	; (8b30 <Adc_Ip_GetChanData+0xa0>)
    8a9a:	9b03      	ldr	r3, [sp, #12]
    8a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aa0:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8aa2:	2300      	movs	r3, #0
    8aa4:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8aa6:	2300      	movs	r3, #0
    8aa8:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8aac:	2300      	movs	r3, #0
    8aae:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8ab2:	2300      	movs	r3, #0
    8ab4:	f88d 3019 	strb.w	r3, [sp, #25]
    8ab8:	e019      	b.n	8aee <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8aba:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8abe:	481d      	ldr	r0, [pc, #116]	; (8b34 <Adc_Ip_GetChanData+0xa4>)
    8ac0:	9a03      	ldr	r2, [sp, #12]
    8ac2:	4613      	mov	r3, r2
    8ac4:	00db      	lsls	r3, r3, #3
    8ac6:	4413      	add	r3, r2
    8ac8:	005b      	lsls	r3, r3, #1
    8aca:	4413      	add	r3, r2
    8acc:	440b      	add	r3, r1
    8ace:	3302      	adds	r3, #2
    8ad0:	009b      	lsls	r3, r3, #2
    8ad2:	4403      	add	r3, r0
    8ad4:	685b      	ldr	r3, [r3, #4]
    8ad6:	9a02      	ldr	r2, [sp, #8]
    8ad8:	429a      	cmp	r2, r3
    8ada:	d103      	bne.n	8ae4 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8adc:	2301      	movs	r3, #1
    8ade:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8ae2:	e008      	b.n	8af6 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8ae4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8ae8:	3301      	adds	r3, #1
    8aea:	f88d 3019 	strb.w	r3, [sp, #25]
    8aee:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8af2:	2b0f      	cmp	r3, #15
    8af4:	d9e1      	bls.n	8aba <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8af6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8afa:	2b00      	cmp	r3, #0
    8afc:	d00e      	beq.n	8b1c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8afe:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8b02:	9b05      	ldr	r3, [sp, #20]
    8b04:	3212      	adds	r2, #18
    8b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b0a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8b0e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8b16:	f8ad 301a 	strh.w	r3, [sp, #26]
    8b1a:	e001      	b.n	8b20 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8b1c:	2301      	movs	r3, #1
    8b1e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8b20:	9b01      	ldr	r3, [sp, #4]
    8b22:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8b26:	801a      	strh	r2, [r3, #0]

    return Status;
    8b28:	9b07      	ldr	r3, [sp, #28]
}
    8b2a:	4618      	mov	r0, r3
    8b2c:	b008      	add	sp, #32
    8b2e:	4770      	bx	lr
    8b30:	000109e0 	.word	0x000109e0
    8b34:	1fff8d18 	.word	0x1fff8d18

00008b38 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8b38:	b500      	push	{lr}
    8b3a:	b085      	sub	sp, #20
    8b3c:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8b3e:	2300      	movs	r3, #0
    8b40:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8b44:	2300      	movs	r3, #0
    8b46:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8b4a:	4a32      	ldr	r2, [pc, #200]	; (8c14 <Adc_Ip_IRQHandler+0xdc>)
    8b4c:	9b01      	ldr	r3, [sp, #4]
    8b4e:	214c      	movs	r1, #76	; 0x4c
    8b50:	fb01 f303 	mul.w	r3, r1, r3
    8b54:	4413      	add	r3, r2
    8b56:	781b      	ldrb	r3, [r3, #0]
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d040      	beq.n	8bde <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8b5c:	4a2d      	ldr	r2, [pc, #180]	; (8c14 <Adc_Ip_IRQHandler+0xdc>)
    8b5e:	9b01      	ldr	r3, [sp, #4]
    8b60:	214c      	movs	r1, #76	; 0x4c
    8b62:	fb01 f303 	mul.w	r3, r1, r3
    8b66:	4413      	add	r3, r2
    8b68:	3308      	adds	r3, #8
    8b6a:	681b      	ldr	r3, [r3, #0]
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	d04d      	beq.n	8c0c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b70:	2300      	movs	r3, #0
    8b72:	f88d 300f 	strb.w	r3, [sp, #15]
    8b76:	e02d      	b.n	8bd4 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b78:	4a27      	ldr	r2, [pc, #156]	; (8c18 <Adc_Ip_IRQHandler+0xe0>)
    8b7a:	9b01      	ldr	r3, [sp, #4]
    8b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b88:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8b8a:	9802      	ldr	r0, [sp, #8]
    8b8c:	f7ff fa20 	bl	7fd0 <Adc_HwAcc_GetAIEN>
    8b90:	4603      	mov	r3, r0
    8b92:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8b96:	9802      	ldr	r0, [sp, #8]
    8b98:	f7ff fa28 	bl	7fec <Adc_HwAcc_GetCOCO>
    8b9c:	4603      	mov	r3, r0
    8b9e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8ba2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d00f      	beq.n	8bca <Adc_Ip_IRQHandler+0x92>
    8baa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d00b      	beq.n	8bca <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8bb2:	4a18      	ldr	r2, [pc, #96]	; (8c14 <Adc_Ip_IRQHandler+0xdc>)
    8bb4:	9b01      	ldr	r3, [sp, #4]
    8bb6:	214c      	movs	r1, #76	; 0x4c
    8bb8:	fb01 f303 	mul.w	r3, r1, r3
    8bbc:	4413      	add	r3, r2
    8bbe:	3308      	adds	r3, #8
    8bc0:	681b      	ldr	r3, [r3, #0]
    8bc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8bc6:	4610      	mov	r0, r2
    8bc8:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8bca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bce:	3301      	adds	r3, #1
    8bd0:	f88d 300f 	strb.w	r3, [sp, #15]
    8bd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bd8:	2b0f      	cmp	r3, #15
    8bda:	d9cd      	bls.n	8b78 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8bdc:	e016      	b.n	8c0c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8bde:	2300      	movs	r3, #0
    8be0:	f88d 300f 	strb.w	r3, [sp, #15]
    8be4:	e00e      	b.n	8c04 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8be6:	4a0c      	ldr	r2, [pc, #48]	; (8c18 <Adc_Ip_IRQHandler+0xe0>)
    8be8:	9b01      	ldr	r3, [sp, #4]
    8bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8bf2:	4611      	mov	r1, r2
    8bf4:	4618      	mov	r0, r3
    8bf6:	f7ff fa07 	bl	8008 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8bfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bfe:	3301      	adds	r3, #1
    8c00:	f88d 300f 	strb.w	r3, [sp, #15]
    8c04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c08:	2b0f      	cmp	r3, #15
    8c0a:	d9ec      	bls.n	8be6 <Adc_Ip_IRQHandler+0xae>
}
    8c0c:	bf00      	nop
    8c0e:	b005      	add	sp, #20
    8c10:	f85d fb04 	ldr.w	pc, [sp], #4
    8c14:	1fff8d18 	.word	0x1fff8d18
    8c18:	000109e0 	.word	0x000109e0

00008c1c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8c1c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8c1e:	2000      	movs	r0, #0
    8c20:	f7ff ff8a 	bl	8b38 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8c24:	f3bf 8f4f 	dsb	sy
}
    8c28:	bf00      	nop
    8c2a:	bd08      	pop	{r3, pc}

00008c2c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8c2c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8c2e:	2001      	movs	r0, #1
    8c30:	f7ff ff82 	bl	8b38 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8c34:	f3bf 8f4f 	dsb	sy
}
    8c38:	bf00      	nop
    8c3a:	bd08      	pop	{r3, pc}

00008c3c <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8c3c:	b530      	push	{r4, r5, lr}
    8c3e:	b085      	sub	sp, #20
    8c40:	4603      	mov	r3, r0
    8c42:	460a      	mov	r2, r1
    8c44:	f88d 3007 	strb.w	r3, [sp, #7]
    8c48:	4613      	mov	r3, r2
    8c4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8c4e:	2300      	movs	r3, #0
    8c50:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8c54:	2300      	movs	r3, #0
    8c56:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8c5a:	f002 f8cf 	bl	adfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8c5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8c62:	492e      	ldr	r1, [pc, #184]	; (8d1c <Adc_Ipw_RemoveFromQueue+0xe0>)
    8c64:	4613      	mov	r3, r2
    8c66:	005b      	lsls	r3, r3, #1
    8c68:	4413      	add	r3, r2
    8c6a:	005b      	lsls	r3, r3, #1
    8c6c:	440b      	add	r3, r1
    8c6e:	881b      	ldrh	r3, [r3, #0]
    8c70:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8c74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c78:	2b01      	cmp	r3, #1
    8c7a:	d80a      	bhi.n	8c92 <Adc_Ipw_RemoveFromQueue+0x56>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8c7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8c80:	4926      	ldr	r1, [pc, #152]	; (8d1c <Adc_Ipw_RemoveFromQueue+0xe0>)
    8c82:	4613      	mov	r3, r2
    8c84:	005b      	lsls	r3, r3, #1
    8c86:	4413      	add	r3, r2
    8c88:	005b      	lsls	r3, r3, #1
    8c8a:	440b      	add	r3, r1
    8c8c:	2200      	movs	r2, #0
    8c8e:	801a      	strh	r2, [r3, #0]
    8c90:	e03f      	b.n	8d12 <Adc_Ipw_RemoveFromQueue+0xd6>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8c96:	3301      	adds	r3, #1
    8c98:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c9c:	e01f      	b.n	8cde <Adc_Ipw_RemoveFromQueue+0xa2>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8c9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8ca2:	f8bd 400e 	ldrh.w	r4, [sp, #14]
    8ca6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8caa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8cae:	1e58      	subs	r0, r3, #1
    8cb0:	4d1a      	ldr	r5, [pc, #104]	; (8d1c <Adc_Ipw_RemoveFromQueue+0xe0>)
    8cb2:	460b      	mov	r3, r1
    8cb4:	005b      	lsls	r3, r3, #1
    8cb6:	440b      	add	r3, r1
    8cb8:	4423      	add	r3, r4
    8cba:	005b      	lsls	r3, r3, #1
    8cbc:	442b      	add	r3, r5
    8cbe:	885b      	ldrh	r3, [r3, #2]
    8cc0:	b29c      	uxth	r4, r3
    8cc2:	4916      	ldr	r1, [pc, #88]	; (8d1c <Adc_Ipw_RemoveFromQueue+0xe0>)
    8cc4:	4613      	mov	r3, r2
    8cc6:	005b      	lsls	r3, r3, #1
    8cc8:	4413      	add	r3, r2
    8cca:	4403      	add	r3, r0
    8ccc:	005b      	lsls	r3, r3, #1
    8cce:	440b      	add	r3, r1
    8cd0:	4622      	mov	r2, r4
    8cd2:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8cd4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8cd8:	3301      	adds	r3, #1
    8cda:	f8ad 300e 	strh.w	r3, [sp, #14]
    8cde:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8ce2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8ce6:	429a      	cmp	r2, r3
    8ce8:	d3d9      	bcc.n	8c9e <Adc_Ipw_RemoveFromQueue+0x62>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8cea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8cee:	490b      	ldr	r1, [pc, #44]	; (8d1c <Adc_Ipw_RemoveFromQueue+0xe0>)
    8cf0:	4613      	mov	r3, r2
    8cf2:	005b      	lsls	r3, r3, #1
    8cf4:	4413      	add	r3, r2
    8cf6:	005b      	lsls	r3, r3, #1
    8cf8:	440b      	add	r3, r1
    8cfa:	881b      	ldrh	r3, [r3, #0]
    8cfc:	b29b      	uxth	r3, r3
    8cfe:	3b01      	subs	r3, #1
    8d00:	b298      	uxth	r0, r3
    8d02:	4906      	ldr	r1, [pc, #24]	; (8d1c <Adc_Ipw_RemoveFromQueue+0xe0>)
    8d04:	4613      	mov	r3, r2
    8d06:	005b      	lsls	r3, r3, #1
    8d08:	4413      	add	r3, r2
    8d0a:	005b      	lsls	r3, r3, #1
    8d0c:	440b      	add	r3, r1
    8d0e:	4602      	mov	r2, r0
    8d10:	801a      	strh	r2, [r3, #0]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8d12:	f002 f89f 	bl	ae54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8d16:	bf00      	nop
    8d18:	b005      	add	sp, #20
    8d1a:	bd30      	pop	{r4, r5, pc}
    8d1c:	1fff8d0c 	.word	0x1fff8d0c

00008d20 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8d20:	b500      	push	{lr}
    8d22:	b087      	sub	sp, #28
    8d24:	9003      	str	r0, [sp, #12]
    8d26:	9102      	str	r1, [sp, #8]
    8d28:	9201      	str	r2, [sp, #4]
    8d2a:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8d2e:	2300      	movs	r3, #0
    8d30:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8d34:	9b03      	ldr	r3, [sp, #12]
    8d36:	789b      	ldrb	r3, [r3, #2]
    8d38:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8d3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d40:	4a29      	ldr	r2, [pc, #164]	; (8de8 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d46:	681a      	ldr	r2, [r3, #0]
    8d48:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8d4c:	4413      	add	r3, r2
    8d4e:	7c1b      	ldrb	r3, [r3, #16]
    8d50:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8d54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d58:	4a23      	ldr	r2, [pc, #140]	; (8de8 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d5e:	681b      	ldr	r3, [r3, #0]
    8d60:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d68:	695b      	ldr	r3, [r3, #20]
    8d6a:	4618      	mov	r0, r3
    8d6c:	f000 fbd6 	bl	951c <Adc_Ipw_CalculateNumsBitShift>
    8d70:	4603      	mov	r3, r0
    8d72:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8d76:	9b03      	ldr	r3, [sp, #12]
    8d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8d7c:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d80:	2300      	movs	r3, #0
    8d82:	f88d 3017 	strb.w	r3, [sp, #23]
    8d86:	e022      	b.n	8dce <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8d88:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d8c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d90:	4611      	mov	r1, r2
    8d92:	4618      	mov	r0, r3
    8d94:	f7ff fce0 	bl	8758 <Adc_Ip_GetConvData>
    8d98:	4603      	mov	r3, r0
    8d9a:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8d9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8da2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8da6:	fa02 f303 	lsl.w	r3, r2, r3
    8daa:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8dae:	9b01      	ldr	r3, [sp, #4]
    8db0:	2201      	movs	r2, #1
    8db2:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8db4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8db8:	005b      	lsls	r3, r3, #1
    8dba:	9a02      	ldr	r2, [sp, #8]
    8dbc:	4413      	add	r3, r2
    8dbe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8dc2:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8dc4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8dc8:	3301      	adds	r3, #1
    8dca:	f88d 3017 	strb.w	r3, [sp, #23]
    8dce:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8dd2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8dd6:	429a      	cmp	r2, r3
    8dd8:	d3d6      	bcc.n	8d88 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8dda:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8dde:	4618      	mov	r0, r3
    8de0:	b007      	add	sp, #28
    8de2:	f85d fb04 	ldr.w	pc, [sp], #4
    8de6:	bf00      	nop
    8de8:	1fff8cf0 	.word	0x1fff8cf0

00008dec <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8dec:	b500      	push	{lr}
    8dee:	b087      	sub	sp, #28
    8df0:	9003      	str	r0, [sp, #12]
    8df2:	9102      	str	r1, [sp, #8]
    8df4:	9201      	str	r2, [sp, #4]
    8df6:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8dfa:	2301      	movs	r3, #1
    8dfc:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8e00:	2300      	movs	r3, #0
    8e02:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8e06:	9b03      	ldr	r3, [sp, #12]
    8e08:	789b      	ldrb	r3, [r3, #2]
    8e0a:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8e0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e12:	4a19      	ldr	r2, [pc, #100]	; (8e78 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    8e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e18:	681a      	ldr	r2, [r3, #0]
    8e1a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8e1e:	4413      	add	r3, r2
    8e20:	7c1b      	ldrb	r3, [r3, #16]
    8e22:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    8e26:	9b03      	ldr	r3, [sp, #12]
    8e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8e2c:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    8e30:	f89d 2013 	ldrb.w	r2, [sp, #19]
    8e34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8e38:	2100      	movs	r1, #0
    8e3a:	4618      	mov	r0, r3
    8e3c:	f000 fe5c 	bl	9af8 <Adc_Ipw_CheckValidConversion>
    8e40:	4603      	mov	r3, r0
    8e42:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    8e46:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d00a      	beq.n	8e64 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    8e4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e52:	9a01      	ldr	r2, [sp, #4]
    8e54:	9902      	ldr	r1, [sp, #8]
    8e56:	9803      	ldr	r0, [sp, #12]
    8e58:	f7ff ff62 	bl	8d20 <Adc_Ipw_ReadGroupConvData>
    8e5c:	4603      	mov	r3, r0
    8e5e:	f88d 3017 	strb.w	r3, [sp, #23]
    8e62:	e002      	b.n	8e6a <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    8e64:	2301      	movs	r3, #1
    8e66:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    8e6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8e6e:	4618      	mov	r0, r3
    8e70:	b007      	add	sp, #28
    8e72:	f85d fb04 	ldr.w	pc, [sp], #4
    8e76:	bf00      	nop
    8e78:	1fff8cf0 	.word	0x1fff8cf0

00008e7c <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    8e7c:	b088      	sub	sp, #32
    8e7e:	4603      	mov	r3, r0
    8e80:	9100      	str	r1, [sp, #0]
    8e82:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e86:	4613      	mov	r3, r2
    8e88:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8e8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e90:	4a3b      	ldr	r2, [pc, #236]	; (8f80 <Adc_Ipw_WriteDataBuffer+0x104>)
    8e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e96:	68da      	ldr	r2, [r3, #12]
    8e98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8e9c:	005b      	lsls	r3, r3, #1
    8e9e:	4413      	add	r3, r2
    8ea0:	881b      	ldrh	r3, [r3, #0]
    8ea2:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    8ea6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8eaa:	4a35      	ldr	r2, [pc, #212]	; (8f80 <Adc_Ipw_WriteDataBuffer+0x104>)
    8eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eb0:	6859      	ldr	r1, [r3, #4]
    8eb2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    8eb6:	4613      	mov	r3, r2
    8eb8:	00db      	lsls	r3, r3, #3
    8eba:	1a9b      	subs	r3, r3, r2
    8ebc:	00db      	lsls	r3, r3, #3
    8ebe:	440b      	add	r3, r1
    8ec0:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8ec2:	9b04      	ldr	r3, [sp, #16]
    8ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8ec8:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    8ecc:	2300      	movs	r3, #0
    8ece:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8ed0:	2300      	movs	r3, #0
    8ed2:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8ed6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8eda:	492a      	ldr	r1, [pc, #168]	; (8f84 <Adc_Ipw_WriteDataBuffer+0x108>)
    8edc:	4613      	mov	r3, r2
    8ede:	005b      	lsls	r3, r3, #1
    8ee0:	4413      	add	r3, r2
    8ee2:	00db      	lsls	r3, r3, #3
    8ee4:	440b      	add	r3, r1
    8ee6:	330c      	adds	r3, #12
    8ee8:	881b      	ldrh	r3, [r3, #0]
    8eea:	b29b      	uxth	r3, r3
    8eec:	3b01      	subs	r3, #1
    8eee:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8ef2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ef6:	4923      	ldr	r1, [pc, #140]	; (8f84 <Adc_Ipw_WriteDataBuffer+0x108>)
    8ef8:	4613      	mov	r3, r2
    8efa:	005b      	lsls	r3, r3, #1
    8efc:	4413      	add	r3, r2
    8efe:	00db      	lsls	r3, r3, #3
    8f00:	440b      	add	r3, r1
    8f02:	330c      	adds	r3, #12
    8f04:	881b      	ldrh	r3, [r3, #0]
    8f06:	b29b      	uxth	r3, r3
    8f08:	2b00      	cmp	r3, #0
    8f0a:	d104      	bne.n	8f16 <Adc_Ipw_WriteDataBuffer+0x9a>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    8f0c:	9b04      	ldr	r3, [sp, #16]
    8f0e:	8c1b      	ldrh	r3, [r3, #32]
    8f10:	3b01      	subs	r3, #1
    8f12:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8f16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8f1a:	491a      	ldr	r1, [pc, #104]	; (8f84 <Adc_Ipw_WriteDataBuffer+0x108>)
    8f1c:	4613      	mov	r3, r2
    8f1e:	005b      	lsls	r3, r3, #1
    8f20:	4413      	add	r3, r2
    8f22:	00db      	lsls	r3, r3, #3
    8f24:	440b      	add	r3, r1
    8f26:	3310      	adds	r3, #16
    8f28:	681a      	ldr	r2, [r3, #0]
    8f2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8f2e:	005b      	lsls	r3, r3, #1
    8f30:	4413      	add	r3, r2
    8f32:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    8f34:	9b04      	ldr	r3, [sp, #16]
    8f36:	8c1b      	ldrh	r3, [r3, #32]
    8f38:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    8f3c:	2300      	movs	r3, #0
    8f3e:	f88d 301f 	strb.w	r3, [sp, #31]
    8f42:	e012      	b.n	8f6a <Adc_Ipw_WriteDataBuffer+0xee>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    8f44:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8f48:	005b      	lsls	r3, r3, #1
    8f4a:	9a00      	ldr	r2, [sp, #0]
    8f4c:	4413      	add	r3, r2
    8f4e:	9a06      	ldr	r2, [sp, #24]
    8f50:	8812      	ldrh	r2, [r2, #0]
    8f52:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    8f54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8f58:	005b      	lsls	r3, r3, #1
    8f5a:	9a06      	ldr	r2, [sp, #24]
    8f5c:	4413      	add	r3, r2
    8f5e:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    8f60:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8f64:	3301      	adds	r3, #1
    8f66:	f88d 301f 	strb.w	r3, [sp, #31]
    8f6a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8f6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f72:	429a      	cmp	r2, r3
    8f74:	d3e6      	bcc.n	8f44 <Adc_Ipw_WriteDataBuffer+0xc8>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    8f76:	bf00      	nop
    8f78:	bf00      	nop
    8f7a:	b008      	add	sp, #32
    8f7c:	4770      	bx	lr
    8f7e:	bf00      	nop
    8f80:	1fff8cf0 	.word	0x1fff8cf0
    8f84:	1fff8cf4 	.word	0x1fff8cf4

00008f88 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    8f88:	b500      	push	{lr}
    8f8a:	b089      	sub	sp, #36	; 0x24
    8f8c:	9200      	str	r2, [sp, #0]
    8f8e:	461a      	mov	r2, r3
    8f90:	4603      	mov	r3, r0
    8f92:	f88d 3007 	strb.w	r3, [sp, #7]
    8f96:	460b      	mov	r3, r1
    8f98:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f9c:	4613      	mov	r3, r2
    8f9e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    8fa2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8fa6:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    8faa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8fae:	f003 0307 	and.w	r3, r3, #7
    8fb2:	b2db      	uxtb	r3, r3
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d006      	beq.n	8fc6 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    8fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8fbc:	08db      	lsrs	r3, r3, #3
    8fbe:	b2db      	uxtb	r3, r3
    8fc0:	3301      	adds	r3, #1
    8fc2:	b2db      	uxtb	r3, r3
    8fc4:	e003      	b.n	8fce <Adc_Ipw_ConfigurePdbChannels+0x46>
    8fc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8fca:	08db      	lsrs	r3, r3, #3
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    8fd2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8fd6:	4987      	ldr	r1, [pc, #540]	; (91f4 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    8fd8:	4613      	mov	r3, r2
    8fda:	005b      	lsls	r3, r3, #1
    8fdc:	4413      	add	r3, r2
    8fde:	00db      	lsls	r3, r3, #3
    8fe0:	440b      	add	r3, r1
    8fe2:	3314      	adds	r3, #20
    8fe4:	781b      	ldrb	r3, [r3, #0]
    8fe6:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    8fea:	4b83      	ldr	r3, [pc, #524]	; (91f8 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    8fec:	681b      	ldr	r3, [r3, #0]
    8fee:	681a      	ldr	r2, [r3, #0]
    8ff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ff4:	4413      	add	r3, r2
    8ff6:	7c1b      	ldrb	r3, [r3, #16]
    8ff8:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    8ffc:	9b00      	ldr	r3, [sp, #0]
    8ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9000:	691b      	ldr	r3, [r3, #16]
    9002:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9004:	2300      	movs	r3, #0
    9006:	f88d 301f 	strb.w	r3, [sp, #31]
    900a:	e0e6      	b.n	91da <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    900c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9010:	08db      	lsrs	r3, r3, #3
    9012:	b2db      	uxtb	r3, r3
    9014:	2b00      	cmp	r3, #0
    9016:	d102      	bne.n	901e <Adc_Ipw_ConfigurePdbChannels+0x96>
    9018:	f89d 301d 	ldrb.w	r3, [sp, #29]
    901c:	e000      	b.n	9020 <Adc_Ipw_ConfigurePdbChannels+0x98>
    901e:	2308      	movs	r3, #8
    9020:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9024:	9b00      	ldr	r3, [sp, #0]
    9026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9028:	7bdb      	ldrb	r3, [r3, #15]
    902a:	2b00      	cmp	r3, #0
    902c:	d05e      	beq.n	90ec <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    902e:	9b00      	ldr	r3, [sp, #0]
    9030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9032:	7b9b      	ldrb	r3, [r3, #14]
    9034:	f083 0301 	eor.w	r3, r3, #1
    9038:	b2db      	uxtb	r3, r3
    903a:	2b00      	cmp	r3, #0
    903c:	d02a      	beq.n	9094 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    903e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9042:	f1c3 0308 	rsb	r3, r3, #8
    9046:	22ff      	movs	r2, #255	; 0xff
    9048:	fa22 f303 	lsr.w	r3, r2, r3
    904c:	b2db      	uxtb	r3, r3
    904e:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9052:	2300      	movs	r3, #0
    9054:	f88d 301e 	strb.w	r3, [sp, #30]
    9058:	e015      	b.n	9086 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    905a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    905e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9062:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9066:	4413      	add	r3, r2
    9068:	005b      	lsls	r3, r3, #1
    906a:	9a05      	ldr	r2, [sp, #20]
    906c:	4413      	add	r3, r2
    906e:	881b      	ldrh	r3, [r3, #0]
    9070:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9074:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9078:	f001 fd9e 	bl	abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    907c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9080:	3301      	adds	r3, #1
    9082:	f88d 301e 	strb.w	r3, [sp, #30]
    9086:	f89d 201e 	ldrb.w	r2, [sp, #30]
    908a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    908e:	429a      	cmp	r2, r3
    9090:	d3e3      	bcc.n	905a <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9092:	e051      	b.n	9138 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9094:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9098:	2b00      	cmp	r3, #0
    909a:	d110      	bne.n	90be <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    909c:	2301      	movs	r3, #1
    909e:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    90a2:	9b05      	ldr	r3, [sp, #20]
    90a4:	881b      	ldrh	r3, [r3, #0]
    90a6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    90aa:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90b2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90b6:	2200      	movs	r2, #0
    90b8:	f001 fd7e 	bl	abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    90bc:	e03c      	b.n	9138 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    90be:	2301      	movs	r3, #1
    90c0:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    90c4:	9b00      	ldr	r3, [sp, #0]
    90c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    90c8:	899a      	ldrh	r2, [r3, #12]
    90ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90ce:	b29b      	uxth	r3, r3
    90d0:	fb12 f303 	smulbb	r3, r2, r3
    90d4:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    90d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90e0:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90e4:	2200      	movs	r2, #0
    90e6:	f001 fd67 	bl	abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    90ea:	e025      	b.n	9138 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    90ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90f0:	2b00      	cmp	r3, #0
    90f2:	d10b      	bne.n	910c <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    90f4:	2301      	movs	r3, #1
    90f6:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    90fa:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90fe:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9102:	2300      	movs	r3, #0
    9104:	2200      	movs	r2, #0
    9106:	f001 fd57 	bl	abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    910a:	e015      	b.n	9138 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    910c:	2301      	movs	r3, #1
    910e:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9112:	9b00      	ldr	r3, [sp, #0]
    9114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9116:	899a      	ldrh	r2, [r3, #12]
    9118:	f89d 301f 	ldrb.w	r3, [sp, #31]
    911c:	b29b      	uxth	r3, r3
    911e:	fb12 f303 	smulbb	r3, r2, r3
    9122:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9126:	f89d 0018 	ldrb.w	r0, [sp, #24]
    912a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    912e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9132:	2200      	movs	r2, #0
    9134:	f001 fd40 	bl	abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9138:	f89d 3018 	ldrb.w	r3, [sp, #24]
    913c:	4618      	mov	r0, r3
    913e:	f001 fc0f 	bl	a960 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    9142:	f89d 201d 	ldrb.w	r2, [sp, #29]
    9146:	f89d 3013 	ldrb.w	r3, [sp, #19]
    914a:	1ad3      	subs	r3, r2, r3
    914c:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9150:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9154:	b29a      	uxth	r2, r3
    9156:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    915a:	4413      	add	r3, r2
    915c:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9160:	9b00      	ldr	r3, [sp, #0]
    9162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9164:	7b9b      	ldrb	r3, [r3, #14]
    9166:	2b00      	cmp	r3, #0
    9168:	d01d      	beq.n	91a6 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    916a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    916e:	2b00      	cmp	r3, #0
    9170:	d10c      	bne.n	918c <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9172:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9176:	f1c3 0308 	rsb	r3, r3, #8
    917a:	22ff      	movs	r2, #255	; 0xff
    917c:	fa22 f303 	lsr.w	r3, r2, r3
    9180:	b2db      	uxtb	r3, r3
    9182:	3b01      	subs	r3, #1
    9184:	b2db      	uxtb	r3, r3
    9186:	f88d 300e 	strb.w	r3, [sp, #14]
    918a:	e00f      	b.n	91ac <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    918c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9190:	f1c3 0308 	rsb	r3, r3, #8
    9194:	22ff      	movs	r2, #255	; 0xff
    9196:	fa22 f303 	lsr.w	r3, r2, r3
    919a:	b2db      	uxtb	r3, r3
    919c:	3b01      	subs	r3, #1
    919e:	b2db      	uxtb	r3, r3
    91a0:	f88d 300e 	strb.w	r3, [sp, #14]
    91a4:	e002      	b.n	91ac <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    91a6:	2300      	movs	r3, #0
    91a8:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    91ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    91b0:	f1c3 0308 	rsb	r3, r3, #8
    91b4:	22ff      	movs	r2, #255	; 0xff
    91b6:	fa22 f303 	lsr.w	r3, r2, r3
    91ba:	b2db      	uxtb	r3, r3
    91bc:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    91c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    91c4:	aa03      	add	r2, sp, #12
    91c6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    91ca:	4618      	mov	r0, r3
    91cc:	f001 fc04 	bl	a9d8 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    91d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    91d4:	3301      	adds	r3, #1
    91d6:	f88d 301f 	strb.w	r3, [sp, #31]
    91da:	f89d 201f 	ldrb.w	r2, [sp, #31]
    91de:	f89d 3019 	ldrb.w	r3, [sp, #25]
    91e2:	429a      	cmp	r2, r3
    91e4:	f4ff af12 	bcc.w	900c <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    91e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    91ec:	4618      	mov	r0, r3
    91ee:	b009      	add	sp, #36	; 0x24
    91f0:	f85d fb04 	ldr.w	pc, [sp], #4
    91f4:	1fff8cf4 	.word	0x1fff8cf4
    91f8:	1fff8cf0 	.word	0x1fff8cf0

000091fc <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    91fc:	b500      	push	{lr}
    91fe:	b089      	sub	sp, #36	; 0x24
    9200:	9202      	str	r2, [sp, #8]
    9202:	9301      	str	r3, [sp, #4]
    9204:	4603      	mov	r3, r0
    9206:	f88d 300f 	strb.w	r3, [sp, #15]
    920a:	460b      	mov	r3, r1
    920c:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9210:	2300      	movs	r3, #0
    9212:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9216:	4b62      	ldr	r3, [pc, #392]	; (93a0 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9218:	681b      	ldr	r3, [r3, #0]
    921a:	681a      	ldr	r2, [r3, #0]
    921c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9220:	4413      	add	r3, r2
    9222:	7c1b      	ldrb	r3, [r3, #16]
    9224:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9228:	9b02      	ldr	r3, [sp, #8]
    922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    922c:	691b      	ldr	r3, [r3, #16]
    922e:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9230:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9234:	f003 0307 	and.w	r3, r3, #7
    9238:	b2db      	uxtb	r3, r3
    923a:	2b00      	cmp	r3, #0
    923c:	d006      	beq.n	924c <Adc_Ipw_ConfigurePdbConversion+0x50>
    923e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9242:	08db      	lsrs	r3, r3, #3
    9244:	b2db      	uxtb	r3, r3
    9246:	3301      	adds	r3, #1
    9248:	b2db      	uxtb	r3, r3
    924a:	e003      	b.n	9254 <Adc_Ipw_ConfigurePdbConversion+0x58>
    924c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9250:	08db      	lsrs	r3, r3, #3
    9252:	b2db      	uxtb	r3, r3
    9254:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9258:	f89d 301b 	ldrb.w	r3, [sp, #27]
    925c:	4618      	mov	r0, r3
    925e:	f001 fae9 	bl	a834 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    9262:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9266:	9901      	ldr	r1, [sp, #4]
    9268:	4618      	mov	r0, r3
    926a:	f001 fb11 	bl	a890 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    926e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9272:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9276:	f89d 000f 	ldrb.w	r0, [sp, #15]
    927a:	9a02      	ldr	r2, [sp, #8]
    927c:	f7ff fe84 	bl	8f88 <Adc_Ipw_ConfigurePdbChannels>
    9280:	4603      	mov	r3, r0
    9282:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9286:	9b02      	ldr	r3, [sp, #8]
    9288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    928a:	7bdb      	ldrb	r3, [r3, #15]
    928c:	2b00      	cmp	r3, #0
    928e:	d02f      	beq.n	92f0 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9290:	9b02      	ldr	r3, [sp, #8]
    9292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9294:	7b9b      	ldrb	r3, [r3, #14]
    9296:	f083 0301 	eor.w	r3, r3, #1
    929a:	b2db      	uxtb	r3, r3
    929c:	2b00      	cmp	r3, #0
    929e:	d017      	beq.n	92d0 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    92a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    92a4:	493f      	ldr	r1, [pc, #252]	; (93a4 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    92a6:	4613      	mov	r3, r2
    92a8:	005b      	lsls	r3, r3, #1
    92aa:	4413      	add	r3, r2
    92ac:	00db      	lsls	r3, r3, #3
    92ae:	440b      	add	r3, r1
    92b0:	3314      	adds	r3, #20
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	461a      	mov	r2, r3
    92b6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    92ba:	4413      	add	r3, r2
    92bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    92c0:	3b01      	subs	r3, #1
    92c2:	005b      	lsls	r3, r3, #1
    92c4:	9a05      	ldr	r2, [sp, #20]
    92c6:	4413      	add	r3, r2
    92c8:	881b      	ldrh	r3, [r3, #0]
    92ca:	f8ad 301c 	strh.w	r3, [sp, #28]
    92ce:	e01a      	b.n	9306 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    92d0:	9b05      	ldr	r3, [sp, #20]
    92d2:	881a      	ldrh	r2, [r3, #0]
    92d4:	9b02      	ldr	r3, [sp, #8]
    92d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    92d8:	8999      	ldrh	r1, [r3, #12]
    92da:	f89d 3013 	ldrb.w	r3, [sp, #19]
    92de:	3b01      	subs	r3, #1
    92e0:	b29b      	uxth	r3, r3
    92e2:	fb11 f303 	smulbb	r3, r1, r3
    92e6:	b29b      	uxth	r3, r3
    92e8:	4413      	add	r3, r2
    92ea:	f8ad 301c 	strh.w	r3, [sp, #28]
    92ee:	e00a      	b.n	9306 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    92f0:	9b02      	ldr	r3, [sp, #8]
    92f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    92f4:	899a      	ldrh	r2, [r3, #12]
    92f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    92fa:	3b01      	subs	r3, #1
    92fc:	b29b      	uxth	r3, r3
    92fe:	fb12 f303 	smulbb	r3, r2, r3
    9302:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    9306:	f89d 301b 	ldrb.w	r3, [sp, #27]
    930a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    930e:	4611      	mov	r1, r2
    9310:	4618      	mov	r0, r3
    9312:	f001 fb3d 	bl	a990 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9316:	f89d 301b 	ldrb.w	r3, [sp, #27]
    931a:	4618      	mov	r0, r3
    931c:	f001 fb20 	bl	a960 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    9320:	2300      	movs	r3, #0
    9322:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    9326:	2300      	movs	r3, #0
    9328:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    932c:	2300      	movs	r3, #0
    932e:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9332:	e00c      	b.n	934e <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9334:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9338:	aa04      	add	r2, sp, #16
    933a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    933e:	4618      	mov	r0, r3
    9340:	f001 fb4a 	bl	a9d8 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9344:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9348:	3301      	adds	r3, #1
    934a:	f88d 301f 	strb.w	r3, [sp, #31]
    934e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9352:	2b01      	cmp	r3, #1
    9354:	d9ee      	bls.n	9334 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    9356:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    935a:	4912      	ldr	r1, [pc, #72]	; (93a4 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    935c:	4613      	mov	r3, r2
    935e:	005b      	lsls	r3, r3, #1
    9360:	4413      	add	r3, r2
    9362:	00db      	lsls	r3, r3, #3
    9364:	440b      	add	r3, r1
    9366:	3314      	adds	r3, #20
    9368:	7819      	ldrb	r1, [r3, #0]
    936a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    936e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9372:	440b      	add	r3, r1
    9374:	b2d8      	uxtb	r0, r3
    9376:	490b      	ldr	r1, [pc, #44]	; (93a4 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9378:	4613      	mov	r3, r2
    937a:	005b      	lsls	r3, r3, #1
    937c:	4413      	add	r3, r2
    937e:	00db      	lsls	r3, r3, #3
    9380:	440b      	add	r3, r1
    9382:	3314      	adds	r3, #20
    9384:	4602      	mov	r2, r0
    9386:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    9388:	9b01      	ldr	r3, [sp, #4]
    938a:	2b0f      	cmp	r3, #15
    938c:	d104      	bne.n	9398 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    938e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9392:	4618      	mov	r0, r3
    9394:	f001 fabc 	bl	a910 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    9398:	bf00      	nop
    939a:	b009      	add	sp, #36	; 0x24
    939c:	f85d fb04 	ldr.w	pc, [sp], #4
    93a0:	1fff8cf0 	.word	0x1fff8cf0
    93a4:	1fff8cf4 	.word	0x1fff8cf4

000093a8 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    93a8:	b500      	push	{lr}
    93aa:	b087      	sub	sp, #28
    93ac:	4603      	mov	r3, r0
    93ae:	f88d 3007 	strb.w	r3, [sp, #7]
    93b2:	460b      	mov	r3, r1
    93b4:	f8ad 3004 	strh.w	r3, [sp, #4]
    93b8:	4613      	mov	r3, r2
    93ba:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    93be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93c2:	4a39      	ldr	r2, [pc, #228]	; (94a8 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    93c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c8:	68da      	ldr	r2, [r3, #12]
    93ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    93ce:	005b      	lsls	r3, r3, #1
    93d0:	4413      	add	r3, r2
    93d2:	881b      	ldrh	r3, [r3, #0]
    93d4:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    93d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93dc:	4a32      	ldr	r2, [pc, #200]	; (94a8 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    93de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e2:	681a      	ldr	r2, [r3, #0]
    93e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93e8:	4413      	add	r3, r2
    93ea:	7c1b      	ldrb	r3, [r3, #16]
    93ec:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    93f0:	2300      	movs	r3, #0
    93f2:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    93f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93fa:	4618      	mov	r0, r3
    93fc:	f001 fc06 	bl	ac0c <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    9400:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9404:	4a28      	ldr	r2, [pc, #160]	; (94a8 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    9406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940a:	6859      	ldr	r1, [r3, #4]
    940c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9410:	4613      	mov	r3, r2
    9412:	00db      	lsls	r3, r3, #3
    9414:	1a9b      	subs	r3, r3, r2
    9416:	00db      	lsls	r3, r3, #3
    9418:	440b      	add	r3, r1
    941a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    941e:	2b01      	cmp	r3, #1
    9420:	d115      	bne.n	944e <Adc_Ipw_StopConversionCheckTimeout+0xa6>
    9422:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9426:	4a20      	ldr	r2, [pc, #128]	; (94a8 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    9428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942c:	6859      	ldr	r1, [r3, #4]
    942e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9432:	4613      	mov	r3, r2
    9434:	00db      	lsls	r3, r3, #3
    9436:	1a9b      	subs	r3, r3, r2
    9438:	00db      	lsls	r3, r3, #3
    943a:	440b      	add	r3, r1
    943c:	689b      	ldr	r3, [r3, #8]
    943e:	2b01      	cmp	r3, #1
    9440:	d105      	bne.n	944e <Adc_Ipw_StopConversionCheckTimeout+0xa6>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    9442:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9446:	2100      	movs	r1, #0
    9448:	4618      	mov	r0, r3
    944a:	f7ff f80f 	bl	846c <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    944e:	2300      	movs	r3, #0
    9450:	f88d 3016 	strb.w	r3, [sp, #22]
    9454:	e013      	b.n	947e <Adc_Ipw_StopConversionCheckTimeout+0xd6>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    9456:	f89d 3013 	ldrb.w	r3, [sp, #19]
    945a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    945e:	2201      	movs	r2, #1
    9460:	4618      	mov	r0, r3
    9462:	f7ff f8b5 	bl	85d0 <Adc_Ip_SetDisabledChannel>
    9466:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    9468:	9b03      	ldr	r3, [sp, #12]
    946a:	2b02      	cmp	r3, #2
    946c:	d102      	bne.n	9474 <Adc_Ipw_StopConversionCheckTimeout+0xcc>
        {
            Status = E_NOT_OK;
    946e:	2301      	movs	r3, #1
    9470:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9474:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9478:	3301      	adds	r3, #1
    947a:	f88d 3016 	strb.w	r3, [sp, #22]
    947e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9482:	490a      	ldr	r1, [pc, #40]	; (94ac <Adc_Ipw_StopConversionCheckTimeout+0x104>)
    9484:	4613      	mov	r3, r2
    9486:	005b      	lsls	r3, r3, #1
    9488:	4413      	add	r3, r2
    948a:	005b      	lsls	r3, r3, #1
    948c:	440b      	add	r3, r1
    948e:	3304      	adds	r3, #4
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	f89d 2016 	ldrb.w	r2, [sp, #22]
    9496:	429a      	cmp	r2, r3
    9498:	d3dd      	bcc.n	9456 <Adc_Ipw_StopConversionCheckTimeout+0xae>
        }
    }
    return Status;
    949a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    949e:	4618      	mov	r0, r3
    94a0:	b007      	add	sp, #28
    94a2:	f85d fb04 	ldr.w	pc, [sp], #4
    94a6:	bf00      	nop
    94a8:	1fff8cf0 	.word	0x1fff8cf0
    94ac:	1fff8d0c 	.word	0x1fff8d0c

000094b0 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    94b0:	b500      	push	{lr}
    94b2:	b085      	sub	sp, #20
    94b4:	4603      	mov	r3, r0
    94b6:	9100      	str	r1, [sp, #0]
    94b8:	f88d 3007 	strb.w	r3, [sp, #7]
    94bc:	4613      	mov	r3, r2
    94be:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    94c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94c6:	4a14      	ldr	r2, [pc, #80]	; (9518 <Adc_Ipw_PrepareGroupStart+0x68>)
    94c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94cc:	681a      	ldr	r2, [r3, #0]
    94ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94d2:	4413      	add	r3, r2
    94d4:	7c1b      	ldrb	r3, [r3, #16]
    94d6:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    94da:	9b00      	ldr	r3, [sp, #0]
    94dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    94de:	781b      	ldrb	r3, [r3, #0]
    94e0:	2b01      	cmp	r3, #1
    94e2:	d108      	bne.n	94f6 <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    94e4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    94e8:	9b00      	ldr	r3, [sp, #0]
    94ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    94ec:	685b      	ldr	r3, [r3, #4]
    94ee:	461a      	mov	r2, r3
    94f0:	2101      	movs	r1, #1
    94f2:	f7fe ff35 	bl	8360 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    94f6:	9b00      	ldr	r3, [sp, #0]
    94f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    94fa:	7a1b      	ldrb	r3, [r3, #8]
    94fc:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9500:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9504:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9508:	4611      	mov	r1, r2
    950a:	4618      	mov	r0, r3
    950c:	f7fe ff46 	bl	839c <Adc_Ip_SetSampleTime>
}
    9510:	bf00      	nop
    9512:	b005      	add	sp, #20
    9514:	f85d fb04 	ldr.w	pc, [sp], #4
    9518:	1fff8cf0 	.word	0x1fff8cf0

0000951c <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    951c:	b084      	sub	sp, #16
    951e:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9520:	2300      	movs	r3, #0
    9522:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    9526:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    952a:	4618      	mov	r0, r3
    952c:	b004      	add	sp, #16
    952e:	4770      	bx	lr

00009530 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    9530:	b500      	push	{lr}
    9532:	b08f      	sub	sp, #60	; 0x3c
    9534:	9202      	str	r2, [sp, #8]
    9536:	461a      	mov	r2, r3
    9538:	4603      	mov	r3, r0
    953a:	f88d 300f 	strb.w	r3, [sp, #15]
    953e:	460b      	mov	r3, r1
    9540:	f8ad 300c 	strh.w	r3, [sp, #12]
    9544:	4613      	mov	r3, r2
    9546:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    954a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    954e:	4a70      	ldr	r2, [pc, #448]	; (9710 <Adc_Ipw_ConfigureConversion+0x1e0>)
    9550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9554:	68da      	ldr	r2, [r3, #12]
    9556:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    955a:	005b      	lsls	r3, r3, #1
    955c:	4413      	add	r3, r2
    955e:	881b      	ldrh	r3, [r3, #0]
    9560:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9564:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9568:	4a69      	ldr	r2, [pc, #420]	; (9710 <Adc_Ipw_ConfigureConversion+0x1e0>)
    956a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    956e:	6859      	ldr	r1, [r3, #4]
    9570:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    9574:	4613      	mov	r3, r2
    9576:	00db      	lsls	r3, r3, #3
    9578:	1a9b      	subs	r3, r3, r2
    957a:	00db      	lsls	r3, r3, #3
    957c:	440b      	add	r3, r1
    957e:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9580:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9584:	4a62      	ldr	r2, [pc, #392]	; (9710 <Adc_Ipw_ConfigureConversion+0x1e0>)
    9586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    958a:	681a      	ldr	r2, [r3, #0]
    958c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9590:	4413      	add	r3, r2
    9592:	7c1b      	ldrb	r3, [r3, #16]
    9594:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    9598:	2300      	movs	r3, #0
    959a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    959c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    95a0:	495c      	ldr	r1, [pc, #368]	; (9714 <Adc_Ipw_ConfigureConversion+0x1e4>)
    95a2:	4613      	mov	r3, r2
    95a4:	005b      	lsls	r3, r3, #1
    95a6:	4413      	add	r3, r2
    95a8:	00db      	lsls	r3, r3, #3
    95aa:	440b      	add	r3, r1
    95ac:	3314      	adds	r3, #20
    95ae:	781b      	ldrb	r3, [r3, #0]
    95b0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    95b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    95b8:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    95ba:	2300      	movs	r3, #0
    95bc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    95c0:	e030      	b.n	9624 <Adc_Ipw_ConfigureConversion+0xf4>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    95c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    95c6:	4a52      	ldr	r2, [pc, #328]	; (9710 <Adc_Ipw_ConfigureConversion+0x1e0>)
    95c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95cc:	681b      	ldr	r3, [r3, #0]
    95ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    95d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    95d8:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    95dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95e0:	440b      	add	r3, r1
    95e2:	005b      	lsls	r3, r3, #1
    95e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    95e6:	440b      	add	r3, r1
    95e8:	881b      	ldrh	r3, [r3, #0]
    95ea:	4619      	mov	r1, r3
    95ec:	460b      	mov	r3, r1
    95ee:	005b      	lsls	r3, r3, #1
    95f0:	440b      	add	r3, r1
    95f2:	009b      	lsls	r3, r3, #2
    95f4:	4413      	add	r3, r2
    95f6:	685b      	ldr	r3, [r3, #4]
    95f8:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    95fa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95fe:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9602:	9b08      	ldr	r3, [sp, #32]
    9604:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    9606:	2300      	movs	r3, #0
    9608:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    960c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9610:	aa05      	add	r2, sp, #20
    9612:	4611      	mov	r1, r2
    9614:	4618      	mov	r0, r3
    9616:	f7fe ffab 	bl	8570 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    961a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    961e:	3301      	adds	r3, #1
    9620:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9624:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    9628:	f89d 300e 	ldrb.w	r3, [sp, #14]
    962c:	3b01      	subs	r3, #1
    962e:	429a      	cmp	r2, r3
    9630:	d3c7      	bcc.n	95c2 <Adc_Ipw_ConfigureConversion+0x92>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9632:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9636:	4a36      	ldr	r2, [pc, #216]	; (9710 <Adc_Ipw_ConfigureConversion+0x1e0>)
    9638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    963c:	681b      	ldr	r3, [r3, #0]
    963e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9648:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    964c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9650:	440b      	add	r3, r1
    9652:	005b      	lsls	r3, r3, #1
    9654:	990a      	ldr	r1, [sp, #40]	; 0x28
    9656:	440b      	add	r3, r1
    9658:	881b      	ldrh	r3, [r3, #0]
    965a:	4619      	mov	r1, r3
    965c:	460b      	mov	r3, r1
    965e:	005b      	lsls	r3, r3, #1
    9660:	440b      	add	r3, r1
    9662:	009b      	lsls	r3, r3, #2
    9664:	4413      	add	r3, r2
    9666:	685b      	ldr	r3, [r3, #4]
    9668:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    966a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    966e:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9672:	9b08      	ldr	r3, [sp, #32]
    9674:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9678:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    967c:	2b00      	cmp	r3, #0
    967e:	d103      	bne.n	9688 <Adc_Ipw_ConfigureConversion+0x158>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9680:	2301      	movs	r3, #1
    9682:	f88d 301c 	strb.w	r3, [sp, #28]
    9686:	e002      	b.n	968e <Adc_Ipw_ConfigureConversion+0x15e>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    9688:	2300      	movs	r3, #0
    968a:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    968e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9692:	aa05      	add	r2, sp, #20
    9694:	4611      	mov	r1, r2
    9696:	4618      	mov	r0, r3
    9698:	f7fe ff6a 	bl	8570 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    969c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    96a0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    96a4:	e014      	b.n	96d0 <Adc_Ipw_ConfigureConversion+0x1a0>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    96a6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    96aa:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    96ae:	231f      	movs	r3, #31
    96b0:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    96b2:	2300      	movs	r3, #0
    96b4:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    96b8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    96bc:	aa05      	add	r2, sp, #20
    96be:	4611      	mov	r1, r2
    96c0:	4618      	mov	r0, r3
    96c2:	f7fe ff55 	bl	8570 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    96c6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    96ca:	3301      	adds	r3, #1
    96cc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    96d0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    96d4:	2b0f      	cmp	r3, #15
    96d6:	d9e6      	bls.n	96a6 <Adc_Ipw_ConfigureConversion+0x176>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    96d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    96dc:	490e      	ldr	r1, [pc, #56]	; (9718 <Adc_Ipw_ConfigureConversion+0x1e8>)
    96de:	4613      	mov	r3, r2
    96e0:	005b      	lsls	r3, r3, #1
    96e2:	4413      	add	r3, r2
    96e4:	005b      	lsls	r3, r3, #1
    96e6:	440b      	add	r3, r1
    96e8:	3304      	adds	r3, #4
    96ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
    96ee:	701a      	strb	r2, [r3, #0]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    96f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    96f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    96fc:	9300      	str	r3, [sp, #0]
    96fe:	9b02      	ldr	r3, [sp, #8]
    9700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9702:	f7ff fd7b 	bl	91fc <Adc_Ipw_ConfigurePdbConversion>
}
    9706:	bf00      	nop
    9708:	b00f      	add	sp, #60	; 0x3c
    970a:	f85d fb04 	ldr.w	pc, [sp], #4
    970e:	bf00      	nop
    9710:	1fff8cf0 	.word	0x1fff8cf0
    9714:	1fff8cf4 	.word	0x1fff8cf4
    9718:	1fff8d0c 	.word	0x1fff8d0c

0000971c <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    971c:	b500      	push	{lr}
    971e:	b085      	sub	sp, #20
    9720:	9001      	str	r0, [sp, #4]
    9722:	460b      	mov	r3, r1
    9724:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9728:	2300      	movs	r3, #0
    972a:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    972e:	2300      	movs	r3, #0
    9730:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    9734:	2300      	movs	r3, #0
    9736:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    973a:	2300      	movs	r3, #0
    973c:	f88d 300f 	strb.w	r3, [sp, #15]
    9740:	e027      	b.n	9792 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    9742:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9746:	9a01      	ldr	r2, [sp, #4]
    9748:	4413      	add	r3, r2
    974a:	7f9b      	ldrb	r3, [r3, #30]
    974c:	2b01      	cmp	r3, #1
    974e:	d11b      	bne.n	9788 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9750:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9754:	9a01      	ldr	r2, [sp, #4]
    9756:	4413      	add	r3, r2
    9758:	7c1b      	ldrb	r3, [r3, #16]
    975a:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    975e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9762:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9766:	9b01      	ldr	r3, [sp, #4]
    9768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    976c:	4619      	mov	r1, r3
    976e:	f7fe fc96 	bl	809e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    9772:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9776:	f89d 200f 	ldrb.w	r2, [sp, #15]
    977a:	9b01      	ldr	r3, [sp, #4]
    977c:	3202      	adds	r2, #2
    977e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9782:	4619      	mov	r1, r3
    9784:	f000 ff29 	bl	a5da <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9788:	f89d 300f 	ldrb.w	r3, [sp, #15]
    978c:	3301      	adds	r3, #1
    978e:	f88d 300f 	strb.w	r3, [sp, #15]
    9792:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9796:	2b00      	cmp	r3, #0
    9798:	d0d3      	beq.n	9742 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    979a:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    979e:	4618      	mov	r0, r3
    97a0:	b005      	add	sp, #20
    97a2:	f85d fb04 	ldr.w	pc, [sp], #4

000097a6 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    97a6:	b500      	push	{lr}
    97a8:	b087      	sub	sp, #28
    97aa:	4603      	mov	r3, r0
    97ac:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    97b0:	2300      	movs	r3, #0
    97b2:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    97b6:	2300      	movs	r3, #0
    97b8:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    97bc:	2300      	movs	r3, #0
    97be:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    97c2:	2300      	movs	r3, #0
    97c4:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    97c8:	2300      	movs	r3, #0
    97ca:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    97ce:	2300      	movs	r3, #0
    97d0:	f88d 3017 	strb.w	r3, [sp, #23]
    97d4:	e026      	b.n	9824 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    97d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97da:	4a34      	ldr	r2, [pc, #208]	; (98ac <Adc_Ipw_DeInit+0x106>)
    97dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e0:	681a      	ldr	r2, [r3, #0]
    97e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97e6:	4413      	add	r3, r2
    97e8:	7f9b      	ldrb	r3, [r3, #30]
    97ea:	2b01      	cmp	r3, #1
    97ec:	d115      	bne.n	981a <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    97ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97f2:	4a2e      	ldr	r2, [pc, #184]	; (98ac <Adc_Ipw_DeInit+0x106>)
    97f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f8:	681a      	ldr	r2, [r3, #0]
    97fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97fe:	4413      	add	r3, r2
    9800:	7c1b      	ldrb	r3, [r3, #16]
    9802:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    9806:	f89d 3013 	ldrb.w	r3, [sp, #19]
    980a:	4618      	mov	r0, r3
    980c:	f7fe fd1e 	bl	824c <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    9810:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9814:	4618      	mov	r0, r3
    9816:	f000 ff89 	bl	a72c <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    981a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    981e:	3301      	adds	r3, #1
    9820:	f88d 3017 	strb.w	r3, [sp, #23]
    9824:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9828:	2b00      	cmp	r3, #0
    982a:	d0d4      	beq.n	97d6 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    982c:	2300      	movs	r3, #0
    982e:	f8ad 3014 	strh.w	r3, [sp, #20]
    9832:	e02a      	b.n	988a <Adc_Ipw_DeInit+0xe4>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9834:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9838:	4a1c      	ldr	r2, [pc, #112]	; (98ac <Adc_Ipw_DeInit+0x106>)
    983a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983e:	6859      	ldr	r1, [r3, #4]
    9840:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9844:	4613      	mov	r3, r2
    9846:	00db      	lsls	r3, r3, #3
    9848:	1a9b      	subs	r3, r3, r2
    984a:	00db      	lsls	r3, r3, #3
    984c:	440b      	add	r3, r1
    984e:	881b      	ldrh	r3, [r3, #0]
    9850:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9854:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9858:	4915      	ldr	r1, [pc, #84]	; (98b0 <Adc_Ipw_DeInit+0x10a>)
    985a:	4613      	mov	r3, r2
    985c:	005b      	lsls	r3, r3, #1
    985e:	4413      	add	r3, r2
    9860:	00db      	lsls	r3, r3, #3
    9862:	440b      	add	r3, r1
    9864:	3310      	adds	r3, #16
    9866:	2200      	movs	r2, #0
    9868:	601a      	str	r2, [r3, #0]
#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
        Adc_axGroupStatus[GroupId].Notification = ADC_NOTIFICATION_DISABLED;
    986a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    986e:	4910      	ldr	r1, [pc, #64]	; (98b0 <Adc_Ipw_DeInit+0x10a>)
    9870:	4613      	mov	r3, r2
    9872:	005b      	lsls	r3, r3, #1
    9874:	4413      	add	r3, r2
    9876:	00db      	lsls	r3, r3, #3
    9878:	440b      	add	r3, r1
    987a:	3308      	adds	r3, #8
    987c:	2200      	movs	r2, #0
    987e:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9880:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9884:	3301      	adds	r3, #1
    9886:	f8ad 3014 	strh.w	r3, [sp, #20]
    988a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    988e:	4a07      	ldr	r2, [pc, #28]	; (98ac <Adc_Ipw_DeInit+0x106>)
    9890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9894:	891b      	ldrh	r3, [r3, #8]
    9896:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    989a:	429a      	cmp	r2, r3
    989c:	d3ca      	bcc.n	9834 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    989e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    98a2:	4618      	mov	r0, r3
    98a4:	b007      	add	sp, #28
    98a6:	f85d fb04 	ldr.w	pc, [sp], #4
    98aa:	bf00      	nop
    98ac:	1fff8cf0 	.word	0x1fff8cf0
    98b0:	1fff8cf4 	.word	0x1fff8cf4

000098b4 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    98b4:	b500      	push	{lr}
    98b6:	b089      	sub	sp, #36	; 0x24
    98b8:	4603      	mov	r3, r0
    98ba:	460a      	mov	r2, r1
    98bc:	f88d 300f 	strb.w	r3, [sp, #15]
    98c0:	4613      	mov	r3, r2
    98c2:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    98c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    98ca:	4956      	ldr	r1, [pc, #344]	; (9a24 <Adc_Ipw_StartNormalConversion+0x170>)
    98cc:	4613      	mov	r3, r2
    98ce:	005b      	lsls	r3, r3, #1
    98d0:	4413      	add	r3, r2
    98d2:	005b      	lsls	r3, r3, #1
    98d4:	440b      	add	r3, r1
    98d6:	3302      	adds	r3, #2
    98d8:	881b      	ldrh	r3, [r3, #0]
    98da:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    98de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98e2:	4a51      	ldr	r2, [pc, #324]	; (9a28 <Adc_Ipw_StartNormalConversion+0x174>)
    98e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98e8:	68da      	ldr	r2, [r3, #12]
    98ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    98ee:	005b      	lsls	r3, r3, #1
    98f0:	4413      	add	r3, r2
    98f2:	881b      	ldrh	r3, [r3, #0]
    98f4:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    98f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98fc:	4a4a      	ldr	r2, [pc, #296]	; (9a28 <Adc_Ipw_StartNormalConversion+0x174>)
    98fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9902:	6859      	ldr	r1, [r3, #4]
    9904:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9908:	4613      	mov	r3, r2
    990a:	00db      	lsls	r3, r3, #3
    990c:	1a9b      	subs	r3, r3, r2
    990e:	00db      	lsls	r3, r3, #3
    9910:	440b      	add	r3, r1
    9912:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9914:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9918:	4a43      	ldr	r2, [pc, #268]	; (9a28 <Adc_Ipw_StartNormalConversion+0x174>)
    991a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    991e:	681a      	ldr	r2, [r3, #0]
    9920:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9924:	4413      	add	r3, r2
    9926:	7c1b      	ldrb	r3, [r3, #16]
    9928:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    992c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9930:	493c      	ldr	r1, [pc, #240]	; (9a24 <Adc_Ipw_StartNormalConversion+0x170>)
    9932:	4613      	mov	r3, r2
    9934:	005b      	lsls	r3, r3, #1
    9936:	4413      	add	r3, r2
    9938:	005b      	lsls	r3, r3, #1
    993a:	440b      	add	r3, r1
    993c:	881b      	ldrh	r3, [r3, #0]
    993e:	b29b      	uxth	r3, r3
    9940:	2b00      	cmp	r3, #0
    9942:	d06b      	beq.n	9a1c <Adc_Ipw_StartNormalConversion+0x168>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9944:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9948:	f89d 300f 	ldrb.w	r3, [sp, #15]
    994c:	9905      	ldr	r1, [sp, #20]
    994e:	4618      	mov	r0, r3
    9950:	f7ff fdae 	bl	94b0 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9954:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9958:	4934      	ldr	r1, [pc, #208]	; (9a2c <Adc_Ipw_StartNormalConversion+0x178>)
    995a:	4613      	mov	r3, r2
    995c:	005b      	lsls	r3, r3, #1
    995e:	4413      	add	r3, r2
    9960:	00db      	lsls	r3, r3, #3
    9962:	440b      	add	r3, r1
    9964:	3314      	adds	r3, #20
    9966:	2200      	movs	r2, #0
    9968:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    996a:	9b05      	ldr	r3, [sp, #20]
    996c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9970:	2b0f      	cmp	r3, #15
    9972:	d806      	bhi.n	9982 <Adc_Ipw_StartNormalConversion+0xce>
    9974:	9b05      	ldr	r3, [sp, #20]
    9976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    997a:	f003 030f 	and.w	r3, r3, #15
    997e:	b2db      	uxtb	r3, r3
    9980:	e000      	b.n	9984 <Adc_Ipw_StartNormalConversion+0xd0>
    9982:	2310      	movs	r3, #16
    9984:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    9988:	f89d 200f 	ldrb.w	r2, [sp, #15]
    998c:	4925      	ldr	r1, [pc, #148]	; (9a24 <Adc_Ipw_StartNormalConversion+0x170>)
    998e:	4613      	mov	r3, r2
    9990:	005b      	lsls	r3, r3, #1
    9992:	4413      	add	r3, r2
    9994:	005b      	lsls	r3, r3, #1
    9996:	440b      	add	r3, r1
    9998:	3304      	adds	r3, #4
    999a:	781b      	ldrb	r3, [r3, #0]
    999c:	2b00      	cmp	r3, #0
    999e:	d10b      	bne.n	99b8 <Adc_Ipw_StartNormalConversion+0x104>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    99a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99a4:	491f      	ldr	r1, [pc, #124]	; (9a24 <Adc_Ipw_StartNormalConversion+0x170>)
    99a6:	4613      	mov	r3, r2
    99a8:	005b      	lsls	r3, r3, #1
    99aa:	4413      	add	r3, r2
    99ac:	005b      	lsls	r3, r3, #1
    99ae:	440b      	add	r3, r1
    99b0:	3304      	adds	r3, #4
    99b2:	f89d 2012 	ldrb.w	r2, [sp, #18]
    99b6:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    99b8:	2300      	movs	r3, #0
    99ba:	f88d 301f 	strb.w	r3, [sp, #31]
    99be:	e00c      	b.n	99da <Adc_Ipw_StartNormalConversion+0x126>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    99c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    99c4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    99c8:	4611      	mov	r1, r2
    99ca:	4618      	mov	r0, r3
    99cc:	f7fe fec4 	bl	8758 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    99d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    99d4:	3301      	adds	r3, #1
    99d6:	f88d 301f 	strb.w	r3, [sp, #31]
    99da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99de:	4911      	ldr	r1, [pc, #68]	; (9a24 <Adc_Ipw_StartNormalConversion+0x170>)
    99e0:	4613      	mov	r3, r2
    99e2:	005b      	lsls	r3, r3, #1
    99e4:	4413      	add	r3, r2
    99e6:	005b      	lsls	r3, r3, #1
    99e8:	440b      	add	r3, r1
    99ea:	3304      	adds	r3, #4
    99ec:	781b      	ldrb	r3, [r3, #0]
    99ee:	f89d 201f 	ldrb.w	r2, [sp, #31]
    99f2:	429a      	cmp	r2, r3
    99f4:	d3e4      	bcc.n	99c0 <Adc_Ipw_StartNormalConversion+0x10c>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    99f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    99fa:	2101      	movs	r1, #1
    99fc:	4618      	mov	r0, r3
    99fe:	f7fe fd1d 	bl	843c <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9a02:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9a06:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9a0a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9a0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a12:	9300      	str	r3, [sp, #0]
    9a14:	4613      	mov	r3, r2
    9a16:	220f      	movs	r2, #15
    9a18:	f7ff fd8a 	bl	9530 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9a1c:	bf00      	nop
    9a1e:	b009      	add	sp, #36	; 0x24
    9a20:	f85d fb04 	ldr.w	pc, [sp], #4
    9a24:	1fff8d0c 	.word	0x1fff8d0c
    9a28:	1fff8cf0 	.word	0x1fff8cf0
    9a2c:	1fff8cf4 	.word	0x1fff8cf4

00009a30 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9a30:	b500      	push	{lr}
    9a32:	b085      	sub	sp, #20
    9a34:	4603      	mov	r3, r0
    9a36:	f88d 3007 	strb.w	r3, [sp, #7]
    9a3a:	460b      	mov	r3, r1
    9a3c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9a40:	4613      	mov	r3, r2
    9a42:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9a46:	2300      	movs	r3, #0
    9a48:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9a4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a50:	4a26      	ldr	r2, [pc, #152]	; (9aec <Adc_Ipw_StopCurrentConversion+0xbc>)
    9a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a56:	681a      	ldr	r2, [r3, #0]
    9a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a5c:	4413      	add	r3, r2
    9a5e:	7c1b      	ldrb	r3, [r3, #16]
    9a60:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9a64:	2300      	movs	r3, #0
    9a66:	f88d 300f 	strb.w	r3, [sp, #15]
    9a6a:	e014      	b.n	9a96 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9a6c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a70:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9a74:	2200      	movs	r2, #0
    9a76:	4618      	mov	r0, r3
    9a78:	f7fe fdaa 	bl	85d0 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9a7c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a84:	4611      	mov	r1, r2
    9a86:	4618      	mov	r0, r3
    9a88:	f7fe fe66 	bl	8758 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9a8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a90:	3301      	adds	r3, #1
    9a92:	f88d 300f 	strb.w	r3, [sp, #15]
    9a96:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9a9a:	4915      	ldr	r1, [pc, #84]	; (9af0 <Adc_Ipw_StopCurrentConversion+0xc0>)
    9a9c:	4613      	mov	r3, r2
    9a9e:	005b      	lsls	r3, r3, #1
    9aa0:	4413      	add	r3, r2
    9aa2:	005b      	lsls	r3, r3, #1
    9aa4:	440b      	add	r3, r1
    9aa6:	3304      	adds	r3, #4
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9aae:	429a      	cmp	r2, r3
    9ab0:	d3dc      	bcc.n	9a6c <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9ab2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9ab6:	490f      	ldr	r1, [pc, #60]	; (9af4 <Adc_Ipw_StopCurrentConversion+0xc4>)
    9ab8:	4613      	mov	r3, r2
    9aba:	005b      	lsls	r3, r3, #1
    9abc:	4413      	add	r3, r2
    9abe:	00db      	lsls	r3, r3, #3
    9ac0:	440b      	add	r3, r1
    9ac2:	3314      	adds	r3, #20
    9ac4:	2200      	movs	r2, #0
    9ac6:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    9ac8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9acc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9ad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ad4:	4618      	mov	r0, r3
    9ad6:	f7ff fc67 	bl	93a8 <Adc_Ipw_StopConversionCheckTimeout>
    9ada:	4603      	mov	r3, r0
    9adc:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9ae0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9ae4:	4618      	mov	r0, r3
    9ae6:	b005      	add	sp, #20
    9ae8:	f85d fb04 	ldr.w	pc, [sp], #4
    9aec:	1fff8cf0 	.word	0x1fff8cf0
    9af0:	1fff8d0c 	.word	0x1fff8d0c
    9af4:	1fff8cf4 	.word	0x1fff8cf4

00009af8 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9af8:	b500      	push	{lr}
    9afa:	b085      	sub	sp, #20
    9afc:	4603      	mov	r3, r0
    9afe:	f88d 3007 	strb.w	r3, [sp, #7]
    9b02:	460b      	mov	r3, r1
    9b04:	f88d 3006 	strb.w	r3, [sp, #6]
    9b08:	4613      	mov	r3, r2
    9b0a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9b0e:	2301      	movs	r3, #1
    9b10:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9b14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b18:	f88d 300f 	strb.w	r3, [sp, #15]
    9b1c:	e019      	b.n	9b52 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9b1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9b22:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b2a:	1ad3      	subs	r3, r2, r3
    9b2c:	b2db      	uxtb	r3, r3
    9b2e:	4619      	mov	r1, r3
    9b30:	f7fe fdf8 	bl	8724 <Adc_Ip_GetConvCompleteFlag>
    9b34:	4603      	mov	r3, r0
    9b36:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9b3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9b3e:	f083 0301 	eor.w	r3, r3, #1
    9b42:	b2db      	uxtb	r3, r3
    9b44:	2b00      	cmp	r3, #0
    9b46:	d10b      	bne.n	9b60 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9b48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b4c:	3301      	adds	r3, #1
    9b4e:	f88d 300f 	strb.w	r3, [sp, #15]
    9b52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b56:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b5a:	429a      	cmp	r2, r3
    9b5c:	d3df      	bcc.n	9b1e <Adc_Ipw_CheckValidConversion+0x26>
    9b5e:	e000      	b.n	9b62 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9b60:	bf00      	nop
        }
    }

    return ValidConversion;
    9b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9b66:	4618      	mov	r0, r3
    9b68:	b005      	add	sp, #20
    9b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00009b6e <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9b6e:	b500      	push	{lr}
    9b70:	b089      	sub	sp, #36	; 0x24
    9b72:	9102      	str	r1, [sp, #8]
    9b74:	9201      	str	r2, [sp, #4]
    9b76:	461a      	mov	r2, r3
    9b78:	4603      	mov	r3, r0
    9b7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9b7e:	4613      	mov	r3, r2
    9b80:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9b84:	2300      	movs	r3, #0
    9b86:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9b8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b8e:	4a35      	ldr	r2, [pc, #212]	; (9c64 <Adc_Ipw_ReadGroup+0xf6>)
    9b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b94:	68da      	ldr	r2, [r3, #12]
    9b96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b9a:	005b      	lsls	r3, r3, #1
    9b9c:	4413      	add	r3, r2
    9b9e:	881b      	ldrh	r3, [r3, #0]
    9ba0:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9ba4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ba8:	4a2e      	ldr	r2, [pc, #184]	; (9c64 <Adc_Ipw_ReadGroup+0xf6>)
    9baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bae:	6859      	ldr	r1, [r3, #4]
    9bb0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9bb4:	4613      	mov	r3, r2
    9bb6:	00db      	lsls	r3, r3, #3
    9bb8:	1a9b      	subs	r3, r3, r2
    9bba:	00db      	lsls	r3, r3, #3
    9bbc:	440b      	add	r3, r1
    9bbe:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9bc0:	9b06      	ldr	r3, [sp, #24]
    9bc2:	789b      	ldrb	r3, [r3, #2]
    9bc4:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9bc8:	9b06      	ldr	r3, [sp, #24]
    9bca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9bce:	2b01      	cmp	r3, #1
    9bd0:	d128      	bne.n	9c24 <Adc_Ipw_ReadGroup+0xb6>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9bd2:	9b06      	ldr	r3, [sp, #24]
    9bd4:	68db      	ldr	r3, [r3, #12]
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d115      	bne.n	9c06 <Adc_Ipw_ReadGroup+0x98>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9bda:	9b06      	ldr	r3, [sp, #24]
    9bdc:	695b      	ldr	r3, [r3, #20]
    9bde:	2b00      	cmp	r3, #0
    9be0:	d111      	bne.n	9c06 <Adc_Ipw_ReadGroup+0x98>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9be2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9be6:	4920      	ldr	r1, [pc, #128]	; (9c68 <Adc_Ipw_ReadGroup+0xfa>)
    9be8:	4613      	mov	r3, r2
    9bea:	005b      	lsls	r3, r3, #1
    9bec:	4413      	add	r3, r2
    9bee:	005b      	lsls	r3, r3, #1
    9bf0:	440b      	add	r3, r1
    9bf2:	3302      	adds	r3, #2
    9bf4:	881b      	ldrh	r3, [r3, #0]
    9bf6:	b29b      	uxth	r3, r3
    9bf8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9bfc:	429a      	cmp	r2, r3
    9bfe:	d002      	beq.n	9c06 <Adc_Ipw_ReadGroup+0x98>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9c00:	2301      	movs	r3, #1
    9c02:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9c06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d124      	bne.n	9c58 <Adc_Ipw_ReadGroup+0xea>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9c0e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9c12:	9a01      	ldr	r2, [sp, #4]
    9c14:	9902      	ldr	r1, [sp, #8]
    9c16:	9806      	ldr	r0, [sp, #24]
    9c18:	f7ff f8e8 	bl	8dec <Adc_Ipw_ReadGroupNoInt>
    9c1c:	4603      	mov	r3, r0
    9c1e:	f88d 301f 	strb.w	r3, [sp, #31]
    9c22:	e019      	b.n	9c58 <Adc_Ipw_ReadGroup+0xea>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9c24:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c28:	4910      	ldr	r1, [pc, #64]	; (9c6c <Adc_Ipw_ReadGroup+0xfe>)
    9c2a:	4613      	mov	r3, r2
    9c2c:	005b      	lsls	r3, r3, #1
    9c2e:	4413      	add	r3, r2
    9c30:	00db      	lsls	r3, r3, #3
    9c32:	440b      	add	r3, r1
    9c34:	681b      	ldr	r3, [r3, #0]
    9c36:	2b01      	cmp	r3, #1
    9c38:	d102      	bne.n	9c40 <Adc_Ipw_ReadGroup+0xd2>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9c3a:	2301      	movs	r3, #1
    9c3c:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9c40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9c44:	2b00      	cmp	r3, #0
    9c46:	d107      	bne.n	9c58 <Adc_Ipw_ReadGroup+0xea>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9c48:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9c4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c50:	9902      	ldr	r1, [sp, #8]
    9c52:	4618      	mov	r0, r3
    9c54:	f7ff f912 	bl	8e7c <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9c58:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9c5c:	4618      	mov	r0, r3
    9c5e:	b009      	add	sp, #36	; 0x24
    9c60:	f85d fb04 	ldr.w	pc, [sp], #4
    9c64:	1fff8cf0 	.word	0x1fff8cf0
    9c68:	1fff8d0c 	.word	0x1fff8d0c
    9c6c:	1fff8cf4 	.word	0x1fff8cf4

00009c70 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9c70:	b500      	push	{lr}
    9c72:	b085      	sub	sp, #20
    9c74:	4603      	mov	r3, r0
    9c76:	9100      	str	r1, [sp, #0]
    9c78:	f88d 3007 	strb.w	r3, [sp, #7]
    9c7c:	4613      	mov	r3, r2
    9c7e:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9c82:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c86:	4a0e      	ldr	r2, [pc, #56]	; (9cc0 <Adc_Ipw_Calibrate+0x50>)
    9c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8c:	681a      	ldr	r2, [r3, #0]
    9c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c92:	4413      	add	r3, r2
    9c94:	7c1b      	ldrb	r3, [r3, #16]
    9c96:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9c9a:	9b00      	ldr	r3, [sp, #0]
    9c9c:	2200      	movs	r2, #0
    9c9e:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9ca0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ca4:	4618      	mov	r0, r3
    9ca6:	f7fe fd6f 	bl	8788 <Adc_Ip_DoCalibration>
    9caa:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9cac:	9b02      	ldr	r3, [sp, #8]
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d002      	beq.n	9cb8 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9cb2:	9b00      	ldr	r3, [sp, #0]
    9cb4:	2201      	movs	r2, #1
    9cb6:	701a      	strb	r2, [r3, #0]
    }
}
    9cb8:	bf00      	nop
    9cba:	b005      	add	sp, #20
    9cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    9cc0:	1fff8cf0 	.word	0x1fff8cf0

00009cc4 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9cc4:	2300      	movs	r3, #0
}
    9cc6:	4618      	mov	r0, r3
    9cc8:	4770      	bx	lr
    9cca:	bf00      	nop

00009ccc <Adc_Ipw_CallNotification>:
* @return         void
*
*/
static inline void Adc_Ipw_CallNotification(Adc_GroupType Group,
                                            uint8 CoreId)
{
    9ccc:	b500      	push	{lr}
    9cce:	b085      	sub	sp, #20
    9cd0:	4603      	mov	r3, r0
    9cd2:	460a      	mov	r2, r1
    9cd4:	f8ad 3006 	strh.w	r3, [sp, #6]
    9cd8:	4613      	mov	r3, r2
    9cda:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9cde:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9ce2:	4a1d      	ldr	r2, [pc, #116]	; (9d58 <Adc_Ipw_CallNotification+0x8c>)
    9ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce8:	68da      	ldr	r2, [r3, #12]
    9cea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9cee:	005b      	lsls	r3, r3, #1
    9cf0:	4413      	add	r3, r2
    9cf2:	881b      	ldrh	r3, [r3, #0]
    9cf4:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* SWS_Adc_00080, SWS_Adc_00083 */
    if ((ADC_NOTIFICATION_ENABLED == Adc_axGroupStatus[Group].Notification) && \
    9cf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9cfc:	4917      	ldr	r1, [pc, #92]	; (9d5c <Adc_Ipw_CallNotification+0x90>)
    9cfe:	4613      	mov	r3, r2
    9d00:	005b      	lsls	r3, r3, #1
    9d02:	4413      	add	r3, r2
    9d04:	00db      	lsls	r3, r3, #3
    9d06:	440b      	add	r3, r1
    9d08:	3308      	adds	r3, #8
    9d0a:	681b      	ldr	r3, [r3, #0]
    9d0c:	2b01      	cmp	r3, #1
    9d0e:	d11e      	bne.n	9d4e <Adc_Ipw_CallNotification+0x82>
        (NULL_PTR != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Notification)
    9d10:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d14:	4a10      	ldr	r2, [pc, #64]	; (9d58 <Adc_Ipw_CallNotification+0x8c>)
    9d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d1a:	6859      	ldr	r1, [r3, #4]
    9d1c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9d20:	4613      	mov	r3, r2
    9d22:	00db      	lsls	r3, r3, #3
    9d24:	1a9b      	subs	r3, r3, r2
    9d26:	00db      	lsls	r3, r3, #3
    9d28:	440b      	add	r3, r1
    9d2a:	699b      	ldr	r3, [r3, #24]
    if ((ADC_NOTIFICATION_ENABLED == Adc_axGroupStatus[Group].Notification) && \
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	d00e      	beq.n	9d4e <Adc_Ipw_CallNotification+0x82>
       )
    {
        /* Execute notification function */
        Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Notification();
    9d30:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d34:	4a08      	ldr	r2, [pc, #32]	; (9d58 <Adc_Ipw_CallNotification+0x8c>)
    9d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d3a:	6859      	ldr	r1, [r3, #4]
    9d3c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9d40:	4613      	mov	r3, r2
    9d42:	00db      	lsls	r3, r3, #3
    9d44:	1a9b      	subs	r3, r3, r2
    9d46:	00db      	lsls	r3, r3, #3
    9d48:	440b      	add	r3, r1
    9d4a:	699b      	ldr	r3, [r3, #24]
    9d4c:	4798      	blx	r3
    }
}
    9d4e:	bf00      	nop
    9d50:	b005      	add	sp, #20
    9d52:	f85d fb04 	ldr.w	pc, [sp], #4
    9d56:	bf00      	nop
    9d58:	1fff8cf0 	.word	0x1fff8cf0
    9d5c:	1fff8cf4 	.word	0x1fff8cf4

00009d60 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9d60:	b500      	push	{lr}
    9d62:	b083      	sub	sp, #12
    9d64:	4603      	mov	r3, r0
    9d66:	460a      	mov	r2, r1
    9d68:	f88d 3007 	strb.w	r3, [sp, #7]
    9d6c:	4613      	mov	r3, r2
    9d6e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d76:	2100      	movs	r1, #0
    9d78:	4618      	mov	r0, r3
    9d7a:	f7fe ff5f 	bl	8c3c <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9d82:	490b      	ldr	r1, [pc, #44]	; (9db0 <Adc_Ipw_UpdateQueue+0x50>)
    9d84:	4613      	mov	r3, r2
    9d86:	005b      	lsls	r3, r3, #1
    9d88:	4413      	add	r3, r2
    9d8a:	005b      	lsls	r3, r3, #1
    9d8c:	440b      	add	r3, r1
    9d8e:	881b      	ldrh	r3, [r3, #0]
    9d90:	b29b      	uxth	r3, r3
    9d92:	2b00      	cmp	r3, #0
    9d94:	d007      	beq.n	9da6 <Adc_Ipw_UpdateQueue+0x46>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9d96:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9d9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d9e:	4611      	mov	r1, r2
    9da0:	4618      	mov	r0, r3
    9da2:	f7ff fd87 	bl	98b4 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9da6:	bf00      	nop
    9da8:	b003      	add	sp, #12
    9daa:	f85d fb04 	ldr.w	pc, [sp], #4
    9dae:	bf00      	nop
    9db0:	1fff8d0c 	.word	0x1fff8d0c

00009db4 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9db4:	b510      	push	{r4, lr}
    9db6:	b08a      	sub	sp, #40	; 0x28
    9db8:	4604      	mov	r4, r0
    9dba:	4608      	mov	r0, r1
    9dbc:	4611      	mov	r1, r2
    9dbe:	461a      	mov	r2, r3
    9dc0:	4623      	mov	r3, r4
    9dc2:	f88d 300f 	strb.w	r3, [sp, #15]
    9dc6:	4603      	mov	r3, r0
    9dc8:	f8ad 300c 	strh.w	r3, [sp, #12]
    9dcc:	460b      	mov	r3, r1
    9dce:	f8ad 300a 	strh.w	r3, [sp, #10]
    9dd2:	4613      	mov	r3, r2
    9dd4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9dd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ddc:	4a69      	ldr	r2, [pc, #420]	; (9f84 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9de2:	68da      	ldr	r2, [r3, #12]
    9de4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9de8:	005b      	lsls	r3, r3, #1
    9dea:	4413      	add	r3, r2
    9dec:	881b      	ldrh	r3, [r3, #0]
    9dee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9df2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9df6:	4964      	ldr	r1, [pc, #400]	; (9f88 <Adc_Ipw_CheckConversionChannels+0x1d4>)
    9df8:	4613      	mov	r3, r2
    9dfa:	005b      	lsls	r3, r3, #1
    9dfc:	4413      	add	r3, r2
    9dfe:	00db      	lsls	r3, r3, #3
    9e00:	440b      	add	r3, r1
    9e02:	3314      	adds	r3, #20
    9e04:	781b      	ldrb	r3, [r3, #0]
    9e06:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9e0a:	2300      	movs	r3, #0
    9e0c:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9e0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e12:	4a5c      	ldr	r2, [pc, #368]	; (9f84 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e18:	681a      	ldr	r2, [r3, #0]
    9e1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e1e:	4413      	add	r3, r2
    9e20:	7c1b      	ldrb	r3, [r3, #16]
    9e22:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9e26:	2300      	movs	r3, #0
    9e28:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9e2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e30:	4a54      	ldr	r2, [pc, #336]	; (9f84 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e36:	681b      	ldr	r3, [r3, #0]
    9e38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e40:	695b      	ldr	r3, [r3, #20]
    9e42:	4618      	mov	r0, r3
    9e44:	f7ff fb6a 	bl	951c <Adc_Ipw_CalculateNumsBitShift>
    9e48:	4603      	mov	r3, r0
    9e4a:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9e4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e52:	4a4c      	ldr	r2, [pc, #304]	; (9f84 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e58:	6859      	ldr	r1, [r3, #4]
    9e5a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9e5e:	4613      	mov	r3, r2
    9e60:	00db      	lsls	r3, r3, #3
    9e62:	1a9b      	subs	r3, r3, r2
    9e64:	00db      	lsls	r3, r3, #3
    9e66:	440b      	add	r3, r1
    9e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9e6c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9e70:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e74:	4a43      	ldr	r2, [pc, #268]	; (9f84 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e7a:	6859      	ldr	r1, [r3, #4]
    9e7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9e80:	4613      	mov	r3, r2
    9e82:	00db      	lsls	r3, r3, #3
    9e84:	1a9b      	subs	r3, r3, r2
    9e86:	00db      	lsls	r3, r3, #3
    9e88:	440b      	add	r3, r1
    9e8a:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9e8c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9e90:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9e94:	429a      	cmp	r2, r3
    9e96:	d870      	bhi.n	9f7a <Adc_Ipw_CheckConversionChannels+0x1c6>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9e98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9e9c:	f003 030f 	and.w	r3, r3, #15
    9ea0:	b2db      	uxtb	r3, r3
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	d104      	bne.n	9eb0 <Adc_Ipw_CheckConversionChannels+0xfc>
    9ea6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9eaa:	3b10      	subs	r3, #16
    9eac:	b2db      	uxtb	r3, r3
    9eae:	e004      	b.n	9eba <Adc_Ipw_CheckConversionChannels+0x106>
    9eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9eb4:	f023 030f 	bic.w	r3, r3, #15
    9eb8:	b2db      	uxtb	r3, r3
    9eba:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9ebe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9ec2:	4931      	ldr	r1, [pc, #196]	; (9f88 <Adc_Ipw_CheckConversionChannels+0x1d4>)
    9ec4:	4613      	mov	r3, r2
    9ec6:	005b      	lsls	r3, r3, #1
    9ec8:	4413      	add	r3, r2
    9eca:	00db      	lsls	r3, r3, #3
    9ecc:	440b      	add	r3, r1
    9ece:	3310      	adds	r3, #16
    9ed0:	6819      	ldr	r1, [r3, #0]
    9ed2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9ed6:	482c      	ldr	r0, [pc, #176]	; (9f88 <Adc_Ipw_CheckConversionChannels+0x1d4>)
    9ed8:	4613      	mov	r3, r2
    9eda:	005b      	lsls	r3, r3, #1
    9edc:	4413      	add	r3, r2
    9ede:	00db      	lsls	r3, r3, #3
    9ee0:	4403      	add	r3, r0
    9ee2:	330c      	adds	r3, #12
    9ee4:	881b      	ldrh	r3, [r3, #0]
    9ee6:	b29b      	uxth	r3, r3
    9ee8:	005b      	lsls	r3, r3, #1
    9eea:	440b      	add	r3, r1
    9eec:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9eee:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9ef2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9ef6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9efa:	4618      	mov	r0, r3
    9efc:	f7ff fdfc 	bl	9af8 <Adc_Ipw_CheckValidConversion>
    9f00:	4603      	mov	r3, r0
    9f02:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9f06:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d032      	beq.n	9f74 <Adc_Ipw_CheckConversionChannels+0x1c0>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9f0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f12:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9f16:	e026      	b.n	9f66 <Adc_Ipw_CheckConversionChannels+0x1b2>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    9f18:	f89d 001b 	ldrb.w	r0, [sp, #27]
    9f1c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9f20:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f24:	1ad3      	subs	r3, r2, r3
    9f26:	b2db      	uxtb	r3, r3
    9f28:	4619      	mov	r1, r3
    9f2a:	f7fe fc15 	bl	8758 <Adc_Ip_GetConvData>
    9f2e:	4603      	mov	r3, r0
    9f30:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    9f34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9f38:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9f3c:	fa02 f303 	lsl.w	r3, r2, r3
    9f40:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    9f44:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9f48:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    9f4c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9f50:	9300      	str	r3, [sp, #0]
    9f52:	460b      	mov	r3, r1
    9f54:	9907      	ldr	r1, [sp, #28]
    9f56:	9805      	ldr	r0, [sp, #20]
    9f58:	f000 fa0e 	bl	a378 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    9f5c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9f60:	3301      	adds	r3, #1
    9f62:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9f66:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9f6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9f6e:	429a      	cmp	r2, r3
    9f70:	d3d2      	bcc.n	9f18 <Adc_Ipw_CheckConversionChannels+0x164>
    9f72:	e002      	b.n	9f7a <Adc_Ipw_CheckConversionChannels+0x1c6>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    9f74:	2301      	movs	r3, #1
    9f76:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    9f7a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    9f7e:	4618      	mov	r0, r3
    9f80:	b00a      	add	sp, #40	; 0x28
    9f82:	bd10      	pop	{r4, pc}
    9f84:	1fff8cf0 	.word	0x1fff8cf0
    9f88:	1fff8cf4 	.word	0x1fff8cf4

00009f8c <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9f8c:	b500      	push	{lr}
    9f8e:	b087      	sub	sp, #28
    9f90:	4603      	mov	r3, r0
    9f92:	f88d 300f 	strb.w	r3, [sp, #15]
    9f96:	460b      	mov	r3, r1
    9f98:	f8ad 300c 	strh.w	r3, [sp, #12]
    9f9c:	4613      	mov	r3, r2
    9f9e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9fa2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fa6:	4a33      	ldr	r2, [pc, #204]	; (a074 <Adc_Ipw_RestartConversion+0xe8>)
    9fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fac:	68da      	ldr	r2, [r3, #12]
    9fae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9fb2:	005b      	lsls	r3, r3, #1
    9fb4:	4413      	add	r3, r2
    9fb6:	881b      	ldrh	r3, [r3, #0]
    9fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9fbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fc0:	4a2c      	ldr	r2, [pc, #176]	; (a074 <Adc_Ipw_RestartConversion+0xe8>)
    9fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc6:	681a      	ldr	r2, [r3, #0]
    9fc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9fcc:	4413      	add	r3, r2
    9fce:	7c1b      	ldrb	r3, [r3, #16]
    9fd0:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9fd4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fd8:	4a26      	ldr	r2, [pc, #152]	; (a074 <Adc_Ipw_RestartConversion+0xe8>)
    9fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fde:	6859      	ldr	r1, [r3, #4]
    9fe0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9fe4:	4613      	mov	r3, r2
    9fe6:	00db      	lsls	r3, r3, #3
    9fe8:	1a9b      	subs	r3, r3, r2
    9fea:	00db      	lsls	r3, r3, #3
    9fec:	440b      	add	r3, r1
    9fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9ff2:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    9ff6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9ffa:	2b0f      	cmp	r3, #15
    9ffc:	d805      	bhi.n	a00a <Adc_Ipw_RestartConversion+0x7e>
    9ffe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a002:	f003 030f 	and.w	r3, r3, #15
    a006:	b2db      	uxtb	r3, r3
    a008:	e000      	b.n	a00c <Adc_Ipw_RestartConversion+0x80>
    a00a:	2310      	movs	r3, #16
    a00c:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    a010:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a014:	2b10      	cmp	r3, #16
    a016:	d811      	bhi.n	a03c <Adc_Ipw_RestartConversion+0xb0>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    a018:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a01c:	4916      	ldr	r1, [pc, #88]	; (a078 <Adc_Ipw_RestartConversion+0xec>)
    a01e:	4613      	mov	r3, r2
    a020:	005b      	lsls	r3, r3, #1
    a022:	4413      	add	r3, r2
    a024:	00db      	lsls	r3, r3, #3
    a026:	440b      	add	r3, r1
    a028:	3314      	adds	r3, #20
    a02a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a02e:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a030:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a034:	4618      	mov	r0, r3
    a036:	f000 fc6b 	bl	a910 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    a03a:	e017      	b.n	a06c <Adc_Ipw_RestartConversion+0xe0>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a03c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a040:	490d      	ldr	r1, [pc, #52]	; (a078 <Adc_Ipw_RestartConversion+0xec>)
    a042:	4613      	mov	r3, r2
    a044:	005b      	lsls	r3, r3, #1
    a046:	4413      	add	r3, r2
    a048:	00db      	lsls	r3, r3, #3
    a04a:	440b      	add	r3, r1
    a04c:	3314      	adds	r3, #20
    a04e:	2200      	movs	r2, #0
    a050:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a052:	f89d 2013 	ldrb.w	r2, [sp, #19]
    a056:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a05a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a05e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a062:	9300      	str	r3, [sp, #0]
    a064:	4613      	mov	r3, r2
    a066:	220f      	movs	r2, #15
    a068:	f7ff fa62 	bl	9530 <Adc_Ipw_ConfigureConversion>
}
    a06c:	bf00      	nop
    a06e:	b007      	add	sp, #28
    a070:	f85d fb04 	ldr.w	pc, [sp], #4
    a074:	1fff8cf0 	.word	0x1fff8cf0
    a078:	1fff8cf4 	.word	0x1fff8cf4

0000a07c <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    a07c:	b084      	sub	sp, #16
    a07e:	4603      	mov	r3, r0
    a080:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    a084:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a088:	4907      	ldr	r1, [pc, #28]	; (a0a8 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    a08a:	4613      	mov	r3, r2
    a08c:	005b      	lsls	r3, r3, #1
    a08e:	4413      	add	r3, r2
    a090:	00db      	lsls	r3, r3, #3
    a092:	440b      	add	r3, r1
    a094:	330c      	adds	r3, #12
    a096:	881b      	ldrh	r3, [r3, #0]
    a098:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    a09c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a0a0:	4618      	mov	r0, r3
    a0a2:	b004      	add	sp, #16
    a0a4:	4770      	bx	lr
    a0a6:	bf00      	nop
    a0a8:	1fff8cf4 	.word	0x1fff8cf4

0000a0ac <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    a0ac:	b510      	push	{r4, lr}
    a0ae:	b084      	sub	sp, #16
    a0b0:	4604      	mov	r4, r0
    a0b2:	4608      	mov	r0, r1
    a0b4:	4611      	mov	r1, r2
    a0b6:	461a      	mov	r2, r3
    a0b8:	4623      	mov	r3, r4
    a0ba:	f88d 3007 	strb.w	r3, [sp, #7]
    a0be:	4603      	mov	r3, r0
    a0c0:	f8ad 3004 	strh.w	r3, [sp, #4]
    a0c4:	460b      	mov	r3, r1
    a0c6:	f8ad 3002 	strh.w	r3, [sp, #2]
    a0ca:	4613      	mov	r3, r2
    a0cc:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0d4:	4a55      	ldr	r2, [pc, #340]	; (a22c <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0da:	68da      	ldr	r2, [r3, #12]
    a0dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a0e0:	005b      	lsls	r3, r3, #1
    a0e2:	4413      	add	r3, r2
    a0e4:	881b      	ldrh	r3, [r3, #0]
    a0e6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    a0ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a0ee:	4950      	ldr	r1, [pc, #320]	; (a230 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a0f0:	4613      	mov	r3, r2
    a0f2:	005b      	lsls	r3, r3, #1
    a0f4:	4413      	add	r3, r2
    a0f6:	00db      	lsls	r3, r3, #3
    a0f8:	440b      	add	r3, r1
    a0fa:	3304      	adds	r3, #4
    a0fc:	2201      	movs	r2, #1
    a0fe:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a100:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a104:	494a      	ldr	r1, [pc, #296]	; (a230 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a106:	4613      	mov	r3, r2
    a108:	005b      	lsls	r3, r3, #1
    a10a:	4413      	add	r3, r2
    a10c:	00db      	lsls	r3, r3, #3
    a10e:	440b      	add	r3, r1
    a110:	681b      	ldr	r3, [r3, #0]
    a112:	2b01      	cmp	r3, #1
    a114:	d109      	bne.n	a12a <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    a116:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a11a:	4945      	ldr	r1, [pc, #276]	; (a230 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a11c:	4613      	mov	r3, r2
    a11e:	005b      	lsls	r3, r3, #1
    a120:	4413      	add	r3, r2
    a122:	00db      	lsls	r3, r3, #3
    a124:	440b      	add	r3, r1
    a126:	2202      	movs	r2, #2
    a128:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    a12a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a12e:	4618      	mov	r0, r3
    a130:	f7ff ffa4 	bl	a07c <Adc_Ipw_GetCurrentSampleCount>
    a134:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    a136:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a13a:	9a02      	ldr	r2, [sp, #8]
    a13c:	429a      	cmp	r2, r3
    a13e:	d360      	bcc.n	a202 <Adc_Ipw_UpdateSoftwareGroupState+0x156>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    a140:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a144:	493a      	ldr	r1, [pc, #232]	; (a230 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a146:	4613      	mov	r3, r2
    a148:	005b      	lsls	r3, r3, #1
    a14a:	4413      	add	r3, r2
    a14c:	00db      	lsls	r3, r3, #3
    a14e:	440b      	add	r3, r1
    a150:	2203      	movs	r2, #3
    a152:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a154:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a158:	4a34      	ldr	r2, [pc, #208]	; (a22c <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15e:	6859      	ldr	r1, [r3, #4]
    a160:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a164:	4613      	mov	r3, r2
    a166:	00db      	lsls	r3, r3, #3
    a168:	1a9b      	subs	r3, r3, r2
    a16a:	00db      	lsls	r3, r3, #3
    a16c:	440b      	add	r3, r1
    a16e:	69db      	ldr	r3, [r3, #28]
    a170:	2b00      	cmp	r3, #0
    a172:	d118      	bne.n	a1a6 <Adc_Ipw_UpdateSoftwareGroupState+0xfa>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    a174:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a178:	4a2c      	ldr	r2, [pc, #176]	; (a22c <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a17e:	6859      	ldr	r1, [r3, #4]
    a180:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a184:	4613      	mov	r3, r2
    a186:	00db      	lsls	r3, r3, #3
    a188:	1a9b      	subs	r3, r3, r2
    a18a:	00db      	lsls	r3, r3, #3
    a18c:	440b      	add	r3, r1
    a18e:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a190:	2b01      	cmp	r3, #1
    a192:	d108      	bne.n	a1a6 <Adc_Ipw_UpdateSoftwareGroupState+0xfa>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a194:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a198:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a19c:	4611      	mov	r1, r2
    a19e:	4618      	mov	r0, r3
    a1a0:	f7ff fdde 	bl	9d60 <Adc_Ipw_UpdateQueue>
    a1a4:	e036      	b.n	a214 <Adc_Ipw_UpdateSoftwareGroupState+0x168>
        }
        else
        {
            /* ADC_ACCESS_MODE_STREAMING && ADC_STREAM_BUFFER_CIRCULAR */
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a1a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1aa:	4a20      	ldr	r2, [pc, #128]	; (a22c <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1b0:	6859      	ldr	r1, [r3, #4]
    a1b2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a1b6:	4613      	mov	r3, r2
    a1b8:	00db      	lsls	r3, r3, #3
    a1ba:	1a9b      	subs	r3, r3, r2
    a1bc:	00db      	lsls	r3, r3, #3
    a1be:	440b      	add	r3, r1
    a1c0:	689b      	ldr	r3, [r3, #8]
    a1c2:	2b01      	cmp	r3, #1
    a1c4:	d114      	bne.n	a1f0 <Adc_Ipw_UpdateSoftwareGroupState+0x144>
            {
                /* Restart new continuous conversion */
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a1c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a1ca:	4919      	ldr	r1, [pc, #100]	; (a230 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a1cc:	4613      	mov	r3, r2
    a1ce:	005b      	lsls	r3, r3, #1
    a1d0:	4413      	add	r3, r2
    a1d2:	00db      	lsls	r3, r3, #3
    a1d4:	440b      	add	r3, r1
    a1d6:	330c      	adds	r3, #12
    a1d8:	2200      	movs	r2, #0
    a1da:	801a      	strh	r2, [r3, #0]
                        LocTransferList[0].Value = (uint32)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[0U]));
                        (void)Dma_Ip_SetLogicChannelTransferList(AdcDmaLogicChId, LocTransferList, 1U);
                    }
                }
#endif /*ADC_DMA_SUPPORTED*/
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a1dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a1e0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a1e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1e8:	4618      	mov	r0, r3
    a1ea:	f7ff fecf 	bl	9f8c <Adc_Ipw_RestartConversion>
    a1ee:	e011      	b.n	a214 <Adc_Ipw_UpdateSoftwareGroupState+0x168>
            }
            else
            {
                /* Update queue and execute new request from queue if available */
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a1f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a1f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1f8:	4611      	mov	r1, r2
    a1fa:	4618      	mov	r0, r3
    a1fc:	f7ff fdb0 	bl	9d60 <Adc_Ipw_UpdateQueue>
    a200:	e008      	b.n	a214 <Adc_Ipw_UpdateSoftwareGroupState+0x168>
        }
    }
    else
    {
        /* Need to restart conversion until buffer is full */
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a202:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a206:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a20a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a20e:	4618      	mov	r0, r3
    a210:	f7ff febc 	bl	9f8c <Adc_Ipw_RestartConversion>
    }

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
    a214:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a218:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a21c:	4611      	mov	r1, r2
    a21e:	4618      	mov	r0, r3
    a220:	f7ff fd54 	bl	9ccc <Adc_Ipw_CallNotification>
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a224:	bf00      	nop
    a226:	b004      	add	sp, #16
    a228:	bd10      	pop	{r4, pc}
    a22a:	bf00      	nop
    a22c:	1fff8cf0 	.word	0x1fff8cf0
    a230:	1fff8cf4 	.word	0x1fff8cf4

0000a234 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a234:	b510      	push	{r4, lr}
    a236:	b088      	sub	sp, #32
    a238:	4604      	mov	r4, r0
    a23a:	4608      	mov	r0, r1
    a23c:	4611      	mov	r1, r2
    a23e:	461a      	mov	r2, r3
    a240:	4623      	mov	r3, r4
    a242:	f88d 300f 	strb.w	r3, [sp, #15]
    a246:	4603      	mov	r3, r0
    a248:	f8ad 300c 	strh.w	r3, [sp, #12]
    a24c:	460b      	mov	r3, r1
    a24e:	f88d 300e 	strb.w	r3, [sp, #14]
    a252:	4613      	mov	r3, r2
    a254:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a258:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a25c:	4a44      	ldr	r2, [pc, #272]	; (a370 <Adc_Ipw_EndConversion+0x13c>)
    a25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a262:	68da      	ldr	r2, [r3, #12]
    a264:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a268:	005b      	lsls	r3, r3, #1
    a26a:	4413      	add	r3, r2
    a26c:	881b      	ldrh	r3, [r3, #0]
    a26e:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a272:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a276:	4a3e      	ldr	r2, [pc, #248]	; (a370 <Adc_Ipw_EndConversion+0x13c>)
    a278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a27c:	6859      	ldr	r1, [r3, #4]
    a27e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    a282:	4613      	mov	r3, r2
    a284:	00db      	lsls	r3, r3, #3
    a286:	1a9b      	subs	r3, r3, r2
    a288:	00db      	lsls	r3, r3, #3
    a28a:	440b      	add	r3, r1
    a28c:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a28e:	9b06      	ldr	r3, [sp, #24]
    a290:	8c1a      	ldrh	r2, [r3, #32]
    a292:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a296:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a29a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a29e:	f7ff fd89 	bl	9db4 <Adc_Ipw_CheckConversionChannels>
    a2a2:	4603      	mov	r3, r0
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	d160      	bne.n	a36a <Adc_Ipw_EndConversion+0x136>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a2a8:	9b06      	ldr	r3, [sp, #24]
    a2aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a2ae:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a2b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2b6:	492f      	ldr	r1, [pc, #188]	; (a374 <Adc_Ipw_EndConversion+0x140>)
    a2b8:	4613      	mov	r3, r2
    a2ba:	005b      	lsls	r3, r3, #1
    a2bc:	4413      	add	r3, r2
    a2be:	00db      	lsls	r3, r3, #3
    a2c0:	440b      	add	r3, r1
    a2c2:	3314      	adds	r3, #20
    a2c4:	781b      	ldrb	r3, [r3, #0]
    a2c6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a2ca:	429a      	cmp	r2, r3
    a2cc:	d929      	bls.n	a322 <Adc_Ipw_EndConversion+0xee>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a2ce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2d2:	4928      	ldr	r1, [pc, #160]	; (a374 <Adc_Ipw_EndConversion+0x140>)
    a2d4:	4613      	mov	r3, r2
    a2d6:	005b      	lsls	r3, r3, #1
    a2d8:	4413      	add	r3, r2
    a2da:	00db      	lsls	r3, r3, #3
    a2dc:	440b      	add	r3, r1
    a2de:	3314      	adds	r3, #20
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a2e6:	1ad3      	subs	r3, r2, r3
    a2e8:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a2ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a2f0:	2b0f      	cmp	r3, #15
    a2f2:	d805      	bhi.n	a300 <Adc_Ipw_EndConversion+0xcc>
    a2f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a2f8:	f003 030f 	and.w	r3, r3, #15
    a2fc:	b2db      	uxtb	r3, r3
    a2fe:	e000      	b.n	a302 <Adc_Ipw_EndConversion+0xce>
    a300:	2310      	movs	r3, #16
    a302:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a306:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a30a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a30e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a312:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a316:	9300      	str	r3, [sp, #0]
    a318:	4613      	mov	r3, r2
    a31a:	220f      	movs	r2, #15
    a31c:	f7ff f908 	bl	9530 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a320:	e023      	b.n	a36a <Adc_Ipw_EndConversion+0x136>
                Adc_axGroupStatus[Group].ResultIndex++;
    a322:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a326:	4913      	ldr	r1, [pc, #76]	; (a374 <Adc_Ipw_EndConversion+0x140>)
    a328:	4613      	mov	r3, r2
    a32a:	005b      	lsls	r3, r3, #1
    a32c:	4413      	add	r3, r2
    a32e:	00db      	lsls	r3, r3, #3
    a330:	440b      	add	r3, r1
    a332:	330c      	adds	r3, #12
    a334:	881b      	ldrh	r3, [r3, #0]
    a336:	b29b      	uxth	r3, r3
    a338:	3301      	adds	r3, #1
    a33a:	b298      	uxth	r0, r3
    a33c:	490d      	ldr	r1, [pc, #52]	; (a374 <Adc_Ipw_EndConversion+0x140>)
    a33e:	4613      	mov	r3, r2
    a340:	005b      	lsls	r3, r3, #1
    a342:	4413      	add	r3, r2
    a344:	00db      	lsls	r3, r3, #3
    a346:	440b      	add	r3, r1
    a348:	330c      	adds	r3, #12
    a34a:	4602      	mov	r2, r0
    a34c:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a34e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a352:	2b00      	cmp	r3, #0
    a354:	d009      	beq.n	a36a <Adc_Ipw_EndConversion+0x136>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a356:	9b06      	ldr	r3, [sp, #24]
    a358:	8c1a      	ldrh	r2, [r3, #32]
    a35a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a35e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a362:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a366:	f7ff fea1 	bl	a0ac <Adc_Ipw_UpdateSoftwareGroupState>
}
    a36a:	bf00      	nop
    a36c:	b008      	add	sp, #32
    a36e:	bd10      	pop	{r4, pc}
    a370:	1fff8cf0 	.word	0x1fff8cf0
    a374:	1fff8cf4 	.word	0x1fff8cf4

0000a378 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a378:	b084      	sub	sp, #16
    a37a:	9003      	str	r0, [sp, #12]
    a37c:	9102      	str	r1, [sp, #8]
    a37e:	4611      	mov	r1, r2
    a380:	461a      	mov	r2, r3
    a382:	460b      	mov	r3, r1
    a384:	f8ad 3006 	strh.w	r3, [sp, #6]
    a388:	4613      	mov	r3, r2
    a38a:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a38e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a392:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a396:	fb02 f303 	mul.w	r3, r2, r3
    a39a:	005b      	lsls	r3, r3, #1
    a39c:	9a02      	ldr	r2, [sp, #8]
    a39e:	4413      	add	r3, r2
    a3a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a3a4:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a3a6:	bf00      	nop
    a3a8:	b004      	add	sp, #16
    a3aa:	4770      	bx	lr

0000a3ac <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a3ac:	b500      	push	{lr}
    a3ae:	b085      	sub	sp, #20
    a3b0:	4603      	mov	r3, r0
    a3b2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a3b6:	f7ff fc85 	bl	9cc4 <Adc_GetCoreID>
    a3ba:	4603      	mov	r3, r0
    a3bc:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a3c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3c4:	b2db      	uxtb	r3, r3
    a3c6:	461a      	mov	r2, r3
    a3c8:	4b18      	ldr	r3, [pc, #96]	; (a42c <Adc_Ipw_EndConversionNotification+0x80>)
    a3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a3ce:	681a      	ldr	r2, [r3, #0]
    a3d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3d4:	4413      	add	r3, r2
    a3d6:	f893 3020 	ldrb.w	r3, [r3, #32]
    a3da:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a3de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a3e2:	4913      	ldr	r1, [pc, #76]	; (a430 <Adc_Ipw_EndConversionNotification+0x84>)
    a3e4:	4613      	mov	r3, r2
    a3e6:	005b      	lsls	r3, r3, #1
    a3e8:	4413      	add	r3, r2
    a3ea:	005b      	lsls	r3, r3, #1
    a3ec:	440b      	add	r3, r1
    a3ee:	3302      	adds	r3, #2
    a3f0:	881b      	ldrh	r3, [r3, #0]
    a3f2:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a3f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a3fa:	490d      	ldr	r1, [pc, #52]	; (a430 <Adc_Ipw_EndConversionNotification+0x84>)
    a3fc:	4613      	mov	r3, r2
    a3fe:	005b      	lsls	r3, r3, #1
    a400:	4413      	add	r3, r2
    a402:	005b      	lsls	r3, r3, #1
    a404:	440b      	add	r3, r1
    a406:	881b      	ldrh	r3, [r3, #0]
    a408:	b29b      	uxth	r3, r3
    a40a:	2b00      	cmp	r3, #0
    a40c:	d009      	beq.n	a422 <Adc_Ipw_EndConversionNotification+0x76>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a40e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a412:	b2db      	uxtb	r3, r3
    a414:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a418:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a41c:	2201      	movs	r2, #1
    a41e:	f7ff ff09 	bl	a234 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a422:	bf00      	nop
    a424:	b005      	add	sp, #20
    a426:	f85d fb04 	ldr.w	pc, [sp], #4
    a42a:	bf00      	nop
    a42c:	1fff8cf0 	.word	0x1fff8cf0
    a430:	1fff8d0c 	.word	0x1fff8d0c

0000a434 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a434:	b500      	push	{lr}
    a436:	b085      	sub	sp, #20
    a438:	4603      	mov	r3, r0
    a43a:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a43e:	2300      	movs	r3, #0
    a440:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a444:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a448:	4618      	mov	r0, r3
    a44a:	f7ff ffaf 	bl	a3ac <Adc_Ipw_EndConversionNotification>
}
    a44e:	bf00      	nop
    a450:	b005      	add	sp, #20
    a452:	f85d fb04 	ldr.w	pc, [sp], #4
    a456:	bf00      	nop

0000a458 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a458:	b084      	sub	sp, #16
    a45a:	9003      	str	r0, [sp, #12]
    a45c:	9201      	str	r2, [sp, #4]
    a45e:	461a      	mov	r2, r3
    a460:	460b      	mov	r3, r1
    a462:	f88d 300b 	strb.w	r3, [sp, #11]
    a466:	4613      	mov	r3, r2
    a468:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a46c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a470:	2b00      	cmp	r3, #0
    a472:	d016      	beq.n	a4a2 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a474:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a478:	9903      	ldr	r1, [sp, #12]
    a47a:	4613      	mov	r3, r2
    a47c:	009b      	lsls	r3, r3, #2
    a47e:	4413      	add	r3, r2
    a480:	00db      	lsls	r3, r3, #3
    a482:	440b      	add	r3, r1
    a484:	3310      	adds	r3, #16
    a486:	6819      	ldr	r1, [r3, #0]
    a488:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a48c:	9b01      	ldr	r3, [sp, #4]
    a48e:	4319      	orrs	r1, r3
    a490:	9803      	ldr	r0, [sp, #12]
    a492:	4613      	mov	r3, r2
    a494:	009b      	lsls	r3, r3, #2
    a496:	4413      	add	r3, r2
    a498:	00db      	lsls	r3, r3, #3
    a49a:	4403      	add	r3, r0
    a49c:	3310      	adds	r3, #16
    a49e:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a4a0:	e016      	b.n	a4d0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a4a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a4a6:	9903      	ldr	r1, [sp, #12]
    a4a8:	4613      	mov	r3, r2
    a4aa:	009b      	lsls	r3, r3, #2
    a4ac:	4413      	add	r3, r2
    a4ae:	00db      	lsls	r3, r3, #3
    a4b0:	440b      	add	r3, r1
    a4b2:	3310      	adds	r3, #16
    a4b4:	6819      	ldr	r1, [r3, #0]
    a4b6:	9b01      	ldr	r3, [sp, #4]
    a4b8:	43db      	mvns	r3, r3
    a4ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a4be:	4019      	ands	r1, r3
    a4c0:	9803      	ldr	r0, [sp, #12]
    a4c2:	4613      	mov	r3, r2
    a4c4:	009b      	lsls	r3, r3, #2
    a4c6:	4413      	add	r3, r2
    a4c8:	00db      	lsls	r3, r3, #3
    a4ca:	4403      	add	r3, r0
    a4cc:	3310      	adds	r3, #16
    a4ce:	6019      	str	r1, [r3, #0]
}
    a4d0:	bf00      	nop
    a4d2:	b004      	add	sp, #16
    a4d4:	4770      	bx	lr

0000a4d6 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a4d6:	b082      	sub	sp, #8
    a4d8:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a4da:	9b01      	ldr	r3, [sp, #4]
    a4dc:	681b      	ldr	r3, [r3, #0]
    a4de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a4e2:	9b01      	ldr	r3, [sp, #4]
    a4e4:	601a      	str	r2, [r3, #0]
}
    a4e6:	bf00      	nop
    a4e8:	b002      	add	sp, #8
    a4ea:	4770      	bx	lr

0000a4ec <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a4ec:	b082      	sub	sp, #8
    a4ee:	9001      	str	r0, [sp, #4]
    a4f0:	460b      	mov	r3, r1
    a4f2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a4f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a4fa:	2b00      	cmp	r3, #0
    a4fc:	d006      	beq.n	a50c <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a4fe:	9b01      	ldr	r3, [sp, #4]
    a500:	681b      	ldr	r3, [r3, #0]
    a502:	f043 0202 	orr.w	r2, r3, #2
    a506:	9b01      	ldr	r3, [sp, #4]
    a508:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a50a:	e005      	b.n	a518 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a50c:	9b01      	ldr	r3, [sp, #4]
    a50e:	681b      	ldr	r3, [r3, #0]
    a510:	f023 0202 	bic.w	r2, r3, #2
    a514:	9b01      	ldr	r3, [sp, #4]
    a516:	601a      	str	r2, [r3, #0]
}
    a518:	bf00      	nop
    a51a:	b002      	add	sp, #8
    a51c:	4770      	bx	lr

0000a51e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a51e:	b086      	sub	sp, #24
    a520:	9003      	str	r0, [sp, #12]
    a522:	460b      	mov	r3, r1
    a524:	9201      	str	r2, [sp, #4]
    a526:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a52a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a52e:	9903      	ldr	r1, [sp, #12]
    a530:	4613      	mov	r3, r2
    a532:	009b      	lsls	r3, r3, #2
    a534:	4413      	add	r3, r2
    a536:	00db      	lsls	r3, r3, #3
    a538:	440b      	add	r3, r1
    a53a:	3310      	adds	r3, #16
    a53c:	681b      	ldr	r3, [r3, #0]
    a53e:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a540:	9b05      	ldr	r3, [sp, #20]
    a542:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a546:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a548:	9b01      	ldr	r3, [sp, #4]
    a54a:	781b      	ldrb	r3, [r3, #0]
    a54c:	461a      	mov	r2, r3
    a54e:	9b05      	ldr	r3, [sp, #20]
    a550:	4313      	orrs	r3, r2
    a552:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a554:	9b01      	ldr	r3, [sp, #4]
    a556:	785b      	ldrb	r3, [r3, #1]
    a558:	021b      	lsls	r3, r3, #8
    a55a:	b29b      	uxth	r3, r3
    a55c:	9a05      	ldr	r2, [sp, #20]
    a55e:	4313      	orrs	r3, r2
    a560:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a562:	9b01      	ldr	r3, [sp, #4]
    a564:	789b      	ldrb	r3, [r3, #2]
    a566:	041b      	lsls	r3, r3, #16
    a568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a56c:	9a05      	ldr	r2, [sp, #20]
    a56e:	4313      	orrs	r3, r2
    a570:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a572:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a576:	9903      	ldr	r1, [sp, #12]
    a578:	4613      	mov	r3, r2
    a57a:	009b      	lsls	r3, r3, #2
    a57c:	4413      	add	r3, r2
    a57e:	00db      	lsls	r3, r3, #3
    a580:	440b      	add	r3, r1
    a582:	3310      	adds	r3, #16
    a584:	9a05      	ldr	r2, [sp, #20]
    a586:	601a      	str	r2, [r3, #0]
}
    a588:	bf00      	nop
    a58a:	b006      	add	sp, #24
    a58c:	4770      	bx	lr

0000a58e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a58e:	b082      	sub	sp, #8
    a590:	9001      	str	r0, [sp, #4]
    a592:	460b      	mov	r3, r1
    a594:	f88d 3003 	strb.w	r3, [sp, #3]
    a598:	4613      	mov	r3, r2
    a59a:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a59e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a5a2:	9901      	ldr	r1, [sp, #4]
    a5a4:	4613      	mov	r3, r2
    a5a6:	009b      	lsls	r3, r3, #2
    a5a8:	4413      	add	r3, r2
    a5aa:	00db      	lsls	r3, r3, #3
    a5ac:	440b      	add	r3, r1
    a5ae:	3314      	adds	r3, #20
    a5b0:	6819      	ldr	r1, [r3, #0]
    a5b2:	f8bd 3000 	ldrh.w	r3, [sp]
    a5b6:	041b      	lsls	r3, r3, #16
    a5b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a5bc:	43db      	mvns	r3, r3
    a5be:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a5c2:	4019      	ands	r1, r3
    a5c4:	9801      	ldr	r0, [sp, #4]
    a5c6:	4613      	mov	r3, r2
    a5c8:	009b      	lsls	r3, r3, #2
    a5ca:	4413      	add	r3, r2
    a5cc:	00db      	lsls	r3, r3, #3
    a5ce:	4403      	add	r3, r0
    a5d0:	3314      	adds	r3, #20
    a5d2:	6019      	str	r1, [r3, #0]
}
    a5d4:	bf00      	nop
    a5d6:	b002      	add	sp, #8
    a5d8:	4770      	bx	lr

0000a5da <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a5da:	b500      	push	{lr}
    a5dc:	b087      	sub	sp, #28
    a5de:	9001      	str	r0, [sp, #4]
    a5e0:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a5e2:	4a50      	ldr	r2, [pc, #320]	; (a724 <Pdb_Adc_Ip_Init+0x14a>)
    a5e4:	9b01      	ldr	r3, [sp, #4]
    a5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ea:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a5ec:	2300      	movs	r3, #0
    a5ee:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a5f0:	9b00      	ldr	r3, [sp, #0]
    a5f2:	681b      	ldr	r3, [r3, #0]
    a5f4:	049b      	lsls	r3, r3, #18
    a5f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a5fa:	9a04      	ldr	r2, [sp, #16]
    a5fc:	4313      	orrs	r3, r2
    a5fe:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a600:	9b00      	ldr	r3, [sp, #0]
    a602:	685b      	ldr	r3, [r3, #4]
    a604:	031b      	lsls	r3, r3, #12
    a606:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a60a:	9a04      	ldr	r2, [sp, #16]
    a60c:	4313      	orrs	r3, r2
    a60e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a610:	9b00      	ldr	r3, [sp, #0]
    a612:	689b      	ldr	r3, [r3, #8]
    a614:	009b      	lsls	r3, r3, #2
    a616:	f003 030c 	and.w	r3, r3, #12
    a61a:	9a04      	ldr	r2, [sp, #16]
    a61c:	4313      	orrs	r3, r2
    a61e:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a620:	9b00      	ldr	r3, [sp, #0]
    a622:	68db      	ldr	r3, [r3, #12]
    a624:	021b      	lsls	r3, r3, #8
    a626:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a62a:	9a04      	ldr	r2, [sp, #16]
    a62c:	4313      	orrs	r3, r2
    a62e:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a630:	9b00      	ldr	r3, [sp, #0]
    a632:	7c1b      	ldrb	r3, [r3, #16]
    a634:	2b00      	cmp	r3, #0
    a636:	d003      	beq.n	a640 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a638:	9b04      	ldr	r3, [sp, #16]
    a63a:	f043 0302 	orr.w	r3, r3, #2
    a63e:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a640:	9b00      	ldr	r3, [sp, #0]
    a642:	7c5b      	ldrb	r3, [r3, #17]
    a644:	2b00      	cmp	r3, #0
    a646:	d003      	beq.n	a650 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a648:	9b04      	ldr	r3, [sp, #16]
    a64a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a64e:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a650:	9b00      	ldr	r3, [sp, #0]
    a652:	69db      	ldr	r3, [r3, #28]
    a654:	2b00      	cmp	r3, #0
    a656:	d003      	beq.n	a660 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a658:	9b04      	ldr	r3, [sp, #16]
    a65a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a65e:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a660:	9b03      	ldr	r3, [sp, #12]
    a662:	9a04      	ldr	r2, [sp, #16]
    a664:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a666:	9b00      	ldr	r3, [sp, #0]
    a668:	8a5b      	ldrh	r3, [r3, #18]
    a66a:	4619      	mov	r1, r3
    a66c:	9801      	ldr	r0, [sp, #4]
    a66e:	f000 f98f 	bl	a990 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a672:	9b00      	ldr	r3, [sp, #0]
    a674:	7d1b      	ldrb	r3, [r3, #20]
    a676:	2b00      	cmp	r3, #0
    a678:	d03e      	beq.n	a6f8 <Pdb_Adc_Ip_Init+0x11e>
    a67a:	9b00      	ldr	r3, [sp, #0]
    a67c:	699b      	ldr	r3, [r3, #24]
    a67e:	2b00      	cmp	r3, #0
    a680:	d03a      	beq.n	a6f8 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a682:	2300      	movs	r3, #0
    a684:	f88d 3017 	strb.w	r3, [sp, #23]
    a688:	e030      	b.n	a6ec <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a68a:	9b00      	ldr	r3, [sp, #0]
    a68c:	6999      	ldr	r1, [r3, #24]
    a68e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a692:	4613      	mov	r3, r2
    a694:	009b      	lsls	r3, r3, #2
    a696:	4413      	add	r3, r2
    a698:	009b      	lsls	r3, r3, #2
    a69a:	440b      	add	r3, r1
    a69c:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a69e:	9b02      	ldr	r3, [sp, #8]
    a6a0:	7819      	ldrb	r1, [r3, #0]
    a6a2:	9b02      	ldr	r3, [sp, #8]
    a6a4:	3301      	adds	r3, #1
    a6a6:	461a      	mov	r2, r3
    a6a8:	9803      	ldr	r0, [sp, #12]
    a6aa:	f7ff ff38 	bl	a51e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a6ae:	2300      	movs	r3, #0
    a6b0:	f88d 3016 	strb.w	r3, [sp, #22]
    a6b4:	e011      	b.n	a6da <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a6b6:	9b02      	ldr	r3, [sp, #8]
    a6b8:	7819      	ldrb	r1, [r3, #0]
    a6ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6be:	9a02      	ldr	r2, [sp, #8]
    a6c0:	005b      	lsls	r3, r3, #1
    a6c2:	4413      	add	r3, r2
    a6c4:	889b      	ldrh	r3, [r3, #4]
    a6c6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a6ca:	9801      	ldr	r0, [sp, #4]
    a6cc:	f000 fa74 	bl	abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a6d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6d4:	3301      	adds	r3, #1
    a6d6:	f88d 3016 	strb.w	r3, [sp, #22]
    a6da:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a6de:	2b07      	cmp	r3, #7
    a6e0:	d9e9      	bls.n	a6b6 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a6e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a6e6:	3301      	adds	r3, #1
    a6e8:	f88d 3017 	strb.w	r3, [sp, #23]
    a6ec:	9b00      	ldr	r3, [sp, #0]
    a6ee:	7d1b      	ldrb	r3, [r3, #20]
    a6f0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a6f4:	429a      	cmp	r2, r3
    a6f6:	d3c8      	bcc.n	a68a <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a6f8:	9801      	ldr	r0, [sp, #4]
    a6fa:	f000 f89b 	bl	a834 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a6fe:	9801      	ldr	r0, [sp, #4]
    a700:	f000 f92e 	bl	a960 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a704:	9b00      	ldr	r3, [sp, #0]
    a706:	69da      	ldr	r2, [r3, #28]
    a708:	4907      	ldr	r1, [pc, #28]	; (a728 <Pdb_Adc_Ip_Init+0x14e>)
    a70a:	9b01      	ldr	r3, [sp, #4]
    a70c:	00db      	lsls	r3, r3, #3
    a70e:	440b      	add	r3, r1
    a710:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a712:	4a05      	ldr	r2, [pc, #20]	; (a728 <Pdb_Adc_Ip_Init+0x14e>)
    a714:	9b01      	ldr	r3, [sp, #4]
    a716:	2101      	movs	r1, #1
    a718:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a71c:	bf00      	nop
    a71e:	b007      	add	sp, #28
    a720:	f85d fb04 	ldr.w	pc, [sp], #4
    a724:	000109e8 	.word	0x000109e8
    a728:	1fff8db0 	.word	0x1fff8db0

0000a72c <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a72c:	b500      	push	{lr}
    a72e:	b097      	sub	sp, #92	; 0x5c
    a730:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a732:	2300      	movs	r3, #0
    a734:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a736:	2300      	movs	r3, #0
    a738:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a73a:	2300      	movs	r3, #0
    a73c:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a73e:	2300      	movs	r3, #0
    a740:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a742:	2300      	movs	r3, #0
    a744:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a748:	2300      	movs	r3, #0
    a74a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a74e:	2300      	movs	r3, #0
    a750:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a754:	2302      	movs	r3, #2
    a756:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a75a:	2300      	movs	r3, #0
    a75c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a760:	e04d      	b.n	a7fe <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a762:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a766:	4613      	mov	r3, r2
    a768:	009b      	lsls	r3, r3, #2
    a76a:	4413      	add	r3, r2
    a76c:	009b      	lsls	r3, r3, #2
    a76e:	aa16      	add	r2, sp, #88	; 0x58
    a770:	4413      	add	r3, r2
    a772:	3b4c      	subs	r3, #76	; 0x4c
    a774:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a778:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a77a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a77e:	4613      	mov	r3, r2
    a780:	009b      	lsls	r3, r3, #2
    a782:	4413      	add	r3, r2
    a784:	009b      	lsls	r3, r3, #2
    a786:	aa16      	add	r2, sp, #88	; 0x58
    a788:	4413      	add	r3, r2
    a78a:	3b4b      	subs	r3, #75	; 0x4b
    a78c:	2200      	movs	r2, #0
    a78e:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a790:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a794:	4613      	mov	r3, r2
    a796:	009b      	lsls	r3, r3, #2
    a798:	4413      	add	r3, r2
    a79a:	009b      	lsls	r3, r3, #2
    a79c:	aa16      	add	r2, sp, #88	; 0x58
    a79e:	4413      	add	r3, r2
    a7a0:	3b4a      	subs	r3, #74	; 0x4a
    a7a2:	2200      	movs	r2, #0
    a7a4:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a7a6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a7aa:	4613      	mov	r3, r2
    a7ac:	009b      	lsls	r3, r3, #2
    a7ae:	4413      	add	r3, r2
    a7b0:	009b      	lsls	r3, r3, #2
    a7b2:	aa16      	add	r2, sp, #88	; 0x58
    a7b4:	4413      	add	r3, r2
    a7b6:	3b49      	subs	r3, #73	; 0x49
    a7b8:	2200      	movs	r2, #0
    a7ba:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a7bc:	2300      	movs	r3, #0
    a7be:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a7c2:	e013      	b.n	a7ec <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a7c4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a7c8:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a7cc:	4613      	mov	r3, r2
    a7ce:	009b      	lsls	r3, r3, #2
    a7d0:	4413      	add	r3, r2
    a7d2:	005b      	lsls	r3, r3, #1
    a7d4:	440b      	add	r3, r1
    a7d6:	005b      	lsls	r3, r3, #1
    a7d8:	aa16      	add	r2, sp, #88	; 0x58
    a7da:	4413      	add	r3, r2
    a7dc:	2200      	movs	r2, #0
    a7de:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a7e2:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a7e6:	3301      	adds	r3, #1
    a7e8:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a7ec:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a7f0:	2b07      	cmp	r3, #7
    a7f2:	d9e7      	bls.n	a7c4 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a7f4:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a7f8:	3301      	adds	r3, #1
    a7fa:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a7fe:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a802:	2b01      	cmp	r3, #1
    a804:	d9ad      	bls.n	a762 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a806:	ab03      	add	r3, sp, #12
    a808:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a80a:	2300      	movs	r3, #0
    a80c:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a80e:	ab0d      	add	r3, sp, #52	; 0x34
    a810:	4619      	mov	r1, r3
    a812:	9801      	ldr	r0, [sp, #4]
    a814:	f7ff fee1 	bl	a5da <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a818:	9801      	ldr	r0, [sp, #4]
    a81a:	f000 f823 	bl	a864 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a81e:	4a04      	ldr	r2, [pc, #16]	; (a830 <Pdb_Adc_Ip_DeInit+0x104>)
    a820:	9b01      	ldr	r3, [sp, #4]
    a822:	2100      	movs	r1, #0
    a824:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a828:	bf00      	nop
    a82a:	b017      	add	sp, #92	; 0x5c
    a82c:	f85d fb04 	ldr.w	pc, [sp], #4
    a830:	1fff8db0 	.word	0x1fff8db0

0000a834 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a834:	b500      	push	{lr}
    a836:	b085      	sub	sp, #20
    a838:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a83a:	4a09      	ldr	r2, [pc, #36]	; (a860 <Pdb_Adc_Ip_Enable+0x2c>)
    a83c:	9b01      	ldr	r3, [sp, #4]
    a83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a842:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a844:	f001 fdbe 	bl	c3c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a848:	9b03      	ldr	r3, [sp, #12]
    a84a:	681b      	ldr	r3, [r3, #0]
    a84c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a850:	9b03      	ldr	r3, [sp, #12]
    a852:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a854:	f001 fde2 	bl	c41c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a858:	bf00      	nop
    a85a:	b005      	add	sp, #20
    a85c:	f85d fb04 	ldr.w	pc, [sp], #4
    a860:	000109e8 	.word	0x000109e8

0000a864 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a864:	b500      	push	{lr}
    a866:	b085      	sub	sp, #20
    a868:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a86a:	4a08      	ldr	r2, [pc, #32]	; (a88c <Pdb_Adc_Ip_Disable+0x28>)
    a86c:	9b01      	ldr	r3, [sp, #4]
    a86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a872:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a874:	f001 fdf8 	bl	c468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a878:	9803      	ldr	r0, [sp, #12]
    a87a:	f7ff fe2c 	bl	a4d6 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a87e:	f001 fe1f 	bl	c4c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a882:	bf00      	nop
    a884:	b005      	add	sp, #20
    a886:	f85d fb04 	ldr.w	pc, [sp], #4
    a88a:	bf00      	nop
    a88c:	000109e8 	.word	0x000109e8

0000a890 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a890:	b500      	push	{lr}
    a892:	b085      	sub	sp, #20
    a894:	9001      	str	r0, [sp, #4]
    a896:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a898:	4a0e      	ldr	r2, [pc, #56]	; (a8d4 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a89a:	9b01      	ldr	r3, [sp, #4]
    a89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8a0:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a8a2:	f001 fe33 	bl	c50c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a8a6:	9b03      	ldr	r3, [sp, #12]
    a8a8:	681b      	ldr	r3, [r3, #0]
    a8aa:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a8ac:	9b02      	ldr	r3, [sp, #8]
    a8ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a8b2:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a8b4:	9b00      	ldr	r3, [sp, #0]
    a8b6:	021b      	lsls	r3, r3, #8
    a8b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a8bc:	9a02      	ldr	r2, [sp, #8]
    a8be:	4313      	orrs	r3, r2
    a8c0:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a8c2:	9b03      	ldr	r3, [sp, #12]
    a8c4:	9a02      	ldr	r2, [sp, #8]
    a8c6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a8c8:	f001 fe4c 	bl	c564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a8cc:	bf00      	nop
    a8ce:	b005      	add	sp, #20
    a8d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8d4:	000109e8 	.word	0x000109e8

0000a8d8 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a8d8:	b500      	push	{lr}
    a8da:	b085      	sub	sp, #20
    a8dc:	9001      	str	r0, [sp, #4]
    a8de:	460b      	mov	r3, r1
    a8e0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a8e4:	4a09      	ldr	r2, [pc, #36]	; (a90c <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a8e6:	9b01      	ldr	r3, [sp, #4]
    a8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ec:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a8ee:	f001 fe5f 	bl	c5b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a8f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a8f6:	4619      	mov	r1, r3
    a8f8:	9803      	ldr	r0, [sp, #12]
    a8fa:	f7ff fdf7 	bl	a4ec <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a8fe:	f001 fe83 	bl	c608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a902:	bf00      	nop
    a904:	b005      	add	sp, #20
    a906:	f85d fb04 	ldr.w	pc, [sp], #4
    a90a:	bf00      	nop
    a90c:	000109e8 	.word	0x000109e8

0000a910 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a910:	b500      	push	{lr}
    a912:	b085      	sub	sp, #20
    a914:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a916:	4a09      	ldr	r2, [pc, #36]	; (a93c <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a918:	9b01      	ldr	r3, [sp, #4]
    a91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a91e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    a920:	f001 fe98 	bl	c654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    a924:	9b03      	ldr	r3, [sp, #12]
    a926:	681b      	ldr	r3, [r3, #0]
    a928:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    a92c:	9b03      	ldr	r3, [sp, #12]
    a92e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    a930:	f001 febc 	bl	c6ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    a934:	bf00      	nop
    a936:	b005      	add	sp, #20
    a938:	f85d fb04 	ldr.w	pc, [sp], #4
    a93c:	000109e8 	.word	0x000109e8

0000a940 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    a940:	b084      	sub	sp, #16
    a942:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a944:	4a05      	ldr	r2, [pc, #20]	; (a95c <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    a946:	9b01      	ldr	r3, [sp, #4]
    a948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a94c:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    a94e:	9b03      	ldr	r3, [sp, #12]
    a950:	689b      	ldr	r3, [r3, #8]
    a952:	b29b      	uxth	r3, r3
}
    a954:	4618      	mov	r0, r3
    a956:	b004      	add	sp, #16
    a958:	4770      	bx	lr
    a95a:	bf00      	nop
    a95c:	000109e8 	.word	0x000109e8

0000a960 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    a960:	b500      	push	{lr}
    a962:	b085      	sub	sp, #20
    a964:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a966:	4a09      	ldr	r2, [pc, #36]	; (a98c <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    a968:	9b01      	ldr	r3, [sp, #4]
    a96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a96e:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    a970:	f001 fec2 	bl	c6f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    a974:	9b03      	ldr	r3, [sp, #12]
    a976:	681b      	ldr	r3, [r3, #0]
    a978:	f043 0201 	orr.w	r2, r3, #1
    a97c:	9b03      	ldr	r3, [sp, #12]
    a97e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    a980:	f001 fee6 	bl	c750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    a984:	bf00      	nop
    a986:	b005      	add	sp, #20
    a988:	f85d fb04 	ldr.w	pc, [sp], #4
    a98c:	000109e8 	.word	0x000109e8

0000a990 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    a990:	b500      	push	{lr}
    a992:	b085      	sub	sp, #20
    a994:	9001      	str	r0, [sp, #4]
    a996:	460b      	mov	r3, r1
    a998:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a99c:	4a0d      	ldr	r2, [pc, #52]	; (a9d4 <Pdb_Adc_Ip_SetModulus+0x44>)
    a99e:	9b01      	ldr	r3, [sp, #4]
    a9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9a4:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    a9a6:	f002 f989 	bl	ccbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    a9aa:	9b03      	ldr	r3, [sp, #12]
    a9ac:	685b      	ldr	r3, [r3, #4]
    a9ae:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    a9b0:	9b02      	ldr	r3, [sp, #8]
    a9b2:	0c1b      	lsrs	r3, r3, #16
    a9b4:	041b      	lsls	r3, r3, #16
    a9b6:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    a9b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a9bc:	9a02      	ldr	r2, [sp, #8]
    a9be:	4313      	orrs	r3, r2
    a9c0:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    a9c2:	9b03      	ldr	r3, [sp, #12]
    a9c4:	9a02      	ldr	r2, [sp, #8]
    a9c6:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    a9c8:	f002 f9a4 	bl	cd14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    a9cc:	bf00      	nop
    a9ce:	b005      	add	sp, #20
    a9d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a9d4:	000109e8 	.word	0x000109e8

0000a9d8 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a9d8:	b500      	push	{lr}
    a9da:	b087      	sub	sp, #28
    a9dc:	9003      	str	r0, [sp, #12]
    a9de:	460b      	mov	r3, r1
    a9e0:	9201      	str	r2, [sp, #4]
    a9e2:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9e6:	4a0a      	ldr	r2, [pc, #40]	; (aa10 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    a9e8:	9b03      	ldr	r3, [sp, #12]
    a9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9ee:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    a9f0:	f001 ff26 	bl	c840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    a9f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a9f8:	9a01      	ldr	r2, [sp, #4]
    a9fa:	4619      	mov	r1, r3
    a9fc:	9805      	ldr	r0, [sp, #20]
    a9fe:	f7ff fd8e 	bl	a51e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    aa02:	f001 ff49 	bl	c898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    aa06:	bf00      	nop
    aa08:	b007      	add	sp, #28
    aa0a:	f85d fb04 	ldr.w	pc, [sp], #4
    aa0e:	bf00      	nop
    aa10:	000109e8 	.word	0x000109e8

0000aa14 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    aa14:	b084      	sub	sp, #16
    aa16:	9001      	str	r0, [sp, #4]
    aa18:	460b      	mov	r3, r1
    aa1a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa1e:	4a0c      	ldr	r2, [pc, #48]	; (aa50 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    aa20:	9b01      	ldr	r3, [sp, #4]
    aa22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa26:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    aa28:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa2c:	9903      	ldr	r1, [sp, #12]
    aa2e:	4613      	mov	r3, r2
    aa30:	009b      	lsls	r3, r3, #2
    aa32:	4413      	add	r3, r2
    aa34:	00db      	lsls	r3, r3, #3
    aa36:	440b      	add	r3, r1
    aa38:	3314      	adds	r3, #20
    aa3a:	681b      	ldr	r3, [r3, #0]
    aa3c:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    aa3e:	9b02      	ldr	r3, [sp, #8]
    aa40:	0c1b      	lsrs	r3, r3, #16
    aa42:	b2db      	uxtb	r3, r3
    aa44:	9302      	str	r3, [sp, #8]

    return Result;
    aa46:	9b02      	ldr	r3, [sp, #8]
}
    aa48:	4618      	mov	r0, r3
    aa4a:	b004      	add	sp, #16
    aa4c:	4770      	bx	lr
    aa4e:	bf00      	nop
    aa50:	000109e8 	.word	0x000109e8

0000aa54 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    aa54:	b500      	push	{lr}
    aa56:	b085      	sub	sp, #20
    aa58:	9001      	str	r0, [sp, #4]
    aa5a:	460b      	mov	r3, r1
    aa5c:	f88d 3003 	strb.w	r3, [sp, #3]
    aa60:	4613      	mov	r3, r2
    aa62:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa66:	4a0a      	ldr	r2, [pc, #40]	; (aa90 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    aa68:	9b01      	ldr	r3, [sp, #4]
    aa6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    aa70:	f002 f880 	bl	cb74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    aa74:	f8bd 2000 	ldrh.w	r2, [sp]
    aa78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aa7c:	4619      	mov	r1, r3
    aa7e:	9803      	ldr	r0, [sp, #12]
    aa80:	f7ff fd85 	bl	a58e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    aa84:	f002 f8a2 	bl	cbcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    aa88:	bf00      	nop
    aa8a:	b005      	add	sp, #20
    aa8c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa90:	000109e8 	.word	0x000109e8

0000aa94 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    aa94:	b500      	push	{lr}
    aa96:	b085      	sub	sp, #20
    aa98:	9001      	str	r0, [sp, #4]
    aa9a:	4608      	mov	r0, r1
    aa9c:	4611      	mov	r1, r2
    aa9e:	461a      	mov	r2, r3
    aaa0:	4603      	mov	r3, r0
    aaa2:	f88d 3003 	strb.w	r3, [sp, #3]
    aaa6:	460b      	mov	r3, r1
    aaa8:	f88d 3002 	strb.w	r3, [sp, #2]
    aaac:	4613      	mov	r3, r2
    aaae:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aab2:	4a10      	ldr	r2, [pc, #64]	; (aaf4 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    aab4:	9b01      	ldr	r3, [sp, #4]
    aab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaba:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    aabc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    aac0:	2201      	movs	r2, #1
    aac2:	fa02 f303 	lsl.w	r3, r2, r3
    aac6:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    aac8:	9b02      	ldr	r3, [sp, #8]
    aaca:	041b      	lsls	r3, r3, #16
    aacc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    aad0:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    aad2:	f001 ff07 	bl	c8e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    aad6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    aada:	f89d 1003 	ldrb.w	r1, [sp, #3]
    aade:	9a02      	ldr	r2, [sp, #8]
    aae0:	9803      	ldr	r0, [sp, #12]
    aae2:	f7ff fcb9 	bl	a458 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    aae6:	f001 ff29 	bl	c93c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    aaea:	bf00      	nop
    aaec:	b005      	add	sp, #20
    aaee:	f85d fb04 	ldr.w	pc, [sp], #4
    aaf2:	bf00      	nop
    aaf4:	000109e8 	.word	0x000109e8

0000aaf8 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    aaf8:	b500      	push	{lr}
    aafa:	b085      	sub	sp, #20
    aafc:	9001      	str	r0, [sp, #4]
    aafe:	4608      	mov	r0, r1
    ab00:	4611      	mov	r1, r2
    ab02:	461a      	mov	r2, r3
    ab04:	4603      	mov	r3, r0
    ab06:	f88d 3003 	strb.w	r3, [sp, #3]
    ab0a:	460b      	mov	r3, r1
    ab0c:	f88d 3002 	strb.w	r3, [sp, #2]
    ab10:	4613      	mov	r3, r2
    ab12:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab16:	4a0f      	ldr	r2, [pc, #60]	; (ab54 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    ab18:	9b01      	ldr	r3, [sp, #4]
    ab1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab1e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ab20:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ab24:	2201      	movs	r2, #1
    ab26:	fa02 f303 	lsl.w	r3, r2, r3
    ab2a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    ab2c:	9b02      	ldr	r3, [sp, #8]
    ab2e:	b2db      	uxtb	r3, r3
    ab30:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    ab32:	f001 ff29 	bl	c988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ab36:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ab3a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ab3e:	9a02      	ldr	r2, [sp, #8]
    ab40:	9803      	ldr	r0, [sp, #12]
    ab42:	f7ff fc89 	bl	a458 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    ab46:	f001 ff4b 	bl	c9e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    ab4a:	bf00      	nop
    ab4c:	b005      	add	sp, #20
    ab4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ab52:	bf00      	nop
    ab54:	000109e8 	.word	0x000109e8

0000ab58 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    ab58:	b500      	push	{lr}
    ab5a:	b085      	sub	sp, #20
    ab5c:	9001      	str	r0, [sp, #4]
    ab5e:	4608      	mov	r0, r1
    ab60:	4611      	mov	r1, r2
    ab62:	461a      	mov	r2, r3
    ab64:	4603      	mov	r3, r0
    ab66:	f88d 3003 	strb.w	r3, [sp, #3]
    ab6a:	460b      	mov	r3, r1
    ab6c:	f88d 3002 	strb.w	r3, [sp, #2]
    ab70:	4613      	mov	r3, r2
    ab72:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab76:	4a0f      	ldr	r2, [pc, #60]	; (abb4 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    ab78:	9b01      	ldr	r3, [sp, #4]
    ab7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab7e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ab80:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ab84:	2201      	movs	r2, #1
    ab86:	fa02 f303 	lsl.w	r3, r2, r3
    ab8a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    ab8c:	9b02      	ldr	r3, [sp, #8]
    ab8e:	021b      	lsls	r3, r3, #8
    ab90:	b29b      	uxth	r3, r3
    ab92:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    ab94:	f001 ff4a 	bl	ca2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ab98:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ab9c:	f89d 1003 	ldrb.w	r1, [sp, #3]
    aba0:	9a02      	ldr	r2, [sp, #8]
    aba2:	9803      	ldr	r0, [sp, #12]
    aba4:	f7ff fc58 	bl	a458 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    aba8:	f001 ff6c 	bl	ca84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    abac:	bf00      	nop
    abae:	b005      	add	sp, #20
    abb0:	f85d fb04 	ldr.w	pc, [sp], #4
    abb4:	000109e8 	.word	0x000109e8

0000abb8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    abb8:	b410      	push	{r4}
    abba:	b085      	sub	sp, #20
    abbc:	9001      	str	r0, [sp, #4]
    abbe:	4608      	mov	r0, r1
    abc0:	4611      	mov	r1, r2
    abc2:	461a      	mov	r2, r3
    abc4:	4603      	mov	r3, r0
    abc6:	f88d 3003 	strb.w	r3, [sp, #3]
    abca:	460b      	mov	r3, r1
    abcc:	f88d 3002 	strb.w	r3, [sp, #2]
    abd0:	4613      	mov	r3, r2
    abd2:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    abd6:	4a0c      	ldr	r2, [pc, #48]	; (ac08 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    abd8:	9b01      	ldr	r3, [sp, #4]
    abda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abde:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    abe0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    abe4:	f89d 4002 	ldrb.w	r4, [sp, #2]
    abe8:	f8bd 0000 	ldrh.w	r0, [sp]
    abec:	9903      	ldr	r1, [sp, #12]
    abee:	4613      	mov	r3, r2
    abf0:	009b      	lsls	r3, r3, #2
    abf2:	4413      	add	r3, r2
    abf4:	005b      	lsls	r3, r3, #1
    abf6:	4423      	add	r3, r4
    abf8:	3306      	adds	r3, #6
    abfa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    abfe:	bf00      	nop
    ac00:	b005      	add	sp, #20
    ac02:	f85d 4b04 	ldr.w	r4, [sp], #4
    ac06:	4770      	bx	lr
    ac08:	000109e8 	.word	0x000109e8

0000ac0c <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    ac0c:	b500      	push	{lr}
    ac0e:	b087      	sub	sp, #28
    ac10:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ac12:	4a19      	ldr	r2, [pc, #100]	; (ac78 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    ac14:	9b01      	ldr	r3, [sp, #4]
    ac16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac1a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    ac1c:	2300      	movs	r3, #0
    ac1e:	f88d 300c 	strb.w	r3, [sp, #12]
    ac22:	2300      	movs	r3, #0
    ac24:	f88d 300d 	strb.w	r3, [sp, #13]
    ac28:	2300      	movs	r3, #0
    ac2a:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    ac2e:	f001 fdb5 	bl	c79c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ac32:	9804      	ldr	r0, [sp, #16]
    ac34:	f7ff fc4f 	bl	a4d6 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    ac38:	2100      	movs	r1, #0
    ac3a:	9804      	ldr	r0, [sp, #16]
    ac3c:	f7ff fc56 	bl	a4ec <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    ac40:	f001 fdd8 	bl	c7f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ac44:	2300      	movs	r3, #0
    ac46:	f88d 3017 	strb.w	r3, [sp, #23]
    ac4a:	e00b      	b.n	ac64 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    ac4c:	aa03      	add	r2, sp, #12
    ac4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac52:	4619      	mov	r1, r3
    ac54:	9804      	ldr	r0, [sp, #16]
    ac56:	f000 f899 	bl	ad8c <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ac5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac5e:	3301      	adds	r3, #1
    ac60:	f88d 3017 	strb.w	r3, [sp, #23]
    ac64:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac68:	2b01      	cmp	r3, #1
    ac6a:	d9ef      	bls.n	ac4c <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    ac6c:	bf00      	nop
    ac6e:	bf00      	nop
    ac70:	b007      	add	sp, #28
    ac72:	f85d fb04 	ldr.w	pc, [sp], #4
    ac76:	bf00      	nop
    ac78:	000109e8 	.word	0x000109e8

0000ac7c <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    ac7c:	b500      	push	{lr}
    ac7e:	b087      	sub	sp, #28
    ac80:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ac82:	4a40      	ldr	r2, [pc, #256]	; (ad84 <Pdb_Adc_Ip_IRQHandler+0x108>)
    ac84:	9b01      	ldr	r3, [sp, #4]
    ac86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac8a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    ac8c:	4a3e      	ldr	r2, [pc, #248]	; (ad88 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ac8e:	9b01      	ldr	r3, [sp, #4]
    ac90:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ac94:	2b00      	cmp	r3, #0
    ac96:	d04d      	beq.n	ad34 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    ac98:	9b04      	ldr	r3, [sp, #16]
    ac9a:	681b      	ldr	r3, [r3, #0]
    ac9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    aca0:	2b00      	cmp	r3, #0
    aca2:	d06a      	beq.n	ad7a <Pdb_Adc_Ip_IRQHandler+0xfe>
    aca4:	4a38      	ldr	r2, [pc, #224]	; (ad88 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aca6:	9b01      	ldr	r3, [sp, #4]
    aca8:	00db      	lsls	r3, r3, #3
    acaa:	4413      	add	r3, r2
    acac:	685b      	ldr	r3, [r3, #4]
    acae:	2b00      	cmp	r3, #0
    acb0:	d063      	beq.n	ad7a <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    acb2:	2300      	movs	r3, #0
    acb4:	f88d 3017 	strb.w	r3, [sp, #23]
    acb8:	e037      	b.n	ad2a <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    acba:	f89d 2017 	ldrb.w	r2, [sp, #23]
    acbe:	9904      	ldr	r1, [sp, #16]
    acc0:	4613      	mov	r3, r2
    acc2:	009b      	lsls	r3, r3, #2
    acc4:	4413      	add	r3, r2
    acc6:	00db      	lsls	r3, r3, #3
    acc8:	440b      	add	r3, r1
    acca:	3314      	adds	r3, #20
    accc:	681b      	ldr	r3, [r3, #0]
    acce:	b29b      	uxth	r3, r3
    acd0:	b2db      	uxtb	r3, r3
    acd2:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    acd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    acda:	2b00      	cmp	r3, #0
    acdc:	d020      	beq.n	ad20 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    acde:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ace2:	9904      	ldr	r1, [sp, #16]
    ace4:	4613      	mov	r3, r2
    ace6:	009b      	lsls	r3, r3, #2
    ace8:	4413      	add	r3, r2
    acea:	00db      	lsls	r3, r3, #3
    acec:	440b      	add	r3, r1
    acee:	3314      	adds	r3, #20
    acf0:	681b      	ldr	r3, [r3, #0]
    acf2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    acf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    acfa:	9804      	ldr	r0, [sp, #16]
    acfc:	4613      	mov	r3, r2
    acfe:	009b      	lsls	r3, r3, #2
    ad00:	4413      	add	r3, r2
    ad02:	00db      	lsls	r3, r3, #3
    ad04:	4403      	add	r3, r0
    ad06:	3314      	adds	r3, #20
    ad08:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    ad0a:	4a1f      	ldr	r2, [pc, #124]	; (ad88 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ad0c:	9b01      	ldr	r3, [sp, #4]
    ad0e:	00db      	lsls	r3, r3, #3
    ad10:	4413      	add	r3, r2
    ad12:	685b      	ldr	r3, [r3, #4]
    ad14:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ad18:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ad1c:	4610      	mov	r0, r2
    ad1e:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad20:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad24:	3301      	adds	r3, #1
    ad26:	f88d 3017 	strb.w	r3, [sp, #23]
    ad2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad2e:	2b01      	cmp	r3, #1
    ad30:	d9c3      	bls.n	acba <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ad32:	e022      	b.n	ad7a <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad34:	2300      	movs	r3, #0
    ad36:	f88d 3017 	strb.w	r3, [sp, #23]
    ad3a:	e01a      	b.n	ad72 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ad3c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ad40:	9904      	ldr	r1, [sp, #16]
    ad42:	4613      	mov	r3, r2
    ad44:	009b      	lsls	r3, r3, #2
    ad46:	4413      	add	r3, r2
    ad48:	00db      	lsls	r3, r3, #3
    ad4a:	440b      	add	r3, r1
    ad4c:	3314      	adds	r3, #20
    ad4e:	681b      	ldr	r3, [r3, #0]
    ad50:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ad54:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ad58:	9804      	ldr	r0, [sp, #16]
    ad5a:	4613      	mov	r3, r2
    ad5c:	009b      	lsls	r3, r3, #2
    ad5e:	4413      	add	r3, r2
    ad60:	00db      	lsls	r3, r3, #3
    ad62:	4403      	add	r3, r0
    ad64:	3314      	adds	r3, #20
    ad66:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ad68:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad6c:	3301      	adds	r3, #1
    ad6e:	f88d 3017 	strb.w	r3, [sp, #23]
    ad72:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ad76:	2b01      	cmp	r3, #1
    ad78:	d9e0      	bls.n	ad3c <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    ad7a:	bf00      	nop
    ad7c:	b007      	add	sp, #28
    ad7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad82:	bf00      	nop
    ad84:	000109e8 	.word	0x000109e8
    ad88:	1fff8db0 	.word	0x1fff8db0

0000ad8c <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    ad8c:	b500      	push	{lr}
    ad8e:	b085      	sub	sp, #20
    ad90:	9003      	str	r0, [sp, #12]
    ad92:	460b      	mov	r3, r1
    ad94:	9201      	str	r2, [sp, #4]
    ad96:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    ad9a:	f001 fe99 	bl	cad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    ad9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ada2:	9a01      	ldr	r2, [sp, #4]
    ada4:	4619      	mov	r1, r3
    ada6:	9803      	ldr	r0, [sp, #12]
    ada8:	f7ff fbb9 	bl	a51e <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    adac:	f001 febc 	bl	cb28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    adb0:	f001 ff32 	bl	cc18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    adb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adb8:	22ff      	movs	r2, #255	; 0xff
    adba:	4619      	mov	r1, r3
    adbc:	9803      	ldr	r0, [sp, #12]
    adbe:	f7ff fbe6 	bl	a58e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    adc2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    adc6:	9903      	ldr	r1, [sp, #12]
    adc8:	4613      	mov	r3, r2
    adca:	009b      	lsls	r3, r3, #2
    adcc:	4413      	add	r3, r2
    adce:	00db      	lsls	r3, r3, #3
    add0:	440b      	add	r3, r1
    add2:	3314      	adds	r3, #20
    add4:	681b      	ldr	r3, [r3, #0]
    add6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    adda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    adde:	9803      	ldr	r0, [sp, #12]
    ade0:	4613      	mov	r3, r2
    ade2:	009b      	lsls	r3, r3, #2
    ade4:	4413      	add	r3, r2
    ade6:	00db      	lsls	r3, r3, #3
    ade8:	4403      	add	r3, r0
    adea:	3314      	adds	r3, #20
    adec:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    adee:	f001 ff3f 	bl	cc70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    adf2:	bf00      	nop
    adf4:	b005      	add	sp, #20
    adf6:	f85d fb04 	ldr.w	pc, [sp], #4
    adfa:	bf00      	nop

0000adfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    adfc:	b500      	push	{lr}
    adfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae00:	f7f5 feac 	bl	b5c <Sys_GetCoreID>
    ae04:	4603      	mov	r3, r0
    ae06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    ae08:	4a10      	ldr	r2, [pc, #64]	; (ae4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ae0a:	9b01      	ldr	r3, [sp, #4]
    ae0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae10:	2b00      	cmp	r3, #0
    ae12:	d10d      	bne.n	ae30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae14:	f7f5 fdc0 	bl	998 <Adc_schm_read_msr>
    ae18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae1a:	9b00      	ldr	r3, [sp, #0]
    ae1c:	f003 0301 	and.w	r3, r3, #1
    ae20:	2b00      	cmp	r3, #0
    ae22:	d100      	bne.n	ae26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ae26:	490a      	ldr	r1, [pc, #40]	; (ae50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    ae28:	9b01      	ldr	r3, [sp, #4]
    ae2a:	9a00      	ldr	r2, [sp, #0]
    ae2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    ae30:	4a06      	ldr	r2, [pc, #24]	; (ae4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ae32:	9b01      	ldr	r3, [sp, #4]
    ae34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae38:	1c5a      	adds	r2, r3, #1
    ae3a:	4904      	ldr	r1, [pc, #16]	; (ae4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ae3c:	9b01      	ldr	r3, [sp, #4]
    ae3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae42:	bf00      	nop
    ae44:	b003      	add	sp, #12
    ae46:	f85d fb04 	ldr.w	pc, [sp], #4
    ae4a:	bf00      	nop
    ae4c:	1fff8dc4 	.word	0x1fff8dc4
    ae50:	1fff8dc0 	.word	0x1fff8dc0

0000ae54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    ae54:	b500      	push	{lr}
    ae56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae58:	f7f5 fe80 	bl	b5c <Sys_GetCoreID>
    ae5c:	4603      	mov	r3, r0
    ae5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    ae60:	4a0d      	ldr	r2, [pc, #52]	; (ae98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ae62:	9b01      	ldr	r3, [sp, #4]
    ae64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae68:	1e5a      	subs	r2, r3, #1
    ae6a:	490b      	ldr	r1, [pc, #44]	; (ae98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ae6c:	9b01      	ldr	r3, [sp, #4]
    ae6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ae72:	4a0a      	ldr	r2, [pc, #40]	; (ae9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    ae74:	9b01      	ldr	r3, [sp, #4]
    ae76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7a:	f003 0301 	and.w	r3, r3, #1
    ae7e:	2b00      	cmp	r3, #0
    ae80:	d106      	bne.n	ae90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    ae82:	4a05      	ldr	r2, [pc, #20]	; (ae98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ae84:	9b01      	ldr	r3, [sp, #4]
    ae86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	d100      	bne.n	ae90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae90:	bf00      	nop
    ae92:	b003      	add	sp, #12
    ae94:	f85d fb04 	ldr.w	pc, [sp], #4
    ae98:	1fff8dc4 	.word	0x1fff8dc4
    ae9c:	1fff8dc0 	.word	0x1fff8dc0

0000aea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    aea0:	b500      	push	{lr}
    aea2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aea4:	f7f5 fe5a 	bl	b5c <Sys_GetCoreID>
    aea8:	4603      	mov	r3, r0
    aeaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    aeac:	4a10      	ldr	r2, [pc, #64]	; (aef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    aeae:	9b01      	ldr	r3, [sp, #4]
    aeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	d10d      	bne.n	aed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aeb8:	f7f5 fd6e 	bl	998 <Adc_schm_read_msr>
    aebc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aebe:	9b00      	ldr	r3, [sp, #0]
    aec0:	f003 0301 	and.w	r3, r3, #1
    aec4:	2b00      	cmp	r3, #0
    aec6:	d100      	bne.n	aeca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aec8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    aeca:	490a      	ldr	r1, [pc, #40]	; (aef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    aecc:	9b01      	ldr	r3, [sp, #4]
    aece:	9a00      	ldr	r2, [sp, #0]
    aed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    aed4:	4a06      	ldr	r2, [pc, #24]	; (aef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    aed6:	9b01      	ldr	r3, [sp, #4]
    aed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aedc:	1c5a      	adds	r2, r3, #1
    aede:	4904      	ldr	r1, [pc, #16]	; (aef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    aee0:	9b01      	ldr	r3, [sp, #4]
    aee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aee6:	bf00      	nop
    aee8:	b003      	add	sp, #12
    aeea:	f85d fb04 	ldr.w	pc, [sp], #4
    aeee:	bf00      	nop
    aef0:	1fff8dcc 	.word	0x1fff8dcc
    aef4:	1fff8dc8 	.word	0x1fff8dc8

0000aef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    aef8:	b500      	push	{lr}
    aefa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aefc:	f7f5 fe2e 	bl	b5c <Sys_GetCoreID>
    af00:	4603      	mov	r3, r0
    af02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    af04:	4a0d      	ldr	r2, [pc, #52]	; (af3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    af06:	9b01      	ldr	r3, [sp, #4]
    af08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af0c:	1e5a      	subs	r2, r3, #1
    af0e:	490b      	ldr	r1, [pc, #44]	; (af3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    af10:	9b01      	ldr	r3, [sp, #4]
    af12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    af16:	4a0a      	ldr	r2, [pc, #40]	; (af40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    af18:	9b01      	ldr	r3, [sp, #4]
    af1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af1e:	f003 0301 	and.w	r3, r3, #1
    af22:	2b00      	cmp	r3, #0
    af24:	d106      	bne.n	af34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    af26:	4a05      	ldr	r2, [pc, #20]	; (af3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    af28:	9b01      	ldr	r3, [sp, #4]
    af2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af2e:	2b00      	cmp	r3, #0
    af30:	d100      	bne.n	af34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af34:	bf00      	nop
    af36:	b003      	add	sp, #12
    af38:	f85d fb04 	ldr.w	pc, [sp], #4
    af3c:	1fff8dcc 	.word	0x1fff8dcc
    af40:	1fff8dc8 	.word	0x1fff8dc8

0000af44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    af44:	b500      	push	{lr}
    af46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af48:	f7f5 fe08 	bl	b5c <Sys_GetCoreID>
    af4c:	4603      	mov	r3, r0
    af4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    af50:	4a10      	ldr	r2, [pc, #64]	; (af94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    af52:	9b01      	ldr	r3, [sp, #4]
    af54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af58:	2b00      	cmp	r3, #0
    af5a:	d10d      	bne.n	af78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af5c:	f7f5 fd1c 	bl	998 <Adc_schm_read_msr>
    af60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af62:	9b00      	ldr	r3, [sp, #0]
    af64:	f003 0301 	and.w	r3, r3, #1
    af68:	2b00      	cmp	r3, #0
    af6a:	d100      	bne.n	af6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    af6e:	490a      	ldr	r1, [pc, #40]	; (af98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	9a00      	ldr	r2, [sp, #0]
    af74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    af78:	4a06      	ldr	r2, [pc, #24]	; (af94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    af7a:	9b01      	ldr	r3, [sp, #4]
    af7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af80:	1c5a      	adds	r2, r3, #1
    af82:	4904      	ldr	r1, [pc, #16]	; (af94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    af84:	9b01      	ldr	r3, [sp, #4]
    af86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af8a:	bf00      	nop
    af8c:	b003      	add	sp, #12
    af8e:	f85d fb04 	ldr.w	pc, [sp], #4
    af92:	bf00      	nop
    af94:	1fff8dd4 	.word	0x1fff8dd4
    af98:	1fff8dd0 	.word	0x1fff8dd0

0000af9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    af9c:	b500      	push	{lr}
    af9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afa0:	f7f5 fddc 	bl	b5c <Sys_GetCoreID>
    afa4:	4603      	mov	r3, r0
    afa6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    afa8:	4a0d      	ldr	r2, [pc, #52]	; (afe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    afaa:	9b01      	ldr	r3, [sp, #4]
    afac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afb0:	1e5a      	subs	r2, r3, #1
    afb2:	490b      	ldr	r1, [pc, #44]	; (afe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    afb4:	9b01      	ldr	r3, [sp, #4]
    afb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    afba:	4a0a      	ldr	r2, [pc, #40]	; (afe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    afbc:	9b01      	ldr	r3, [sp, #4]
    afbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc2:	f003 0301 	and.w	r3, r3, #1
    afc6:	2b00      	cmp	r3, #0
    afc8:	d106      	bne.n	afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    afca:	4a05      	ldr	r2, [pc, #20]	; (afe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    afcc:	9b01      	ldr	r3, [sp, #4]
    afce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afd2:	2b00      	cmp	r3, #0
    afd4:	d100      	bne.n	afd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    afd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    afd8:	bf00      	nop
    afda:	b003      	add	sp, #12
    afdc:	f85d fb04 	ldr.w	pc, [sp], #4
    afe0:	1fff8dd4 	.word	0x1fff8dd4
    afe4:	1fff8dd0 	.word	0x1fff8dd0

0000afe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    afe8:	b500      	push	{lr}
    afea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afec:	f7f5 fdb6 	bl	b5c <Sys_GetCoreID>
    aff0:	4603      	mov	r3, r0
    aff2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    aff4:	4a10      	ldr	r2, [pc, #64]	; (b038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    aff6:	9b01      	ldr	r3, [sp, #4]
    aff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    affc:	2b00      	cmp	r3, #0
    affe:	d10d      	bne.n	b01c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b000:	f7f5 fcca 	bl	998 <Adc_schm_read_msr>
    b004:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b006:	9b00      	ldr	r3, [sp, #0]
    b008:	f003 0301 	and.w	r3, r3, #1
    b00c:	2b00      	cmp	r3, #0
    b00e:	d100      	bne.n	b012 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b010:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    b012:	490a      	ldr	r1, [pc, #40]	; (b03c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    b014:	9b01      	ldr	r3, [sp, #4]
    b016:	9a00      	ldr	r2, [sp, #0]
    b018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    b01c:	4a06      	ldr	r2, [pc, #24]	; (b038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b01e:	9b01      	ldr	r3, [sp, #4]
    b020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b024:	1c5a      	adds	r2, r3, #1
    b026:	4904      	ldr	r1, [pc, #16]	; (b038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b028:	9b01      	ldr	r3, [sp, #4]
    b02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b02e:	bf00      	nop
    b030:	b003      	add	sp, #12
    b032:	f85d fb04 	ldr.w	pc, [sp], #4
    b036:	bf00      	nop
    b038:	1fff8ddc 	.word	0x1fff8ddc
    b03c:	1fff8dd8 	.word	0x1fff8dd8

0000b040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b040:	b500      	push	{lr}
    b042:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b044:	f7f5 fd8a 	bl	b5c <Sys_GetCoreID>
    b048:	4603      	mov	r3, r0
    b04a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    b04c:	4a0d      	ldr	r2, [pc, #52]	; (b084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b04e:	9b01      	ldr	r3, [sp, #4]
    b050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b054:	1e5a      	subs	r2, r3, #1
    b056:	490b      	ldr	r1, [pc, #44]	; (b084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b058:	9b01      	ldr	r3, [sp, #4]
    b05a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    b05e:	4a0a      	ldr	r2, [pc, #40]	; (b088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    b060:	9b01      	ldr	r3, [sp, #4]
    b062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b066:	f003 0301 	and.w	r3, r3, #1
    b06a:	2b00      	cmp	r3, #0
    b06c:	d106      	bne.n	b07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    b06e:	4a05      	ldr	r2, [pc, #20]	; (b084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b070:	9b01      	ldr	r3, [sp, #4]
    b072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b076:	2b00      	cmp	r3, #0
    b078:	d100      	bne.n	b07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b07a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b07c:	bf00      	nop
    b07e:	b003      	add	sp, #12
    b080:	f85d fb04 	ldr.w	pc, [sp], #4
    b084:	1fff8ddc 	.word	0x1fff8ddc
    b088:	1fff8dd8 	.word	0x1fff8dd8

0000b08c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b08c:	b500      	push	{lr}
    b08e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b090:	f7f5 fd64 	bl	b5c <Sys_GetCoreID>
    b094:	4603      	mov	r3, r0
    b096:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    b098:	4a10      	ldr	r2, [pc, #64]	; (b0dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b09a:	9b01      	ldr	r3, [sp, #4]
    b09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d10d      	bne.n	b0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0a4:	f7f5 fc78 	bl	998 <Adc_schm_read_msr>
    b0a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0aa:	9b00      	ldr	r3, [sp, #0]
    b0ac:	f003 0301 	and.w	r3, r3, #1
    b0b0:	2b00      	cmp	r3, #0
    b0b2:	d100      	bne.n	b0b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    b0b6:	490a      	ldr	r1, [pc, #40]	; (b0e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    b0b8:	9b01      	ldr	r3, [sp, #4]
    b0ba:	9a00      	ldr	r2, [sp, #0]
    b0bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    b0c0:	4a06      	ldr	r2, [pc, #24]	; (b0dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b0c2:	9b01      	ldr	r3, [sp, #4]
    b0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0c8:	1c5a      	adds	r2, r3, #1
    b0ca:	4904      	ldr	r1, [pc, #16]	; (b0dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b0cc:	9b01      	ldr	r3, [sp, #4]
    b0ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b0d2:	bf00      	nop
    b0d4:	b003      	add	sp, #12
    b0d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b0da:	bf00      	nop
    b0dc:	1fff8de4 	.word	0x1fff8de4
    b0e0:	1fff8de0 	.word	0x1fff8de0

0000b0e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b0e4:	b500      	push	{lr}
    b0e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0e8:	f7f5 fd38 	bl	b5c <Sys_GetCoreID>
    b0ec:	4603      	mov	r3, r0
    b0ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    b0f0:	4a0d      	ldr	r2, [pc, #52]	; (b128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b0f2:	9b01      	ldr	r3, [sp, #4]
    b0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0f8:	1e5a      	subs	r2, r3, #1
    b0fa:	490b      	ldr	r1, [pc, #44]	; (b128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b0fc:	9b01      	ldr	r3, [sp, #4]
    b0fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    b102:	4a0a      	ldr	r2, [pc, #40]	; (b12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    b104:	9b01      	ldr	r3, [sp, #4]
    b106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10a:	f003 0301 	and.w	r3, r3, #1
    b10e:	2b00      	cmp	r3, #0
    b110:	d106      	bne.n	b120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    b112:	4a05      	ldr	r2, [pc, #20]	; (b128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b114:	9b01      	ldr	r3, [sp, #4]
    b116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b11a:	2b00      	cmp	r3, #0
    b11c:	d100      	bne.n	b120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b11e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b120:	bf00      	nop
    b122:	b003      	add	sp, #12
    b124:	f85d fb04 	ldr.w	pc, [sp], #4
    b128:	1fff8de4 	.word	0x1fff8de4
    b12c:	1fff8de0 	.word	0x1fff8de0

0000b130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b130:	b500      	push	{lr}
    b132:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b134:	f7f5 fd12 	bl	b5c <Sys_GetCoreID>
    b138:	4603      	mov	r3, r0
    b13a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    b13c:	4a10      	ldr	r2, [pc, #64]	; (b180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b13e:	9b01      	ldr	r3, [sp, #4]
    b140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b144:	2b00      	cmp	r3, #0
    b146:	d10d      	bne.n	b164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b148:	f7f5 fc26 	bl	998 <Adc_schm_read_msr>
    b14c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b14e:	9b00      	ldr	r3, [sp, #0]
    b150:	f003 0301 	and.w	r3, r3, #1
    b154:	2b00      	cmp	r3, #0
    b156:	d100      	bne.n	b15a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b158:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    b15a:	490a      	ldr	r1, [pc, #40]	; (b184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    b15c:	9b01      	ldr	r3, [sp, #4]
    b15e:	9a00      	ldr	r2, [sp, #0]
    b160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    b164:	4a06      	ldr	r2, [pc, #24]	; (b180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b166:	9b01      	ldr	r3, [sp, #4]
    b168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b16c:	1c5a      	adds	r2, r3, #1
    b16e:	4904      	ldr	r1, [pc, #16]	; (b180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b170:	9b01      	ldr	r3, [sp, #4]
    b172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b176:	bf00      	nop
    b178:	b003      	add	sp, #12
    b17a:	f85d fb04 	ldr.w	pc, [sp], #4
    b17e:	bf00      	nop
    b180:	1fff8dec 	.word	0x1fff8dec
    b184:	1fff8de8 	.word	0x1fff8de8

0000b188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b188:	b500      	push	{lr}
    b18a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b18c:	f7f5 fce6 	bl	b5c <Sys_GetCoreID>
    b190:	4603      	mov	r3, r0
    b192:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    b194:	4a0d      	ldr	r2, [pc, #52]	; (b1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b196:	9b01      	ldr	r3, [sp, #4]
    b198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b19c:	1e5a      	subs	r2, r3, #1
    b19e:	490b      	ldr	r1, [pc, #44]	; (b1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b1a0:	9b01      	ldr	r3, [sp, #4]
    b1a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    b1a6:	4a0a      	ldr	r2, [pc, #40]	; (b1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    b1a8:	9b01      	ldr	r3, [sp, #4]
    b1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ae:	f003 0301 	and.w	r3, r3, #1
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d106      	bne.n	b1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b1b6:	4a05      	ldr	r2, [pc, #20]	; (b1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b1b8:	9b01      	ldr	r3, [sp, #4]
    b1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d100      	bne.n	b1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b1c4:	bf00      	nop
    b1c6:	b003      	add	sp, #12
    b1c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b1cc:	1fff8dec 	.word	0x1fff8dec
    b1d0:	1fff8de8 	.word	0x1fff8de8

0000b1d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b1d4:	b500      	push	{lr}
    b1d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1d8:	f7f5 fcc0 	bl	b5c <Sys_GetCoreID>
    b1dc:	4603      	mov	r3, r0
    b1de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b1e0:	4a10      	ldr	r2, [pc, #64]	; (b224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b1e2:	9b01      	ldr	r3, [sp, #4]
    b1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d10d      	bne.n	b208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b1ec:	f7f5 fbd4 	bl	998 <Adc_schm_read_msr>
    b1f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b1f2:	9b00      	ldr	r3, [sp, #0]
    b1f4:	f003 0301 	and.w	r3, r3, #1
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d100      	bne.n	b1fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b1fe:	490a      	ldr	r1, [pc, #40]	; (b228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b200:	9b01      	ldr	r3, [sp, #4]
    b202:	9a00      	ldr	r2, [sp, #0]
    b204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b208:	4a06      	ldr	r2, [pc, #24]	; (b224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b20a:	9b01      	ldr	r3, [sp, #4]
    b20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b210:	1c5a      	adds	r2, r3, #1
    b212:	4904      	ldr	r1, [pc, #16]	; (b224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b214:	9b01      	ldr	r3, [sp, #4]
    b216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b21a:	bf00      	nop
    b21c:	b003      	add	sp, #12
    b21e:	f85d fb04 	ldr.w	pc, [sp], #4
    b222:	bf00      	nop
    b224:	1fff8df4 	.word	0x1fff8df4
    b228:	1fff8df0 	.word	0x1fff8df0

0000b22c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b22c:	b500      	push	{lr}
    b22e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b230:	f7f5 fc94 	bl	b5c <Sys_GetCoreID>
    b234:	4603      	mov	r3, r0
    b236:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b238:	4a0d      	ldr	r2, [pc, #52]	; (b270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b23a:	9b01      	ldr	r3, [sp, #4]
    b23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b240:	1e5a      	subs	r2, r3, #1
    b242:	490b      	ldr	r1, [pc, #44]	; (b270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b244:	9b01      	ldr	r3, [sp, #4]
    b246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b24a:	4a0a      	ldr	r2, [pc, #40]	; (b274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b24c:	9b01      	ldr	r3, [sp, #4]
    b24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b252:	f003 0301 	and.w	r3, r3, #1
    b256:	2b00      	cmp	r3, #0
    b258:	d106      	bne.n	b268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b25a:	4a05      	ldr	r2, [pc, #20]	; (b270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b25c:	9b01      	ldr	r3, [sp, #4]
    b25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b262:	2b00      	cmp	r3, #0
    b264:	d100      	bne.n	b268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b266:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b268:	bf00      	nop
    b26a:	b003      	add	sp, #12
    b26c:	f85d fb04 	ldr.w	pc, [sp], #4
    b270:	1fff8df4 	.word	0x1fff8df4
    b274:	1fff8df0 	.word	0x1fff8df0

0000b278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b278:	b500      	push	{lr}
    b27a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b27c:	f7f5 fc6e 	bl	b5c <Sys_GetCoreID>
    b280:	4603      	mov	r3, r0
    b282:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b284:	4a10      	ldr	r2, [pc, #64]	; (b2c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b286:	9b01      	ldr	r3, [sp, #4]
    b288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b28c:	2b00      	cmp	r3, #0
    b28e:	d10d      	bne.n	b2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b290:	f7f5 fb82 	bl	998 <Adc_schm_read_msr>
    b294:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b296:	9b00      	ldr	r3, [sp, #0]
    b298:	f003 0301 	and.w	r3, r3, #1
    b29c:	2b00      	cmp	r3, #0
    b29e:	d100      	bne.n	b2a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b2a2:	490a      	ldr	r1, [pc, #40]	; (b2cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b2a4:	9b01      	ldr	r3, [sp, #4]
    b2a6:	9a00      	ldr	r2, [sp, #0]
    b2a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b2ac:	4a06      	ldr	r2, [pc, #24]	; (b2c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b2ae:	9b01      	ldr	r3, [sp, #4]
    b2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2b4:	1c5a      	adds	r2, r3, #1
    b2b6:	4904      	ldr	r1, [pc, #16]	; (b2c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b2b8:	9b01      	ldr	r3, [sp, #4]
    b2ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2be:	bf00      	nop
    b2c0:	b003      	add	sp, #12
    b2c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b2c6:	bf00      	nop
    b2c8:	1fff8dfc 	.word	0x1fff8dfc
    b2cc:	1fff8df8 	.word	0x1fff8df8

0000b2d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b2d0:	b500      	push	{lr}
    b2d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2d4:	f7f5 fc42 	bl	b5c <Sys_GetCoreID>
    b2d8:	4603      	mov	r3, r0
    b2da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b2dc:	4a0d      	ldr	r2, [pc, #52]	; (b314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b2de:	9b01      	ldr	r3, [sp, #4]
    b2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e4:	1e5a      	subs	r2, r3, #1
    b2e6:	490b      	ldr	r1, [pc, #44]	; (b314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b2e8:	9b01      	ldr	r3, [sp, #4]
    b2ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b2ee:	4a0a      	ldr	r2, [pc, #40]	; (b318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b2f0:	9b01      	ldr	r3, [sp, #4]
    b2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f6:	f003 0301 	and.w	r3, r3, #1
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d106      	bne.n	b30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b2fe:	4a05      	ldr	r2, [pc, #20]	; (b314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b306:	2b00      	cmp	r3, #0
    b308:	d100      	bne.n	b30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b30a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b30c:	bf00      	nop
    b30e:	b003      	add	sp, #12
    b310:	f85d fb04 	ldr.w	pc, [sp], #4
    b314:	1fff8dfc 	.word	0x1fff8dfc
    b318:	1fff8df8 	.word	0x1fff8df8

0000b31c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b31c:	b500      	push	{lr}
    b31e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b320:	f7f5 fc1c 	bl	b5c <Sys_GetCoreID>
    b324:	4603      	mov	r3, r0
    b326:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b328:	4a10      	ldr	r2, [pc, #64]	; (b36c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b32a:	9b01      	ldr	r3, [sp, #4]
    b32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b330:	2b00      	cmp	r3, #0
    b332:	d10d      	bne.n	b350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b334:	f7f5 fb30 	bl	998 <Adc_schm_read_msr>
    b338:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b33a:	9b00      	ldr	r3, [sp, #0]
    b33c:	f003 0301 	and.w	r3, r3, #1
    b340:	2b00      	cmp	r3, #0
    b342:	d100      	bne.n	b346 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b344:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b346:	490a      	ldr	r1, [pc, #40]	; (b370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b348:	9b01      	ldr	r3, [sp, #4]
    b34a:	9a00      	ldr	r2, [sp, #0]
    b34c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b350:	4a06      	ldr	r2, [pc, #24]	; (b36c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b352:	9b01      	ldr	r3, [sp, #4]
    b354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b358:	1c5a      	adds	r2, r3, #1
    b35a:	4904      	ldr	r1, [pc, #16]	; (b36c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b35c:	9b01      	ldr	r3, [sp, #4]
    b35e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b362:	bf00      	nop
    b364:	b003      	add	sp, #12
    b366:	f85d fb04 	ldr.w	pc, [sp], #4
    b36a:	bf00      	nop
    b36c:	1fff8e04 	.word	0x1fff8e04
    b370:	1fff8e00 	.word	0x1fff8e00

0000b374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b374:	b500      	push	{lr}
    b376:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b378:	f7f5 fbf0 	bl	b5c <Sys_GetCoreID>
    b37c:	4603      	mov	r3, r0
    b37e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b380:	4a0d      	ldr	r2, [pc, #52]	; (b3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b382:	9b01      	ldr	r3, [sp, #4]
    b384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b388:	1e5a      	subs	r2, r3, #1
    b38a:	490b      	ldr	r1, [pc, #44]	; (b3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b38c:	9b01      	ldr	r3, [sp, #4]
    b38e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b392:	4a0a      	ldr	r2, [pc, #40]	; (b3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b394:	9b01      	ldr	r3, [sp, #4]
    b396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b39a:	f003 0301 	and.w	r3, r3, #1
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d106      	bne.n	b3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b3a2:	4a05      	ldr	r2, [pc, #20]	; (b3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b3a4:	9b01      	ldr	r3, [sp, #4]
    b3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	d100      	bne.n	b3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3b0:	bf00      	nop
    b3b2:	b003      	add	sp, #12
    b3b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b3b8:	1fff8e04 	.word	0x1fff8e04
    b3bc:	1fff8e00 	.word	0x1fff8e00

0000b3c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b3c0:	b500      	push	{lr}
    b3c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3c4:	f7f5 fbca 	bl	b5c <Sys_GetCoreID>
    b3c8:	4603      	mov	r3, r0
    b3ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b3cc:	4a10      	ldr	r2, [pc, #64]	; (b410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b3ce:	9b01      	ldr	r3, [sp, #4]
    b3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d10d      	bne.n	b3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3d8:	f7f5 fade 	bl	998 <Adc_schm_read_msr>
    b3dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3de:	9b00      	ldr	r3, [sp, #0]
    b3e0:	f003 0301 	and.w	r3, r3, #1
    b3e4:	2b00      	cmp	r3, #0
    b3e6:	d100      	bne.n	b3ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b3ea:	490a      	ldr	r1, [pc, #40]	; (b414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b3ec:	9b01      	ldr	r3, [sp, #4]
    b3ee:	9a00      	ldr	r2, [sp, #0]
    b3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b3f4:	4a06      	ldr	r2, [pc, #24]	; (b410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b3f6:	9b01      	ldr	r3, [sp, #4]
    b3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3fc:	1c5a      	adds	r2, r3, #1
    b3fe:	4904      	ldr	r1, [pc, #16]	; (b410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b400:	9b01      	ldr	r3, [sp, #4]
    b402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b406:	bf00      	nop
    b408:	b003      	add	sp, #12
    b40a:	f85d fb04 	ldr.w	pc, [sp], #4
    b40e:	bf00      	nop
    b410:	1fff8e0c 	.word	0x1fff8e0c
    b414:	1fff8e08 	.word	0x1fff8e08

0000b418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b418:	b500      	push	{lr}
    b41a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b41c:	f7f5 fb9e 	bl	b5c <Sys_GetCoreID>
    b420:	4603      	mov	r3, r0
    b422:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b424:	4a0d      	ldr	r2, [pc, #52]	; (b45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b426:	9b01      	ldr	r3, [sp, #4]
    b428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b42c:	1e5a      	subs	r2, r3, #1
    b42e:	490b      	ldr	r1, [pc, #44]	; (b45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b430:	9b01      	ldr	r3, [sp, #4]
    b432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b436:	4a0a      	ldr	r2, [pc, #40]	; (b460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b438:	9b01      	ldr	r3, [sp, #4]
    b43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b43e:	f003 0301 	and.w	r3, r3, #1
    b442:	2b00      	cmp	r3, #0
    b444:	d106      	bne.n	b454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b446:	4a05      	ldr	r2, [pc, #20]	; (b45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b448:	9b01      	ldr	r3, [sp, #4]
    b44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b44e:	2b00      	cmp	r3, #0
    b450:	d100      	bne.n	b454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b452:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b454:	bf00      	nop
    b456:	b003      	add	sp, #12
    b458:	f85d fb04 	ldr.w	pc, [sp], #4
    b45c:	1fff8e0c 	.word	0x1fff8e0c
    b460:	1fff8e08 	.word	0x1fff8e08

0000b464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b464:	b500      	push	{lr}
    b466:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b468:	f7f5 fb78 	bl	b5c <Sys_GetCoreID>
    b46c:	4603      	mov	r3, r0
    b46e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b470:	4a10      	ldr	r2, [pc, #64]	; (b4b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b472:	9b01      	ldr	r3, [sp, #4]
    b474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b478:	2b00      	cmp	r3, #0
    b47a:	d10d      	bne.n	b498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b47c:	f7f5 fa8c 	bl	998 <Adc_schm_read_msr>
    b480:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b482:	9b00      	ldr	r3, [sp, #0]
    b484:	f003 0301 	and.w	r3, r3, #1
    b488:	2b00      	cmp	r3, #0
    b48a:	d100      	bne.n	b48e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b48c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b48e:	490a      	ldr	r1, [pc, #40]	; (b4b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b490:	9b01      	ldr	r3, [sp, #4]
    b492:	9a00      	ldr	r2, [sp, #0]
    b494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b498:	4a06      	ldr	r2, [pc, #24]	; (b4b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b49a:	9b01      	ldr	r3, [sp, #4]
    b49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4a0:	1c5a      	adds	r2, r3, #1
    b4a2:	4904      	ldr	r1, [pc, #16]	; (b4b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b4a4:	9b01      	ldr	r3, [sp, #4]
    b4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4aa:	bf00      	nop
    b4ac:	b003      	add	sp, #12
    b4ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b4b2:	bf00      	nop
    b4b4:	1fff8e14 	.word	0x1fff8e14
    b4b8:	1fff8e10 	.word	0x1fff8e10

0000b4bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b4bc:	b500      	push	{lr}
    b4be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4c0:	f7f5 fb4c 	bl	b5c <Sys_GetCoreID>
    b4c4:	4603      	mov	r3, r0
    b4c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b4c8:	4a0d      	ldr	r2, [pc, #52]	; (b500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b4ca:	9b01      	ldr	r3, [sp, #4]
    b4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4d0:	1e5a      	subs	r2, r3, #1
    b4d2:	490b      	ldr	r1, [pc, #44]	; (b500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b4d4:	9b01      	ldr	r3, [sp, #4]
    b4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b4da:	4a0a      	ldr	r2, [pc, #40]	; (b504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b4dc:	9b01      	ldr	r3, [sp, #4]
    b4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e2:	f003 0301 	and.w	r3, r3, #1
    b4e6:	2b00      	cmp	r3, #0
    b4e8:	d106      	bne.n	b4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b4ea:	4a05      	ldr	r2, [pc, #20]	; (b500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b4ec:	9b01      	ldr	r3, [sp, #4]
    b4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f2:	2b00      	cmp	r3, #0
    b4f4:	d100      	bne.n	b4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4f8:	bf00      	nop
    b4fa:	b003      	add	sp, #12
    b4fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b500:	1fff8e14 	.word	0x1fff8e14
    b504:	1fff8e10 	.word	0x1fff8e10

0000b508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b508:	b500      	push	{lr}
    b50a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b50c:	f7f5 fb26 	bl	b5c <Sys_GetCoreID>
    b510:	4603      	mov	r3, r0
    b512:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b514:	4a10      	ldr	r2, [pc, #64]	; (b558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b516:	9b01      	ldr	r3, [sp, #4]
    b518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b51c:	2b00      	cmp	r3, #0
    b51e:	d10d      	bne.n	b53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b520:	f7f5 fa3a 	bl	998 <Adc_schm_read_msr>
    b524:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b526:	9b00      	ldr	r3, [sp, #0]
    b528:	f003 0301 	and.w	r3, r3, #1
    b52c:	2b00      	cmp	r3, #0
    b52e:	d100      	bne.n	b532 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b530:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b532:	490a      	ldr	r1, [pc, #40]	; (b55c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b534:	9b01      	ldr	r3, [sp, #4]
    b536:	9a00      	ldr	r2, [sp, #0]
    b538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b53c:	4a06      	ldr	r2, [pc, #24]	; (b558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b53e:	9b01      	ldr	r3, [sp, #4]
    b540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b544:	1c5a      	adds	r2, r3, #1
    b546:	4904      	ldr	r1, [pc, #16]	; (b558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b548:	9b01      	ldr	r3, [sp, #4]
    b54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b54e:	bf00      	nop
    b550:	b003      	add	sp, #12
    b552:	f85d fb04 	ldr.w	pc, [sp], #4
    b556:	bf00      	nop
    b558:	1fff8e1c 	.word	0x1fff8e1c
    b55c:	1fff8e18 	.word	0x1fff8e18

0000b560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b560:	b500      	push	{lr}
    b562:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b564:	f7f5 fafa 	bl	b5c <Sys_GetCoreID>
    b568:	4603      	mov	r3, r0
    b56a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b56c:	4a0d      	ldr	r2, [pc, #52]	; (b5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b56e:	9b01      	ldr	r3, [sp, #4]
    b570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b574:	1e5a      	subs	r2, r3, #1
    b576:	490b      	ldr	r1, [pc, #44]	; (b5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b578:	9b01      	ldr	r3, [sp, #4]
    b57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b57e:	4a0a      	ldr	r2, [pc, #40]	; (b5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b580:	9b01      	ldr	r3, [sp, #4]
    b582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b586:	f003 0301 	and.w	r3, r3, #1
    b58a:	2b00      	cmp	r3, #0
    b58c:	d106      	bne.n	b59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b58e:	4a05      	ldr	r2, [pc, #20]	; (b5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b590:	9b01      	ldr	r3, [sp, #4]
    b592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b596:	2b00      	cmp	r3, #0
    b598:	d100      	bne.n	b59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b59a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b59c:	bf00      	nop
    b59e:	b003      	add	sp, #12
    b5a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b5a4:	1fff8e1c 	.word	0x1fff8e1c
    b5a8:	1fff8e18 	.word	0x1fff8e18

0000b5ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b5ac:	b500      	push	{lr}
    b5ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5b0:	f7f5 fad4 	bl	b5c <Sys_GetCoreID>
    b5b4:	4603      	mov	r3, r0
    b5b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    b5b8:	4a10      	ldr	r2, [pc, #64]	; (b5fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b5ba:	9b01      	ldr	r3, [sp, #4]
    b5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c0:	2b00      	cmp	r3, #0
    b5c2:	d10d      	bne.n	b5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5c4:	f7f5 f9e8 	bl	998 <Adc_schm_read_msr>
    b5c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5ca:	9b00      	ldr	r3, [sp, #0]
    b5cc:	f003 0301 	and.w	r3, r3, #1
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	d100      	bne.n	b5d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b5d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b5d6:	490a      	ldr	r1, [pc, #40]	; (b600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    b5d8:	9b01      	ldr	r3, [sp, #4]
    b5da:	9a00      	ldr	r2, [sp, #0]
    b5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    b5e0:	4a06      	ldr	r2, [pc, #24]	; (b5fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b5e2:	9b01      	ldr	r3, [sp, #4]
    b5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5e8:	1c5a      	adds	r2, r3, #1
    b5ea:	4904      	ldr	r1, [pc, #16]	; (b5fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b5ec:	9b01      	ldr	r3, [sp, #4]
    b5ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5f2:	bf00      	nop
    b5f4:	b003      	add	sp, #12
    b5f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b5fa:	bf00      	nop
    b5fc:	1fff8e24 	.word	0x1fff8e24
    b600:	1fff8e20 	.word	0x1fff8e20

0000b604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b604:	b500      	push	{lr}
    b606:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b608:	f7f5 faa8 	bl	b5c <Sys_GetCoreID>
    b60c:	4603      	mov	r3, r0
    b60e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    b610:	4a0d      	ldr	r2, [pc, #52]	; (b648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b612:	9b01      	ldr	r3, [sp, #4]
    b614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b618:	1e5a      	subs	r2, r3, #1
    b61a:	490b      	ldr	r1, [pc, #44]	; (b648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b61c:	9b01      	ldr	r3, [sp, #4]
    b61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b622:	4a0a      	ldr	r2, [pc, #40]	; (b64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    b624:	9b01      	ldr	r3, [sp, #4]
    b626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b62a:	f003 0301 	and.w	r3, r3, #1
    b62e:	2b00      	cmp	r3, #0
    b630:	d106      	bne.n	b640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    b632:	4a05      	ldr	r2, [pc, #20]	; (b648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b634:	9b01      	ldr	r3, [sp, #4]
    b636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b63a:	2b00      	cmp	r3, #0
    b63c:	d100      	bne.n	b640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b63e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b640:	bf00      	nop
    b642:	b003      	add	sp, #12
    b644:	f85d fb04 	ldr.w	pc, [sp], #4
    b648:	1fff8e24 	.word	0x1fff8e24
    b64c:	1fff8e20 	.word	0x1fff8e20

0000b650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b650:	b500      	push	{lr}
    b652:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b654:	f7f5 fa82 	bl	b5c <Sys_GetCoreID>
    b658:	4603      	mov	r3, r0
    b65a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    b65c:	4a10      	ldr	r2, [pc, #64]	; (b6a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b65e:	9b01      	ldr	r3, [sp, #4]
    b660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b664:	2b00      	cmp	r3, #0
    b666:	d10d      	bne.n	b684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b668:	f7f5 f996 	bl	998 <Adc_schm_read_msr>
    b66c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b66e:	9b00      	ldr	r3, [sp, #0]
    b670:	f003 0301 	and.w	r3, r3, #1
    b674:	2b00      	cmp	r3, #0
    b676:	d100      	bne.n	b67a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b678:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b67a:	490a      	ldr	r1, [pc, #40]	; (b6a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    b67c:	9b01      	ldr	r3, [sp, #4]
    b67e:	9a00      	ldr	r2, [sp, #0]
    b680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    b684:	4a06      	ldr	r2, [pc, #24]	; (b6a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b686:	9b01      	ldr	r3, [sp, #4]
    b688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b68c:	1c5a      	adds	r2, r3, #1
    b68e:	4904      	ldr	r1, [pc, #16]	; (b6a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b690:	9b01      	ldr	r3, [sp, #4]
    b692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b696:	bf00      	nop
    b698:	b003      	add	sp, #12
    b69a:	f85d fb04 	ldr.w	pc, [sp], #4
    b69e:	bf00      	nop
    b6a0:	1fff8e2c 	.word	0x1fff8e2c
    b6a4:	1fff8e28 	.word	0x1fff8e28

0000b6a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b6a8:	b500      	push	{lr}
    b6aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6ac:	f7f5 fa56 	bl	b5c <Sys_GetCoreID>
    b6b0:	4603      	mov	r3, r0
    b6b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    b6b4:	4a0d      	ldr	r2, [pc, #52]	; (b6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b6b6:	9b01      	ldr	r3, [sp, #4]
    b6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6bc:	1e5a      	subs	r2, r3, #1
    b6be:	490b      	ldr	r1, [pc, #44]	; (b6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b6c0:	9b01      	ldr	r3, [sp, #4]
    b6c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b6c6:	4a0a      	ldr	r2, [pc, #40]	; (b6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    b6c8:	9b01      	ldr	r3, [sp, #4]
    b6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6ce:	f003 0301 	and.w	r3, r3, #1
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d106      	bne.n	b6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    b6d6:	4a05      	ldr	r2, [pc, #20]	; (b6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b6d8:	9b01      	ldr	r3, [sp, #4]
    b6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d100      	bne.n	b6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b6e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b6e4:	bf00      	nop
    b6e6:	b003      	add	sp, #12
    b6e8:	f85d fb04 	ldr.w	pc, [sp], #4
    b6ec:	1fff8e2c 	.word	0x1fff8e2c
    b6f0:	1fff8e28 	.word	0x1fff8e28

0000b6f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b6f4:	b500      	push	{lr}
    b6f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6f8:	f7f5 fa30 	bl	b5c <Sys_GetCoreID>
    b6fc:	4603      	mov	r3, r0
    b6fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    b700:	4a10      	ldr	r2, [pc, #64]	; (b744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b702:	9b01      	ldr	r3, [sp, #4]
    b704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b708:	2b00      	cmp	r3, #0
    b70a:	d10d      	bne.n	b728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b70c:	f7f5 f944 	bl	998 <Adc_schm_read_msr>
    b710:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b712:	9b00      	ldr	r3, [sp, #0]
    b714:	f003 0301 	and.w	r3, r3, #1
    b718:	2b00      	cmp	r3, #0
    b71a:	d100      	bne.n	b71e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b71c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b71e:	490a      	ldr	r1, [pc, #40]	; (b748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    b720:	9b01      	ldr	r3, [sp, #4]
    b722:	9a00      	ldr	r2, [sp, #0]
    b724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    b728:	4a06      	ldr	r2, [pc, #24]	; (b744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b72a:	9b01      	ldr	r3, [sp, #4]
    b72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b730:	1c5a      	adds	r2, r3, #1
    b732:	4904      	ldr	r1, [pc, #16]	; (b744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b734:	9b01      	ldr	r3, [sp, #4]
    b736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b73a:	bf00      	nop
    b73c:	b003      	add	sp, #12
    b73e:	f85d fb04 	ldr.w	pc, [sp], #4
    b742:	bf00      	nop
    b744:	1fff8e34 	.word	0x1fff8e34
    b748:	1fff8e30 	.word	0x1fff8e30

0000b74c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b74c:	b500      	push	{lr}
    b74e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b750:	f7f5 fa04 	bl	b5c <Sys_GetCoreID>
    b754:	4603      	mov	r3, r0
    b756:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    b758:	4a0d      	ldr	r2, [pc, #52]	; (b790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b75a:	9b01      	ldr	r3, [sp, #4]
    b75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b760:	1e5a      	subs	r2, r3, #1
    b762:	490b      	ldr	r1, [pc, #44]	; (b790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b764:	9b01      	ldr	r3, [sp, #4]
    b766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b76a:	4a0a      	ldr	r2, [pc, #40]	; (b794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    b76c:	9b01      	ldr	r3, [sp, #4]
    b76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b772:	f003 0301 	and.w	r3, r3, #1
    b776:	2b00      	cmp	r3, #0
    b778:	d106      	bne.n	b788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    b77a:	4a05      	ldr	r2, [pc, #20]	; (b790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b77c:	9b01      	ldr	r3, [sp, #4]
    b77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b782:	2b00      	cmp	r3, #0
    b784:	d100      	bne.n	b788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b786:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b788:	bf00      	nop
    b78a:	b003      	add	sp, #12
    b78c:	f85d fb04 	ldr.w	pc, [sp], #4
    b790:	1fff8e34 	.word	0x1fff8e34
    b794:	1fff8e30 	.word	0x1fff8e30

0000b798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b798:	b500      	push	{lr}
    b79a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b79c:	f7f5 f9de 	bl	b5c <Sys_GetCoreID>
    b7a0:	4603      	mov	r3, r0
    b7a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    b7a4:	4a10      	ldr	r2, [pc, #64]	; (b7e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b7a6:	9b01      	ldr	r3, [sp, #4]
    b7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d10d      	bne.n	b7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7b0:	f7f5 f8f2 	bl	998 <Adc_schm_read_msr>
    b7b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7b6:	9b00      	ldr	r3, [sp, #0]
    b7b8:	f003 0301 	and.w	r3, r3, #1
    b7bc:	2b00      	cmp	r3, #0
    b7be:	d100      	bne.n	b7c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b7c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b7c2:	490a      	ldr	r1, [pc, #40]	; (b7ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    b7c4:	9b01      	ldr	r3, [sp, #4]
    b7c6:	9a00      	ldr	r2, [sp, #0]
    b7c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    b7cc:	4a06      	ldr	r2, [pc, #24]	; (b7e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b7ce:	9b01      	ldr	r3, [sp, #4]
    b7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7d4:	1c5a      	adds	r2, r3, #1
    b7d6:	4904      	ldr	r1, [pc, #16]	; (b7e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b7d8:	9b01      	ldr	r3, [sp, #4]
    b7da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b7de:	bf00      	nop
    b7e0:	b003      	add	sp, #12
    b7e2:	f85d fb04 	ldr.w	pc, [sp], #4
    b7e6:	bf00      	nop
    b7e8:	1fff8e3c 	.word	0x1fff8e3c
    b7ec:	1fff8e38 	.word	0x1fff8e38

0000b7f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b7f0:	b500      	push	{lr}
    b7f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7f4:	f7f5 f9b2 	bl	b5c <Sys_GetCoreID>
    b7f8:	4603      	mov	r3, r0
    b7fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    b7fc:	4a0d      	ldr	r2, [pc, #52]	; (b834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b7fe:	9b01      	ldr	r3, [sp, #4]
    b800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b804:	1e5a      	subs	r2, r3, #1
    b806:	490b      	ldr	r1, [pc, #44]	; (b834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b808:	9b01      	ldr	r3, [sp, #4]
    b80a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b80e:	4a0a      	ldr	r2, [pc, #40]	; (b838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    b810:	9b01      	ldr	r3, [sp, #4]
    b812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b816:	f003 0301 	and.w	r3, r3, #1
    b81a:	2b00      	cmp	r3, #0
    b81c:	d106      	bne.n	b82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    b81e:	4a05      	ldr	r2, [pc, #20]	; (b834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b820:	9b01      	ldr	r3, [sp, #4]
    b822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b826:	2b00      	cmp	r3, #0
    b828:	d100      	bne.n	b82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b82a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b82c:	bf00      	nop
    b82e:	b003      	add	sp, #12
    b830:	f85d fb04 	ldr.w	pc, [sp], #4
    b834:	1fff8e3c 	.word	0x1fff8e3c
    b838:	1fff8e38 	.word	0x1fff8e38

0000b83c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b83c:	b500      	push	{lr}
    b83e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b840:	f7f5 f98c 	bl	b5c <Sys_GetCoreID>
    b844:	4603      	mov	r3, r0
    b846:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    b848:	4a10      	ldr	r2, [pc, #64]	; (b88c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b84a:	9b01      	ldr	r3, [sp, #4]
    b84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b850:	2b00      	cmp	r3, #0
    b852:	d10d      	bne.n	b870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b854:	f7f5 f8a0 	bl	998 <Adc_schm_read_msr>
    b858:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b85a:	9b00      	ldr	r3, [sp, #0]
    b85c:	f003 0301 	and.w	r3, r3, #1
    b860:	2b00      	cmp	r3, #0
    b862:	d100      	bne.n	b866 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b864:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b866:	490a      	ldr	r1, [pc, #40]	; (b890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    b868:	9b01      	ldr	r3, [sp, #4]
    b86a:	9a00      	ldr	r2, [sp, #0]
    b86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    b870:	4a06      	ldr	r2, [pc, #24]	; (b88c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b872:	9b01      	ldr	r3, [sp, #4]
    b874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b878:	1c5a      	adds	r2, r3, #1
    b87a:	4904      	ldr	r1, [pc, #16]	; (b88c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b87c:	9b01      	ldr	r3, [sp, #4]
    b87e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b882:	bf00      	nop
    b884:	b003      	add	sp, #12
    b886:	f85d fb04 	ldr.w	pc, [sp], #4
    b88a:	bf00      	nop
    b88c:	1fff8e44 	.word	0x1fff8e44
    b890:	1fff8e40 	.word	0x1fff8e40

0000b894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b894:	b500      	push	{lr}
    b896:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b898:	f7f5 f960 	bl	b5c <Sys_GetCoreID>
    b89c:	4603      	mov	r3, r0
    b89e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    b8a0:	4a0d      	ldr	r2, [pc, #52]	; (b8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b8a2:	9b01      	ldr	r3, [sp, #4]
    b8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8a8:	1e5a      	subs	r2, r3, #1
    b8aa:	490b      	ldr	r1, [pc, #44]	; (b8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b8ac:	9b01      	ldr	r3, [sp, #4]
    b8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b8b2:	4a0a      	ldr	r2, [pc, #40]	; (b8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    b8b4:	9b01      	ldr	r3, [sp, #4]
    b8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ba:	f003 0301 	and.w	r3, r3, #1
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d106      	bne.n	b8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    b8c2:	4a05      	ldr	r2, [pc, #20]	; (b8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b8c4:	9b01      	ldr	r3, [sp, #4]
    b8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d100      	bne.n	b8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b8ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b8d0:	bf00      	nop
    b8d2:	b003      	add	sp, #12
    b8d4:	f85d fb04 	ldr.w	pc, [sp], #4
    b8d8:	1fff8e44 	.word	0x1fff8e44
    b8dc:	1fff8e40 	.word	0x1fff8e40

0000b8e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b8e0:	b500      	push	{lr}
    b8e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8e4:	f7f5 f93a 	bl	b5c <Sys_GetCoreID>
    b8e8:	4603      	mov	r3, r0
    b8ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    b8ec:	4a10      	ldr	r2, [pc, #64]	; (b930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b8ee:	9b01      	ldr	r3, [sp, #4]
    b8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	d10d      	bne.n	b914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b8f8:	f7f5 f84e 	bl	998 <Adc_schm_read_msr>
    b8fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b8fe:	9b00      	ldr	r3, [sp, #0]
    b900:	f003 0301 	and.w	r3, r3, #1
    b904:	2b00      	cmp	r3, #0
    b906:	d100      	bne.n	b90a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b908:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b90a:	490a      	ldr	r1, [pc, #40]	; (b934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    b90c:	9b01      	ldr	r3, [sp, #4]
    b90e:	9a00      	ldr	r2, [sp, #0]
    b910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    b914:	4a06      	ldr	r2, [pc, #24]	; (b930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b916:	9b01      	ldr	r3, [sp, #4]
    b918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b91c:	1c5a      	adds	r2, r3, #1
    b91e:	4904      	ldr	r1, [pc, #16]	; (b930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b920:	9b01      	ldr	r3, [sp, #4]
    b922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b926:	bf00      	nop
    b928:	b003      	add	sp, #12
    b92a:	f85d fb04 	ldr.w	pc, [sp], #4
    b92e:	bf00      	nop
    b930:	1fff8e4c 	.word	0x1fff8e4c
    b934:	1fff8e48 	.word	0x1fff8e48

0000b938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b938:	b500      	push	{lr}
    b93a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b93c:	f7f5 f90e 	bl	b5c <Sys_GetCoreID>
    b940:	4603      	mov	r3, r0
    b942:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    b944:	4a0d      	ldr	r2, [pc, #52]	; (b97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b946:	9b01      	ldr	r3, [sp, #4]
    b948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b94c:	1e5a      	subs	r2, r3, #1
    b94e:	490b      	ldr	r1, [pc, #44]	; (b97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b950:	9b01      	ldr	r3, [sp, #4]
    b952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b956:	4a0a      	ldr	r2, [pc, #40]	; (b980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    b958:	9b01      	ldr	r3, [sp, #4]
    b95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b95e:	f003 0301 	and.w	r3, r3, #1
    b962:	2b00      	cmp	r3, #0
    b964:	d106      	bne.n	b974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    b966:	4a05      	ldr	r2, [pc, #20]	; (b97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b968:	9b01      	ldr	r3, [sp, #4]
    b96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b96e:	2b00      	cmp	r3, #0
    b970:	d100      	bne.n	b974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b972:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b974:	bf00      	nop
    b976:	b003      	add	sp, #12
    b978:	f85d fb04 	ldr.w	pc, [sp], #4
    b97c:	1fff8e4c 	.word	0x1fff8e4c
    b980:	1fff8e48 	.word	0x1fff8e48

0000b984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b984:	b500      	push	{lr}
    b986:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b988:	f7f5 f8e8 	bl	b5c <Sys_GetCoreID>
    b98c:	4603      	mov	r3, r0
    b98e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    b990:	4a10      	ldr	r2, [pc, #64]	; (b9d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b992:	9b01      	ldr	r3, [sp, #4]
    b994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b998:	2b00      	cmp	r3, #0
    b99a:	d10d      	bne.n	b9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b99c:	f7f4 fffc 	bl	998 <Adc_schm_read_msr>
    b9a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9a2:	9b00      	ldr	r3, [sp, #0]
    b9a4:	f003 0301 	and.w	r3, r3, #1
    b9a8:	2b00      	cmp	r3, #0
    b9aa:	d100      	bne.n	b9ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b9ae:	490a      	ldr	r1, [pc, #40]	; (b9d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    b9b0:	9b01      	ldr	r3, [sp, #4]
    b9b2:	9a00      	ldr	r2, [sp, #0]
    b9b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    b9b8:	4a06      	ldr	r2, [pc, #24]	; (b9d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b9ba:	9b01      	ldr	r3, [sp, #4]
    b9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9c0:	1c5a      	adds	r2, r3, #1
    b9c2:	4904      	ldr	r1, [pc, #16]	; (b9d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b9c4:	9b01      	ldr	r3, [sp, #4]
    b9c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b9ca:	bf00      	nop
    b9cc:	b003      	add	sp, #12
    b9ce:	f85d fb04 	ldr.w	pc, [sp], #4
    b9d2:	bf00      	nop
    b9d4:	1fff8e54 	.word	0x1fff8e54
    b9d8:	1fff8e50 	.word	0x1fff8e50

0000b9dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b9dc:	b500      	push	{lr}
    b9de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9e0:	f7f5 f8bc 	bl	b5c <Sys_GetCoreID>
    b9e4:	4603      	mov	r3, r0
    b9e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    b9e8:	4a0d      	ldr	r2, [pc, #52]	; (ba20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b9ea:	9b01      	ldr	r3, [sp, #4]
    b9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9f0:	1e5a      	subs	r2, r3, #1
    b9f2:	490b      	ldr	r1, [pc, #44]	; (ba20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b9f4:	9b01      	ldr	r3, [sp, #4]
    b9f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b9fa:	4a0a      	ldr	r2, [pc, #40]	; (ba24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    b9fc:	9b01      	ldr	r3, [sp, #4]
    b9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba02:	f003 0301 	and.w	r3, r3, #1
    ba06:	2b00      	cmp	r3, #0
    ba08:	d106      	bne.n	ba18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    ba0a:	4a05      	ldr	r2, [pc, #20]	; (ba20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    ba0c:	9b01      	ldr	r3, [sp, #4]
    ba0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba12:	2b00      	cmp	r3, #0
    ba14:	d100      	bne.n	ba18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba18:	bf00      	nop
    ba1a:	b003      	add	sp, #12
    ba1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ba20:	1fff8e54 	.word	0x1fff8e54
    ba24:	1fff8e50 	.word	0x1fff8e50

0000ba28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    ba28:	b500      	push	{lr}
    ba2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba2c:	f7f5 f896 	bl	b5c <Sys_GetCoreID>
    ba30:	4603      	mov	r3, r0
    ba32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    ba34:	4a10      	ldr	r2, [pc, #64]	; (ba78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ba36:	9b01      	ldr	r3, [sp, #4]
    ba38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba3c:	2b00      	cmp	r3, #0
    ba3e:	d10d      	bne.n	ba5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba40:	f7f4 ffaa 	bl	998 <Adc_schm_read_msr>
    ba44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba46:	9b00      	ldr	r3, [sp, #0]
    ba48:	f003 0301 	and.w	r3, r3, #1
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	d100      	bne.n	ba52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    ba52:	490a      	ldr	r1, [pc, #40]	; (ba7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    ba54:	9b01      	ldr	r3, [sp, #4]
    ba56:	9a00      	ldr	r2, [sp, #0]
    ba58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    ba5c:	4a06      	ldr	r2, [pc, #24]	; (ba78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ba5e:	9b01      	ldr	r3, [sp, #4]
    ba60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba64:	1c5a      	adds	r2, r3, #1
    ba66:	4904      	ldr	r1, [pc, #16]	; (ba78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ba68:	9b01      	ldr	r3, [sp, #4]
    ba6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba6e:	bf00      	nop
    ba70:	b003      	add	sp, #12
    ba72:	f85d fb04 	ldr.w	pc, [sp], #4
    ba76:	bf00      	nop
    ba78:	1fff8e5c 	.word	0x1fff8e5c
    ba7c:	1fff8e58 	.word	0x1fff8e58

0000ba80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    ba80:	b500      	push	{lr}
    ba82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba84:	f7f5 f86a 	bl	b5c <Sys_GetCoreID>
    ba88:	4603      	mov	r3, r0
    ba8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    ba8c:	4a0d      	ldr	r2, [pc, #52]	; (bac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    ba8e:	9b01      	ldr	r3, [sp, #4]
    ba90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba94:	1e5a      	subs	r2, r3, #1
    ba96:	490b      	ldr	r1, [pc, #44]	; (bac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    ba98:	9b01      	ldr	r3, [sp, #4]
    ba9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    ba9e:	4a0a      	ldr	r2, [pc, #40]	; (bac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    baa0:	9b01      	ldr	r3, [sp, #4]
    baa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baa6:	f003 0301 	and.w	r3, r3, #1
    baaa:	2b00      	cmp	r3, #0
    baac:	d106      	bne.n	babc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    baae:	4a05      	ldr	r2, [pc, #20]	; (bac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bab0:	9b01      	ldr	r3, [sp, #4]
    bab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bab6:	2b00      	cmp	r3, #0
    bab8:	d100      	bne.n	babc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    baba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    babc:	bf00      	nop
    babe:	b003      	add	sp, #12
    bac0:	f85d fb04 	ldr.w	pc, [sp], #4
    bac4:	1fff8e5c 	.word	0x1fff8e5c
    bac8:	1fff8e58 	.word	0x1fff8e58

0000bacc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bacc:	b500      	push	{lr}
    bace:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bad0:	f7f5 f844 	bl	b5c <Sys_GetCoreID>
    bad4:	4603      	mov	r3, r0
    bad6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    bad8:	4a10      	ldr	r2, [pc, #64]	; (bb1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bada:	9b01      	ldr	r3, [sp, #4]
    badc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae0:	2b00      	cmp	r3, #0
    bae2:	d10d      	bne.n	bb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bae4:	f7f4 ff58 	bl	998 <Adc_schm_read_msr>
    bae8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    baea:	9b00      	ldr	r3, [sp, #0]
    baec:	f003 0301 	and.w	r3, r3, #1
    baf0:	2b00      	cmp	r3, #0
    baf2:	d100      	bne.n	baf6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    baf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    baf6:	490a      	ldr	r1, [pc, #40]	; (bb20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    baf8:	9b01      	ldr	r3, [sp, #4]
    bafa:	9a00      	ldr	r2, [sp, #0]
    bafc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    bb00:	4a06      	ldr	r2, [pc, #24]	; (bb1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bb02:	9b01      	ldr	r3, [sp, #4]
    bb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb08:	1c5a      	adds	r2, r3, #1
    bb0a:	4904      	ldr	r1, [pc, #16]	; (bb1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bb0c:	9b01      	ldr	r3, [sp, #4]
    bb0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb12:	bf00      	nop
    bb14:	b003      	add	sp, #12
    bb16:	f85d fb04 	ldr.w	pc, [sp], #4
    bb1a:	bf00      	nop
    bb1c:	1fff8e64 	.word	0x1fff8e64
    bb20:	1fff8e60 	.word	0x1fff8e60

0000bb24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bb24:	b500      	push	{lr}
    bb26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb28:	f7f5 f818 	bl	b5c <Sys_GetCoreID>
    bb2c:	4603      	mov	r3, r0
    bb2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    bb30:	4a0d      	ldr	r2, [pc, #52]	; (bb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bb32:	9b01      	ldr	r3, [sp, #4]
    bb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb38:	1e5a      	subs	r2, r3, #1
    bb3a:	490b      	ldr	r1, [pc, #44]	; (bb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bb3c:	9b01      	ldr	r3, [sp, #4]
    bb3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    bb42:	4a0a      	ldr	r2, [pc, #40]	; (bb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    bb44:	9b01      	ldr	r3, [sp, #4]
    bb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb4a:	f003 0301 	and.w	r3, r3, #1
    bb4e:	2b00      	cmp	r3, #0
    bb50:	d106      	bne.n	bb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    bb52:	4a05      	ldr	r2, [pc, #20]	; (bb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bb54:	9b01      	ldr	r3, [sp, #4]
    bb56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d100      	bne.n	bb60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb60:	bf00      	nop
    bb62:	b003      	add	sp, #12
    bb64:	f85d fb04 	ldr.w	pc, [sp], #4
    bb68:	1fff8e64 	.word	0x1fff8e64
    bb6c:	1fff8e60 	.word	0x1fff8e60

0000bb70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    bb70:	b500      	push	{lr}
    bb72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb74:	f7f4 fff2 	bl	b5c <Sys_GetCoreID>
    bb78:	4603      	mov	r3, r0
    bb7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    bb7c:	4a10      	ldr	r2, [pc, #64]	; (bbc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bb7e:	9b01      	ldr	r3, [sp, #4]
    bb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb84:	2b00      	cmp	r3, #0
    bb86:	d10d      	bne.n	bba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb88:	f7f4 ff06 	bl	998 <Adc_schm_read_msr>
    bb8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb8e:	9b00      	ldr	r3, [sp, #0]
    bb90:	f003 0301 	and.w	r3, r3, #1
    bb94:	2b00      	cmp	r3, #0
    bb96:	d100      	bne.n	bb9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    bb9a:	490a      	ldr	r1, [pc, #40]	; (bbc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    bb9c:	9b01      	ldr	r3, [sp, #4]
    bb9e:	9a00      	ldr	r2, [sp, #0]
    bba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    bba4:	4a06      	ldr	r2, [pc, #24]	; (bbc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bba6:	9b01      	ldr	r3, [sp, #4]
    bba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbac:	1c5a      	adds	r2, r3, #1
    bbae:	4904      	ldr	r1, [pc, #16]	; (bbc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bbb0:	9b01      	ldr	r3, [sp, #4]
    bbb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbb6:	bf00      	nop
    bbb8:	b003      	add	sp, #12
    bbba:	f85d fb04 	ldr.w	pc, [sp], #4
    bbbe:	bf00      	nop
    bbc0:	1fff8e6c 	.word	0x1fff8e6c
    bbc4:	1fff8e68 	.word	0x1fff8e68

0000bbc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    bbc8:	b500      	push	{lr}
    bbca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbcc:	f7f4 ffc6 	bl	b5c <Sys_GetCoreID>
    bbd0:	4603      	mov	r3, r0
    bbd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    bbd4:	4a0d      	ldr	r2, [pc, #52]	; (bc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bbd6:	9b01      	ldr	r3, [sp, #4]
    bbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbdc:	1e5a      	subs	r2, r3, #1
    bbde:	490b      	ldr	r1, [pc, #44]	; (bc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bbe0:	9b01      	ldr	r3, [sp, #4]
    bbe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    bbe6:	4a0a      	ldr	r2, [pc, #40]	; (bc10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    bbe8:	9b01      	ldr	r3, [sp, #4]
    bbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbee:	f003 0301 	and.w	r3, r3, #1
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d106      	bne.n	bc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    bbf6:	4a05      	ldr	r2, [pc, #20]	; (bc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bbf8:	9b01      	ldr	r3, [sp, #4]
    bbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d100      	bne.n	bc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc04:	bf00      	nop
    bc06:	b003      	add	sp, #12
    bc08:	f85d fb04 	ldr.w	pc, [sp], #4
    bc0c:	1fff8e6c 	.word	0x1fff8e6c
    bc10:	1fff8e68 	.word	0x1fff8e68

0000bc14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bc14:	b500      	push	{lr}
    bc16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc18:	f7f4 ffa0 	bl	b5c <Sys_GetCoreID>
    bc1c:	4603      	mov	r3, r0
    bc1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    bc20:	4a10      	ldr	r2, [pc, #64]	; (bc64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bc22:	9b01      	ldr	r3, [sp, #4]
    bc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc28:	2b00      	cmp	r3, #0
    bc2a:	d10d      	bne.n	bc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc2c:	f7f4 feb4 	bl	998 <Adc_schm_read_msr>
    bc30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc32:	9b00      	ldr	r3, [sp, #0]
    bc34:	f003 0301 	and.w	r3, r3, #1
    bc38:	2b00      	cmp	r3, #0
    bc3a:	d100      	bne.n	bc3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    bc3e:	490a      	ldr	r1, [pc, #40]	; (bc68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    bc40:	9b01      	ldr	r3, [sp, #4]
    bc42:	9a00      	ldr	r2, [sp, #0]
    bc44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    bc48:	4a06      	ldr	r2, [pc, #24]	; (bc64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bc4a:	9b01      	ldr	r3, [sp, #4]
    bc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc50:	1c5a      	adds	r2, r3, #1
    bc52:	4904      	ldr	r1, [pc, #16]	; (bc64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bc54:	9b01      	ldr	r3, [sp, #4]
    bc56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc5a:	bf00      	nop
    bc5c:	b003      	add	sp, #12
    bc5e:	f85d fb04 	ldr.w	pc, [sp], #4
    bc62:	bf00      	nop
    bc64:	1fff8e74 	.word	0x1fff8e74
    bc68:	1fff8e70 	.word	0x1fff8e70

0000bc6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bc6c:	b500      	push	{lr}
    bc6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc70:	f7f4 ff74 	bl	b5c <Sys_GetCoreID>
    bc74:	4603      	mov	r3, r0
    bc76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    bc78:	4a0d      	ldr	r2, [pc, #52]	; (bcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bc7a:	9b01      	ldr	r3, [sp, #4]
    bc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc80:	1e5a      	subs	r2, r3, #1
    bc82:	490b      	ldr	r1, [pc, #44]	; (bcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bc84:	9b01      	ldr	r3, [sp, #4]
    bc86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    bc8a:	4a0a      	ldr	r2, [pc, #40]	; (bcb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    bc8c:	9b01      	ldr	r3, [sp, #4]
    bc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc92:	f003 0301 	and.w	r3, r3, #1
    bc96:	2b00      	cmp	r3, #0
    bc98:	d106      	bne.n	bca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    bc9a:	4a05      	ldr	r2, [pc, #20]	; (bcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bc9c:	9b01      	ldr	r3, [sp, #4]
    bc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bca2:	2b00      	cmp	r3, #0
    bca4:	d100      	bne.n	bca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bca6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bca8:	bf00      	nop
    bcaa:	b003      	add	sp, #12
    bcac:	f85d fb04 	ldr.w	pc, [sp], #4
    bcb0:	1fff8e74 	.word	0x1fff8e74
    bcb4:	1fff8e70 	.word	0x1fff8e70

0000bcb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bcb8:	b500      	push	{lr}
    bcba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcbc:	f7f4 ff4e 	bl	b5c <Sys_GetCoreID>
    bcc0:	4603      	mov	r3, r0
    bcc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    bcc4:	4a10      	ldr	r2, [pc, #64]	; (bd08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bcc6:	9b01      	ldr	r3, [sp, #4]
    bcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bccc:	2b00      	cmp	r3, #0
    bcce:	d10d      	bne.n	bcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bcd0:	f7f4 fe62 	bl	998 <Adc_schm_read_msr>
    bcd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bcd6:	9b00      	ldr	r3, [sp, #0]
    bcd8:	f003 0301 	and.w	r3, r3, #1
    bcdc:	2b00      	cmp	r3, #0
    bcde:	d100      	bne.n	bce2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bce0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    bce2:	490a      	ldr	r1, [pc, #40]	; (bd0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    bce4:	9b01      	ldr	r3, [sp, #4]
    bce6:	9a00      	ldr	r2, [sp, #0]
    bce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    bcec:	4a06      	ldr	r2, [pc, #24]	; (bd08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bcee:	9b01      	ldr	r3, [sp, #4]
    bcf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcf4:	1c5a      	adds	r2, r3, #1
    bcf6:	4904      	ldr	r1, [pc, #16]	; (bd08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bcf8:	9b01      	ldr	r3, [sp, #4]
    bcfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bcfe:	bf00      	nop
    bd00:	b003      	add	sp, #12
    bd02:	f85d fb04 	ldr.w	pc, [sp], #4
    bd06:	bf00      	nop
    bd08:	1fff8e7c 	.word	0x1fff8e7c
    bd0c:	1fff8e78 	.word	0x1fff8e78

0000bd10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bd10:	b500      	push	{lr}
    bd12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd14:	f7f4 ff22 	bl	b5c <Sys_GetCoreID>
    bd18:	4603      	mov	r3, r0
    bd1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    bd1c:	4a0d      	ldr	r2, [pc, #52]	; (bd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bd1e:	9b01      	ldr	r3, [sp, #4]
    bd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd24:	1e5a      	subs	r2, r3, #1
    bd26:	490b      	ldr	r1, [pc, #44]	; (bd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bd28:	9b01      	ldr	r3, [sp, #4]
    bd2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    bd2e:	4a0a      	ldr	r2, [pc, #40]	; (bd58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    bd30:	9b01      	ldr	r3, [sp, #4]
    bd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd36:	f003 0301 	and.w	r3, r3, #1
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	d106      	bne.n	bd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    bd3e:	4a05      	ldr	r2, [pc, #20]	; (bd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bd40:	9b01      	ldr	r3, [sp, #4]
    bd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd46:	2b00      	cmp	r3, #0
    bd48:	d100      	bne.n	bd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd4c:	bf00      	nop
    bd4e:	b003      	add	sp, #12
    bd50:	f85d fb04 	ldr.w	pc, [sp], #4
    bd54:	1fff8e7c 	.word	0x1fff8e7c
    bd58:	1fff8e78 	.word	0x1fff8e78

0000bd5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bd5c:	b500      	push	{lr}
    bd5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd60:	f7f4 fefc 	bl	b5c <Sys_GetCoreID>
    bd64:	4603      	mov	r3, r0
    bd66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    bd68:	4a10      	ldr	r2, [pc, #64]	; (bdac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bd6a:	9b01      	ldr	r3, [sp, #4]
    bd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd70:	2b00      	cmp	r3, #0
    bd72:	d10d      	bne.n	bd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd74:	f7f4 fe10 	bl	998 <Adc_schm_read_msr>
    bd78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd7a:	9b00      	ldr	r3, [sp, #0]
    bd7c:	f003 0301 	and.w	r3, r3, #1
    bd80:	2b00      	cmp	r3, #0
    bd82:	d100      	bne.n	bd86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    bd86:	490a      	ldr	r1, [pc, #40]	; (bdb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    bd88:	9b01      	ldr	r3, [sp, #4]
    bd8a:	9a00      	ldr	r2, [sp, #0]
    bd8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    bd90:	4a06      	ldr	r2, [pc, #24]	; (bdac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bd92:	9b01      	ldr	r3, [sp, #4]
    bd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd98:	1c5a      	adds	r2, r3, #1
    bd9a:	4904      	ldr	r1, [pc, #16]	; (bdac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bd9c:	9b01      	ldr	r3, [sp, #4]
    bd9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bda2:	bf00      	nop
    bda4:	b003      	add	sp, #12
    bda6:	f85d fb04 	ldr.w	pc, [sp], #4
    bdaa:	bf00      	nop
    bdac:	1fff8e84 	.word	0x1fff8e84
    bdb0:	1fff8e80 	.word	0x1fff8e80

0000bdb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bdb4:	b500      	push	{lr}
    bdb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdb8:	f7f4 fed0 	bl	b5c <Sys_GetCoreID>
    bdbc:	4603      	mov	r3, r0
    bdbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    bdc0:	4a0d      	ldr	r2, [pc, #52]	; (bdf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bdc2:	9b01      	ldr	r3, [sp, #4]
    bdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdc8:	1e5a      	subs	r2, r3, #1
    bdca:	490b      	ldr	r1, [pc, #44]	; (bdf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bdcc:	9b01      	ldr	r3, [sp, #4]
    bdce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    bdd2:	4a0a      	ldr	r2, [pc, #40]	; (bdfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    bdd4:	9b01      	ldr	r3, [sp, #4]
    bdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdda:	f003 0301 	and.w	r3, r3, #1
    bdde:	2b00      	cmp	r3, #0
    bde0:	d106      	bne.n	bdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    bde2:	4a05      	ldr	r2, [pc, #20]	; (bdf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bde4:	9b01      	ldr	r3, [sp, #4]
    bde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdea:	2b00      	cmp	r3, #0
    bdec:	d100      	bne.n	bdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bdee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bdf0:	bf00      	nop
    bdf2:	b003      	add	sp, #12
    bdf4:	f85d fb04 	ldr.w	pc, [sp], #4
    bdf8:	1fff8e84 	.word	0x1fff8e84
    bdfc:	1fff8e80 	.word	0x1fff8e80

0000be00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    be00:	b500      	push	{lr}
    be02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be04:	f7f4 feaa 	bl	b5c <Sys_GetCoreID>
    be08:	4603      	mov	r3, r0
    be0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    be0c:	4a10      	ldr	r2, [pc, #64]	; (be50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    be0e:	9b01      	ldr	r3, [sp, #4]
    be10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be14:	2b00      	cmp	r3, #0
    be16:	d10d      	bne.n	be34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be18:	f7f4 fdbe 	bl	998 <Adc_schm_read_msr>
    be1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be1e:	9b00      	ldr	r3, [sp, #0]
    be20:	f003 0301 	and.w	r3, r3, #1
    be24:	2b00      	cmp	r3, #0
    be26:	d100      	bne.n	be2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    be2a:	490a      	ldr	r1, [pc, #40]	; (be54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    be2c:	9b01      	ldr	r3, [sp, #4]
    be2e:	9a00      	ldr	r2, [sp, #0]
    be30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    be34:	4a06      	ldr	r2, [pc, #24]	; (be50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    be36:	9b01      	ldr	r3, [sp, #4]
    be38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be3c:	1c5a      	adds	r2, r3, #1
    be3e:	4904      	ldr	r1, [pc, #16]	; (be50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    be40:	9b01      	ldr	r3, [sp, #4]
    be42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be46:	bf00      	nop
    be48:	b003      	add	sp, #12
    be4a:	f85d fb04 	ldr.w	pc, [sp], #4
    be4e:	bf00      	nop
    be50:	1fff8e8c 	.word	0x1fff8e8c
    be54:	1fff8e88 	.word	0x1fff8e88

0000be58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    be58:	b500      	push	{lr}
    be5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be5c:	f7f4 fe7e 	bl	b5c <Sys_GetCoreID>
    be60:	4603      	mov	r3, r0
    be62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    be64:	4a0d      	ldr	r2, [pc, #52]	; (be9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    be66:	9b01      	ldr	r3, [sp, #4]
    be68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be6c:	1e5a      	subs	r2, r3, #1
    be6e:	490b      	ldr	r1, [pc, #44]	; (be9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    be70:	9b01      	ldr	r3, [sp, #4]
    be72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    be76:	4a0a      	ldr	r2, [pc, #40]	; (bea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    be78:	9b01      	ldr	r3, [sp, #4]
    be7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be7e:	f003 0301 	and.w	r3, r3, #1
    be82:	2b00      	cmp	r3, #0
    be84:	d106      	bne.n	be94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    be86:	4a05      	ldr	r2, [pc, #20]	; (be9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    be88:	9b01      	ldr	r3, [sp, #4]
    be8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be8e:	2b00      	cmp	r3, #0
    be90:	d100      	bne.n	be94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be94:	bf00      	nop
    be96:	b003      	add	sp, #12
    be98:	f85d fb04 	ldr.w	pc, [sp], #4
    be9c:	1fff8e8c 	.word	0x1fff8e8c
    bea0:	1fff8e88 	.word	0x1fff8e88

0000bea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bea4:	b500      	push	{lr}
    bea6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bea8:	f7f4 fe58 	bl	b5c <Sys_GetCoreID>
    beac:	4603      	mov	r3, r0
    beae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    beb0:	4a10      	ldr	r2, [pc, #64]	; (bef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    beb2:	9b01      	ldr	r3, [sp, #4]
    beb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beb8:	2b00      	cmp	r3, #0
    beba:	d10d      	bne.n	bed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bebc:	f7f4 fd6c 	bl	998 <Adc_schm_read_msr>
    bec0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bec2:	9b00      	ldr	r3, [sp, #0]
    bec4:	f003 0301 	and.w	r3, r3, #1
    bec8:	2b00      	cmp	r3, #0
    beca:	d100      	bne.n	bece <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    becc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    bece:	490a      	ldr	r1, [pc, #40]	; (bef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	9a00      	ldr	r2, [sp, #0]
    bed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    bed8:	4a06      	ldr	r2, [pc, #24]	; (bef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    beda:	9b01      	ldr	r3, [sp, #4]
    bedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bee0:	1c5a      	adds	r2, r3, #1
    bee2:	4904      	ldr	r1, [pc, #16]	; (bef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bee4:	9b01      	ldr	r3, [sp, #4]
    bee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    beea:	bf00      	nop
    beec:	b003      	add	sp, #12
    beee:	f85d fb04 	ldr.w	pc, [sp], #4
    bef2:	bf00      	nop
    bef4:	1fff8e94 	.word	0x1fff8e94
    bef8:	1fff8e90 	.word	0x1fff8e90

0000befc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    befc:	b500      	push	{lr}
    befe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf00:	f7f4 fe2c 	bl	b5c <Sys_GetCoreID>
    bf04:	4603      	mov	r3, r0
    bf06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    bf08:	4a0d      	ldr	r2, [pc, #52]	; (bf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bf0a:	9b01      	ldr	r3, [sp, #4]
    bf0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf10:	1e5a      	subs	r2, r3, #1
    bf12:	490b      	ldr	r1, [pc, #44]	; (bf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bf14:	9b01      	ldr	r3, [sp, #4]
    bf16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    bf1a:	4a0a      	ldr	r2, [pc, #40]	; (bf44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    bf1c:	9b01      	ldr	r3, [sp, #4]
    bf1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf22:	f003 0301 	and.w	r3, r3, #1
    bf26:	2b00      	cmp	r3, #0
    bf28:	d106      	bne.n	bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    bf2a:	4a05      	ldr	r2, [pc, #20]	; (bf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bf2c:	9b01      	ldr	r3, [sp, #4]
    bf2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf32:	2b00      	cmp	r3, #0
    bf34:	d100      	bne.n	bf38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf38:	bf00      	nop
    bf3a:	b003      	add	sp, #12
    bf3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bf40:	1fff8e94 	.word	0x1fff8e94
    bf44:	1fff8e90 	.word	0x1fff8e90

0000bf48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bf48:	b500      	push	{lr}
    bf4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf4c:	f7f4 fe06 	bl	b5c <Sys_GetCoreID>
    bf50:	4603      	mov	r3, r0
    bf52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    bf54:	4a10      	ldr	r2, [pc, #64]	; (bf98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bf56:	9b01      	ldr	r3, [sp, #4]
    bf58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d10d      	bne.n	bf7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf60:	f7f4 fd1a 	bl	998 <Adc_schm_read_msr>
    bf64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf66:	9b00      	ldr	r3, [sp, #0]
    bf68:	f003 0301 	and.w	r3, r3, #1
    bf6c:	2b00      	cmp	r3, #0
    bf6e:	d100      	bne.n	bf72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    bf72:	490a      	ldr	r1, [pc, #40]	; (bf9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    bf74:	9b01      	ldr	r3, [sp, #4]
    bf76:	9a00      	ldr	r2, [sp, #0]
    bf78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    bf7c:	4a06      	ldr	r2, [pc, #24]	; (bf98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bf7e:	9b01      	ldr	r3, [sp, #4]
    bf80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf84:	1c5a      	adds	r2, r3, #1
    bf86:	4904      	ldr	r1, [pc, #16]	; (bf98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bf88:	9b01      	ldr	r3, [sp, #4]
    bf8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf8e:	bf00      	nop
    bf90:	b003      	add	sp, #12
    bf92:	f85d fb04 	ldr.w	pc, [sp], #4
    bf96:	bf00      	nop
    bf98:	1fff8e9c 	.word	0x1fff8e9c
    bf9c:	1fff8e98 	.word	0x1fff8e98

0000bfa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bfa0:	b500      	push	{lr}
    bfa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfa4:	f7f4 fdda 	bl	b5c <Sys_GetCoreID>
    bfa8:	4603      	mov	r3, r0
    bfaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    bfac:	4a0d      	ldr	r2, [pc, #52]	; (bfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bfae:	9b01      	ldr	r3, [sp, #4]
    bfb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb4:	1e5a      	subs	r2, r3, #1
    bfb6:	490b      	ldr	r1, [pc, #44]	; (bfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bfb8:	9b01      	ldr	r3, [sp, #4]
    bfba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    bfbe:	4a0a      	ldr	r2, [pc, #40]	; (bfe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    bfc0:	9b01      	ldr	r3, [sp, #4]
    bfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc6:	f003 0301 	and.w	r3, r3, #1
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d106      	bne.n	bfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    bfce:	4a05      	ldr	r2, [pc, #20]	; (bfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bfd0:	9b01      	ldr	r3, [sp, #4]
    bfd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfd6:	2b00      	cmp	r3, #0
    bfd8:	d100      	bne.n	bfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bfda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bfdc:	bf00      	nop
    bfde:	b003      	add	sp, #12
    bfe0:	f85d fb04 	ldr.w	pc, [sp], #4
    bfe4:	1fff8e9c 	.word	0x1fff8e9c
    bfe8:	1fff8e98 	.word	0x1fff8e98

0000bfec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    bfec:	b500      	push	{lr}
    bfee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bff0:	f7f4 fdb4 	bl	b5c <Sys_GetCoreID>
    bff4:	4603      	mov	r3, r0
    bff6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    bff8:	4a10      	ldr	r2, [pc, #64]	; (c03c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bffa:	9b01      	ldr	r3, [sp, #4]
    bffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c000:	2b00      	cmp	r3, #0
    c002:	d10d      	bne.n	c020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c004:	f7f4 fcc8 	bl	998 <Adc_schm_read_msr>
    c008:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c00a:	9b00      	ldr	r3, [sp, #0]
    c00c:	f003 0301 	and.w	r3, r3, #1
    c010:	2b00      	cmp	r3, #0
    c012:	d100      	bne.n	c016 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c014:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    c016:	490a      	ldr	r1, [pc, #40]	; (c040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    c018:	9b01      	ldr	r3, [sp, #4]
    c01a:	9a00      	ldr	r2, [sp, #0]
    c01c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    c020:	4a06      	ldr	r2, [pc, #24]	; (c03c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c022:	9b01      	ldr	r3, [sp, #4]
    c024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c028:	1c5a      	adds	r2, r3, #1
    c02a:	4904      	ldr	r1, [pc, #16]	; (c03c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c02c:	9b01      	ldr	r3, [sp, #4]
    c02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c032:	bf00      	nop
    c034:	b003      	add	sp, #12
    c036:	f85d fb04 	ldr.w	pc, [sp], #4
    c03a:	bf00      	nop
    c03c:	1fff8ea4 	.word	0x1fff8ea4
    c040:	1fff8ea0 	.word	0x1fff8ea0

0000c044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c044:	b500      	push	{lr}
    c046:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c048:	f7f4 fd88 	bl	b5c <Sys_GetCoreID>
    c04c:	4603      	mov	r3, r0
    c04e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    c050:	4a0d      	ldr	r2, [pc, #52]	; (c088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c052:	9b01      	ldr	r3, [sp, #4]
    c054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c058:	1e5a      	subs	r2, r3, #1
    c05a:	490b      	ldr	r1, [pc, #44]	; (c088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c05c:	9b01      	ldr	r3, [sp, #4]
    c05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    c062:	4a0a      	ldr	r2, [pc, #40]	; (c08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    c064:	9b01      	ldr	r3, [sp, #4]
    c066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c06a:	f003 0301 	and.w	r3, r3, #1
    c06e:	2b00      	cmp	r3, #0
    c070:	d106      	bne.n	c080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    c072:	4a05      	ldr	r2, [pc, #20]	; (c088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c074:	9b01      	ldr	r3, [sp, #4]
    c076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d100      	bne.n	c080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c07e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c080:	bf00      	nop
    c082:	b003      	add	sp, #12
    c084:	f85d fb04 	ldr.w	pc, [sp], #4
    c088:	1fff8ea4 	.word	0x1fff8ea4
    c08c:	1fff8ea0 	.word	0x1fff8ea0

0000c090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c090:	b500      	push	{lr}
    c092:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c094:	f7f4 fd62 	bl	b5c <Sys_GetCoreID>
    c098:	4603      	mov	r3, r0
    c09a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    c09c:	4a10      	ldr	r2, [pc, #64]	; (c0e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c09e:	9b01      	ldr	r3, [sp, #4]
    c0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0a4:	2b00      	cmp	r3, #0
    c0a6:	d10d      	bne.n	c0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0a8:	f7f4 fc76 	bl	998 <Adc_schm_read_msr>
    c0ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0ae:	9b00      	ldr	r3, [sp, #0]
    c0b0:	f003 0301 	and.w	r3, r3, #1
    c0b4:	2b00      	cmp	r3, #0
    c0b6:	d100      	bne.n	c0ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    c0ba:	490a      	ldr	r1, [pc, #40]	; (c0e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    c0bc:	9b01      	ldr	r3, [sp, #4]
    c0be:	9a00      	ldr	r2, [sp, #0]
    c0c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    c0c4:	4a06      	ldr	r2, [pc, #24]	; (c0e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c0c6:	9b01      	ldr	r3, [sp, #4]
    c0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0cc:	1c5a      	adds	r2, r3, #1
    c0ce:	4904      	ldr	r1, [pc, #16]	; (c0e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c0d0:	9b01      	ldr	r3, [sp, #4]
    c0d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c0d6:	bf00      	nop
    c0d8:	b003      	add	sp, #12
    c0da:	f85d fb04 	ldr.w	pc, [sp], #4
    c0de:	bf00      	nop
    c0e0:	1fff8eac 	.word	0x1fff8eac
    c0e4:	1fff8ea8 	.word	0x1fff8ea8

0000c0e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c0e8:	b500      	push	{lr}
    c0ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0ec:	f7f4 fd36 	bl	b5c <Sys_GetCoreID>
    c0f0:	4603      	mov	r3, r0
    c0f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    c0f4:	4a0d      	ldr	r2, [pc, #52]	; (c12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c0f6:	9b01      	ldr	r3, [sp, #4]
    c0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0fc:	1e5a      	subs	r2, r3, #1
    c0fe:	490b      	ldr	r1, [pc, #44]	; (c12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c100:	9b01      	ldr	r3, [sp, #4]
    c102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    c106:	4a0a      	ldr	r2, [pc, #40]	; (c130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    c108:	9b01      	ldr	r3, [sp, #4]
    c10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c10e:	f003 0301 	and.w	r3, r3, #1
    c112:	2b00      	cmp	r3, #0
    c114:	d106      	bne.n	c124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    c116:	4a05      	ldr	r2, [pc, #20]	; (c12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c118:	9b01      	ldr	r3, [sp, #4]
    c11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c11e:	2b00      	cmp	r3, #0
    c120:	d100      	bne.n	c124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c122:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c124:	bf00      	nop
    c126:	b003      	add	sp, #12
    c128:	f85d fb04 	ldr.w	pc, [sp], #4
    c12c:	1fff8eac 	.word	0x1fff8eac
    c130:	1fff8ea8 	.word	0x1fff8ea8

0000c134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c134:	b500      	push	{lr}
    c136:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c138:	f7f4 fd10 	bl	b5c <Sys_GetCoreID>
    c13c:	4603      	mov	r3, r0
    c13e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    c140:	4a10      	ldr	r2, [pc, #64]	; (c184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c142:	9b01      	ldr	r3, [sp, #4]
    c144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c148:	2b00      	cmp	r3, #0
    c14a:	d10d      	bne.n	c168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c14c:	f7f4 fc24 	bl	998 <Adc_schm_read_msr>
    c150:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c152:	9b00      	ldr	r3, [sp, #0]
    c154:	f003 0301 	and.w	r3, r3, #1
    c158:	2b00      	cmp	r3, #0
    c15a:	d100      	bne.n	c15e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c15c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    c15e:	490a      	ldr	r1, [pc, #40]	; (c188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    c160:	9b01      	ldr	r3, [sp, #4]
    c162:	9a00      	ldr	r2, [sp, #0]
    c164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    c168:	4a06      	ldr	r2, [pc, #24]	; (c184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c16a:	9b01      	ldr	r3, [sp, #4]
    c16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c170:	1c5a      	adds	r2, r3, #1
    c172:	4904      	ldr	r1, [pc, #16]	; (c184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c174:	9b01      	ldr	r3, [sp, #4]
    c176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c17a:	bf00      	nop
    c17c:	b003      	add	sp, #12
    c17e:	f85d fb04 	ldr.w	pc, [sp], #4
    c182:	bf00      	nop
    c184:	1fff8eb4 	.word	0x1fff8eb4
    c188:	1fff8eb0 	.word	0x1fff8eb0

0000c18c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c18c:	b500      	push	{lr}
    c18e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c190:	f7f4 fce4 	bl	b5c <Sys_GetCoreID>
    c194:	4603      	mov	r3, r0
    c196:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    c198:	4a0d      	ldr	r2, [pc, #52]	; (c1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c19a:	9b01      	ldr	r3, [sp, #4]
    c19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1a0:	1e5a      	subs	r2, r3, #1
    c1a2:	490b      	ldr	r1, [pc, #44]	; (c1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c1a4:	9b01      	ldr	r3, [sp, #4]
    c1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    c1aa:	4a0a      	ldr	r2, [pc, #40]	; (c1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    c1ac:	9b01      	ldr	r3, [sp, #4]
    c1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1b2:	f003 0301 	and.w	r3, r3, #1
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	d106      	bne.n	c1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c1ba:	4a05      	ldr	r2, [pc, #20]	; (c1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c1bc:	9b01      	ldr	r3, [sp, #4]
    c1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	d100      	bne.n	c1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c1c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c1c8:	bf00      	nop
    c1ca:	b003      	add	sp, #12
    c1cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c1d0:	1fff8eb4 	.word	0x1fff8eb4
    c1d4:	1fff8eb0 	.word	0x1fff8eb0

0000c1d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c1d8:	b500      	push	{lr}
    c1da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1dc:	f7f4 fcbe 	bl	b5c <Sys_GetCoreID>
    c1e0:	4603      	mov	r3, r0
    c1e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c1e4:	4a10      	ldr	r2, [pc, #64]	; (c228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c1e6:	9b01      	ldr	r3, [sp, #4]
    c1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d10d      	bne.n	c20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c1f0:	f7f4 fbd2 	bl	998 <Adc_schm_read_msr>
    c1f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c1f6:	9b00      	ldr	r3, [sp, #0]
    c1f8:	f003 0301 	and.w	r3, r3, #1
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d100      	bne.n	c202 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c200:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c202:	490a      	ldr	r1, [pc, #40]	; (c22c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c204:	9b01      	ldr	r3, [sp, #4]
    c206:	9a00      	ldr	r2, [sp, #0]
    c208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c20c:	4a06      	ldr	r2, [pc, #24]	; (c228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c20e:	9b01      	ldr	r3, [sp, #4]
    c210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c214:	1c5a      	adds	r2, r3, #1
    c216:	4904      	ldr	r1, [pc, #16]	; (c228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c218:	9b01      	ldr	r3, [sp, #4]
    c21a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c21e:	bf00      	nop
    c220:	b003      	add	sp, #12
    c222:	f85d fb04 	ldr.w	pc, [sp], #4
    c226:	bf00      	nop
    c228:	1fff8ebc 	.word	0x1fff8ebc
    c22c:	1fff8eb8 	.word	0x1fff8eb8

0000c230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c230:	b500      	push	{lr}
    c232:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c234:	f7f4 fc92 	bl	b5c <Sys_GetCoreID>
    c238:	4603      	mov	r3, r0
    c23a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c23c:	4a0d      	ldr	r2, [pc, #52]	; (c274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c23e:	9b01      	ldr	r3, [sp, #4]
    c240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c244:	1e5a      	subs	r2, r3, #1
    c246:	490b      	ldr	r1, [pc, #44]	; (c274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c248:	9b01      	ldr	r3, [sp, #4]
    c24a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c24e:	4a0a      	ldr	r2, [pc, #40]	; (c278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c250:	9b01      	ldr	r3, [sp, #4]
    c252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c256:	f003 0301 	and.w	r3, r3, #1
    c25a:	2b00      	cmp	r3, #0
    c25c:	d106      	bne.n	c26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c25e:	4a05      	ldr	r2, [pc, #20]	; (c274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c260:	9b01      	ldr	r3, [sp, #4]
    c262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c266:	2b00      	cmp	r3, #0
    c268:	d100      	bne.n	c26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c26a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c26c:	bf00      	nop
    c26e:	b003      	add	sp, #12
    c270:	f85d fb04 	ldr.w	pc, [sp], #4
    c274:	1fff8ebc 	.word	0x1fff8ebc
    c278:	1fff8eb8 	.word	0x1fff8eb8

0000c27c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c27c:	b500      	push	{lr}
    c27e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c280:	f7f4 fc6c 	bl	b5c <Sys_GetCoreID>
    c284:	4603      	mov	r3, r0
    c286:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c288:	4a10      	ldr	r2, [pc, #64]	; (c2cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c28a:	9b01      	ldr	r3, [sp, #4]
    c28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c290:	2b00      	cmp	r3, #0
    c292:	d10d      	bne.n	c2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c294:	f7f4 fb80 	bl	998 <Adc_schm_read_msr>
    c298:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c29a:	9b00      	ldr	r3, [sp, #0]
    c29c:	f003 0301 	and.w	r3, r3, #1
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d100      	bne.n	c2a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c2a6:	490a      	ldr	r1, [pc, #40]	; (c2d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	9a00      	ldr	r2, [sp, #0]
    c2ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c2b0:	4a06      	ldr	r2, [pc, #24]	; (c2cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c2b2:	9b01      	ldr	r3, [sp, #4]
    c2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2b8:	1c5a      	adds	r2, r3, #1
    c2ba:	4904      	ldr	r1, [pc, #16]	; (c2cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c2bc:	9b01      	ldr	r3, [sp, #4]
    c2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2c2:	bf00      	nop
    c2c4:	b003      	add	sp, #12
    c2c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c2ca:	bf00      	nop
    c2cc:	1fff8ec4 	.word	0x1fff8ec4
    c2d0:	1fff8ec0 	.word	0x1fff8ec0

0000c2d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c2d4:	b500      	push	{lr}
    c2d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2d8:	f7f4 fc40 	bl	b5c <Sys_GetCoreID>
    c2dc:	4603      	mov	r3, r0
    c2de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c2e0:	4a0d      	ldr	r2, [pc, #52]	; (c318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c2e2:	9b01      	ldr	r3, [sp, #4]
    c2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2e8:	1e5a      	subs	r2, r3, #1
    c2ea:	490b      	ldr	r1, [pc, #44]	; (c318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c2ec:	9b01      	ldr	r3, [sp, #4]
    c2ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c2f2:	4a0a      	ldr	r2, [pc, #40]	; (c31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c2f4:	9b01      	ldr	r3, [sp, #4]
    c2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2fa:	f003 0301 	and.w	r3, r3, #1
    c2fe:	2b00      	cmp	r3, #0
    c300:	d106      	bne.n	c310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c302:	4a05      	ldr	r2, [pc, #20]	; (c318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c304:	9b01      	ldr	r3, [sp, #4]
    c306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c30a:	2b00      	cmp	r3, #0
    c30c:	d100      	bne.n	c310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c30e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c310:	bf00      	nop
    c312:	b003      	add	sp, #12
    c314:	f85d fb04 	ldr.w	pc, [sp], #4
    c318:	1fff8ec4 	.word	0x1fff8ec4
    c31c:	1fff8ec0 	.word	0x1fff8ec0

0000c320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c320:	b500      	push	{lr}
    c322:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c324:	f7f4 fc1a 	bl	b5c <Sys_GetCoreID>
    c328:	4603      	mov	r3, r0
    c32a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c32c:	4a10      	ldr	r2, [pc, #64]	; (c370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c32e:	9b01      	ldr	r3, [sp, #4]
    c330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c334:	2b00      	cmp	r3, #0
    c336:	d10d      	bne.n	c354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c338:	f7f4 fb2e 	bl	998 <Adc_schm_read_msr>
    c33c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c33e:	9b00      	ldr	r3, [sp, #0]
    c340:	f003 0301 	and.w	r3, r3, #1
    c344:	2b00      	cmp	r3, #0
    c346:	d100      	bne.n	c34a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c348:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c34a:	490a      	ldr	r1, [pc, #40]	; (c374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c34c:	9b01      	ldr	r3, [sp, #4]
    c34e:	9a00      	ldr	r2, [sp, #0]
    c350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c354:	4a06      	ldr	r2, [pc, #24]	; (c370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c356:	9b01      	ldr	r3, [sp, #4]
    c358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c35c:	1c5a      	adds	r2, r3, #1
    c35e:	4904      	ldr	r1, [pc, #16]	; (c370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c360:	9b01      	ldr	r3, [sp, #4]
    c362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c366:	bf00      	nop
    c368:	b003      	add	sp, #12
    c36a:	f85d fb04 	ldr.w	pc, [sp], #4
    c36e:	bf00      	nop
    c370:	1fff8ecc 	.word	0x1fff8ecc
    c374:	1fff8ec8 	.word	0x1fff8ec8

0000c378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c378:	b500      	push	{lr}
    c37a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c37c:	f7f4 fbee 	bl	b5c <Sys_GetCoreID>
    c380:	4603      	mov	r3, r0
    c382:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c384:	4a0d      	ldr	r2, [pc, #52]	; (c3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c386:	9b01      	ldr	r3, [sp, #4]
    c388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c38c:	1e5a      	subs	r2, r3, #1
    c38e:	490b      	ldr	r1, [pc, #44]	; (c3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c390:	9b01      	ldr	r3, [sp, #4]
    c392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c396:	4a0a      	ldr	r2, [pc, #40]	; (c3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c398:	9b01      	ldr	r3, [sp, #4]
    c39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c39e:	f003 0301 	and.w	r3, r3, #1
    c3a2:	2b00      	cmp	r3, #0
    c3a4:	d106      	bne.n	c3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c3a6:	4a05      	ldr	r2, [pc, #20]	; (c3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c3a8:	9b01      	ldr	r3, [sp, #4]
    c3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	d100      	bne.n	c3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3b4:	bf00      	nop
    c3b6:	b003      	add	sp, #12
    c3b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c3bc:	1fff8ecc 	.word	0x1fff8ecc
    c3c0:	1fff8ec8 	.word	0x1fff8ec8

0000c3c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c3c4:	b500      	push	{lr}
    c3c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3c8:	f7f4 fbc8 	bl	b5c <Sys_GetCoreID>
    c3cc:	4603      	mov	r3, r0
    c3ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c3d0:	4a10      	ldr	r2, [pc, #64]	; (c414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c3d2:	9b01      	ldr	r3, [sp, #4]
    c3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d10d      	bne.n	c3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c3dc:	f7f4 fadc 	bl	998 <Adc_schm_read_msr>
    c3e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c3e2:	9b00      	ldr	r3, [sp, #0]
    c3e4:	f003 0301 	and.w	r3, r3, #1
    c3e8:	2b00      	cmp	r3, #0
    c3ea:	d100      	bne.n	c3ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c3ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c3ee:	490a      	ldr	r1, [pc, #40]	; (c418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c3f0:	9b01      	ldr	r3, [sp, #4]
    c3f2:	9a00      	ldr	r2, [sp, #0]
    c3f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c3f8:	4a06      	ldr	r2, [pc, #24]	; (c414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c3fa:	9b01      	ldr	r3, [sp, #4]
    c3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c400:	1c5a      	adds	r2, r3, #1
    c402:	4904      	ldr	r1, [pc, #16]	; (c414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c404:	9b01      	ldr	r3, [sp, #4]
    c406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c40a:	bf00      	nop
    c40c:	b003      	add	sp, #12
    c40e:	f85d fb04 	ldr.w	pc, [sp], #4
    c412:	bf00      	nop
    c414:	1fff8ed4 	.word	0x1fff8ed4
    c418:	1fff8ed0 	.word	0x1fff8ed0

0000c41c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c41c:	b500      	push	{lr}
    c41e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c420:	f7f4 fb9c 	bl	b5c <Sys_GetCoreID>
    c424:	4603      	mov	r3, r0
    c426:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c428:	4a0d      	ldr	r2, [pc, #52]	; (c460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c42a:	9b01      	ldr	r3, [sp, #4]
    c42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c430:	1e5a      	subs	r2, r3, #1
    c432:	490b      	ldr	r1, [pc, #44]	; (c460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c434:	9b01      	ldr	r3, [sp, #4]
    c436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c43a:	4a0a      	ldr	r2, [pc, #40]	; (c464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c43c:	9b01      	ldr	r3, [sp, #4]
    c43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c442:	f003 0301 	and.w	r3, r3, #1
    c446:	2b00      	cmp	r3, #0
    c448:	d106      	bne.n	c458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c44a:	4a05      	ldr	r2, [pc, #20]	; (c460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c44c:	9b01      	ldr	r3, [sp, #4]
    c44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c452:	2b00      	cmp	r3, #0
    c454:	d100      	bne.n	c458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c456:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c458:	bf00      	nop
    c45a:	b003      	add	sp, #12
    c45c:	f85d fb04 	ldr.w	pc, [sp], #4
    c460:	1fff8ed4 	.word	0x1fff8ed4
    c464:	1fff8ed0 	.word	0x1fff8ed0

0000c468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c468:	b500      	push	{lr}
    c46a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c46c:	f7f4 fb76 	bl	b5c <Sys_GetCoreID>
    c470:	4603      	mov	r3, r0
    c472:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c474:	4a10      	ldr	r2, [pc, #64]	; (c4b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c476:	9b01      	ldr	r3, [sp, #4]
    c478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c47c:	2b00      	cmp	r3, #0
    c47e:	d10d      	bne.n	c49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c480:	f7f4 fa8a 	bl	998 <Adc_schm_read_msr>
    c484:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c486:	9b00      	ldr	r3, [sp, #0]
    c488:	f003 0301 	and.w	r3, r3, #1
    c48c:	2b00      	cmp	r3, #0
    c48e:	d100      	bne.n	c492 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c490:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c492:	490a      	ldr	r1, [pc, #40]	; (c4bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c494:	9b01      	ldr	r3, [sp, #4]
    c496:	9a00      	ldr	r2, [sp, #0]
    c498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c49c:	4a06      	ldr	r2, [pc, #24]	; (c4b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c49e:	9b01      	ldr	r3, [sp, #4]
    c4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4a4:	1c5a      	adds	r2, r3, #1
    c4a6:	4904      	ldr	r1, [pc, #16]	; (c4b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c4a8:	9b01      	ldr	r3, [sp, #4]
    c4aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4ae:	bf00      	nop
    c4b0:	b003      	add	sp, #12
    c4b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c4b6:	bf00      	nop
    c4b8:	1fff8edc 	.word	0x1fff8edc
    c4bc:	1fff8ed8 	.word	0x1fff8ed8

0000c4c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c4c0:	b500      	push	{lr}
    c4c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4c4:	f7f4 fb4a 	bl	b5c <Sys_GetCoreID>
    c4c8:	4603      	mov	r3, r0
    c4ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c4cc:	4a0d      	ldr	r2, [pc, #52]	; (c504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c4ce:	9b01      	ldr	r3, [sp, #4]
    c4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d4:	1e5a      	subs	r2, r3, #1
    c4d6:	490b      	ldr	r1, [pc, #44]	; (c504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c4d8:	9b01      	ldr	r3, [sp, #4]
    c4da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c4de:	4a0a      	ldr	r2, [pc, #40]	; (c508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c4e0:	9b01      	ldr	r3, [sp, #4]
    c4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e6:	f003 0301 	and.w	r3, r3, #1
    c4ea:	2b00      	cmp	r3, #0
    c4ec:	d106      	bne.n	c4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c4ee:	4a05      	ldr	r2, [pc, #20]	; (c504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c4f0:	9b01      	ldr	r3, [sp, #4]
    c4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	d100      	bne.n	c4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c4fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c4fc:	bf00      	nop
    c4fe:	b003      	add	sp, #12
    c500:	f85d fb04 	ldr.w	pc, [sp], #4
    c504:	1fff8edc 	.word	0x1fff8edc
    c508:	1fff8ed8 	.word	0x1fff8ed8

0000c50c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c50c:	b500      	push	{lr}
    c50e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c510:	f7f4 fb24 	bl	b5c <Sys_GetCoreID>
    c514:	4603      	mov	r3, r0
    c516:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c518:	4a10      	ldr	r2, [pc, #64]	; (c55c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c51a:	9b01      	ldr	r3, [sp, #4]
    c51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c520:	2b00      	cmp	r3, #0
    c522:	d10d      	bne.n	c540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c524:	f7f4 fa38 	bl	998 <Adc_schm_read_msr>
    c528:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c52a:	9b00      	ldr	r3, [sp, #0]
    c52c:	f003 0301 	and.w	r3, r3, #1
    c530:	2b00      	cmp	r3, #0
    c532:	d100      	bne.n	c536 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c534:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c536:	490a      	ldr	r1, [pc, #40]	; (c560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	9a00      	ldr	r2, [sp, #0]
    c53c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c540:	4a06      	ldr	r2, [pc, #24]	; (c55c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c542:	9b01      	ldr	r3, [sp, #4]
    c544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c548:	1c5a      	adds	r2, r3, #1
    c54a:	4904      	ldr	r1, [pc, #16]	; (c55c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c54c:	9b01      	ldr	r3, [sp, #4]
    c54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c552:	bf00      	nop
    c554:	b003      	add	sp, #12
    c556:	f85d fb04 	ldr.w	pc, [sp], #4
    c55a:	bf00      	nop
    c55c:	1fff8ee4 	.word	0x1fff8ee4
    c560:	1fff8ee0 	.word	0x1fff8ee0

0000c564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c564:	b500      	push	{lr}
    c566:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c568:	f7f4 faf8 	bl	b5c <Sys_GetCoreID>
    c56c:	4603      	mov	r3, r0
    c56e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c570:	4a0d      	ldr	r2, [pc, #52]	; (c5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c572:	9b01      	ldr	r3, [sp, #4]
    c574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c578:	1e5a      	subs	r2, r3, #1
    c57a:	490b      	ldr	r1, [pc, #44]	; (c5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c57c:	9b01      	ldr	r3, [sp, #4]
    c57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c582:	4a0a      	ldr	r2, [pc, #40]	; (c5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c584:	9b01      	ldr	r3, [sp, #4]
    c586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c58a:	f003 0301 	and.w	r3, r3, #1
    c58e:	2b00      	cmp	r3, #0
    c590:	d106      	bne.n	c5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c592:	4a05      	ldr	r2, [pc, #20]	; (c5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c594:	9b01      	ldr	r3, [sp, #4]
    c596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c59a:	2b00      	cmp	r3, #0
    c59c:	d100      	bne.n	c5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c59e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5a0:	bf00      	nop
    c5a2:	b003      	add	sp, #12
    c5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c5a8:	1fff8ee4 	.word	0x1fff8ee4
    c5ac:	1fff8ee0 	.word	0x1fff8ee0

0000c5b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c5b0:	b500      	push	{lr}
    c5b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5b4:	f7f4 fad2 	bl	b5c <Sys_GetCoreID>
    c5b8:	4603      	mov	r3, r0
    c5ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    c5bc:	4a10      	ldr	r2, [pc, #64]	; (c600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c5be:	9b01      	ldr	r3, [sp, #4]
    c5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d10d      	bne.n	c5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c5c8:	f7f4 f9e6 	bl	998 <Adc_schm_read_msr>
    c5cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c5ce:	9b00      	ldr	r3, [sp, #0]
    c5d0:	f003 0301 	and.w	r3, r3, #1
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d100      	bne.n	c5da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c5d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    c5da:	490a      	ldr	r1, [pc, #40]	; (c604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    c5dc:	9b01      	ldr	r3, [sp, #4]
    c5de:	9a00      	ldr	r2, [sp, #0]
    c5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    c5e4:	4a06      	ldr	r2, [pc, #24]	; (c600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c5e6:	9b01      	ldr	r3, [sp, #4]
    c5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ec:	1c5a      	adds	r2, r3, #1
    c5ee:	4904      	ldr	r1, [pc, #16]	; (c600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c5f0:	9b01      	ldr	r3, [sp, #4]
    c5f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c5f6:	bf00      	nop
    c5f8:	b003      	add	sp, #12
    c5fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c5fe:	bf00      	nop
    c600:	1fff8eec 	.word	0x1fff8eec
    c604:	1fff8ee8 	.word	0x1fff8ee8

0000c608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c608:	b500      	push	{lr}
    c60a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c60c:	f7f4 faa6 	bl	b5c <Sys_GetCoreID>
    c610:	4603      	mov	r3, r0
    c612:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    c614:	4a0d      	ldr	r2, [pc, #52]	; (c64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c616:	9b01      	ldr	r3, [sp, #4]
    c618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c61c:	1e5a      	subs	r2, r3, #1
    c61e:	490b      	ldr	r1, [pc, #44]	; (c64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c620:	9b01      	ldr	r3, [sp, #4]
    c622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    c626:	4a0a      	ldr	r2, [pc, #40]	; (c650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    c628:	9b01      	ldr	r3, [sp, #4]
    c62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c62e:	f003 0301 	and.w	r3, r3, #1
    c632:	2b00      	cmp	r3, #0
    c634:	d106      	bne.n	c644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    c636:	4a05      	ldr	r2, [pc, #20]	; (c64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c638:	9b01      	ldr	r3, [sp, #4]
    c63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c63e:	2b00      	cmp	r3, #0
    c640:	d100      	bne.n	c644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c642:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c644:	bf00      	nop
    c646:	b003      	add	sp, #12
    c648:	f85d fb04 	ldr.w	pc, [sp], #4
    c64c:	1fff8eec 	.word	0x1fff8eec
    c650:	1fff8ee8 	.word	0x1fff8ee8

0000c654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c654:	b500      	push	{lr}
    c656:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c658:	f7f4 fa80 	bl	b5c <Sys_GetCoreID>
    c65c:	4603      	mov	r3, r0
    c65e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    c660:	4a10      	ldr	r2, [pc, #64]	; (c6a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c662:	9b01      	ldr	r3, [sp, #4]
    c664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c668:	2b00      	cmp	r3, #0
    c66a:	d10d      	bne.n	c688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c66c:	f7f4 f994 	bl	998 <Adc_schm_read_msr>
    c670:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c672:	9b00      	ldr	r3, [sp, #0]
    c674:	f003 0301 	and.w	r3, r3, #1
    c678:	2b00      	cmp	r3, #0
    c67a:	d100      	bne.n	c67e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c67c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    c67e:	490a      	ldr	r1, [pc, #40]	; (c6a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    c680:	9b01      	ldr	r3, [sp, #4]
    c682:	9a00      	ldr	r2, [sp, #0]
    c684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    c688:	4a06      	ldr	r2, [pc, #24]	; (c6a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c68a:	9b01      	ldr	r3, [sp, #4]
    c68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c690:	1c5a      	adds	r2, r3, #1
    c692:	4904      	ldr	r1, [pc, #16]	; (c6a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c694:	9b01      	ldr	r3, [sp, #4]
    c696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c69a:	bf00      	nop
    c69c:	b003      	add	sp, #12
    c69e:	f85d fb04 	ldr.w	pc, [sp], #4
    c6a2:	bf00      	nop
    c6a4:	1fff8ef4 	.word	0x1fff8ef4
    c6a8:	1fff8ef0 	.word	0x1fff8ef0

0000c6ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c6ac:	b500      	push	{lr}
    c6ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6b0:	f7f4 fa54 	bl	b5c <Sys_GetCoreID>
    c6b4:	4603      	mov	r3, r0
    c6b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    c6b8:	4a0d      	ldr	r2, [pc, #52]	; (c6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c6ba:	9b01      	ldr	r3, [sp, #4]
    c6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6c0:	1e5a      	subs	r2, r3, #1
    c6c2:	490b      	ldr	r1, [pc, #44]	; (c6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c6c4:	9b01      	ldr	r3, [sp, #4]
    c6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    c6ca:	4a0a      	ldr	r2, [pc, #40]	; (c6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    c6cc:	9b01      	ldr	r3, [sp, #4]
    c6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6d2:	f003 0301 	and.w	r3, r3, #1
    c6d6:	2b00      	cmp	r3, #0
    c6d8:	d106      	bne.n	c6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    c6da:	4a05      	ldr	r2, [pc, #20]	; (c6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c6dc:	9b01      	ldr	r3, [sp, #4]
    c6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6e2:	2b00      	cmp	r3, #0
    c6e4:	d100      	bne.n	c6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c6e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c6e8:	bf00      	nop
    c6ea:	b003      	add	sp, #12
    c6ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c6f0:	1fff8ef4 	.word	0x1fff8ef4
    c6f4:	1fff8ef0 	.word	0x1fff8ef0

0000c6f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c6f8:	b500      	push	{lr}
    c6fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6fc:	f7f4 fa2e 	bl	b5c <Sys_GetCoreID>
    c700:	4603      	mov	r3, r0
    c702:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    c704:	4a10      	ldr	r2, [pc, #64]	; (c748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c706:	9b01      	ldr	r3, [sp, #4]
    c708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c70c:	2b00      	cmp	r3, #0
    c70e:	d10d      	bne.n	c72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c710:	f7f4 f942 	bl	998 <Adc_schm_read_msr>
    c714:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c716:	9b00      	ldr	r3, [sp, #0]
    c718:	f003 0301 	and.w	r3, r3, #1
    c71c:	2b00      	cmp	r3, #0
    c71e:	d100      	bne.n	c722 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c720:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    c722:	490a      	ldr	r1, [pc, #40]	; (c74c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    c724:	9b01      	ldr	r3, [sp, #4]
    c726:	9a00      	ldr	r2, [sp, #0]
    c728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    c72c:	4a06      	ldr	r2, [pc, #24]	; (c748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c72e:	9b01      	ldr	r3, [sp, #4]
    c730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c734:	1c5a      	adds	r2, r3, #1
    c736:	4904      	ldr	r1, [pc, #16]	; (c748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c738:	9b01      	ldr	r3, [sp, #4]
    c73a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c73e:	bf00      	nop
    c740:	b003      	add	sp, #12
    c742:	f85d fb04 	ldr.w	pc, [sp], #4
    c746:	bf00      	nop
    c748:	1fff8efc 	.word	0x1fff8efc
    c74c:	1fff8ef8 	.word	0x1fff8ef8

0000c750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c750:	b500      	push	{lr}
    c752:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c754:	f7f4 fa02 	bl	b5c <Sys_GetCoreID>
    c758:	4603      	mov	r3, r0
    c75a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    c75c:	4a0d      	ldr	r2, [pc, #52]	; (c794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c75e:	9b01      	ldr	r3, [sp, #4]
    c760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c764:	1e5a      	subs	r2, r3, #1
    c766:	490b      	ldr	r1, [pc, #44]	; (c794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c768:	9b01      	ldr	r3, [sp, #4]
    c76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    c76e:	4a0a      	ldr	r2, [pc, #40]	; (c798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    c770:	9b01      	ldr	r3, [sp, #4]
    c772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c776:	f003 0301 	and.w	r3, r3, #1
    c77a:	2b00      	cmp	r3, #0
    c77c:	d106      	bne.n	c78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    c77e:	4a05      	ldr	r2, [pc, #20]	; (c794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c780:	9b01      	ldr	r3, [sp, #4]
    c782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c786:	2b00      	cmp	r3, #0
    c788:	d100      	bne.n	c78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c78a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c78c:	bf00      	nop
    c78e:	b003      	add	sp, #12
    c790:	f85d fb04 	ldr.w	pc, [sp], #4
    c794:	1fff8efc 	.word	0x1fff8efc
    c798:	1fff8ef8 	.word	0x1fff8ef8

0000c79c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c79c:	b500      	push	{lr}
    c79e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7a0:	f7f4 f9dc 	bl	b5c <Sys_GetCoreID>
    c7a4:	4603      	mov	r3, r0
    c7a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    c7a8:	4a10      	ldr	r2, [pc, #64]	; (c7ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c7aa:	9b01      	ldr	r3, [sp, #4]
    c7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d10d      	bne.n	c7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7b4:	f7f4 f8f0 	bl	998 <Adc_schm_read_msr>
    c7b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7ba:	9b00      	ldr	r3, [sp, #0]
    c7bc:	f003 0301 	and.w	r3, r3, #1
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d100      	bne.n	c7c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c7c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    c7c6:	490a      	ldr	r1, [pc, #40]	; (c7f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    c7c8:	9b01      	ldr	r3, [sp, #4]
    c7ca:	9a00      	ldr	r2, [sp, #0]
    c7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    c7d0:	4a06      	ldr	r2, [pc, #24]	; (c7ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c7d2:	9b01      	ldr	r3, [sp, #4]
    c7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7d8:	1c5a      	adds	r2, r3, #1
    c7da:	4904      	ldr	r1, [pc, #16]	; (c7ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c7dc:	9b01      	ldr	r3, [sp, #4]
    c7de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c7e2:	bf00      	nop
    c7e4:	b003      	add	sp, #12
    c7e6:	f85d fb04 	ldr.w	pc, [sp], #4
    c7ea:	bf00      	nop
    c7ec:	1fff8f04 	.word	0x1fff8f04
    c7f0:	1fff8f00 	.word	0x1fff8f00

0000c7f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c7f4:	b500      	push	{lr}
    c7f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7f8:	f7f4 f9b0 	bl	b5c <Sys_GetCoreID>
    c7fc:	4603      	mov	r3, r0
    c7fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    c800:	4a0d      	ldr	r2, [pc, #52]	; (c838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c802:	9b01      	ldr	r3, [sp, #4]
    c804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c808:	1e5a      	subs	r2, r3, #1
    c80a:	490b      	ldr	r1, [pc, #44]	; (c838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c80c:	9b01      	ldr	r3, [sp, #4]
    c80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    c812:	4a0a      	ldr	r2, [pc, #40]	; (c83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    c814:	9b01      	ldr	r3, [sp, #4]
    c816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c81a:	f003 0301 	and.w	r3, r3, #1
    c81e:	2b00      	cmp	r3, #0
    c820:	d106      	bne.n	c830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    c822:	4a05      	ldr	r2, [pc, #20]	; (c838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c824:	9b01      	ldr	r3, [sp, #4]
    c826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d100      	bne.n	c830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c82e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c830:	bf00      	nop
    c832:	b003      	add	sp, #12
    c834:	f85d fb04 	ldr.w	pc, [sp], #4
    c838:	1fff8f04 	.word	0x1fff8f04
    c83c:	1fff8f00 	.word	0x1fff8f00

0000c840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c840:	b500      	push	{lr}
    c842:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c844:	f7f4 f98a 	bl	b5c <Sys_GetCoreID>
    c848:	4603      	mov	r3, r0
    c84a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    c84c:	4a10      	ldr	r2, [pc, #64]	; (c890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c84e:	9b01      	ldr	r3, [sp, #4]
    c850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c854:	2b00      	cmp	r3, #0
    c856:	d10d      	bne.n	c874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c858:	f7f4 f89e 	bl	998 <Adc_schm_read_msr>
    c85c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c85e:	9b00      	ldr	r3, [sp, #0]
    c860:	f003 0301 	and.w	r3, r3, #1
    c864:	2b00      	cmp	r3, #0
    c866:	d100      	bne.n	c86a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c868:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    c86a:	490a      	ldr	r1, [pc, #40]	; (c894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    c86c:	9b01      	ldr	r3, [sp, #4]
    c86e:	9a00      	ldr	r2, [sp, #0]
    c870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    c874:	4a06      	ldr	r2, [pc, #24]	; (c890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c876:	9b01      	ldr	r3, [sp, #4]
    c878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c87c:	1c5a      	adds	r2, r3, #1
    c87e:	4904      	ldr	r1, [pc, #16]	; (c890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c880:	9b01      	ldr	r3, [sp, #4]
    c882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c886:	bf00      	nop
    c888:	b003      	add	sp, #12
    c88a:	f85d fb04 	ldr.w	pc, [sp], #4
    c88e:	bf00      	nop
    c890:	1fff8f0c 	.word	0x1fff8f0c
    c894:	1fff8f08 	.word	0x1fff8f08

0000c898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c898:	b500      	push	{lr}
    c89a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c89c:	f7f4 f95e 	bl	b5c <Sys_GetCoreID>
    c8a0:	4603      	mov	r3, r0
    c8a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    c8a4:	4a0d      	ldr	r2, [pc, #52]	; (c8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c8a6:	9b01      	ldr	r3, [sp, #4]
    c8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8ac:	1e5a      	subs	r2, r3, #1
    c8ae:	490b      	ldr	r1, [pc, #44]	; (c8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c8b0:	9b01      	ldr	r3, [sp, #4]
    c8b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    c8b6:	4a0a      	ldr	r2, [pc, #40]	; (c8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    c8b8:	9b01      	ldr	r3, [sp, #4]
    c8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8be:	f003 0301 	and.w	r3, r3, #1
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d106      	bne.n	c8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    c8c6:	4a05      	ldr	r2, [pc, #20]	; (c8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c8c8:	9b01      	ldr	r3, [sp, #4]
    c8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d100      	bne.n	c8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c8d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c8d4:	bf00      	nop
    c8d6:	b003      	add	sp, #12
    c8d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c8dc:	1fff8f0c 	.word	0x1fff8f0c
    c8e0:	1fff8f08 	.word	0x1fff8f08

0000c8e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c8e4:	b500      	push	{lr}
    c8e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8e8:	f7f4 f938 	bl	b5c <Sys_GetCoreID>
    c8ec:	4603      	mov	r3, r0
    c8ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    c8f0:	4a10      	ldr	r2, [pc, #64]	; (c934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d10d      	bne.n	c918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c8fc:	f7f4 f84c 	bl	998 <Adc_schm_read_msr>
    c900:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c902:	9b00      	ldr	r3, [sp, #0]
    c904:	f003 0301 	and.w	r3, r3, #1
    c908:	2b00      	cmp	r3, #0
    c90a:	d100      	bne.n	c90e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c90c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    c90e:	490a      	ldr	r1, [pc, #40]	; (c938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    c910:	9b01      	ldr	r3, [sp, #4]
    c912:	9a00      	ldr	r2, [sp, #0]
    c914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    c918:	4a06      	ldr	r2, [pc, #24]	; (c934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c91a:	9b01      	ldr	r3, [sp, #4]
    c91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c920:	1c5a      	adds	r2, r3, #1
    c922:	4904      	ldr	r1, [pc, #16]	; (c934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c924:	9b01      	ldr	r3, [sp, #4]
    c926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c92a:	bf00      	nop
    c92c:	b003      	add	sp, #12
    c92e:	f85d fb04 	ldr.w	pc, [sp], #4
    c932:	bf00      	nop
    c934:	1fff8f14 	.word	0x1fff8f14
    c938:	1fff8f10 	.word	0x1fff8f10

0000c93c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c93c:	b500      	push	{lr}
    c93e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c940:	f7f4 f90c 	bl	b5c <Sys_GetCoreID>
    c944:	4603      	mov	r3, r0
    c946:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    c948:	4a0d      	ldr	r2, [pc, #52]	; (c980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c94a:	9b01      	ldr	r3, [sp, #4]
    c94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c950:	1e5a      	subs	r2, r3, #1
    c952:	490b      	ldr	r1, [pc, #44]	; (c980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c954:	9b01      	ldr	r3, [sp, #4]
    c956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    c95a:	4a0a      	ldr	r2, [pc, #40]	; (c984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    c95c:	9b01      	ldr	r3, [sp, #4]
    c95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c962:	f003 0301 	and.w	r3, r3, #1
    c966:	2b00      	cmp	r3, #0
    c968:	d106      	bne.n	c978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    c96a:	4a05      	ldr	r2, [pc, #20]	; (c980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c96c:	9b01      	ldr	r3, [sp, #4]
    c96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c972:	2b00      	cmp	r3, #0
    c974:	d100      	bne.n	c978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c976:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c978:	bf00      	nop
    c97a:	b003      	add	sp, #12
    c97c:	f85d fb04 	ldr.w	pc, [sp], #4
    c980:	1fff8f14 	.word	0x1fff8f14
    c984:	1fff8f10 	.word	0x1fff8f10

0000c988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c988:	b500      	push	{lr}
    c98a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c98c:	f7f4 f8e6 	bl	b5c <Sys_GetCoreID>
    c990:	4603      	mov	r3, r0
    c992:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    c994:	4a10      	ldr	r2, [pc, #64]	; (c9d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c996:	9b01      	ldr	r3, [sp, #4]
    c998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c99c:	2b00      	cmp	r3, #0
    c99e:	d10d      	bne.n	c9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9a0:	f7f3 fffa 	bl	998 <Adc_schm_read_msr>
    c9a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9a6:	9b00      	ldr	r3, [sp, #0]
    c9a8:	f003 0301 	and.w	r3, r3, #1
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d100      	bne.n	c9b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    c9b2:	490a      	ldr	r1, [pc, #40]	; (c9dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	9a00      	ldr	r2, [sp, #0]
    c9b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    c9bc:	4a06      	ldr	r2, [pc, #24]	; (c9d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c9be:	9b01      	ldr	r3, [sp, #4]
    c9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9c4:	1c5a      	adds	r2, r3, #1
    c9c6:	4904      	ldr	r1, [pc, #16]	; (c9d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c9c8:	9b01      	ldr	r3, [sp, #4]
    c9ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c9ce:	bf00      	nop
    c9d0:	b003      	add	sp, #12
    c9d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c9d6:	bf00      	nop
    c9d8:	1fff8f1c 	.word	0x1fff8f1c
    c9dc:	1fff8f18 	.word	0x1fff8f18

0000c9e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c9e0:	b500      	push	{lr}
    c9e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9e4:	f7f4 f8ba 	bl	b5c <Sys_GetCoreID>
    c9e8:	4603      	mov	r3, r0
    c9ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    c9ec:	4a0d      	ldr	r2, [pc, #52]	; (ca24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c9ee:	9b01      	ldr	r3, [sp, #4]
    c9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f4:	1e5a      	subs	r2, r3, #1
    c9f6:	490b      	ldr	r1, [pc, #44]	; (ca24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c9f8:	9b01      	ldr	r3, [sp, #4]
    c9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    c9fe:	4a0a      	ldr	r2, [pc, #40]	; (ca28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    ca00:	9b01      	ldr	r3, [sp, #4]
    ca02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca06:	f003 0301 	and.w	r3, r3, #1
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	d106      	bne.n	ca1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    ca0e:	4a05      	ldr	r2, [pc, #20]	; (ca24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ca10:	9b01      	ldr	r3, [sp, #4]
    ca12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca16:	2b00      	cmp	r3, #0
    ca18:	d100      	bne.n	ca1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca1c:	bf00      	nop
    ca1e:	b003      	add	sp, #12
    ca20:	f85d fb04 	ldr.w	pc, [sp], #4
    ca24:	1fff8f1c 	.word	0x1fff8f1c
    ca28:	1fff8f18 	.word	0x1fff8f18

0000ca2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    ca2c:	b500      	push	{lr}
    ca2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca30:	f7f4 f894 	bl	b5c <Sys_GetCoreID>
    ca34:	4603      	mov	r3, r0
    ca36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    ca38:	4a10      	ldr	r2, [pc, #64]	; (ca7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ca3a:	9b01      	ldr	r3, [sp, #4]
    ca3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca40:	2b00      	cmp	r3, #0
    ca42:	d10d      	bne.n	ca60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca44:	f7f3 ffa8 	bl	998 <Adc_schm_read_msr>
    ca48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca4a:	9b00      	ldr	r3, [sp, #0]
    ca4c:	f003 0301 	and.w	r3, r3, #1
    ca50:	2b00      	cmp	r3, #0
    ca52:	d100      	bne.n	ca56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    ca56:	490a      	ldr	r1, [pc, #40]	; (ca80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    ca58:	9b01      	ldr	r3, [sp, #4]
    ca5a:	9a00      	ldr	r2, [sp, #0]
    ca5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    ca60:	4a06      	ldr	r2, [pc, #24]	; (ca7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ca62:	9b01      	ldr	r3, [sp, #4]
    ca64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca68:	1c5a      	adds	r2, r3, #1
    ca6a:	4904      	ldr	r1, [pc, #16]	; (ca7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ca6c:	9b01      	ldr	r3, [sp, #4]
    ca6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca72:	bf00      	nop
    ca74:	b003      	add	sp, #12
    ca76:	f85d fb04 	ldr.w	pc, [sp], #4
    ca7a:	bf00      	nop
    ca7c:	1fff8f24 	.word	0x1fff8f24
    ca80:	1fff8f20 	.word	0x1fff8f20

0000ca84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    ca84:	b500      	push	{lr}
    ca86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca88:	f7f4 f868 	bl	b5c <Sys_GetCoreID>
    ca8c:	4603      	mov	r3, r0
    ca8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    ca90:	4a0d      	ldr	r2, [pc, #52]	; (cac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    ca92:	9b01      	ldr	r3, [sp, #4]
    ca94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca98:	1e5a      	subs	r2, r3, #1
    ca9a:	490b      	ldr	r1, [pc, #44]	; (cac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    ca9c:	9b01      	ldr	r3, [sp, #4]
    ca9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    caa2:	4a0a      	ldr	r2, [pc, #40]	; (cacc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    caa4:	9b01      	ldr	r3, [sp, #4]
    caa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caaa:	f003 0301 	and.w	r3, r3, #1
    caae:	2b00      	cmp	r3, #0
    cab0:	d106      	bne.n	cac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    cab2:	4a05      	ldr	r2, [pc, #20]	; (cac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cab4:	9b01      	ldr	r3, [sp, #4]
    cab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caba:	2b00      	cmp	r3, #0
    cabc:	d100      	bne.n	cac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cabe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cac0:	bf00      	nop
    cac2:	b003      	add	sp, #12
    cac4:	f85d fb04 	ldr.w	pc, [sp], #4
    cac8:	1fff8f24 	.word	0x1fff8f24
    cacc:	1fff8f20 	.word	0x1fff8f20

0000cad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cad0:	b500      	push	{lr}
    cad2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cad4:	f7f4 f842 	bl	b5c <Sys_GetCoreID>
    cad8:	4603      	mov	r3, r0
    cada:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    cadc:	4a10      	ldr	r2, [pc, #64]	; (cb20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cade:	9b01      	ldr	r3, [sp, #4]
    cae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d10d      	bne.n	cb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cae8:	f7f3 ff56 	bl	998 <Adc_schm_read_msr>
    caec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    caee:	9b00      	ldr	r3, [sp, #0]
    caf0:	f003 0301 	and.w	r3, r3, #1
    caf4:	2b00      	cmp	r3, #0
    caf6:	d100      	bne.n	cafa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    caf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    cafa:	490a      	ldr	r1, [pc, #40]	; (cb24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    cafc:	9b01      	ldr	r3, [sp, #4]
    cafe:	9a00      	ldr	r2, [sp, #0]
    cb00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    cb04:	4a06      	ldr	r2, [pc, #24]	; (cb20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cb06:	9b01      	ldr	r3, [sp, #4]
    cb08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb0c:	1c5a      	adds	r2, r3, #1
    cb0e:	4904      	ldr	r1, [pc, #16]	; (cb20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cb10:	9b01      	ldr	r3, [sp, #4]
    cb12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb16:	bf00      	nop
    cb18:	b003      	add	sp, #12
    cb1a:	f85d fb04 	ldr.w	pc, [sp], #4
    cb1e:	bf00      	nop
    cb20:	1fff8f2c 	.word	0x1fff8f2c
    cb24:	1fff8f28 	.word	0x1fff8f28

0000cb28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cb28:	b500      	push	{lr}
    cb2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb2c:	f7f4 f816 	bl	b5c <Sys_GetCoreID>
    cb30:	4603      	mov	r3, r0
    cb32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    cb34:	4a0d      	ldr	r2, [pc, #52]	; (cb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cb36:	9b01      	ldr	r3, [sp, #4]
    cb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb3c:	1e5a      	subs	r2, r3, #1
    cb3e:	490b      	ldr	r1, [pc, #44]	; (cb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cb40:	9b01      	ldr	r3, [sp, #4]
    cb42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    cb46:	4a0a      	ldr	r2, [pc, #40]	; (cb70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    cb48:	9b01      	ldr	r3, [sp, #4]
    cb4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb4e:	f003 0301 	and.w	r3, r3, #1
    cb52:	2b00      	cmp	r3, #0
    cb54:	d106      	bne.n	cb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    cb56:	4a05      	ldr	r2, [pc, #20]	; (cb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cb58:	9b01      	ldr	r3, [sp, #4]
    cb5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d100      	bne.n	cb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb64:	bf00      	nop
    cb66:	b003      	add	sp, #12
    cb68:	f85d fb04 	ldr.w	pc, [sp], #4
    cb6c:	1fff8f2c 	.word	0x1fff8f2c
    cb70:	1fff8f28 	.word	0x1fff8f28

0000cb74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    cb74:	b500      	push	{lr}
    cb76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb78:	f7f3 fff0 	bl	b5c <Sys_GetCoreID>
    cb7c:	4603      	mov	r3, r0
    cb7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    cb80:	4a10      	ldr	r2, [pc, #64]	; (cbc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cb82:	9b01      	ldr	r3, [sp, #4]
    cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d10d      	bne.n	cba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb8c:	f7f3 ff04 	bl	998 <Adc_schm_read_msr>
    cb90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb92:	9b00      	ldr	r3, [sp, #0]
    cb94:	f003 0301 	and.w	r3, r3, #1
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d100      	bne.n	cb9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    cb9e:	490a      	ldr	r1, [pc, #40]	; (cbc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    cba0:	9b01      	ldr	r3, [sp, #4]
    cba2:	9a00      	ldr	r2, [sp, #0]
    cba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    cba8:	4a06      	ldr	r2, [pc, #24]	; (cbc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cbaa:	9b01      	ldr	r3, [sp, #4]
    cbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbb0:	1c5a      	adds	r2, r3, #1
    cbb2:	4904      	ldr	r1, [pc, #16]	; (cbc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cbb4:	9b01      	ldr	r3, [sp, #4]
    cbb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbba:	bf00      	nop
    cbbc:	b003      	add	sp, #12
    cbbe:	f85d fb04 	ldr.w	pc, [sp], #4
    cbc2:	bf00      	nop
    cbc4:	1fff8f34 	.word	0x1fff8f34
    cbc8:	1fff8f30 	.word	0x1fff8f30

0000cbcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    cbcc:	b500      	push	{lr}
    cbce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbd0:	f7f3 ffc4 	bl	b5c <Sys_GetCoreID>
    cbd4:	4603      	mov	r3, r0
    cbd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    cbd8:	4a0d      	ldr	r2, [pc, #52]	; (cc10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    cbda:	9b01      	ldr	r3, [sp, #4]
    cbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbe0:	1e5a      	subs	r2, r3, #1
    cbe2:	490b      	ldr	r1, [pc, #44]	; (cc10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    cbe4:	9b01      	ldr	r3, [sp, #4]
    cbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    cbea:	4a0a      	ldr	r2, [pc, #40]	; (cc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    cbec:	9b01      	ldr	r3, [sp, #4]
    cbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbf2:	f003 0301 	and.w	r3, r3, #1
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d106      	bne.n	cc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    cbfa:	4a05      	ldr	r2, [pc, #20]	; (cc10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    cbfc:	9b01      	ldr	r3, [sp, #4]
    cbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc02:	2b00      	cmp	r3, #0
    cc04:	d100      	bne.n	cc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc08:	bf00      	nop
    cc0a:	b003      	add	sp, #12
    cc0c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc10:	1fff8f34 	.word	0x1fff8f34
    cc14:	1fff8f30 	.word	0x1fff8f30

0000cc18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cc18:	b500      	push	{lr}
    cc1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc1c:	f7f3 ff9e 	bl	b5c <Sys_GetCoreID>
    cc20:	4603      	mov	r3, r0
    cc22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    cc24:	4a10      	ldr	r2, [pc, #64]	; (cc68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cc26:	9b01      	ldr	r3, [sp, #4]
    cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d10d      	bne.n	cc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc30:	f7f3 feb2 	bl	998 <Adc_schm_read_msr>
    cc34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc36:	9b00      	ldr	r3, [sp, #0]
    cc38:	f003 0301 	and.w	r3, r3, #1
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d100      	bne.n	cc42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    cc42:	490a      	ldr	r1, [pc, #40]	; (cc6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    cc44:	9b01      	ldr	r3, [sp, #4]
    cc46:	9a00      	ldr	r2, [sp, #0]
    cc48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    cc4c:	4a06      	ldr	r2, [pc, #24]	; (cc68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cc4e:	9b01      	ldr	r3, [sp, #4]
    cc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc54:	1c5a      	adds	r2, r3, #1
    cc56:	4904      	ldr	r1, [pc, #16]	; (cc68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cc58:	9b01      	ldr	r3, [sp, #4]
    cc5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc5e:	bf00      	nop
    cc60:	b003      	add	sp, #12
    cc62:	f85d fb04 	ldr.w	pc, [sp], #4
    cc66:	bf00      	nop
    cc68:	1fff8f3c 	.word	0x1fff8f3c
    cc6c:	1fff8f38 	.word	0x1fff8f38

0000cc70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cc70:	b500      	push	{lr}
    cc72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc74:	f7f3 ff72 	bl	b5c <Sys_GetCoreID>
    cc78:	4603      	mov	r3, r0
    cc7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    cc7c:	4a0d      	ldr	r2, [pc, #52]	; (ccb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cc7e:	9b01      	ldr	r3, [sp, #4]
    cc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc84:	1e5a      	subs	r2, r3, #1
    cc86:	490b      	ldr	r1, [pc, #44]	; (ccb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cc88:	9b01      	ldr	r3, [sp, #4]
    cc8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    cc8e:	4a0a      	ldr	r2, [pc, #40]	; (ccb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    cc90:	9b01      	ldr	r3, [sp, #4]
    cc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc96:	f003 0301 	and.w	r3, r3, #1
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d106      	bne.n	ccac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    cc9e:	4a05      	ldr	r2, [pc, #20]	; (ccb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cca0:	9b01      	ldr	r3, [sp, #4]
    cca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d100      	bne.n	ccac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ccac:	bf00      	nop
    ccae:	b003      	add	sp, #12
    ccb0:	f85d fb04 	ldr.w	pc, [sp], #4
    ccb4:	1fff8f3c 	.word	0x1fff8f3c
    ccb8:	1fff8f38 	.word	0x1fff8f38

0000ccbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    ccbc:	b500      	push	{lr}
    ccbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccc0:	f7f3 ff4c 	bl	b5c <Sys_GetCoreID>
    ccc4:	4603      	mov	r3, r0
    ccc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    ccc8:	4a10      	ldr	r2, [pc, #64]	; (cd0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    ccca:	9b01      	ldr	r3, [sp, #4]
    cccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d10d      	bne.n	ccf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ccd4:	f7f3 fe60 	bl	998 <Adc_schm_read_msr>
    ccd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ccda:	9b00      	ldr	r3, [sp, #0]
    ccdc:	f003 0301 	and.w	r3, r3, #1
    cce0:	2b00      	cmp	r3, #0
    cce2:	d100      	bne.n	cce6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cce4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    cce6:	490a      	ldr	r1, [pc, #40]	; (cd10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    cce8:	9b01      	ldr	r3, [sp, #4]
    ccea:	9a00      	ldr	r2, [sp, #0]
    ccec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    ccf0:	4a06      	ldr	r2, [pc, #24]	; (cd0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    ccf2:	9b01      	ldr	r3, [sp, #4]
    ccf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccf8:	1c5a      	adds	r2, r3, #1
    ccfa:	4904      	ldr	r1, [pc, #16]	; (cd0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    ccfc:	9b01      	ldr	r3, [sp, #4]
    ccfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd02:	bf00      	nop
    cd04:	b003      	add	sp, #12
    cd06:	f85d fb04 	ldr.w	pc, [sp], #4
    cd0a:	bf00      	nop
    cd0c:	1fff8f44 	.word	0x1fff8f44
    cd10:	1fff8f40 	.word	0x1fff8f40

0000cd14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cd14:	b500      	push	{lr}
    cd16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd18:	f7f3 ff20 	bl	b5c <Sys_GetCoreID>
    cd1c:	4603      	mov	r3, r0
    cd1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    cd20:	4a0d      	ldr	r2, [pc, #52]	; (cd58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cd22:	9b01      	ldr	r3, [sp, #4]
    cd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd28:	1e5a      	subs	r2, r3, #1
    cd2a:	490b      	ldr	r1, [pc, #44]	; (cd58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cd2c:	9b01      	ldr	r3, [sp, #4]
    cd2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    cd32:	4a0a      	ldr	r2, [pc, #40]	; (cd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    cd34:	9b01      	ldr	r3, [sp, #4]
    cd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd3a:	f003 0301 	and.w	r3, r3, #1
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d106      	bne.n	cd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    cd42:	4a05      	ldr	r2, [pc, #20]	; (cd58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cd44:	9b01      	ldr	r3, [sp, #4]
    cd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd4a:	2b00      	cmp	r3, #0
    cd4c:	d100      	bne.n	cd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd50:	bf00      	nop
    cd52:	b003      	add	sp, #12
    cd54:	f85d fb04 	ldr.w	pc, [sp], #4
    cd58:	1fff8f44 	.word	0x1fff8f44
    cd5c:	1fff8f40 	.word	0x1fff8f40

0000cd60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cd60:	b500      	push	{lr}
    cd62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd64:	f7f3 fefa 	bl	b5c <Sys_GetCoreID>
    cd68:	4603      	mov	r3, r0
    cd6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    cd6c:	4a10      	ldr	r2, [pc, #64]	; (cdb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cd6e:	9b01      	ldr	r3, [sp, #4]
    cd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd74:	2b00      	cmp	r3, #0
    cd76:	d10d      	bne.n	cd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd78:	f7f3 fe0e 	bl	998 <Adc_schm_read_msr>
    cd7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd7e:	9b00      	ldr	r3, [sp, #0]
    cd80:	f003 0301 	and.w	r3, r3, #1
    cd84:	2b00      	cmp	r3, #0
    cd86:	d100      	bne.n	cd8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    cd8a:	490a      	ldr	r1, [pc, #40]	; (cdb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    cd8c:	9b01      	ldr	r3, [sp, #4]
    cd8e:	9a00      	ldr	r2, [sp, #0]
    cd90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    cd94:	4a06      	ldr	r2, [pc, #24]	; (cdb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cd96:	9b01      	ldr	r3, [sp, #4]
    cd98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd9c:	1c5a      	adds	r2, r3, #1
    cd9e:	4904      	ldr	r1, [pc, #16]	; (cdb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cda0:	9b01      	ldr	r3, [sp, #4]
    cda2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cda6:	bf00      	nop
    cda8:	b003      	add	sp, #12
    cdaa:	f85d fb04 	ldr.w	pc, [sp], #4
    cdae:	bf00      	nop
    cdb0:	1fff8f4c 	.word	0x1fff8f4c
    cdb4:	1fff8f48 	.word	0x1fff8f48

0000cdb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cdb8:	b500      	push	{lr}
    cdba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdbc:	f7f3 fece 	bl	b5c <Sys_GetCoreID>
    cdc0:	4603      	mov	r3, r0
    cdc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    cdc4:	4a0d      	ldr	r2, [pc, #52]	; (cdfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cdc6:	9b01      	ldr	r3, [sp, #4]
    cdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdcc:	1e5a      	subs	r2, r3, #1
    cdce:	490b      	ldr	r1, [pc, #44]	; (cdfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cdd0:	9b01      	ldr	r3, [sp, #4]
    cdd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    cdd6:	4a0a      	ldr	r2, [pc, #40]	; (ce00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    cdd8:	9b01      	ldr	r3, [sp, #4]
    cdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdde:	f003 0301 	and.w	r3, r3, #1
    cde2:	2b00      	cmp	r3, #0
    cde4:	d106      	bne.n	cdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    cde6:	4a05      	ldr	r2, [pc, #20]	; (cdfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cde8:	9b01      	ldr	r3, [sp, #4]
    cdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d100      	bne.n	cdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cdf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cdf4:	bf00      	nop
    cdf6:	b003      	add	sp, #12
    cdf8:	f85d fb04 	ldr.w	pc, [sp], #4
    cdfc:	1fff8f4c 	.word	0x1fff8f4c
    ce00:	1fff8f48 	.word	0x1fff8f48

0000ce04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ce04:	b500      	push	{lr}
    ce06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce08:	f7f3 fea8 	bl	b5c <Sys_GetCoreID>
    ce0c:	4603      	mov	r3, r0
    ce0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    ce10:	4a10      	ldr	r2, [pc, #64]	; (ce54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    ce12:	9b01      	ldr	r3, [sp, #4]
    ce14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce18:	2b00      	cmp	r3, #0
    ce1a:	d10d      	bne.n	ce38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce1c:	f7f3 fdbc 	bl	998 <Adc_schm_read_msr>
    ce20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce22:	9b00      	ldr	r3, [sp, #0]
    ce24:	f003 0301 	and.w	r3, r3, #1
    ce28:	2b00      	cmp	r3, #0
    ce2a:	d100      	bne.n	ce2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    ce2e:	490a      	ldr	r1, [pc, #40]	; (ce58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    ce30:	9b01      	ldr	r3, [sp, #4]
    ce32:	9a00      	ldr	r2, [sp, #0]
    ce34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    ce38:	4a06      	ldr	r2, [pc, #24]	; (ce54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    ce3a:	9b01      	ldr	r3, [sp, #4]
    ce3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce40:	1c5a      	adds	r2, r3, #1
    ce42:	4904      	ldr	r1, [pc, #16]	; (ce54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    ce44:	9b01      	ldr	r3, [sp, #4]
    ce46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce4a:	bf00      	nop
    ce4c:	b003      	add	sp, #12
    ce4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ce52:	bf00      	nop
    ce54:	1fff8f54 	.word	0x1fff8f54
    ce58:	1fff8f50 	.word	0x1fff8f50

0000ce5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ce5c:	b500      	push	{lr}
    ce5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce60:	f7f3 fe7c 	bl	b5c <Sys_GetCoreID>
    ce64:	4603      	mov	r3, r0
    ce66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    ce68:	4a0d      	ldr	r2, [pc, #52]	; (cea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ce6a:	9b01      	ldr	r3, [sp, #4]
    ce6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce70:	1e5a      	subs	r2, r3, #1
    ce72:	490b      	ldr	r1, [pc, #44]	; (cea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ce74:	9b01      	ldr	r3, [sp, #4]
    ce76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    ce7a:	4a0a      	ldr	r2, [pc, #40]	; (cea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    ce7c:	9b01      	ldr	r3, [sp, #4]
    ce7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce82:	f003 0301 	and.w	r3, r3, #1
    ce86:	2b00      	cmp	r3, #0
    ce88:	d106      	bne.n	ce98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    ce8a:	4a05      	ldr	r2, [pc, #20]	; (cea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ce8c:	9b01      	ldr	r3, [sp, #4]
    ce8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce92:	2b00      	cmp	r3, #0
    ce94:	d100      	bne.n	ce98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce98:	bf00      	nop
    ce9a:	b003      	add	sp, #12
    ce9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cea0:	1fff8f54 	.word	0x1fff8f54
    cea4:	1fff8f50 	.word	0x1fff8f50

0000cea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cea8:	b500      	push	{lr}
    ceaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ceac:	f7f3 fe56 	bl	b5c <Sys_GetCoreID>
    ceb0:	4603      	mov	r3, r0
    ceb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    ceb4:	4a10      	ldr	r2, [pc, #64]	; (cef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    ceb6:	9b01      	ldr	r3, [sp, #4]
    ceb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cebc:	2b00      	cmp	r3, #0
    cebe:	d10d      	bne.n	cedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cec0:	f7f3 fd6a 	bl	998 <Adc_schm_read_msr>
    cec4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cec6:	9b00      	ldr	r3, [sp, #0]
    cec8:	f003 0301 	and.w	r3, r3, #1
    cecc:	2b00      	cmp	r3, #0
    cece:	d100      	bne.n	ced2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ced0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    ced2:	490a      	ldr	r1, [pc, #40]	; (cefc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    ced4:	9b01      	ldr	r3, [sp, #4]
    ced6:	9a00      	ldr	r2, [sp, #0]
    ced8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    cedc:	4a06      	ldr	r2, [pc, #24]	; (cef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cede:	9b01      	ldr	r3, [sp, #4]
    cee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cee4:	1c5a      	adds	r2, r3, #1
    cee6:	4904      	ldr	r1, [pc, #16]	; (cef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cee8:	9b01      	ldr	r3, [sp, #4]
    ceea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ceee:	bf00      	nop
    cef0:	b003      	add	sp, #12
    cef2:	f85d fb04 	ldr.w	pc, [sp], #4
    cef6:	bf00      	nop
    cef8:	1fff8f5c 	.word	0x1fff8f5c
    cefc:	1fff8f58 	.word	0x1fff8f58

0000cf00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cf00:	b500      	push	{lr}
    cf02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf04:	f7f3 fe2a 	bl	b5c <Sys_GetCoreID>
    cf08:	4603      	mov	r3, r0
    cf0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    cf0c:	4a0d      	ldr	r2, [pc, #52]	; (cf44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cf0e:	9b01      	ldr	r3, [sp, #4]
    cf10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf14:	1e5a      	subs	r2, r3, #1
    cf16:	490b      	ldr	r1, [pc, #44]	; (cf44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cf18:	9b01      	ldr	r3, [sp, #4]
    cf1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    cf1e:	4a0a      	ldr	r2, [pc, #40]	; (cf48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    cf20:	9b01      	ldr	r3, [sp, #4]
    cf22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf26:	f003 0301 	and.w	r3, r3, #1
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d106      	bne.n	cf3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    cf2e:	4a05      	ldr	r2, [pc, #20]	; (cf44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cf30:	9b01      	ldr	r3, [sp, #4]
    cf32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf36:	2b00      	cmp	r3, #0
    cf38:	d100      	bne.n	cf3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf3c:	bf00      	nop
    cf3e:	b003      	add	sp, #12
    cf40:	f85d fb04 	ldr.w	pc, [sp], #4
    cf44:	1fff8f5c 	.word	0x1fff8f5c
    cf48:	1fff8f58 	.word	0x1fff8f58

0000cf4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cf4c:	b500      	push	{lr}
    cf4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf50:	f7f3 fe04 	bl	b5c <Sys_GetCoreID>
    cf54:	4603      	mov	r3, r0
    cf56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    cf58:	4a10      	ldr	r2, [pc, #64]	; (cf9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cf5a:	9b01      	ldr	r3, [sp, #4]
    cf5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf60:	2b00      	cmp	r3, #0
    cf62:	d10d      	bne.n	cf80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf64:	f7f3 fd18 	bl	998 <Adc_schm_read_msr>
    cf68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf6a:	9b00      	ldr	r3, [sp, #0]
    cf6c:	f003 0301 	and.w	r3, r3, #1
    cf70:	2b00      	cmp	r3, #0
    cf72:	d100      	bne.n	cf76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    cf76:	490a      	ldr	r1, [pc, #40]	; (cfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    cf78:	9b01      	ldr	r3, [sp, #4]
    cf7a:	9a00      	ldr	r2, [sp, #0]
    cf7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    cf80:	4a06      	ldr	r2, [pc, #24]	; (cf9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cf82:	9b01      	ldr	r3, [sp, #4]
    cf84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf88:	1c5a      	adds	r2, r3, #1
    cf8a:	4904      	ldr	r1, [pc, #16]	; (cf9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cf8c:	9b01      	ldr	r3, [sp, #4]
    cf8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf92:	bf00      	nop
    cf94:	b003      	add	sp, #12
    cf96:	f85d fb04 	ldr.w	pc, [sp], #4
    cf9a:	bf00      	nop
    cf9c:	1fff8f64 	.word	0x1fff8f64
    cfa0:	1fff8f60 	.word	0x1fff8f60

0000cfa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cfa4:	b500      	push	{lr}
    cfa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfa8:	f7f3 fdd8 	bl	b5c <Sys_GetCoreID>
    cfac:	4603      	mov	r3, r0
    cfae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    cfb0:	4a0d      	ldr	r2, [pc, #52]	; (cfe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cfb2:	9b01      	ldr	r3, [sp, #4]
    cfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb8:	1e5a      	subs	r2, r3, #1
    cfba:	490b      	ldr	r1, [pc, #44]	; (cfe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cfbc:	9b01      	ldr	r3, [sp, #4]
    cfbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    cfc2:	4a0a      	ldr	r2, [pc, #40]	; (cfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    cfc4:	9b01      	ldr	r3, [sp, #4]
    cfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfca:	f003 0301 	and.w	r3, r3, #1
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d106      	bne.n	cfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    cfd2:	4a05      	ldr	r2, [pc, #20]	; (cfe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cfd4:	9b01      	ldr	r3, [sp, #4]
    cfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d100      	bne.n	cfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cfde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cfe0:	bf00      	nop
    cfe2:	b003      	add	sp, #12
    cfe4:	f85d fb04 	ldr.w	pc, [sp], #4
    cfe8:	1fff8f64 	.word	0x1fff8f64
    cfec:	1fff8f60 	.word	0x1fff8f60

0000cff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    cff0:	b500      	push	{lr}
    cff2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cff4:	f7f3 fdb2 	bl	b5c <Sys_GetCoreID>
    cff8:	4603      	mov	r3, r0
    cffa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    cffc:	4a10      	ldr	r2, [pc, #64]	; (d040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cffe:	9b01      	ldr	r3, [sp, #4]
    d000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d004:	2b00      	cmp	r3, #0
    d006:	d10d      	bne.n	d024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d008:	f7f3 fcc6 	bl	998 <Adc_schm_read_msr>
    d00c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d00e:	9b00      	ldr	r3, [sp, #0]
    d010:	f003 0301 	and.w	r3, r3, #1
    d014:	2b00      	cmp	r3, #0
    d016:	d100      	bne.n	d01a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d018:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    d01a:	490a      	ldr	r1, [pc, #40]	; (d044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    d01c:	9b01      	ldr	r3, [sp, #4]
    d01e:	9a00      	ldr	r2, [sp, #0]
    d020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    d024:	4a06      	ldr	r2, [pc, #24]	; (d040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d026:	9b01      	ldr	r3, [sp, #4]
    d028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d02c:	1c5a      	adds	r2, r3, #1
    d02e:	4904      	ldr	r1, [pc, #16]	; (d040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d030:	9b01      	ldr	r3, [sp, #4]
    d032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d036:	bf00      	nop
    d038:	b003      	add	sp, #12
    d03a:	f85d fb04 	ldr.w	pc, [sp], #4
    d03e:	bf00      	nop
    d040:	1fff8f6c 	.word	0x1fff8f6c
    d044:	1fff8f68 	.word	0x1fff8f68

0000d048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d048:	b500      	push	{lr}
    d04a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d04c:	f7f3 fd86 	bl	b5c <Sys_GetCoreID>
    d050:	4603      	mov	r3, r0
    d052:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    d054:	4a0d      	ldr	r2, [pc, #52]	; (d08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d056:	9b01      	ldr	r3, [sp, #4]
    d058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d05c:	1e5a      	subs	r2, r3, #1
    d05e:	490b      	ldr	r1, [pc, #44]	; (d08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d060:	9b01      	ldr	r3, [sp, #4]
    d062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    d066:	4a0a      	ldr	r2, [pc, #40]	; (d090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    d068:	9b01      	ldr	r3, [sp, #4]
    d06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06e:	f003 0301 	and.w	r3, r3, #1
    d072:	2b00      	cmp	r3, #0
    d074:	d106      	bne.n	d084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    d076:	4a05      	ldr	r2, [pc, #20]	; (d08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d078:	9b01      	ldr	r3, [sp, #4]
    d07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d07e:	2b00      	cmp	r3, #0
    d080:	d100      	bne.n	d084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d082:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d084:	bf00      	nop
    d086:	b003      	add	sp, #12
    d088:	f85d fb04 	ldr.w	pc, [sp], #4
    d08c:	1fff8f6c 	.word	0x1fff8f6c
    d090:	1fff8f68 	.word	0x1fff8f68

0000d094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d094:	b500      	push	{lr}
    d096:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d098:	f7f3 fd60 	bl	b5c <Sys_GetCoreID>
    d09c:	4603      	mov	r3, r0
    d09e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    d0a0:	4a10      	ldr	r2, [pc, #64]	; (d0e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d0a2:	9b01      	ldr	r3, [sp, #4]
    d0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a8:	2b00      	cmp	r3, #0
    d0aa:	d10d      	bne.n	d0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0ac:	f7f3 fc74 	bl	998 <Adc_schm_read_msr>
    d0b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0b2:	9b00      	ldr	r3, [sp, #0]
    d0b4:	f003 0301 	and.w	r3, r3, #1
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d100      	bne.n	d0be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    d0be:	490a      	ldr	r1, [pc, #40]	; (d0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    d0c0:	9b01      	ldr	r3, [sp, #4]
    d0c2:	9a00      	ldr	r2, [sp, #0]
    d0c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    d0c8:	4a06      	ldr	r2, [pc, #24]	; (d0e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d0ca:	9b01      	ldr	r3, [sp, #4]
    d0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0d0:	1c5a      	adds	r2, r3, #1
    d0d2:	4904      	ldr	r1, [pc, #16]	; (d0e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d0d4:	9b01      	ldr	r3, [sp, #4]
    d0d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d0da:	bf00      	nop
    d0dc:	b003      	add	sp, #12
    d0de:	f85d fb04 	ldr.w	pc, [sp], #4
    d0e2:	bf00      	nop
    d0e4:	1fff8f74 	.word	0x1fff8f74
    d0e8:	1fff8f70 	.word	0x1fff8f70

0000d0ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d0ec:	b500      	push	{lr}
    d0ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0f0:	f7f3 fd34 	bl	b5c <Sys_GetCoreID>
    d0f4:	4603      	mov	r3, r0
    d0f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    d0f8:	4a0d      	ldr	r2, [pc, #52]	; (d130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d0fa:	9b01      	ldr	r3, [sp, #4]
    d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d100:	1e5a      	subs	r2, r3, #1
    d102:	490b      	ldr	r1, [pc, #44]	; (d130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d104:	9b01      	ldr	r3, [sp, #4]
    d106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    d10a:	4a0a      	ldr	r2, [pc, #40]	; (d134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    d10c:	9b01      	ldr	r3, [sp, #4]
    d10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d112:	f003 0301 	and.w	r3, r3, #1
    d116:	2b00      	cmp	r3, #0
    d118:	d106      	bne.n	d128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    d11a:	4a05      	ldr	r2, [pc, #20]	; (d130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d11c:	9b01      	ldr	r3, [sp, #4]
    d11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d122:	2b00      	cmp	r3, #0
    d124:	d100      	bne.n	d128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d126:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d128:	bf00      	nop
    d12a:	b003      	add	sp, #12
    d12c:	f85d fb04 	ldr.w	pc, [sp], #4
    d130:	1fff8f74 	.word	0x1fff8f74
    d134:	1fff8f70 	.word	0x1fff8f70

0000d138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d138:	b500      	push	{lr}
    d13a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d13c:	f7f3 fd0e 	bl	b5c <Sys_GetCoreID>
    d140:	4603      	mov	r3, r0
    d142:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    d144:	4a10      	ldr	r2, [pc, #64]	; (d188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d146:	9b01      	ldr	r3, [sp, #4]
    d148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d14c:	2b00      	cmp	r3, #0
    d14e:	d10d      	bne.n	d16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d150:	f7f3 fc22 	bl	998 <Adc_schm_read_msr>
    d154:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d156:	9b00      	ldr	r3, [sp, #0]
    d158:	f003 0301 	and.w	r3, r3, #1
    d15c:	2b00      	cmp	r3, #0
    d15e:	d100      	bne.n	d162 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d160:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    d162:	490a      	ldr	r1, [pc, #40]	; (d18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    d164:	9b01      	ldr	r3, [sp, #4]
    d166:	9a00      	ldr	r2, [sp, #0]
    d168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    d16c:	4a06      	ldr	r2, [pc, #24]	; (d188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d16e:	9b01      	ldr	r3, [sp, #4]
    d170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d174:	1c5a      	adds	r2, r3, #1
    d176:	4904      	ldr	r1, [pc, #16]	; (d188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d178:	9b01      	ldr	r3, [sp, #4]
    d17a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d17e:	bf00      	nop
    d180:	b003      	add	sp, #12
    d182:	f85d fb04 	ldr.w	pc, [sp], #4
    d186:	bf00      	nop
    d188:	1fff8f7c 	.word	0x1fff8f7c
    d18c:	1fff8f78 	.word	0x1fff8f78

0000d190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d190:	b500      	push	{lr}
    d192:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d194:	f7f3 fce2 	bl	b5c <Sys_GetCoreID>
    d198:	4603      	mov	r3, r0
    d19a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    d19c:	4a0d      	ldr	r2, [pc, #52]	; (d1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d19e:	9b01      	ldr	r3, [sp, #4]
    d1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a4:	1e5a      	subs	r2, r3, #1
    d1a6:	490b      	ldr	r1, [pc, #44]	; (d1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d1a8:	9b01      	ldr	r3, [sp, #4]
    d1aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    d1ae:	4a0a      	ldr	r2, [pc, #40]	; (d1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d1b0:	9b01      	ldr	r3, [sp, #4]
    d1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b6:	f003 0301 	and.w	r3, r3, #1
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d106      	bne.n	d1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d1be:	4a05      	ldr	r2, [pc, #20]	; (d1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d1c0:	9b01      	ldr	r3, [sp, #4]
    d1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d100      	bne.n	d1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d1cc:	bf00      	nop
    d1ce:	b003      	add	sp, #12
    d1d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d1d4:	1fff8f7c 	.word	0x1fff8f7c
    d1d8:	1fff8f78 	.word	0x1fff8f78

0000d1dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d1dc:	b500      	push	{lr}
    d1de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1e0:	f7f3 fcbc 	bl	b5c <Sys_GetCoreID>
    d1e4:	4603      	mov	r3, r0
    d1e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d1e8:	4a10      	ldr	r2, [pc, #64]	; (d22c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d1ea:	9b01      	ldr	r3, [sp, #4]
    d1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f0:	2b00      	cmp	r3, #0
    d1f2:	d10d      	bne.n	d210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d1f4:	f7f3 fbd0 	bl	998 <Adc_schm_read_msr>
    d1f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d1fa:	9b00      	ldr	r3, [sp, #0]
    d1fc:	f003 0301 	and.w	r3, r3, #1
    d200:	2b00      	cmp	r3, #0
    d202:	d100      	bne.n	d206 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d204:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d206:	490a      	ldr	r1, [pc, #40]	; (d230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d208:	9b01      	ldr	r3, [sp, #4]
    d20a:	9a00      	ldr	r2, [sp, #0]
    d20c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d210:	4a06      	ldr	r2, [pc, #24]	; (d22c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d212:	9b01      	ldr	r3, [sp, #4]
    d214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d218:	1c5a      	adds	r2, r3, #1
    d21a:	4904      	ldr	r1, [pc, #16]	; (d22c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d21c:	9b01      	ldr	r3, [sp, #4]
    d21e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d222:	bf00      	nop
    d224:	b003      	add	sp, #12
    d226:	f85d fb04 	ldr.w	pc, [sp], #4
    d22a:	bf00      	nop
    d22c:	1fff8f84 	.word	0x1fff8f84
    d230:	1fff8f80 	.word	0x1fff8f80

0000d234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d234:	b500      	push	{lr}
    d236:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d238:	f7f3 fc90 	bl	b5c <Sys_GetCoreID>
    d23c:	4603      	mov	r3, r0
    d23e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d240:	4a0d      	ldr	r2, [pc, #52]	; (d278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d242:	9b01      	ldr	r3, [sp, #4]
    d244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d248:	1e5a      	subs	r2, r3, #1
    d24a:	490b      	ldr	r1, [pc, #44]	; (d278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d24c:	9b01      	ldr	r3, [sp, #4]
    d24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d252:	4a0a      	ldr	r2, [pc, #40]	; (d27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d254:	9b01      	ldr	r3, [sp, #4]
    d256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d25a:	f003 0301 	and.w	r3, r3, #1
    d25e:	2b00      	cmp	r3, #0
    d260:	d106      	bne.n	d270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d262:	4a05      	ldr	r2, [pc, #20]	; (d278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d264:	9b01      	ldr	r3, [sp, #4]
    d266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d26a:	2b00      	cmp	r3, #0
    d26c:	d100      	bne.n	d270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d26e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d270:	bf00      	nop
    d272:	b003      	add	sp, #12
    d274:	f85d fb04 	ldr.w	pc, [sp], #4
    d278:	1fff8f84 	.word	0x1fff8f84
    d27c:	1fff8f80 	.word	0x1fff8f80

0000d280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d280:	b500      	push	{lr}
    d282:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d284:	f7f3 fc6a 	bl	b5c <Sys_GetCoreID>
    d288:	4603      	mov	r3, r0
    d28a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d28c:	4a10      	ldr	r2, [pc, #64]	; (d2d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d28e:	9b01      	ldr	r3, [sp, #4]
    d290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d294:	2b00      	cmp	r3, #0
    d296:	d10d      	bne.n	d2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d298:	f7f3 fb7e 	bl	998 <Adc_schm_read_msr>
    d29c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d29e:	9b00      	ldr	r3, [sp, #0]
    d2a0:	f003 0301 	and.w	r3, r3, #1
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d100      	bne.n	d2aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d2aa:	490a      	ldr	r1, [pc, #40]	; (d2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d2ac:	9b01      	ldr	r3, [sp, #4]
    d2ae:	9a00      	ldr	r2, [sp, #0]
    d2b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d2b4:	4a06      	ldr	r2, [pc, #24]	; (d2d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d2b6:	9b01      	ldr	r3, [sp, #4]
    d2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2bc:	1c5a      	adds	r2, r3, #1
    d2be:	4904      	ldr	r1, [pc, #16]	; (d2d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d2c0:	9b01      	ldr	r3, [sp, #4]
    d2c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2c6:	bf00      	nop
    d2c8:	b003      	add	sp, #12
    d2ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ce:	bf00      	nop
    d2d0:	1fff8f8c 	.word	0x1fff8f8c
    d2d4:	1fff8f88 	.word	0x1fff8f88

0000d2d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d2d8:	b500      	push	{lr}
    d2da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2dc:	f7f3 fc3e 	bl	b5c <Sys_GetCoreID>
    d2e0:	4603      	mov	r3, r0
    d2e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d2e4:	4a0d      	ldr	r2, [pc, #52]	; (d31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d2e6:	9b01      	ldr	r3, [sp, #4]
    d2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ec:	1e5a      	subs	r2, r3, #1
    d2ee:	490b      	ldr	r1, [pc, #44]	; (d31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d2f0:	9b01      	ldr	r3, [sp, #4]
    d2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d2f6:	4a0a      	ldr	r2, [pc, #40]	; (d320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d2f8:	9b01      	ldr	r3, [sp, #4]
    d2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fe:	f003 0301 	and.w	r3, r3, #1
    d302:	2b00      	cmp	r3, #0
    d304:	d106      	bne.n	d314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d306:	4a05      	ldr	r2, [pc, #20]	; (d31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d308:	9b01      	ldr	r3, [sp, #4]
    d30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d30e:	2b00      	cmp	r3, #0
    d310:	d100      	bne.n	d314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d312:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d314:	bf00      	nop
    d316:	b003      	add	sp, #12
    d318:	f85d fb04 	ldr.w	pc, [sp], #4
    d31c:	1fff8f8c 	.word	0x1fff8f8c
    d320:	1fff8f88 	.word	0x1fff8f88

0000d324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d324:	b500      	push	{lr}
    d326:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d328:	f7f3 fc18 	bl	b5c <Sys_GetCoreID>
    d32c:	4603      	mov	r3, r0
    d32e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d330:	4a10      	ldr	r2, [pc, #64]	; (d374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d332:	9b01      	ldr	r3, [sp, #4]
    d334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d338:	2b00      	cmp	r3, #0
    d33a:	d10d      	bne.n	d358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d33c:	f7f3 fb2c 	bl	998 <Adc_schm_read_msr>
    d340:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d342:	9b00      	ldr	r3, [sp, #0]
    d344:	f003 0301 	and.w	r3, r3, #1
    d348:	2b00      	cmp	r3, #0
    d34a:	d100      	bne.n	d34e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d34c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d34e:	490a      	ldr	r1, [pc, #40]	; (d378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d350:	9b01      	ldr	r3, [sp, #4]
    d352:	9a00      	ldr	r2, [sp, #0]
    d354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d358:	4a06      	ldr	r2, [pc, #24]	; (d374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d35a:	9b01      	ldr	r3, [sp, #4]
    d35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d360:	1c5a      	adds	r2, r3, #1
    d362:	4904      	ldr	r1, [pc, #16]	; (d374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d364:	9b01      	ldr	r3, [sp, #4]
    d366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d36a:	bf00      	nop
    d36c:	b003      	add	sp, #12
    d36e:	f85d fb04 	ldr.w	pc, [sp], #4
    d372:	bf00      	nop
    d374:	1fff8f94 	.word	0x1fff8f94
    d378:	1fff8f90 	.word	0x1fff8f90

0000d37c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d37c:	b500      	push	{lr}
    d37e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d380:	f7f3 fbec 	bl	b5c <Sys_GetCoreID>
    d384:	4603      	mov	r3, r0
    d386:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d388:	4a0d      	ldr	r2, [pc, #52]	; (d3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d38a:	9b01      	ldr	r3, [sp, #4]
    d38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d390:	1e5a      	subs	r2, r3, #1
    d392:	490b      	ldr	r1, [pc, #44]	; (d3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d394:	9b01      	ldr	r3, [sp, #4]
    d396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d39a:	4a0a      	ldr	r2, [pc, #40]	; (d3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d39c:	9b01      	ldr	r3, [sp, #4]
    d39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3a2:	f003 0301 	and.w	r3, r3, #1
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	d106      	bne.n	d3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d3aa:	4a05      	ldr	r2, [pc, #20]	; (d3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d3ac:	9b01      	ldr	r3, [sp, #4]
    d3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	d100      	bne.n	d3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3b8:	bf00      	nop
    d3ba:	b003      	add	sp, #12
    d3bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d3c0:	1fff8f94 	.word	0x1fff8f94
    d3c4:	1fff8f90 	.word	0x1fff8f90

0000d3c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d3c8:	b500      	push	{lr}
    d3ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3cc:	f7f3 fbc6 	bl	b5c <Sys_GetCoreID>
    d3d0:	4603      	mov	r3, r0
    d3d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d3d4:	4a10      	ldr	r2, [pc, #64]	; (d418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d3d6:	9b01      	ldr	r3, [sp, #4]
    d3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d10d      	bne.n	d3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d3e0:	f7f3 fada 	bl	998 <Adc_schm_read_msr>
    d3e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3e6:	9b00      	ldr	r3, [sp, #0]
    d3e8:	f003 0301 	and.w	r3, r3, #1
    d3ec:	2b00      	cmp	r3, #0
    d3ee:	d100      	bne.n	d3f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d3f2:	490a      	ldr	r1, [pc, #40]	; (d41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d3f4:	9b01      	ldr	r3, [sp, #4]
    d3f6:	9a00      	ldr	r2, [sp, #0]
    d3f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d3fc:	4a06      	ldr	r2, [pc, #24]	; (d418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d3fe:	9b01      	ldr	r3, [sp, #4]
    d400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d404:	1c5a      	adds	r2, r3, #1
    d406:	4904      	ldr	r1, [pc, #16]	; (d418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d408:	9b01      	ldr	r3, [sp, #4]
    d40a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d40e:	bf00      	nop
    d410:	b003      	add	sp, #12
    d412:	f85d fb04 	ldr.w	pc, [sp], #4
    d416:	bf00      	nop
    d418:	1fff8f9c 	.word	0x1fff8f9c
    d41c:	1fff8f98 	.word	0x1fff8f98

0000d420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d420:	b500      	push	{lr}
    d422:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d424:	f7f3 fb9a 	bl	b5c <Sys_GetCoreID>
    d428:	4603      	mov	r3, r0
    d42a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d42c:	4a0d      	ldr	r2, [pc, #52]	; (d464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d42e:	9b01      	ldr	r3, [sp, #4]
    d430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d434:	1e5a      	subs	r2, r3, #1
    d436:	490b      	ldr	r1, [pc, #44]	; (d464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d438:	9b01      	ldr	r3, [sp, #4]
    d43a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d43e:	4a0a      	ldr	r2, [pc, #40]	; (d468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d440:	9b01      	ldr	r3, [sp, #4]
    d442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d446:	f003 0301 	and.w	r3, r3, #1
    d44a:	2b00      	cmp	r3, #0
    d44c:	d106      	bne.n	d45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d44e:	4a05      	ldr	r2, [pc, #20]	; (d464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d450:	9b01      	ldr	r3, [sp, #4]
    d452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d456:	2b00      	cmp	r3, #0
    d458:	d100      	bne.n	d45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d45a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d45c:	bf00      	nop
    d45e:	b003      	add	sp, #12
    d460:	f85d fb04 	ldr.w	pc, [sp], #4
    d464:	1fff8f9c 	.word	0x1fff8f9c
    d468:	1fff8f98 	.word	0x1fff8f98

0000d46c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d46c:	b500      	push	{lr}
    d46e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d470:	f7f3 fb74 	bl	b5c <Sys_GetCoreID>
    d474:	4603      	mov	r3, r0
    d476:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d478:	4a10      	ldr	r2, [pc, #64]	; (d4bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d47a:	9b01      	ldr	r3, [sp, #4]
    d47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d480:	2b00      	cmp	r3, #0
    d482:	d10d      	bne.n	d4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d484:	f7f3 fa88 	bl	998 <Adc_schm_read_msr>
    d488:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d48a:	9b00      	ldr	r3, [sp, #0]
    d48c:	f003 0301 	and.w	r3, r3, #1
    d490:	2b00      	cmp	r3, #0
    d492:	d100      	bne.n	d496 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d494:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d496:	490a      	ldr	r1, [pc, #40]	; (d4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d498:	9b01      	ldr	r3, [sp, #4]
    d49a:	9a00      	ldr	r2, [sp, #0]
    d49c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d4a0:	4a06      	ldr	r2, [pc, #24]	; (d4bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d4a2:	9b01      	ldr	r3, [sp, #4]
    d4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4a8:	1c5a      	adds	r2, r3, #1
    d4aa:	4904      	ldr	r1, [pc, #16]	; (d4bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d4ac:	9b01      	ldr	r3, [sp, #4]
    d4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4b2:	bf00      	nop
    d4b4:	b003      	add	sp, #12
    d4b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d4ba:	bf00      	nop
    d4bc:	1fff8fa4 	.word	0x1fff8fa4
    d4c0:	1fff8fa0 	.word	0x1fff8fa0

0000d4c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d4c4:	b500      	push	{lr}
    d4c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4c8:	f7f3 fb48 	bl	b5c <Sys_GetCoreID>
    d4cc:	4603      	mov	r3, r0
    d4ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d4d0:	4a0d      	ldr	r2, [pc, #52]	; (d508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d4d2:	9b01      	ldr	r3, [sp, #4]
    d4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4d8:	1e5a      	subs	r2, r3, #1
    d4da:	490b      	ldr	r1, [pc, #44]	; (d508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d4dc:	9b01      	ldr	r3, [sp, #4]
    d4de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d4e2:	4a0a      	ldr	r2, [pc, #40]	; (d50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d4e4:	9b01      	ldr	r3, [sp, #4]
    d4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4ea:	f003 0301 	and.w	r3, r3, #1
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d106      	bne.n	d500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d4f2:	4a05      	ldr	r2, [pc, #20]	; (d508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d4f4:	9b01      	ldr	r3, [sp, #4]
    d4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4fa:	2b00      	cmp	r3, #0
    d4fc:	d100      	bne.n	d500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d500:	bf00      	nop
    d502:	b003      	add	sp, #12
    d504:	f85d fb04 	ldr.w	pc, [sp], #4
    d508:	1fff8fa4 	.word	0x1fff8fa4
    d50c:	1fff8fa0 	.word	0x1fff8fa0

0000d510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d510:	b500      	push	{lr}
    d512:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d514:	f7f3 fb22 	bl	b5c <Sys_GetCoreID>
    d518:	4603      	mov	r3, r0
    d51a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d51c:	4a10      	ldr	r2, [pc, #64]	; (d560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d51e:	9b01      	ldr	r3, [sp, #4]
    d520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d524:	2b00      	cmp	r3, #0
    d526:	d10d      	bne.n	d544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d528:	f7f3 fa36 	bl	998 <Adc_schm_read_msr>
    d52c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d52e:	9b00      	ldr	r3, [sp, #0]
    d530:	f003 0301 	and.w	r3, r3, #1
    d534:	2b00      	cmp	r3, #0
    d536:	d100      	bne.n	d53a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d538:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d53a:	490a      	ldr	r1, [pc, #40]	; (d564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d53c:	9b01      	ldr	r3, [sp, #4]
    d53e:	9a00      	ldr	r2, [sp, #0]
    d540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d544:	4a06      	ldr	r2, [pc, #24]	; (d560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d546:	9b01      	ldr	r3, [sp, #4]
    d548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d54c:	1c5a      	adds	r2, r3, #1
    d54e:	4904      	ldr	r1, [pc, #16]	; (d560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d550:	9b01      	ldr	r3, [sp, #4]
    d552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d556:	bf00      	nop
    d558:	b003      	add	sp, #12
    d55a:	f85d fb04 	ldr.w	pc, [sp], #4
    d55e:	bf00      	nop
    d560:	1fff8fac 	.word	0x1fff8fac
    d564:	1fff8fa8 	.word	0x1fff8fa8

0000d568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d568:	b500      	push	{lr}
    d56a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d56c:	f7f3 faf6 	bl	b5c <Sys_GetCoreID>
    d570:	4603      	mov	r3, r0
    d572:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d574:	4a0d      	ldr	r2, [pc, #52]	; (d5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d576:	9b01      	ldr	r3, [sp, #4]
    d578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d57c:	1e5a      	subs	r2, r3, #1
    d57e:	490b      	ldr	r1, [pc, #44]	; (d5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d580:	9b01      	ldr	r3, [sp, #4]
    d582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d586:	4a0a      	ldr	r2, [pc, #40]	; (d5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d588:	9b01      	ldr	r3, [sp, #4]
    d58a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58e:	f003 0301 	and.w	r3, r3, #1
    d592:	2b00      	cmp	r3, #0
    d594:	d106      	bne.n	d5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d596:	4a05      	ldr	r2, [pc, #20]	; (d5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d598:	9b01      	ldr	r3, [sp, #4]
    d59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d100      	bne.n	d5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5a4:	bf00      	nop
    d5a6:	b003      	add	sp, #12
    d5a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ac:	1fff8fac 	.word	0x1fff8fac
    d5b0:	1fff8fa8 	.word	0x1fff8fa8

0000d5b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d5b4:	b500      	push	{lr}
    d5b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5b8:	f7f3 fad0 	bl	b5c <Sys_GetCoreID>
    d5bc:	4603      	mov	r3, r0
    d5be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    d5c0:	4a10      	ldr	r2, [pc, #64]	; (d604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d5c2:	9b01      	ldr	r3, [sp, #4]
    d5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	d10d      	bne.n	d5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d5cc:	f7f3 f9e4 	bl	998 <Adc_schm_read_msr>
    d5d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d5d2:	9b00      	ldr	r3, [sp, #0]
    d5d4:	f003 0301 	and.w	r3, r3, #1
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d100      	bne.n	d5de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d5dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    d5de:	490a      	ldr	r1, [pc, #40]	; (d608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    d5e0:	9b01      	ldr	r3, [sp, #4]
    d5e2:	9a00      	ldr	r2, [sp, #0]
    d5e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    d5e8:	4a06      	ldr	r2, [pc, #24]	; (d604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d5ea:	9b01      	ldr	r3, [sp, #4]
    d5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5f0:	1c5a      	adds	r2, r3, #1
    d5f2:	4904      	ldr	r1, [pc, #16]	; (d604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d5f4:	9b01      	ldr	r3, [sp, #4]
    d5f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5fa:	bf00      	nop
    d5fc:	b003      	add	sp, #12
    d5fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d602:	bf00      	nop
    d604:	1fff8fb4 	.word	0x1fff8fb4
    d608:	1fff8fb0 	.word	0x1fff8fb0

0000d60c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d60c:	b500      	push	{lr}
    d60e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d610:	f7f3 faa4 	bl	b5c <Sys_GetCoreID>
    d614:	4603      	mov	r3, r0
    d616:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    d618:	4a0d      	ldr	r2, [pc, #52]	; (d650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d61a:	9b01      	ldr	r3, [sp, #4]
    d61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d620:	1e5a      	subs	r2, r3, #1
    d622:	490b      	ldr	r1, [pc, #44]	; (d650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d624:	9b01      	ldr	r3, [sp, #4]
    d626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    d62a:	4a0a      	ldr	r2, [pc, #40]	; (d654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    d62c:	9b01      	ldr	r3, [sp, #4]
    d62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d632:	f003 0301 	and.w	r3, r3, #1
    d636:	2b00      	cmp	r3, #0
    d638:	d106      	bne.n	d648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    d63a:	4a05      	ldr	r2, [pc, #20]	; (d650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d63c:	9b01      	ldr	r3, [sp, #4]
    d63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d642:	2b00      	cmp	r3, #0
    d644:	d100      	bne.n	d648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d646:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d648:	bf00      	nop
    d64a:	b003      	add	sp, #12
    d64c:	f85d fb04 	ldr.w	pc, [sp], #4
    d650:	1fff8fb4 	.word	0x1fff8fb4
    d654:	1fff8fb0 	.word	0x1fff8fb0

0000d658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d658:	b500      	push	{lr}
    d65a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d65c:	f7f3 fa7e 	bl	b5c <Sys_GetCoreID>
    d660:	4603      	mov	r3, r0
    d662:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    d664:	4a10      	ldr	r2, [pc, #64]	; (d6a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d666:	9b01      	ldr	r3, [sp, #4]
    d668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d66c:	2b00      	cmp	r3, #0
    d66e:	d10d      	bne.n	d68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d670:	f7f3 f992 	bl	998 <Adc_schm_read_msr>
    d674:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d676:	9b00      	ldr	r3, [sp, #0]
    d678:	f003 0301 	and.w	r3, r3, #1
    d67c:	2b00      	cmp	r3, #0
    d67e:	d100      	bne.n	d682 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d680:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    d682:	490a      	ldr	r1, [pc, #40]	; (d6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    d684:	9b01      	ldr	r3, [sp, #4]
    d686:	9a00      	ldr	r2, [sp, #0]
    d688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    d68c:	4a06      	ldr	r2, [pc, #24]	; (d6a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d68e:	9b01      	ldr	r3, [sp, #4]
    d690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d694:	1c5a      	adds	r2, r3, #1
    d696:	4904      	ldr	r1, [pc, #16]	; (d6a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d698:	9b01      	ldr	r3, [sp, #4]
    d69a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d69e:	bf00      	nop
    d6a0:	b003      	add	sp, #12
    d6a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d6a6:	bf00      	nop
    d6a8:	1fff8fbc 	.word	0x1fff8fbc
    d6ac:	1fff8fb8 	.word	0x1fff8fb8

0000d6b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d6b0:	b500      	push	{lr}
    d6b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6b4:	f7f3 fa52 	bl	b5c <Sys_GetCoreID>
    d6b8:	4603      	mov	r3, r0
    d6ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    d6bc:	4a0d      	ldr	r2, [pc, #52]	; (d6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d6be:	9b01      	ldr	r3, [sp, #4]
    d6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c4:	1e5a      	subs	r2, r3, #1
    d6c6:	490b      	ldr	r1, [pc, #44]	; (d6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d6c8:	9b01      	ldr	r3, [sp, #4]
    d6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    d6ce:	4a0a      	ldr	r2, [pc, #40]	; (d6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    d6d0:	9b01      	ldr	r3, [sp, #4]
    d6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d6:	f003 0301 	and.w	r3, r3, #1
    d6da:	2b00      	cmp	r3, #0
    d6dc:	d106      	bne.n	d6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    d6de:	4a05      	ldr	r2, [pc, #20]	; (d6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d6e0:	9b01      	ldr	r3, [sp, #4]
    d6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d100      	bne.n	d6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6ec:	bf00      	nop
    d6ee:	b003      	add	sp, #12
    d6f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d6f4:	1fff8fbc 	.word	0x1fff8fbc
    d6f8:	1fff8fb8 	.word	0x1fff8fb8

0000d6fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d6fc:	b500      	push	{lr}
    d6fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d700:	f7f3 fa2c 	bl	b5c <Sys_GetCoreID>
    d704:	4603      	mov	r3, r0
    d706:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    d708:	4a10      	ldr	r2, [pc, #64]	; (d74c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d70a:	9b01      	ldr	r3, [sp, #4]
    d70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d710:	2b00      	cmp	r3, #0
    d712:	d10d      	bne.n	d730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d714:	f7f3 f940 	bl	998 <Adc_schm_read_msr>
    d718:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d71a:	9b00      	ldr	r3, [sp, #0]
    d71c:	f003 0301 	and.w	r3, r3, #1
    d720:	2b00      	cmp	r3, #0
    d722:	d100      	bne.n	d726 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d724:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    d726:	490a      	ldr	r1, [pc, #40]	; (d750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	9a00      	ldr	r2, [sp, #0]
    d72c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    d730:	4a06      	ldr	r2, [pc, #24]	; (d74c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d732:	9b01      	ldr	r3, [sp, #4]
    d734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d738:	1c5a      	adds	r2, r3, #1
    d73a:	4904      	ldr	r1, [pc, #16]	; (d74c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d73c:	9b01      	ldr	r3, [sp, #4]
    d73e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d742:	bf00      	nop
    d744:	b003      	add	sp, #12
    d746:	f85d fb04 	ldr.w	pc, [sp], #4
    d74a:	bf00      	nop
    d74c:	1fff8fc4 	.word	0x1fff8fc4
    d750:	1fff8fc0 	.word	0x1fff8fc0

0000d754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d754:	b500      	push	{lr}
    d756:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d758:	f7f3 fa00 	bl	b5c <Sys_GetCoreID>
    d75c:	4603      	mov	r3, r0
    d75e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    d760:	4a0d      	ldr	r2, [pc, #52]	; (d798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d762:	9b01      	ldr	r3, [sp, #4]
    d764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d768:	1e5a      	subs	r2, r3, #1
    d76a:	490b      	ldr	r1, [pc, #44]	; (d798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d76c:	9b01      	ldr	r3, [sp, #4]
    d76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    d772:	4a0a      	ldr	r2, [pc, #40]	; (d79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    d774:	9b01      	ldr	r3, [sp, #4]
    d776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d77a:	f003 0301 	and.w	r3, r3, #1
    d77e:	2b00      	cmp	r3, #0
    d780:	d106      	bne.n	d790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    d782:	4a05      	ldr	r2, [pc, #20]	; (d798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d784:	9b01      	ldr	r3, [sp, #4]
    d786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d78a:	2b00      	cmp	r3, #0
    d78c:	d100      	bne.n	d790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d78e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d790:	bf00      	nop
    d792:	b003      	add	sp, #12
    d794:	f85d fb04 	ldr.w	pc, [sp], #4
    d798:	1fff8fc4 	.word	0x1fff8fc4
    d79c:	1fff8fc0 	.word	0x1fff8fc0

0000d7a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d7a0:	b500      	push	{lr}
    d7a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7a4:	f7f3 f9da 	bl	b5c <Sys_GetCoreID>
    d7a8:	4603      	mov	r3, r0
    d7aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    d7ac:	4a10      	ldr	r2, [pc, #64]	; (d7f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d7ae:	9b01      	ldr	r3, [sp, #4]
    d7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d10d      	bne.n	d7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7b8:	f7f3 f8ee 	bl	998 <Adc_schm_read_msr>
    d7bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7be:	9b00      	ldr	r3, [sp, #0]
    d7c0:	f003 0301 	and.w	r3, r3, #1
    d7c4:	2b00      	cmp	r3, #0
    d7c6:	d100      	bne.n	d7ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    d7ca:	490a      	ldr	r1, [pc, #40]	; (d7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	9a00      	ldr	r2, [sp, #0]
    d7d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    d7d4:	4a06      	ldr	r2, [pc, #24]	; (d7f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d7d6:	9b01      	ldr	r3, [sp, #4]
    d7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7dc:	1c5a      	adds	r2, r3, #1
    d7de:	4904      	ldr	r1, [pc, #16]	; (d7f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d7e0:	9b01      	ldr	r3, [sp, #4]
    d7e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7e6:	bf00      	nop
    d7e8:	b003      	add	sp, #12
    d7ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d7ee:	bf00      	nop
    d7f0:	1fff8fcc 	.word	0x1fff8fcc
    d7f4:	1fff8fc8 	.word	0x1fff8fc8

0000d7f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d7f8:	b500      	push	{lr}
    d7fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7fc:	f7f3 f9ae 	bl	b5c <Sys_GetCoreID>
    d800:	4603      	mov	r3, r0
    d802:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    d804:	4a0d      	ldr	r2, [pc, #52]	; (d83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d806:	9b01      	ldr	r3, [sp, #4]
    d808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d80c:	1e5a      	subs	r2, r3, #1
    d80e:	490b      	ldr	r1, [pc, #44]	; (d83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d810:	9b01      	ldr	r3, [sp, #4]
    d812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    d816:	4a0a      	ldr	r2, [pc, #40]	; (d840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    d818:	9b01      	ldr	r3, [sp, #4]
    d81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81e:	f003 0301 	and.w	r3, r3, #1
    d822:	2b00      	cmp	r3, #0
    d824:	d106      	bne.n	d834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    d826:	4a05      	ldr	r2, [pc, #20]	; (d83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d828:	9b01      	ldr	r3, [sp, #4]
    d82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d82e:	2b00      	cmp	r3, #0
    d830:	d100      	bne.n	d834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d832:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d834:	bf00      	nop
    d836:	b003      	add	sp, #12
    d838:	f85d fb04 	ldr.w	pc, [sp], #4
    d83c:	1fff8fcc 	.word	0x1fff8fcc
    d840:	1fff8fc8 	.word	0x1fff8fc8

0000d844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d844:	b500      	push	{lr}
    d846:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d848:	f7f3 f988 	bl	b5c <Sys_GetCoreID>
    d84c:	4603      	mov	r3, r0
    d84e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    d850:	4a10      	ldr	r2, [pc, #64]	; (d894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d852:	9b01      	ldr	r3, [sp, #4]
    d854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d858:	2b00      	cmp	r3, #0
    d85a:	d10d      	bne.n	d878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d85c:	f7f3 f89c 	bl	998 <Adc_schm_read_msr>
    d860:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d862:	9b00      	ldr	r3, [sp, #0]
    d864:	f003 0301 	and.w	r3, r3, #1
    d868:	2b00      	cmp	r3, #0
    d86a:	d100      	bne.n	d86e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d86c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    d86e:	490a      	ldr	r1, [pc, #40]	; (d898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    d870:	9b01      	ldr	r3, [sp, #4]
    d872:	9a00      	ldr	r2, [sp, #0]
    d874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    d878:	4a06      	ldr	r2, [pc, #24]	; (d894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d87a:	9b01      	ldr	r3, [sp, #4]
    d87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d880:	1c5a      	adds	r2, r3, #1
    d882:	4904      	ldr	r1, [pc, #16]	; (d894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d884:	9b01      	ldr	r3, [sp, #4]
    d886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d88a:	bf00      	nop
    d88c:	b003      	add	sp, #12
    d88e:	f85d fb04 	ldr.w	pc, [sp], #4
    d892:	bf00      	nop
    d894:	1fff8fd4 	.word	0x1fff8fd4
    d898:	1fff8fd0 	.word	0x1fff8fd0

0000d89c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d89c:	b500      	push	{lr}
    d89e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8a0:	f7f3 f95c 	bl	b5c <Sys_GetCoreID>
    d8a4:	4603      	mov	r3, r0
    d8a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    d8a8:	4a0d      	ldr	r2, [pc, #52]	; (d8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d8aa:	9b01      	ldr	r3, [sp, #4]
    d8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8b0:	1e5a      	subs	r2, r3, #1
    d8b2:	490b      	ldr	r1, [pc, #44]	; (d8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d8b4:	9b01      	ldr	r3, [sp, #4]
    d8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    d8ba:	4a0a      	ldr	r2, [pc, #40]	; (d8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    d8bc:	9b01      	ldr	r3, [sp, #4]
    d8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c2:	f003 0301 	and.w	r3, r3, #1
    d8c6:	2b00      	cmp	r3, #0
    d8c8:	d106      	bne.n	d8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    d8ca:	4a05      	ldr	r2, [pc, #20]	; (d8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d8cc:	9b01      	ldr	r3, [sp, #4]
    d8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8d2:	2b00      	cmp	r3, #0
    d8d4:	d100      	bne.n	d8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d8d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d8d8:	bf00      	nop
    d8da:	b003      	add	sp, #12
    d8dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d8e0:	1fff8fd4 	.word	0x1fff8fd4
    d8e4:	1fff8fd0 	.word	0x1fff8fd0

0000d8e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d8e8:	b500      	push	{lr}
    d8ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8ec:	f7f3 f936 	bl	b5c <Sys_GetCoreID>
    d8f0:	4603      	mov	r3, r0
    d8f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    d8f4:	4a10      	ldr	r2, [pc, #64]	; (d938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d8f6:	9b01      	ldr	r3, [sp, #4]
    d8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d10d      	bne.n	d91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d900:	f7f3 f84a 	bl	998 <Adc_schm_read_msr>
    d904:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d906:	9b00      	ldr	r3, [sp, #0]
    d908:	f003 0301 	and.w	r3, r3, #1
    d90c:	2b00      	cmp	r3, #0
    d90e:	d100      	bne.n	d912 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d910:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    d912:	490a      	ldr	r1, [pc, #40]	; (d93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    d914:	9b01      	ldr	r3, [sp, #4]
    d916:	9a00      	ldr	r2, [sp, #0]
    d918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    d91c:	4a06      	ldr	r2, [pc, #24]	; (d938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d91e:	9b01      	ldr	r3, [sp, #4]
    d920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d924:	1c5a      	adds	r2, r3, #1
    d926:	4904      	ldr	r1, [pc, #16]	; (d938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d928:	9b01      	ldr	r3, [sp, #4]
    d92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d92e:	bf00      	nop
    d930:	b003      	add	sp, #12
    d932:	f85d fb04 	ldr.w	pc, [sp], #4
    d936:	bf00      	nop
    d938:	1fff8fdc 	.word	0x1fff8fdc
    d93c:	1fff8fd8 	.word	0x1fff8fd8

0000d940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d940:	b500      	push	{lr}
    d942:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d944:	f7f3 f90a 	bl	b5c <Sys_GetCoreID>
    d948:	4603      	mov	r3, r0
    d94a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    d94c:	4a0d      	ldr	r2, [pc, #52]	; (d984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d94e:	9b01      	ldr	r3, [sp, #4]
    d950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d954:	1e5a      	subs	r2, r3, #1
    d956:	490b      	ldr	r1, [pc, #44]	; (d984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d958:	9b01      	ldr	r3, [sp, #4]
    d95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    d95e:	4a0a      	ldr	r2, [pc, #40]	; (d988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    d960:	9b01      	ldr	r3, [sp, #4]
    d962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d966:	f003 0301 	and.w	r3, r3, #1
    d96a:	2b00      	cmp	r3, #0
    d96c:	d106      	bne.n	d97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    d96e:	4a05      	ldr	r2, [pc, #20]	; (d984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d970:	9b01      	ldr	r3, [sp, #4]
    d972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d976:	2b00      	cmp	r3, #0
    d978:	d100      	bne.n	d97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d97a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d97c:	bf00      	nop
    d97e:	b003      	add	sp, #12
    d980:	f85d fb04 	ldr.w	pc, [sp], #4
    d984:	1fff8fdc 	.word	0x1fff8fdc
    d988:	1fff8fd8 	.word	0x1fff8fd8

0000d98c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d98c:	b500      	push	{lr}
    d98e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d990:	f7f3 f8e4 	bl	b5c <Sys_GetCoreID>
    d994:	4603      	mov	r3, r0
    d996:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    d998:	4a10      	ldr	r2, [pc, #64]	; (d9dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d99a:	9b01      	ldr	r3, [sp, #4]
    d99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a0:	2b00      	cmp	r3, #0
    d9a2:	d10d      	bne.n	d9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9a4:	f7f2 fff8 	bl	998 <Adc_schm_read_msr>
    d9a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9aa:	9b00      	ldr	r3, [sp, #0]
    d9ac:	f003 0301 	and.w	r3, r3, #1
    d9b0:	2b00      	cmp	r3, #0
    d9b2:	d100      	bne.n	d9b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    d9b6:	490a      	ldr	r1, [pc, #40]	; (d9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	9a00      	ldr	r2, [sp, #0]
    d9bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    d9c0:	4a06      	ldr	r2, [pc, #24]	; (d9dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d9c2:	9b01      	ldr	r3, [sp, #4]
    d9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9c8:	1c5a      	adds	r2, r3, #1
    d9ca:	4904      	ldr	r1, [pc, #16]	; (d9dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d9cc:	9b01      	ldr	r3, [sp, #4]
    d9ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d9d2:	bf00      	nop
    d9d4:	b003      	add	sp, #12
    d9d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d9da:	bf00      	nop
    d9dc:	1fff8fe4 	.word	0x1fff8fe4
    d9e0:	1fff8fe0 	.word	0x1fff8fe0

0000d9e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d9e4:	b500      	push	{lr}
    d9e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9e8:	f7f3 f8b8 	bl	b5c <Sys_GetCoreID>
    d9ec:	4603      	mov	r3, r0
    d9ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    d9f0:	4a0d      	ldr	r2, [pc, #52]	; (da28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d9f2:	9b01      	ldr	r3, [sp, #4]
    d9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f8:	1e5a      	subs	r2, r3, #1
    d9fa:	490b      	ldr	r1, [pc, #44]	; (da28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d9fc:	9b01      	ldr	r3, [sp, #4]
    d9fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    da02:	4a0a      	ldr	r2, [pc, #40]	; (da2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    da04:	9b01      	ldr	r3, [sp, #4]
    da06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da0a:	f003 0301 	and.w	r3, r3, #1
    da0e:	2b00      	cmp	r3, #0
    da10:	d106      	bne.n	da20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    da12:	4a05      	ldr	r2, [pc, #20]	; (da28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    da14:	9b01      	ldr	r3, [sp, #4]
    da16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da1a:	2b00      	cmp	r3, #0
    da1c:	d100      	bne.n	da20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da20:	bf00      	nop
    da22:	b003      	add	sp, #12
    da24:	f85d fb04 	ldr.w	pc, [sp], #4
    da28:	1fff8fe4 	.word	0x1fff8fe4
    da2c:	1fff8fe0 	.word	0x1fff8fe0

0000da30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    da30:	b500      	push	{lr}
    da32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da34:	f7f3 f892 	bl	b5c <Sys_GetCoreID>
    da38:	4603      	mov	r3, r0
    da3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    da3c:	4a10      	ldr	r2, [pc, #64]	; (da80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    da3e:	9b01      	ldr	r3, [sp, #4]
    da40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da44:	2b00      	cmp	r3, #0
    da46:	d10d      	bne.n	da64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da48:	f7f2 ffa6 	bl	998 <Adc_schm_read_msr>
    da4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da4e:	9b00      	ldr	r3, [sp, #0]
    da50:	f003 0301 	and.w	r3, r3, #1
    da54:	2b00      	cmp	r3, #0
    da56:	d100      	bne.n	da5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    da5a:	490a      	ldr	r1, [pc, #40]	; (da84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	9a00      	ldr	r2, [sp, #0]
    da60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    da64:	4a06      	ldr	r2, [pc, #24]	; (da80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    da66:	9b01      	ldr	r3, [sp, #4]
    da68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da6c:	1c5a      	adds	r2, r3, #1
    da6e:	4904      	ldr	r1, [pc, #16]	; (da80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    da70:	9b01      	ldr	r3, [sp, #4]
    da72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da76:	bf00      	nop
    da78:	b003      	add	sp, #12
    da7a:	f85d fb04 	ldr.w	pc, [sp], #4
    da7e:	bf00      	nop
    da80:	1fff8fec 	.word	0x1fff8fec
    da84:	1fff8fe8 	.word	0x1fff8fe8

0000da88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    da88:	b500      	push	{lr}
    da8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da8c:	f7f3 f866 	bl	b5c <Sys_GetCoreID>
    da90:	4603      	mov	r3, r0
    da92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    da94:	4a0d      	ldr	r2, [pc, #52]	; (dacc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    da96:	9b01      	ldr	r3, [sp, #4]
    da98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9c:	1e5a      	subs	r2, r3, #1
    da9e:	490b      	ldr	r1, [pc, #44]	; (dacc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    daa0:	9b01      	ldr	r3, [sp, #4]
    daa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    daa6:	4a0a      	ldr	r2, [pc, #40]	; (dad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    daa8:	9b01      	ldr	r3, [sp, #4]
    daaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daae:	f003 0301 	and.w	r3, r3, #1
    dab2:	2b00      	cmp	r3, #0
    dab4:	d106      	bne.n	dac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    dab6:	4a05      	ldr	r2, [pc, #20]	; (dacc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    dab8:	9b01      	ldr	r3, [sp, #4]
    daba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dabe:	2b00      	cmp	r3, #0
    dac0:	d100      	bne.n	dac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dac2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dac4:	bf00      	nop
    dac6:	b003      	add	sp, #12
    dac8:	f85d fb04 	ldr.w	pc, [sp], #4
    dacc:	1fff8fec 	.word	0x1fff8fec
    dad0:	1fff8fe8 	.word	0x1fff8fe8

0000dad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    dad4:	b500      	push	{lr}
    dad6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dad8:	f7f3 f840 	bl	b5c <Sys_GetCoreID>
    dadc:	4603      	mov	r3, r0
    dade:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    dae0:	4a10      	ldr	r2, [pc, #64]	; (db24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    dae2:	9b01      	ldr	r3, [sp, #4]
    dae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae8:	2b00      	cmp	r3, #0
    daea:	d10d      	bne.n	db08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    daec:	f7f2 ff54 	bl	998 <Adc_schm_read_msr>
    daf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    daf2:	9b00      	ldr	r3, [sp, #0]
    daf4:	f003 0301 	and.w	r3, r3, #1
    daf8:	2b00      	cmp	r3, #0
    dafa:	d100      	bne.n	dafe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dafc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    dafe:	490a      	ldr	r1, [pc, #40]	; (db28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	9a00      	ldr	r2, [sp, #0]
    db04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    db08:	4a06      	ldr	r2, [pc, #24]	; (db24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    db0a:	9b01      	ldr	r3, [sp, #4]
    db0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db10:	1c5a      	adds	r2, r3, #1
    db12:	4904      	ldr	r1, [pc, #16]	; (db24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    db14:	9b01      	ldr	r3, [sp, #4]
    db16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db1a:	bf00      	nop
    db1c:	b003      	add	sp, #12
    db1e:	f85d fb04 	ldr.w	pc, [sp], #4
    db22:	bf00      	nop
    db24:	1fff8ff4 	.word	0x1fff8ff4
    db28:	1fff8ff0 	.word	0x1fff8ff0

0000db2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    db2c:	b500      	push	{lr}
    db2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db30:	f7f3 f814 	bl	b5c <Sys_GetCoreID>
    db34:	4603      	mov	r3, r0
    db36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    db38:	4a0d      	ldr	r2, [pc, #52]	; (db70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    db3a:	9b01      	ldr	r3, [sp, #4]
    db3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db40:	1e5a      	subs	r2, r3, #1
    db42:	490b      	ldr	r1, [pc, #44]	; (db70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    db44:	9b01      	ldr	r3, [sp, #4]
    db46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    db4a:	4a0a      	ldr	r2, [pc, #40]	; (db74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    db4c:	9b01      	ldr	r3, [sp, #4]
    db4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db52:	f003 0301 	and.w	r3, r3, #1
    db56:	2b00      	cmp	r3, #0
    db58:	d106      	bne.n	db68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    db5a:	4a05      	ldr	r2, [pc, #20]	; (db70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    db5c:	9b01      	ldr	r3, [sp, #4]
    db5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db62:	2b00      	cmp	r3, #0
    db64:	d100      	bne.n	db68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db68:	bf00      	nop
    db6a:	b003      	add	sp, #12
    db6c:	f85d fb04 	ldr.w	pc, [sp], #4
    db70:	1fff8ff4 	.word	0x1fff8ff4
    db74:	1fff8ff0 	.word	0x1fff8ff0

0000db78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    db78:	b500      	push	{lr}
    db7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db7c:	f7f2 ffee 	bl	b5c <Sys_GetCoreID>
    db80:	4603      	mov	r3, r0
    db82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    db84:	4a10      	ldr	r2, [pc, #64]	; (dbc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    db86:	9b01      	ldr	r3, [sp, #4]
    db88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db8c:	2b00      	cmp	r3, #0
    db8e:	d10d      	bne.n	dbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db90:	f7f2 ff02 	bl	998 <Adc_schm_read_msr>
    db94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db96:	9b00      	ldr	r3, [sp, #0]
    db98:	f003 0301 	and.w	r3, r3, #1
    db9c:	2b00      	cmp	r3, #0
    db9e:	d100      	bne.n	dba2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dba0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    dba2:	490a      	ldr	r1, [pc, #40]	; (dbcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	9a00      	ldr	r2, [sp, #0]
    dba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    dbac:	4a06      	ldr	r2, [pc, #24]	; (dbc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dbae:	9b01      	ldr	r3, [sp, #4]
    dbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbb4:	1c5a      	adds	r2, r3, #1
    dbb6:	4904      	ldr	r1, [pc, #16]	; (dbc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dbb8:	9b01      	ldr	r3, [sp, #4]
    dbba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbbe:	bf00      	nop
    dbc0:	b003      	add	sp, #12
    dbc2:	f85d fb04 	ldr.w	pc, [sp], #4
    dbc6:	bf00      	nop
    dbc8:	1fff8ffc 	.word	0x1fff8ffc
    dbcc:	1fff8ff8 	.word	0x1fff8ff8

0000dbd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    dbd0:	b500      	push	{lr}
    dbd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbd4:	f7f2 ffc2 	bl	b5c <Sys_GetCoreID>
    dbd8:	4603      	mov	r3, r0
    dbda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    dbdc:	4a0d      	ldr	r2, [pc, #52]	; (dc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dbde:	9b01      	ldr	r3, [sp, #4]
    dbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe4:	1e5a      	subs	r2, r3, #1
    dbe6:	490b      	ldr	r1, [pc, #44]	; (dc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dbe8:	9b01      	ldr	r3, [sp, #4]
    dbea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    dbee:	4a0a      	ldr	r2, [pc, #40]	; (dc18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    dbf0:	9b01      	ldr	r3, [sp, #4]
    dbf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf6:	f003 0301 	and.w	r3, r3, #1
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	d106      	bne.n	dc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    dbfe:	4a05      	ldr	r2, [pc, #20]	; (dc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dc00:	9b01      	ldr	r3, [sp, #4]
    dc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc06:	2b00      	cmp	r3, #0
    dc08:	d100      	bne.n	dc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc0c:	bf00      	nop
    dc0e:	b003      	add	sp, #12
    dc10:	f85d fb04 	ldr.w	pc, [sp], #4
    dc14:	1fff8ffc 	.word	0x1fff8ffc
    dc18:	1fff8ff8 	.word	0x1fff8ff8

0000dc1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    dc1c:	b500      	push	{lr}
    dc1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc20:	f7f2 ff9c 	bl	b5c <Sys_GetCoreID>
    dc24:	4603      	mov	r3, r0
    dc26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    dc28:	4a10      	ldr	r2, [pc, #64]	; (dc6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dc2a:	9b01      	ldr	r3, [sp, #4]
    dc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc30:	2b00      	cmp	r3, #0
    dc32:	d10d      	bne.n	dc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc34:	f7f2 feb0 	bl	998 <Adc_schm_read_msr>
    dc38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc3a:	9b00      	ldr	r3, [sp, #0]
    dc3c:	f003 0301 	and.w	r3, r3, #1
    dc40:	2b00      	cmp	r3, #0
    dc42:	d100      	bne.n	dc46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    dc46:	490a      	ldr	r1, [pc, #40]	; (dc70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	9a00      	ldr	r2, [sp, #0]
    dc4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    dc50:	4a06      	ldr	r2, [pc, #24]	; (dc6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dc52:	9b01      	ldr	r3, [sp, #4]
    dc54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc58:	1c5a      	adds	r2, r3, #1
    dc5a:	4904      	ldr	r1, [pc, #16]	; (dc6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dc5c:	9b01      	ldr	r3, [sp, #4]
    dc5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc62:	bf00      	nop
    dc64:	b003      	add	sp, #12
    dc66:	f85d fb04 	ldr.w	pc, [sp], #4
    dc6a:	bf00      	nop
    dc6c:	1fff9004 	.word	0x1fff9004
    dc70:	1fff9000 	.word	0x1fff9000

0000dc74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    dc74:	b500      	push	{lr}
    dc76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc78:	f7f2 ff70 	bl	b5c <Sys_GetCoreID>
    dc7c:	4603      	mov	r3, r0
    dc7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    dc80:	4a0d      	ldr	r2, [pc, #52]	; (dcb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dc82:	9b01      	ldr	r3, [sp, #4]
    dc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc88:	1e5a      	subs	r2, r3, #1
    dc8a:	490b      	ldr	r1, [pc, #44]	; (dcb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dc8c:	9b01      	ldr	r3, [sp, #4]
    dc8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    dc92:	4a0a      	ldr	r2, [pc, #40]	; (dcbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    dc94:	9b01      	ldr	r3, [sp, #4]
    dc96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc9a:	f003 0301 	and.w	r3, r3, #1
    dc9e:	2b00      	cmp	r3, #0
    dca0:	d106      	bne.n	dcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    dca2:	4a05      	ldr	r2, [pc, #20]	; (dcb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dca4:	9b01      	ldr	r3, [sp, #4]
    dca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d100      	bne.n	dcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcb0:	bf00      	nop
    dcb2:	b003      	add	sp, #12
    dcb4:	f85d fb04 	ldr.w	pc, [sp], #4
    dcb8:	1fff9004 	.word	0x1fff9004
    dcbc:	1fff9000 	.word	0x1fff9000

0000dcc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    dcc0:	b500      	push	{lr}
    dcc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcc4:	f7f2 ff4a 	bl	b5c <Sys_GetCoreID>
    dcc8:	4603      	mov	r3, r0
    dcca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    dccc:	4a10      	ldr	r2, [pc, #64]	; (dd10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dcce:	9b01      	ldr	r3, [sp, #4]
    dcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d10d      	bne.n	dcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dcd8:	f7f2 fe5e 	bl	998 <Adc_schm_read_msr>
    dcdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dcde:	9b00      	ldr	r3, [sp, #0]
    dce0:	f003 0301 	and.w	r3, r3, #1
    dce4:	2b00      	cmp	r3, #0
    dce6:	d100      	bne.n	dcea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dce8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    dcea:	490a      	ldr	r1, [pc, #40]	; (dd14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	9a00      	ldr	r2, [sp, #0]
    dcf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    dcf4:	4a06      	ldr	r2, [pc, #24]	; (dd10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dcf6:	9b01      	ldr	r3, [sp, #4]
    dcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcfc:	1c5a      	adds	r2, r3, #1
    dcfe:	4904      	ldr	r1, [pc, #16]	; (dd10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dd00:	9b01      	ldr	r3, [sp, #4]
    dd02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd06:	bf00      	nop
    dd08:	b003      	add	sp, #12
    dd0a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd0e:	bf00      	nop
    dd10:	1fff900c 	.word	0x1fff900c
    dd14:	1fff9008 	.word	0x1fff9008

0000dd18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    dd18:	b500      	push	{lr}
    dd1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd1c:	f7f2 ff1e 	bl	b5c <Sys_GetCoreID>
    dd20:	4603      	mov	r3, r0
    dd22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    dd24:	4a0d      	ldr	r2, [pc, #52]	; (dd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dd26:	9b01      	ldr	r3, [sp, #4]
    dd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd2c:	1e5a      	subs	r2, r3, #1
    dd2e:	490b      	ldr	r1, [pc, #44]	; (dd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dd30:	9b01      	ldr	r3, [sp, #4]
    dd32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    dd36:	4a0a      	ldr	r2, [pc, #40]	; (dd60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    dd38:	9b01      	ldr	r3, [sp, #4]
    dd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3e:	f003 0301 	and.w	r3, r3, #1
    dd42:	2b00      	cmp	r3, #0
    dd44:	d106      	bne.n	dd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    dd46:	4a05      	ldr	r2, [pc, #20]	; (dd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dd48:	9b01      	ldr	r3, [sp, #4]
    dd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd4e:	2b00      	cmp	r3, #0
    dd50:	d100      	bne.n	dd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd54:	bf00      	nop
    dd56:	b003      	add	sp, #12
    dd58:	f85d fb04 	ldr.w	pc, [sp], #4
    dd5c:	1fff900c 	.word	0x1fff900c
    dd60:	1fff9008 	.word	0x1fff9008

0000dd64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dd64:	b500      	push	{lr}
    dd66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd68:	f7f2 fef8 	bl	b5c <Sys_GetCoreID>
    dd6c:	4603      	mov	r3, r0
    dd6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    dd70:	4a10      	ldr	r2, [pc, #64]	; (ddb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dd72:	9b01      	ldr	r3, [sp, #4]
    dd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d10d      	bne.n	dd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd7c:	f7f2 fe0c 	bl	998 <Adc_schm_read_msr>
    dd80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd82:	9b00      	ldr	r3, [sp, #0]
    dd84:	f003 0301 	and.w	r3, r3, #1
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d100      	bne.n	dd8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    dd8e:	490a      	ldr	r1, [pc, #40]	; (ddb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    dd90:	9b01      	ldr	r3, [sp, #4]
    dd92:	9a00      	ldr	r2, [sp, #0]
    dd94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    dd98:	4a06      	ldr	r2, [pc, #24]	; (ddb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dd9a:	9b01      	ldr	r3, [sp, #4]
    dd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dda0:	1c5a      	adds	r2, r3, #1
    dda2:	4904      	ldr	r1, [pc, #16]	; (ddb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dda4:	9b01      	ldr	r3, [sp, #4]
    dda6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddaa:	bf00      	nop
    ddac:	b003      	add	sp, #12
    ddae:	f85d fb04 	ldr.w	pc, [sp], #4
    ddb2:	bf00      	nop
    ddb4:	1fff9014 	.word	0x1fff9014
    ddb8:	1fff9010 	.word	0x1fff9010

0000ddbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    ddbc:	b500      	push	{lr}
    ddbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddc0:	f7f2 fecc 	bl	b5c <Sys_GetCoreID>
    ddc4:	4603      	mov	r3, r0
    ddc6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    ddc8:	4a0d      	ldr	r2, [pc, #52]	; (de00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    ddca:	9b01      	ldr	r3, [sp, #4]
    ddcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddd0:	1e5a      	subs	r2, r3, #1
    ddd2:	490b      	ldr	r1, [pc, #44]	; (de00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    ddd4:	9b01      	ldr	r3, [sp, #4]
    ddd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    ddda:	4a0a      	ldr	r2, [pc, #40]	; (de04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    dddc:	9b01      	ldr	r3, [sp, #4]
    ddde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dde2:	f003 0301 	and.w	r3, r3, #1
    dde6:	2b00      	cmp	r3, #0
    dde8:	d106      	bne.n	ddf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    ddea:	4a05      	ldr	r2, [pc, #20]	; (de00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    ddec:	9b01      	ldr	r3, [sp, #4]
    ddee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	d100      	bne.n	ddf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ddf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ddf8:	bf00      	nop
    ddfa:	b003      	add	sp, #12
    ddfc:	f85d fb04 	ldr.w	pc, [sp], #4
    de00:	1fff9014 	.word	0x1fff9014
    de04:	1fff9010 	.word	0x1fff9010

0000de08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    de08:	b500      	push	{lr}
    de0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de0c:	f7f2 fea6 	bl	b5c <Sys_GetCoreID>
    de10:	4603      	mov	r3, r0
    de12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    de14:	4a10      	ldr	r2, [pc, #64]	; (de58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    de16:	9b01      	ldr	r3, [sp, #4]
    de18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de1c:	2b00      	cmp	r3, #0
    de1e:	d10d      	bne.n	de3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de20:	f7f2 fdba 	bl	998 <Adc_schm_read_msr>
    de24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de26:	9b00      	ldr	r3, [sp, #0]
    de28:	f003 0301 	and.w	r3, r3, #1
    de2c:	2b00      	cmp	r3, #0
    de2e:	d100      	bne.n	de32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    de32:	490a      	ldr	r1, [pc, #40]	; (de5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    de34:	9b01      	ldr	r3, [sp, #4]
    de36:	9a00      	ldr	r2, [sp, #0]
    de38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    de3c:	4a06      	ldr	r2, [pc, #24]	; (de58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    de3e:	9b01      	ldr	r3, [sp, #4]
    de40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de44:	1c5a      	adds	r2, r3, #1
    de46:	4904      	ldr	r1, [pc, #16]	; (de58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    de48:	9b01      	ldr	r3, [sp, #4]
    de4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de4e:	bf00      	nop
    de50:	b003      	add	sp, #12
    de52:	f85d fb04 	ldr.w	pc, [sp], #4
    de56:	bf00      	nop
    de58:	1fff901c 	.word	0x1fff901c
    de5c:	1fff9018 	.word	0x1fff9018

0000de60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    de60:	b500      	push	{lr}
    de62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de64:	f7f2 fe7a 	bl	b5c <Sys_GetCoreID>
    de68:	4603      	mov	r3, r0
    de6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    de6c:	4a0d      	ldr	r2, [pc, #52]	; (dea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    de6e:	9b01      	ldr	r3, [sp, #4]
    de70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de74:	1e5a      	subs	r2, r3, #1
    de76:	490b      	ldr	r1, [pc, #44]	; (dea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    de78:	9b01      	ldr	r3, [sp, #4]
    de7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    de7e:	4a0a      	ldr	r2, [pc, #40]	; (dea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    de80:	9b01      	ldr	r3, [sp, #4]
    de82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de86:	f003 0301 	and.w	r3, r3, #1
    de8a:	2b00      	cmp	r3, #0
    de8c:	d106      	bne.n	de9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    de8e:	4a05      	ldr	r2, [pc, #20]	; (dea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    de90:	9b01      	ldr	r3, [sp, #4]
    de92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de96:	2b00      	cmp	r3, #0
    de98:	d100      	bne.n	de9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de9c:	bf00      	nop
    de9e:	b003      	add	sp, #12
    dea0:	f85d fb04 	ldr.w	pc, [sp], #4
    dea4:	1fff901c 	.word	0x1fff901c
    dea8:	1fff9018 	.word	0x1fff9018

0000deac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    deac:	b500      	push	{lr}
    deae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    deb0:	f7f2 fe54 	bl	b5c <Sys_GetCoreID>
    deb4:	4603      	mov	r3, r0
    deb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    deb8:	4a10      	ldr	r2, [pc, #64]	; (defc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    deba:	9b01      	ldr	r3, [sp, #4]
    debc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec0:	2b00      	cmp	r3, #0
    dec2:	d10d      	bne.n	dee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dec4:	f7f2 fd68 	bl	998 <Adc_schm_read_msr>
    dec8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    deca:	9b00      	ldr	r3, [sp, #0]
    decc:	f003 0301 	and.w	r3, r3, #1
    ded0:	2b00      	cmp	r3, #0
    ded2:	d100      	bne.n	ded6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ded4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    ded6:	490a      	ldr	r1, [pc, #40]	; (df00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    ded8:	9b01      	ldr	r3, [sp, #4]
    deda:	9a00      	ldr	r2, [sp, #0]
    dedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    dee0:	4a06      	ldr	r2, [pc, #24]	; (defc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dee2:	9b01      	ldr	r3, [sp, #4]
    dee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dee8:	1c5a      	adds	r2, r3, #1
    deea:	4904      	ldr	r1, [pc, #16]	; (defc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    deec:	9b01      	ldr	r3, [sp, #4]
    deee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    def2:	bf00      	nop
    def4:	b003      	add	sp, #12
    def6:	f85d fb04 	ldr.w	pc, [sp], #4
    defa:	bf00      	nop
    defc:	1fff9024 	.word	0x1fff9024
    df00:	1fff9020 	.word	0x1fff9020

0000df04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    df04:	b500      	push	{lr}
    df06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df08:	f7f2 fe28 	bl	b5c <Sys_GetCoreID>
    df0c:	4603      	mov	r3, r0
    df0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    df10:	4a0d      	ldr	r2, [pc, #52]	; (df48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    df12:	9b01      	ldr	r3, [sp, #4]
    df14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df18:	1e5a      	subs	r2, r3, #1
    df1a:	490b      	ldr	r1, [pc, #44]	; (df48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    df1c:	9b01      	ldr	r3, [sp, #4]
    df1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    df22:	4a0a      	ldr	r2, [pc, #40]	; (df4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    df24:	9b01      	ldr	r3, [sp, #4]
    df26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df2a:	f003 0301 	and.w	r3, r3, #1
    df2e:	2b00      	cmp	r3, #0
    df30:	d106      	bne.n	df40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    df32:	4a05      	ldr	r2, [pc, #20]	; (df48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    df34:	9b01      	ldr	r3, [sp, #4]
    df36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df3a:	2b00      	cmp	r3, #0
    df3c:	d100      	bne.n	df40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df40:	bf00      	nop
    df42:	b003      	add	sp, #12
    df44:	f85d fb04 	ldr.w	pc, [sp], #4
    df48:	1fff9024 	.word	0x1fff9024
    df4c:	1fff9020 	.word	0x1fff9020

0000df50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    df50:	b500      	push	{lr}
    df52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df54:	f7f2 fe02 	bl	b5c <Sys_GetCoreID>
    df58:	4603      	mov	r3, r0
    df5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    df5c:	4a10      	ldr	r2, [pc, #64]	; (dfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    df5e:	9b01      	ldr	r3, [sp, #4]
    df60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df64:	2b00      	cmp	r3, #0
    df66:	d10d      	bne.n	df84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df68:	f7f2 fd16 	bl	998 <Adc_schm_read_msr>
    df6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df6e:	9b00      	ldr	r3, [sp, #0]
    df70:	f003 0301 	and.w	r3, r3, #1
    df74:	2b00      	cmp	r3, #0
    df76:	d100      	bne.n	df7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    df7a:	490a      	ldr	r1, [pc, #40]	; (dfa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    df7c:	9b01      	ldr	r3, [sp, #4]
    df7e:	9a00      	ldr	r2, [sp, #0]
    df80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    df84:	4a06      	ldr	r2, [pc, #24]	; (dfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    df86:	9b01      	ldr	r3, [sp, #4]
    df88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df8c:	1c5a      	adds	r2, r3, #1
    df8e:	4904      	ldr	r1, [pc, #16]	; (dfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    df90:	9b01      	ldr	r3, [sp, #4]
    df92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df96:	bf00      	nop
    df98:	b003      	add	sp, #12
    df9a:	f85d fb04 	ldr.w	pc, [sp], #4
    df9e:	bf00      	nop
    dfa0:	1fff902c 	.word	0x1fff902c
    dfa4:	1fff9028 	.word	0x1fff9028

0000dfa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    dfa8:	b500      	push	{lr}
    dfaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfac:	f7f2 fdd6 	bl	b5c <Sys_GetCoreID>
    dfb0:	4603      	mov	r3, r0
    dfb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    dfb4:	4a0d      	ldr	r2, [pc, #52]	; (dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    dfb6:	9b01      	ldr	r3, [sp, #4]
    dfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfbc:	1e5a      	subs	r2, r3, #1
    dfbe:	490b      	ldr	r1, [pc, #44]	; (dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    dfc0:	9b01      	ldr	r3, [sp, #4]
    dfc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    dfc6:	4a0a      	ldr	r2, [pc, #40]	; (dff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    dfc8:	9b01      	ldr	r3, [sp, #4]
    dfca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfce:	f003 0301 	and.w	r3, r3, #1
    dfd2:	2b00      	cmp	r3, #0
    dfd4:	d106      	bne.n	dfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    dfd6:	4a05      	ldr	r2, [pc, #20]	; (dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    dfd8:	9b01      	ldr	r3, [sp, #4]
    dfda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d100      	bne.n	dfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dfe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfe4:	bf00      	nop
    dfe6:	b003      	add	sp, #12
    dfe8:	f85d fb04 	ldr.w	pc, [sp], #4
    dfec:	1fff902c 	.word	0x1fff902c
    dff0:	1fff9028 	.word	0x1fff9028

0000dff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    dff4:	b500      	push	{lr}
    dff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dff8:	f7f2 fdb0 	bl	b5c <Sys_GetCoreID>
    dffc:	4603      	mov	r3, r0
    dffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    e000:	4a10      	ldr	r2, [pc, #64]	; (e044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e002:	9b01      	ldr	r3, [sp, #4]
    e004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e008:	2b00      	cmp	r3, #0
    e00a:	d10d      	bne.n	e028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e00c:	f7f2 fcc4 	bl	998 <Adc_schm_read_msr>
    e010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e012:	9b00      	ldr	r3, [sp, #0]
    e014:	f003 0301 	and.w	r3, r3, #1
    e018:	2b00      	cmp	r3, #0
    e01a:	d100      	bne.n	e01e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e01c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    e01e:	490a      	ldr	r1, [pc, #40]	; (e048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    e020:	9b01      	ldr	r3, [sp, #4]
    e022:	9a00      	ldr	r2, [sp, #0]
    e024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    e028:	4a06      	ldr	r2, [pc, #24]	; (e044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e02a:	9b01      	ldr	r3, [sp, #4]
    e02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e030:	1c5a      	adds	r2, r3, #1
    e032:	4904      	ldr	r1, [pc, #16]	; (e044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e034:	9b01      	ldr	r3, [sp, #4]
    e036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e03a:	bf00      	nop
    e03c:	b003      	add	sp, #12
    e03e:	f85d fb04 	ldr.w	pc, [sp], #4
    e042:	bf00      	nop
    e044:	1fff9034 	.word	0x1fff9034
    e048:	1fff9030 	.word	0x1fff9030

0000e04c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e04c:	b500      	push	{lr}
    e04e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e050:	f7f2 fd84 	bl	b5c <Sys_GetCoreID>
    e054:	4603      	mov	r3, r0
    e056:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    e058:	4a0d      	ldr	r2, [pc, #52]	; (e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e05a:	9b01      	ldr	r3, [sp, #4]
    e05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e060:	1e5a      	subs	r2, r3, #1
    e062:	490b      	ldr	r1, [pc, #44]	; (e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e064:	9b01      	ldr	r3, [sp, #4]
    e066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    e06a:	4a0a      	ldr	r2, [pc, #40]	; (e094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    e06c:	9b01      	ldr	r3, [sp, #4]
    e06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e072:	f003 0301 	and.w	r3, r3, #1
    e076:	2b00      	cmp	r3, #0
    e078:	d106      	bne.n	e088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    e07a:	4a05      	ldr	r2, [pc, #20]	; (e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e07c:	9b01      	ldr	r3, [sp, #4]
    e07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e082:	2b00      	cmp	r3, #0
    e084:	d100      	bne.n	e088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e088:	bf00      	nop
    e08a:	b003      	add	sp, #12
    e08c:	f85d fb04 	ldr.w	pc, [sp], #4
    e090:	1fff9034 	.word	0x1fff9034
    e094:	1fff9030 	.word	0x1fff9030

0000e098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e098:	b500      	push	{lr}
    e09a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e09c:	f7f2 fd5e 	bl	b5c <Sys_GetCoreID>
    e0a0:	4603      	mov	r3, r0
    e0a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    e0a4:	4a10      	ldr	r2, [pc, #64]	; (e0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e0a6:	9b01      	ldr	r3, [sp, #4]
    e0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d10d      	bne.n	e0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0b0:	f7f2 fc72 	bl	998 <Adc_schm_read_msr>
    e0b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0b6:	9b00      	ldr	r3, [sp, #0]
    e0b8:	f003 0301 	and.w	r3, r3, #1
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d100      	bne.n	e0c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    e0c2:	490a      	ldr	r1, [pc, #40]	; (e0ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	9a00      	ldr	r2, [sp, #0]
    e0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    e0cc:	4a06      	ldr	r2, [pc, #24]	; (e0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e0ce:	9b01      	ldr	r3, [sp, #4]
    e0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0d4:	1c5a      	adds	r2, r3, #1
    e0d6:	4904      	ldr	r1, [pc, #16]	; (e0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e0d8:	9b01      	ldr	r3, [sp, #4]
    e0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e0de:	bf00      	nop
    e0e0:	b003      	add	sp, #12
    e0e2:	f85d fb04 	ldr.w	pc, [sp], #4
    e0e6:	bf00      	nop
    e0e8:	1fff903c 	.word	0x1fff903c
    e0ec:	1fff9038 	.word	0x1fff9038

0000e0f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e0f0:	b500      	push	{lr}
    e0f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0f4:	f7f2 fd32 	bl	b5c <Sys_GetCoreID>
    e0f8:	4603      	mov	r3, r0
    e0fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    e0fc:	4a0d      	ldr	r2, [pc, #52]	; (e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e0fe:	9b01      	ldr	r3, [sp, #4]
    e100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e104:	1e5a      	subs	r2, r3, #1
    e106:	490b      	ldr	r1, [pc, #44]	; (e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e108:	9b01      	ldr	r3, [sp, #4]
    e10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    e10e:	4a0a      	ldr	r2, [pc, #40]	; (e138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    e110:	9b01      	ldr	r3, [sp, #4]
    e112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e116:	f003 0301 	and.w	r3, r3, #1
    e11a:	2b00      	cmp	r3, #0
    e11c:	d106      	bne.n	e12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    e11e:	4a05      	ldr	r2, [pc, #20]	; (e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e120:	9b01      	ldr	r3, [sp, #4]
    e122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e126:	2b00      	cmp	r3, #0
    e128:	d100      	bne.n	e12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e12a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e12c:	bf00      	nop
    e12e:	b003      	add	sp, #12
    e130:	f85d fb04 	ldr.w	pc, [sp], #4
    e134:	1fff903c 	.word	0x1fff903c
    e138:	1fff9038 	.word	0x1fff9038

0000e13c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e13c:	b500      	push	{lr}
    e13e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e140:	f7f2 fd0c 	bl	b5c <Sys_GetCoreID>
    e144:	4603      	mov	r3, r0
    e146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    e148:	4a10      	ldr	r2, [pc, #64]	; (e18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e14a:	9b01      	ldr	r3, [sp, #4]
    e14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e150:	2b00      	cmp	r3, #0
    e152:	d10d      	bne.n	e170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e154:	f7f2 fc20 	bl	998 <Adc_schm_read_msr>
    e158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e15a:	9b00      	ldr	r3, [sp, #0]
    e15c:	f003 0301 	and.w	r3, r3, #1
    e160:	2b00      	cmp	r3, #0
    e162:	d100      	bne.n	e166 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    e166:	490a      	ldr	r1, [pc, #40]	; (e190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	9a00      	ldr	r2, [sp, #0]
    e16c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    e170:	4a06      	ldr	r2, [pc, #24]	; (e18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e172:	9b01      	ldr	r3, [sp, #4]
    e174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e178:	1c5a      	adds	r2, r3, #1
    e17a:	4904      	ldr	r1, [pc, #16]	; (e18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e17c:	9b01      	ldr	r3, [sp, #4]
    e17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e182:	bf00      	nop
    e184:	b003      	add	sp, #12
    e186:	f85d fb04 	ldr.w	pc, [sp], #4
    e18a:	bf00      	nop
    e18c:	1fff9044 	.word	0x1fff9044
    e190:	1fff9040 	.word	0x1fff9040

0000e194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e194:	b500      	push	{lr}
    e196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e198:	f7f2 fce0 	bl	b5c <Sys_GetCoreID>
    e19c:	4603      	mov	r3, r0
    e19e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    e1a0:	4a0d      	ldr	r2, [pc, #52]	; (e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e1a2:	9b01      	ldr	r3, [sp, #4]
    e1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a8:	1e5a      	subs	r2, r3, #1
    e1aa:	490b      	ldr	r1, [pc, #44]	; (e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e1ac:	9b01      	ldr	r3, [sp, #4]
    e1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e1b2:	4a0a      	ldr	r2, [pc, #40]	; (e1dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e1b4:	9b01      	ldr	r3, [sp, #4]
    e1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ba:	f003 0301 	and.w	r3, r3, #1
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d106      	bne.n	e1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e1c2:	4a05      	ldr	r2, [pc, #20]	; (e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e1c4:	9b01      	ldr	r3, [sp, #4]
    e1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d100      	bne.n	e1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e1ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e1d0:	bf00      	nop
    e1d2:	b003      	add	sp, #12
    e1d4:	f85d fb04 	ldr.w	pc, [sp], #4
    e1d8:	1fff9044 	.word	0x1fff9044
    e1dc:	1fff9040 	.word	0x1fff9040

0000e1e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e1e0:	b500      	push	{lr}
    e1e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1e4:	f7f2 fcba 	bl	b5c <Sys_GetCoreID>
    e1e8:	4603      	mov	r3, r0
    e1ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e1ec:	4a10      	ldr	r2, [pc, #64]	; (e230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d10d      	bne.n	e214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1f8:	f7f2 fbce 	bl	998 <Adc_schm_read_msr>
    e1fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1fe:	9b00      	ldr	r3, [sp, #0]
    e200:	f003 0301 	and.w	r3, r3, #1
    e204:	2b00      	cmp	r3, #0
    e206:	d100      	bne.n	e20a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e20a:	490a      	ldr	r1, [pc, #40]	; (e234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e20c:	9b01      	ldr	r3, [sp, #4]
    e20e:	9a00      	ldr	r2, [sp, #0]
    e210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e214:	4a06      	ldr	r2, [pc, #24]	; (e230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e216:	9b01      	ldr	r3, [sp, #4]
    e218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e21c:	1c5a      	adds	r2, r3, #1
    e21e:	4904      	ldr	r1, [pc, #16]	; (e230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e220:	9b01      	ldr	r3, [sp, #4]
    e222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e226:	bf00      	nop
    e228:	b003      	add	sp, #12
    e22a:	f85d fb04 	ldr.w	pc, [sp], #4
    e22e:	bf00      	nop
    e230:	1fff904c 	.word	0x1fff904c
    e234:	1fff9048 	.word	0x1fff9048

0000e238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e238:	b500      	push	{lr}
    e23a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e23c:	f7f2 fc8e 	bl	b5c <Sys_GetCoreID>
    e240:	4603      	mov	r3, r0
    e242:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e244:	4a0d      	ldr	r2, [pc, #52]	; (e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e246:	9b01      	ldr	r3, [sp, #4]
    e248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e24c:	1e5a      	subs	r2, r3, #1
    e24e:	490b      	ldr	r1, [pc, #44]	; (e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e250:	9b01      	ldr	r3, [sp, #4]
    e252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e256:	4a0a      	ldr	r2, [pc, #40]	; (e280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e258:	9b01      	ldr	r3, [sp, #4]
    e25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25e:	f003 0301 	and.w	r3, r3, #1
    e262:	2b00      	cmp	r3, #0
    e264:	d106      	bne.n	e274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e266:	4a05      	ldr	r2, [pc, #20]	; (e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e268:	9b01      	ldr	r3, [sp, #4]
    e26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e26e:	2b00      	cmp	r3, #0
    e270:	d100      	bne.n	e274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e274:	bf00      	nop
    e276:	b003      	add	sp, #12
    e278:	f85d fb04 	ldr.w	pc, [sp], #4
    e27c:	1fff904c 	.word	0x1fff904c
    e280:	1fff9048 	.word	0x1fff9048

0000e284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e284:	b500      	push	{lr}
    e286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e288:	f7f2 fc68 	bl	b5c <Sys_GetCoreID>
    e28c:	4603      	mov	r3, r0
    e28e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e290:	4a10      	ldr	r2, [pc, #64]	; (e2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e292:	9b01      	ldr	r3, [sp, #4]
    e294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e298:	2b00      	cmp	r3, #0
    e29a:	d10d      	bne.n	e2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e29c:	f7f2 fb7c 	bl	998 <Adc_schm_read_msr>
    e2a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2a2:	9b00      	ldr	r3, [sp, #0]
    e2a4:	f003 0301 	and.w	r3, r3, #1
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d100      	bne.n	e2ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e2ae:	490a      	ldr	r1, [pc, #40]	; (e2d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e2b0:	9b01      	ldr	r3, [sp, #4]
    e2b2:	9a00      	ldr	r2, [sp, #0]
    e2b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e2b8:	4a06      	ldr	r2, [pc, #24]	; (e2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e2ba:	9b01      	ldr	r3, [sp, #4]
    e2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2c0:	1c5a      	adds	r2, r3, #1
    e2c2:	4904      	ldr	r1, [pc, #16]	; (e2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e2c4:	9b01      	ldr	r3, [sp, #4]
    e2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2ca:	bf00      	nop
    e2cc:	b003      	add	sp, #12
    e2ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e2d2:	bf00      	nop
    e2d4:	1fff9054 	.word	0x1fff9054
    e2d8:	1fff9050 	.word	0x1fff9050

0000e2dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e2dc:	b500      	push	{lr}
    e2de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2e0:	f7f2 fc3c 	bl	b5c <Sys_GetCoreID>
    e2e4:	4603      	mov	r3, r0
    e2e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e2e8:	4a0d      	ldr	r2, [pc, #52]	; (e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e2ea:	9b01      	ldr	r3, [sp, #4]
    e2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2f0:	1e5a      	subs	r2, r3, #1
    e2f2:	490b      	ldr	r1, [pc, #44]	; (e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e2f4:	9b01      	ldr	r3, [sp, #4]
    e2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e2fa:	4a0a      	ldr	r2, [pc, #40]	; (e324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e2fc:	9b01      	ldr	r3, [sp, #4]
    e2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e302:	f003 0301 	and.w	r3, r3, #1
    e306:	2b00      	cmp	r3, #0
    e308:	d106      	bne.n	e318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e30a:	4a05      	ldr	r2, [pc, #20]	; (e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e30c:	9b01      	ldr	r3, [sp, #4]
    e30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e312:	2b00      	cmp	r3, #0
    e314:	d100      	bne.n	e318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e318:	bf00      	nop
    e31a:	b003      	add	sp, #12
    e31c:	f85d fb04 	ldr.w	pc, [sp], #4
    e320:	1fff9054 	.word	0x1fff9054
    e324:	1fff9050 	.word	0x1fff9050

0000e328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e328:	b500      	push	{lr}
    e32a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e32c:	f7f2 fc16 	bl	b5c <Sys_GetCoreID>
    e330:	4603      	mov	r3, r0
    e332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e334:	4a10      	ldr	r2, [pc, #64]	; (e378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e336:	9b01      	ldr	r3, [sp, #4]
    e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d10d      	bne.n	e35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e340:	f7f2 fb2a 	bl	998 <Adc_schm_read_msr>
    e344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e346:	9b00      	ldr	r3, [sp, #0]
    e348:	f003 0301 	and.w	r3, r3, #1
    e34c:	2b00      	cmp	r3, #0
    e34e:	d100      	bne.n	e352 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e352:	490a      	ldr	r1, [pc, #40]	; (e37c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e354:	9b01      	ldr	r3, [sp, #4]
    e356:	9a00      	ldr	r2, [sp, #0]
    e358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e35c:	4a06      	ldr	r2, [pc, #24]	; (e378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e35e:	9b01      	ldr	r3, [sp, #4]
    e360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e364:	1c5a      	adds	r2, r3, #1
    e366:	4904      	ldr	r1, [pc, #16]	; (e378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e368:	9b01      	ldr	r3, [sp, #4]
    e36a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e36e:	bf00      	nop
    e370:	b003      	add	sp, #12
    e372:	f85d fb04 	ldr.w	pc, [sp], #4
    e376:	bf00      	nop
    e378:	1fff905c 	.word	0x1fff905c
    e37c:	1fff9058 	.word	0x1fff9058

0000e380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e380:	b500      	push	{lr}
    e382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e384:	f7f2 fbea 	bl	b5c <Sys_GetCoreID>
    e388:	4603      	mov	r3, r0
    e38a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e38c:	4a0d      	ldr	r2, [pc, #52]	; (e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e38e:	9b01      	ldr	r3, [sp, #4]
    e390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e394:	1e5a      	subs	r2, r3, #1
    e396:	490b      	ldr	r1, [pc, #44]	; (e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e398:	9b01      	ldr	r3, [sp, #4]
    e39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e39e:	4a0a      	ldr	r2, [pc, #40]	; (e3c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e3a0:	9b01      	ldr	r3, [sp, #4]
    e3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a6:	f003 0301 	and.w	r3, r3, #1
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d106      	bne.n	e3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e3ae:	4a05      	ldr	r2, [pc, #20]	; (e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e3b0:	9b01      	ldr	r3, [sp, #4]
    e3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d100      	bne.n	e3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3bc:	bf00      	nop
    e3be:	b003      	add	sp, #12
    e3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c4:	1fff905c 	.word	0x1fff905c
    e3c8:	1fff9058 	.word	0x1fff9058

0000e3cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e3cc:	b500      	push	{lr}
    e3ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3d0:	f7f2 fbc4 	bl	b5c <Sys_GetCoreID>
    e3d4:	4603      	mov	r3, r0
    e3d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e3d8:	4a10      	ldr	r2, [pc, #64]	; (e41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e3da:	9b01      	ldr	r3, [sp, #4]
    e3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	d10d      	bne.n	e400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3e4:	f7f2 fad8 	bl	998 <Adc_schm_read_msr>
    e3e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3ea:	9b00      	ldr	r3, [sp, #0]
    e3ec:	f003 0301 	and.w	r3, r3, #1
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d100      	bne.n	e3f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e3f6:	490a      	ldr	r1, [pc, #40]	; (e420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e3f8:	9b01      	ldr	r3, [sp, #4]
    e3fa:	9a00      	ldr	r2, [sp, #0]
    e3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e400:	4a06      	ldr	r2, [pc, #24]	; (e41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e402:	9b01      	ldr	r3, [sp, #4]
    e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e408:	1c5a      	adds	r2, r3, #1
    e40a:	4904      	ldr	r1, [pc, #16]	; (e41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e40c:	9b01      	ldr	r3, [sp, #4]
    e40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e412:	bf00      	nop
    e414:	b003      	add	sp, #12
    e416:	f85d fb04 	ldr.w	pc, [sp], #4
    e41a:	bf00      	nop
    e41c:	1fff9064 	.word	0x1fff9064
    e420:	1fff9060 	.word	0x1fff9060

0000e424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e424:	b500      	push	{lr}
    e426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e428:	f7f2 fb98 	bl	b5c <Sys_GetCoreID>
    e42c:	4603      	mov	r3, r0
    e42e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e430:	4a0d      	ldr	r2, [pc, #52]	; (e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e432:	9b01      	ldr	r3, [sp, #4]
    e434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e438:	1e5a      	subs	r2, r3, #1
    e43a:	490b      	ldr	r1, [pc, #44]	; (e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e43c:	9b01      	ldr	r3, [sp, #4]
    e43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e442:	4a0a      	ldr	r2, [pc, #40]	; (e46c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e444:	9b01      	ldr	r3, [sp, #4]
    e446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e44a:	f003 0301 	and.w	r3, r3, #1
    e44e:	2b00      	cmp	r3, #0
    e450:	d106      	bne.n	e460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e452:	4a05      	ldr	r2, [pc, #20]	; (e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e454:	9b01      	ldr	r3, [sp, #4]
    e456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e45a:	2b00      	cmp	r3, #0
    e45c:	d100      	bne.n	e460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e45e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e460:	bf00      	nop
    e462:	b003      	add	sp, #12
    e464:	f85d fb04 	ldr.w	pc, [sp], #4
    e468:	1fff9064 	.word	0x1fff9064
    e46c:	1fff9060 	.word	0x1fff9060

0000e470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e470:	b500      	push	{lr}
    e472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e474:	f7f2 fb72 	bl	b5c <Sys_GetCoreID>
    e478:	4603      	mov	r3, r0
    e47a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e47c:	4a10      	ldr	r2, [pc, #64]	; (e4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e47e:	9b01      	ldr	r3, [sp, #4]
    e480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e484:	2b00      	cmp	r3, #0
    e486:	d10d      	bne.n	e4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e488:	f7f2 fa86 	bl	998 <Adc_schm_read_msr>
    e48c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e48e:	9b00      	ldr	r3, [sp, #0]
    e490:	f003 0301 	and.w	r3, r3, #1
    e494:	2b00      	cmp	r3, #0
    e496:	d100      	bne.n	e49a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e49a:	490a      	ldr	r1, [pc, #40]	; (e4c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e49c:	9b01      	ldr	r3, [sp, #4]
    e49e:	9a00      	ldr	r2, [sp, #0]
    e4a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e4a4:	4a06      	ldr	r2, [pc, #24]	; (e4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e4a6:	9b01      	ldr	r3, [sp, #4]
    e4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ac:	1c5a      	adds	r2, r3, #1
    e4ae:	4904      	ldr	r1, [pc, #16]	; (e4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e4b0:	9b01      	ldr	r3, [sp, #4]
    e4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4b6:	bf00      	nop
    e4b8:	b003      	add	sp, #12
    e4ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e4be:	bf00      	nop
    e4c0:	1fff906c 	.word	0x1fff906c
    e4c4:	1fff9068 	.word	0x1fff9068

0000e4c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e4c8:	b500      	push	{lr}
    e4ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4cc:	f7f2 fb46 	bl	b5c <Sys_GetCoreID>
    e4d0:	4603      	mov	r3, r0
    e4d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e4d4:	4a0d      	ldr	r2, [pc, #52]	; (e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e4d6:	9b01      	ldr	r3, [sp, #4]
    e4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4dc:	1e5a      	subs	r2, r3, #1
    e4de:	490b      	ldr	r1, [pc, #44]	; (e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e4e0:	9b01      	ldr	r3, [sp, #4]
    e4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e4e6:	4a0a      	ldr	r2, [pc, #40]	; (e510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e4e8:	9b01      	ldr	r3, [sp, #4]
    e4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ee:	f003 0301 	and.w	r3, r3, #1
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d106      	bne.n	e504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e4f6:	4a05      	ldr	r2, [pc, #20]	; (e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e4f8:	9b01      	ldr	r3, [sp, #4]
    e4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d100      	bne.n	e504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e504:	bf00      	nop
    e506:	b003      	add	sp, #12
    e508:	f85d fb04 	ldr.w	pc, [sp], #4
    e50c:	1fff906c 	.word	0x1fff906c
    e510:	1fff9068 	.word	0x1fff9068

0000e514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e514:	b500      	push	{lr}
    e516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e518:	f7f2 fb20 	bl	b5c <Sys_GetCoreID>
    e51c:	4603      	mov	r3, r0
    e51e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e520:	4a10      	ldr	r2, [pc, #64]	; (e564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e522:	9b01      	ldr	r3, [sp, #4]
    e524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e528:	2b00      	cmp	r3, #0
    e52a:	d10d      	bne.n	e548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e52c:	f7f2 fa34 	bl	998 <Adc_schm_read_msr>
    e530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e532:	9b00      	ldr	r3, [sp, #0]
    e534:	f003 0301 	and.w	r3, r3, #1
    e538:	2b00      	cmp	r3, #0
    e53a:	d100      	bne.n	e53e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e53c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e53e:	490a      	ldr	r1, [pc, #40]	; (e568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	9a00      	ldr	r2, [sp, #0]
    e544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e548:	4a06      	ldr	r2, [pc, #24]	; (e564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e54a:	9b01      	ldr	r3, [sp, #4]
    e54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e550:	1c5a      	adds	r2, r3, #1
    e552:	4904      	ldr	r1, [pc, #16]	; (e564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e554:	9b01      	ldr	r3, [sp, #4]
    e556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e55a:	bf00      	nop
    e55c:	b003      	add	sp, #12
    e55e:	f85d fb04 	ldr.w	pc, [sp], #4
    e562:	bf00      	nop
    e564:	1fff9074 	.word	0x1fff9074
    e568:	1fff9070 	.word	0x1fff9070

0000e56c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e56c:	b500      	push	{lr}
    e56e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e570:	f7f2 faf4 	bl	b5c <Sys_GetCoreID>
    e574:	4603      	mov	r3, r0
    e576:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e578:	4a0d      	ldr	r2, [pc, #52]	; (e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e57a:	9b01      	ldr	r3, [sp, #4]
    e57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e580:	1e5a      	subs	r2, r3, #1
    e582:	490b      	ldr	r1, [pc, #44]	; (e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e584:	9b01      	ldr	r3, [sp, #4]
    e586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e58a:	4a0a      	ldr	r2, [pc, #40]	; (e5b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e58c:	9b01      	ldr	r3, [sp, #4]
    e58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e592:	f003 0301 	and.w	r3, r3, #1
    e596:	2b00      	cmp	r3, #0
    e598:	d106      	bne.n	e5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e59a:	4a05      	ldr	r2, [pc, #20]	; (e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e59c:	9b01      	ldr	r3, [sp, #4]
    e59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d100      	bne.n	e5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5a8:	bf00      	nop
    e5aa:	b003      	add	sp, #12
    e5ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e5b0:	1fff9074 	.word	0x1fff9074
    e5b4:	1fff9070 	.word	0x1fff9070

0000e5b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e5b8:	b500      	push	{lr}
    e5ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5bc:	f7f2 face 	bl	b5c <Sys_GetCoreID>
    e5c0:	4603      	mov	r3, r0
    e5c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    e5c4:	4a10      	ldr	r2, [pc, #64]	; (e608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e5c6:	9b01      	ldr	r3, [sp, #4]
    e5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5cc:	2b00      	cmp	r3, #0
    e5ce:	d10d      	bne.n	e5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5d0:	f7f2 f9e2 	bl	998 <Adc_schm_read_msr>
    e5d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5d6:	9b00      	ldr	r3, [sp, #0]
    e5d8:	f003 0301 	and.w	r3, r3, #1
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d100      	bne.n	e5e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    e5e2:	490a      	ldr	r1, [pc, #40]	; (e60c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    e5e4:	9b01      	ldr	r3, [sp, #4]
    e5e6:	9a00      	ldr	r2, [sp, #0]
    e5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    e5ec:	4a06      	ldr	r2, [pc, #24]	; (e608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e5ee:	9b01      	ldr	r3, [sp, #4]
    e5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5f4:	1c5a      	adds	r2, r3, #1
    e5f6:	4904      	ldr	r1, [pc, #16]	; (e608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e5f8:	9b01      	ldr	r3, [sp, #4]
    e5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5fe:	bf00      	nop
    e600:	b003      	add	sp, #12
    e602:	f85d fb04 	ldr.w	pc, [sp], #4
    e606:	bf00      	nop
    e608:	1fff907c 	.word	0x1fff907c
    e60c:	1fff9078 	.word	0x1fff9078

0000e610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e610:	b500      	push	{lr}
    e612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e614:	f7f2 faa2 	bl	b5c <Sys_GetCoreID>
    e618:	4603      	mov	r3, r0
    e61a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    e61c:	4a0d      	ldr	r2, [pc, #52]	; (e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e61e:	9b01      	ldr	r3, [sp, #4]
    e620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e624:	1e5a      	subs	r2, r3, #1
    e626:	490b      	ldr	r1, [pc, #44]	; (e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e628:	9b01      	ldr	r3, [sp, #4]
    e62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    e62e:	4a0a      	ldr	r2, [pc, #40]	; (e658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    e630:	9b01      	ldr	r3, [sp, #4]
    e632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e636:	f003 0301 	and.w	r3, r3, #1
    e63a:	2b00      	cmp	r3, #0
    e63c:	d106      	bne.n	e64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    e63e:	4a05      	ldr	r2, [pc, #20]	; (e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e640:	9b01      	ldr	r3, [sp, #4]
    e642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e646:	2b00      	cmp	r3, #0
    e648:	d100      	bne.n	e64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e64a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e64c:	bf00      	nop
    e64e:	b003      	add	sp, #12
    e650:	f85d fb04 	ldr.w	pc, [sp], #4
    e654:	1fff907c 	.word	0x1fff907c
    e658:	1fff9078 	.word	0x1fff9078

0000e65c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e65c:	b500      	push	{lr}
    e65e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e660:	f7f2 fa7c 	bl	b5c <Sys_GetCoreID>
    e664:	4603      	mov	r3, r0
    e666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    e668:	4a10      	ldr	r2, [pc, #64]	; (e6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e66a:	9b01      	ldr	r3, [sp, #4]
    e66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e670:	2b00      	cmp	r3, #0
    e672:	d10d      	bne.n	e690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e674:	f7f2 f990 	bl	998 <Adc_schm_read_msr>
    e678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e67a:	9b00      	ldr	r3, [sp, #0]
    e67c:	f003 0301 	and.w	r3, r3, #1
    e680:	2b00      	cmp	r3, #0
    e682:	d100      	bne.n	e686 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    e686:	490a      	ldr	r1, [pc, #40]	; (e6b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    e688:	9b01      	ldr	r3, [sp, #4]
    e68a:	9a00      	ldr	r2, [sp, #0]
    e68c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    e690:	4a06      	ldr	r2, [pc, #24]	; (e6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e692:	9b01      	ldr	r3, [sp, #4]
    e694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e698:	1c5a      	adds	r2, r3, #1
    e69a:	4904      	ldr	r1, [pc, #16]	; (e6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e69c:	9b01      	ldr	r3, [sp, #4]
    e69e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6a2:	bf00      	nop
    e6a4:	b003      	add	sp, #12
    e6a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e6aa:	bf00      	nop
    e6ac:	1fff9084 	.word	0x1fff9084
    e6b0:	1fff9080 	.word	0x1fff9080

0000e6b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e6b4:	b500      	push	{lr}
    e6b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6b8:	f7f2 fa50 	bl	b5c <Sys_GetCoreID>
    e6bc:	4603      	mov	r3, r0
    e6be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    e6c0:	4a0d      	ldr	r2, [pc, #52]	; (e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e6c2:	9b01      	ldr	r3, [sp, #4]
    e6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6c8:	1e5a      	subs	r2, r3, #1
    e6ca:	490b      	ldr	r1, [pc, #44]	; (e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e6cc:	9b01      	ldr	r3, [sp, #4]
    e6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    e6d2:	4a0a      	ldr	r2, [pc, #40]	; (e6fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6da:	f003 0301 	and.w	r3, r3, #1
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d106      	bne.n	e6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    e6e2:	4a05      	ldr	r2, [pc, #20]	; (e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e6e4:	9b01      	ldr	r3, [sp, #4]
    e6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	d100      	bne.n	e6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6f0:	bf00      	nop
    e6f2:	b003      	add	sp, #12
    e6f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e6f8:	1fff9084 	.word	0x1fff9084
    e6fc:	1fff9080 	.word	0x1fff9080

0000e700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e700:	b500      	push	{lr}
    e702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e704:	f7f2 fa2a 	bl	b5c <Sys_GetCoreID>
    e708:	4603      	mov	r3, r0
    e70a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    e70c:	4a10      	ldr	r2, [pc, #64]	; (e750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e70e:	9b01      	ldr	r3, [sp, #4]
    e710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e714:	2b00      	cmp	r3, #0
    e716:	d10d      	bne.n	e734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e718:	f7f2 f93e 	bl	998 <Adc_schm_read_msr>
    e71c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e71e:	9b00      	ldr	r3, [sp, #0]
    e720:	f003 0301 	and.w	r3, r3, #1
    e724:	2b00      	cmp	r3, #0
    e726:	d100      	bne.n	e72a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    e72a:	490a      	ldr	r1, [pc, #40]	; (e754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	9a00      	ldr	r2, [sp, #0]
    e730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    e734:	4a06      	ldr	r2, [pc, #24]	; (e750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e736:	9b01      	ldr	r3, [sp, #4]
    e738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e73c:	1c5a      	adds	r2, r3, #1
    e73e:	4904      	ldr	r1, [pc, #16]	; (e750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e740:	9b01      	ldr	r3, [sp, #4]
    e742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e746:	bf00      	nop
    e748:	b003      	add	sp, #12
    e74a:	f85d fb04 	ldr.w	pc, [sp], #4
    e74e:	bf00      	nop
    e750:	1fff908c 	.word	0x1fff908c
    e754:	1fff9088 	.word	0x1fff9088

0000e758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e758:	b500      	push	{lr}
    e75a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e75c:	f7f2 f9fe 	bl	b5c <Sys_GetCoreID>
    e760:	4603      	mov	r3, r0
    e762:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    e764:	4a0d      	ldr	r2, [pc, #52]	; (e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e766:	9b01      	ldr	r3, [sp, #4]
    e768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e76c:	1e5a      	subs	r2, r3, #1
    e76e:	490b      	ldr	r1, [pc, #44]	; (e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e770:	9b01      	ldr	r3, [sp, #4]
    e772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    e776:	4a0a      	ldr	r2, [pc, #40]	; (e7a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    e778:	9b01      	ldr	r3, [sp, #4]
    e77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77e:	f003 0301 	and.w	r3, r3, #1
    e782:	2b00      	cmp	r3, #0
    e784:	d106      	bne.n	e794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    e786:	4a05      	ldr	r2, [pc, #20]	; (e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e788:	9b01      	ldr	r3, [sp, #4]
    e78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e78e:	2b00      	cmp	r3, #0
    e790:	d100      	bne.n	e794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e794:	bf00      	nop
    e796:	b003      	add	sp, #12
    e798:	f85d fb04 	ldr.w	pc, [sp], #4
    e79c:	1fff908c 	.word	0x1fff908c
    e7a0:	1fff9088 	.word	0x1fff9088

0000e7a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e7a4:	b500      	push	{lr}
    e7a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7a8:	f7f2 f9d8 	bl	b5c <Sys_GetCoreID>
    e7ac:	4603      	mov	r3, r0
    e7ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    e7b0:	4a10      	ldr	r2, [pc, #64]	; (e7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e7b2:	9b01      	ldr	r3, [sp, #4]
    e7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d10d      	bne.n	e7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7bc:	f7f2 f8ec 	bl	998 <Adc_schm_read_msr>
    e7c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7c2:	9b00      	ldr	r3, [sp, #0]
    e7c4:	f003 0301 	and.w	r3, r3, #1
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d100      	bne.n	e7ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    e7ce:	490a      	ldr	r1, [pc, #40]	; (e7f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    e7d0:	9b01      	ldr	r3, [sp, #4]
    e7d2:	9a00      	ldr	r2, [sp, #0]
    e7d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    e7d8:	4a06      	ldr	r2, [pc, #24]	; (e7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e7da:	9b01      	ldr	r3, [sp, #4]
    e7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7e0:	1c5a      	adds	r2, r3, #1
    e7e2:	4904      	ldr	r1, [pc, #16]	; (e7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e7e4:	9b01      	ldr	r3, [sp, #4]
    e7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7ea:	bf00      	nop
    e7ec:	b003      	add	sp, #12
    e7ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e7f2:	bf00      	nop
    e7f4:	1fff9094 	.word	0x1fff9094
    e7f8:	1fff9090 	.word	0x1fff9090

0000e7fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e7fc:	b500      	push	{lr}
    e7fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e800:	f7f2 f9ac 	bl	b5c <Sys_GetCoreID>
    e804:	4603      	mov	r3, r0
    e806:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    e808:	4a0d      	ldr	r2, [pc, #52]	; (e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e80a:	9b01      	ldr	r3, [sp, #4]
    e80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e810:	1e5a      	subs	r2, r3, #1
    e812:	490b      	ldr	r1, [pc, #44]	; (e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e814:	9b01      	ldr	r3, [sp, #4]
    e816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    e81a:	4a0a      	ldr	r2, [pc, #40]	; (e844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    e81c:	9b01      	ldr	r3, [sp, #4]
    e81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e822:	f003 0301 	and.w	r3, r3, #1
    e826:	2b00      	cmp	r3, #0
    e828:	d106      	bne.n	e838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    e82a:	4a05      	ldr	r2, [pc, #20]	; (e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e82c:	9b01      	ldr	r3, [sp, #4]
    e82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e832:	2b00      	cmp	r3, #0
    e834:	d100      	bne.n	e838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e838:	bf00      	nop
    e83a:	b003      	add	sp, #12
    e83c:	f85d fb04 	ldr.w	pc, [sp], #4
    e840:	1fff9094 	.word	0x1fff9094
    e844:	1fff9090 	.word	0x1fff9090

0000e848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e848:	b500      	push	{lr}
    e84a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e84c:	f7f2 f986 	bl	b5c <Sys_GetCoreID>
    e850:	4603      	mov	r3, r0
    e852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    e854:	4a10      	ldr	r2, [pc, #64]	; (e898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e856:	9b01      	ldr	r3, [sp, #4]
    e858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e85c:	2b00      	cmp	r3, #0
    e85e:	d10d      	bne.n	e87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e860:	f7f2 f89a 	bl	998 <Adc_schm_read_msr>
    e864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e866:	9b00      	ldr	r3, [sp, #0]
    e868:	f003 0301 	and.w	r3, r3, #1
    e86c:	2b00      	cmp	r3, #0
    e86e:	d100      	bne.n	e872 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    e872:	490a      	ldr	r1, [pc, #40]	; (e89c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    e874:	9b01      	ldr	r3, [sp, #4]
    e876:	9a00      	ldr	r2, [sp, #0]
    e878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    e87c:	4a06      	ldr	r2, [pc, #24]	; (e898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e87e:	9b01      	ldr	r3, [sp, #4]
    e880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e884:	1c5a      	adds	r2, r3, #1
    e886:	4904      	ldr	r1, [pc, #16]	; (e898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e888:	9b01      	ldr	r3, [sp, #4]
    e88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e88e:	bf00      	nop
    e890:	b003      	add	sp, #12
    e892:	f85d fb04 	ldr.w	pc, [sp], #4
    e896:	bf00      	nop
    e898:	1fff909c 	.word	0x1fff909c
    e89c:	1fff9098 	.word	0x1fff9098

0000e8a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e8a0:	b500      	push	{lr}
    e8a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8a4:	f7f2 f95a 	bl	b5c <Sys_GetCoreID>
    e8a8:	4603      	mov	r3, r0
    e8aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    e8ac:	4a0d      	ldr	r2, [pc, #52]	; (e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e8ae:	9b01      	ldr	r3, [sp, #4]
    e8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b4:	1e5a      	subs	r2, r3, #1
    e8b6:	490b      	ldr	r1, [pc, #44]	; (e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e8b8:	9b01      	ldr	r3, [sp, #4]
    e8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    e8be:	4a0a      	ldr	r2, [pc, #40]	; (e8e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    e8c0:	9b01      	ldr	r3, [sp, #4]
    e8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c6:	f003 0301 	and.w	r3, r3, #1
    e8ca:	2b00      	cmp	r3, #0
    e8cc:	d106      	bne.n	e8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    e8ce:	4a05      	ldr	r2, [pc, #20]	; (e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e8d0:	9b01      	ldr	r3, [sp, #4]
    e8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	d100      	bne.n	e8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8dc:	bf00      	nop
    e8de:	b003      	add	sp, #12
    e8e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e8e4:	1fff909c 	.word	0x1fff909c
    e8e8:	1fff9098 	.word	0x1fff9098

0000e8ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e8ec:	b500      	push	{lr}
    e8ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8f0:	f7f2 f934 	bl	b5c <Sys_GetCoreID>
    e8f4:	4603      	mov	r3, r0
    e8f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    e8f8:	4a10      	ldr	r2, [pc, #64]	; (e93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e8fa:	9b01      	ldr	r3, [sp, #4]
    e8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e900:	2b00      	cmp	r3, #0
    e902:	d10d      	bne.n	e920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e904:	f7f2 f848 	bl	998 <Adc_schm_read_msr>
    e908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e90a:	9b00      	ldr	r3, [sp, #0]
    e90c:	f003 0301 	and.w	r3, r3, #1
    e910:	2b00      	cmp	r3, #0
    e912:	d100      	bne.n	e916 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    e916:	490a      	ldr	r1, [pc, #40]	; (e940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	9a00      	ldr	r2, [sp, #0]
    e91c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    e920:	4a06      	ldr	r2, [pc, #24]	; (e93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e922:	9b01      	ldr	r3, [sp, #4]
    e924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e928:	1c5a      	adds	r2, r3, #1
    e92a:	4904      	ldr	r1, [pc, #16]	; (e93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e92c:	9b01      	ldr	r3, [sp, #4]
    e92e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e932:	bf00      	nop
    e934:	b003      	add	sp, #12
    e936:	f85d fb04 	ldr.w	pc, [sp], #4
    e93a:	bf00      	nop
    e93c:	1fff90a4 	.word	0x1fff90a4
    e940:	1fff90a0 	.word	0x1fff90a0

0000e944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e944:	b500      	push	{lr}
    e946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e948:	f7f2 f908 	bl	b5c <Sys_GetCoreID>
    e94c:	4603      	mov	r3, r0
    e94e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    e950:	4a0d      	ldr	r2, [pc, #52]	; (e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e952:	9b01      	ldr	r3, [sp, #4]
    e954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e958:	1e5a      	subs	r2, r3, #1
    e95a:	490b      	ldr	r1, [pc, #44]	; (e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e95c:	9b01      	ldr	r3, [sp, #4]
    e95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    e962:	4a0a      	ldr	r2, [pc, #40]	; (e98c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    e964:	9b01      	ldr	r3, [sp, #4]
    e966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e96a:	f003 0301 	and.w	r3, r3, #1
    e96e:	2b00      	cmp	r3, #0
    e970:	d106      	bne.n	e980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    e972:	4a05      	ldr	r2, [pc, #20]	; (e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e974:	9b01      	ldr	r3, [sp, #4]
    e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e97a:	2b00      	cmp	r3, #0
    e97c:	d100      	bne.n	e980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e97e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e980:	bf00      	nop
    e982:	b003      	add	sp, #12
    e984:	f85d fb04 	ldr.w	pc, [sp], #4
    e988:	1fff90a4 	.word	0x1fff90a4
    e98c:	1fff90a0 	.word	0x1fff90a0

0000e990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e990:	b500      	push	{lr}
    e992:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e994:	f7f2 f8e2 	bl	b5c <Sys_GetCoreID>
    e998:	4603      	mov	r3, r0
    e99a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    e99c:	4a10      	ldr	r2, [pc, #64]	; (e9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e99e:	9b01      	ldr	r3, [sp, #4]
    e9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d10d      	bne.n	e9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9a8:	f7f1 fff6 	bl	998 <Adc_schm_read_msr>
    e9ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ae:	9b00      	ldr	r3, [sp, #0]
    e9b0:	f003 0301 	and.w	r3, r3, #1
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d100      	bne.n	e9ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    e9ba:	490a      	ldr	r1, [pc, #40]	; (e9e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    e9bc:	9b01      	ldr	r3, [sp, #4]
    e9be:	9a00      	ldr	r2, [sp, #0]
    e9c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    e9c4:	4a06      	ldr	r2, [pc, #24]	; (e9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e9c6:	9b01      	ldr	r3, [sp, #4]
    e9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9cc:	1c5a      	adds	r2, r3, #1
    e9ce:	4904      	ldr	r1, [pc, #16]	; (e9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e9d0:	9b01      	ldr	r3, [sp, #4]
    e9d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9d6:	bf00      	nop
    e9d8:	b003      	add	sp, #12
    e9da:	f85d fb04 	ldr.w	pc, [sp], #4
    e9de:	bf00      	nop
    e9e0:	1fff90ac 	.word	0x1fff90ac
    e9e4:	1fff90a8 	.word	0x1fff90a8

0000e9e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e9e8:	b500      	push	{lr}
    e9ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9ec:	f7f2 f8b6 	bl	b5c <Sys_GetCoreID>
    e9f0:	4603      	mov	r3, r0
    e9f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    e9f4:	4a0d      	ldr	r2, [pc, #52]	; (ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e9f6:	9b01      	ldr	r3, [sp, #4]
    e9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9fc:	1e5a      	subs	r2, r3, #1
    e9fe:	490b      	ldr	r1, [pc, #44]	; (ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    ea00:	9b01      	ldr	r3, [sp, #4]
    ea02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    ea06:	4a0a      	ldr	r2, [pc, #40]	; (ea30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    ea08:	9b01      	ldr	r3, [sp, #4]
    ea0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0e:	f003 0301 	and.w	r3, r3, #1
    ea12:	2b00      	cmp	r3, #0
    ea14:	d106      	bne.n	ea24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    ea16:	4a05      	ldr	r2, [pc, #20]	; (ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    ea18:	9b01      	ldr	r3, [sp, #4]
    ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea1e:	2b00      	cmp	r3, #0
    ea20:	d100      	bne.n	ea24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea24:	bf00      	nop
    ea26:	b003      	add	sp, #12
    ea28:	f85d fb04 	ldr.w	pc, [sp], #4
    ea2c:	1fff90ac 	.word	0x1fff90ac
    ea30:	1fff90a8 	.word	0x1fff90a8

0000ea34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    ea34:	b500      	push	{lr}
    ea36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea38:	f7f2 f890 	bl	b5c <Sys_GetCoreID>
    ea3c:	4603      	mov	r3, r0
    ea3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    ea40:	4a10      	ldr	r2, [pc, #64]	; (ea84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    ea42:	9b01      	ldr	r3, [sp, #4]
    ea44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea48:	2b00      	cmp	r3, #0
    ea4a:	d10d      	bne.n	ea68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea4c:	f7f1 ffa4 	bl	998 <Adc_schm_read_msr>
    ea50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea52:	9b00      	ldr	r3, [sp, #0]
    ea54:	f003 0301 	and.w	r3, r3, #1
    ea58:	2b00      	cmp	r3, #0
    ea5a:	d100      	bne.n	ea5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    ea5e:	490a      	ldr	r1, [pc, #40]	; (ea88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	9a00      	ldr	r2, [sp, #0]
    ea64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    ea68:	4a06      	ldr	r2, [pc, #24]	; (ea84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    ea6a:	9b01      	ldr	r3, [sp, #4]
    ea6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea70:	1c5a      	adds	r2, r3, #1
    ea72:	4904      	ldr	r1, [pc, #16]	; (ea84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    ea74:	9b01      	ldr	r3, [sp, #4]
    ea76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea7a:	bf00      	nop
    ea7c:	b003      	add	sp, #12
    ea7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea82:	bf00      	nop
    ea84:	1fff90b4 	.word	0x1fff90b4
    ea88:	1fff90b0 	.word	0x1fff90b0

0000ea8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    ea8c:	b500      	push	{lr}
    ea8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea90:	f7f2 f864 	bl	b5c <Sys_GetCoreID>
    ea94:	4603      	mov	r3, r0
    ea96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    ea98:	4a0d      	ldr	r2, [pc, #52]	; (ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    ea9a:	9b01      	ldr	r3, [sp, #4]
    ea9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaa0:	1e5a      	subs	r2, r3, #1
    eaa2:	490b      	ldr	r1, [pc, #44]	; (ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eaa4:	9b01      	ldr	r3, [sp, #4]
    eaa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    eaaa:	4a0a      	ldr	r2, [pc, #40]	; (ead4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    eaac:	9b01      	ldr	r3, [sp, #4]
    eaae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eab2:	f003 0301 	and.w	r3, r3, #1
    eab6:	2b00      	cmp	r3, #0
    eab8:	d106      	bne.n	eac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    eaba:	4a05      	ldr	r2, [pc, #20]	; (ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eabc:	9b01      	ldr	r3, [sp, #4]
    eabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d100      	bne.n	eac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eac6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eac8:	bf00      	nop
    eaca:	b003      	add	sp, #12
    eacc:	f85d fb04 	ldr.w	pc, [sp], #4
    ead0:	1fff90b4 	.word	0x1fff90b4
    ead4:	1fff90b0 	.word	0x1fff90b0

0000ead8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ead8:	b500      	push	{lr}
    eada:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eadc:	f7f2 f83e 	bl	b5c <Sys_GetCoreID>
    eae0:	4603      	mov	r3, r0
    eae2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    eae4:	4a10      	ldr	r2, [pc, #64]	; (eb28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    eae6:	9b01      	ldr	r3, [sp, #4]
    eae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaec:	2b00      	cmp	r3, #0
    eaee:	d10d      	bne.n	eb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eaf0:	f7f1 ff52 	bl	998 <Adc_schm_read_msr>
    eaf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eaf6:	9b00      	ldr	r3, [sp, #0]
    eaf8:	f003 0301 	and.w	r3, r3, #1
    eafc:	2b00      	cmp	r3, #0
    eafe:	d100      	bne.n	eb02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    eb02:	490a      	ldr	r1, [pc, #40]	; (eb2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	9a00      	ldr	r2, [sp, #0]
    eb08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    eb0c:	4a06      	ldr	r2, [pc, #24]	; (eb28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    eb0e:	9b01      	ldr	r3, [sp, #4]
    eb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb14:	1c5a      	adds	r2, r3, #1
    eb16:	4904      	ldr	r1, [pc, #16]	; (eb28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    eb18:	9b01      	ldr	r3, [sp, #4]
    eb1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb1e:	bf00      	nop
    eb20:	b003      	add	sp, #12
    eb22:	f85d fb04 	ldr.w	pc, [sp], #4
    eb26:	bf00      	nop
    eb28:	1fff90bc 	.word	0x1fff90bc
    eb2c:	1fff90b8 	.word	0x1fff90b8

0000eb30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    eb30:	b500      	push	{lr}
    eb32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb34:	f7f2 f812 	bl	b5c <Sys_GetCoreID>
    eb38:	4603      	mov	r3, r0
    eb3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    eb3c:	4a0d      	ldr	r2, [pc, #52]	; (eb74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    eb3e:	9b01      	ldr	r3, [sp, #4]
    eb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb44:	1e5a      	subs	r2, r3, #1
    eb46:	490b      	ldr	r1, [pc, #44]	; (eb74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    eb48:	9b01      	ldr	r3, [sp, #4]
    eb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    eb4e:	4a0a      	ldr	r2, [pc, #40]	; (eb78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    eb50:	9b01      	ldr	r3, [sp, #4]
    eb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb56:	f003 0301 	and.w	r3, r3, #1
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	d106      	bne.n	eb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    eb5e:	4a05      	ldr	r2, [pc, #20]	; (eb74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    eb60:	9b01      	ldr	r3, [sp, #4]
    eb62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb66:	2b00      	cmp	r3, #0
    eb68:	d100      	bne.n	eb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb6c:	bf00      	nop
    eb6e:	b003      	add	sp, #12
    eb70:	f85d fb04 	ldr.w	pc, [sp], #4
    eb74:	1fff90bc 	.word	0x1fff90bc
    eb78:	1fff90b8 	.word	0x1fff90b8

0000eb7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    eb7c:	b500      	push	{lr}
    eb7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb80:	f7f1 ffec 	bl	b5c <Sys_GetCoreID>
    eb84:	4603      	mov	r3, r0
    eb86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    eb88:	4a10      	ldr	r2, [pc, #64]	; (ebcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    eb8a:	9b01      	ldr	r3, [sp, #4]
    eb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb90:	2b00      	cmp	r3, #0
    eb92:	d10d      	bne.n	ebb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb94:	f7f1 ff00 	bl	998 <Adc_schm_read_msr>
    eb98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb9a:	9b00      	ldr	r3, [sp, #0]
    eb9c:	f003 0301 	and.w	r3, r3, #1
    eba0:	2b00      	cmp	r3, #0
    eba2:	d100      	bne.n	eba6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eba4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    eba6:	490a      	ldr	r1, [pc, #40]	; (ebd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	9a00      	ldr	r2, [sp, #0]
    ebac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    ebb0:	4a06      	ldr	r2, [pc, #24]	; (ebcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ebb2:	9b01      	ldr	r3, [sp, #4]
    ebb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebb8:	1c5a      	adds	r2, r3, #1
    ebba:	4904      	ldr	r1, [pc, #16]	; (ebcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ebbc:	9b01      	ldr	r3, [sp, #4]
    ebbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebc2:	bf00      	nop
    ebc4:	b003      	add	sp, #12
    ebc6:	f85d fb04 	ldr.w	pc, [sp], #4
    ebca:	bf00      	nop
    ebcc:	1fff90c4 	.word	0x1fff90c4
    ebd0:	1fff90c0 	.word	0x1fff90c0

0000ebd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    ebd4:	b500      	push	{lr}
    ebd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebd8:	f7f1 ffc0 	bl	b5c <Sys_GetCoreID>
    ebdc:	4603      	mov	r3, r0
    ebde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    ebe0:	4a0d      	ldr	r2, [pc, #52]	; (ec18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ebe2:	9b01      	ldr	r3, [sp, #4]
    ebe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe8:	1e5a      	subs	r2, r3, #1
    ebea:	490b      	ldr	r1, [pc, #44]	; (ec18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ebec:	9b01      	ldr	r3, [sp, #4]
    ebee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    ebf2:	4a0a      	ldr	r2, [pc, #40]	; (ec1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    ebf4:	9b01      	ldr	r3, [sp, #4]
    ebf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebfa:	f003 0301 	and.w	r3, r3, #1
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d106      	bne.n	ec10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    ec02:	4a05      	ldr	r2, [pc, #20]	; (ec18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ec04:	9b01      	ldr	r3, [sp, #4]
    ec06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d100      	bne.n	ec10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec10:	bf00      	nop
    ec12:	b003      	add	sp, #12
    ec14:	f85d fb04 	ldr.w	pc, [sp], #4
    ec18:	1fff90c4 	.word	0x1fff90c4
    ec1c:	1fff90c0 	.word	0x1fff90c0

0000ec20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ec20:	b500      	push	{lr}
    ec22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec24:	f7f1 ff9a 	bl	b5c <Sys_GetCoreID>
    ec28:	4603      	mov	r3, r0
    ec2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    ec2c:	4a10      	ldr	r2, [pc, #64]	; (ec70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ec2e:	9b01      	ldr	r3, [sp, #4]
    ec30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec34:	2b00      	cmp	r3, #0
    ec36:	d10d      	bne.n	ec54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec38:	f7f1 feae 	bl	998 <Adc_schm_read_msr>
    ec3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec3e:	9b00      	ldr	r3, [sp, #0]
    ec40:	f003 0301 	and.w	r3, r3, #1
    ec44:	2b00      	cmp	r3, #0
    ec46:	d100      	bne.n	ec4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    ec4a:	490a      	ldr	r1, [pc, #40]	; (ec74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    ec4c:	9b01      	ldr	r3, [sp, #4]
    ec4e:	9a00      	ldr	r2, [sp, #0]
    ec50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    ec54:	4a06      	ldr	r2, [pc, #24]	; (ec70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ec56:	9b01      	ldr	r3, [sp, #4]
    ec58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec5c:	1c5a      	adds	r2, r3, #1
    ec5e:	4904      	ldr	r1, [pc, #16]	; (ec70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ec60:	9b01      	ldr	r3, [sp, #4]
    ec62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec66:	bf00      	nop
    ec68:	b003      	add	sp, #12
    ec6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ec6e:	bf00      	nop
    ec70:	1fff90cc 	.word	0x1fff90cc
    ec74:	1fff90c8 	.word	0x1fff90c8

0000ec78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ec78:	b500      	push	{lr}
    ec7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec7c:	f7f1 ff6e 	bl	b5c <Sys_GetCoreID>
    ec80:	4603      	mov	r3, r0
    ec82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    ec84:	4a0d      	ldr	r2, [pc, #52]	; (ecbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ec86:	9b01      	ldr	r3, [sp, #4]
    ec88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec8c:	1e5a      	subs	r2, r3, #1
    ec8e:	490b      	ldr	r1, [pc, #44]	; (ecbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ec90:	9b01      	ldr	r3, [sp, #4]
    ec92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    ec96:	4a0a      	ldr	r2, [pc, #40]	; (ecc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    ec98:	9b01      	ldr	r3, [sp, #4]
    ec9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9e:	f003 0301 	and.w	r3, r3, #1
    eca2:	2b00      	cmp	r3, #0
    eca4:	d106      	bne.n	ecb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    eca6:	4a05      	ldr	r2, [pc, #20]	; (ecbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eca8:	9b01      	ldr	r3, [sp, #4]
    ecaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecae:	2b00      	cmp	r3, #0
    ecb0:	d100      	bne.n	ecb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecb4:	bf00      	nop
    ecb6:	b003      	add	sp, #12
    ecb8:	f85d fb04 	ldr.w	pc, [sp], #4
    ecbc:	1fff90cc 	.word	0x1fff90cc
    ecc0:	1fff90c8 	.word	0x1fff90c8

0000ecc4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    ecc4:	b500      	push	{lr}
    ecc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecc8:	f7f1 ff48 	bl	b5c <Sys_GetCoreID>
    eccc:	4603      	mov	r3, r0
    ecce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    ecd0:	4a10      	ldr	r2, [pc, #64]	; (ed14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ecd2:	9b01      	ldr	r3, [sp, #4]
    ecd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d10d      	bne.n	ecf8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecdc:	f7f1 fe65 	bl	9aa <Mcu_schm_read_msr>
    ece0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ece2:	9b00      	ldr	r3, [sp, #0]
    ece4:	f003 0301 	and.w	r3, r3, #1
    ece8:	2b00      	cmp	r3, #0
    ecea:	d100      	bne.n	ecee <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ecec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ecee:	490a      	ldr	r1, [pc, #40]	; (ed18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	9a00      	ldr	r2, [sp, #0]
    ecf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    ecf8:	4a06      	ldr	r2, [pc, #24]	; (ed14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ecfa:	9b01      	ldr	r3, [sp, #4]
    ecfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed00:	1c5a      	adds	r2, r3, #1
    ed02:	4904      	ldr	r1, [pc, #16]	; (ed14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ed04:	9b01      	ldr	r3, [sp, #4]
    ed06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed0a:	bf00      	nop
    ed0c:	b003      	add	sp, #12
    ed0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed12:	bf00      	nop
    ed14:	1fff90d4 	.word	0x1fff90d4
    ed18:	1fff90d0 	.word	0x1fff90d0

0000ed1c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    ed1c:	b500      	push	{lr}
    ed1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed20:	f7f1 ff1c 	bl	b5c <Sys_GetCoreID>
    ed24:	4603      	mov	r3, r0
    ed26:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    ed28:	4a0d      	ldr	r2, [pc, #52]	; (ed60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ed2a:	9b01      	ldr	r3, [sp, #4]
    ed2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed30:	1e5a      	subs	r2, r3, #1
    ed32:	490b      	ldr	r1, [pc, #44]	; (ed60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ed34:	9b01      	ldr	r3, [sp, #4]
    ed36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ed3a:	4a0a      	ldr	r2, [pc, #40]	; (ed64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    ed3c:	9b01      	ldr	r3, [sp, #4]
    ed3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed42:	f003 0301 	and.w	r3, r3, #1
    ed46:	2b00      	cmp	r3, #0
    ed48:	d106      	bne.n	ed58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    ed4a:	4a05      	ldr	r2, [pc, #20]	; (ed60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ed4c:	9b01      	ldr	r3, [sp, #4]
    ed4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed52:	2b00      	cmp	r3, #0
    ed54:	d100      	bne.n	ed58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed58:	bf00      	nop
    ed5a:	b003      	add	sp, #12
    ed5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ed60:	1fff90d4 	.word	0x1fff90d4
    ed64:	1fff90d0 	.word	0x1fff90d0

0000ed68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ed68:	b500      	push	{lr}
    ed6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed6c:	f7f1 fef6 	bl	b5c <Sys_GetCoreID>
    ed70:	4603      	mov	r3, r0
    ed72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    ed74:	4a10      	ldr	r2, [pc, #64]	; (edb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ed76:	9b01      	ldr	r3, [sp, #4]
    ed78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	d10d      	bne.n	ed9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed80:	f7f1 fe13 	bl	9aa <Mcu_schm_read_msr>
    ed84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed86:	9b00      	ldr	r3, [sp, #0]
    ed88:	f003 0301 	and.w	r3, r3, #1
    ed8c:	2b00      	cmp	r3, #0
    ed8e:	d100      	bne.n	ed92 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ed92:	490a      	ldr	r1, [pc, #40]	; (edbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    ed94:	9b01      	ldr	r3, [sp, #4]
    ed96:	9a00      	ldr	r2, [sp, #0]
    ed98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    ed9c:	4a06      	ldr	r2, [pc, #24]	; (edb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ed9e:	9b01      	ldr	r3, [sp, #4]
    eda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eda4:	1c5a      	adds	r2, r3, #1
    eda6:	4904      	ldr	r1, [pc, #16]	; (edb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    eda8:	9b01      	ldr	r3, [sp, #4]
    edaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edae:	bf00      	nop
    edb0:	b003      	add	sp, #12
    edb2:	f85d fb04 	ldr.w	pc, [sp], #4
    edb6:	bf00      	nop
    edb8:	1fff90dc 	.word	0x1fff90dc
    edbc:	1fff90d8 	.word	0x1fff90d8

0000edc0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    edc0:	b500      	push	{lr}
    edc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edc4:	f7f1 feca 	bl	b5c <Sys_GetCoreID>
    edc8:	4603      	mov	r3, r0
    edca:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    edcc:	4a0d      	ldr	r2, [pc, #52]	; (ee04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    edce:	9b01      	ldr	r3, [sp, #4]
    edd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd4:	1e5a      	subs	r2, r3, #1
    edd6:	490b      	ldr	r1, [pc, #44]	; (ee04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    edd8:	9b01      	ldr	r3, [sp, #4]
    edda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    edde:	4a0a      	ldr	r2, [pc, #40]	; (ee08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    ede0:	9b01      	ldr	r3, [sp, #4]
    ede2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede6:	f003 0301 	and.w	r3, r3, #1
    edea:	2b00      	cmp	r3, #0
    edec:	d106      	bne.n	edfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    edee:	4a05      	ldr	r2, [pc, #20]	; (ee04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    edf0:	9b01      	ldr	r3, [sp, #4]
    edf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edf6:	2b00      	cmp	r3, #0
    edf8:	d100      	bne.n	edfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    edfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    edfc:	bf00      	nop
    edfe:	b003      	add	sp, #12
    ee00:	f85d fb04 	ldr.w	pc, [sp], #4
    ee04:	1fff90dc 	.word	0x1fff90dc
    ee08:	1fff90d8 	.word	0x1fff90d8

0000ee0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ee0c:	b500      	push	{lr}
    ee0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee10:	f7f1 fea4 	bl	b5c <Sys_GetCoreID>
    ee14:	4603      	mov	r3, r0
    ee16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    ee18:	4a10      	ldr	r2, [pc, #64]	; (ee5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ee1a:	9b01      	ldr	r3, [sp, #4]
    ee1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d10d      	bne.n	ee40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee24:	f7f1 fdc1 	bl	9aa <Mcu_schm_read_msr>
    ee28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee2a:	9b00      	ldr	r3, [sp, #0]
    ee2c:	f003 0301 	and.w	r3, r3, #1
    ee30:	2b00      	cmp	r3, #0
    ee32:	d100      	bne.n	ee36 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ee36:	490a      	ldr	r1, [pc, #40]	; (ee60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    ee38:	9b01      	ldr	r3, [sp, #4]
    ee3a:	9a00      	ldr	r2, [sp, #0]
    ee3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    ee40:	4a06      	ldr	r2, [pc, #24]	; (ee5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ee42:	9b01      	ldr	r3, [sp, #4]
    ee44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee48:	1c5a      	adds	r2, r3, #1
    ee4a:	4904      	ldr	r1, [pc, #16]	; (ee5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ee4c:	9b01      	ldr	r3, [sp, #4]
    ee4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee52:	bf00      	nop
    ee54:	b003      	add	sp, #12
    ee56:	f85d fb04 	ldr.w	pc, [sp], #4
    ee5a:	bf00      	nop
    ee5c:	1fff90e4 	.word	0x1fff90e4
    ee60:	1fff90e0 	.word	0x1fff90e0

0000ee64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ee64:	b500      	push	{lr}
    ee66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee68:	f7f1 fe78 	bl	b5c <Sys_GetCoreID>
    ee6c:	4603      	mov	r3, r0
    ee6e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    ee70:	4a0d      	ldr	r2, [pc, #52]	; (eea8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ee72:	9b01      	ldr	r3, [sp, #4]
    ee74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee78:	1e5a      	subs	r2, r3, #1
    ee7a:	490b      	ldr	r1, [pc, #44]	; (eea8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ee7c:	9b01      	ldr	r3, [sp, #4]
    ee7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ee82:	4a0a      	ldr	r2, [pc, #40]	; (eeac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    ee84:	9b01      	ldr	r3, [sp, #4]
    ee86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee8a:	f003 0301 	and.w	r3, r3, #1
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d106      	bne.n	eea0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    ee92:	4a05      	ldr	r2, [pc, #20]	; (eea8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ee94:	9b01      	ldr	r3, [sp, #4]
    ee96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d100      	bne.n	eea0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eea0:	bf00      	nop
    eea2:	b003      	add	sp, #12
    eea4:	f85d fb04 	ldr.w	pc, [sp], #4
    eea8:	1fff90e4 	.word	0x1fff90e4
    eeac:	1fff90e0 	.word	0x1fff90e0

0000eeb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    eeb0:	b500      	push	{lr}
    eeb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eeb4:	f7f1 fe52 	bl	b5c <Sys_GetCoreID>
    eeb8:	4603      	mov	r3, r0
    eeba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    eebc:	4a10      	ldr	r2, [pc, #64]	; (ef00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    eebe:	9b01      	ldr	r3, [sp, #4]
    eec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec4:	2b00      	cmp	r3, #0
    eec6:	d10d      	bne.n	eee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eec8:	f7f1 fd78 	bl	9bc <Port_schm_read_msr>
    eecc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eece:	9b00      	ldr	r3, [sp, #0]
    eed0:	f003 0301 	and.w	r3, r3, #1
    eed4:	2b00      	cmp	r3, #0
    eed6:	d100      	bne.n	eeda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eed8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    eeda:	490a      	ldr	r1, [pc, #40]	; (ef04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    eedc:	9b01      	ldr	r3, [sp, #4]
    eede:	9a00      	ldr	r2, [sp, #0]
    eee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    eee4:	4a06      	ldr	r2, [pc, #24]	; (ef00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    eee6:	9b01      	ldr	r3, [sp, #4]
    eee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeec:	1c5a      	adds	r2, r3, #1
    eeee:	4904      	ldr	r1, [pc, #16]	; (ef00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    eef0:	9b01      	ldr	r3, [sp, #4]
    eef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eef6:	bf00      	nop
    eef8:	b003      	add	sp, #12
    eefa:	f85d fb04 	ldr.w	pc, [sp], #4
    eefe:	bf00      	nop
    ef00:	1fff90ec 	.word	0x1fff90ec
    ef04:	1fff90e8 	.word	0x1fff90e8

0000ef08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ef08:	b500      	push	{lr}
    ef0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef0c:	f7f1 fe26 	bl	b5c <Sys_GetCoreID>
    ef10:	4603      	mov	r3, r0
    ef12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    ef14:	4a0d      	ldr	r2, [pc, #52]	; (ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ef16:	9b01      	ldr	r3, [sp, #4]
    ef18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef1c:	1e5a      	subs	r2, r3, #1
    ef1e:	490b      	ldr	r1, [pc, #44]	; (ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ef20:	9b01      	ldr	r3, [sp, #4]
    ef22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ef26:	4a0a      	ldr	r2, [pc, #40]	; (ef50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    ef28:	9b01      	ldr	r3, [sp, #4]
    ef2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2e:	f003 0301 	and.w	r3, r3, #1
    ef32:	2b00      	cmp	r3, #0
    ef34:	d106      	bne.n	ef44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    ef36:	4a05      	ldr	r2, [pc, #20]	; (ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ef38:	9b01      	ldr	r3, [sp, #4]
    ef3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d100      	bne.n	ef44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef44:	bf00      	nop
    ef46:	b003      	add	sp, #12
    ef48:	f85d fb04 	ldr.w	pc, [sp], #4
    ef4c:	1fff90ec 	.word	0x1fff90ec
    ef50:	1fff90e8 	.word	0x1fff90e8

0000ef54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ef54:	b500      	push	{lr}
    ef56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef58:	f7f1 fe00 	bl	b5c <Sys_GetCoreID>
    ef5c:	4603      	mov	r3, r0
    ef5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    ef60:	4a10      	ldr	r2, [pc, #64]	; (efa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ef62:	9b01      	ldr	r3, [sp, #4]
    ef64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef68:	2b00      	cmp	r3, #0
    ef6a:	d10d      	bne.n	ef88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef6c:	f7f1 fd26 	bl	9bc <Port_schm_read_msr>
    ef70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef72:	9b00      	ldr	r3, [sp, #0]
    ef74:	f003 0301 	and.w	r3, r3, #1
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d100      	bne.n	ef7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ef7e:	490a      	ldr	r1, [pc, #40]	; (efa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    ef80:	9b01      	ldr	r3, [sp, #4]
    ef82:	9a00      	ldr	r2, [sp, #0]
    ef84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    ef88:	4a06      	ldr	r2, [pc, #24]	; (efa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ef8a:	9b01      	ldr	r3, [sp, #4]
    ef8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef90:	1c5a      	adds	r2, r3, #1
    ef92:	4904      	ldr	r1, [pc, #16]	; (efa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ef94:	9b01      	ldr	r3, [sp, #4]
    ef96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef9a:	bf00      	nop
    ef9c:	b003      	add	sp, #12
    ef9e:	f85d fb04 	ldr.w	pc, [sp], #4
    efa2:	bf00      	nop
    efa4:	1fff90f4 	.word	0x1fff90f4
    efa8:	1fff90f0 	.word	0x1fff90f0

0000efac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    efac:	b500      	push	{lr}
    efae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efb0:	f7f1 fdd4 	bl	b5c <Sys_GetCoreID>
    efb4:	4603      	mov	r3, r0
    efb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    efb8:	4a0d      	ldr	r2, [pc, #52]	; (eff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    efba:	9b01      	ldr	r3, [sp, #4]
    efbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efc0:	1e5a      	subs	r2, r3, #1
    efc2:	490b      	ldr	r1, [pc, #44]	; (eff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    efc4:	9b01      	ldr	r3, [sp, #4]
    efc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    efca:	4a0a      	ldr	r2, [pc, #40]	; (eff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    efcc:	9b01      	ldr	r3, [sp, #4]
    efce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efd2:	f003 0301 	and.w	r3, r3, #1
    efd6:	2b00      	cmp	r3, #0
    efd8:	d106      	bne.n	efe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    efda:	4a05      	ldr	r2, [pc, #20]	; (eff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    efdc:	9b01      	ldr	r3, [sp, #4]
    efde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efe2:	2b00      	cmp	r3, #0
    efe4:	d100      	bne.n	efe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efe8:	bf00      	nop
    efea:	b003      	add	sp, #12
    efec:	f85d fb04 	ldr.w	pc, [sp], #4
    eff0:	1fff90f4 	.word	0x1fff90f4
    eff4:	1fff90f0 	.word	0x1fff90f0

0000eff8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    eff8:	b500      	push	{lr}
    effa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    effc:	f7f1 fdae 	bl	b5c <Sys_GetCoreID>
    f000:	4603      	mov	r3, r0
    f002:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    f004:	4a10      	ldr	r2, [pc, #64]	; (f048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f006:	9b01      	ldr	r3, [sp, #4]
    f008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f00c:	2b00      	cmp	r3, #0
    f00e:	d10d      	bne.n	f02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f010:	f7f1 fcd4 	bl	9bc <Port_schm_read_msr>
    f014:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f016:	9b00      	ldr	r3, [sp, #0]
    f018:	f003 0301 	and.w	r3, r3, #1
    f01c:	2b00      	cmp	r3, #0
    f01e:	d100      	bne.n	f022 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f020:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f022:	490a      	ldr	r1, [pc, #40]	; (f04c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    f024:	9b01      	ldr	r3, [sp, #4]
    f026:	9a00      	ldr	r2, [sp, #0]
    f028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    f02c:	4a06      	ldr	r2, [pc, #24]	; (f048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f02e:	9b01      	ldr	r3, [sp, #4]
    f030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f034:	1c5a      	adds	r2, r3, #1
    f036:	4904      	ldr	r1, [pc, #16]	; (f048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f038:	9b01      	ldr	r3, [sp, #4]
    f03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f03e:	bf00      	nop
    f040:	b003      	add	sp, #12
    f042:	f85d fb04 	ldr.w	pc, [sp], #4
    f046:	bf00      	nop
    f048:	1fff90fc 	.word	0x1fff90fc
    f04c:	1fff90f8 	.word	0x1fff90f8

0000f050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f050:	b500      	push	{lr}
    f052:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f054:	f7f1 fd82 	bl	b5c <Sys_GetCoreID>
    f058:	4603      	mov	r3, r0
    f05a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    f05c:	4a0d      	ldr	r2, [pc, #52]	; (f094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f05e:	9b01      	ldr	r3, [sp, #4]
    f060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f064:	1e5a      	subs	r2, r3, #1
    f066:	490b      	ldr	r1, [pc, #44]	; (f094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f068:	9b01      	ldr	r3, [sp, #4]
    f06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f06e:	4a0a      	ldr	r2, [pc, #40]	; (f098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    f070:	9b01      	ldr	r3, [sp, #4]
    f072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f076:	f003 0301 	and.w	r3, r3, #1
    f07a:	2b00      	cmp	r3, #0
    f07c:	d106      	bne.n	f08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    f07e:	4a05      	ldr	r2, [pc, #20]	; (f094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f080:	9b01      	ldr	r3, [sp, #4]
    f082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f086:	2b00      	cmp	r3, #0
    f088:	d100      	bne.n	f08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f08a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f08c:	bf00      	nop
    f08e:	b003      	add	sp, #12
    f090:	f85d fb04 	ldr.w	pc, [sp], #4
    f094:	1fff90fc 	.word	0x1fff90fc
    f098:	1fff90f8 	.word	0x1fff90f8

0000f09c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f09c:	b500      	push	{lr}
    f09e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0a0:	f7f1 fd5c 	bl	b5c <Sys_GetCoreID>
    f0a4:	4603      	mov	r3, r0
    f0a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    f0a8:	4a10      	ldr	r2, [pc, #64]	; (f0ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f0aa:	9b01      	ldr	r3, [sp, #4]
    f0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	d10d      	bne.n	f0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0b4:	f7f1 fc82 	bl	9bc <Port_schm_read_msr>
    f0b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0ba:	9b00      	ldr	r3, [sp, #0]
    f0bc:	f003 0301 	and.w	r3, r3, #1
    f0c0:	2b00      	cmp	r3, #0
    f0c2:	d100      	bne.n	f0c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f0c6:	490a      	ldr	r1, [pc, #40]	; (f0f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    f0c8:	9b01      	ldr	r3, [sp, #4]
    f0ca:	9a00      	ldr	r2, [sp, #0]
    f0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    f0d0:	4a06      	ldr	r2, [pc, #24]	; (f0ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f0d2:	9b01      	ldr	r3, [sp, #4]
    f0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0d8:	1c5a      	adds	r2, r3, #1
    f0da:	4904      	ldr	r1, [pc, #16]	; (f0ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f0dc:	9b01      	ldr	r3, [sp, #4]
    f0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0e2:	bf00      	nop
    f0e4:	b003      	add	sp, #12
    f0e6:	f85d fb04 	ldr.w	pc, [sp], #4
    f0ea:	bf00      	nop
    f0ec:	1fff9104 	.word	0x1fff9104
    f0f0:	1fff9100 	.word	0x1fff9100

0000f0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f0f4:	b500      	push	{lr}
    f0f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0f8:	f7f1 fd30 	bl	b5c <Sys_GetCoreID>
    f0fc:	4603      	mov	r3, r0
    f0fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    f100:	4a0d      	ldr	r2, [pc, #52]	; (f138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f102:	9b01      	ldr	r3, [sp, #4]
    f104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f108:	1e5a      	subs	r2, r3, #1
    f10a:	490b      	ldr	r1, [pc, #44]	; (f138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f10c:	9b01      	ldr	r3, [sp, #4]
    f10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f112:	4a0a      	ldr	r2, [pc, #40]	; (f13c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    f114:	9b01      	ldr	r3, [sp, #4]
    f116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f11a:	f003 0301 	and.w	r3, r3, #1
    f11e:	2b00      	cmp	r3, #0
    f120:	d106      	bne.n	f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    f122:	4a05      	ldr	r2, [pc, #20]	; (f138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f124:	9b01      	ldr	r3, [sp, #4]
    f126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f12a:	2b00      	cmp	r3, #0
    f12c:	d100      	bne.n	f130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f12e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f130:	bf00      	nop
    f132:	b003      	add	sp, #12
    f134:	f85d fb04 	ldr.w	pc, [sp], #4
    f138:	1fff9104 	.word	0x1fff9104
    f13c:	1fff9100 	.word	0x1fff9100

0000f140 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f140:	b500      	push	{lr}
    f142:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f144:	f7f1 fd0a 	bl	b5c <Sys_GetCoreID>
    f148:	4603      	mov	r3, r0
    f14a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    f14c:	4a10      	ldr	r2, [pc, #64]	; (f190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f14e:	9b01      	ldr	r3, [sp, #4]
    f150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f154:	2b00      	cmp	r3, #0
    f156:	d10d      	bne.n	f174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f158:	f7f1 fc30 	bl	9bc <Port_schm_read_msr>
    f15c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f15e:	9b00      	ldr	r3, [sp, #0]
    f160:	f003 0301 	and.w	r3, r3, #1
    f164:	2b00      	cmp	r3, #0
    f166:	d100      	bne.n	f16a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f168:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f16a:	490a      	ldr	r1, [pc, #40]	; (f194 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	9a00      	ldr	r2, [sp, #0]
    f170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    f174:	4a06      	ldr	r2, [pc, #24]	; (f190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f176:	9b01      	ldr	r3, [sp, #4]
    f178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f17c:	1c5a      	adds	r2, r3, #1
    f17e:	4904      	ldr	r1, [pc, #16]	; (f190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f180:	9b01      	ldr	r3, [sp, #4]
    f182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f186:	bf00      	nop
    f188:	b003      	add	sp, #12
    f18a:	f85d fb04 	ldr.w	pc, [sp], #4
    f18e:	bf00      	nop
    f190:	1fff910c 	.word	0x1fff910c
    f194:	1fff9108 	.word	0x1fff9108

0000f198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f198:	b500      	push	{lr}
    f19a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f19c:	f7f1 fcde 	bl	b5c <Sys_GetCoreID>
    f1a0:	4603      	mov	r3, r0
    f1a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    f1a4:	4a0d      	ldr	r2, [pc, #52]	; (f1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f1a6:	9b01      	ldr	r3, [sp, #4]
    f1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ac:	1e5a      	subs	r2, r3, #1
    f1ae:	490b      	ldr	r1, [pc, #44]	; (f1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f1b0:	9b01      	ldr	r3, [sp, #4]
    f1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f1b6:	4a0a      	ldr	r2, [pc, #40]	; (f1e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f1b8:	9b01      	ldr	r3, [sp, #4]
    f1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1be:	f003 0301 	and.w	r3, r3, #1
    f1c2:	2b00      	cmp	r3, #0
    f1c4:	d106      	bne.n	f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f1c6:	4a05      	ldr	r2, [pc, #20]	; (f1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f1c8:	9b01      	ldr	r3, [sp, #4]
    f1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	d100      	bne.n	f1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1d4:	bf00      	nop
    f1d6:	b003      	add	sp, #12
    f1d8:	f85d fb04 	ldr.w	pc, [sp], #4
    f1dc:	1fff910c 	.word	0x1fff910c
    f1e0:	1fff9108 	.word	0x1fff9108

0000f1e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f1e4:	b500      	push	{lr}
    f1e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1e8:	f7f1 fcb8 	bl	b5c <Sys_GetCoreID>
    f1ec:	4603      	mov	r3, r0
    f1ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f1f0:	4a10      	ldr	r2, [pc, #64]	; (f234 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f1f2:	9b01      	ldr	r3, [sp, #4]
    f1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d10d      	bne.n	f218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1fc:	f7f1 fbde 	bl	9bc <Port_schm_read_msr>
    f200:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f202:	9b00      	ldr	r3, [sp, #0]
    f204:	f003 0301 	and.w	r3, r3, #1
    f208:	2b00      	cmp	r3, #0
    f20a:	d100      	bne.n	f20e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f20c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f20e:	490a      	ldr	r1, [pc, #40]	; (f238 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	9a00      	ldr	r2, [sp, #0]
    f214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f218:	4a06      	ldr	r2, [pc, #24]	; (f234 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f21a:	9b01      	ldr	r3, [sp, #4]
    f21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f220:	1c5a      	adds	r2, r3, #1
    f222:	4904      	ldr	r1, [pc, #16]	; (f234 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f224:	9b01      	ldr	r3, [sp, #4]
    f226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f22a:	bf00      	nop
    f22c:	b003      	add	sp, #12
    f22e:	f85d fb04 	ldr.w	pc, [sp], #4
    f232:	bf00      	nop
    f234:	1fff9114 	.word	0x1fff9114
    f238:	1fff9110 	.word	0x1fff9110

0000f23c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f23c:	b500      	push	{lr}
    f23e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f240:	f7f1 fc8c 	bl	b5c <Sys_GetCoreID>
    f244:	4603      	mov	r3, r0
    f246:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f248:	4a0d      	ldr	r2, [pc, #52]	; (f280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f24a:	9b01      	ldr	r3, [sp, #4]
    f24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f250:	1e5a      	subs	r2, r3, #1
    f252:	490b      	ldr	r1, [pc, #44]	; (f280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f254:	9b01      	ldr	r3, [sp, #4]
    f256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f25a:	4a0a      	ldr	r2, [pc, #40]	; (f284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f25c:	9b01      	ldr	r3, [sp, #4]
    f25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f262:	f003 0301 	and.w	r3, r3, #1
    f266:	2b00      	cmp	r3, #0
    f268:	d106      	bne.n	f278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f26a:	4a05      	ldr	r2, [pc, #20]	; (f280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f26c:	9b01      	ldr	r3, [sp, #4]
    f26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f272:	2b00      	cmp	r3, #0
    f274:	d100      	bne.n	f278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f276:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f278:	bf00      	nop
    f27a:	b003      	add	sp, #12
    f27c:	f85d fb04 	ldr.w	pc, [sp], #4
    f280:	1fff9114 	.word	0x1fff9114
    f284:	1fff9110 	.word	0x1fff9110

0000f288 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f288:	b500      	push	{lr}
    f28a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f28c:	f7f1 fc66 	bl	b5c <Sys_GetCoreID>
    f290:	4603      	mov	r3, r0
    f292:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f294:	4a10      	ldr	r2, [pc, #64]	; (f2d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f296:	9b01      	ldr	r3, [sp, #4]
    f298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f29c:	2b00      	cmp	r3, #0
    f29e:	d10d      	bne.n	f2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2a0:	f7f1 fb8c 	bl	9bc <Port_schm_read_msr>
    f2a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2a6:	9b00      	ldr	r3, [sp, #0]
    f2a8:	f003 0301 	and.w	r3, r3, #1
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d100      	bne.n	f2b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f2b2:	490a      	ldr	r1, [pc, #40]	; (f2dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	9a00      	ldr	r2, [sp, #0]
    f2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f2bc:	4a06      	ldr	r2, [pc, #24]	; (f2d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f2be:	9b01      	ldr	r3, [sp, #4]
    f2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2c4:	1c5a      	adds	r2, r3, #1
    f2c6:	4904      	ldr	r1, [pc, #16]	; (f2d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f2c8:	9b01      	ldr	r3, [sp, #4]
    f2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2ce:	bf00      	nop
    f2d0:	b003      	add	sp, #12
    f2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f2d6:	bf00      	nop
    f2d8:	1fff911c 	.word	0x1fff911c
    f2dc:	1fff9118 	.word	0x1fff9118

0000f2e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f2e0:	b500      	push	{lr}
    f2e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2e4:	f7f1 fc3a 	bl	b5c <Sys_GetCoreID>
    f2e8:	4603      	mov	r3, r0
    f2ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f2ec:	4a0d      	ldr	r2, [pc, #52]	; (f324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f2ee:	9b01      	ldr	r3, [sp, #4]
    f2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f4:	1e5a      	subs	r2, r3, #1
    f2f6:	490b      	ldr	r1, [pc, #44]	; (f324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f2f8:	9b01      	ldr	r3, [sp, #4]
    f2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f2fe:	4a0a      	ldr	r2, [pc, #40]	; (f328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f300:	9b01      	ldr	r3, [sp, #4]
    f302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f306:	f003 0301 	and.w	r3, r3, #1
    f30a:	2b00      	cmp	r3, #0
    f30c:	d106      	bne.n	f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f30e:	4a05      	ldr	r2, [pc, #20]	; (f324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f316:	2b00      	cmp	r3, #0
    f318:	d100      	bne.n	f31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f31a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f31c:	bf00      	nop
    f31e:	b003      	add	sp, #12
    f320:	f85d fb04 	ldr.w	pc, [sp], #4
    f324:	1fff911c 	.word	0x1fff911c
    f328:	1fff9118 	.word	0x1fff9118

0000f32c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f32c:	b500      	push	{lr}
    f32e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f330:	f7f1 fc14 	bl	b5c <Sys_GetCoreID>
    f334:	4603      	mov	r3, r0
    f336:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f338:	4a10      	ldr	r2, [pc, #64]	; (f37c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f33a:	9b01      	ldr	r3, [sp, #4]
    f33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f340:	2b00      	cmp	r3, #0
    f342:	d10d      	bne.n	f360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f344:	f7f1 fb3a 	bl	9bc <Port_schm_read_msr>
    f348:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f34a:	9b00      	ldr	r3, [sp, #0]
    f34c:	f003 0301 	and.w	r3, r3, #1
    f350:	2b00      	cmp	r3, #0
    f352:	d100      	bne.n	f356 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f354:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f356:	490a      	ldr	r1, [pc, #40]	; (f380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f358:	9b01      	ldr	r3, [sp, #4]
    f35a:	9a00      	ldr	r2, [sp, #0]
    f35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f360:	4a06      	ldr	r2, [pc, #24]	; (f37c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f362:	9b01      	ldr	r3, [sp, #4]
    f364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f368:	1c5a      	adds	r2, r3, #1
    f36a:	4904      	ldr	r1, [pc, #16]	; (f37c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f36c:	9b01      	ldr	r3, [sp, #4]
    f36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f372:	bf00      	nop
    f374:	b003      	add	sp, #12
    f376:	f85d fb04 	ldr.w	pc, [sp], #4
    f37a:	bf00      	nop
    f37c:	1fff9124 	.word	0x1fff9124
    f380:	1fff9120 	.word	0x1fff9120

0000f384 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f384:	b500      	push	{lr}
    f386:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f388:	f7f1 fbe8 	bl	b5c <Sys_GetCoreID>
    f38c:	4603      	mov	r3, r0
    f38e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f390:	4a0d      	ldr	r2, [pc, #52]	; (f3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f392:	9b01      	ldr	r3, [sp, #4]
    f394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f398:	1e5a      	subs	r2, r3, #1
    f39a:	490b      	ldr	r1, [pc, #44]	; (f3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f39c:	9b01      	ldr	r3, [sp, #4]
    f39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f3a2:	4a0a      	ldr	r2, [pc, #40]	; (f3cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f3a4:	9b01      	ldr	r3, [sp, #4]
    f3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3aa:	f003 0301 	and.w	r3, r3, #1
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	d106      	bne.n	f3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f3b2:	4a05      	ldr	r2, [pc, #20]	; (f3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f3b4:	9b01      	ldr	r3, [sp, #4]
    f3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d100      	bne.n	f3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3c0:	bf00      	nop
    f3c2:	b003      	add	sp, #12
    f3c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f3c8:	1fff9124 	.word	0x1fff9124
    f3cc:	1fff9120 	.word	0x1fff9120

0000f3d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f3d0:	b500      	push	{lr}
    f3d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3d4:	f7f1 fbc2 	bl	b5c <Sys_GetCoreID>
    f3d8:	4603      	mov	r3, r0
    f3da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f3dc:	4a10      	ldr	r2, [pc, #64]	; (f420 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f3de:	9b01      	ldr	r3, [sp, #4]
    f3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e4:	2b00      	cmp	r3, #0
    f3e6:	d10d      	bne.n	f404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3e8:	f7f1 fae8 	bl	9bc <Port_schm_read_msr>
    f3ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3ee:	9b00      	ldr	r3, [sp, #0]
    f3f0:	f003 0301 	and.w	r3, r3, #1
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d100      	bne.n	f3fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f3fa:	490a      	ldr	r1, [pc, #40]	; (f424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	9a00      	ldr	r2, [sp, #0]
    f400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f404:	4a06      	ldr	r2, [pc, #24]	; (f420 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f406:	9b01      	ldr	r3, [sp, #4]
    f408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f40c:	1c5a      	adds	r2, r3, #1
    f40e:	4904      	ldr	r1, [pc, #16]	; (f420 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f410:	9b01      	ldr	r3, [sp, #4]
    f412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f416:	bf00      	nop
    f418:	b003      	add	sp, #12
    f41a:	f85d fb04 	ldr.w	pc, [sp], #4
    f41e:	bf00      	nop
    f420:	1fff912c 	.word	0x1fff912c
    f424:	1fff9128 	.word	0x1fff9128

0000f428 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f428:	b500      	push	{lr}
    f42a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f42c:	f7f1 fb96 	bl	b5c <Sys_GetCoreID>
    f430:	4603      	mov	r3, r0
    f432:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f434:	4a0d      	ldr	r2, [pc, #52]	; (f46c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f436:	9b01      	ldr	r3, [sp, #4]
    f438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f43c:	1e5a      	subs	r2, r3, #1
    f43e:	490b      	ldr	r1, [pc, #44]	; (f46c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f440:	9b01      	ldr	r3, [sp, #4]
    f442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f446:	4a0a      	ldr	r2, [pc, #40]	; (f470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f448:	9b01      	ldr	r3, [sp, #4]
    f44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44e:	f003 0301 	and.w	r3, r3, #1
    f452:	2b00      	cmp	r3, #0
    f454:	d106      	bne.n	f464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f456:	4a05      	ldr	r2, [pc, #20]	; (f46c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f458:	9b01      	ldr	r3, [sp, #4]
    f45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f45e:	2b00      	cmp	r3, #0
    f460:	d100      	bne.n	f464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f462:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f464:	bf00      	nop
    f466:	b003      	add	sp, #12
    f468:	f85d fb04 	ldr.w	pc, [sp], #4
    f46c:	1fff912c 	.word	0x1fff912c
    f470:	1fff9128 	.word	0x1fff9128

0000f474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f474:	b500      	push	{lr}
    f476:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f478:	f7f1 fb70 	bl	b5c <Sys_GetCoreID>
    f47c:	4603      	mov	r3, r0
    f47e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f480:	4a10      	ldr	r2, [pc, #64]	; (f4c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f482:	9b01      	ldr	r3, [sp, #4]
    f484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f488:	2b00      	cmp	r3, #0
    f48a:	d10d      	bne.n	f4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f48c:	f7f1 fa96 	bl	9bc <Port_schm_read_msr>
    f490:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f492:	9b00      	ldr	r3, [sp, #0]
    f494:	f003 0301 	and.w	r3, r3, #1
    f498:	2b00      	cmp	r3, #0
    f49a:	d100      	bne.n	f49e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f49c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f49e:	490a      	ldr	r1, [pc, #40]	; (f4c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	9a00      	ldr	r2, [sp, #0]
    f4a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f4a8:	4a06      	ldr	r2, [pc, #24]	; (f4c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f4aa:	9b01      	ldr	r3, [sp, #4]
    f4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4b0:	1c5a      	adds	r2, r3, #1
    f4b2:	4904      	ldr	r1, [pc, #16]	; (f4c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f4b4:	9b01      	ldr	r3, [sp, #4]
    f4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4ba:	bf00      	nop
    f4bc:	b003      	add	sp, #12
    f4be:	f85d fb04 	ldr.w	pc, [sp], #4
    f4c2:	bf00      	nop
    f4c4:	1fff9134 	.word	0x1fff9134
    f4c8:	1fff9130 	.word	0x1fff9130

0000f4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f4cc:	b500      	push	{lr}
    f4ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4d0:	f7f1 fb44 	bl	b5c <Sys_GetCoreID>
    f4d4:	4603      	mov	r3, r0
    f4d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f4d8:	4a0d      	ldr	r2, [pc, #52]	; (f510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f4da:	9b01      	ldr	r3, [sp, #4]
    f4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4e0:	1e5a      	subs	r2, r3, #1
    f4e2:	490b      	ldr	r1, [pc, #44]	; (f510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f4e4:	9b01      	ldr	r3, [sp, #4]
    f4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f4ea:	4a0a      	ldr	r2, [pc, #40]	; (f514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f4ec:	9b01      	ldr	r3, [sp, #4]
    f4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f2:	f003 0301 	and.w	r3, r3, #1
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d106      	bne.n	f508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f4fa:	4a05      	ldr	r2, [pc, #20]	; (f510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f502:	2b00      	cmp	r3, #0
    f504:	d100      	bne.n	f508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f506:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f508:	bf00      	nop
    f50a:	b003      	add	sp, #12
    f50c:	f85d fb04 	ldr.w	pc, [sp], #4
    f510:	1fff9134 	.word	0x1fff9134
    f514:	1fff9130 	.word	0x1fff9130

0000f518 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f518:	b500      	push	{lr}
    f51a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f51c:	f7f1 fb1e 	bl	b5c <Sys_GetCoreID>
    f520:	4603      	mov	r3, r0
    f522:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f524:	4a10      	ldr	r2, [pc, #64]	; (f568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f526:	9b01      	ldr	r3, [sp, #4]
    f528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f52c:	2b00      	cmp	r3, #0
    f52e:	d10d      	bne.n	f54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f530:	f7f1 fa44 	bl	9bc <Port_schm_read_msr>
    f534:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f536:	9b00      	ldr	r3, [sp, #0]
    f538:	f003 0301 	and.w	r3, r3, #1
    f53c:	2b00      	cmp	r3, #0
    f53e:	d100      	bne.n	f542 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f540:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f542:	490a      	ldr	r1, [pc, #40]	; (f56c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f544:	9b01      	ldr	r3, [sp, #4]
    f546:	9a00      	ldr	r2, [sp, #0]
    f548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f54c:	4a06      	ldr	r2, [pc, #24]	; (f568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f54e:	9b01      	ldr	r3, [sp, #4]
    f550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f554:	1c5a      	adds	r2, r3, #1
    f556:	4904      	ldr	r1, [pc, #16]	; (f568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f558:	9b01      	ldr	r3, [sp, #4]
    f55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f55e:	bf00      	nop
    f560:	b003      	add	sp, #12
    f562:	f85d fb04 	ldr.w	pc, [sp], #4
    f566:	bf00      	nop
    f568:	1fff913c 	.word	0x1fff913c
    f56c:	1fff9138 	.word	0x1fff9138

0000f570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f570:	b500      	push	{lr}
    f572:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f574:	f7f1 faf2 	bl	b5c <Sys_GetCoreID>
    f578:	4603      	mov	r3, r0
    f57a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    f57c:	4a0d      	ldr	r2, [pc, #52]	; (f5b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f57e:	9b01      	ldr	r3, [sp, #4]
    f580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f584:	1e5a      	subs	r2, r3, #1
    f586:	490b      	ldr	r1, [pc, #44]	; (f5b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f588:	9b01      	ldr	r3, [sp, #4]
    f58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f58e:	4a0a      	ldr	r2, [pc, #40]	; (f5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    f590:	9b01      	ldr	r3, [sp, #4]
    f592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f596:	f003 0301 	and.w	r3, r3, #1
    f59a:	2b00      	cmp	r3, #0
    f59c:	d106      	bne.n	f5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    f59e:	4a05      	ldr	r2, [pc, #20]	; (f5b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f5a0:	9b01      	ldr	r3, [sp, #4]
    f5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5a6:	2b00      	cmp	r3, #0
    f5a8:	d100      	bne.n	f5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5ac:	bf00      	nop
    f5ae:	b003      	add	sp, #12
    f5b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f5b4:	1fff913c 	.word	0x1fff913c
    f5b8:	1fff9138 	.word	0x1fff9138

0000f5bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f5bc:	b500      	push	{lr}
    f5be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5c0:	f7f1 facc 	bl	b5c <Sys_GetCoreID>
    f5c4:	4603      	mov	r3, r0
    f5c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    f5c8:	4a10      	ldr	r2, [pc, #64]	; (f60c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f5ca:	9b01      	ldr	r3, [sp, #4]
    f5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	d10d      	bne.n	f5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5d4:	f7f1 f9f2 	bl	9bc <Port_schm_read_msr>
    f5d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5da:	9b00      	ldr	r3, [sp, #0]
    f5dc:	f003 0301 	and.w	r3, r3, #1
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d100      	bne.n	f5e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f5e6:	490a      	ldr	r1, [pc, #40]	; (f610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	9a00      	ldr	r2, [sp, #0]
    f5ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    f5f0:	4a06      	ldr	r2, [pc, #24]	; (f60c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f5f2:	9b01      	ldr	r3, [sp, #4]
    f5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5f8:	1c5a      	adds	r2, r3, #1
    f5fa:	4904      	ldr	r1, [pc, #16]	; (f60c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f5fc:	9b01      	ldr	r3, [sp, #4]
    f5fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f602:	bf00      	nop
    f604:	b003      	add	sp, #12
    f606:	f85d fb04 	ldr.w	pc, [sp], #4
    f60a:	bf00      	nop
    f60c:	1fff9144 	.word	0x1fff9144
    f610:	1fff9140 	.word	0x1fff9140

0000f614 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f614:	b500      	push	{lr}
    f616:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f618:	f7f1 faa0 	bl	b5c <Sys_GetCoreID>
    f61c:	4603      	mov	r3, r0
    f61e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    f620:	4a0d      	ldr	r2, [pc, #52]	; (f658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f622:	9b01      	ldr	r3, [sp, #4]
    f624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f628:	1e5a      	subs	r2, r3, #1
    f62a:	490b      	ldr	r1, [pc, #44]	; (f658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f62c:	9b01      	ldr	r3, [sp, #4]
    f62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f632:	4a0a      	ldr	r2, [pc, #40]	; (f65c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    f634:	9b01      	ldr	r3, [sp, #4]
    f636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f63a:	f003 0301 	and.w	r3, r3, #1
    f63e:	2b00      	cmp	r3, #0
    f640:	d106      	bne.n	f650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    f642:	4a05      	ldr	r2, [pc, #20]	; (f658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f644:	9b01      	ldr	r3, [sp, #4]
    f646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f64a:	2b00      	cmp	r3, #0
    f64c:	d100      	bne.n	f650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f64e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f650:	bf00      	nop
    f652:	b003      	add	sp, #12
    f654:	f85d fb04 	ldr.w	pc, [sp], #4
    f658:	1fff9144 	.word	0x1fff9144
    f65c:	1fff9140 	.word	0x1fff9140

0000f660 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f660:	b500      	push	{lr}
    f662:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f664:	f7f1 fa7a 	bl	b5c <Sys_GetCoreID>
    f668:	4603      	mov	r3, r0
    f66a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    f66c:	4a10      	ldr	r2, [pc, #64]	; (f6b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f66e:	9b01      	ldr	r3, [sp, #4]
    f670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f674:	2b00      	cmp	r3, #0
    f676:	d10d      	bne.n	f694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f678:	f7f1 f9a0 	bl	9bc <Port_schm_read_msr>
    f67c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f67e:	9b00      	ldr	r3, [sp, #0]
    f680:	f003 0301 	and.w	r3, r3, #1
    f684:	2b00      	cmp	r3, #0
    f686:	d100      	bne.n	f68a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f688:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f68a:	490a      	ldr	r1, [pc, #40]	; (f6b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    f68c:	9b01      	ldr	r3, [sp, #4]
    f68e:	9a00      	ldr	r2, [sp, #0]
    f690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    f694:	4a06      	ldr	r2, [pc, #24]	; (f6b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f696:	9b01      	ldr	r3, [sp, #4]
    f698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f69c:	1c5a      	adds	r2, r3, #1
    f69e:	4904      	ldr	r1, [pc, #16]	; (f6b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f6a0:	9b01      	ldr	r3, [sp, #4]
    f6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6a6:	bf00      	nop
    f6a8:	b003      	add	sp, #12
    f6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f6ae:	bf00      	nop
    f6b0:	1fff914c 	.word	0x1fff914c
    f6b4:	1fff9148 	.word	0x1fff9148

0000f6b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f6b8:	b500      	push	{lr}
    f6ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6bc:	f7f1 fa4e 	bl	b5c <Sys_GetCoreID>
    f6c0:	4603      	mov	r3, r0
    f6c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    f6c4:	4a0d      	ldr	r2, [pc, #52]	; (f6fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f6c6:	9b01      	ldr	r3, [sp, #4]
    f6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6cc:	1e5a      	subs	r2, r3, #1
    f6ce:	490b      	ldr	r1, [pc, #44]	; (f6fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f6d0:	9b01      	ldr	r3, [sp, #4]
    f6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f6d6:	4a0a      	ldr	r2, [pc, #40]	; (f700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    f6d8:	9b01      	ldr	r3, [sp, #4]
    f6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6de:	f003 0301 	and.w	r3, r3, #1
    f6e2:	2b00      	cmp	r3, #0
    f6e4:	d106      	bne.n	f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    f6e6:	4a05      	ldr	r2, [pc, #20]	; (f6fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f6e8:	9b01      	ldr	r3, [sp, #4]
    f6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	d100      	bne.n	f6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f6f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f6f4:	bf00      	nop
    f6f6:	b003      	add	sp, #12
    f6f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f6fc:	1fff914c 	.word	0x1fff914c
    f700:	1fff9148 	.word	0x1fff9148

0000f704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f704:	b500      	push	{lr}
    f706:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f708:	f7f1 fa28 	bl	b5c <Sys_GetCoreID>
    f70c:	4603      	mov	r3, r0
    f70e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    f710:	4a10      	ldr	r2, [pc, #64]	; (f754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f712:	9b01      	ldr	r3, [sp, #4]
    f714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f718:	2b00      	cmp	r3, #0
    f71a:	d10d      	bne.n	f738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f71c:	f7f1 f94e 	bl	9bc <Port_schm_read_msr>
    f720:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f722:	9b00      	ldr	r3, [sp, #0]
    f724:	f003 0301 	and.w	r3, r3, #1
    f728:	2b00      	cmp	r3, #0
    f72a:	d100      	bne.n	f72e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f72c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f72e:	490a      	ldr	r1, [pc, #40]	; (f758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    f730:	9b01      	ldr	r3, [sp, #4]
    f732:	9a00      	ldr	r2, [sp, #0]
    f734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    f738:	4a06      	ldr	r2, [pc, #24]	; (f754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f73a:	9b01      	ldr	r3, [sp, #4]
    f73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f740:	1c5a      	adds	r2, r3, #1
    f742:	4904      	ldr	r1, [pc, #16]	; (f754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f744:	9b01      	ldr	r3, [sp, #4]
    f746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f74a:	bf00      	nop
    f74c:	b003      	add	sp, #12
    f74e:	f85d fb04 	ldr.w	pc, [sp], #4
    f752:	bf00      	nop
    f754:	1fff9154 	.word	0x1fff9154
    f758:	1fff9150 	.word	0x1fff9150

0000f75c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f75c:	b500      	push	{lr}
    f75e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f760:	f7f1 f9fc 	bl	b5c <Sys_GetCoreID>
    f764:	4603      	mov	r3, r0
    f766:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    f768:	4a0d      	ldr	r2, [pc, #52]	; (f7a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f76a:	9b01      	ldr	r3, [sp, #4]
    f76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f770:	1e5a      	subs	r2, r3, #1
    f772:	490b      	ldr	r1, [pc, #44]	; (f7a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f774:	9b01      	ldr	r3, [sp, #4]
    f776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f77a:	4a0a      	ldr	r2, [pc, #40]	; (f7a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    f77c:	9b01      	ldr	r3, [sp, #4]
    f77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f782:	f003 0301 	and.w	r3, r3, #1
    f786:	2b00      	cmp	r3, #0
    f788:	d106      	bne.n	f798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    f78a:	4a05      	ldr	r2, [pc, #20]	; (f7a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f78c:	9b01      	ldr	r3, [sp, #4]
    f78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f792:	2b00      	cmp	r3, #0
    f794:	d100      	bne.n	f798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f796:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f798:	bf00      	nop
    f79a:	b003      	add	sp, #12
    f79c:	f85d fb04 	ldr.w	pc, [sp], #4
    f7a0:	1fff9154 	.word	0x1fff9154
    f7a4:	1fff9150 	.word	0x1fff9150

0000f7a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f7a8:	b500      	push	{lr}
    f7aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7ac:	f7f1 f9d6 	bl	b5c <Sys_GetCoreID>
    f7b0:	4603      	mov	r3, r0
    f7b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    f7b4:	4a10      	ldr	r2, [pc, #64]	; (f7f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f7b6:	9b01      	ldr	r3, [sp, #4]
    f7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7bc:	2b00      	cmp	r3, #0
    f7be:	d10d      	bne.n	f7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7c0:	f7f1 f8fc 	bl	9bc <Port_schm_read_msr>
    f7c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7c6:	9b00      	ldr	r3, [sp, #0]
    f7c8:	f003 0301 	and.w	r3, r3, #1
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d100      	bne.n	f7d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f7d2:	490a      	ldr	r1, [pc, #40]	; (f7fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    f7d4:	9b01      	ldr	r3, [sp, #4]
    f7d6:	9a00      	ldr	r2, [sp, #0]
    f7d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    f7dc:	4a06      	ldr	r2, [pc, #24]	; (f7f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f7de:	9b01      	ldr	r3, [sp, #4]
    f7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7e4:	1c5a      	adds	r2, r3, #1
    f7e6:	4904      	ldr	r1, [pc, #16]	; (f7f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f7e8:	9b01      	ldr	r3, [sp, #4]
    f7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7ee:	bf00      	nop
    f7f0:	b003      	add	sp, #12
    f7f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f7f6:	bf00      	nop
    f7f8:	1fff915c 	.word	0x1fff915c
    f7fc:	1fff9158 	.word	0x1fff9158

0000f800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f800:	b500      	push	{lr}
    f802:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f804:	f7f1 f9aa 	bl	b5c <Sys_GetCoreID>
    f808:	4603      	mov	r3, r0
    f80a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    f80c:	4a0d      	ldr	r2, [pc, #52]	; (f844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f80e:	9b01      	ldr	r3, [sp, #4]
    f810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f814:	1e5a      	subs	r2, r3, #1
    f816:	490b      	ldr	r1, [pc, #44]	; (f844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f818:	9b01      	ldr	r3, [sp, #4]
    f81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f81e:	4a0a      	ldr	r2, [pc, #40]	; (f848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    f820:	9b01      	ldr	r3, [sp, #4]
    f822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f826:	f003 0301 	and.w	r3, r3, #1
    f82a:	2b00      	cmp	r3, #0
    f82c:	d106      	bne.n	f83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    f82e:	4a05      	ldr	r2, [pc, #20]	; (f844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f830:	9b01      	ldr	r3, [sp, #4]
    f832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f836:	2b00      	cmp	r3, #0
    f838:	d100      	bne.n	f83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f83a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f83c:	bf00      	nop
    f83e:	b003      	add	sp, #12
    f840:	f85d fb04 	ldr.w	pc, [sp], #4
    f844:	1fff915c 	.word	0x1fff915c
    f848:	1fff9158 	.word	0x1fff9158

0000f84c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f84c:	b500      	push	{lr}
    f84e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f850:	f7f1 f984 	bl	b5c <Sys_GetCoreID>
    f854:	4603      	mov	r3, r0
    f856:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    f858:	4a10      	ldr	r2, [pc, #64]	; (f89c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f85a:	9b01      	ldr	r3, [sp, #4]
    f85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f860:	2b00      	cmp	r3, #0
    f862:	d10d      	bne.n	f880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f864:	f7f1 f8aa 	bl	9bc <Port_schm_read_msr>
    f868:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f86a:	9b00      	ldr	r3, [sp, #0]
    f86c:	f003 0301 	and.w	r3, r3, #1
    f870:	2b00      	cmp	r3, #0
    f872:	d100      	bne.n	f876 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f874:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    f876:	490a      	ldr	r1, [pc, #40]	; (f8a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    f878:	9b01      	ldr	r3, [sp, #4]
    f87a:	9a00      	ldr	r2, [sp, #0]
    f87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    f880:	4a06      	ldr	r2, [pc, #24]	; (f89c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f882:	9b01      	ldr	r3, [sp, #4]
    f884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f888:	1c5a      	adds	r2, r3, #1
    f88a:	4904      	ldr	r1, [pc, #16]	; (f89c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f88c:	9b01      	ldr	r3, [sp, #4]
    f88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f892:	bf00      	nop
    f894:	b003      	add	sp, #12
    f896:	f85d fb04 	ldr.w	pc, [sp], #4
    f89a:	bf00      	nop
    f89c:	1fff9164 	.word	0x1fff9164
    f8a0:	1fff9160 	.word	0x1fff9160

0000f8a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f8a4:	b500      	push	{lr}
    f8a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8a8:	f7f1 f958 	bl	b5c <Sys_GetCoreID>
    f8ac:	4603      	mov	r3, r0
    f8ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    f8b0:	4a0d      	ldr	r2, [pc, #52]	; (f8e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f8b2:	9b01      	ldr	r3, [sp, #4]
    f8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8b8:	1e5a      	subs	r2, r3, #1
    f8ba:	490b      	ldr	r1, [pc, #44]	; (f8e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f8bc:	9b01      	ldr	r3, [sp, #4]
    f8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    f8c2:	4a0a      	ldr	r2, [pc, #40]	; (f8ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    f8c4:	9b01      	ldr	r3, [sp, #4]
    f8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8ca:	f003 0301 	and.w	r3, r3, #1
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	d106      	bne.n	f8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    f8d2:	4a05      	ldr	r2, [pc, #20]	; (f8e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f8d4:	9b01      	ldr	r3, [sp, #4]
    f8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d100      	bne.n	f8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8e0:	bf00      	nop
    f8e2:	b003      	add	sp, #12
    f8e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f8e8:	1fff9164 	.word	0x1fff9164
    f8ec:	1fff9160 	.word	0x1fff9160

0000f8f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f8f0:	b500      	push	{lr}
    f8f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8f4:	f7f1 f932 	bl	b5c <Sys_GetCoreID>
    f8f8:	4603      	mov	r3, r0
    f8fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    f8fc:	4a10      	ldr	r2, [pc, #64]	; (f940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f8fe:	9b01      	ldr	r3, [sp, #4]
    f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f904:	2b00      	cmp	r3, #0
    f906:	d10d      	bne.n	f924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f908:	f7f1 f858 	bl	9bc <Port_schm_read_msr>
    f90c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f90e:	9b00      	ldr	r3, [sp, #0]
    f910:	f003 0301 	and.w	r3, r3, #1
    f914:	2b00      	cmp	r3, #0
    f916:	d100      	bne.n	f91a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f918:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    f91a:	490a      	ldr	r1, [pc, #40]	; (f944 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    f91c:	9b01      	ldr	r3, [sp, #4]
    f91e:	9a00      	ldr	r2, [sp, #0]
    f920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    f924:	4a06      	ldr	r2, [pc, #24]	; (f940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f926:	9b01      	ldr	r3, [sp, #4]
    f928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f92c:	1c5a      	adds	r2, r3, #1
    f92e:	4904      	ldr	r1, [pc, #16]	; (f940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f930:	9b01      	ldr	r3, [sp, #4]
    f932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f936:	bf00      	nop
    f938:	b003      	add	sp, #12
    f93a:	f85d fb04 	ldr.w	pc, [sp], #4
    f93e:	bf00      	nop
    f940:	1fff916c 	.word	0x1fff916c
    f944:	1fff9168 	.word	0x1fff9168

0000f948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f948:	b500      	push	{lr}
    f94a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f94c:	f7f1 f906 	bl	b5c <Sys_GetCoreID>
    f950:	4603      	mov	r3, r0
    f952:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    f954:	4a0d      	ldr	r2, [pc, #52]	; (f98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f956:	9b01      	ldr	r3, [sp, #4]
    f958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f95c:	1e5a      	subs	r2, r3, #1
    f95e:	490b      	ldr	r1, [pc, #44]	; (f98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f960:	9b01      	ldr	r3, [sp, #4]
    f962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    f966:	4a0a      	ldr	r2, [pc, #40]	; (f990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    f968:	9b01      	ldr	r3, [sp, #4]
    f96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f96e:	f003 0301 	and.w	r3, r3, #1
    f972:	2b00      	cmp	r3, #0
    f974:	d106      	bne.n	f984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    f976:	4a05      	ldr	r2, [pc, #20]	; (f98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f978:	9b01      	ldr	r3, [sp, #4]
    f97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f97e:	2b00      	cmp	r3, #0
    f980:	d100      	bne.n	f984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f982:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f984:	bf00      	nop
    f986:	b003      	add	sp, #12
    f988:	f85d fb04 	ldr.w	pc, [sp], #4
    f98c:	1fff916c 	.word	0x1fff916c
    f990:	1fff9168 	.word	0x1fff9168

0000f994 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f994:	b500      	push	{lr}
    f996:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f998:	f7f1 f8e0 	bl	b5c <Sys_GetCoreID>
    f99c:	4603      	mov	r3, r0
    f99e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    f9a0:	4a10      	ldr	r2, [pc, #64]	; (f9e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f9a2:	9b01      	ldr	r3, [sp, #4]
    f9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a8:	2b00      	cmp	r3, #0
    f9aa:	d10d      	bne.n	f9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9ac:	f7f1 f806 	bl	9bc <Port_schm_read_msr>
    f9b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9b2:	9b00      	ldr	r3, [sp, #0]
    f9b4:	f003 0301 	and.w	r3, r3, #1
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d100      	bne.n	f9be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    f9be:	490a      	ldr	r1, [pc, #40]	; (f9e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    f9c0:	9b01      	ldr	r3, [sp, #4]
    f9c2:	9a00      	ldr	r2, [sp, #0]
    f9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    f9c8:	4a06      	ldr	r2, [pc, #24]	; (f9e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f9ca:	9b01      	ldr	r3, [sp, #4]
    f9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9d0:	1c5a      	adds	r2, r3, #1
    f9d2:	4904      	ldr	r1, [pc, #16]	; (f9e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f9d4:	9b01      	ldr	r3, [sp, #4]
    f9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9da:	bf00      	nop
    f9dc:	b003      	add	sp, #12
    f9de:	f85d fb04 	ldr.w	pc, [sp], #4
    f9e2:	bf00      	nop
    f9e4:	1fff9174 	.word	0x1fff9174
    f9e8:	1fff9170 	.word	0x1fff9170

0000f9ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f9ec:	b500      	push	{lr}
    f9ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9f0:	f7f1 f8b4 	bl	b5c <Sys_GetCoreID>
    f9f4:	4603      	mov	r3, r0
    f9f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    f9f8:	4a0d      	ldr	r2, [pc, #52]	; (fa30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f9fa:	9b01      	ldr	r3, [sp, #4]
    f9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa00:	1e5a      	subs	r2, r3, #1
    fa02:	490b      	ldr	r1, [pc, #44]	; (fa30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    fa04:	9b01      	ldr	r3, [sp, #4]
    fa06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    fa0a:	4a0a      	ldr	r2, [pc, #40]	; (fa34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    fa0c:	9b01      	ldr	r3, [sp, #4]
    fa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa12:	f003 0301 	and.w	r3, r3, #1
    fa16:	2b00      	cmp	r3, #0
    fa18:	d106      	bne.n	fa28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    fa1a:	4a05      	ldr	r2, [pc, #20]	; (fa30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    fa1c:	9b01      	ldr	r3, [sp, #4]
    fa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa22:	2b00      	cmp	r3, #0
    fa24:	d100      	bne.n	fa28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa28:	bf00      	nop
    fa2a:	b003      	add	sp, #12
    fa2c:	f85d fb04 	ldr.w	pc, [sp], #4
    fa30:	1fff9174 	.word	0x1fff9174
    fa34:	1fff9170 	.word	0x1fff9170

0000fa38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    fa38:	b500      	push	{lr}
    fa3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa3c:	f7f1 f88e 	bl	b5c <Sys_GetCoreID>
    fa40:	4603      	mov	r3, r0
    fa42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    fa44:	4a10      	ldr	r2, [pc, #64]	; (fa88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fa46:	9b01      	ldr	r3, [sp, #4]
    fa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa4c:	2b00      	cmp	r3, #0
    fa4e:	d10d      	bne.n	fa6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa50:	f7f0 ffb4 	bl	9bc <Port_schm_read_msr>
    fa54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa56:	9b00      	ldr	r3, [sp, #0]
    fa58:	f003 0301 	and.w	r3, r3, #1
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d100      	bne.n	fa62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    fa62:	490a      	ldr	r1, [pc, #40]	; (fa8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    fa64:	9b01      	ldr	r3, [sp, #4]
    fa66:	9a00      	ldr	r2, [sp, #0]
    fa68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    fa6c:	4a06      	ldr	r2, [pc, #24]	; (fa88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fa6e:	9b01      	ldr	r3, [sp, #4]
    fa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa74:	1c5a      	adds	r2, r3, #1
    fa76:	4904      	ldr	r1, [pc, #16]	; (fa88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fa78:	9b01      	ldr	r3, [sp, #4]
    fa7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa7e:	bf00      	nop
    fa80:	b003      	add	sp, #12
    fa82:	f85d fb04 	ldr.w	pc, [sp], #4
    fa86:	bf00      	nop
    fa88:	1fff917c 	.word	0x1fff917c
    fa8c:	1fff9178 	.word	0x1fff9178

0000fa90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    fa90:	b500      	push	{lr}
    fa92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa94:	f7f1 f862 	bl	b5c <Sys_GetCoreID>
    fa98:	4603      	mov	r3, r0
    fa9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    fa9c:	4a0d      	ldr	r2, [pc, #52]	; (fad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    fa9e:	9b01      	ldr	r3, [sp, #4]
    faa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faa4:	1e5a      	subs	r2, r3, #1
    faa6:	490b      	ldr	r1, [pc, #44]	; (fad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    faa8:	9b01      	ldr	r3, [sp, #4]
    faaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    faae:	4a0a      	ldr	r2, [pc, #40]	; (fad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    fab0:	9b01      	ldr	r3, [sp, #4]
    fab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab6:	f003 0301 	and.w	r3, r3, #1
    faba:	2b00      	cmp	r3, #0
    fabc:	d106      	bne.n	facc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    fabe:	4a05      	ldr	r2, [pc, #20]	; (fad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    fac0:	9b01      	ldr	r3, [sp, #4]
    fac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fac6:	2b00      	cmp	r3, #0
    fac8:	d100      	bne.n	facc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    faca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    facc:	bf00      	nop
    face:	b003      	add	sp, #12
    fad0:	f85d fb04 	ldr.w	pc, [sp], #4
    fad4:	1fff917c 	.word	0x1fff917c
    fad8:	1fff9178 	.word	0x1fff9178

0000fadc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    fadc:	b500      	push	{lr}
    fade:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fae0:	f7f1 f83c 	bl	b5c <Sys_GetCoreID>
    fae4:	4603      	mov	r3, r0
    fae6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    fae8:	4a10      	ldr	r2, [pc, #64]	; (fb2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    faea:	9b01      	ldr	r3, [sp, #4]
    faec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf0:	2b00      	cmp	r3, #0
    faf2:	d10d      	bne.n	fb10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    faf4:	f7f0 ff62 	bl	9bc <Port_schm_read_msr>
    faf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fafa:	9b00      	ldr	r3, [sp, #0]
    fafc:	f003 0301 	and.w	r3, r3, #1
    fb00:	2b00      	cmp	r3, #0
    fb02:	d100      	bne.n	fb06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    fb06:	490a      	ldr	r1, [pc, #40]	; (fb30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    fb08:	9b01      	ldr	r3, [sp, #4]
    fb0a:	9a00      	ldr	r2, [sp, #0]
    fb0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    fb10:	4a06      	ldr	r2, [pc, #24]	; (fb2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fb12:	9b01      	ldr	r3, [sp, #4]
    fb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb18:	1c5a      	adds	r2, r3, #1
    fb1a:	4904      	ldr	r1, [pc, #16]	; (fb2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fb1c:	9b01      	ldr	r3, [sp, #4]
    fb1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb22:	bf00      	nop
    fb24:	b003      	add	sp, #12
    fb26:	f85d fb04 	ldr.w	pc, [sp], #4
    fb2a:	bf00      	nop
    fb2c:	1fff9184 	.word	0x1fff9184
    fb30:	1fff9180 	.word	0x1fff9180

0000fb34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    fb34:	b500      	push	{lr}
    fb36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb38:	f7f1 f810 	bl	b5c <Sys_GetCoreID>
    fb3c:	4603      	mov	r3, r0
    fb3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    fb40:	4a0d      	ldr	r2, [pc, #52]	; (fb78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fb42:	9b01      	ldr	r3, [sp, #4]
    fb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb48:	1e5a      	subs	r2, r3, #1
    fb4a:	490b      	ldr	r1, [pc, #44]	; (fb78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fb4c:	9b01      	ldr	r3, [sp, #4]
    fb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    fb52:	4a0a      	ldr	r2, [pc, #40]	; (fb7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    fb54:	9b01      	ldr	r3, [sp, #4]
    fb56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb5a:	f003 0301 	and.w	r3, r3, #1
    fb5e:	2b00      	cmp	r3, #0
    fb60:	d106      	bne.n	fb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    fb62:	4a05      	ldr	r2, [pc, #20]	; (fb78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fb64:	9b01      	ldr	r3, [sp, #4]
    fb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	d100      	bne.n	fb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb70:	bf00      	nop
    fb72:	b003      	add	sp, #12
    fb74:	f85d fb04 	ldr.w	pc, [sp], #4
    fb78:	1fff9184 	.word	0x1fff9184
    fb7c:	1fff9180 	.word	0x1fff9180

0000fb80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fb80:	b500      	push	{lr}
    fb82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb84:	f7f0 ffea 	bl	b5c <Sys_GetCoreID>
    fb88:	4603      	mov	r3, r0
    fb8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    fb8c:	4a10      	ldr	r2, [pc, #64]	; (fbd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fb8e:	9b01      	ldr	r3, [sp, #4]
    fb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb94:	2b00      	cmp	r3, #0
    fb96:	d10d      	bne.n	fbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb98:	f7f0 ff10 	bl	9bc <Port_schm_read_msr>
    fb9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb9e:	9b00      	ldr	r3, [sp, #0]
    fba0:	f003 0301 	and.w	r3, r3, #1
    fba4:	2b00      	cmp	r3, #0
    fba6:	d100      	bne.n	fbaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fba8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fbaa:	490a      	ldr	r1, [pc, #40]	; (fbd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    fbac:	9b01      	ldr	r3, [sp, #4]
    fbae:	9a00      	ldr	r2, [sp, #0]
    fbb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    fbb4:	4a06      	ldr	r2, [pc, #24]	; (fbd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fbb6:	9b01      	ldr	r3, [sp, #4]
    fbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbbc:	1c5a      	adds	r2, r3, #1
    fbbe:	4904      	ldr	r1, [pc, #16]	; (fbd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fbc0:	9b01      	ldr	r3, [sp, #4]
    fbc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbc6:	bf00      	nop
    fbc8:	b003      	add	sp, #12
    fbca:	f85d fb04 	ldr.w	pc, [sp], #4
    fbce:	bf00      	nop
    fbd0:	1fff918c 	.word	0x1fff918c
    fbd4:	1fff9188 	.word	0x1fff9188

0000fbd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fbd8:	b500      	push	{lr}
    fbda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbdc:	f7f0 ffbe 	bl	b5c <Sys_GetCoreID>
    fbe0:	4603      	mov	r3, r0
    fbe2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    fbe4:	4a0d      	ldr	r2, [pc, #52]	; (fc1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fbe6:	9b01      	ldr	r3, [sp, #4]
    fbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbec:	1e5a      	subs	r2, r3, #1
    fbee:	490b      	ldr	r1, [pc, #44]	; (fc1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fbf0:	9b01      	ldr	r3, [sp, #4]
    fbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fbf6:	4a0a      	ldr	r2, [pc, #40]	; (fc20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    fbf8:	9b01      	ldr	r3, [sp, #4]
    fbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbfe:	f003 0301 	and.w	r3, r3, #1
    fc02:	2b00      	cmp	r3, #0
    fc04:	d106      	bne.n	fc14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    fc06:	4a05      	ldr	r2, [pc, #20]	; (fc1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fc08:	9b01      	ldr	r3, [sp, #4]
    fc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc0e:	2b00      	cmp	r3, #0
    fc10:	d100      	bne.n	fc14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc14:	bf00      	nop
    fc16:	b003      	add	sp, #12
    fc18:	f85d fb04 	ldr.w	pc, [sp], #4
    fc1c:	1fff918c 	.word	0x1fff918c
    fc20:	1fff9188 	.word	0x1fff9188

0000fc24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fc24:	b500      	push	{lr}
    fc26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc28:	f7f0 ff98 	bl	b5c <Sys_GetCoreID>
    fc2c:	4603      	mov	r3, r0
    fc2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    fc30:	4a10      	ldr	r2, [pc, #64]	; (fc74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fc32:	9b01      	ldr	r3, [sp, #4]
    fc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc38:	2b00      	cmp	r3, #0
    fc3a:	d10d      	bne.n	fc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc3c:	f7f0 febe 	bl	9bc <Port_schm_read_msr>
    fc40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc42:	9b00      	ldr	r3, [sp, #0]
    fc44:	f003 0301 	and.w	r3, r3, #1
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d100      	bne.n	fc4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fc4e:	490a      	ldr	r1, [pc, #40]	; (fc78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	9a00      	ldr	r2, [sp, #0]
    fc54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    fc58:	4a06      	ldr	r2, [pc, #24]	; (fc74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fc5a:	9b01      	ldr	r3, [sp, #4]
    fc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc60:	1c5a      	adds	r2, r3, #1
    fc62:	4904      	ldr	r1, [pc, #16]	; (fc74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fc64:	9b01      	ldr	r3, [sp, #4]
    fc66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc6a:	bf00      	nop
    fc6c:	b003      	add	sp, #12
    fc6e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc72:	bf00      	nop
    fc74:	1fff9194 	.word	0x1fff9194
    fc78:	1fff9190 	.word	0x1fff9190

0000fc7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fc7c:	b500      	push	{lr}
    fc7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc80:	f7f0 ff6c 	bl	b5c <Sys_GetCoreID>
    fc84:	4603      	mov	r3, r0
    fc86:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    fc88:	4a0d      	ldr	r2, [pc, #52]	; (fcc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fc8a:	9b01      	ldr	r3, [sp, #4]
    fc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc90:	1e5a      	subs	r2, r3, #1
    fc92:	490b      	ldr	r1, [pc, #44]	; (fcc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fc94:	9b01      	ldr	r3, [sp, #4]
    fc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fc9a:	4a0a      	ldr	r2, [pc, #40]	; (fcc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    fc9c:	9b01      	ldr	r3, [sp, #4]
    fc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca2:	f003 0301 	and.w	r3, r3, #1
    fca6:	2b00      	cmp	r3, #0
    fca8:	d106      	bne.n	fcb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    fcaa:	4a05      	ldr	r2, [pc, #20]	; (fcc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fcac:	9b01      	ldr	r3, [sp, #4]
    fcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	d100      	bne.n	fcb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcb8:	bf00      	nop
    fcba:	b003      	add	sp, #12
    fcbc:	f85d fb04 	ldr.w	pc, [sp], #4
    fcc0:	1fff9194 	.word	0x1fff9194
    fcc4:	1fff9190 	.word	0x1fff9190

0000fcc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fcc8:	b500      	push	{lr}
    fcca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fccc:	f7f0 ff46 	bl	b5c <Sys_GetCoreID>
    fcd0:	4603      	mov	r3, r0
    fcd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    fcd4:	4a10      	ldr	r2, [pc, #64]	; (fd18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fcd6:	9b01      	ldr	r3, [sp, #4]
    fcd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d10d      	bne.n	fcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fce0:	f7f0 fe6c 	bl	9bc <Port_schm_read_msr>
    fce4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fce6:	9b00      	ldr	r3, [sp, #0]
    fce8:	f003 0301 	and.w	r3, r3, #1
    fcec:	2b00      	cmp	r3, #0
    fcee:	d100      	bne.n	fcf2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fcf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    fcf2:	490a      	ldr	r1, [pc, #40]	; (fd1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    fcf4:	9b01      	ldr	r3, [sp, #4]
    fcf6:	9a00      	ldr	r2, [sp, #0]
    fcf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    fcfc:	4a06      	ldr	r2, [pc, #24]	; (fd18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fcfe:	9b01      	ldr	r3, [sp, #4]
    fd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd04:	1c5a      	adds	r2, r3, #1
    fd06:	4904      	ldr	r1, [pc, #16]	; (fd18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fd08:	9b01      	ldr	r3, [sp, #4]
    fd0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd0e:	bf00      	nop
    fd10:	b003      	add	sp, #12
    fd12:	f85d fb04 	ldr.w	pc, [sp], #4
    fd16:	bf00      	nop
    fd18:	1fff919c 	.word	0x1fff919c
    fd1c:	1fff9198 	.word	0x1fff9198

0000fd20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fd20:	b500      	push	{lr}
    fd22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd24:	f7f0 ff1a 	bl	b5c <Sys_GetCoreID>
    fd28:	4603      	mov	r3, r0
    fd2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    fd2c:	4a0d      	ldr	r2, [pc, #52]	; (fd64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fd2e:	9b01      	ldr	r3, [sp, #4]
    fd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd34:	1e5a      	subs	r2, r3, #1
    fd36:	490b      	ldr	r1, [pc, #44]	; (fd64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fd38:	9b01      	ldr	r3, [sp, #4]
    fd3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fd3e:	4a0a      	ldr	r2, [pc, #40]	; (fd68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    fd40:	9b01      	ldr	r3, [sp, #4]
    fd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd46:	f003 0301 	and.w	r3, r3, #1
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d106      	bne.n	fd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    fd4e:	4a05      	ldr	r2, [pc, #20]	; (fd64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fd50:	9b01      	ldr	r3, [sp, #4]
    fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd56:	2b00      	cmp	r3, #0
    fd58:	d100      	bne.n	fd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd5c:	bf00      	nop
    fd5e:	b003      	add	sp, #12
    fd60:	f85d fb04 	ldr.w	pc, [sp], #4
    fd64:	1fff919c 	.word	0x1fff919c
    fd68:	1fff9198 	.word	0x1fff9198

0000fd6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fd6c:	b500      	push	{lr}
    fd6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd70:	f7f0 fef4 	bl	b5c <Sys_GetCoreID>
    fd74:	4603      	mov	r3, r0
    fd76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    fd78:	4a10      	ldr	r2, [pc, #64]	; (fdbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fd7a:	9b01      	ldr	r3, [sp, #4]
    fd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd80:	2b00      	cmp	r3, #0
    fd82:	d10d      	bne.n	fda0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd84:	f7f0 fe1a 	bl	9bc <Port_schm_read_msr>
    fd88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd8a:	9b00      	ldr	r3, [sp, #0]
    fd8c:	f003 0301 	and.w	r3, r3, #1
    fd90:	2b00      	cmp	r3, #0
    fd92:	d100      	bne.n	fd96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    fd96:	490a      	ldr	r1, [pc, #40]	; (fdc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    fd98:	9b01      	ldr	r3, [sp, #4]
    fd9a:	9a00      	ldr	r2, [sp, #0]
    fd9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    fda0:	4a06      	ldr	r2, [pc, #24]	; (fdbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fda2:	9b01      	ldr	r3, [sp, #4]
    fda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fda8:	1c5a      	adds	r2, r3, #1
    fdaa:	4904      	ldr	r1, [pc, #16]	; (fdbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fdac:	9b01      	ldr	r3, [sp, #4]
    fdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdb2:	bf00      	nop
    fdb4:	b003      	add	sp, #12
    fdb6:	f85d fb04 	ldr.w	pc, [sp], #4
    fdba:	bf00      	nop
    fdbc:	1fff91a4 	.word	0x1fff91a4
    fdc0:	1fff91a0 	.word	0x1fff91a0

0000fdc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fdc4:	b500      	push	{lr}
    fdc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdc8:	f7f0 fec8 	bl	b5c <Sys_GetCoreID>
    fdcc:	4603      	mov	r3, r0
    fdce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    fdd0:	4a0d      	ldr	r2, [pc, #52]	; (fe08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fdd2:	9b01      	ldr	r3, [sp, #4]
    fdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd8:	1e5a      	subs	r2, r3, #1
    fdda:	490b      	ldr	r1, [pc, #44]	; (fe08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fddc:	9b01      	ldr	r3, [sp, #4]
    fdde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    fde2:	4a0a      	ldr	r2, [pc, #40]	; (fe0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    fde4:	9b01      	ldr	r3, [sp, #4]
    fde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdea:	f003 0301 	and.w	r3, r3, #1
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d106      	bne.n	fe00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    fdf2:	4a05      	ldr	r2, [pc, #20]	; (fe08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fdf4:	9b01      	ldr	r3, [sp, #4]
    fdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdfa:	2b00      	cmp	r3, #0
    fdfc:	d100      	bne.n	fe00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe00:	bf00      	nop
    fe02:	b003      	add	sp, #12
    fe04:	f85d fb04 	ldr.w	pc, [sp], #4
    fe08:	1fff91a4 	.word	0x1fff91a4
    fe0c:	1fff91a0 	.word	0x1fff91a0

0000fe10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fe10:	b500      	push	{lr}
    fe12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe14:	f7f0 fea2 	bl	b5c <Sys_GetCoreID>
    fe18:	4603      	mov	r3, r0
    fe1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    fe1c:	4a10      	ldr	r2, [pc, #64]	; (fe60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fe1e:	9b01      	ldr	r3, [sp, #4]
    fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe24:	2b00      	cmp	r3, #0
    fe26:	d10d      	bne.n	fe44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe28:	f7f0 fdc8 	bl	9bc <Port_schm_read_msr>
    fe2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe2e:	9b00      	ldr	r3, [sp, #0]
    fe30:	f003 0301 	and.w	r3, r3, #1
    fe34:	2b00      	cmp	r3, #0
    fe36:	d100      	bne.n	fe3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fe3a:	490a      	ldr	r1, [pc, #40]	; (fe64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    fe3c:	9b01      	ldr	r3, [sp, #4]
    fe3e:	9a00      	ldr	r2, [sp, #0]
    fe40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    fe44:	4a06      	ldr	r2, [pc, #24]	; (fe60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fe46:	9b01      	ldr	r3, [sp, #4]
    fe48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe4c:	1c5a      	adds	r2, r3, #1
    fe4e:	4904      	ldr	r1, [pc, #16]	; (fe60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fe50:	9b01      	ldr	r3, [sp, #4]
    fe52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe56:	bf00      	nop
    fe58:	b003      	add	sp, #12
    fe5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe5e:	bf00      	nop
    fe60:	1fff91ac 	.word	0x1fff91ac
    fe64:	1fff91a8 	.word	0x1fff91a8

0000fe68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fe68:	b500      	push	{lr}
    fe6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe6c:	f7f0 fe76 	bl	b5c <Sys_GetCoreID>
    fe70:	4603      	mov	r3, r0
    fe72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    fe74:	4a0d      	ldr	r2, [pc, #52]	; (feac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fe76:	9b01      	ldr	r3, [sp, #4]
    fe78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe7c:	1e5a      	subs	r2, r3, #1
    fe7e:	490b      	ldr	r1, [pc, #44]	; (feac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fe80:	9b01      	ldr	r3, [sp, #4]
    fe82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    fe86:	4a0a      	ldr	r2, [pc, #40]	; (feb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    fe88:	9b01      	ldr	r3, [sp, #4]
    fe8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8e:	f003 0301 	and.w	r3, r3, #1
    fe92:	2b00      	cmp	r3, #0
    fe94:	d106      	bne.n	fea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    fe96:	4a05      	ldr	r2, [pc, #20]	; (feac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fe98:	9b01      	ldr	r3, [sp, #4]
    fe9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe9e:	2b00      	cmp	r3, #0
    fea0:	d100      	bne.n	fea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fea2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fea4:	bf00      	nop
    fea6:	b003      	add	sp, #12
    fea8:	f85d fb04 	ldr.w	pc, [sp], #4
    feac:	1fff91ac 	.word	0x1fff91ac
    feb0:	1fff91a8 	.word	0x1fff91a8

0000feb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    feb4:	b500      	push	{lr}
    feb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feb8:	f7f0 fe50 	bl	b5c <Sys_GetCoreID>
    febc:	4603      	mov	r3, r0
    febe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    fec0:	4a10      	ldr	r2, [pc, #64]	; (ff04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fec2:	9b01      	ldr	r3, [sp, #4]
    fec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec8:	2b00      	cmp	r3, #0
    feca:	d10d      	bne.n	fee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fecc:	f7f0 fd76 	bl	9bc <Port_schm_read_msr>
    fed0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fed2:	9b00      	ldr	r3, [sp, #0]
    fed4:	f003 0301 	and.w	r3, r3, #1
    fed8:	2b00      	cmp	r3, #0
    feda:	d100      	bne.n	fede <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fedc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    fede:	490a      	ldr	r1, [pc, #40]	; (ff08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    fee0:	9b01      	ldr	r3, [sp, #4]
    fee2:	9a00      	ldr	r2, [sp, #0]
    fee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    fee8:	4a06      	ldr	r2, [pc, #24]	; (ff04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    feea:	9b01      	ldr	r3, [sp, #4]
    feec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef0:	1c5a      	adds	r2, r3, #1
    fef2:	4904      	ldr	r1, [pc, #16]	; (ff04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fef4:	9b01      	ldr	r3, [sp, #4]
    fef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fefa:	bf00      	nop
    fefc:	b003      	add	sp, #12
    fefe:	f85d fb04 	ldr.w	pc, [sp], #4
    ff02:	bf00      	nop
    ff04:	1fff91b4 	.word	0x1fff91b4
    ff08:	1fff91b0 	.word	0x1fff91b0

0000ff0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    ff0c:	b500      	push	{lr}
    ff0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff10:	f7f0 fe24 	bl	b5c <Sys_GetCoreID>
    ff14:	4603      	mov	r3, r0
    ff16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    ff18:	4a0d      	ldr	r2, [pc, #52]	; (ff50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    ff1a:	9b01      	ldr	r3, [sp, #4]
    ff1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff20:	1e5a      	subs	r2, r3, #1
    ff22:	490b      	ldr	r1, [pc, #44]	; (ff50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    ff24:	9b01      	ldr	r3, [sp, #4]
    ff26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    ff2a:	4a0a      	ldr	r2, [pc, #40]	; (ff54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    ff2c:	9b01      	ldr	r3, [sp, #4]
    ff2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff32:	f003 0301 	and.w	r3, r3, #1
    ff36:	2b00      	cmp	r3, #0
    ff38:	d106      	bne.n	ff48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    ff3a:	4a05      	ldr	r2, [pc, #20]	; (ff50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    ff3c:	9b01      	ldr	r3, [sp, #4]
    ff3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff42:	2b00      	cmp	r3, #0
    ff44:	d100      	bne.n	ff48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff48:	bf00      	nop
    ff4a:	b003      	add	sp, #12
    ff4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff50:	1fff91b4 	.word	0x1fff91b4
    ff54:	1fff91b0 	.word	0x1fff91b0

0000ff58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    ff58:	b500      	push	{lr}
    ff5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff5c:	f7f0 fdfe 	bl	b5c <Sys_GetCoreID>
    ff60:	4603      	mov	r3, r0
    ff62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    ff64:	4a10      	ldr	r2, [pc, #64]	; (ffa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ff66:	9b01      	ldr	r3, [sp, #4]
    ff68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff6c:	2b00      	cmp	r3, #0
    ff6e:	d10d      	bne.n	ff8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff70:	f7f0 fd24 	bl	9bc <Port_schm_read_msr>
    ff74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff76:	9b00      	ldr	r3, [sp, #0]
    ff78:	f003 0301 	and.w	r3, r3, #1
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d100      	bne.n	ff82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    ff82:	490a      	ldr	r1, [pc, #40]	; (ffac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    ff84:	9b01      	ldr	r3, [sp, #4]
    ff86:	9a00      	ldr	r2, [sp, #0]
    ff88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    ff8c:	4a06      	ldr	r2, [pc, #24]	; (ffa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ff8e:	9b01      	ldr	r3, [sp, #4]
    ff90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff94:	1c5a      	adds	r2, r3, #1
    ff96:	4904      	ldr	r1, [pc, #16]	; (ffa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ff98:	9b01      	ldr	r3, [sp, #4]
    ff9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff9e:	bf00      	nop
    ffa0:	b003      	add	sp, #12
    ffa2:	f85d fb04 	ldr.w	pc, [sp], #4
    ffa6:	bf00      	nop
    ffa8:	1fff91bc 	.word	0x1fff91bc
    ffac:	1fff91b8 	.word	0x1fff91b8

0000ffb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    ffb0:	b500      	push	{lr}
    ffb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffb4:	f7f0 fdd2 	bl	b5c <Sys_GetCoreID>
    ffb8:	4603      	mov	r3, r0
    ffba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    ffbc:	4a0d      	ldr	r2, [pc, #52]	; (fff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ffbe:	9b01      	ldr	r3, [sp, #4]
    ffc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc4:	1e5a      	subs	r2, r3, #1
    ffc6:	490b      	ldr	r1, [pc, #44]	; (fff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ffc8:	9b01      	ldr	r3, [sp, #4]
    ffca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    ffce:	4a0a      	ldr	r2, [pc, #40]	; (fff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    ffd0:	9b01      	ldr	r3, [sp, #4]
    ffd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd6:	f003 0301 	and.w	r3, r3, #1
    ffda:	2b00      	cmp	r3, #0
    ffdc:	d106      	bne.n	ffec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    ffde:	4a05      	ldr	r2, [pc, #20]	; (fff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ffe0:	9b01      	ldr	r3, [sp, #4]
    ffe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe6:	2b00      	cmp	r3, #0
    ffe8:	d100      	bne.n	ffec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffec:	bf00      	nop
    ffee:	b003      	add	sp, #12
    fff0:	f85d fb04 	ldr.w	pc, [sp], #4
    fff4:	1fff91bc 	.word	0x1fff91bc
    fff8:	1fff91b8 	.word	0x1fff91b8

0000fffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fffc:	b500      	push	{lr}
    fffe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10000:	f7f0 fdac 	bl	b5c <Sys_GetCoreID>
   10004:	4603      	mov	r3, r0
   10006:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   10008:	4a10      	ldr	r2, [pc, #64]	; (1004c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1000a:	9b01      	ldr	r3, [sp, #4]
   1000c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10010:	2b00      	cmp	r3, #0
   10012:	d10d      	bne.n	10030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10014:	f7f0 fcd2 	bl	9bc <Port_schm_read_msr>
   10018:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1001a:	9b00      	ldr	r3, [sp, #0]
   1001c:	f003 0301 	and.w	r3, r3, #1
   10020:	2b00      	cmp	r3, #0
   10022:	d100      	bne.n	10026 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10024:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10026:	490a      	ldr	r1, [pc, #40]	; (10050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   10028:	9b01      	ldr	r3, [sp, #4]
   1002a:	9a00      	ldr	r2, [sp, #0]
   1002c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   10030:	4a06      	ldr	r2, [pc, #24]	; (1004c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   10032:	9b01      	ldr	r3, [sp, #4]
   10034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10038:	1c5a      	adds	r2, r3, #1
   1003a:	4904      	ldr	r1, [pc, #16]	; (1004c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1003c:	9b01      	ldr	r3, [sp, #4]
   1003e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10042:	bf00      	nop
   10044:	b003      	add	sp, #12
   10046:	f85d fb04 	ldr.w	pc, [sp], #4
   1004a:	bf00      	nop
   1004c:	1fff91c4 	.word	0x1fff91c4
   10050:	1fff91c0 	.word	0x1fff91c0

00010054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   10054:	b500      	push	{lr}
   10056:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10058:	f7f0 fd80 	bl	b5c <Sys_GetCoreID>
   1005c:	4603      	mov	r3, r0
   1005e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   10060:	4a0d      	ldr	r2, [pc, #52]	; (10098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10062:	9b01      	ldr	r3, [sp, #4]
   10064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10068:	1e5a      	subs	r2, r3, #1
   1006a:	490b      	ldr	r1, [pc, #44]	; (10098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1006c:	9b01      	ldr	r3, [sp, #4]
   1006e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10072:	4a0a      	ldr	r2, [pc, #40]	; (1009c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   10074:	9b01      	ldr	r3, [sp, #4]
   10076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1007a:	f003 0301 	and.w	r3, r3, #1
   1007e:	2b00      	cmp	r3, #0
   10080:	d106      	bne.n	10090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   10082:	4a05      	ldr	r2, [pc, #20]	; (10098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10084:	9b01      	ldr	r3, [sp, #4]
   10086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d100      	bne.n	10090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1008e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10090:	bf00      	nop
   10092:	b003      	add	sp, #12
   10094:	f85d fb04 	ldr.w	pc, [sp], #4
   10098:	1fff91c4 	.word	0x1fff91c4
   1009c:	1fff91c0 	.word	0x1fff91c0

000100a0 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   100a0:	bf00      	nop
   100a2:	4770      	bx	lr

000100a4 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   100a4:	b510      	push	{r4, lr}
   100a6:	b084      	sub	sp, #16
   100a8:	4604      	mov	r4, r0
   100aa:	4608      	mov	r0, r1
   100ac:	4611      	mov	r1, r2
   100ae:	461a      	mov	r2, r3
   100b0:	4623      	mov	r3, r4
   100b2:	f8ad 3006 	strh.w	r3, [sp, #6]
   100b6:	4603      	mov	r3, r0
   100b8:	f88d 3005 	strb.w	r3, [sp, #5]
   100bc:	460b      	mov	r3, r1
   100be:	f88d 3004 	strb.w	r3, [sp, #4]
   100c2:	4613      	mov	r3, r2
   100c4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100c8:	f7f0 fd48 	bl	b5c <Sys_GetCoreID>
   100cc:	4603      	mov	r3, r0
   100ce:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   100d0:	490d      	ldr	r1, [pc, #52]	; (10108 <Det_ReportError+0x64>)
   100d2:	9b03      	ldr	r3, [sp, #12]
   100d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   100d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   100dc:	4a0b      	ldr	r2, [pc, #44]	; (1010c <Det_ReportError+0x68>)
   100de:	9b03      	ldr	r3, [sp, #12]
   100e0:	4413      	add	r3, r2
   100e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   100e6:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   100e8:	4a09      	ldr	r2, [pc, #36]	; (10110 <Det_ReportError+0x6c>)
   100ea:	9b03      	ldr	r3, [sp, #12]
   100ec:	4413      	add	r3, r2
   100ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
   100f2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   100f4:	4a07      	ldr	r2, [pc, #28]	; (10114 <Det_ReportError+0x70>)
   100f6:	9b03      	ldr	r3, [sp, #12]
   100f8:	4413      	add	r3, r2
   100fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   100fe:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10100:	2300      	movs	r3, #0
}
   10102:	4618      	mov	r0, r3
   10104:	b004      	add	sp, #16
   10106:	bd10      	pop	{r4, pc}
   10108:	1fff91f0 	.word	0x1fff91f0
   1010c:	1fff91c8 	.word	0x1fff91c8
   10110:	1fff91cc 	.word	0x1fff91cc
   10114:	1fff91d0 	.word	0x1fff91d0

00010118 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   10118:	b510      	push	{r4, lr}
   1011a:	b084      	sub	sp, #16
   1011c:	4604      	mov	r4, r0
   1011e:	4608      	mov	r0, r1
   10120:	4611      	mov	r1, r2
   10122:	461a      	mov	r2, r3
   10124:	4623      	mov	r3, r4
   10126:	f8ad 3006 	strh.w	r3, [sp, #6]
   1012a:	4603      	mov	r3, r0
   1012c:	f88d 3005 	strb.w	r3, [sp, #5]
   10130:	460b      	mov	r3, r1
   10132:	f88d 3004 	strb.w	r3, [sp, #4]
   10136:	4613      	mov	r3, r2
   10138:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1013c:	f7f0 fd0e 	bl	b5c <Sys_GetCoreID>
   10140:	4603      	mov	r3, r0
   10142:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   10144:	490d      	ldr	r1, [pc, #52]	; (1017c <Det_ReportRuntimeError+0x64>)
   10146:	9b03      	ldr	r3, [sp, #12]
   10148:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1014c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   10150:	4a0b      	ldr	r2, [pc, #44]	; (10180 <Det_ReportRuntimeError+0x68>)
   10152:	9b03      	ldr	r3, [sp, #12]
   10154:	4413      	add	r3, r2
   10156:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1015a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   1015c:	4a09      	ldr	r2, [pc, #36]	; (10184 <Det_ReportRuntimeError+0x6c>)
   1015e:	9b03      	ldr	r3, [sp, #12]
   10160:	4413      	add	r3, r2
   10162:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10166:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   10168:	4a07      	ldr	r2, [pc, #28]	; (10188 <Det_ReportRuntimeError+0x70>)
   1016a:	9b03      	ldr	r3, [sp, #12]
   1016c:	4413      	add	r3, r2
   1016e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10172:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10174:	2300      	movs	r3, #0
}
   10176:	4618      	mov	r0, r3
   10178:	b004      	add	sp, #16
   1017a:	bd10      	pop	{r4, pc}
   1017c:	1fff91f4 	.word	0x1fff91f4
   10180:	1fff91d4 	.word	0x1fff91d4
   10184:	1fff91d8 	.word	0x1fff91d8
   10188:	1fff91dc 	.word	0x1fff91dc

0001018c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   1018c:	b510      	push	{r4, lr}
   1018e:	b084      	sub	sp, #16
   10190:	4604      	mov	r4, r0
   10192:	4608      	mov	r0, r1
   10194:	4611      	mov	r1, r2
   10196:	461a      	mov	r2, r3
   10198:	4623      	mov	r3, r4
   1019a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1019e:	4603      	mov	r3, r0
   101a0:	f88d 3005 	strb.w	r3, [sp, #5]
   101a4:	460b      	mov	r3, r1
   101a6:	f88d 3004 	strb.w	r3, [sp, #4]
   101aa:	4613      	mov	r3, r2
   101ac:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101b0:	f7f0 fcd4 	bl	b5c <Sys_GetCoreID>
   101b4:	4603      	mov	r3, r0
   101b6:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   101b8:	490d      	ldr	r1, [pc, #52]	; (101f0 <Det_ReportTransientFault+0x64>)
   101ba:	9b03      	ldr	r3, [sp, #12]
   101bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   101c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   101c4:	4a0b      	ldr	r2, [pc, #44]	; (101f4 <Det_ReportTransientFault+0x68>)
   101c6:	9b03      	ldr	r3, [sp, #12]
   101c8:	4413      	add	r3, r2
   101ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
   101ce:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   101d0:	4a09      	ldr	r2, [pc, #36]	; (101f8 <Det_ReportTransientFault+0x6c>)
   101d2:	9b03      	ldr	r3, [sp, #12]
   101d4:	4413      	add	r3, r2
   101d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   101da:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   101dc:	4a07      	ldr	r2, [pc, #28]	; (101fc <Det_ReportTransientFault+0x70>)
   101de:	9b03      	ldr	r3, [sp, #12]
   101e0:	4413      	add	r3, r2
   101e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   101e6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   101e8:	2300      	movs	r3, #0
}
   101ea:	4618      	mov	r0, r3
   101ec:	b004      	add	sp, #16
   101ee:	bd10      	pop	{r4, pc}
   101f0:	1fff91ec 	.word	0x1fff91ec
   101f4:	1fff91e0 	.word	0x1fff91e0
   101f8:	1fff91e4 	.word	0x1fff91e4
   101fc:	1fff91e8 	.word	0x1fff91e8

00010200 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   10200:	bf00      	nop
   10202:	4770      	bx	lr

00010204 <Fls_ACEraseRomEnd>:
   10204:	20636441 	.word	0x20636441
   10208:	6e616843 	.word	0x6e616843
   1020c:	206c656e 	.word	0x206c656e
   10210:	756c6176 	.word	0x756c6176
   10214:	25203a65 	.word	0x25203a65
   10218:	00000a64 	.word	0x00000a64
   1021c:	6d726554 	.word	0x6d726554
   10220:	6c616e69 	.word	0x6c616e69
   10224:	00000000 	.word	0x00000000
   10228:	4c554e28 	.word	0x4c554e28
   1022c:	0000294c 	.word	0x0000294c

00010230 <Clock_Ip_au8DividerCallbackIndex>:
   10230:	0e0d0c00 06030201 0a070409 000b0805     ................

00010240 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00010250 <Clock_Ip_au8XoscCallbackIndex>:
   10250:	00000100 00000000 00000000 00000000     ................

00010260 <Clock_Ip_au8IrcoscCallbackIndex>:
   10260:	03020100 00000004 00000000 00000000     ................

00010270 <Clock_Ip_au8GateCallbackIndex>:
   10270:	06010200 01040301 00000500 00000000     ................

00010280 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00010290 <Clock_Ip_au8PllCallbackIndex>:
   10290:	00000100 00000000 00000000 00000000     ................

000102a0 <Clock_Ip_au8SelectorCallbackIndex>:
   102a0:	0a090800 03020109 07060504 00000000     ................

000102b0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000102c0 <Clock_Ip_au8CmuCallbackIndex>:
	...

000102d0 <Clock_Ip_au8ClockFeatures>:
	...
   102e0:	01000000 00000000 00000000 00000002     ................
   102f0:	00000000 00000300 00000000 00040000     ................
   10300:	00000000 05000000 00000000 00000000     ................
   10310:	00000006 00000000 00000100 00000000     ................
   10320:	00010000 00000000 04000000 00000000     ................
   10330:	00000000 00000005 00000001 00000401     ................
   10340:	00000200 00050100 00030000 04020000     ................
   10350:	04000000 02000000 00000005 00000005     ................
   10360:	00000403 00000600 00050300 00070000     ................
   10370:	05000000 00000000 00000000 00000006     ................
	...
   103b0:	00050000 00000000 06000000 00000100     ................
   103c0:	00000000 00030007 00000000 00000000     ................
   103d0:	00000000 00060000 00000000 07000000     ................
   103e0:	00000100 00000000 00030008 00000000     ................
	...
   103f8:	00090000 00000000 0a000000 00000100     ................
   10408:	00000000 0003000b 00000000 00000000     ................
   10418:	00000000 000c0000 00000000 0d000000     ................
   10428:	00000100 00000000 0003000e 00000000     ................
   10438:	00000800 00000000 00090000 00000000     ................
   10448:	0a000000 00000000 00000000 0000000b     ................
   10458:	00000000 00000b01 00000000 000b0200     ................
   10468:	00000000 0b030000 00000000 00000000     ................
	...
   10480:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   10490:	01000000 00000000 00000000 00000007     ................
   104a0:	00007300 00000700 00320000 00090000     .s........2.....
   104b0:	02000000 07000000 00000000 00000021     ............!...
   104c0:	00000009 00000400 00000900 00030000     ................
   104d0:	00070000 61000000 07000000 00000000     .......a........
   104e0:	00000024 00000007 00002500 00000700     $........%......
   104f0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   10500:	00000000 00000020 38000004 00003800     .... ......8.8..
   10510:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   10520:	04000000 00260000 00000026 66000004     ......&.&......f
   10530:	00006600 00000400 00370037 00040000     .f......7.7.....
   10540:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   10550:	2e000004 00002e00 00000200 00404040     ............@@@.
   10560:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   10570:	0000006b 6c000004 00006c00 00000900     k......l.l......
   10580:	00010000 00090000 00000000 07000000     ................
   10590:	00000000 00000036 00000007 00003100     ....6........1..
   105a0:	00000700 00490000 00070000 4a000000     ......I........J
   105b0:	07000000 00000000 0000004b 00000007     ........K.......
   105c0:	00004c00 00000700 004d0000 00070000     .L........M.....
   105d0:	3d000000 03000000 00000000 00000000     ...=............

000105e0 <Clock_Ip_au16SelectorEntryHardwareValue>:
   105e0:	01010a03 01010001 04040002 02000603     ................
   105f0:	00010810 02020100 00000000 00000007     ................
   10600:	00000009 00000000 00000c0e 00000000     ................
	...

00010638 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   10638:	00020000 00000300 00000601 00000000     ................
	...

00010668 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   10668:	00000700 00000000 02020000 01010303     ................
   10678:	03020606 00000000 00000000 00000000     ................
	...

00010698 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10698:	00000001 00000000 02020000 01010303     ................
   106a8:	03020606 00000000 00000000 00000000     ................
	...

000106c8 <Clock_Ip_au8DividerValueHardwareValue>:
   106c8:	00020100 00000003 00000004 00000000     ................
   106d8:	00000005 00000000 00000000 00000000     ................
   106e8:	00000006 00000000 00000000 00000000     ................
	...
   10708:	00000007                                ....

0001070c <Clock_Ip_apxScgPeriphAsyncDivs>:
   1070c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0001071c <Clock_Ip_aeSourceTypeClockName>:
   1071c:	00000000 00000001 00000001 00000001     ................
   1072c:	00000001 00000001 00000001 00000001     ................
   1073c:	00000002 00000003 00000001 00000001     ................
   1074c:	00000001 00000001 00000002 00000002     ................
   1075c:	00000003 00000003 00000001 00000001     ................
   1076c:	00000004 00000004 00000004 00000004     ................
	...

000107d8 <Clock_Ip_aeHwPllName>:
   107d8:	00000009                                ....

000107dc <Clock_Ip_aeHwDfsName>:
   107dc:	00000057                                W...

000107e0 <Clock_Ip_axDividerCallbacks>:
   107e0:	00002bb9 00002bc3 00002bdd 00002bf7     .+...+...+...+..
   107f0:	00002c11 00002c2b 00002c45 00002c5f     .,..+,..E,.._,..
   10800:	00002c79 00002c93 00002cad 00002cc7     y,...,...,...,..
   10810:	00002ce1 00002cfb 00002d15              .,...,...-..

0001081c <Clock_Ip_axDividerTriggerCallbacks>:
   1081c:	00003089 00003089                       .0...0..

00010824 <Clock_Ip_axExtOscCallbacks>:
   10824:	00003095 00003095 00003095 0000309f     .0...0...0...0..
   10834:	00003095 000030a9 000030c3 000030dd     .0...0...0...0..
   10844:	00003161 00003175                       a1..u1..

0001084c <Clock_Ip_axFracDivCallbacks>:
   1084c:	00003335 00003335 0000333f              53..53..?3..

00010858 <Clock_Ip_axGateCallbacks>:
   10858:	00003359 00003363 00003463 0000347d     Y3..c3..c4..}4..
   10868:	00003413 0000342d 000033c3 000033dd     .4..-4...3...3..
   10878:	00003373 0000338d 000034b3 000034cd     s3...3...4...4..
   10888:	00003503 0000351d                       .5...5..

00010890 <Clock_Ip_axIntOscCallbacks>:
   10890:	000036c9 000036c9 000036d3 000036dd     .6...6...6...6..
   108a0:	000036f7 00003711 00003725 0000373f     .6...7..%7..?7..
   108b0:	00003759 0000376d 00003787 000037a1     Y7..m7...7...7..
   108c0:	00003849 00003863 0000387d              I8..c8..}8..

000108cc <Clock_Ip_axCmuCallbacks>:
   108cc:	00003e19 00003e23 00003e2f 00003e19     .>..#>../>...>..

000108dc <Clock_Ip_axPllCallbacks>:
   108dc:	00003e39 00003e39 00003e43 00003e39     9>..9>..C>..9>..
   108ec:	00003e4f 00003e59 00003e73 00003e8d     O>..Y>..s>...>..
   108fc:	00003f31 00003f1d                       1?...?..

00010904 <Clock_Ip_axPcfsCallbacks>:
   10904:	0000408d                                .@..

00010908 <Clock_Ip_axSelectorCallbacks>:
   10908:	00004099 00004099 000040a3 000040bd     .@...@...@...@..
   10918:	00004099 000040d7 000040f1 0000410b     .@...@...@...A..
   10928:	00004125 0000413f 00004159 00004173     %A..?A..YA..sA..
   10938:	0000418d 000041a7 000041c1 000041db     .A...A...A...A..
   10948:	000041f5 0000420f 00004229 00004243     .A...B..)B..CB..
   10958:	0000425d 00004277                       ]B..wB..

00010960 <ClockSource>:
   10960:	00000000 00000008 00000002 00000005     ................
	...
   10978:	00000009                                ....

0001097c <ResetReasonArray>:
   1097c:	00000000 00000001 00000002 00000003     ................
   1098c:	00000004 00000005 00000006 00000007     ................
   1099c:	00000008 00000009 0000000a 0000000b     ................
   109ac:	0000000c 0000000d 0000000e              ............

000109b8 <Port_au32PortCiPortBaseAddr>:
   109b8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   109c8:	4004d000                                ...@

000109cc <Port_au32PortCiGpioBaseAddr>:
   109cc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   109dc:	400ff100                                ...@

000109e0 <Adc_Ip_apxBase>:
   109e0:	4003b000 40027000                       ...@.p.@

000109e8 <Pdb_Adc_Ip_apxBase>:
   109e8:	40036000 40031000                       .`.@...@

000109f0 <AdcIpChansConfig_0>:
   109f0:	00000000 00000005 00000000              ............

000109fc <AdcIpConfig_0>:
   109fc:	00000000 00000003 00000000 0000000c     ................
   10a0c:	00000000 00000001 00000001 00000000     ................
	...
   10a24:	00ff0000 00000000 00000000 000109f0     ................
   10a34:	0000a435                                5...

00010a38 <AdcIpwCfg>:
   10a38:	000109fc 00000000 00010f04 00000000     ................
   10a48:	ff01ff00 00000001 00000001 0001ffff     ................
   10a58:	0000ff00                                ....

00010a5c <AdcIpwGroupConfig_0>:
	...
   10a64:	000000c8 00010000 00000000              ............

00010a70 <Adc_Group0_Assignment_0>:
   10a70:	00000000                                ....

00010a74 <Adc_GroupsCfg>:
	...
   10a8c:	000015bd 00000000 00000001 00010a70     ............p...
   10a9c:	00050001 00000005 00000000 00010a5c     ............\...

00010aac <Adc_au16GroupIdToIndexMap>:
   10aac:	00000000                                ....

00010ab0 <Adc_Partition_Assignment>:
   10ab0:	00000000                                ....

00010ab4 <Adc_Config>:
   10ab4:	00010a38 00010a74 00000001 00010aac     8...t...........
   10ac4:	00000000 00010ab0 00000001              ............

00010ad0 <Mcu_aClockConfigPB>:
	...
   10ad8:	1c000101 04000010 01000029 00000005     ........).......
   10ae8:	00000001 00000000 00000057 00000000     ........W.......
   10af8:	00000000 00000008 007a1200 00000001     ..........z.....
   10b08:	00000001 00000000 00000057 00000000     ........W.......
   10b18:	00000057 00000000 00000000 00000000     W...............
	...
   10b38:	00000019 00000005 0000001a 00000002     ................
   10b48:	0000001b 00000005 0000002a 00000005     ........*.......
   10b58:	00000028 0000000e 00000029 00000001     (.......).......
   10b68:	00000056 0000001c 00000032 0000002a     V.......2...*...
   10b78:	0000002b 00000014 0000002c 00000014     +.......,.......
   10b88:	0000002d 00000014 0000002e 00000014     -...............
   10b98:	0000003f 00000000 00000040 00000000     ?.......@.......
   10ba8:	00000041 00000000 00000042 00000000     A.......B.......
   10bb8:	00000031 00000000 00000045 00000000     1.......E.......
   10bc8:	00000046 00000000 00000047 00000000     F.......G.......
   10bd8:	00000044 00000000 00000030 0000000d     D.......0.......
   10be8:	0000003d 00000000 00000043 00000000     =.......C.......
   10bf8:	00000049 00000000 0000004a 00000000     I.......J.......
   10c08:	0000004b 00000000 00000048 00000000     K.......H.......
   10c18:	0000000c 00000001 00000000 0000000d     ................
   10c28:	00000002 00000000 0000000e 00000001     ................
   10c38:	00000000 0000000f 00000001 00000000     ................
   10c48:	0000001d 00000001 00000000 0000001e     ................
   10c58:	00000008 00000000 0000001f 00000001     ................
   10c68:	00000000 00000021 00000001 00000000     ....!...........
   10c78:	00000022 00000002 00000000 00000023     "...........#...
   10c88:	00000001 00000000 00000025 00000003     ........%.......
   10c98:	00000000 00000026 00000004 00000000     ....&...........
   10ca8:	00000027 00000002 00000000 00000032     '...........2...
   10cb8:	00000001 00000000 00000048 00000001     ........H.......
   10cc8:	00000001 00000056 00000001 00000001     ....V...........
   10cd8:	00000057 00000000 00000000 00000057     W...........W...
	...
   10cf0:	00000057 00000000 00000000 00000057     W...........W...
	...
   10d08:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   10d24:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10d34:	00000016 00007d00 00000017 00008000     .....}..........
   10d44:	00000012 00000001 00000013 00000001     ................
   10d54:	00000030 00000001 00000031 00000000     0.......1.......
   10d64:	00000032 00000000 00000033 00000000     2.......3.......
   10d74:	00000034 00000000 00000035 00000001     4.......5.......
   10d84:	00000036 00000000 00000037 00000001     6.......7.......
   10d94:	00000038 00000001 00000039 00000000     8.......9.......
   10da4:	0000003a 00000000 0000003b 00000000     :.......;.......
   10db4:	0000003c 00000000 0000003d 00000000     <.......=.......
   10dc4:	0000003e 00000000 0000003f 00000000     >.......?.......
   10dd4:	00000040 00000000 00000041 00000000     @.......A.......
   10de4:	00000042 00000000 00000043 00000000     B.......C.......
   10df4:	00000044 00000000 00000045 00000000     D.......E.......
   10e04:	00000046 00000000 00000047 00000000     F.......G.......
   10e14:	00000048 00000000 00000049 00000000     H.......I.......
   10e24:	0000004a 00000000 0000004b 00000000     J.......K.......
   10e34:	0000004c 00000001 0000004d 00000001     L.......M.......
   10e44:	0000004e 00000001 0000004f 00000000     N.......O.......
   10e54:	00000050 00000001 00000051 00000001     P.......Q.......
   10e64:	00000052 00000001 00000053 00000001     R.......S.......
   10e74:	00000054 00000001 00000055 00000000     T.......U.......
   10e84:	00000056 00000001 00000057 00000000     V.......W.......
   10e94:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010ec8 <aIrqConfiguration>:
   10ec8:	00000027 00000f01 00008c1d              '...........

00010ed4 <intCtrlConfig>:
   10ed4:	00000001 00010ec8                       ........

00010edc <Mcu_Config>:
   10edc:	0000005a 00000000 00000001 00000001     Z...............
   10eec:	00011060 00010ad0 0001106c              `.......l...

00010ef8 <OsIf_xPredefinedConfig>:
   10ef8:	00000000 02dc6c00                       .....l..

00010f00 <OsIf_apxPredefinedConfig>:
   10f00:	00010ef8                                ....

00010f04 <PdbAdcIpConfig_0>:
	...
   10f10:	0000000f ffff0000 00000000 00000000     ................
   10f20:	00000000                                ....

00010f24 <Platform_uConfiguration>:
   10f24:	00010f2c                                ,...

00010f28 <Platform_Config>:
   10f28:	00010f24                                $...

00010f2c <ipwConfig>:
   10f2c:	00010ed4 00000000                       ........

00010f34 <g_pin_mux_InitConfigArr>:
   10f34:	4004a000 00000000 00000001 00000002     ...@............
   10f44:	00000000 00000002 00000000 00000000     ................
	...

00010f5c <au8Port_PartitionList>:
   10f5c:	00000001                                ....

00010f60 <au32Port_PinToPartitionMap>:
   10f60:	00000001                                ....

00010f64 <Port_au16NoUnUsedPadsArrayDefault>:
   10f64:	00010000 00030002 00070006 00090008     ................
   10f74:	000c000b 000e000d 0010000f 00200011     .............. .
   10f84:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10f94:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   10fa4:	00410040 00430042 00470046 00490048     @.A.B.C.F.G.H.I.
   10fb4:	004b004a 004d004c 004f004e 00510050     J.K.L.M.N.O.P.Q.
   10fc4:	00610060 00630062 00650064 00670066     `.a.b.c.d.e.f.g.
   10fd4:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
   10fe4:	00710070 00810080 00830082 00850084     p.q.............
   10ff4:	00870086 00890088 008b008a 008d008c     ................
   11004:	008f008e 00000090                       ........

0001100c <Port_UnUsedPin>:
   1100c:	00000100 00000001 00000000              ............

00011018 <Port_aPinConfigDefault>:
   11018:	00000021 00000000 00000002 00000000     !...............
   11028:	00010000                                ....

0001102c <Port_Config>:
   1102c:	00530001 00010f64 0001100c 00011018     ..S.d...........
	...
   11044:	00010f60 00010f5c 00010f34              `...\...4...

00011050 <Power_Ip_RCM_ConfigPB>:
	...

00011058 <Power_Ip_PMC_ConfigPB>:
   11058:	00000000                                ....

0001105c <Power_Ip_SMC_ConfigPB>:
   1105c:	00000000                                ....

00011060 <Power_Ip_aModeConfigPB>:
	...

0001106c <Power_Ip_HwIPsConfigPB>:
   1106c:	00011050 00011058 0001105c              P...X...\...

00011078 <_aInitStr.0>:
   11078:	00000000 54540000 45522052 53454747     ......TTR REGGES
   11088:	00000000                                ....

0001108c <_aV2C.0>:
   1108c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001109c <__INIT_TABLE>:
   1109c:	00000002 	.word	0x00000002
   110a0:	1fff8b10 	.word	0x1fff8b10
   110a4:	000110c4 	.word	0x000110c4
   110a8:	000110d8 	.word	0x000110d8
   110ac:	1fff8800 	.word	0x1fff8800
   110b0:	00000000 	.word	0x00000000
   110b4:	00000310 	.word	0x00000310

000110b8 <__ZERO_TABLE>:
   110b8:	00000001 	.word	0x00000001
   110bc:	1fff8b30 	.word	0x1fff8b30
   110c0:	1fff96c0 	.word	0x1fff96c0
