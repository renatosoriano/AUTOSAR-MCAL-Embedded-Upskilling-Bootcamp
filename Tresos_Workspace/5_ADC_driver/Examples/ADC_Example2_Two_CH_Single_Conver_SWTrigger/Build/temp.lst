
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b6f 	.word	0x00000b6f
  10:	00000b71 	.word	0x00000b71
  14:	00000b73 	.word	0x00000b73
  18:	00000b75 	.word	0x00000b75
	...
  2c:	00000b77 	.word	0x00000b77
  30:	00000b79 	.word	0x00000b79
  34:	00000000 	.word	0x00000000
  38:	00000b7b 	.word	0x00000b7b
  3c:	00000b7d 	.word	0x00000b7d
  40:	00000b7f 	.word	0x00000b7f
  44:	00000b7f 	.word	0x00000b7f
  48:	00000b7f 	.word	0x00000b7f
  4c:	00000b7f 	.word	0x00000b7f
  50:	00000b7f 	.word	0x00000b7f
  54:	00000b7f 	.word	0x00000b7f
  58:	00000b7f 	.word	0x00000b7f
  5c:	00000b7f 	.word	0x00000b7f
  60:	00000b7f 	.word	0x00000b7f
  64:	00000b7f 	.word	0x00000b7f
  68:	00000b7f 	.word	0x00000b7f
  6c:	00000b7f 	.word	0x00000b7f
  70:	00000b7f 	.word	0x00000b7f
  74:	00000b7f 	.word	0x00000b7f
  78:	00000b7f 	.word	0x00000b7f
  7c:	00000b7f 	.word	0x00000b7f
  80:	00000b7f 	.word	0x00000b7f
  84:	00000b7f 	.word	0x00000b7f
  88:	00000b7f 	.word	0x00000b7f
  8c:	00000b7f 	.word	0x00000b7f
  90:	00000b7f 	.word	0x00000b7f
  94:	00000b7f 	.word	0x00000b7f
  98:	00000b7f 	.word	0x00000b7f
  9c:	00000b7f 	.word	0x00000b7f
  a0:	00000b7f 	.word	0x00000b7f
  a4:	00000b7f 	.word	0x00000b7f
  a8:	00000b7f 	.word	0x00000b7f
  ac:	00000b7f 	.word	0x00000b7f
  b0:	00000b7f 	.word	0x00000b7f
  b4:	00000b7f 	.word	0x00000b7f
  b8:	00000b7f 	.word	0x00000b7f
  bc:	00000b7f 	.word	0x00000b7f
  c0:	00000b7f 	.word	0x00000b7f
  c4:	00000b7f 	.word	0x00000b7f
  c8:	00000b7f 	.word	0x00000b7f
  cc:	00000b7f 	.word	0x00000b7f
  d0:	00000b7f 	.word	0x00000b7f
  d4:	00000b7f 	.word	0x00000b7f
  d8:	00000b7f 	.word	0x00000b7f
  dc:	00000b7f 	.word	0x00000b7f
  e0:	00000b7f 	.word	0x00000b7f
  e4:	00000b7f 	.word	0x00000b7f
  e8:	00000b7f 	.word	0x00000b7f
  ec:	00000b7f 	.word	0x00000b7f
  f0:	00000b7f 	.word	0x00000b7f
  f4:	00000b7f 	.word	0x00000b7f
  f8:	00000b7f 	.word	0x00000b7f
  fc:	00000b7f 	.word	0x00000b7f
 100:	00000b7f 	.word	0x00000b7f
 104:	00000b7f 	.word	0x00000b7f
 108:	00000b7f 	.word	0x00000b7f
 10c:	00000b7f 	.word	0x00000b7f
 110:	00000b7f 	.word	0x00000b7f
 114:	00000b7f 	.word	0x00000b7f
 118:	00000b7f 	.word	0x00000b7f
 11c:	00000b7f 	.word	0x00000b7f
 120:	00000b7f 	.word	0x00000b7f
 124:	00000b7f 	.word	0x00000b7f
 128:	00000b7f 	.word	0x00000b7f
 12c:	00000b7f 	.word	0x00000b7f
 130:	00000b7f 	.word	0x00000b7f
 134:	00000b7f 	.word	0x00000b7f
 138:	00000b7f 	.word	0x00000b7f
 13c:	00000b7f 	.word	0x00000b7f
 140:	00000b7f 	.word	0x00000b7f
 144:	00000b7f 	.word	0x00000b7f
 148:	00000b7f 	.word	0x00000b7f
 14c:	00000b7f 	.word	0x00000b7f
 150:	00000b7f 	.word	0x00000b7f
 154:	00000b7f 	.word	0x00000b7f
 158:	00000b7f 	.word	0x00000b7f
 15c:	00000b7f 	.word	0x00000b7f
 160:	00000b7f 	.word	0x00000b7f
 164:	00000b7f 	.word	0x00000b7f
 168:	00000b7f 	.word	0x00000b7f
 16c:	00000b7f 	.word	0x00000b7f
 170:	00000b7f 	.word	0x00000b7f
 174:	00000b7f 	.word	0x00000b7f
 178:	00000b7f 	.word	0x00000b7f
 17c:	00000b7f 	.word	0x00000b7f
 180:	00000b7f 	.word	0x00000b7f
 184:	00000b7f 	.word	0x00000b7f
 188:	00000b7f 	.word	0x00000b7f
 18c:	00000b7f 	.word	0x00000b7f
 190:	00000b7f 	.word	0x00000b7f
 194:	00000b7f 	.word	0x00000b7f
 198:	00000b7f 	.word	0x00000b7f
 19c:	00000b7f 	.word	0x00000b7f
 1a0:	00000b7f 	.word	0x00000b7f
 1a4:	00000b7f 	.word	0x00000b7f
 1a8:	00000b7f 	.word	0x00000b7f
 1ac:	00000b7f 	.word	0x00000b7f
 1b0:	00000b7f 	.word	0x00000b7f
 1b4:	00000b7f 	.word	0x00000b7f
 1b8:	00000b7f 	.word	0x00000b7f
 1bc:	00000b7f 	.word	0x00000b7f
 1c0:	00000b7f 	.word	0x00000b7f
 1c4:	00000b7f 	.word	0x00000b7f
 1c8:	00000b7f 	.word	0x00000b7f
 1cc:	00000b7f 	.word	0x00000b7f
 1d0:	00000b7f 	.word	0x00000b7f
 1d4:	00000b7f 	.word	0x00000b7f
 1d8:	00000b7f 	.word	0x00000b7f
 1dc:	00000b7f 	.word	0x00000b7f
 1e0:	00000b7f 	.word	0x00000b7f
 1e4:	00000b7f 	.word	0x00000b7f
 1e8:	00000b7f 	.word	0x00000b7f
 1ec:	00000b7f 	.word	0x00000b7f
 1f0:	00000b7f 	.word	0x00000b7f
 1f4:	00000b7f 	.word	0x00000b7f
 1f8:	00000b7f 	.word	0x00000b7f
 1fc:	00000b7f 	.word	0x00000b7f
 200:	00000b7f 	.word	0x00000b7f
 204:	00000b7f 	.word	0x00000b7f
 208:	00000b7f 	.word	0x00000b7f
 20c:	00000b7f 	.word	0x00000b7f
 210:	00000b7f 	.word	0x00000b7f
 214:	00000b7f 	.word	0x00000b7f
 218:	00000b7f 	.word	0x00000b7f
 21c:	00000b7f 	.word	0x00000b7f
 220:	00000b7f 	.word	0x00000b7f
 224:	00000b7f 	.word	0x00000b7f
 228:	00000b7f 	.word	0x00000b7f
 22c:	00000b7f 	.word	0x00000b7f
 230:	00000b7f 	.word	0x00000b7f
 234:	00000b7f 	.word	0x00000b7f
 238:	00000b7f 	.word	0x00000b7f
 23c:	00000b7f 	.word	0x00000b7f
 240:	00000b7f 	.word	0x00000b7f
 244:	00000b7f 	.word	0x00000b7f
 248:	00000b7f 	.word	0x00000b7f
 24c:	00000b7f 	.word	0x00000b7f
 250:	00000b7f 	.word	0x00000b7f
 254:	00000b7f 	.word	0x00000b7f
 258:	00000b7f 	.word	0x00000b7f
 25c:	00000b7f 	.word	0x00000b7f
 260:	00000b7f 	.word	0x00000b7f
 264:	00000b7f 	.word	0x00000b7f
 268:	00000b7f 	.word	0x00000b7f
 26c:	00000b7f 	.word	0x00000b7f
 270:	00000b7f 	.word	0x00000b7f
 274:	00000b7f 	.word	0x00000b7f
 278:	00000b7f 	.word	0x00000b7f
 27c:	00000b7f 	.word	0x00000b7f
 280:	00000b7f 	.word	0x00000b7f
 284:	00000b7f 	.word	0x00000b7f
 288:	00000b7f 	.word	0x00000b7f
 28c:	00000b7f 	.word	0x00000b7f
 290:	00000b7f 	.word	0x00000b7f
 294:	00000b7f 	.word	0x00000b7f
 298:	00000b7f 	.word	0x00000b7f
 29c:	00000b7f 	.word	0x00000b7f
 2a0:	00000b7f 	.word	0x00000b7f
 2a4:	00000b7f 	.word	0x00000b7f
 2a8:	00000b7f 	.word	0x00000b7f
 2ac:	00000b7f 	.word	0x00000b7f
 2b0:	00000b7f 	.word	0x00000b7f
 2b4:	00000b7f 	.word	0x00000b7f
 2b8:	00000b7f 	.word	0x00000b7f
 2bc:	00000b7f 	.word	0x00000b7f
 2c0:	00000b7f 	.word	0x00000b7f
 2c4:	00000b7f 	.word	0x00000b7f
 2c8:	00000b7f 	.word	0x00000b7f
 2cc:	00000b7f 	.word	0x00000b7f
 2d0:	00000b7f 	.word	0x00000b7f
 2d4:	00000b7f 	.word	0x00000b7f
 2d8:	00000b7f 	.word	0x00000b7f
 2dc:	00000b7f 	.word	0x00000b7f
 2e0:	00000b7f 	.word	0x00000b7f
 2e4:	00000b7f 	.word	0x00000b7f
 2e8:	00000b7f 	.word	0x00000b7f
 2ec:	00000b7f 	.word	0x00000b7f
 2f0:	00000b7f 	.word	0x00000b7f
 2f4:	00000b7f 	.word	0x00000b7f
 2f8:	00000b7f 	.word	0x00000b7f
 2fc:	00000b7f 	.word	0x00000b7f
 300:	00000b7f 	.word	0x00000b7f
 304:	00000b7f 	.word	0x00000b7f
 308:	00000b7f 	.word	0x00000b7f
 30c:	00000b7f 	.word	0x00000b7f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faab 	bl	9dc <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb6a 	bl	b64 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91f0 	.word	0x1fff91f0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fab5 	bl	b08 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    AdcReadGroupBuffer[2];
    Adc_ValueGroupType    ResultBuffer[2];

    EcuM_Init();
     8b4:	f000 f832 	bl	91c <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b8:	f000 faf4 	bl	ea4 <SEGGER_RTT_Init>

    /* By default ADC0-CH8 is not connected to B13, but with this function
    it will, this is called Interleave, read RM page 1194*/
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     8bc:	2208      	movs	r2, #8
     8be:	210d      	movs	r1, #13
     8c0:	4814      	ldr	r0, [pc, #80]	; (914 <main+0x64>)
     8c2:	f005 fc73 	bl	61ac <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8c6:	ab03      	add	r3, sp, #12
     8c8:	4619      	mov	r1, r3
     8ca:	2000      	movs	r0, #0
     8cc:	f007 f97c 	bl	7bc8 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     8d0:	ab01      	add	r3, sp, #4
     8d2:	4619      	mov	r1, r3
     8d4:	2000      	movs	r0, #0
     8d6:	f006 ff19 	bl	770c <Adc_SetupResultBuffer>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     8da:	2000      	movs	r0, #0
     8dc:	f006 ffb0 	bl	7840 <Adc_StartGroupConversion>
        /* Wait until the conversion is done */
        while( Adc_GetGroupStatus( AdcGroup_0 ) == ADC_BUSY );
     8e0:	bf00      	nop
     8e2:	2000      	movs	r0, #0
     8e4:	f007 f889 	bl	79fa <Adc_GetGroupStatus>
     8e8:	4603      	mov	r3, r0
     8ea:	2b01      	cmp	r3, #1
     8ec:	d0f9      	beq.n	8e2 <main+0x32>
        /* Read ready conversion */
        Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );
     8ee:	ab02      	add	r3, sp, #8
     8f0:	4619      	mov	r1, r3
     8f2:	2000      	movs	r0, #0
     8f4:	f007 f83c 	bl	7970 <Adc_ReadGroup>
        /* Display value */
        SEGGER_RTT_printf( 0, "ADC1 value: %d, ADC2 value: %d\n", 
            AdcReadGroupBuffer[AdcChannel_0], AdcReadGroupBuffer[AdcChannel_1] );
     8f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        SEGGER_RTT_printf( 0, "ADC1 value: %d, ADC2 value: %d\n", 
     8fc:	461a      	mov	r2, r3
            AdcReadGroupBuffer[AdcChannel_0], AdcReadGroupBuffer[AdcChannel_1] );
     8fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        SEGGER_RTT_printf( 0, "ADC1 value: %d, ADC2 value: %d\n", 
     902:	4905      	ldr	r1, [pc, #20]	; (918 <main+0x68>)
     904:	2000      	movs	r0, #0
     906:	f000 fe35 	bl	1574 <SEGGER_RTT_printf>
        Delay( 2000u );
     90a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     90e:	f000 f823 	bl	958 <Delay>
    {
     912:	e7e2      	b.n	8da <main+0x2a>
     914:	4004a000 	.word	0x4004a000
     918:	0000ffa8 	.word	0x0000ffa8

0000091c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     91c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     91e:	480b      	ldr	r0, [pc, #44]	; (94c <EcuM_Init+0x30>)
     920:	f004 fe6e 	bl	5600 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     924:	2000      	movs	r0, #0
     926:	f004 febf 	bl	56a8 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     92a:	2000      	movs	r0, #0
     92c:	f004 fee0 	bl	56f0 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     930:	2000      	movs	r0, #0
     932:	f001 f8d0 	bl	1ad6 <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     936:	2000      	movs	r0, #0
     938:	f000 ffca 	bl	18d0 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5 (B1) and ADC0-SE8 (B13) */
    Port_Init( &Port_Config );
     93c:	4804      	ldr	r0, [pc, #16]	; (950 <EcuM_Init+0x34>)
     93e:	f005 fa61 	bl	5e04 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     942:	4804      	ldr	r0, [pc, #16]	; (954 <EcuM_Init+0x38>)
     944:	f006 fe94 	bl	7670 <Adc_Init>
}
     948:	bf00      	nop
     94a:	bd08      	pop	{r3, pc}
     94c:	00010c90 	.word	0x00010c90
     950:	00010e1c 	.word	0x00010e1c
     954:	00010868 	.word	0x00010868

00000958 <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     958:	b500      	push	{lr}
     95a:	b087      	sub	sp, #28
     95c:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     95e:	9b01      	ldr	r3, [sp, #4]
     960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     964:	fb02 f303 	mul.w	r3, r2, r3
     968:	2101      	movs	r1, #1
     96a:	4618      	mov	r0, r3
     96c:	f001 f908 	bl	1b80 <OsIf_MicrosToTicks>
     970:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     972:	2001      	movs	r0, #1
     974:	f001 f8b8 	bl	1ae8 <OsIf_GetCounter>
     978:	4603      	mov	r3, r0
     97a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     97c:	2300      	movs	r3, #0
     97e:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     980:	ab03      	add	r3, sp, #12
     982:	2101      	movs	r1, #1
     984:	4618      	mov	r0, r3
     986:	f001 f8c8 	bl	1b1a <OsIf_GetElapsed>
     98a:	4602      	mov	r2, r0
     98c:	9b05      	ldr	r3, [sp, #20]
     98e:	4413      	add	r3, r2
     990:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     992:	9a05      	ldr	r2, [sp, #20]
     994:	9b04      	ldr	r3, [sp, #16]
     996:	429a      	cmp	r2, r3
     998:	d3f2      	bcc.n	980 <Delay+0x28>
     99a:	bf00      	nop
     99c:	bf00      	nop
     99e:	b007      	add	sp, #28
     9a0:	f85d fb04 	ldr.w	pc, [sp], #4

000009a4 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     9a4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9a6:	f3ef 8310 	mrs	r3, PRIMASK
     9aa:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9ac:	4623      	mov	r3, r4
}
     9ae:	4618      	mov	r0, r3
     9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
     9b4:	4770      	bx	lr

000009b6 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9b6:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9b8:	f3ef 8310 	mrs	r3, PRIMASK
     9bc:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9be:	4623      	mov	r3, r4
}
     9c0:	4618      	mov	r0, r3
     9c2:	f85d 4b04 	ldr.w	r4, [sp], #4
     9c6:	4770      	bx	lr

000009c8 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9c8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ca:	f3ef 8310 	mrs	r3, PRIMASK
     9ce:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9d0:	4623      	mov	r3, r4
}
     9d2:	4618      	mov	r0, r3
     9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9d8:	4770      	bx	lr
	...

000009dc <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     9dc:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     9de:	2300      	movs	r3, #0
     9e0:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     9e2:	2300      	movs	r3, #0
     9e4:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     9e6:	2300      	movs	r3, #0
     9e8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9ea:	2300      	movs	r3, #0
     9ec:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     9ee:	4b44      	ldr	r3, [pc, #272]	; (b00 <init_data_bss+0x124>)
     9f0:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     9f2:	4b44      	ldr	r3, [pc, #272]	; (b04 <init_data_bss+0x128>)
     9f4:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     9f6:	9b05      	ldr	r3, [sp, #20]
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     9fc:	9b05      	ldr	r3, [sp, #20]
     9fe:	3304      	adds	r3, #4
     a00:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a02:	9b05      	ldr	r3, [sp, #20]
     a04:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a06:	2300      	movs	r3, #0
     a08:	9309      	str	r3, [sp, #36]	; 0x24
     a0a:	e03d      	b.n	a88 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a0e:	4613      	mov	r3, r2
     a10:	005b      	lsls	r3, r3, #1
     a12:	4413      	add	r3, r2
     a14:	009b      	lsls	r3, r3, #2
     a16:	461a      	mov	r2, r3
     a18:	9b03      	ldr	r3, [sp, #12]
     a1a:	4413      	add	r3, r2
     a1c:	685b      	ldr	r3, [r3, #4]
     a1e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a22:	4613      	mov	r3, r2
     a24:	005b      	lsls	r3, r3, #1
     a26:	4413      	add	r3, r2
     a28:	009b      	lsls	r3, r3, #2
     a2a:	461a      	mov	r2, r3
     a2c:	9b03      	ldr	r3, [sp, #12]
     a2e:	4413      	add	r3, r2
     a30:	681b      	ldr	r3, [r3, #0]
     a32:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a36:	4613      	mov	r3, r2
     a38:	005b      	lsls	r3, r3, #1
     a3a:	4413      	add	r3, r2
     a3c:	009b      	lsls	r3, r3, #2
     a3e:	461a      	mov	r2, r3
     a40:	9b03      	ldr	r3, [sp, #12]
     a42:	4413      	add	r3, r2
     a44:	689b      	ldr	r3, [r3, #8]
     a46:	4619      	mov	r1, r3
     a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a4a:	4613      	mov	r3, r2
     a4c:	005b      	lsls	r3, r3, #1
     a4e:	4413      	add	r3, r2
     a50:	009b      	lsls	r3, r3, #2
     a52:	461a      	mov	r2, r3
     a54:	9b03      	ldr	r3, [sp, #12]
     a56:	4413      	add	r3, r2
     a58:	685b      	ldr	r3, [r3, #4]
     a5a:	1acb      	subs	r3, r1, r3
     a5c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a5e:	2300      	movs	r3, #0
     a60:	9308      	str	r3, [sp, #32]
     a62:	e00a      	b.n	a7a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a64:	9a00      	ldr	r2, [sp, #0]
     a66:	9b08      	ldr	r3, [sp, #32]
     a68:	441a      	add	r2, r3
     a6a:	9901      	ldr	r1, [sp, #4]
     a6c:	9b08      	ldr	r3, [sp, #32]
     a6e:	440b      	add	r3, r1
     a70:	7812      	ldrb	r2, [r2, #0]
     a72:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a74:	9b08      	ldr	r3, [sp, #32]
     a76:	3301      	adds	r3, #1
     a78:	9308      	str	r3, [sp, #32]
     a7a:	9a08      	ldr	r2, [sp, #32]
     a7c:	9b06      	ldr	r3, [sp, #24]
     a7e:	429a      	cmp	r2, r3
     a80:	d3f0      	bcc.n	a64 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a84:	3301      	adds	r3, #1
     a86:	9309      	str	r3, [sp, #36]	; 0x24
     a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a8a:	9b07      	ldr	r3, [sp, #28]
     a8c:	429a      	cmp	r2, r3
     a8e:	d3bd      	bcc.n	a0c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a90:	9b04      	ldr	r3, [sp, #16]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a96:	9b04      	ldr	r3, [sp, #16]
     a98:	3304      	adds	r3, #4
     a9a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a9c:	9b04      	ldr	r3, [sp, #16]
     a9e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     aa0:	2300      	movs	r3, #0
     aa2:	9309      	str	r3, [sp, #36]	; 0x24
     aa4:	e024      	b.n	af0 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aa8:	00db      	lsls	r3, r3, #3
     aaa:	9a02      	ldr	r2, [sp, #8]
     aac:	4413      	add	r3, r2
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ab4:	00db      	lsls	r3, r3, #3
     ab6:	9a02      	ldr	r2, [sp, #8]
     ab8:	4413      	add	r3, r2
     aba:	685b      	ldr	r3, [r3, #4]
     abc:	4619      	mov	r1, r3
     abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ac0:	00db      	lsls	r3, r3, #3
     ac2:	9a02      	ldr	r2, [sp, #8]
     ac4:	4413      	add	r3, r2
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	1acb      	subs	r3, r1, r3
     aca:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     acc:	2300      	movs	r3, #0
     ace:	9308      	str	r3, [sp, #32]
     ad0:	e007      	b.n	ae2 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     ad2:	9a01      	ldr	r2, [sp, #4]
     ad4:	9b08      	ldr	r3, [sp, #32]
     ad6:	4413      	add	r3, r2
     ad8:	2200      	movs	r2, #0
     ada:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     adc:	9b08      	ldr	r3, [sp, #32]
     ade:	3301      	adds	r3, #1
     ae0:	9308      	str	r3, [sp, #32]
     ae2:	9a08      	ldr	r2, [sp, #32]
     ae4:	9b06      	ldr	r3, [sp, #24]
     ae6:	429a      	cmp	r2, r3
     ae8:	d3f3      	bcc.n	ad2 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aec:	3301      	adds	r3, #1
     aee:	9309      	str	r3, [sp, #36]	; 0x24
     af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     af2:	9b07      	ldr	r3, [sp, #28]
     af4:	429a      	cmp	r2, r3
     af6:	d3d6      	bcc.n	aa6 <init_data_bss+0xca>
        }
    }
}
     af8:	bf00      	nop
     afa:	bf00      	nop
     afc:	b00a      	add	sp, #40	; 0x28
     afe:	4770      	bx	lr
     b00:	00010e8c 	.word	0x00010e8c
     b04:	00010ea8 	.word	0x00010ea8

00000b08 <sys_m4_cache_init>:
{
     b08:	b084      	sub	sp, #16
     b0a:	4603      	mov	r3, r0
     b0c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b10:	2300      	movs	r3, #0
     b12:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b16:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d118      	bne.n	b50 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b1e:	4b10      	ldr	r3, [pc, #64]	; (b60 <sys_m4_cache_init+0x58>)
     b20:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b24:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b26:	4b0e      	ldr	r3, [pc, #56]	; (b60 <sys_m4_cache_init+0x58>)
     b28:	681b      	ldr	r3, [r3, #0]
     b2a:	4a0d      	ldr	r2, [pc, #52]	; (b60 <sys_m4_cache_init+0x58>)
     b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b30:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b32:	bf00      	nop
     b34:	4b0a      	ldr	r3, [pc, #40]	; (b60 <sys_m4_cache_init+0x58>)
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b40:	d0f8      	beq.n	b34 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b42:	4b07      	ldr	r3, [pc, #28]	; (b60 <sys_m4_cache_init+0x58>)
     b44:	681b      	ldr	r3, [r3, #0]
     b46:	4a06      	ldr	r2, [pc, #24]	; (b60 <sys_m4_cache_init+0x58>)
     b48:	f043 0301 	orr.w	r3, r3, #1
     b4c:	6013      	str	r3, [r2, #0]
     b4e:	e002      	b.n	b56 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b50:	2301      	movs	r3, #1
     b52:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b56:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b5a:	4618      	mov	r0, r3
     b5c:	b004      	add	sp, #16
     b5e:	4770      	bx	lr
     b60:	e0082000 	.word	0xe0082000

00000b64 <startup_go_to_user_mode>:
}
     b64:	bf00      	nop
     b66:	4770      	bx	lr

00000b68 <Sys_GetCoreID>:
    return 0U;
     b68:	2300      	movs	r3, #0
}
     b6a:	4618      	mov	r0, r3
     b6c:	4770      	bx	lr

00000b6e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b6e:	e7fe      	b.n	b6e <HardFault_Handler>

00000b70 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b70:	e7fe      	b.n	b70 <MemManage_Handler>

00000b72 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b72:	e7fe      	b.n	b72 <BusFault_Handler>

00000b74 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b74:	e7fe      	b.n	b74 <UsageFault_Handler>

00000b76 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b76:	e7fe      	b.n	b76 <SVC_Handler>

00000b78 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b78:	e7fe      	b.n	b78 <DebugMon_Handler>

00000b7a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b7a:	e7fe      	b.n	b7a <PendSV_Handler>

00000b7c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b7c:	e7fe      	b.n	b7c <SysTick_Handler>

00000b7e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b7e:	e7fe      	b.n	b7e <undefined_handler>

00000b80 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     b80:	b500      	push	{lr}
     b82:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     b84:	4b26      	ldr	r3, [pc, #152]	; (c20 <_DoInit+0xa0>)
     b86:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     b88:	22a8      	movs	r2, #168	; 0xa8
     b8a:	2100      	movs	r1, #0
     b8c:	9800      	ldr	r0, [sp, #0]
     b8e:	f000 fd13 	bl	15b8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     b92:	9b00      	ldr	r3, [sp, #0]
     b94:	2203      	movs	r2, #3
     b96:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     b98:	9b00      	ldr	r3, [sp, #0]
     b9a:	2203      	movs	r2, #3
     b9c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     b9e:	9b00      	ldr	r3, [sp, #0]
     ba0:	4a20      	ldr	r2, [pc, #128]	; (c24 <_DoInit+0xa4>)
     ba2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     ba4:	9b00      	ldr	r3, [sp, #0]
     ba6:	4a20      	ldr	r2, [pc, #128]	; (c28 <_DoInit+0xa8>)
     ba8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     baa:	9b00      	ldr	r3, [sp, #0]
     bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
     bb0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     bb2:	9b00      	ldr	r3, [sp, #0]
     bb4:	2200      	movs	r2, #0
     bb6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     bb8:	9b00      	ldr	r3, [sp, #0]
     bba:	2200      	movs	r2, #0
     bbc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bbe:	9b00      	ldr	r3, [sp, #0]
     bc0:	2200      	movs	r2, #0
     bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     bc4:	9b00      	ldr	r3, [sp, #0]
     bc6:	4a17      	ldr	r2, [pc, #92]	; (c24 <_DoInit+0xa4>)
     bc8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     bca:	9b00      	ldr	r3, [sp, #0]
     bcc:	4a17      	ldr	r2, [pc, #92]	; (c2c <_DoInit+0xac>)
     bce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     bd0:	9b00      	ldr	r3, [sp, #0]
     bd2:	2210      	movs	r2, #16
     bd4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     bd6:	9b00      	ldr	r3, [sp, #0]
     bd8:	2200      	movs	r2, #0
     bda:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     bdc:	9b00      	ldr	r3, [sp, #0]
     bde:	2200      	movs	r2, #0
     be0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     be2:	9b00      	ldr	r3, [sp, #0]
     be4:	2200      	movs	r2, #0
     be6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     be8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     bec:	2300      	movs	r3, #0
     bee:	9301      	str	r3, [sp, #4]
     bf0:	e00c      	b.n	c0c <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	f1c3 030f 	rsb	r3, r3, #15
     bf8:	4a0d      	ldr	r2, [pc, #52]	; (c30 <_DoInit+0xb0>)
     bfa:	5cd1      	ldrb	r1, [r2, r3]
     bfc:	9a00      	ldr	r2, [sp, #0]
     bfe:	9b01      	ldr	r3, [sp, #4]
     c00:	4413      	add	r3, r2
     c02:	460a      	mov	r2, r1
     c04:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c06:	9b01      	ldr	r3, [sp, #4]
     c08:	3301      	adds	r3, #1
     c0a:	9301      	str	r3, [sp, #4]
     c0c:	9b01      	ldr	r3, [sp, #4]
     c0e:	2b0f      	cmp	r3, #15
     c10:	d9ef      	bls.n	bf2 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c12:	f3bf 8f5f 	dmb	sy
}
     c16:	bf00      	nop
     c18:	b003      	add	sp, #12
     c1a:	f85d fb04 	ldr.w	pc, [sp], #4
     c1e:	bf00      	nop
     c20:	1fff91f4 	.word	0x1fff91f4
     c24:	0000ffc8 	.word	0x0000ffc8
     c28:	1fff929c 	.word	0x1fff929c
     c2c:	1fff969c 	.word	0x1fff969c
     c30:	00010e68 	.word	0x00010e68

00000c34 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     c34:	b500      	push	{lr}
     c36:	b08b      	sub	sp, #44	; 0x2c
     c38:	9003      	str	r0, [sp, #12]
     c3a:	9102      	str	r1, [sp, #8]
     c3c:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     c3e:	2300      	movs	r3, #0
     c40:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     c42:	9b03      	ldr	r3, [sp, #12]
     c44:	68db      	ldr	r3, [r3, #12]
     c46:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     c48:	9b03      	ldr	r3, [sp, #12]
     c4a:	691b      	ldr	r3, [r3, #16]
     c4c:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     c4e:	9a06      	ldr	r2, [sp, #24]
     c50:	9b07      	ldr	r3, [sp, #28]
     c52:	429a      	cmp	r2, r3
     c54:	d905      	bls.n	c62 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     c56:	9a06      	ldr	r2, [sp, #24]
     c58:	9b07      	ldr	r3, [sp, #28]
     c5a:	1ad3      	subs	r3, r2, r3
     c5c:	3b01      	subs	r3, #1
     c5e:	9309      	str	r3, [sp, #36]	; 0x24
     c60:	e007      	b.n	c72 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     c62:	9b03      	ldr	r3, [sp, #12]
     c64:	689a      	ldr	r2, [r3, #8]
     c66:	9906      	ldr	r1, [sp, #24]
     c68:	9b07      	ldr	r3, [sp, #28]
     c6a:	1acb      	subs	r3, r1, r3
     c6c:	4413      	add	r3, r2
     c6e:	3b01      	subs	r3, #1
     c70:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     c72:	9b03      	ldr	r3, [sp, #12]
     c74:	689a      	ldr	r2, [r3, #8]
     c76:	9b07      	ldr	r3, [sp, #28]
     c78:	1ad3      	subs	r3, r2, r3
     c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c7c:	4293      	cmp	r3, r2
     c7e:	bf28      	it	cs
     c80:	4613      	movcs	r3, r2
     c82:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c86:	9b01      	ldr	r3, [sp, #4]
     c88:	4293      	cmp	r3, r2
     c8a:	bf28      	it	cs
     c8c:	4613      	movcs	r3, r2
     c8e:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     c90:	9b03      	ldr	r3, [sp, #12]
     c92:	685a      	ldr	r2, [r3, #4]
     c94:	9b07      	ldr	r3, [sp, #28]
     c96:	4413      	add	r3, r2
     c98:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c9c:	9902      	ldr	r1, [sp, #8]
     c9e:	9805      	ldr	r0, [sp, #20]
     ca0:	f000 fc7c 	bl	159c <memcpy>
    NumBytesWritten += NumBytesToWrite;
     ca4:	9a08      	ldr	r2, [sp, #32]
     ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca8:	4413      	add	r3, r2
     caa:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     cac:	9a02      	ldr	r2, [sp, #8]
     cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cb0:	4413      	add	r3, r2
     cb2:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     cb4:	9a01      	ldr	r2, [sp, #4]
     cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cb8:	1ad3      	subs	r3, r2, r3
     cba:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     cbc:	9a07      	ldr	r2, [sp, #28]
     cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cc0:	4413      	add	r3, r2
     cc2:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     cc4:	9b03      	ldr	r3, [sp, #12]
     cc6:	689b      	ldr	r3, [r3, #8]
     cc8:	9a07      	ldr	r2, [sp, #28]
     cca:	429a      	cmp	r2, r3
     ccc:	d101      	bne.n	cd2 <_WriteBlocking+0x9e>
      WrOff = 0u;
     cce:	2300      	movs	r3, #0
     cd0:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     cd2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     cd6:	9b03      	ldr	r3, [sp, #12]
     cd8:	9a07      	ldr	r2, [sp, #28]
     cda:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     cdc:	9b01      	ldr	r3, [sp, #4]
     cde:	2b00      	cmp	r3, #0
     ce0:	d1b2      	bne.n	c48 <_WriteBlocking+0x14>
  return NumBytesWritten;
     ce2:	9b08      	ldr	r3, [sp, #32]
}
     ce4:	4618      	mov	r0, r3
     ce6:	b00b      	add	sp, #44	; 0x2c
     ce8:	f85d fb04 	ldr.w	pc, [sp], #4

00000cec <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     cec:	b500      	push	{lr}
     cee:	b089      	sub	sp, #36	; 0x24
     cf0:	9003      	str	r0, [sp, #12]
     cf2:	9102      	str	r1, [sp, #8]
     cf4:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     cf6:	9b03      	ldr	r3, [sp, #12]
     cf8:	68db      	ldr	r3, [r3, #12]
     cfa:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     cfc:	9b03      	ldr	r3, [sp, #12]
     cfe:	689a      	ldr	r2, [r3, #8]
     d00:	9b07      	ldr	r3, [sp, #28]
     d02:	1ad3      	subs	r3, r2, r3
     d04:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     d06:	9a06      	ldr	r2, [sp, #24]
     d08:	9b01      	ldr	r3, [sp, #4]
     d0a:	429a      	cmp	r2, r3
     d0c:	d911      	bls.n	d32 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d0e:	9b03      	ldr	r3, [sp, #12]
     d10:	685a      	ldr	r2, [r3, #4]
     d12:	9b07      	ldr	r3, [sp, #28]
     d14:	4413      	add	r3, r2
     d16:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d18:	9a01      	ldr	r2, [sp, #4]
     d1a:	9902      	ldr	r1, [sp, #8]
     d1c:	9804      	ldr	r0, [sp, #16]
     d1e:	f000 fc3d 	bl	159c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d22:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     d26:	9a07      	ldr	r2, [sp, #28]
     d28:	9b01      	ldr	r3, [sp, #4]
     d2a:	441a      	add	r2, r3
     d2c:	9b03      	ldr	r3, [sp, #12]
     d2e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     d30:	e01f      	b.n	d72 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     d32:	9b06      	ldr	r3, [sp, #24]
     d34:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d36:	9b03      	ldr	r3, [sp, #12]
     d38:	685a      	ldr	r2, [r3, #4]
     d3a:	9b07      	ldr	r3, [sp, #28]
     d3c:	4413      	add	r3, r2
     d3e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     d40:	9a05      	ldr	r2, [sp, #20]
     d42:	9902      	ldr	r1, [sp, #8]
     d44:	9804      	ldr	r0, [sp, #16]
     d46:	f000 fc29 	bl	159c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     d4a:	9a01      	ldr	r2, [sp, #4]
     d4c:	9b06      	ldr	r3, [sp, #24]
     d4e:	1ad3      	subs	r3, r2, r3
     d50:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     d52:	9b03      	ldr	r3, [sp, #12]
     d54:	685b      	ldr	r3, [r3, #4]
     d56:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     d58:	9a02      	ldr	r2, [sp, #8]
     d5a:	9b06      	ldr	r3, [sp, #24]
     d5c:	4413      	add	r3, r2
     d5e:	9a05      	ldr	r2, [sp, #20]
     d60:	4619      	mov	r1, r3
     d62:	9804      	ldr	r0, [sp, #16]
     d64:	f000 fc1a 	bl	159c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d68:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     d6c:	9b03      	ldr	r3, [sp, #12]
     d6e:	9a05      	ldr	r2, [sp, #20]
     d70:	60da      	str	r2, [r3, #12]
}
     d72:	bf00      	nop
     d74:	b009      	add	sp, #36	; 0x24
     d76:	f85d fb04 	ldr.w	pc, [sp], #4

00000d7a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     d7a:	b086      	sub	sp, #24
     d7c:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     d7e:	9b01      	ldr	r3, [sp, #4]
     d80:	691b      	ldr	r3, [r3, #16]
     d82:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     d84:	9b01      	ldr	r3, [sp, #4]
     d86:	68db      	ldr	r3, [r3, #12]
     d88:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     d8a:	9a04      	ldr	r2, [sp, #16]
     d8c:	9b03      	ldr	r3, [sp, #12]
     d8e:	429a      	cmp	r2, r3
     d90:	d808      	bhi.n	da4 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     d92:	9b01      	ldr	r3, [sp, #4]
     d94:	689a      	ldr	r2, [r3, #8]
     d96:	9b03      	ldr	r3, [sp, #12]
     d98:	1ad2      	subs	r2, r2, r3
     d9a:	9b04      	ldr	r3, [sp, #16]
     d9c:	4413      	add	r3, r2
     d9e:	3b01      	subs	r3, #1
     da0:	9305      	str	r3, [sp, #20]
     da2:	e004      	b.n	dae <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     da4:	9a04      	ldr	r2, [sp, #16]
     da6:	9b03      	ldr	r3, [sp, #12]
     da8:	1ad3      	subs	r3, r2, r3
     daa:	3b01      	subs	r3, #1
     dac:	9305      	str	r3, [sp, #20]
  }
  return r;
     dae:	9b05      	ldr	r3, [sp, #20]
}
     db0:	4618      	mov	r0, r3
     db2:	b006      	add	sp, #24
     db4:	4770      	bx	lr
	...

00000db8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     db8:	b500      	push	{lr}
     dba:	b089      	sub	sp, #36	; 0x24
     dbc:	9003      	str	r0, [sp, #12]
     dbe:	9102      	str	r1, [sp, #8]
     dc0:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     dc2:	9b02      	ldr	r3, [sp, #8]
     dc4:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     dc6:	9b03      	ldr	r3, [sp, #12]
     dc8:	1c5a      	adds	r2, r3, #1
     dca:	4613      	mov	r3, r2
     dcc:	005b      	lsls	r3, r3, #1
     dce:	4413      	add	r3, r2
     dd0:	00db      	lsls	r3, r3, #3
     dd2:	4a20      	ldr	r2, [pc, #128]	; (e54 <SEGGER_RTT_WriteNoLock+0x9c>)
     dd4:	4413      	add	r3, r2
     dd6:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     dd8:	9b05      	ldr	r3, [sp, #20]
     dda:	695b      	ldr	r3, [r3, #20]
     ddc:	2b02      	cmp	r3, #2
     dde:	d029      	beq.n	e34 <SEGGER_RTT_WriteNoLock+0x7c>
     de0:	2b02      	cmp	r3, #2
     de2:	d82e      	bhi.n	e42 <SEGGER_RTT_WriteNoLock+0x8a>
     de4:	2b00      	cmp	r3, #0
     de6:	d002      	beq.n	dee <SEGGER_RTT_WriteNoLock+0x36>
     de8:	2b01      	cmp	r3, #1
     dea:	d013      	beq.n	e14 <SEGGER_RTT_WriteNoLock+0x5c>
     dec:	e029      	b.n	e42 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     dee:	9805      	ldr	r0, [sp, #20]
     df0:	f7ff ffc3 	bl	d7a <_GetAvailWriteSpace>
     df4:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     df6:	9a04      	ldr	r2, [sp, #16]
     df8:	9b01      	ldr	r3, [sp, #4]
     dfa:	429a      	cmp	r2, r3
     dfc:	d202      	bcs.n	e04 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     dfe:	2300      	movs	r3, #0
     e00:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e02:	e021      	b.n	e48 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     e04:	9b01      	ldr	r3, [sp, #4]
     e06:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     e08:	9a01      	ldr	r2, [sp, #4]
     e0a:	9906      	ldr	r1, [sp, #24]
     e0c:	9805      	ldr	r0, [sp, #20]
     e0e:	f7ff ff6d 	bl	cec <_WriteNoCheck>
    break;
     e12:	e019      	b.n	e48 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e14:	9805      	ldr	r0, [sp, #20]
     e16:	f7ff ffb0 	bl	d7a <_GetAvailWriteSpace>
     e1a:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     e1c:	9a01      	ldr	r2, [sp, #4]
     e1e:	9b04      	ldr	r3, [sp, #16]
     e20:	4293      	cmp	r3, r2
     e22:	bf28      	it	cs
     e24:	4613      	movcs	r3, r2
     e26:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     e28:	9a07      	ldr	r2, [sp, #28]
     e2a:	9906      	ldr	r1, [sp, #24]
     e2c:	9805      	ldr	r0, [sp, #20]
     e2e:	f7ff ff5d 	bl	cec <_WriteNoCheck>
    break;
     e32:	e009      	b.n	e48 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     e34:	9a01      	ldr	r2, [sp, #4]
     e36:	9906      	ldr	r1, [sp, #24]
     e38:	9805      	ldr	r0, [sp, #20]
     e3a:	f7ff fefb 	bl	c34 <_WriteBlocking>
     e3e:	9007      	str	r0, [sp, #28]
    break;
     e40:	e002      	b.n	e48 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     e42:	2300      	movs	r3, #0
     e44:	9307      	str	r3, [sp, #28]
    break;
     e46:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     e48:	9b07      	ldr	r3, [sp, #28]
}
     e4a:	4618      	mov	r0, r3
     e4c:	b009      	add	sp, #36	; 0x24
     e4e:	f85d fb04 	ldr.w	pc, [sp], #4
     e52:	bf00      	nop
     e54:	1fff91f4 	.word	0x1fff91f4

00000e58 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e58:	b500      	push	{lr}
     e5a:	b089      	sub	sp, #36	; 0x24
     e5c:	9003      	str	r0, [sp, #12]
     e5e:	9102      	str	r1, [sp, #8]
     e60:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     e62:	4b0f      	ldr	r3, [pc, #60]	; (ea0 <SEGGER_RTT_Write+0x48>)
     e64:	9307      	str	r3, [sp, #28]
     e66:	9b07      	ldr	r3, [sp, #28]
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	b2db      	uxtb	r3, r3
     e6c:	2b53      	cmp	r3, #83	; 0x53
     e6e:	d001      	beq.n	e74 <SEGGER_RTT_Write+0x1c>
     e70:	f7ff fe86 	bl	b80 <_DoInit>
  SEGGER_RTT_LOCK();
     e74:	f3ef 8311 	mrs	r3, BASEPRI
     e78:	f04f 0120 	mov.w	r1, #32
     e7c:	f381 8811 	msr	BASEPRI, r1
     e80:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     e82:	9a01      	ldr	r2, [sp, #4]
     e84:	9902      	ldr	r1, [sp, #8]
     e86:	9803      	ldr	r0, [sp, #12]
     e88:	f7ff ff96 	bl	db8 <SEGGER_RTT_WriteNoLock>
     e8c:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     e8e:	9b06      	ldr	r3, [sp, #24]
     e90:	f383 8811 	msr	BASEPRI, r3
  return Status;
     e94:	9b05      	ldr	r3, [sp, #20]
}
     e96:	4618      	mov	r0, r3
     e98:	b009      	add	sp, #36	; 0x24
     e9a:	f85d fb04 	ldr.w	pc, [sp], #4
     e9e:	bf00      	nop
     ea0:	1fff91f4 	.word	0x1fff91f4

00000ea4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     ea4:	b508      	push	{r3, lr}
  _DoInit();
     ea6:	f7ff fe6b 	bl	b80 <_DoInit>
}
     eaa:	bf00      	nop
     eac:	bd08      	pop	{r3, pc}

00000eae <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     eae:	b500      	push	{lr}
     eb0:	b085      	sub	sp, #20
     eb2:	9001      	str	r0, [sp, #4]
     eb4:	460b      	mov	r3, r1
     eb6:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     eba:	9b01      	ldr	r3, [sp, #4]
     ebc:	689b      	ldr	r3, [r3, #8]
     ebe:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     ec0:	9b03      	ldr	r3, [sp, #12]
     ec2:	1c5a      	adds	r2, r3, #1
     ec4:	9b01      	ldr	r3, [sp, #4]
     ec6:	685b      	ldr	r3, [r3, #4]
     ec8:	429a      	cmp	r2, r3
     eca:	d80f      	bhi.n	eec <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     ecc:	9b01      	ldr	r3, [sp, #4]
     ece:	681a      	ldr	r2, [r3, #0]
     ed0:	9b03      	ldr	r3, [sp, #12]
     ed2:	4413      	add	r3, r2
     ed4:	f89d 2003 	ldrb.w	r2, [sp, #3]
     ed8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     eda:	9b03      	ldr	r3, [sp, #12]
     edc:	1c5a      	adds	r2, r3, #1
     ede:	9b01      	ldr	r3, [sp, #4]
     ee0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     ee2:	9b01      	ldr	r3, [sp, #4]
     ee4:	68db      	ldr	r3, [r3, #12]
     ee6:	1c5a      	adds	r2, r3, #1
     ee8:	9b01      	ldr	r3, [sp, #4]
     eea:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     eec:	9b01      	ldr	r3, [sp, #4]
     eee:	689a      	ldr	r2, [r3, #8]
     ef0:	9b01      	ldr	r3, [sp, #4]
     ef2:	685b      	ldr	r3, [r3, #4]
     ef4:	429a      	cmp	r2, r3
     ef6:	d115      	bne.n	f24 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     ef8:	9b01      	ldr	r3, [sp, #4]
     efa:	6918      	ldr	r0, [r3, #16]
     efc:	9b01      	ldr	r3, [sp, #4]
     efe:	6819      	ldr	r1, [r3, #0]
     f00:	9b01      	ldr	r3, [sp, #4]
     f02:	689b      	ldr	r3, [r3, #8]
     f04:	461a      	mov	r2, r3
     f06:	f7ff ffa7 	bl	e58 <SEGGER_RTT_Write>
     f0a:	4602      	mov	r2, r0
     f0c:	9b01      	ldr	r3, [sp, #4]
     f0e:	689b      	ldr	r3, [r3, #8]
     f10:	429a      	cmp	r2, r3
     f12:	d004      	beq.n	f1e <_StoreChar+0x70>
      p->ReturnValue = -1;
     f14:	9b01      	ldr	r3, [sp, #4]
     f16:	f04f 32ff 	mov.w	r2, #4294967295
     f1a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     f1c:	e002      	b.n	f24 <_StoreChar+0x76>
      p->Cnt = 0u;
     f1e:	9b01      	ldr	r3, [sp, #4]
     f20:	2200      	movs	r2, #0
     f22:	609a      	str	r2, [r3, #8]
}
     f24:	bf00      	nop
     f26:	b005      	add	sp, #20
     f28:	f85d fb04 	ldr.w	pc, [sp], #4

00000f2c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     f2c:	b500      	push	{lr}
     f2e:	b08b      	sub	sp, #44	; 0x2c
     f30:	9003      	str	r0, [sp, #12]
     f32:	9102      	str	r1, [sp, #8]
     f34:	9201      	str	r2, [sp, #4]
     f36:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     f38:	9b02      	ldr	r3, [sp, #8]
     f3a:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     f3c:	2301      	movs	r3, #1
     f3e:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     f40:	2301      	movs	r3, #1
     f42:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f44:	e007      	b.n	f56 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     f46:	9a08      	ldr	r2, [sp, #32]
     f48:	9b01      	ldr	r3, [sp, #4]
     f4a:	fbb2 f3f3 	udiv	r3, r2, r3
     f4e:	9308      	str	r3, [sp, #32]
    Width++;
     f50:	9b07      	ldr	r3, [sp, #28]
     f52:	3301      	adds	r3, #1
     f54:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f56:	9a08      	ldr	r2, [sp, #32]
     f58:	9b01      	ldr	r3, [sp, #4]
     f5a:	429a      	cmp	r2, r3
     f5c:	d2f3      	bcs.n	f46 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     f5e:	9a00      	ldr	r2, [sp, #0]
     f60:	9b07      	ldr	r3, [sp, #28]
     f62:	429a      	cmp	r2, r3
     f64:	d901      	bls.n	f6a <_PrintUnsigned+0x3e>
    Width = NumDigits;
     f66:	9b00      	ldr	r3, [sp, #0]
     f68:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f6c:	f003 0301 	and.w	r3, r3, #1
     f70:	2b00      	cmp	r3, #0
     f72:	d128      	bne.n	fc6 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f76:	2b00      	cmp	r3, #0
     f78:	d025      	beq.n	fc6 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f7c:	f003 0302 	and.w	r3, r3, #2
     f80:	2b00      	cmp	r3, #0
     f82:	d006      	beq.n	f92 <_PrintUnsigned+0x66>
     f84:	9b00      	ldr	r3, [sp, #0]
     f86:	2b00      	cmp	r3, #0
     f88:	d103      	bne.n	f92 <_PrintUnsigned+0x66>
        c = '0';
     f8a:	2330      	movs	r3, #48	; 0x30
     f8c:	f88d 301b 	strb.w	r3, [sp, #27]
     f90:	e002      	b.n	f98 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     f92:	2320      	movs	r3, #32
     f94:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     f98:	e00c      	b.n	fb4 <_PrintUnsigned+0x88>
        FieldWidth--;
     f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f9c:	3b01      	subs	r3, #1
     f9e:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
     fa0:	f89d 301b 	ldrb.w	r3, [sp, #27]
     fa4:	4619      	mov	r1, r3
     fa6:	9803      	ldr	r0, [sp, #12]
     fa8:	f7ff ff81 	bl	eae <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
     fac:	9b03      	ldr	r3, [sp, #12]
     fae:	68db      	ldr	r3, [r3, #12]
     fb0:	2b00      	cmp	r3, #0
     fb2:	db07      	blt.n	fc4 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fb6:	2b00      	cmp	r3, #0
     fb8:	d005      	beq.n	fc6 <_PrintUnsigned+0x9a>
     fba:	9a07      	ldr	r2, [sp, #28]
     fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fbe:	429a      	cmp	r2, r3
     fc0:	d3eb      	bcc.n	f9a <_PrintUnsigned+0x6e>
     fc2:	e000      	b.n	fc6 <_PrintUnsigned+0x9a>
          break;
     fc4:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     fc6:	9b03      	ldr	r3, [sp, #12]
     fc8:	68db      	ldr	r3, [r3, #12]
     fca:	2b00      	cmp	r3, #0
     fcc:	db55      	blt.n	107a <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     fce:	9b00      	ldr	r3, [sp, #0]
     fd0:	2b01      	cmp	r3, #1
     fd2:	d903      	bls.n	fdc <_PrintUnsigned+0xb0>
        NumDigits--;
     fd4:	9b00      	ldr	r3, [sp, #0]
     fd6:	3b01      	subs	r3, #1
     fd8:	9300      	str	r3, [sp, #0]
     fda:	e009      	b.n	ff0 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
     fdc:	9a02      	ldr	r2, [sp, #8]
     fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe0:	fbb2 f3f3 	udiv	r3, r2, r3
     fe4:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
     fe6:	9a05      	ldr	r2, [sp, #20]
     fe8:	9b01      	ldr	r3, [sp, #4]
     fea:	429a      	cmp	r2, r3
     fec:	d200      	bcs.n	ff0 <_PrintUnsigned+0xc4>
          break;
     fee:	e005      	b.n	ffc <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
     ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ff2:	9a01      	ldr	r2, [sp, #4]
     ff4:	fb02 f303 	mul.w	r3, r2, r3
     ff8:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     ffa:	e7e8      	b.n	fce <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
     ffc:	9a02      	ldr	r2, [sp, #8]
     ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1000:	fbb2 f3f3 	udiv	r3, r2, r3
    1004:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1006:	9b05      	ldr	r3, [sp, #20]
    1008:	9a09      	ldr	r2, [sp, #36]	; 0x24
    100a:	fb02 f303 	mul.w	r3, r2, r3
    100e:	9a02      	ldr	r2, [sp, #8]
    1010:	1ad3      	subs	r3, r2, r3
    1012:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1014:	4a1b      	ldr	r2, [pc, #108]	; (1084 <_PrintUnsigned+0x158>)
    1016:	9b05      	ldr	r3, [sp, #20]
    1018:	4413      	add	r3, r2
    101a:	781b      	ldrb	r3, [r3, #0]
    101c:	4619      	mov	r1, r3
    101e:	9803      	ldr	r0, [sp, #12]
    1020:	f7ff ff45 	bl	eae <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1024:	9b03      	ldr	r3, [sp, #12]
    1026:	68db      	ldr	r3, [r3, #12]
    1028:	2b00      	cmp	r3, #0
    102a:	db08      	blt.n	103e <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    102c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    102e:	9b01      	ldr	r3, [sp, #4]
    1030:	fbb2 f3f3 	udiv	r3, r2, r3
    1034:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1038:	2b00      	cmp	r3, #0
    103a:	d1df      	bne.n	ffc <_PrintUnsigned+0xd0>
    103c:	e000      	b.n	1040 <_PrintUnsigned+0x114>
        break;
    103e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1042:	f003 0301 	and.w	r3, r3, #1
    1046:	2b00      	cmp	r3, #0
    1048:	d017      	beq.n	107a <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    104a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    104c:	2b00      	cmp	r3, #0
    104e:	d014      	beq.n	107a <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1050:	e00a      	b.n	1068 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1054:	3b01      	subs	r3, #1
    1056:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1058:	2120      	movs	r1, #32
    105a:	9803      	ldr	r0, [sp, #12]
    105c:	f7ff ff27 	bl	eae <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1060:	9b03      	ldr	r3, [sp, #12]
    1062:	68db      	ldr	r3, [r3, #12]
    1064:	2b00      	cmp	r3, #0
    1066:	db07      	blt.n	1078 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    106a:	2b00      	cmp	r3, #0
    106c:	d005      	beq.n	107a <_PrintUnsigned+0x14e>
    106e:	9a07      	ldr	r2, [sp, #28]
    1070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1072:	429a      	cmp	r2, r3
    1074:	d3ed      	bcc.n	1052 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1076:	e000      	b.n	107a <_PrintUnsigned+0x14e>
            break;
    1078:	bf00      	nop
}
    107a:	bf00      	nop
    107c:	b00b      	add	sp, #44	; 0x2c
    107e:	f85d fb04 	ldr.w	pc, [sp], #4
    1082:	bf00      	nop
    1084:	00010e7c 	.word	0x00010e7c

00001088 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1088:	b500      	push	{lr}
    108a:	b089      	sub	sp, #36	; 0x24
    108c:	9005      	str	r0, [sp, #20]
    108e:	9104      	str	r1, [sp, #16]
    1090:	9203      	str	r2, [sp, #12]
    1092:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1094:	9b04      	ldr	r3, [sp, #16]
    1096:	2b00      	cmp	r3, #0
    1098:	bfb8      	it	lt
    109a:	425b      	neglt	r3, r3
    109c:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    109e:	2301      	movs	r3, #1
    10a0:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10a2:	e007      	b.n	10b4 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    10a4:	9b03      	ldr	r3, [sp, #12]
    10a6:	9a06      	ldr	r2, [sp, #24]
    10a8:	fb92 f3f3 	sdiv	r3, r2, r3
    10ac:	9306      	str	r3, [sp, #24]
    Width++;
    10ae:	9b07      	ldr	r3, [sp, #28]
    10b0:	3301      	adds	r3, #1
    10b2:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10b4:	9b03      	ldr	r3, [sp, #12]
    10b6:	9a06      	ldr	r2, [sp, #24]
    10b8:	429a      	cmp	r2, r3
    10ba:	daf3      	bge.n	10a4 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    10bc:	9a02      	ldr	r2, [sp, #8]
    10be:	9b07      	ldr	r3, [sp, #28]
    10c0:	429a      	cmp	r2, r3
    10c2:	d901      	bls.n	10c8 <_PrintInt+0x40>
    Width = NumDigits;
    10c4:	9b02      	ldr	r3, [sp, #8]
    10c6:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    10c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10ca:	2b00      	cmp	r3, #0
    10cc:	d00a      	beq.n	10e4 <_PrintInt+0x5c>
    10ce:	9b04      	ldr	r3, [sp, #16]
    10d0:	2b00      	cmp	r3, #0
    10d2:	db04      	blt.n	10de <_PrintInt+0x56>
    10d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10d6:	f003 0304 	and.w	r3, r3, #4
    10da:	2b00      	cmp	r3, #0
    10dc:	d002      	beq.n	10e4 <_PrintInt+0x5c>
    FieldWidth--;
    10de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10e0:	3b01      	subs	r3, #1
    10e2:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    10e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10e6:	f003 0302 	and.w	r3, r3, #2
    10ea:	2b00      	cmp	r3, #0
    10ec:	d002      	beq.n	10f4 <_PrintInt+0x6c>
    10ee:	9b02      	ldr	r3, [sp, #8]
    10f0:	2b00      	cmp	r3, #0
    10f2:	d01c      	beq.n	112e <_PrintInt+0xa6>
    10f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10f6:	f003 0301 	and.w	r3, r3, #1
    10fa:	2b00      	cmp	r3, #0
    10fc:	d117      	bne.n	112e <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    10fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1100:	2b00      	cmp	r3, #0
    1102:	d014      	beq.n	112e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1104:	e00a      	b.n	111c <_PrintInt+0x94>
        FieldWidth--;
    1106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1108:	3b01      	subs	r3, #1
    110a:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    110c:	2120      	movs	r1, #32
    110e:	9805      	ldr	r0, [sp, #20]
    1110:	f7ff fecd 	bl	eae <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1114:	9b05      	ldr	r3, [sp, #20]
    1116:	68db      	ldr	r3, [r3, #12]
    1118:	2b00      	cmp	r3, #0
    111a:	db07      	blt.n	112c <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    111c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    111e:	2b00      	cmp	r3, #0
    1120:	d005      	beq.n	112e <_PrintInt+0xa6>
    1122:	9a07      	ldr	r2, [sp, #28]
    1124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1126:	429a      	cmp	r2, r3
    1128:	d3ed      	bcc.n	1106 <_PrintInt+0x7e>
    112a:	e000      	b.n	112e <_PrintInt+0xa6>
          break;
    112c:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    112e:	9b05      	ldr	r3, [sp, #20]
    1130:	68db      	ldr	r3, [r3, #12]
    1132:	2b00      	cmp	r3, #0
    1134:	db4a      	blt.n	11cc <_PrintInt+0x144>
    if (v < 0) {
    1136:	9b04      	ldr	r3, [sp, #16]
    1138:	2b00      	cmp	r3, #0
    113a:	da07      	bge.n	114c <_PrintInt+0xc4>
      v = -v;
    113c:	9b04      	ldr	r3, [sp, #16]
    113e:	425b      	negs	r3, r3
    1140:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1142:	212d      	movs	r1, #45	; 0x2d
    1144:	9805      	ldr	r0, [sp, #20]
    1146:	f7ff feb2 	bl	eae <_StoreChar>
    114a:	e008      	b.n	115e <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    114c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    114e:	f003 0304 	and.w	r3, r3, #4
    1152:	2b00      	cmp	r3, #0
    1154:	d003      	beq.n	115e <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1156:	212b      	movs	r1, #43	; 0x2b
    1158:	9805      	ldr	r0, [sp, #20]
    115a:	f7ff fea8 	bl	eae <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    115e:	9b05      	ldr	r3, [sp, #20]
    1160:	68db      	ldr	r3, [r3, #12]
    1162:	2b00      	cmp	r3, #0
    1164:	db32      	blt.n	11cc <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1168:	f003 0302 	and.w	r3, r3, #2
    116c:	2b00      	cmp	r3, #0
    116e:	d01f      	beq.n	11b0 <_PrintInt+0x128>
    1170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1172:	f003 0301 	and.w	r3, r3, #1
    1176:	2b00      	cmp	r3, #0
    1178:	d11a      	bne.n	11b0 <_PrintInt+0x128>
    117a:	9b02      	ldr	r3, [sp, #8]
    117c:	2b00      	cmp	r3, #0
    117e:	d117      	bne.n	11b0 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1182:	2b00      	cmp	r3, #0
    1184:	d014      	beq.n	11b0 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1186:	e00a      	b.n	119e <_PrintInt+0x116>
            FieldWidth--;
    1188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    118a:	3b01      	subs	r3, #1
    118c:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    118e:	2130      	movs	r1, #48	; 0x30
    1190:	9805      	ldr	r0, [sp, #20]
    1192:	f7ff fe8c 	bl	eae <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1196:	9b05      	ldr	r3, [sp, #20]
    1198:	68db      	ldr	r3, [r3, #12]
    119a:	2b00      	cmp	r3, #0
    119c:	db07      	blt.n	11ae <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    119e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a0:	2b00      	cmp	r3, #0
    11a2:	d005      	beq.n	11b0 <_PrintInt+0x128>
    11a4:	9a07      	ldr	r2, [sp, #28]
    11a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a8:	429a      	cmp	r2, r3
    11aa:	d3ed      	bcc.n	1188 <_PrintInt+0x100>
    11ac:	e000      	b.n	11b0 <_PrintInt+0x128>
              break;
    11ae:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    11b0:	9b05      	ldr	r3, [sp, #20]
    11b2:	68db      	ldr	r3, [r3, #12]
    11b4:	2b00      	cmp	r3, #0
    11b6:	db09      	blt.n	11cc <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    11b8:	9904      	ldr	r1, [sp, #16]
    11ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11bc:	9301      	str	r3, [sp, #4]
    11be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11c0:	9300      	str	r3, [sp, #0]
    11c2:	9b02      	ldr	r3, [sp, #8]
    11c4:	9a03      	ldr	r2, [sp, #12]
    11c6:	9805      	ldr	r0, [sp, #20]
    11c8:	f7ff feb0 	bl	f2c <_PrintUnsigned>
      }
    }
  }
}
    11cc:	bf00      	nop
    11ce:	b009      	add	sp, #36	; 0x24
    11d0:	f85d fb04 	ldr.w	pc, [sp], #4

000011d4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    11d4:	b500      	push	{lr}
    11d6:	b0a3      	sub	sp, #140	; 0x8c
    11d8:	9005      	str	r0, [sp, #20]
    11da:	9104      	str	r1, [sp, #16]
    11dc:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    11de:	ab06      	add	r3, sp, #24
    11e0:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    11e2:	2340      	movs	r3, #64	; 0x40
    11e4:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    11e6:	2300      	movs	r3, #0
    11e8:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    11ea:	9b05      	ldr	r3, [sp, #20]
    11ec:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    11ee:	2300      	movs	r3, #0
    11f0:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    11f2:	9b04      	ldr	r3, [sp, #16]
    11f4:	781b      	ldrb	r3, [r3, #0]
    11f6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    11fa:	9b04      	ldr	r3, [sp, #16]
    11fc:	3301      	adds	r3, #1
    11fe:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1200:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1204:	2b00      	cmp	r3, #0
    1206:	f000 819c 	beq.w	1542 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    120a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    120e:	2b25      	cmp	r3, #37	; 0x25
    1210:	f040 818b 	bne.w	152a <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1214:	2300      	movs	r3, #0
    1216:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1218:	2301      	movs	r3, #1
    121a:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    121c:	9b04      	ldr	r3, [sp, #16]
    121e:	781b      	ldrb	r3, [r3, #0]
    1220:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1224:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1228:	3b23      	subs	r3, #35	; 0x23
    122a:	2b0d      	cmp	r3, #13
    122c:	d83e      	bhi.n	12ac <SEGGER_RTT_vprintf+0xd8>
    122e:	a201      	add	r2, pc, #4	; (adr r2, 1234 <SEGGER_RTT_vprintf+0x60>)
    1230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1234:	0000129d 	.word	0x0000129d
    1238:	000012ad 	.word	0x000012ad
    123c:	000012ad 	.word	0x000012ad
    1240:	000012ad 	.word	0x000012ad
    1244:	000012ad 	.word	0x000012ad
    1248:	000012ad 	.word	0x000012ad
    124c:	000012ad 	.word	0x000012ad
    1250:	000012ad 	.word	0x000012ad
    1254:	0000128d 	.word	0x0000128d
    1258:	000012ad 	.word	0x000012ad
    125c:	0000126d 	.word	0x0000126d
    1260:	000012ad 	.word	0x000012ad
    1264:	000012ad 	.word	0x000012ad
    1268:	0000127d 	.word	0x0000127d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    126c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    126e:	f043 0301 	orr.w	r3, r3, #1
    1272:	931e      	str	r3, [sp, #120]	; 0x78
    1274:	9b04      	ldr	r3, [sp, #16]
    1276:	3301      	adds	r3, #1
    1278:	9304      	str	r3, [sp, #16]
    127a:	e01a      	b.n	12b2 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    127c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    127e:	f043 0302 	orr.w	r3, r3, #2
    1282:	931e      	str	r3, [sp, #120]	; 0x78
    1284:	9b04      	ldr	r3, [sp, #16]
    1286:	3301      	adds	r3, #1
    1288:	9304      	str	r3, [sp, #16]
    128a:	e012      	b.n	12b2 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    128c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    128e:	f043 0304 	orr.w	r3, r3, #4
    1292:	931e      	str	r3, [sp, #120]	; 0x78
    1294:	9b04      	ldr	r3, [sp, #16]
    1296:	3301      	adds	r3, #1
    1298:	9304      	str	r3, [sp, #16]
    129a:	e00a      	b.n	12b2 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    129c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    129e:	f043 0308 	orr.w	r3, r3, #8
    12a2:	931e      	str	r3, [sp, #120]	; 0x78
    12a4:	9b04      	ldr	r3, [sp, #16]
    12a6:	3301      	adds	r3, #1
    12a8:	9304      	str	r3, [sp, #16]
    12aa:	e002      	b.n	12b2 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    12ac:	2300      	movs	r3, #0
    12ae:	9320      	str	r3, [sp, #128]	; 0x80
    12b0:	bf00      	nop
        }
      } while (v);
    12b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    12b4:	2b00      	cmp	r3, #0
    12b6:	d1b1      	bne.n	121c <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    12b8:	2300      	movs	r3, #0
    12ba:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    12bc:	9b04      	ldr	r3, [sp, #16]
    12be:	781b      	ldrb	r3, [r3, #0]
    12c0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    12c4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12c8:	2b2f      	cmp	r3, #47	; 0x2f
    12ca:	d912      	bls.n	12f2 <SEGGER_RTT_vprintf+0x11e>
    12cc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12d0:	2b39      	cmp	r3, #57	; 0x39
    12d2:	d80e      	bhi.n	12f2 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    12d4:	9b04      	ldr	r3, [sp, #16]
    12d6:	3301      	adds	r3, #1
    12d8:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    12da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    12dc:	4613      	mov	r3, r2
    12de:	009b      	lsls	r3, r3, #2
    12e0:	4413      	add	r3, r2
    12e2:	005b      	lsls	r3, r3, #1
    12e4:	461a      	mov	r2, r3
    12e6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12ea:	4413      	add	r3, r2
    12ec:	3b30      	subs	r3, #48	; 0x30
    12ee:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    12f0:	e7e4      	b.n	12bc <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    12f2:	2300      	movs	r3, #0
    12f4:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    12f6:	9b04      	ldr	r3, [sp, #16]
    12f8:	781b      	ldrb	r3, [r3, #0]
    12fa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    12fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1302:	2b2e      	cmp	r3, #46	; 0x2e
    1304:	d11d      	bne.n	1342 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1306:	9b04      	ldr	r3, [sp, #16]
    1308:	3301      	adds	r3, #1
    130a:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    130c:	9b04      	ldr	r3, [sp, #16]
    130e:	781b      	ldrb	r3, [r3, #0]
    1310:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1314:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1318:	2b2f      	cmp	r3, #47	; 0x2f
    131a:	d912      	bls.n	1342 <SEGGER_RTT_vprintf+0x16e>
    131c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1320:	2b39      	cmp	r3, #57	; 0x39
    1322:	d80e      	bhi.n	1342 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1324:	9b04      	ldr	r3, [sp, #16]
    1326:	3301      	adds	r3, #1
    1328:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    132a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    132c:	4613      	mov	r3, r2
    132e:	009b      	lsls	r3, r3, #2
    1330:	4413      	add	r3, r2
    1332:	005b      	lsls	r3, r3, #1
    1334:	461a      	mov	r2, r3
    1336:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    133a:	4413      	add	r3, r2
    133c:	3b30      	subs	r3, #48	; 0x30
    133e:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1340:	e7e4      	b.n	130c <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1342:	9b04      	ldr	r3, [sp, #16]
    1344:	781b      	ldrb	r3, [r3, #0]
    1346:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    134a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    134e:	2b6c      	cmp	r3, #108	; 0x6c
    1350:	d003      	beq.n	135a <SEGGER_RTT_vprintf+0x186>
    1352:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1356:	2b68      	cmp	r3, #104	; 0x68
    1358:	d107      	bne.n	136a <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    135a:	9b04      	ldr	r3, [sp, #16]
    135c:	3301      	adds	r3, #1
    135e:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1360:	9b04      	ldr	r3, [sp, #16]
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1368:	e7ef      	b.n	134a <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    136a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136e:	2b25      	cmp	r3, #37	; 0x25
    1370:	f000 80d0 	beq.w	1514 <SEGGER_RTT_vprintf+0x340>
    1374:	2b25      	cmp	r3, #37	; 0x25
    1376:	f2c0 80d3 	blt.w	1520 <SEGGER_RTT_vprintf+0x34c>
    137a:	2b78      	cmp	r3, #120	; 0x78
    137c:	f300 80d0 	bgt.w	1520 <SEGGER_RTT_vprintf+0x34c>
    1380:	2b58      	cmp	r3, #88	; 0x58
    1382:	f2c0 80cd 	blt.w	1520 <SEGGER_RTT_vprintf+0x34c>
    1386:	3b58      	subs	r3, #88	; 0x58
    1388:	2b20      	cmp	r3, #32
    138a:	f200 80c9 	bhi.w	1520 <SEGGER_RTT_vprintf+0x34c>
    138e:	a201      	add	r2, pc, #4	; (adr r2, 1394 <SEGGER_RTT_vprintf+0x1c0>)
    1390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1394:	00001485 	.word	0x00001485
    1398:	00001521 	.word	0x00001521
    139c:	00001521 	.word	0x00001521
    13a0:	00001521 	.word	0x00001521
    13a4:	00001521 	.word	0x00001521
    13a8:	00001521 	.word	0x00001521
    13ac:	00001521 	.word	0x00001521
    13b0:	00001521 	.word	0x00001521
    13b4:	00001521 	.word	0x00001521
    13b8:	00001521 	.word	0x00001521
    13bc:	00001521 	.word	0x00001521
    13c0:	00001419 	.word	0x00001419
    13c4:	0000143d 	.word	0x0000143d
    13c8:	00001521 	.word	0x00001521
    13cc:	00001521 	.word	0x00001521
    13d0:	00001521 	.word	0x00001521
    13d4:	00001521 	.word	0x00001521
    13d8:	00001521 	.word	0x00001521
    13dc:	00001521 	.word	0x00001521
    13e0:	00001521 	.word	0x00001521
    13e4:	00001521 	.word	0x00001521
    13e8:	00001521 	.word	0x00001521
    13ec:	00001521 	.word	0x00001521
    13f0:	00001521 	.word	0x00001521
    13f4:	000014f1 	.word	0x000014f1
    13f8:	00001521 	.word	0x00001521
    13fc:	00001521 	.word	0x00001521
    1400:	000014a9 	.word	0x000014a9
    1404:	00001521 	.word	0x00001521
    1408:	00001461 	.word	0x00001461
    140c:	00001521 	.word	0x00001521
    1410:	00001521 	.word	0x00001521
    1414:	00001485 	.word	0x00001485
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1418:	9b03      	ldr	r3, [sp, #12]
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	1d19      	adds	r1, r3, #4
    141e:	9a03      	ldr	r2, [sp, #12]
    1420:	6011      	str	r1, [r2, #0]
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1426:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1428:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    142c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1430:	ab16      	add	r3, sp, #88	; 0x58
    1432:	4611      	mov	r1, r2
    1434:	4618      	mov	r0, r3
    1436:	f7ff fd3a 	bl	eae <_StoreChar>
        break;
    143a:	e072      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    143c:	9b03      	ldr	r3, [sp, #12]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	1d19      	adds	r1, r3, #4
    1442:	9a03      	ldr	r2, [sp, #12]
    1444:	6011      	str	r1, [r2, #0]
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    144a:	a816      	add	r0, sp, #88	; 0x58
    144c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    144e:	9301      	str	r3, [sp, #4]
    1450:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1452:	9300      	str	r3, [sp, #0]
    1454:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1456:	220a      	movs	r2, #10
    1458:	9920      	ldr	r1, [sp, #128]	; 0x80
    145a:	f7ff fe15 	bl	1088 <_PrintInt>
        break;
    145e:	e060      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1460:	9b03      	ldr	r3, [sp, #12]
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	1d19      	adds	r1, r3, #4
    1466:	9a03      	ldr	r2, [sp, #12]
    1468:	6011      	str	r1, [r2, #0]
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    146e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1470:	a816      	add	r0, sp, #88	; 0x58
    1472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1474:	9301      	str	r3, [sp, #4]
    1476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1478:	9300      	str	r3, [sp, #0]
    147a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    147c:	220a      	movs	r2, #10
    147e:	f7ff fd55 	bl	f2c <_PrintUnsigned>
        break;
    1482:	e04e      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1484:	9b03      	ldr	r3, [sp, #12]
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	1d19      	adds	r1, r3, #4
    148a:	9a03      	ldr	r2, [sp, #12]
    148c:	6011      	str	r1, [r2, #0]
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1492:	9920      	ldr	r1, [sp, #128]	; 0x80
    1494:	a816      	add	r0, sp, #88	; 0x58
    1496:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1498:	9301      	str	r3, [sp, #4]
    149a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    149c:	9300      	str	r3, [sp, #0]
    149e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14a0:	2210      	movs	r2, #16
    14a2:	f7ff fd43 	bl	f2c <_PrintUnsigned>
        break;
    14a6:	e03c      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    14a8:	9b03      	ldr	r3, [sp, #12]
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	1d19      	adds	r1, r3, #4
    14ae:	9a03      	ldr	r2, [sp, #12]
    14b0:	6011      	str	r1, [r2, #0]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    14b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14b8:	2b00      	cmp	r3, #0
    14ba:	d101      	bne.n	14c0 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    14bc:	4b2c      	ldr	r3, [pc, #176]	; (1570 <SEGGER_RTT_vprintf+0x39c>)
    14be:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    14c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14c2:	781b      	ldrb	r3, [r3, #0]
    14c4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    14c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14ca:	3301      	adds	r3, #1
    14cc:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    14ce:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14d2:	2b00      	cmp	r3, #0
    14d4:	d00a      	beq.n	14ec <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    14d6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    14da:	ab16      	add	r3, sp, #88	; 0x58
    14dc:	4611      	mov	r1, r2
    14de:	4618      	mov	r0, r3
    14e0:	f7ff fce5 	bl	eae <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    14e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14e6:	2b00      	cmp	r3, #0
    14e8:	daea      	bge.n	14c0 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    14ea:	e01a      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
              break;
    14ec:	bf00      	nop
        break;
    14ee:	e018      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    14f0:	9b03      	ldr	r3, [sp, #12]
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	1d19      	adds	r1, r3, #4
    14f6:	9a03      	ldr	r2, [sp, #12]
    14f8:	6011      	str	r1, [r2, #0]
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    14fe:	9920      	ldr	r1, [sp, #128]	; 0x80
    1500:	a816      	add	r0, sp, #88	; 0x58
    1502:	2300      	movs	r3, #0
    1504:	9301      	str	r3, [sp, #4]
    1506:	2308      	movs	r3, #8
    1508:	9300      	str	r3, [sp, #0]
    150a:	2308      	movs	r3, #8
    150c:	2210      	movs	r2, #16
    150e:	f7ff fd0d 	bl	f2c <_PrintUnsigned>
        break;
    1512:	e006      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1514:	ab16      	add	r3, sp, #88	; 0x58
    1516:	2125      	movs	r1, #37	; 0x25
    1518:	4618      	mov	r0, r3
    151a:	f7ff fcc8 	bl	eae <_StoreChar>
        break;
    151e:	e000      	b.n	1522 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1520:	bf00      	nop
      }
      sFormat++;
    1522:	9b04      	ldr	r3, [sp, #16]
    1524:	3301      	adds	r3, #1
    1526:	9304      	str	r3, [sp, #16]
    1528:	e006      	b.n	1538 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    152a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    152e:	ab16      	add	r3, sp, #88	; 0x58
    1530:	4611      	mov	r1, r2
    1532:	4618      	mov	r0, r3
    1534:	f7ff fcbb 	bl	eae <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1538:	9b19      	ldr	r3, [sp, #100]	; 0x64
    153a:	2b00      	cmp	r3, #0
    153c:	f6bf ae59 	bge.w	11f2 <SEGGER_RTT_vprintf+0x1e>
    1540:	e000      	b.n	1544 <SEGGER_RTT_vprintf+0x370>
      break;
    1542:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1544:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1546:	2b00      	cmp	r3, #0
    1548:	dd0c      	ble.n	1564 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    154a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    154c:	2b00      	cmp	r3, #0
    154e:	d005      	beq.n	155c <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1550:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1552:	ab06      	add	r3, sp, #24
    1554:	4619      	mov	r1, r3
    1556:	9805      	ldr	r0, [sp, #20]
    1558:	f7ff fc7e 	bl	e58 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    155c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    155e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1560:	4413      	add	r3, r2
    1562:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1564:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1566:	4618      	mov	r0, r3
    1568:	b023      	add	sp, #140	; 0x8c
    156a:	f85d fb04 	ldr.w	pc, [sp], #4
    156e:	bf00      	nop
    1570:	0000ffd4 	.word	0x0000ffd4

00001574 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1574:	b40e      	push	{r1, r2, r3}
    1576:	b500      	push	{lr}
    1578:	b084      	sub	sp, #16
    157a:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    157c:	ab06      	add	r3, sp, #24
    157e:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1580:	ab02      	add	r3, sp, #8
    1582:	461a      	mov	r2, r3
    1584:	9905      	ldr	r1, [sp, #20]
    1586:	9801      	ldr	r0, [sp, #4]
    1588:	f7ff fe24 	bl	11d4 <SEGGER_RTT_vprintf>
    158c:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    158e:	9b03      	ldr	r3, [sp, #12]
}
    1590:	4618      	mov	r0, r3
    1592:	b004      	add	sp, #16
    1594:	f85d eb04 	ldr.w	lr, [sp], #4
    1598:	b003      	add	sp, #12
    159a:	4770      	bx	lr

0000159c <memcpy>:
    159c:	440a      	add	r2, r1
    159e:	4291      	cmp	r1, r2
    15a0:	f100 33ff 	add.w	r3, r0, #4294967295
    15a4:	d100      	bne.n	15a8 <memcpy+0xc>
    15a6:	4770      	bx	lr
    15a8:	b510      	push	{r4, lr}
    15aa:	f811 4b01 	ldrb.w	r4, [r1], #1
    15ae:	f803 4f01 	strb.w	r4, [r3, #1]!
    15b2:	4291      	cmp	r1, r2
    15b4:	d1f9      	bne.n	15aa <memcpy+0xe>
    15b6:	bd10      	pop	{r4, pc}

000015b8 <memset>:
    15b8:	4402      	add	r2, r0
    15ba:	4603      	mov	r3, r0
    15bc:	4293      	cmp	r3, r2
    15be:	d100      	bne.n	15c2 <memset+0xa>
    15c0:	4770      	bx	lr
    15c2:	f803 1b01 	strb.w	r1, [r3], #1
    15c6:	e7f9      	b.n	15bc <memset+0x4>

000015c8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    15c8:	b086      	sub	sp, #24
    15ca:	9003      	str	r0, [sp, #12]
    15cc:	9102      	str	r1, [sp, #8]
    15ce:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    15d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    15d4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    15d8:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    15da:	9b01      	ldr	r3, [sp, #4]
    15dc:	2b00      	cmp	r3, #0
    15de:	d007      	beq.n	15f0 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    15e0:	9b03      	ldr	r3, [sp, #12]
    15e2:	3310      	adds	r3, #16
    15e4:	009b      	lsls	r3, r3, #2
    15e6:	9a05      	ldr	r2, [sp, #20]
    15e8:	4413      	add	r3, r2
    15ea:	681a      	ldr	r2, [r3, #0]
    15ec:	9b01      	ldr	r3, [sp, #4]
    15ee:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    15f0:	9b03      	ldr	r3, [sp, #12]
    15f2:	3310      	adds	r3, #16
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	9a05      	ldr	r2, [sp, #20]
    15f8:	4413      	add	r3, r2
    15fa:	9a02      	ldr	r2, [sp, #8]
    15fc:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    15fe:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1602:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1606:	bf00      	nop
    1608:	b006      	add	sp, #24
    160a:	4770      	bx	lr

0000160c <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    160c:	b082      	sub	sp, #8
    160e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1610:	9b01      	ldr	r3, [sp, #4]
    1612:	f003 021f 	and.w	r2, r3, #31
    1616:	4905      	ldr	r1, [pc, #20]	; (162c <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	095b      	lsrs	r3, r3, #5
    161c:	2001      	movs	r0, #1
    161e:	fa00 f202 	lsl.w	r2, r0, r2
    1622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1626:	bf00      	nop
    1628:	b002      	add	sp, #8
    162a:	4770      	bx	lr
    162c:	e000e100 	.word	0xe000e100

00001630 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1630:	b082      	sub	sp, #8
    1632:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1634:	9b01      	ldr	r3, [sp, #4]
    1636:	f003 021f 	and.w	r2, r3, #31
    163a:	4906      	ldr	r1, [pc, #24]	; (1654 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    163c:	9b01      	ldr	r3, [sp, #4]
    163e:	095b      	lsrs	r3, r3, #5
    1640:	2001      	movs	r0, #1
    1642:	fa00 f202 	lsl.w	r2, r0, r2
    1646:	3320      	adds	r3, #32
    1648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    164c:	bf00      	nop
    164e:	b002      	add	sp, #8
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	e000e100 	.word	0xe000e100

00001658 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1658:	b084      	sub	sp, #16
    165a:	9001      	str	r0, [sp, #4]
    165c:	460b      	mov	r3, r1
    165e:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1662:	2304      	movs	r3, #4
    1664:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1668:	f89d 2003 	ldrb.w	r2, [sp, #3]
    166c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1670:	fa02 f103 	lsl.w	r1, r2, r3
    1674:	4a04      	ldr	r2, [pc, #16]	; (1688 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1676:	9b01      	ldr	r3, [sp, #4]
    1678:	b2c9      	uxtb	r1, r1
    167a:	4413      	add	r3, r2
    167c:	460a      	mov	r2, r1
    167e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1682:	bf00      	nop
    1684:	b004      	add	sp, #16
    1686:	4770      	bx	lr
    1688:	e000e100 	.word	0xe000e100

0000168c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    168c:	b084      	sub	sp, #16
    168e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1690:	2304      	movs	r3, #4
    1692:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1696:	4a09      	ldr	r2, [pc, #36]	; (16bc <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1698:	9b01      	ldr	r3, [sp, #4]
    169a:	4413      	add	r3, r2
    169c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    16a0:	b2db      	uxtb	r3, r3
    16a2:	461a      	mov	r2, r3
    16a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16a8:	fa42 f303 	asr.w	r3, r2, r3
    16ac:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    16b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    16b4:	4618      	mov	r0, r3
    16b6:	b004      	add	sp, #16
    16b8:	4770      	bx	lr
    16ba:	bf00      	nop
    16bc:	e000e100 	.word	0xe000e100

000016c0 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    16c0:	b082      	sub	sp, #8
    16c2:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16c4:	9b01      	ldr	r3, [sp, #4]
    16c6:	f003 021f 	and.w	r2, r3, #31
    16ca:	4906      	ldr	r1, [pc, #24]	; (16e4 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    16cc:	9b01      	ldr	r3, [sp, #4]
    16ce:	095b      	lsrs	r3, r3, #5
    16d0:	2001      	movs	r0, #1
    16d2:	fa00 f202 	lsl.w	r2, r0, r2
    16d6:	3360      	adds	r3, #96	; 0x60
    16d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    16dc:	bf00      	nop
    16de:	b002      	add	sp, #8
    16e0:	4770      	bx	lr
    16e2:	bf00      	nop
    16e4:	e000e100 	.word	0xe000e100

000016e8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    16e8:	b500      	push	{lr}
    16ea:	b085      	sub	sp, #20
    16ec:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    16ee:	2300      	movs	r3, #0
    16f0:	9303      	str	r3, [sp, #12]
    16f2:	e05d      	b.n	17b0 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    16f4:	9b01      	ldr	r3, [sp, #4]
    16f6:	6859      	ldr	r1, [r3, #4]
    16f8:	9a03      	ldr	r2, [sp, #12]
    16fa:	4613      	mov	r3, r2
    16fc:	005b      	lsls	r3, r3, #1
    16fe:	4413      	add	r3, r2
    1700:	009b      	lsls	r3, r3, #2
    1702:	440b      	add	r3, r1
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	4618      	mov	r0, r3
    1708:	f000 f899 	bl	183e <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	6859      	ldr	r1, [r3, #4]
    1710:	9a03      	ldr	r2, [sp, #12]
    1712:	4613      	mov	r3, r2
    1714:	005b      	lsls	r3, r3, #1
    1716:	4413      	add	r3, r2
    1718:	009b      	lsls	r3, r3, #2
    171a:	440b      	add	r3, r1
    171c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    171e:	9b01      	ldr	r3, [sp, #4]
    1720:	6859      	ldr	r1, [r3, #4]
    1722:	9a03      	ldr	r2, [sp, #12]
    1724:	4613      	mov	r3, r2
    1726:	005b      	lsls	r3, r3, #1
    1728:	4413      	add	r3, r2
    172a:	009b      	lsls	r3, r3, #2
    172c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    172e:	795b      	ldrb	r3, [r3, #5]
    1730:	4619      	mov	r1, r3
    1732:	f000 f869 	bl	1808 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1736:	9b01      	ldr	r3, [sp, #4]
    1738:	6859      	ldr	r1, [r3, #4]
    173a:	9a03      	ldr	r2, [sp, #12]
    173c:	4613      	mov	r3, r2
    173e:	005b      	lsls	r3, r3, #1
    1740:	4413      	add	r3, r2
    1742:	009b      	lsls	r3, r3, #2
    1744:	440b      	add	r3, r1
    1746:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	6859      	ldr	r1, [r3, #4]
    174c:	9a03      	ldr	r2, [sp, #12]
    174e:	4613      	mov	r3, r2
    1750:	005b      	lsls	r3, r3, #1
    1752:	4413      	add	r3, r2
    1754:	009b      	lsls	r3, r3, #2
    1756:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1758:	689b      	ldr	r3, [r3, #8]
    175a:	2200      	movs	r2, #0
    175c:	4619      	mov	r1, r3
    175e:	f000 f831 	bl	17c4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1762:	9b01      	ldr	r3, [sp, #4]
    1764:	6859      	ldr	r1, [r3, #4]
    1766:	9a03      	ldr	r2, [sp, #12]
    1768:	4613      	mov	r3, r2
    176a:	005b      	lsls	r3, r3, #1
    176c:	4413      	add	r3, r2
    176e:	009b      	lsls	r3, r3, #2
    1770:	440b      	add	r3, r1
    1772:	791b      	ldrb	r3, [r3, #4]
    1774:	2b00      	cmp	r3, #0
    1776:	d00c      	beq.n	1792 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1778:	9b01      	ldr	r3, [sp, #4]
    177a:	6859      	ldr	r1, [r3, #4]
    177c:	9a03      	ldr	r2, [sp, #12]
    177e:	4613      	mov	r3, r2
    1780:	005b      	lsls	r3, r3, #1
    1782:	4413      	add	r3, r2
    1784:	009b      	lsls	r3, r3, #2
    1786:	440b      	add	r3, r1
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	4618      	mov	r0, r3
    178c:	f000 f828 	bl	17e0 <IntCtrl_Ip_EnableIrq>
    1790:	e00b      	b.n	17aa <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1792:	9b01      	ldr	r3, [sp, #4]
    1794:	6859      	ldr	r1, [r3, #4]
    1796:	9a03      	ldr	r2, [sp, #12]
    1798:	4613      	mov	r3, r2
    179a:	005b      	lsls	r3, r3, #1
    179c:	4413      	add	r3, r2
    179e:	009b      	lsls	r3, r3, #2
    17a0:	440b      	add	r3, r1
    17a2:	681b      	ldr	r3, [r3, #0]
    17a4:	4618      	mov	r0, r3
    17a6:	f000 f825 	bl	17f4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    17aa:	9b03      	ldr	r3, [sp, #12]
    17ac:	3301      	adds	r3, #1
    17ae:	9303      	str	r3, [sp, #12]
    17b0:	9b01      	ldr	r3, [sp, #4]
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	9a03      	ldr	r2, [sp, #12]
    17b6:	429a      	cmp	r2, r3
    17b8:	d39c      	bcc.n	16f4 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    17ba:	2300      	movs	r3, #0
}
    17bc:	4618      	mov	r0, r3
    17be:	b005      	add	sp, #20
    17c0:	f85d fb04 	ldr.w	pc, [sp], #4

000017c4 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17c4:	b500      	push	{lr}
    17c6:	b085      	sub	sp, #20
    17c8:	9003      	str	r0, [sp, #12]
    17ca:	9102      	str	r1, [sp, #8]
    17cc:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    17ce:	9a01      	ldr	r2, [sp, #4]
    17d0:	9902      	ldr	r1, [sp, #8]
    17d2:	9803      	ldr	r0, [sp, #12]
    17d4:	f7ff fef8 	bl	15c8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    17d8:	bf00      	nop
    17da:	b005      	add	sp, #20
    17dc:	f85d fb04 	ldr.w	pc, [sp], #4

000017e0 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    17e0:	b500      	push	{lr}
    17e2:	b083      	sub	sp, #12
    17e4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    17e6:	9801      	ldr	r0, [sp, #4]
    17e8:	f7ff ff10 	bl	160c <IntCtrl_Ip_EnableIrqPrivileged>
}
    17ec:	bf00      	nop
    17ee:	b003      	add	sp, #12
    17f0:	f85d fb04 	ldr.w	pc, [sp], #4

000017f4 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    17f4:	b500      	push	{lr}
    17f6:	b083      	sub	sp, #12
    17f8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    17fa:	9801      	ldr	r0, [sp, #4]
    17fc:	f7ff ff18 	bl	1630 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1800:	bf00      	nop
    1802:	b003      	add	sp, #12
    1804:	f85d fb04 	ldr.w	pc, [sp], #4

00001808 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1808:	b500      	push	{lr}
    180a:	b083      	sub	sp, #12
    180c:	9001      	str	r0, [sp, #4]
    180e:	460b      	mov	r3, r1
    1810:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1814:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1818:	4619      	mov	r1, r3
    181a:	9801      	ldr	r0, [sp, #4]
    181c:	f7ff ff1c 	bl	1658 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1820:	bf00      	nop
    1822:	b003      	add	sp, #12
    1824:	f85d fb04 	ldr.w	pc, [sp], #4

00001828 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1828:	b500      	push	{lr}
    182a:	b083      	sub	sp, #12
    182c:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    182e:	9801      	ldr	r0, [sp, #4]
    1830:	f7ff ff2c 	bl	168c <IntCtrl_Ip_GetPriorityPrivileged>
    1834:	4603      	mov	r3, r0
}
    1836:	4618      	mov	r0, r3
    1838:	b003      	add	sp, #12
    183a:	f85d fb04 	ldr.w	pc, [sp], #4

0000183e <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    183e:	b500      	push	{lr}
    1840:	b083      	sub	sp, #12
    1842:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1844:	9801      	ldr	r0, [sp, #4]
    1846:	f7ff ff3b 	bl	16c0 <IntCtrl_Ip_ClearPendingPrivileged>
}
    184a:	bf00      	nop
    184c:	b003      	add	sp, #12
    184e:	f85d fb04 	ldr.w	pc, [sp], #4
    1852:	bf00      	nop

00001854 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1854:	b500      	push	{lr}
    1856:	b083      	sub	sp, #12
    1858:	9001      	str	r0, [sp, #4]
    185a:	460b      	mov	r3, r1
    185c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1860:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1864:	2b00      	cmp	r3, #0
    1866:	d003      	beq.n	1870 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1868:	9801      	ldr	r0, [sp, #4]
    186a:	f7ff ffb9 	bl	17e0 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    186e:	e002      	b.n	1876 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1870:	9801      	ldr	r0, [sp, #4]
    1872:	f7ff ffbf 	bl	17f4 <IntCtrl_Ip_DisableIrq>
}
    1876:	bf00      	nop
    1878:	b003      	add	sp, #12
    187a:	f85d fb04 	ldr.w	pc, [sp], #4

0000187e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    187e:	b500      	push	{lr}
    1880:	b083      	sub	sp, #12
    1882:	9001      	str	r0, [sp, #4]
    1884:	460b      	mov	r3, r1
    1886:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    188a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    188e:	4619      	mov	r1, r3
    1890:	9801      	ldr	r0, [sp, #4]
    1892:	f7ff ffb9 	bl	1808 <IntCtrl_Ip_SetPriority>
}
    1896:	bf00      	nop
    1898:	b003      	add	sp, #12
    189a:	f85d fb04 	ldr.w	pc, [sp], #4

0000189e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    189e:	b500      	push	{lr}
    18a0:	b083      	sub	sp, #12
    18a2:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    18a4:	9801      	ldr	r0, [sp, #4]
    18a6:	f7ff ffbf 	bl	1828 <IntCtrl_Ip_GetPriority>
    18aa:	4603      	mov	r3, r0
}
    18ac:	4618      	mov	r0, r3
    18ae:	b003      	add	sp, #12
    18b0:	f85d fb04 	ldr.w	pc, [sp], #4

000018b4 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    18b4:	b500      	push	{lr}
    18b6:	b085      	sub	sp, #20
    18b8:	9003      	str	r0, [sp, #12]
    18ba:	9102      	str	r1, [sp, #8]
    18bc:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    18be:	9a01      	ldr	r2, [sp, #4]
    18c0:	9902      	ldr	r1, [sp, #8]
    18c2:	9803      	ldr	r0, [sp, #12]
    18c4:	f7ff ff7e 	bl	17c4 <IntCtrl_Ip_InstallHandler>
}
    18c8:	bf00      	nop
    18ca:	b005      	add	sp, #20
    18cc:	f85d fb04 	ldr.w	pc, [sp], #4

000018d0 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    18d0:	b500      	push	{lr}
    18d2:	b085      	sub	sp, #20
    18d4:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    18d6:	2300      	movs	r3, #0
    18d8:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    18dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18e0:	4a05      	ldr	r2, [pc, #20]	; (18f8 <Platform_Init+0x28>)
    18e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	4618      	mov	r0, r3
    18ea:	f000 f8c7 	bl	1a7c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    18ee:	bf00      	nop
    18f0:	b005      	add	sp, #20
    18f2:	f85d fb04 	ldr.w	pc, [sp], #4
    18f6:	bf00      	nop
    18f8:	00010cdc 	.word	0x00010cdc

000018fc <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    18fc:	b500      	push	{lr}
    18fe:	b085      	sub	sp, #20
    1900:	9001      	str	r0, [sp, #4]
    1902:	460b      	mov	r3, r1
    1904:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1908:	2300      	movs	r3, #0
    190a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    190e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1912:	4619      	mov	r1, r3
    1914:	9801      	ldr	r0, [sp, #4]
    1916:	f7ff ff9d 	bl	1854 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    191a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    191e:	4618      	mov	r0, r3
    1920:	b005      	add	sp, #20
    1922:	f85d fb04 	ldr.w	pc, [sp], #4

00001926 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1926:	b500      	push	{lr}
    1928:	b085      	sub	sp, #20
    192a:	9001      	str	r0, [sp, #4]
    192c:	460b      	mov	r3, r1
    192e:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1932:	2300      	movs	r3, #0
    1934:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1938:	f89d 3003 	ldrb.w	r3, [sp, #3]
    193c:	4619      	mov	r1, r3
    193e:	9801      	ldr	r0, [sp, #4]
    1940:	f7ff ff9d 	bl	187e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1944:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1948:	4618      	mov	r0, r3
    194a:	b005      	add	sp, #20
    194c:	f85d fb04 	ldr.w	pc, [sp], #4

00001950 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1950:	b500      	push	{lr}
    1952:	b085      	sub	sp, #20
    1954:	9001      	str	r0, [sp, #4]
    1956:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1958:	2300      	movs	r3, #0
    195a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    195e:	9801      	ldr	r0, [sp, #4]
    1960:	f7ff ff9d 	bl	189e <Platform_Ipw_GetIrqPriority>
    1964:	4603      	mov	r3, r0
    1966:	461a      	mov	r2, r3
    1968:	9b00      	ldr	r3, [sp, #0]
    196a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    196c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1970:	4618      	mov	r0, r3
    1972:	b005      	add	sp, #20
    1974:	f85d fb04 	ldr.w	pc, [sp], #4

00001978 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1978:	b500      	push	{lr}
    197a:	b087      	sub	sp, #28
    197c:	9003      	str	r0, [sp, #12]
    197e:	9102      	str	r1, [sp, #8]
    1980:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1982:	2300      	movs	r3, #0
    1984:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1988:	9a01      	ldr	r2, [sp, #4]
    198a:	9902      	ldr	r1, [sp, #8]
    198c:	9803      	ldr	r0, [sp, #12]
    198e:	f7ff ff91 	bl	18b4 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1992:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1996:	4618      	mov	r0, r3
    1998:	b007      	add	sp, #28
    199a:	f85d fb04 	ldr.w	pc, [sp], #4
    199e:	bf00      	nop

000019a0 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    19a0:	b500      	push	{lr}
    19a2:	b085      	sub	sp, #20
    19a4:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19a6:	2300      	movs	r3, #0
    19a8:	9303      	str	r3, [sp, #12]
    19aa:	e05d      	b.n	1a68 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19ac:	9b01      	ldr	r3, [sp, #4]
    19ae:	6859      	ldr	r1, [r3, #4]
    19b0:	9a03      	ldr	r2, [sp, #12]
    19b2:	4613      	mov	r3, r2
    19b4:	005b      	lsls	r3, r3, #1
    19b6:	4413      	add	r3, r2
    19b8:	009b      	lsls	r3, r3, #2
    19ba:	440b      	add	r3, r1
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	4618      	mov	r0, r3
    19c0:	f7ff ff3d 	bl	183e <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	6859      	ldr	r1, [r3, #4]
    19c8:	9a03      	ldr	r2, [sp, #12]
    19ca:	4613      	mov	r3, r2
    19cc:	005b      	lsls	r3, r3, #1
    19ce:	4413      	add	r3, r2
    19d0:	009b      	lsls	r3, r3, #2
    19d2:	440b      	add	r3, r1
    19d4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19d6:	9b01      	ldr	r3, [sp, #4]
    19d8:	6859      	ldr	r1, [r3, #4]
    19da:	9a03      	ldr	r2, [sp, #12]
    19dc:	4613      	mov	r3, r2
    19de:	005b      	lsls	r3, r3, #1
    19e0:	4413      	add	r3, r2
    19e2:	009b      	lsls	r3, r3, #2
    19e4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19e6:	795b      	ldrb	r3, [r3, #5]
    19e8:	4619      	mov	r1, r3
    19ea:	f7ff ff0d 	bl	1808 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19ee:	9b01      	ldr	r3, [sp, #4]
    19f0:	6859      	ldr	r1, [r3, #4]
    19f2:	9a03      	ldr	r2, [sp, #12]
    19f4:	4613      	mov	r3, r2
    19f6:	005b      	lsls	r3, r3, #1
    19f8:	4413      	add	r3, r2
    19fa:	009b      	lsls	r3, r3, #2
    19fc:	440b      	add	r3, r1
    19fe:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a00:	9b01      	ldr	r3, [sp, #4]
    1a02:	6859      	ldr	r1, [r3, #4]
    1a04:	9a03      	ldr	r2, [sp, #12]
    1a06:	4613      	mov	r3, r2
    1a08:	005b      	lsls	r3, r3, #1
    1a0a:	4413      	add	r3, r2
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a10:	689b      	ldr	r3, [r3, #8]
    1a12:	2200      	movs	r2, #0
    1a14:	4619      	mov	r1, r3
    1a16:	f7ff fed5 	bl	17c4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a1a:	9b01      	ldr	r3, [sp, #4]
    1a1c:	6859      	ldr	r1, [r3, #4]
    1a1e:	9a03      	ldr	r2, [sp, #12]
    1a20:	4613      	mov	r3, r2
    1a22:	005b      	lsls	r3, r3, #1
    1a24:	4413      	add	r3, r2
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	440b      	add	r3, r1
    1a2a:	791b      	ldrb	r3, [r3, #4]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d00c      	beq.n	1a4a <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a30:	9b01      	ldr	r3, [sp, #4]
    1a32:	6859      	ldr	r1, [r3, #4]
    1a34:	9a03      	ldr	r2, [sp, #12]
    1a36:	4613      	mov	r3, r2
    1a38:	005b      	lsls	r3, r3, #1
    1a3a:	4413      	add	r3, r2
    1a3c:	009b      	lsls	r3, r3, #2
    1a3e:	440b      	add	r3, r1
    1a40:	681b      	ldr	r3, [r3, #0]
    1a42:	4618      	mov	r0, r3
    1a44:	f7ff fecc 	bl	17e0 <IntCtrl_Ip_EnableIrq>
    1a48:	e00b      	b.n	1a62 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a4a:	9b01      	ldr	r3, [sp, #4]
    1a4c:	6859      	ldr	r1, [r3, #4]
    1a4e:	9a03      	ldr	r2, [sp, #12]
    1a50:	4613      	mov	r3, r2
    1a52:	005b      	lsls	r3, r3, #1
    1a54:	4413      	add	r3, r2
    1a56:	009b      	lsls	r3, r3, #2
    1a58:	440b      	add	r3, r1
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	4618      	mov	r0, r3
    1a5e:	f7ff fec9 	bl	17f4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a62:	9b03      	ldr	r3, [sp, #12]
    1a64:	3301      	adds	r3, #1
    1a66:	9303      	str	r3, [sp, #12]
    1a68:	9b01      	ldr	r3, [sp, #4]
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	9a03      	ldr	r2, [sp, #12]
    1a6e:	429a      	cmp	r2, r3
    1a70:	d39c      	bcc.n	19ac <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1a72:	2300      	movs	r3, #0
}
    1a74:	4618      	mov	r0, r3
    1a76:	b005      	add	sp, #20
    1a78:	f85d fb04 	ldr.w	pc, [sp], #4

00001a7c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1a7c:	b500      	push	{lr}
    1a7e:	b085      	sub	sp, #20
    1a80:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1a82:	2300      	movs	r3, #0
    1a84:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1a88:	9b01      	ldr	r3, [sp, #4]
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d007      	beq.n	1aa0 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1a90:	9b01      	ldr	r3, [sp, #4]
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	4618      	mov	r0, r3
    1a96:	f7ff ff83 	bl	19a0 <Platform_Ipw_InitIntCtrl>
    1a9a:	4603      	mov	r3, r0
    1a9c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1aa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1aa4:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1aa6:	bf00      	nop
    1aa8:	b005      	add	sp, #20
    1aaa:	f85d fb04 	ldr.w	pc, [sp], #4

00001aae <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1aae:	2300      	movs	r3, #0
}
    1ab0:	4618      	mov	r0, r3
    1ab2:	4770      	bx	lr

00001ab4 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1ab4:	b082      	sub	sp, #8
    1ab6:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1ab8:	2301      	movs	r3, #1
}
    1aba:	4618      	mov	r0, r3
    1abc:	b002      	add	sp, #8
    1abe:	4770      	bx	lr

00001ac0 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ac0:	b082      	sub	sp, #8
    1ac2:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1ac4:	bf00      	nop
    1ac6:	b002      	add	sp, #8
    1ac8:	4770      	bx	lr

00001aca <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1aca:	b082      	sub	sp, #8
    1acc:	9001      	str	r0, [sp, #4]
    return Micros;
    1ace:	9b01      	ldr	r3, [sp, #4]
}
    1ad0:	4618      	mov	r0, r3
    1ad2:	b002      	add	sp, #8
    1ad4:	4770      	bx	lr

00001ad6 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1ad6:	b500      	push	{lr}
    1ad8:	b083      	sub	sp, #12
    1ada:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1adc:	f000 f86c 	bl	1bb8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1ae0:	bf00      	nop
    1ae2:	b003      	add	sp, #12
    1ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ae8 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1ae8:	b500      	push	{lr}
    1aea:	b085      	sub	sp, #20
    1aec:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1aee:	2300      	movs	r3, #0
    1af0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1af2:	9b01      	ldr	r3, [sp, #4]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d003      	beq.n	1b00 <OsIf_GetCounter+0x18>
    1af8:	9b01      	ldr	r3, [sp, #4]
    1afa:	2b01      	cmp	r3, #1
    1afc:	d004      	beq.n	1b08 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1afe:	e007      	b.n	1b10 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b00:	f7ff ffd5 	bl	1aae <OsIf_Timer_Dummy_GetCounter>
    1b04:	9003      	str	r0, [sp, #12]
            break;
    1b06:	e003      	b.n	1b10 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1b08:	f000 f872 	bl	1bf0 <OsIf_Timer_System_GetCounter>
    1b0c:	9003      	str	r0, [sp, #12]
            break;
    1b0e:	bf00      	nop
    }

    return Value;
    1b10:	9b03      	ldr	r3, [sp, #12]
}
    1b12:	4618      	mov	r0, r3
    1b14:	b005      	add	sp, #20
    1b16:	f85d fb04 	ldr.w	pc, [sp], #4

00001b1a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1b1a:	b500      	push	{lr}
    1b1c:	b085      	sub	sp, #20
    1b1e:	9001      	str	r0, [sp, #4]
    1b20:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b22:	2300      	movs	r3, #0
    1b24:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b26:	9b00      	ldr	r3, [sp, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d003      	beq.n	1b34 <OsIf_GetElapsed+0x1a>
    1b2c:	9b00      	ldr	r3, [sp, #0]
    1b2e:	2b01      	cmp	r3, #1
    1b30:	d005      	beq.n	1b3e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b32:	e009      	b.n	1b48 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1b34:	9801      	ldr	r0, [sp, #4]
    1b36:	f7ff ffbd 	bl	1ab4 <OsIf_Timer_Dummy_GetElapsed>
    1b3a:	9003      	str	r0, [sp, #12]
            break;
    1b3c:	e004      	b.n	1b48 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1b3e:	9801      	ldr	r0, [sp, #4]
    1b40:	f000 f864 	bl	1c0c <OsIf_Timer_System_GetElapsed>
    1b44:	9003      	str	r0, [sp, #12]
            break;
    1b46:	bf00      	nop
    }

    return Value;
    1b48:	9b03      	ldr	r3, [sp, #12]
}
    1b4a:	4618      	mov	r0, r3
    1b4c:	b005      	add	sp, #20
    1b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b52 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1b52:	b500      	push	{lr}
    1b54:	b083      	sub	sp, #12
    1b56:	9001      	str	r0, [sp, #4]
    1b58:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1b5a:	9b00      	ldr	r3, [sp, #0]
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d003      	beq.n	1b68 <OsIf_SetTimerFrequency+0x16>
    1b60:	9b00      	ldr	r3, [sp, #0]
    1b62:	2b01      	cmp	r3, #1
    1b64:	d004      	beq.n	1b70 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b66:	e007      	b.n	1b78 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1b68:	9801      	ldr	r0, [sp, #4]
    1b6a:	f7ff ffa9 	bl	1ac0 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1b6e:	e003      	b.n	1b78 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1b70:	9801      	ldr	r0, [sp, #4]
    1b72:	f000 f85b 	bl	1c2c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1b76:	bf00      	nop
    }
}
    1b78:	bf00      	nop
    1b7a:	b003      	add	sp, #12
    1b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b80 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1b80:	b500      	push	{lr}
    1b82:	b085      	sub	sp, #20
    1b84:	9001      	str	r0, [sp, #4]
    1b86:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b88:	2300      	movs	r3, #0
    1b8a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b8c:	9b00      	ldr	r3, [sp, #0]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d003      	beq.n	1b9a <OsIf_MicrosToTicks+0x1a>
    1b92:	9b00      	ldr	r3, [sp, #0]
    1b94:	2b01      	cmp	r3, #1
    1b96:	d005      	beq.n	1ba4 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b98:	e009      	b.n	1bae <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1b9a:	9801      	ldr	r0, [sp, #4]
    1b9c:	f7ff ff95 	bl	1aca <OsIf_Timer_Dummy_MicrosToTicks>
    1ba0:	9003      	str	r0, [sp, #12]
            break;
    1ba2:	e004      	b.n	1bae <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1ba4:	9801      	ldr	r0, [sp, #4]
    1ba6:	f000 f84f 	bl	1c48 <OsIf_Timer_System_MicrosToTicks>
    1baa:	9003      	str	r0, [sp, #12]
            break;
    1bac:	bf00      	nop
    }

    return Value;
    1bae:	9b03      	ldr	r3, [sp, #12]
}
    1bb0:	4618      	mov	r0, r3
    1bb2:	b005      	add	sp, #20
    1bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bb8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1bb8:	b500      	push	{lr}
    1bba:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1bbc:	2300      	movs	r3, #0
    1bbe:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1bc0:	4a09      	ldr	r2, [pc, #36]	; (1be8 <OsIf_Timer_System_Init+0x30>)
    1bc2:	9b01      	ldr	r3, [sp, #4]
    1bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bc8:	685a      	ldr	r2, [r3, #4]
    1bca:	4908      	ldr	r1, [pc, #32]	; (1bec <OsIf_Timer_System_Init+0x34>)
    1bcc:	9b01      	ldr	r3, [sp, #4]
    1bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1bd2:	4a06      	ldr	r2, [pc, #24]	; (1bec <OsIf_Timer_System_Init+0x34>)
    1bd4:	9b01      	ldr	r3, [sp, #4]
    1bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bda:	4618      	mov	r0, r3
    1bdc:	f000 f868 	bl	1cb0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1be0:	bf00      	nop
    1be2:	b003      	add	sp, #12
    1be4:	f85d fb04 	ldr.w	pc, [sp], #4
    1be8:	00010cb4 	.word	0x00010cb4
    1bec:	1fff8b30 	.word	0x1fff8b30

00001bf0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1bf0:	b500      	push	{lr}
    1bf2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1bf4:	2300      	movs	r3, #0
    1bf6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1bf8:	2300      	movs	r3, #0
    1bfa:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1bfc:	f000 f86c 	bl	1cd8 <OsIf_Timer_System_Internal_GetCounter>
    1c00:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c02:	9b01      	ldr	r3, [sp, #4]
}
    1c04:	4618      	mov	r0, r3
    1c06:	b003      	add	sp, #12
    1c08:	f85d fb04 	ldr.w	pc, [sp], #4

00001c0c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1c0c:	b500      	push	{lr}
    1c0e:	b085      	sub	sp, #20
    1c10:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c12:	2300      	movs	r3, #0
    1c14:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c16:	2300      	movs	r3, #0
    1c18:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1c1a:	9801      	ldr	r0, [sp, #4]
    1c1c:	f000 f864 	bl	1ce8 <OsIf_Timer_System_Internal_GetElapsed>
    1c20:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1c22:	9b03      	ldr	r3, [sp, #12]
}
    1c24:	4618      	mov	r0, r3
    1c26:	b005      	add	sp, #20
    1c28:	f85d fb04 	ldr.w	pc, [sp], #4

00001c2c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1c2c:	b084      	sub	sp, #16
    1c2e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c30:	2300      	movs	r3, #0
    1c32:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1c34:	4903      	ldr	r1, [pc, #12]	; (1c44 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1c36:	9b03      	ldr	r3, [sp, #12]
    1c38:	9a01      	ldr	r2, [sp, #4]
    1c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1c3e:	bf00      	nop
    1c40:	b004      	add	sp, #16
    1c42:	4770      	bx	lr
    1c44:	1fff8b30 	.word	0x1fff8b30

00001c48 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4a:	b087      	sub	sp, #28
    1c4c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1c4e:	2100      	movs	r1, #0
    1c50:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1c52:	2100      	movs	r1, #0
    1c54:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1c56:	9901      	ldr	r1, [sp, #4]
    1c58:	2000      	movs	r0, #0
    1c5a:	460e      	mov	r6, r1
    1c5c:	4607      	mov	r7, r0
    1c5e:	4812      	ldr	r0, [pc, #72]	; (1ca8 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1c60:	9904      	ldr	r1, [sp, #16]
    1c62:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1c66:	2000      	movs	r0, #0
    1c68:	460c      	mov	r4, r1
    1c6a:	4605      	mov	r5, r0
    1c6c:	fb04 f007 	mul.w	r0, r4, r7
    1c70:	fb06 f105 	mul.w	r1, r6, r5
    1c74:	4401      	add	r1, r0
    1c76:	fba6 2304 	umull	r2, r3, r6, r4
    1c7a:	4419      	add	r1, r3
    1c7c:	460b      	mov	r3, r1
    1c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1c8a:	4a08      	ldr	r2, [pc, #32]	; (1cac <OsIf_Timer_System_MicrosToTicks+0x64>)
    1c8c:	f04f 0300 	mov.w	r3, #0
    1c90:	f7fe fc88 	bl	5a4 <__aeabi_uldivmod>
    1c94:	4602      	mov	r2, r0
    1c96:	460b      	mov	r3, r1
    1c98:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1c9c:	9b02      	ldr	r3, [sp, #8]
    1c9e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1ca0:	9b05      	ldr	r3, [sp, #20]
}
    1ca2:	4618      	mov	r0, r3
    1ca4:	b007      	add	sp, #28
    1ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ca8:	1fff8b30 	.word	0x1fff8b30
    1cac:	000f4240 	.word	0x000f4240

00001cb0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1cb0:	b082      	sub	sp, #8
    1cb2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1cb4:	4b07      	ldr	r3, [pc, #28]	; (1cd4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cb6:	2200      	movs	r2, #0
    1cb8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1cba:	4b06      	ldr	r3, [pc, #24]	; (1cd4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cbc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1cc0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1cc2:	4b04      	ldr	r3, [pc, #16]	; (1cd4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cc4:	2200      	movs	r2, #0
    1cc6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1cc8:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cca:	2205      	movs	r2, #5
    1ccc:	601a      	str	r2, [r3, #0]
}
    1cce:	bf00      	nop
    1cd0:	b002      	add	sp, #8
    1cd2:	4770      	bx	lr
    1cd4:	e000e010 	.word	0xe000e010

00001cd8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1cd8:	4b02      	ldr	r3, [pc, #8]	; (1ce4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1cda:	689b      	ldr	r3, [r3, #8]
    1cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1ce0:	4618      	mov	r0, r3
    1ce2:	4770      	bx	lr
    1ce4:	e000e010 	.word	0xe000e010

00001ce8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1ce8:	b084      	sub	sp, #16
    1cea:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1cec:	4b10      	ldr	r3, [pc, #64]	; (1d30 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1cee:	689b      	ldr	r3, [r3, #8]
    1cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1cf4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1cf6:	2300      	movs	r3, #0
    1cf8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1cfa:	9b01      	ldr	r3, [sp, #4]
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	9a02      	ldr	r2, [sp, #8]
    1d00:	429a      	cmp	r2, r3
    1d02:	d909      	bls.n	1d18 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1d04:	9b01      	ldr	r3, [sp, #4]
    1d06:	681a      	ldr	r2, [r3, #0]
    1d08:	9b02      	ldr	r3, [sp, #8]
    1d0a:	1ad3      	subs	r3, r2, r3
    1d0c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d10:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d14:	9303      	str	r3, [sp, #12]
    1d16:	e004      	b.n	1d22 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1d18:	9b01      	ldr	r3, [sp, #4]
    1d1a:	681a      	ldr	r2, [r3, #0]
    1d1c:	9b02      	ldr	r3, [sp, #8]
    1d1e:	1ad3      	subs	r3, r2, r3
    1d20:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1d22:	9b01      	ldr	r3, [sp, #4]
    1d24:	9a02      	ldr	r2, [sp, #8]
    1d26:	601a      	str	r2, [r3, #0]

    return dif;
    1d28:	9b03      	ldr	r3, [sp, #12]
}
    1d2a:	4618      	mov	r0, r3
    1d2c:	b004      	add	sp, #16
    1d2e:	4770      	bx	lr
    1d30:	e000e010 	.word	0xe000e010

00001d34 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1d34:	b082      	sub	sp, #8
    1d36:	9001      	str	r0, [sp, #4]
    1d38:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1d3a:	bf00      	nop
    1d3c:	b002      	add	sp, #8
    1d3e:	4770      	bx	lr

00001d40 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1d40:	b500      	push	{lr}
    1d42:	b085      	sub	sp, #20
    1d44:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1d46:	4b24      	ldr	r3, [pc, #144]	; (1dd8 <Clock_Ip_UpdateDriverContext+0x98>)
    1d48:	2201      	movs	r2, #1
    1d4a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1d4c:	4b23      	ldr	r3, [pc, #140]	; (1ddc <Clock_Ip_UpdateDriverContext+0x9c>)
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	2102      	movs	r1, #2
    1d52:	4618      	mov	r0, r3
    1d54:	f003 fc32 	bl	55bc <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d58:	2300      	movs	r3, #0
    1d5a:	f88d 300f 	strb.w	r3, [sp, #15]
    1d5e:	e015      	b.n	1d8c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1d60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d64:	9a01      	ldr	r2, [sp, #4]
    1d66:	334a      	adds	r3, #74	; 0x4a
    1d68:	00db      	lsls	r3, r3, #3
    1d6a:	4413      	add	r3, r2
    1d6c:	6858      	ldr	r0, [r3, #4]
    1d6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d72:	9a01      	ldr	r2, [sp, #4]
    1d74:	334a      	adds	r3, #74	; 0x4a
    1d76:	00db      	lsls	r3, r3, #3
    1d78:	4413      	add	r3, r2
    1d7a:	689b      	ldr	r3, [r3, #8]
    1d7c:	4619      	mov	r1, r3
    1d7e:	f001 fadc 	bl	333a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d86:	3301      	adds	r3, #1
    1d88:	f88d 300f 	strb.w	r3, [sp, #15]
    1d8c:	9b01      	ldr	r3, [sp, #4]
    1d8e:	7bdb      	ldrb	r3, [r3, #15]
    1d90:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d94:	429a      	cmp	r2, r3
    1d96:	d3e3      	bcc.n	1d60 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1d98:	f000 f824 	bl	1de4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1d9c:	2301      	movs	r3, #1
    1d9e:	f88d 300f 	strb.w	r3, [sp, #15]
    1da2:	e00e      	b.n	1dc2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1da4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1da8:	9b01      	ldr	r3, [sp, #4]
    1daa:	327e      	adds	r2, #126	; 0x7e
    1dac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1db0:	490b      	ldr	r1, [pc, #44]	; (1de0 <Clock_Ip_UpdateDriverContext+0xa0>)
    1db2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1db6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1db8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dbc:	3301      	adds	r3, #1
    1dbe:	f88d 300f 	strb.w	r3, [sp, #15]
    1dc2:	9b01      	ldr	r3, [sp, #4]
    1dc4:	7cdb      	ldrb	r3, [r3, #19]
    1dc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dca:	429a      	cmp	r2, r3
    1dcc:	d3ea      	bcc.n	1da4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1dce:	bf00      	nop
    1dd0:	bf00      	nop
    1dd2:	b005      	add	sp, #20
    1dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    1dd8:	1fff8b10 	.word	0x1fff8b10
    1ddc:	1fff8b34 	.word	0x1fff8b34
    1de0:	1fff8b40 	.word	0x1fff8b40

00001de4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1de4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1de6:	4b23      	ldr	r3, [pc, #140]	; (1e74 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1de8:	781b      	ldrb	r3, [r3, #0]
    1dea:	f083 0301 	eor.w	r3, r3, #1
    1dee:	b2db      	uxtb	r3, r3
    1df0:	2b00      	cmp	r3, #0
    1df2:	d03d      	beq.n	1e70 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1df4:	4b1f      	ldr	r3, [pc, #124]	; (1e74 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1df6:	2201      	movs	r2, #1
    1df8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1dfa:	4b1f      	ldr	r3, [pc, #124]	; (1e78 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1dfc:	685b      	ldr	r3, [r3, #4]
    1dfe:	2100      	movs	r1, #0
    1e00:	2000      	movs	r0, #0
    1e02:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1e04:	4b1c      	ldr	r3, [pc, #112]	; (1e78 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e06:	689b      	ldr	r3, [r3, #8]
    1e08:	2057      	movs	r0, #87	; 0x57
    1e0a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e0c:	4b1b      	ldr	r3, [pc, #108]	; (1e7c <Clock_Ip_CallEmptyCallbacks+0x98>)
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	2000      	movs	r0, #0
    1e12:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e14:	4b1a      	ldr	r3, [pc, #104]	; (1e80 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	2000      	movs	r0, #0
    1e1a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1e1c:	4b19      	ldr	r3, [pc, #100]	; (1e84 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	2000      	movs	r0, #0
    1e22:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e24:	4b18      	ldr	r3, [pc, #96]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e26:	685b      	ldr	r3, [r3, #4]
    1e28:	2000      	movs	r0, #0
    1e2a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e2c:	4b16      	ldr	r3, [pc, #88]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e2e:	689b      	ldr	r3, [r3, #8]
    1e30:	2057      	movs	r0, #87	; 0x57
    1e32:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e34:	4b15      	ldr	r3, [pc, #84]	; (1e8c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	2000      	movs	r0, #0
    1e3a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1e3c:	4b13      	ldr	r3, [pc, #76]	; (1e8c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e3e:	685b      	ldr	r3, [r3, #4]
    1e40:	2100      	movs	r1, #0
    1e42:	2057      	movs	r0, #87	; 0x57
    1e44:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e46:	4b12      	ldr	r3, [pc, #72]	; (1e90 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1e48:	681b      	ldr	r3, [r3, #0]
    1e4a:	2000      	movs	r0, #0
    1e4c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e4e:	4b11      	ldr	r3, [pc, #68]	; (1e94 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e50:	685b      	ldr	r3, [r3, #4]
    1e52:	2000      	movs	r0, #0
    1e54:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e56:	4b0f      	ldr	r3, [pc, #60]	; (1e94 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e58:	689b      	ldr	r3, [r3, #8]
    1e5a:	2057      	movs	r0, #87	; 0x57
    1e5c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e5e:	4b0e      	ldr	r3, [pc, #56]	; (1e98 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1e60:	685b      	ldr	r3, [r3, #4]
    1e62:	2000      	movs	r0, #0
    1e64:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e66:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1e68:	681b      	ldr	r3, [r3, #0]
    1e6a:	2100      	movs	r1, #0
    1e6c:	2000      	movs	r0, #0
    1e6e:	4798      	blx	r3
    }
}
    1e70:	bf00      	nop
    1e72:	bd08      	pop	{r3, pc}
    1e74:	1fff8b38 	.word	0x1fff8b38
    1e78:	00010678 	.word	0x00010678
    1e7c:	0001058c 	.word	0x0001058c
    1e80:	000105c8 	.word	0x000105c8
    1e84:	000105d0 	.word	0x000105d0
    1e88:	000105f8 	.word	0x000105f8
    1e8c:	00010604 	.word	0x00010604
    1e90:	0001063c 	.word	0x0001063c
    1e94:	00010688 	.word	0x00010688
    1e98:	000106b4 	.word	0x000106b4
    1e9c:	000106b0 	.word	0x000106b0

00001ea0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1ea0:	b500      	push	{lr}
    1ea2:	b085      	sub	sp, #20
    1ea4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1ea6:	9b01      	ldr	r3, [sp, #4]
    1ea8:	7adb      	ldrb	r3, [r3, #11]
    1eaa:	9303      	str	r3, [sp, #12]
    1eac:	e01f      	b.n	1eee <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1eae:	9b03      	ldr	r3, [sp, #12]
    1eb0:	1e5a      	subs	r2, r3, #1
    1eb2:	9b01      	ldr	r3, [sp, #4]
    1eb4:	320d      	adds	r2, #13
    1eb6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1eba:	495a      	ldr	r1, [pc, #360]	; (2024 <Clock_Ip_ResetClockConfiguration+0x184>)
    1ebc:	4613      	mov	r3, r2
    1ebe:	00db      	lsls	r3, r3, #3
    1ec0:	4413      	add	r3, r2
    1ec2:	440b      	add	r3, r1
    1ec4:	3301      	adds	r3, #1
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	461a      	mov	r2, r3
    1eca:	4b57      	ldr	r3, [pc, #348]	; (2028 <Clock_Ip_ResetClockConfiguration+0x188>)
    1ecc:	5c9b      	ldrb	r3, [r3, r2]
    1ece:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1ed0:	4a56      	ldr	r2, [pc, #344]	; (202c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1ed2:	9b02      	ldr	r3, [sp, #8]
    1ed4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1ed8:	9a03      	ldr	r2, [sp, #12]
    1eda:	3a01      	subs	r2, #1
    1edc:	320d      	adds	r2, #13
    1ede:	00d2      	lsls	r2, r2, #3
    1ee0:	9901      	ldr	r1, [sp, #4]
    1ee2:	440a      	add	r2, r1
    1ee4:	4610      	mov	r0, r2
    1ee6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1ee8:	9b03      	ldr	r3, [sp, #12]
    1eea:	3b01      	subs	r3, #1
    1eec:	9303      	str	r3, [sp, #12]
    1eee:	9b03      	ldr	r3, [sp, #12]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d1dc      	bne.n	1eae <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1ef4:	9b01      	ldr	r3, [sp, #4]
    1ef6:	7b9b      	ldrb	r3, [r3, #14]
    1ef8:	9303      	str	r3, [sp, #12]
    1efa:	e026      	b.n	1f4a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1efc:	9b03      	ldr	r3, [sp, #12]
    1efe:	3b01      	subs	r3, #1
    1f00:	9a01      	ldr	r2, [sp, #4]
    1f02:	3324      	adds	r3, #36	; 0x24
    1f04:	011b      	lsls	r3, r3, #4
    1f06:	4413      	add	r3, r2
    1f08:	3304      	adds	r3, #4
    1f0a:	681a      	ldr	r2, [r3, #0]
    1f0c:	4945      	ldr	r1, [pc, #276]	; (2024 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f0e:	4613      	mov	r3, r2
    1f10:	00db      	lsls	r3, r3, #3
    1f12:	4413      	add	r3, r2
    1f14:	440b      	add	r3, r1
    1f16:	3301      	adds	r3, #1
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	461a      	mov	r2, r3
    1f1c:	4b44      	ldr	r3, [pc, #272]	; (2030 <Clock_Ip_ResetClockConfiguration+0x190>)
    1f1e:	5c9b      	ldrb	r3, [r3, r2]
    1f20:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1f22:	4944      	ldr	r1, [pc, #272]	; (2034 <Clock_Ip_ResetClockConfiguration+0x194>)
    1f24:	9a02      	ldr	r2, [sp, #8]
    1f26:	4613      	mov	r3, r2
    1f28:	005b      	lsls	r3, r3, #1
    1f2a:	4413      	add	r3, r2
    1f2c:	009b      	lsls	r3, r3, #2
    1f2e:	440b      	add	r3, r1
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	9a03      	ldr	r2, [sp, #12]
    1f34:	3a01      	subs	r2, #1
    1f36:	3224      	adds	r2, #36	; 0x24
    1f38:	0112      	lsls	r2, r2, #4
    1f3a:	9901      	ldr	r1, [sp, #4]
    1f3c:	440a      	add	r2, r1
    1f3e:	3204      	adds	r2, #4
    1f40:	4610      	mov	r0, r2
    1f42:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f44:	9b03      	ldr	r3, [sp, #12]
    1f46:	3b01      	subs	r3, #1
    1f48:	9303      	str	r3, [sp, #12]
    1f4a:	9b03      	ldr	r3, [sp, #12]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d1d5      	bne.n	1efc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f50:	9b01      	ldr	r3, [sp, #4]
    1f52:	7a9b      	ldrb	r3, [r3, #10]
    1f54:	9303      	str	r3, [sp, #12]
    1f56:	e02a      	b.n	1fae <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f58:	9b03      	ldr	r3, [sp, #12]
    1f5a:	1e5a      	subs	r2, r3, #1
    1f5c:	9901      	ldr	r1, [sp, #4]
    1f5e:	4613      	mov	r3, r2
    1f60:	009b      	lsls	r3, r3, #2
    1f62:	4413      	add	r3, r2
    1f64:	00db      	lsls	r3, r3, #3
    1f66:	440b      	add	r3, r1
    1f68:	3340      	adds	r3, #64	; 0x40
    1f6a:	681a      	ldr	r2, [r3, #0]
    1f6c:	492d      	ldr	r1, [pc, #180]	; (2024 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f6e:	4613      	mov	r3, r2
    1f70:	00db      	lsls	r3, r3, #3
    1f72:	4413      	add	r3, r2
    1f74:	440b      	add	r3, r1
    1f76:	3301      	adds	r3, #1
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	461a      	mov	r2, r3
    1f7c:	4b2e      	ldr	r3, [pc, #184]	; (2038 <Clock_Ip_ResetClockConfiguration+0x198>)
    1f7e:	5c9b      	ldrb	r3, [r3, r2]
    1f80:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1f82:	492e      	ldr	r1, [pc, #184]	; (203c <Clock_Ip_ResetClockConfiguration+0x19c>)
    1f84:	9a02      	ldr	r2, [sp, #8]
    1f86:	4613      	mov	r3, r2
    1f88:	009b      	lsls	r3, r3, #2
    1f8a:	4413      	add	r3, r2
    1f8c:	009b      	lsls	r3, r3, #2
    1f8e:	440b      	add	r3, r1
    1f90:	6819      	ldr	r1, [r3, #0]
    1f92:	9b03      	ldr	r3, [sp, #12]
    1f94:	1e5a      	subs	r2, r3, #1
    1f96:	4613      	mov	r3, r2
    1f98:	009b      	lsls	r3, r3, #2
    1f9a:	4413      	add	r3, r2
    1f9c:	00db      	lsls	r3, r3, #3
    1f9e:	3340      	adds	r3, #64	; 0x40
    1fa0:	9a01      	ldr	r2, [sp, #4]
    1fa2:	4413      	add	r3, r2
    1fa4:	4618      	mov	r0, r3
    1fa6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fa8:	9b03      	ldr	r3, [sp, #12]
    1faa:	3b01      	subs	r3, #1
    1fac:	9303      	str	r3, [sp, #12]
    1fae:	9b03      	ldr	r3, [sp, #12]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d1d1      	bne.n	1f58 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1fb4:	9b01      	ldr	r3, [sp, #4]
    1fb6:	7a5b      	ldrb	r3, [r3, #9]
    1fb8:	9303      	str	r3, [sp, #12]
    1fba:	e02b      	b.n	2014 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fbc:	9b03      	ldr	r3, [sp, #12]
    1fbe:	1e5a      	subs	r2, r3, #1
    1fc0:	9901      	ldr	r1, [sp, #4]
    1fc2:	4613      	mov	r3, r2
    1fc4:	009b      	lsls	r3, r3, #2
    1fc6:	4413      	add	r3, r2
    1fc8:	009b      	lsls	r3, r3, #2
    1fca:	440b      	add	r3, r1
    1fcc:	332c      	adds	r3, #44	; 0x2c
    1fce:	681a      	ldr	r2, [r3, #0]
    1fd0:	4914      	ldr	r1, [pc, #80]	; (2024 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fd2:	4613      	mov	r3, r2
    1fd4:	00db      	lsls	r3, r3, #3
    1fd6:	4413      	add	r3, r2
    1fd8:	440b      	add	r3, r1
    1fda:	3301      	adds	r3, #1
    1fdc:	781b      	ldrb	r3, [r3, #0]
    1fde:	461a      	mov	r2, r3
    1fe0:	4b17      	ldr	r3, [pc, #92]	; (2040 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1fe2:	5c9b      	ldrb	r3, [r3, r2]
    1fe4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1fe6:	4917      	ldr	r1, [pc, #92]	; (2044 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1fe8:	9a02      	ldr	r2, [sp, #8]
    1fea:	4613      	mov	r3, r2
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	4413      	add	r3, r2
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	440b      	add	r3, r1
    1ff4:	6819      	ldr	r1, [r3, #0]
    1ff6:	9b03      	ldr	r3, [sp, #12]
    1ff8:	1e5a      	subs	r2, r3, #1
    1ffa:	4613      	mov	r3, r2
    1ffc:	009b      	lsls	r3, r3, #2
    1ffe:	4413      	add	r3, r2
    2000:	009b      	lsls	r3, r3, #2
    2002:	3328      	adds	r3, #40	; 0x28
    2004:	9a01      	ldr	r2, [sp, #4]
    2006:	4413      	add	r3, r2
    2008:	3304      	adds	r3, #4
    200a:	4618      	mov	r0, r3
    200c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    200e:	9b03      	ldr	r3, [sp, #12]
    2010:	3b01      	subs	r3, #1
    2012:	9303      	str	r3, [sp, #12]
    2014:	9b03      	ldr	r3, [sp, #12]
    2016:	2b00      	cmp	r3, #0
    2018:	d1d0      	bne.n	1fbc <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    201a:	bf00      	nop
    201c:	bf00      	nop
    201e:	b005      	add	sp, #20
    2020:	f85d fb04 	ldr.w	pc, [sp], #4
    2024:	0001007c 	.word	0x0001007c
    2028:	0001004c 	.word	0x0001004c
    202c:	000106b4 	.word	0x000106b4
    2030:	0001002c 	.word	0x0001002c
    2034:	000105f8 	.word	0x000105f8
    2038:	0001003c 	.word	0x0001003c
    203c:	00010688 	.word	0x00010688
    2040:	0000fffc 	.word	0x0000fffc
    2044:	000105d0 	.word	0x000105d0

00002048 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2048:	b500      	push	{lr}
    204a:	b085      	sub	sp, #20
    204c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    204e:	2301      	movs	r3, #1
    2050:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2052:	9801      	ldr	r0, [sp, #4]
    2054:	f000 f818 	bl	2088 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2058:	4b0a      	ldr	r3, [pc, #40]	; (2084 <Clock_Ip_Init+0x3c>)
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	2b00      	cmp	r3, #0
    205e:	d00a      	beq.n	2076 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2060:	f000 fb74 	bl	274c <Clock_Ip_GetPllStatus>
    2064:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2066:	9b02      	ldr	r3, [sp, #8]
    2068:	2b00      	cmp	r3, #0
    206a:	d106      	bne.n	207a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    206c:	f000 fbf2 	bl	2854 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2070:	2300      	movs	r3, #0
    2072:	9303      	str	r3, [sp, #12]
    2074:	e001      	b.n	207a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2076:	2300      	movs	r3, #0
    2078:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    207a:	9b03      	ldr	r3, [sp, #12]
}
    207c:	4618      	mov	r0, r3
    207e:	b005      	add	sp, #20
    2080:	f85d fb04 	ldr.w	pc, [sp], #4
    2084:	1fff8b3c 	.word	0x1fff8b3c

00002088 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2088:	b510      	push	{r4, lr}
    208a:	b084      	sub	sp, #16
    208c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    208e:	4a9f      	ldr	r2, [pc, #636]	; (230c <Clock_Ip_InitClock+0x284>)
    2090:	9b01      	ldr	r3, [sp, #4]
    2092:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2094:	2101      	movs	r1, #1
    2096:	9801      	ldr	r0, [sp, #4]
    2098:	f003 fa90 	bl	55bc <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    209c:	4b9b      	ldr	r3, [pc, #620]	; (230c <Clock_Ip_InitClock+0x284>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d030      	beq.n	2106 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    20a4:	2300      	movs	r3, #0
    20a6:	9303      	str	r3, [sp, #12]
    20a8:	e027      	b.n	20fa <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    20aa:	9901      	ldr	r1, [sp, #4]
    20ac:	9a03      	ldr	r2, [sp, #12]
    20ae:	4613      	mov	r3, r2
    20b0:	009b      	lsls	r3, r3, #2
    20b2:	4413      	add	r3, r2
    20b4:	009b      	lsls	r3, r3, #2
    20b6:	440b      	add	r3, r1
    20b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20bc:	681a      	ldr	r2, [r3, #0]
    20be:	4994      	ldr	r1, [pc, #592]	; (2310 <Clock_Ip_InitClock+0x288>)
    20c0:	4613      	mov	r3, r2
    20c2:	00db      	lsls	r3, r3, #3
    20c4:	4413      	add	r3, r2
    20c6:	440b      	add	r3, r1
    20c8:	3301      	adds	r3, #1
    20ca:	781b      	ldrb	r3, [r3, #0]
    20cc:	461a      	mov	r2, r3
    20ce:	4b91      	ldr	r3, [pc, #580]	; (2314 <Clock_Ip_InitClock+0x28c>)
    20d0:	5c9b      	ldrb	r3, [r3, r2]
    20d2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    20d4:	4a90      	ldr	r2, [pc, #576]	; (2318 <Clock_Ip_InitClock+0x290>)
    20d6:	9b02      	ldr	r3, [sp, #8]
    20d8:	011b      	lsls	r3, r3, #4
    20da:	4413      	add	r3, r2
    20dc:	6819      	ldr	r1, [r3, #0]
    20de:	9a03      	ldr	r2, [sp, #12]
    20e0:	4613      	mov	r3, r2
    20e2:	009b      	lsls	r3, r3, #2
    20e4:	4413      	add	r3, r2
    20e6:	009b      	lsls	r3, r3, #2
    20e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20ec:	9a01      	ldr	r2, [sp, #4]
    20ee:	4413      	add	r3, r2
    20f0:	4618      	mov	r0, r3
    20f2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    20f4:	9b03      	ldr	r3, [sp, #12]
    20f6:	3301      	adds	r3, #1
    20f8:	9303      	str	r3, [sp, #12]
    20fa:	9b01      	ldr	r3, [sp, #4]
    20fc:	7c9b      	ldrb	r3, [r3, #18]
    20fe:	461a      	mov	r2, r3
    2100:	9b03      	ldr	r3, [sp, #12]
    2102:	4293      	cmp	r3, r2
    2104:	d3d1      	bcc.n	20aa <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2106:	9801      	ldr	r0, [sp, #4]
    2108:	f7ff feca 	bl	1ea0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    210c:	2300      	movs	r3, #0
    210e:	9303      	str	r3, [sp, #12]
    2110:	e029      	b.n	2166 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2112:	9901      	ldr	r1, [sp, #4]
    2114:	9a03      	ldr	r2, [sp, #12]
    2116:	4613      	mov	r3, r2
    2118:	005b      	lsls	r3, r3, #1
    211a:	4413      	add	r3, r2
    211c:	009b      	lsls	r3, r3, #2
    211e:	440b      	add	r3, r1
    2120:	3314      	adds	r3, #20
    2122:	681a      	ldr	r2, [r3, #0]
    2124:	497a      	ldr	r1, [pc, #488]	; (2310 <Clock_Ip_InitClock+0x288>)
    2126:	4613      	mov	r3, r2
    2128:	00db      	lsls	r3, r3, #3
    212a:	4413      	add	r3, r2
    212c:	440b      	add	r3, r1
    212e:	3301      	adds	r3, #1
    2130:	781b      	ldrb	r3, [r3, #0]
    2132:	461a      	mov	r2, r3
    2134:	4b79      	ldr	r3, [pc, #484]	; (231c <Clock_Ip_InitClock+0x294>)
    2136:	5c9b      	ldrb	r3, [r3, r2]
    2138:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    213a:	4979      	ldr	r1, [pc, #484]	; (2320 <Clock_Ip_InitClock+0x298>)
    213c:	9a02      	ldr	r2, [sp, #8]
    213e:	4613      	mov	r3, r2
    2140:	005b      	lsls	r3, r3, #1
    2142:	4413      	add	r3, r2
    2144:	009b      	lsls	r3, r3, #2
    2146:	440b      	add	r3, r1
    2148:	6819      	ldr	r1, [r3, #0]
    214a:	9a03      	ldr	r2, [sp, #12]
    214c:	4613      	mov	r3, r2
    214e:	005b      	lsls	r3, r3, #1
    2150:	4413      	add	r3, r2
    2152:	009b      	lsls	r3, r3, #2
    2154:	3310      	adds	r3, #16
    2156:	9a01      	ldr	r2, [sp, #4]
    2158:	4413      	add	r3, r2
    215a:	3304      	adds	r3, #4
    215c:	4618      	mov	r0, r3
    215e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2160:	9b03      	ldr	r3, [sp, #12]
    2162:	3301      	adds	r3, #1
    2164:	9303      	str	r3, [sp, #12]
    2166:	9b01      	ldr	r3, [sp, #4]
    2168:	7a1b      	ldrb	r3, [r3, #8]
    216a:	461a      	mov	r2, r3
    216c:	9b03      	ldr	r3, [sp, #12]
    216e:	4293      	cmp	r3, r2
    2170:	d3cf      	bcc.n	2112 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2172:	2300      	movs	r3, #0
    2174:	9303      	str	r3, [sp, #12]
    2176:	e02a      	b.n	21ce <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2178:	9901      	ldr	r1, [sp, #4]
    217a:	9a03      	ldr	r2, [sp, #12]
    217c:	4613      	mov	r3, r2
    217e:	009b      	lsls	r3, r3, #2
    2180:	4413      	add	r3, r2
    2182:	009b      	lsls	r3, r3, #2
    2184:	440b      	add	r3, r1
    2186:	332c      	adds	r3, #44	; 0x2c
    2188:	681a      	ldr	r2, [r3, #0]
    218a:	4961      	ldr	r1, [pc, #388]	; (2310 <Clock_Ip_InitClock+0x288>)
    218c:	4613      	mov	r3, r2
    218e:	00db      	lsls	r3, r3, #3
    2190:	4413      	add	r3, r2
    2192:	440b      	add	r3, r1
    2194:	3301      	adds	r3, #1
    2196:	781b      	ldrb	r3, [r3, #0]
    2198:	461a      	mov	r2, r3
    219a:	4b62      	ldr	r3, [pc, #392]	; (2324 <Clock_Ip_InitClock+0x29c>)
    219c:	5c9b      	ldrb	r3, [r3, r2]
    219e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    21a0:	4961      	ldr	r1, [pc, #388]	; (2328 <Clock_Ip_InitClock+0x2a0>)
    21a2:	9a02      	ldr	r2, [sp, #8]
    21a4:	4613      	mov	r3, r2
    21a6:	009b      	lsls	r3, r3, #2
    21a8:	4413      	add	r3, r2
    21aa:	009b      	lsls	r3, r3, #2
    21ac:	440b      	add	r3, r1
    21ae:	3304      	adds	r3, #4
    21b0:	6819      	ldr	r1, [r3, #0]
    21b2:	9a03      	ldr	r2, [sp, #12]
    21b4:	4613      	mov	r3, r2
    21b6:	009b      	lsls	r3, r3, #2
    21b8:	4413      	add	r3, r2
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	3328      	adds	r3, #40	; 0x28
    21be:	9a01      	ldr	r2, [sp, #4]
    21c0:	4413      	add	r3, r2
    21c2:	3304      	adds	r3, #4
    21c4:	4618      	mov	r0, r3
    21c6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21c8:	9b03      	ldr	r3, [sp, #12]
    21ca:	3301      	adds	r3, #1
    21cc:	9303      	str	r3, [sp, #12]
    21ce:	9b01      	ldr	r3, [sp, #4]
    21d0:	7a5b      	ldrb	r3, [r3, #9]
    21d2:	461a      	mov	r2, r3
    21d4:	9b03      	ldr	r3, [sp, #12]
    21d6:	4293      	cmp	r3, r2
    21d8:	d3ce      	bcc.n	2178 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    21da:	9801      	ldr	r0, [sp, #4]
    21dc:	f7ff fdb0 	bl	1d40 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    21e0:	2300      	movs	r3, #0
    21e2:	9303      	str	r3, [sp, #12]
    21e4:	e028      	b.n	2238 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    21e6:	9901      	ldr	r1, [sp, #4]
    21e8:	9a03      	ldr	r2, [sp, #12]
    21ea:	4613      	mov	r3, r2
    21ec:	009b      	lsls	r3, r3, #2
    21ee:	4413      	add	r3, r2
    21f0:	009b      	lsls	r3, r3, #2
    21f2:	440b      	add	r3, r1
    21f4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    21f8:	681a      	ldr	r2, [r3, #0]
    21fa:	4945      	ldr	r1, [pc, #276]	; (2310 <Clock_Ip_InitClock+0x288>)
    21fc:	4613      	mov	r3, r2
    21fe:	00db      	lsls	r3, r3, #3
    2200:	4413      	add	r3, r2
    2202:	440b      	add	r3, r1
    2204:	3301      	adds	r3, #1
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	461a      	mov	r2, r3
    220a:	4b48      	ldr	r3, [pc, #288]	; (232c <Clock_Ip_InitClock+0x2a4>)
    220c:	5c9b      	ldrb	r3, [r3, r2]
    220e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2210:	4a47      	ldr	r2, [pc, #284]	; (2330 <Clock_Ip_InitClock+0x2a8>)
    2212:	9b02      	ldr	r3, [sp, #8]
    2214:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2218:	9a03      	ldr	r2, [sp, #12]
    221a:	4613      	mov	r3, r2
    221c:	009b      	lsls	r3, r3, #2
    221e:	4413      	add	r3, r2
    2220:	009b      	lsls	r3, r3, #2
    2222:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2226:	9a01      	ldr	r2, [sp, #4]
    2228:	4413      	add	r3, r2
    222a:	3304      	adds	r3, #4
    222c:	9903      	ldr	r1, [sp, #12]
    222e:	4618      	mov	r0, r3
    2230:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2232:	9b03      	ldr	r3, [sp, #12]
    2234:	3301      	adds	r3, #1
    2236:	9303      	str	r3, [sp, #12]
    2238:	9b01      	ldr	r3, [sp, #4]
    223a:	7c5b      	ldrb	r3, [r3, #17]
    223c:	461a      	mov	r2, r3
    223e:	9b03      	ldr	r3, [sp, #12]
    2240:	4293      	cmp	r3, r2
    2242:	d3d0      	bcc.n	21e6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2244:	2300      	movs	r3, #0
    2246:	9303      	str	r3, [sp, #12]
    2248:	e026      	b.n	2298 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    224a:	9901      	ldr	r1, [sp, #4]
    224c:	9a03      	ldr	r2, [sp, #12]
    224e:	4613      	mov	r3, r2
    2250:	005b      	lsls	r3, r3, #1
    2252:	4413      	add	r3, r2
    2254:	009b      	lsls	r3, r3, #2
    2256:	440b      	add	r3, r1
    2258:	f503 730e 	add.w	r3, r3, #568	; 0x238
    225c:	681a      	ldr	r2, [r3, #0]
    225e:	492c      	ldr	r1, [pc, #176]	; (2310 <Clock_Ip_InitClock+0x288>)
    2260:	4613      	mov	r3, r2
    2262:	00db      	lsls	r3, r3, #3
    2264:	4413      	add	r3, r2
    2266:	440b      	add	r3, r1
    2268:	3301      	adds	r3, #1
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	461a      	mov	r2, r3
    226e:	4b31      	ldr	r3, [pc, #196]	; (2334 <Clock_Ip_InitClock+0x2ac>)
    2270:	5c9b      	ldrb	r3, [r3, r2]
    2272:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2274:	4a30      	ldr	r2, [pc, #192]	; (2338 <Clock_Ip_InitClock+0x2b0>)
    2276:	9b02      	ldr	r3, [sp, #8]
    2278:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    227c:	9a03      	ldr	r2, [sp, #12]
    227e:	4613      	mov	r3, r2
    2280:	005b      	lsls	r3, r3, #1
    2282:	4413      	add	r3, r2
    2284:	009b      	lsls	r3, r3, #2
    2286:	f503 730e 	add.w	r3, r3, #568	; 0x238
    228a:	9a01      	ldr	r2, [sp, #4]
    228c:	4413      	add	r3, r2
    228e:	4618      	mov	r0, r3
    2290:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2292:	9b03      	ldr	r3, [sp, #12]
    2294:	3301      	adds	r3, #1
    2296:	9303      	str	r3, [sp, #12]
    2298:	9b01      	ldr	r3, [sp, #4]
    229a:	7b5b      	ldrb	r3, [r3, #13]
    229c:	461a      	mov	r2, r3
    229e:	9b03      	ldr	r3, [sp, #12]
    22a0:	4293      	cmp	r3, r2
    22a2:	d3d2      	bcc.n	224a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    22a4:	2300      	movs	r3, #0
    22a6:	9303      	str	r3, [sp, #12]
    22a8:	e026      	b.n	22f8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    22aa:	9901      	ldr	r1, [sp, #4]
    22ac:	9a03      	ldr	r2, [sp, #12]
    22ae:	4613      	mov	r3, r2
    22b0:	005b      	lsls	r3, r3, #1
    22b2:	4413      	add	r3, r2
    22b4:	009b      	lsls	r3, r3, #2
    22b6:	440b      	add	r3, r1
    22b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22bc:	681a      	ldr	r2, [r3, #0]
    22be:	4914      	ldr	r1, [pc, #80]	; (2310 <Clock_Ip_InitClock+0x288>)
    22c0:	4613      	mov	r3, r2
    22c2:	00db      	lsls	r3, r3, #3
    22c4:	4413      	add	r3, r2
    22c6:	440b      	add	r3, r1
    22c8:	3301      	adds	r3, #1
    22ca:	781b      	ldrb	r3, [r3, #0]
    22cc:	461a      	mov	r2, r3
    22ce:	4b1b      	ldr	r3, [pc, #108]	; (233c <Clock_Ip_InitClock+0x2b4>)
    22d0:	5c9b      	ldrb	r3, [r3, r2]
    22d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    22d4:	4a1a      	ldr	r2, [pc, #104]	; (2340 <Clock_Ip_InitClock+0x2b8>)
    22d6:	9b02      	ldr	r3, [sp, #8]
    22d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    22dc:	9a03      	ldr	r2, [sp, #12]
    22de:	4613      	mov	r3, r2
    22e0:	005b      	lsls	r3, r3, #1
    22e2:	4413      	add	r3, r2
    22e4:	009b      	lsls	r3, r3, #2
    22e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22ea:	9a01      	ldr	r2, [sp, #4]
    22ec:	4413      	add	r3, r2
    22ee:	4618      	mov	r0, r3
    22f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    22f2:	9b03      	ldr	r3, [sp, #12]
    22f4:	3301      	adds	r3, #1
    22f6:	9303      	str	r3, [sp, #12]
    22f8:	9b01      	ldr	r3, [sp, #4]
    22fa:	7b1b      	ldrb	r3, [r3, #12]
    22fc:	461a      	mov	r2, r3
    22fe:	9b03      	ldr	r3, [sp, #12]
    2300:	4293      	cmp	r3, r2
    2302:	d3d2      	bcc.n	22aa <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2304:	2300      	movs	r3, #0
    2306:	9303      	str	r3, [sp, #12]
    2308:	e044      	b.n	2394 <Clock_Ip_InitClock+0x30c>
    230a:	bf00      	nop
    230c:	1fff8b34 	.word	0x1fff8b34
    2310:	0001007c 	.word	0x0001007c
    2314:	0001006c 	.word	0x0001006c
    2318:	00010678 	.word	0x00010678
    231c:	0001000c 	.word	0x0001000c
    2320:	0001063c 	.word	0x0001063c
    2324:	0000fffc 	.word	0x0000fffc
    2328:	000105d0 	.word	0x000105d0
    232c:	0001005c 	.word	0x0001005c
    2330:	000106b0 	.word	0x000106b0
    2334:	0000ffec 	.word	0x0000ffec
    2338:	000105c8 	.word	0x000105c8
    233c:	0000ffdc 	.word	0x0000ffdc
    2340:	0001058c 	.word	0x0001058c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2344:	9901      	ldr	r1, [sp, #4]
    2346:	9a03      	ldr	r2, [sp, #12]
    2348:	4613      	mov	r3, r2
    234a:	005b      	lsls	r3, r3, #1
    234c:	4413      	add	r3, r2
    234e:	009b      	lsls	r3, r3, #2
    2350:	440b      	add	r3, r1
    2352:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2356:	681a      	ldr	r2, [r3, #0]
    2358:	49ac      	ldr	r1, [pc, #688]	; (260c <Clock_Ip_InitClock+0x584>)
    235a:	4613      	mov	r3, r2
    235c:	00db      	lsls	r3, r3, #3
    235e:	4413      	add	r3, r2
    2360:	440b      	add	r3, r1
    2362:	3301      	adds	r3, #1
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	461a      	mov	r2, r3
    2368:	4ba9      	ldr	r3, [pc, #676]	; (2610 <Clock_Ip_InitClock+0x588>)
    236a:	5c9b      	ldrb	r3, [r3, r2]
    236c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    236e:	4aa9      	ldr	r2, [pc, #676]	; (2614 <Clock_Ip_InitClock+0x58c>)
    2370:	9b02      	ldr	r3, [sp, #8]
    2372:	00db      	lsls	r3, r3, #3
    2374:	4413      	add	r3, r2
    2376:	6859      	ldr	r1, [r3, #4]
    2378:	9a03      	ldr	r2, [sp, #12]
    237a:	4613      	mov	r3, r2
    237c:	005b      	lsls	r3, r3, #1
    237e:	4413      	add	r3, r2
    2380:	009b      	lsls	r3, r3, #2
    2382:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2386:	9a01      	ldr	r2, [sp, #4]
    2388:	4413      	add	r3, r2
    238a:	4618      	mov	r0, r3
    238c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    238e:	9b03      	ldr	r3, [sp, #12]
    2390:	3301      	adds	r3, #1
    2392:	9303      	str	r3, [sp, #12]
    2394:	9b01      	ldr	r3, [sp, #4]
    2396:	7b5b      	ldrb	r3, [r3, #13]
    2398:	461a      	mov	r2, r3
    239a:	9b03      	ldr	r3, [sp, #12]
    239c:	4293      	cmp	r3, r2
    239e:	d3d1      	bcc.n	2344 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    23a0:	2300      	movs	r3, #0
    23a2:	9303      	str	r3, [sp, #12]
    23a4:	e029      	b.n	23fa <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    23a6:	9901      	ldr	r1, [sp, #4]
    23a8:	9a03      	ldr	r2, [sp, #12]
    23aa:	4613      	mov	r3, r2
    23ac:	009b      	lsls	r3, r3, #2
    23ae:	4413      	add	r3, r2
    23b0:	00db      	lsls	r3, r3, #3
    23b2:	440b      	add	r3, r1
    23b4:	3340      	adds	r3, #64	; 0x40
    23b6:	681a      	ldr	r2, [r3, #0]
    23b8:	4994      	ldr	r1, [pc, #592]	; (260c <Clock_Ip_InitClock+0x584>)
    23ba:	4613      	mov	r3, r2
    23bc:	00db      	lsls	r3, r3, #3
    23be:	4413      	add	r3, r2
    23c0:	440b      	add	r3, r1
    23c2:	3301      	adds	r3, #1
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	461a      	mov	r2, r3
    23c8:	4b93      	ldr	r3, [pc, #588]	; (2618 <Clock_Ip_InitClock+0x590>)
    23ca:	5c9b      	ldrb	r3, [r3, r2]
    23cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    23ce:	4993      	ldr	r1, [pc, #588]	; (261c <Clock_Ip_InitClock+0x594>)
    23d0:	9a02      	ldr	r2, [sp, #8]
    23d2:	4613      	mov	r3, r2
    23d4:	009b      	lsls	r3, r3, #2
    23d6:	4413      	add	r3, r2
    23d8:	009b      	lsls	r3, r3, #2
    23da:	440b      	add	r3, r1
    23dc:	3304      	adds	r3, #4
    23de:	6819      	ldr	r1, [r3, #0]
    23e0:	9a03      	ldr	r2, [sp, #12]
    23e2:	4613      	mov	r3, r2
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	4413      	add	r3, r2
    23e8:	00db      	lsls	r3, r3, #3
    23ea:	3340      	adds	r3, #64	; 0x40
    23ec:	9a01      	ldr	r2, [sp, #4]
    23ee:	4413      	add	r3, r2
    23f0:	4618      	mov	r0, r3
    23f2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    23f4:	9b03      	ldr	r3, [sp, #12]
    23f6:	3301      	adds	r3, #1
    23f8:	9303      	str	r3, [sp, #12]
    23fa:	9b01      	ldr	r3, [sp, #4]
    23fc:	7a9b      	ldrb	r3, [r3, #10]
    23fe:	461a      	mov	r2, r3
    2400:	9b03      	ldr	r3, [sp, #12]
    2402:	4293      	cmp	r3, r2
    2404:	d3cf      	bcc.n	23a6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2406:	2300      	movs	r3, #0
    2408:	9303      	str	r3, [sp, #12]
    240a:	e029      	b.n	2460 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    240c:	9901      	ldr	r1, [sp, #4]
    240e:	9a03      	ldr	r2, [sp, #12]
    2410:	4613      	mov	r3, r2
    2412:	009b      	lsls	r3, r3, #2
    2414:	4413      	add	r3, r2
    2416:	009b      	lsls	r3, r3, #2
    2418:	440b      	add	r3, r1
    241a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    241e:	681a      	ldr	r2, [r3, #0]
    2420:	497a      	ldr	r1, [pc, #488]	; (260c <Clock_Ip_InitClock+0x584>)
    2422:	4613      	mov	r3, r2
    2424:	00db      	lsls	r3, r3, #3
    2426:	4413      	add	r3, r2
    2428:	440b      	add	r3, r1
    242a:	3301      	adds	r3, #1
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	461a      	mov	r2, r3
    2430:	4b7b      	ldr	r3, [pc, #492]	; (2620 <Clock_Ip_InitClock+0x598>)
    2432:	5c9b      	ldrb	r3, [r3, r2]
    2434:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2436:	4a7b      	ldr	r2, [pc, #492]	; (2624 <Clock_Ip_InitClock+0x59c>)
    2438:	9b02      	ldr	r3, [sp, #8]
    243a:	011b      	lsls	r3, r3, #4
    243c:	4413      	add	r3, r2
    243e:	3304      	adds	r3, #4
    2440:	681c      	ldr	r4, [r3, #0]
    2442:	9a03      	ldr	r2, [sp, #12]
    2444:	4613      	mov	r3, r2
    2446:	009b      	lsls	r3, r3, #2
    2448:	4413      	add	r3, r2
    244a:	009b      	lsls	r3, r3, #2
    244c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2450:	9a01      	ldr	r2, [sp, #4]
    2452:	4413      	add	r3, r2
    2454:	9903      	ldr	r1, [sp, #12]
    2456:	4618      	mov	r0, r3
    2458:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    245a:	9b03      	ldr	r3, [sp, #12]
    245c:	3301      	adds	r3, #1
    245e:	9303      	str	r3, [sp, #12]
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	7c9b      	ldrb	r3, [r3, #18]
    2464:	461a      	mov	r2, r3
    2466:	9b03      	ldr	r3, [sp, #12]
    2468:	4293      	cmp	r3, r2
    246a:	d3cf      	bcc.n	240c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    246c:	2300      	movs	r3, #0
    246e:	9303      	str	r3, [sp, #12]
    2470:	e02a      	b.n	24c8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2472:	9901      	ldr	r1, [sp, #4]
    2474:	9a03      	ldr	r2, [sp, #12]
    2476:	4613      	mov	r3, r2
    2478:	009b      	lsls	r3, r3, #2
    247a:	4413      	add	r3, r2
    247c:	009b      	lsls	r3, r3, #2
    247e:	440b      	add	r3, r1
    2480:	332c      	adds	r3, #44	; 0x2c
    2482:	681a      	ldr	r2, [r3, #0]
    2484:	4961      	ldr	r1, [pc, #388]	; (260c <Clock_Ip_InitClock+0x584>)
    2486:	4613      	mov	r3, r2
    2488:	00db      	lsls	r3, r3, #3
    248a:	4413      	add	r3, r2
    248c:	440b      	add	r3, r1
    248e:	3301      	adds	r3, #1
    2490:	781b      	ldrb	r3, [r3, #0]
    2492:	461a      	mov	r2, r3
    2494:	4b64      	ldr	r3, [pc, #400]	; (2628 <Clock_Ip_InitClock+0x5a0>)
    2496:	5c9b      	ldrb	r3, [r3, r2]
    2498:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    249a:	4964      	ldr	r1, [pc, #400]	; (262c <Clock_Ip_InitClock+0x5a4>)
    249c:	9a02      	ldr	r2, [sp, #8]
    249e:	4613      	mov	r3, r2
    24a0:	009b      	lsls	r3, r3, #2
    24a2:	4413      	add	r3, r2
    24a4:	009b      	lsls	r3, r3, #2
    24a6:	440b      	add	r3, r1
    24a8:	3308      	adds	r3, #8
    24aa:	6819      	ldr	r1, [r3, #0]
    24ac:	9a03      	ldr	r2, [sp, #12]
    24ae:	4613      	mov	r3, r2
    24b0:	009b      	lsls	r3, r3, #2
    24b2:	4413      	add	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	3328      	adds	r3, #40	; 0x28
    24b8:	9a01      	ldr	r2, [sp, #4]
    24ba:	4413      	add	r3, r2
    24bc:	3304      	adds	r3, #4
    24be:	4618      	mov	r0, r3
    24c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24c2:	9b03      	ldr	r3, [sp, #12]
    24c4:	3301      	adds	r3, #1
    24c6:	9303      	str	r3, [sp, #12]
    24c8:	9b01      	ldr	r3, [sp, #4]
    24ca:	7a5b      	ldrb	r3, [r3, #9]
    24cc:	461a      	mov	r2, r3
    24ce:	9b03      	ldr	r3, [sp, #12]
    24d0:	4293      	cmp	r3, r2
    24d2:	d3ce      	bcc.n	2472 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    24d4:	2300      	movs	r3, #0
    24d6:	9303      	str	r3, [sp, #12]
    24d8:	e029      	b.n	252e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    24da:	9901      	ldr	r1, [sp, #4]
    24dc:	9a03      	ldr	r2, [sp, #12]
    24de:	4613      	mov	r3, r2
    24e0:	009b      	lsls	r3, r3, #2
    24e2:	4413      	add	r3, r2
    24e4:	00db      	lsls	r3, r3, #3
    24e6:	440b      	add	r3, r1
    24e8:	3340      	adds	r3, #64	; 0x40
    24ea:	681a      	ldr	r2, [r3, #0]
    24ec:	4947      	ldr	r1, [pc, #284]	; (260c <Clock_Ip_InitClock+0x584>)
    24ee:	4613      	mov	r3, r2
    24f0:	00db      	lsls	r3, r3, #3
    24f2:	4413      	add	r3, r2
    24f4:	440b      	add	r3, r1
    24f6:	3301      	adds	r3, #1
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	461a      	mov	r2, r3
    24fc:	4b46      	ldr	r3, [pc, #280]	; (2618 <Clock_Ip_InitClock+0x590>)
    24fe:	5c9b      	ldrb	r3, [r3, r2]
    2500:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2502:	4946      	ldr	r1, [pc, #280]	; (261c <Clock_Ip_InitClock+0x594>)
    2504:	9a02      	ldr	r2, [sp, #8]
    2506:	4613      	mov	r3, r2
    2508:	009b      	lsls	r3, r3, #2
    250a:	4413      	add	r3, r2
    250c:	009b      	lsls	r3, r3, #2
    250e:	440b      	add	r3, r1
    2510:	330c      	adds	r3, #12
    2512:	6819      	ldr	r1, [r3, #0]
    2514:	9a03      	ldr	r2, [sp, #12]
    2516:	4613      	mov	r3, r2
    2518:	009b      	lsls	r3, r3, #2
    251a:	4413      	add	r3, r2
    251c:	00db      	lsls	r3, r3, #3
    251e:	3340      	adds	r3, #64	; 0x40
    2520:	9a01      	ldr	r2, [sp, #4]
    2522:	4413      	add	r3, r2
    2524:	4618      	mov	r0, r3
    2526:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2528:	9b03      	ldr	r3, [sp, #12]
    252a:	3301      	adds	r3, #1
    252c:	9303      	str	r3, [sp, #12]
    252e:	9b01      	ldr	r3, [sp, #4]
    2530:	7a9b      	ldrb	r3, [r3, #10]
    2532:	461a      	mov	r2, r3
    2534:	9b03      	ldr	r3, [sp, #12]
    2536:	4293      	cmp	r3, r2
    2538:	d3cf      	bcc.n	24da <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    253a:	2300      	movs	r3, #0
    253c:	9303      	str	r3, [sp, #12]
    253e:	e025      	b.n	258c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2540:	9a01      	ldr	r2, [sp, #4]
    2542:	9b03      	ldr	r3, [sp, #12]
    2544:	3324      	adds	r3, #36	; 0x24
    2546:	011b      	lsls	r3, r3, #4
    2548:	4413      	add	r3, r2
    254a:	3304      	adds	r3, #4
    254c:	681a      	ldr	r2, [r3, #0]
    254e:	492f      	ldr	r1, [pc, #188]	; (260c <Clock_Ip_InitClock+0x584>)
    2550:	4613      	mov	r3, r2
    2552:	00db      	lsls	r3, r3, #3
    2554:	4413      	add	r3, r2
    2556:	440b      	add	r3, r1
    2558:	3301      	adds	r3, #1
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	461a      	mov	r2, r3
    255e:	4b34      	ldr	r3, [pc, #208]	; (2630 <Clock_Ip_InitClock+0x5a8>)
    2560:	5c9b      	ldrb	r3, [r3, r2]
    2562:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2564:	4933      	ldr	r1, [pc, #204]	; (2634 <Clock_Ip_InitClock+0x5ac>)
    2566:	9a02      	ldr	r2, [sp, #8]
    2568:	4613      	mov	r3, r2
    256a:	005b      	lsls	r3, r3, #1
    256c:	4413      	add	r3, r2
    256e:	009b      	lsls	r3, r3, #2
    2570:	440b      	add	r3, r1
    2572:	3304      	adds	r3, #4
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	9a03      	ldr	r2, [sp, #12]
    2578:	3224      	adds	r2, #36	; 0x24
    257a:	0112      	lsls	r2, r2, #4
    257c:	9901      	ldr	r1, [sp, #4]
    257e:	440a      	add	r2, r1
    2580:	3204      	adds	r2, #4
    2582:	4610      	mov	r0, r2
    2584:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2586:	9b03      	ldr	r3, [sp, #12]
    2588:	3301      	adds	r3, #1
    258a:	9303      	str	r3, [sp, #12]
    258c:	9b01      	ldr	r3, [sp, #4]
    258e:	7b9b      	ldrb	r3, [r3, #14]
    2590:	461a      	mov	r2, r3
    2592:	9b03      	ldr	r3, [sp, #12]
    2594:	4293      	cmp	r3, r2
    2596:	d3d3      	bcc.n	2540 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2598:	4b27      	ldr	r3, [pc, #156]	; (2638 <Clock_Ip_InitClock+0x5b0>)
    259a:	2200      	movs	r2, #0
    259c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    259e:	4b26      	ldr	r3, [pc, #152]	; (2638 <Clock_Ip_InitClock+0x5b0>)
    25a0:	2200      	movs	r2, #0
    25a2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    25a4:	4b24      	ldr	r3, [pc, #144]	; (2638 <Clock_Ip_InitClock+0x5b0>)
    25a6:	2201      	movs	r2, #1
    25a8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    25aa:	4b23      	ldr	r3, [pc, #140]	; (2638 <Clock_Ip_InitClock+0x5b0>)
    25ac:	2200      	movs	r2, #0
    25ae:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    25b0:	f000 fa9c 	bl	2aec <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    25b4:	2300      	movs	r3, #0
    25b6:	9303      	str	r3, [sp, #12]
    25b8:	e04c      	b.n	2654 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    25ba:	9a01      	ldr	r2, [sp, #4]
    25bc:	9b03      	ldr	r3, [sp, #12]
    25be:	330d      	adds	r3, #13
    25c0:	00db      	lsls	r3, r3, #3
    25c2:	4413      	add	r3, r2
    25c4:	685b      	ldr	r3, [r3, #4]
    25c6:	4a1d      	ldr	r2, [pc, #116]	; (263c <Clock_Ip_InitClock+0x5b4>)
    25c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    25cc:	2b03      	cmp	r3, #3
    25ce:	d03b      	beq.n	2648 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    25d0:	9b01      	ldr	r3, [sp, #4]
    25d2:	9a03      	ldr	r2, [sp, #12]
    25d4:	320d      	adds	r2, #13
    25d6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    25da:	490c      	ldr	r1, [pc, #48]	; (260c <Clock_Ip_InitClock+0x584>)
    25dc:	4613      	mov	r3, r2
    25de:	00db      	lsls	r3, r3, #3
    25e0:	4413      	add	r3, r2
    25e2:	440b      	add	r3, r1
    25e4:	3301      	adds	r3, #1
    25e6:	781b      	ldrb	r3, [r3, #0]
    25e8:	461a      	mov	r2, r3
    25ea:	4b15      	ldr	r3, [pc, #84]	; (2640 <Clock_Ip_InitClock+0x5b8>)
    25ec:	5c9b      	ldrb	r3, [r3, r2]
    25ee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    25f0:	4a14      	ldr	r2, [pc, #80]	; (2644 <Clock_Ip_InitClock+0x5bc>)
    25f2:	9b02      	ldr	r3, [sp, #8]
    25f4:	00db      	lsls	r3, r3, #3
    25f6:	4413      	add	r3, r2
    25f8:	685b      	ldr	r3, [r3, #4]
    25fa:	9a03      	ldr	r2, [sp, #12]
    25fc:	320d      	adds	r2, #13
    25fe:	00d2      	lsls	r2, r2, #3
    2600:	9901      	ldr	r1, [sp, #4]
    2602:	440a      	add	r2, r1
    2604:	4610      	mov	r0, r2
    2606:	4798      	blx	r3
    2608:	e021      	b.n	264e <Clock_Ip_InitClock+0x5c6>
    260a:	bf00      	nop
    260c:	0001007c 	.word	0x0001007c
    2610:	0000ffec 	.word	0x0000ffec
    2614:	000105c8 	.word	0x000105c8
    2618:	0001003c 	.word	0x0001003c
    261c:	00010688 	.word	0x00010688
    2620:	0001006c 	.word	0x0001006c
    2624:	00010678 	.word	0x00010678
    2628:	0000fffc 	.word	0x0000fffc
    262c:	000105d0 	.word	0x000105d0
    2630:	0001002c 	.word	0x0001002c
    2634:	000105f8 	.word	0x000105f8
    2638:	1fff8b3c 	.word	0x1fff8b3c
    263c:	000104c8 	.word	0x000104c8
    2640:	0001004c 	.word	0x0001004c
    2644:	000106b4 	.word	0x000106b4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2648:	4b3a      	ldr	r3, [pc, #232]	; (2734 <Clock_Ip_InitClock+0x6ac>)
    264a:	2201      	movs	r2, #1
    264c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    264e:	9b03      	ldr	r3, [sp, #12]
    2650:	3301      	adds	r3, #1
    2652:	9303      	str	r3, [sp, #12]
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	7adb      	ldrb	r3, [r3, #11]
    2658:	461a      	mov	r2, r3
    265a:	9b03      	ldr	r3, [sp, #12]
    265c:	4293      	cmp	r3, r2
    265e:	d3ac      	bcc.n	25ba <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2660:	4b34      	ldr	r3, [pc, #208]	; (2734 <Clock_Ip_InitClock+0x6ac>)
    2662:	781b      	ldrb	r3, [r3, #0]
    2664:	f083 0301 	eor.w	r3, r3, #1
    2668:	b2db      	uxtb	r3, r3
    266a:	2b00      	cmp	r3, #0
    266c:	d05e      	beq.n	272c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    266e:	2300      	movs	r3, #0
    2670:	9303      	str	r3, [sp, #12]
    2672:	e01f      	b.n	26b4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2674:	9a01      	ldr	r2, [sp, #4]
    2676:	9b03      	ldr	r3, [sp, #12]
    2678:	334e      	adds	r3, #78	; 0x4e
    267a:	00db      	lsls	r3, r3, #3
    267c:	4413      	add	r3, r2
    267e:	685a      	ldr	r2, [r3, #4]
    2680:	492d      	ldr	r1, [pc, #180]	; (2738 <Clock_Ip_InitClock+0x6b0>)
    2682:	4613      	mov	r3, r2
    2684:	00db      	lsls	r3, r3, #3
    2686:	4413      	add	r3, r2
    2688:	440b      	add	r3, r1
    268a:	3301      	adds	r3, #1
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	461a      	mov	r2, r3
    2690:	4b2a      	ldr	r3, [pc, #168]	; (273c <Clock_Ip_InitClock+0x6b4>)
    2692:	5c9b      	ldrb	r3, [r3, r2]
    2694:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2696:	4a2a      	ldr	r2, [pc, #168]	; (2740 <Clock_Ip_InitClock+0x6b8>)
    2698:	9b02      	ldr	r3, [sp, #8]
    269a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    269e:	9a03      	ldr	r2, [sp, #12]
    26a0:	324e      	adds	r2, #78	; 0x4e
    26a2:	00d2      	lsls	r2, r2, #3
    26a4:	9901      	ldr	r1, [sp, #4]
    26a6:	440a      	add	r2, r1
    26a8:	3204      	adds	r2, #4
    26aa:	4610      	mov	r0, r2
    26ac:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26ae:	9b03      	ldr	r3, [sp, #12]
    26b0:	3301      	adds	r3, #1
    26b2:	9303      	str	r3, [sp, #12]
    26b4:	9b01      	ldr	r3, [sp, #4]
    26b6:	7c1b      	ldrb	r3, [r3, #16]
    26b8:	461a      	mov	r2, r3
    26ba:	9b03      	ldr	r3, [sp, #12]
    26bc:	4293      	cmp	r3, r2
    26be:	d3d9      	bcc.n	2674 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    26c0:	2300      	movs	r3, #0
    26c2:	9303      	str	r3, [sp, #12]
    26c4:	e028      	b.n	2718 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    26c6:	9901      	ldr	r1, [sp, #4]
    26c8:	9a03      	ldr	r2, [sp, #12]
    26ca:	4613      	mov	r3, r2
    26cc:	009b      	lsls	r3, r3, #2
    26ce:	4413      	add	r3, r2
    26d0:	009b      	lsls	r3, r3, #2
    26d2:	440b      	add	r3, r1
    26d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26d8:	681a      	ldr	r2, [r3, #0]
    26da:	4917      	ldr	r1, [pc, #92]	; (2738 <Clock_Ip_InitClock+0x6b0>)
    26dc:	4613      	mov	r3, r2
    26de:	00db      	lsls	r3, r3, #3
    26e0:	4413      	add	r3, r2
    26e2:	440b      	add	r3, r1
    26e4:	3301      	adds	r3, #1
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	461a      	mov	r2, r3
    26ea:	4b16      	ldr	r3, [pc, #88]	; (2744 <Clock_Ip_InitClock+0x6bc>)
    26ec:	5c9b      	ldrb	r3, [r3, r2]
    26ee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    26f0:	4a15      	ldr	r2, [pc, #84]	; (2748 <Clock_Ip_InitClock+0x6c0>)
    26f2:	9b02      	ldr	r3, [sp, #8]
    26f4:	011b      	lsls	r3, r3, #4
    26f6:	4413      	add	r3, r2
    26f8:	330c      	adds	r3, #12
    26fa:	6819      	ldr	r1, [r3, #0]
    26fc:	9a03      	ldr	r2, [sp, #12]
    26fe:	4613      	mov	r3, r2
    2700:	009b      	lsls	r3, r3, #2
    2702:	4413      	add	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    270a:	9a01      	ldr	r2, [sp, #4]
    270c:	4413      	add	r3, r2
    270e:	4618      	mov	r0, r3
    2710:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2712:	9b03      	ldr	r3, [sp, #12]
    2714:	3301      	adds	r3, #1
    2716:	9303      	str	r3, [sp, #12]
    2718:	9b01      	ldr	r3, [sp, #4]
    271a:	7c9b      	ldrb	r3, [r3, #18]
    271c:	461a      	mov	r2, r3
    271e:	9b03      	ldr	r3, [sp, #12]
    2720:	4293      	cmp	r3, r2
    2722:	d3d0      	bcc.n	26c6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2724:	2104      	movs	r1, #4
    2726:	9801      	ldr	r0, [sp, #4]
    2728:	f002 ff48 	bl	55bc <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    272c:	bf00      	nop
    272e:	b004      	add	sp, #16
    2730:	bd10      	pop	{r4, pc}
    2732:	bf00      	nop
    2734:	1fff8b3c 	.word	0x1fff8b3c
    2738:	0001007c 	.word	0x0001007c
    273c:	0001001c 	.word	0x0001001c
    2740:	00010604 	.word	0x00010604
    2744:	0001006c 	.word	0x0001006c
    2748:	00010678 	.word	0x00010678

0000274c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    274c:	b500      	push	{lr}
    274e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2750:	2302      	movs	r3, #2
    2752:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2754:	2300      	movs	r3, #0
    2756:	9304      	str	r3, [sp, #16]
    2758:	e02c      	b.n	27b4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    275a:	4a36      	ldr	r2, [pc, #216]	; (2834 <Clock_Ip_GetPllStatus+0xe8>)
    275c:	9b04      	ldr	r3, [sp, #16]
    275e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2762:	4935      	ldr	r1, [pc, #212]	; (2838 <Clock_Ip_GetPllStatus+0xec>)
    2764:	4613      	mov	r3, r2
    2766:	00db      	lsls	r3, r3, #3
    2768:	4413      	add	r3, r2
    276a:	440b      	add	r3, r1
    276c:	3301      	adds	r3, #1
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	461a      	mov	r2, r3
    2772:	4b32      	ldr	r3, [pc, #200]	; (283c <Clock_Ip_GetPllStatus+0xf0>)
    2774:	5c9b      	ldrb	r3, [r3, r2]
    2776:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2778:	4931      	ldr	r1, [pc, #196]	; (2840 <Clock_Ip_GetPllStatus+0xf4>)
    277a:	9a03      	ldr	r2, [sp, #12]
    277c:	4613      	mov	r3, r2
    277e:	009b      	lsls	r3, r3, #2
    2780:	4413      	add	r3, r2
    2782:	009b      	lsls	r3, r3, #2
    2784:	440b      	add	r3, r1
    2786:	3308      	adds	r3, #8
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	492a      	ldr	r1, [pc, #168]	; (2834 <Clock_Ip_GetPllStatus+0xe8>)
    278c:	9a04      	ldr	r2, [sp, #16]
    278e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2792:	4610      	mov	r0, r2
    2794:	4798      	blx	r3
    2796:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2798:	9b02      	ldr	r3, [sp, #8]
    279a:	2b01      	cmp	r3, #1
    279c:	d102      	bne.n	27a4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    279e:	2301      	movs	r3, #1
    27a0:	9305      	str	r3, [sp, #20]
            break;
    27a2:	e00d      	b.n	27c0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    27a4:	9b02      	ldr	r3, [sp, #8]
    27a6:	2b02      	cmp	r3, #2
    27a8:	d101      	bne.n	27ae <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    27aa:	2300      	movs	r3, #0
    27ac:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27ae:	9b04      	ldr	r3, [sp, #16]
    27b0:	3301      	adds	r3, #1
    27b2:	9304      	str	r3, [sp, #16]
    27b4:	4b23      	ldr	r3, [pc, #140]	; (2844 <Clock_Ip_GetPllStatus+0xf8>)
    27b6:	789b      	ldrb	r3, [r3, #2]
    27b8:	461a      	mov	r2, r3
    27ba:	9b04      	ldr	r3, [sp, #16]
    27bc:	4293      	cmp	r3, r2
    27be:	d3cc      	bcc.n	275a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    27c0:	9b05      	ldr	r3, [sp, #20]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d130      	bne.n	2828 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    27c6:	2300      	movs	r3, #0
    27c8:	9304      	str	r3, [sp, #16]
    27ca:	e027      	b.n	281c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    27cc:	4a1e      	ldr	r2, [pc, #120]	; (2848 <Clock_Ip_GetPllStatus+0xfc>)
    27ce:	9b04      	ldr	r3, [sp, #16]
    27d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27d4:	4918      	ldr	r1, [pc, #96]	; (2838 <Clock_Ip_GetPllStatus+0xec>)
    27d6:	4613      	mov	r3, r2
    27d8:	00db      	lsls	r3, r3, #3
    27da:	4413      	add	r3, r2
    27dc:	440b      	add	r3, r1
    27de:	3301      	adds	r3, #1
    27e0:	781b      	ldrb	r3, [r3, #0]
    27e2:	461a      	mov	r2, r3
    27e4:	4b19      	ldr	r3, [pc, #100]	; (284c <Clock_Ip_GetPllStatus+0x100>)
    27e6:	5c9b      	ldrb	r3, [r3, r2]
    27e8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    27ea:	4919      	ldr	r1, [pc, #100]	; (2850 <Clock_Ip_GetPllStatus+0x104>)
    27ec:	9a03      	ldr	r2, [sp, #12]
    27ee:	4613      	mov	r3, r2
    27f0:	005b      	lsls	r3, r3, #1
    27f2:	4413      	add	r3, r2
    27f4:	009b      	lsls	r3, r3, #2
    27f6:	440b      	add	r3, r1
    27f8:	3308      	adds	r3, #8
    27fa:	681b      	ldr	r3, [r3, #0]
    27fc:	4912      	ldr	r1, [pc, #72]	; (2848 <Clock_Ip_GetPllStatus+0xfc>)
    27fe:	9a04      	ldr	r2, [sp, #16]
    2800:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2804:	4610      	mov	r0, r2
    2806:	4798      	blx	r3
    2808:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    280a:	9b01      	ldr	r3, [sp, #4]
    280c:	2b01      	cmp	r3, #1
    280e:	d102      	bne.n	2816 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2810:	2301      	movs	r3, #1
    2812:	9305      	str	r3, [sp, #20]
                break;
    2814:	e008      	b.n	2828 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2816:	9b04      	ldr	r3, [sp, #16]
    2818:	3301      	adds	r3, #1
    281a:	9304      	str	r3, [sp, #16]
    281c:	4b09      	ldr	r3, [pc, #36]	; (2844 <Clock_Ip_GetPllStatus+0xf8>)
    281e:	78db      	ldrb	r3, [r3, #3]
    2820:	461a      	mov	r2, r3
    2822:	9b04      	ldr	r3, [sp, #16]
    2824:	4293      	cmp	r3, r2
    2826:	d3d1      	bcc.n	27cc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2828:	9b05      	ldr	r3, [sp, #20]
}
    282a:	4618      	mov	r0, r3
    282c:	b007      	add	sp, #28
    282e:	f85d fb04 	ldr.w	pc, [sp], #4
    2832:	bf00      	nop
    2834:	00010584 	.word	0x00010584
    2838:	0001007c 	.word	0x0001007c
    283c:	0001003c 	.word	0x0001003c
    2840:	00010688 	.word	0x00010688
    2844:	1fff8b3c 	.word	0x1fff8b3c
    2848:	00010588 	.word	0x00010588
    284c:	0001002c 	.word	0x0001002c
    2850:	000105f8 	.word	0x000105f8

00002854 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2854:	b500      	push	{lr}
    2856:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2858:	4b55      	ldr	r3, [pc, #340]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	2b00      	cmp	r3, #0
    285e:	f000 80a2 	beq.w	29a6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2862:	2300      	movs	r3, #0
    2864:	9301      	str	r3, [sp, #4]
    2866:	e02c      	b.n	28c2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2868:	4b51      	ldr	r3, [pc, #324]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    286a:	681a      	ldr	r2, [r3, #0]
    286c:	9b01      	ldr	r3, [sp, #4]
    286e:	330d      	adds	r3, #13
    2870:	00db      	lsls	r3, r3, #3
    2872:	4413      	add	r3, r2
    2874:	685b      	ldr	r3, [r3, #4]
    2876:	4a4f      	ldr	r2, [pc, #316]	; (29b4 <Clock_Ip_DistributePll+0x160>)
    2878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    287c:	2b03      	cmp	r3, #3
    287e:	d11d      	bne.n	28bc <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2880:	4b4b      	ldr	r3, [pc, #300]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	9a01      	ldr	r2, [sp, #4]
    2886:	320d      	adds	r2, #13
    2888:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    288c:	494a      	ldr	r1, [pc, #296]	; (29b8 <Clock_Ip_DistributePll+0x164>)
    288e:	4613      	mov	r3, r2
    2890:	00db      	lsls	r3, r3, #3
    2892:	4413      	add	r3, r2
    2894:	440b      	add	r3, r1
    2896:	3301      	adds	r3, #1
    2898:	781b      	ldrb	r3, [r3, #0]
    289a:	461a      	mov	r2, r3
    289c:	4b47      	ldr	r3, [pc, #284]	; (29bc <Clock_Ip_DistributePll+0x168>)
    289e:	5c9b      	ldrb	r3, [r3, r2]
    28a0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    28a2:	4a47      	ldr	r2, [pc, #284]	; (29c0 <Clock_Ip_DistributePll+0x16c>)
    28a4:	9b00      	ldr	r3, [sp, #0]
    28a6:	00db      	lsls	r3, r3, #3
    28a8:	4413      	add	r3, r2
    28aa:	685b      	ldr	r3, [r3, #4]
    28ac:	4a40      	ldr	r2, [pc, #256]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    28ae:	6811      	ldr	r1, [r2, #0]
    28b0:	9a01      	ldr	r2, [sp, #4]
    28b2:	320d      	adds	r2, #13
    28b4:	00d2      	lsls	r2, r2, #3
    28b6:	440a      	add	r2, r1
    28b8:	4610      	mov	r0, r2
    28ba:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28bc:	9b01      	ldr	r3, [sp, #4]
    28be:	3301      	adds	r3, #1
    28c0:	9301      	str	r3, [sp, #4]
    28c2:	4b3b      	ldr	r3, [pc, #236]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    28c4:	681b      	ldr	r3, [r3, #0]
    28c6:	7adb      	ldrb	r3, [r3, #11]
    28c8:	461a      	mov	r2, r3
    28ca:	9b01      	ldr	r3, [sp, #4]
    28cc:	4293      	cmp	r3, r2
    28ce:	d3cb      	bcc.n	2868 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    28d0:	4b3c      	ldr	r3, [pc, #240]	; (29c4 <Clock_Ip_DistributePll+0x170>)
    28d2:	781b      	ldrb	r3, [r3, #0]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d066      	beq.n	29a6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    28d8:	2300      	movs	r3, #0
    28da:	9301      	str	r3, [sp, #4]
    28dc:	e021      	b.n	2922 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    28de:	4b34      	ldr	r3, [pc, #208]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    28e0:	681a      	ldr	r2, [r3, #0]
    28e2:	9b01      	ldr	r3, [sp, #4]
    28e4:	334e      	adds	r3, #78	; 0x4e
    28e6:	00db      	lsls	r3, r3, #3
    28e8:	4413      	add	r3, r2
    28ea:	685a      	ldr	r2, [r3, #4]
    28ec:	4932      	ldr	r1, [pc, #200]	; (29b8 <Clock_Ip_DistributePll+0x164>)
    28ee:	4613      	mov	r3, r2
    28f0:	00db      	lsls	r3, r3, #3
    28f2:	4413      	add	r3, r2
    28f4:	440b      	add	r3, r1
    28f6:	3301      	adds	r3, #1
    28f8:	781b      	ldrb	r3, [r3, #0]
    28fa:	461a      	mov	r2, r3
    28fc:	4b32      	ldr	r3, [pc, #200]	; (29c8 <Clock_Ip_DistributePll+0x174>)
    28fe:	5c9b      	ldrb	r3, [r3, r2]
    2900:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2902:	4a32      	ldr	r2, [pc, #200]	; (29cc <Clock_Ip_DistributePll+0x178>)
    2904:	9b00      	ldr	r3, [sp, #0]
    2906:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    290a:	4a29      	ldr	r2, [pc, #164]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    290c:	6811      	ldr	r1, [r2, #0]
    290e:	9a01      	ldr	r2, [sp, #4]
    2910:	324e      	adds	r2, #78	; 0x4e
    2912:	00d2      	lsls	r2, r2, #3
    2914:	440a      	add	r2, r1
    2916:	3204      	adds	r2, #4
    2918:	4610      	mov	r0, r2
    291a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	3301      	adds	r3, #1
    2920:	9301      	str	r3, [sp, #4]
    2922:	4b23      	ldr	r3, [pc, #140]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	7c1b      	ldrb	r3, [r3, #16]
    2928:	461a      	mov	r2, r3
    292a:	9b01      	ldr	r3, [sp, #4]
    292c:	4293      	cmp	r3, r2
    292e:	d3d6      	bcc.n	28de <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2930:	2300      	movs	r3, #0
    2932:	9301      	str	r3, [sp, #4]
    2934:	e02a      	b.n	298c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2936:	4b1e      	ldr	r3, [pc, #120]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    2938:	6819      	ldr	r1, [r3, #0]
    293a:	9a01      	ldr	r2, [sp, #4]
    293c:	4613      	mov	r3, r2
    293e:	009b      	lsls	r3, r3, #2
    2940:	4413      	add	r3, r2
    2942:	009b      	lsls	r3, r3, #2
    2944:	440b      	add	r3, r1
    2946:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    294a:	681a      	ldr	r2, [r3, #0]
    294c:	491a      	ldr	r1, [pc, #104]	; (29b8 <Clock_Ip_DistributePll+0x164>)
    294e:	4613      	mov	r3, r2
    2950:	00db      	lsls	r3, r3, #3
    2952:	4413      	add	r3, r2
    2954:	440b      	add	r3, r1
    2956:	3301      	adds	r3, #1
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	461a      	mov	r2, r3
    295c:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <Clock_Ip_DistributePll+0x17c>)
    295e:	5c9b      	ldrb	r3, [r3, r2]
    2960:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2962:	4a1c      	ldr	r2, [pc, #112]	; (29d4 <Clock_Ip_DistributePll+0x180>)
    2964:	9b00      	ldr	r3, [sp, #0]
    2966:	011b      	lsls	r3, r3, #4
    2968:	4413      	add	r3, r2
    296a:	330c      	adds	r3, #12
    296c:	6819      	ldr	r1, [r3, #0]
    296e:	4b10      	ldr	r3, [pc, #64]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    2970:	6818      	ldr	r0, [r3, #0]
    2972:	9a01      	ldr	r2, [sp, #4]
    2974:	4613      	mov	r3, r2
    2976:	009b      	lsls	r3, r3, #2
    2978:	4413      	add	r3, r2
    297a:	009b      	lsls	r3, r3, #2
    297c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2980:	4403      	add	r3, r0
    2982:	4618      	mov	r0, r3
    2984:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2986:	9b01      	ldr	r3, [sp, #4]
    2988:	3301      	adds	r3, #1
    298a:	9301      	str	r3, [sp, #4]
    298c:	4b08      	ldr	r3, [pc, #32]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	7c9b      	ldrb	r3, [r3, #18]
    2992:	461a      	mov	r2, r3
    2994:	9b01      	ldr	r3, [sp, #4]
    2996:	4293      	cmp	r3, r2
    2998:	d3cd      	bcc.n	2936 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    299a:	4b05      	ldr	r3, [pc, #20]	; (29b0 <Clock_Ip_DistributePll+0x15c>)
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	2104      	movs	r1, #4
    29a0:	4618      	mov	r0, r3
    29a2:	f002 fe0b 	bl	55bc <Clock_Ip_Command>
        }
    }
}
    29a6:	bf00      	nop
    29a8:	b003      	add	sp, #12
    29aa:	f85d fb04 	ldr.w	pc, [sp], #4
    29ae:	bf00      	nop
    29b0:	1fff8b34 	.word	0x1fff8b34
    29b4:	000104c8 	.word	0x000104c8
    29b8:	0001007c 	.word	0x0001007c
    29bc:	0001004c 	.word	0x0001004c
    29c0:	000106b4 	.word	0x000106b4
    29c4:	1fff8b3c 	.word	0x1fff8b3c
    29c8:	0001001c 	.word	0x0001001c
    29cc:	00010604 	.word	0x00010604
    29d0:	0001006c 	.word	0x0001006c
    29d4:	00010678 	.word	0x00010678

000029d8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    29d8:	b500      	push	{lr}
    29da:	b085      	sub	sp, #20
    29dc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29de:	490c      	ldr	r1, [pc, #48]	; (2a10 <Clock_Ip_DisableClockMonitor+0x38>)
    29e0:	9a01      	ldr	r2, [sp, #4]
    29e2:	4613      	mov	r3, r2
    29e4:	00db      	lsls	r3, r3, #3
    29e6:	4413      	add	r3, r2
    29e8:	440b      	add	r3, r1
    29ea:	3301      	adds	r3, #1
    29ec:	781b      	ldrb	r3, [r3, #0]
    29ee:	461a      	mov	r2, r3
    29f0:	4b08      	ldr	r3, [pc, #32]	; (2a14 <Clock_Ip_DisableClockMonitor+0x3c>)
    29f2:	5c9b      	ldrb	r3, [r3, r2]
    29f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    29f6:	4a08      	ldr	r2, [pc, #32]	; (2a18 <Clock_Ip_DisableClockMonitor+0x40>)
    29f8:	9b03      	ldr	r3, [sp, #12]
    29fa:	011b      	lsls	r3, r3, #4
    29fc:	4413      	add	r3, r2
    29fe:	3308      	adds	r3, #8
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	9801      	ldr	r0, [sp, #4]
    2a04:	4798      	blx	r3
}
    2a06:	bf00      	nop
    2a08:	b005      	add	sp, #20
    2a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a0e:	bf00      	nop
    2a10:	0001007c 	.word	0x0001007c
    2a14:	0001006c 	.word	0x0001006c
    2a18:	00010678 	.word	0x00010678

00002a1c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2a1c:	b082      	sub	sp, #8
    2a1e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2a20:	4a02      	ldr	r2, [pc, #8]	; (2a2c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2a22:	9b01      	ldr	r3, [sp, #4]
    2a24:	6013      	str	r3, [r2, #0]
}
    2a26:	bf00      	nop
    2a28:	b002      	add	sp, #8
    2a2a:	4770      	bx	lr
    2a2c:	1fff8b14 	.word	0x1fff8b14

00002a30 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2a30:	b500      	push	{lr}
    2a32:	b085      	sub	sp, #20
    2a34:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a36:	490c      	ldr	r1, [pc, #48]	; (2a68 <Clock_Ip_DisableModuleClock+0x38>)
    2a38:	9a01      	ldr	r2, [sp, #4]
    2a3a:	4613      	mov	r3, r2
    2a3c:	00db      	lsls	r3, r3, #3
    2a3e:	4413      	add	r3, r2
    2a40:	440b      	add	r3, r1
    2a42:	3301      	adds	r3, #1
    2a44:	781b      	ldrb	r3, [r3, #0]
    2a46:	461a      	mov	r2, r3
    2a48:	4b08      	ldr	r3, [pc, #32]	; (2a6c <Clock_Ip_DisableModuleClock+0x3c>)
    2a4a:	5c9b      	ldrb	r3, [r3, r2]
    2a4c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2a4e:	4a08      	ldr	r2, [pc, #32]	; (2a70 <Clock_Ip_DisableModuleClock+0x40>)
    2a50:	9b03      	ldr	r3, [sp, #12]
    2a52:	00db      	lsls	r3, r3, #3
    2a54:	4413      	add	r3, r2
    2a56:	685b      	ldr	r3, [r3, #4]
    2a58:	2101      	movs	r1, #1
    2a5a:	9801      	ldr	r0, [sp, #4]
    2a5c:	4798      	blx	r3
}
    2a5e:	bf00      	nop
    2a60:	b005      	add	sp, #20
    2a62:	f85d fb04 	ldr.w	pc, [sp], #4
    2a66:	bf00      	nop
    2a68:	0001007c 	.word	0x0001007c
    2a6c:	0001001c 	.word	0x0001001c
    2a70:	00010604 	.word	0x00010604

00002a74 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2a74:	b500      	push	{lr}
    2a76:	b085      	sub	sp, #20
    2a78:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a7a:	490c      	ldr	r1, [pc, #48]	; (2aac <Clock_Ip_EnableModuleClock+0x38>)
    2a7c:	9a01      	ldr	r2, [sp, #4]
    2a7e:	4613      	mov	r3, r2
    2a80:	00db      	lsls	r3, r3, #3
    2a82:	4413      	add	r3, r2
    2a84:	440b      	add	r3, r1
    2a86:	3301      	adds	r3, #1
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	461a      	mov	r2, r3
    2a8c:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <Clock_Ip_EnableModuleClock+0x3c>)
    2a8e:	5c9b      	ldrb	r3, [r3, r2]
    2a90:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2a92:	4a08      	ldr	r2, [pc, #32]	; (2ab4 <Clock_Ip_EnableModuleClock+0x40>)
    2a94:	9b03      	ldr	r3, [sp, #12]
    2a96:	00db      	lsls	r3, r3, #3
    2a98:	4413      	add	r3, r2
    2a9a:	685b      	ldr	r3, [r3, #4]
    2a9c:	2100      	movs	r1, #0
    2a9e:	9801      	ldr	r0, [sp, #4]
    2aa0:	4798      	blx	r3
}
    2aa2:	bf00      	nop
    2aa4:	b005      	add	sp, #20
    2aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aaa:	bf00      	nop
    2aac:	0001007c 	.word	0x0001007c
    2ab0:	0001001c 	.word	0x0001001c
    2ab4:	00010604 	.word	0x00010604

00002ab8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2ab8:	b500      	push	{lr}
    2aba:	b083      	sub	sp, #12
    2abc:	9001      	str	r0, [sp, #4]
    2abe:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ac0:	4b08      	ldr	r3, [pc, #32]	; (2ae4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2ac2:	2200      	movs	r2, #0
    2ac4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2ac6:	4b08      	ldr	r3, [pc, #32]	; (2ae8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	2102      	movs	r1, #2
    2acc:	4618      	mov	r0, r3
    2ace:	f002 fd75 	bl	55bc <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2ad2:	9900      	ldr	r1, [sp, #0]
    2ad4:	9801      	ldr	r0, [sp, #4]
    2ad6:	f002 fc51 	bl	537c <Clock_Ip_ClockPowerModeChangeNotification>
}
    2ada:	bf00      	nop
    2adc:	b003      	add	sp, #12
    2ade:	f85d fb04 	ldr.w	pc, [sp], #4
    2ae2:	bf00      	nop
    2ae4:	1fff8b10 	.word	0x1fff8b10
    2ae8:	1fff8b34 	.word	0x1fff8b34

00002aec <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2aec:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2aee:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2af2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2af4:	4b06      	ldr	r3, [pc, #24]	; (2b10 <Clock_Ip_SetWaitStates+0x24>)
    2af6:	785b      	ldrb	r3, [r3, #1]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d005      	beq.n	2b08 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2afc:	9b01      	ldr	r3, [sp, #4]
    2afe:	3b01      	subs	r3, #1
    2b00:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b02:	9b01      	ldr	r3, [sp, #4]
    2b04:	2b00      	cmp	r3, #0
    2b06:	d1f9      	bne.n	2afc <Clock_Ip_SetWaitStates+0x10>
    }
}
    2b08:	bf00      	nop
    2b0a:	b002      	add	sp, #8
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop
    2b10:	1fff8b3c 	.word	0x1fff8b3c

00002b14 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b14:	b500      	push	{lr}
    2b16:	b083      	sub	sp, #12
    2b18:	9001      	str	r0, [sp, #4]
    2b1a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2b1c:	4b04      	ldr	r3, [pc, #16]	; (2b30 <Clock_Ip_ReportClockErrors+0x1c>)
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	9900      	ldr	r1, [sp, #0]
    2b22:	9801      	ldr	r0, [sp, #4]
    2b24:	4798      	blx	r3
}
    2b26:	bf00      	nop
    2b28:	b003      	add	sp, #12
    2b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b2e:	bf00      	nop
    2b30:	1fff8b14 	.word	0x1fff8b14

00002b34 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2b34:	b500      	push	{lr}
    2b36:	b085      	sub	sp, #20
    2b38:	9003      	str	r0, [sp, #12]
    2b3a:	9102      	str	r1, [sp, #8]
    2b3c:	9201      	str	r2, [sp, #4]
    2b3e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2b40:	2000      	movs	r0, #0
    2b42:	f7fe ffd1 	bl	1ae8 <OsIf_GetCounter>
    2b46:	4602      	mov	r2, r0
    2b48:	9b03      	ldr	r3, [sp, #12]
    2b4a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2b4c:	9b02      	ldr	r3, [sp, #8]
    2b4e:	2200      	movs	r2, #0
    2b50:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2b52:	2100      	movs	r1, #0
    2b54:	9800      	ldr	r0, [sp, #0]
    2b56:	f7ff f813 	bl	1b80 <OsIf_MicrosToTicks>
    2b5a:	4602      	mov	r2, r0
    2b5c:	9b01      	ldr	r3, [sp, #4]
    2b5e:	601a      	str	r2, [r3, #0]
}
    2b60:	bf00      	nop
    2b62:	b005      	add	sp, #20
    2b64:	f85d fb04 	ldr.w	pc, [sp], #4

00002b68 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2b68:	b500      	push	{lr}
    2b6a:	b087      	sub	sp, #28
    2b6c:	9003      	str	r0, [sp, #12]
    2b6e:	9102      	str	r1, [sp, #8]
    2b70:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2b72:	2300      	movs	r3, #0
    2b74:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2b78:	2100      	movs	r1, #0
    2b7a:	9803      	ldr	r0, [sp, #12]
    2b7c:	f7fe ffcd 	bl	1b1a <OsIf_GetElapsed>
    2b80:	4602      	mov	r2, r0
    2b82:	9b02      	ldr	r3, [sp, #8]
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	441a      	add	r2, r3
    2b88:	9b02      	ldr	r3, [sp, #8]
    2b8a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2b8c:	9b02      	ldr	r3, [sp, #8]
    2b8e:	681b      	ldr	r3, [r3, #0]
    2b90:	9a01      	ldr	r2, [sp, #4]
    2b92:	429a      	cmp	r2, r3
    2b94:	d802      	bhi.n	2b9c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2b96:	2301      	movs	r3, #1
    2b98:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2b9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2ba0:	4618      	mov	r0, r3
    2ba2:	b007      	add	sp, #28
    2ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ba8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2ba8:	b082      	sub	sp, #8
    2baa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2bac:	bf00      	nop
    2bae:	b002      	add	sp, #8
    2bb0:	4770      	bx	lr

00002bb2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2bb2:	b500      	push	{lr}
    2bb4:	b083      	sub	sp, #12
    2bb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bb8:	9b01      	ldr	r3, [sp, #4]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d002      	beq.n	2bc4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2bbe:	9801      	ldr	r0, [sp, #4]
    2bc0:	f000 f8ad 	bl	2d1e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bc4:	bf00      	nop
    2bc6:	b003      	add	sp, #12
    2bc8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bcc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2bcc:	b500      	push	{lr}
    2bce:	b083      	sub	sp, #12
    2bd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bd2:	9b01      	ldr	r3, [sp, #4]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d002      	beq.n	2bde <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2bd8:	9801      	ldr	r0, [sp, #4]
    2bda:	f000 f8cd 	bl	2d78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bde:	bf00      	nop
    2be0:	b003      	add	sp, #12
    2be2:	f85d fb04 	ldr.w	pc, [sp], #4

00002be6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2be6:	b500      	push	{lr}
    2be8:	b083      	sub	sp, #12
    2bea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bec:	9b01      	ldr	r3, [sp, #4]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d002      	beq.n	2bf8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2bf2:	9801      	ldr	r0, [sp, #4]
    2bf4:	f000 f8ee 	bl	2dd4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bf8:	bf00      	nop
    2bfa:	b003      	add	sp, #12
    2bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00002c00 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c00:	b500      	push	{lr}
    2c02:	b083      	sub	sp, #12
    2c04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d002      	beq.n	2c12 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2c0c:	9801      	ldr	r0, [sp, #4]
    2c0e:	f000 f8f9 	bl	2e04 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c12:	bf00      	nop
    2c14:	b003      	add	sp, #12
    2c16:	f85d fb04 	ldr.w	pc, [sp], #4

00002c1a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c1a:	b500      	push	{lr}
    2c1c:	b083      	sub	sp, #12
    2c1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c20:	9b01      	ldr	r3, [sp, #4]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d002      	beq.n	2c2c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2c26:	9801      	ldr	r0, [sp, #4]
    2c28:	f000 f904 	bl	2e34 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c2c:	bf00      	nop
    2c2e:	b003      	add	sp, #12
    2c30:	f85d fb04 	ldr.w	pc, [sp], #4

00002c34 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c34:	b500      	push	{lr}
    2c36:	b083      	sub	sp, #12
    2c38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c3a:	9b01      	ldr	r3, [sp, #4]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d002      	beq.n	2c46 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2c40:	9801      	ldr	r0, [sp, #4]
    2c42:	f000 f90f 	bl	2e64 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c46:	bf00      	nop
    2c48:	b003      	add	sp, #12
    2c4a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c4e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c4e:	b500      	push	{lr}
    2c50:	b083      	sub	sp, #12
    2c52:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d002      	beq.n	2c60 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2c5a:	9801      	ldr	r0, [sp, #4]
    2c5c:	f000 f91a 	bl	2e94 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c60:	bf00      	nop
    2c62:	b003      	add	sp, #12
    2c64:	f85d fb04 	ldr.w	pc, [sp], #4

00002c68 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c68:	b500      	push	{lr}
    2c6a:	b083      	sub	sp, #12
    2c6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c6e:	9b01      	ldr	r3, [sp, #4]
    2c70:	2b00      	cmp	r3, #0
    2c72:	d002      	beq.n	2c7a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2c74:	9801      	ldr	r0, [sp, #4]
    2c76:	f000 f925 	bl	2ec4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c7a:	bf00      	nop
    2c7c:	b003      	add	sp, #12
    2c7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c82 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c82:	b500      	push	{lr}
    2c84:	b083      	sub	sp, #12
    2c86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d002      	beq.n	2c94 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2c8e:	9801      	ldr	r0, [sp, #4]
    2c90:	f000 f930 	bl	2ef4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c94:	bf00      	nop
    2c96:	b003      	add	sp, #12
    2c98:	f85d fb04 	ldr.w	pc, [sp], #4

00002c9c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c9c:	b500      	push	{lr}
    2c9e:	b083      	sub	sp, #12
    2ca0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ca2:	9b01      	ldr	r3, [sp, #4]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d002      	beq.n	2cae <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	f000 f93b 	bl	2f24 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cae:	bf00      	nop
    2cb0:	b003      	add	sp, #12
    2cb2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cb6:	b500      	push	{lr}
    2cb8:	b083      	sub	sp, #12
    2cba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cbc:	9b01      	ldr	r3, [sp, #4]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d002      	beq.n	2cc8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2cc2:	9801      	ldr	r0, [sp, #4]
    2cc4:	f000 f946 	bl	2f54 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cc8:	bf00      	nop
    2cca:	b003      	add	sp, #12
    2ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2cd0:	b500      	push	{lr}
    2cd2:	b083      	sub	sp, #12
    2cd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd6:	9b01      	ldr	r3, [sp, #4]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d002      	beq.n	2ce2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2cdc:	9801      	ldr	r0, [sp, #4]
    2cde:	f000 f951 	bl	2f84 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce2:	bf00      	nop
    2ce4:	b003      	add	sp, #12
    2ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cea <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2cea:	b500      	push	{lr}
    2cec:	b083      	sub	sp, #12
    2cee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf0:	9b01      	ldr	r3, [sp, #4]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d002      	beq.n	2cfc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2cf6:	9801      	ldr	r0, [sp, #4]
    2cf8:	f000 f95e 	bl	2fb8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cfc:	bf00      	nop
    2cfe:	b003      	add	sp, #12
    2d00:	f85d fb04 	ldr.w	pc, [sp], #4

00002d04 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2d04:	b500      	push	{lr}
    2d06:	b083      	sub	sp, #12
    2d08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d002      	beq.n	2d16 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d10:	9801      	ldr	r0, [sp, #4]
    2d12:	f000 f98b 	bl	302c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d16:	bf00      	nop
    2d18:	b003      	add	sp, #12
    2d1a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d1e:	b086      	sub	sp, #24
    2d20:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	681a      	ldr	r2, [r3, #0]
    2d26:	4911      	ldr	r1, [pc, #68]	; (2d6c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2d28:	4613      	mov	r3, r2
    2d2a:	00db      	lsls	r3, r3, #3
    2d2c:	4413      	add	r3, r2
    2d2e:	440b      	add	r3, r1
    2d30:	781b      	ldrb	r3, [r3, #0]
    2d32:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d34:	9b01      	ldr	r3, [sp, #4]
    2d36:	685b      	ldr	r3, [r3, #4]
    2d38:	4a0d      	ldr	r2, [pc, #52]	; (2d70 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2d3a:	5cd3      	ldrb	r3, [r2, r3]
    2d3c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d3e:	4a0d      	ldr	r2, [pc, #52]	; (2d74 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d40:	9b05      	ldr	r3, [sp, #20]
    2d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2d4a:	9b03      	ldr	r3, [sp, #12]
    2d4c:	f023 0307 	bic.w	r3, r3, #7
    2d50:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2d52:	9a03      	ldr	r2, [sp, #12]
    2d54:	9b04      	ldr	r3, [sp, #16]
    2d56:	4313      	orrs	r3, r2
    2d58:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2d5a:	4a06      	ldr	r2, [pc, #24]	; (2d74 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d5c:	9b05      	ldr	r3, [sp, #20]
    2d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d62:	9a03      	ldr	r2, [sp, #12]
    2d64:	601a      	str	r2, [r3, #0]
}
    2d66:	bf00      	nop
    2d68:	b006      	add	sp, #24
    2d6a:	4770      	bx	lr
    2d6c:	0001007c 	.word	0x0001007c
    2d70:	00010474 	.word	0x00010474
    2d74:	000104b8 	.word	0x000104b8

00002d78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d78:	b086      	sub	sp, #24
    2d7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d7c:	9b01      	ldr	r3, [sp, #4]
    2d7e:	681a      	ldr	r2, [r3, #0]
    2d80:	4911      	ldr	r1, [pc, #68]	; (2dc8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2d82:	4613      	mov	r3, r2
    2d84:	00db      	lsls	r3, r3, #3
    2d86:	4413      	add	r3, r2
    2d88:	440b      	add	r3, r1
    2d8a:	781b      	ldrb	r3, [r3, #0]
    2d8c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	4a0e      	ldr	r2, [pc, #56]	; (2dcc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2d94:	5cd3      	ldrb	r3, [r2, r3]
    2d96:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d98:	4a0d      	ldr	r2, [pc, #52]	; (2dd0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2d9a:	9b05      	ldr	r3, [sp, #20]
    2d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2da4:	9b03      	ldr	r3, [sp, #12]
    2da6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2daa:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2dac:	9b04      	ldr	r3, [sp, #16]
    2dae:	021b      	lsls	r3, r3, #8
    2db0:	9a03      	ldr	r2, [sp, #12]
    2db2:	4313      	orrs	r3, r2
    2db4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2db6:	4a06      	ldr	r2, [pc, #24]	; (2dd0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2db8:	9b05      	ldr	r3, [sp, #20]
    2dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dbe:	9a03      	ldr	r2, [sp, #12]
    2dc0:	601a      	str	r2, [r3, #0]
}
    2dc2:	bf00      	nop
    2dc4:	b006      	add	sp, #24
    2dc6:	4770      	bx	lr
    2dc8:	0001007c 	.word	0x0001007c
    2dcc:	00010474 	.word	0x00010474
    2dd0:	000104b8 	.word	0x000104b8

00002dd4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dd4:	b084      	sub	sp, #16
    2dd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2dd8:	4b09      	ldr	r3, [pc, #36]	; (2e00 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2dda:	695b      	ldr	r3, [r3, #20]
    2ddc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2dde:	9b03      	ldr	r3, [sp, #12]
    2de0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2de4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2de6:	9b01      	ldr	r3, [sp, #4]
    2de8:	685b      	ldr	r3, [r3, #4]
    2dea:	3b01      	subs	r3, #1
    2dec:	041b      	lsls	r3, r3, #16
    2dee:	9a03      	ldr	r2, [sp, #12]
    2df0:	4313      	orrs	r3, r2
    2df2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2df4:	4a02      	ldr	r2, [pc, #8]	; (2e00 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2df6:	9b03      	ldr	r3, [sp, #12]
    2df8:	6153      	str	r3, [r2, #20]
}
    2dfa:	bf00      	nop
    2dfc:	b004      	add	sp, #16
    2dfe:	4770      	bx	lr
    2e00:	40064000 	.word	0x40064000

00002e04 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e04:	b084      	sub	sp, #16
    2e06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e08:	4b09      	ldr	r3, [pc, #36]	; (2e30 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e0a:	695b      	ldr	r3, [r3, #20]
    2e0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2e0e:	9b03      	ldr	r3, [sp, #12]
    2e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e16:	9b01      	ldr	r3, [sp, #4]
    2e18:	685b      	ldr	r3, [r3, #4]
    2e1a:	3b01      	subs	r3, #1
    2e1c:	011b      	lsls	r3, r3, #4
    2e1e:	9a03      	ldr	r2, [sp, #12]
    2e20:	4313      	orrs	r3, r2
    2e22:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e24:	4a02      	ldr	r2, [pc, #8]	; (2e30 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e26:	9b03      	ldr	r3, [sp, #12]
    2e28:	6153      	str	r3, [r2, #20]
}
    2e2a:	bf00      	nop
    2e2c:	b004      	add	sp, #16
    2e2e:	4770      	bx	lr
    2e30:	40064000 	.word	0x40064000

00002e34 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e34:	b084      	sub	sp, #16
    2e36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e38:	4b09      	ldr	r3, [pc, #36]	; (2e60 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e3a:	695b      	ldr	r3, [r3, #20]
    2e3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2e3e:	9b03      	ldr	r3, [sp, #12]
    2e40:	f023 030f 	bic.w	r3, r3, #15
    2e44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2e46:	9b01      	ldr	r3, [sp, #4]
    2e48:	685b      	ldr	r3, [r3, #4]
    2e4a:	3b01      	subs	r3, #1
    2e4c:	9a03      	ldr	r2, [sp, #12]
    2e4e:	4313      	orrs	r3, r2
    2e50:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e52:	4a03      	ldr	r2, [pc, #12]	; (2e60 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e54:	9b03      	ldr	r3, [sp, #12]
    2e56:	6153      	str	r3, [r2, #20]
}
    2e58:	bf00      	nop
    2e5a:	b004      	add	sp, #16
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop
    2e60:	40064000 	.word	0x40064000

00002e64 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e64:	b084      	sub	sp, #16
    2e66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e68:	4b09      	ldr	r3, [pc, #36]	; (2e90 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e6a:	699b      	ldr	r3, [r3, #24]
    2e6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2e6e:	9b03      	ldr	r3, [sp, #12]
    2e70:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2e76:	9b01      	ldr	r3, [sp, #4]
    2e78:	685b      	ldr	r3, [r3, #4]
    2e7a:	3b01      	subs	r3, #1
    2e7c:	041b      	lsls	r3, r3, #16
    2e7e:	9a03      	ldr	r2, [sp, #12]
    2e80:	4313      	orrs	r3, r2
    2e82:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e84:	4a02      	ldr	r2, [pc, #8]	; (2e90 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e86:	9b03      	ldr	r3, [sp, #12]
    2e88:	6193      	str	r3, [r2, #24]
}
    2e8a:	bf00      	nop
    2e8c:	b004      	add	sp, #16
    2e8e:	4770      	bx	lr
    2e90:	40064000 	.word	0x40064000

00002e94 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e94:	b084      	sub	sp, #16
    2e96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e98:	4b09      	ldr	r3, [pc, #36]	; (2ec0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2e9a:	699b      	ldr	r3, [r3, #24]
    2e9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2e9e:	9b03      	ldr	r3, [sp, #12]
    2ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ea4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2ea6:	9b01      	ldr	r3, [sp, #4]
    2ea8:	685b      	ldr	r3, [r3, #4]
    2eaa:	3b01      	subs	r3, #1
    2eac:	011b      	lsls	r3, r3, #4
    2eae:	9a03      	ldr	r2, [sp, #12]
    2eb0:	4313      	orrs	r3, r2
    2eb2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2eb4:	4a02      	ldr	r2, [pc, #8]	; (2ec0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2eb6:	9b03      	ldr	r3, [sp, #12]
    2eb8:	6193      	str	r3, [r2, #24]
}
    2eba:	bf00      	nop
    2ebc:	b004      	add	sp, #16
    2ebe:	4770      	bx	lr
    2ec0:	40064000 	.word	0x40064000

00002ec4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ec4:	b084      	sub	sp, #16
    2ec6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2ec8:	4b09      	ldr	r3, [pc, #36]	; (2ef0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2eca:	699b      	ldr	r3, [r3, #24]
    2ecc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2ece:	9b03      	ldr	r3, [sp, #12]
    2ed0:	f023 030f 	bic.w	r3, r3, #15
    2ed4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2ed6:	9b01      	ldr	r3, [sp, #4]
    2ed8:	685b      	ldr	r3, [r3, #4]
    2eda:	3b01      	subs	r3, #1
    2edc:	9a03      	ldr	r2, [sp, #12]
    2ede:	4313      	orrs	r3, r2
    2ee0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ee2:	4a03      	ldr	r2, [pc, #12]	; (2ef0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2ee4:	9b03      	ldr	r3, [sp, #12]
    2ee6:	6193      	str	r3, [r2, #24]
}
    2ee8:	bf00      	nop
    2eea:	b004      	add	sp, #16
    2eec:	4770      	bx	lr
    2eee:	bf00      	nop
    2ef0:	40064000 	.word	0x40064000

00002ef4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ef4:	b084      	sub	sp, #16
    2ef6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2ef8:	4b09      	ldr	r3, [pc, #36]	; (2f20 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2efa:	69db      	ldr	r3, [r3, #28]
    2efc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2efe:	9b03      	ldr	r3, [sp, #12]
    2f00:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f04:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2f06:	9b01      	ldr	r3, [sp, #4]
    2f08:	685b      	ldr	r3, [r3, #4]
    2f0a:	3b01      	subs	r3, #1
    2f0c:	041b      	lsls	r3, r3, #16
    2f0e:	9a03      	ldr	r2, [sp, #12]
    2f10:	4313      	orrs	r3, r2
    2f12:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f14:	4a02      	ldr	r2, [pc, #8]	; (2f20 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f16:	9b03      	ldr	r3, [sp, #12]
    2f18:	61d3      	str	r3, [r2, #28]
}
    2f1a:	bf00      	nop
    2f1c:	b004      	add	sp, #16
    2f1e:	4770      	bx	lr
    2f20:	40064000 	.word	0x40064000

00002f24 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f24:	b084      	sub	sp, #16
    2f26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f28:	4b09      	ldr	r3, [pc, #36]	; (2f50 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f2a:	69db      	ldr	r3, [r3, #28]
    2f2c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2f2e:	9b03      	ldr	r3, [sp, #12]
    2f30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f34:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2f36:	9b01      	ldr	r3, [sp, #4]
    2f38:	685b      	ldr	r3, [r3, #4]
    2f3a:	3b01      	subs	r3, #1
    2f3c:	011b      	lsls	r3, r3, #4
    2f3e:	9a03      	ldr	r2, [sp, #12]
    2f40:	4313      	orrs	r3, r2
    2f42:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f44:	4a02      	ldr	r2, [pc, #8]	; (2f50 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f46:	9b03      	ldr	r3, [sp, #12]
    2f48:	61d3      	str	r3, [r2, #28]
}
    2f4a:	bf00      	nop
    2f4c:	b004      	add	sp, #16
    2f4e:	4770      	bx	lr
    2f50:	40064000 	.word	0x40064000

00002f54 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f54:	b084      	sub	sp, #16
    2f56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f58:	4b09      	ldr	r3, [pc, #36]	; (2f80 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f5a:	69db      	ldr	r3, [r3, #28]
    2f5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2f5e:	9b03      	ldr	r3, [sp, #12]
    2f60:	f023 030f 	bic.w	r3, r3, #15
    2f64:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2f66:	9b01      	ldr	r3, [sp, #4]
    2f68:	685b      	ldr	r3, [r3, #4]
    2f6a:	3b01      	subs	r3, #1
    2f6c:	9a03      	ldr	r2, [sp, #12]
    2f6e:	4313      	orrs	r3, r2
    2f70:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f72:	4a03      	ldr	r2, [pc, #12]	; (2f80 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f74:	9b03      	ldr	r3, [sp, #12]
    2f76:	61d3      	str	r3, [r2, #28]
}
    2f78:	bf00      	nop
    2f7a:	b004      	add	sp, #16
    2f7c:	4770      	bx	lr
    2f7e:	bf00      	nop
    2f80:	40064000 	.word	0x40064000

00002f84 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2f84:	b084      	sub	sp, #16
    2f86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2f88:	4b0a      	ldr	r3, [pc, #40]	; (2fb4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2f8a:	685b      	ldr	r3, [r3, #4]
    2f8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2f8e:	9b03      	ldr	r3, [sp, #12]
    2f90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2f94:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2f96:	9b01      	ldr	r3, [sp, #4]
    2f98:	685b      	ldr	r3, [r3, #4]
    2f9a:	3b01      	subs	r3, #1
    2f9c:	021b      	lsls	r3, r3, #8
    2f9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2fa2:	9a03      	ldr	r2, [sp, #12]
    2fa4:	4313      	orrs	r3, r2
    2fa6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2fa8:	4a02      	ldr	r2, [pc, #8]	; (2fb4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2faa:	9b03      	ldr	r3, [sp, #12]
    2fac:	6053      	str	r3, [r2, #4]
}
    2fae:	bf00      	nop
    2fb0:	b004      	add	sp, #16
    2fb2:	4770      	bx	lr
    2fb4:	40048000 	.word	0x40048000

00002fb8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fb8:	b084      	sub	sp, #16
    2fba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2fbc:	4919      	ldr	r1, [pc, #100]	; (3024 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2fbe:	9b01      	ldr	r3, [sp, #4]
    2fc0:	681a      	ldr	r2, [r3, #0]
    2fc2:	4819      	ldr	r0, [pc, #100]	; (3028 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2fc4:	4613      	mov	r3, r2
    2fc6:	00db      	lsls	r3, r3, #3
    2fc8:	4413      	add	r3, r2
    2fca:	4403      	add	r3, r0
    2fcc:	3305      	adds	r3, #5
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2fd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2fd6:	9b03      	ldr	r3, [sp, #12]
    2fd8:	f023 030f 	bic.w	r3, r3, #15
    2fdc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2fde:	9b01      	ldr	r3, [sp, #4]
    2fe0:	685b      	ldr	r3, [r3, #4]
    2fe2:	3b01      	subs	r3, #1
    2fe4:	f003 0307 	and.w	r3, r3, #7
    2fe8:	9a03      	ldr	r2, [sp, #12]
    2fea:	4313      	orrs	r3, r2
    2fec:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2fee:	9b01      	ldr	r3, [sp, #4]
    2ff0:	7a1b      	ldrb	r3, [r3, #8]
    2ff2:	3b01      	subs	r3, #1
    2ff4:	00db      	lsls	r3, r3, #3
    2ff6:	f003 0308 	and.w	r3, r3, #8
    2ffa:	9a03      	ldr	r2, [sp, #12]
    2ffc:	4313      	orrs	r3, r2
    2ffe:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3000:	4908      	ldr	r1, [pc, #32]	; (3024 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3002:	9b01      	ldr	r3, [sp, #4]
    3004:	681a      	ldr	r2, [r3, #0]
    3006:	4808      	ldr	r0, [pc, #32]	; (3028 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3008:	4613      	mov	r3, r2
    300a:	00db      	lsls	r3, r3, #3
    300c:	4413      	add	r3, r2
    300e:	4403      	add	r3, r0
    3010:	3305      	adds	r3, #5
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	461a      	mov	r2, r3
    3016:	9b03      	ldr	r3, [sp, #12]
    3018:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    301c:	bf00      	nop
    301e:	b004      	add	sp, #16
    3020:	4770      	bx	lr
    3022:	bf00      	nop
    3024:	40065000 	.word	0x40065000
    3028:	0001007c 	.word	0x0001007c

0000302c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    302c:	b084      	sub	sp, #16
    302e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3030:	4b10      	ldr	r3, [pc, #64]	; (3074 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3034:	4a0f      	ldr	r2, [pc, #60]	; (3074 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    303a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    303c:	4b0d      	ldr	r3, [pc, #52]	; (3074 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    303e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3040:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3042:	9b03      	ldr	r3, [sp, #12]
    3044:	f023 030f 	bic.w	r3, r3, #15
    3048:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    304a:	9b01      	ldr	r3, [sp, #4]
    304c:	685b      	ldr	r3, [r3, #4]
    304e:	3b01      	subs	r3, #1
    3050:	005b      	lsls	r3, r3, #1
    3052:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3056:	9b01      	ldr	r3, [sp, #4]
    3058:	7a1b      	ldrb	r3, [r3, #8]
    305a:	3b01      	subs	r3, #1
    305c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3060:	4313      	orrs	r3, r2
    3062:	9a03      	ldr	r2, [sp, #12]
    3064:	4313      	orrs	r3, r2
    3066:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3068:	4a02      	ldr	r2, [pc, #8]	; (3074 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    306a:	9b03      	ldr	r3, [sp, #12]
    306c:	6693      	str	r3, [r2, #104]	; 0x68
}
    306e:	bf00      	nop
    3070:	b004      	add	sp, #16
    3072:	4770      	bx	lr
    3074:	40048000 	.word	0x40048000

00003078 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3078:	b082      	sub	sp, #8
    307a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    307c:	bf00      	nop
    307e:	b002      	add	sp, #8
    3080:	4770      	bx	lr
	...

00003084 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3084:	b082      	sub	sp, #8
    3086:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3088:	bf00      	nop
    308a:	b002      	add	sp, #8
    308c:	4770      	bx	lr

0000308e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    308e:	b082      	sub	sp, #8
    3090:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3092:	bf00      	nop
    3094:	b002      	add	sp, #8
    3096:	4770      	bx	lr

00003098 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3098:	b500      	push	{lr}
    309a:	b083      	sub	sp, #12
    309c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    309e:	9b01      	ldr	r3, [sp, #4]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d002      	beq.n	30aa <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    30a4:	9801      	ldr	r0, [sp, #4]
    30a6:	f000 f86a 	bl	317e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30aa:	bf00      	nop
    30ac:	b003      	add	sp, #12
    30ae:	f85d fb04 	ldr.w	pc, [sp], #4

000030b2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30b2:	b500      	push	{lr}
    30b4:	b083      	sub	sp, #12
    30b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30b8:	9b01      	ldr	r3, [sp, #4]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d002      	beq.n	30c4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    30be:	9801      	ldr	r0, [sp, #4]
    30c0:	f000 f884 	bl	31cc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    30c4:	bf00      	nop
    30c6:	b003      	add	sp, #12
    30c8:	f85d fb04 	ldr.w	pc, [sp], #4

000030cc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30cc:	b500      	push	{lr}
    30ce:	b089      	sub	sp, #36	; 0x24
    30d0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    30d2:	2300      	movs	r3, #0
    30d4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    30d8:	9b01      	ldr	r3, [sp, #4]
    30da:	2b00      	cmp	r3, #0
    30dc:	d031      	beq.n	3142 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    30de:	4b1b      	ldr	r3, [pc, #108]	; (314c <Clock_Ip_CompleteSOSC+0x80>)
    30e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30e4:	f003 0301 	and.w	r3, r3, #1
    30e8:	2b00      	cmp	r3, #0
    30ea:	d02a      	beq.n	3142 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30ec:	aa03      	add	r2, sp, #12
    30ee:	a904      	add	r1, sp, #16
    30f0:	a805      	add	r0, sp, #20
    30f2:	f24c 3350 	movw	r3, #50000	; 0xc350
    30f6:	f7ff fd1d 	bl	2b34 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    30fa:	4b14      	ldr	r3, [pc, #80]	; (314c <Clock_Ip_CompleteSOSC+0x80>)
    30fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3100:	0e1b      	lsrs	r3, r3, #24
    3102:	f003 0301 	and.w	r3, r3, #1
    3106:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3108:	9a03      	ldr	r2, [sp, #12]
    310a:	a904      	add	r1, sp, #16
    310c:	ab05      	add	r3, sp, #20
    310e:	4618      	mov	r0, r3
    3110:	f7ff fd2a 	bl	2b68 <Clock_Ip_TimeoutExpired>
    3114:	4603      	mov	r3, r0
    3116:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    311a:	9b06      	ldr	r3, [sp, #24]
    311c:	2b00      	cmp	r3, #0
    311e:	d106      	bne.n	312e <Clock_Ip_CompleteSOSC+0x62>
    3120:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3124:	f083 0301 	eor.w	r3, r3, #1
    3128:	b2db      	uxtb	r3, r3
    312a:	2b00      	cmp	r3, #0
    312c:	d1e5      	bne.n	30fa <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    312e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3132:	2b00      	cmp	r3, #0
    3134:	d005      	beq.n	3142 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3136:	9b01      	ldr	r3, [sp, #4]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	4619      	mov	r1, r3
    313c:	2001      	movs	r0, #1
    313e:	f7ff fce9 	bl	2b14 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3142:	bf00      	nop
    3144:	b009      	add	sp, #36	; 0x24
    3146:	f85d fb04 	ldr.w	pc, [sp], #4
    314a:	bf00      	nop
    314c:	40064000 	.word	0x40064000

00003150 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3150:	b500      	push	{lr}
    3152:	b083      	sub	sp, #12
    3154:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3156:	9801      	ldr	r0, [sp, #4]
    3158:	f000 f8c0 	bl	32dc <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    315c:	bf00      	nop
    315e:	b003      	add	sp, #12
    3160:	f85d fb04 	ldr.w	pc, [sp], #4

00003164 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3164:	b500      	push	{lr}
    3166:	b083      	sub	sp, #12
    3168:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    316a:	9b01      	ldr	r3, [sp, #4]
    316c:	2b00      	cmp	r3, #0
    316e:	d002      	beq.n	3176 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3170:	9801      	ldr	r0, [sp, #4]
    3172:	f000 f8c3 	bl	32fc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3176:	bf00      	nop
    3178:	b003      	add	sp, #12
    317a:	f85d fb04 	ldr.w	pc, [sp], #4

0000317e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    317e:	b082      	sub	sp, #8
    3180:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3182:	4b11      	ldr	r3, [pc, #68]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3184:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3188:	4a0f      	ldr	r2, [pc, #60]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    318a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    318e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3192:	4b0d      	ldr	r3, [pc, #52]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3194:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3198:	4a0b      	ldr	r2, [pc, #44]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    319e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    31a2:	4b09      	ldr	r3, [pc, #36]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31a8:	4a07      	ldr	r2, [pc, #28]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    31ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    31b2:	4b05      	ldr	r3, [pc, #20]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31b8:	4a03      	ldr	r2, [pc, #12]	; (31c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ba:	f023 0301 	bic.w	r3, r3, #1
    31be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    31c2:	bf00      	nop
    31c4:	b002      	add	sp, #8
    31c6:	4770      	bx	lr
    31c8:	40064000 	.word	0x40064000

000031cc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    31cc:	b082      	sub	sp, #8
    31ce:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    31d0:	9b01      	ldr	r3, [sp, #4]
    31d2:	891b      	ldrh	r3, [r3, #8]
    31d4:	2b01      	cmp	r3, #1
    31d6:	d174      	bne.n	32c2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    31d8:	9b01      	ldr	r3, [sp, #4]
    31da:	7bdb      	ldrb	r3, [r3, #15]
    31dc:	2b00      	cmp	r3, #0
    31de:	d002      	beq.n	31e6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    31e0:	2b01      	cmp	r3, #1
    31e2:	d009      	beq.n	31f8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    31e4:	e011      	b.n	320a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    31e6:	4b39      	ldr	r3, [pc, #228]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31ec:	4a37      	ldr	r2, [pc, #220]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31ee:	f023 0308 	bic.w	r3, r3, #8
    31f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    31f6:	e008      	b.n	320a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    31f8:	4b34      	ldr	r3, [pc, #208]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31fe:	4a33      	ldr	r2, [pc, #204]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3200:	f043 0308 	orr.w	r3, r3, #8
    3204:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3208:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    320a:	4b30      	ldr	r3, [pc, #192]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    320c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3210:	4a2e      	ldr	r2, [pc, #184]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3212:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3216:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	685b      	ldr	r3, [r3, #4]
    321e:	4a2c      	ldr	r2, [pc, #176]	; (32d0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3220:	4293      	cmp	r3, r2
    3222:	d90d      	bls.n	3240 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3224:	9b01      	ldr	r3, [sp, #4]
    3226:	685b      	ldr	r3, [r3, #4]
    3228:	4a2a      	ldr	r2, [pc, #168]	; (32d4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    322a:	4293      	cmp	r3, r2
    322c:	d208      	bcs.n	3240 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    322e:	4b27      	ldr	r3, [pc, #156]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3230:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3234:	4a25      	ldr	r2, [pc, #148]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3236:	f043 0320 	orr.w	r3, r3, #32
    323a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    323e:	e007      	b.n	3250 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3240:	4b22      	ldr	r3, [pc, #136]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3242:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3246:	4a21      	ldr	r2, [pc, #132]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3248:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    324c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3250:	9b01      	ldr	r3, [sp, #4]
    3252:	7b1b      	ldrb	r3, [r3, #12]
    3254:	2b00      	cmp	r3, #0
    3256:	d108      	bne.n	326a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3258:	4b1c      	ldr	r3, [pc, #112]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    325a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    325e:	4a1b      	ldr	r2, [pc, #108]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3260:	f043 0304 	orr.w	r3, r3, #4
    3264:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3268:	e007      	b.n	327a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    326a:	4b18      	ldr	r3, [pc, #96]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    326c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3270:	4a16      	ldr	r2, [pc, #88]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3272:	f023 0304 	bic.w	r3, r3, #4
    3276:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    327a:	9b01      	ldr	r3, [sp, #4]
    327c:	7c1b      	ldrb	r3, [r3, #16]
    327e:	2b02      	cmp	r3, #2
    3280:	d011      	beq.n	32a6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3282:	2b02      	cmp	r3, #2
    3284:	dc14      	bgt.n	32b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3286:	2b00      	cmp	r3, #0
    3288:	d002      	beq.n	3290 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    328a:	2b01      	cmp	r3, #1
    328c:	d005      	beq.n	329a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    328e:	e00f      	b.n	32b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3290:	4b0e      	ldr	r3, [pc, #56]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3292:	2201      	movs	r2, #1
    3294:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3298:	e014      	b.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    329a:	4b0c      	ldr	r3, [pc, #48]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    32a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32a4:	e00e      	b.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32a6:	4b09      	ldr	r3, [pc, #36]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a8:	4a0b      	ldr	r2, [pc, #44]	; (32d8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    32aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    32ae:	e009      	b.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    32b0:	4b06      	ldr	r3, [pc, #24]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32b6:	4a05      	ldr	r2, [pc, #20]	; (32cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b8:	f043 0301 	orr.w	r3, r3, #1
    32bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    32c0:	e000      	b.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    32c2:	bf00      	nop
}
    32c4:	bf00      	nop
    32c6:	b002      	add	sp, #8
    32c8:	4770      	bx	lr
    32ca:	bf00      	nop
    32cc:	40064000 	.word	0x40064000
    32d0:	003d08ff 	.word	0x003d08ff
    32d4:	007a1200 	.word	0x007a1200
    32d8:	00030001 	.word	0x00030001

000032dc <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    32dc:	b082      	sub	sp, #8
    32de:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    32e0:	4b05      	ldr	r3, [pc, #20]	; (32f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32e6:	4a04      	ldr	r2, [pc, #16]	; (32f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32e8:	f023 0301 	bic.w	r3, r3, #1
    32ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    32f0:	bf00      	nop
    32f2:	b002      	add	sp, #8
    32f4:	4770      	bx	lr
    32f6:	bf00      	nop
    32f8:	40064000 	.word	0x40064000

000032fc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    32fc:	b082      	sub	sp, #8
    32fe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3300:	9b01      	ldr	r3, [sp, #4]
    3302:	891b      	ldrh	r3, [r3, #8]
    3304:	2b01      	cmp	r3, #1
    3306:	d107      	bne.n	3318 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3308:	4b05      	ldr	r3, [pc, #20]	; (3320 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    330a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    330e:	4a04      	ldr	r2, [pc, #16]	; (3320 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3310:	f043 0301 	orr.w	r3, r3, #1
    3314:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3318:	bf00      	nop
    331a:	b002      	add	sp, #8
    331c:	4770      	bx	lr
    331e:	bf00      	nop
    3320:	40064000 	.word	0x40064000

00003324 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3324:	b082      	sub	sp, #8
    3326:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3328:	bf00      	nop
    332a:	b002      	add	sp, #8
    332c:	4770      	bx	lr

0000332e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    332e:	b082      	sub	sp, #8
    3330:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3332:	2300      	movs	r3, #0
}
    3334:	4618      	mov	r0, r3
    3336:	b002      	add	sp, #8
    3338:	4770      	bx	lr

0000333a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    333a:	b082      	sub	sp, #8
    333c:	9001      	str	r0, [sp, #4]
    333e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3340:	bf00      	nop
    3342:	b002      	add	sp, #8
    3344:	4770      	bx	lr
	...

00003348 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3348:	b082      	sub	sp, #8
    334a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    334c:	bf00      	nop
    334e:	b002      	add	sp, #8
    3350:	4770      	bx	lr

00003352 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3352:	b082      	sub	sp, #8
    3354:	9001      	str	r0, [sp, #4]
    3356:	460b      	mov	r3, r1
    3358:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    335c:	bf00      	nop
    335e:	b002      	add	sp, #8
    3360:	4770      	bx	lr

00003362 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3362:	b500      	push	{lr}
    3364:	b083      	sub	sp, #12
    3366:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3368:	9b01      	ldr	r3, [sp, #4]
    336a:	2b00      	cmp	r3, #0
    336c:	d002      	beq.n	3374 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    336e:	9801      	ldr	r0, [sp, #4]
    3370:	f000 f8e7 	bl	3542 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3374:	bf00      	nop
    3376:	b003      	add	sp, #12
    3378:	f85d fb04 	ldr.w	pc, [sp], #4

0000337c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    337c:	b500      	push	{lr}
    337e:	b085      	sub	sp, #20
    3380:	9001      	str	r0, [sp, #4]
    3382:	460b      	mov	r3, r1
    3384:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3388:	9b01      	ldr	r3, [sp, #4]
    338a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    338c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3390:	2b00      	cmp	r3, #0
    3392:	d003      	beq.n	339c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3394:	2300      	movs	r3, #0
    3396:	f8ad 300c 	strh.w	r3, [sp, #12]
    339a:	e002      	b.n	33a2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    339c:	2301      	movs	r3, #1
    339e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    33a2:	ab02      	add	r3, sp, #8
    33a4:	4618      	mov	r0, r3
    33a6:	f7ff ffdc 	bl	3362 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    33aa:	bf00      	nop
    33ac:	b005      	add	sp, #20
    33ae:	f85d fb04 	ldr.w	pc, [sp], #4

000033b2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    33b2:	b500      	push	{lr}
    33b4:	b083      	sub	sp, #12
    33b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33b8:	9b01      	ldr	r3, [sp, #4]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d002      	beq.n	33c4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    33be:	9801      	ldr	r0, [sp, #4]
    33c0:	f000 f8d6 	bl	3570 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33c4:	bf00      	nop
    33c6:	b003      	add	sp, #12
    33c8:	f85d fb04 	ldr.w	pc, [sp], #4

000033cc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33cc:	b500      	push	{lr}
    33ce:	b085      	sub	sp, #20
    33d0:	9001      	str	r0, [sp, #4]
    33d2:	460b      	mov	r3, r1
    33d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33d8:	9b01      	ldr	r3, [sp, #4]
    33da:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33e0:	2b00      	cmp	r3, #0
    33e2:	d003      	beq.n	33ec <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    33e4:	2300      	movs	r3, #0
    33e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    33ea:	e002      	b.n	33f2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33ec:	2301      	movs	r3, #1
    33ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    33f2:	ab02      	add	r3, sp, #8
    33f4:	4618      	mov	r0, r3
    33f6:	f7ff ffdc 	bl	33b2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    33fa:	bf00      	nop
    33fc:	b005      	add	sp, #20
    33fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003402 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3402:	b500      	push	{lr}
    3404:	b083      	sub	sp, #12
    3406:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3408:	9b01      	ldr	r3, [sp, #4]
    340a:	2b00      	cmp	r3, #0
    340c:	d002      	beq.n	3414 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    340e:	9801      	ldr	r0, [sp, #4]
    3410:	f000 f8c6 	bl	35a0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3414:	bf00      	nop
    3416:	b003      	add	sp, #12
    3418:	f85d fb04 	ldr.w	pc, [sp], #4

0000341c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    341c:	b500      	push	{lr}
    341e:	b085      	sub	sp, #20
    3420:	9001      	str	r0, [sp, #4]
    3422:	460b      	mov	r3, r1
    3424:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3428:	9b01      	ldr	r3, [sp, #4]
    342a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    342c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3430:	2b00      	cmp	r3, #0
    3432:	d003      	beq.n	343c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3434:	2300      	movs	r3, #0
    3436:	f8ad 300c 	strh.w	r3, [sp, #12]
    343a:	e002      	b.n	3442 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    343c:	2301      	movs	r3, #1
    343e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3442:	ab02      	add	r3, sp, #8
    3444:	4618      	mov	r0, r3
    3446:	f7ff ffdc 	bl	3402 <Clock_Ip_ClockSetSimClkoutEnable>
}
    344a:	bf00      	nop
    344c:	b005      	add	sp, #20
    344e:	f85d fb04 	ldr.w	pc, [sp], #4

00003452 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3452:	b500      	push	{lr}
    3454:	b083      	sub	sp, #12
    3456:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3458:	9b01      	ldr	r3, [sp, #4]
    345a:	2b00      	cmp	r3, #0
    345c:	d002      	beq.n	3464 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    345e:	9801      	ldr	r0, [sp, #4]
    3460:	f000 f8b6 	bl	35d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3464:	bf00      	nop
    3466:	b003      	add	sp, #12
    3468:	f85d fb04 	ldr.w	pc, [sp], #4

0000346c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    346c:	b500      	push	{lr}
    346e:	b085      	sub	sp, #20
    3470:	9001      	str	r0, [sp, #4]
    3472:	460b      	mov	r3, r1
    3474:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3478:	9b01      	ldr	r3, [sp, #4]
    347a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    347c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3480:	2b00      	cmp	r3, #0
    3482:	d003      	beq.n	348c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3484:	2300      	movs	r3, #0
    3486:	f8ad 300c 	strh.w	r3, [sp, #12]
    348a:	e002      	b.n	3492 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    348c:	2301      	movs	r3, #1
    348e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3492:	ab02      	add	r3, sp, #8
    3494:	4618      	mov	r0, r3
    3496:	f7ff ffdc 	bl	3452 <Clock_Ip_ClockSetPccCgcEnable>
}
    349a:	bf00      	nop
    349c:	b005      	add	sp, #20
    349e:	f85d fb04 	ldr.w	pc, [sp], #4

000034a2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    34a2:	b500      	push	{lr}
    34a4:	b083      	sub	sp, #12
    34a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34a8:	9b01      	ldr	r3, [sp, #4]
    34aa:	2b00      	cmp	r3, #0
    34ac:	d002      	beq.n	34b4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    34ae:	9801      	ldr	r0, [sp, #4]
    34b0:	f000 f8bc 	bl	362c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34b4:	bf00      	nop
    34b6:	b003      	add	sp, #12
    34b8:	f85d fb04 	ldr.w	pc, [sp], #4

000034bc <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    34bc:	b500      	push	{lr}
    34be:	b085      	sub	sp, #20
    34c0:	9001      	str	r0, [sp, #4]
    34c2:	460b      	mov	r3, r1
    34c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34c8:	9b01      	ldr	r3, [sp, #4]
    34ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34d0:	2b00      	cmp	r3, #0
    34d2:	d003      	beq.n	34dc <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    34d4:	2300      	movs	r3, #0
    34d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    34da:	e002      	b.n	34e2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34dc:	2301      	movs	r3, #1
    34de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    34e2:	ab02      	add	r3, sp, #8
    34e4:	4618      	mov	r0, r3
    34e6:	f7ff ffdc 	bl	34a2 <Clock_Ip_ClockSetSimGate>
}
    34ea:	bf00      	nop
    34ec:	b005      	add	sp, #20
    34ee:	f85d fb04 	ldr.w	pc, [sp], #4

000034f2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    34f2:	b500      	push	{lr}
    34f4:	b083      	sub	sp, #12
    34f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34f8:	9b01      	ldr	r3, [sp, #4]
    34fa:	2b00      	cmp	r3, #0
    34fc:	d002      	beq.n	3504 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    34fe:	9801      	ldr	r0, [sp, #4]
    3500:	f000 f8c0 	bl	3684 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3504:	bf00      	nop
    3506:	b003      	add	sp, #12
    3508:	f85d fb04 	ldr.w	pc, [sp], #4

0000350c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    350c:	b500      	push	{lr}
    350e:	b085      	sub	sp, #20
    3510:	9001      	str	r0, [sp, #4]
    3512:	460b      	mov	r3, r1
    3514:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3518:	9b01      	ldr	r3, [sp, #4]
    351a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    351c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3520:	2b00      	cmp	r3, #0
    3522:	d003      	beq.n	352c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3524:	2300      	movs	r3, #0
    3526:	f8ad 300c 	strh.w	r3, [sp, #12]
    352a:	e002      	b.n	3532 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    352c:	2301      	movs	r3, #1
    352e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3532:	ab02      	add	r3, sp, #8
    3534:	4618      	mov	r0, r3
    3536:	f7ff ffdc 	bl	34f2 <Clock_Ip_ClockSetSimTraceEnable>
}
    353a:	bf00      	nop
    353c:	b005      	add	sp, #20
    353e:	f85d fb04 	ldr.w	pc, [sp], #4

00003542 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3542:	b084      	sub	sp, #16
    3544:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3546:	4b09      	ldr	r3, [pc, #36]	; (356c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3548:	691b      	ldr	r3, [r3, #16]
    354a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    354c:	9b03      	ldr	r3, [sp, #12]
    354e:	f023 0301 	bic.w	r3, r3, #1
    3552:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3554:	9b01      	ldr	r3, [sp, #4]
    3556:	889b      	ldrh	r3, [r3, #4]
    3558:	461a      	mov	r2, r3
    355a:	9b03      	ldr	r3, [sp, #12]
    355c:	4313      	orrs	r3, r2
    355e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3560:	4a02      	ldr	r2, [pc, #8]	; (356c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3562:	9b03      	ldr	r3, [sp, #12]
    3564:	6113      	str	r3, [r2, #16]
}
    3566:	bf00      	nop
    3568:	b004      	add	sp, #16
    356a:	4770      	bx	lr
    356c:	40048000 	.word	0x40048000

00003570 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3570:	b084      	sub	sp, #16
    3572:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3574:	4b09      	ldr	r3, [pc, #36]	; (359c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3576:	691b      	ldr	r3, [r3, #16]
    3578:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    357a:	9b03      	ldr	r3, [sp, #12]
    357c:	f023 0302 	bic.w	r3, r3, #2
    3580:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	889b      	ldrh	r3, [r3, #4]
    3586:	005b      	lsls	r3, r3, #1
    3588:	9a03      	ldr	r2, [sp, #12]
    358a:	4313      	orrs	r3, r2
    358c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    358e:	4a03      	ldr	r2, [pc, #12]	; (359c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3590:	9b03      	ldr	r3, [sp, #12]
    3592:	6113      	str	r3, [r2, #16]
}
    3594:	bf00      	nop
    3596:	b004      	add	sp, #16
    3598:	4770      	bx	lr
    359a:	bf00      	nop
    359c:	40048000 	.word	0x40048000

000035a0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35a0:	b084      	sub	sp, #16
    35a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    35a4:	4b09      	ldr	r3, [pc, #36]	; (35cc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35a6:	685b      	ldr	r3, [r3, #4]
    35a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    35aa:	9b03      	ldr	r3, [sp, #12]
    35ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    35b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    35b2:	9b01      	ldr	r3, [sp, #4]
    35b4:	889b      	ldrh	r3, [r3, #4]
    35b6:	02db      	lsls	r3, r3, #11
    35b8:	9a03      	ldr	r2, [sp, #12]
    35ba:	4313      	orrs	r3, r2
    35bc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    35be:	4a03      	ldr	r2, [pc, #12]	; (35cc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35c0:	9b03      	ldr	r3, [sp, #12]
    35c2:	6053      	str	r3, [r2, #4]
}
    35c4:	bf00      	nop
    35c6:	b004      	add	sp, #16
    35c8:	4770      	bx	lr
    35ca:	bf00      	nop
    35cc:	40048000 	.word	0x40048000

000035d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35d0:	b084      	sub	sp, #16
    35d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    35d4:	4913      	ldr	r1, [pc, #76]	; (3624 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	681a      	ldr	r2, [r3, #0]
    35da:	4813      	ldr	r0, [pc, #76]	; (3628 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    35dc:	4613      	mov	r3, r2
    35de:	00db      	lsls	r3, r3, #3
    35e0:	4413      	add	r3, r2
    35e2:	4403      	add	r3, r0
    35e4:	3306      	adds	r3, #6
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    35ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    35ee:	9b03      	ldr	r3, [sp, #12]
    35f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    35f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    35f6:	9b01      	ldr	r3, [sp, #4]
    35f8:	889b      	ldrh	r3, [r3, #4]
    35fa:	079b      	lsls	r3, r3, #30
    35fc:	9a03      	ldr	r2, [sp, #12]
    35fe:	4313      	orrs	r3, r2
    3600:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3602:	4908      	ldr	r1, [pc, #32]	; (3624 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3604:	9b01      	ldr	r3, [sp, #4]
    3606:	681a      	ldr	r2, [r3, #0]
    3608:	4807      	ldr	r0, [pc, #28]	; (3628 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    360a:	4613      	mov	r3, r2
    360c:	00db      	lsls	r3, r3, #3
    360e:	4413      	add	r3, r2
    3610:	4403      	add	r3, r0
    3612:	3306      	adds	r3, #6
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	461a      	mov	r2, r3
    3618:	9b03      	ldr	r3, [sp, #12]
    361a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    361e:	bf00      	nop
    3620:	b004      	add	sp, #16
    3622:	4770      	bx	lr
    3624:	40065000 	.word	0x40065000
    3628:	0001007c 	.word	0x0001007c

0000362c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    362c:	b086      	sub	sp, #24
    362e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3630:	9b01      	ldr	r3, [sp, #4]
    3632:	889b      	ldrh	r3, [r3, #4]
    3634:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3636:	9b01      	ldr	r3, [sp, #4]
    3638:	681a      	ldr	r2, [r3, #0]
    363a:	4910      	ldr	r1, [pc, #64]	; (367c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    363c:	4613      	mov	r3, r2
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	440b      	add	r3, r1
    3644:	3306      	adds	r3, #6
    3646:	781b      	ldrb	r3, [r3, #0]
    3648:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    364a:	4b0d      	ldr	r3, [pc, #52]	; (3680 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    364e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3650:	2201      	movs	r2, #1
    3652:	9b04      	ldr	r3, [sp, #16]
    3654:	fa02 f303 	lsl.w	r3, r2, r3
    3658:	43db      	mvns	r3, r3
    365a:	9a03      	ldr	r2, [sp, #12]
    365c:	4013      	ands	r3, r2
    365e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3660:	9a05      	ldr	r2, [sp, #20]
    3662:	9b04      	ldr	r3, [sp, #16]
    3664:	fa02 f303 	lsl.w	r3, r2, r3
    3668:	9a03      	ldr	r2, [sp, #12]
    366a:	4313      	orrs	r3, r2
    366c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    366e:	4a04      	ldr	r2, [pc, #16]	; (3680 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3670:	9b03      	ldr	r3, [sp, #12]
    3672:	6413      	str	r3, [r2, #64]	; 0x40
}
    3674:	bf00      	nop
    3676:	b006      	add	sp, #24
    3678:	4770      	bx	lr
    367a:	bf00      	nop
    367c:	0001007c 	.word	0x0001007c
    3680:	40048000 	.word	0x40048000

00003684 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3684:	b084      	sub	sp, #16
    3686:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3688:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    368a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    368c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    368e:	9b01      	ldr	r3, [sp, #4]
    3690:	889b      	ldrh	r3, [r3, #4]
    3692:	2b01      	cmp	r3, #1
    3694:	d104      	bne.n	36a0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3696:	9b03      	ldr	r3, [sp, #12]
    3698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    369c:	9303      	str	r3, [sp, #12]
    369e:	e003      	b.n	36a8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    36a0:	9b03      	ldr	r3, [sp, #12]
    36a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    36a6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    36a8:	4a02      	ldr	r2, [pc, #8]	; (36b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    36aa:	9b03      	ldr	r3, [sp, #12]
    36ac:	6693      	str	r3, [r2, #104]	; 0x68
}
    36ae:	bf00      	nop
    36b0:	b004      	add	sp, #16
    36b2:	4770      	bx	lr
    36b4:	40048000 	.word	0x40048000

000036b8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    36b8:	b082      	sub	sp, #8
    36ba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36bc:	bf00      	nop
    36be:	b002      	add	sp, #8
    36c0:	4770      	bx	lr

000036c2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    36c2:	b082      	sub	sp, #8
    36c4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    36c6:	bf00      	nop
    36c8:	b002      	add	sp, #8
    36ca:	4770      	bx	lr

000036cc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36cc:	b500      	push	{lr}
    36ce:	b083      	sub	sp, #12
    36d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36d2:	9b01      	ldr	r3, [sp, #4]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d002      	beq.n	36de <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    36d8:	9801      	ldr	r0, [sp, #4]
    36da:	f000 f8d1 	bl	3880 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36de:	bf00      	nop
    36e0:	b003      	add	sp, #12
    36e2:	f85d fb04 	ldr.w	pc, [sp], #4

000036e6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36e6:	b500      	push	{lr}
    36e8:	b083      	sub	sp, #12
    36ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ec:	9b01      	ldr	r3, [sp, #4]
    36ee:	2b00      	cmp	r3, #0
    36f0:	d002      	beq.n	36f8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    36f2:	9801      	ldr	r0, [sp, #4]
    36f4:	f000 f950 	bl	3998 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f8:	bf00      	nop
    36fa:	b003      	add	sp, #12
    36fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003700 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3700:	b500      	push	{lr}
    3702:	b083      	sub	sp, #12
    3704:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3706:	9801      	ldr	r0, [sp, #4]
    3708:	f000 f98e 	bl	3a28 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    370c:	bf00      	nop
    370e:	b003      	add	sp, #12
    3710:	f85d fb04 	ldr.w	pc, [sp], #4

00003714 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3714:	b500      	push	{lr}
    3716:	b083      	sub	sp, #12
    3718:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    371a:	9b01      	ldr	r3, [sp, #4]
    371c:	2b00      	cmp	r3, #0
    371e:	d002      	beq.n	3726 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3720:	9801      	ldr	r0, [sp, #4]
    3722:	f000 f999 	bl	3a58 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3726:	bf00      	nop
    3728:	b003      	add	sp, #12
    372a:	f85d fb04 	ldr.w	pc, [sp], #4

0000372e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    372e:	b500      	push	{lr}
    3730:	b083      	sub	sp, #12
    3732:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3734:	9b01      	ldr	r3, [sp, #4]
    3736:	2b00      	cmp	r3, #0
    3738:	d002      	beq.n	3740 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    373a:	9801      	ldr	r0, [sp, #4]
    373c:	f000 f9b0 	bl	3aa0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3740:	bf00      	nop
    3742:	b003      	add	sp, #12
    3744:	f85d fb04 	ldr.w	pc, [sp], #4

00003748 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3748:	b500      	push	{lr}
    374a:	b083      	sub	sp, #12
    374c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    374e:	9801      	ldr	r0, [sp, #4]
    3750:	f000 f9ba 	bl	3ac8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3754:	bf00      	nop
    3756:	b003      	add	sp, #12
    3758:	f85d fb04 	ldr.w	pc, [sp], #4

0000375c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    375c:	b500      	push	{lr}
    375e:	b083      	sub	sp, #12
    3760:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	2b00      	cmp	r3, #0
    3766:	d002      	beq.n	376e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3768:	9801      	ldr	r0, [sp, #4]
    376a:	f000 f9bd 	bl	3ae8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376e:	bf00      	nop
    3770:	b003      	add	sp, #12
    3772:	f85d fb04 	ldr.w	pc, [sp], #4

00003776 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3776:	b500      	push	{lr}
    3778:	b083      	sub	sp, #12
    377a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    377c:	9b01      	ldr	r3, [sp, #4]
    377e:	2b00      	cmp	r3, #0
    3780:	d002      	beq.n	3788 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3782:	9801      	ldr	r0, [sp, #4]
    3784:	f000 f9d4 	bl	3b30 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3788:	bf00      	nop
    378a:	b003      	add	sp, #12
    378c:	f85d fb04 	ldr.w	pc, [sp], #4

00003790 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3790:	b500      	push	{lr}
    3792:	b083      	sub	sp, #12
    3794:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3796:	9801      	ldr	r0, [sp, #4]
    3798:	f000 f9de 	bl	3b58 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    379c:	bf00      	nop
    379e:	b003      	add	sp, #12
    37a0:	f85d fb04 	ldr.w	pc, [sp], #4

000037a4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    37a4:	b500      	push	{lr}
    37a6:	b089      	sub	sp, #36	; 0x24
    37a8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    37aa:	2300      	movs	r3, #0
    37ac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    37b0:	4b20      	ldr	r3, [pc, #128]	; (3834 <SetInputSouceSytemClock+0x90>)
    37b2:	695b      	ldr	r3, [r3, #20]
    37b4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    37b6:	9b06      	ldr	r3, [sp, #24]
    37b8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    37bc:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    37be:	9b01      	ldr	r3, [sp, #4]
    37c0:	061b      	lsls	r3, r3, #24
    37c2:	9a06      	ldr	r2, [sp, #24]
    37c4:	4313      	orrs	r3, r2
    37c6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    37c8:	4a1a      	ldr	r2, [pc, #104]	; (3834 <SetInputSouceSytemClock+0x90>)
    37ca:	9b06      	ldr	r3, [sp, #24]
    37cc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37ce:	aa02      	add	r2, sp, #8
    37d0:	a903      	add	r1, sp, #12
    37d2:	a804      	add	r0, sp, #16
    37d4:	f24c 3350 	movw	r3, #50000	; 0xc350
    37d8:	f7ff f9ac 	bl	2b34 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    37dc:	4b15      	ldr	r3, [pc, #84]	; (3834 <SetInputSouceSytemClock+0x90>)
    37de:	691b      	ldr	r3, [r3, #16]
    37e0:	0e1b      	lsrs	r3, r3, #24
    37e2:	f003 030f 	and.w	r3, r3, #15
    37e6:	9a01      	ldr	r2, [sp, #4]
    37e8:	429a      	cmp	r2, r3
    37ea:	bf0c      	ite	eq
    37ec:	2301      	moveq	r3, #1
    37ee:	2300      	movne	r3, #0
    37f0:	b2db      	uxtb	r3, r3
    37f2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    37f4:	9a02      	ldr	r2, [sp, #8]
    37f6:	a903      	add	r1, sp, #12
    37f8:	ab04      	add	r3, sp, #16
    37fa:	4618      	mov	r0, r3
    37fc:	f7ff f9b4 	bl	2b68 <Clock_Ip_TimeoutExpired>
    3800:	4603      	mov	r3, r0
    3802:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3806:	9b05      	ldr	r3, [sp, #20]
    3808:	2b00      	cmp	r3, #0
    380a:	d106      	bne.n	381a <SetInputSouceSytemClock+0x76>
    380c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3810:	f083 0301 	eor.w	r3, r3, #1
    3814:	b2db      	uxtb	r3, r3
    3816:	2b00      	cmp	r3, #0
    3818:	d1e0      	bne.n	37dc <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    381a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    381e:	2b00      	cmp	r3, #0
    3820:	d003      	beq.n	382a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3822:	2105      	movs	r1, #5
    3824:	2001      	movs	r0, #1
    3826:	f7ff f975 	bl	2b14 <Clock_Ip_ReportClockErrors>
    }
}
    382a:	bf00      	nop
    382c:	b009      	add	sp, #36	; 0x24
    382e:	f85d fb04 	ldr.w	pc, [sp], #4
    3832:	bf00      	nop
    3834:	40064000 	.word	0x40064000

00003838 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3838:	b500      	push	{lr}
    383a:	b083      	sub	sp, #12
    383c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    383e:	9b01      	ldr	r3, [sp, #4]
    3840:	2b00      	cmp	r3, #0
    3842:	d002      	beq.n	384a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3844:	9801      	ldr	r0, [sp, #4]
    3846:	f000 f997 	bl	3b78 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    384a:	bf00      	nop
    384c:	b003      	add	sp, #12
    384e:	f85d fb04 	ldr.w	pc, [sp], #4

00003852 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3852:	b500      	push	{lr}
    3854:	b083      	sub	sp, #12
    3856:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3858:	9b01      	ldr	r3, [sp, #4]
    385a:	2b00      	cmp	r3, #0
    385c:	d002      	beq.n	3864 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    385e:	9801      	ldr	r0, [sp, #4]
    3860:	f000 fa7e 	bl	3d60 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3864:	bf00      	nop
    3866:	b003      	add	sp, #12
    3868:	f85d fb04 	ldr.w	pc, [sp], #4

0000386c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    386c:	b500      	push	{lr}
    386e:	b083      	sub	sp, #12
    3870:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3872:	9801      	ldr	r0, [sp, #4]
    3874:	f000 fab8 	bl	3de8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3878:	bf00      	nop
    387a:	b003      	add	sp, #12
    387c:	f85d fb04 	ldr.w	pc, [sp], #4

00003880 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3880:	b500      	push	{lr}
    3882:	b08b      	sub	sp, #44	; 0x2c
    3884:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3886:	2300      	movs	r3, #0
    3888:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    388c:	9b01      	ldr	r3, [sp, #4]
    388e:	2b00      	cmp	r3, #0
    3890:	d10b      	bne.n	38aa <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3892:	2305      	movs	r3, #5
    3894:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3896:	2301      	movs	r3, #1
    3898:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    389c:	2301      	movs	r3, #1
    389e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    38a2:	2301      	movs	r3, #1
    38a4:	f88d 3010 	strb.w	r3, [sp, #16]
    38a8:	e00e      	b.n	38c8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    38aa:	9b01      	ldr	r3, [sp, #4]
    38ac:	681b      	ldr	r3, [r3, #0]
    38ae:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    38b0:	9b01      	ldr	r3, [sp, #4]
    38b2:	79db      	ldrb	r3, [r3, #7]
    38b4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    38b8:	9b01      	ldr	r3, [sp, #4]
    38ba:	889b      	ldrh	r3, [r3, #4]
    38bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    38c0:	9b01      	ldr	r3, [sp, #4]
    38c2:	7a1b      	ldrb	r3, [r3, #8]
    38c4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    38c8:	4b32      	ldr	r3, [pc, #200]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38ce:	4a31      	ldr	r2, [pc, #196]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    38d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    38d8:	4b2e      	ldr	r3, [pc, #184]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38de:	4a2d      	ldr	r2, [pc, #180]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38e0:	f023 0301 	bic.w	r3, r3, #1
    38e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    38e8:	4b2a      	ldr	r3, [pc, #168]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38ee:	4a29      	ldr	r2, [pc, #164]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38f0:	f023 0304 	bic.w	r3, r3, #4
    38f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    38f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    38fc:	2b01      	cmp	r3, #1
    38fe:	d144      	bne.n	398a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3900:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3904:	4a23      	ldr	r2, [pc, #140]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3906:	f003 0301 	and.w	r3, r3, #1
    390a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    390e:	4b21      	ldr	r3, [pc, #132]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3914:	4a1f      	ldr	r2, [pc, #124]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3916:	f043 0301 	orr.w	r3, r3, #1
    391a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    391e:	4b1d      	ldr	r3, [pc, #116]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3920:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3924:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3928:	009b      	lsls	r3, r3, #2
    392a:	f003 0304 	and.w	r3, r3, #4
    392e:	4919      	ldr	r1, [pc, #100]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3930:	4313      	orrs	r3, r2
    3932:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3936:	aa05      	add	r2, sp, #20
    3938:	a906      	add	r1, sp, #24
    393a:	a807      	add	r0, sp, #28
    393c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3940:	f7ff f8f8 	bl	2b34 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3944:	4b13      	ldr	r3, [pc, #76]	; (3994 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    394a:	0e1b      	lsrs	r3, r3, #24
    394c:	f003 0301 	and.w	r3, r3, #1
    3950:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3952:	9a05      	ldr	r2, [sp, #20]
    3954:	a906      	add	r1, sp, #24
    3956:	ab07      	add	r3, sp, #28
    3958:	4618      	mov	r0, r3
    395a:	f7ff f905 	bl	2b68 <Clock_Ip_TimeoutExpired>
    395e:	4603      	mov	r3, r0
    3960:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3964:	9b08      	ldr	r3, [sp, #32]
    3966:	2b00      	cmp	r3, #0
    3968:	d106      	bne.n	3978 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    396a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    396e:	f083 0301 	eor.w	r3, r3, #1
    3972:	b2db      	uxtb	r3, r3
    3974:	2b00      	cmp	r3, #0
    3976:	d1e5      	bne.n	3944 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3978:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    397c:	2b00      	cmp	r3, #0
    397e:	d004      	beq.n	398a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3980:	9b02      	ldr	r3, [sp, #8]
    3982:	4619      	mov	r1, r3
    3984:	2001      	movs	r0, #1
    3986:	f7ff f8c5 	bl	2b14 <Clock_Ip_ReportClockErrors>
        }
    }
}
    398a:	bf00      	nop
    398c:	b00b      	add	sp, #44	; 0x2c
    398e:	f85d fb04 	ldr.w	pc, [sp], #4
    3992:	bf00      	nop
    3994:	40064000 	.word	0x40064000

00003998 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3998:	b500      	push	{lr}
    399a:	b089      	sub	sp, #36	; 0x24
    399c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    399e:	2300      	movs	r3, #0
    39a0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39a4:	4b1f      	ldr	r3, [pc, #124]	; (3a24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39aa:	4a1e      	ldr	r2, [pc, #120]	; (3a24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39ac:	f043 0301 	orr.w	r3, r3, #1
    39b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    39b4:	4b1b      	ldr	r3, [pc, #108]	; (3a24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ba:	4a1a      	ldr	r2, [pc, #104]	; (3a24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39bc:	f043 0304 	orr.w	r3, r3, #4
    39c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39c4:	aa03      	add	r2, sp, #12
    39c6:	a904      	add	r1, sp, #16
    39c8:	a805      	add	r0, sp, #20
    39ca:	f24c 3350 	movw	r3, #50000	; 0xc350
    39ce:	f7ff f8b1 	bl	2b34 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39d2:	4b14      	ldr	r3, [pc, #80]	; (3a24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39d8:	0e1b      	lsrs	r3, r3, #24
    39da:	f003 0301 	and.w	r3, r3, #1
    39de:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39e0:	9a03      	ldr	r2, [sp, #12]
    39e2:	a904      	add	r1, sp, #16
    39e4:	ab05      	add	r3, sp, #20
    39e6:	4618      	mov	r0, r3
    39e8:	f7ff f8be 	bl	2b68 <Clock_Ip_TimeoutExpired>
    39ec:	4603      	mov	r3, r0
    39ee:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    39f2:	9b06      	ldr	r3, [sp, #24]
    39f4:	2b00      	cmp	r3, #0
    39f6:	d106      	bne.n	3a06 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    39f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    39fc:	f083 0301 	eor.w	r3, r3, #1
    3a00:	b2db      	uxtb	r3, r3
    3a02:	2b00      	cmp	r3, #0
    3a04:	d1e5      	bne.n	39d2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3a06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d005      	beq.n	3a1a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a0e:	9b01      	ldr	r3, [sp, #4]
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	4619      	mov	r1, r3
    3a14:	2001      	movs	r0, #1
    3a16:	f7ff f87d 	bl	2b14 <Clock_Ip_ReportClockErrors>
    }
}
    3a1a:	bf00      	nop
    3a1c:	b009      	add	sp, #36	; 0x24
    3a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a22:	bf00      	nop
    3a24:	40064000 	.word	0x40064000

00003a28 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3a28:	b082      	sub	sp, #8
    3a2a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3a2c:	4b09      	ldr	r3, [pc, #36]	; (3a54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a32:	4a08      	ldr	r2, [pc, #32]	; (3a54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a34:	f023 0301 	bic.w	r3, r3, #1
    3a38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a3c:	4b05      	ldr	r3, [pc, #20]	; (3a54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a42:	4a04      	ldr	r2, [pc, #16]	; (3a54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a44:	f023 0304 	bic.w	r3, r3, #4
    3a48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a4c:	bf00      	nop
    3a4e:	b002      	add	sp, #8
    3a50:	4770      	bx	lr
    3a52:	bf00      	nop
    3a54:	40064000 	.word	0x40064000

00003a58 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a58:	b082      	sub	sp, #8
    3a5a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3a5c:	4b0f      	ldr	r3, [pc, #60]	; (3a9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a62:	4a0e      	ldr	r2, [pc, #56]	; (3a9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3a68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a6c:	4b0b      	ldr	r3, [pc, #44]	; (3a9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a72:	4a0a      	ldr	r2, [pc, #40]	; (3a9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a74:	f023 0304 	bic.w	r3, r3, #4
    3a78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3a7c:	4b07      	ldr	r3, [pc, #28]	; (3a9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a82:	9b01      	ldr	r3, [sp, #4]
    3a84:	7a1b      	ldrb	r3, [r3, #8]
    3a86:	009b      	lsls	r3, r3, #2
    3a88:	f003 0304 	and.w	r3, r3, #4
    3a8c:	4903      	ldr	r1, [pc, #12]	; (3a9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a8e:	4313      	orrs	r3, r2
    3a90:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3a94:	bf00      	nop
    3a96:	b002      	add	sp, #8
    3a98:	4770      	bx	lr
    3a9a:	bf00      	nop
    3a9c:	40064000 	.word	0x40064000

00003aa0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3aa0:	b082      	sub	sp, #8
    3aa2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3aa4:	9b01      	ldr	r3, [sp, #4]
    3aa6:	889b      	ldrh	r3, [r3, #4]
    3aa8:	2b01      	cmp	r3, #1
    3aaa:	d107      	bne.n	3abc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3aac:	4b05      	ldr	r3, [pc, #20]	; (3ac4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ab2:	4a04      	ldr	r2, [pc, #16]	; (3ac4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ab4:	f043 0304 	orr.w	r3, r3, #4
    3ab8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3abc:	bf00      	nop
    3abe:	b002      	add	sp, #8
    3ac0:	4770      	bx	lr
    3ac2:	bf00      	nop
    3ac4:	40064000 	.word	0x40064000

00003ac8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3ac8:	b082      	sub	sp, #8
    3aca:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3acc:	4b05      	ldr	r3, [pc, #20]	; (3ae4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ad2:	4a04      	ldr	r2, [pc, #16]	; (3ae4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ad4:	f023 0304 	bic.w	r3, r3, #4
    3ad8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3adc:	bf00      	nop
    3ade:	b002      	add	sp, #8
    3ae0:	4770      	bx	lr
    3ae2:	bf00      	nop
    3ae4:	40064000 	.word	0x40064000

00003ae8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae8:	b082      	sub	sp, #8
    3aea:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3aec:	4b0f      	ldr	r3, [pc, #60]	; (3b2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3af2:	4a0e      	ldr	r2, [pc, #56]	; (3b2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3af4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3afc:	4b0b      	ldr	r3, [pc, #44]	; (3b2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b02:	4a0a      	ldr	r2, [pc, #40]	; (3b2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b04:	f023 0302 	bic.w	r3, r3, #2
    3b08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3b0c:	4b07      	ldr	r3, [pc, #28]	; (3b2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b12:	9b01      	ldr	r3, [sp, #4]
    3b14:	7a5b      	ldrb	r3, [r3, #9]
    3b16:	005b      	lsls	r3, r3, #1
    3b18:	f003 0302 	and.w	r3, r3, #2
    3b1c:	4903      	ldr	r1, [pc, #12]	; (3b2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b1e:	4313      	orrs	r3, r2
    3b20:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b24:	bf00      	nop
    3b26:	b002      	add	sp, #8
    3b28:	4770      	bx	lr
    3b2a:	bf00      	nop
    3b2c:	40064000 	.word	0x40064000

00003b30 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b30:	b082      	sub	sp, #8
    3b32:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b34:	9b01      	ldr	r3, [sp, #4]
    3b36:	889b      	ldrh	r3, [r3, #4]
    3b38:	2b01      	cmp	r3, #1
    3b3a:	d107      	bne.n	3b4c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3b3c:	4b05      	ldr	r3, [pc, #20]	; (3b54 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b42:	4a04      	ldr	r2, [pc, #16]	; (3b54 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b44:	f043 0302 	orr.w	r3, r3, #2
    3b48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b4c:	bf00      	nop
    3b4e:	b002      	add	sp, #8
    3b50:	4770      	bx	lr
    3b52:	bf00      	nop
    3b54:	40064000 	.word	0x40064000

00003b58 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3b58:	b082      	sub	sp, #8
    3b5a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b5c:	4b05      	ldr	r3, [pc, #20]	; (3b74 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b62:	4a04      	ldr	r2, [pc, #16]	; (3b74 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b64:	f023 0302 	bic.w	r3, r3, #2
    3b68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b6c:	bf00      	nop
    3b6e:	b002      	add	sp, #8
    3b70:	4770      	bx	lr
    3b72:	bf00      	nop
    3b74:	40064000 	.word	0x40064000

00003b78 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b78:	b500      	push	{lr}
    3b7a:	b08b      	sub	sp, #44	; 0x2c
    3b7c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b7e:	9b01      	ldr	r3, [sp, #4]
    3b80:	681a      	ldr	r2, [r3, #0]
    3b82:	4975      	ldr	r1, [pc, #468]	; (3d58 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3b84:	4613      	mov	r3, r2
    3b86:	00db      	lsls	r3, r3, #3
    3b88:	4413      	add	r3, r2
    3b8a:	440b      	add	r3, r1
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3b90:	2300      	movs	r3, #0
    3b92:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3b96:	2300      	movs	r3, #0
    3b98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3b9c:	4b6f      	ldr	r3, [pc, #444]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ba2:	4a6e      	ldr	r2, [pc, #440]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ba8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3bac:	4b6b      	ldr	r3, [pc, #428]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d07d      	beq.n	3cb6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bba:	9b01      	ldr	r3, [sp, #4]
    3bbc:	79db      	ldrb	r3, [r3, #7]
    3bbe:	461a      	mov	r2, r3
    3bc0:	4b66      	ldr	r3, [pc, #408]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bc2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3bc6:	f003 0303 	and.w	r3, r3, #3
    3bca:	429a      	cmp	r2, r3
    3bcc:	d10b      	bne.n	3be6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3bce:	9b01      	ldr	r3, [sp, #4]
    3bd0:	799b      	ldrb	r3, [r3, #6]
    3bd2:	461a      	mov	r2, r3
    3bd4:	4b61      	ldr	r3, [pc, #388]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bda:	08db      	lsrs	r3, r3, #3
    3bdc:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3be0:	429a      	cmp	r2, r3
    3be2:	f000 80b4 	beq.w	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3be6:	4b5d      	ldr	r3, [pc, #372]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bec:	f003 0301 	and.w	r3, r3, #1
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d105      	bne.n	3c00 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3bf4:	2301      	movs	r3, #1
    3bf6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3bfa:	2000      	movs	r0, #0
    3bfc:	f7ff fd66 	bl	36cc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c00:	2002      	movs	r0, #2
    3c02:	f7ff fdcf 	bl	37a4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c06:	4b55      	ldr	r3, [pc, #340]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c08:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c0c:	4a53      	ldr	r2, [pc, #332]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c0e:	f023 0301 	bic.w	r3, r3, #1
    3c12:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	889b      	ldrh	r3, [r3, #4]
    3c1a:	2b01      	cmp	r3, #1
    3c1c:	f040 8097 	bne.w	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c20:	9b01      	ldr	r3, [sp, #4]
    3c22:	79db      	ldrb	r3, [r3, #7]
    3c24:	4a4d      	ldr	r2, [pc, #308]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c26:	f003 0303 	and.w	r3, r3, #3
    3c2a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c2e:	4b4b      	ldr	r3, [pc, #300]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c30:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c34:	9b01      	ldr	r3, [sp, #4]
    3c36:	799b      	ldrb	r3, [r3, #6]
    3c38:	00db      	lsls	r3, r3, #3
    3c3a:	f003 0308 	and.w	r3, r3, #8
    3c3e:	4313      	orrs	r3, r2
    3c40:	4a46      	ldr	r2, [pc, #280]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c42:	f043 0301 	orr.w	r3, r3, #1
    3c46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c4a:	aa03      	add	r2, sp, #12
    3c4c:	a904      	add	r1, sp, #16
    3c4e:	a805      	add	r0, sp, #20
    3c50:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c54:	f7fe ff6e 	bl	2b34 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c58:	4b40      	ldr	r3, [pc, #256]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c5e:	0e1b      	lsrs	r3, r3, #24
    3c60:	f003 0301 	and.w	r3, r3, #1
    3c64:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c66:	9a03      	ldr	r2, [sp, #12]
    3c68:	a904      	add	r1, sp, #16
    3c6a:	ab05      	add	r3, sp, #20
    3c6c:	4618      	mov	r0, r3
    3c6e:	f7fe ff7b 	bl	2b68 <Clock_Ip_TimeoutExpired>
    3c72:	4603      	mov	r3, r0
    3c74:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c78:	9b06      	ldr	r3, [sp, #24]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d106      	bne.n	3c8c <Clock_Ip_SetFirc_TrustedCall+0x114>
    3c7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c82:	f083 0301 	eor.w	r3, r3, #1
    3c86:	b2db      	uxtb	r3, r3
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d1e5      	bne.n	3c58 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3c8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c90:	2b00      	cmp	r3, #0
    3c92:	d005      	beq.n	3ca0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3c94:	9b01      	ldr	r3, [sp, #4]
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	4619      	mov	r1, r3
    3c9a:	2001      	movs	r0, #1
    3c9c:	f7fe ff3a 	bl	2b14 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3ca0:	2003      	movs	r0, #3
    3ca2:	f7ff fd7f 	bl	37a4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3ca6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3caa:	2b00      	cmp	r3, #0
    3cac:	d04f      	beq.n	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3cae:	2002      	movs	r0, #2
    3cb0:	f7ff fd26 	bl	3700 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3cb4:	e04b      	b.n	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cb6:	4b29      	ldr	r3, [pc, #164]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cbc:	4a27      	ldr	r2, [pc, #156]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cbe:	f023 0301 	bic.w	r3, r3, #1
    3cc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3cc6:	9b01      	ldr	r3, [sp, #4]
    3cc8:	889b      	ldrh	r3, [r3, #4]
    3cca:	2b01      	cmp	r3, #1
    3ccc:	d13f      	bne.n	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cce:	9b01      	ldr	r3, [sp, #4]
    3cd0:	79db      	ldrb	r3, [r3, #7]
    3cd2:	4a22      	ldr	r2, [pc, #136]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd4:	f003 0303 	and.w	r3, r3, #3
    3cd8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cdc:	4b1f      	ldr	r3, [pc, #124]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cde:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	799b      	ldrb	r3, [r3, #6]
    3ce6:	00db      	lsls	r3, r3, #3
    3ce8:	f003 0308 	and.w	r3, r3, #8
    3cec:	4313      	orrs	r3, r2
    3cee:	4a1b      	ldr	r2, [pc, #108]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf0:	f043 0301 	orr.w	r3, r3, #1
    3cf4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cf8:	aa03      	add	r2, sp, #12
    3cfa:	a904      	add	r1, sp, #16
    3cfc:	a805      	add	r0, sp, #20
    3cfe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d02:	f7fe ff17 	bl	2b34 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d06:	4b15      	ldr	r3, [pc, #84]	; (3d5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d08:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d0c:	0e1b      	lsrs	r3, r3, #24
    3d0e:	f003 0301 	and.w	r3, r3, #1
    3d12:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d14:	9a03      	ldr	r2, [sp, #12]
    3d16:	a904      	add	r1, sp, #16
    3d18:	ab05      	add	r3, sp, #20
    3d1a:	4618      	mov	r0, r3
    3d1c:	f7fe ff24 	bl	2b68 <Clock_Ip_TimeoutExpired>
    3d20:	4603      	mov	r3, r0
    3d22:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d26:	9b06      	ldr	r3, [sp, #24]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d106      	bne.n	3d3a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3d2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d30:	f083 0301 	eor.w	r3, r3, #1
    3d34:	b2db      	uxtb	r3, r3
    3d36:	2b00      	cmp	r3, #0
    3d38:	d1e5      	bne.n	3d06 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3d3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d005      	beq.n	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d42:	9b01      	ldr	r3, [sp, #4]
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	4619      	mov	r1, r3
    3d48:	2001      	movs	r0, #1
    3d4a:	f7fe fee3 	bl	2b14 <Clock_Ip_ReportClockErrors>
}
    3d4e:	bf00      	nop
    3d50:	b00b      	add	sp, #44	; 0x2c
    3d52:	f85d fb04 	ldr.w	pc, [sp], #4
    3d56:	bf00      	nop
    3d58:	0001007c 	.word	0x0001007c
    3d5c:	40064000 	.word	0x40064000

00003d60 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d60:	b500      	push	{lr}
    3d62:	b089      	sub	sp, #36	; 0x24
    3d64:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d66:	2300      	movs	r3, #0
    3d68:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3d6c:	9b01      	ldr	r3, [sp, #4]
    3d6e:	889b      	ldrh	r3, [r3, #4]
    3d70:	2b01      	cmp	r3, #1
    3d72:	d132      	bne.n	3dda <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3d74:	4b1b      	ldr	r3, [pc, #108]	; (3de4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d7a:	4a1a      	ldr	r2, [pc, #104]	; (3de4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d7c:	f043 0301 	orr.w	r3, r3, #1
    3d80:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d84:	aa03      	add	r2, sp, #12
    3d86:	a904      	add	r1, sp, #16
    3d88:	a805      	add	r0, sp, #20
    3d8a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d8e:	f7fe fed1 	bl	2b34 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d92:	4b14      	ldr	r3, [pc, #80]	; (3de4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d94:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d98:	0e1b      	lsrs	r3, r3, #24
    3d9a:	f003 0301 	and.w	r3, r3, #1
    3d9e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3da0:	9a03      	ldr	r2, [sp, #12]
    3da2:	a904      	add	r1, sp, #16
    3da4:	ab05      	add	r3, sp, #20
    3da6:	4618      	mov	r0, r3
    3da8:	f7fe fede 	bl	2b68 <Clock_Ip_TimeoutExpired>
    3dac:	4603      	mov	r3, r0
    3dae:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3db2:	9b06      	ldr	r3, [sp, #24]
    3db4:	2b00      	cmp	r3, #0
    3db6:	d106      	bne.n	3dc6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3db8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dbc:	f083 0301 	eor.w	r3, r3, #1
    3dc0:	b2db      	uxtb	r3, r3
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d1e5      	bne.n	3d92 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3dc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d005      	beq.n	3dda <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dce:	9b01      	ldr	r3, [sp, #4]
    3dd0:	681b      	ldr	r3, [r3, #0]
    3dd2:	4619      	mov	r1, r3
    3dd4:	2001      	movs	r0, #1
    3dd6:	f7fe fe9d 	bl	2b14 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3dda:	bf00      	nop
    3ddc:	b009      	add	sp, #36	; 0x24
    3dde:	f85d fb04 	ldr.w	pc, [sp], #4
    3de2:	bf00      	nop
    3de4:	40064000 	.word	0x40064000

00003de8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3de8:	b082      	sub	sp, #8
    3dea:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3dec:	4b05      	ldr	r3, [pc, #20]	; (3e04 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3dee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3df2:	4a04      	ldr	r2, [pc, #16]	; (3e04 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3df4:	f023 0301 	bic.w	r3, r3, #1
    3df8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3dfc:	bf00      	nop
    3dfe:	b002      	add	sp, #8
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop
    3e04:	40064000 	.word	0x40064000

00003e08 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3e08:	b082      	sub	sp, #8
    3e0a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e0c:	bf00      	nop
    3e0e:	b002      	add	sp, #8
    3e10:	4770      	bx	lr

00003e12 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e12:	b082      	sub	sp, #8
    3e14:	9001      	str	r0, [sp, #4]
    3e16:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e18:	bf00      	nop
    3e1a:	b002      	add	sp, #8
    3e1c:	4770      	bx	lr

00003e1e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3e1e:	b082      	sub	sp, #8
    3e20:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3e22:	bf00      	nop
    3e24:	b002      	add	sp, #8
    3e26:	4770      	bx	lr

00003e28 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3e28:	b082      	sub	sp, #8
    3e2a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e2c:	bf00      	nop
    3e2e:	b002      	add	sp, #8
    3e30:	4770      	bx	lr

00003e32 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3e32:	b082      	sub	sp, #8
    3e34:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3e36:	2302      	movs	r3, #2
}
    3e38:	4618      	mov	r0, r3
    3e3a:	b002      	add	sp, #8
    3e3c:	4770      	bx	lr

00003e3e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3e3e:	b082      	sub	sp, #8
    3e40:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3e42:	bf00      	nop
    3e44:	b002      	add	sp, #8
    3e46:	4770      	bx	lr

00003e48 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e48:	b500      	push	{lr}
    3e4a:	b083      	sub	sp, #12
    3e4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e4e:	9b01      	ldr	r3, [sp, #4]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d002      	beq.n	3e5a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3e54:	9801      	ldr	r0, [sp, #4]
    3e56:	f000 f870 	bl	3f3a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e5a:	bf00      	nop
    3e5c:	b003      	add	sp, #12
    3e5e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e62 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e62:	b500      	push	{lr}
    3e64:	b083      	sub	sp, #12
    3e66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e68:	9b01      	ldr	r3, [sp, #4]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d002      	beq.n	3e74 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3e6e:	9801      	ldr	r0, [sp, #4]
    3e70:	f000 f89a 	bl	3fa8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e74:	bf00      	nop
    3e76:	b003      	add	sp, #12
    3e78:	f85d fb04 	ldr.w	pc, [sp], #4

00003e7c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3e7c:	b500      	push	{lr}
    3e7e:	b089      	sub	sp, #36	; 0x24
    3e80:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3e82:	2301      	movs	r3, #1
    3e84:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3e86:	2300      	movs	r3, #0
    3e88:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3e8c:	4b1e      	ldr	r3, [pc, #120]	; (3f08 <Clock_Ip_CompleteSpll+0x8c>)
    3e8e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e92:	f003 0301 	and.w	r3, r3, #1
    3e96:	2b00      	cmp	r3, #0
    3e98:	d02f      	beq.n	3efa <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e9a:	aa02      	add	r2, sp, #8
    3e9c:	a903      	add	r1, sp, #12
    3e9e:	a804      	add	r0, sp, #16
    3ea0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ea4:	f7fe fe46 	bl	2b34 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3ea8:	4b17      	ldr	r3, [pc, #92]	; (3f08 <Clock_Ip_CompleteSpll+0x8c>)
    3eaa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3eae:	0e1b      	lsrs	r3, r3, #24
    3eb0:	f003 0301 	and.w	r3, r3, #1
    3eb4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3eb6:	9a02      	ldr	r2, [sp, #8]
    3eb8:	a903      	add	r1, sp, #12
    3eba:	ab04      	add	r3, sp, #16
    3ebc:	4618      	mov	r0, r3
    3ebe:	f7fe fe53 	bl	2b68 <Clock_Ip_TimeoutExpired>
    3ec2:	4603      	mov	r3, r0
    3ec4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3ec8:	9b05      	ldr	r3, [sp, #20]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d106      	bne.n	3edc <Clock_Ip_CompleteSpll+0x60>
    3ece:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ed2:	f083 0301 	eor.w	r3, r3, #1
    3ed6:	b2db      	uxtb	r3, r3
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d1e5      	bne.n	3ea8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3edc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ee0:	f083 0301 	eor.w	r3, r3, #1
    3ee4:	b2db      	uxtb	r3, r3
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d002      	beq.n	3ef0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3eea:	2302      	movs	r3, #2
    3eec:	9307      	str	r3, [sp, #28]
    3eee:	e006      	b.n	3efe <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3ef0:	9901      	ldr	r1, [sp, #4]
    3ef2:	2001      	movs	r0, #1
    3ef4:	f7fe fe0e 	bl	2b14 <Clock_Ip_ReportClockErrors>
    3ef8:	e001      	b.n	3efe <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3efa:	2300      	movs	r3, #0
    3efc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3efe:	9b07      	ldr	r3, [sp, #28]
}
    3f00:	4618      	mov	r0, r3
    3f02:	b009      	add	sp, #36	; 0x24
    3f04:	f85d fb04 	ldr.w	pc, [sp], #4
    3f08:	40064000 	.word	0x40064000

00003f0c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3f0c:	b500      	push	{lr}
    3f0e:	b083      	sub	sp, #12
    3f10:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f12:	9801      	ldr	r0, [sp, #4]
    3f14:	f000 f886 	bl	4024 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f18:	bf00      	nop
    3f1a:	b003      	add	sp, #12
    3f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f20 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3f20:	b500      	push	{lr}
    3f22:	b083      	sub	sp, #12
    3f24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f26:	9b01      	ldr	r3, [sp, #4]
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d002      	beq.n	3f32 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3f2c:	9801      	ldr	r0, [sp, #4]
    3f2e:	f000 f891 	bl	4054 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f32:	bf00      	nop
    3f34:	b003      	add	sp, #12
    3f36:	f85d fb04 	ldr.w	pc, [sp], #4

00003f3a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f3a:	b082      	sub	sp, #8
    3f3c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f3e:	4b19      	ldr	r3, [pc, #100]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f40:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f44:	4a17      	ldr	r2, [pc, #92]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f4a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3f4e:	4b15      	ldr	r3, [pc, #84]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f50:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f54:	4a13      	ldr	r2, [pc, #76]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3f5a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3f5e:	4b11      	ldr	r3, [pc, #68]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f60:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f64:	4a0f      	ldr	r2, [pc, #60]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3f6a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3f6e:	4b0d      	ldr	r3, [pc, #52]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f70:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f74:	4a0b      	ldr	r2, [pc, #44]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f76:	f023 0301 	bic.w	r3, r3, #1
    3f7a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3f7e:	4b09      	ldr	r3, [pc, #36]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f80:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f84:	4a07      	ldr	r2, [pc, #28]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3f8a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3f8e:	4b05      	ldr	r3, [pc, #20]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f90:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f94:	4a03      	ldr	r2, [pc, #12]	; (3fa4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3f9a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3f9e:	bf00      	nop
    3fa0:	b002      	add	sp, #8
    3fa2:	4770      	bx	lr
    3fa4:	40064000 	.word	0x40064000

00003fa8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fa8:	b082      	sub	sp, #8
    3faa:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3fac:	9b01      	ldr	r3, [sp, #4]
    3fae:	889b      	ldrh	r3, [r3, #4]
    3fb0:	2b01      	cmp	r3, #1
    3fb2:	d12f      	bne.n	4014 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fb4:	4b1a      	ldr	r3, [pc, #104]	; (4020 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fb6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3fba:	9b01      	ldr	r3, [sp, #4]
    3fbc:	7b5b      	ldrb	r3, [r3, #13]
    3fbe:	3b01      	subs	r3, #1
    3fc0:	021b      	lsls	r3, r3, #8
    3fc2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3fc6:	9b01      	ldr	r3, [sp, #4]
    3fc8:	7d1b      	ldrb	r3, [r3, #20]
    3fca:	3b10      	subs	r3, #16
    3fcc:	041b      	lsls	r3, r3, #16
    3fce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fd2:	430b      	orrs	r3, r1
    3fd4:	4912      	ldr	r1, [pc, #72]	; (4020 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fd6:	4313      	orrs	r3, r2
    3fd8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3fdc:	9b01      	ldr	r3, [sp, #4]
    3fde:	7fdb      	ldrb	r3, [r3, #31]
    3fe0:	2b02      	cmp	r3, #2
    3fe2:	d011      	beq.n	4008 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3fe4:	2b02      	cmp	r3, #2
    3fe6:	dc17      	bgt.n	4018 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d002      	beq.n	3ff2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3fec:	2b01      	cmp	r3, #1
    3fee:	d005      	beq.n	3ffc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3ff0:	e012      	b.n	4018 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3ff2:	4b0b      	ldr	r3, [pc, #44]	; (4020 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3ff4:	2200      	movs	r2, #0
    3ff6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3ffa:	e00e      	b.n	401a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3ffc:	4b08      	ldr	r3, [pc, #32]	; (4020 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4002:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4006:	e008      	b.n	401a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4008:	4b05      	ldr	r3, [pc, #20]	; (4020 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    400a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    400e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4012:	e002      	b.n	401a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4014:	bf00      	nop
    4016:	e000      	b.n	401a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4018:	bf00      	nop
}
    401a:	bf00      	nop
    401c:	b002      	add	sp, #8
    401e:	4770      	bx	lr
    4020:	40064000 	.word	0x40064000

00004024 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4024:	b082      	sub	sp, #8
    4026:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4028:	4b09      	ldr	r3, [pc, #36]	; (4050 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    402a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    402e:	4a08      	ldr	r2, [pc, #32]	; (4050 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4030:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4034:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4038:	4b05      	ldr	r3, [pc, #20]	; (4050 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    403a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    403e:	4a04      	ldr	r2, [pc, #16]	; (4050 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4040:	f023 0301 	bic.w	r3, r3, #1
    4044:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4048:	bf00      	nop
    404a:	b002      	add	sp, #8
    404c:	4770      	bx	lr
    404e:	bf00      	nop
    4050:	40064000 	.word	0x40064000

00004054 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4054:	b082      	sub	sp, #8
    4056:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4058:	9b01      	ldr	r3, [sp, #4]
    405a:	889b      	ldrh	r3, [r3, #4]
    405c:	2b01      	cmp	r3, #1
    405e:	d107      	bne.n	4070 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4060:	4b05      	ldr	r3, [pc, #20]	; (4078 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4062:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4066:	4a04      	ldr	r2, [pc, #16]	; (4078 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4068:	f043 0301 	orr.w	r3, r3, #1
    406c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4070:	bf00      	nop
    4072:	b002      	add	sp, #8
    4074:	4770      	bx	lr
    4076:	bf00      	nop
    4078:	40064000 	.word	0x40064000

0000407c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    407c:	b082      	sub	sp, #8
    407e:	9001      	str	r0, [sp, #4]
    4080:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4082:	bf00      	nop
    4084:	b002      	add	sp, #8
    4086:	4770      	bx	lr

00004088 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4088:	b082      	sub	sp, #8
    408a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    408c:	bf00      	nop
    408e:	b002      	add	sp, #8
    4090:	4770      	bx	lr

00004092 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4092:	b500      	push	{lr}
    4094:	b083      	sub	sp, #12
    4096:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4098:	9b01      	ldr	r3, [sp, #4]
    409a:	2b00      	cmp	r3, #0
    409c:	d002      	beq.n	40a4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    409e:	9801      	ldr	r0, [sp, #4]
    40a0:	f000 f8ee 	bl	4280 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40a4:	bf00      	nop
    40a6:	b003      	add	sp, #12
    40a8:	f85d fb04 	ldr.w	pc, [sp], #4

000040ac <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40ac:	b500      	push	{lr}
    40ae:	b083      	sub	sp, #12
    40b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40b2:	9b01      	ldr	r3, [sp, #4]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d002      	beq.n	40be <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    40b8:	9801      	ldr	r0, [sp, #4]
    40ba:	f000 f8ff 	bl	42bc <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40be:	bf00      	nop
    40c0:	b003      	add	sp, #12
    40c2:	f85d fb04 	ldr.w	pc, [sp], #4

000040c6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    40c6:	b500      	push	{lr}
    40c8:	b083      	sub	sp, #12
    40ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40cc:	9b01      	ldr	r3, [sp, #4]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d002      	beq.n	40d8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    40d2:	9801      	ldr	r0, [sp, #4]
    40d4:	f000 f912 	bl	42fc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40d8:	bf00      	nop
    40da:	b003      	add	sp, #12
    40dc:	f85d fb04 	ldr.w	pc, [sp], #4

000040e0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40e0:	b500      	push	{lr}
    40e2:	b083      	sub	sp, #12
    40e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40e6:	9b01      	ldr	r3, [sp, #4]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d002      	beq.n	40f2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    40ec:	9801      	ldr	r0, [sp, #4]
    40ee:	f000 f925 	bl	433c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40f2:	bf00      	nop
    40f4:	b003      	add	sp, #12
    40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000040fa <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40fa:	b500      	push	{lr}
    40fc:	b083      	sub	sp, #12
    40fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4100:	9b01      	ldr	r3, [sp, #4]
    4102:	2b00      	cmp	r3, #0
    4104:	d002      	beq.n	410c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4106:	9801      	ldr	r0, [sp, #4]
    4108:	f000 f936 	bl	4378 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    410c:	bf00      	nop
    410e:	b003      	add	sp, #12
    4110:	f85d fb04 	ldr.w	pc, [sp], #4

00004114 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4114:	b500      	push	{lr}
    4116:	b083      	sub	sp, #12
    4118:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    411a:	9b01      	ldr	r3, [sp, #4]
    411c:	2b00      	cmp	r3, #0
    411e:	d002      	beq.n	4126 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4120:	9801      	ldr	r0, [sp, #4]
    4122:	f000 f949 	bl	43b8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4126:	bf00      	nop
    4128:	b003      	add	sp, #12
    412a:	f85d fb04 	ldr.w	pc, [sp], #4

0000412e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    412e:	b500      	push	{lr}
    4130:	b083      	sub	sp, #12
    4132:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4134:	9b01      	ldr	r3, [sp, #4]
    4136:	2b00      	cmp	r3, #0
    4138:	d002      	beq.n	4140 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    413a:	9801      	ldr	r0, [sp, #4]
    413c:	f000 f958 	bl	43f0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4140:	bf00      	nop
    4142:	b003      	add	sp, #12
    4144:	f85d fb04 	ldr.w	pc, [sp], #4

00004148 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4148:	b500      	push	{lr}
    414a:	b083      	sub	sp, #12
    414c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    414e:	9b01      	ldr	r3, [sp, #4]
    4150:	2b00      	cmp	r3, #0
    4152:	d002      	beq.n	415a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4154:	9801      	ldr	r0, [sp, #4]
    4156:	f000 f969 	bl	442c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    415a:	bf00      	nop
    415c:	b003      	add	sp, #12
    415e:	f85d fb04 	ldr.w	pc, [sp], #4

00004162 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4162:	b500      	push	{lr}
    4164:	b083      	sub	sp, #12
    4166:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	2b00      	cmp	r3, #0
    416c:	d002      	beq.n	4174 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    416e:	9801      	ldr	r0, [sp, #4]
    4170:	f000 f978 	bl	4464 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4174:	bf00      	nop
    4176:	b003      	add	sp, #12
    4178:	f85d fb04 	ldr.w	pc, [sp], #4

0000417c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    417c:	b500      	push	{lr}
    417e:	b083      	sub	sp, #12
    4180:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4182:	9b01      	ldr	r3, [sp, #4]
    4184:	2b00      	cmp	r3, #0
    4186:	d002      	beq.n	418e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4188:	9801      	ldr	r0, [sp, #4]
    418a:	f000 f989 	bl	44a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    418e:	bf00      	nop
    4190:	b003      	add	sp, #12
    4192:	f85d fb04 	ldr.w	pc, [sp], #4

00004196 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4196:	b500      	push	{lr}
    4198:	b083      	sub	sp, #12
    419a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    419c:	9b01      	ldr	r3, [sp, #4]
    419e:	2b00      	cmp	r3, #0
    41a0:	d002      	beq.n	41a8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    41a2:	9801      	ldr	r0, [sp, #4]
    41a4:	f000 f998 	bl	44d8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a8:	bf00      	nop
    41aa:	b003      	add	sp, #12
    41ac:	f85d fb04 	ldr.w	pc, [sp], #4

000041b0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b0:	b500      	push	{lr}
    41b2:	b083      	sub	sp, #12
    41b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b6:	9b01      	ldr	r3, [sp, #4]
    41b8:	2b00      	cmp	r3, #0
    41ba:	d002      	beq.n	41c2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    41bc:	9801      	ldr	r0, [sp, #4]
    41be:	f000 f9a9 	bl	4514 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c2:	bf00      	nop
    41c4:	b003      	add	sp, #12
    41c6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ca <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ca:	b500      	push	{lr}
    41cc:	b083      	sub	sp, #12
    41ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d0:	9b01      	ldr	r3, [sp, #4]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d002      	beq.n	41dc <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    41d6:	9801      	ldr	r0, [sp, #4]
    41d8:	f000 f9e6 	bl	45a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41dc:	bf00      	nop
    41de:	b003      	add	sp, #12
    41e0:	f85d fb04 	ldr.w	pc, [sp], #4

000041e4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41e4:	b500      	push	{lr}
    41e6:	b083      	sub	sp, #12
    41e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ea:	9b01      	ldr	r3, [sp, #4]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d002      	beq.n	41f6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    41f0:	9801      	ldr	r0, [sp, #4]
    41f2:	f000 fa25 	bl	4640 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f6:	bf00      	nop
    41f8:	b003      	add	sp, #12
    41fa:	f85d fb04 	ldr.w	pc, [sp], #4

000041fe <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41fe:	b500      	push	{lr}
    4200:	b083      	sub	sp, #12
    4202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4204:	9b01      	ldr	r3, [sp, #4]
    4206:	2b00      	cmp	r3, #0
    4208:	d002      	beq.n	4210 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    420a:	9801      	ldr	r0, [sp, #4]
    420c:	f000 fa2a 	bl	4664 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4210:	bf00      	nop
    4212:	b003      	add	sp, #12
    4214:	f85d fb04 	ldr.w	pc, [sp], #4

00004218 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4218:	b500      	push	{lr}
    421a:	b083      	sub	sp, #12
    421c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	2b00      	cmp	r3, #0
    4222:	d002      	beq.n	422a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4224:	9801      	ldr	r0, [sp, #4]
    4226:	f000 fa3b 	bl	46a0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    422a:	bf00      	nop
    422c:	b003      	add	sp, #12
    422e:	f85d fb04 	ldr.w	pc, [sp], #4

00004232 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4232:	b500      	push	{lr}
    4234:	b083      	sub	sp, #12
    4236:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4238:	9b01      	ldr	r3, [sp, #4]
    423a:	2b00      	cmp	r3, #0
    423c:	d002      	beq.n	4244 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    423e:	9801      	ldr	r0, [sp, #4]
    4240:	f000 fa56 	bl	46f0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4244:	bf00      	nop
    4246:	b003      	add	sp, #12
    4248:	f85d fb04 	ldr.w	pc, [sp], #4

0000424c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    424c:	b500      	push	{lr}
    424e:	b083      	sub	sp, #12
    4250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	2b00      	cmp	r3, #0
    4256:	d002      	beq.n	425e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4258:	9801      	ldr	r0, [sp, #4]
    425a:	f000 fa79 	bl	4750 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    425e:	bf00      	nop
    4260:	b003      	add	sp, #12
    4262:	f85d fb04 	ldr.w	pc, [sp], #4

00004266 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4266:	b500      	push	{lr}
    4268:	b083      	sub	sp, #12
    426a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    426c:	9b01      	ldr	r3, [sp, #4]
    426e:	2b00      	cmp	r3, #0
    4270:	d002      	beq.n	4278 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4272:	9801      	ldr	r0, [sp, #4]
    4274:	f000 fa8a 	bl	478c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4278:	bf00      	nop
    427a:	b003      	add	sp, #12
    427c:	f85d fb04 	ldr.w	pc, [sp], #4

00004280 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4280:	b084      	sub	sp, #16
    4282:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4284:	4b0b      	ldr	r3, [pc, #44]	; (42b4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4286:	795b      	ldrb	r3, [r3, #5]
    4288:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    428a:	4b0b      	ldr	r3, [pc, #44]	; (42b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    428c:	695b      	ldr	r3, [r3, #20]
    428e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4290:	9b02      	ldr	r3, [sp, #8]
    4292:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4296:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4298:	9b03      	ldr	r3, [sp, #12]
    429a:	061b      	lsls	r3, r3, #24
    429c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42a0:	9a02      	ldr	r2, [sp, #8]
    42a2:	4313      	orrs	r3, r2
    42a4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42a6:	4a04      	ldr	r2, [pc, #16]	; (42b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    42a8:	9b02      	ldr	r3, [sp, #8]
    42aa:	6153      	str	r3, [r2, #20]
}
    42ac:	bf00      	nop
    42ae:	b004      	add	sp, #16
    42b0:	4770      	bx	lr
    42b2:	bf00      	nop
    42b4:	000103e4 	.word	0x000103e4
    42b8:	40064000 	.word	0x40064000

000042bc <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42bc:	b084      	sub	sp, #16
    42be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	685b      	ldr	r3, [r3, #4]
    42c4:	4a0b      	ldr	r2, [pc, #44]	; (42f4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    42c6:	5cd3      	ldrb	r3, [r2, r3]
    42c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    42ca:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42cc:	695b      	ldr	r3, [r3, #20]
    42ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42d0:	9b02      	ldr	r3, [sp, #8]
    42d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42d8:	9b03      	ldr	r3, [sp, #12]
    42da:	061b      	lsls	r3, r3, #24
    42dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42e0:	9a02      	ldr	r2, [sp, #8]
    42e2:	4313      	orrs	r3, r2
    42e4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42e6:	4a04      	ldr	r2, [pc, #16]	; (42f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42e8:	9b02      	ldr	r3, [sp, #8]
    42ea:	6153      	str	r3, [r2, #20]
}
    42ec:	bf00      	nop
    42ee:	b004      	add	sp, #16
    42f0:	4770      	bx	lr
    42f2:	bf00      	nop
    42f4:	000103e4 	.word	0x000103e4
    42f8:	40064000 	.word	0x40064000

000042fc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42fc:	b084      	sub	sp, #16
    42fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4300:	9b01      	ldr	r3, [sp, #4]
    4302:	685b      	ldr	r3, [r3, #4]
    4304:	4a0b      	ldr	r2, [pc, #44]	; (4334 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4306:	5cd3      	ldrb	r3, [r2, r3]
    4308:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    430a:	4b0b      	ldr	r3, [pc, #44]	; (4338 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    430c:	699b      	ldr	r3, [r3, #24]
    430e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4310:	9b02      	ldr	r3, [sp, #8]
    4312:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4316:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4318:	9b03      	ldr	r3, [sp, #12]
    431a:	061b      	lsls	r3, r3, #24
    431c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4320:	9a02      	ldr	r2, [sp, #8]
    4322:	4313      	orrs	r3, r2
    4324:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4326:	4a04      	ldr	r2, [pc, #16]	; (4338 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4328:	9b02      	ldr	r3, [sp, #8]
    432a:	6193      	str	r3, [r2, #24]
}
    432c:	bf00      	nop
    432e:	b004      	add	sp, #16
    4330:	4770      	bx	lr
    4332:	bf00      	nop
    4334:	000103e4 	.word	0x000103e4
    4338:	40064000 	.word	0x40064000

0000433c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    433c:	b084      	sub	sp, #16
    433e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4340:	4b0b      	ldr	r3, [pc, #44]	; (4370 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4342:	795b      	ldrb	r3, [r3, #5]
    4344:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4346:	4b0b      	ldr	r3, [pc, #44]	; (4374 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4348:	69db      	ldr	r3, [r3, #28]
    434a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    434c:	9b02      	ldr	r3, [sp, #8]
    434e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4352:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4354:	9b03      	ldr	r3, [sp, #12]
    4356:	061b      	lsls	r3, r3, #24
    4358:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    435c:	9a02      	ldr	r2, [sp, #8]
    435e:	4313      	orrs	r3, r2
    4360:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4362:	4a04      	ldr	r2, [pc, #16]	; (4374 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4364:	9b02      	ldr	r3, [sp, #8]
    4366:	61d3      	str	r3, [r2, #28]
}
    4368:	bf00      	nop
    436a:	b004      	add	sp, #16
    436c:	4770      	bx	lr
    436e:	bf00      	nop
    4370:	000103e4 	.word	0x000103e4
    4374:	40064000 	.word	0x40064000

00004378 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4378:	b084      	sub	sp, #16
    437a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    437c:	9b01      	ldr	r3, [sp, #4]
    437e:	685b      	ldr	r3, [r3, #4]
    4380:	4a0b      	ldr	r2, [pc, #44]	; (43b0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4382:	5cd3      	ldrb	r3, [r2, r3]
    4384:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4386:	4b0b      	ldr	r3, [pc, #44]	; (43b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4388:	69db      	ldr	r3, [r3, #28]
    438a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    438c:	9b02      	ldr	r3, [sp, #8]
    438e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4392:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4394:	9b03      	ldr	r3, [sp, #12]
    4396:	061b      	lsls	r3, r3, #24
    4398:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    439c:	9a02      	ldr	r2, [sp, #8]
    439e:	4313      	orrs	r3, r2
    43a0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43a2:	4a04      	ldr	r2, [pc, #16]	; (43b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    43a4:	9b02      	ldr	r3, [sp, #8]
    43a6:	61d3      	str	r3, [r2, #28]
}
    43a8:	bf00      	nop
    43aa:	b004      	add	sp, #16
    43ac:	4770      	bx	lr
    43ae:	bf00      	nop
    43b0:	000103e4 	.word	0x000103e4
    43b4:	40064000 	.word	0x40064000

000043b8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43b8:	b084      	sub	sp, #16
    43ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43bc:	4b0a      	ldr	r3, [pc, #40]	; (43e8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    43be:	7b9b      	ldrb	r3, [r3, #14]
    43c0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43c2:	4b0a      	ldr	r3, [pc, #40]	; (43ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43c4:	691b      	ldr	r3, [r3, #16]
    43c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    43c8:	9b02      	ldr	r3, [sp, #8]
    43ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    43ce:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    43d0:	9b03      	ldr	r3, [sp, #12]
    43d2:	011b      	lsls	r3, r3, #4
    43d4:	9a02      	ldr	r2, [sp, #8]
    43d6:	4313      	orrs	r3, r2
    43d8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43da:	4a04      	ldr	r2, [pc, #16]	; (43ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43dc:	9b02      	ldr	r3, [sp, #8]
    43de:	6113      	str	r3, [r2, #16]
}
    43e0:	bf00      	nop
    43e2:	b004      	add	sp, #16
    43e4:	4770      	bx	lr
    43e6:	bf00      	nop
    43e8:	0001038c 	.word	0x0001038c
    43ec:	40048000 	.word	0x40048000

000043f0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43f0:	b084      	sub	sp, #16
    43f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43f4:	9b01      	ldr	r3, [sp, #4]
    43f6:	685b      	ldr	r3, [r3, #4]
    43f8:	4a0a      	ldr	r2, [pc, #40]	; (4424 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    43fa:	5cd3      	ldrb	r3, [r2, r3]
    43fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    43fe:	4b0a      	ldr	r3, [pc, #40]	; (4428 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4400:	691b      	ldr	r3, [r3, #16]
    4402:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4404:	9b02      	ldr	r3, [sp, #8]
    4406:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    440a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    440c:	9b03      	ldr	r3, [sp, #12]
    440e:	011b      	lsls	r3, r3, #4
    4410:	9a02      	ldr	r2, [sp, #8]
    4412:	4313      	orrs	r3, r2
    4414:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4416:	4a04      	ldr	r2, [pc, #16]	; (4428 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4418:	9b02      	ldr	r3, [sp, #8]
    441a:	6113      	str	r3, [r2, #16]
}
    441c:	bf00      	nop
    441e:	b004      	add	sp, #16
    4420:	4770      	bx	lr
    4422:	bf00      	nop
    4424:	0001038c 	.word	0x0001038c
    4428:	40048000 	.word	0x40048000

0000442c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    442c:	b084      	sub	sp, #16
    442e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4430:	4b0a      	ldr	r3, [pc, #40]	; (445c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4432:	785b      	ldrb	r3, [r3, #1]
    4434:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4436:	4b0a      	ldr	r3, [pc, #40]	; (4460 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4438:	691b      	ldr	r3, [r3, #16]
    443a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    443c:	9b02      	ldr	r3, [sp, #8]
    443e:	f023 030c 	bic.w	r3, r3, #12
    4442:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4444:	9b03      	ldr	r3, [sp, #12]
    4446:	009b      	lsls	r3, r3, #2
    4448:	9a02      	ldr	r2, [sp, #8]
    444a:	4313      	orrs	r3, r2
    444c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    444e:	4a04      	ldr	r2, [pc, #16]	; (4460 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4450:	9b02      	ldr	r3, [sp, #8]
    4452:	6113      	str	r3, [r2, #16]
}
    4454:	bf00      	nop
    4456:	b004      	add	sp, #16
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	00010444 	.word	0x00010444
    4460:	40048000 	.word	0x40048000

00004464 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4464:	b084      	sub	sp, #16
    4466:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4468:	9b01      	ldr	r3, [sp, #4]
    446a:	685b      	ldr	r3, [r3, #4]
    446c:	4a0a      	ldr	r2, [pc, #40]	; (4498 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    446e:	5cd3      	ldrb	r3, [r2, r3]
    4470:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4472:	4b0a      	ldr	r3, [pc, #40]	; (449c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4474:	691b      	ldr	r3, [r3, #16]
    4476:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4478:	9b02      	ldr	r3, [sp, #8]
    447a:	f023 030c 	bic.w	r3, r3, #12
    447e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4480:	9b03      	ldr	r3, [sp, #12]
    4482:	009b      	lsls	r3, r3, #2
    4484:	9a02      	ldr	r2, [sp, #8]
    4486:	4313      	orrs	r3, r2
    4488:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    448a:	4a04      	ldr	r2, [pc, #16]	; (449c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    448c:	9b02      	ldr	r3, [sp, #8]
    448e:	6113      	str	r3, [r2, #16]
}
    4490:	bf00      	nop
    4492:	b004      	add	sp, #16
    4494:	4770      	bx	lr
    4496:	bf00      	nop
    4498:	00010444 	.word	0x00010444
    449c:	40048000 	.word	0x40048000

000044a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44a0:	b084      	sub	sp, #16
    44a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44a4:	4b0a      	ldr	r3, [pc, #40]	; (44d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    44a6:	795b      	ldrb	r3, [r3, #5]
    44a8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    44aa:	4b0a      	ldr	r3, [pc, #40]	; (44d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44ac:	6a1b      	ldr	r3, [r3, #32]
    44ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44b0:	9b02      	ldr	r3, [sp, #8]
    44b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44b8:	9b03      	ldr	r3, [sp, #12]
    44ba:	061b      	lsls	r3, r3, #24
    44bc:	9a02      	ldr	r2, [sp, #8]
    44be:	4313      	orrs	r3, r2
    44c0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    44c2:	4a04      	ldr	r2, [pc, #16]	; (44d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44c4:	9b02      	ldr	r3, [sp, #8]
    44c6:	6213      	str	r3, [r2, #32]
}
    44c8:	bf00      	nop
    44ca:	b004      	add	sp, #16
    44cc:	4770      	bx	lr
    44ce:	bf00      	nop
    44d0:	000103e4 	.word	0x000103e4
    44d4:	40064000 	.word	0x40064000

000044d8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44d8:	b084      	sub	sp, #16
    44da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44dc:	9b01      	ldr	r3, [sp, #4]
    44de:	685b      	ldr	r3, [r3, #4]
    44e0:	4a0a      	ldr	r2, [pc, #40]	; (450c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    44e2:	5cd3      	ldrb	r3, [r2, r3]
    44e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    44e6:	4b0a      	ldr	r3, [pc, #40]	; (4510 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    44e8:	6a1b      	ldr	r3, [r3, #32]
    44ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44ec:	9b02      	ldr	r3, [sp, #8]
    44ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44f4:	9b03      	ldr	r3, [sp, #12]
    44f6:	061b      	lsls	r3, r3, #24
    44f8:	9a02      	ldr	r2, [sp, #8]
    44fa:	4313      	orrs	r3, r2
    44fc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    44fe:	4a04      	ldr	r2, [pc, #16]	; (4510 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4500:	9b02      	ldr	r3, [sp, #8]
    4502:	6213      	str	r3, [r2, #32]
}
    4504:	bf00      	nop
    4506:	b004      	add	sp, #16
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	000103e4 	.word	0x000103e4
    4510:	40064000 	.word	0x40064000

00004514 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b086      	sub	sp, #24
    4516:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4518:	4b20      	ldr	r3, [pc, #128]	; (459c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    451a:	795b      	ldrb	r3, [r3, #5]
    451c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    451e:	9b01      	ldr	r3, [sp, #4]
    4520:	681a      	ldr	r2, [r3, #0]
    4522:	491f      	ldr	r1, [pc, #124]	; (45a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4524:	4613      	mov	r3, r2
    4526:	00db      	lsls	r3, r3, #3
    4528:	4413      	add	r3, r2
    452a:	440b      	add	r3, r1
    452c:	781b      	ldrb	r3, [r3, #0]
    452e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4530:	4b1c      	ldr	r3, [pc, #112]	; (45a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4532:	68db      	ldr	r3, [r3, #12]
    4534:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4536:	9b03      	ldr	r3, [sp, #12]
    4538:	2b03      	cmp	r3, #3
    453a:	d813      	bhi.n	4564 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    453c:	9b03      	ldr	r3, [sp, #12]
    453e:	005b      	lsls	r3, r3, #1
    4540:	3318      	adds	r3, #24
    4542:	2203      	movs	r2, #3
    4544:	fa02 f303 	lsl.w	r3, r2, r3
    4548:	43db      	mvns	r3, r3
    454a:	9a05      	ldr	r2, [sp, #20]
    454c:	4013      	ands	r3, r2
    454e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4550:	9b03      	ldr	r3, [sp, #12]
    4552:	005b      	lsls	r3, r3, #1
    4554:	3318      	adds	r3, #24
    4556:	9a04      	ldr	r2, [sp, #16]
    4558:	fa02 f303 	lsl.w	r3, r2, r3
    455c:	9a05      	ldr	r2, [sp, #20]
    455e:	4313      	orrs	r3, r2
    4560:	9305      	str	r3, [sp, #20]
    4562:	e014      	b.n	458e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4564:	9b03      	ldr	r3, [sp, #12]
    4566:	3b04      	subs	r3, #4
    4568:	005b      	lsls	r3, r3, #1
    456a:	3310      	adds	r3, #16
    456c:	2203      	movs	r2, #3
    456e:	fa02 f303 	lsl.w	r3, r2, r3
    4572:	43db      	mvns	r3, r3
    4574:	9a05      	ldr	r2, [sp, #20]
    4576:	4013      	ands	r3, r2
    4578:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    457a:	9b03      	ldr	r3, [sp, #12]
    457c:	3b04      	subs	r3, #4
    457e:	005b      	lsls	r3, r3, #1
    4580:	3310      	adds	r3, #16
    4582:	9a04      	ldr	r2, [sp, #16]
    4584:	fa02 f303 	lsl.w	r3, r2, r3
    4588:	9a05      	ldr	r2, [sp, #20]
    458a:	4313      	orrs	r3, r2
    458c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    458e:	4a05      	ldr	r2, [pc, #20]	; (45a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4590:	9b05      	ldr	r3, [sp, #20]
    4592:	60d3      	str	r3, [r2, #12]
}
    4594:	bf00      	nop
    4596:	b006      	add	sp, #24
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	0001038c 	.word	0x0001038c
    45a0:	0001007c 	.word	0x0001007c
    45a4:	40048000 	.word	0x40048000

000045a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45a8:	b086      	sub	sp, #24
    45aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45ac:	9b01      	ldr	r3, [sp, #4]
    45ae:	685b      	ldr	r3, [r3, #4]
    45b0:	4a20      	ldr	r2, [pc, #128]	; (4634 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    45b2:	5cd3      	ldrb	r3, [r2, r3]
    45b4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45b6:	9b01      	ldr	r3, [sp, #4]
    45b8:	681a      	ldr	r2, [r3, #0]
    45ba:	491f      	ldr	r1, [pc, #124]	; (4638 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    45bc:	4613      	mov	r3, r2
    45be:	00db      	lsls	r3, r3, #3
    45c0:	4413      	add	r3, r2
    45c2:	440b      	add	r3, r1
    45c4:	781b      	ldrb	r3, [r3, #0]
    45c6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45c8:	4b1c      	ldr	r3, [pc, #112]	; (463c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    45ca:	68db      	ldr	r3, [r3, #12]
    45cc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45ce:	9b03      	ldr	r3, [sp, #12]
    45d0:	2b03      	cmp	r3, #3
    45d2:	d813      	bhi.n	45fc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45d4:	9b03      	ldr	r3, [sp, #12]
    45d6:	005b      	lsls	r3, r3, #1
    45d8:	3318      	adds	r3, #24
    45da:	2203      	movs	r2, #3
    45dc:	fa02 f303 	lsl.w	r3, r2, r3
    45e0:	43db      	mvns	r3, r3
    45e2:	9a05      	ldr	r2, [sp, #20]
    45e4:	4013      	ands	r3, r2
    45e6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45e8:	9b03      	ldr	r3, [sp, #12]
    45ea:	005b      	lsls	r3, r3, #1
    45ec:	3318      	adds	r3, #24
    45ee:	9a04      	ldr	r2, [sp, #16]
    45f0:	fa02 f303 	lsl.w	r3, r2, r3
    45f4:	9a05      	ldr	r2, [sp, #20]
    45f6:	4313      	orrs	r3, r2
    45f8:	9305      	str	r3, [sp, #20]
    45fa:	e014      	b.n	4626 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    45fc:	9b03      	ldr	r3, [sp, #12]
    45fe:	3b04      	subs	r3, #4
    4600:	005b      	lsls	r3, r3, #1
    4602:	3310      	adds	r3, #16
    4604:	2203      	movs	r2, #3
    4606:	fa02 f303 	lsl.w	r3, r2, r3
    460a:	43db      	mvns	r3, r3
    460c:	9a05      	ldr	r2, [sp, #20]
    460e:	4013      	ands	r3, r2
    4610:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4612:	9b03      	ldr	r3, [sp, #12]
    4614:	3b04      	subs	r3, #4
    4616:	005b      	lsls	r3, r3, #1
    4618:	3310      	adds	r3, #16
    461a:	9a04      	ldr	r2, [sp, #16]
    461c:	fa02 f303 	lsl.w	r3, r2, r3
    4620:	9a05      	ldr	r2, [sp, #20]
    4622:	4313      	orrs	r3, r2
    4624:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4626:	4a05      	ldr	r2, [pc, #20]	; (463c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4628:	9b05      	ldr	r3, [sp, #20]
    462a:	60d3      	str	r3, [r2, #12]
}
    462c:	bf00      	nop
    462e:	b006      	add	sp, #24
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	0001038c 	.word	0x0001038c
    4638:	0001007c 	.word	0x0001007c
    463c:	40048000 	.word	0x40048000

00004640 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4640:	b084      	sub	sp, #16
    4642:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4644:	4b06      	ldr	r3, [pc, #24]	; (4660 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4646:	685b      	ldr	r3, [r3, #4]
    4648:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    464a:	9b03      	ldr	r3, [sp, #12]
    464c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4650:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4652:	4a03      	ldr	r2, [pc, #12]	; (4660 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4654:	9b03      	ldr	r3, [sp, #12]
    4656:	6053      	str	r3, [r2, #4]
}
    4658:	bf00      	nop
    465a:	b004      	add	sp, #16
    465c:	4770      	bx	lr
    465e:	bf00      	nop
    4660:	40048000 	.word	0x40048000

00004664 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4664:	b084      	sub	sp, #16
    4666:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4668:	9b01      	ldr	r3, [sp, #4]
    466a:	685b      	ldr	r3, [r3, #4]
    466c:	4a0a      	ldr	r2, [pc, #40]	; (4698 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    466e:	5cd3      	ldrb	r3, [r2, r3]
    4670:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4672:	4b0a      	ldr	r3, [pc, #40]	; (469c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4674:	685b      	ldr	r3, [r3, #4]
    4676:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4678:	9b02      	ldr	r3, [sp, #8]
    467a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    467e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4680:	9b03      	ldr	r3, [sp, #12]
    4682:	011b      	lsls	r3, r3, #4
    4684:	9a02      	ldr	r2, [sp, #8]
    4686:	4313      	orrs	r3, r2
    4688:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    468a:	4a04      	ldr	r2, [pc, #16]	; (469c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    468c:	9b02      	ldr	r3, [sp, #8]
    468e:	6053      	str	r3, [r2, #4]
}
    4690:	bf00      	nop
    4692:	b004      	add	sp, #16
    4694:	4770      	bx	lr
    4696:	bf00      	nop
    4698:	0001038c 	.word	0x0001038c
    469c:	40048000 	.word	0x40048000

000046a0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46a0:	b084      	sub	sp, #16
    46a2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    46a4:	9b01      	ldr	r3, [sp, #4]
    46a6:	681a      	ldr	r2, [r3, #0]
    46a8:	490f      	ldr	r1, [pc, #60]	; (46e8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    46aa:	4613      	mov	r3, r2
    46ac:	00db      	lsls	r3, r3, #3
    46ae:	4413      	add	r3, r2
    46b0:	440b      	add	r3, r1
    46b2:	3304      	adds	r3, #4
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    46b8:	4a0c      	ldr	r2, [pc, #48]	; (46ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46ba:	9b03      	ldr	r3, [sp, #12]
    46bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46c0:	490a      	ldr	r1, [pc, #40]	; (46ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    46c6:	9b03      	ldr	r3, [sp, #12]
    46c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    46cc:	4a07      	ldr	r2, [pc, #28]	; (46ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46ce:	9b03      	ldr	r3, [sp, #12]
    46d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46d4:	4905      	ldr	r1, [pc, #20]	; (46ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    46da:	9b03      	ldr	r3, [sp, #12]
    46dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46e0:	bf00      	nop
    46e2:	b004      	add	sp, #16
    46e4:	4770      	bx	lr
    46e6:	bf00      	nop
    46e8:	0001007c 	.word	0x0001007c
    46ec:	40065000 	.word	0x40065000

000046f0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46f0:	b086      	sub	sp, #24
    46f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    46f4:	9b01      	ldr	r3, [sp, #4]
    46f6:	681a      	ldr	r2, [r3, #0]
    46f8:	4912      	ldr	r1, [pc, #72]	; (4744 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    46fa:	4613      	mov	r3, r2
    46fc:	00db      	lsls	r3, r3, #3
    46fe:	4413      	add	r3, r2
    4700:	440b      	add	r3, r1
    4702:	3304      	adds	r3, #4
    4704:	781b      	ldrb	r3, [r3, #0]
    4706:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	685b      	ldr	r3, [r3, #4]
    470c:	4a0e      	ldr	r2, [pc, #56]	; (4748 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    470e:	5cd3      	ldrb	r3, [r2, r3]
    4710:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4712:	4a0e      	ldr	r2, [pc, #56]	; (474c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4714:	9b05      	ldr	r3, [sp, #20]
    4716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    471a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    471c:	9b03      	ldr	r3, [sp, #12]
    471e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4722:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4724:	9b04      	ldr	r3, [sp, #16]
    4726:	061b      	lsls	r3, r3, #24
    4728:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    472c:	9a03      	ldr	r2, [sp, #12]
    472e:	4313      	orrs	r3, r2
    4730:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4732:	4906      	ldr	r1, [pc, #24]	; (474c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4734:	9b05      	ldr	r3, [sp, #20]
    4736:	9a03      	ldr	r2, [sp, #12]
    4738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    473c:	bf00      	nop
    473e:	b006      	add	sp, #24
    4740:	4770      	bx	lr
    4742:	bf00      	nop
    4744:	0001007c 	.word	0x0001007c
    4748:	00010414 	.word	0x00010414
    474c:	40065000 	.word	0x40065000

00004750 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4750:	b084      	sub	sp, #16
    4752:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4754:	4b0b      	ldr	r3, [pc, #44]	; (4784 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4756:	7f1b      	ldrb	r3, [r3, #28]
    4758:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    475a:	4b0b      	ldr	r3, [pc, #44]	; (4788 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    475c:	685b      	ldr	r3, [r3, #4]
    475e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4760:	9b02      	ldr	r3, [sp, #8]
    4762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4766:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4768:	9b03      	ldr	r3, [sp, #12]
    476a:	031b      	lsls	r3, r3, #12
    476c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4770:	9a02      	ldr	r2, [sp, #8]
    4772:	4313      	orrs	r3, r2
    4774:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4776:	4a04      	ldr	r2, [pc, #16]	; (4788 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4778:	9b02      	ldr	r3, [sp, #8]
    477a:	6053      	str	r3, [r2, #4]
}
    477c:	bf00      	nop
    477e:	b004      	add	sp, #16
    4780:	4770      	bx	lr
    4782:	bf00      	nop
    4784:	0001038c 	.word	0x0001038c
    4788:	40048000 	.word	0x40048000

0000478c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    478c:	b084      	sub	sp, #16
    478e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4790:	9b01      	ldr	r3, [sp, #4]
    4792:	685b      	ldr	r3, [r3, #4]
    4794:	4a0b      	ldr	r2, [pc, #44]	; (47c4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4796:	5cd3      	ldrb	r3, [r2, r3]
    4798:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    479a:	4b0b      	ldr	r3, [pc, #44]	; (47c8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    479c:	685b      	ldr	r3, [r3, #4]
    479e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47a0:	9b02      	ldr	r3, [sp, #8]
    47a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47a6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47a8:	9b03      	ldr	r3, [sp, #12]
    47aa:	031b      	lsls	r3, r3, #12
    47ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47b0:	9a02      	ldr	r2, [sp, #8]
    47b2:	4313      	orrs	r3, r2
    47b4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47b6:	4a04      	ldr	r2, [pc, #16]	; (47c8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47b8:	9b02      	ldr	r3, [sp, #8]
    47ba:	6053      	str	r3, [r2, #4]
}
    47bc:	bf00      	nop
    47be:	b004      	add	sp, #16
    47c0:	4770      	bx	lr
    47c2:	bf00      	nop
    47c4:	0001038c 	.word	0x0001038c
    47c8:	40048000 	.word	0x40048000

000047cc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    47cc:	b500      	push	{lr}
    47ce:	b085      	sub	sp, #20
    47d0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    47d2:	2300      	movs	r3, #0
    47d4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    47d8:	9b01      	ldr	r3, [sp, #4]
    47da:	2b00      	cmp	r3, #0
    47dc:	d037      	beq.n	484e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    47de:	2300      	movs	r3, #0
    47e0:	9303      	str	r3, [sp, #12]
    47e2:	e02b      	b.n	483c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    47e4:	4b29      	ldr	r3, [pc, #164]	; (488c <DisableSafeClock+0xc0>)
    47e6:	6819      	ldr	r1, [r3, #0]
    47e8:	9a03      	ldr	r2, [sp, #12]
    47ea:	4613      	mov	r3, r2
    47ec:	005b      	lsls	r3, r3, #1
    47ee:	4413      	add	r3, r2
    47f0:	009b      	lsls	r3, r3, #2
    47f2:	440b      	add	r3, r1
    47f4:	3314      	adds	r3, #20
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b05      	cmp	r3, #5
    47fa:	d11c      	bne.n	4836 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    47fc:	2301      	movs	r3, #1
    47fe:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4802:	4b22      	ldr	r3, [pc, #136]	; (488c <DisableSafeClock+0xc0>)
    4804:	6819      	ldr	r1, [r3, #0]
    4806:	9a03      	ldr	r2, [sp, #12]
    4808:	4613      	mov	r3, r2
    480a:	005b      	lsls	r3, r3, #1
    480c:	4413      	add	r3, r2
    480e:	009b      	lsls	r3, r3, #2
    4810:	440b      	add	r3, r1
    4812:	3318      	adds	r3, #24
    4814:	881b      	ldrh	r3, [r3, #0]
    4816:	2b00      	cmp	r3, #0
    4818:	d118      	bne.n	484c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    481a:	4b1d      	ldr	r3, [pc, #116]	; (4890 <DisableSafeClock+0xc4>)
    481c:	791b      	ldrb	r3, [r3, #4]
    481e:	4619      	mov	r1, r3
    4820:	4a1c      	ldr	r2, [pc, #112]	; (4894 <DisableSafeClock+0xc8>)
    4822:	460b      	mov	r3, r1
    4824:	005b      	lsls	r3, r3, #1
    4826:	440b      	add	r3, r1
    4828:	009b      	lsls	r3, r3, #2
    482a:	4413      	add	r3, r2
    482c:	3308      	adds	r3, #8
    482e:	681b      	ldr	r3, [r3, #0]
    4830:	2005      	movs	r0, #5
    4832:	4798      	blx	r3
                }
                break;
    4834:	e00a      	b.n	484c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4836:	9b03      	ldr	r3, [sp, #12]
    4838:	3301      	adds	r3, #1
    483a:	9303      	str	r3, [sp, #12]
    483c:	4b13      	ldr	r3, [pc, #76]	; (488c <DisableSafeClock+0xc0>)
    483e:	681b      	ldr	r3, [r3, #0]
    4840:	7a1b      	ldrb	r3, [r3, #8]
    4842:	461a      	mov	r2, r3
    4844:	9b03      	ldr	r3, [sp, #12]
    4846:	4293      	cmp	r3, r2
    4848:	d3cc      	bcc.n	47e4 <DisableSafeClock+0x18>
    484a:	e000      	b.n	484e <DisableSafeClock+0x82>
                break;
    484c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    484e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4852:	f083 0301 	eor.w	r3, r3, #1
    4856:	b2db      	uxtb	r3, r3
    4858:	2b00      	cmp	r3, #0
    485a:	d013      	beq.n	4884 <DisableSafeClock+0xb8>
    485c:	4b0e      	ldr	r3, [pc, #56]	; (4898 <DisableSafeClock+0xcc>)
    485e:	781b      	ldrb	r3, [r3, #0]
    4860:	f083 0301 	eor.w	r3, r3, #1
    4864:	b2db      	uxtb	r3, r3
    4866:	2b00      	cmp	r3, #0
    4868:	d00c      	beq.n	4884 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    486a:	4b09      	ldr	r3, [pc, #36]	; (4890 <DisableSafeClock+0xc4>)
    486c:	791b      	ldrb	r3, [r3, #4]
    486e:	4619      	mov	r1, r3
    4870:	4a08      	ldr	r2, [pc, #32]	; (4894 <DisableSafeClock+0xc8>)
    4872:	460b      	mov	r3, r1
    4874:	005b      	lsls	r3, r3, #1
    4876:	440b      	add	r3, r1
    4878:	009b      	lsls	r3, r3, #2
    487a:	4413      	add	r3, r2
    487c:	3308      	adds	r3, #8
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	2005      	movs	r0, #5
    4882:	4798      	blx	r3
    }
}
    4884:	bf00      	nop
    4886:	b005      	add	sp, #20
    4888:	f85d fb04 	ldr.w	pc, [sp], #4
    488c:	1fff8b98 	.word	0x1fff8b98
    4890:	0001000c 	.word	0x0001000c
    4894:	0001063c 	.word	0x0001063c
    4898:	1fff8b18 	.word	0x1fff8b18

0000489c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    489c:	4b06      	ldr	r3, [pc, #24]	; (48b8 <SetFircToResetValue_TrustedCall+0x1c>)
    489e:	2200      	movs	r2, #0
    48a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    48a4:	4b04      	ldr	r3, [pc, #16]	; (48b8 <SetFircToResetValue_TrustedCall+0x1c>)
    48a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48aa:	4a03      	ldr	r2, [pc, #12]	; (48b8 <SetFircToResetValue_TrustedCall+0x1c>)
    48ac:	f043 0301 	orr.w	r3, r3, #1
    48b0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    48b4:	bf00      	nop
    48b6:	4770      	bx	lr
    48b8:	40064000 	.word	0x40064000

000048bc <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    48bc:	b084      	sub	sp, #16
    48be:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    48c0:	2303      	movs	r3, #3
    48c2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    48c4:	2300      	movs	r3, #0
    48c6:	9302      	str	r3, [sp, #8]
    48c8:	e028      	b.n	491c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    48ca:	9b01      	ldr	r3, [sp, #4]
    48cc:	9a02      	ldr	r2, [sp, #8]
    48ce:	320d      	adds	r2, #13
    48d0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    48d4:	2b28      	cmp	r3, #40	; 0x28
    48d6:	d10b      	bne.n	48f0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    48d8:	9a01      	ldr	r2, [sp, #4]
    48da:	9b02      	ldr	r3, [sp, #8]
    48dc:	330d      	adds	r3, #13
    48de:	00db      	lsls	r3, r3, #3
    48e0:	4413      	add	r3, r2
    48e2:	685b      	ldr	r3, [r3, #4]
    48e4:	4a2b      	ldr	r2, [pc, #172]	; (4994 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    48e6:	5cd3      	ldrb	r3, [r2, r3]
    48e8:	011b      	lsls	r3, r3, #4
    48ea:	9a03      	ldr	r2, [sp, #12]
    48ec:	4313      	orrs	r3, r2
    48ee:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    48f0:	9b01      	ldr	r3, [sp, #4]
    48f2:	9a02      	ldr	r2, [sp, #8]
    48f4:	320d      	adds	r2, #13
    48f6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    48fa:	2b29      	cmp	r3, #41	; 0x29
    48fc:	d10b      	bne.n	4916 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    48fe:	9a01      	ldr	r2, [sp, #4]
    4900:	9b02      	ldr	r3, [sp, #8]
    4902:	330d      	adds	r3, #13
    4904:	00db      	lsls	r3, r3, #3
    4906:	4413      	add	r3, r2
    4908:	685b      	ldr	r3, [r3, #4]
    490a:	4a23      	ldr	r2, [pc, #140]	; (4998 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    490c:	5cd3      	ldrb	r3, [r2, r3]
    490e:	009b      	lsls	r3, r3, #2
    4910:	9a03      	ldr	r2, [sp, #12]
    4912:	4313      	orrs	r3, r2
    4914:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4916:	9b02      	ldr	r3, [sp, #8]
    4918:	3301      	adds	r3, #1
    491a:	9302      	str	r3, [sp, #8]
    491c:	9b01      	ldr	r3, [sp, #4]
    491e:	7adb      	ldrb	r3, [r3, #11]
    4920:	461a      	mov	r2, r3
    4922:	9b02      	ldr	r3, [sp, #8]
    4924:	4293      	cmp	r3, r2
    4926:	d3d0      	bcc.n	48ca <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4928:	2300      	movs	r3, #0
    492a:	9302      	str	r3, [sp, #8]
    492c:	e026      	b.n	497c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    492e:	9a01      	ldr	r2, [sp, #4]
    4930:	9b02      	ldr	r3, [sp, #8]
    4932:	334e      	adds	r3, #78	; 0x4e
    4934:	00db      	lsls	r3, r3, #3
    4936:	4413      	add	r3, r2
    4938:	685b      	ldr	r3, [r3, #4]
    493a:	2b12      	cmp	r3, #18
    493c:	d109      	bne.n	4952 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    493e:	9a01      	ldr	r2, [sp, #4]
    4940:	9b02      	ldr	r3, [sp, #8]
    4942:	334e      	adds	r3, #78	; 0x4e
    4944:	00db      	lsls	r3, r3, #3
    4946:	4413      	add	r3, r2
    4948:	891b      	ldrh	r3, [r3, #8]
    494a:	005b      	lsls	r3, r3, #1
    494c:	9a03      	ldr	r2, [sp, #12]
    494e:	4313      	orrs	r3, r2
    4950:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4952:	9a01      	ldr	r2, [sp, #4]
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	334e      	adds	r3, #78	; 0x4e
    4958:	00db      	lsls	r3, r3, #3
    495a:	4413      	add	r3, r2
    495c:	685b      	ldr	r3, [r3, #4]
    495e:	2b13      	cmp	r3, #19
    4960:	d109      	bne.n	4976 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4962:	9a01      	ldr	r2, [sp, #4]
    4964:	9b02      	ldr	r3, [sp, #8]
    4966:	334e      	adds	r3, #78	; 0x4e
    4968:	00db      	lsls	r3, r3, #3
    496a:	4413      	add	r3, r2
    496c:	891b      	ldrh	r3, [r3, #8]
    496e:	461a      	mov	r2, r3
    4970:	9b03      	ldr	r3, [sp, #12]
    4972:	4313      	orrs	r3, r2
    4974:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4976:	9b02      	ldr	r3, [sp, #8]
    4978:	3301      	adds	r3, #1
    497a:	9302      	str	r3, [sp, #8]
    497c:	9b01      	ldr	r3, [sp, #4]
    497e:	7c1b      	ldrb	r3, [r3, #16]
    4980:	461a      	mov	r2, r3
    4982:	9b02      	ldr	r3, [sp, #8]
    4984:	4293      	cmp	r3, r2
    4986:	d3d2      	bcc.n	492e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4988:	4a04      	ldr	r2, [pc, #16]	; (499c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    498a:	9b03      	ldr	r3, [sp, #12]
    498c:	6113      	str	r3, [r2, #16]
}
    498e:	bf00      	nop
    4990:	b004      	add	sp, #16
    4992:	4770      	bx	lr
    4994:	0001038c 	.word	0x0001038c
    4998:	00010444 	.word	0x00010444
    499c:	40048000 	.word	0x40048000

000049a0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    49a0:	b500      	push	{lr}
    49a2:	b089      	sub	sp, #36	; 0x24
    49a4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    49a6:	2300      	movs	r3, #0
    49a8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    49ac:	4a21      	ldr	r2, [pc, #132]	; (4a34 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    49ae:	9b01      	ldr	r3, [sp, #4]
    49b0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    49b2:	4b21      	ldr	r3, [pc, #132]	; (4a38 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49b4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49b8:	f003 0301 	and.w	r3, r3, #1
    49bc:	2b00      	cmp	r3, #0
    49be:	d12e      	bne.n	4a1e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    49c0:	4b1e      	ldr	r3, [pc, #120]	; (4a3c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    49c2:	2200      	movs	r2, #0
    49c4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    49c6:	f7ff ff69 	bl	489c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49ca:	aa03      	add	r2, sp, #12
    49cc:	a904      	add	r1, sp, #16
    49ce:	a805      	add	r0, sp, #20
    49d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    49d4:	f7fe f8ae 	bl	2b34 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49d8:	4b17      	ldr	r3, [pc, #92]	; (4a38 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49de:	0e1b      	lsrs	r3, r3, #24
    49e0:	f003 0301 	and.w	r3, r3, #1
    49e4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49e6:	9a03      	ldr	r2, [sp, #12]
    49e8:	a904      	add	r1, sp, #16
    49ea:	ab05      	add	r3, sp, #20
    49ec:	4618      	mov	r0, r3
    49ee:	f7fe f8bb 	bl	2b68 <Clock_Ip_TimeoutExpired>
    49f2:	4603      	mov	r3, r0
    49f4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    49f8:	9b06      	ldr	r3, [sp, #24]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d106      	bne.n	4a0c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    49fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a02:	f083 0301 	eor.w	r3, r3, #1
    4a06:	b2db      	uxtb	r3, r3
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d1e5      	bne.n	49d8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4a0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d007      	beq.n	4a24 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a14:	2105      	movs	r1, #5
    4a16:	2001      	movs	r0, #1
    4a18:	f7fe f87c 	bl	2b14 <Clock_Ip_ReportClockErrors>
    4a1c:	e002      	b.n	4a24 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4a1e:	4b07      	ldr	r3, [pc, #28]	; (4a3c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a20:	2201      	movs	r2, #1
    4a22:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4a24:	9801      	ldr	r0, [sp, #4]
    4a26:	f7ff ff49 	bl	48bc <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4a2a:	bf00      	nop
    4a2c:	b009      	add	sp, #36	; 0x24
    4a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a32:	bf00      	nop
    4a34:	1fff8b98 	.word	0x1fff8b98
    4a38:	40064000 	.word	0x40064000
    4a3c:	1fff8b18 	.word	0x1fff8b18

00004a40 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4a40:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4a42:	2300      	movs	r3, #0
    4a44:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a46:	4b29      	ldr	r3, [pc, #164]	; (4aec <getFircConfig+0xac>)
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d024      	beq.n	4a98 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a4e:	2300      	movs	r3, #0
    4a50:	9301      	str	r3, [sp, #4]
    4a52:	e01a      	b.n	4a8a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4a54:	4b25      	ldr	r3, [pc, #148]	; (4aec <getFircConfig+0xac>)
    4a56:	6819      	ldr	r1, [r3, #0]
    4a58:	9a01      	ldr	r2, [sp, #4]
    4a5a:	4613      	mov	r3, r2
    4a5c:	005b      	lsls	r3, r3, #1
    4a5e:	4413      	add	r3, r2
    4a60:	009b      	lsls	r3, r3, #2
    4a62:	440b      	add	r3, r1
    4a64:	3314      	adds	r3, #20
    4a66:	681b      	ldr	r3, [r3, #0]
    4a68:	2b05      	cmp	r3, #5
    4a6a:	d10b      	bne.n	4a84 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4a6c:	4b1f      	ldr	r3, [pc, #124]	; (4aec <getFircConfig+0xac>)
    4a6e:	6819      	ldr	r1, [r3, #0]
    4a70:	9a01      	ldr	r2, [sp, #4]
    4a72:	4613      	mov	r3, r2
    4a74:	005b      	lsls	r3, r3, #1
    4a76:	4413      	add	r3, r2
    4a78:	009b      	lsls	r3, r3, #2
    4a7a:	3310      	adds	r3, #16
    4a7c:	440b      	add	r3, r1
    4a7e:	3304      	adds	r3, #4
    4a80:	9300      	str	r3, [sp, #0]
                break;
    4a82:	e009      	b.n	4a98 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a84:	9b01      	ldr	r3, [sp, #4]
    4a86:	3301      	adds	r3, #1
    4a88:	9301      	str	r3, [sp, #4]
    4a8a:	4b18      	ldr	r3, [pc, #96]	; (4aec <getFircConfig+0xac>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	7a1b      	ldrb	r3, [r3, #8]
    4a90:	461a      	mov	r2, r3
    4a92:	9b01      	ldr	r3, [sp, #4]
    4a94:	4293      	cmp	r3, r2
    4a96:	d3dd      	bcc.n	4a54 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4a98:	9b00      	ldr	r3, [sp, #0]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d121      	bne.n	4ae2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4a9e:	4b14      	ldr	r3, [pc, #80]	; (4af0 <getFircConfig+0xb0>)
    4aa0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4aa2:	4b13      	ldr	r3, [pc, #76]	; (4af0 <getFircConfig+0xb0>)
    4aa4:	2205      	movs	r2, #5
    4aa6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4aa8:	4b12      	ldr	r3, [pc, #72]	; (4af4 <getFircConfig+0xb4>)
    4aaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4aae:	b29b      	uxth	r3, r3
    4ab0:	f003 0301 	and.w	r3, r3, #1
    4ab4:	b29a      	uxth	r2, r3
    4ab6:	4b0e      	ldr	r3, [pc, #56]	; (4af0 <getFircConfig+0xb0>)
    4ab8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4aba:	4b0e      	ldr	r3, [pc, #56]	; (4af4 <getFircConfig+0xb4>)
    4abc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ac0:	b2db      	uxtb	r3, r3
    4ac2:	f003 0303 	and.w	r3, r3, #3
    4ac6:	b2da      	uxtb	r2, r3
    4ac8:	4b09      	ldr	r3, [pc, #36]	; (4af0 <getFircConfig+0xb0>)
    4aca:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4acc:	4b09      	ldr	r3, [pc, #36]	; (4af4 <getFircConfig+0xb4>)
    4ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ad2:	b2db      	uxtb	r3, r3
    4ad4:	10db      	asrs	r3, r3, #3
    4ad6:	b2db      	uxtb	r3, r3
    4ad8:	f003 0301 	and.w	r3, r3, #1
    4adc:	b2da      	uxtb	r2, r3
    4ade:	4b04      	ldr	r3, [pc, #16]	; (4af0 <getFircConfig+0xb0>)
    4ae0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4ae2:	9b00      	ldr	r3, [sp, #0]
}
    4ae4:	4618      	mov	r0, r3
    4ae6:	b002      	add	sp, #8
    4ae8:	4770      	bx	lr
    4aea:	bf00      	nop
    4aec:	1fff8b98 	.word	0x1fff8b98
    4af0:	1fff8c04 	.word	0x1fff8c04
    4af4:	40064000 	.word	0x40064000

00004af8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4af8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4afa:	2300      	movs	r3, #0
    4afc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4afe:	4b20      	ldr	r3, [pc, #128]	; (4b80 <getSoscConfig+0x88>)
    4b00:	681b      	ldr	r3, [r3, #0]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d024      	beq.n	4b50 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b06:	2300      	movs	r3, #0
    4b08:	9301      	str	r3, [sp, #4]
    4b0a:	e01a      	b.n	4b42 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4b0c:	4b1c      	ldr	r3, [pc, #112]	; (4b80 <getSoscConfig+0x88>)
    4b0e:	6819      	ldr	r1, [r3, #0]
    4b10:	9a01      	ldr	r2, [sp, #4]
    4b12:	4613      	mov	r3, r2
    4b14:	009b      	lsls	r3, r3, #2
    4b16:	4413      	add	r3, r2
    4b18:	009b      	lsls	r3, r3, #2
    4b1a:	440b      	add	r3, r1
    4b1c:	332c      	adds	r3, #44	; 0x2c
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	2b08      	cmp	r3, #8
    4b22:	d10b      	bne.n	4b3c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4b24:	4b16      	ldr	r3, [pc, #88]	; (4b80 <getSoscConfig+0x88>)
    4b26:	6819      	ldr	r1, [r3, #0]
    4b28:	9a01      	ldr	r2, [sp, #4]
    4b2a:	4613      	mov	r3, r2
    4b2c:	009b      	lsls	r3, r3, #2
    4b2e:	4413      	add	r3, r2
    4b30:	009b      	lsls	r3, r3, #2
    4b32:	3328      	adds	r3, #40	; 0x28
    4b34:	440b      	add	r3, r1
    4b36:	3304      	adds	r3, #4
    4b38:	9300      	str	r3, [sp, #0]
                break;
    4b3a:	e009      	b.n	4b50 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b3c:	9b01      	ldr	r3, [sp, #4]
    4b3e:	3301      	adds	r3, #1
    4b40:	9301      	str	r3, [sp, #4]
    4b42:	4b0f      	ldr	r3, [pc, #60]	; (4b80 <getSoscConfig+0x88>)
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	7a5b      	ldrb	r3, [r3, #9]
    4b48:	461a      	mov	r2, r3
    4b4a:	9b01      	ldr	r3, [sp, #4]
    4b4c:	4293      	cmp	r3, r2
    4b4e:	d3dd      	bcc.n	4b0c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b50:	9b00      	ldr	r3, [sp, #0]
    4b52:	2b00      	cmp	r3, #0
    4b54:	d110      	bne.n	4b78 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4b56:	4b0b      	ldr	r3, [pc, #44]	; (4b84 <getSoscConfig+0x8c>)
    4b58:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4b5a:	4b0a      	ldr	r3, [pc, #40]	; (4b84 <getSoscConfig+0x8c>)
    4b5c:	2208      	movs	r2, #8
    4b5e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4b60:	4b09      	ldr	r3, [pc, #36]	; (4b88 <getSoscConfig+0x90>)
    4b62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4b66:	b29b      	uxth	r3, r3
    4b68:	f003 0301 	and.w	r3, r3, #1
    4b6c:	b29a      	uxth	r2, r3
    4b6e:	4b05      	ldr	r3, [pc, #20]	; (4b84 <getSoscConfig+0x8c>)
    4b70:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4b72:	4b04      	ldr	r3, [pc, #16]	; (4b84 <getSoscConfig+0x8c>)
    4b74:	4a05      	ldr	r2, [pc, #20]	; (4b8c <getSoscConfig+0x94>)
    4b76:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4b78:	9b00      	ldr	r3, [sp, #0]
}
    4b7a:	4618      	mov	r0, r3
    4b7c:	b002      	add	sp, #8
    4b7e:	4770      	bx	lr
    4b80:	1fff8b98 	.word	0x1fff8b98
    4b84:	1fff8c10 	.word	0x1fff8c10
    4b88:	40064000 	.word	0x40064000
    4b8c:	02625a00 	.word	0x02625a00

00004b90 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4b90:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4b92:	2300      	movs	r3, #0
    4b94:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b96:	4b28      	ldr	r3, [pc, #160]	; (4c38 <getSpllConfig+0xa8>)
    4b98:	681b      	ldr	r3, [r3, #0]
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d023      	beq.n	4be6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4b9e:	2300      	movs	r3, #0
    4ba0:	9301      	str	r3, [sp, #4]
    4ba2:	e019      	b.n	4bd8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4ba4:	4b24      	ldr	r3, [pc, #144]	; (4c38 <getSpllConfig+0xa8>)
    4ba6:	6819      	ldr	r1, [r3, #0]
    4ba8:	9a01      	ldr	r2, [sp, #4]
    4baa:	4613      	mov	r3, r2
    4bac:	009b      	lsls	r3, r3, #2
    4bae:	4413      	add	r3, r2
    4bb0:	00db      	lsls	r3, r3, #3
    4bb2:	440b      	add	r3, r1
    4bb4:	3340      	adds	r3, #64	; 0x40
    4bb6:	681b      	ldr	r3, [r3, #0]
    4bb8:	2b09      	cmp	r3, #9
    4bba:	d10a      	bne.n	4bd2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4bbc:	4b1e      	ldr	r3, [pc, #120]	; (4c38 <getSpllConfig+0xa8>)
    4bbe:	6819      	ldr	r1, [r3, #0]
    4bc0:	9a01      	ldr	r2, [sp, #4]
    4bc2:	4613      	mov	r3, r2
    4bc4:	009b      	lsls	r3, r3, #2
    4bc6:	4413      	add	r3, r2
    4bc8:	00db      	lsls	r3, r3, #3
    4bca:	3340      	adds	r3, #64	; 0x40
    4bcc:	440b      	add	r3, r1
    4bce:	9300      	str	r3, [sp, #0]
                break;
    4bd0:	e009      	b.n	4be6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4bd2:	9b01      	ldr	r3, [sp, #4]
    4bd4:	3301      	adds	r3, #1
    4bd6:	9301      	str	r3, [sp, #4]
    4bd8:	4b17      	ldr	r3, [pc, #92]	; (4c38 <getSpllConfig+0xa8>)
    4bda:	681b      	ldr	r3, [r3, #0]
    4bdc:	7a9b      	ldrb	r3, [r3, #10]
    4bde:	461a      	mov	r2, r3
    4be0:	9b01      	ldr	r3, [sp, #4]
    4be2:	4293      	cmp	r3, r2
    4be4:	d3de      	bcc.n	4ba4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4be6:	9b00      	ldr	r3, [sp, #0]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d121      	bne.n	4c30 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4bec:	4b13      	ldr	r3, [pc, #76]	; (4c3c <getSpllConfig+0xac>)
    4bee:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4bf0:	4b12      	ldr	r3, [pc, #72]	; (4c3c <getSpllConfig+0xac>)
    4bf2:	2209      	movs	r2, #9
    4bf4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4bf6:	4b12      	ldr	r3, [pc, #72]	; (4c40 <getSpllConfig+0xb0>)
    4bf8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4bfc:	b29b      	uxth	r3, r3
    4bfe:	f003 0301 	and.w	r3, r3, #1
    4c02:	b29a      	uxth	r2, r3
    4c04:	4b0d      	ldr	r3, [pc, #52]	; (4c3c <getSpllConfig+0xac>)
    4c06:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4c08:	4b0d      	ldr	r3, [pc, #52]	; (4c40 <getSpllConfig+0xb0>)
    4c0a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c0e:	0a1b      	lsrs	r3, r3, #8
    4c10:	b2db      	uxtb	r3, r3
    4c12:	f003 0307 	and.w	r3, r3, #7
    4c16:	b2da      	uxtb	r2, r3
    4c18:	4b08      	ldr	r3, [pc, #32]	; (4c3c <getSpllConfig+0xac>)
    4c1a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4c1c:	4b08      	ldr	r3, [pc, #32]	; (4c40 <getSpllConfig+0xb0>)
    4c1e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c22:	0c1b      	lsrs	r3, r3, #16
    4c24:	b2db      	uxtb	r3, r3
    4c26:	f003 031f 	and.w	r3, r3, #31
    4c2a:	b2da      	uxtb	r2, r3
    4c2c:	4b03      	ldr	r3, [pc, #12]	; (4c3c <getSpllConfig+0xac>)
    4c2e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4c30:	9b00      	ldr	r3, [sp, #0]
}
    4c32:	4618      	mov	r0, r3
    4c34:	b002      	add	sp, #8
    4c36:	4770      	bx	lr
    4c38:	1fff8b98 	.word	0x1fff8b98
    4c3c:	1fff8c24 	.word	0x1fff8c24
    4c40:	40064000 	.word	0x40064000

00004c44 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4c44:	b086      	sub	sp, #24
    4c46:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4c48:	2300      	movs	r3, #0
    4c4a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4c4c:	9b01      	ldr	r3, [sp, #4]
    4c4e:	2b1b      	cmp	r3, #27
    4c50:	d00f      	beq.n	4c72 <getSelectorConfig+0x2e>
    4c52:	9b01      	ldr	r3, [sp, #4]
    4c54:	2b1b      	cmp	r3, #27
    4c56:	d80f      	bhi.n	4c78 <getSelectorConfig+0x34>
    4c58:	9b01      	ldr	r3, [sp, #4]
    4c5a:	2b19      	cmp	r3, #25
    4c5c:	d003      	beq.n	4c66 <getSelectorConfig+0x22>
    4c5e:	9b01      	ldr	r3, [sp, #4]
    4c60:	2b1a      	cmp	r3, #26
    4c62:	d003      	beq.n	4c6c <getSelectorConfig+0x28>
    4c64:	e008      	b.n	4c78 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4c66:	2300      	movs	r3, #0
    4c68:	9304      	str	r3, [sp, #16]
            break;
    4c6a:	e008      	b.n	4c7e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4c6c:	2301      	movs	r3, #1
    4c6e:	9304      	str	r3, [sp, #16]
            break;
    4c70:	e005      	b.n	4c7e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4c72:	2302      	movs	r3, #2
    4c74:	9304      	str	r3, [sp, #16]
            break;
    4c76:	e002      	b.n	4c7e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4c78:	2300      	movs	r3, #0
    4c7a:	9304      	str	r3, [sp, #16]
            break;
    4c7c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4c7e:	4b36      	ldr	r3, [pc, #216]	; (4d58 <getSelectorConfig+0x114>)
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	2b00      	cmp	r3, #0
    4c84:	d01d      	beq.n	4cc2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4c86:	2300      	movs	r3, #0
    4c88:	9303      	str	r3, [sp, #12]
    4c8a:	e013      	b.n	4cb4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4c8c:	4b32      	ldr	r3, [pc, #200]	; (4d58 <getSelectorConfig+0x114>)
    4c8e:	681b      	ldr	r3, [r3, #0]
    4c90:	9a03      	ldr	r2, [sp, #12]
    4c92:	320d      	adds	r2, #13
    4c94:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c98:	9a01      	ldr	r2, [sp, #4]
    4c9a:	429a      	cmp	r2, r3
    4c9c:	d107      	bne.n	4cae <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4c9e:	4b2e      	ldr	r3, [pc, #184]	; (4d58 <getSelectorConfig+0x114>)
    4ca0:	681a      	ldr	r2, [r3, #0]
    4ca2:	9b03      	ldr	r3, [sp, #12]
    4ca4:	330d      	adds	r3, #13
    4ca6:	00db      	lsls	r3, r3, #3
    4ca8:	4413      	add	r3, r2
    4caa:	9305      	str	r3, [sp, #20]
                break;
    4cac:	e009      	b.n	4cc2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4cae:	9b03      	ldr	r3, [sp, #12]
    4cb0:	3301      	adds	r3, #1
    4cb2:	9303      	str	r3, [sp, #12]
    4cb4:	4b28      	ldr	r3, [pc, #160]	; (4d58 <getSelectorConfig+0x114>)
    4cb6:	681b      	ldr	r3, [r3, #0]
    4cb8:	7adb      	ldrb	r3, [r3, #11]
    4cba:	461a      	mov	r2, r3
    4cbc:	9b03      	ldr	r3, [sp, #12]
    4cbe:	4293      	cmp	r3, r2
    4cc0:	d3e4      	bcc.n	4c8c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cc2:	9b05      	ldr	r3, [sp, #20]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d140      	bne.n	4d4a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4cc8:	9b04      	ldr	r3, [sp, #16]
    4cca:	00db      	lsls	r3, r3, #3
    4ccc:	4a23      	ldr	r2, [pc, #140]	; (4d5c <getSelectorConfig+0x118>)
    4cce:	4413      	add	r3, r2
    4cd0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4cd2:	4922      	ldr	r1, [pc, #136]	; (4d5c <getSelectorConfig+0x118>)
    4cd4:	9b04      	ldr	r3, [sp, #16]
    4cd6:	9a01      	ldr	r2, [sp, #4]
    4cd8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4cdc:	9b01      	ldr	r3, [sp, #4]
    4cde:	2b1b      	cmp	r3, #27
    4ce0:	d025      	beq.n	4d2e <getSelectorConfig+0xea>
    4ce2:	9b01      	ldr	r3, [sp, #4]
    4ce4:	2b1b      	cmp	r3, #27
    4ce6:	d832      	bhi.n	4d4e <getSelectorConfig+0x10a>
    4ce8:	9b01      	ldr	r3, [sp, #4]
    4cea:	2b19      	cmp	r3, #25
    4cec:	d003      	beq.n	4cf6 <getSelectorConfig+0xb2>
    4cee:	9b01      	ldr	r3, [sp, #4]
    4cf0:	2b1a      	cmp	r3, #26
    4cf2:	d00e      	beq.n	4d12 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4cf4:	e02b      	b.n	4d4e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4cf6:	4b1a      	ldr	r3, [pc, #104]	; (4d60 <getSelectorConfig+0x11c>)
    4cf8:	695b      	ldr	r3, [r3, #20]
    4cfa:	0e1b      	lsrs	r3, r3, #24
    4cfc:	f003 030f 	and.w	r3, r3, #15
    4d00:	4a18      	ldr	r2, [pc, #96]	; (4d64 <getSelectorConfig+0x120>)
    4d02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d06:	4915      	ldr	r1, [pc, #84]	; (4d5c <getSelectorConfig+0x118>)
    4d08:	9b04      	ldr	r3, [sp, #16]
    4d0a:	00db      	lsls	r3, r3, #3
    4d0c:	440b      	add	r3, r1
    4d0e:	605a      	str	r2, [r3, #4]
                break;
    4d10:	e01e      	b.n	4d50 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d12:	4b13      	ldr	r3, [pc, #76]	; (4d60 <getSelectorConfig+0x11c>)
    4d14:	699b      	ldr	r3, [r3, #24]
    4d16:	0e1b      	lsrs	r3, r3, #24
    4d18:	f003 030f 	and.w	r3, r3, #15
    4d1c:	4a11      	ldr	r2, [pc, #68]	; (4d64 <getSelectorConfig+0x120>)
    4d1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d22:	490e      	ldr	r1, [pc, #56]	; (4d5c <getSelectorConfig+0x118>)
    4d24:	9b04      	ldr	r3, [sp, #16]
    4d26:	00db      	lsls	r3, r3, #3
    4d28:	440b      	add	r3, r1
    4d2a:	605a      	str	r2, [r3, #4]
                break;
    4d2c:	e010      	b.n	4d50 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4d2e:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <getSelectorConfig+0x11c>)
    4d30:	69db      	ldr	r3, [r3, #28]
    4d32:	0e1b      	lsrs	r3, r3, #24
    4d34:	f003 030f 	and.w	r3, r3, #15
    4d38:	4a0a      	ldr	r2, [pc, #40]	; (4d64 <getSelectorConfig+0x120>)
    4d3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d3e:	4907      	ldr	r1, [pc, #28]	; (4d5c <getSelectorConfig+0x118>)
    4d40:	9b04      	ldr	r3, [sp, #16]
    4d42:	00db      	lsls	r3, r3, #3
    4d44:	440b      	add	r3, r1
    4d46:	605a      	str	r2, [r3, #4]
                break;
    4d48:	e002      	b.n	4d50 <getSelectorConfig+0x10c>
        }
    }
    4d4a:	bf00      	nop
    4d4c:	e000      	b.n	4d50 <getSelectorConfig+0x10c>
                break;
    4d4e:	bf00      	nop

    return ReturnValue;
    4d50:	9b05      	ldr	r3, [sp, #20]
}
    4d52:	4618      	mov	r0, r3
    4d54:	b006      	add	sp, #24
    4d56:	4770      	bx	lr
    4d58:	1fff8b98 	.word	0x1fff8b98
    4d5c:	1fff8c4c 	.word	0x1fff8c4c
    4d60:	40064000 	.word	0x40064000
    4d64:	0001070c 	.word	0x0001070c

00004d68 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4d68:	b086      	sub	sp, #24
    4d6a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4d6c:	2300      	movs	r3, #0
    4d6e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4d70:	2300      	movs	r3, #0
    4d72:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4d74:	9b01      	ldr	r3, [sp, #4]
    4d76:	2b1f      	cmp	r3, #31
    4d78:	d00f      	beq.n	4d9a <getCoreDividerConfig+0x32>
    4d7a:	9b01      	ldr	r3, [sp, #4]
    4d7c:	2b1f      	cmp	r3, #31
    4d7e:	d80f      	bhi.n	4da0 <getCoreDividerConfig+0x38>
    4d80:	9b01      	ldr	r3, [sp, #4]
    4d82:	2b1d      	cmp	r3, #29
    4d84:	d003      	beq.n	4d8e <getCoreDividerConfig+0x26>
    4d86:	9b01      	ldr	r3, [sp, #4]
    4d88:	2b1e      	cmp	r3, #30
    4d8a:	d003      	beq.n	4d94 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d8c:	e008      	b.n	4da0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4d8e:	2300      	movs	r3, #0
    4d90:	9304      	str	r3, [sp, #16]
            break;
    4d92:	e006      	b.n	4da2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4d94:	2301      	movs	r3, #1
    4d96:	9304      	str	r3, [sp, #16]
            break;
    4d98:	e003      	b.n	4da2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4d9a:	2302      	movs	r3, #2
    4d9c:	9304      	str	r3, [sp, #16]
            break;
    4d9e:	e000      	b.n	4da2 <getCoreDividerConfig+0x3a>
                break;
    4da0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4da2:	4b41      	ldr	r3, [pc, #260]	; (4ea8 <getCoreDividerConfig+0x140>)
    4da4:	681b      	ldr	r3, [r3, #0]
    4da6:	2b00      	cmp	r3, #0
    4da8:	d026      	beq.n	4df8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4daa:	2300      	movs	r3, #0
    4dac:	9303      	str	r3, [sp, #12]
    4dae:	e01c      	b.n	4dea <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4db0:	4b3d      	ldr	r3, [pc, #244]	; (4ea8 <getCoreDividerConfig+0x140>)
    4db2:	6819      	ldr	r1, [r3, #0]
    4db4:	9a03      	ldr	r2, [sp, #12]
    4db6:	4613      	mov	r3, r2
    4db8:	005b      	lsls	r3, r3, #1
    4dba:	4413      	add	r3, r2
    4dbc:	009b      	lsls	r3, r3, #2
    4dbe:	440b      	add	r3, r1
    4dc0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4dc4:	681b      	ldr	r3, [r3, #0]
    4dc6:	9a01      	ldr	r2, [sp, #4]
    4dc8:	429a      	cmp	r2, r3
    4dca:	d10b      	bne.n	4de4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4dcc:	4b36      	ldr	r3, [pc, #216]	; (4ea8 <getCoreDividerConfig+0x140>)
    4dce:	6819      	ldr	r1, [r3, #0]
    4dd0:	9a03      	ldr	r2, [sp, #12]
    4dd2:	4613      	mov	r3, r2
    4dd4:	005b      	lsls	r3, r3, #1
    4dd6:	4413      	add	r3, r2
    4dd8:	009b      	lsls	r3, r3, #2
    4dda:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4dde:	440b      	add	r3, r1
    4de0:	9305      	str	r3, [sp, #20]
                break;
    4de2:	e009      	b.n	4df8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4de4:	9b03      	ldr	r3, [sp, #12]
    4de6:	3301      	adds	r3, #1
    4de8:	9303      	str	r3, [sp, #12]
    4dea:	4b2f      	ldr	r3, [pc, #188]	; (4ea8 <getCoreDividerConfig+0x140>)
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	7b1b      	ldrb	r3, [r3, #12]
    4df0:	461a      	mov	r2, r3
    4df2:	9b03      	ldr	r3, [sp, #12]
    4df4:	4293      	cmp	r3, r2
    4df6:	d3db      	bcc.n	4db0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4df8:	9b05      	ldr	r3, [sp, #20]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d14d      	bne.n	4e9a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4dfe:	9a04      	ldr	r2, [sp, #16]
    4e00:	4613      	mov	r3, r2
    4e02:	005b      	lsls	r3, r3, #1
    4e04:	4413      	add	r3, r2
    4e06:	009b      	lsls	r3, r3, #2
    4e08:	4a28      	ldr	r2, [pc, #160]	; (4eac <getCoreDividerConfig+0x144>)
    4e0a:	4413      	add	r3, r2
    4e0c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4e0e:	4927      	ldr	r1, [pc, #156]	; (4eac <getCoreDividerConfig+0x144>)
    4e10:	9a04      	ldr	r2, [sp, #16]
    4e12:	4613      	mov	r3, r2
    4e14:	005b      	lsls	r3, r3, #1
    4e16:	4413      	add	r3, r2
    4e18:	009b      	lsls	r3, r3, #2
    4e1a:	440b      	add	r3, r1
    4e1c:	9a01      	ldr	r2, [sp, #4]
    4e1e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4e20:	9b01      	ldr	r3, [sp, #4]
    4e22:	2b1f      	cmp	r3, #31
    4e24:	d029      	beq.n	4e7a <getCoreDividerConfig+0x112>
    4e26:	9b01      	ldr	r3, [sp, #4]
    4e28:	2b1f      	cmp	r3, #31
    4e2a:	d838      	bhi.n	4e9e <getCoreDividerConfig+0x136>
    4e2c:	9b01      	ldr	r3, [sp, #4]
    4e2e:	2b1d      	cmp	r3, #29
    4e30:	d003      	beq.n	4e3a <getCoreDividerConfig+0xd2>
    4e32:	9b01      	ldr	r3, [sp, #4]
    4e34:	2b1e      	cmp	r3, #30
    4e36:	d010      	beq.n	4e5a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e38:	e031      	b.n	4e9e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4e3a:	4b1d      	ldr	r3, [pc, #116]	; (4eb0 <getCoreDividerConfig+0x148>)
    4e3c:	695b      	ldr	r3, [r3, #20]
    4e3e:	0c1b      	lsrs	r3, r3, #16
    4e40:	f003 030f 	and.w	r3, r3, #15
    4e44:	1c59      	adds	r1, r3, #1
    4e46:	4819      	ldr	r0, [pc, #100]	; (4eac <getCoreDividerConfig+0x144>)
    4e48:	9a04      	ldr	r2, [sp, #16]
    4e4a:	4613      	mov	r3, r2
    4e4c:	005b      	lsls	r3, r3, #1
    4e4e:	4413      	add	r3, r2
    4e50:	009b      	lsls	r3, r3, #2
    4e52:	4403      	add	r3, r0
    4e54:	3304      	adds	r3, #4
    4e56:	6019      	str	r1, [r3, #0]
                break;
    4e58:	e022      	b.n	4ea0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4e5a:	4b15      	ldr	r3, [pc, #84]	; (4eb0 <getCoreDividerConfig+0x148>)
    4e5c:	699b      	ldr	r3, [r3, #24]
    4e5e:	0c1b      	lsrs	r3, r3, #16
    4e60:	f003 030f 	and.w	r3, r3, #15
    4e64:	1c59      	adds	r1, r3, #1
    4e66:	4811      	ldr	r0, [pc, #68]	; (4eac <getCoreDividerConfig+0x144>)
    4e68:	9a04      	ldr	r2, [sp, #16]
    4e6a:	4613      	mov	r3, r2
    4e6c:	005b      	lsls	r3, r3, #1
    4e6e:	4413      	add	r3, r2
    4e70:	009b      	lsls	r3, r3, #2
    4e72:	4403      	add	r3, r0
    4e74:	3304      	adds	r3, #4
    4e76:	6019      	str	r1, [r3, #0]
                break;
    4e78:	e012      	b.n	4ea0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4e7a:	4b0d      	ldr	r3, [pc, #52]	; (4eb0 <getCoreDividerConfig+0x148>)
    4e7c:	69db      	ldr	r3, [r3, #28]
    4e7e:	0c1b      	lsrs	r3, r3, #16
    4e80:	f003 030f 	and.w	r3, r3, #15
    4e84:	1c59      	adds	r1, r3, #1
    4e86:	4809      	ldr	r0, [pc, #36]	; (4eac <getCoreDividerConfig+0x144>)
    4e88:	9a04      	ldr	r2, [sp, #16]
    4e8a:	4613      	mov	r3, r2
    4e8c:	005b      	lsls	r3, r3, #1
    4e8e:	4413      	add	r3, r2
    4e90:	009b      	lsls	r3, r3, #2
    4e92:	4403      	add	r3, r0
    4e94:	3304      	adds	r3, #4
    4e96:	6019      	str	r1, [r3, #0]
                break;
    4e98:	e002      	b.n	4ea0 <getCoreDividerConfig+0x138>
        }
    }
    4e9a:	bf00      	nop
    4e9c:	e000      	b.n	4ea0 <getCoreDividerConfig+0x138>
                break;
    4e9e:	bf00      	nop

    return ReturnValue;
    4ea0:	9b05      	ldr	r3, [sp, #20]
}
    4ea2:	4618      	mov	r0, r3
    4ea4:	b006      	add	sp, #24
    4ea6:	4770      	bx	lr
    4ea8:	1fff8b98 	.word	0x1fff8b98
    4eac:	1fff8c64 	.word	0x1fff8c64
    4eb0:	40064000 	.word	0x40064000

00004eb4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4eb4:	b086      	sub	sp, #24
    4eb6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4eb8:	2300      	movs	r3, #0
    4eba:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4ebc:	2300      	movs	r3, #0
    4ebe:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4ec0:	9b01      	ldr	r3, [sp, #4]
    4ec2:	2b23      	cmp	r3, #35	; 0x23
    4ec4:	d00f      	beq.n	4ee6 <getBusDividerConfig+0x32>
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	2b23      	cmp	r3, #35	; 0x23
    4eca:	d80f      	bhi.n	4eec <getBusDividerConfig+0x38>
    4ecc:	9b01      	ldr	r3, [sp, #4]
    4ece:	2b21      	cmp	r3, #33	; 0x21
    4ed0:	d003      	beq.n	4eda <getBusDividerConfig+0x26>
    4ed2:	9b01      	ldr	r3, [sp, #4]
    4ed4:	2b22      	cmp	r3, #34	; 0x22
    4ed6:	d003      	beq.n	4ee0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ed8:	e008      	b.n	4eec <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4eda:	2300      	movs	r3, #0
    4edc:	9304      	str	r3, [sp, #16]
            break;
    4ede:	e006      	b.n	4eee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ee0:	2301      	movs	r3, #1
    4ee2:	9304      	str	r3, [sp, #16]
            break;
    4ee4:	e003      	b.n	4eee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4ee6:	2302      	movs	r3, #2
    4ee8:	9304      	str	r3, [sp, #16]
            break;
    4eea:	e000      	b.n	4eee <getBusDividerConfig+0x3a>
                break;
    4eec:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4eee:	4b41      	ldr	r3, [pc, #260]	; (4ff4 <getBusDividerConfig+0x140>)
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d026      	beq.n	4f44 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4ef6:	2300      	movs	r3, #0
    4ef8:	9303      	str	r3, [sp, #12]
    4efa:	e01c      	b.n	4f36 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4efc:	4b3d      	ldr	r3, [pc, #244]	; (4ff4 <getBusDividerConfig+0x140>)
    4efe:	6819      	ldr	r1, [r3, #0]
    4f00:	9a03      	ldr	r2, [sp, #12]
    4f02:	4613      	mov	r3, r2
    4f04:	005b      	lsls	r3, r3, #1
    4f06:	4413      	add	r3, r2
    4f08:	009b      	lsls	r3, r3, #2
    4f0a:	440b      	add	r3, r1
    4f0c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f10:	681b      	ldr	r3, [r3, #0]
    4f12:	9a01      	ldr	r2, [sp, #4]
    4f14:	429a      	cmp	r2, r3
    4f16:	d10b      	bne.n	4f30 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4f18:	4b36      	ldr	r3, [pc, #216]	; (4ff4 <getBusDividerConfig+0x140>)
    4f1a:	6819      	ldr	r1, [r3, #0]
    4f1c:	9a03      	ldr	r2, [sp, #12]
    4f1e:	4613      	mov	r3, r2
    4f20:	005b      	lsls	r3, r3, #1
    4f22:	4413      	add	r3, r2
    4f24:	009b      	lsls	r3, r3, #2
    4f26:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f2a:	440b      	add	r3, r1
    4f2c:	9305      	str	r3, [sp, #20]
                break;
    4f2e:	e009      	b.n	4f44 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f30:	9b03      	ldr	r3, [sp, #12]
    4f32:	3301      	adds	r3, #1
    4f34:	9303      	str	r3, [sp, #12]
    4f36:	4b2f      	ldr	r3, [pc, #188]	; (4ff4 <getBusDividerConfig+0x140>)
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	7b1b      	ldrb	r3, [r3, #12]
    4f3c:	461a      	mov	r2, r3
    4f3e:	9b03      	ldr	r3, [sp, #12]
    4f40:	4293      	cmp	r3, r2
    4f42:	d3db      	bcc.n	4efc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f44:	9b05      	ldr	r3, [sp, #20]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d14d      	bne.n	4fe6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4f4a:	9a04      	ldr	r2, [sp, #16]
    4f4c:	4613      	mov	r3, r2
    4f4e:	005b      	lsls	r3, r3, #1
    4f50:	4413      	add	r3, r2
    4f52:	009b      	lsls	r3, r3, #2
    4f54:	4a28      	ldr	r2, [pc, #160]	; (4ff8 <getBusDividerConfig+0x144>)
    4f56:	4413      	add	r3, r2
    4f58:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4f5a:	4927      	ldr	r1, [pc, #156]	; (4ff8 <getBusDividerConfig+0x144>)
    4f5c:	9a04      	ldr	r2, [sp, #16]
    4f5e:	4613      	mov	r3, r2
    4f60:	005b      	lsls	r3, r3, #1
    4f62:	4413      	add	r3, r2
    4f64:	009b      	lsls	r3, r3, #2
    4f66:	440b      	add	r3, r1
    4f68:	9a01      	ldr	r2, [sp, #4]
    4f6a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4f6c:	9b01      	ldr	r3, [sp, #4]
    4f6e:	2b23      	cmp	r3, #35	; 0x23
    4f70:	d029      	beq.n	4fc6 <getBusDividerConfig+0x112>
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	2b23      	cmp	r3, #35	; 0x23
    4f76:	d838      	bhi.n	4fea <getBusDividerConfig+0x136>
    4f78:	9b01      	ldr	r3, [sp, #4]
    4f7a:	2b21      	cmp	r3, #33	; 0x21
    4f7c:	d003      	beq.n	4f86 <getBusDividerConfig+0xd2>
    4f7e:	9b01      	ldr	r3, [sp, #4]
    4f80:	2b22      	cmp	r3, #34	; 0x22
    4f82:	d010      	beq.n	4fa6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f84:	e031      	b.n	4fea <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4f86:	4b1d      	ldr	r3, [pc, #116]	; (4ffc <getBusDividerConfig+0x148>)
    4f88:	695b      	ldr	r3, [r3, #20]
    4f8a:	091b      	lsrs	r3, r3, #4
    4f8c:	f003 030f 	and.w	r3, r3, #15
    4f90:	1c59      	adds	r1, r3, #1
    4f92:	4819      	ldr	r0, [pc, #100]	; (4ff8 <getBusDividerConfig+0x144>)
    4f94:	9a04      	ldr	r2, [sp, #16]
    4f96:	4613      	mov	r3, r2
    4f98:	005b      	lsls	r3, r3, #1
    4f9a:	4413      	add	r3, r2
    4f9c:	009b      	lsls	r3, r3, #2
    4f9e:	4403      	add	r3, r0
    4fa0:	3304      	adds	r3, #4
    4fa2:	6019      	str	r1, [r3, #0]
                break;
    4fa4:	e022      	b.n	4fec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4fa6:	4b15      	ldr	r3, [pc, #84]	; (4ffc <getBusDividerConfig+0x148>)
    4fa8:	699b      	ldr	r3, [r3, #24]
    4faa:	091b      	lsrs	r3, r3, #4
    4fac:	f003 030f 	and.w	r3, r3, #15
    4fb0:	1c59      	adds	r1, r3, #1
    4fb2:	4811      	ldr	r0, [pc, #68]	; (4ff8 <getBusDividerConfig+0x144>)
    4fb4:	9a04      	ldr	r2, [sp, #16]
    4fb6:	4613      	mov	r3, r2
    4fb8:	005b      	lsls	r3, r3, #1
    4fba:	4413      	add	r3, r2
    4fbc:	009b      	lsls	r3, r3, #2
    4fbe:	4403      	add	r3, r0
    4fc0:	3304      	adds	r3, #4
    4fc2:	6019      	str	r1, [r3, #0]
                break;
    4fc4:	e012      	b.n	4fec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4fc6:	4b0d      	ldr	r3, [pc, #52]	; (4ffc <getBusDividerConfig+0x148>)
    4fc8:	69db      	ldr	r3, [r3, #28]
    4fca:	091b      	lsrs	r3, r3, #4
    4fcc:	f003 030f 	and.w	r3, r3, #15
    4fd0:	1c59      	adds	r1, r3, #1
    4fd2:	4809      	ldr	r0, [pc, #36]	; (4ff8 <getBusDividerConfig+0x144>)
    4fd4:	9a04      	ldr	r2, [sp, #16]
    4fd6:	4613      	mov	r3, r2
    4fd8:	005b      	lsls	r3, r3, #1
    4fda:	4413      	add	r3, r2
    4fdc:	009b      	lsls	r3, r3, #2
    4fde:	4403      	add	r3, r0
    4fe0:	3304      	adds	r3, #4
    4fe2:	6019      	str	r1, [r3, #0]
                break;
    4fe4:	e002      	b.n	4fec <getBusDividerConfig+0x138>
        }
    }
    4fe6:	bf00      	nop
    4fe8:	e000      	b.n	4fec <getBusDividerConfig+0x138>
                break;
    4fea:	bf00      	nop

    return ReturnValue;
    4fec:	9b05      	ldr	r3, [sp, #20]
}
    4fee:	4618      	mov	r0, r3
    4ff0:	b006      	add	sp, #24
    4ff2:	4770      	bx	lr
    4ff4:	1fff8b98 	.word	0x1fff8b98
    4ff8:	1fff8c88 	.word	0x1fff8c88
    4ffc:	40064000 	.word	0x40064000

00005000 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5000:	b086      	sub	sp, #24
    5002:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5004:	2300      	movs	r3, #0
    5006:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5008:	2300      	movs	r3, #0
    500a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    500c:	9b01      	ldr	r3, [sp, #4]
    500e:	2b27      	cmp	r3, #39	; 0x27
    5010:	d00f      	beq.n	5032 <getSlowDividerConfig+0x32>
    5012:	9b01      	ldr	r3, [sp, #4]
    5014:	2b27      	cmp	r3, #39	; 0x27
    5016:	d80f      	bhi.n	5038 <getSlowDividerConfig+0x38>
    5018:	9b01      	ldr	r3, [sp, #4]
    501a:	2b25      	cmp	r3, #37	; 0x25
    501c:	d003      	beq.n	5026 <getSlowDividerConfig+0x26>
    501e:	9b01      	ldr	r3, [sp, #4]
    5020:	2b26      	cmp	r3, #38	; 0x26
    5022:	d003      	beq.n	502c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5024:	e008      	b.n	5038 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5026:	2300      	movs	r3, #0
    5028:	9304      	str	r3, [sp, #16]
            break;
    502a:	e006      	b.n	503a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    502c:	2301      	movs	r3, #1
    502e:	9304      	str	r3, [sp, #16]
            break;
    5030:	e003      	b.n	503a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5032:	2302      	movs	r3, #2
    5034:	9304      	str	r3, [sp, #16]
            break;
    5036:	e000      	b.n	503a <getSlowDividerConfig+0x3a>
                break;
    5038:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    503a:	4b40      	ldr	r3, [pc, #256]	; (513c <getSlowDividerConfig+0x13c>)
    503c:	681b      	ldr	r3, [r3, #0]
    503e:	2b00      	cmp	r3, #0
    5040:	d026      	beq.n	5090 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5042:	2300      	movs	r3, #0
    5044:	9303      	str	r3, [sp, #12]
    5046:	e01c      	b.n	5082 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5048:	4b3c      	ldr	r3, [pc, #240]	; (513c <getSlowDividerConfig+0x13c>)
    504a:	6819      	ldr	r1, [r3, #0]
    504c:	9a03      	ldr	r2, [sp, #12]
    504e:	4613      	mov	r3, r2
    5050:	005b      	lsls	r3, r3, #1
    5052:	4413      	add	r3, r2
    5054:	009b      	lsls	r3, r3, #2
    5056:	440b      	add	r3, r1
    5058:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	9a01      	ldr	r2, [sp, #4]
    5060:	429a      	cmp	r2, r3
    5062:	d10b      	bne.n	507c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5064:	4b35      	ldr	r3, [pc, #212]	; (513c <getSlowDividerConfig+0x13c>)
    5066:	6819      	ldr	r1, [r3, #0]
    5068:	9a03      	ldr	r2, [sp, #12]
    506a:	4613      	mov	r3, r2
    506c:	005b      	lsls	r3, r3, #1
    506e:	4413      	add	r3, r2
    5070:	009b      	lsls	r3, r3, #2
    5072:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5076:	440b      	add	r3, r1
    5078:	9305      	str	r3, [sp, #20]
                break;
    507a:	e009      	b.n	5090 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    507c:	9b03      	ldr	r3, [sp, #12]
    507e:	3301      	adds	r3, #1
    5080:	9303      	str	r3, [sp, #12]
    5082:	4b2e      	ldr	r3, [pc, #184]	; (513c <getSlowDividerConfig+0x13c>)
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	7b1b      	ldrb	r3, [r3, #12]
    5088:	461a      	mov	r2, r3
    508a:	9b03      	ldr	r3, [sp, #12]
    508c:	4293      	cmp	r3, r2
    508e:	d3db      	bcc.n	5048 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5090:	9b05      	ldr	r3, [sp, #20]
    5092:	2b00      	cmp	r3, #0
    5094:	d14a      	bne.n	512c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5096:	9a04      	ldr	r2, [sp, #16]
    5098:	4613      	mov	r3, r2
    509a:	005b      	lsls	r3, r3, #1
    509c:	4413      	add	r3, r2
    509e:	009b      	lsls	r3, r3, #2
    50a0:	4a27      	ldr	r2, [pc, #156]	; (5140 <getSlowDividerConfig+0x140>)
    50a2:	4413      	add	r3, r2
    50a4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    50a6:	4926      	ldr	r1, [pc, #152]	; (5140 <getSlowDividerConfig+0x140>)
    50a8:	9a04      	ldr	r2, [sp, #16]
    50aa:	4613      	mov	r3, r2
    50ac:	005b      	lsls	r3, r3, #1
    50ae:	4413      	add	r3, r2
    50b0:	009b      	lsls	r3, r3, #2
    50b2:	440b      	add	r3, r1
    50b4:	9a01      	ldr	r2, [sp, #4]
    50b6:	601a      	str	r2, [r3, #0]
        switch(Name)
    50b8:	9b01      	ldr	r3, [sp, #4]
    50ba:	2b27      	cmp	r3, #39	; 0x27
    50bc:	d027      	beq.n	510e <getSlowDividerConfig+0x10e>
    50be:	9b01      	ldr	r3, [sp, #4]
    50c0:	2b27      	cmp	r3, #39	; 0x27
    50c2:	d835      	bhi.n	5130 <getSlowDividerConfig+0x130>
    50c4:	9b01      	ldr	r3, [sp, #4]
    50c6:	2b25      	cmp	r3, #37	; 0x25
    50c8:	d003      	beq.n	50d2 <getSlowDividerConfig+0xd2>
    50ca:	9b01      	ldr	r3, [sp, #4]
    50cc:	2b26      	cmp	r3, #38	; 0x26
    50ce:	d00f      	beq.n	50f0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50d0:	e02e      	b.n	5130 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    50d2:	4b1c      	ldr	r3, [pc, #112]	; (5144 <getSlowDividerConfig+0x144>)
    50d4:	695b      	ldr	r3, [r3, #20]
    50d6:	f003 030f 	and.w	r3, r3, #15
    50da:	1c59      	adds	r1, r3, #1
    50dc:	4818      	ldr	r0, [pc, #96]	; (5140 <getSlowDividerConfig+0x140>)
    50de:	9a04      	ldr	r2, [sp, #16]
    50e0:	4613      	mov	r3, r2
    50e2:	005b      	lsls	r3, r3, #1
    50e4:	4413      	add	r3, r2
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	4403      	add	r3, r0
    50ea:	3304      	adds	r3, #4
    50ec:	6019      	str	r1, [r3, #0]
                break;
    50ee:	e020      	b.n	5132 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    50f0:	4b14      	ldr	r3, [pc, #80]	; (5144 <getSlowDividerConfig+0x144>)
    50f2:	699b      	ldr	r3, [r3, #24]
    50f4:	f003 030f 	and.w	r3, r3, #15
    50f8:	1c59      	adds	r1, r3, #1
    50fa:	4811      	ldr	r0, [pc, #68]	; (5140 <getSlowDividerConfig+0x140>)
    50fc:	9a04      	ldr	r2, [sp, #16]
    50fe:	4613      	mov	r3, r2
    5100:	005b      	lsls	r3, r3, #1
    5102:	4413      	add	r3, r2
    5104:	009b      	lsls	r3, r3, #2
    5106:	4403      	add	r3, r0
    5108:	3304      	adds	r3, #4
    510a:	6019      	str	r1, [r3, #0]
                break;
    510c:	e011      	b.n	5132 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    510e:	4b0d      	ldr	r3, [pc, #52]	; (5144 <getSlowDividerConfig+0x144>)
    5110:	69db      	ldr	r3, [r3, #28]
    5112:	f003 030f 	and.w	r3, r3, #15
    5116:	1c59      	adds	r1, r3, #1
    5118:	4809      	ldr	r0, [pc, #36]	; (5140 <getSlowDividerConfig+0x140>)
    511a:	9a04      	ldr	r2, [sp, #16]
    511c:	4613      	mov	r3, r2
    511e:	005b      	lsls	r3, r3, #1
    5120:	4413      	add	r3, r2
    5122:	009b      	lsls	r3, r3, #2
    5124:	4403      	add	r3, r0
    5126:	3304      	adds	r3, #4
    5128:	6019      	str	r1, [r3, #0]
                break;
    512a:	e002      	b.n	5132 <getSlowDividerConfig+0x132>
        }
    }
    512c:	bf00      	nop
    512e:	e000      	b.n	5132 <getSlowDividerConfig+0x132>
                break;
    5130:	bf00      	nop

    return ReturnValue;
    5132:	9b05      	ldr	r3, [sp, #20]
}
    5134:	4618      	mov	r0, r3
    5136:	b006      	add	sp, #24
    5138:	4770      	bx	lr
    513a:	bf00      	nop
    513c:	1fff8b98 	.word	0x1fff8b98
    5140:	1fff8cac 	.word	0x1fff8cac
    5144:	40064000 	.word	0x40064000

00005148 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5148:	b500      	push	{lr}
    514a:	b083      	sub	sp, #12
    514c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    514e:	4b64      	ldr	r3, [pc, #400]	; (52e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5150:	781b      	ldrb	r3, [r3, #0]
    5152:	f083 0301 	eor.w	r3, r3, #1
    5156:	b2db      	uxtb	r3, r3
    5158:	2b00      	cmp	r3, #0
    515a:	d05b      	beq.n	5214 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    515c:	4b60      	ldr	r3, [pc, #384]	; (52e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    515e:	2201      	movs	r2, #1
    5160:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5162:	4b60      	ldr	r3, [pc, #384]	; (52e4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5164:	785b      	ldrb	r3, [r3, #1]
    5166:	461a      	mov	r2, r3
    5168:	4613      	mov	r3, r2
    516a:	009b      	lsls	r3, r3, #2
    516c:	4413      	add	r3, r2
    516e:	009b      	lsls	r3, r3, #2
    5170:	4a5d      	ldr	r2, [pc, #372]	; (52e8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5172:	4413      	add	r3, r2
    5174:	4a5d      	ldr	r2, [pc, #372]	; (52ec <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5176:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5178:	4b5d      	ldr	r3, [pc, #372]	; (52f0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    517a:	785b      	ldrb	r3, [r3, #1]
    517c:	461a      	mov	r2, r3
    517e:	4613      	mov	r3, r2
    5180:	009b      	lsls	r3, r3, #2
    5182:	4413      	add	r3, r2
    5184:	009b      	lsls	r3, r3, #2
    5186:	4a5b      	ldr	r2, [pc, #364]	; (52f4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5188:	4413      	add	r3, r2
    518a:	4a5b      	ldr	r2, [pc, #364]	; (52f8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    518c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    518e:	4b5b      	ldr	r3, [pc, #364]	; (52fc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5190:	791b      	ldrb	r3, [r3, #4]
    5192:	461a      	mov	r2, r3
    5194:	4613      	mov	r3, r2
    5196:	005b      	lsls	r3, r3, #1
    5198:	4413      	add	r3, r2
    519a:	009b      	lsls	r3, r3, #2
    519c:	4a58      	ldr	r2, [pc, #352]	; (5300 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    519e:	4413      	add	r3, r2
    51a0:	4a58      	ldr	r2, [pc, #352]	; (5304 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    51a2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    51a4:	4b58      	ldr	r3, [pc, #352]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51a6:	795b      	ldrb	r3, [r3, #5]
    51a8:	00db      	lsls	r3, r3, #3
    51aa:	4a58      	ldr	r2, [pc, #352]	; (530c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51ac:	4413      	add	r3, r2
    51ae:	4a58      	ldr	r2, [pc, #352]	; (5310 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    51b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    51b2:	4b55      	ldr	r3, [pc, #340]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51b4:	79db      	ldrb	r3, [r3, #7]
    51b6:	00db      	lsls	r3, r3, #3
    51b8:	4a54      	ldr	r2, [pc, #336]	; (530c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51ba:	4413      	add	r3, r2
    51bc:	4a55      	ldr	r2, [pc, #340]	; (5314 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    51be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    51c0:	4b55      	ldr	r3, [pc, #340]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51c2:	799b      	ldrb	r3, [r3, #6]
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	4a55      	ldr	r2, [pc, #340]	; (531c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51c8:	4413      	add	r3, r2
    51ca:	4a55      	ldr	r2, [pc, #340]	; (5320 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    51cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    51ce:	4b52      	ldr	r3, [pc, #328]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51d0:	7a1b      	ldrb	r3, [r3, #8]
    51d2:	009b      	lsls	r3, r3, #2
    51d4:	4a51      	ldr	r2, [pc, #324]	; (531c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51d6:	4413      	add	r3, r2
    51d8:	4a52      	ldr	r2, [pc, #328]	; (5324 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    51da:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    51dc:	4b4e      	ldr	r3, [pc, #312]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51de:	7a5b      	ldrb	r3, [r3, #9]
    51e0:	009b      	lsls	r3, r3, #2
    51e2:	4a4e      	ldr	r2, [pc, #312]	; (531c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51e4:	4413      	add	r3, r2
    51e6:	4a50      	ldr	r2, [pc, #320]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    51e8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    51ea:	4b4b      	ldr	r3, [pc, #300]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51ec:	7adb      	ldrb	r3, [r3, #11]
    51ee:	009b      	lsls	r3, r3, #2
    51f0:	4a4a      	ldr	r2, [pc, #296]	; (531c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51f2:	4413      	add	r3, r2
    51f4:	4a4d      	ldr	r2, [pc, #308]	; (532c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    51f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    51f8:	4b47      	ldr	r3, [pc, #284]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51fa:	7b1b      	ldrb	r3, [r3, #12]
    51fc:	009b      	lsls	r3, r3, #2
    51fe:	4a47      	ldr	r2, [pc, #284]	; (531c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5200:	4413      	add	r3, r2
    5202:	4a4b      	ldr	r2, [pc, #300]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5204:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5206:	4b44      	ldr	r3, [pc, #272]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5208:	7b9b      	ldrb	r3, [r3, #14]
    520a:	009b      	lsls	r3, r3, #2
    520c:	4a43      	ldr	r2, [pc, #268]	; (531c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    520e:	4413      	add	r3, r2
    5210:	4a48      	ldr	r2, [pc, #288]	; (5334 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5212:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5214:	4b48      	ldr	r3, [pc, #288]	; (5338 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	2b00      	cmp	r3, #0
    521a:	d002      	beq.n	5222 <Clock_Ip_ClockInitializeObjects+0xda>
    521c:	9b01      	ldr	r3, [sp, #4]
    521e:	2b00      	cmp	r3, #0
    5220:	d003      	beq.n	522a <Clock_Ip_ClockInitializeObjects+0xe2>
    5222:	4b46      	ldr	r3, [pc, #280]	; (533c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	2b00      	cmp	r3, #0
    5228:	d056      	beq.n	52d8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    522a:	f7ff fc09 	bl	4a40 <getFircConfig>
    522e:	4603      	mov	r3, r0
    5230:	4a43      	ldr	r2, [pc, #268]	; (5340 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5232:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5234:	f7ff fc60 	bl	4af8 <getSoscConfig>
    5238:	4603      	mov	r3, r0
    523a:	4a42      	ldr	r2, [pc, #264]	; (5344 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    523c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    523e:	f7ff fca7 	bl	4b90 <getSpllConfig>
    5242:	4603      	mov	r3, r0
    5244:	4a40      	ldr	r2, [pc, #256]	; (5348 <Clock_Ip_ClockInitializeObjects+0x200>)
    5246:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5248:	2019      	movs	r0, #25
    524a:	f7ff fcfb 	bl	4c44 <getSelectorConfig>
    524e:	4603      	mov	r3, r0
    5250:	4a3e      	ldr	r2, [pc, #248]	; (534c <Clock_Ip_ClockInitializeObjects+0x204>)
    5252:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5254:	201a      	movs	r0, #26
    5256:	f7ff fcf5 	bl	4c44 <getSelectorConfig>
    525a:	4603      	mov	r3, r0
    525c:	4a3c      	ldr	r2, [pc, #240]	; (5350 <Clock_Ip_ClockInitializeObjects+0x208>)
    525e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5260:	201b      	movs	r0, #27
    5262:	f7ff fcef 	bl	4c44 <getSelectorConfig>
    5266:	4603      	mov	r3, r0
    5268:	4a3a      	ldr	r2, [pc, #232]	; (5354 <Clock_Ip_ClockInitializeObjects+0x20c>)
    526a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    526c:	201d      	movs	r0, #29
    526e:	f7ff fd7b 	bl	4d68 <getCoreDividerConfig>
    5272:	4603      	mov	r3, r0
    5274:	4a38      	ldr	r2, [pc, #224]	; (5358 <Clock_Ip_ClockInitializeObjects+0x210>)
    5276:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5278:	201e      	movs	r0, #30
    527a:	f7ff fd75 	bl	4d68 <getCoreDividerConfig>
    527e:	4603      	mov	r3, r0
    5280:	4a36      	ldr	r2, [pc, #216]	; (535c <Clock_Ip_ClockInitializeObjects+0x214>)
    5282:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5284:	201f      	movs	r0, #31
    5286:	f7ff fd6f 	bl	4d68 <getCoreDividerConfig>
    528a:	4603      	mov	r3, r0
    528c:	4a34      	ldr	r2, [pc, #208]	; (5360 <Clock_Ip_ClockInitializeObjects+0x218>)
    528e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5290:	2021      	movs	r0, #33	; 0x21
    5292:	f7ff fe0f 	bl	4eb4 <getBusDividerConfig>
    5296:	4603      	mov	r3, r0
    5298:	4a32      	ldr	r2, [pc, #200]	; (5364 <Clock_Ip_ClockInitializeObjects+0x21c>)
    529a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    529c:	2022      	movs	r0, #34	; 0x22
    529e:	f7ff fe09 	bl	4eb4 <getBusDividerConfig>
    52a2:	4603      	mov	r3, r0
    52a4:	4a30      	ldr	r2, [pc, #192]	; (5368 <Clock_Ip_ClockInitializeObjects+0x220>)
    52a6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    52a8:	2023      	movs	r0, #35	; 0x23
    52aa:	f7ff fe03 	bl	4eb4 <getBusDividerConfig>
    52ae:	4603      	mov	r3, r0
    52b0:	4a2e      	ldr	r2, [pc, #184]	; (536c <Clock_Ip_ClockInitializeObjects+0x224>)
    52b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    52b4:	2025      	movs	r0, #37	; 0x25
    52b6:	f7ff fea3 	bl	5000 <getSlowDividerConfig>
    52ba:	4603      	mov	r3, r0
    52bc:	4a2c      	ldr	r2, [pc, #176]	; (5370 <Clock_Ip_ClockInitializeObjects+0x228>)
    52be:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    52c0:	2026      	movs	r0, #38	; 0x26
    52c2:	f7ff fe9d 	bl	5000 <getSlowDividerConfig>
    52c6:	4603      	mov	r3, r0
    52c8:	4a2a      	ldr	r2, [pc, #168]	; (5374 <Clock_Ip_ClockInitializeObjects+0x22c>)
    52ca:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    52cc:	2027      	movs	r0, #39	; 0x27
    52ce:	f7ff fe97 	bl	5000 <getSlowDividerConfig>
    52d2:	4603      	mov	r3, r0
    52d4:	4a28      	ldr	r2, [pc, #160]	; (5378 <Clock_Ip_ClockInitializeObjects+0x230>)
    52d6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    52d8:	bf00      	nop
    52da:	b003      	add	sp, #12
    52dc:	f85d fb04 	ldr.w	pc, [sp], #4
    52e0:	1fff8cd0 	.word	0x1fff8cd0
    52e4:	0001003c 	.word	0x0001003c
    52e8:	00010688 	.word	0x00010688
    52ec:	1fff8b9c 	.word	0x1fff8b9c
    52f0:	0000fffc 	.word	0x0000fffc
    52f4:	000105d0 	.word	0x000105d0
    52f8:	1fff8ba0 	.word	0x1fff8ba0
    52fc:	0001000c 	.word	0x0001000c
    5300:	0001063c 	.word	0x0001063c
    5304:	1fff8ba4 	.word	0x1fff8ba4
    5308:	0001004c 	.word	0x0001004c
    530c:	000106b4 	.word	0x000106b4
    5310:	1fff8ba8 	.word	0x1fff8ba8
    5314:	1fff8be4 	.word	0x1fff8be4
    5318:	0000ffdc 	.word	0x0000ffdc
    531c:	0001058c 	.word	0x0001058c
    5320:	1fff8bac 	.word	0x1fff8bac
    5324:	1fff8be8 	.word	0x1fff8be8
    5328:	1fff8bb0 	.word	0x1fff8bb0
    532c:	1fff8bec 	.word	0x1fff8bec
    5330:	1fff8bb4 	.word	0x1fff8bb4
    5334:	1fff8bf0 	.word	0x1fff8bf0
    5338:	1fff8b19 	.word	0x1fff8b19
    533c:	1fff8b10 	.word	0x1fff8b10
    5340:	1fff8bb8 	.word	0x1fff8bb8
    5344:	1fff8bbc 	.word	0x1fff8bbc
    5348:	1fff8bc0 	.word	0x1fff8bc0
    534c:	1fff8bc4 	.word	0x1fff8bc4
    5350:	1fff8bc8 	.word	0x1fff8bc8
    5354:	1fff8bf4 	.word	0x1fff8bf4
    5358:	1fff8bcc 	.word	0x1fff8bcc
    535c:	1fff8bd0 	.word	0x1fff8bd0
    5360:	1fff8bf8 	.word	0x1fff8bf8
    5364:	1fff8bd4 	.word	0x1fff8bd4
    5368:	1fff8bd8 	.word	0x1fff8bd8
    536c:	1fff8bfc 	.word	0x1fff8bfc
    5370:	1fff8bdc 	.word	0x1fff8bdc
    5374:	1fff8be0 	.word	0x1fff8be0
    5378:	1fff8c00 	.word	0x1fff8c00

0000537c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    537c:	b500      	push	{lr}
    537e:	b083      	sub	sp, #12
    5380:	9001      	str	r0, [sp, #4]
    5382:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	2b03      	cmp	r3, #3
    5388:	f000 8090 	beq.w	54ac <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    538c:	9b01      	ldr	r3, [sp, #4]
    538e:	2b03      	cmp	r3, #3
    5390:	f200 80d3 	bhi.w	553a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5394:	9b01      	ldr	r3, [sp, #4]
    5396:	2b00      	cmp	r3, #0
    5398:	d040      	beq.n	541c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    539a:	9b01      	ldr	r3, [sp, #4]
    539c:	3b01      	subs	r3, #1
    539e:	2b01      	cmp	r3, #1
    53a0:	f200 80cb 	bhi.w	553a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    53a4:	9b00      	ldr	r3, [sp, #0]
    53a6:	2b00      	cmp	r3, #0
    53a8:	f040 80c9 	bne.w	553e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    53ac:	4b68      	ldr	r3, [pc, #416]	; (5550 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    53ae:	2200      	movs	r2, #0
    53b0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    53b2:	4b68      	ldr	r3, [pc, #416]	; (5554 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	685b      	ldr	r3, [r3, #4]
    53b8:	4a67      	ldr	r2, [pc, #412]	; (5558 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    53ba:	6812      	ldr	r2, [r2, #0]
    53bc:	4610      	mov	r0, r2
    53be:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    53c0:	4b66      	ldr	r3, [pc, #408]	; (555c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	4a66      	ldr	r2, [pc, #408]	; (5560 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    53c8:	6812      	ldr	r2, [r2, #0]
    53ca:	4610      	mov	r0, r2
    53cc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    53ce:	4b65      	ldr	r3, [pc, #404]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	4a64      	ldr	r2, [pc, #400]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    53d6:	6812      	ldr	r2, [r2, #0]
    53d8:	4610      	mov	r0, r2
    53da:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    53dc:	4b63      	ldr	r3, [pc, #396]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    53de:	681b      	ldr	r3, [r3, #0]
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	4a63      	ldr	r2, [pc, #396]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    53e4:	6812      	ldr	r2, [r2, #0]
    53e6:	4610      	mov	r0, r2
    53e8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    53ea:	4b62      	ldr	r3, [pc, #392]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    53ec:	681b      	ldr	r3, [r3, #0]
    53ee:	691b      	ldr	r3, [r3, #16]
    53f0:	4a61      	ldr	r2, [pc, #388]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    53f2:	6812      	ldr	r2, [r2, #0]
    53f4:	6812      	ldr	r2, [r2, #0]
    53f6:	4610      	mov	r0, r2
    53f8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    53fa:	4b60      	ldr	r3, [pc, #384]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	68db      	ldr	r3, [r3, #12]
    5400:	4a5f      	ldr	r2, [pc, #380]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5402:	6812      	ldr	r2, [r2, #0]
    5404:	6812      	ldr	r2, [r2, #0]
    5406:	4610      	mov	r0, r2
    5408:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    540a:	4b5e      	ldr	r3, [pc, #376]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	689b      	ldr	r3, [r3, #8]
    5410:	4a5d      	ldr	r2, [pc, #372]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5412:	6812      	ldr	r2, [r2, #0]
    5414:	6812      	ldr	r2, [r2, #0]
    5416:	4610      	mov	r0, r2
    5418:	4798      	blx	r3
            }
        }
        break;
    541a:	e090      	b.n	553e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    541c:	9b00      	ldr	r3, [sp, #0]
    541e:	2b02      	cmp	r3, #2
    5420:	f040 808f 	bne.w	5542 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5424:	4b4a      	ldr	r3, [pc, #296]	; (5550 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5426:	2201      	movs	r2, #1
    5428:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    542a:	4b56      	ldr	r3, [pc, #344]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    542c:	681b      	ldr	r3, [r3, #0]
    542e:	685b      	ldr	r3, [r3, #4]
    5430:	4a55      	ldr	r2, [pc, #340]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5432:	6812      	ldr	r2, [r2, #0]
    5434:	4610      	mov	r0, r2
    5436:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5438:	4b50      	ldr	r3, [pc, #320]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    543a:	681b      	ldr	r3, [r3, #0]
    543c:	691b      	ldr	r3, [r3, #16]
    543e:	4a50      	ldr	r2, [pc, #320]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5440:	6812      	ldr	r2, [r2, #0]
    5442:	4610      	mov	r0, r2
    5444:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5446:	4b4d      	ldr	r3, [pc, #308]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	689b      	ldr	r3, [r3, #8]
    544c:	4a4c      	ldr	r2, [pc, #304]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    544e:	6812      	ldr	r2, [r2, #0]
    5450:	4610      	mov	r0, r2
    5452:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5454:	4b47      	ldr	r3, [pc, #284]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	68db      	ldr	r3, [r3, #12]
    545a:	4a47      	ldr	r2, [pc, #284]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    545c:	6812      	ldr	r2, [r2, #0]
    545e:	4610      	mov	r0, r2
    5460:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5462:	4b44      	ldr	r3, [pc, #272]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	689b      	ldr	r3, [r3, #8]
    5468:	4a43      	ldr	r2, [pc, #268]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    546a:	6812      	ldr	r2, [r2, #0]
    546c:	6812      	ldr	r2, [r2, #0]
    546e:	4610      	mov	r0, r2
    5470:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5472:	4b38      	ldr	r3, [pc, #224]	; (5554 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	685b      	ldr	r3, [r3, #4]
    5478:	4a44      	ldr	r2, [pc, #272]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    547a:	6812      	ldr	r2, [r2, #0]
    547c:	4610      	mov	r0, r2
    547e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5480:	4b36      	ldr	r3, [pc, #216]	; (555c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	4a42      	ldr	r2, [pc, #264]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5488:	6812      	ldr	r2, [r2, #0]
    548a:	4610      	mov	r0, r2
    548c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    548e:	4b35      	ldr	r3, [pc, #212]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	4a3f      	ldr	r2, [pc, #252]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5496:	6812      	ldr	r2, [r2, #0]
    5498:	4610      	mov	r0, r2
    549a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    549c:	4b33      	ldr	r3, [pc, #204]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	4a3d      	ldr	r2, [pc, #244]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    54a4:	6812      	ldr	r2, [r2, #0]
    54a6:	4610      	mov	r0, r2
    54a8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    54aa:	e04a      	b.n	5542 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54ac:	9b00      	ldr	r3, [sp, #0]
    54ae:	2b02      	cmp	r3, #2
    54b0:	d149      	bne.n	5546 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54b2:	4b27      	ldr	r3, [pc, #156]	; (5550 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54b4:	2201      	movs	r2, #1
    54b6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54b8:	4b32      	ldr	r3, [pc, #200]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	685b      	ldr	r3, [r3, #4]
    54be:	4a32      	ldr	r2, [pc, #200]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54c0:	6812      	ldr	r2, [r2, #0]
    54c2:	4610      	mov	r0, r2
    54c4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54c6:	4b2d      	ldr	r3, [pc, #180]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	691b      	ldr	r3, [r3, #16]
    54cc:	4a2c      	ldr	r2, [pc, #176]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54ce:	6812      	ldr	r2, [r2, #0]
    54d0:	4610      	mov	r0, r2
    54d2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54d4:	4b29      	ldr	r3, [pc, #164]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	689b      	ldr	r3, [r3, #8]
    54da:	4a29      	ldr	r2, [pc, #164]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54dc:	6812      	ldr	r2, [r2, #0]
    54de:	4610      	mov	r0, r2
    54e0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54e2:	4b24      	ldr	r3, [pc, #144]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	68db      	ldr	r3, [r3, #12]
    54e8:	4a23      	ldr	r2, [pc, #140]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54ea:	6812      	ldr	r2, [r2, #0]
    54ec:	4610      	mov	r0, r2
    54ee:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    54f0:	4b20      	ldr	r3, [pc, #128]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	689b      	ldr	r3, [r3, #8]
    54f6:	4a20      	ldr	r2, [pc, #128]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54f8:	6812      	ldr	r2, [r2, #0]
    54fa:	6812      	ldr	r2, [r2, #0]
    54fc:	4610      	mov	r0, r2
    54fe:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5500:	4b26      	ldr	r3, [pc, #152]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	685b      	ldr	r3, [r3, #4]
    5506:	4a26      	ldr	r2, [pc, #152]	; (55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	4610      	mov	r0, r2
    550c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    550e:	4b25      	ldr	r3, [pc, #148]	; (55a4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	4a24      	ldr	r2, [pc, #144]	; (55a8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5516:	6812      	ldr	r2, [r2, #0]
    5518:	4610      	mov	r0, r2
    551a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    551c:	4b23      	ldr	r3, [pc, #140]	; (55ac <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	4a23      	ldr	r2, [pc, #140]	; (55b0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5524:	6812      	ldr	r2, [r2, #0]
    5526:	4610      	mov	r0, r2
    5528:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    552a:	4b22      	ldr	r3, [pc, #136]	; (55b4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	4a21      	ldr	r2, [pc, #132]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5532:	6812      	ldr	r2, [r2, #0]
    5534:	4610      	mov	r0, r2
    5536:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5538:	e005      	b.n	5546 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    553a:	bf00      	nop
    553c:	e004      	b.n	5548 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    553e:	bf00      	nop
    5540:	e002      	b.n	5548 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5542:	bf00      	nop
    5544:	e000      	b.n	5548 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5546:	bf00      	nop
    }

}
    5548:	bf00      	nop
    554a:	b003      	add	sp, #12
    554c:	f85d fb04 	ldr.w	pc, [sp], #4
    5550:	1fff8b19 	.word	0x1fff8b19
    5554:	1fff8ba8 	.word	0x1fff8ba8
    5558:	1fff8bc8 	.word	0x1fff8bc8
    555c:	1fff8bac 	.word	0x1fff8bac
    5560:	1fff8bd0 	.word	0x1fff8bd0
    5564:	1fff8bb0 	.word	0x1fff8bb0
    5568:	1fff8bd8 	.word	0x1fff8bd8
    556c:	1fff8bb4 	.word	0x1fff8bb4
    5570:	1fff8be0 	.word	0x1fff8be0
    5574:	1fff8b9c 	.word	0x1fff8b9c
    5578:	1fff8bc0 	.word	0x1fff8bc0
    557c:	1fff8ba0 	.word	0x1fff8ba0
    5580:	1fff8bbc 	.word	0x1fff8bbc
    5584:	1fff8ba4 	.word	0x1fff8ba4
    5588:	1fff8bb8 	.word	0x1fff8bb8
    558c:	1fff8bc4 	.word	0x1fff8bc4
    5590:	1fff8bcc 	.word	0x1fff8bcc
    5594:	1fff8bd4 	.word	0x1fff8bd4
    5598:	1fff8bdc 	.word	0x1fff8bdc
    559c:	1fff8be4 	.word	0x1fff8be4
    55a0:	1fff8bf4 	.word	0x1fff8bf4
    55a4:	1fff8be8 	.word	0x1fff8be8
    55a8:	1fff8bf8 	.word	0x1fff8bf8
    55ac:	1fff8bec 	.word	0x1fff8bec
    55b0:	1fff8bfc 	.word	0x1fff8bfc
    55b4:	1fff8bf0 	.word	0x1fff8bf0
    55b8:	1fff8c00 	.word	0x1fff8c00

000055bc <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    55bc:	b500      	push	{lr}
    55be:	b083      	sub	sp, #12
    55c0:	9001      	str	r0, [sp, #4]
    55c2:	9100      	str	r1, [sp, #0]
    switch(Command)
    55c4:	9b00      	ldr	r3, [sp, #0]
    55c6:	2b04      	cmp	r3, #4
    55c8:	d010      	beq.n	55ec <Clock_Ip_Command+0x30>
    55ca:	9b00      	ldr	r3, [sp, #0]
    55cc:	2b04      	cmp	r3, #4
    55ce:	d811      	bhi.n	55f4 <Clock_Ip_Command+0x38>
    55d0:	9b00      	ldr	r3, [sp, #0]
    55d2:	2b01      	cmp	r3, #1
    55d4:	d006      	beq.n	55e4 <Clock_Ip_Command+0x28>
    55d6:	9b00      	ldr	r3, [sp, #0]
    55d8:	2b02      	cmp	r3, #2
    55da:	d10b      	bne.n	55f4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    55dc:	9801      	ldr	r0, [sp, #4]
    55de:	f7ff fdb3 	bl	5148 <Clock_Ip_ClockInitializeObjects>
            break;
    55e2:	e008      	b.n	55f6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    55e4:	9801      	ldr	r0, [sp, #4]
    55e6:	f7ff f9db 	bl	49a0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    55ea:	e004      	b.n	55f6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    55ec:	9801      	ldr	r0, [sp, #4]
    55ee:	f7ff f8ed 	bl	47cc <DisableSafeClock>
            break;
    55f2:	e000      	b.n	55f6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    55f4:	bf00      	nop
    }
}
    55f6:	bf00      	nop
    55f8:	b003      	add	sp, #12
    55fa:	f85d fb04 	ldr.w	pc, [sp], #4
    55fe:	bf00      	nop

00005600 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5600:	b500      	push	{lr}
    5602:	b085      	sub	sp, #20
    5604:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5606:	4a20      	ldr	r2, [pc, #128]	; (5688 <Mcu_Init+0x88>)
    5608:	9b01      	ldr	r3, [sp, #4]
    560a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    560c:	2300      	movs	r3, #0
    560e:	9303      	str	r3, [sp, #12]
    5610:	e010      	b.n	5634 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5612:	4b1d      	ldr	r3, [pc, #116]	; (5688 <Mcu_Init+0x88>)
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	6919      	ldr	r1, [r3, #16]
    5618:	9a03      	ldr	r2, [sp, #12]
    561a:	4613      	mov	r3, r2
    561c:	005b      	lsls	r3, r3, #1
    561e:	4413      	add	r3, r2
    5620:	009b      	lsls	r3, r3, #2
    5622:	440b      	add	r3, r1
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	9a03      	ldr	r2, [sp, #12]
    5628:	b2d1      	uxtb	r1, r2
    562a:	4a18      	ldr	r2, [pc, #96]	; (568c <Mcu_Init+0x8c>)
    562c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    562e:	9b03      	ldr	r3, [sp, #12]
    5630:	3301      	adds	r3, #1
    5632:	9303      	str	r3, [sp, #12]
    5634:	4b14      	ldr	r3, [pc, #80]	; (5688 <Mcu_Init+0x88>)
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	689b      	ldr	r3, [r3, #8]
    563a:	9a03      	ldr	r2, [sp, #12]
    563c:	429a      	cmp	r2, r3
    563e:	d3e8      	bcc.n	5612 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5640:	2300      	movs	r3, #0
    5642:	9303      	str	r3, [sp, #12]
    5644:	e010      	b.n	5668 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5646:	4b10      	ldr	r3, [pc, #64]	; (5688 <Mcu_Init+0x88>)
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	6959      	ldr	r1, [r3, #20]
    564c:	9a03      	ldr	r2, [sp, #12]
    564e:	4613      	mov	r3, r2
    5650:	01db      	lsls	r3, r3, #7
    5652:	1a9b      	subs	r3, r3, r2
    5654:	00db      	lsls	r3, r3, #3
    5656:	440b      	add	r3, r1
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	9a03      	ldr	r2, [sp, #12]
    565c:	b2d1      	uxtb	r1, r2
    565e:	4a0c      	ldr	r2, [pc, #48]	; (5690 <Mcu_Init+0x90>)
    5660:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5662:	9b03      	ldr	r3, [sp, #12]
    5664:	3301      	adds	r3, #1
    5666:	9303      	str	r3, [sp, #12]
    5668:	4b07      	ldr	r3, [pc, #28]	; (5688 <Mcu_Init+0x88>)
    566a:	681b      	ldr	r3, [r3, #0]
    566c:	68db      	ldr	r3, [r3, #12]
    566e:	9a03      	ldr	r2, [sp, #12]
    5670:	429a      	cmp	r2, r3
    5672:	d3e8      	bcc.n	5646 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5674:	4b04      	ldr	r3, [pc, #16]	; (5688 <Mcu_Init+0x88>)
    5676:	681b      	ldr	r3, [r3, #0]
    5678:	699b      	ldr	r3, [r3, #24]
    567a:	4618      	mov	r0, r3
    567c:	f000 f88a 	bl	5794 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5680:	bf00      	nop
    5682:	b005      	add	sp, #20
    5684:	f85d fb04 	ldr.w	pc, [sp], #4
    5688:	1fff8cdc 	.word	0x1fff8cdc
    568c:	1fff8cd8 	.word	0x1fff8cd8
    5690:	1fff8cd4 	.word	0x1fff8cd4

00005694 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5694:	b084      	sub	sp, #16
    5696:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5698:	2301      	movs	r3, #1
    569a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    569e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    56a2:	4618      	mov	r0, r3
    56a4:	b004      	add	sp, #16
    56a6:	4770      	bx	lr

000056a8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    56a8:	b500      	push	{lr}
    56aa:	b085      	sub	sp, #20
    56ac:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    56ae:	4a0e      	ldr	r2, [pc, #56]	; (56e8 <Mcu_InitClock+0x40>)
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	4413      	add	r3, r2
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    56ba:	4b0c      	ldr	r3, [pc, #48]	; (56ec <Mcu_InitClock+0x44>)
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	6959      	ldr	r1, [r3, #20]
    56c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    56c4:	4613      	mov	r3, r2
    56c6:	01db      	lsls	r3, r3, #7
    56c8:	1a9b      	subs	r3, r3, r2
    56ca:	00db      	lsls	r3, r3, #3
    56cc:	440b      	add	r3, r1
    56ce:	4618      	mov	r0, r3
    56d0:	f000 f86a 	bl	57a8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    56d4:	2300      	movs	r3, #0
    56d6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    56da:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    56de:	4618      	mov	r0, r3
    56e0:	b005      	add	sp, #20
    56e2:	f85d fb04 	ldr.w	pc, [sp], #4
    56e6:	bf00      	nop
    56e8:	1fff8cd4 	.word	0x1fff8cd4
    56ec:	1fff8cdc 	.word	0x1fff8cdc

000056f0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    56f0:	b500      	push	{lr}
    56f2:	b085      	sub	sp, #20
    56f4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    56f6:	4a0d      	ldr	r2, [pc, #52]	; (572c <Mcu_SetMode+0x3c>)
    56f8:	9b01      	ldr	r3, [sp, #4]
    56fa:	4413      	add	r3, r2
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5702:	f009 f9b1 	bl	ea68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5706:	4b0a      	ldr	r3, [pc, #40]	; (5730 <Mcu_SetMode+0x40>)
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	6919      	ldr	r1, [r3, #16]
    570c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5710:	4613      	mov	r3, r2
    5712:	005b      	lsls	r3, r3, #1
    5714:	4413      	add	r3, r2
    5716:	009b      	lsls	r3, r3, #2
    5718:	440b      	add	r3, r1
    571a:	4618      	mov	r0, r3
    571c:	f000 f84e 	bl	57bc <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5720:	f009 f9ce 	bl	eac0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5724:	bf00      	nop
    5726:	b005      	add	sp, #20
    5728:	f85d fb04 	ldr.w	pc, [sp], #4
    572c:	1fff8cd8 	.word	0x1fff8cd8
    5730:	1fff8cdc 	.word	0x1fff8cdc

00005734 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5734:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5736:	2302      	movs	r3, #2
    5738:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    573a:	9b01      	ldr	r3, [sp, #4]
}
    573c:	4618      	mov	r0, r3
    573e:	b002      	add	sp, #8
    5740:	4770      	bx	lr

00005742 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5742:	b500      	push	{lr}
    5744:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5746:	f000 f843 	bl	57d0 <Mcu_Ipw_GetResetReason>
    574a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    574c:	9b01      	ldr	r3, [sp, #4]
}
    574e:	4618      	mov	r0, r3
    5750:	b003      	add	sp, #12
    5752:	f85d fb04 	ldr.w	pc, [sp], #4

00005756 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5756:	b500      	push	{lr}
    5758:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    575a:	f000 f83f 	bl	57dc <Mcu_Ipw_GetResetRawValue>
    575e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5760:	9b01      	ldr	r3, [sp, #4]
}
    5762:	4618      	mov	r0, r3
    5764:	b003      	add	sp, #12
    5766:	f85d fb04 	ldr.w	pc, [sp], #4

0000576a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    576a:	b500      	push	{lr}
    576c:	b083      	sub	sp, #12
    576e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5770:	9801      	ldr	r0, [sp, #4]
    5772:	f000 f839 	bl	57e8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5776:	bf00      	nop
    5778:	b003      	add	sp, #12
    577a:	f85d fb04 	ldr.w	pc, [sp], #4

0000577e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    577e:	b082      	sub	sp, #8
    5780:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5782:	4b03      	ldr	r3, [pc, #12]	; (5790 <Mcu_ClkSrcFailureNotification+0x12>)
    5784:	681b      	ldr	r3, [r3, #0]
    5786:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5788:	bf00      	nop
    578a:	b002      	add	sp, #8
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	1fff8cdc 	.word	0x1fff8cdc

00005794 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5794:	b500      	push	{lr}
    5796:	b083      	sub	sp, #12
    5798:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    579a:	9801      	ldr	r0, [sp, #4]
    579c:	f000 f882 	bl	58a4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    57a0:	bf00      	nop
    57a2:	b003      	add	sp, #12
    57a4:	f85d fb04 	ldr.w	pc, [sp], #4

000057a8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    57a8:	b500      	push	{lr}
    57aa:	b083      	sub	sp, #12
    57ac:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    57ae:	9801      	ldr	r0, [sp, #4]
    57b0:	f7fc fc6a 	bl	2088 <Clock_Ip_InitClock>
}
    57b4:	bf00      	nop
    57b6:	b003      	add	sp, #12
    57b8:	f85d fb04 	ldr.w	pc, [sp], #4

000057bc <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    57bc:	b500      	push	{lr}
    57be:	b083      	sub	sp, #12
    57c0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    57c2:	9801      	ldr	r0, [sp, #4]
    57c4:	f000 f820 	bl	5808 <Power_Ip_SetMode>
}
    57c8:	bf00      	nop
    57ca:	b003      	add	sp, #12
    57cc:	f85d fb04 	ldr.w	pc, [sp], #4

000057d0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    57d0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    57d2:	f000 f84f 	bl	5874 <Power_Ip_GetResetReason>
    57d6:	4603      	mov	r3, r0
}
    57d8:	4618      	mov	r0, r3
    57da:	bd08      	pop	{r3, pc}

000057dc <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    57dc:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    57de:	f000 f857 	bl	5890 <Power_Ip_GetResetRawValue>
    57e2:	4603      	mov	r3, r0
}
    57e4:	4618      	mov	r0, r3
    57e6:	bd08      	pop	{r3, pc}

000057e8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57e8:	b500      	push	{lr}
    57ea:	b083      	sub	sp, #12
    57ec:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    57ee:	9b01      	ldr	r3, [sp, #4]
    57f0:	2b00      	cmp	r3, #0
    57f2:	d102      	bne.n	57fa <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    57f4:	f000 f86c 	bl	58d0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    57f8:	e001      	b.n	57fe <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    57fa:	f000 f86e 	bl	58da <Power_Ip_EnableSleepOnExit>
}
    57fe:	bf00      	nop
    5800:	b003      	add	sp, #12
    5802:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005808 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5808:	b500      	push	{lr}
    580a:	b085      	sub	sp, #20
    580c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    580e:	9b01      	ldr	r3, [sp, #4]
    5810:	685b      	ldr	r3, [r3, #4]
    5812:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5814:	9802      	ldr	r0, [sp, #8]
    5816:	f000 f9f5 	bl	5c04 <Power_Ip_SMC_ModeCheckEntry>
    581a:	4603      	mov	r3, r0
    581c:	2b00      	cmp	r3, #0
    581e:	d002      	beq.n	5826 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5820:	2301      	movs	r3, #1
    5822:	9303      	str	r3, [sp, #12]
    5824:	e003      	b.n	582e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5826:	9801      	ldr	r0, [sp, #4]
    5828:	f000 fa1e 	bl	5c68 <Power_Ip_SMC_ModeConfig>
    582c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    582e:	9b03      	ldr	r3, [sp, #12]
    5830:	2b01      	cmp	r3, #1
    5832:	d103      	bne.n	583c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5834:	21ff      	movs	r1, #255	; 0xff
    5836:	2003      	movs	r0, #3
    5838:	f000 f8f4 	bl	5a24 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    583c:	bf00      	nop
    583e:	b005      	add	sp, #20
    5840:	f85d fb04 	ldr.w	pc, [sp], #4

00005844 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5844:	b084      	sub	sp, #16
    5846:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5848:	230c      	movs	r3, #12
    584a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    584c:	4a08      	ldr	r2, [pc, #32]	; (5870 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    584e:	9b01      	ldr	r3, [sp, #4]
    5850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5854:	2b0e      	cmp	r3, #14
    5856:	d805      	bhi.n	5864 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5858:	4a05      	ldr	r2, [pc, #20]	; (5870 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    585a:	9b01      	ldr	r3, [sp, #4]
    585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5860:	9303      	str	r3, [sp, #12]
    5862:	e001      	b.n	5868 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5864:	230c      	movs	r3, #12
    5866:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5868:	9b03      	ldr	r3, [sp, #12]
}
    586a:	4618      	mov	r0, r3
    586c:	b004      	add	sp, #16
    586e:	4770      	bx	lr
    5870:	00010728 	.word	0x00010728

00005874 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5874:	b500      	push	{lr}
    5876:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5878:	f000 f940 	bl	5afc <Power_Ip_RCM_GetResetReason>
    587c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    587e:	9801      	ldr	r0, [sp, #4]
    5880:	f7ff ffe0 	bl	5844 <Power_Ip_ConvertIntergeToResetType>
    5884:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5886:	9b00      	ldr	r3, [sp, #0]
}
    5888:	4618      	mov	r0, r3
    588a:	b003      	add	sp, #12
    588c:	f85d fb04 	ldr.w	pc, [sp], #4

00005890 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5890:	b500      	push	{lr}
    5892:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5894:	f000 f98a 	bl	5bac <Power_Ip_RCM_GetResetRawValue>
    5898:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    589a:	9b01      	ldr	r3, [sp, #4]
}
    589c:	4618      	mov	r0, r3
    589e:	b003      	add	sp, #12
    58a0:	f85d fb04 	ldr.w	pc, [sp], #4

000058a4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    58a4:	b500      	push	{lr}
    58a6:	b083      	sub	sp, #12
    58a8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    58aa:	9b01      	ldr	r3, [sp, #4]
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	4618      	mov	r0, r3
    58b0:	f000 f90e 	bl	5ad0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    58b4:	9b01      	ldr	r3, [sp, #4]
    58b6:	685b      	ldr	r3, [r3, #4]
    58b8:	4618      	mov	r0, r3
    58ba:	f000 f86d 	bl	5998 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    58be:	9b01      	ldr	r3, [sp, #4]
    58c0:	689b      	ldr	r3, [r3, #8]
    58c2:	4618      	mov	r0, r3
    58c4:	f000 f990 	bl	5be8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    58c8:	bf00      	nop
    58ca:	b003      	add	sp, #12
    58cc:	f85d fb04 	ldr.w	pc, [sp], #4

000058d0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    58d0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    58d2:	f000 f811 	bl	58f8 <Power_Ip_CM4_DisableSleepOnExit>
}
    58d6:	bf00      	nop
    58d8:	bd08      	pop	{r3, pc}

000058da <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    58da:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    58dc:	f000 f820 	bl	5920 <Power_Ip_CM4_EnableSleepOnExit>
}
    58e0:	bf00      	nop
    58e2:	bd08      	pop	{r3, pc}

000058e4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    58e4:	b082      	sub	sp, #8
    58e6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    58e8:	4a02      	ldr	r2, [pc, #8]	; (58f4 <Power_Ip_InstallNotificationsCallback+0x10>)
    58ea:	9b01      	ldr	r3, [sp, #4]
    58ec:	6013      	str	r3, [r2, #0]
}
    58ee:	bf00      	nop
    58f0:	b002      	add	sp, #8
    58f2:	4770      	bx	lr
    58f4:	1fff8b1c 	.word	0x1fff8b1c

000058f8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    58f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    58fa:	2300      	movs	r3, #0
    58fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    58fe:	4b07      	ldr	r3, [pc, #28]	; (591c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5900:	681b      	ldr	r3, [r3, #0]
    5902:	685b      	ldr	r3, [r3, #4]
    5904:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5906:	9b01      	ldr	r3, [sp, #4]
    5908:	f023 0302 	bic.w	r3, r3, #2
    590c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    590e:	4b03      	ldr	r3, [pc, #12]	; (591c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	9a01      	ldr	r2, [sp, #4]
    5914:	605a      	str	r2, [r3, #4]
}
    5916:	bf00      	nop
    5918:	b002      	add	sp, #8
    591a:	4770      	bx	lr
    591c:	1fff8b20 	.word	0x1fff8b20

00005920 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5920:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5922:	2300      	movs	r3, #0
    5924:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5926:	4b07      	ldr	r3, [pc, #28]	; (5944 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	685b      	ldr	r3, [r3, #4]
    592c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    592e:	9b01      	ldr	r3, [sp, #4]
    5930:	f043 0302 	orr.w	r3, r3, #2
    5934:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5936:	4b03      	ldr	r3, [pc, #12]	; (5944 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	9a01      	ldr	r2, [sp, #4]
    593c:	605a      	str	r2, [r3, #4]
}
    593e:	bf00      	nop
    5940:	b002      	add	sp, #8
    5942:	4770      	bx	lr
    5944:	1fff8b20 	.word	0x1fff8b20

00005948 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5948:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    594a:	2300      	movs	r3, #0
    594c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    594e:	4b07      	ldr	r3, [pc, #28]	; (596c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	685b      	ldr	r3, [r3, #4]
    5954:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5956:	9b01      	ldr	r3, [sp, #4]
    5958:	f043 0304 	orr.w	r3, r3, #4
    595c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    595e:	4b03      	ldr	r3, [pc, #12]	; (596c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	9a01      	ldr	r2, [sp, #4]
    5964:	605a      	str	r2, [r3, #4]
}
    5966:	bf00      	nop
    5968:	b002      	add	sp, #8
    596a:	4770      	bx	lr
    596c:	1fff8b20 	.word	0x1fff8b20

00005970 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5970:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5972:	2300      	movs	r3, #0
    5974:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5976:	4b07      	ldr	r3, [pc, #28]	; (5994 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	685b      	ldr	r3, [r3, #4]
    597c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    597e:	9b01      	ldr	r3, [sp, #4]
    5980:	f023 0304 	bic.w	r3, r3, #4
    5984:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5986:	4b03      	ldr	r3, [pc, #12]	; (5994 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	9a01      	ldr	r2, [sp, #4]
    598c:	605a      	str	r2, [r3, #4]
}
    598e:	bf00      	nop
    5990:	b002      	add	sp, #8
    5992:	4770      	bx	lr
    5994:	1fff8b20 	.word	0x1fff8b20

00005998 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5998:	b084      	sub	sp, #16
    599a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    599c:	4b20      	ldr	r3, [pc, #128]	; (5a20 <Power_Ip_PMC_PowerInit+0x88>)
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    59a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59a8:	f003 030f 	and.w	r3, r3, #15
    59ac:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    59b0:	9b01      	ldr	r3, [sp, #4]
    59b2:	781a      	ldrb	r2, [r3, #0]
    59b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59b8:	4313      	orrs	r3, r2
    59ba:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    59be:	4a18      	ldr	r2, [pc, #96]	; (5a20 <Power_Ip_PMC_PowerInit+0x88>)
    59c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59c4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    59c6:	4b16      	ldr	r3, [pc, #88]	; (5a20 <Power_Ip_PMC_PowerInit+0x88>)
    59c8:	785b      	ldrb	r3, [r3, #1]
    59ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    59ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59d2:	f003 031f 	and.w	r3, r3, #31
    59d6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    59da:	9b01      	ldr	r3, [sp, #4]
    59dc:	785a      	ldrb	r2, [r3, #1]
    59de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59e2:	4313      	orrs	r3, r2
    59e4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    59e8:	4a0d      	ldr	r2, [pc, #52]	; (5a20 <Power_Ip_PMC_PowerInit+0x88>)
    59ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59ee:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    59f0:	4b0b      	ldr	r3, [pc, #44]	; (5a20 <Power_Ip_PMC_PowerInit+0x88>)
    59f2:	789b      	ldrb	r3, [r3, #2]
    59f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    59f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a00:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5a04:	9b01      	ldr	r3, [sp, #4]
    5a06:	789a      	ldrb	r2, [r3, #2]
    5a08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a0c:	4313      	orrs	r3, r2
    5a0e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a12:	4a03      	ldr	r2, [pc, #12]	; (5a20 <Power_Ip_PMC_PowerInit+0x88>)
    5a14:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a18:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5a1a:	bf00      	nop
    5a1c:	b004      	add	sp, #16
    5a1e:	4770      	bx	lr
    5a20:	4007d000 	.word	0x4007d000

00005a24 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a24:	b500      	push	{lr}
    5a26:	b083      	sub	sp, #12
    5a28:	9001      	str	r0, [sp, #4]
    5a2a:	460b      	mov	r3, r1
    5a2c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5a30:	4b05      	ldr	r3, [pc, #20]	; (5a48 <Power_Ip_ReportPowerErrors+0x24>)
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5a38:	4611      	mov	r1, r2
    5a3a:	9801      	ldr	r0, [sp, #4]
    5a3c:	4798      	blx	r3
}
    5a3e:	bf00      	nop
    5a40:	b003      	add	sp, #12
    5a42:	f85d fb04 	ldr.w	pc, [sp], #4
    5a46:	bf00      	nop
    5a48:	1fff8b1c 	.word	0x1fff8b1c

00005a4c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a4c:	b082      	sub	sp, #8
    5a4e:	9001      	str	r0, [sp, #4]
    5a50:	460b      	mov	r3, r1
    5a52:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5a56:	bf00      	nop
    5a58:	b002      	add	sp, #8
    5a5a:	4770      	bx	lr

00005a5c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5a5c:	b500      	push	{lr}
    5a5e:	b085      	sub	sp, #20
    5a60:	9003      	str	r0, [sp, #12]
    5a62:	9102      	str	r1, [sp, #8]
    5a64:	9201      	str	r2, [sp, #4]
    5a66:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5a68:	2000      	movs	r0, #0
    5a6a:	f7fc f83d 	bl	1ae8 <OsIf_GetCounter>
    5a6e:	4602      	mov	r2, r0
    5a70:	9b03      	ldr	r3, [sp, #12]
    5a72:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5a74:	9b02      	ldr	r3, [sp, #8]
    5a76:	2200      	movs	r2, #0
    5a78:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5a7a:	2100      	movs	r1, #0
    5a7c:	9800      	ldr	r0, [sp, #0]
    5a7e:	f7fc f87f 	bl	1b80 <OsIf_MicrosToTicks>
    5a82:	4602      	mov	r2, r0
    5a84:	9b01      	ldr	r3, [sp, #4]
    5a86:	601a      	str	r2, [r3, #0]
}
    5a88:	bf00      	nop
    5a8a:	b005      	add	sp, #20
    5a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a90 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5a90:	b500      	push	{lr}
    5a92:	b087      	sub	sp, #28
    5a94:	9003      	str	r0, [sp, #12]
    5a96:	9102      	str	r1, [sp, #8]
    5a98:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5a9a:	2300      	movs	r3, #0
    5a9c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5aa0:	2100      	movs	r1, #0
    5aa2:	9803      	ldr	r0, [sp, #12]
    5aa4:	f7fc f839 	bl	1b1a <OsIf_GetElapsed>
    5aa8:	4602      	mov	r2, r0
    5aaa:	9b02      	ldr	r3, [sp, #8]
    5aac:	681b      	ldr	r3, [r3, #0]
    5aae:	441a      	add	r2, r3
    5ab0:	9b02      	ldr	r3, [sp, #8]
    5ab2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5ab4:	9b02      	ldr	r3, [sp, #8]
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	9a01      	ldr	r2, [sp, #4]
    5aba:	429a      	cmp	r2, r3
    5abc:	d802      	bhi.n	5ac4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5abe:	2301      	movs	r3, #1
    5ac0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5ac4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5ac8:	4618      	mov	r0, r3
    5aca:	b007      	add	sp, #28
    5acc:	f85d fb04 	ldr.w	pc, [sp], #4

00005ad0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5ad0:	b082      	sub	sp, #8
    5ad2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5ad4:	9b01      	ldr	r3, [sp, #4]
    5ad6:	681a      	ldr	r2, [r3, #0]
    5ad8:	4907      	ldr	r1, [pc, #28]	; (5af8 <Power_Ip_RCM_ResetInit+0x28>)
    5ada:	f641 7307 	movw	r3, #7943	; 0x1f07
    5ade:	4013      	ands	r3, r2
    5ae0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5ae2:	9b01      	ldr	r3, [sp, #4]
    5ae4:	685a      	ldr	r2, [r3, #4]
    5ae6:	4904      	ldr	r1, [pc, #16]	; (5af8 <Power_Ip_RCM_ResetInit+0x28>)
    5ae8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5aec:	4013      	ands	r3, r2
    5aee:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5af0:	bf00      	nop
    5af2:	b002      	add	sp, #8
    5af4:	4770      	bx	lr
    5af6:	bf00      	nop
    5af8:	4007f000 	.word	0x4007f000

00005afc <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5afc:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5afe:	230c      	movs	r3, #12
    5b00:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b02:	2300      	movs	r3, #0
    5b04:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5b06:	2300      	movs	r3, #0
    5b08:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5b0a:	2300      	movs	r3, #0
    5b0c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b0e:	4b25      	ldr	r3, [pc, #148]	; (5ba4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b10:	699a      	ldr	r2, [r3, #24]
    5b12:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b16:	4013      	ands	r3, r2
    5b18:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5b1a:	9b03      	ldr	r3, [sp, #12]
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	d008      	beq.n	5b32 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5b20:	4920      	ldr	r1, [pc, #128]	; (5ba4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b22:	9a03      	ldr	r2, [sp, #12]
    5b24:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b28:	4013      	ands	r3, r2
    5b2a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b2c:	4a1e      	ldr	r2, [pc, #120]	; (5ba8 <Power_Ip_RCM_GetResetReason+0xac>)
    5b2e:	9b03      	ldr	r3, [sp, #12]
    5b30:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5b32:	4b1d      	ldr	r3, [pc, #116]	; (5ba8 <Power_Ip_RCM_GetResetReason+0xac>)
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5b38:	9a02      	ldr	r2, [sp, #8]
    5b3a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b3e:	4013      	ands	r3, r2
    5b40:	2b82      	cmp	r3, #130	; 0x82
    5b42:	d102      	bne.n	5b4a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5b44:	2305      	movs	r3, #5
    5b46:	9307      	str	r3, [sp, #28]
    5b48:	e027      	b.n	5b9a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b4a:	2300      	movs	r3, #0
    5b4c:	9306      	str	r3, [sp, #24]
    5b4e:	e021      	b.n	5b94 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5b50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b54:	9b06      	ldr	r3, [sp, #24]
    5b56:	fa22 f303 	lsr.w	r3, r2, r3
    5b5a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5b5c:	9a01      	ldr	r2, [sp, #4]
    5b5e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5b62:	4013      	ands	r3, r2
    5b64:	2b00      	cmp	r3, #0
    5b66:	d012      	beq.n	5b8e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5b68:	9a01      	ldr	r2, [sp, #4]
    5b6a:	9b02      	ldr	r3, [sp, #8]
    5b6c:	4013      	ands	r3, r2
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d00a      	beq.n	5b88 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5b72:	9b05      	ldr	r3, [sp, #20]
    5b74:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5b76:	9b04      	ldr	r3, [sp, #16]
    5b78:	3301      	adds	r3, #1
    5b7a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5b7c:	9b04      	ldr	r3, [sp, #16]
    5b7e:	2b01      	cmp	r3, #1
    5b80:	d902      	bls.n	5b88 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5b82:	230d      	movs	r3, #13
    5b84:	9307      	str	r3, [sp, #28]
                        break;
    5b86:	e008      	b.n	5b9a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5b88:	9b05      	ldr	r3, [sp, #20]
    5b8a:	3301      	adds	r3, #1
    5b8c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b8e:	9b06      	ldr	r3, [sp, #24]
    5b90:	3301      	adds	r3, #1
    5b92:	9306      	str	r3, [sp, #24]
    5b94:	9b06      	ldr	r3, [sp, #24]
    5b96:	2b1f      	cmp	r3, #31
    5b98:	d9da      	bls.n	5b50 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5b9a:	9b07      	ldr	r3, [sp, #28]
}
    5b9c:	4618      	mov	r0, r3
    5b9e:	b008      	add	sp, #32
    5ba0:	4770      	bx	lr
    5ba2:	bf00      	nop
    5ba4:	4007f000 	.word	0x4007f000
    5ba8:	1fff8ce0 	.word	0x1fff8ce0

00005bac <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5bac:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bae:	4b0c      	ldr	r3, [pc, #48]	; (5be0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bb0:	699a      	ldr	r2, [r3, #24]
    5bb2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bb6:	4013      	ands	r3, r2
    5bb8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5bba:	9b01      	ldr	r3, [sp, #4]
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d008      	beq.n	5bd2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bc0:	4907      	ldr	r1, [pc, #28]	; (5be0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bc2:	9a01      	ldr	r2, [sp, #4]
    5bc4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc8:	4013      	ands	r3, r2
    5bca:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bcc:	4a05      	ldr	r2, [pc, #20]	; (5be4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5bce:	9b01      	ldr	r3, [sp, #4]
    5bd0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5bd2:	4b04      	ldr	r3, [pc, #16]	; (5be4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5bd4:	681b      	ldr	r3, [r3, #0]
    5bd6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5bd8:	9b00      	ldr	r3, [sp, #0]
}
    5bda:	4618      	mov	r0, r3
    5bdc:	b002      	add	sp, #8
    5bde:	4770      	bx	lr
    5be0:	4007f000 	.word	0x4007f000
    5be4:	1fff8ce0 	.word	0x1fff8ce0

00005be8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5be8:	b082      	sub	sp, #8
    5bea:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5bec:	9b01      	ldr	r3, [sp, #4]
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	4a03      	ldr	r2, [pc, #12]	; (5c00 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5bf2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5bf6:	6093      	str	r3, [r2, #8]
}
    5bf8:	bf00      	nop
    5bfa:	b002      	add	sp, #8
    5bfc:	4770      	bx	lr
    5bfe:	bf00      	nop
    5c00:	4007e000 	.word	0x4007e000

00005c04 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5c04:	b084      	sub	sp, #16
    5c06:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5c08:	2301      	movs	r3, #1
    5c0a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5c0c:	4b15      	ldr	r3, [pc, #84]	; (5c64 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5c0e:	695b      	ldr	r3, [r3, #20]
    5c10:	b2db      	uxtb	r3, r3
    5c12:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c14:	9b01      	ldr	r3, [sp, #4]
    5c16:	2b02      	cmp	r3, #2
    5c18:	d012      	beq.n	5c40 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5c1a:	9b01      	ldr	r3, [sp, #4]
    5c1c:	2b02      	cmp	r3, #2
    5c1e:	d818      	bhi.n	5c52 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5c20:	9b01      	ldr	r3, [sp, #4]
    5c22:	2b00      	cmp	r3, #0
    5c24:	d003      	beq.n	5c2e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5c26:	9b01      	ldr	r3, [sp, #4]
    5c28:	2b01      	cmp	r3, #1
    5c2a:	d003      	beq.n	5c34 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5c2c:	e011      	b.n	5c52 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5c2e:	2300      	movs	r3, #0
    5c30:	9303      	str	r3, [sp, #12]
            break;
    5c32:	e013      	b.n	5c5c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5c34:	9b02      	ldr	r3, [sp, #8]
    5c36:	2b01      	cmp	r3, #1
    5c38:	d10d      	bne.n	5c56 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c3a:	2300      	movs	r3, #0
    5c3c:	9303      	str	r3, [sp, #12]
            break;
    5c3e:	e00a      	b.n	5c56 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5c40:	9b02      	ldr	r3, [sp, #8]
    5c42:	2b01      	cmp	r3, #1
    5c44:	d002      	beq.n	5c4c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5c46:	9b02      	ldr	r3, [sp, #8]
    5c48:	2b10      	cmp	r3, #16
    5c4a:	d106      	bne.n	5c5a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c4c:	2300      	movs	r3, #0
    5c4e:	9303      	str	r3, [sp, #12]
            break;
    5c50:	e003      	b.n	5c5a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5c52:	bf00      	nop
    5c54:	e002      	b.n	5c5c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c56:	bf00      	nop
    5c58:	e000      	b.n	5c5c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c5a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5c5c:	9b03      	ldr	r3, [sp, #12]
}
    5c5e:	4618      	mov	r0, r3
    5c60:	b004      	add	sp, #16
    5c62:	4770      	bx	lr
    5c64:	4007e000 	.word	0x4007e000

00005c68 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5c68:	b500      	push	{lr}
    5c6a:	b08b      	sub	sp, #44	; 0x2c
    5c6c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5c6e:	2300      	movs	r3, #0
    5c70:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5c72:	2300      	movs	r3, #0
    5c74:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5c76:	2300      	movs	r3, #0
    5c78:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5c7c:	9b01      	ldr	r3, [sp, #4]
    5c7e:	685b      	ldr	r3, [r3, #4]
    5c80:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5c82:	9b08      	ldr	r3, [sp, #32]
    5c84:	2b02      	cmp	r3, #2
    5c86:	d076      	beq.n	5d76 <Power_Ip_SMC_ModeConfig+0x10e>
    5c88:	9b08      	ldr	r3, [sp, #32]
    5c8a:	2b02      	cmp	r3, #2
    5c8c:	f200 80ab 	bhi.w	5de6 <Power_Ip_SMC_ModeConfig+0x17e>
    5c90:	9b08      	ldr	r3, [sp, #32]
    5c92:	2b00      	cmp	r3, #0
    5c94:	d003      	beq.n	5c9e <Power_Ip_SMC_ModeConfig+0x36>
    5c96:	9b08      	ldr	r3, [sp, #32]
    5c98:	2b01      	cmp	r3, #1
    5c9a:	d034      	beq.n	5d06 <Power_Ip_SMC_ModeConfig+0x9e>
    5c9c:	e0a3      	b.n	5de6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5c9e:	4b58      	ldr	r3, [pc, #352]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5ca0:	68db      	ldr	r3, [r3, #12]
    5ca2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5ca4:	9b06      	ldr	r3, [sp, #24]
    5ca6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5caa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5cac:	4a54      	ldr	r2, [pc, #336]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5cae:	9b06      	ldr	r3, [sp, #24]
    5cb0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5cb2:	aa02      	add	r2, sp, #8
    5cb4:	a903      	add	r1, sp, #12
    5cb6:	a804      	add	r0, sp, #16
    5cb8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5cbc:	f7ff fece 	bl	5a5c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5cc0:	9a02      	ldr	r2, [sp, #8]
    5cc2:	a903      	add	r1, sp, #12
    5cc4:	ab04      	add	r3, sp, #16
    5cc6:	4618      	mov	r0, r3
    5cc8:	f7ff fee2 	bl	5a90 <Power_Ip_TimeoutExpired>
    5ccc:	4603      	mov	r3, r0
    5cce:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5cd2:	4b4b      	ldr	r3, [pc, #300]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5cd4:	695b      	ldr	r3, [r3, #20]
    5cd6:	f003 0301 	and.w	r3, r3, #1
    5cda:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5cdc:	9b05      	ldr	r3, [sp, #20]
    5cde:	2b01      	cmp	r3, #1
    5ce0:	d006      	beq.n	5cf0 <Power_Ip_SMC_ModeConfig+0x88>
    5ce2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ce6:	f083 0301 	eor.w	r3, r3, #1
    5cea:	b2db      	uxtb	r3, r3
    5cec:	2b00      	cmp	r3, #0
    5cee:	d1e7      	bne.n	5cc0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5cf0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d079      	beq.n	5dec <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5cf8:	2301      	movs	r3, #1
    5cfa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5cfc:	21ff      	movs	r1, #255	; 0xff
    5cfe:	2000      	movs	r0, #0
    5d00:	f7ff fe90 	bl	5a24 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d04:	e072      	b.n	5dec <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5d06:	4b3e      	ldr	r3, [pc, #248]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5d08:	68db      	ldr	r3, [r3, #12]
    5d0a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d0c:	9b06      	ldr	r3, [sp, #24]
    5d0e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d12:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d14:	9b06      	ldr	r3, [sp, #24]
    5d16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5d1a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d1c:	4a38      	ldr	r2, [pc, #224]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5d1e:	9b06      	ldr	r3, [sp, #24]
    5d20:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d22:	aa02      	add	r2, sp, #8
    5d24:	a903      	add	r1, sp, #12
    5d26:	a804      	add	r0, sp, #16
    5d28:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d2c:	f7ff fe96 	bl	5a5c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d30:	9a02      	ldr	r2, [sp, #8]
    5d32:	a903      	add	r1, sp, #12
    5d34:	ab04      	add	r3, sp, #16
    5d36:	4618      	mov	r0, r3
    5d38:	f7ff feaa 	bl	5a90 <Power_Ip_TimeoutExpired>
    5d3c:	4603      	mov	r3, r0
    5d3e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5d42:	4b2f      	ldr	r3, [pc, #188]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5d44:	695b      	ldr	r3, [r3, #20]
    5d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d4a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d4c:	9b05      	ldr	r3, [sp, #20]
    5d4e:	2b80      	cmp	r3, #128	; 0x80
    5d50:	d006      	beq.n	5d60 <Power_Ip_SMC_ModeConfig+0xf8>
    5d52:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d56:	f083 0301 	eor.w	r3, r3, #1
    5d5a:	b2db      	uxtb	r3, r3
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	d1e7      	bne.n	5d30 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5d60:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d64:	2b00      	cmp	r3, #0
    5d66:	d043      	beq.n	5df0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d68:	2301      	movs	r3, #1
    5d6a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d6c:	21ff      	movs	r1, #255	; 0xff
    5d6e:	2000      	movs	r0, #0
    5d70:	f7ff fe58 	bl	5a24 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d74:	e03c      	b.n	5df0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5d76:	4b22      	ldr	r3, [pc, #136]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5d78:	68db      	ldr	r3, [r3, #12]
    5d7a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d7c:	9b06      	ldr	r3, [sp, #24]
    5d7e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d82:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5d84:	9b06      	ldr	r3, [sp, #24]
    5d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d8a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d8c:	4a1c      	ldr	r2, [pc, #112]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5d8e:	9b06      	ldr	r3, [sp, #24]
    5d90:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d92:	aa02      	add	r2, sp, #8
    5d94:	a903      	add	r1, sp, #12
    5d96:	a804      	add	r0, sp, #16
    5d98:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d9c:	f7ff fe5e 	bl	5a5c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5da0:	9a02      	ldr	r2, [sp, #8]
    5da2:	a903      	add	r1, sp, #12
    5da4:	ab04      	add	r3, sp, #16
    5da6:	4618      	mov	r0, r3
    5da8:	f7ff fe72 	bl	5a90 <Power_Ip_TimeoutExpired>
    5dac:	4603      	mov	r3, r0
    5dae:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5db2:	4b13      	ldr	r3, [pc, #76]	; (5e00 <Power_Ip_SMC_ModeConfig+0x198>)
    5db4:	695b      	ldr	r3, [r3, #20]
    5db6:	f003 0304 	and.w	r3, r3, #4
    5dba:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dbc:	9b05      	ldr	r3, [sp, #20]
    5dbe:	2b04      	cmp	r3, #4
    5dc0:	d006      	beq.n	5dd0 <Power_Ip_SMC_ModeConfig+0x168>
    5dc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dc6:	f083 0301 	eor.w	r3, r3, #1
    5dca:	b2db      	uxtb	r3, r3
    5dcc:	2b00      	cmp	r3, #0
    5dce:	d1e7      	bne.n	5da0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5dd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d00d      	beq.n	5df4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dd8:	2301      	movs	r3, #1
    5dda:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ddc:	21ff      	movs	r1, #255	; 0xff
    5dde:	2000      	movs	r0, #0
    5de0:	f7ff fe20 	bl	5a24 <Power_Ip_ReportPowerErrors>
            }

            break;
    5de4:	e006      	b.n	5df4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5de6:	2301      	movs	r3, #1
    5de8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5dea:	e004      	b.n	5df6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5dec:	bf00      	nop
    5dee:	e002      	b.n	5df6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5df0:	bf00      	nop
    5df2:	e000      	b.n	5df6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5df4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5df8:	4618      	mov	r0, r3
    5dfa:	b00b      	add	sp, #44	; 0x2c
    5dfc:	f85d fb04 	ldr.w	pc, [sp], #4
    5e00:	4007e000 	.word	0x4007e000

00005e04 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5e04:	b500      	push	{lr}
    5e06:	b085      	sub	sp, #20
    5e08:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5e0a:	9b01      	ldr	r3, [sp, #4]
    5e0c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5e0e:	9803      	ldr	r0, [sp, #12]
    5e10:	f000 fbc8 	bl	65a4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e14:	4a03      	ldr	r2, [pc, #12]	; (5e24 <Port_Init+0x20>)
    5e16:	9b03      	ldr	r3, [sp, #12]
    5e18:	6013      	str	r3, [r2, #0]
        }
    }
}
    5e1a:	bf00      	nop
    5e1c:	b005      	add	sp, #20
    5e1e:	f85d fb04 	ldr.w	pc, [sp], #4
    5e22:	bf00      	nop
    5e24:	1fff8ce4 	.word	0x1fff8ce4

00005e28 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5e28:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5e2a:	4b03      	ldr	r3, [pc, #12]	; (5e38 <Port_RefreshPortDirection+0x10>)
    5e2c:	681b      	ldr	r3, [r3, #0]
    5e2e:	4618      	mov	r0, r3
    5e30:	f000 fc10 	bl	6654 <Port_Ipw_RefreshPortDirection>
    }
}
    5e34:	bf00      	nop
    5e36:	bd08      	pop	{r3, pc}
    5e38:	1fff8ce4 	.word	0x1fff8ce4

00005e3c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5e3c:	b086      	sub	sp, #24
    5e3e:	9003      	str	r0, [sp, #12]
    5e40:	9102      	str	r1, [sp, #8]
    5e42:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5e44:	23ff      	movs	r3, #255	; 0xff
    5e46:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5e48:	9b03      	ldr	r3, [sp, #12]
    5e4a:	4a39      	ldr	r2, [pc, #228]	; (5f30 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5e4c:	4293      	cmp	r3, r2
    5e4e:	d151      	bne.n	5ef4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5e50:	9b02      	ldr	r3, [sp, #8]
    5e52:	2b10      	cmp	r3, #16
    5e54:	d867      	bhi.n	5f26 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5e56:	a201      	add	r2, pc, #4	; (adr r2, 5e5c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e5c:	00005ea1 	.word	0x00005ea1
    5e60:	00005eaf 	.word	0x00005eaf
    5e64:	00005f27 	.word	0x00005f27
    5e68:	00005f27 	.word	0x00005f27
    5e6c:	00005f27 	.word	0x00005f27
    5e70:	00005f27 	.word	0x00005f27
    5e74:	00005f27 	.word	0x00005f27
    5e78:	00005f27 	.word	0x00005f27
    5e7c:	00005f27 	.word	0x00005f27
    5e80:	00005f27 	.word	0x00005f27
    5e84:	00005f27 	.word	0x00005f27
    5e88:	00005f27 	.word	0x00005f27
    5e8c:	00005f27 	.word	0x00005f27
    5e90:	00005ebd 	.word	0x00005ebd
    5e94:	00005ecb 	.word	0x00005ecb
    5e98:	00005ed9 	.word	0x00005ed9
    5e9c:	00005ee7 	.word	0x00005ee7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5ea0:	2301      	movs	r3, #1
    5ea2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ea4:	9a05      	ldr	r2, [sp, #20]
    5ea6:	9b01      	ldr	r3, [sp, #4]
    5ea8:	4313      	orrs	r3, r2
    5eaa:	9305      	str	r3, [sp, #20]
                break;
    5eac:	e03c      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5eae:	2302      	movs	r3, #2
    5eb0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5eb2:	9a05      	ldr	r2, [sp, #20]
    5eb4:	9b01      	ldr	r3, [sp, #4]
    5eb6:	4313      	orrs	r3, r2
    5eb8:	9305      	str	r3, [sp, #20]
                break;
    5eba:	e035      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5ebc:	2304      	movs	r3, #4
    5ebe:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ec0:	9a05      	ldr	r2, [sp, #20]
    5ec2:	9b01      	ldr	r3, [sp, #4]
    5ec4:	4313      	orrs	r3, r2
    5ec6:	9305      	str	r3, [sp, #20]
                break;
    5ec8:	e02e      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5eca:	2308      	movs	r3, #8
    5ecc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ece:	9a05      	ldr	r2, [sp, #20]
    5ed0:	9b01      	ldr	r3, [sp, #4]
    5ed2:	4313      	orrs	r3, r2
    5ed4:	9305      	str	r3, [sp, #20]
                break;
    5ed6:	e027      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5ed8:	230e      	movs	r3, #14
    5eda:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5edc:	9a05      	ldr	r2, [sp, #20]
    5ede:	9b01      	ldr	r3, [sp, #4]
    5ee0:	4013      	ands	r3, r2
    5ee2:	9305      	str	r3, [sp, #20]
                break;
    5ee4:	e020      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5ee6:	230d      	movs	r3, #13
    5ee8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5eea:	9a05      	ldr	r2, [sp, #20]
    5eec:	9b01      	ldr	r3, [sp, #4]
    5eee:	4013      	ands	r3, r2
    5ef0:	9305      	str	r3, [sp, #20]
                break;
    5ef2:	e019      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5ef4:	9b03      	ldr	r3, [sp, #12]
    5ef6:	4a0f      	ldr	r2, [pc, #60]	; (5f34 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5ef8:	4293      	cmp	r3, r2
    5efa:	d115      	bne.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5efc:	9b02      	ldr	r3, [sp, #8]
    5efe:	2b00      	cmp	r3, #0
    5f00:	d003      	beq.n	5f0a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f02:	9b02      	ldr	r3, [sp, #8]
    5f04:	2b01      	cmp	r3, #1
    5f06:	d007      	beq.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5f08:	e00e      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5f0a:	230b      	movs	r3, #11
    5f0c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f0e:	9a05      	ldr	r2, [sp, #20]
    5f10:	9b01      	ldr	r3, [sp, #4]
    5f12:	4013      	ands	r3, r2
    5f14:	9305      	str	r3, [sp, #20]
                break;
    5f16:	e007      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5f18:	2307      	movs	r3, #7
    5f1a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f1c:	9a05      	ldr	r2, [sp, #20]
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	4013      	ands	r3, r2
    5f22:	9305      	str	r3, [sp, #20]
                break;
    5f24:	e000      	b.n	5f28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5f26:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5f28:	9b05      	ldr	r3, [sp, #20]
}
    5f2a:	4618      	mov	r0, r3
    5f2c:	b006      	add	sp, #24
    5f2e:	4770      	bx	lr
    5f30:	4004a000 	.word	0x4004a000
    5f34:	4004b000 	.word	0x4004b000

00005f38 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5f38:	b500      	push	{lr}
    5f3a:	b089      	sub	sp, #36	; 0x24
    5f3c:	9003      	str	r0, [sp, #12]
    5f3e:	9102      	str	r1, [sp, #8]
    5f40:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5f42:	9b01      	ldr	r3, [sp, #4]
    5f44:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5f46:	9b01      	ldr	r3, [sp, #4]
    5f48:	2b08      	cmp	r3, #8
    5f4a:	d121      	bne.n	5f90 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5f4c:	4b13      	ldr	r3, [pc, #76]	; (5f9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f4e:	685b      	ldr	r3, [r3, #4]
    5f50:	f003 030f 	and.w	r3, r3, #15
    5f54:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5f56:	9a06      	ldr	r2, [sp, #24]
    5f58:	9902      	ldr	r1, [sp, #8]
    5f5a:	9803      	ldr	r0, [sp, #12]
    5f5c:	f7ff ff6e 	bl	5e3c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5f60:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5f62:	9b05      	ldr	r3, [sp, #20]
    5f64:	2bff      	cmp	r3, #255	; 0xff
    5f66:	d011      	beq.n	5f8c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5f68:	f009 f80e 	bl	ef88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5f6c:	4b0b      	ldr	r3, [pc, #44]	; (5f9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f6e:	685b      	ldr	r3, [r3, #4]
    5f70:	4a0a      	ldr	r2, [pc, #40]	; (5f9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f72:	f023 030f 	bic.w	r3, r3, #15
    5f76:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5f78:	4b08      	ldr	r3, [pc, #32]	; (5f9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f7a:	685a      	ldr	r2, [r3, #4]
    5f7c:	9b05      	ldr	r3, [sp, #20]
    5f7e:	f003 030f 	and.w	r3, r3, #15
    5f82:	4906      	ldr	r1, [pc, #24]	; (5f9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f84:	4313      	orrs	r3, r2
    5f86:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5f88:	f009 f82a 	bl	efe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5f8c:	2300      	movs	r3, #0
    5f8e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5f90:	9b07      	ldr	r3, [sp, #28]
}
    5f92:	4618      	mov	r0, r3
    5f94:	b009      	add	sp, #36	; 0x24
    5f96:	f85d fb04 	ldr.w	pc, [sp], #4
    5f9a:	bf00      	nop
    5f9c:	40048000 	.word	0x40048000

00005fa0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5fa0:	b500      	push	{lr}
    5fa2:	b087      	sub	sp, #28
    5fa4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5fa6:	2300      	movs	r3, #0
    5fa8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5faa:	2300      	movs	r3, #0
    5fac:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5fae:	2300      	movs	r3, #0
    5fb0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	68db      	ldr	r3, [r3, #12]
    5fb6:	2b02      	cmp	r3, #2
    5fb8:	d00a      	beq.n	5fd0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5fba:	9b05      	ldr	r3, [sp, #20]
    5fbc:	f043 0302 	orr.w	r3, r3, #2
    5fc0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5fc2:	9b01      	ldr	r3, [sp, #4]
    5fc4:	68db      	ldr	r3, [r3, #12]
    5fc6:	f003 0301 	and.w	r3, r3, #1
    5fca:	9a05      	ldr	r2, [sp, #20]
    5fcc:	4313      	orrs	r3, r2
    5fce:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5fd0:	9b01      	ldr	r3, [sp, #4]
    5fd2:	699b      	ldr	r3, [r3, #24]
    5fd4:	019b      	lsls	r3, r3, #6
    5fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fda:	9a05      	ldr	r2, [sp, #20]
    5fdc:	4313      	orrs	r3, r2
    5fde:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5fe0:	9b01      	ldr	r3, [sp, #4]
    5fe2:	6a1b      	ldr	r3, [r3, #32]
    5fe4:	03db      	lsls	r3, r3, #15
    5fe6:	b29b      	uxth	r3, r3
    5fe8:	9a05      	ldr	r2, [sp, #20]
    5fea:	4313      	orrs	r3, r2
    5fec:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5fee:	9b01      	ldr	r3, [sp, #4]
    5ff0:	7f1b      	ldrb	r3, [r3, #28]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d001      	beq.n	5ffa <Port_Ci_Port_Ip_PinInit+0x5a>
    5ff6:	2310      	movs	r3, #16
    5ff8:	e000      	b.n	5ffc <Port_Ci_Port_Ip_PinInit+0x5c>
    5ffa:	2300      	movs	r3, #0
    5ffc:	9a05      	ldr	r2, [sp, #20]
    5ffe:	4313      	orrs	r3, r2
    6000:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6002:	9b01      	ldr	r3, [sp, #4]
    6004:	691b      	ldr	r3, [r3, #16]
    6006:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6008:	9b01      	ldr	r3, [sp, #4]
    600a:	6818      	ldr	r0, [r3, #0]
    600c:	9b01      	ldr	r3, [sp, #4]
    600e:	689b      	ldr	r3, [r3, #8]
    6010:	9a04      	ldr	r2, [sp, #16]
    6012:	4619      	mov	r1, r3
    6014:	f7ff ff90 	bl	5f38 <Port_Ci_Port_Ip_ConfigureInterleave>
    6018:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    601a:	9b03      	ldr	r3, [sp, #12]
    601c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    601e:	9b04      	ldr	r3, [sp, #16]
    6020:	021b      	lsls	r3, r3, #8
    6022:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6026:	9a05      	ldr	r2, [sp, #20]
    6028:	4313      	orrs	r3, r2
    602a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    602c:	f008 fe12 	bl	ec54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6030:	9b01      	ldr	r3, [sp, #4]
    6032:	681b      	ldr	r3, [r3, #0]
    6034:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6038:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    603a:	9b01      	ldr	r3, [sp, #4]
    603c:	689b      	ldr	r3, [r3, #8]
    603e:	2201      	movs	r2, #1
    6040:	fa02 f303 	lsl.w	r3, r2, r3
    6044:	43db      	mvns	r3, r3
    6046:	9a02      	ldr	r2, [sp, #8]
    6048:	4013      	ands	r3, r2
    604a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    604c:	9b01      	ldr	r3, [sp, #4]
    604e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6052:	2b00      	cmp	r3, #0
    6054:	d001      	beq.n	605a <Port_Ci_Port_Ip_PinInit+0xba>
    6056:	2201      	movs	r2, #1
    6058:	e000      	b.n	605c <Port_Ci_Port_Ip_PinInit+0xbc>
    605a:	2200      	movs	r2, #0
    605c:	9b01      	ldr	r3, [sp, #4]
    605e:	689b      	ldr	r3, [r3, #8]
    6060:	fa02 f303 	lsl.w	r3, r2, r3
    6064:	9a02      	ldr	r2, [sp, #8]
    6066:	4313      	orrs	r3, r2
    6068:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    606a:	9b01      	ldr	r3, [sp, #4]
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	9a02      	ldr	r2, [sp, #8]
    6070:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6074:	f008 fe1a 	bl	ecac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6078:	9b04      	ldr	r3, [sp, #16]
    607a:	2b01      	cmp	r3, #1
    607c:	d16d      	bne.n	615a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    607e:	9b01      	ldr	r3, [sp, #4]
    6080:	695b      	ldr	r3, [r3, #20]
    6082:	2b02      	cmp	r3, #2
    6084:	d138      	bne.n	60f8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6086:	9b01      	ldr	r3, [sp, #4]
    6088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    608c:	2b01      	cmp	r3, #1
    608e:	d10f      	bne.n	60b0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6090:	f008 fe32 	bl	ecf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6094:	9b01      	ldr	r3, [sp, #4]
    6096:	685b      	ldr	r3, [r3, #4]
    6098:	6859      	ldr	r1, [r3, #4]
    609a:	9b01      	ldr	r3, [sp, #4]
    609c:	689b      	ldr	r3, [r3, #8]
    609e:	2201      	movs	r2, #1
    60a0:	409a      	lsls	r2, r3
    60a2:	9b01      	ldr	r3, [sp, #4]
    60a4:	685b      	ldr	r3, [r3, #4]
    60a6:	430a      	orrs	r2, r1
    60a8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    60aa:	f008 fe51 	bl	ed50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    60ae:	e013      	b.n	60d8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    60b0:	9b01      	ldr	r3, [sp, #4]
    60b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60b6:	2b00      	cmp	r3, #0
    60b8:	d10e      	bne.n	60d8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    60ba:	f008 fe6f 	bl	ed9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    60be:	9b01      	ldr	r3, [sp, #4]
    60c0:	685b      	ldr	r3, [r3, #4]
    60c2:	6899      	ldr	r1, [r3, #8]
    60c4:	9b01      	ldr	r3, [sp, #4]
    60c6:	689b      	ldr	r3, [r3, #8]
    60c8:	2201      	movs	r2, #1
    60ca:	409a      	lsls	r2, r3
    60cc:	9b01      	ldr	r3, [sp, #4]
    60ce:	685b      	ldr	r3, [r3, #4]
    60d0:	430a      	orrs	r2, r1
    60d2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    60d4:	f008 fe8e 	bl	edf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    60d8:	f008 feb2 	bl	ee40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	685b      	ldr	r3, [r3, #4]
    60e0:	6959      	ldr	r1, [r3, #20]
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	689b      	ldr	r3, [r3, #8]
    60e6:	2201      	movs	r2, #1
    60e8:	409a      	lsls	r2, r3
    60ea:	9b01      	ldr	r3, [sp, #4]
    60ec:	685b      	ldr	r3, [r3, #4]
    60ee:	430a      	orrs	r2, r1
    60f0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    60f2:	f008 fed1 	bl	ee98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    60f6:	e030      	b.n	615a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    60f8:	f008 fea2 	bl	ee40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    60fc:	9b01      	ldr	r3, [sp, #4]
    60fe:	685b      	ldr	r3, [r3, #4]
    6100:	6959      	ldr	r1, [r3, #20]
    6102:	9b01      	ldr	r3, [sp, #4]
    6104:	689b      	ldr	r3, [r3, #8]
    6106:	2201      	movs	r2, #1
    6108:	fa02 f303 	lsl.w	r3, r2, r3
    610c:	43da      	mvns	r2, r3
    610e:	9b01      	ldr	r3, [sp, #4]
    6110:	685b      	ldr	r3, [r3, #4]
    6112:	400a      	ands	r2, r1
    6114:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6116:	f008 febf 	bl	ee98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    611a:	f008 fee3 	bl	eee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    611e:	9b01      	ldr	r3, [sp, #4]
    6120:	685b      	ldr	r3, [r3, #4]
    6122:	6999      	ldr	r1, [r3, #24]
    6124:	9b01      	ldr	r3, [sp, #4]
    6126:	689b      	ldr	r3, [r3, #8]
    6128:	2201      	movs	r2, #1
    612a:	fa02 f303 	lsl.w	r3, r2, r3
    612e:	43da      	mvns	r2, r3
    6130:	9b01      	ldr	r3, [sp, #4]
    6132:	685b      	ldr	r3, [r3, #4]
    6134:	400a      	ands	r2, r1
    6136:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	695b      	ldr	r3, [r3, #20]
    613c:	2b03      	cmp	r3, #3
    613e:	d10a      	bne.n	6156 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	685b      	ldr	r3, [r3, #4]
    6144:	6999      	ldr	r1, [r3, #24]
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	689b      	ldr	r3, [r3, #8]
    614a:	2201      	movs	r2, #1
    614c:	409a      	lsls	r2, r3
    614e:	9b01      	ldr	r3, [sp, #4]
    6150:	685b      	ldr	r3, [r3, #4]
    6152:	430a      	orrs	r2, r1
    6154:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6156:	f008 fef1 	bl	ef3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    615a:	9b01      	ldr	r3, [sp, #4]
    615c:	681b      	ldr	r3, [r3, #0]
    615e:	9a01      	ldr	r2, [sp, #4]
    6160:	6892      	ldr	r2, [r2, #8]
    6162:	9905      	ldr	r1, [sp, #20]
    6164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6168:	bf00      	nop
    616a:	b007      	add	sp, #28
    616c:	f85d fb04 	ldr.w	pc, [sp], #4

00006170 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6170:	b500      	push	{lr}
    6172:	b085      	sub	sp, #20
    6174:	9001      	str	r0, [sp, #4]
    6176:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6178:	2300      	movs	r3, #0
    617a:	9303      	str	r3, [sp, #12]
    617c:	e00d      	b.n	619a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    617e:	9a03      	ldr	r2, [sp, #12]
    6180:	4613      	mov	r3, r2
    6182:	009b      	lsls	r3, r3, #2
    6184:	4413      	add	r3, r2
    6186:	00db      	lsls	r3, r3, #3
    6188:	461a      	mov	r2, r3
    618a:	9b00      	ldr	r3, [sp, #0]
    618c:	4413      	add	r3, r2
    618e:	4618      	mov	r0, r3
    6190:	f7ff ff06 	bl	5fa0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6194:	9b03      	ldr	r3, [sp, #12]
    6196:	3301      	adds	r3, #1
    6198:	9303      	str	r3, [sp, #12]
    619a:	9a03      	ldr	r2, [sp, #12]
    619c:	9b01      	ldr	r3, [sp, #4]
    619e:	429a      	cmp	r2, r3
    61a0:	d3ed      	bcc.n	617e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    61a2:	2300      	movs	r3, #0
}
    61a4:	4618      	mov	r0, r3
    61a6:	b005      	add	sp, #20
    61a8:	f85d fb04 	ldr.w	pc, [sp], #4

000061ac <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    61ac:	b500      	push	{lr}
    61ae:	b087      	sub	sp, #28
    61b0:	9003      	str	r0, [sp, #12]
    61b2:	9102      	str	r1, [sp, #8]
    61b4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    61b6:	9a01      	ldr	r2, [sp, #4]
    61b8:	9902      	ldr	r1, [sp, #8]
    61ba:	9803      	ldr	r0, [sp, #12]
    61bc:	f7ff febc 	bl	5f38 <Port_Ci_Port_Ip_ConfigureInterleave>
    61c0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    61c2:	f008 ff33 	bl	f02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    61c6:	9b03      	ldr	r3, [sp, #12]
    61c8:	9a02      	ldr	r2, [sp, #8]
    61ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61ce:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    61d0:	9b04      	ldr	r3, [sp, #16]
    61d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    61d6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    61d8:	9b05      	ldr	r3, [sp, #20]
    61da:	021b      	lsls	r3, r3, #8
    61dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    61e0:	9a04      	ldr	r2, [sp, #16]
    61e2:	4313      	orrs	r3, r2
    61e4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    61e6:	9b03      	ldr	r3, [sp, #12]
    61e8:	9a02      	ldr	r2, [sp, #8]
    61ea:	9904      	ldr	r1, [sp, #16]
    61ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    61f0:	f008 ff48 	bl	f084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    61f4:	bf00      	nop
    61f6:	b007      	add	sp, #28
    61f8:	f85d fb04 	ldr.w	pc, [sp], #4

000061fc <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    61fc:	b500      	push	{lr}
    61fe:	b083      	sub	sp, #12
    6200:	9001      	str	r0, [sp, #4]
    6202:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6204:	f008 ff64 	bl	f0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6208:	9b01      	ldr	r3, [sp, #4]
    620a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    620e:	2101      	movs	r1, #1
    6210:	9b00      	ldr	r3, [sp, #0]
    6212:	fa01 f303 	lsl.w	r3, r1, r3
    6216:	431a      	orrs	r2, r3
    6218:	9b01      	ldr	r3, [sp, #4]
    621a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    621e:	f008 ff83 	bl	f128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6222:	bf00      	nop
    6224:	b003      	add	sp, #12
    6226:	f85d fb04 	ldr.w	pc, [sp], #4

0000622a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    622a:	b500      	push	{lr}
    622c:	b083      	sub	sp, #12
    622e:	9001      	str	r0, [sp, #4]
    6230:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6232:	f008 ff9f 	bl	f174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6236:	9b01      	ldr	r3, [sp, #4]
    6238:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    623c:	2101      	movs	r1, #1
    623e:	9b00      	ldr	r3, [sp, #0]
    6240:	fa01 f303 	lsl.w	r3, r1, r3
    6244:	43db      	mvns	r3, r3
    6246:	401a      	ands	r2, r3
    6248:	9b01      	ldr	r3, [sp, #4]
    624a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    624e:	f008 ffbd 	bl	f1cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6252:	bf00      	nop
    6254:	b003      	add	sp, #12
    6256:	f85d fb04 	ldr.w	pc, [sp], #4

0000625a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    625a:	b082      	sub	sp, #8
    625c:	9001      	str	r0, [sp, #4]
    625e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6260:	9b00      	ldr	r3, [sp, #0]
    6262:	785b      	ldrb	r3, [r3, #1]
    6264:	f003 0201 	and.w	r2, r3, #1
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    626e:	9b00      	ldr	r3, [sp, #0]
    6270:	789b      	ldrb	r3, [r3, #2]
    6272:	f003 021f 	and.w	r2, r3, #31
    6276:	9b01      	ldr	r3, [sp, #4]
    6278:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    627c:	bf00      	nop
    627e:	b002      	add	sp, #8
    6280:	4770      	bx	lr

00006282 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6282:	b086      	sub	sp, #24
    6284:	9003      	str	r0, [sp, #12]
    6286:	9301      	str	r3, [sp, #4]
    6288:	460b      	mov	r3, r1
    628a:	f8ad 300a 	strh.w	r3, [sp, #10]
    628e:	4613      	mov	r3, r2
    6290:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6294:	2300      	movs	r3, #0
    6296:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    629a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    629e:	f043 0301 	orr.w	r3, r3, #1
    62a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    62a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62aa:	f043 0302 	orr.w	r3, r3, #2
    62ae:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    62b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62b6:	f043 0310 	orr.w	r3, r3, #16
    62ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    62be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    62ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    62d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    62d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    62de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    62e2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    62e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    62ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    62ee:	4013      	ands	r3, r2
    62f0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	2b00      	cmp	r3, #0
    62f8:	d003      	beq.n	6302 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    62fa:	9b01      	ldr	r3, [sp, #4]
    62fc:	2b01      	cmp	r3, #1
    62fe:	d00a      	beq.n	6316 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6300:	e013      	b.n	632a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6302:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6306:	041a      	lsls	r2, r3, #16
    6308:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    630c:	431a      	orrs	r2, r3
    630e:	9b03      	ldr	r3, [sp, #12]
    6310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6314:	e009      	b.n	632a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6316:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    631a:	041a      	lsls	r2, r3, #16
    631c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6320:	431a      	orrs	r2, r3
    6322:	9b03      	ldr	r3, [sp, #12]
    6324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6328:	bf00      	nop
    }
}
    632a:	bf00      	nop
    632c:	b006      	add	sp, #24
    632e:	4770      	bx	lr

00006330 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6330:	b500      	push	{lr}
    6332:	b087      	sub	sp, #28
    6334:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6336:	9b01      	ldr	r3, [sp, #4]
    6338:	885b      	ldrh	r3, [r3, #2]
    633a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    633e:	9b01      	ldr	r3, [sp, #4]
    6340:	689b      	ldr	r3, [r3, #8]
    6342:	7a1b      	ldrb	r3, [r3, #8]
    6344:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6348:	9b01      	ldr	r3, [sp, #4]
    634a:	689b      	ldr	r3, [r3, #8]
    634c:	681b      	ldr	r3, [r3, #0]
    634e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6350:	9b01      	ldr	r3, [sp, #4]
    6352:	689b      	ldr	r3, [r3, #8]
    6354:	685b      	ldr	r3, [r3, #4]
    6356:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6358:	2300      	movs	r3, #0
    635a:	f8ad 3016 	strh.w	r3, [sp, #22]
    635e:	e111      	b.n	6584 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6360:	9b02      	ldr	r3, [sp, #8]
    6362:	2b02      	cmp	r3, #2
    6364:	d169      	bne.n	643a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6366:	f89d 3013 	ldrb.w	r3, [sp, #19]
    636a:	2b01      	cmp	r3, #1
    636c:	d11a      	bne.n	63a4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    636e:	9b01      	ldr	r3, [sp, #4]
    6370:	685a      	ldr	r2, [r3, #4]
    6372:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6376:	005b      	lsls	r3, r3, #1
    6378:	4413      	add	r3, r2
    637a:	881b      	ldrh	r3, [r3, #0]
    637c:	f003 021f 	and.w	r2, r3, #31
    6380:	9b01      	ldr	r3, [sp, #4]
    6382:	6859      	ldr	r1, [r3, #4]
    6384:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6388:	005b      	lsls	r3, r3, #1
    638a:	440b      	add	r3, r1
    638c:	881b      	ldrh	r3, [r3, #0]
    638e:	095b      	lsrs	r3, r3, #5
    6390:	b29b      	uxth	r3, r3
    6392:	4619      	mov	r1, r3
    6394:	4b81      	ldr	r3, [pc, #516]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    6396:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    639a:	2101      	movs	r1, #1
    639c:	fa01 f202 	lsl.w	r2, r1, r2
    63a0:	605a      	str	r2, [r3, #4]
    63a2:	e01d      	b.n	63e0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    63a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63a8:	2b00      	cmp	r3, #0
    63aa:	d119      	bne.n	63e0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63ac:	9b01      	ldr	r3, [sp, #4]
    63ae:	685a      	ldr	r2, [r3, #4]
    63b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b4:	005b      	lsls	r3, r3, #1
    63b6:	4413      	add	r3, r2
    63b8:	881b      	ldrh	r3, [r3, #0]
    63ba:	f003 021f 	and.w	r2, r3, #31
    63be:	9b01      	ldr	r3, [sp, #4]
    63c0:	6859      	ldr	r1, [r3, #4]
    63c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63c6:	005b      	lsls	r3, r3, #1
    63c8:	440b      	add	r3, r1
    63ca:	881b      	ldrh	r3, [r3, #0]
    63cc:	095b      	lsrs	r3, r3, #5
    63ce:	b29b      	uxth	r3, r3
    63d0:	4619      	mov	r1, r3
    63d2:	4b72      	ldr	r3, [pc, #456]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    63d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63d8:	2101      	movs	r1, #1
    63da:	fa01 f202 	lsl.w	r2, r1, r2
    63de:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    63e0:	f008 ff1a 	bl	f218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63e4:	9b01      	ldr	r3, [sp, #4]
    63e6:	685a      	ldr	r2, [r3, #4]
    63e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63ec:	005b      	lsls	r3, r3, #1
    63ee:	4413      	add	r3, r2
    63f0:	881b      	ldrh	r3, [r3, #0]
    63f2:	095b      	lsrs	r3, r3, #5
    63f4:	b29b      	uxth	r3, r3
    63f6:	461a      	mov	r2, r3
    63f8:	4b68      	ldr	r3, [pc, #416]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    63fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63fe:	6959      	ldr	r1, [r3, #20]
    6400:	9b01      	ldr	r3, [sp, #4]
    6402:	685a      	ldr	r2, [r3, #4]
    6404:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6408:	005b      	lsls	r3, r3, #1
    640a:	4413      	add	r3, r2
    640c:	881b      	ldrh	r3, [r3, #0]
    640e:	f003 031f 	and.w	r3, r3, #31
    6412:	2201      	movs	r2, #1
    6414:	409a      	lsls	r2, r3
    6416:	9b01      	ldr	r3, [sp, #4]
    6418:	6858      	ldr	r0, [r3, #4]
    641a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    641e:	005b      	lsls	r3, r3, #1
    6420:	4403      	add	r3, r0
    6422:	881b      	ldrh	r3, [r3, #0]
    6424:	095b      	lsrs	r3, r3, #5
    6426:	b29b      	uxth	r3, r3
    6428:	4618      	mov	r0, r3
    642a:	4b5c      	ldr	r3, [pc, #368]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    642c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6430:	430a      	orrs	r2, r1
    6432:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6434:	f008 ff1c 	bl	f270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6438:	e086      	b.n	6548 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    643a:	f008 feed 	bl	f218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    643e:	9b01      	ldr	r3, [sp, #4]
    6440:	685a      	ldr	r2, [r3, #4]
    6442:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6446:	005b      	lsls	r3, r3, #1
    6448:	4413      	add	r3, r2
    644a:	881b      	ldrh	r3, [r3, #0]
    644c:	095b      	lsrs	r3, r3, #5
    644e:	b29b      	uxth	r3, r3
    6450:	461a      	mov	r2, r3
    6452:	4b52      	ldr	r3, [pc, #328]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    6454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6458:	6959      	ldr	r1, [r3, #20]
    645a:	9b01      	ldr	r3, [sp, #4]
    645c:	685a      	ldr	r2, [r3, #4]
    645e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6462:	005b      	lsls	r3, r3, #1
    6464:	4413      	add	r3, r2
    6466:	881b      	ldrh	r3, [r3, #0]
    6468:	f003 031f 	and.w	r3, r3, #31
    646c:	2201      	movs	r2, #1
    646e:	fa02 f303 	lsl.w	r3, r2, r3
    6472:	43da      	mvns	r2, r3
    6474:	9b01      	ldr	r3, [sp, #4]
    6476:	6858      	ldr	r0, [r3, #4]
    6478:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    647c:	005b      	lsls	r3, r3, #1
    647e:	4403      	add	r3, r0
    6480:	881b      	ldrh	r3, [r3, #0]
    6482:	095b      	lsrs	r3, r3, #5
    6484:	b29b      	uxth	r3, r3
    6486:	4618      	mov	r0, r3
    6488:	4b44      	ldr	r3, [pc, #272]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    648a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    648e:	400a      	ands	r2, r1
    6490:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6492:	f008 feed 	bl	f270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6496:	f008 ff11 	bl	f2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    649a:	9b01      	ldr	r3, [sp, #4]
    649c:	685a      	ldr	r2, [r3, #4]
    649e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64a2:	005b      	lsls	r3, r3, #1
    64a4:	4413      	add	r3, r2
    64a6:	881b      	ldrh	r3, [r3, #0]
    64a8:	095b      	lsrs	r3, r3, #5
    64aa:	b29b      	uxth	r3, r3
    64ac:	461a      	mov	r2, r3
    64ae:	4b3b      	ldr	r3, [pc, #236]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    64b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64b4:	6999      	ldr	r1, [r3, #24]
    64b6:	9b01      	ldr	r3, [sp, #4]
    64b8:	685a      	ldr	r2, [r3, #4]
    64ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64be:	005b      	lsls	r3, r3, #1
    64c0:	4413      	add	r3, r2
    64c2:	881b      	ldrh	r3, [r3, #0]
    64c4:	f003 031f 	and.w	r3, r3, #31
    64c8:	2201      	movs	r2, #1
    64ca:	fa02 f303 	lsl.w	r3, r2, r3
    64ce:	43da      	mvns	r2, r3
    64d0:	9b01      	ldr	r3, [sp, #4]
    64d2:	6858      	ldr	r0, [r3, #4]
    64d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64d8:	005b      	lsls	r3, r3, #1
    64da:	4403      	add	r3, r0
    64dc:	881b      	ldrh	r3, [r3, #0]
    64de:	095b      	lsrs	r3, r3, #5
    64e0:	b29b      	uxth	r3, r3
    64e2:	4618      	mov	r0, r3
    64e4:	4b2d      	ldr	r3, [pc, #180]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    64e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64ea:	400a      	ands	r2, r1
    64ec:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    64ee:	9b02      	ldr	r3, [sp, #8]
    64f0:	2b03      	cmp	r3, #3
    64f2:	d127      	bne.n	6544 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64f4:	9b01      	ldr	r3, [sp, #4]
    64f6:	685a      	ldr	r2, [r3, #4]
    64f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64fc:	005b      	lsls	r3, r3, #1
    64fe:	4413      	add	r3, r2
    6500:	881b      	ldrh	r3, [r3, #0]
    6502:	095b      	lsrs	r3, r3, #5
    6504:	b29b      	uxth	r3, r3
    6506:	461a      	mov	r2, r3
    6508:	4b24      	ldr	r3, [pc, #144]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    650e:	6999      	ldr	r1, [r3, #24]
    6510:	9b01      	ldr	r3, [sp, #4]
    6512:	685a      	ldr	r2, [r3, #4]
    6514:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6518:	005b      	lsls	r3, r3, #1
    651a:	4413      	add	r3, r2
    651c:	881b      	ldrh	r3, [r3, #0]
    651e:	f003 031f 	and.w	r3, r3, #31
    6522:	2201      	movs	r2, #1
    6524:	409a      	lsls	r2, r3
    6526:	9b01      	ldr	r3, [sp, #4]
    6528:	6858      	ldr	r0, [r3, #4]
    652a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    652e:	005b      	lsls	r3, r3, #1
    6530:	4403      	add	r3, r0
    6532:	881b      	ldrh	r3, [r3, #0]
    6534:	095b      	lsrs	r3, r3, #5
    6536:	b29b      	uxth	r3, r3
    6538:	4618      	mov	r0, r3
    653a:	4b18      	ldr	r3, [pc, #96]	; (659c <Port_Ipw_Init_UnusedPins+0x26c>)
    653c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6540:	430a      	orrs	r2, r1
    6542:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6544:	f008 fee6 	bl	f314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6548:	9b01      	ldr	r3, [sp, #4]
    654a:	685a      	ldr	r2, [r3, #4]
    654c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6550:	005b      	lsls	r3, r3, #1
    6552:	4413      	add	r3, r2
    6554:	881b      	ldrh	r3, [r3, #0]
    6556:	095b      	lsrs	r3, r3, #5
    6558:	b29b      	uxth	r3, r3
    655a:	461a      	mov	r2, r3
    655c:	4b10      	ldr	r3, [pc, #64]	; (65a0 <Port_Ipw_Init_UnusedPins+0x270>)
    655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6562:	9a01      	ldr	r2, [sp, #4]
    6564:	6851      	ldr	r1, [r2, #4]
    6566:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    656a:	0052      	lsls	r2, r2, #1
    656c:	440a      	add	r2, r1
    656e:	8812      	ldrh	r2, [r2, #0]
    6570:	f002 021f 	and.w	r2, r2, #31
    6574:	9903      	ldr	r1, [sp, #12]
    6576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    657a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    657e:	3301      	adds	r3, #1
    6580:	f8ad 3016 	strh.w	r3, [sp, #22]
    6584:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6588:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    658c:	429a      	cmp	r2, r3
    658e:	f4ff aee7 	bcc.w	6360 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6592:	bf00      	nop
    6594:	bf00      	nop
    6596:	b007      	add	sp, #28
    6598:	f85d fb04 	ldr.w	pc, [sp], #4
    659c:	00010778 	.word	0x00010778
    65a0:	00010764 	.word	0x00010764

000065a4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    65a4:	b500      	push	{lr}
    65a6:	b085      	sub	sp, #20
    65a8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	7c1b      	ldrb	r3, [r3, #16]
    65ae:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    65b2:	2300      	movs	r3, #0
    65b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    65b8:	e035      	b.n	6626 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    65ba:	9b01      	ldr	r3, [sp, #4]
    65bc:	695a      	ldr	r2, [r3, #20]
    65be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65c2:	00db      	lsls	r3, r3, #3
    65c4:	4413      	add	r3, r2
    65c6:	781b      	ldrb	r3, [r3, #0]
    65c8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    65cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65d0:	4a1f      	ldr	r2, [pc, #124]	; (6650 <Port_Ipw_Init+0xac>)
    65d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	695a      	ldr	r2, [r3, #20]
    65da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65de:	00db      	lsls	r3, r3, #3
    65e0:	4413      	add	r3, r2
    65e2:	4619      	mov	r1, r3
    65e4:	f7ff fe39 	bl	625a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    65e8:	f009 f802 	bl	f5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    65ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65f0:	4a17      	ldr	r2, [pc, #92]	; (6650 <Port_Ipw_Init+0xac>)
    65f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65f6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    65fa:	9b01      	ldr	r3, [sp, #4]
    65fc:	695a      	ldr	r2, [r3, #20]
    65fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6602:	00db      	lsls	r3, r3, #3
    6604:	4413      	add	r3, r2
    6606:	685a      	ldr	r2, [r3, #4]
    6608:	f89d 300c 	ldrb.w	r3, [sp, #12]
    660c:	4810      	ldr	r0, [pc, #64]	; (6650 <Port_Ipw_Init+0xac>)
    660e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6612:	430a      	orrs	r2, r1
    6614:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6618:	f009 f816 	bl	f648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    661c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6620:	3301      	adds	r3, #1
    6622:	f8ad 300e 	strh.w	r3, [sp, #14]
    6626:	f89d 300d 	ldrb.w	r3, [sp, #13]
    662a:	b29b      	uxth	r3, r3
    662c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6630:	429a      	cmp	r2, r3
    6632:	d3c2      	bcc.n	65ba <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6634:	9b01      	ldr	r3, [sp, #4]
    6636:	6a1b      	ldr	r3, [r3, #32]
    6638:	4619      	mov	r1, r3
    663a:	2002      	movs	r0, #2
    663c:	f7ff fd98 	bl	6170 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6640:	9801      	ldr	r0, [sp, #4]
    6642:	f7ff fe75 	bl	6330 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6646:	bf00      	nop
    6648:	b005      	add	sp, #20
    664a:	f85d fb04 	ldr.w	pc, [sp], #4
    664e:	bf00      	nop
    6650:	00010764 	.word	0x00010764

00006654 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6654:	b500      	push	{lr}
    6656:	b085      	sub	sp, #20
    6658:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	881b      	ldrh	r3, [r3, #0]
    665e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6662:	2300      	movs	r3, #0
    6664:	f8ad 300e 	strh.w	r3, [sp, #14]
    6668:	e0d2      	b.n	6810 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    666a:	9b01      	ldr	r3, [sp, #4]
    666c:	68d9      	ldr	r1, [r3, #12]
    666e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6672:	4613      	mov	r3, r2
    6674:	009b      	lsls	r3, r3, #2
    6676:	4413      	add	r3, r2
    6678:	009b      	lsls	r3, r3, #2
    667a:	440b      	add	r3, r1
    667c:	7c5b      	ldrb	r3, [r3, #17]
    667e:	f083 0301 	eor.w	r3, r3, #1
    6682:	b2db      	uxtb	r3, r3
    6684:	2b00      	cmp	r3, #0
    6686:	f000 80be 	beq.w	6806 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    668a:	9b01      	ldr	r3, [sp, #4]
    668c:	68d9      	ldr	r1, [r3, #12]
    668e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6692:	4613      	mov	r3, r2
    6694:	009b      	lsls	r3, r3, #2
    6696:	4413      	add	r3, r2
    6698:	009b      	lsls	r3, r3, #2
    669a:	440b      	add	r3, r1
    669c:	7c1b      	ldrb	r3, [r3, #16]
    669e:	2b00      	cmp	r3, #0
    66a0:	f000 80b1 	beq.w	6806 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    66a4:	9b01      	ldr	r3, [sp, #4]
    66a6:	68d9      	ldr	r1, [r3, #12]
    66a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66ac:	4613      	mov	r3, r2
    66ae:	009b      	lsls	r3, r3, #2
    66b0:	4413      	add	r3, r2
    66b2:	009b      	lsls	r3, r3, #2
    66b4:	440b      	add	r3, r1
    66b6:	881b      	ldrh	r3, [r3, #0]
    66b8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    66bc:	9b01      	ldr	r3, [sp, #4]
    66be:	68d9      	ldr	r1, [r3, #12]
    66c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66c4:	4613      	mov	r3, r2
    66c6:	009b      	lsls	r3, r3, #2
    66c8:	4413      	add	r3, r2
    66ca:	009b      	lsls	r3, r3, #2
    66cc:	440b      	add	r3, r1
    66ce:	68db      	ldr	r3, [r3, #12]
    66d0:	2b02      	cmp	r3, #2
    66d2:	d11d      	bne.n	6710 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    66d4:	f009 f8d4 	bl	f880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66dc:	095b      	lsrs	r3, r3, #5
    66de:	b29b      	uxth	r3, r3
    66e0:	461a      	mov	r2, r3
    66e2:	4b51      	ldr	r3, [pc, #324]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66e8:	6959      	ldr	r1, [r3, #20]
    66ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66ee:	f003 031f 	and.w	r3, r3, #31
    66f2:	2201      	movs	r2, #1
    66f4:	409a      	lsls	r2, r3
    66f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66fa:	095b      	lsrs	r3, r3, #5
    66fc:	b29b      	uxth	r3, r3
    66fe:	4618      	mov	r0, r3
    6700:	4b49      	ldr	r3, [pc, #292]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6702:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6706:	430a      	orrs	r2, r1
    6708:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    670a:	f009 f8e5 	bl	f8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    670e:	e07a      	b.n	6806 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6710:	9b01      	ldr	r3, [sp, #4]
    6712:	68d9      	ldr	r1, [r3, #12]
    6714:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6718:	4613      	mov	r3, r2
    671a:	009b      	lsls	r3, r3, #2
    671c:	4413      	add	r3, r2
    671e:	009b      	lsls	r3, r3, #2
    6720:	440b      	add	r3, r1
    6722:	68db      	ldr	r3, [r3, #12]
    6724:	2b01      	cmp	r3, #1
    6726:	d00b      	beq.n	6740 <Port_Ipw_RefreshPortDirection+0xec>
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	68d9      	ldr	r1, [r3, #12]
    672c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6730:	4613      	mov	r3, r2
    6732:	009b      	lsls	r3, r3, #2
    6734:	4413      	add	r3, r2
    6736:	009b      	lsls	r3, r3, #2
    6738:	440b      	add	r3, r1
    673a:	68db      	ldr	r3, [r3, #12]
    673c:	2b03      	cmp	r3, #3
    673e:	d162      	bne.n	6806 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6740:	f009 f89e 	bl	f880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6744:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6748:	095b      	lsrs	r3, r3, #5
    674a:	b29b      	uxth	r3, r3
    674c:	461a      	mov	r2, r3
    674e:	4b36      	ldr	r3, [pc, #216]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6754:	6959      	ldr	r1, [r3, #20]
    6756:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    675a:	f003 031f 	and.w	r3, r3, #31
    675e:	2201      	movs	r2, #1
    6760:	fa02 f303 	lsl.w	r3, r2, r3
    6764:	43da      	mvns	r2, r3
    6766:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    676a:	095b      	lsrs	r3, r3, #5
    676c:	b29b      	uxth	r3, r3
    676e:	4618      	mov	r0, r3
    6770:	4b2d      	ldr	r3, [pc, #180]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6772:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6776:	400a      	ands	r2, r1
    6778:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    677a:	f009 f8ad 	bl	f8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    677e:	f009 f8d1 	bl	f924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6782:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6786:	095b      	lsrs	r3, r3, #5
    6788:	b29b      	uxth	r3, r3
    678a:	461a      	mov	r2, r3
    678c:	4b26      	ldr	r3, [pc, #152]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6792:	6999      	ldr	r1, [r3, #24]
    6794:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6798:	f003 031f 	and.w	r3, r3, #31
    679c:	2201      	movs	r2, #1
    679e:	fa02 f303 	lsl.w	r3, r2, r3
    67a2:	43da      	mvns	r2, r3
    67a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67a8:	095b      	lsrs	r3, r3, #5
    67aa:	b29b      	uxth	r3, r3
    67ac:	4618      	mov	r0, r3
    67ae:	4b1e      	ldr	r3, [pc, #120]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67b4:	400a      	ands	r2, r1
    67b6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67b8:	9b01      	ldr	r3, [sp, #4]
    67ba:	68d9      	ldr	r1, [r3, #12]
    67bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67c0:	4613      	mov	r3, r2
    67c2:	009b      	lsls	r3, r3, #2
    67c4:	4413      	add	r3, r2
    67c6:	009b      	lsls	r3, r3, #2
    67c8:	440b      	add	r3, r1
    67ca:	68db      	ldr	r3, [r3, #12]
    67cc:	2b03      	cmp	r3, #3
    67ce:	d118      	bne.n	6802 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67d4:	095b      	lsrs	r3, r3, #5
    67d6:	b29b      	uxth	r3, r3
    67d8:	461a      	mov	r2, r3
    67da:	4b13      	ldr	r3, [pc, #76]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67e0:	6999      	ldr	r1, [r3, #24]
    67e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e6:	f003 031f 	and.w	r3, r3, #31
    67ea:	2201      	movs	r2, #1
    67ec:	409a      	lsls	r2, r3
    67ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67f2:	095b      	lsrs	r3, r3, #5
    67f4:	b29b      	uxth	r3, r3
    67f6:	4618      	mov	r0, r3
    67f8:	4b0b      	ldr	r3, [pc, #44]	; (6828 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67fe:	430a      	orrs	r2, r1
    6800:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6802:	f009 f8bb 	bl	f97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6806:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    680a:	3301      	adds	r3, #1
    680c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6810:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6814:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6818:	429a      	cmp	r2, r3
    681a:	f4ff af26 	bcc.w	666a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    681e:	bf00      	nop
    6820:	bf00      	nop
    6822:	b005      	add	sp, #20
    6824:	f85d fb04 	ldr.w	pc, [sp], #4
    6828:	00010778 	.word	0x00010778

0000682c <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    682c:	b500      	push	{lr}
    682e:	b083      	sub	sp, #12
    6830:	4603      	mov	r3, r0
    6832:	460a      	mov	r2, r1
    6834:	f88d 3007 	strb.w	r3, [sp, #7]
    6838:	4613      	mov	r3, r2
    683a:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    683e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6842:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6846:	2100      	movs	r1, #0
    6848:	207b      	movs	r0, #123	; 0x7b
    684a:	f009 fb37 	bl	febc <Det_ReportRuntimeError>
}
    684e:	bf00      	nop
    6850:	b003      	add	sp, #12
    6852:	f85d fb04 	ldr.w	pc, [sp], #4

00006856 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6856:	b500      	push	{lr}
    6858:	b085      	sub	sp, #20
    685a:	4603      	mov	r3, r0
    685c:	460a      	mov	r2, r1
    685e:	f88d 3007 	strb.w	r3, [sp, #7]
    6862:	4613      	mov	r3, r2
    6864:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6868:	2300      	movs	r3, #0
    686a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    686e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6872:	4a0c      	ldr	r2, [pc, #48]	; (68a4 <Adc_ValidateNotBusyNoQueue+0x4e>)
    6874:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6878:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    687c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6880:	2b00      	cmp	r3, #0
    6882:	d008      	beq.n	6896 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6884:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6888:	210b      	movs	r1, #11
    688a:	4618      	mov	r0, r3
    688c:	f7ff ffce 	bl	682c <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6890:	2301      	movs	r3, #1
    6892:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6896:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    689a:	4618      	mov	r0, r3
    689c:	b005      	add	sp, #20
    689e:	f85d fb04 	ldr.w	pc, [sp], #4
    68a2:	bf00      	nop
    68a4:	1fff8d00 	.word	0x1fff8d00

000068a8 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    68a8:	b500      	push	{lr}
    68aa:	b085      	sub	sp, #20
    68ac:	4603      	mov	r3, r0
    68ae:	f8ad 3006 	strh.w	r3, [sp, #6]
    68b2:	460b      	mov	r3, r1
    68b4:	f88d 3005 	strb.w	r3, [sp, #5]
    68b8:	4613      	mov	r3, r2
    68ba:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    68be:	2301      	movs	r3, #1
    68c0:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    68c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    68c8:	4917      	ldr	r1, [pc, #92]	; (6928 <Adc_ValidateNotBusyNoPrio+0x80>)
    68ca:	4613      	mov	r3, r2
    68cc:	009b      	lsls	r3, r3, #2
    68ce:	4413      	add	r3, r2
    68d0:	009b      	lsls	r3, r3, #2
    68d2:	440b      	add	r3, r1
    68d4:	681b      	ldr	r3, [r3, #0]
    68d6:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    68d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68dc:	f083 0301 	eor.w	r3, r3, #1
    68e0:	b2db      	uxtb	r3, r3
    68e2:	2b00      	cmp	r3, #0
    68e4:	d007      	beq.n	68f6 <Adc_ValidateNotBusyNoPrio+0x4e>
    68e6:	9b02      	ldr	r3, [sp, #8]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d004      	beq.n	68f6 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    68ec:	210b      	movs	r1, #11
    68ee:	2002      	movs	r0, #2
    68f0:	f7ff ff9c 	bl	682c <Adc_ReportDetRuntimeError>
    68f4:	e011      	b.n	691a <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    68f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68fa:	2b00      	cmp	r3, #0
    68fc:	d00a      	beq.n	6914 <Adc_ValidateNotBusyNoPrio+0x6c>
    68fe:	9b02      	ldr	r3, [sp, #8]
    6900:	2b00      	cmp	r3, #0
    6902:	d007      	beq.n	6914 <Adc_ValidateNotBusyNoPrio+0x6c>
    6904:	9b02      	ldr	r3, [sp, #8]
    6906:	2b03      	cmp	r3, #3
    6908:	d004      	beq.n	6914 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    690a:	210b      	movs	r1, #11
    690c:	2002      	movs	r0, #2
    690e:	f7ff ff8d 	bl	682c <Adc_ReportDetRuntimeError>
    6912:	e002      	b.n	691a <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6914:	2300      	movs	r3, #0
    6916:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    691a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    691e:	4618      	mov	r0, r3
    6920:	b005      	add	sp, #20
    6922:	f85d fb04 	ldr.w	pc, [sp], #4
    6926:	bf00      	nop
    6928:	1fff8cec 	.word	0x1fff8cec

0000692c <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    692c:	b500      	push	{lr}
    692e:	b087      	sub	sp, #28
    6930:	4603      	mov	r3, r0
    6932:	460a      	mov	r2, r1
    6934:	f88d 3007 	strb.w	r3, [sp, #7]
    6938:	4613      	mov	r3, r2
    693a:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    693e:	2300      	movs	r3, #0
    6940:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6944:	2300      	movs	r3, #0
    6946:	f8ad 3016 	strh.w	r3, [sp, #22]
    694a:	e02c      	b.n	69a6 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    694c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6950:	4a1d      	ldr	r2, [pc, #116]	; (69c8 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6956:	685a      	ldr	r2, [r3, #4]
    6958:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    695c:	2134      	movs	r1, #52	; 0x34
    695e:	fb01 f303 	mul.w	r3, r1, r3
    6962:	4413      	add	r3, r2
    6964:	881b      	ldrh	r3, [r3, #0]
    6966:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    696a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    696e:	4917      	ldr	r1, [pc, #92]	; (69cc <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6970:	4613      	mov	r3, r2
    6972:	009b      	lsls	r3, r3, #2
    6974:	4413      	add	r3, r2
    6976:	009b      	lsls	r3, r3, #2
    6978:	440b      	add	r3, r1
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    697e:	9b03      	ldr	r3, [sp, #12]
    6980:	2b00      	cmp	r3, #0
    6982:	d00b      	beq.n	699c <Adc_ValidateCheckGroupNotConversion+0x70>
    6984:	9b03      	ldr	r3, [sp, #12]
    6986:	2b03      	cmp	r3, #3
    6988:	d008      	beq.n	699c <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    698a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    698e:	210b      	movs	r1, #11
    6990:	4618      	mov	r0, r3
    6992:	f7ff ff4b 	bl	682c <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    6996:	2301      	movs	r3, #1
    6998:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    699c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69a0:	3301      	adds	r3, #1
    69a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    69a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    69aa:	4a07      	ldr	r2, [pc, #28]	; (69c8 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    69ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b0:	891b      	ldrh	r3, [r3, #8]
    69b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69b6:	429a      	cmp	r2, r3
    69b8:	d3c8      	bcc.n	694c <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    69ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    69be:	4618      	mov	r0, r3
    69c0:	b007      	add	sp, #28
    69c2:	f85d fb04 	ldr.w	pc, [sp], #4
    69c6:	bf00      	nop
    69c8:	1fff8ce8 	.word	0x1fff8ce8
    69cc:	1fff8cec 	.word	0x1fff8cec

000069d0 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    69d0:	b500      	push	{lr}
    69d2:	b085      	sub	sp, #20
    69d4:	4603      	mov	r3, r0
    69d6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    69da:	2300      	movs	r3, #0
    69dc:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    69e0:	2301      	movs	r3, #1
    69e2:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    69e6:	2300      	movs	r3, #0
    69e8:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    69ec:	2300      	movs	r3, #0
    69ee:	f88d 300d 	strb.w	r3, [sp, #13]
    69f2:	e01d      	b.n	6a30 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    69f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69f8:	4a1b      	ldr	r2, [pc, #108]	; (6a68 <Adc_ValidateDeInitNotBusy+0x98>)
    69fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69fe:	681a      	ldr	r2, [r3, #0]
    6a00:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a04:	4413      	add	r3, r2
    6a06:	7f9b      	ldrb	r3, [r3, #30]
    6a08:	2b01      	cmp	r3, #1
    6a0a:	d10c      	bne.n	6a26 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6a0c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a10:	2101      	movs	r1, #1
    6a12:	4618      	mov	r0, r3
    6a14:	f7ff ff1f 	bl	6856 <Adc_ValidateNotBusyNoQueue>
    6a18:	4603      	mov	r3, r0
    6a1a:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6a1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a22:	2b01      	cmp	r3, #1
    6a24:	d009      	beq.n	6a3a <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a26:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a2a:	3301      	adds	r3, #1
    6a2c:	f88d 300d 	strb.w	r3, [sp, #13]
    6a30:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a34:	2b01      	cmp	r3, #1
    6a36:	d9dd      	bls.n	69f4 <Adc_ValidateDeInitNotBusy+0x24>
    6a38:	e000      	b.n	6a3c <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6a3a:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6a3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a40:	2b00      	cmp	r3, #0
    6a42:	d10b      	bne.n	6a5c <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a48:	4619      	mov	r1, r3
    6a4a:	2001      	movs	r0, #1
    6a4c:	f7ff ff6e 	bl	692c <Adc_ValidateCheckGroupNotConversion>
    6a50:	4603      	mov	r3, r0
    6a52:	2b00      	cmp	r3, #0
    6a54:	d102      	bne.n	6a5c <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6a56:	2300      	movs	r3, #0
    6a58:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6a5c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6a60:	4618      	mov	r0, r3
    6a62:	b005      	add	sp, #20
    6a64:	f85d fb04 	ldr.w	pc, [sp], #4
    6a68:	1fff8ce8 	.word	0x1fff8ce8

00006a6c <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6a6c:	b500      	push	{lr}
    6a6e:	b085      	sub	sp, #20
    6a70:	4603      	mov	r3, r0
    6a72:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6a76:	2301      	movs	r3, #1
    6a78:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6a7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6a80:	490b      	ldr	r1, [pc, #44]	; (6ab0 <Adc_ValidateSetupBufferNotBusy+0x44>)
    6a82:	4613      	mov	r3, r2
    6a84:	009b      	lsls	r3, r3, #2
    6a86:	4413      	add	r3, r2
    6a88:	009b      	lsls	r3, r3, #2
    6a8a:	440b      	add	r3, r1
    6a8c:	681b      	ldr	r3, [r3, #0]
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d004      	beq.n	6a9c <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6a92:	210b      	movs	r1, #11
    6a94:	200c      	movs	r0, #12
    6a96:	f7ff fec9 	bl	682c <Adc_ReportDetRuntimeError>
    6a9a:	e002      	b.n	6aa2 <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6a9c:	2300      	movs	r3, #0
    6a9e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6aa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6aa6:	4618      	mov	r0, r3
    6aa8:	b005      	add	sp, #20
    6aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    6aae:	bf00      	nop
    6ab0:	1fff8cec 	.word	0x1fff8cec

00006ab4 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6ab4:	b500      	push	{lr}
    6ab6:	b085      	sub	sp, #20
    6ab8:	4603      	mov	r3, r0
    6aba:	460a      	mov	r2, r1
    6abc:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ac0:	4613      	mov	r3, r2
    6ac2:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6ac6:	2300      	movs	r3, #0
    6ac8:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6acc:	2300      	movs	r3, #0
    6ace:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6ad2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ad6:	4a32      	ldr	r2, [pc, #200]	; (6ba0 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6adc:	68da      	ldr	r2, [r3, #12]
    6ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ae2:	005b      	lsls	r3, r3, #1
    6ae4:	4413      	add	r3, r2
    6ae6:	881b      	ldrh	r3, [r3, #0]
    6ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6aec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6af0:	4a2b      	ldr	r2, [pc, #172]	; (6ba0 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af6:	685a      	ldr	r2, [r3, #4]
    6af8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6afc:	2134      	movs	r1, #52	; 0x34
    6afe:	fb01 f303 	mul.w	r3, r1, r3
    6b02:	4413      	add	r3, r2
    6b04:	689b      	ldr	r3, [r3, #8]
    6b06:	2b00      	cmp	r3, #0
    6b08:	d02c      	beq.n	6b64 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b0e:	4a24      	ldr	r2, [pc, #144]	; (6ba0 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b14:	685a      	ldr	r2, [r3, #4]
    6b16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b1a:	2134      	movs	r1, #52	; 0x34
    6b1c:	fb01 f303 	mul.w	r3, r1, r3
    6b20:	4413      	add	r3, r2
    6b22:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b24:	2b01      	cmp	r3, #1
    6b26:	d120      	bne.n	6b6a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b28:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b2c:	4a1c      	ldr	r2, [pc, #112]	; (6ba0 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b32:	685a      	ldr	r2, [r3, #4]
    6b34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b38:	2134      	movs	r1, #52	; 0x34
    6b3a:	fb01 f303 	mul.w	r3, r1, r3
    6b3e:	4413      	add	r3, r2
    6b40:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b42:	2b01      	cmp	r3, #1
    6b44:	d111      	bne.n	6b6a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6b46:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b4a:	4a15      	ldr	r2, [pc, #84]	; (6ba0 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b50:	685a      	ldr	r2, [r3, #4]
    6b52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b56:	2134      	movs	r1, #52	; 0x34
    6b58:	fb01 f303 	mul.w	r3, r1, r3
    6b5c:	4413      	add	r3, r2
    6b5e:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b60:	2b00      	cmp	r3, #0
    6b62:	d102      	bne.n	6b6a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6b64:	2301      	movs	r3, #1
    6b66:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6b6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b6e:	2b01      	cmp	r3, #1
    6b70:	d104      	bne.n	6b7c <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6b72:	210b      	movs	r1, #11
    6b74:	2002      	movs	r0, #2
    6b76:	f7ff fe59 	bl	682c <Adc_ReportDetRuntimeError>
    6b7a:	e00b      	b.n	6b94 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6b7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6b80:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6b84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b88:	4618      	mov	r0, r3
    6b8a:	f7ff fe8d 	bl	68a8 <Adc_ValidateNotBusyNoPrio>
    6b8e:	4603      	mov	r3, r0
    6b90:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6b94:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b98:	4618      	mov	r0, r3
    6b9a:	b005      	add	sp, #20
    6b9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ba0:	1fff8ce8 	.word	0x1fff8ce8

00006ba4 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6ba4:	b500      	push	{lr}
    6ba6:	b085      	sub	sp, #20
    6ba8:	4603      	mov	r3, r0
    6baa:	f88d 3007 	strb.w	r3, [sp, #7]
    6bae:	460b      	mov	r3, r1
    6bb0:	f8ad 3004 	strh.w	r3, [sp, #4]
    6bb4:	4613      	mov	r3, r2
    6bb6:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6bba:	2300      	movs	r3, #0
    6bbc:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6bc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bc4:	2b0b      	cmp	r3, #11
    6bc6:	d03b      	beq.n	6c40 <Adc_ValidateStateNotIdle+0x9c>
    6bc8:	2b0b      	cmp	r3, #11
    6bca:	dc4e      	bgt.n	6c6a <Adc_ValidateStateNotIdle+0xc6>
    6bcc:	2b03      	cmp	r3, #3
    6bce:	d022      	beq.n	6c16 <Adc_ValidateStateNotIdle+0x72>
    6bd0:	2b04      	cmp	r3, #4
    6bd2:	d14a      	bne.n	6c6a <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6bd4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bd8:	492a      	ldr	r1, [pc, #168]	; (6c84 <Adc_ValidateStateNotIdle+0xe0>)
    6bda:	4613      	mov	r3, r2
    6bdc:	009b      	lsls	r3, r3, #2
    6bde:	4413      	add	r3, r2
    6be0:	009b      	lsls	r3, r3, #2
    6be2:	440b      	add	r3, r1
    6be4:	681b      	ldr	r3, [r3, #0]
    6be6:	2b00      	cmp	r3, #0
    6be8:	d141      	bne.n	6c6e <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6bea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bee:	4925      	ldr	r1, [pc, #148]	; (6c84 <Adc_ValidateStateNotIdle+0xe0>)
    6bf0:	4613      	mov	r3, r2
    6bf2:	009b      	lsls	r3, r3, #2
    6bf4:	4413      	add	r3, r2
    6bf6:	009b      	lsls	r3, r3, #2
    6bf8:	440b      	add	r3, r1
    6bfa:	3304      	adds	r3, #4
    6bfc:	681b      	ldr	r3, [r3, #0]
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d135      	bne.n	6c6e <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c06:	210c      	movs	r1, #12
    6c08:	4618      	mov	r0, r3
    6c0a:	f7ff fe0f 	bl	682c <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6c0e:	2301      	movs	r3, #1
    6c10:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6c14:	e02b      	b.n	6c6e <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c1a:	491a      	ldr	r1, [pc, #104]	; (6c84 <Adc_ValidateStateNotIdle+0xe0>)
    6c1c:	4613      	mov	r3, r2
    6c1e:	009b      	lsls	r3, r3, #2
    6c20:	4413      	add	r3, r2
    6c22:	009b      	lsls	r3, r3, #2
    6c24:	440b      	add	r3, r1
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d122      	bne.n	6c72 <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c30:	210c      	movs	r1, #12
    6c32:	4618      	mov	r0, r3
    6c34:	f7ff fdfa 	bl	682c <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6c38:	2301      	movs	r3, #1
    6c3a:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6c3e:	e018      	b.n	6c72 <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c40:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c44:	490f      	ldr	r1, [pc, #60]	; (6c84 <Adc_ValidateStateNotIdle+0xe0>)
    6c46:	4613      	mov	r3, r2
    6c48:	009b      	lsls	r3, r3, #2
    6c4a:	4413      	add	r3, r2
    6c4c:	009b      	lsls	r3, r3, #2
    6c4e:	440b      	add	r3, r1
    6c50:	681b      	ldr	r3, [r3, #0]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d10f      	bne.n	6c76 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c5a:	210c      	movs	r1, #12
    6c5c:	4618      	mov	r0, r3
    6c5e:	f7ff fde5 	bl	682c <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6c62:	2301      	movs	r3, #1
    6c64:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6c68:	e005      	b.n	6c76 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6c6a:	bf00      	nop
    6c6c:	e004      	b.n	6c78 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c6e:	bf00      	nop
    6c70:	e002      	b.n	6c78 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c72:	bf00      	nop
    6c74:	e000      	b.n	6c78 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c76:	bf00      	nop
        }
    }

    return ValidState;
    6c78:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c7c:	4618      	mov	r0, r3
    6c7e:	b005      	add	sp, #20
    6c80:	f85d fb04 	ldr.w	pc, [sp], #4
    6c84:	1fff8cec 	.word	0x1fff8cec

00006c88 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6c88:	b084      	sub	sp, #16
    6c8a:	4603      	mov	r3, r0
    6c8c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6c90:	2300      	movs	r3, #0
    6c92:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6c96:	2300      	movs	r3, #0
    6c98:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6c9c:	2300      	movs	r3, #0
    6c9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    6ca2:	e049      	b.n	6d38 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca8:	4a2a      	ldr	r2, [pc, #168]	; (6d54 <Adc_InitGroupsStatus+0xcc>)
    6caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cae:	685a      	ldr	r2, [r3, #4]
    6cb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cb4:	2134      	movs	r1, #52	; 0x34
    6cb6:	fb01 f303 	mul.w	r3, r1, r3
    6cba:	4413      	add	r3, r2
    6cbc:	881b      	ldrh	r3, [r3, #0]
    6cbe:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6cc2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cc6:	4924      	ldr	r1, [pc, #144]	; (6d58 <Adc_InitGroupsStatus+0xd0>)
    6cc8:	4613      	mov	r3, r2
    6cca:	009b      	lsls	r3, r3, #2
    6ccc:	4413      	add	r3, r2
    6cce:	009b      	lsls	r3, r3, #2
    6cd0:	440b      	add	r3, r1
    6cd2:	2200      	movs	r2, #0
    6cd4:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6cd6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cda:	491f      	ldr	r1, [pc, #124]	; (6d58 <Adc_InitGroupsStatus+0xd0>)
    6cdc:	4613      	mov	r3, r2
    6cde:	009b      	lsls	r3, r3, #2
    6ce0:	4413      	add	r3, r2
    6ce2:	009b      	lsls	r3, r3, #2
    6ce4:	440b      	add	r3, r1
    6ce6:	3304      	adds	r3, #4
    6ce8:	2200      	movs	r2, #0
    6cea:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    6cec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cf0:	4919      	ldr	r1, [pc, #100]	; (6d58 <Adc_InitGroupsStatus+0xd0>)
    6cf2:	4613      	mov	r3, r2
    6cf4:	009b      	lsls	r3, r3, #2
    6cf6:	4413      	add	r3, r2
    6cf8:	009b      	lsls	r3, r3, #2
    6cfa:	440b      	add	r3, r1
    6cfc:	3308      	adds	r3, #8
    6cfe:	2200      	movs	r2, #0
    6d00:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    6d02:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d06:	4914      	ldr	r1, [pc, #80]	; (6d58 <Adc_InitGroupsStatus+0xd0>)
    6d08:	4613      	mov	r3, r2
    6d0a:	009b      	lsls	r3, r3, #2
    6d0c:	4413      	add	r3, r2
    6d0e:	009b      	lsls	r3, r3, #2
    6d10:	440b      	add	r3, r1
    6d12:	330c      	adds	r3, #12
    6d14:	2200      	movs	r2, #0
    6d16:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    6d18:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d1c:	490e      	ldr	r1, [pc, #56]	; (6d58 <Adc_InitGroupsStatus+0xd0>)
    6d1e:	4613      	mov	r3, r2
    6d20:	009b      	lsls	r3, r3, #2
    6d22:	4413      	add	r3, r2
    6d24:	009b      	lsls	r3, r3, #2
    6d26:	440b      	add	r3, r1
    6d28:	3310      	adds	r3, #16
    6d2a:	2200      	movs	r2, #0
    6d2c:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6d2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d32:	3301      	adds	r3, #1
    6d34:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d3c:	4a05      	ldr	r2, [pc, #20]	; (6d54 <Adc_InitGroupsStatus+0xcc>)
    6d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d42:	891b      	ldrh	r3, [r3, #8]
    6d44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d48:	429a      	cmp	r2, r3
    6d4a:	d3ab      	bcc.n	6ca4 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    6d4c:	bf00      	nop
    6d4e:	bf00      	nop
    6d50:	b004      	add	sp, #16
    6d52:	4770      	bx	lr
    6d54:	1fff8ce8 	.word	0x1fff8ce8
    6d58:	1fff8cec 	.word	0x1fff8cec

00006d5c <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    6d5c:	b084      	sub	sp, #16
    6d5e:	4603      	mov	r3, r0
    6d60:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6d64:	2300      	movs	r3, #0
    6d66:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    6d6a:	2300      	movs	r3, #0
    6d6c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d70:	2300      	movs	r3, #0
    6d72:	f88d 300f 	strb.w	r3, [sp, #15]
    6d76:	e035      	b.n	6de4 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6d78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d7c:	4a1d      	ldr	r2, [pc, #116]	; (6df4 <Adc_InitUnitStatus+0x98>)
    6d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d82:	681a      	ldr	r2, [r3, #0]
    6d84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d88:	4413      	add	r3, r2
    6d8a:	7f9b      	ldrb	r3, [r3, #30]
    6d8c:	2b01      	cmp	r3, #1
    6d8e:	d124      	bne.n	6dda <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    6d90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d94:	4a18      	ldr	r2, [pc, #96]	; (6df8 <Adc_InitUnitStatus+0x9c>)
    6d96:	2100      	movs	r1, #0
    6d98:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6d9c:	2300      	movs	r3, #0
    6d9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    6da2:	e00f      	b.n	6dc4 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    6da4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6da8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6dac:	4912      	ldr	r1, [pc, #72]	; (6df8 <Adc_InitUnitStatus+0x9c>)
    6dae:	0092      	lsls	r2, r2, #2
    6db0:	4413      	add	r3, r2
    6db2:	005b      	lsls	r3, r3, #1
    6db4:	440b      	add	r3, r1
    6db6:	2200      	movs	r2, #0
    6db8:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6dba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6dbe:	3301      	adds	r3, #1
    6dc0:	f8ad 300c 	strh.w	r3, [sp, #12]
    6dc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6dc8:	2b01      	cmp	r3, #1
    6dca:	d9eb      	bls.n	6da4 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    6dcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dd0:	4a09      	ldr	r2, [pc, #36]	; (6df8 <Adc_InitUnitStatus+0x9c>)
    6dd2:	00db      	lsls	r3, r3, #3
    6dd4:	4413      	add	r3, r2
    6dd6:	2200      	movs	r2, #0
    6dd8:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6dda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dde:	3301      	adds	r3, #1
    6de0:	f88d 300f 	strb.w	r3, [sp, #15]
    6de4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6de8:	2b01      	cmp	r3, #1
    6dea:	d9c5      	bls.n	6d78 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    6dec:	bf00      	nop
    6dee:	bf00      	nop
    6df0:	b004      	add	sp, #16
    6df2:	4770      	bx	lr
    6df4:	1fff8ce8 	.word	0x1fff8ce8
    6df8:	1fff8d00 	.word	0x1fff8d00

00006dfc <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    6dfc:	b084      	sub	sp, #16
    6dfe:	9001      	str	r0, [sp, #4]
    6e00:	460b      	mov	r3, r1
    6e02:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    6e06:	2300      	movs	r3, #0
    6e08:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    6e0c:	2301      	movs	r3, #1
    6e0e:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    6e12:	9b01      	ldr	r3, [sp, #4]
    6e14:	7c1b      	ldrb	r3, [r3, #16]
    6e16:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e1a:	429a      	cmp	r2, r3
    6e1c:	d11c      	bne.n	6e58 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e1e:	2300      	movs	r3, #0
    6e20:	f88d 300f 	strb.w	r3, [sp, #15]
    6e24:	e012      	b.n	6e4c <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	695a      	ldr	r2, [r3, #20]
    6e2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e2e:	4413      	add	r3, r2
    6e30:	781b      	ldrb	r3, [r3, #0]
    6e32:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e36:	429a      	cmp	r2, r3
    6e38:	d103      	bne.n	6e42 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    6e3a:	2300      	movs	r3, #0
    6e3c:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    6e40:	e00a      	b.n	6e58 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e46:	3301      	adds	r3, #1
    6e48:	f88d 300f 	strb.w	r3, [sp, #15]
    6e4c:	9b01      	ldr	r3, [sp, #4]
    6e4e:	7e1b      	ldrb	r3, [r3, #24]
    6e50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6e54:	429a      	cmp	r2, r3
    6e56:	d3e6      	bcc.n	6e26 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    6e58:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6e5c:	4618      	mov	r0, r3
    6e5e:	b004      	add	sp, #16
    6e60:	4770      	bx	lr

00006e62 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    6e62:	b500      	push	{lr}
    6e64:	b085      	sub	sp, #20
    6e66:	4603      	mov	r3, r0
    6e68:	f8ad 3006 	strh.w	r3, [sp, #6]
    6e6c:	460b      	mov	r3, r1
    6e6e:	f88d 3005 	strb.w	r3, [sp, #5]
    6e72:	4613      	mov	r3, r2
    6e74:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    6e78:	2300      	movs	r3, #0
    6e7a:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6e7e:	2300      	movs	r3, #0
    6e80:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    6e84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6e88:	493e      	ldr	r1, [pc, #248]	; (6f84 <Adc_UpdateStatusStartConversion+0x122>)
    6e8a:	4613      	mov	r3, r2
    6e8c:	009b      	lsls	r3, r3, #2
    6e8e:	4413      	add	r3, r2
    6e90:	009b      	lsls	r3, r3, #2
    6e92:	440b      	add	r3, r1
    6e94:	2201      	movs	r2, #1
    6e96:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    6e98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6e9c:	4939      	ldr	r1, [pc, #228]	; (6f84 <Adc_UpdateStatusStartConversion+0x122>)
    6e9e:	4613      	mov	r3, r2
    6ea0:	009b      	lsls	r3, r3, #2
    6ea2:	4413      	add	r3, r2
    6ea4:	009b      	lsls	r3, r3, #2
    6ea6:	440b      	add	r3, r1
    6ea8:	3308      	adds	r3, #8
    6eaa:	2200      	movs	r2, #0
    6eac:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6eae:	f003 fec9 	bl	ac44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6eb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6eb6:	4a34      	ldr	r2, [pc, #208]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6eb8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6ebc:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    6ec0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	d016      	beq.n	6ef6 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    6ec8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ecc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ed0:	492d      	ldr	r1, [pc, #180]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6ed2:	0092      	lsls	r2, r2, #2
    6ed4:	4413      	add	r3, r2
    6ed6:	005b      	lsls	r3, r3, #1
    6ed8:	440b      	add	r3, r1
    6eda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ede:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6ee0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ee4:	4a28      	ldr	r2, [pc, #160]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6ee6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    6eea:	b292      	uxth	r2, r2
    6eec:	3201      	adds	r2, #1
    6eee:	b291      	uxth	r1, r2
    6ef0:	4a25      	ldr	r2, [pc, #148]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6ef2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6ef6:	f003 fed1 	bl	ac9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6efa:	f003 fea3 	bl	ac44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6efe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f02:	4a21      	ldr	r2, [pc, #132]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6f04:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6f08:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    6f0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f10:	4a1d      	ldr	r2, [pc, #116]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6f12:	00db      	lsls	r3, r3, #3
    6f14:	4413      	add	r3, r2
    6f16:	885b      	ldrh	r3, [r3, #2]
    6f18:	b29b      	uxth	r3, r3
    6f1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f1e:	429a      	cmp	r2, r3
    6f20:	d003      	beq.n	6f2a <Adc_UpdateStatusStartConversion+0xc8>
    6f22:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6f26:	2b00      	cmp	r3, #0
    6f28:	d125      	bne.n	6f76 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    6f2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f2e:	4a16      	ldr	r2, [pc, #88]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6f30:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6f34:	b29b      	uxth	r3, r3
    6f36:	2b00      	cmp	r3, #0
    6f38:	d112      	bne.n	6f60 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    6f3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f3e:	4a12      	ldr	r2, [pc, #72]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6f40:	00db      	lsls	r3, r3, #3
    6f42:	4413      	add	r3, r2
    6f44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f48:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6f4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f4e:	4a0e      	ldr	r2, [pc, #56]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6f50:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    6f54:	b292      	uxth	r2, r2
    6f56:	3201      	adds	r2, #1
    6f58:	b291      	uxth	r1, r2
    6f5a:	4a0b      	ldr	r2, [pc, #44]	; (6f88 <Adc_UpdateStatusStartConversion+0x126>)
    6f5c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6f60:	f003 fe9c 	bl	ac9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    6f64:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6f68:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f6c:	4611      	mov	r1, r2
    6f6e:	4618      	mov	r0, r3
    6f70:	f002 fbf2 	bl	9758 <Adc_Ipw_StartNormalConversion>
    6f74:	e002      	b.n	6f7c <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6f76:	f003 fe91 	bl	ac9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    6f7a:	bf00      	nop
    6f7c:	bf00      	nop
    6f7e:	b005      	add	sp, #20
    6f80:	f85d fb04 	ldr.w	pc, [sp], #4
    6f84:	1fff8cec 	.word	0x1fff8cec
    6f88:	1fff8d00 	.word	0x1fff8d00

00006f8c <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    6f8c:	b500      	push	{lr}
    6f8e:	b085      	sub	sp, #20
    6f90:	9001      	str	r0, [sp, #4]
    6f92:	4608      	mov	r0, r1
    6f94:	4611      	mov	r1, r2
    6f96:	461a      	mov	r2, r3
    6f98:	4603      	mov	r3, r0
    6f9a:	f8ad 3002 	strh.w	r3, [sp, #2]
    6f9e:	460b      	mov	r3, r1
    6fa0:	f88d 3001 	strb.w	r3, [sp, #1]
    6fa4:	4613      	mov	r3, r2
    6fa6:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6faa:	2300      	movs	r3, #0
    6fac:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    6fb0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    6fb4:	4a26      	ldr	r2, [pc, #152]	; (7050 <Adc_StopSwGroupConversion+0xc4>)
    6fb6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6fba:	b29a      	uxth	r2, r3
    6fbc:	9b01      	ldr	r3, [sp, #4]
    6fbe:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6fc0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    6fc4:	4a22      	ldr	r2, [pc, #136]	; (7050 <Adc_StopSwGroupConversion+0xc4>)
    6fc6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6fca:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    6fce:	2300      	movs	r3, #0
    6fd0:	f8ad 300c 	strh.w	r3, [sp, #12]
    6fd4:	e02f      	b.n	7036 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    6fd6:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6fda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6fde:	491c      	ldr	r1, [pc, #112]	; (7050 <Adc_StopSwGroupConversion+0xc4>)
    6fe0:	0092      	lsls	r2, r2, #2
    6fe2:	4413      	add	r3, r2
    6fe4:	005b      	lsls	r3, r3, #1
    6fe6:	440b      	add	r3, r1
    6fe8:	885b      	ldrh	r3, [r3, #2]
    6fea:	b29b      	uxth	r3, r3
    6fec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6ff0:	429a      	cmp	r2, r3
    6ff2:	d11b      	bne.n	702c <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    6ff4:	9b01      	ldr	r3, [sp, #4]
    6ff6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6ffa:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    6ffc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7000:	2b00      	cmp	r3, #0
    7002:	d10b      	bne.n	701c <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7004:	f89d 2000 	ldrb.w	r2, [sp]
    7008:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    700c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7010:	4618      	mov	r0, r3
    7012:	f002 fc4b 	bl	98ac <Adc_Ipw_StopCurrentConversion>
    7016:	4603      	mov	r3, r0
    7018:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    701c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7020:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7024:	4611      	mov	r1, r2
    7026:	4618      	mov	r0, r3
    7028:	f001 fd88 	bl	8b3c <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    702c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7030:	3301      	adds	r3, #1
    7032:	f8ad 300c 	strh.w	r3, [sp, #12]
    7036:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    703a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    703e:	429a      	cmp	r2, r3
    7040:	d3c9      	bcc.n	6fd6 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    7042:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7046:	4618      	mov	r0, r3
    7048:	b005      	add	sp, #20
    704a:	f85d fb04 	ldr.w	pc, [sp], #4
    704e:	bf00      	nop
    7050:	1fff8d00 	.word	0x1fff8d00

00007054 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7054:	b500      	push	{lr}
    7056:	b089      	sub	sp, #36	; 0x24
    7058:	4603      	mov	r3, r0
    705a:	f8ad 3006 	strh.w	r3, [sp, #6]
    705e:	460b      	mov	r3, r1
    7060:	f88d 3005 	strb.w	r3, [sp, #5]
    7064:	4613      	mov	r3, r2
    7066:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    706a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    706e:	4a4f      	ldr	r2, [pc, #316]	; (71ac <Adc_UpdateStatusStopConversion+0x158>)
    7070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7074:	68da      	ldr	r2, [r3, #12]
    7076:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    707a:	005b      	lsls	r3, r3, #1
    707c:	4413      	add	r3, r2
    707e:	881b      	ldrh	r3, [r3, #0]
    7080:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7084:	2300      	movs	r3, #0
    7086:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    708a:	2300      	movs	r3, #0
    708c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    7090:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7094:	4a45      	ldr	r2, [pc, #276]	; (71ac <Adc_UpdateStatusStopConversion+0x158>)
    7096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709a:	685a      	ldr	r2, [r3, #4]
    709c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    70a0:	2134      	movs	r1, #52	; 0x34
    70a2:	fb01 f303 	mul.w	r3, r1, r3
    70a6:	4413      	add	r3, r2
    70a8:	689b      	ldr	r3, [r3, #8]
    70aa:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    70ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70b0:	4a3e      	ldr	r2, [pc, #248]	; (71ac <Adc_UpdateStatusStopConversion+0x158>)
    70b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b6:	685a      	ldr	r2, [r3, #4]
    70b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    70bc:	2134      	movs	r1, #52	; 0x34
    70be:	fb01 f303 	mul.w	r3, r1, r3
    70c2:	4413      	add	r3, r2
    70c4:	685b      	ldr	r3, [r3, #4]
    70c6:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    70c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70cc:	4a37      	ldr	r2, [pc, #220]	; (71ac <Adc_UpdateStatusStopConversion+0x158>)
    70ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70d2:	685a      	ldr	r2, [r3, #4]
    70d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    70d8:	2134      	movs	r1, #52	; 0x34
    70da:	fb01 f303 	mul.w	r3, r1, r3
    70de:	4413      	add	r3, r2
    70e0:	699b      	ldr	r3, [r3, #24]
    70e2:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    70e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    70e8:	4931      	ldr	r1, [pc, #196]	; (71b0 <Adc_UpdateStatusStopConversion+0x15c>)
    70ea:	4613      	mov	r3, r2
    70ec:	009b      	lsls	r3, r3, #2
    70ee:	4413      	add	r3, r2
    70f0:	009b      	lsls	r3, r3, #2
    70f2:	440b      	add	r3, r1
    70f4:	681b      	ldr	r3, [r3, #0]
    70f6:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    70f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    70fc:	492c      	ldr	r1, [pc, #176]	; (71b0 <Adc_UpdateStatusStopConversion+0x15c>)
    70fe:	4613      	mov	r3, r2
    7100:	009b      	lsls	r3, r3, #2
    7102:	4413      	add	r3, r2
    7104:	009b      	lsls	r3, r3, #2
    7106:	440b      	add	r3, r1
    7108:	3308      	adds	r3, #8
    710a:	2200      	movs	r2, #0
    710c:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    710e:	9b06      	ldr	r3, [sp, #24]
    7110:	2b00      	cmp	r3, #0
    7112:	d005      	beq.n	7120 <Adc_UpdateStatusStopConversion+0xcc>
    7114:	9b05      	ldr	r3, [sp, #20]
    7116:	2b01      	cmp	r3, #1
    7118:	d110      	bne.n	713c <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    711a:	9b04      	ldr	r3, [sp, #16]
    711c:	2b00      	cmp	r3, #0
    711e:	d10d      	bne.n	713c <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    7120:	9b03      	ldr	r3, [sp, #12]
    7122:	2b03      	cmp	r3, #3
    7124:	d10a      	bne.n	713c <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7126:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    712a:	4921      	ldr	r1, [pc, #132]	; (71b0 <Adc_UpdateStatusStopConversion+0x15c>)
    712c:	4613      	mov	r3, r2
    712e:	009b      	lsls	r3, r3, #2
    7130:	4413      	add	r3, r2
    7132:	009b      	lsls	r3, r3, #2
    7134:	440b      	add	r3, r1
    7136:	2200      	movs	r2, #0
    7138:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    713a:	e032      	b.n	71a2 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    713c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7140:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7144:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7148:	f10d 000a 	add.w	r0, sp, #10
    714c:	f7ff ff1e 	bl	6f8c <Adc_StopSwGroupConversion>
    7150:	4603      	mov	r3, r0
    7152:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7156:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    715a:	4915      	ldr	r1, [pc, #84]	; (71b0 <Adc_UpdateStatusStopConversion+0x15c>)
    715c:	4613      	mov	r3, r2
    715e:	009b      	lsls	r3, r3, #2
    7160:	4413      	add	r3, r2
    7162:	009b      	lsls	r3, r3, #2
    7164:	440b      	add	r3, r1
    7166:	2200      	movs	r2, #0
    7168:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    716a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    716e:	2b00      	cmp	r3, #0
    7170:	d10f      	bne.n	7192 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7172:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7176:	4a0f      	ldr	r2, [pc, #60]	; (71b4 <Adc_UpdateStatusStopConversion+0x160>)
    7178:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    717c:	b29b      	uxth	r3, r3
    717e:	2b00      	cmp	r3, #0
    7180:	d007      	beq.n	7192 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7182:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7186:	f89d 3005 	ldrb.w	r3, [sp, #5]
    718a:	4611      	mov	r1, r2
    718c:	4618      	mov	r0, r3
    718e:	f002 fae3 	bl	9758 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7192:	f89d 301d 	ldrb.w	r3, [sp, #29]
    7196:	2b01      	cmp	r3, #1
    7198:	d103      	bne.n	71a2 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    719a:	212b      	movs	r1, #43	; 0x2b
    719c:	2003      	movs	r0, #3
    719e:	f7ff fb45 	bl	682c <Adc_ReportDetRuntimeError>
}
    71a2:	bf00      	nop
    71a4:	b009      	add	sp, #36	; 0x24
    71a6:	f85d fb04 	ldr.w	pc, [sp], #4
    71aa:	bf00      	nop
    71ac:	1fff8ce8 	.word	0x1fff8ce8
    71b0:	1fff8cec 	.word	0x1fff8cec
    71b4:	1fff8d00 	.word	0x1fff8d00

000071b8 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    71b8:	b500      	push	{lr}
    71ba:	b085      	sub	sp, #20
    71bc:	4603      	mov	r3, r0
    71be:	f8ad 3006 	strh.w	r3, [sp, #6]
    71c2:	460b      	mov	r3, r1
    71c4:	f88d 3005 	strb.w	r3, [sp, #5]
    71c8:	4613      	mov	r3, r2
    71ca:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    71ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71d2:	4a18      	ldr	r2, [pc, #96]	; (7234 <Adc_UpdateStatusReadGroup+0x7c>)
    71d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d8:	68da      	ldr	r2, [r3, #12]
    71da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71de:	005b      	lsls	r3, r3, #1
    71e0:	4413      	add	r3, r2
    71e2:	881b      	ldrh	r3, [r3, #0]
    71e4:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    71e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71ec:	4a11      	ldr	r2, [pc, #68]	; (7234 <Adc_UpdateStatusReadGroup+0x7c>)
    71ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71f2:	685a      	ldr	r2, [r3, #4]
    71f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71f8:	2134      	movs	r1, #52	; 0x34
    71fa:	fb01 f303 	mul.w	r3, r1, r3
    71fe:	4413      	add	r3, r2
    7200:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    7204:	2b01      	cmp	r3, #1
    7206:	d109      	bne.n	721c <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    7208:	f89d 2004 	ldrb.w	r2, [sp, #4]
    720c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    7210:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7214:	4618      	mov	r0, r3
    7216:	f000 f80f 	bl	7238 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    721a:	e007      	b.n	722c <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    721c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7220:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7224:	4611      	mov	r1, r2
    7226:	4618      	mov	r0, r3
    7228:	f000 f8e8 	bl	73fc <Adc_UpdateStatusReadGroupInt>
}
    722c:	bf00      	nop
    722e:	b005      	add	sp, #20
    7230:	f85d fb04 	ldr.w	pc, [sp], #4
    7234:	1fff8ce8 	.word	0x1fff8ce8

00007238 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    7238:	b500      	push	{lr}
    723a:	b085      	sub	sp, #20
    723c:	4603      	mov	r3, r0
    723e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7242:	460b      	mov	r3, r1
    7244:	f88d 3005 	strb.w	r3, [sp, #5]
    7248:	4613      	mov	r3, r2
    724a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    724e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7252:	4a2c      	ldr	r2, [pc, #176]	; (7304 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7258:	68da      	ldr	r2, [r3, #12]
    725a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    725e:	005b      	lsls	r3, r3, #1
    7260:	4413      	add	r3, r2
    7262:	881b      	ldrh	r3, [r3, #0]
    7264:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7268:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    726c:	4926      	ldr	r1, [pc, #152]	; (7308 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    726e:	4613      	mov	r3, r2
    7270:	009b      	lsls	r3, r3, #2
    7272:	4413      	add	r3, r2
    7274:	009b      	lsls	r3, r3, #2
    7276:	440b      	add	r3, r1
    7278:	3304      	adds	r3, #4
    727a:	2201      	movs	r2, #1
    727c:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    727e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7282:	2b00      	cmp	r3, #0
    7284:	d03a      	beq.n	72fc <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    7286:	f89d 3004 	ldrb.w	r3, [sp, #4]
    728a:	4a1e      	ldr	r2, [pc, #120]	; (7304 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    728c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7290:	685a      	ldr	r2, [r3, #4]
    7292:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7296:	2134      	movs	r1, #52	; 0x34
    7298:	fb01 f303 	mul.w	r3, r1, r3
    729c:	4413      	add	r3, r2
    729e:	689b      	ldr	r3, [r3, #8]
    72a0:	2b01      	cmp	r3, #1
    72a2:	d10a      	bne.n	72ba <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    72a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    72a8:	4917      	ldr	r1, [pc, #92]	; (7308 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    72aa:	4613      	mov	r3, r2
    72ac:	009b      	lsls	r3, r3, #2
    72ae:	4413      	add	r3, r2
    72b0:	009b      	lsls	r3, r3, #2
    72b2:	440b      	add	r3, r1
    72b4:	2201      	movs	r2, #1
    72b6:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    72b8:	e020      	b.n	72fc <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    72ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
    72be:	4a11      	ldr	r2, [pc, #68]	; (7304 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    72c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72c4:	685a      	ldr	r2, [r3, #4]
    72c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72ca:	2134      	movs	r1, #52	; 0x34
    72cc:	fb01 f303 	mul.w	r3, r1, r3
    72d0:	4413      	add	r3, r2
    72d2:	695b      	ldr	r3, [r3, #20]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d111      	bne.n	72fc <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    72d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    72dc:	490a      	ldr	r1, [pc, #40]	; (7308 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    72de:	4613      	mov	r3, r2
    72e0:	009b      	lsls	r3, r3, #2
    72e2:	4413      	add	r3, r2
    72e4:	009b      	lsls	r3, r3, #2
    72e6:	440b      	add	r3, r1
    72e8:	2200      	movs	r2, #0
    72ea:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    72ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72f4:	4611      	mov	r1, r2
    72f6:	4618      	mov	r0, r3
    72f8:	f000 f808 	bl	730c <Adc_UpdateSwQueueIndexNoInt>
}
    72fc:	bf00      	nop
    72fe:	b005      	add	sp, #20
    7300:	f85d fb04 	ldr.w	pc, [sp], #4
    7304:	1fff8ce8 	.word	0x1fff8ce8
    7308:	1fff8cec 	.word	0x1fff8cec

0000730c <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    730c:	b500      	push	{lr}
    730e:	b085      	sub	sp, #20
    7310:	4603      	mov	r3, r0
    7312:	460a      	mov	r2, r1
    7314:	f8ad 3006 	strh.w	r3, [sp, #6]
    7318:	4613      	mov	r3, r2
    731a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    731e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7322:	4a34      	ldr	r2, [pc, #208]	; (73f4 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    7324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7328:	68da      	ldr	r2, [r3, #12]
    732a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    732e:	005b      	lsls	r3, r3, #1
    7330:	4413      	add	r3, r2
    7332:	881b      	ldrh	r3, [r3, #0]
    7334:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    7338:	f89d 3005 	ldrb.w	r3, [sp, #5]
    733c:	4a2d      	ldr	r2, [pc, #180]	; (73f4 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    733e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7342:	685a      	ldr	r2, [r3, #4]
    7344:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7348:	2134      	movs	r1, #52	; 0x34
    734a:	fb01 f303 	mul.w	r3, r1, r3
    734e:	4413      	add	r3, r2
    7350:	789b      	ldrb	r3, [r3, #2]
    7352:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7356:	f89d 300b 	ldrb.w	r3, [sp, #11]
    735a:	4a27      	ldr	r2, [pc, #156]	; (73f8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    735c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7360:	b29b      	uxth	r3, r3
    7362:	2b00      	cmp	r3, #0
    7364:	d041      	beq.n	73ea <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7366:	f89d 300b 	ldrb.w	r3, [sp, #11]
    736a:	4a23      	ldr	r2, [pc, #140]	; (73f8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    736c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7370:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7374:	2300      	movs	r3, #0
    7376:	f8ad 300e 	strh.w	r3, [sp, #14]
    737a:	e01c      	b.n	73b6 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    737c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7380:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7384:	491c      	ldr	r1, [pc, #112]	; (73f8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7386:	0092      	lsls	r2, r2, #2
    7388:	4413      	add	r3, r2
    738a:	005b      	lsls	r3, r3, #1
    738c:	440b      	add	r3, r1
    738e:	885b      	ldrh	r3, [r3, #2]
    7390:	b29b      	uxth	r3, r3
    7392:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7396:	429a      	cmp	r2, r3
    7398:	d108      	bne.n	73ac <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    739a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    739e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    73a2:	4611      	mov	r1, r2
    73a4:	4618      	mov	r0, r3
    73a6:	f001 fbc9 	bl	8b3c <Adc_Ipw_RemoveFromQueue>
                    break;
    73aa:	e00a      	b.n	73c2 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    73ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    73b0:	3301      	adds	r3, #1
    73b2:	f8ad 300e 	strh.w	r3, [sp, #14]
    73b6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    73be:	429a      	cmp	r2, r3
    73c0:	d3dc      	bcc.n	737c <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    73c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d10f      	bne.n	73ea <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    73ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    73ce:	4a0a      	ldr	r2, [pc, #40]	; (73f8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    73d0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    73d4:	b29b      	uxth	r3, r3
    73d6:	2b00      	cmp	r3, #0
    73d8:	d007      	beq.n	73ea <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    73da:	f89d 2005 	ldrb.w	r2, [sp, #5]
    73de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    73e2:	4611      	mov	r1, r2
    73e4:	4618      	mov	r0, r3
    73e6:	f002 f9b7 	bl	9758 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    73ea:	bf00      	nop
    73ec:	b005      	add	sp, #20
    73ee:	f85d fb04 	ldr.w	pc, [sp], #4
    73f2:	bf00      	nop
    73f4:	1fff8ce8 	.word	0x1fff8ce8
    73f8:	1fff8d00 	.word	0x1fff8d00

000073fc <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    73fc:	b084      	sub	sp, #16
    73fe:	4603      	mov	r3, r0
    7400:	460a      	mov	r2, r1
    7402:	f8ad 3006 	strh.w	r3, [sp, #6]
    7406:	4613      	mov	r3, r2
    7408:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    740c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7410:	4a47      	ldr	r2, [pc, #284]	; (7530 <Adc_UpdateStatusReadGroupInt+0x134>)
    7412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7416:	68da      	ldr	r2, [r3, #12]
    7418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    741c:	005b      	lsls	r3, r3, #1
    741e:	4413      	add	r3, r2
    7420:	881b      	ldrh	r3, [r3, #0]
    7422:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7426:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    742a:	4942      	ldr	r1, [pc, #264]	; (7534 <Adc_UpdateStatusReadGroupInt+0x138>)
    742c:	4613      	mov	r3, r2
    742e:	009b      	lsls	r3, r3, #2
    7430:	4413      	add	r3, r2
    7432:	009b      	lsls	r3, r3, #2
    7434:	440b      	add	r3, r1
    7436:	681b      	ldr	r3, [r3, #0]
    7438:	2b02      	cmp	r3, #2
    743a:	d10a      	bne.n	7452 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    743c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7440:	493c      	ldr	r1, [pc, #240]	; (7534 <Adc_UpdateStatusReadGroupInt+0x138>)
    7442:	4613      	mov	r3, r2
    7444:	009b      	lsls	r3, r3, #2
    7446:	4413      	add	r3, r2
    7448:	009b      	lsls	r3, r3, #2
    744a:	440b      	add	r3, r1
    744c:	2201      	movs	r2, #1
    744e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    7450:	e06a      	b.n	7528 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7452:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7456:	4937      	ldr	r1, [pc, #220]	; (7534 <Adc_UpdateStatusReadGroupInt+0x138>)
    7458:	4613      	mov	r3, r2
    745a:	009b      	lsls	r3, r3, #2
    745c:	4413      	add	r3, r2
    745e:	009b      	lsls	r3, r3, #2
    7460:	440b      	add	r3, r1
    7462:	681b      	ldr	r3, [r3, #0]
    7464:	2b03      	cmp	r3, #3
    7466:	d15f      	bne.n	7528 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7468:	f89d 3005 	ldrb.w	r3, [sp, #5]
    746c:	4a30      	ldr	r2, [pc, #192]	; (7530 <Adc_UpdateStatusReadGroupInt+0x134>)
    746e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7472:	685a      	ldr	r2, [r3, #4]
    7474:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7478:	2134      	movs	r1, #52	; 0x34
    747a:	fb01 f303 	mul.w	r3, r1, r3
    747e:	4413      	add	r3, r2
    7480:	695b      	ldr	r3, [r3, #20]
    7482:	2b00      	cmp	r3, #0
    7484:	d150      	bne.n	7528 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7486:	f89d 3005 	ldrb.w	r3, [sp, #5]
    748a:	4a29      	ldr	r2, [pc, #164]	; (7530 <Adc_UpdateStatusReadGroupInt+0x134>)
    748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7490:	685a      	ldr	r2, [r3, #4]
    7492:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7496:	2134      	movs	r1, #52	; 0x34
    7498:	fb01 f303 	mul.w	r3, r1, r3
    749c:	4413      	add	r3, r2
    749e:	689b      	ldr	r3, [r3, #8]
    74a0:	2b00      	cmp	r3, #0
    74a2:	d02c      	beq.n	74fe <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    74a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74a8:	4a21      	ldr	r2, [pc, #132]	; (7530 <Adc_UpdateStatusReadGroupInt+0x134>)
    74aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ae:	685a      	ldr	r2, [r3, #4]
    74b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74b4:	2134      	movs	r1, #52	; 0x34
    74b6:	fb01 f303 	mul.w	r3, r1, r3
    74ba:	4413      	add	r3, r2
    74bc:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    74be:	2b01      	cmp	r3, #1
    74c0:	d128      	bne.n	7514 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    74c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74c6:	4a1a      	ldr	r2, [pc, #104]	; (7530 <Adc_UpdateStatusReadGroupInt+0x134>)
    74c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74cc:	685a      	ldr	r2, [r3, #4]
    74ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74d2:	2134      	movs	r1, #52	; 0x34
    74d4:	fb01 f303 	mul.w	r3, r1, r3
    74d8:	4413      	add	r3, r2
    74da:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    74dc:	2b01      	cmp	r3, #1
    74de:	d119      	bne.n	7514 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    74e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74e4:	4a12      	ldr	r2, [pc, #72]	; (7530 <Adc_UpdateStatusReadGroupInt+0x134>)
    74e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ea:	685a      	ldr	r2, [r3, #4]
    74ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74f0:	2134      	movs	r1, #52	; 0x34
    74f2:	fb01 f303 	mul.w	r3, r1, r3
    74f6:	4413      	add	r3, r2
    74f8:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    74fa:	2b00      	cmp	r3, #0
    74fc:	d10a      	bne.n	7514 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    74fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7502:	490c      	ldr	r1, [pc, #48]	; (7534 <Adc_UpdateStatusReadGroupInt+0x138>)
    7504:	4613      	mov	r3, r2
    7506:	009b      	lsls	r3, r3, #2
    7508:	4413      	add	r3, r2
    750a:	009b      	lsls	r3, r3, #2
    750c:	440b      	add	r3, r1
    750e:	2200      	movs	r2, #0
    7510:	601a      	str	r2, [r3, #0]
}
    7512:	e009      	b.n	7528 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7514:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7518:	4906      	ldr	r1, [pc, #24]	; (7534 <Adc_UpdateStatusReadGroupInt+0x138>)
    751a:	4613      	mov	r3, r2
    751c:	009b      	lsls	r3, r3, #2
    751e:	4413      	add	r3, r2
    7520:	009b      	lsls	r3, r3, #2
    7522:	440b      	add	r3, r1
    7524:	2201      	movs	r2, #1
    7526:	601a      	str	r2, [r3, #0]
}
    7528:	bf00      	nop
    752a:	b004      	add	sp, #16
    752c:	4770      	bx	lr
    752e:	bf00      	nop
    7530:	1fff8ce8 	.word	0x1fff8ce8
    7534:	1fff8cec 	.word	0x1fff8cec

00007538 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    7538:	b084      	sub	sp, #16
    753a:	4603      	mov	r3, r0
    753c:	460a      	mov	r2, r1
    753e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7542:	4613      	mov	r3, r2
    7544:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7548:	f89d 3005 	ldrb.w	r3, [sp, #5]
    754c:	4a46      	ldr	r2, [pc, #280]	; (7668 <Adc_UpdateStatusAfterGetStream+0x130>)
    754e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7552:	68da      	ldr	r2, [r3, #12]
    7554:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7558:	005b      	lsls	r3, r3, #1
    755a:	4413      	add	r3, r2
    755c:	881b      	ldrh	r3, [r3, #0]
    755e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7562:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7566:	4941      	ldr	r1, [pc, #260]	; (766c <Adc_UpdateStatusAfterGetStream+0x134>)
    7568:	4613      	mov	r3, r2
    756a:	009b      	lsls	r3, r3, #2
    756c:	4413      	add	r3, r2
    756e:	009b      	lsls	r3, r3, #2
    7570:	440b      	add	r3, r1
    7572:	681b      	ldr	r3, [r3, #0]
    7574:	2b02      	cmp	r3, #2
    7576:	d109      	bne.n	758c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7578:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    757c:	493b      	ldr	r1, [pc, #236]	; (766c <Adc_UpdateStatusAfterGetStream+0x134>)
    757e:	4613      	mov	r3, r2
    7580:	009b      	lsls	r3, r3, #2
    7582:	4413      	add	r3, r2
    7584:	009b      	lsls	r3, r3, #2
    7586:	440b      	add	r3, r1
    7588:	2201      	movs	r2, #1
    758a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    758c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7590:	4936      	ldr	r1, [pc, #216]	; (766c <Adc_UpdateStatusAfterGetStream+0x134>)
    7592:	4613      	mov	r3, r2
    7594:	009b      	lsls	r3, r3, #2
    7596:	4413      	add	r3, r2
    7598:	009b      	lsls	r3, r3, #2
    759a:	440b      	add	r3, r1
    759c:	681b      	ldr	r3, [r3, #0]
    759e:	2b03      	cmp	r3, #3
    75a0:	d15f      	bne.n	7662 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    75a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75a6:	4a30      	ldr	r2, [pc, #192]	; (7668 <Adc_UpdateStatusAfterGetStream+0x130>)
    75a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ac:	685a      	ldr	r2, [r3, #4]
    75ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75b2:	2134      	movs	r1, #52	; 0x34
    75b4:	fb01 f303 	mul.w	r3, r1, r3
    75b8:	4413      	add	r3, r2
    75ba:	695b      	ldr	r3, [r3, #20]
    75bc:	2b00      	cmp	r3, #0
    75be:	d150      	bne.n	7662 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    75c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75c4:	4a28      	ldr	r2, [pc, #160]	; (7668 <Adc_UpdateStatusAfterGetStream+0x130>)
    75c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ca:	685a      	ldr	r2, [r3, #4]
    75cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75d0:	2134      	movs	r1, #52	; 0x34
    75d2:	fb01 f303 	mul.w	r3, r1, r3
    75d6:	4413      	add	r3, r2
    75d8:	689b      	ldr	r3, [r3, #8]
    75da:	2b00      	cmp	r3, #0
    75dc:	d02c      	beq.n	7638 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    75de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75e2:	4a21      	ldr	r2, [pc, #132]	; (7668 <Adc_UpdateStatusAfterGetStream+0x130>)
    75e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e8:	685a      	ldr	r2, [r3, #4]
    75ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75ee:	2134      	movs	r1, #52	; 0x34
    75f0:	fb01 f303 	mul.w	r3, r1, r3
    75f4:	4413      	add	r3, r2
    75f6:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    75f8:	2b01      	cmp	r3, #1
    75fa:	d128      	bne.n	764e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    75fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7600:	4a19      	ldr	r2, [pc, #100]	; (7668 <Adc_UpdateStatusAfterGetStream+0x130>)
    7602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7606:	685a      	ldr	r2, [r3, #4]
    7608:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    760c:	2134      	movs	r1, #52	; 0x34
    760e:	fb01 f303 	mul.w	r3, r1, r3
    7612:	4413      	add	r3, r2
    7614:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7616:	2b01      	cmp	r3, #1
    7618:	d119      	bne.n	764e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    761a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    761e:	4a12      	ldr	r2, [pc, #72]	; (7668 <Adc_UpdateStatusAfterGetStream+0x130>)
    7620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7624:	685a      	ldr	r2, [r3, #4]
    7626:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    762a:	2134      	movs	r1, #52	; 0x34
    762c:	fb01 f303 	mul.w	r3, r1, r3
    7630:	4413      	add	r3, r2
    7632:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7634:	2b00      	cmp	r3, #0
    7636:	d10a      	bne.n	764e <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7638:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    763c:	490b      	ldr	r1, [pc, #44]	; (766c <Adc_UpdateStatusAfterGetStream+0x134>)
    763e:	4613      	mov	r3, r2
    7640:	009b      	lsls	r3, r3, #2
    7642:	4413      	add	r3, r2
    7644:	009b      	lsls	r3, r3, #2
    7646:	440b      	add	r3, r1
    7648:	2200      	movs	r2, #0
    764a:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    764c:	e009      	b.n	7662 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    764e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7652:	4906      	ldr	r1, [pc, #24]	; (766c <Adc_UpdateStatusAfterGetStream+0x134>)
    7654:	4613      	mov	r3, r2
    7656:	009b      	lsls	r3, r3, #2
    7658:	4413      	add	r3, r2
    765a:	009b      	lsls	r3, r3, #2
    765c:	440b      	add	r3, r1
    765e:	2201      	movs	r2, #1
    7660:	601a      	str	r2, [r3, #0]
}
    7662:	bf00      	nop
    7664:	b004      	add	sp, #16
    7666:	4770      	bx	lr
    7668:	1fff8ce8 	.word	0x1fff8ce8
    766c:	1fff8cec 	.word	0x1fff8cec

00007670 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    7670:	b500      	push	{lr}
    7672:	b085      	sub	sp, #20
    7674:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7676:	f002 fa5b 	bl	9b30 <Adc_GetCoreID>
    767a:	4603      	mov	r3, r0
    767c:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7680:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7684:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7688:	f89d 300c 	ldrb.w	r3, [sp, #12]
    768c:	b2db      	uxtb	r3, r3
    768e:	4619      	mov	r1, r3
    7690:	9801      	ldr	r0, [sp, #4]
    7692:	f7ff fbb3 	bl	6dfc <Adc_CheckCurrentCoreId>
    7696:	4603      	mov	r3, r0
    7698:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    769c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d12c      	bne.n	76fe <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    76a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76a8:	b2db      	uxtb	r3, r3
    76aa:	4619      	mov	r1, r3
    76ac:	4a16      	ldr	r2, [pc, #88]	; (7708 <Adc_Init+0x98>)
    76ae:	9b01      	ldr	r3, [sp, #4]
    76b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    76b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76b8:	b2db      	uxtb	r3, r3
    76ba:	4618      	mov	r0, r3
    76bc:	f7ff fb4e 	bl	6d5c <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    76c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76c4:	b2db      	uxtb	r3, r3
    76c6:	4618      	mov	r0, r3
    76c8:	f7ff fade 	bl	6c88 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    76cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76d0:	b2db      	uxtb	r3, r3
    76d2:	461a      	mov	r2, r3
    76d4:	4b0c      	ldr	r3, [pc, #48]	; (7708 <Adc_Init+0x98>)
    76d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    76da:	681b      	ldr	r3, [r3, #0]
    76dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    76e0:	4611      	mov	r1, r2
    76e2:	4618      	mov	r0, r3
    76e4:	f001 ff78 	bl	95d8 <Adc_Ipw_Init>
    76e8:	4603      	mov	r3, r0
    76ea:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    76ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
    76f2:	2b01      	cmp	r3, #1
    76f4:	d103      	bne.n	76fe <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    76f6:	212b      	movs	r1, #43	; 0x2b
    76f8:	2000      	movs	r0, #0
    76fa:	f7ff f897 	bl	682c <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    76fe:	bf00      	nop
    7700:	b005      	add	sp, #20
    7702:	f85d fb04 	ldr.w	pc, [sp], #4
    7706:	bf00      	nop
    7708:	1fff8ce8 	.word	0x1fff8ce8

0000770c <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    770c:	b500      	push	{lr}
    770e:	b085      	sub	sp, #20
    7710:	4603      	mov	r3, r0
    7712:	9100      	str	r1, [sp, #0]
    7714:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    7718:	2301      	movs	r3, #1
    771a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    771e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7722:	4618      	mov	r0, r3
    7724:	f7ff f9a2 	bl	6a6c <Adc_ValidateSetupBufferNotBusy>
    7728:	4603      	mov	r3, r0
    772a:	2b00      	cmp	r3, #0
    772c:	d10d      	bne.n	774a <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    772e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7732:	4909      	ldr	r1, [pc, #36]	; (7758 <Adc_SetupResultBuffer+0x4c>)
    7734:	4613      	mov	r3, r2
    7736:	009b      	lsls	r3, r3, #2
    7738:	4413      	add	r3, r2
    773a:	009b      	lsls	r3, r3, #2
    773c:	440b      	add	r3, r1
    773e:	330c      	adds	r3, #12
    7740:	9a00      	ldr	r2, [sp, #0]
    7742:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7744:	2300      	movs	r3, #0
    7746:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    774a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    774e:	4618      	mov	r0, r3
    7750:	b005      	add	sp, #20
    7752:	f85d fb04 	ldr.w	pc, [sp], #4
    7756:	bf00      	nop
    7758:	1fff8cec 	.word	0x1fff8cec

0000775c <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    775c:	b500      	push	{lr}
    775e:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7760:	2300      	movs	r3, #0
    7762:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7766:	f002 f9e3 	bl	9b30 <Adc_GetCoreID>
    776a:	4603      	mov	r3, r0
    776c:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7770:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7774:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7778:	f89d 3002 	ldrb.w	r3, [sp, #2]
    777c:	b2db      	uxtb	r3, r3
    777e:	461a      	mov	r2, r3
    7780:	4b2d      	ldr	r3, [pc, #180]	; (7838 <Adc_DeInit+0xdc>)
    7782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7786:	f89d 2006 	ldrb.w	r2, [sp, #6]
    778a:	4611      	mov	r1, r2
    778c:	4618      	mov	r0, r3
    778e:	f7ff fb35 	bl	6dfc <Adc_CheckCurrentCoreId>
    7792:	4603      	mov	r3, r0
    7794:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7798:	f89d 3005 	ldrb.w	r3, [sp, #5]
    779c:	2b00      	cmp	r3, #0
    779e:	d147      	bne.n	7830 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    77a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77a4:	b2db      	uxtb	r3, r3
    77a6:	4618      	mov	r0, r3
    77a8:	f7ff f912 	bl	69d0 <Adc_ValidateDeInitNotBusy>
    77ac:	4603      	mov	r3, r0
    77ae:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    77b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    77b6:	2b00      	cmp	r3, #0
    77b8:	d13a      	bne.n	7830 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    77ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77be:	b2db      	uxtb	r3, r3
    77c0:	4618      	mov	r0, r3
    77c2:	f001 ff4e 	bl	9662 <Adc_Ipw_DeInit>
    77c6:	4603      	mov	r3, r0
    77c8:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    77cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    77d0:	2b01      	cmp	r3, #1
    77d2:	d103      	bne.n	77dc <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    77d4:	212b      	movs	r1, #43	; 0x2b
    77d6:	2001      	movs	r0, #1
    77d8:	f7ff f828 	bl	682c <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    77dc:	2300      	movs	r3, #0
    77de:	f88d 3007 	strb.w	r3, [sp, #7]
    77e2:	e019      	b.n	7818 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    77e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77e8:	b2db      	uxtb	r3, r3
    77ea:	461a      	mov	r2, r3
    77ec:	4b12      	ldr	r3, [pc, #72]	; (7838 <Adc_DeInit+0xdc>)
    77ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77f2:	681a      	ldr	r2, [r3, #0]
    77f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77f8:	4413      	add	r3, r2
    77fa:	7f9b      	ldrb	r3, [r3, #30]
    77fc:	2b01      	cmp	r3, #1
    77fe:	d106      	bne.n	780e <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7800:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7804:	4a0d      	ldr	r2, [pc, #52]	; (783c <Adc_DeInit+0xe0>)
    7806:	00db      	lsls	r3, r3, #3
    7808:	4413      	add	r3, r2
    780a:	2200      	movs	r2, #0
    780c:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    780e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7812:	3301      	adds	r3, #1
    7814:	f88d 3007 	strb.w	r3, [sp, #7]
    7818:	f89d 3007 	ldrb.w	r3, [sp, #7]
    781c:	2b01      	cmp	r3, #1
    781e:	d9e1      	bls.n	77e4 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    7820:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7824:	b2db      	uxtb	r3, r3
    7826:	4619      	mov	r1, r3
    7828:	4b03      	ldr	r3, [pc, #12]	; (7838 <Adc_DeInit+0xdc>)
    782a:	2200      	movs	r2, #0
    782c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    7830:	bf00      	nop
    7832:	b003      	add	sp, #12
    7834:	f85d fb04 	ldr.w	pc, [sp], #4
    7838:	1fff8ce8 	.word	0x1fff8ce8
    783c:	1fff8d00 	.word	0x1fff8d00

00007840 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    7840:	b500      	push	{lr}
    7842:	b085      	sub	sp, #20
    7844:	4603      	mov	r3, r0
    7846:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    784a:	2300      	movs	r3, #0
    784c:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7850:	2300      	movs	r3, #0
    7852:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7856:	f002 f96b 	bl	9b30 <Adc_GetCoreID>
    785a:	4603      	mov	r3, r0
    785c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7860:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7864:	b2db      	uxtb	r3, r3
    7866:	461a      	mov	r2, r3
    7868:	4b1a      	ldr	r3, [pc, #104]	; (78d4 <Adc_StartGroupConversion+0x94>)
    786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    786e:	68da      	ldr	r2, [r3, #12]
    7870:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7874:	005b      	lsls	r3, r3, #1
    7876:	4413      	add	r3, r2
    7878:	881b      	ldrh	r3, [r3, #0]
    787a:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    787e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7882:	b2da      	uxtb	r2, r3
    7884:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7888:	4611      	mov	r1, r2
    788a:	4618      	mov	r0, r3
    788c:	f7ff f912 	bl	6ab4 <Adc_ValidateStateStartGroupConvNotBusy>
    7890:	4603      	mov	r3, r0
    7892:	2b00      	cmp	r3, #0
    7894:	d11a      	bne.n	78cc <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7896:	f89d 300c 	ldrb.w	r3, [sp, #12]
    789a:	b2db      	uxtb	r3, r3
    789c:	461a      	mov	r2, r3
    789e:	4b0d      	ldr	r3, [pc, #52]	; (78d4 <Adc_StartGroupConversion+0x94>)
    78a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78a4:	685a      	ldr	r2, [r3, #4]
    78a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78aa:	2134      	movs	r1, #52	; 0x34
    78ac:	fb01 f303 	mul.w	r3, r1, r3
    78b0:	4413      	add	r3, r2
    78b2:	789b      	ldrb	r3, [r3, #2]
    78b4:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    78b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78bc:	b2da      	uxtb	r2, r3
    78be:	f89d 100d 	ldrb.w	r1, [sp, #13]
    78c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78c6:	4618      	mov	r0, r3
    78c8:	f7ff facb 	bl	6e62 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    78cc:	bf00      	nop
    78ce:	b005      	add	sp, #20
    78d0:	f85d fb04 	ldr.w	pc, [sp], #4
    78d4:	1fff8ce8 	.word	0x1fff8ce8

000078d8 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    78d8:	b500      	push	{lr}
    78da:	b085      	sub	sp, #20
    78dc:	4603      	mov	r3, r0
    78de:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    78e2:	2300      	movs	r3, #0
    78e4:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    78e8:	2300      	movs	r3, #0
    78ea:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    78ee:	f002 f91f 	bl	9b30 <Adc_GetCoreID>
    78f2:	4603      	mov	r3, r0
    78f4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    78f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    78fc:	b2da      	uxtb	r2, r3
    78fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7902:	4619      	mov	r1, r3
    7904:	2003      	movs	r0, #3
    7906:	f7ff f94d 	bl	6ba4 <Adc_ValidateStateNotIdle>
    790a:	4603      	mov	r3, r0
    790c:	2b00      	cmp	r3, #0
    790e:	d129      	bne.n	7964 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7910:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7914:	b2db      	uxtb	r3, r3
    7916:	461a      	mov	r2, r3
    7918:	4b14      	ldr	r3, [pc, #80]	; (796c <Adc_StopGroupConversion+0x94>)
    791a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    791e:	68da      	ldr	r2, [r3, #12]
    7920:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7924:	005b      	lsls	r3, r3, #1
    7926:	4413      	add	r3, r2
    7928:	881b      	ldrh	r3, [r3, #0]
    792a:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    792e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7932:	b2db      	uxtb	r3, r3
    7934:	461a      	mov	r2, r3
    7936:	4b0d      	ldr	r3, [pc, #52]	; (796c <Adc_StopGroupConversion+0x94>)
    7938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    793c:	685a      	ldr	r2, [r3, #4]
    793e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7942:	2134      	movs	r1, #52	; 0x34
    7944:	fb01 f303 	mul.w	r3, r1, r3
    7948:	4413      	add	r3, r2
    794a:	789b      	ldrb	r3, [r3, #2]
    794c:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    7950:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7954:	b2da      	uxtb	r2, r3
    7956:	f89d 100f 	ldrb.w	r1, [sp, #15]
    795a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    795e:	4618      	mov	r0, r3
    7960:	f7ff fb78 	bl	7054 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7964:	bf00      	nop
    7966:	b005      	add	sp, #20
    7968:	f85d fb04 	ldr.w	pc, [sp], #4
    796c:	1fff8ce8 	.word	0x1fff8ce8

00007970 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7970:	b500      	push	{lr}
    7972:	b085      	sub	sp, #20
    7974:	4603      	mov	r3, r0
    7976:	9100      	str	r1, [sp, #0]
    7978:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    797c:	2301      	movs	r3, #1
    797e:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7982:	2301      	movs	r3, #1
    7984:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7988:	f002 f8d2 	bl	9b30 <Adc_GetCoreID>
    798c:	4603      	mov	r3, r0
    798e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7992:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7996:	b2da      	uxtb	r2, r3
    7998:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    799c:	4619      	mov	r1, r3
    799e:	2004      	movs	r0, #4
    79a0:	f7ff f900 	bl	6ba4 <Adc_ValidateStateNotIdle>
    79a4:	4603      	mov	r3, r0
    79a6:	2b00      	cmp	r3, #0
    79a8:	d121      	bne.n	79ee <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    79aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    79ae:	b2db      	uxtb	r3, r3
    79b0:	f10d 020d 	add.w	r2, sp, #13
    79b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    79b8:	9900      	ldr	r1, [sp, #0]
    79ba:	f002 f812 	bl	99e2 <Adc_Ipw_ReadGroup>
    79be:	4603      	mov	r3, r0
    79c0:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    79c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79c8:	2b00      	cmp	r3, #0
    79ca:	d006      	beq.n	79da <Adc_ReadGroup+0x6a>
    79cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    79d0:	f083 0301 	eor.w	r3, r3, #1
    79d4:	b2db      	uxtb	r3, r3
    79d6:	2b00      	cmp	r3, #0
    79d8:	d009      	beq.n	79ee <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    79da:	f89d 100d 	ldrb.w	r1, [sp, #13]
    79de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    79e2:	b2da      	uxtb	r2, r3
    79e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79e8:	4618      	mov	r0, r3
    79ea:	f7ff fbe5 	bl	71b8 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    79ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    79f2:	4618      	mov	r0, r3
    79f4:	b005      	add	sp, #20
    79f6:	f85d fb04 	ldr.w	pc, [sp], #4

000079fa <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    79fa:	b084      	sub	sp, #16
    79fc:	4603      	mov	r3, r0
    79fe:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7a02:	2300      	movs	r3, #0
    7a04:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7a06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a0a:	4906      	ldr	r1, [pc, #24]	; (7a24 <Adc_GetGroupStatus+0x2a>)
    7a0c:	4613      	mov	r3, r2
    7a0e:	009b      	lsls	r3, r3, #2
    7a10:	4413      	add	r3, r2
    7a12:	009b      	lsls	r3, r3, #2
    7a14:	440b      	add	r3, r1
    7a16:	681b      	ldr	r3, [r3, #0]
    7a18:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7a1a:	9b03      	ldr	r3, [sp, #12]
}
    7a1c:	4618      	mov	r0, r3
    7a1e:	b004      	add	sp, #16
    7a20:	4770      	bx	lr
    7a22:	bf00      	nop
    7a24:	1fff8cec 	.word	0x1fff8cec

00007a28 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7a28:	b500      	push	{lr}
    7a2a:	b085      	sub	sp, #20
    7a2c:	4603      	mov	r3, r0
    7a2e:	9100      	str	r1, [sp, #0]
    7a30:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7a34:	f002 f87c 	bl	9b30 <Adc_GetCoreID>
    7a38:	4603      	mov	r3, r0
    7a3a:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7a3e:	2300      	movs	r3, #0
    7a40:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7a44:	2300      	movs	r3, #0
    7a46:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7a4a:	2300      	movs	r3, #0
    7a4c:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7a50:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7a54:	b2da      	uxtb	r2, r3
    7a56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a5a:	4619      	mov	r1, r3
    7a5c:	200b      	movs	r0, #11
    7a5e:	f7ff f8a1 	bl	6ba4 <Adc_ValidateStateNotIdle>
    7a62:	4603      	mov	r3, r0
    7a64:	2b00      	cmp	r3, #0
    7a66:	f040 808e 	bne.w	7b86 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7a6a:	9b00      	ldr	r3, [sp, #0]
    7a6c:	2200      	movs	r2, #0
    7a6e:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7a70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a74:	4948      	ldr	r1, [pc, #288]	; (7b98 <Adc_GetStreamLastPointer+0x170>)
    7a76:	4613      	mov	r3, r2
    7a78:	009b      	lsls	r3, r3, #2
    7a7a:	4413      	add	r3, r2
    7a7c:	009b      	lsls	r3, r3, #2
    7a7e:	440b      	add	r3, r1
    7a80:	681b      	ldr	r3, [r3, #0]
    7a82:	2b00      	cmp	r3, #0
    7a84:	f000 8082 	beq.w	7b8c <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7a88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a8c:	4942      	ldr	r1, [pc, #264]	; (7b98 <Adc_GetStreamLastPointer+0x170>)
    7a8e:	4613      	mov	r3, r2
    7a90:	009b      	lsls	r3, r3, #2
    7a92:	4413      	add	r3, r2
    7a94:	009b      	lsls	r3, r3, #2
    7a96:	440b      	add	r3, r1
    7a98:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7a9a:	2b01      	cmp	r3, #1
    7a9c:	d076      	beq.n	7b8c <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7a9e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7aa2:	b2db      	uxtb	r3, r3
    7aa4:	461a      	mov	r2, r3
    7aa6:	4b3d      	ldr	r3, [pc, #244]	; (7b9c <Adc_GetStreamLastPointer+0x174>)
    7aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7aac:	68da      	ldr	r2, [r3, #12]
    7aae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ab2:	005b      	lsls	r3, r3, #1
    7ab4:	4413      	add	r3, r2
    7ab6:	881b      	ldrh	r3, [r3, #0]
    7ab8:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7abc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ac0:	4935      	ldr	r1, [pc, #212]	; (7b98 <Adc_GetStreamLastPointer+0x170>)
    7ac2:	4613      	mov	r3, r2
    7ac4:	009b      	lsls	r3, r3, #2
    7ac6:	4413      	add	r3, r2
    7ac8:	009b      	lsls	r3, r3, #2
    7aca:	440b      	add	r3, r1
    7acc:	3308      	adds	r3, #8
    7ace:	881b      	ldrh	r3, [r3, #0]
    7ad0:	b29b      	uxth	r3, r3
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d123      	bne.n	7b1e <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7ad6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ada:	b2db      	uxtb	r3, r3
    7adc:	461a      	mov	r2, r3
    7ade:	4b2f      	ldr	r3, [pc, #188]	; (7b9c <Adc_GetStreamLastPointer+0x174>)
    7ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ae4:	685a      	ldr	r2, [r3, #4]
    7ae6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7aea:	2134      	movs	r1, #52	; 0x34
    7aec:	fb01 f303 	mul.w	r3, r1, r3
    7af0:	4413      	add	r3, r2
    7af2:	8b9b      	ldrh	r3, [r3, #28]
    7af4:	3b01      	subs	r3, #1
    7af6:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7afa:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7afe:	b2db      	uxtb	r3, r3
    7b00:	461a      	mov	r2, r3
    7b02:	4b26      	ldr	r3, [pc, #152]	; (7b9c <Adc_GetStreamLastPointer+0x174>)
    7b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b08:	685a      	ldr	r2, [r3, #4]
    7b0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7b0e:	2134      	movs	r1, #52	; 0x34
    7b10:	fb01 f303 	mul.w	r3, r1, r3
    7b14:	4413      	add	r3, r2
    7b16:	8b9b      	ldrh	r3, [r3, #28]
    7b18:	f8ad 300e 	strh.w	r3, [sp, #14]
    7b1c:	e019      	b.n	7b52 <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7b1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b22:	491d      	ldr	r1, [pc, #116]	; (7b98 <Adc_GetStreamLastPointer+0x170>)
    7b24:	4613      	mov	r3, r2
    7b26:	009b      	lsls	r3, r3, #2
    7b28:	4413      	add	r3, r2
    7b2a:	009b      	lsls	r3, r3, #2
    7b2c:	440b      	add	r3, r1
    7b2e:	3308      	adds	r3, #8
    7b30:	881b      	ldrh	r3, [r3, #0]
    7b32:	b29b      	uxth	r3, r3
    7b34:	3b01      	subs	r3, #1
    7b36:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7b3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b3e:	4916      	ldr	r1, [pc, #88]	; (7b98 <Adc_GetStreamLastPointer+0x170>)
    7b40:	4613      	mov	r3, r2
    7b42:	009b      	lsls	r3, r3, #2
    7b44:	4413      	add	r3, r2
    7b46:	009b      	lsls	r3, r3, #2
    7b48:	440b      	add	r3, r1
    7b4a:	3308      	adds	r3, #8
    7b4c:	881b      	ldrh	r3, [r3, #0]
    7b4e:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7b52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b56:	4910      	ldr	r1, [pc, #64]	; (7b98 <Adc_GetStreamLastPointer+0x170>)
    7b58:	4613      	mov	r3, r2
    7b5a:	009b      	lsls	r3, r3, #2
    7b5c:	4413      	add	r3, r2
    7b5e:	009b      	lsls	r3, r3, #2
    7b60:	440b      	add	r3, r1
    7b62:	330c      	adds	r3, #12
    7b64:	681a      	ldr	r2, [r3, #0]
    7b66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7b6a:	005b      	lsls	r3, r3, #1
    7b6c:	441a      	add	r2, r3
    7b6e:	9b00      	ldr	r3, [sp, #0]
    7b70:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7b72:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b76:	b2da      	uxtb	r2, r3
    7b78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b7c:	4611      	mov	r1, r2
    7b7e:	4618      	mov	r0, r3
    7b80:	f7ff fcda 	bl	7538 <Adc_UpdateStatusAfterGetStream>
    7b84:	e002      	b.n	7b8c <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7b86:	9b00      	ldr	r3, [sp, #0]
    7b88:	2200      	movs	r2, #0
    7b8a:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7b8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7b90:	4618      	mov	r0, r3
    7b92:	b005      	add	sp, #20
    7b94:	f85d fb04 	ldr.w	pc, [sp], #4
    7b98:	1fff8cec 	.word	0x1fff8cec
    7b9c:	1fff8ce8 	.word	0x1fff8ce8

00007ba0 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7ba0:	b082      	sub	sp, #8
    7ba2:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7ba4:	9b01      	ldr	r3, [sp, #4]
    7ba6:	222b      	movs	r2, #43	; 0x2b
    7ba8:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7baa:	9b01      	ldr	r3, [sp, #4]
    7bac:	227b      	movs	r2, #123	; 0x7b
    7bae:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7bb0:	9b01      	ldr	r3, [sp, #4]
    7bb2:	2202      	movs	r2, #2
    7bb4:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7bb6:	9b01      	ldr	r3, [sp, #4]
    7bb8:	2200      	movs	r2, #0
    7bba:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7bbc:	9b01      	ldr	r3, [sp, #4]
    7bbe:	2200      	movs	r2, #0
    7bc0:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7bc2:	bf00      	nop
    7bc4:	b002      	add	sp, #8
    7bc6:	4770      	bx	lr

00007bc8 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7bc8:	b500      	push	{lr}
    7bca:	b085      	sub	sp, #20
    7bcc:	4603      	mov	r3, r0
    7bce:	9100      	str	r1, [sp, #0]
    7bd0:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7bd4:	2300      	movs	r3, #0
    7bd6:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7bda:	f001 ffa9 	bl	9b30 <Adc_GetCoreID>
    7bde:	4603      	mov	r3, r0
    7be0:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7be4:	9b00      	ldr	r3, [sp, #0]
    7be6:	2201      	movs	r2, #1
    7be8:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7bea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bee:	2129      	movs	r1, #41	; 0x29
    7bf0:	4618      	mov	r0, r3
    7bf2:	f7fe fe30 	bl	6856 <Adc_ValidateNotBusyNoQueue>
    7bf6:	4603      	mov	r3, r0
    7bf8:	2b00      	cmp	r3, #0
    7bfa:	d115      	bne.n	7c28 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7bfc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7c00:	b2db      	uxtb	r3, r3
    7c02:	4619      	mov	r1, r3
    7c04:	2029      	movs	r0, #41	; 0x29
    7c06:	f7fe fe91 	bl	692c <Adc_ValidateCheckGroupNotConversion>
    7c0a:	4603      	mov	r3, r0
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	d10b      	bne.n	7c28 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7c10:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7c14:	b2da      	uxtb	r2, r3
    7c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c1a:	9900      	ldr	r1, [sp, #0]
    7c1c:	4618      	mov	r0, r3
    7c1e:	f001 ff5d 	bl	9adc <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7c22:	2301      	movs	r3, #1
    7c24:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7c28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	d007      	beq.n	7c40 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7c30:	9b00      	ldr	r3, [sp, #0]
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	2b01      	cmp	r3, #1
    7c36:	d103      	bne.n	7c40 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7c38:	212b      	movs	r1, #43	; 0x2b
    7c3a:	2029      	movs	r0, #41	; 0x29
    7c3c:	f7fe fdf6 	bl	682c <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7c40:	bf00      	nop
    7c42:	b005      	add	sp, #20
    7c44:	f85d fb04 	ldr.w	pc, [sp], #4

00007c48 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7c48:	b086      	sub	sp, #24
    7c4a:	9003      	str	r0, [sp, #12]
    7c4c:	9102      	str	r1, [sp, #8]
    7c4e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7c50:	9b03      	ldr	r3, [sp, #12]
    7c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7c56:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7c58:	9b02      	ldr	r3, [sp, #8]
    7c5a:	43db      	mvns	r3, r3
    7c5c:	9a05      	ldr	r2, [sp, #20]
    7c5e:	4013      	ands	r3, r2
    7c60:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7c62:	9a05      	ldr	r2, [sp, #20]
    7c64:	9b01      	ldr	r3, [sp, #4]
    7c66:	4313      	orrs	r3, r2
    7c68:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7c6a:	9b03      	ldr	r3, [sp, #12]
    7c6c:	9a05      	ldr	r2, [sp, #20]
    7c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7c72:	bf00      	nop
    7c74:	b006      	add	sp, #24
    7c76:	4770      	bx	lr

00007c78 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7c78:	b086      	sub	sp, #24
    7c7a:	9003      	str	r0, [sp, #12]
    7c7c:	9102      	str	r1, [sp, #8]
    7c7e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7c80:	9b03      	ldr	r3, [sp, #12]
    7c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c84:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7c86:	9b05      	ldr	r3, [sp, #20]
    7c88:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7c8c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7c8e:	9b02      	ldr	r3, [sp, #8]
    7c90:	015b      	lsls	r3, r3, #5
    7c92:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7c96:	9a05      	ldr	r2, [sp, #20]
    7c98:	4313      	orrs	r3, r2
    7c9a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7c9c:	9b01      	ldr	r3, [sp, #4]
    7c9e:	f003 0303 	and.w	r3, r3, #3
    7ca2:	9a05      	ldr	r2, [sp, #20]
    7ca4:	4313      	orrs	r3, r2
    7ca6:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7ca8:	9b03      	ldr	r3, [sp, #12]
    7caa:	9a05      	ldr	r2, [sp, #20]
    7cac:	641a      	str	r2, [r3, #64]	; 0x40
}
    7cae:	bf00      	nop
    7cb0:	b006      	add	sp, #24
    7cb2:	4770      	bx	lr

00007cb4 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7cb4:	b084      	sub	sp, #16
    7cb6:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7cb8:	2300      	movs	r3, #0
    7cba:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7cbc:	9b01      	ldr	r3, [sp, #4]
    7cbe:	095b      	lsrs	r3, r3, #5
    7cc0:	f003 0303 	and.w	r3, r3, #3
    7cc4:	2b03      	cmp	r3, #3
    7cc6:	d00c      	beq.n	7ce2 <Adc_HwAcc_GetClockDivide+0x2e>
    7cc8:	2b03      	cmp	r3, #3
    7cca:	d80d      	bhi.n	7ce8 <Adc_HwAcc_GetClockDivide+0x34>
    7ccc:	2b01      	cmp	r3, #1
    7cce:	d002      	beq.n	7cd6 <Adc_HwAcc_GetClockDivide+0x22>
    7cd0:	2b02      	cmp	r3, #2
    7cd2:	d003      	beq.n	7cdc <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7cd4:	e008      	b.n	7ce8 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7cd6:	2301      	movs	r3, #1
    7cd8:	9303      	str	r3, [sp, #12]
            break;
    7cda:	e006      	b.n	7cea <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7cdc:	2302      	movs	r3, #2
    7cde:	9303      	str	r3, [sp, #12]
            break;
    7ce0:	e003      	b.n	7cea <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7ce2:	2303      	movs	r3, #3
    7ce4:	9303      	str	r3, [sp, #12]
            break;
    7ce6:	e000      	b.n	7cea <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7ce8:	bf00      	nop
    }
    return ReturnValue;
    7cea:	9b03      	ldr	r3, [sp, #12]
}
    7cec:	4618      	mov	r0, r3
    7cee:	b004      	add	sp, #16
    7cf0:	4770      	bx	lr

00007cf2 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7cf2:	b084      	sub	sp, #16
    7cf4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7cf6:	2300      	movs	r3, #0
    7cf8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7cfa:	9b01      	ldr	r3, [sp, #4]
    7cfc:	f003 0303 	and.w	r3, r3, #3
    7d00:	2b03      	cmp	r3, #3
    7d02:	d00c      	beq.n	7d1e <Adc_HwAcc_GetInputClock+0x2c>
    7d04:	2b03      	cmp	r3, #3
    7d06:	d80d      	bhi.n	7d24 <Adc_HwAcc_GetInputClock+0x32>
    7d08:	2b01      	cmp	r3, #1
    7d0a:	d002      	beq.n	7d12 <Adc_HwAcc_GetInputClock+0x20>
    7d0c:	2b02      	cmp	r3, #2
    7d0e:	d003      	beq.n	7d18 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7d10:	e008      	b.n	7d24 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7d12:	2301      	movs	r3, #1
    7d14:	9303      	str	r3, [sp, #12]
            break;
    7d16:	e006      	b.n	7d26 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7d18:	2302      	movs	r3, #2
    7d1a:	9303      	str	r3, [sp, #12]
            break;
    7d1c:	e003      	b.n	7d26 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7d1e:	2303      	movs	r3, #3
    7d20:	9303      	str	r3, [sp, #12]
            break;
    7d22:	e000      	b.n	7d26 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7d24:	bf00      	nop
    }
    return ReturnValue;
    7d26:	9b03      	ldr	r3, [sp, #12]
}
    7d28:	4618      	mov	r0, r3
    7d2a:	b004      	add	sp, #16
    7d2c:	4770      	bx	lr

00007d2e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7d2e:	b084      	sub	sp, #16
    7d30:	9001      	str	r0, [sp, #4]
    7d32:	460b      	mov	r3, r1
    7d34:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7d38:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	d002      	beq.n	7d46 <Adc_HwAcc_SetSampleTime+0x18>
    7d40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7d44:	e000      	b.n	7d48 <Adc_HwAcc_SetSampleTime+0x1a>
    7d46:	2301      	movs	r3, #1
    7d48:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7d4c:	9b01      	ldr	r3, [sp, #4]
    7d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7d50:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7d52:	9b02      	ldr	r3, [sp, #8]
    7d54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7d58:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7d5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d5e:	9a02      	ldr	r2, [sp, #8]
    7d60:	4313      	orrs	r3, r2
    7d62:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	9a02      	ldr	r2, [sp, #8]
    7d68:	645a      	str	r2, [r3, #68]	; 0x44
}
    7d6a:	bf00      	nop
    7d6c:	b004      	add	sp, #16
    7d6e:	4770      	bx	lr

00007d70 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7d70:	b086      	sub	sp, #24
    7d72:	9003      	str	r0, [sp, #12]
    7d74:	460b      	mov	r3, r1
    7d76:	9201      	str	r2, [sp, #4]
    7d78:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7d7c:	9b03      	ldr	r3, [sp, #12]
    7d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7d82:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7d84:	9b05      	ldr	r3, [sp, #20]
    7d86:	f023 0307 	bic.w	r3, r3, #7
    7d8a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7d8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7d90:	2b00      	cmp	r3, #0
    7d92:	d001      	beq.n	7d98 <Adc_HwAcc_SetAveraging+0x28>
    7d94:	2304      	movs	r3, #4
    7d96:	e000      	b.n	7d9a <Adc_HwAcc_SetAveraging+0x2a>
    7d98:	2300      	movs	r3, #0
    7d9a:	9a05      	ldr	r2, [sp, #20]
    7d9c:	4313      	orrs	r3, r2
    7d9e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7da0:	9b01      	ldr	r3, [sp, #4]
    7da2:	f003 0303 	and.w	r3, r3, #3
    7da6:	9a05      	ldr	r2, [sp, #20]
    7da8:	4313      	orrs	r3, r2
    7daa:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7dac:	9b03      	ldr	r3, [sp, #12]
    7dae:	9a05      	ldr	r2, [sp, #20]
    7db0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7db4:	bf00      	nop
    7db6:	b006      	add	sp, #24
    7db8:	4770      	bx	lr

00007dba <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    7dba:	b084      	sub	sp, #16
    7dbc:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    7dbe:	2300      	movs	r3, #0
    7dc0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7dc2:	9b01      	ldr	r3, [sp, #4]
    7dc4:	f003 0303 	and.w	r3, r3, #3
    7dc8:	2b03      	cmp	r3, #3
    7dca:	d00c      	beq.n	7de6 <Adc_HwAcc_GetAverageSelect+0x2c>
    7dcc:	2b03      	cmp	r3, #3
    7dce:	d80d      	bhi.n	7dec <Adc_HwAcc_GetAverageSelect+0x32>
    7dd0:	2b01      	cmp	r3, #1
    7dd2:	d002      	beq.n	7dda <Adc_HwAcc_GetAverageSelect+0x20>
    7dd4:	2b02      	cmp	r3, #2
    7dd6:	d003      	beq.n	7de0 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7dd8:	e008      	b.n	7dec <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    7dda:	2301      	movs	r3, #1
    7ddc:	9303      	str	r3, [sp, #12]
            break;
    7dde:	e006      	b.n	7dee <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7de0:	2302      	movs	r3, #2
    7de2:	9303      	str	r3, [sp, #12]
            break;
    7de4:	e003      	b.n	7dee <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7de6:	2303      	movs	r3, #3
    7de8:	9303      	str	r3, [sp, #12]
            break;
    7dea:	e000      	b.n	7dee <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7dec:	bf00      	nop
    }
    return ReturnValue;
    7dee:	9b03      	ldr	r3, [sp, #12]
}
    7df0:	4618      	mov	r0, r3
    7df2:	b004      	add	sp, #16
    7df4:	4770      	bx	lr

00007df6 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7df6:	b084      	sub	sp, #16
    7df8:	9001      	str	r0, [sp, #4]
    7dfa:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7dfc:	9b01      	ldr	r3, [sp, #4]
    7dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7e02:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7e04:	9b03      	ldr	r3, [sp, #12]
    7e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7e0a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7e0c:	9b00      	ldr	r3, [sp, #0]
    7e0e:	019b      	lsls	r3, r3, #6
    7e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7e14:	9a03      	ldr	r2, [sp, #12]
    7e16:	4313      	orrs	r3, r2
    7e18:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7e1a:	9b01      	ldr	r3, [sp, #4]
    7e1c:	9a03      	ldr	r2, [sp, #12]
    7e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7e22:	bf00      	nop
    7e24:	b004      	add	sp, #16
    7e26:	4770      	bx	lr

00007e28 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7e28:	b084      	sub	sp, #16
    7e2a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7e2c:	2300      	movs	r3, #0
    7e2e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7e30:	9b01      	ldr	r3, [sp, #4]
    7e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7e36:	2b00      	cmp	r3, #0
    7e38:	d001      	beq.n	7e3e <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7e3a:	2301      	movs	r3, #1
    7e3c:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7e3e:	9b03      	ldr	r3, [sp, #12]
}
    7e40:	4618      	mov	r0, r3
    7e42:	b004      	add	sp, #16
    7e44:	4770      	bx	lr

00007e46 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7e46:	b086      	sub	sp, #24
    7e48:	9003      	str	r0, [sp, #12]
    7e4a:	9201      	str	r2, [sp, #4]
    7e4c:	461a      	mov	r2, r3
    7e4e:	460b      	mov	r3, r1
    7e50:	f88d 300b 	strb.w	r3, [sp, #11]
    7e54:	4613      	mov	r3, r2
    7e56:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7e5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7e5e:	9b03      	ldr	r3, [sp, #12]
    7e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e64:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7e66:	9b05      	ldr	r3, [sp, #20]
    7e68:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7e6c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7e6e:	9b01      	ldr	r3, [sp, #4]
    7e70:	f003 031f 	and.w	r3, r3, #31
    7e74:	9a05      	ldr	r2, [sp, #20]
    7e76:	4313      	orrs	r3, r2
    7e78:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7e7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d001      	beq.n	7e86 <Adc_HwAcc_SetChannel+0x40>
    7e82:	2340      	movs	r3, #64	; 0x40
    7e84:	e000      	b.n	7e88 <Adc_HwAcc_SetChannel+0x42>
    7e86:	2300      	movs	r3, #0
    7e88:	9a05      	ldr	r2, [sp, #20]
    7e8a:	4313      	orrs	r3, r2
    7e8c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7e8e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7e92:	9b03      	ldr	r3, [sp, #12]
    7e94:	9905      	ldr	r1, [sp, #20]
    7e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7e9a:	bf00      	nop
    7e9c:	b006      	add	sp, #24
    7e9e:	4770      	bx	lr

00007ea0 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7ea0:	b082      	sub	sp, #8
    7ea2:	9001      	str	r0, [sp, #4]
    7ea4:	460b      	mov	r3, r1
    7ea6:	f8ad 3002 	strh.w	r3, [sp, #2]
    7eaa:	4613      	mov	r3, r2
    7eac:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7eb0:	f8bd 3000 	ldrh.w	r3, [sp]
    7eb4:	b2da      	uxtb	r2, r3
    7eb6:	9b01      	ldr	r3, [sp, #4]
    7eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    7ebc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7ec0:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    7eca:	bf00      	nop
    7ecc:	b002      	add	sp, #8
    7ece:	4770      	bx	lr

00007ed0 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7ed0:	b082      	sub	sp, #8
    7ed2:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7ed4:	9b01      	ldr	r3, [sp, #4]
    7ed6:	099b      	lsrs	r3, r3, #6
    7ed8:	f003 0301 	and.w	r3, r3, #1
    7edc:	2b00      	cmp	r3, #0
    7ede:	bf14      	ite	ne
    7ee0:	2301      	movne	r3, #1
    7ee2:	2300      	moveq	r3, #0
    7ee4:	b2db      	uxtb	r3, r3
}
    7ee6:	4618      	mov	r0, r3
    7ee8:	b002      	add	sp, #8
    7eea:	4770      	bx	lr

00007eec <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7eec:	b082      	sub	sp, #8
    7eee:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7ef0:	9b01      	ldr	r3, [sp, #4]
    7ef2:	09db      	lsrs	r3, r3, #7
    7ef4:	f003 0301 	and.w	r3, r3, #1
    7ef8:	2b00      	cmp	r3, #0
    7efa:	bf14      	ite	ne
    7efc:	2301      	movne	r3, #1
    7efe:	2300      	moveq	r3, #0
    7f00:	b2db      	uxtb	r3, r3
}
    7f02:	4618      	mov	r0, r3
    7f04:	b002      	add	sp, #8
    7f06:	4770      	bx	lr

00007f08 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7f08:	b084      	sub	sp, #16
    7f0a:	9001      	str	r0, [sp, #4]
    7f0c:	460b      	mov	r3, r1
    7f0e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7f12:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7f16:	9b01      	ldr	r3, [sp, #4]
    7f18:	3212      	adds	r2, #18
    7f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f1e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7f22:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7f2a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7f2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7f32:	4618      	mov	r0, r3
    7f34:	b004      	add	sp, #16
    7f36:	4770      	bx	lr

00007f38 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7f38:	b500      	push	{lr}
    7f3a:	b085      	sub	sp, #20
    7f3c:	9003      	str	r0, [sp, #12]
    7f3e:	9102      	str	r1, [sp, #8]
    7f40:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7f42:	f003 ff77 	bl	be34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7f46:	9b02      	ldr	r3, [sp, #8]
    7f48:	7a59      	ldrb	r1, [r3, #9]
    7f4a:	9b02      	ldr	r3, [sp, #8]
    7f4c:	68db      	ldr	r3, [r3, #12]
    7f4e:	461a      	mov	r2, r3
    7f50:	9803      	ldr	r0, [sp, #12]
    7f52:	f7ff ff0d 	bl	7d70 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7f56:	f003 ff99 	bl	be8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    7f5a:	f003 fdd1 	bl	bb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7f5e:	9901      	ldr	r1, [sp, #4]
    7f60:	9803      	ldr	r0, [sp, #12]
    7f62:	f7ff ff48 	bl	7df6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    7f66:	f003 fdf7 	bl	bb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    7f6a:	f003 fae7 	bl	b53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7f6e:	9b02      	ldr	r3, [sp, #8]
    7f70:	7a1b      	ldrb	r3, [r3, #8]
    7f72:	4619      	mov	r1, r3
    7f74:	9803      	ldr	r0, [sp, #12]
    7f76:	f7ff feda 	bl	7d2e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    7f7a:	f003 fb0b 	bl	b594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    7f7e:	f003 fa39 	bl	b3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7f82:	9b02      	ldr	r3, [sp, #8]
    7f84:	6819      	ldr	r1, [r3, #0]
    7f86:	9b02      	ldr	r3, [sp, #8]
    7f88:	685b      	ldr	r3, [r3, #4]
    7f8a:	461a      	mov	r2, r3
    7f8c:	9803      	ldr	r0, [sp, #12]
    7f8e:	f7ff fe73 	bl	7c78 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    7f92:	f003 fa5b 	bl	b44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    7f96:	bf00      	nop
    7f98:	b005      	add	sp, #20
    7f9a:	f85d fb04 	ldr.w	pc, [sp], #4

00007f9e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    7f9e:	b500      	push	{lr}
    7fa0:	b087      	sub	sp, #28
    7fa2:	9001      	str	r0, [sp, #4]
    7fa4:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7fa6:	4a67      	ldr	r2, [pc, #412]	; (8144 <Adc_Ip_Init+0x1a6>)
    7fa8:	9b01      	ldr	r3, [sp, #4]
    7faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fae:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    7fb0:	2300      	movs	r3, #0
    7fb2:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    7fb4:	2300      	movs	r3, #0
    7fb6:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7fb8:	9b00      	ldr	r3, [sp, #0]
    7fba:	6819      	ldr	r1, [r3, #0]
    7fbc:	9b00      	ldr	r3, [sp, #0]
    7fbe:	689b      	ldr	r3, [r3, #8]
    7fc0:	461a      	mov	r2, r3
    7fc2:	9802      	ldr	r0, [sp, #8]
    7fc4:	f7ff fe58 	bl	7c78 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7fc8:	9b00      	ldr	r3, [sp, #0]
    7fca:	7b1b      	ldrb	r3, [r3, #12]
    7fcc:	4619      	mov	r1, r3
    7fce:	9802      	ldr	r0, [sp, #8]
    7fd0:	f7ff fead 	bl	7d2e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7fd4:	9b00      	ldr	r3, [sp, #0]
    7fd6:	7b59      	ldrb	r1, [r3, #13]
    7fd8:	9b00      	ldr	r3, [sp, #0]
    7fda:	691b      	ldr	r3, [r3, #16]
    7fdc:	461a      	mov	r2, r3
    7fde:	9802      	ldr	r0, [sp, #8]
    7fe0:	f7ff fec6 	bl	7d70 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    7fe4:	9b00      	ldr	r3, [sp, #0]
    7fe6:	695b      	ldr	r3, [r3, #20]
    7fe8:	4619      	mov	r1, r3
    7fea:	9801      	ldr	r0, [sp, #4]
    7fec:	f000 f9ea 	bl	83c4 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    7ff0:	9b04      	ldr	r3, [sp, #16]
    7ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7ff6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    7ff8:	9b00      	ldr	r3, [sp, #0]
    7ffa:	699b      	ldr	r3, [r3, #24]
    7ffc:	019b      	lsls	r3, r3, #6
    7ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8002:	9a05      	ldr	r2, [sp, #20]
    8004:	4313      	orrs	r3, r2
    8006:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8008:	9b00      	ldr	r3, [sp, #0]
    800a:	7f1b      	ldrb	r3, [r3, #28]
    800c:	2b00      	cmp	r3, #0
    800e:	d004      	beq.n	801a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    8010:	9b05      	ldr	r3, [sp, #20]
    8012:	f043 0304 	orr.w	r3, r3, #4
    8016:	9305      	str	r3, [sp, #20]
    8018:	e003      	b.n	8022 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    801a:	9b04      	ldr	r3, [sp, #16]
    801c:	f043 0304 	orr.w	r3, r3, #4
    8020:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    8022:	9b04      	ldr	r3, [sp, #16]
    8024:	f043 0303 	orr.w	r3, r3, #3
    8028:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    802a:	9b00      	ldr	r3, [sp, #0]
    802c:	6a1b      	ldr	r3, [r3, #32]
    802e:	f003 0303 	and.w	r3, r3, #3
    8032:	9a05      	ldr	r2, [sp, #20]
    8034:	4313      	orrs	r3, r2
    8036:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8038:	9b04      	ldr	r3, [sp, #16]
    803a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    803e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    8040:	9b00      	ldr	r3, [sp, #0]
    8042:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8046:	2b00      	cmp	r3, #0
    8048:	d001      	beq.n	804e <Adc_Ip_Init+0xb0>
    804a:	2320      	movs	r3, #32
    804c:	e000      	b.n	8050 <Adc_Ip_Init+0xb2>
    804e:	2300      	movs	r3, #0
    8050:	9a05      	ldr	r2, [sp, #20]
    8052:	4313      	orrs	r3, r2
    8054:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8056:	9b00      	ldr	r3, [sp, #0]
    8058:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    805c:	2b00      	cmp	r3, #0
    805e:	d001      	beq.n	8064 <Adc_Ip_Init+0xc6>
    8060:	2310      	movs	r3, #16
    8062:	e000      	b.n	8066 <Adc_Ip_Init+0xc8>
    8064:	2300      	movs	r3, #0
    8066:	9a05      	ldr	r2, [sp, #20]
    8068:	4313      	orrs	r3, r2
    806a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    806c:	9b00      	ldr	r3, [sp, #0]
    806e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    8072:	2b00      	cmp	r3, #0
    8074:	d001      	beq.n	807a <Adc_Ip_Init+0xdc>
    8076:	2308      	movs	r3, #8
    8078:	e000      	b.n	807c <Adc_Ip_Init+0xde>
    807a:	2300      	movs	r3, #0
    807c:	9a05      	ldr	r2, [sp, #20]
    807e:	4313      	orrs	r3, r2
    8080:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    8082:	9b00      	ldr	r3, [sp, #0]
    8084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8086:	461a      	mov	r2, r3
    8088:	9b02      	ldr	r3, [sp, #8]
    808a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    808e:	9b00      	ldr	r3, [sp, #0]
    8090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8092:	461a      	mov	r2, r3
    8094:	9b02      	ldr	r3, [sp, #8]
    8096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    809a:	9a05      	ldr	r2, [sp, #20]
    809c:	9904      	ldr	r1, [sp, #16]
    809e:	9802      	ldr	r0, [sp, #8]
    80a0:	f7ff fdd2 	bl	7c48 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    80a4:	9b00      	ldr	r3, [sp, #0]
    80a6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    80a8:	9b00      	ldr	r3, [sp, #0]
    80aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    80ac:	461a      	mov	r2, r3
    80ae:	9802      	ldr	r0, [sp, #8]
    80b0:	f7ff fef6 	bl	7ea0 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    80b4:	9b00      	ldr	r3, [sp, #0]
    80b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    80ba:	4619      	mov	r1, r3
    80bc:	9801      	ldr	r0, [sp, #4]
    80be:	f000 f955 	bl	836c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    80c2:	9b00      	ldr	r3, [sp, #0]
    80c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    80c6:	2b00      	cmp	r3, #0
    80c8:	d01c      	beq.n	8104 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    80ca:	2300      	movs	r3, #0
    80cc:	f88d 300f 	strb.w	r3, [sp, #15]
    80d0:	e011      	b.n	80f6 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    80d2:	9b00      	ldr	r3, [sp, #0]
    80d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    80d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    80da:	4613      	mov	r3, r2
    80dc:	005b      	lsls	r3, r3, #1
    80de:	4413      	add	r3, r2
    80e0:	009b      	lsls	r3, r3, #2
    80e2:	440b      	add	r3, r1
    80e4:	4619      	mov	r1, r3
    80e6:	9801      	ldr	r0, [sp, #4]
    80e8:	f000 f9c2 	bl	8470 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    80ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    80f0:	3301      	adds	r3, #1
    80f2:	f88d 300f 	strb.w	r3, [sp, #15]
    80f6:	9b00      	ldr	r3, [sp, #0]
    80f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    80fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8100:	429a      	cmp	r2, r3
    8102:	d3e6      	bcc.n	80d2 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8104:	9b00      	ldr	r3, [sp, #0]
    8106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8108:	490f      	ldr	r1, [pc, #60]	; (8148 <Adc_Ip_Init+0x1aa>)
    810a:	9b01      	ldr	r3, [sp, #4]
    810c:	204c      	movs	r0, #76	; 0x4c
    810e:	fb00 f303 	mul.w	r3, r0, r3
    8112:	440b      	add	r3, r1
    8114:	3308      	adds	r3, #8
    8116:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8118:	9b00      	ldr	r3, [sp, #0]
    811a:	685a      	ldr	r2, [r3, #4]
    811c:	490a      	ldr	r1, [pc, #40]	; (8148 <Adc_Ip_Init+0x1aa>)
    811e:	9b01      	ldr	r3, [sp, #4]
    8120:	204c      	movs	r0, #76	; 0x4c
    8122:	fb00 f303 	mul.w	r3, r0, r3
    8126:	440b      	add	r3, r1
    8128:	3304      	adds	r3, #4
    812a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    812c:	4a06      	ldr	r2, [pc, #24]	; (8148 <Adc_Ip_Init+0x1aa>)
    812e:	9b01      	ldr	r3, [sp, #4]
    8130:	214c      	movs	r1, #76	; 0x4c
    8132:	fb01 f303 	mul.w	r3, r1, r3
    8136:	4413      	add	r3, r2
    8138:	2201      	movs	r2, #1
    813a:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    813c:	bf00      	nop
    813e:	b007      	add	sp, #28
    8140:	f85d fb04 	ldr.w	pc, [sp], #4
    8144:	0001078c 	.word	0x0001078c
    8148:	1fff8d10 	.word	0x1fff8d10

0000814c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    814c:	b500      	push	{lr}
    814e:	b0c3      	sub	sp, #268	; 0x10c
    8150:	ab42      	add	r3, sp, #264	; 0x108
    8152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8156:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8158:	2300      	movs	r3, #0
    815a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    815c:	2303      	movs	r3, #3
    815e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    8160:	2300      	movs	r3, #0
    8162:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8164:	230c      	movs	r3, #12
    8166:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    816a:	2300      	movs	r3, #0
    816c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    8170:	2300      	movs	r3, #0
    8172:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8174:	2300      	movs	r3, #0
    8176:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8178:	2300      	movs	r3, #0
    817a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    817c:	2300      	movs	r3, #0
    817e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    8182:	2300      	movs	r3, #0
    8184:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    8186:	2300      	movs	r3, #0
    8188:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    818c:	2300      	movs	r3, #0
    818e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    8192:	2300      	movs	r3, #0
    8194:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    8198:	2300      	movs	r3, #0
    819a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    819e:	2300      	movs	r3, #0
    81a0:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    81a4:	2300      	movs	r3, #0
    81a6:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    81aa:	2304      	movs	r3, #4
    81ac:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    81b0:	2300      	movs	r3, #0
    81b2:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    81b6:	2310      	movs	r3, #16
    81b8:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    81bc:	2300      	movs	r3, #0
    81be:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    81c2:	e02b      	b.n	821c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    81c4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    81c8:	ab42      	add	r3, sp, #264	; 0x108
    81ca:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    81ce:	4613      	mov	r3, r2
    81d0:	005b      	lsls	r3, r3, #1
    81d2:	4413      	add	r3, r2
    81d4:	009b      	lsls	r3, r3, #2
    81d6:	440b      	add	r3, r1
    81d8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    81dc:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    81de:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    81e2:	ab42      	add	r3, sp, #264	; 0x108
    81e4:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    81e8:	4613      	mov	r3, r2
    81ea:	005b      	lsls	r3, r3, #1
    81ec:	4413      	add	r3, r2
    81ee:	009b      	lsls	r3, r3, #2
    81f0:	440b      	add	r3, r1
    81f2:	3304      	adds	r3, #4
    81f4:	221f      	movs	r2, #31
    81f6:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    81f8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    81fc:	ab42      	add	r3, sp, #264	; 0x108
    81fe:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8202:	4613      	mov	r3, r2
    8204:	005b      	lsls	r3, r3, #1
    8206:	4413      	add	r3, r2
    8208:	009b      	lsls	r3, r3, #2
    820a:	440b      	add	r3, r1
    820c:	3308      	adds	r3, #8
    820e:	2200      	movs	r2, #0
    8210:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    8212:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8216:	3301      	adds	r3, #1
    8218:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    821c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8220:	2b0f      	cmp	r3, #15
    8222:	d9cf      	bls.n	81c4 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    8224:	ab02      	add	r3, sp, #8
    8226:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8228:	2300      	movs	r3, #0
    822a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    822c:	aa32      	add	r2, sp, #200	; 0xc8
    822e:	ab42      	add	r3, sp, #264	; 0x108
    8230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8234:	4611      	mov	r1, r2
    8236:	6818      	ldr	r0, [r3, #0]
    8238:	f7ff feb1 	bl	7f9e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    823c:	4a07      	ldr	r2, [pc, #28]	; (825c <Adc_Ip_DeInit+0x110>)
    823e:	ab42      	add	r3, sp, #264	; 0x108
    8240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8244:	681b      	ldr	r3, [r3, #0]
    8246:	214c      	movs	r1, #76	; 0x4c
    8248:	fb01 f303 	mul.w	r3, r1, r3
    824c:	4413      	add	r3, r2
    824e:	2200      	movs	r2, #0
    8250:	701a      	strb	r2, [r3, #0]
}
    8252:	bf00      	nop
    8254:	b043      	add	sp, #268	; 0x10c
    8256:	f85d fb04 	ldr.w	pc, [sp], #4
    825a:	bf00      	nop
    825c:	1fff8d10 	.word	0x1fff8d10

00008260 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    8260:	b500      	push	{lr}
    8262:	b087      	sub	sp, #28
    8264:	9003      	str	r0, [sp, #12]
    8266:	460b      	mov	r3, r1
    8268:	9201      	str	r2, [sp, #4]
    826a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    826e:	4a0a      	ldr	r2, [pc, #40]	; (8298 <Adc_Ip_SetAveraging+0x38>)
    8270:	9b03      	ldr	r3, [sp, #12]
    8272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8276:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8278:	f003 fd38 	bl	bcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    827c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8280:	9a01      	ldr	r2, [sp, #4]
    8282:	4619      	mov	r1, r3
    8284:	9805      	ldr	r0, [sp, #20]
    8286:	f7ff fd73 	bl	7d70 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    828a:	f003 fd5b 	bl	bd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    828e:	bf00      	nop
    8290:	b007      	add	sp, #28
    8292:	f85d fb04 	ldr.w	pc, [sp], #4
    8296:	bf00      	nop
    8298:	0001078c 	.word	0x0001078c

0000829c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    829c:	b500      	push	{lr}
    829e:	b085      	sub	sp, #20
    82a0:	9001      	str	r0, [sp, #4]
    82a2:	460b      	mov	r3, r1
    82a4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    82a8:	4a09      	ldr	r2, [pc, #36]	; (82d0 <Adc_Ip_SetSampleTime+0x34>)
    82aa:	9b01      	ldr	r3, [sp, #4]
    82ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82b0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    82b2:	f003 f995 	bl	b5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    82b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    82ba:	4619      	mov	r1, r3
    82bc:	9803      	ldr	r0, [sp, #12]
    82be:	f7ff fd36 	bl	7d2e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    82c2:	f003 f9b9 	bl	b638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    82c6:	bf00      	nop
    82c8:	b005      	add	sp, #20
    82ca:	f85d fb04 	ldr.w	pc, [sp], #4
    82ce:	bf00      	nop
    82d0:	0001078c 	.word	0x0001078c

000082d4 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    82d4:	b500      	push	{lr}
    82d6:	b085      	sub	sp, #20
    82d8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    82da:	4a0a      	ldr	r2, [pc, #40]	; (8304 <Adc_Ip_EnableDma+0x30>)
    82dc:	9b01      	ldr	r3, [sp, #4]
    82de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82e2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    82e4:	f003 fcb0 	bl	bc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    82e8:	9b03      	ldr	r3, [sp, #12]
    82ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    82ee:	f043 0204 	orr.w	r2, r3, #4
    82f2:	9b03      	ldr	r3, [sp, #12]
    82f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    82f8:	f003 fcd2 	bl	bca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    82fc:	bf00      	nop
    82fe:	b005      	add	sp, #20
    8300:	f85d fb04 	ldr.w	pc, [sp], #4
    8304:	0001078c 	.word	0x0001078c

00008308 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8308:	b500      	push	{lr}
    830a:	b085      	sub	sp, #20
    830c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    830e:	4a0a      	ldr	r2, [pc, #40]	; (8338 <Adc_Ip_DisableDma+0x30>)
    8310:	9b01      	ldr	r3, [sp, #4]
    8312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8316:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8318:	f003 fb4e 	bl	b9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    831c:	9b03      	ldr	r3, [sp, #12]
    831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8322:	f023 0204 	bic.w	r2, r3, #4
    8326:	9b03      	ldr	r3, [sp, #12]
    8328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    832c:	f003 fb70 	bl	ba10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    8330:	bf00      	nop
    8332:	b005      	add	sp, #20
    8334:	f85d fb04 	ldr.w	pc, [sp], #4
    8338:	0001078c 	.word	0x0001078c

0000833c <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    833c:	b500      	push	{lr}
    833e:	b085      	sub	sp, #20
    8340:	9001      	str	r0, [sp, #4]
    8342:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8344:	4a08      	ldr	r2, [pc, #32]	; (8368 <Adc_Ip_SetTriggerMode+0x2c>)
    8346:	9b01      	ldr	r3, [sp, #4]
    8348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    834c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    834e:	f003 fb85 	bl	ba5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8352:	9900      	ldr	r1, [sp, #0]
    8354:	9803      	ldr	r0, [sp, #12]
    8356:	f7ff fd4e 	bl	7df6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    835a:	f003 fbab 	bl	bab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    835e:	bf00      	nop
    8360:	b005      	add	sp, #20
    8362:	f85d fb04 	ldr.w	pc, [sp], #4
    8366:	bf00      	nop
    8368:	0001078c 	.word	0x0001078c

0000836c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    836c:	b500      	push	{lr}
    836e:	b085      	sub	sp, #20
    8370:	9001      	str	r0, [sp, #4]
    8372:	460b      	mov	r3, r1
    8374:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8378:	4a11      	ldr	r2, [pc, #68]	; (83c0 <Adc_Ip_SetContinuousMode+0x54>)
    837a:	9b01      	ldr	r3, [sp, #4]
    837c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8380:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    8382:	f003 fda9 	bl	bed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    8386:	9b03      	ldr	r3, [sp, #12]
    8388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    838c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    838e:	9b02      	ldr	r3, [sp, #8]
    8390:	f023 0308 	bic.w	r3, r3, #8
    8394:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    8396:	f89d 3003 	ldrb.w	r3, [sp, #3]
    839a:	2b00      	cmp	r3, #0
    839c:	d001      	beq.n	83a2 <Adc_Ip_SetContinuousMode+0x36>
    839e:	2308      	movs	r3, #8
    83a0:	e000      	b.n	83a4 <Adc_Ip_SetContinuousMode+0x38>
    83a2:	2300      	movs	r3, #0
    83a4:	9a02      	ldr	r2, [sp, #8]
    83a6:	4313      	orrs	r3, r2
    83a8:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    83aa:	9b03      	ldr	r3, [sp, #12]
    83ac:	9a02      	ldr	r2, [sp, #8]
    83ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    83b2:	f003 fdbd 	bl	bf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    83b6:	bf00      	nop
    83b8:	b005      	add	sp, #20
    83ba:	f85d fb04 	ldr.w	pc, [sp], #4
    83be:	bf00      	nop
    83c0:	0001078c 	.word	0x0001078c

000083c4 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    83c4:	b500      	push	{lr}
    83c6:	b085      	sub	sp, #20
    83c8:	9001      	str	r0, [sp, #4]
    83ca:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83cc:	4a0e      	ldr	r2, [pc, #56]	; (8408 <Adc_Ip_SetResolution+0x44>)
    83ce:	9b01      	ldr	r3, [sp, #4]
    83d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83d4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    83d6:	f002 fdcf 	bl	af78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    83da:	9b03      	ldr	r3, [sp, #12]
    83dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    83de:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    83e0:	9b02      	ldr	r3, [sp, #8]
    83e2:	f023 030c 	bic.w	r3, r3, #12
    83e6:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    83e8:	9b00      	ldr	r3, [sp, #0]
    83ea:	009b      	lsls	r3, r3, #2
    83ec:	f003 030c 	and.w	r3, r3, #12
    83f0:	9a02      	ldr	r2, [sp, #8]
    83f2:	4313      	orrs	r3, r2
    83f4:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    83f6:	9b03      	ldr	r3, [sp, #12]
    83f8:	9a02      	ldr	r2, [sp, #8]
    83fa:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    83fc:	f002 fde8 	bl	afd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    8400:	bf00      	nop
    8402:	b005      	add	sp, #20
    8404:	f85d fb04 	ldr.w	pc, [sp], #4
    8408:	0001078c 	.word	0x0001078c

0000840c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    840c:	b500      	push	{lr}
    840e:	b085      	sub	sp, #20
    8410:	9001      	str	r0, [sp, #4]
    8412:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8414:	4a15      	ldr	r2, [pc, #84]	; (846c <Adc_Ip_SetClockMode+0x60>)
    8416:	9b01      	ldr	r3, [sp, #4]
    8418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    841c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    841e:	f002 ff45 	bl	b2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8422:	9b00      	ldr	r3, [sp, #0]
    8424:	6819      	ldr	r1, [r3, #0]
    8426:	9b00      	ldr	r3, [sp, #0]
    8428:	685b      	ldr	r3, [r3, #4]
    842a:	461a      	mov	r2, r3
    842c:	9803      	ldr	r0, [sp, #12]
    842e:	f7ff fc23 	bl	7c78 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    8432:	f002 ff67 	bl	b304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    8436:	f003 f82f 	bl	b498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    843a:	9b00      	ldr	r3, [sp, #0]
    843c:	7a1b      	ldrb	r3, [r3, #8]
    843e:	4619      	mov	r1, r3
    8440:	9803      	ldr	r0, [sp, #12]
    8442:	f7ff fc74 	bl	7d2e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    8446:	f003 f853 	bl	b4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    844a:	f003 fca1 	bl	bd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    844e:	9b00      	ldr	r3, [sp, #0]
    8450:	7a59      	ldrb	r1, [r3, #9]
    8452:	9b00      	ldr	r3, [sp, #0]
    8454:	68db      	ldr	r3, [r3, #12]
    8456:	461a      	mov	r2, r3
    8458:	9803      	ldr	r0, [sp, #12]
    845a:	f7ff fc89 	bl	7d70 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    845e:	f003 fcc3 	bl	bde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    8462:	bf00      	nop
    8464:	b005      	add	sp, #20
    8466:	f85d fb04 	ldr.w	pc, [sp], #4
    846a:	bf00      	nop
    846c:	0001078c 	.word	0x0001078c

00008470 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    8470:	b510      	push	{r4, lr}
    8472:	b084      	sub	sp, #16
    8474:	9001      	str	r0, [sp, #4]
    8476:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8478:	4a13      	ldr	r2, [pc, #76]	; (84c8 <Adc_Ip_ConfigChannel+0x58>)
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8480:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    8482:	9b00      	ldr	r3, [sp, #0]
    8484:	685b      	ldr	r3, [r3, #4]
    8486:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    8488:	f003 fa44 	bl	b914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    848c:	9b00      	ldr	r3, [sp, #0]
    848e:	7819      	ldrb	r1, [r3, #0]
    8490:	9b00      	ldr	r3, [sp, #0]
    8492:	7a1b      	ldrb	r3, [r3, #8]
    8494:	9a02      	ldr	r2, [sp, #8]
    8496:	9803      	ldr	r0, [sp, #12]
    8498:	f7ff fcd5 	bl	7e46 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    849c:	f003 fa66 	bl	b96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    84a0:	9b00      	ldr	r3, [sp, #0]
    84a2:	781b      	ldrb	r3, [r3, #0]
    84a4:	461c      	mov	r4, r3
    84a6:	9b00      	ldr	r3, [sp, #0]
    84a8:	6859      	ldr	r1, [r3, #4]
    84aa:	4808      	ldr	r0, [pc, #32]	; (84cc <Adc_Ip_ConfigChannel+0x5c>)
    84ac:	9a01      	ldr	r2, [sp, #4]
    84ae:	4613      	mov	r3, r2
    84b0:	00db      	lsls	r3, r3, #3
    84b2:	4413      	add	r3, r2
    84b4:	005b      	lsls	r3, r3, #1
    84b6:	4413      	add	r3, r2
    84b8:	4423      	add	r3, r4
    84ba:	3302      	adds	r3, #2
    84bc:	009b      	lsls	r3, r3, #2
    84be:	4403      	add	r3, r0
    84c0:	6059      	str	r1, [r3, #4]
}
    84c2:	bf00      	nop
    84c4:	b004      	add	sp, #16
    84c6:	bd10      	pop	{r4, pc}
    84c8:	0001078c 	.word	0x0001078c
    84cc:	1fff8d10 	.word	0x1fff8d10

000084d0 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    84d0:	b500      	push	{lr}
    84d2:	b089      	sub	sp, #36	; 0x24
    84d4:	9001      	str	r0, [sp, #4]
    84d6:	460b      	mov	r3, r1
    84d8:	f88d 3003 	strb.w	r3, [sp, #3]
    84dc:	4613      	mov	r3, r2
    84de:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84e2:	4a24      	ldr	r2, [pc, #144]	; (8574 <Adc_Ip_SetDisabledChannel+0xa4>)
    84e4:	9b01      	ldr	r3, [sp, #4]
    84e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ea:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    84ec:	2300      	movs	r3, #0
    84ee:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    84f0:	2100      	movs	r1, #0
    84f2:	4821      	ldr	r0, [pc, #132]	; (8578 <Adc_Ip_SetDisabledChannel+0xa8>)
    84f4:	f7f9 fb44 	bl	1b80 <OsIf_MicrosToTicks>
    84f8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    84fa:	2000      	movs	r0, #0
    84fc:	f7f9 faf4 	bl	1ae8 <OsIf_GetCounter>
    8500:	4603      	mov	r3, r0
    8502:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8504:	2300      	movs	r3, #0
    8506:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8508:	f003 f8bc 	bl	b684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    850c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8510:	9b05      	ldr	r3, [sp, #20]
    8512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8516:	f89d 2003 	ldrb.w	r2, [sp, #3]
    851a:	f043 011f 	orr.w	r1, r3, #31
    851e:	9b05      	ldr	r3, [sp, #20]
    8520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8524:	f003 f8da 	bl	b6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8528:	f89d 3002 	ldrb.w	r3, [sp, #2]
    852c:	2b00      	cmp	r3, #0
    852e:	d01c      	beq.n	856a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8530:	e008      	b.n	8544 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8532:	ab03      	add	r3, sp, #12
    8534:	2100      	movs	r1, #0
    8536:	4618      	mov	r0, r3
    8538:	f7f9 faef 	bl	1b1a <OsIf_GetElapsed>
    853c:	4602      	mov	r2, r0
    853e:	9b06      	ldr	r3, [sp, #24]
    8540:	4413      	add	r3, r2
    8542:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8544:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8548:	9b05      	ldr	r3, [sp, #20]
    854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    854e:	f003 031f 	and.w	r3, r3, #31
    8552:	2b1f      	cmp	r3, #31
    8554:	d003      	beq.n	855e <Adc_Ip_SetDisabledChannel+0x8e>
    8556:	9a06      	ldr	r2, [sp, #24]
    8558:	9b04      	ldr	r3, [sp, #16]
    855a:	429a      	cmp	r2, r3
    855c:	d3e9      	bcc.n	8532 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    855e:	9a06      	ldr	r2, [sp, #24]
    8560:	9b04      	ldr	r3, [sp, #16]
    8562:	429a      	cmp	r2, r3
    8564:	d301      	bcc.n	856a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8566:	2302      	movs	r3, #2
    8568:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    856a:	9b07      	ldr	r3, [sp, #28]
}
    856c:	4618      	mov	r0, r3
    856e:	b009      	add	sp, #36	; 0x24
    8570:	f85d fb04 	ldr.w	pc, [sp], #4
    8574:	0001078c 	.word	0x0001078c
    8578:	000186a0 	.word	0x000186a0

0000857c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    857c:	b500      	push	{lr}
    857e:	b087      	sub	sp, #28
    8580:	9003      	str	r0, [sp, #12]
    8582:	9102      	str	r1, [sp, #8]
    8584:	4613      	mov	r3, r2
    8586:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    858a:	4a0a      	ldr	r2, [pc, #40]	; (85b4 <Adc_Ip_StartConversion+0x38>)
    858c:	9b03      	ldr	r3, [sp, #12]
    858e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8592:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    8594:	f003 f8c8 	bl	b728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8598:	f89d 3007 	ldrb.w	r3, [sp, #7]
    859c:	9a02      	ldr	r2, [sp, #8]
    859e:	2100      	movs	r1, #0
    85a0:	9805      	ldr	r0, [sp, #20]
    85a2:	f7ff fc50 	bl	7e46 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    85a6:	f003 f8eb 	bl	b780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    85aa:	bf00      	nop
    85ac:	b007      	add	sp, #28
    85ae:	f85d fb04 	ldr.w	pc, [sp], #4
    85b2:	bf00      	nop
    85b4:	0001078c 	.word	0x0001078c

000085b8 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    85b8:	b084      	sub	sp, #16
    85ba:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85bc:	4a0b      	ldr	r2, [pc, #44]	; (85ec <Adc_Ip_GetConvActiveFlag+0x34>)
    85be:	9b01      	ldr	r3, [sp, #4]
    85c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85c4:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    85c6:	9b03      	ldr	r3, [sp, #12]
    85c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    85cc:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    85ce:	9b02      	ldr	r3, [sp, #8]
    85d0:	09db      	lsrs	r3, r3, #7
    85d2:	f003 0301 	and.w	r3, r3, #1
    85d6:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    85d8:	9b02      	ldr	r3, [sp, #8]
    85da:	2b00      	cmp	r3, #0
    85dc:	bf14      	ite	ne
    85de:	2301      	movne	r3, #1
    85e0:	2300      	moveq	r3, #0
    85e2:	b2db      	uxtb	r3, r3
}
    85e4:	4618      	mov	r0, r3
    85e6:	b004      	add	sp, #16
    85e8:	4770      	bx	lr
    85ea:	bf00      	nop
    85ec:	0001078c 	.word	0x0001078c

000085f0 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    85f0:	b500      	push	{lr}
    85f2:	b085      	sub	sp, #20
    85f4:	9001      	str	r0, [sp, #4]
    85f6:	460b      	mov	r3, r1
    85f8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    85fc:	4a08      	ldr	r2, [pc, #32]	; (8620 <Adc_Ip_GetChanInterrupt+0x30>)
    85fe:	9b01      	ldr	r3, [sp, #4]
    8600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8604:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    860c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    860e:	9803      	ldr	r0, [sp, #12]
    8610:	f7ff fc5e 	bl	7ed0 <Adc_HwAcc_GetAIEN>
    8614:	4603      	mov	r3, r0
}
    8616:	4618      	mov	r0, r3
    8618:	b005      	add	sp, #20
    861a:	f85d fb04 	ldr.w	pc, [sp], #4
    861e:	bf00      	nop
    8620:	0001078c 	.word	0x0001078c

00008624 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8624:	b500      	push	{lr}
    8626:	b085      	sub	sp, #20
    8628:	9001      	str	r0, [sp, #4]
    862a:	460b      	mov	r3, r1
    862c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8630:	4a08      	ldr	r2, [pc, #32]	; (8654 <Adc_Ip_GetConvCompleteFlag+0x30>)
    8632:	9b01      	ldr	r3, [sp, #4]
    8634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8638:	f89d 2003 	ldrb.w	r2, [sp, #3]
    863c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8640:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    8642:	9803      	ldr	r0, [sp, #12]
    8644:	f7ff fc52 	bl	7eec <Adc_HwAcc_GetCOCO>
    8648:	4603      	mov	r3, r0
}
    864a:	4618      	mov	r0, r3
    864c:	b005      	add	sp, #20
    864e:	f85d fb04 	ldr.w	pc, [sp], #4
    8652:	bf00      	nop
    8654:	0001078c 	.word	0x0001078c

00008658 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8658:	b500      	push	{lr}
    865a:	b085      	sub	sp, #20
    865c:	9001      	str	r0, [sp, #4]
    865e:	460b      	mov	r3, r1
    8660:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8664:	4a07      	ldr	r2, [pc, #28]	; (8684 <Adc_Ip_GetConvData+0x2c>)
    8666:	9b01      	ldr	r3, [sp, #4]
    8668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    866c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    866e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8672:	4619      	mov	r1, r3
    8674:	9803      	ldr	r0, [sp, #12]
    8676:	f7ff fc47 	bl	7f08 <Adc_HwAcc_GetData>
    867a:	4603      	mov	r3, r0
}
    867c:	4618      	mov	r0, r3
    867e:	b005      	add	sp, #20
    8680:	f85d fb04 	ldr.w	pc, [sp], #4
    8684:	0001078c 	.word	0x0001078c

00008688 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8688:	b500      	push	{lr}
    868a:	b093      	sub	sp, #76	; 0x4c
    868c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    868e:	4a59      	ldr	r2, [pc, #356]	; (87f4 <Adc_Ip_DoCalibration+0x16c>)
    8690:	9b01      	ldr	r3, [sp, #4]
    8692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8696:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8698:	2300      	movs	r3, #0
    869a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    869c:	2100      	movs	r1, #0
    869e:	4856      	ldr	r0, [pc, #344]	; (87f8 <Adc_Ip_DoCalibration+0x170>)
    86a0:	f7f9 fa6e 	bl	1b80 <OsIf_MicrosToTicks>
    86a4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    86a6:	2000      	movs	r0, #0
    86a8:	f7f9 fa1e 	bl	1ae8 <OsIf_GetCounter>
    86ac:	4603      	mov	r3, r0
    86ae:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    86b0:	2300      	movs	r3, #0
    86b2:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    86b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    86ba:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    86bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86be:	089b      	lsrs	r3, r3, #2
    86c0:	f003 0301 	and.w	r3, r3, #1
    86c4:	2b00      	cmp	r3, #0
    86c6:	bf14      	ite	ne
    86c8:	2301      	movne	r3, #1
    86ca:	2300      	moveq	r3, #0
    86cc:	b2db      	uxtb	r3, r3
    86ce:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    86d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    86d4:	f7ff fb71 	bl	7dba <Adc_HwAcc_GetAverageSelect>
    86d8:	4603      	mov	r3, r0
    86da:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    86dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    86e0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    86e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86e4:	b2db      	uxtb	r3, r3
    86e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    86ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    86f0:	4618      	mov	r0, r3
    86f2:	f7ff fb99 	bl	7e28 <Adc_HwAcc_GetTriggerMode>
    86f6:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    86f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    86fc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    86fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8700:	f7ff fad8 	bl	7cb4 <Adc_HwAcc_GetClockDivide>
    8704:	4603      	mov	r3, r0
    8706:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8708:	980d      	ldr	r0, [sp, #52]	; 0x34
    870a:	f7ff faf2 	bl	7cf2 <Adc_HwAcc_GetInputClock>
    870e:	4603      	mov	r3, r0
    8710:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    8712:	2301      	movs	r3, #1
    8714:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8718:	2303      	movs	r3, #3
    871a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    871c:	230c      	movs	r3, #12
    871e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    8722:	4a36      	ldr	r2, [pc, #216]	; (87fc <Adc_Ip_DoCalibration+0x174>)
    8724:	9b01      	ldr	r3, [sp, #4]
    8726:	214c      	movs	r1, #76	; 0x4c
    8728:	fb01 f303 	mul.w	r3, r1, r3
    872c:	4413      	add	r3, r2
    872e:	3304      	adds	r3, #4
    8730:	681b      	ldr	r3, [r3, #0]
    8732:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8734:	9b08      	ldr	r3, [sp, #32]
    8736:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8738:	ab03      	add	r3, sp, #12
    873a:	2200      	movs	r2, #0
    873c:	4619      	mov	r1, r3
    873e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8740:	f7ff fbfa 	bl	7f38 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8746:	2200      	movs	r2, #0
    8748:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    874c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    874e:	2200      	movs	r2, #0
    8750:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8756:	2200      	movs	r2, #0
    8758:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    875c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    875e:	2200      	movs	r2, #0
    8760:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8766:	2200      	movs	r2, #0
    8768:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    876c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    876e:	2200      	movs	r2, #0
    8770:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8776:	2200      	movs	r2, #0
    8778:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    877c:	f003 fb5a 	bl	be34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8786:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    878a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    878e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8796:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    879a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    879c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    87a0:	f003 fb74 	bl	be8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    87a4:	e008      	b.n	87b8 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    87a6:	ab0b      	add	r3, sp, #44	; 0x2c
    87a8:	2100      	movs	r1, #0
    87aa:	4618      	mov	r0, r3
    87ac:	f7f9 f9b5 	bl	1b1a <OsIf_GetElapsed>
    87b0:	4602      	mov	r2, r0
    87b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87b4:	4413      	add	r3, r2
    87b6:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    87b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    87be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    87c2:	2b00      	cmp	r3, #0
    87c4:	d003      	beq.n	87ce <Adc_Ip_DoCalibration+0x146>
    87c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    87c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    87ca:	429a      	cmp	r2, r3
    87cc:	d3eb      	bcc.n	87a6 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    87ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    87d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    87d2:	429a      	cmp	r2, r3
    87d4:	d301      	bcc.n	87da <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    87d6:	2302      	movs	r3, #2
    87d8:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    87da:	ab07      	add	r3, sp, #28
    87dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    87de:	4619      	mov	r1, r3
    87e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    87e2:	f7ff fba9 	bl	7f38 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    87e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    87ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    87ec:	4618      	mov	r0, r3
    87ee:	b013      	add	sp, #76	; 0x4c
    87f0:	f85d fb04 	ldr.w	pc, [sp], #4
    87f4:	0001078c 	.word	0x0001078c
    87f8:	000186a0 	.word	0x000186a0
    87fc:	1fff8d10 	.word	0x1fff8d10

00008800 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8800:	b500      	push	{lr}
    8802:	b089      	sub	sp, #36	; 0x24
    8804:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8806:	4a1e      	ldr	r2, [pc, #120]	; (8880 <Adc_Ip_ClearLatchedTriggers+0x80>)
    8808:	9b01      	ldr	r3, [sp, #4]
    880a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    880e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8810:	2300      	movs	r3, #0
    8812:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8814:	2100      	movs	r1, #0
    8816:	481b      	ldr	r0, [pc, #108]	; (8884 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8818:	f7f9 f9b2 	bl	1b80 <OsIf_MicrosToTicks>
    881c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    881e:	2000      	movs	r0, #0
    8820:	f7f9 f962 	bl	1ae8 <OsIf_GetCounter>
    8824:	4603      	mov	r3, r0
    8826:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8828:	2300      	movs	r3, #0
    882a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    882c:	f002 fd90 	bl	b350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8830:	9b05      	ldr	r3, [sp, #20]
    8832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8834:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8838:	9b05      	ldr	r3, [sp, #20]
    883a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    883c:	f002 fdb4 	bl	b3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8840:	e008      	b.n	8854 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8842:	ab03      	add	r3, sp, #12
    8844:	2100      	movs	r1, #0
    8846:	4618      	mov	r0, r3
    8848:	f7f9 f967 	bl	1b1a <OsIf_GetElapsed>
    884c:	4602      	mov	r2, r0
    884e:	9b06      	ldr	r3, [sp, #24]
    8850:	4413      	add	r3, r2
    8852:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8854:	9b05      	ldr	r3, [sp, #20]
    8856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    885a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    885e:	2b00      	cmp	r3, #0
    8860:	d003      	beq.n	886a <Adc_Ip_ClearLatchedTriggers+0x6a>
    8862:	9a06      	ldr	r2, [sp, #24]
    8864:	9b04      	ldr	r3, [sp, #16]
    8866:	429a      	cmp	r2, r3
    8868:	d3eb      	bcc.n	8842 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    886a:	9a06      	ldr	r2, [sp, #24]
    886c:	9b04      	ldr	r3, [sp, #16]
    886e:	429a      	cmp	r2, r3
    8870:	d301      	bcc.n	8876 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8872:	2302      	movs	r3, #2
    8874:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8876:	9b07      	ldr	r3, [sp, #28]
}
    8878:	4618      	mov	r0, r3
    887a:	b009      	add	sp, #36	; 0x24
    887c:	f85d fb04 	ldr.w	pc, [sp], #4
    8880:	0001078c 	.word	0x0001078c
    8884:	000186a0 	.word	0x000186a0

00008888 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8888:	b500      	push	{lr}
    888a:	b085      	sub	sp, #20
    888c:	9001      	str	r0, [sp, #4]
    888e:	460b      	mov	r3, r1
    8890:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8894:	4a0c      	ldr	r2, [pc, #48]	; (88c8 <Adc_Ip_EnableChannelNotification+0x40>)
    8896:	9b01      	ldr	r3, [sp, #4]
    8898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    889c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    889e:	f002 ff95 	bl	b7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    88a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88a6:	9b03      	ldr	r3, [sp, #12]
    88a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88b0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    88b4:	9b03      	ldr	r3, [sp, #12]
    88b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    88ba:	f002 ffb3 	bl	b824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    88be:	bf00      	nop
    88c0:	b005      	add	sp, #20
    88c2:	f85d fb04 	ldr.w	pc, [sp], #4
    88c6:	bf00      	nop
    88c8:	0001078c 	.word	0x0001078c

000088cc <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    88cc:	b500      	push	{lr}
    88ce:	b085      	sub	sp, #20
    88d0:	9001      	str	r0, [sp, #4]
    88d2:	460b      	mov	r3, r1
    88d4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88d8:	4a0c      	ldr	r2, [pc, #48]	; (890c <Adc_Ip_DisableChannelNotification+0x40>)
    88da:	9b01      	ldr	r3, [sp, #4]
    88dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88e0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    88e2:	f002 ffc5 	bl	b870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    88e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88ea:	9b03      	ldr	r3, [sp, #12]
    88ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88f4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    88f8:	9b03      	ldr	r3, [sp, #12]
    88fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    88fe:	f002 ffe3 	bl	b8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8902:	bf00      	nop
    8904:	b005      	add	sp, #20
    8906:	f85d fb04 	ldr.w	pc, [sp], #4
    890a:	bf00      	nop
    890c:	0001078c 	.word	0x0001078c

00008910 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8910:	b500      	push	{lr}
    8912:	b085      	sub	sp, #20
    8914:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8916:	4a0a      	ldr	r2, [pc, #40]	; (8940 <Adc_Ip_ClearTrigErrReg+0x30>)
    8918:	9b01      	ldr	r3, [sp, #4]
    891a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    891e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8920:	f003 f940 	bl	bba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8924:	9b03      	ldr	r3, [sp, #12]
    8926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    892a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    892e:	9b03      	ldr	r3, [sp, #12]
    8930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8934:	f003 f962 	bl	bbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8938:	bf00      	nop
    893a:	b005      	add	sp, #20
    893c:	f85d fb04 	ldr.w	pc, [sp], #4
    8940:	0001078c 	.word	0x0001078c

00008944 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8944:	b084      	sub	sp, #16
    8946:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8948:	4a06      	ldr	r2, [pc, #24]	; (8964 <Adc_Ip_GetTrigErrReg+0x20>)
    894a:	9b01      	ldr	r3, [sp, #4]
    894c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8950:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8952:	9b03      	ldr	r3, [sp, #12]
    8954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8958:	0e1b      	lsrs	r3, r3, #24
    895a:	f003 030f 	and.w	r3, r3, #15
}
    895e:	4618      	mov	r0, r3
    8960:	b004      	add	sp, #16
    8962:	4770      	bx	lr
    8964:	0001078c 	.word	0x0001078c

00008968 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8968:	b082      	sub	sp, #8
    896a:	9001      	str	r0, [sp, #4]
    896c:	460b      	mov	r3, r1
    896e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8972:	4a06      	ldr	r2, [pc, #24]	; (898c <Adc_Ip_GetDataAddress+0x24>)
    8974:	9b01      	ldr	r3, [sp, #4]
    8976:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    897a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    897e:	3312      	adds	r3, #18
    8980:	009b      	lsls	r3, r3, #2
    8982:	4413      	add	r3, r2
}
    8984:	4618      	mov	r0, r3
    8986:	b002      	add	sp, #8
    8988:	4770      	bx	lr
    898a:	bf00      	nop
    898c:	0001078c 	.word	0x0001078c

00008990 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8990:	b088      	sub	sp, #32
    8992:	9003      	str	r0, [sp, #12]
    8994:	9102      	str	r1, [sp, #8]
    8996:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8998:	4a25      	ldr	r2, [pc, #148]	; (8a30 <Adc_Ip_GetChanData+0xa0>)
    899a:	9b03      	ldr	r3, [sp, #12]
    899c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a0:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    89a2:	2300      	movs	r3, #0
    89a4:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    89a6:	2300      	movs	r3, #0
    89a8:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    89ac:	2300      	movs	r3, #0
    89ae:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    89b2:	2300      	movs	r3, #0
    89b4:	f88d 3019 	strb.w	r3, [sp, #25]
    89b8:	e019      	b.n	89ee <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    89ba:	f89d 1019 	ldrb.w	r1, [sp, #25]
    89be:	481d      	ldr	r0, [pc, #116]	; (8a34 <Adc_Ip_GetChanData+0xa4>)
    89c0:	9a03      	ldr	r2, [sp, #12]
    89c2:	4613      	mov	r3, r2
    89c4:	00db      	lsls	r3, r3, #3
    89c6:	4413      	add	r3, r2
    89c8:	005b      	lsls	r3, r3, #1
    89ca:	4413      	add	r3, r2
    89cc:	440b      	add	r3, r1
    89ce:	3302      	adds	r3, #2
    89d0:	009b      	lsls	r3, r3, #2
    89d2:	4403      	add	r3, r0
    89d4:	685b      	ldr	r3, [r3, #4]
    89d6:	9a02      	ldr	r2, [sp, #8]
    89d8:	429a      	cmp	r2, r3
    89da:	d103      	bne.n	89e4 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    89dc:	2301      	movs	r3, #1
    89de:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    89e2:	e008      	b.n	89f6 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    89e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    89e8:	3301      	adds	r3, #1
    89ea:	f88d 3019 	strb.w	r3, [sp, #25]
    89ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
    89f2:	2b0f      	cmp	r3, #15
    89f4:	d9e1      	bls.n	89ba <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    89f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    89fa:	2b00      	cmp	r3, #0
    89fc:	d00e      	beq.n	8a1c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    89fe:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8a02:	9b05      	ldr	r3, [sp, #20]
    8a04:	3212      	adds	r2, #18
    8a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a0a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8a0e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8a16:	f8ad 301a 	strh.w	r3, [sp, #26]
    8a1a:	e001      	b.n	8a20 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8a1c:	2301      	movs	r3, #1
    8a1e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8a20:	9b01      	ldr	r3, [sp, #4]
    8a22:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8a26:	801a      	strh	r2, [r3, #0]

    return Status;
    8a28:	9b07      	ldr	r3, [sp, #28]
}
    8a2a:	4618      	mov	r0, r3
    8a2c:	b008      	add	sp, #32
    8a2e:	4770      	bx	lr
    8a30:	0001078c 	.word	0x0001078c
    8a34:	1fff8d10 	.word	0x1fff8d10

00008a38 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8a38:	b500      	push	{lr}
    8a3a:	b085      	sub	sp, #20
    8a3c:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8a3e:	2300      	movs	r3, #0
    8a40:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8a44:	2300      	movs	r3, #0
    8a46:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8a4a:	4a32      	ldr	r2, [pc, #200]	; (8b14 <Adc_Ip_IRQHandler+0xdc>)
    8a4c:	9b01      	ldr	r3, [sp, #4]
    8a4e:	214c      	movs	r1, #76	; 0x4c
    8a50:	fb01 f303 	mul.w	r3, r1, r3
    8a54:	4413      	add	r3, r2
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d040      	beq.n	8ade <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8a5c:	4a2d      	ldr	r2, [pc, #180]	; (8b14 <Adc_Ip_IRQHandler+0xdc>)
    8a5e:	9b01      	ldr	r3, [sp, #4]
    8a60:	214c      	movs	r1, #76	; 0x4c
    8a62:	fb01 f303 	mul.w	r3, r1, r3
    8a66:	4413      	add	r3, r2
    8a68:	3308      	adds	r3, #8
    8a6a:	681b      	ldr	r3, [r3, #0]
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d04d      	beq.n	8b0c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a70:	2300      	movs	r3, #0
    8a72:	f88d 300f 	strb.w	r3, [sp, #15]
    8a76:	e02d      	b.n	8ad4 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8a78:	4a27      	ldr	r2, [pc, #156]	; (8b18 <Adc_Ip_IRQHandler+0xe0>)
    8a7a:	9b01      	ldr	r3, [sp, #4]
    8a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a88:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8a8a:	9802      	ldr	r0, [sp, #8]
    8a8c:	f7ff fa20 	bl	7ed0 <Adc_HwAcc_GetAIEN>
    8a90:	4603      	mov	r3, r0
    8a92:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8a96:	9802      	ldr	r0, [sp, #8]
    8a98:	f7ff fa28 	bl	7eec <Adc_HwAcc_GetCOCO>
    8a9c:	4603      	mov	r3, r0
    8a9e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8aa2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d00f      	beq.n	8aca <Adc_Ip_IRQHandler+0x92>
    8aaa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d00b      	beq.n	8aca <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8ab2:	4a18      	ldr	r2, [pc, #96]	; (8b14 <Adc_Ip_IRQHandler+0xdc>)
    8ab4:	9b01      	ldr	r3, [sp, #4]
    8ab6:	214c      	movs	r1, #76	; 0x4c
    8ab8:	fb01 f303 	mul.w	r3, r1, r3
    8abc:	4413      	add	r3, r2
    8abe:	3308      	adds	r3, #8
    8ac0:	681b      	ldr	r3, [r3, #0]
    8ac2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8ac6:	4610      	mov	r0, r2
    8ac8:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8aca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ace:	3301      	adds	r3, #1
    8ad0:	f88d 300f 	strb.w	r3, [sp, #15]
    8ad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ad8:	2b0f      	cmp	r3, #15
    8ada:	d9cd      	bls.n	8a78 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8adc:	e016      	b.n	8b0c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8ade:	2300      	movs	r3, #0
    8ae0:	f88d 300f 	strb.w	r3, [sp, #15]
    8ae4:	e00e      	b.n	8b04 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8ae6:	4a0c      	ldr	r2, [pc, #48]	; (8b18 <Adc_Ip_IRQHandler+0xe0>)
    8ae8:	9b01      	ldr	r3, [sp, #4]
    8aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8af2:	4611      	mov	r1, r2
    8af4:	4618      	mov	r0, r3
    8af6:	f7ff fa07 	bl	7f08 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8afa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8afe:	3301      	adds	r3, #1
    8b00:	f88d 300f 	strb.w	r3, [sp, #15]
    8b04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b08:	2b0f      	cmp	r3, #15
    8b0a:	d9ec      	bls.n	8ae6 <Adc_Ip_IRQHandler+0xae>
}
    8b0c:	bf00      	nop
    8b0e:	b005      	add	sp, #20
    8b10:	f85d fb04 	ldr.w	pc, [sp], #4
    8b14:	1fff8d10 	.word	0x1fff8d10
    8b18:	0001078c 	.word	0x0001078c

00008b1c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8b1c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8b1e:	2000      	movs	r0, #0
    8b20:	f7ff ff8a 	bl	8a38 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8b24:	f3bf 8f4f 	dsb	sy
}
    8b28:	bf00      	nop
    8b2a:	bd08      	pop	{r3, pc}

00008b2c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8b2c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8b2e:	2001      	movs	r0, #1
    8b30:	f7ff ff82 	bl	8a38 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8b34:	f3bf 8f4f 	dsb	sy
}
    8b38:	bf00      	nop
    8b3a:	bd08      	pop	{r3, pc}

00008b3c <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8b3c:	b510      	push	{r4, lr}
    8b3e:	b084      	sub	sp, #16
    8b40:	4603      	mov	r3, r0
    8b42:	460a      	mov	r2, r1
    8b44:	f88d 3007 	strb.w	r3, [sp, #7]
    8b48:	4613      	mov	r3, r2
    8b4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8b4e:	2300      	movs	r3, #0
    8b50:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8b54:	2300      	movs	r3, #0
    8b56:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8b5a:	f002 f821 	bl	aba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8b62:	4a24      	ldr	r2, [pc, #144]	; (8bf4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8b64:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8b68:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8b6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8b70:	2b01      	cmp	r3, #1
    8b72:	d806      	bhi.n	8b82 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8b74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8b78:	4a1e      	ldr	r2, [pc, #120]	; (8bf4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8b7a:	2100      	movs	r1, #0
    8b7c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    8b80:	e032      	b.n	8be8 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8b82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8b86:	3301      	adds	r3, #1
    8b88:	f8ad 300e 	strh.w	r3, [sp, #14]
    8b8c:	e01b      	b.n	8bc6 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8b8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8b92:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8b96:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8b9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8b9e:	3a01      	subs	r2, #1
    8ba0:	4c14      	ldr	r4, [pc, #80]	; (8bf4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8ba2:	0080      	lsls	r0, r0, #2
    8ba4:	4403      	add	r3, r0
    8ba6:	005b      	lsls	r3, r3, #1
    8ba8:	4423      	add	r3, r4
    8baa:	885b      	ldrh	r3, [r3, #2]
    8bac:	b29c      	uxth	r4, r3
    8bae:	4811      	ldr	r0, [pc, #68]	; (8bf4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8bb0:	008b      	lsls	r3, r1, #2
    8bb2:	4413      	add	r3, r2
    8bb4:	005b      	lsls	r3, r3, #1
    8bb6:	4403      	add	r3, r0
    8bb8:	4622      	mov	r2, r4
    8bba:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8bbc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8bc0:	3301      	adds	r3, #1
    8bc2:	f8ad 300e 	strh.w	r3, [sp, #14]
    8bc6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8bca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8bce:	429a      	cmp	r2, r3
    8bd0:	d3dd      	bcc.n	8b8e <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8bd6:	4a07      	ldr	r2, [pc, #28]	; (8bf4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8bd8:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8bdc:	b292      	uxth	r2, r2
    8bde:	3a01      	subs	r2, #1
    8be0:	b291      	uxth	r1, r2
    8be2:	4a04      	ldr	r2, [pc, #16]	; (8bf4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8be4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8be8:	f002 f806 	bl	abf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8bec:	bf00      	nop
    8bee:	b004      	add	sp, #16
    8bf0:	bd10      	pop	{r4, pc}
    8bf2:	bf00      	nop
    8bf4:	1fff8d00 	.word	0x1fff8d00

00008bf8 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8bf8:	b500      	push	{lr}
    8bfa:	b087      	sub	sp, #28
    8bfc:	9003      	str	r0, [sp, #12]
    8bfe:	9102      	str	r1, [sp, #8]
    8c00:	9201      	str	r2, [sp, #4]
    8c02:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8c06:	2300      	movs	r3, #0
    8c08:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8c0c:	9b03      	ldr	r3, [sp, #12]
    8c0e:	789b      	ldrb	r3, [r3, #2]
    8c10:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8c14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c18:	4a29      	ldr	r2, [pc, #164]	; (8cc0 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c1e:	681a      	ldr	r2, [r3, #0]
    8c20:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8c24:	4413      	add	r3, r2
    8c26:	7c1b      	ldrb	r3, [r3, #16]
    8c28:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8c2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c30:	4a23      	ldr	r2, [pc, #140]	; (8cc0 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c36:	681b      	ldr	r3, [r3, #0]
    8c38:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c40:	695b      	ldr	r3, [r3, #20]
    8c42:	4618      	mov	r0, r3
    8c44:	f000 fbce 	bl	93e4 <Adc_Ipw_CalculateNumsBitShift>
    8c48:	4603      	mov	r3, r0
    8c4a:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8c4e:	9b03      	ldr	r3, [sp, #12]
    8c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8c54:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8c58:	2300      	movs	r3, #0
    8c5a:	f88d 3017 	strb.w	r3, [sp, #23]
    8c5e:	e022      	b.n	8ca6 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8c60:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8c64:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8c68:	4611      	mov	r1, r2
    8c6a:	4618      	mov	r0, r3
    8c6c:	f7ff fcf4 	bl	8658 <Adc_Ip_GetConvData>
    8c70:	4603      	mov	r3, r0
    8c72:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8c76:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8c7a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8c7e:	fa02 f303 	lsl.w	r3, r2, r3
    8c82:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8c86:	9b01      	ldr	r3, [sp, #4]
    8c88:	2201      	movs	r2, #1
    8c8a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8c8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8c90:	005b      	lsls	r3, r3, #1
    8c92:	9a02      	ldr	r2, [sp, #8]
    8c94:	4413      	add	r3, r2
    8c96:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8c9a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8c9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8ca0:	3301      	adds	r3, #1
    8ca2:	f88d 3017 	strb.w	r3, [sp, #23]
    8ca6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8caa:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8cae:	429a      	cmp	r2, r3
    8cb0:	d3d6      	bcc.n	8c60 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8cb2:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8cb6:	4618      	mov	r0, r3
    8cb8:	b007      	add	sp, #28
    8cba:	f85d fb04 	ldr.w	pc, [sp], #4
    8cbe:	bf00      	nop
    8cc0:	1fff8ce8 	.word	0x1fff8ce8

00008cc4 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8cc4:	b500      	push	{lr}
    8cc6:	b087      	sub	sp, #28
    8cc8:	9003      	str	r0, [sp, #12]
    8cca:	9102      	str	r1, [sp, #8]
    8ccc:	9201      	str	r2, [sp, #4]
    8cce:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8cd2:	2301      	movs	r3, #1
    8cd4:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8cd8:	2300      	movs	r3, #0
    8cda:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8cde:	9b03      	ldr	r3, [sp, #12]
    8ce0:	789b      	ldrb	r3, [r3, #2]
    8ce2:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8ce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cea:	4a19      	ldr	r2, [pc, #100]	; (8d50 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    8cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cf0:	681a      	ldr	r2, [r3, #0]
    8cf2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8cf6:	4413      	add	r3, r2
    8cf8:	7c1b      	ldrb	r3, [r3, #16]
    8cfa:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    8cfe:	9b03      	ldr	r3, [sp, #12]
    8d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8d04:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    8d08:	f89d 2013 	ldrb.w	r2, [sp, #19]
    8d0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d10:	2100      	movs	r1, #0
    8d12:	4618      	mov	r0, r3
    8d14:	f000 fe2a 	bl	996c <Adc_Ipw_CheckValidConversion>
    8d18:	4603      	mov	r3, r0
    8d1a:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    8d1e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8d22:	2b00      	cmp	r3, #0
    8d24:	d00a      	beq.n	8d3c <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    8d26:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d2a:	9a01      	ldr	r2, [sp, #4]
    8d2c:	9902      	ldr	r1, [sp, #8]
    8d2e:	9803      	ldr	r0, [sp, #12]
    8d30:	f7ff ff62 	bl	8bf8 <Adc_Ipw_ReadGroupConvData>
    8d34:	4603      	mov	r3, r0
    8d36:	f88d 3017 	strb.w	r3, [sp, #23]
    8d3a:	e002      	b.n	8d42 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    8d3c:	2301      	movs	r3, #1
    8d3e:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    8d42:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8d46:	4618      	mov	r0, r3
    8d48:	b007      	add	sp, #28
    8d4a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d4e:	bf00      	nop
    8d50:	1fff8ce8 	.word	0x1fff8ce8

00008d54 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    8d54:	b088      	sub	sp, #32
    8d56:	4603      	mov	r3, r0
    8d58:	9100      	str	r1, [sp, #0]
    8d5a:	f8ad 3006 	strh.w	r3, [sp, #6]
    8d5e:	4613      	mov	r3, r2
    8d60:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8d64:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8d68:	4a3a      	ldr	r2, [pc, #232]	; (8e54 <Adc_Ipw_WriteDataBuffer+0x100>)
    8d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d6e:	68da      	ldr	r2, [r3, #12]
    8d70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8d74:	005b      	lsls	r3, r3, #1
    8d76:	4413      	add	r3, r2
    8d78:	881b      	ldrh	r3, [r3, #0]
    8d7a:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    8d7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8d82:	4a34      	ldr	r2, [pc, #208]	; (8e54 <Adc_Ipw_WriteDataBuffer+0x100>)
    8d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d88:	685a      	ldr	r2, [r3, #4]
    8d8a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8d8e:	2134      	movs	r1, #52	; 0x34
    8d90:	fb01 f303 	mul.w	r3, r1, r3
    8d94:	4413      	add	r3, r2
    8d96:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8d98:	9b04      	ldr	r3, [sp, #16]
    8d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8d9e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    8da2:	2300      	movs	r3, #0
    8da4:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8da6:	2300      	movs	r3, #0
    8da8:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8dac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8db0:	4929      	ldr	r1, [pc, #164]	; (8e58 <Adc_Ipw_WriteDataBuffer+0x104>)
    8db2:	4613      	mov	r3, r2
    8db4:	009b      	lsls	r3, r3, #2
    8db6:	4413      	add	r3, r2
    8db8:	009b      	lsls	r3, r3, #2
    8dba:	440b      	add	r3, r1
    8dbc:	3308      	adds	r3, #8
    8dbe:	881b      	ldrh	r3, [r3, #0]
    8dc0:	b29b      	uxth	r3, r3
    8dc2:	3b01      	subs	r3, #1
    8dc4:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8dc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8dcc:	4922      	ldr	r1, [pc, #136]	; (8e58 <Adc_Ipw_WriteDataBuffer+0x104>)
    8dce:	4613      	mov	r3, r2
    8dd0:	009b      	lsls	r3, r3, #2
    8dd2:	4413      	add	r3, r2
    8dd4:	009b      	lsls	r3, r3, #2
    8dd6:	440b      	add	r3, r1
    8dd8:	3308      	adds	r3, #8
    8dda:	881b      	ldrh	r3, [r3, #0]
    8ddc:	b29b      	uxth	r3, r3
    8dde:	2b00      	cmp	r3, #0
    8de0:	d104      	bne.n	8dec <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    8de2:	9b04      	ldr	r3, [sp, #16]
    8de4:	8b9b      	ldrh	r3, [r3, #28]
    8de6:	3b01      	subs	r3, #1
    8de8:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8dec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8df0:	4919      	ldr	r1, [pc, #100]	; (8e58 <Adc_Ipw_WriteDataBuffer+0x104>)
    8df2:	4613      	mov	r3, r2
    8df4:	009b      	lsls	r3, r3, #2
    8df6:	4413      	add	r3, r2
    8df8:	009b      	lsls	r3, r3, #2
    8dfa:	440b      	add	r3, r1
    8dfc:	330c      	adds	r3, #12
    8dfe:	681a      	ldr	r2, [r3, #0]
    8e00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8e04:	005b      	lsls	r3, r3, #1
    8e06:	4413      	add	r3, r2
    8e08:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    8e0a:	9b04      	ldr	r3, [sp, #16]
    8e0c:	8b9b      	ldrh	r3, [r3, #28]
    8e0e:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    8e12:	2300      	movs	r3, #0
    8e14:	f88d 301f 	strb.w	r3, [sp, #31]
    8e18:	e012      	b.n	8e40 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    8e1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8e1e:	005b      	lsls	r3, r3, #1
    8e20:	9a00      	ldr	r2, [sp, #0]
    8e22:	4413      	add	r3, r2
    8e24:	9a06      	ldr	r2, [sp, #24]
    8e26:	8812      	ldrh	r2, [r2, #0]
    8e28:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    8e2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8e2e:	005b      	lsls	r3, r3, #1
    8e30:	9a06      	ldr	r2, [sp, #24]
    8e32:	4413      	add	r3, r2
    8e34:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    8e36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8e3a:	3301      	adds	r3, #1
    8e3c:	f88d 301f 	strb.w	r3, [sp, #31]
    8e40:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8e44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e48:	429a      	cmp	r2, r3
    8e4a:	d3e6      	bcc.n	8e1a <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    8e4c:	bf00      	nop
    8e4e:	bf00      	nop
    8e50:	b008      	add	sp, #32
    8e52:	4770      	bx	lr
    8e54:	1fff8ce8 	.word	0x1fff8ce8
    8e58:	1fff8cec 	.word	0x1fff8cec

00008e5c <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    8e5c:	b500      	push	{lr}
    8e5e:	b089      	sub	sp, #36	; 0x24
    8e60:	9200      	str	r2, [sp, #0]
    8e62:	461a      	mov	r2, r3
    8e64:	4603      	mov	r3, r0
    8e66:	f88d 3007 	strb.w	r3, [sp, #7]
    8e6a:	460b      	mov	r3, r1
    8e6c:	f8ad 3004 	strh.w	r3, [sp, #4]
    8e70:	4613      	mov	r3, r2
    8e72:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    8e76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e7a:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    8e7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e82:	f003 0307 	and.w	r3, r3, #7
    8e86:	b2db      	uxtb	r3, r3
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d006      	beq.n	8e9a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    8e8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e90:	08db      	lsrs	r3, r3, #3
    8e92:	b2db      	uxtb	r3, r3
    8e94:	3301      	adds	r3, #1
    8e96:	b2db      	uxtb	r3, r3
    8e98:	e003      	b.n	8ea2 <Adc_Ipw_ConfigurePdbChannels+0x46>
    8e9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e9e:	08db      	lsrs	r3, r3, #3
    8ea0:	b2db      	uxtb	r3, r3
    8ea2:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    8ea6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8eaa:	4987      	ldr	r1, [pc, #540]	; (90c8 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    8eac:	4613      	mov	r3, r2
    8eae:	009b      	lsls	r3, r3, #2
    8eb0:	4413      	add	r3, r2
    8eb2:	009b      	lsls	r3, r3, #2
    8eb4:	440b      	add	r3, r1
    8eb6:	3310      	adds	r3, #16
    8eb8:	781b      	ldrb	r3, [r3, #0]
    8eba:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    8ebe:	4b83      	ldr	r3, [pc, #524]	; (90cc <Adc_Ipw_ConfigurePdbChannels+0x270>)
    8ec0:	681b      	ldr	r3, [r3, #0]
    8ec2:	681a      	ldr	r2, [r3, #0]
    8ec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ec8:	4413      	add	r3, r2
    8eca:	7c1b      	ldrb	r3, [r3, #16]
    8ecc:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    8ed0:	9b00      	ldr	r3, [sp, #0]
    8ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8ed4:	691b      	ldr	r3, [r3, #16]
    8ed6:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    8ed8:	2300      	movs	r3, #0
    8eda:	f88d 301f 	strb.w	r3, [sp, #31]
    8ede:	e0e6      	b.n	90ae <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    8ee0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8ee4:	08db      	lsrs	r3, r3, #3
    8ee6:	b2db      	uxtb	r3, r3
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d102      	bne.n	8ef2 <Adc_Ipw_ConfigurePdbChannels+0x96>
    8eec:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8ef0:	e000      	b.n	8ef4 <Adc_Ipw_ConfigurePdbChannels+0x98>
    8ef2:	2308      	movs	r3, #8
    8ef4:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    8ef8:	9b00      	ldr	r3, [sp, #0]
    8efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8efc:	7bdb      	ldrb	r3, [r3, #15]
    8efe:	2b00      	cmp	r3, #0
    8f00:	d05e      	beq.n	8fc0 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    8f02:	9b00      	ldr	r3, [sp, #0]
    8f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f06:	7b9b      	ldrb	r3, [r3, #14]
    8f08:	f083 0301 	eor.w	r3, r3, #1
    8f0c:	b2db      	uxtb	r3, r3
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d02a      	beq.n	8f68 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    8f12:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8f16:	f1c3 0308 	rsb	r3, r3, #8
    8f1a:	22ff      	movs	r2, #255	; 0xff
    8f1c:	fa22 f303 	lsr.w	r3, r2, r3
    8f20:	b2db      	uxtb	r3, r3
    8f22:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8f26:	2300      	movs	r3, #0
    8f28:	f88d 301e 	strb.w	r3, [sp, #30]
    8f2c:	e015      	b.n	8f5a <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    8f2e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8f32:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8f36:	f89d 301e 	ldrb.w	r3, [sp, #30]
    8f3a:	4413      	add	r3, r2
    8f3c:	005b      	lsls	r3, r3, #1
    8f3e:	9a05      	ldr	r2, [sp, #20]
    8f40:	4413      	add	r3, r2
    8f42:	881b      	ldrh	r3, [r3, #0]
    8f44:	f89d 201e 	ldrb.w	r2, [sp, #30]
    8f48:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8f4c:	f001 fd06 	bl	a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8f50:	f89d 301e 	ldrb.w	r3, [sp, #30]
    8f54:	3301      	adds	r3, #1
    8f56:	f88d 301e 	strb.w	r3, [sp, #30]
    8f5a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    8f5e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8f62:	429a      	cmp	r2, r3
    8f64:	d3e3      	bcc.n	8f2e <Adc_Ipw_ConfigurePdbChannels+0xd2>
    8f66:	e051      	b.n	900c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    8f68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d110      	bne.n	8f92 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    8f70:	2301      	movs	r3, #1
    8f72:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    8f76:	9b05      	ldr	r3, [sp, #20]
    8f78:	881b      	ldrh	r3, [r3, #0]
    8f7a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    8f7e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8f82:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8f86:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8f8a:	2200      	movs	r2, #0
    8f8c:	f001 fce6 	bl	a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    8f90:	e03c      	b.n	900c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    8f92:	2301      	movs	r3, #1
    8f94:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    8f98:	9b00      	ldr	r3, [sp, #0]
    8f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f9c:	899a      	ldrh	r2, [r3, #12]
    8f9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8fa2:	b29b      	uxth	r3, r3
    8fa4:	fb12 f303 	smulbb	r3, r2, r3
    8fa8:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    8fac:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8fb0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fb4:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8fb8:	2200      	movs	r2, #0
    8fba:	f001 fccf 	bl	a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    8fbe:	e025      	b.n	900c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    8fc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	d10b      	bne.n	8fe0 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    8fc8:	2301      	movs	r3, #1
    8fca:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    8fce:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8fd2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8fd6:	2300      	movs	r3, #0
    8fd8:	2200      	movs	r2, #0
    8fda:	f001 fcbf 	bl	a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    8fde:	e015      	b.n	900c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    8fe0:	2301      	movs	r3, #1
    8fe2:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    8fe6:	9b00      	ldr	r3, [sp, #0]
    8fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fea:	899a      	ldrh	r2, [r3, #12]
    8fec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8ff0:	b29b      	uxth	r3, r3
    8ff2:	fb12 f303 	smulbb	r3, r2, r3
    8ff6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    8ffa:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8ffe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9002:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9006:	2200      	movs	r2, #0
    9008:	f001 fca8 	bl	a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    900c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9010:	4618      	mov	r0, r3
    9012:	f001 fb77 	bl	a704 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    9016:	f89d 201d 	ldrb.w	r2, [sp, #29]
    901a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    901e:	1ad3      	subs	r3, r2, r3
    9020:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9024:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9028:	b29a      	uxth	r2, r3
    902a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    902e:	4413      	add	r3, r2
    9030:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9034:	9b00      	ldr	r3, [sp, #0]
    9036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9038:	7b9b      	ldrb	r3, [r3, #14]
    903a:	2b00      	cmp	r3, #0
    903c:	d01d      	beq.n	907a <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    903e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9042:	2b00      	cmp	r3, #0
    9044:	d10c      	bne.n	9060 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9046:	f89d 3013 	ldrb.w	r3, [sp, #19]
    904a:	f1c3 0308 	rsb	r3, r3, #8
    904e:	22ff      	movs	r2, #255	; 0xff
    9050:	fa22 f303 	lsr.w	r3, r2, r3
    9054:	b2db      	uxtb	r3, r3
    9056:	3b01      	subs	r3, #1
    9058:	b2db      	uxtb	r3, r3
    905a:	f88d 300e 	strb.w	r3, [sp, #14]
    905e:	e00f      	b.n	9080 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9060:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9064:	f1c3 0308 	rsb	r3, r3, #8
    9068:	22ff      	movs	r2, #255	; 0xff
    906a:	fa22 f303 	lsr.w	r3, r2, r3
    906e:	b2db      	uxtb	r3, r3
    9070:	3b01      	subs	r3, #1
    9072:	b2db      	uxtb	r3, r3
    9074:	f88d 300e 	strb.w	r3, [sp, #14]
    9078:	e002      	b.n	9080 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    907a:	2300      	movs	r3, #0
    907c:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9080:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9084:	f1c3 0308 	rsb	r3, r3, #8
    9088:	22ff      	movs	r2, #255	; 0xff
    908a:	fa22 f303 	lsr.w	r3, r2, r3
    908e:	b2db      	uxtb	r3, r3
    9090:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9094:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9098:	aa03      	add	r2, sp, #12
    909a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    909e:	4618      	mov	r0, r3
    90a0:	f001 fb6c 	bl	a77c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    90a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90a8:	3301      	adds	r3, #1
    90aa:	f88d 301f 	strb.w	r3, [sp, #31]
    90ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
    90b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    90b6:	429a      	cmp	r2, r3
    90b8:	f4ff af12 	bcc.w	8ee0 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    90bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    90c0:	4618      	mov	r0, r3
    90c2:	b009      	add	sp, #36	; 0x24
    90c4:	f85d fb04 	ldr.w	pc, [sp], #4
    90c8:	1fff8cec 	.word	0x1fff8cec
    90cc:	1fff8ce8 	.word	0x1fff8ce8

000090d0 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    90d0:	b500      	push	{lr}
    90d2:	b089      	sub	sp, #36	; 0x24
    90d4:	9202      	str	r2, [sp, #8]
    90d6:	9301      	str	r3, [sp, #4]
    90d8:	4603      	mov	r3, r0
    90da:	f88d 300f 	strb.w	r3, [sp, #15]
    90de:	460b      	mov	r3, r1
    90e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    90e4:	2300      	movs	r3, #0
    90e6:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    90ea:	4b62      	ldr	r3, [pc, #392]	; (9274 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    90ec:	681b      	ldr	r3, [r3, #0]
    90ee:	681a      	ldr	r2, [r3, #0]
    90f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    90f4:	4413      	add	r3, r2
    90f6:	7c1b      	ldrb	r3, [r3, #16]
    90f8:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    90fc:	9b02      	ldr	r3, [sp, #8]
    90fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9100:	691b      	ldr	r3, [r3, #16]
    9102:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9104:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9108:	f003 0307 	and.w	r3, r3, #7
    910c:	b2db      	uxtb	r3, r3
    910e:	2b00      	cmp	r3, #0
    9110:	d006      	beq.n	9120 <Adc_Ipw_ConfigurePdbConversion+0x50>
    9112:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9116:	08db      	lsrs	r3, r3, #3
    9118:	b2db      	uxtb	r3, r3
    911a:	3301      	adds	r3, #1
    911c:	b2db      	uxtb	r3, r3
    911e:	e003      	b.n	9128 <Adc_Ipw_ConfigurePdbConversion+0x58>
    9120:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9124:	08db      	lsrs	r3, r3, #3
    9126:	b2db      	uxtb	r3, r3
    9128:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    912c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9130:	4618      	mov	r0, r3
    9132:	f001 fa51 	bl	a5d8 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    9136:	f89d 301b 	ldrb.w	r3, [sp, #27]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	4618      	mov	r0, r3
    913e:	f001 fa79 	bl	a634 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    9142:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9146:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    914a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    914e:	9a02      	ldr	r2, [sp, #8]
    9150:	f7ff fe84 	bl	8e5c <Adc_Ipw_ConfigurePdbChannels>
    9154:	4603      	mov	r3, r0
    9156:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    915a:	9b02      	ldr	r3, [sp, #8]
    915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    915e:	7bdb      	ldrb	r3, [r3, #15]
    9160:	2b00      	cmp	r3, #0
    9162:	d02f      	beq.n	91c4 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9164:	9b02      	ldr	r3, [sp, #8]
    9166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9168:	7b9b      	ldrb	r3, [r3, #14]
    916a:	f083 0301 	eor.w	r3, r3, #1
    916e:	b2db      	uxtb	r3, r3
    9170:	2b00      	cmp	r3, #0
    9172:	d017      	beq.n	91a4 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9174:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9178:	493f      	ldr	r1, [pc, #252]	; (9278 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    917a:	4613      	mov	r3, r2
    917c:	009b      	lsls	r3, r3, #2
    917e:	4413      	add	r3, r2
    9180:	009b      	lsls	r3, r3, #2
    9182:	440b      	add	r3, r1
    9184:	3310      	adds	r3, #16
    9186:	781b      	ldrb	r3, [r3, #0]
    9188:	461a      	mov	r2, r3
    918a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    918e:	4413      	add	r3, r2
    9190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9194:	3b01      	subs	r3, #1
    9196:	005b      	lsls	r3, r3, #1
    9198:	9a05      	ldr	r2, [sp, #20]
    919a:	4413      	add	r3, r2
    919c:	881b      	ldrh	r3, [r3, #0]
    919e:	f8ad 301c 	strh.w	r3, [sp, #28]
    91a2:	e01a      	b.n	91da <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    91a4:	9b05      	ldr	r3, [sp, #20]
    91a6:	881a      	ldrh	r2, [r3, #0]
    91a8:	9b02      	ldr	r3, [sp, #8]
    91aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91ac:	8999      	ldrh	r1, [r3, #12]
    91ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    91b2:	3b01      	subs	r3, #1
    91b4:	b29b      	uxth	r3, r3
    91b6:	fb11 f303 	smulbb	r3, r1, r3
    91ba:	b29b      	uxth	r3, r3
    91bc:	4413      	add	r3, r2
    91be:	f8ad 301c 	strh.w	r3, [sp, #28]
    91c2:	e00a      	b.n	91da <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    91c4:	9b02      	ldr	r3, [sp, #8]
    91c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91c8:	899a      	ldrh	r2, [r3, #12]
    91ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    91ce:	3b01      	subs	r3, #1
    91d0:	b29b      	uxth	r3, r3
    91d2:	fb12 f303 	smulbb	r3, r2, r3
    91d6:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    91da:	f89d 301b 	ldrb.w	r3, [sp, #27]
    91de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    91e2:	4611      	mov	r1, r2
    91e4:	4618      	mov	r0, r3
    91e6:	f001 faa5 	bl	a734 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    91ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
    91ee:	4618      	mov	r0, r3
    91f0:	f001 fa88 	bl	a704 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    91f4:	2300      	movs	r3, #0
    91f6:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    91fa:	2300      	movs	r3, #0
    91fc:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9200:	2300      	movs	r3, #0
    9202:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9206:	e00c      	b.n	9222 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9208:	f89d 301b 	ldrb.w	r3, [sp, #27]
    920c:	aa04      	add	r2, sp, #16
    920e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9212:	4618      	mov	r0, r3
    9214:	f001 fab2 	bl	a77c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9218:	f89d 301f 	ldrb.w	r3, [sp, #31]
    921c:	3301      	adds	r3, #1
    921e:	f88d 301f 	strb.w	r3, [sp, #31]
    9222:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9226:	2b01      	cmp	r3, #1
    9228:	d9ee      	bls.n	9208 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    922a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    922e:	4912      	ldr	r1, [pc, #72]	; (9278 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9230:	4613      	mov	r3, r2
    9232:	009b      	lsls	r3, r3, #2
    9234:	4413      	add	r3, r2
    9236:	009b      	lsls	r3, r3, #2
    9238:	440b      	add	r3, r1
    923a:	3310      	adds	r3, #16
    923c:	7819      	ldrb	r1, [r3, #0]
    923e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9242:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9246:	440b      	add	r3, r1
    9248:	b2d8      	uxtb	r0, r3
    924a:	490b      	ldr	r1, [pc, #44]	; (9278 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    924c:	4613      	mov	r3, r2
    924e:	009b      	lsls	r3, r3, #2
    9250:	4413      	add	r3, r2
    9252:	009b      	lsls	r3, r3, #2
    9254:	440b      	add	r3, r1
    9256:	3310      	adds	r3, #16
    9258:	4602      	mov	r2, r0
    925a:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    925c:	9b01      	ldr	r3, [sp, #4]
    925e:	2b0f      	cmp	r3, #15
    9260:	d104      	bne.n	926c <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9262:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9266:	4618      	mov	r0, r3
    9268:	f001 fa24 	bl	a6b4 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    926c:	bf00      	nop
    926e:	b009      	add	sp, #36	; 0x24
    9270:	f85d fb04 	ldr.w	pc, [sp], #4
    9274:	1fff8ce8 	.word	0x1fff8ce8
    9278:	1fff8cec 	.word	0x1fff8cec

0000927c <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    927c:	b500      	push	{lr}
    927e:	b087      	sub	sp, #28
    9280:	4603      	mov	r3, r0
    9282:	f88d 3007 	strb.w	r3, [sp, #7]
    9286:	460b      	mov	r3, r1
    9288:	f8ad 3004 	strh.w	r3, [sp, #4]
    928c:	4613      	mov	r3, r2
    928e:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9292:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9296:	4a36      	ldr	r2, [pc, #216]	; (9370 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    929c:	68da      	ldr	r2, [r3, #12]
    929e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    92a2:	005b      	lsls	r3, r3, #1
    92a4:	4413      	add	r3, r2
    92a6:	881b      	ldrh	r3, [r3, #0]
    92a8:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    92ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    92b0:	4a2f      	ldr	r2, [pc, #188]	; (9370 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    92b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92b6:	681a      	ldr	r2, [r3, #0]
    92b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92bc:	4413      	add	r3, r2
    92be:	7c1b      	ldrb	r3, [r3, #16]
    92c0:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    92c4:	2300      	movs	r3, #0
    92c6:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    92ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    92ce:	4618      	mov	r0, r3
    92d0:	f001 fb6e 	bl	a9b0 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    92d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    92d8:	4a25      	ldr	r2, [pc, #148]	; (9370 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    92da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92de:	685a      	ldr	r2, [r3, #4]
    92e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    92e4:	2134      	movs	r1, #52	; 0x34
    92e6:	fb01 f303 	mul.w	r3, r1, r3
    92ea:	4413      	add	r3, r2
    92ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    92f0:	2b01      	cmp	r3, #1
    92f2:	d114      	bne.n	931e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    92f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    92f8:	4a1d      	ldr	r2, [pc, #116]	; (9370 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    92fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92fe:	685a      	ldr	r2, [r3, #4]
    9300:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9304:	2134      	movs	r1, #52	; 0x34
    9306:	fb01 f303 	mul.w	r3, r1, r3
    930a:	4413      	add	r3, r2
    930c:	689b      	ldr	r3, [r3, #8]
    930e:	2b01      	cmp	r3, #1
    9310:	d105      	bne.n	931e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    9312:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9316:	2100      	movs	r1, #0
    9318:	4618      	mov	r0, r3
    931a:	f7ff f827 	bl	836c <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    931e:	2300      	movs	r3, #0
    9320:	f88d 3016 	strb.w	r3, [sp, #22]
    9324:	e013      	b.n	934e <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    9326:	f89d 3013 	ldrb.w	r3, [sp, #19]
    932a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    932e:	2201      	movs	r2, #1
    9330:	4618      	mov	r0, r3
    9332:	f7ff f8cd 	bl	84d0 <Adc_Ip_SetDisabledChannel>
    9336:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    9338:	9b03      	ldr	r3, [sp, #12]
    933a:	2b02      	cmp	r3, #2
    933c:	d102      	bne.n	9344 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    933e:	2301      	movs	r3, #1
    9340:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9344:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9348:	3301      	adds	r3, #1
    934a:	f88d 3016 	strb.w	r3, [sp, #22]
    934e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9352:	4a08      	ldr	r2, [pc, #32]	; (9374 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    9354:	00db      	lsls	r3, r3, #3
    9356:	4413      	add	r3, r2
    9358:	799b      	ldrb	r3, [r3, #6]
    935a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    935e:	429a      	cmp	r2, r3
    9360:	d3e1      	bcc.n	9326 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    9362:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9366:	4618      	mov	r0, r3
    9368:	b007      	add	sp, #28
    936a:	f85d fb04 	ldr.w	pc, [sp], #4
    936e:	bf00      	nop
    9370:	1fff8ce8 	.word	0x1fff8ce8
    9374:	1fff8d00 	.word	0x1fff8d00

00009378 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9378:	b500      	push	{lr}
    937a:	b085      	sub	sp, #20
    937c:	4603      	mov	r3, r0
    937e:	9100      	str	r1, [sp, #0]
    9380:	f88d 3007 	strb.w	r3, [sp, #7]
    9384:	4613      	mov	r3, r2
    9386:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    938a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    938e:	4a14      	ldr	r2, [pc, #80]	; (93e0 <Adc_Ipw_PrepareGroupStart+0x68>)
    9390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9394:	681a      	ldr	r2, [r3, #0]
    9396:	f89d 3007 	ldrb.w	r3, [sp, #7]
    939a:	4413      	add	r3, r2
    939c:	7c1b      	ldrb	r3, [r3, #16]
    939e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    93a2:	9b00      	ldr	r3, [sp, #0]
    93a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93a6:	781b      	ldrb	r3, [r3, #0]
    93a8:	2b01      	cmp	r3, #1
    93aa:	d108      	bne.n	93be <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    93ac:	f89d 000f 	ldrb.w	r0, [sp, #15]
    93b0:	9b00      	ldr	r3, [sp, #0]
    93b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93b4:	685b      	ldr	r3, [r3, #4]
    93b6:	461a      	mov	r2, r3
    93b8:	2101      	movs	r1, #1
    93ba:	f7fe ff51 	bl	8260 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    93be:	9b00      	ldr	r3, [sp, #0]
    93c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93c2:	7a1b      	ldrb	r3, [r3, #8]
    93c4:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    93c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    93cc:	f89d 200e 	ldrb.w	r2, [sp, #14]
    93d0:	4611      	mov	r1, r2
    93d2:	4618      	mov	r0, r3
    93d4:	f7fe ff62 	bl	829c <Adc_Ip_SetSampleTime>
}
    93d8:	bf00      	nop
    93da:	b005      	add	sp, #20
    93dc:	f85d fb04 	ldr.w	pc, [sp], #4
    93e0:	1fff8ce8 	.word	0x1fff8ce8

000093e4 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    93e4:	b084      	sub	sp, #16
    93e6:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    93e8:	2300      	movs	r3, #0
    93ea:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    93ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    93f2:	4618      	mov	r0, r3
    93f4:	b004      	add	sp, #16
    93f6:	4770      	bx	lr

000093f8 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    93f8:	b500      	push	{lr}
    93fa:	b08f      	sub	sp, #60	; 0x3c
    93fc:	9202      	str	r2, [sp, #8]
    93fe:	461a      	mov	r2, r3
    9400:	4603      	mov	r3, r0
    9402:	f88d 300f 	strb.w	r3, [sp, #15]
    9406:	460b      	mov	r3, r1
    9408:	f8ad 300c 	strh.w	r3, [sp, #12]
    940c:	4613      	mov	r3, r2
    940e:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9412:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9416:	4a6d      	ldr	r2, [pc, #436]	; (95cc <Adc_Ipw_ConfigureConversion+0x1d4>)
    9418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    941c:	68da      	ldr	r2, [r3, #12]
    941e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9422:	005b      	lsls	r3, r3, #1
    9424:	4413      	add	r3, r2
    9426:	881b      	ldrh	r3, [r3, #0]
    9428:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    942c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9430:	4a66      	ldr	r2, [pc, #408]	; (95cc <Adc_Ipw_ConfigureConversion+0x1d4>)
    9432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9436:	685a      	ldr	r2, [r3, #4]
    9438:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    943c:	2134      	movs	r1, #52	; 0x34
    943e:	fb01 f303 	mul.w	r3, r1, r3
    9442:	4413      	add	r3, r2
    9444:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9446:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    944a:	4a60      	ldr	r2, [pc, #384]	; (95cc <Adc_Ipw_ConfigureConversion+0x1d4>)
    944c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9450:	681a      	ldr	r2, [r3, #0]
    9452:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9456:	4413      	add	r3, r2
    9458:	7c1b      	ldrb	r3, [r3, #16]
    945a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    945e:	2300      	movs	r3, #0
    9460:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9462:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9466:	495a      	ldr	r1, [pc, #360]	; (95d0 <Adc_Ipw_ConfigureConversion+0x1d8>)
    9468:	4613      	mov	r3, r2
    946a:	009b      	lsls	r3, r3, #2
    946c:	4413      	add	r3, r2
    946e:	009b      	lsls	r3, r3, #2
    9470:	440b      	add	r3, r1
    9472:	3310      	adds	r3, #16
    9474:	781b      	ldrb	r3, [r3, #0]
    9476:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    947a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    947c:	6a1b      	ldr	r3, [r3, #32]
    947e:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9480:	2300      	movs	r3, #0
    9482:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9486:	e030      	b.n	94ea <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9488:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    948c:	4a4f      	ldr	r2, [pc, #316]	; (95cc <Adc_Ipw_ConfigureConversion+0x1d4>)
    948e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9492:	681b      	ldr	r3, [r3, #0]
    9494:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    949c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    949e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    94a2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    94a6:	440b      	add	r3, r1
    94a8:	005b      	lsls	r3, r3, #1
    94aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    94ac:	440b      	add	r3, r1
    94ae:	881b      	ldrh	r3, [r3, #0]
    94b0:	4619      	mov	r1, r3
    94b2:	460b      	mov	r3, r1
    94b4:	005b      	lsls	r3, r3, #1
    94b6:	440b      	add	r3, r1
    94b8:	009b      	lsls	r3, r3, #2
    94ba:	4413      	add	r3, r2
    94bc:	685b      	ldr	r3, [r3, #4]
    94be:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    94c0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    94c4:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    94c8:	9b08      	ldr	r3, [sp, #32]
    94ca:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    94cc:	2300      	movs	r3, #0
    94ce:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    94d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    94d6:	aa05      	add	r2, sp, #20
    94d8:	4611      	mov	r1, r2
    94da:	4618      	mov	r0, r3
    94dc:	f7fe ffc8 	bl	8470 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    94e0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    94e4:	3301      	adds	r3, #1
    94e6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    94ea:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    94ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    94f2:	3b01      	subs	r3, #1
    94f4:	429a      	cmp	r2, r3
    94f6:	d3c7      	bcc.n	9488 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    94f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94fc:	4a33      	ldr	r2, [pc, #204]	; (95cc <Adc_Ipw_ConfigureConversion+0x1d4>)
    94fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9502:	681b      	ldr	r3, [r3, #0]
    9504:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    950c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    950e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9512:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9516:	440b      	add	r3, r1
    9518:	005b      	lsls	r3, r3, #1
    951a:	990a      	ldr	r1, [sp, #40]	; 0x28
    951c:	440b      	add	r3, r1
    951e:	881b      	ldrh	r3, [r3, #0]
    9520:	4619      	mov	r1, r3
    9522:	460b      	mov	r3, r1
    9524:	005b      	lsls	r3, r3, #1
    9526:	440b      	add	r3, r1
    9528:	009b      	lsls	r3, r3, #2
    952a:	4413      	add	r3, r2
    952c:	685b      	ldr	r3, [r3, #4]
    952e:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    9530:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9534:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9538:	9b08      	ldr	r3, [sp, #32]
    953a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    953c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    953e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9542:	2b00      	cmp	r3, #0
    9544:	d103      	bne.n	954e <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9546:	2301      	movs	r3, #1
    9548:	f88d 301c 	strb.w	r3, [sp, #28]
    954c:	e002      	b.n	9554 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    954e:	2300      	movs	r3, #0
    9550:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9554:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9558:	aa05      	add	r2, sp, #20
    955a:	4611      	mov	r1, r2
    955c:	4618      	mov	r0, r3
    955e:	f7fe ff87 	bl	8470 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9562:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9566:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    956a:	e014      	b.n	9596 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    956c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9570:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9574:	231f      	movs	r3, #31
    9576:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9578:	2300      	movs	r3, #0
    957a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    957e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9582:	aa05      	add	r2, sp, #20
    9584:	4611      	mov	r1, r2
    9586:	4618      	mov	r0, r3
    9588:	f7fe ff72 	bl	8470 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    958c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9590:	3301      	adds	r3, #1
    9592:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9596:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    959a:	2b0f      	cmp	r3, #15
    959c:	d9e6      	bls.n	956c <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    959e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    95a2:	4a0c      	ldr	r2, [pc, #48]	; (95d4 <Adc_Ipw_ConfigureConversion+0x1dc>)
    95a4:	00db      	lsls	r3, r3, #3
    95a6:	4413      	add	r3, r2
    95a8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    95ac:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    95ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    95b2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    95b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    95ba:	9300      	str	r3, [sp, #0]
    95bc:	9b02      	ldr	r3, [sp, #8]
    95be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    95c0:	f7ff fd86 	bl	90d0 <Adc_Ipw_ConfigurePdbConversion>
}
    95c4:	bf00      	nop
    95c6:	b00f      	add	sp, #60	; 0x3c
    95c8:	f85d fb04 	ldr.w	pc, [sp], #4
    95cc:	1fff8ce8 	.word	0x1fff8ce8
    95d0:	1fff8cec 	.word	0x1fff8cec
    95d4:	1fff8d00 	.word	0x1fff8d00

000095d8 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    95d8:	b500      	push	{lr}
    95da:	b085      	sub	sp, #20
    95dc:	9001      	str	r0, [sp, #4]
    95de:	460b      	mov	r3, r1
    95e0:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    95e4:	2300      	movs	r3, #0
    95e6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    95ea:	2300      	movs	r3, #0
    95ec:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    95f0:	2300      	movs	r3, #0
    95f2:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    95f6:	2300      	movs	r3, #0
    95f8:	f88d 300f 	strb.w	r3, [sp, #15]
    95fc:	e027      	b.n	964e <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    95fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9602:	9a01      	ldr	r2, [sp, #4]
    9604:	4413      	add	r3, r2
    9606:	7f9b      	ldrb	r3, [r3, #30]
    9608:	2b01      	cmp	r3, #1
    960a:	d11b      	bne.n	9644 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    960c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9610:	9a01      	ldr	r2, [sp, #4]
    9612:	4413      	add	r3, r2
    9614:	7c1b      	ldrb	r3, [r3, #16]
    9616:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    961a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    961e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9622:	9b01      	ldr	r3, [sp, #4]
    9624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9628:	4619      	mov	r1, r3
    962a:	f7fe fcb8 	bl	7f9e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    962e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9632:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9636:	9b01      	ldr	r3, [sp, #4]
    9638:	3202      	adds	r2, #2
    963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    963e:	4619      	mov	r1, r3
    9640:	f000 fe9d 	bl	a37e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9644:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9648:	3301      	adds	r3, #1
    964a:	f88d 300f 	strb.w	r3, [sp, #15]
    964e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9652:	2b00      	cmp	r3, #0
    9654:	d0d3      	beq.n	95fe <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    9656:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    965a:	4618      	mov	r0, r3
    965c:	b005      	add	sp, #20
    965e:	f85d fb04 	ldr.w	pc, [sp], #4

00009662 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    9662:	b500      	push	{lr}
    9664:	b087      	sub	sp, #28
    9666:	4603      	mov	r3, r0
    9668:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    966c:	2300      	movs	r3, #0
    966e:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9672:	2300      	movs	r3, #0
    9674:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    9678:	2300      	movs	r3, #0
    967a:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    967e:	2300      	movs	r3, #0
    9680:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    9684:	2300      	movs	r3, #0
    9686:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    968a:	2300      	movs	r3, #0
    968c:	f88d 3017 	strb.w	r3, [sp, #23]
    9690:	e026      	b.n	96e0 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9696:	4a2e      	ldr	r2, [pc, #184]	; (9750 <Adc_Ipw_DeInit+0xee>)
    9698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    969c:	681a      	ldr	r2, [r3, #0]
    969e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    96a2:	4413      	add	r3, r2
    96a4:	7f9b      	ldrb	r3, [r3, #30]
    96a6:	2b01      	cmp	r3, #1
    96a8:	d115      	bne.n	96d6 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    96aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96ae:	4a28      	ldr	r2, [pc, #160]	; (9750 <Adc_Ipw_DeInit+0xee>)
    96b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b4:	681a      	ldr	r2, [r3, #0]
    96b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    96ba:	4413      	add	r3, r2
    96bc:	7c1b      	ldrb	r3, [r3, #16]
    96be:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    96c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    96c6:	4618      	mov	r0, r3
    96c8:	f7fe fd40 	bl	814c <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    96cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    96d0:	4618      	mov	r0, r3
    96d2:	f000 fefd 	bl	a4d0 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    96da:	3301      	adds	r3, #1
    96dc:	f88d 3017 	strb.w	r3, [sp, #23]
    96e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d0d4      	beq.n	9692 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    96e8:	2300      	movs	r3, #0
    96ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    96ee:	e01e      	b.n	972e <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    96f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96f4:	4a16      	ldr	r2, [pc, #88]	; (9750 <Adc_Ipw_DeInit+0xee>)
    96f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96fa:	685a      	ldr	r2, [r3, #4]
    96fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9700:	2134      	movs	r1, #52	; 0x34
    9702:	fb01 f303 	mul.w	r3, r1, r3
    9706:	4413      	add	r3, r2
    9708:	881b      	ldrh	r3, [r3, #0]
    970a:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    970e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9712:	4910      	ldr	r1, [pc, #64]	; (9754 <Adc_Ipw_DeInit+0xf2>)
    9714:	4613      	mov	r3, r2
    9716:	009b      	lsls	r3, r3, #2
    9718:	4413      	add	r3, r2
    971a:	009b      	lsls	r3, r3, #2
    971c:	440b      	add	r3, r1
    971e:	330c      	adds	r3, #12
    9720:	2200      	movs	r2, #0
    9722:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9724:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9728:	3301      	adds	r3, #1
    972a:	f8ad 3014 	strh.w	r3, [sp, #20]
    972e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9732:	4a07      	ldr	r2, [pc, #28]	; (9750 <Adc_Ipw_DeInit+0xee>)
    9734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9738:	891b      	ldrh	r3, [r3, #8]
    973a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    973e:	429a      	cmp	r2, r3
    9740:	d3d6      	bcc.n	96f0 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    9742:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9746:	4618      	mov	r0, r3
    9748:	b007      	add	sp, #28
    974a:	f85d fb04 	ldr.w	pc, [sp], #4
    974e:	bf00      	nop
    9750:	1fff8ce8 	.word	0x1fff8ce8
    9754:	1fff8cec 	.word	0x1fff8cec

00009758 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9758:	b500      	push	{lr}
    975a:	b089      	sub	sp, #36	; 0x24
    975c:	4603      	mov	r3, r0
    975e:	460a      	mov	r2, r1
    9760:	f88d 300f 	strb.w	r3, [sp, #15]
    9764:	4613      	mov	r3, r2
    9766:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    976a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    976e:	4a4c      	ldr	r2, [pc, #304]	; (98a0 <Adc_Ipw_StartNormalConversion+0x148>)
    9770:	00db      	lsls	r3, r3, #3
    9772:	4413      	add	r3, r2
    9774:	885b      	ldrh	r3, [r3, #2]
    9776:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    977a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    977e:	4a49      	ldr	r2, [pc, #292]	; (98a4 <Adc_Ipw_StartNormalConversion+0x14c>)
    9780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9784:	68da      	ldr	r2, [r3, #12]
    9786:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    978a:	005b      	lsls	r3, r3, #1
    978c:	4413      	add	r3, r2
    978e:	881b      	ldrh	r3, [r3, #0]
    9790:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9794:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9798:	4a42      	ldr	r2, [pc, #264]	; (98a4 <Adc_Ipw_StartNormalConversion+0x14c>)
    979a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    979e:	685a      	ldr	r2, [r3, #4]
    97a0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    97a4:	2134      	movs	r1, #52	; 0x34
    97a6:	fb01 f303 	mul.w	r3, r1, r3
    97aa:	4413      	add	r3, r2
    97ac:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    97ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    97b2:	4a3c      	ldr	r2, [pc, #240]	; (98a4 <Adc_Ipw_StartNormalConversion+0x14c>)
    97b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b8:	681a      	ldr	r2, [r3, #0]
    97ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97be:	4413      	add	r3, r2
    97c0:	7c1b      	ldrb	r3, [r3, #16]
    97c2:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    97c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97ca:	4a35      	ldr	r2, [pc, #212]	; (98a0 <Adc_Ipw_StartNormalConversion+0x148>)
    97cc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    97d0:	b29b      	uxth	r3, r3
    97d2:	2b00      	cmp	r3, #0
    97d4:	d05f      	beq.n	9896 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    97d6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    97da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97de:	9905      	ldr	r1, [sp, #20]
    97e0:	4618      	mov	r0, r3
    97e2:	f7ff fdc9 	bl	9378 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    97e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    97ea:	492f      	ldr	r1, [pc, #188]	; (98a8 <Adc_Ipw_StartNormalConversion+0x150>)
    97ec:	4613      	mov	r3, r2
    97ee:	009b      	lsls	r3, r3, #2
    97f0:	4413      	add	r3, r2
    97f2:	009b      	lsls	r3, r3, #2
    97f4:	440b      	add	r3, r1
    97f6:	3310      	adds	r3, #16
    97f8:	2200      	movs	r2, #0
    97fa:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    97fc:	9b05      	ldr	r3, [sp, #20]
    97fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9802:	2b0f      	cmp	r3, #15
    9804:	d806      	bhi.n	9814 <Adc_Ipw_StartNormalConversion+0xbc>
    9806:	9b05      	ldr	r3, [sp, #20]
    9808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    980c:	f003 030f 	and.w	r3, r3, #15
    9810:	b2db      	uxtb	r3, r3
    9812:	e000      	b.n	9816 <Adc_Ipw_StartNormalConversion+0xbe>
    9814:	2310      	movs	r3, #16
    9816:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    981a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    981e:	4a20      	ldr	r2, [pc, #128]	; (98a0 <Adc_Ipw_StartNormalConversion+0x148>)
    9820:	00db      	lsls	r3, r3, #3
    9822:	4413      	add	r3, r2
    9824:	799b      	ldrb	r3, [r3, #6]
    9826:	2b00      	cmp	r3, #0
    9828:	d107      	bne.n	983a <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    982a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    982e:	4a1c      	ldr	r2, [pc, #112]	; (98a0 <Adc_Ipw_StartNormalConversion+0x148>)
    9830:	00db      	lsls	r3, r3, #3
    9832:	4413      	add	r3, r2
    9834:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9838:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    983a:	2300      	movs	r3, #0
    983c:	f88d 301f 	strb.w	r3, [sp, #31]
    9840:	e00c      	b.n	985c <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9842:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9846:	f89d 201f 	ldrb.w	r2, [sp, #31]
    984a:	4611      	mov	r1, r2
    984c:	4618      	mov	r0, r3
    984e:	f7fe ff03 	bl	8658 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9852:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9856:	3301      	adds	r3, #1
    9858:	f88d 301f 	strb.w	r3, [sp, #31]
    985c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9860:	4a0f      	ldr	r2, [pc, #60]	; (98a0 <Adc_Ipw_StartNormalConversion+0x148>)
    9862:	00db      	lsls	r3, r3, #3
    9864:	4413      	add	r3, r2
    9866:	799b      	ldrb	r3, [r3, #6]
    9868:	f89d 201f 	ldrb.w	r2, [sp, #31]
    986c:	429a      	cmp	r2, r3
    986e:	d3e8      	bcc.n	9842 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    9870:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9874:	2101      	movs	r1, #1
    9876:	4618      	mov	r0, r3
    9878:	f7fe fd60 	bl	833c <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    987c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9880:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9884:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9888:	f89d 300e 	ldrb.w	r3, [sp, #14]
    988c:	9300      	str	r3, [sp, #0]
    988e:	4613      	mov	r3, r2
    9890:	220f      	movs	r2, #15
    9892:	f7ff fdb1 	bl	93f8 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9896:	bf00      	nop
    9898:	b009      	add	sp, #36	; 0x24
    989a:	f85d fb04 	ldr.w	pc, [sp], #4
    989e:	bf00      	nop
    98a0:	1fff8d00 	.word	0x1fff8d00
    98a4:	1fff8ce8 	.word	0x1fff8ce8
    98a8:	1fff8cec 	.word	0x1fff8cec

000098ac <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    98ac:	b500      	push	{lr}
    98ae:	b085      	sub	sp, #20
    98b0:	4603      	mov	r3, r0
    98b2:	f88d 3007 	strb.w	r3, [sp, #7]
    98b6:	460b      	mov	r3, r1
    98b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    98bc:	4613      	mov	r3, r2
    98be:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    98c2:	2300      	movs	r3, #0
    98c4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    98c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98cc:	4a24      	ldr	r2, [pc, #144]	; (9960 <Adc_Ipw_StopCurrentConversion+0xb4>)
    98ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d2:	681a      	ldr	r2, [r3, #0]
    98d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    98d8:	4413      	add	r3, r2
    98da:	7c1b      	ldrb	r3, [r3, #16]
    98dc:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98e0:	2300      	movs	r3, #0
    98e2:	f88d 300f 	strb.w	r3, [sp, #15]
    98e6:	e014      	b.n	9912 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    98e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    98ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
    98f0:	2200      	movs	r2, #0
    98f2:	4618      	mov	r0, r3
    98f4:	f7fe fdec 	bl	84d0 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    98f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    98fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9900:	4611      	mov	r1, r2
    9902:	4618      	mov	r0, r3
    9904:	f7fe fea8 	bl	8658 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9908:	f89d 300f 	ldrb.w	r3, [sp, #15]
    990c:	3301      	adds	r3, #1
    990e:	f88d 300f 	strb.w	r3, [sp, #15]
    9912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9916:	4a13      	ldr	r2, [pc, #76]	; (9964 <Adc_Ipw_StopCurrentConversion+0xb8>)
    9918:	00db      	lsls	r3, r3, #3
    991a:	4413      	add	r3, r2
    991c:	799b      	ldrb	r3, [r3, #6]
    991e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9922:	429a      	cmp	r2, r3
    9924:	d3e0      	bcc.n	98e8 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9926:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    992a:	490f      	ldr	r1, [pc, #60]	; (9968 <Adc_Ipw_StopCurrentConversion+0xbc>)
    992c:	4613      	mov	r3, r2
    992e:	009b      	lsls	r3, r3, #2
    9930:	4413      	add	r3, r2
    9932:	009b      	lsls	r3, r3, #2
    9934:	440b      	add	r3, r1
    9936:	3310      	adds	r3, #16
    9938:	2200      	movs	r2, #0
    993a:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    993c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9940:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9944:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9948:	4618      	mov	r0, r3
    994a:	f7ff fc97 	bl	927c <Adc_Ipw_StopConversionCheckTimeout>
    994e:	4603      	mov	r3, r0
    9950:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9954:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9958:	4618      	mov	r0, r3
    995a:	b005      	add	sp, #20
    995c:	f85d fb04 	ldr.w	pc, [sp], #4
    9960:	1fff8ce8 	.word	0x1fff8ce8
    9964:	1fff8d00 	.word	0x1fff8d00
    9968:	1fff8cec 	.word	0x1fff8cec

0000996c <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    996c:	b500      	push	{lr}
    996e:	b085      	sub	sp, #20
    9970:	4603      	mov	r3, r0
    9972:	f88d 3007 	strb.w	r3, [sp, #7]
    9976:	460b      	mov	r3, r1
    9978:	f88d 3006 	strb.w	r3, [sp, #6]
    997c:	4613      	mov	r3, r2
    997e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9982:	2301      	movs	r3, #1
    9984:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9988:	f89d 3006 	ldrb.w	r3, [sp, #6]
    998c:	f88d 300f 	strb.w	r3, [sp, #15]
    9990:	e019      	b.n	99c6 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9992:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9996:	f89d 200f 	ldrb.w	r2, [sp, #15]
    999a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    999e:	1ad3      	subs	r3, r2, r3
    99a0:	b2db      	uxtb	r3, r3
    99a2:	4619      	mov	r1, r3
    99a4:	f7fe fe3e 	bl	8624 <Adc_Ip_GetConvCompleteFlag>
    99a8:	4603      	mov	r3, r0
    99aa:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    99ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    99b2:	f083 0301 	eor.w	r3, r3, #1
    99b6:	b2db      	uxtb	r3, r3
    99b8:	2b00      	cmp	r3, #0
    99ba:	d10b      	bne.n	99d4 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    99bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99c0:	3301      	adds	r3, #1
    99c2:	f88d 300f 	strb.w	r3, [sp, #15]
    99c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    99ce:	429a      	cmp	r2, r3
    99d0:	d3df      	bcc.n	9992 <Adc_Ipw_CheckValidConversion+0x26>
    99d2:	e000      	b.n	99d6 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    99d4:	bf00      	nop
        }
    }

    return ValidConversion;
    99d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    99da:	4618      	mov	r0, r3
    99dc:	b005      	add	sp, #20
    99de:	f85d fb04 	ldr.w	pc, [sp], #4

000099e2 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    99e2:	b500      	push	{lr}
    99e4:	b089      	sub	sp, #36	; 0x24
    99e6:	9102      	str	r1, [sp, #8]
    99e8:	9201      	str	r2, [sp, #4]
    99ea:	461a      	mov	r2, r3
    99ec:	4603      	mov	r3, r0
    99ee:	f8ad 300e 	strh.w	r3, [sp, #14]
    99f2:	4613      	mov	r3, r2
    99f4:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    99f8:	2300      	movs	r3, #0
    99fa:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    99fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a02:	4a33      	ldr	r2, [pc, #204]	; (9ad0 <Adc_Ipw_ReadGroup+0xee>)
    9a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a08:	68da      	ldr	r2, [r3, #12]
    9a0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a0e:	005b      	lsls	r3, r3, #1
    9a10:	4413      	add	r3, r2
    9a12:	881b      	ldrh	r3, [r3, #0]
    9a14:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9a18:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a1c:	4a2c      	ldr	r2, [pc, #176]	; (9ad0 <Adc_Ipw_ReadGroup+0xee>)
    9a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a22:	685a      	ldr	r2, [r3, #4]
    9a24:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9a28:	2134      	movs	r1, #52	; 0x34
    9a2a:	fb01 f303 	mul.w	r3, r1, r3
    9a2e:	4413      	add	r3, r2
    9a30:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9a32:	9b06      	ldr	r3, [sp, #24]
    9a34:	789b      	ldrb	r3, [r3, #2]
    9a36:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9a3a:	9b06      	ldr	r3, [sp, #24]
    9a3c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9a40:	2b01      	cmp	r3, #1
    9a42:	d124      	bne.n	9a8e <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9a44:	9b06      	ldr	r3, [sp, #24]
    9a46:	68db      	ldr	r3, [r3, #12]
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d111      	bne.n	9a70 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9a4c:	9b06      	ldr	r3, [sp, #24]
    9a4e:	695b      	ldr	r3, [r3, #20]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d10d      	bne.n	9a70 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9a54:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9a58:	4a1e      	ldr	r2, [pc, #120]	; (9ad4 <Adc_Ipw_ReadGroup+0xf2>)
    9a5a:	00db      	lsls	r3, r3, #3
    9a5c:	4413      	add	r3, r2
    9a5e:	885b      	ldrh	r3, [r3, #2]
    9a60:	b29b      	uxth	r3, r3
    9a62:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9a66:	429a      	cmp	r2, r3
    9a68:	d002      	beq.n	9a70 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9a6a:	2301      	movs	r3, #1
    9a6c:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9a70:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9a74:	2b00      	cmp	r3, #0
    9a76:	d124      	bne.n	9ac2 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9a78:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a7c:	9a01      	ldr	r2, [sp, #4]
    9a7e:	9902      	ldr	r1, [sp, #8]
    9a80:	9806      	ldr	r0, [sp, #24]
    9a82:	f7ff f91f 	bl	8cc4 <Adc_Ipw_ReadGroupNoInt>
    9a86:	4603      	mov	r3, r0
    9a88:	f88d 301f 	strb.w	r3, [sp, #31]
    9a8c:	e019      	b.n	9ac2 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9a8e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9a92:	4911      	ldr	r1, [pc, #68]	; (9ad8 <Adc_Ipw_ReadGroup+0xf6>)
    9a94:	4613      	mov	r3, r2
    9a96:	009b      	lsls	r3, r3, #2
    9a98:	4413      	add	r3, r2
    9a9a:	009b      	lsls	r3, r3, #2
    9a9c:	440b      	add	r3, r1
    9a9e:	681b      	ldr	r3, [r3, #0]
    9aa0:	2b01      	cmp	r3, #1
    9aa2:	d102      	bne.n	9aaa <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9aa4:	2301      	movs	r3, #1
    9aa6:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9aaa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d107      	bne.n	9ac2 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9ab2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9ab6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9aba:	9902      	ldr	r1, [sp, #8]
    9abc:	4618      	mov	r0, r3
    9abe:	f7ff f949 	bl	8d54 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9ac2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9ac6:	4618      	mov	r0, r3
    9ac8:	b009      	add	sp, #36	; 0x24
    9aca:	f85d fb04 	ldr.w	pc, [sp], #4
    9ace:	bf00      	nop
    9ad0:	1fff8ce8 	.word	0x1fff8ce8
    9ad4:	1fff8d00 	.word	0x1fff8d00
    9ad8:	1fff8cec 	.word	0x1fff8cec

00009adc <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9adc:	b500      	push	{lr}
    9ade:	b085      	sub	sp, #20
    9ae0:	4603      	mov	r3, r0
    9ae2:	9100      	str	r1, [sp, #0]
    9ae4:	f88d 3007 	strb.w	r3, [sp, #7]
    9ae8:	4613      	mov	r3, r2
    9aea:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9aee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9af2:	4a0e      	ldr	r2, [pc, #56]	; (9b2c <Adc_Ipw_Calibrate+0x50>)
    9af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af8:	681a      	ldr	r2, [r3, #0]
    9afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9afe:	4413      	add	r3, r2
    9b00:	7c1b      	ldrb	r3, [r3, #16]
    9b02:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9b06:	9b00      	ldr	r3, [sp, #0]
    9b08:	2200      	movs	r2, #0
    9b0a:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9b0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b10:	4618      	mov	r0, r3
    9b12:	f7fe fdb9 	bl	8688 <Adc_Ip_DoCalibration>
    9b16:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9b18:	9b02      	ldr	r3, [sp, #8]
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d002      	beq.n	9b24 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9b1e:	9b00      	ldr	r3, [sp, #0]
    9b20:	2201      	movs	r2, #1
    9b22:	701a      	strb	r2, [r3, #0]
    }
}
    9b24:	bf00      	nop
    9b26:	b005      	add	sp, #20
    9b28:	f85d fb04 	ldr.w	pc, [sp], #4
    9b2c:	1fff8ce8 	.word	0x1fff8ce8

00009b30 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9b30:	2300      	movs	r3, #0
}
    9b32:	4618      	mov	r0, r3
    9b34:	4770      	bx	lr
    9b36:	bf00      	nop

00009b38 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9b38:	b500      	push	{lr}
    9b3a:	b083      	sub	sp, #12
    9b3c:	4603      	mov	r3, r0
    9b3e:	460a      	mov	r2, r1
    9b40:	f88d 3007 	strb.w	r3, [sp, #7]
    9b44:	4613      	mov	r3, r2
    9b46:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b4e:	2100      	movs	r1, #0
    9b50:	4618      	mov	r0, r3
    9b52:	f7fe fff3 	bl	8b3c <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b5a:	4a09      	ldr	r2, [pc, #36]	; (9b80 <Adc_Ipw_UpdateQueue+0x48>)
    9b5c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9b60:	b29b      	uxth	r3, r3
    9b62:	2b00      	cmp	r3, #0
    9b64:	d007      	beq.n	9b76 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9b66:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9b6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b6e:	4611      	mov	r1, r2
    9b70:	4618      	mov	r0, r3
    9b72:	f7ff fdf1 	bl	9758 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9b76:	bf00      	nop
    9b78:	b003      	add	sp, #12
    9b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    9b7e:	bf00      	nop
    9b80:	1fff8d00 	.word	0x1fff8d00

00009b84 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9b84:	b510      	push	{r4, lr}
    9b86:	b08a      	sub	sp, #40	; 0x28
    9b88:	4604      	mov	r4, r0
    9b8a:	4608      	mov	r0, r1
    9b8c:	4611      	mov	r1, r2
    9b8e:	461a      	mov	r2, r3
    9b90:	4623      	mov	r3, r4
    9b92:	f88d 300f 	strb.w	r3, [sp, #15]
    9b96:	4603      	mov	r3, r0
    9b98:	f8ad 300c 	strh.w	r3, [sp, #12]
    9b9c:	460b      	mov	r3, r1
    9b9e:	f8ad 300a 	strh.w	r3, [sp, #10]
    9ba2:	4613      	mov	r3, r2
    9ba4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9ba8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9bac:	4a68      	ldr	r2, [pc, #416]	; (9d50 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bb2:	68da      	ldr	r2, [r3, #12]
    9bb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9bb8:	005b      	lsls	r3, r3, #1
    9bba:	4413      	add	r3, r2
    9bbc:	881b      	ldrh	r3, [r3, #0]
    9bbe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9bc2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9bc6:	4963      	ldr	r1, [pc, #396]	; (9d54 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9bc8:	4613      	mov	r3, r2
    9bca:	009b      	lsls	r3, r3, #2
    9bcc:	4413      	add	r3, r2
    9bce:	009b      	lsls	r3, r3, #2
    9bd0:	440b      	add	r3, r1
    9bd2:	3310      	adds	r3, #16
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9bda:	2300      	movs	r3, #0
    9bdc:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9bde:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9be2:	4a5b      	ldr	r2, [pc, #364]	; (9d50 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be8:	681a      	ldr	r2, [r3, #0]
    9bea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bee:	4413      	add	r3, r2
    9bf0:	7c1b      	ldrb	r3, [r3, #16]
    9bf2:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9bf6:	2300      	movs	r3, #0
    9bf8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9bfc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c00:	4a53      	ldr	r2, [pc, #332]	; (9d50 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c06:	681b      	ldr	r3, [r3, #0]
    9c08:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9c10:	695b      	ldr	r3, [r3, #20]
    9c12:	4618      	mov	r0, r3
    9c14:	f7ff fbe6 	bl	93e4 <Adc_Ipw_CalculateNumsBitShift>
    9c18:	4603      	mov	r3, r0
    9c1a:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9c1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c22:	4a4b      	ldr	r2, [pc, #300]	; (9d50 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c28:	685a      	ldr	r2, [r3, #4]
    9c2a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c2e:	2134      	movs	r1, #52	; 0x34
    9c30:	fb01 f303 	mul.w	r3, r1, r3
    9c34:	4413      	add	r3, r2
    9c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9c3a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9c3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c42:	4a43      	ldr	r2, [pc, #268]	; (9d50 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c48:	685a      	ldr	r2, [r3, #4]
    9c4a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c4e:	2134      	movs	r1, #52	; 0x34
    9c50:	fb01 f303 	mul.w	r3, r1, r3
    9c54:	4413      	add	r3, r2
    9c56:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9c58:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9c5c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9c60:	429a      	cmp	r2, r3
    9c62:	d870      	bhi.n	9d46 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9c64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9c68:	f003 030f 	and.w	r3, r3, #15
    9c6c:	b2db      	uxtb	r3, r3
    9c6e:	2b00      	cmp	r3, #0
    9c70:	d104      	bne.n	9c7c <Adc_Ipw_CheckConversionChannels+0xf8>
    9c72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9c76:	3b10      	subs	r3, #16
    9c78:	b2db      	uxtb	r3, r3
    9c7a:	e004      	b.n	9c86 <Adc_Ipw_CheckConversionChannels+0x102>
    9c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9c80:	f023 030f 	bic.w	r3, r3, #15
    9c84:	b2db      	uxtb	r3, r3
    9c86:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9c8a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9c8e:	4931      	ldr	r1, [pc, #196]	; (9d54 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9c90:	4613      	mov	r3, r2
    9c92:	009b      	lsls	r3, r3, #2
    9c94:	4413      	add	r3, r2
    9c96:	009b      	lsls	r3, r3, #2
    9c98:	440b      	add	r3, r1
    9c9a:	330c      	adds	r3, #12
    9c9c:	6819      	ldr	r1, [r3, #0]
    9c9e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9ca2:	482c      	ldr	r0, [pc, #176]	; (9d54 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9ca4:	4613      	mov	r3, r2
    9ca6:	009b      	lsls	r3, r3, #2
    9ca8:	4413      	add	r3, r2
    9caa:	009b      	lsls	r3, r3, #2
    9cac:	4403      	add	r3, r0
    9cae:	3308      	adds	r3, #8
    9cb0:	881b      	ldrh	r3, [r3, #0]
    9cb2:	b29b      	uxth	r3, r3
    9cb4:	005b      	lsls	r3, r3, #1
    9cb6:	440b      	add	r3, r1
    9cb8:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9cba:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9cbe:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9cc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9cc6:	4618      	mov	r0, r3
    9cc8:	f7ff fe50 	bl	996c <Adc_Ipw_CheckValidConversion>
    9ccc:	4603      	mov	r3, r0
    9cce:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9cd2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	d032      	beq.n	9d40 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9cda:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9cde:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9ce2:	e026      	b.n	9d32 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    9ce4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    9ce8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9cec:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9cf0:	1ad3      	subs	r3, r2, r3
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	4619      	mov	r1, r3
    9cf6:	f7fe fcaf 	bl	8658 <Adc_Ip_GetConvData>
    9cfa:	4603      	mov	r3, r0
    9cfc:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    9d00:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d04:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9d08:	fa02 f303 	lsl.w	r3, r2, r3
    9d0c:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    9d10:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9d14:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    9d18:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9d1c:	9300      	str	r3, [sp, #0]
    9d1e:	460b      	mov	r3, r1
    9d20:	9907      	ldr	r1, [sp, #28]
    9d22:	9805      	ldr	r0, [sp, #20]
    9d24:	f000 fa02 	bl	a12c <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    9d28:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9d2c:	3301      	adds	r3, #1
    9d2e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9d32:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9d36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d3a:	429a      	cmp	r2, r3
    9d3c:	d3d2      	bcc.n	9ce4 <Adc_Ipw_CheckConversionChannels+0x160>
    9d3e:	e002      	b.n	9d46 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    9d40:	2301      	movs	r3, #1
    9d42:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    9d46:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    9d4a:	4618      	mov	r0, r3
    9d4c:	b00a      	add	sp, #40	; 0x28
    9d4e:	bd10      	pop	{r4, pc}
    9d50:	1fff8ce8 	.word	0x1fff8ce8
    9d54:	1fff8cec 	.word	0x1fff8cec

00009d58 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9d58:	b500      	push	{lr}
    9d5a:	b087      	sub	sp, #28
    9d5c:	4603      	mov	r3, r0
    9d5e:	f88d 300f 	strb.w	r3, [sp, #15]
    9d62:	460b      	mov	r3, r1
    9d64:	f8ad 300c 	strh.w	r3, [sp, #12]
    9d68:	4613      	mov	r3, r2
    9d6a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9d6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d72:	4a33      	ldr	r2, [pc, #204]	; (9e40 <Adc_Ipw_RestartConversion+0xe8>)
    9d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d78:	68da      	ldr	r2, [r3, #12]
    9d7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9d7e:	005b      	lsls	r3, r3, #1
    9d80:	4413      	add	r3, r2
    9d82:	881b      	ldrh	r3, [r3, #0]
    9d84:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9d88:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d8c:	4a2c      	ldr	r2, [pc, #176]	; (9e40 <Adc_Ipw_RestartConversion+0xe8>)
    9d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d92:	681a      	ldr	r2, [r3, #0]
    9d94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d98:	4413      	add	r3, r2
    9d9a:	7c1b      	ldrb	r3, [r3, #16]
    9d9c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9da0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9da4:	4a26      	ldr	r2, [pc, #152]	; (9e40 <Adc_Ipw_RestartConversion+0xe8>)
    9da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9daa:	685a      	ldr	r2, [r3, #4]
    9dac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9db0:	2134      	movs	r1, #52	; 0x34
    9db2:	fb01 f303 	mul.w	r3, r1, r3
    9db6:	4413      	add	r3, r2
    9db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9dbc:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    9dc0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9dc4:	2b0f      	cmp	r3, #15
    9dc6:	d805      	bhi.n	9dd4 <Adc_Ipw_RestartConversion+0x7c>
    9dc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9dcc:	f003 030f 	and.w	r3, r3, #15
    9dd0:	b2db      	uxtb	r3, r3
    9dd2:	e000      	b.n	9dd6 <Adc_Ipw_RestartConversion+0x7e>
    9dd4:	2310      	movs	r3, #16
    9dd6:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    9dda:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9dde:	2b10      	cmp	r3, #16
    9de0:	d811      	bhi.n	9e06 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    9de2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9de6:	4917      	ldr	r1, [pc, #92]	; (9e44 <Adc_Ipw_RestartConversion+0xec>)
    9de8:	4613      	mov	r3, r2
    9dea:	009b      	lsls	r3, r3, #2
    9dec:	4413      	add	r3, r2
    9dee:	009b      	lsls	r3, r3, #2
    9df0:	440b      	add	r3, r1
    9df2:	3310      	adds	r3, #16
    9df4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    9df8:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9dfa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9dfe:	4618      	mov	r0, r3
    9e00:	f000 fc58 	bl	a6b4 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    9e04:	e017      	b.n	9e36 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9e06:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9e0a:	490e      	ldr	r1, [pc, #56]	; (9e44 <Adc_Ipw_RestartConversion+0xec>)
    9e0c:	4613      	mov	r3, r2
    9e0e:	009b      	lsls	r3, r3, #2
    9e10:	4413      	add	r3, r2
    9e12:	009b      	lsls	r3, r3, #2
    9e14:	440b      	add	r3, r1
    9e16:	3310      	adds	r3, #16
    9e18:	2200      	movs	r2, #0
    9e1a:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9e1c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9e20:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9e24:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9e28:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e2c:	9300      	str	r3, [sp, #0]
    9e2e:	4613      	mov	r3, r2
    9e30:	220f      	movs	r2, #15
    9e32:	f7ff fae1 	bl	93f8 <Adc_Ipw_ConfigureConversion>
}
    9e36:	bf00      	nop
    9e38:	b007      	add	sp, #28
    9e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e3e:	bf00      	nop
    9e40:	1fff8ce8 	.word	0x1fff8ce8
    9e44:	1fff8cec 	.word	0x1fff8cec

00009e48 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    9e48:	b084      	sub	sp, #16
    9e4a:	4603      	mov	r3, r0
    9e4c:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    9e50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e54:	4907      	ldr	r1, [pc, #28]	; (9e74 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    9e56:	4613      	mov	r3, r2
    9e58:	009b      	lsls	r3, r3, #2
    9e5a:	4413      	add	r3, r2
    9e5c:	009b      	lsls	r3, r3, #2
    9e5e:	440b      	add	r3, r1
    9e60:	3308      	adds	r3, #8
    9e62:	881b      	ldrh	r3, [r3, #0]
    9e64:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    9e68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    9e6c:	4618      	mov	r0, r3
    9e6e:	b004      	add	sp, #16
    9e70:	4770      	bx	lr
    9e72:	bf00      	nop
    9e74:	1fff8cec 	.word	0x1fff8cec

00009e78 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    9e78:	b510      	push	{r4, lr}
    9e7a:	b084      	sub	sp, #16
    9e7c:	4604      	mov	r4, r0
    9e7e:	4608      	mov	r0, r1
    9e80:	4611      	mov	r1, r2
    9e82:	461a      	mov	r2, r3
    9e84:	4623      	mov	r3, r4
    9e86:	f88d 3007 	strb.w	r3, [sp, #7]
    9e8a:	4603      	mov	r3, r0
    9e8c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9e90:	460b      	mov	r3, r1
    9e92:	f8ad 3002 	strh.w	r3, [sp, #2]
    9e96:	4613      	mov	r3, r2
    9e98:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ea0:	4a4f      	ldr	r2, [pc, #316]	; (9fe0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea6:	68da      	ldr	r2, [r3, #12]
    9ea8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9eac:	005b      	lsls	r3, r3, #1
    9eae:	4413      	add	r3, r2
    9eb0:	881b      	ldrh	r3, [r3, #0]
    9eb2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9eb6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9eba:	494a      	ldr	r1, [pc, #296]	; (9fe4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9ebc:	4613      	mov	r3, r2
    9ebe:	009b      	lsls	r3, r3, #2
    9ec0:	4413      	add	r3, r2
    9ec2:	009b      	lsls	r3, r3, #2
    9ec4:	440b      	add	r3, r1
    9ec6:	3304      	adds	r3, #4
    9ec8:	2201      	movs	r2, #1
    9eca:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9ecc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9ed0:	4944      	ldr	r1, [pc, #272]	; (9fe4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9ed2:	4613      	mov	r3, r2
    9ed4:	009b      	lsls	r3, r3, #2
    9ed6:	4413      	add	r3, r2
    9ed8:	009b      	lsls	r3, r3, #2
    9eda:	440b      	add	r3, r1
    9edc:	681b      	ldr	r3, [r3, #0]
    9ede:	2b01      	cmp	r3, #1
    9ee0:	d109      	bne.n	9ef6 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    9ee2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9ee6:	493f      	ldr	r1, [pc, #252]	; (9fe4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9ee8:	4613      	mov	r3, r2
    9eea:	009b      	lsls	r3, r3, #2
    9eec:	4413      	add	r3, r2
    9eee:	009b      	lsls	r3, r3, #2
    9ef0:	440b      	add	r3, r1
    9ef2:	2202      	movs	r2, #2
    9ef4:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    9ef6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9efa:	4618      	mov	r0, r3
    9efc:	f7ff ffa4 	bl	9e48 <Adc_Ipw_GetCurrentSampleCount>
    9f00:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    9f02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    9f06:	9a02      	ldr	r2, [sp, #8]
    9f08:	429a      	cmp	r2, r3
    9f0a:	d35d      	bcc.n	9fc8 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    9f0c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f10:	4934      	ldr	r1, [pc, #208]	; (9fe4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f12:	4613      	mov	r3, r2
    9f14:	009b      	lsls	r3, r3, #2
    9f16:	4413      	add	r3, r2
    9f18:	009b      	lsls	r3, r3, #2
    9f1a:	440b      	add	r3, r1
    9f1c:	2203      	movs	r2, #3
    9f1e:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    9f20:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f24:	4a2e      	ldr	r2, [pc, #184]	; (9fe0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f2a:	685a      	ldr	r2, [r3, #4]
    9f2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9f30:	2134      	movs	r1, #52	; 0x34
    9f32:	fb01 f303 	mul.w	r3, r1, r3
    9f36:	4413      	add	r3, r2
    9f38:	699b      	ldr	r3, [r3, #24]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d117      	bne.n	9f6e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    9f3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f42:	4a27      	ldr	r2, [pc, #156]	; (9fe0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f48:	685a      	ldr	r2, [r3, #4]
    9f4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9f4e:	2134      	movs	r1, #52	; 0x34
    9f50:	fb01 f303 	mul.w	r3, r1, r3
    9f54:	4413      	add	r3, r2
    9f56:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    9f58:	2b01      	cmp	r3, #1
    9f5a:	d108      	bne.n	9f6e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    9f5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f64:	4611      	mov	r1, r2
    9f66:	4618      	mov	r0, r3
    9f68:	f7ff fde6 	bl	9b38 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    9f6c:	e035      	b.n	9fda <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    9f6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f72:	4a1b      	ldr	r2, [pc, #108]	; (9fe0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f78:	685a      	ldr	r2, [r3, #4]
    9f7a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9f7e:	2134      	movs	r1, #52	; 0x34
    9f80:	fb01 f303 	mul.w	r3, r1, r3
    9f84:	4413      	add	r3, r2
    9f86:	689b      	ldr	r3, [r3, #8]
    9f88:	2b01      	cmp	r3, #1
    9f8a:	d114      	bne.n	9fb6 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    9f8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f90:	4914      	ldr	r1, [pc, #80]	; (9fe4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f92:	4613      	mov	r3, r2
    9f94:	009b      	lsls	r3, r3, #2
    9f96:	4413      	add	r3, r2
    9f98:	009b      	lsls	r3, r3, #2
    9f9a:	440b      	add	r3, r1
    9f9c:	3308      	adds	r3, #8
    9f9e:	2200      	movs	r2, #0
    9fa0:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    9fa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9fa6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fae:	4618      	mov	r0, r3
    9fb0:	f7ff fed2 	bl	9d58 <Adc_Ipw_RestartConversion>
}
    9fb4:	e011      	b.n	9fda <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    9fb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9fba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fbe:	4611      	mov	r1, r2
    9fc0:	4618      	mov	r0, r3
    9fc2:	f7ff fdb9 	bl	9b38 <Adc_Ipw_UpdateQueue>
}
    9fc6:	e008      	b.n	9fda <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    9fc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9fcc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9fd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fd4:	4618      	mov	r0, r3
    9fd6:	f7ff febf 	bl	9d58 <Adc_Ipw_RestartConversion>
}
    9fda:	bf00      	nop
    9fdc:	b004      	add	sp, #16
    9fde:	bd10      	pop	{r4, pc}
    9fe0:	1fff8ce8 	.word	0x1fff8ce8
    9fe4:	1fff8cec 	.word	0x1fff8cec

00009fe8 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    9fe8:	b510      	push	{r4, lr}
    9fea:	b088      	sub	sp, #32
    9fec:	4604      	mov	r4, r0
    9fee:	4608      	mov	r0, r1
    9ff0:	4611      	mov	r1, r2
    9ff2:	461a      	mov	r2, r3
    9ff4:	4623      	mov	r3, r4
    9ff6:	f88d 300f 	strb.w	r3, [sp, #15]
    9ffa:	4603      	mov	r3, r0
    9ffc:	f8ad 300c 	strh.w	r3, [sp, #12]
    a000:	460b      	mov	r3, r1
    a002:	f88d 300e 	strb.w	r3, [sp, #14]
    a006:	4613      	mov	r3, r2
    a008:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a00c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a010:	4a44      	ldr	r2, [pc, #272]	; (a124 <Adc_Ipw_EndConversion+0x13c>)
    a012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a016:	68da      	ldr	r2, [r3, #12]
    a018:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a01c:	005b      	lsls	r3, r3, #1
    a01e:	4413      	add	r3, r2
    a020:	881b      	ldrh	r3, [r3, #0]
    a022:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a026:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a02a:	4a3e      	ldr	r2, [pc, #248]	; (a124 <Adc_Ipw_EndConversion+0x13c>)
    a02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a030:	685a      	ldr	r2, [r3, #4]
    a032:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a036:	2134      	movs	r1, #52	; 0x34
    a038:	fb01 f303 	mul.w	r3, r1, r3
    a03c:	4413      	add	r3, r2
    a03e:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a040:	9b06      	ldr	r3, [sp, #24]
    a042:	8b9a      	ldrh	r2, [r3, #28]
    a044:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a048:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a04c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a050:	f7ff fd98 	bl	9b84 <Adc_Ipw_CheckConversionChannels>
    a054:	4603      	mov	r3, r0
    a056:	2b00      	cmp	r3, #0
    a058:	d160      	bne.n	a11c <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a05a:	9b06      	ldr	r3, [sp, #24]
    a05c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a060:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a064:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a068:	492f      	ldr	r1, [pc, #188]	; (a128 <Adc_Ipw_EndConversion+0x140>)
    a06a:	4613      	mov	r3, r2
    a06c:	009b      	lsls	r3, r3, #2
    a06e:	4413      	add	r3, r2
    a070:	009b      	lsls	r3, r3, #2
    a072:	440b      	add	r3, r1
    a074:	3310      	adds	r3, #16
    a076:	781b      	ldrb	r3, [r3, #0]
    a078:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a07c:	429a      	cmp	r2, r3
    a07e:	d929      	bls.n	a0d4 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a080:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a084:	4928      	ldr	r1, [pc, #160]	; (a128 <Adc_Ipw_EndConversion+0x140>)
    a086:	4613      	mov	r3, r2
    a088:	009b      	lsls	r3, r3, #2
    a08a:	4413      	add	r3, r2
    a08c:	009b      	lsls	r3, r3, #2
    a08e:	440b      	add	r3, r1
    a090:	3310      	adds	r3, #16
    a092:	781b      	ldrb	r3, [r3, #0]
    a094:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a098:	1ad3      	subs	r3, r2, r3
    a09a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a09e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a0a2:	2b0f      	cmp	r3, #15
    a0a4:	d805      	bhi.n	a0b2 <Adc_Ipw_EndConversion+0xca>
    a0a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a0aa:	f003 030f 	and.w	r3, r3, #15
    a0ae:	b2db      	uxtb	r3, r3
    a0b0:	e000      	b.n	a0b4 <Adc_Ipw_EndConversion+0xcc>
    a0b2:	2310      	movs	r3, #16
    a0b4:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a0b8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a0bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a0c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a0c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0c8:	9300      	str	r3, [sp, #0]
    a0ca:	4613      	mov	r3, r2
    a0cc:	220f      	movs	r2, #15
    a0ce:	f7ff f993 	bl	93f8 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a0d2:	e023      	b.n	a11c <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a0d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a0d8:	4913      	ldr	r1, [pc, #76]	; (a128 <Adc_Ipw_EndConversion+0x140>)
    a0da:	4613      	mov	r3, r2
    a0dc:	009b      	lsls	r3, r3, #2
    a0de:	4413      	add	r3, r2
    a0e0:	009b      	lsls	r3, r3, #2
    a0e2:	440b      	add	r3, r1
    a0e4:	3308      	adds	r3, #8
    a0e6:	881b      	ldrh	r3, [r3, #0]
    a0e8:	b29b      	uxth	r3, r3
    a0ea:	3301      	adds	r3, #1
    a0ec:	b298      	uxth	r0, r3
    a0ee:	490e      	ldr	r1, [pc, #56]	; (a128 <Adc_Ipw_EndConversion+0x140>)
    a0f0:	4613      	mov	r3, r2
    a0f2:	009b      	lsls	r3, r3, #2
    a0f4:	4413      	add	r3, r2
    a0f6:	009b      	lsls	r3, r3, #2
    a0f8:	440b      	add	r3, r1
    a0fa:	3308      	adds	r3, #8
    a0fc:	4602      	mov	r2, r0
    a0fe:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a100:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a104:	2b00      	cmp	r3, #0
    a106:	d009      	beq.n	a11c <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a108:	9b06      	ldr	r3, [sp, #24]
    a10a:	8b9a      	ldrh	r2, [r3, #28]
    a10c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a110:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a114:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a118:	f7ff feae 	bl	9e78 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a11c:	bf00      	nop
    a11e:	b008      	add	sp, #32
    a120:	bd10      	pop	{r4, pc}
    a122:	bf00      	nop
    a124:	1fff8ce8 	.word	0x1fff8ce8
    a128:	1fff8cec 	.word	0x1fff8cec

0000a12c <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a12c:	b084      	sub	sp, #16
    a12e:	9003      	str	r0, [sp, #12]
    a130:	9102      	str	r1, [sp, #8]
    a132:	4611      	mov	r1, r2
    a134:	461a      	mov	r2, r3
    a136:	460b      	mov	r3, r1
    a138:	f8ad 3006 	strh.w	r3, [sp, #6]
    a13c:	4613      	mov	r3, r2
    a13e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a142:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a146:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a14a:	fb02 f303 	mul.w	r3, r2, r3
    a14e:	005b      	lsls	r3, r3, #1
    a150:	9a02      	ldr	r2, [sp, #8]
    a152:	4413      	add	r3, r2
    a154:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a158:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a15a:	bf00      	nop
    a15c:	b004      	add	sp, #16
    a15e:	4770      	bx	lr

0000a160 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a160:	b500      	push	{lr}
    a162:	b085      	sub	sp, #20
    a164:	4603      	mov	r3, r0
    a166:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a16a:	f7ff fce1 	bl	9b30 <Adc_GetCoreID>
    a16e:	4603      	mov	r3, r0
    a170:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a174:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a178:	b2db      	uxtb	r3, r3
    a17a:	461a      	mov	r2, r3
    a17c:	4b14      	ldr	r3, [pc, #80]	; (a1d0 <Adc_Ipw_EndConversionNotification+0x70>)
    a17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a182:	681a      	ldr	r2, [r3, #0]
    a184:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a188:	4413      	add	r3, r2
    a18a:	f893 3020 	ldrb.w	r3, [r3, #32]
    a18e:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a192:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a196:	4a0f      	ldr	r2, [pc, #60]	; (a1d4 <Adc_Ipw_EndConversionNotification+0x74>)
    a198:	00db      	lsls	r3, r3, #3
    a19a:	4413      	add	r3, r2
    a19c:	885b      	ldrh	r3, [r3, #2]
    a19e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a1a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1a6:	4a0b      	ldr	r2, [pc, #44]	; (a1d4 <Adc_Ipw_EndConversionNotification+0x74>)
    a1a8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a1ac:	b29b      	uxth	r3, r3
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d009      	beq.n	a1c6 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a1b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1b6:	b2db      	uxtb	r3, r3
    a1b8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a1bc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a1c0:	2201      	movs	r2, #1
    a1c2:	f7ff ff11 	bl	9fe8 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a1c6:	bf00      	nop
    a1c8:	b005      	add	sp, #20
    a1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a1ce:	bf00      	nop
    a1d0:	1fff8ce8 	.word	0x1fff8ce8
    a1d4:	1fff8d00 	.word	0x1fff8d00

0000a1d8 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a1d8:	b500      	push	{lr}
    a1da:	b085      	sub	sp, #20
    a1dc:	4603      	mov	r3, r0
    a1de:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a1e2:	2300      	movs	r3, #0
    a1e4:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a1e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1ec:	4618      	mov	r0, r3
    a1ee:	f7ff ffb7 	bl	a160 <Adc_Ipw_EndConversionNotification>
}
    a1f2:	bf00      	nop
    a1f4:	b005      	add	sp, #20
    a1f6:	f85d fb04 	ldr.w	pc, [sp], #4
    a1fa:	bf00      	nop

0000a1fc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a1fc:	b084      	sub	sp, #16
    a1fe:	9003      	str	r0, [sp, #12]
    a200:	9201      	str	r2, [sp, #4]
    a202:	461a      	mov	r2, r3
    a204:	460b      	mov	r3, r1
    a206:	f88d 300b 	strb.w	r3, [sp, #11]
    a20a:	4613      	mov	r3, r2
    a20c:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a210:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a214:	2b00      	cmp	r3, #0
    a216:	d016      	beq.n	a246 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a218:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a21c:	9903      	ldr	r1, [sp, #12]
    a21e:	4613      	mov	r3, r2
    a220:	009b      	lsls	r3, r3, #2
    a222:	4413      	add	r3, r2
    a224:	00db      	lsls	r3, r3, #3
    a226:	440b      	add	r3, r1
    a228:	3310      	adds	r3, #16
    a22a:	6819      	ldr	r1, [r3, #0]
    a22c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a230:	9b01      	ldr	r3, [sp, #4]
    a232:	4319      	orrs	r1, r3
    a234:	9803      	ldr	r0, [sp, #12]
    a236:	4613      	mov	r3, r2
    a238:	009b      	lsls	r3, r3, #2
    a23a:	4413      	add	r3, r2
    a23c:	00db      	lsls	r3, r3, #3
    a23e:	4403      	add	r3, r0
    a240:	3310      	adds	r3, #16
    a242:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a244:	e016      	b.n	a274 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a246:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a24a:	9903      	ldr	r1, [sp, #12]
    a24c:	4613      	mov	r3, r2
    a24e:	009b      	lsls	r3, r3, #2
    a250:	4413      	add	r3, r2
    a252:	00db      	lsls	r3, r3, #3
    a254:	440b      	add	r3, r1
    a256:	3310      	adds	r3, #16
    a258:	6819      	ldr	r1, [r3, #0]
    a25a:	9b01      	ldr	r3, [sp, #4]
    a25c:	43db      	mvns	r3, r3
    a25e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a262:	4019      	ands	r1, r3
    a264:	9803      	ldr	r0, [sp, #12]
    a266:	4613      	mov	r3, r2
    a268:	009b      	lsls	r3, r3, #2
    a26a:	4413      	add	r3, r2
    a26c:	00db      	lsls	r3, r3, #3
    a26e:	4403      	add	r3, r0
    a270:	3310      	adds	r3, #16
    a272:	6019      	str	r1, [r3, #0]
}
    a274:	bf00      	nop
    a276:	b004      	add	sp, #16
    a278:	4770      	bx	lr

0000a27a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a27a:	b082      	sub	sp, #8
    a27c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a27e:	9b01      	ldr	r3, [sp, #4]
    a280:	681b      	ldr	r3, [r3, #0]
    a282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a286:	9b01      	ldr	r3, [sp, #4]
    a288:	601a      	str	r2, [r3, #0]
}
    a28a:	bf00      	nop
    a28c:	b002      	add	sp, #8
    a28e:	4770      	bx	lr

0000a290 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a290:	b082      	sub	sp, #8
    a292:	9001      	str	r0, [sp, #4]
    a294:	460b      	mov	r3, r1
    a296:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a29a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d006      	beq.n	a2b0 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a2a2:	9b01      	ldr	r3, [sp, #4]
    a2a4:	681b      	ldr	r3, [r3, #0]
    a2a6:	f043 0202 	orr.w	r2, r3, #2
    a2aa:	9b01      	ldr	r3, [sp, #4]
    a2ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a2ae:	e005      	b.n	a2bc <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a2b0:	9b01      	ldr	r3, [sp, #4]
    a2b2:	681b      	ldr	r3, [r3, #0]
    a2b4:	f023 0202 	bic.w	r2, r3, #2
    a2b8:	9b01      	ldr	r3, [sp, #4]
    a2ba:	601a      	str	r2, [r3, #0]
}
    a2bc:	bf00      	nop
    a2be:	b002      	add	sp, #8
    a2c0:	4770      	bx	lr

0000a2c2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a2c2:	b086      	sub	sp, #24
    a2c4:	9003      	str	r0, [sp, #12]
    a2c6:	460b      	mov	r3, r1
    a2c8:	9201      	str	r2, [sp, #4]
    a2ca:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a2ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2d2:	9903      	ldr	r1, [sp, #12]
    a2d4:	4613      	mov	r3, r2
    a2d6:	009b      	lsls	r3, r3, #2
    a2d8:	4413      	add	r3, r2
    a2da:	00db      	lsls	r3, r3, #3
    a2dc:	440b      	add	r3, r1
    a2de:	3310      	adds	r3, #16
    a2e0:	681b      	ldr	r3, [r3, #0]
    a2e2:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a2e4:	9b05      	ldr	r3, [sp, #20]
    a2e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a2ea:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a2ec:	9b01      	ldr	r3, [sp, #4]
    a2ee:	781b      	ldrb	r3, [r3, #0]
    a2f0:	461a      	mov	r2, r3
    a2f2:	9b05      	ldr	r3, [sp, #20]
    a2f4:	4313      	orrs	r3, r2
    a2f6:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a2f8:	9b01      	ldr	r3, [sp, #4]
    a2fa:	785b      	ldrb	r3, [r3, #1]
    a2fc:	021b      	lsls	r3, r3, #8
    a2fe:	b29b      	uxth	r3, r3
    a300:	9a05      	ldr	r2, [sp, #20]
    a302:	4313      	orrs	r3, r2
    a304:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a306:	9b01      	ldr	r3, [sp, #4]
    a308:	789b      	ldrb	r3, [r3, #2]
    a30a:	041b      	lsls	r3, r3, #16
    a30c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a310:	9a05      	ldr	r2, [sp, #20]
    a312:	4313      	orrs	r3, r2
    a314:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a316:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a31a:	9903      	ldr	r1, [sp, #12]
    a31c:	4613      	mov	r3, r2
    a31e:	009b      	lsls	r3, r3, #2
    a320:	4413      	add	r3, r2
    a322:	00db      	lsls	r3, r3, #3
    a324:	440b      	add	r3, r1
    a326:	3310      	adds	r3, #16
    a328:	9a05      	ldr	r2, [sp, #20]
    a32a:	601a      	str	r2, [r3, #0]
}
    a32c:	bf00      	nop
    a32e:	b006      	add	sp, #24
    a330:	4770      	bx	lr

0000a332 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a332:	b082      	sub	sp, #8
    a334:	9001      	str	r0, [sp, #4]
    a336:	460b      	mov	r3, r1
    a338:	f88d 3003 	strb.w	r3, [sp, #3]
    a33c:	4613      	mov	r3, r2
    a33e:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a342:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a346:	9901      	ldr	r1, [sp, #4]
    a348:	4613      	mov	r3, r2
    a34a:	009b      	lsls	r3, r3, #2
    a34c:	4413      	add	r3, r2
    a34e:	00db      	lsls	r3, r3, #3
    a350:	440b      	add	r3, r1
    a352:	3314      	adds	r3, #20
    a354:	6819      	ldr	r1, [r3, #0]
    a356:	f8bd 3000 	ldrh.w	r3, [sp]
    a35a:	041b      	lsls	r3, r3, #16
    a35c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a360:	43db      	mvns	r3, r3
    a362:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a366:	4019      	ands	r1, r3
    a368:	9801      	ldr	r0, [sp, #4]
    a36a:	4613      	mov	r3, r2
    a36c:	009b      	lsls	r3, r3, #2
    a36e:	4413      	add	r3, r2
    a370:	00db      	lsls	r3, r3, #3
    a372:	4403      	add	r3, r0
    a374:	3314      	adds	r3, #20
    a376:	6019      	str	r1, [r3, #0]
}
    a378:	bf00      	nop
    a37a:	b002      	add	sp, #8
    a37c:	4770      	bx	lr

0000a37e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a37e:	b500      	push	{lr}
    a380:	b087      	sub	sp, #28
    a382:	9001      	str	r0, [sp, #4]
    a384:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a386:	4a50      	ldr	r2, [pc, #320]	; (a4c8 <Pdb_Adc_Ip_Init+0x14a>)
    a388:	9b01      	ldr	r3, [sp, #4]
    a38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a38e:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a390:	2300      	movs	r3, #0
    a392:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a394:	9b00      	ldr	r3, [sp, #0]
    a396:	681b      	ldr	r3, [r3, #0]
    a398:	049b      	lsls	r3, r3, #18
    a39a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a39e:	9a04      	ldr	r2, [sp, #16]
    a3a0:	4313      	orrs	r3, r2
    a3a2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a3a4:	9b00      	ldr	r3, [sp, #0]
    a3a6:	685b      	ldr	r3, [r3, #4]
    a3a8:	031b      	lsls	r3, r3, #12
    a3aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a3ae:	9a04      	ldr	r2, [sp, #16]
    a3b0:	4313      	orrs	r3, r2
    a3b2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a3b4:	9b00      	ldr	r3, [sp, #0]
    a3b6:	689b      	ldr	r3, [r3, #8]
    a3b8:	009b      	lsls	r3, r3, #2
    a3ba:	f003 030c 	and.w	r3, r3, #12
    a3be:	9a04      	ldr	r2, [sp, #16]
    a3c0:	4313      	orrs	r3, r2
    a3c2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a3c4:	9b00      	ldr	r3, [sp, #0]
    a3c6:	68db      	ldr	r3, [r3, #12]
    a3c8:	021b      	lsls	r3, r3, #8
    a3ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a3ce:	9a04      	ldr	r2, [sp, #16]
    a3d0:	4313      	orrs	r3, r2
    a3d2:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a3d4:	9b00      	ldr	r3, [sp, #0]
    a3d6:	7c1b      	ldrb	r3, [r3, #16]
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d003      	beq.n	a3e4 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a3dc:	9b04      	ldr	r3, [sp, #16]
    a3de:	f043 0302 	orr.w	r3, r3, #2
    a3e2:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a3e4:	9b00      	ldr	r3, [sp, #0]
    a3e6:	7c5b      	ldrb	r3, [r3, #17]
    a3e8:	2b00      	cmp	r3, #0
    a3ea:	d003      	beq.n	a3f4 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a3ec:	9b04      	ldr	r3, [sp, #16]
    a3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a3f2:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a3f4:	9b00      	ldr	r3, [sp, #0]
    a3f6:	69db      	ldr	r3, [r3, #28]
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d003      	beq.n	a404 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a3fc:	9b04      	ldr	r3, [sp, #16]
    a3fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a402:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a404:	9b03      	ldr	r3, [sp, #12]
    a406:	9a04      	ldr	r2, [sp, #16]
    a408:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a40a:	9b00      	ldr	r3, [sp, #0]
    a40c:	8a5b      	ldrh	r3, [r3, #18]
    a40e:	4619      	mov	r1, r3
    a410:	9801      	ldr	r0, [sp, #4]
    a412:	f000 f98f 	bl	a734 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a416:	9b00      	ldr	r3, [sp, #0]
    a418:	7d1b      	ldrb	r3, [r3, #20]
    a41a:	2b00      	cmp	r3, #0
    a41c:	d03e      	beq.n	a49c <Pdb_Adc_Ip_Init+0x11e>
    a41e:	9b00      	ldr	r3, [sp, #0]
    a420:	699b      	ldr	r3, [r3, #24]
    a422:	2b00      	cmp	r3, #0
    a424:	d03a      	beq.n	a49c <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a426:	2300      	movs	r3, #0
    a428:	f88d 3017 	strb.w	r3, [sp, #23]
    a42c:	e030      	b.n	a490 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a42e:	9b00      	ldr	r3, [sp, #0]
    a430:	6999      	ldr	r1, [r3, #24]
    a432:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a436:	4613      	mov	r3, r2
    a438:	009b      	lsls	r3, r3, #2
    a43a:	4413      	add	r3, r2
    a43c:	009b      	lsls	r3, r3, #2
    a43e:	440b      	add	r3, r1
    a440:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a442:	9b02      	ldr	r3, [sp, #8]
    a444:	7819      	ldrb	r1, [r3, #0]
    a446:	9b02      	ldr	r3, [sp, #8]
    a448:	3301      	adds	r3, #1
    a44a:	461a      	mov	r2, r3
    a44c:	9803      	ldr	r0, [sp, #12]
    a44e:	f7ff ff38 	bl	a2c2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a452:	2300      	movs	r3, #0
    a454:	f88d 3016 	strb.w	r3, [sp, #22]
    a458:	e011      	b.n	a47e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a45a:	9b02      	ldr	r3, [sp, #8]
    a45c:	7819      	ldrb	r1, [r3, #0]
    a45e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a462:	9a02      	ldr	r2, [sp, #8]
    a464:	005b      	lsls	r3, r3, #1
    a466:	4413      	add	r3, r2
    a468:	889b      	ldrh	r3, [r3, #4]
    a46a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a46e:	9801      	ldr	r0, [sp, #4]
    a470:	f000 fa74 	bl	a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a474:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a478:	3301      	adds	r3, #1
    a47a:	f88d 3016 	strb.w	r3, [sp, #22]
    a47e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a482:	2b07      	cmp	r3, #7
    a484:	d9e9      	bls.n	a45a <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a486:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a48a:	3301      	adds	r3, #1
    a48c:	f88d 3017 	strb.w	r3, [sp, #23]
    a490:	9b00      	ldr	r3, [sp, #0]
    a492:	7d1b      	ldrb	r3, [r3, #20]
    a494:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a498:	429a      	cmp	r2, r3
    a49a:	d3c8      	bcc.n	a42e <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a49c:	9801      	ldr	r0, [sp, #4]
    a49e:	f000 f89b 	bl	a5d8 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a4a2:	9801      	ldr	r0, [sp, #4]
    a4a4:	f000 f92e 	bl	a704 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a4a8:	9b00      	ldr	r3, [sp, #0]
    a4aa:	69da      	ldr	r2, [r3, #28]
    a4ac:	4907      	ldr	r1, [pc, #28]	; (a4cc <Pdb_Adc_Ip_Init+0x14e>)
    a4ae:	9b01      	ldr	r3, [sp, #4]
    a4b0:	00db      	lsls	r3, r3, #3
    a4b2:	440b      	add	r3, r1
    a4b4:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a4b6:	4a05      	ldr	r2, [pc, #20]	; (a4cc <Pdb_Adc_Ip_Init+0x14e>)
    a4b8:	9b01      	ldr	r3, [sp, #4]
    a4ba:	2101      	movs	r1, #1
    a4bc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a4c0:	bf00      	nop
    a4c2:	b007      	add	sp, #28
    a4c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c8:	00010794 	.word	0x00010794
    a4cc:	1fff8da8 	.word	0x1fff8da8

0000a4d0 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a4d0:	b500      	push	{lr}
    a4d2:	b097      	sub	sp, #92	; 0x5c
    a4d4:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a4d6:	2300      	movs	r3, #0
    a4d8:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a4da:	2300      	movs	r3, #0
    a4dc:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a4de:	2300      	movs	r3, #0
    a4e0:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a4e2:	2300      	movs	r3, #0
    a4e4:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a4e6:	2300      	movs	r3, #0
    a4e8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a4ec:	2300      	movs	r3, #0
    a4ee:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a4f2:	2300      	movs	r3, #0
    a4f4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a4f8:	2302      	movs	r3, #2
    a4fa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a4fe:	2300      	movs	r3, #0
    a500:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a504:	e04d      	b.n	a5a2 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a506:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a50a:	4613      	mov	r3, r2
    a50c:	009b      	lsls	r3, r3, #2
    a50e:	4413      	add	r3, r2
    a510:	009b      	lsls	r3, r3, #2
    a512:	aa16      	add	r2, sp, #88	; 0x58
    a514:	4413      	add	r3, r2
    a516:	3b4c      	subs	r3, #76	; 0x4c
    a518:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a51c:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a51e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a522:	4613      	mov	r3, r2
    a524:	009b      	lsls	r3, r3, #2
    a526:	4413      	add	r3, r2
    a528:	009b      	lsls	r3, r3, #2
    a52a:	aa16      	add	r2, sp, #88	; 0x58
    a52c:	4413      	add	r3, r2
    a52e:	3b4b      	subs	r3, #75	; 0x4b
    a530:	2200      	movs	r2, #0
    a532:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a534:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a538:	4613      	mov	r3, r2
    a53a:	009b      	lsls	r3, r3, #2
    a53c:	4413      	add	r3, r2
    a53e:	009b      	lsls	r3, r3, #2
    a540:	aa16      	add	r2, sp, #88	; 0x58
    a542:	4413      	add	r3, r2
    a544:	3b4a      	subs	r3, #74	; 0x4a
    a546:	2200      	movs	r2, #0
    a548:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a54a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a54e:	4613      	mov	r3, r2
    a550:	009b      	lsls	r3, r3, #2
    a552:	4413      	add	r3, r2
    a554:	009b      	lsls	r3, r3, #2
    a556:	aa16      	add	r2, sp, #88	; 0x58
    a558:	4413      	add	r3, r2
    a55a:	3b49      	subs	r3, #73	; 0x49
    a55c:	2200      	movs	r2, #0
    a55e:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a560:	2300      	movs	r3, #0
    a562:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a566:	e013      	b.n	a590 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a568:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a56c:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a570:	4613      	mov	r3, r2
    a572:	009b      	lsls	r3, r3, #2
    a574:	4413      	add	r3, r2
    a576:	005b      	lsls	r3, r3, #1
    a578:	440b      	add	r3, r1
    a57a:	005b      	lsls	r3, r3, #1
    a57c:	aa16      	add	r2, sp, #88	; 0x58
    a57e:	4413      	add	r3, r2
    a580:	2200      	movs	r2, #0
    a582:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a586:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a58a:	3301      	adds	r3, #1
    a58c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a590:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a594:	2b07      	cmp	r3, #7
    a596:	d9e7      	bls.n	a568 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a598:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a59c:	3301      	adds	r3, #1
    a59e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a5a2:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a5a6:	2b01      	cmp	r3, #1
    a5a8:	d9ad      	bls.n	a506 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a5aa:	ab03      	add	r3, sp, #12
    a5ac:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a5ae:	2300      	movs	r3, #0
    a5b0:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a5b2:	ab0d      	add	r3, sp, #52	; 0x34
    a5b4:	4619      	mov	r1, r3
    a5b6:	9801      	ldr	r0, [sp, #4]
    a5b8:	f7ff fee1 	bl	a37e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a5bc:	9801      	ldr	r0, [sp, #4]
    a5be:	f000 f823 	bl	a608 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a5c2:	4a04      	ldr	r2, [pc, #16]	; (a5d4 <Pdb_Adc_Ip_DeInit+0x104>)
    a5c4:	9b01      	ldr	r3, [sp, #4]
    a5c6:	2100      	movs	r1, #0
    a5c8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a5cc:	bf00      	nop
    a5ce:	b017      	add	sp, #92	; 0x5c
    a5d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a5d4:	1fff8da8 	.word	0x1fff8da8

0000a5d8 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a5d8:	b500      	push	{lr}
    a5da:	b085      	sub	sp, #20
    a5dc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a5de:	4a09      	ldr	r2, [pc, #36]	; (a604 <Pdb_Adc_Ip_Enable+0x2c>)
    a5e0:	9b01      	ldr	r3, [sp, #4]
    a5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a5e8:	f001 fdbe 	bl	c168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a5ec:	9b03      	ldr	r3, [sp, #12]
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a5f4:	9b03      	ldr	r3, [sp, #12]
    a5f6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a5f8:	f001 fde2 	bl	c1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a5fc:	bf00      	nop
    a5fe:	b005      	add	sp, #20
    a600:	f85d fb04 	ldr.w	pc, [sp], #4
    a604:	00010794 	.word	0x00010794

0000a608 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a608:	b500      	push	{lr}
    a60a:	b085      	sub	sp, #20
    a60c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a60e:	4a08      	ldr	r2, [pc, #32]	; (a630 <Pdb_Adc_Ip_Disable+0x28>)
    a610:	9b01      	ldr	r3, [sp, #4]
    a612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a616:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a618:	f001 fdf8 	bl	c20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a61c:	9803      	ldr	r0, [sp, #12]
    a61e:	f7ff fe2c 	bl	a27a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a622:	f001 fe1f 	bl	c264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a626:	bf00      	nop
    a628:	b005      	add	sp, #20
    a62a:	f85d fb04 	ldr.w	pc, [sp], #4
    a62e:	bf00      	nop
    a630:	00010794 	.word	0x00010794

0000a634 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a634:	b500      	push	{lr}
    a636:	b085      	sub	sp, #20
    a638:	9001      	str	r0, [sp, #4]
    a63a:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a63c:	4a0e      	ldr	r2, [pc, #56]	; (a678 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a63e:	9b01      	ldr	r3, [sp, #4]
    a640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a644:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a646:	f001 fe33 	bl	c2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a64a:	9b03      	ldr	r3, [sp, #12]
    a64c:	681b      	ldr	r3, [r3, #0]
    a64e:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a650:	9b02      	ldr	r3, [sp, #8]
    a652:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a656:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a658:	9b00      	ldr	r3, [sp, #0]
    a65a:	021b      	lsls	r3, r3, #8
    a65c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a660:	9a02      	ldr	r2, [sp, #8]
    a662:	4313      	orrs	r3, r2
    a664:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a666:	9b03      	ldr	r3, [sp, #12]
    a668:	9a02      	ldr	r2, [sp, #8]
    a66a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a66c:	f001 fe4c 	bl	c308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a670:	bf00      	nop
    a672:	b005      	add	sp, #20
    a674:	f85d fb04 	ldr.w	pc, [sp], #4
    a678:	00010794 	.word	0x00010794

0000a67c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a67c:	b500      	push	{lr}
    a67e:	b085      	sub	sp, #20
    a680:	9001      	str	r0, [sp, #4]
    a682:	460b      	mov	r3, r1
    a684:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a688:	4a09      	ldr	r2, [pc, #36]	; (a6b0 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a68a:	9b01      	ldr	r3, [sp, #4]
    a68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a690:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a692:	f001 fe5f 	bl	c354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a696:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a69a:	4619      	mov	r1, r3
    a69c:	9803      	ldr	r0, [sp, #12]
    a69e:	f7ff fdf7 	bl	a290 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a6a2:	f001 fe83 	bl	c3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a6a6:	bf00      	nop
    a6a8:	b005      	add	sp, #20
    a6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a6ae:	bf00      	nop
    a6b0:	00010794 	.word	0x00010794

0000a6b4 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a6b4:	b500      	push	{lr}
    a6b6:	b085      	sub	sp, #20
    a6b8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6ba:	4a09      	ldr	r2, [pc, #36]	; (a6e0 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a6bc:	9b01      	ldr	r3, [sp, #4]
    a6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    a6c4:	f001 fe98 	bl	c3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    a6c8:	9b03      	ldr	r3, [sp, #12]
    a6ca:	681b      	ldr	r3, [r3, #0]
    a6cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    a6d0:	9b03      	ldr	r3, [sp, #12]
    a6d2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    a6d4:	f001 febc 	bl	c450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    a6d8:	bf00      	nop
    a6da:	b005      	add	sp, #20
    a6dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a6e0:	00010794 	.word	0x00010794

0000a6e4 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    a6e4:	b084      	sub	sp, #16
    a6e6:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6e8:	4a05      	ldr	r2, [pc, #20]	; (a700 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    a6ea:	9b01      	ldr	r3, [sp, #4]
    a6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f0:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    a6f2:	9b03      	ldr	r3, [sp, #12]
    a6f4:	689b      	ldr	r3, [r3, #8]
    a6f6:	b29b      	uxth	r3, r3
}
    a6f8:	4618      	mov	r0, r3
    a6fa:	b004      	add	sp, #16
    a6fc:	4770      	bx	lr
    a6fe:	bf00      	nop
    a700:	00010794 	.word	0x00010794

0000a704 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    a704:	b500      	push	{lr}
    a706:	b085      	sub	sp, #20
    a708:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a70a:	4a09      	ldr	r2, [pc, #36]	; (a730 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    a70c:	9b01      	ldr	r3, [sp, #4]
    a70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a712:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    a714:	f001 fec2 	bl	c49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    a718:	9b03      	ldr	r3, [sp, #12]
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	f043 0201 	orr.w	r2, r3, #1
    a720:	9b03      	ldr	r3, [sp, #12]
    a722:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    a724:	f001 fee6 	bl	c4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    a728:	bf00      	nop
    a72a:	b005      	add	sp, #20
    a72c:	f85d fb04 	ldr.w	pc, [sp], #4
    a730:	00010794 	.word	0x00010794

0000a734 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    a734:	b500      	push	{lr}
    a736:	b085      	sub	sp, #20
    a738:	9001      	str	r0, [sp, #4]
    a73a:	460b      	mov	r3, r1
    a73c:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a740:	4a0d      	ldr	r2, [pc, #52]	; (a778 <Pdb_Adc_Ip_SetModulus+0x44>)
    a742:	9b01      	ldr	r3, [sp, #4]
    a744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a748:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    a74a:	f002 f989 	bl	ca60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    a74e:	9b03      	ldr	r3, [sp, #12]
    a750:	685b      	ldr	r3, [r3, #4]
    a752:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    a754:	9b02      	ldr	r3, [sp, #8]
    a756:	0c1b      	lsrs	r3, r3, #16
    a758:	041b      	lsls	r3, r3, #16
    a75a:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    a75c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a760:	9a02      	ldr	r2, [sp, #8]
    a762:	4313      	orrs	r3, r2
    a764:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    a766:	9b03      	ldr	r3, [sp, #12]
    a768:	9a02      	ldr	r2, [sp, #8]
    a76a:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    a76c:	f002 f9a4 	bl	cab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    a770:	bf00      	nop
    a772:	b005      	add	sp, #20
    a774:	f85d fb04 	ldr.w	pc, [sp], #4
    a778:	00010794 	.word	0x00010794

0000a77c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a77c:	b500      	push	{lr}
    a77e:	b087      	sub	sp, #28
    a780:	9003      	str	r0, [sp, #12]
    a782:	460b      	mov	r3, r1
    a784:	9201      	str	r2, [sp, #4]
    a786:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a78a:	4a0a      	ldr	r2, [pc, #40]	; (a7b4 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    a78c:	9b03      	ldr	r3, [sp, #12]
    a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a792:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    a794:	f001 ff26 	bl	c5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    a798:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a79c:	9a01      	ldr	r2, [sp, #4]
    a79e:	4619      	mov	r1, r3
    a7a0:	9805      	ldr	r0, [sp, #20]
    a7a2:	f7ff fd8e 	bl	a2c2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    a7a6:	f001 ff49 	bl	c63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    a7aa:	bf00      	nop
    a7ac:	b007      	add	sp, #28
    a7ae:	f85d fb04 	ldr.w	pc, [sp], #4
    a7b2:	bf00      	nop
    a7b4:	00010794 	.word	0x00010794

0000a7b8 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    a7b8:	b084      	sub	sp, #16
    a7ba:	9001      	str	r0, [sp, #4]
    a7bc:	460b      	mov	r3, r1
    a7be:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7c2:	4a0c      	ldr	r2, [pc, #48]	; (a7f4 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    a7c4:	9b01      	ldr	r3, [sp, #4]
    a7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ca:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    a7cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a7d0:	9903      	ldr	r1, [sp, #12]
    a7d2:	4613      	mov	r3, r2
    a7d4:	009b      	lsls	r3, r3, #2
    a7d6:	4413      	add	r3, r2
    a7d8:	00db      	lsls	r3, r3, #3
    a7da:	440b      	add	r3, r1
    a7dc:	3314      	adds	r3, #20
    a7de:	681b      	ldr	r3, [r3, #0]
    a7e0:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    a7e2:	9b02      	ldr	r3, [sp, #8]
    a7e4:	0c1b      	lsrs	r3, r3, #16
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	9302      	str	r3, [sp, #8]

    return Result;
    a7ea:	9b02      	ldr	r3, [sp, #8]
}
    a7ec:	4618      	mov	r0, r3
    a7ee:	b004      	add	sp, #16
    a7f0:	4770      	bx	lr
    a7f2:	bf00      	nop
    a7f4:	00010794 	.word	0x00010794

0000a7f8 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    a7f8:	b500      	push	{lr}
    a7fa:	b085      	sub	sp, #20
    a7fc:	9001      	str	r0, [sp, #4]
    a7fe:	460b      	mov	r3, r1
    a800:	f88d 3003 	strb.w	r3, [sp, #3]
    a804:	4613      	mov	r3, r2
    a806:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a80a:	4a0a      	ldr	r2, [pc, #40]	; (a834 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    a80c:	9b01      	ldr	r3, [sp, #4]
    a80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a812:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    a814:	f002 f880 	bl	c918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    a818:	f8bd 2000 	ldrh.w	r2, [sp]
    a81c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a820:	4619      	mov	r1, r3
    a822:	9803      	ldr	r0, [sp, #12]
    a824:	f7ff fd85 	bl	a332 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    a828:	f002 f8a2 	bl	c970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    a82c:	bf00      	nop
    a82e:	b005      	add	sp, #20
    a830:	f85d fb04 	ldr.w	pc, [sp], #4
    a834:	00010794 	.word	0x00010794

0000a838 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    a838:	b500      	push	{lr}
    a83a:	b085      	sub	sp, #20
    a83c:	9001      	str	r0, [sp, #4]
    a83e:	4608      	mov	r0, r1
    a840:	4611      	mov	r1, r2
    a842:	461a      	mov	r2, r3
    a844:	4603      	mov	r3, r0
    a846:	f88d 3003 	strb.w	r3, [sp, #3]
    a84a:	460b      	mov	r3, r1
    a84c:	f88d 3002 	strb.w	r3, [sp, #2]
    a850:	4613      	mov	r3, r2
    a852:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a856:	4a10      	ldr	r2, [pc, #64]	; (a898 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    a858:	9b01      	ldr	r3, [sp, #4]
    a85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a85e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a860:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a864:	2201      	movs	r2, #1
    a866:	fa02 f303 	lsl.w	r3, r2, r3
    a86a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    a86c:	9b02      	ldr	r3, [sp, #8]
    a86e:	041b      	lsls	r3, r3, #16
    a870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a874:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    a876:	f001 ff07 	bl	c688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a87a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a87e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a882:	9a02      	ldr	r2, [sp, #8]
    a884:	9803      	ldr	r0, [sp, #12]
    a886:	f7ff fcb9 	bl	a1fc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    a88a:	f001 ff29 	bl	c6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    a88e:	bf00      	nop
    a890:	b005      	add	sp, #20
    a892:	f85d fb04 	ldr.w	pc, [sp], #4
    a896:	bf00      	nop
    a898:	00010794 	.word	0x00010794

0000a89c <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    a89c:	b500      	push	{lr}
    a89e:	b085      	sub	sp, #20
    a8a0:	9001      	str	r0, [sp, #4]
    a8a2:	4608      	mov	r0, r1
    a8a4:	4611      	mov	r1, r2
    a8a6:	461a      	mov	r2, r3
    a8a8:	4603      	mov	r3, r0
    a8aa:	f88d 3003 	strb.w	r3, [sp, #3]
    a8ae:	460b      	mov	r3, r1
    a8b0:	f88d 3002 	strb.w	r3, [sp, #2]
    a8b4:	4613      	mov	r3, r2
    a8b6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a8ba:	4a0f      	ldr	r2, [pc, #60]	; (a8f8 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    a8bc:	9b01      	ldr	r3, [sp, #4]
    a8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8c2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a8c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a8c8:	2201      	movs	r2, #1
    a8ca:	fa02 f303 	lsl.w	r3, r2, r3
    a8ce:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    a8d0:	9b02      	ldr	r3, [sp, #8]
    a8d2:	b2db      	uxtb	r3, r3
    a8d4:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    a8d6:	f001 ff29 	bl	c72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a8da:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a8de:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a8e2:	9a02      	ldr	r2, [sp, #8]
    a8e4:	9803      	ldr	r0, [sp, #12]
    a8e6:	f7ff fc89 	bl	a1fc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    a8ea:	f001 ff4b 	bl	c784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    a8ee:	bf00      	nop
    a8f0:	b005      	add	sp, #20
    a8f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a8f6:	bf00      	nop
    a8f8:	00010794 	.word	0x00010794

0000a8fc <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    a8fc:	b500      	push	{lr}
    a8fe:	b085      	sub	sp, #20
    a900:	9001      	str	r0, [sp, #4]
    a902:	4608      	mov	r0, r1
    a904:	4611      	mov	r1, r2
    a906:	461a      	mov	r2, r3
    a908:	4603      	mov	r3, r0
    a90a:	f88d 3003 	strb.w	r3, [sp, #3]
    a90e:	460b      	mov	r3, r1
    a910:	f88d 3002 	strb.w	r3, [sp, #2]
    a914:	4613      	mov	r3, r2
    a916:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a91a:	4a0f      	ldr	r2, [pc, #60]	; (a958 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    a91c:	9b01      	ldr	r3, [sp, #4]
    a91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a922:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a924:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a928:	2201      	movs	r2, #1
    a92a:	fa02 f303 	lsl.w	r3, r2, r3
    a92e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    a930:	9b02      	ldr	r3, [sp, #8]
    a932:	021b      	lsls	r3, r3, #8
    a934:	b29b      	uxth	r3, r3
    a936:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    a938:	f001 ff4a 	bl	c7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a93c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a940:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a944:	9a02      	ldr	r2, [sp, #8]
    a946:	9803      	ldr	r0, [sp, #12]
    a948:	f7ff fc58 	bl	a1fc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    a94c:	f001 ff6c 	bl	c828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    a950:	bf00      	nop
    a952:	b005      	add	sp, #20
    a954:	f85d fb04 	ldr.w	pc, [sp], #4
    a958:	00010794 	.word	0x00010794

0000a95c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    a95c:	b410      	push	{r4}
    a95e:	b085      	sub	sp, #20
    a960:	9001      	str	r0, [sp, #4]
    a962:	4608      	mov	r0, r1
    a964:	4611      	mov	r1, r2
    a966:	461a      	mov	r2, r3
    a968:	4603      	mov	r3, r0
    a96a:	f88d 3003 	strb.w	r3, [sp, #3]
    a96e:	460b      	mov	r3, r1
    a970:	f88d 3002 	strb.w	r3, [sp, #2]
    a974:	4613      	mov	r3, r2
    a976:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a97a:	4a0c      	ldr	r2, [pc, #48]	; (a9ac <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a982:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    a984:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a988:	f89d 4002 	ldrb.w	r4, [sp, #2]
    a98c:	f8bd 0000 	ldrh.w	r0, [sp]
    a990:	9903      	ldr	r1, [sp, #12]
    a992:	4613      	mov	r3, r2
    a994:	009b      	lsls	r3, r3, #2
    a996:	4413      	add	r3, r2
    a998:	005b      	lsls	r3, r3, #1
    a99a:	4423      	add	r3, r4
    a99c:	3306      	adds	r3, #6
    a99e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    a9a2:	bf00      	nop
    a9a4:	b005      	add	sp, #20
    a9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    a9aa:	4770      	bx	lr
    a9ac:	00010794 	.word	0x00010794

0000a9b0 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    a9b0:	b500      	push	{lr}
    a9b2:	b087      	sub	sp, #28
    a9b4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9b6:	4a19      	ldr	r2, [pc, #100]	; (aa1c <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    a9b8:	9b01      	ldr	r3, [sp, #4]
    a9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9be:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    a9c0:	2300      	movs	r3, #0
    a9c2:	f88d 300c 	strb.w	r3, [sp, #12]
    a9c6:	2300      	movs	r3, #0
    a9c8:	f88d 300d 	strb.w	r3, [sp, #13]
    a9cc:	2300      	movs	r3, #0
    a9ce:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    a9d2:	f001 fdb5 	bl	c540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a9d6:	9804      	ldr	r0, [sp, #16]
    a9d8:	f7ff fc4f 	bl	a27a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    a9dc:	2100      	movs	r1, #0
    a9de:	9804      	ldr	r0, [sp, #16]
    a9e0:	f7ff fc56 	bl	a290 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    a9e4:	f001 fdd8 	bl	c598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    a9e8:	2300      	movs	r3, #0
    a9ea:	f88d 3017 	strb.w	r3, [sp, #23]
    a9ee:	e00b      	b.n	aa08 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    a9f0:	aa03      	add	r2, sp, #12
    a9f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a9f6:	4619      	mov	r1, r3
    a9f8:	9804      	ldr	r0, [sp, #16]
    a9fa:	f000 f899 	bl	ab30 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    a9fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aa02:	3301      	adds	r3, #1
    aa04:	f88d 3017 	strb.w	r3, [sp, #23]
    aa08:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aa0c:	2b01      	cmp	r3, #1
    aa0e:	d9ef      	bls.n	a9f0 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    aa10:	bf00      	nop
    aa12:	bf00      	nop
    aa14:	b007      	add	sp, #28
    aa16:	f85d fb04 	ldr.w	pc, [sp], #4
    aa1a:	bf00      	nop
    aa1c:	00010794 	.word	0x00010794

0000aa20 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    aa20:	b500      	push	{lr}
    aa22:	b087      	sub	sp, #28
    aa24:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa26:	4a40      	ldr	r2, [pc, #256]	; (ab28 <Pdb_Adc_Ip_IRQHandler+0x108>)
    aa28:	9b01      	ldr	r3, [sp, #4]
    aa2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa2e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    aa30:	4a3e      	ldr	r2, [pc, #248]	; (ab2c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aa32:	9b01      	ldr	r3, [sp, #4]
    aa34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d04d      	beq.n	aad8 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    aa3c:	9b04      	ldr	r3, [sp, #16]
    aa3e:	681b      	ldr	r3, [r3, #0]
    aa40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    aa44:	2b00      	cmp	r3, #0
    aa46:	d06a      	beq.n	ab1e <Pdb_Adc_Ip_IRQHandler+0xfe>
    aa48:	4a38      	ldr	r2, [pc, #224]	; (ab2c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aa4a:	9b01      	ldr	r3, [sp, #4]
    aa4c:	00db      	lsls	r3, r3, #3
    aa4e:	4413      	add	r3, r2
    aa50:	685b      	ldr	r3, [r3, #4]
    aa52:	2b00      	cmp	r3, #0
    aa54:	d063      	beq.n	ab1e <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aa56:	2300      	movs	r3, #0
    aa58:	f88d 3017 	strb.w	r3, [sp, #23]
    aa5c:	e037      	b.n	aace <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    aa5e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aa62:	9904      	ldr	r1, [sp, #16]
    aa64:	4613      	mov	r3, r2
    aa66:	009b      	lsls	r3, r3, #2
    aa68:	4413      	add	r3, r2
    aa6a:	00db      	lsls	r3, r3, #3
    aa6c:	440b      	add	r3, r1
    aa6e:	3314      	adds	r3, #20
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	b29b      	uxth	r3, r3
    aa74:	b2db      	uxtb	r3, r3
    aa76:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    aa7a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d020      	beq.n	aac4 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    aa82:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aa86:	9904      	ldr	r1, [sp, #16]
    aa88:	4613      	mov	r3, r2
    aa8a:	009b      	lsls	r3, r3, #2
    aa8c:	4413      	add	r3, r2
    aa8e:	00db      	lsls	r3, r3, #3
    aa90:	440b      	add	r3, r1
    aa92:	3314      	adds	r3, #20
    aa94:	681b      	ldr	r3, [r3, #0]
    aa96:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aa9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    aa9e:	9804      	ldr	r0, [sp, #16]
    aaa0:	4613      	mov	r3, r2
    aaa2:	009b      	lsls	r3, r3, #2
    aaa4:	4413      	add	r3, r2
    aaa6:	00db      	lsls	r3, r3, #3
    aaa8:	4403      	add	r3, r0
    aaaa:	3314      	adds	r3, #20
    aaac:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    aaae:	4a1f      	ldr	r2, [pc, #124]	; (ab2c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aab0:	9b01      	ldr	r3, [sp, #4]
    aab2:	00db      	lsls	r3, r3, #3
    aab4:	4413      	add	r3, r2
    aab6:	685b      	ldr	r3, [r3, #4]
    aab8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    aabc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aac0:	4610      	mov	r0, r2
    aac2:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aac4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aac8:	3301      	adds	r3, #1
    aaca:	f88d 3017 	strb.w	r3, [sp, #23]
    aace:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aad2:	2b01      	cmp	r3, #1
    aad4:	d9c3      	bls.n	aa5e <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    aad6:	e022      	b.n	ab1e <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aad8:	2300      	movs	r3, #0
    aada:	f88d 3017 	strb.w	r3, [sp, #23]
    aade:	e01a      	b.n	ab16 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    aae0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aae4:	9904      	ldr	r1, [sp, #16]
    aae6:	4613      	mov	r3, r2
    aae8:	009b      	lsls	r3, r3, #2
    aaea:	4413      	add	r3, r2
    aaec:	00db      	lsls	r3, r3, #3
    aaee:	440b      	add	r3, r1
    aaf0:	3314      	adds	r3, #20
    aaf2:	681b      	ldr	r3, [r3, #0]
    aaf4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aaf8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    aafc:	9804      	ldr	r0, [sp, #16]
    aafe:	4613      	mov	r3, r2
    ab00:	009b      	lsls	r3, r3, #2
    ab02:	4413      	add	r3, r2
    ab04:	00db      	lsls	r3, r3, #3
    ab06:	4403      	add	r3, r0
    ab08:	3314      	adds	r3, #20
    ab0a:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab10:	3301      	adds	r3, #1
    ab12:	f88d 3017 	strb.w	r3, [sp, #23]
    ab16:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab1a:	2b01      	cmp	r3, #1
    ab1c:	d9e0      	bls.n	aae0 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    ab1e:	bf00      	nop
    ab20:	b007      	add	sp, #28
    ab22:	f85d fb04 	ldr.w	pc, [sp], #4
    ab26:	bf00      	nop
    ab28:	00010794 	.word	0x00010794
    ab2c:	1fff8da8 	.word	0x1fff8da8

0000ab30 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    ab30:	b500      	push	{lr}
    ab32:	b085      	sub	sp, #20
    ab34:	9003      	str	r0, [sp, #12]
    ab36:	460b      	mov	r3, r1
    ab38:	9201      	str	r2, [sp, #4]
    ab3a:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    ab3e:	f001 fe99 	bl	c874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    ab42:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab46:	9a01      	ldr	r2, [sp, #4]
    ab48:	4619      	mov	r1, r3
    ab4a:	9803      	ldr	r0, [sp, #12]
    ab4c:	f7ff fbb9 	bl	a2c2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    ab50:	f001 febc 	bl	c8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    ab54:	f001 ff32 	bl	c9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    ab58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab5c:	22ff      	movs	r2, #255	; 0xff
    ab5e:	4619      	mov	r1, r3
    ab60:	9803      	ldr	r0, [sp, #12]
    ab62:	f7ff fbe6 	bl	a332 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab66:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ab6a:	9903      	ldr	r1, [sp, #12]
    ab6c:	4613      	mov	r3, r2
    ab6e:	009b      	lsls	r3, r3, #2
    ab70:	4413      	add	r3, r2
    ab72:	00db      	lsls	r3, r3, #3
    ab74:	440b      	add	r3, r1
    ab76:	3314      	adds	r3, #20
    ab78:	681b      	ldr	r3, [r3, #0]
    ab7a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ab7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ab82:	9803      	ldr	r0, [sp, #12]
    ab84:	4613      	mov	r3, r2
    ab86:	009b      	lsls	r3, r3, #2
    ab88:	4413      	add	r3, r2
    ab8a:	00db      	lsls	r3, r3, #3
    ab8c:	4403      	add	r3, r0
    ab8e:	3314      	adds	r3, #20
    ab90:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    ab92:	f001 ff3f 	bl	ca14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    ab96:	bf00      	nop
    ab98:	b005      	add	sp, #20
    ab9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab9e:	bf00      	nop

0000aba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    aba0:	b500      	push	{lr}
    aba2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aba4:	f7f5 ffe0 	bl	b68 <Sys_GetCoreID>
    aba8:	4603      	mov	r3, r0
    abaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    abac:	4a10      	ldr	r2, [pc, #64]	; (abf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    abae:	9b01      	ldr	r3, [sp, #4]
    abb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abb4:	2b00      	cmp	r3, #0
    abb6:	d10d      	bne.n	abd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    abb8:	f7f5 fef4 	bl	9a4 <Adc_schm_read_msr>
    abbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    abbe:	9b00      	ldr	r3, [sp, #0]
    abc0:	f003 0301 	and.w	r3, r3, #1
    abc4:	2b00      	cmp	r3, #0
    abc6:	d100      	bne.n	abca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    abc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    abca:	490a      	ldr	r1, [pc, #40]	; (abf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    abcc:	9b01      	ldr	r3, [sp, #4]
    abce:	9a00      	ldr	r2, [sp, #0]
    abd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    abd4:	4a06      	ldr	r2, [pc, #24]	; (abf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    abd6:	9b01      	ldr	r3, [sp, #4]
    abd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abdc:	1c5a      	adds	r2, r3, #1
    abde:	4904      	ldr	r1, [pc, #16]	; (abf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    abe0:	9b01      	ldr	r3, [sp, #4]
    abe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    abe6:	bf00      	nop
    abe8:	b003      	add	sp, #12
    abea:	f85d fb04 	ldr.w	pc, [sp], #4
    abee:	bf00      	nop
    abf0:	1fff8dbc 	.word	0x1fff8dbc
    abf4:	1fff8db8 	.word	0x1fff8db8

0000abf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    abf8:	b500      	push	{lr}
    abfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abfc:	f7f5 ffb4 	bl	b68 <Sys_GetCoreID>
    ac00:	4603      	mov	r3, r0
    ac02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    ac04:	4a0d      	ldr	r2, [pc, #52]	; (ac3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ac06:	9b01      	ldr	r3, [sp, #4]
    ac08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac0c:	1e5a      	subs	r2, r3, #1
    ac0e:	490b      	ldr	r1, [pc, #44]	; (ac3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ac10:	9b01      	ldr	r3, [sp, #4]
    ac12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ac16:	4a0a      	ldr	r2, [pc, #40]	; (ac40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    ac18:	9b01      	ldr	r3, [sp, #4]
    ac1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac1e:	f003 0301 	and.w	r3, r3, #1
    ac22:	2b00      	cmp	r3, #0
    ac24:	d106      	bne.n	ac34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    ac26:	4a05      	ldr	r2, [pc, #20]	; (ac3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ac28:	9b01      	ldr	r3, [sp, #4]
    ac2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac2e:	2b00      	cmp	r3, #0
    ac30:	d100      	bne.n	ac34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac34:	bf00      	nop
    ac36:	b003      	add	sp, #12
    ac38:	f85d fb04 	ldr.w	pc, [sp], #4
    ac3c:	1fff8dbc 	.word	0x1fff8dbc
    ac40:	1fff8db8 	.word	0x1fff8db8

0000ac44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ac44:	b500      	push	{lr}
    ac46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac48:	f7f5 ff8e 	bl	b68 <Sys_GetCoreID>
    ac4c:	4603      	mov	r3, r0
    ac4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    ac50:	4a10      	ldr	r2, [pc, #64]	; (ac94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ac52:	9b01      	ldr	r3, [sp, #4]
    ac54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac58:	2b00      	cmp	r3, #0
    ac5a:	d10d      	bne.n	ac78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac5c:	f7f5 fea2 	bl	9a4 <Adc_schm_read_msr>
    ac60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac62:	9b00      	ldr	r3, [sp, #0]
    ac64:	f003 0301 	and.w	r3, r3, #1
    ac68:	2b00      	cmp	r3, #0
    ac6a:	d100      	bne.n	ac6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ac6e:	490a      	ldr	r1, [pc, #40]	; (ac98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    ac70:	9b01      	ldr	r3, [sp, #4]
    ac72:	9a00      	ldr	r2, [sp, #0]
    ac74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    ac78:	4a06      	ldr	r2, [pc, #24]	; (ac94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ac7a:	9b01      	ldr	r3, [sp, #4]
    ac7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac80:	1c5a      	adds	r2, r3, #1
    ac82:	4904      	ldr	r1, [pc, #16]	; (ac94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ac84:	9b01      	ldr	r3, [sp, #4]
    ac86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac8a:	bf00      	nop
    ac8c:	b003      	add	sp, #12
    ac8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac92:	bf00      	nop
    ac94:	1fff8dc4 	.word	0x1fff8dc4
    ac98:	1fff8dc0 	.word	0x1fff8dc0

0000ac9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ac9c:	b500      	push	{lr}
    ac9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aca0:	f7f5 ff62 	bl	b68 <Sys_GetCoreID>
    aca4:	4603      	mov	r3, r0
    aca6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    aca8:	4a0d      	ldr	r2, [pc, #52]	; (ace0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    acaa:	9b01      	ldr	r3, [sp, #4]
    acac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb0:	1e5a      	subs	r2, r3, #1
    acb2:	490b      	ldr	r1, [pc, #44]	; (ace0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    acb4:	9b01      	ldr	r3, [sp, #4]
    acb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    acba:	4a0a      	ldr	r2, [pc, #40]	; (ace4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    acbc:	9b01      	ldr	r3, [sp, #4]
    acbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc2:	f003 0301 	and.w	r3, r3, #1
    acc6:	2b00      	cmp	r3, #0
    acc8:	d106      	bne.n	acd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    acca:	4a05      	ldr	r2, [pc, #20]	; (ace0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    accc:	9b01      	ldr	r3, [sp, #4]
    acce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd2:	2b00      	cmp	r3, #0
    acd4:	d100      	bne.n	acd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    acd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    acd8:	bf00      	nop
    acda:	b003      	add	sp, #12
    acdc:	f85d fb04 	ldr.w	pc, [sp], #4
    ace0:	1fff8dc4 	.word	0x1fff8dc4
    ace4:	1fff8dc0 	.word	0x1fff8dc0

0000ace8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ace8:	b500      	push	{lr}
    acea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acec:	f7f5 ff3c 	bl	b68 <Sys_GetCoreID>
    acf0:	4603      	mov	r3, r0
    acf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    acf4:	4a10      	ldr	r2, [pc, #64]	; (ad38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    acf6:	9b01      	ldr	r3, [sp, #4]
    acf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acfc:	2b00      	cmp	r3, #0
    acfe:	d10d      	bne.n	ad1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad00:	f7f5 fe50 	bl	9a4 <Adc_schm_read_msr>
    ad04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad06:	9b00      	ldr	r3, [sp, #0]
    ad08:	f003 0301 	and.w	r3, r3, #1
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d100      	bne.n	ad12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ad12:	490a      	ldr	r1, [pc, #40]	; (ad3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    ad14:	9b01      	ldr	r3, [sp, #4]
    ad16:	9a00      	ldr	r2, [sp, #0]
    ad18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    ad1c:	4a06      	ldr	r2, [pc, #24]	; (ad38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ad1e:	9b01      	ldr	r3, [sp, #4]
    ad20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad24:	1c5a      	adds	r2, r3, #1
    ad26:	4904      	ldr	r1, [pc, #16]	; (ad38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ad28:	9b01      	ldr	r3, [sp, #4]
    ad2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad2e:	bf00      	nop
    ad30:	b003      	add	sp, #12
    ad32:	f85d fb04 	ldr.w	pc, [sp], #4
    ad36:	bf00      	nop
    ad38:	1fff8dcc 	.word	0x1fff8dcc
    ad3c:	1fff8dc8 	.word	0x1fff8dc8

0000ad40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ad40:	b500      	push	{lr}
    ad42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad44:	f7f5 ff10 	bl	b68 <Sys_GetCoreID>
    ad48:	4603      	mov	r3, r0
    ad4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    ad4c:	4a0d      	ldr	r2, [pc, #52]	; (ad84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ad4e:	9b01      	ldr	r3, [sp, #4]
    ad50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad54:	1e5a      	subs	r2, r3, #1
    ad56:	490b      	ldr	r1, [pc, #44]	; (ad84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ad58:	9b01      	ldr	r3, [sp, #4]
    ad5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ad5e:	4a0a      	ldr	r2, [pc, #40]	; (ad88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ad60:	9b01      	ldr	r3, [sp, #4]
    ad62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad66:	f003 0301 	and.w	r3, r3, #1
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d106      	bne.n	ad7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ad6e:	4a05      	ldr	r2, [pc, #20]	; (ad84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ad70:	9b01      	ldr	r3, [sp, #4]
    ad72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad76:	2b00      	cmp	r3, #0
    ad78:	d100      	bne.n	ad7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad7c:	bf00      	nop
    ad7e:	b003      	add	sp, #12
    ad80:	f85d fb04 	ldr.w	pc, [sp], #4
    ad84:	1fff8dcc 	.word	0x1fff8dcc
    ad88:	1fff8dc8 	.word	0x1fff8dc8

0000ad8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ad8c:	b500      	push	{lr}
    ad8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad90:	f7f5 feea 	bl	b68 <Sys_GetCoreID>
    ad94:	4603      	mov	r3, r0
    ad96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    ad98:	4a10      	ldr	r2, [pc, #64]	; (addc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ad9a:	9b01      	ldr	r3, [sp, #4]
    ad9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ada0:	2b00      	cmp	r3, #0
    ada2:	d10d      	bne.n	adc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ada4:	f7f5 fdfe 	bl	9a4 <Adc_schm_read_msr>
    ada8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adaa:	9b00      	ldr	r3, [sp, #0]
    adac:	f003 0301 	and.w	r3, r3, #1
    adb0:	2b00      	cmp	r3, #0
    adb2:	d100      	bne.n	adb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    adb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    adb6:	490a      	ldr	r1, [pc, #40]	; (ade0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    adb8:	9b01      	ldr	r3, [sp, #4]
    adba:	9a00      	ldr	r2, [sp, #0]
    adbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    adc0:	4a06      	ldr	r2, [pc, #24]	; (addc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    adc2:	9b01      	ldr	r3, [sp, #4]
    adc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc8:	1c5a      	adds	r2, r3, #1
    adca:	4904      	ldr	r1, [pc, #16]	; (addc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    adcc:	9b01      	ldr	r3, [sp, #4]
    adce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    add2:	bf00      	nop
    add4:	b003      	add	sp, #12
    add6:	f85d fb04 	ldr.w	pc, [sp], #4
    adda:	bf00      	nop
    addc:	1fff8dd4 	.word	0x1fff8dd4
    ade0:	1fff8dd0 	.word	0x1fff8dd0

0000ade4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ade4:	b500      	push	{lr}
    ade6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ade8:	f7f5 febe 	bl	b68 <Sys_GetCoreID>
    adec:	4603      	mov	r3, r0
    adee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    adf0:	4a0d      	ldr	r2, [pc, #52]	; (ae28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    adf2:	9b01      	ldr	r3, [sp, #4]
    adf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adf8:	1e5a      	subs	r2, r3, #1
    adfa:	490b      	ldr	r1, [pc, #44]	; (ae28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    adfc:	9b01      	ldr	r3, [sp, #4]
    adfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    ae02:	4a0a      	ldr	r2, [pc, #40]	; (ae2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    ae04:	9b01      	ldr	r3, [sp, #4]
    ae06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae0a:	f003 0301 	and.w	r3, r3, #1
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d106      	bne.n	ae20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    ae12:	4a05      	ldr	r2, [pc, #20]	; (ae28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    ae14:	9b01      	ldr	r3, [sp, #4]
    ae16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d100      	bne.n	ae20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae20:	bf00      	nop
    ae22:	b003      	add	sp, #12
    ae24:	f85d fb04 	ldr.w	pc, [sp], #4
    ae28:	1fff8dd4 	.word	0x1fff8dd4
    ae2c:	1fff8dd0 	.word	0x1fff8dd0

0000ae30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    ae30:	b500      	push	{lr}
    ae32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae34:	f7f5 fe98 	bl	b68 <Sys_GetCoreID>
    ae38:	4603      	mov	r3, r0
    ae3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    ae3c:	4a10      	ldr	r2, [pc, #64]	; (ae80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    ae3e:	9b01      	ldr	r3, [sp, #4]
    ae40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae44:	2b00      	cmp	r3, #0
    ae46:	d10d      	bne.n	ae64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae48:	f7f5 fdac 	bl	9a4 <Adc_schm_read_msr>
    ae4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae4e:	9b00      	ldr	r3, [sp, #0]
    ae50:	f003 0301 	and.w	r3, r3, #1
    ae54:	2b00      	cmp	r3, #0
    ae56:	d100      	bne.n	ae5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    ae5a:	490a      	ldr	r1, [pc, #40]	; (ae84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    ae5c:	9b01      	ldr	r3, [sp, #4]
    ae5e:	9a00      	ldr	r2, [sp, #0]
    ae60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    ae64:	4a06      	ldr	r2, [pc, #24]	; (ae80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    ae66:	9b01      	ldr	r3, [sp, #4]
    ae68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae6c:	1c5a      	adds	r2, r3, #1
    ae6e:	4904      	ldr	r1, [pc, #16]	; (ae80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae76:	bf00      	nop
    ae78:	b003      	add	sp, #12
    ae7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae7e:	bf00      	nop
    ae80:	1fff8ddc 	.word	0x1fff8ddc
    ae84:	1fff8dd8 	.word	0x1fff8dd8

0000ae88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    ae88:	b500      	push	{lr}
    ae8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae8c:	f7f5 fe6c 	bl	b68 <Sys_GetCoreID>
    ae90:	4603      	mov	r3, r0
    ae92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    ae94:	4a0d      	ldr	r2, [pc, #52]	; (aecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    ae96:	9b01      	ldr	r3, [sp, #4]
    ae98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae9c:	1e5a      	subs	r2, r3, #1
    ae9e:	490b      	ldr	r1, [pc, #44]	; (aecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    aea0:	9b01      	ldr	r3, [sp, #4]
    aea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    aea6:	4a0a      	ldr	r2, [pc, #40]	; (aed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    aea8:	9b01      	ldr	r3, [sp, #4]
    aeaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeae:	f003 0301 	and.w	r3, r3, #1
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	d106      	bne.n	aec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    aeb6:	4a05      	ldr	r2, [pc, #20]	; (aecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    aeb8:	9b01      	ldr	r3, [sp, #4]
    aeba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aebe:	2b00      	cmp	r3, #0
    aec0:	d100      	bne.n	aec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aec2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aec4:	bf00      	nop
    aec6:	b003      	add	sp, #12
    aec8:	f85d fb04 	ldr.w	pc, [sp], #4
    aecc:	1fff8ddc 	.word	0x1fff8ddc
    aed0:	1fff8dd8 	.word	0x1fff8dd8

0000aed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    aed4:	b500      	push	{lr}
    aed6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aed8:	f7f5 fe46 	bl	b68 <Sys_GetCoreID>
    aedc:	4603      	mov	r3, r0
    aede:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    aee0:	4a10      	ldr	r2, [pc, #64]	; (af24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    aee2:	9b01      	ldr	r3, [sp, #4]
    aee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aee8:	2b00      	cmp	r3, #0
    aeea:	d10d      	bne.n	af08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aeec:	f7f5 fd5a 	bl	9a4 <Adc_schm_read_msr>
    aef0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aef2:	9b00      	ldr	r3, [sp, #0]
    aef4:	f003 0301 	and.w	r3, r3, #1
    aef8:	2b00      	cmp	r3, #0
    aefa:	d100      	bne.n	aefe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aefc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    aefe:	490a      	ldr	r1, [pc, #40]	; (af28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    af00:	9b01      	ldr	r3, [sp, #4]
    af02:	9a00      	ldr	r2, [sp, #0]
    af04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    af08:	4a06      	ldr	r2, [pc, #24]	; (af24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    af0a:	9b01      	ldr	r3, [sp, #4]
    af0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af10:	1c5a      	adds	r2, r3, #1
    af12:	4904      	ldr	r1, [pc, #16]	; (af24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    af14:	9b01      	ldr	r3, [sp, #4]
    af16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af1a:	bf00      	nop
    af1c:	b003      	add	sp, #12
    af1e:	f85d fb04 	ldr.w	pc, [sp], #4
    af22:	bf00      	nop
    af24:	1fff8de4 	.word	0x1fff8de4
    af28:	1fff8de0 	.word	0x1fff8de0

0000af2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    af2c:	b500      	push	{lr}
    af2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af30:	f7f5 fe1a 	bl	b68 <Sys_GetCoreID>
    af34:	4603      	mov	r3, r0
    af36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    af38:	4a0d      	ldr	r2, [pc, #52]	; (af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    af3a:	9b01      	ldr	r3, [sp, #4]
    af3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af40:	1e5a      	subs	r2, r3, #1
    af42:	490b      	ldr	r1, [pc, #44]	; (af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    af44:	9b01      	ldr	r3, [sp, #4]
    af46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    af4a:	4a0a      	ldr	r2, [pc, #40]	; (af74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    af4c:	9b01      	ldr	r3, [sp, #4]
    af4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af52:	f003 0301 	and.w	r3, r3, #1
    af56:	2b00      	cmp	r3, #0
    af58:	d106      	bne.n	af68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    af5a:	4a05      	ldr	r2, [pc, #20]	; (af70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    af5c:	9b01      	ldr	r3, [sp, #4]
    af5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af62:	2b00      	cmp	r3, #0
    af64:	d100      	bne.n	af68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af68:	bf00      	nop
    af6a:	b003      	add	sp, #12
    af6c:	f85d fb04 	ldr.w	pc, [sp], #4
    af70:	1fff8de4 	.word	0x1fff8de4
    af74:	1fff8de0 	.word	0x1fff8de0

0000af78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    af78:	b500      	push	{lr}
    af7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af7c:	f7f5 fdf4 	bl	b68 <Sys_GetCoreID>
    af80:	4603      	mov	r3, r0
    af82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    af84:	4a10      	ldr	r2, [pc, #64]	; (afc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    af86:	9b01      	ldr	r3, [sp, #4]
    af88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af8c:	2b00      	cmp	r3, #0
    af8e:	d10d      	bne.n	afac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af90:	f7f5 fd08 	bl	9a4 <Adc_schm_read_msr>
    af94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af96:	9b00      	ldr	r3, [sp, #0]
    af98:	f003 0301 	and.w	r3, r3, #1
    af9c:	2b00      	cmp	r3, #0
    af9e:	d100      	bne.n	afa2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    afa2:	490a      	ldr	r1, [pc, #40]	; (afcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    afa4:	9b01      	ldr	r3, [sp, #4]
    afa6:	9a00      	ldr	r2, [sp, #0]
    afa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    afac:	4a06      	ldr	r2, [pc, #24]	; (afc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    afae:	9b01      	ldr	r3, [sp, #4]
    afb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afb4:	1c5a      	adds	r2, r3, #1
    afb6:	4904      	ldr	r1, [pc, #16]	; (afc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    afb8:	9b01      	ldr	r3, [sp, #4]
    afba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afbe:	bf00      	nop
    afc0:	b003      	add	sp, #12
    afc2:	f85d fb04 	ldr.w	pc, [sp], #4
    afc6:	bf00      	nop
    afc8:	1fff8dec 	.word	0x1fff8dec
    afcc:	1fff8de8 	.word	0x1fff8de8

0000afd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    afd0:	b500      	push	{lr}
    afd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afd4:	f7f5 fdc8 	bl	b68 <Sys_GetCoreID>
    afd8:	4603      	mov	r3, r0
    afda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    afdc:	4a0d      	ldr	r2, [pc, #52]	; (b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    afde:	9b01      	ldr	r3, [sp, #4]
    afe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afe4:	1e5a      	subs	r2, r3, #1
    afe6:	490b      	ldr	r1, [pc, #44]	; (b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    afe8:	9b01      	ldr	r3, [sp, #4]
    afea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    afee:	4a0a      	ldr	r2, [pc, #40]	; (b018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    aff0:	9b01      	ldr	r3, [sp, #4]
    aff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aff6:	f003 0301 	and.w	r3, r3, #1
    affa:	2b00      	cmp	r3, #0
    affc:	d106      	bne.n	b00c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    affe:	4a05      	ldr	r2, [pc, #20]	; (b014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b000:	9b01      	ldr	r3, [sp, #4]
    b002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b006:	2b00      	cmp	r3, #0
    b008:	d100      	bne.n	b00c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b00a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b00c:	bf00      	nop
    b00e:	b003      	add	sp, #12
    b010:	f85d fb04 	ldr.w	pc, [sp], #4
    b014:	1fff8dec 	.word	0x1fff8dec
    b018:	1fff8de8 	.word	0x1fff8de8

0000b01c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b01c:	b500      	push	{lr}
    b01e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b020:	f7f5 fda2 	bl	b68 <Sys_GetCoreID>
    b024:	4603      	mov	r3, r0
    b026:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b028:	4a10      	ldr	r2, [pc, #64]	; (b06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b02a:	9b01      	ldr	r3, [sp, #4]
    b02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b030:	2b00      	cmp	r3, #0
    b032:	d10d      	bne.n	b050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b034:	f7f5 fcb6 	bl	9a4 <Adc_schm_read_msr>
    b038:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b03a:	9b00      	ldr	r3, [sp, #0]
    b03c:	f003 0301 	and.w	r3, r3, #1
    b040:	2b00      	cmp	r3, #0
    b042:	d100      	bne.n	b046 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b044:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b046:	490a      	ldr	r1, [pc, #40]	; (b070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b048:	9b01      	ldr	r3, [sp, #4]
    b04a:	9a00      	ldr	r2, [sp, #0]
    b04c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b050:	4a06      	ldr	r2, [pc, #24]	; (b06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b052:	9b01      	ldr	r3, [sp, #4]
    b054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b058:	1c5a      	adds	r2, r3, #1
    b05a:	4904      	ldr	r1, [pc, #16]	; (b06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b062:	bf00      	nop
    b064:	b003      	add	sp, #12
    b066:	f85d fb04 	ldr.w	pc, [sp], #4
    b06a:	bf00      	nop
    b06c:	1fff8df4 	.word	0x1fff8df4
    b070:	1fff8df0 	.word	0x1fff8df0

0000b074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b074:	b500      	push	{lr}
    b076:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b078:	f7f5 fd76 	bl	b68 <Sys_GetCoreID>
    b07c:	4603      	mov	r3, r0
    b07e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b080:	4a0d      	ldr	r2, [pc, #52]	; (b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b082:	9b01      	ldr	r3, [sp, #4]
    b084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b088:	1e5a      	subs	r2, r3, #1
    b08a:	490b      	ldr	r1, [pc, #44]	; (b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b08c:	9b01      	ldr	r3, [sp, #4]
    b08e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b092:	4a0a      	ldr	r2, [pc, #40]	; (b0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b094:	9b01      	ldr	r3, [sp, #4]
    b096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b09a:	f003 0301 	and.w	r3, r3, #1
    b09e:	2b00      	cmp	r3, #0
    b0a0:	d106      	bne.n	b0b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b0a2:	4a05      	ldr	r2, [pc, #20]	; (b0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b0a4:	9b01      	ldr	r3, [sp, #4]
    b0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d100      	bne.n	b0b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0b0:	bf00      	nop
    b0b2:	b003      	add	sp, #12
    b0b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b0b8:	1fff8df4 	.word	0x1fff8df4
    b0bc:	1fff8df0 	.word	0x1fff8df0

0000b0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b0c0:	b500      	push	{lr}
    b0c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0c4:	f7f5 fd50 	bl	b68 <Sys_GetCoreID>
    b0c8:	4603      	mov	r3, r0
    b0ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b0cc:	4a10      	ldr	r2, [pc, #64]	; (b110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b0ce:	9b01      	ldr	r3, [sp, #4]
    b0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d10d      	bne.n	b0f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0d8:	f7f5 fc64 	bl	9a4 <Adc_schm_read_msr>
    b0dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0de:	9b00      	ldr	r3, [sp, #0]
    b0e0:	f003 0301 	and.w	r3, r3, #1
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d100      	bne.n	b0ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b0ea:	490a      	ldr	r1, [pc, #40]	; (b114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b0ec:	9b01      	ldr	r3, [sp, #4]
    b0ee:	9a00      	ldr	r2, [sp, #0]
    b0f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b0f4:	4a06      	ldr	r2, [pc, #24]	; (b110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b0f6:	9b01      	ldr	r3, [sp, #4]
    b0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0fc:	1c5a      	adds	r2, r3, #1
    b0fe:	4904      	ldr	r1, [pc, #16]	; (b110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b106:	bf00      	nop
    b108:	b003      	add	sp, #12
    b10a:	f85d fb04 	ldr.w	pc, [sp], #4
    b10e:	bf00      	nop
    b110:	1fff8dfc 	.word	0x1fff8dfc
    b114:	1fff8df8 	.word	0x1fff8df8

0000b118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b118:	b500      	push	{lr}
    b11a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b11c:	f7f5 fd24 	bl	b68 <Sys_GetCoreID>
    b120:	4603      	mov	r3, r0
    b122:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b124:	4a0d      	ldr	r2, [pc, #52]	; (b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b126:	9b01      	ldr	r3, [sp, #4]
    b128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b12c:	1e5a      	subs	r2, r3, #1
    b12e:	490b      	ldr	r1, [pc, #44]	; (b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b130:	9b01      	ldr	r3, [sp, #4]
    b132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b136:	4a0a      	ldr	r2, [pc, #40]	; (b160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b13e:	f003 0301 	and.w	r3, r3, #1
    b142:	2b00      	cmp	r3, #0
    b144:	d106      	bne.n	b154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b146:	4a05      	ldr	r2, [pc, #20]	; (b15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b148:	9b01      	ldr	r3, [sp, #4]
    b14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b14e:	2b00      	cmp	r3, #0
    b150:	d100      	bne.n	b154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b152:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b154:	bf00      	nop
    b156:	b003      	add	sp, #12
    b158:	f85d fb04 	ldr.w	pc, [sp], #4
    b15c:	1fff8dfc 	.word	0x1fff8dfc
    b160:	1fff8df8 	.word	0x1fff8df8

0000b164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b164:	b500      	push	{lr}
    b166:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b168:	f7f5 fcfe 	bl	b68 <Sys_GetCoreID>
    b16c:	4603      	mov	r3, r0
    b16e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b170:	4a10      	ldr	r2, [pc, #64]	; (b1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b172:	9b01      	ldr	r3, [sp, #4]
    b174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b178:	2b00      	cmp	r3, #0
    b17a:	d10d      	bne.n	b198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b17c:	f7f5 fc12 	bl	9a4 <Adc_schm_read_msr>
    b180:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b182:	9b00      	ldr	r3, [sp, #0]
    b184:	f003 0301 	and.w	r3, r3, #1
    b188:	2b00      	cmp	r3, #0
    b18a:	d100      	bne.n	b18e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b18c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b18e:	490a      	ldr	r1, [pc, #40]	; (b1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b190:	9b01      	ldr	r3, [sp, #4]
    b192:	9a00      	ldr	r2, [sp, #0]
    b194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b198:	4a06      	ldr	r2, [pc, #24]	; (b1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b19a:	9b01      	ldr	r3, [sp, #4]
    b19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a0:	1c5a      	adds	r2, r3, #1
    b1a2:	4904      	ldr	r1, [pc, #16]	; (b1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b1a4:	9b01      	ldr	r3, [sp, #4]
    b1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1aa:	bf00      	nop
    b1ac:	b003      	add	sp, #12
    b1ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b1b2:	bf00      	nop
    b1b4:	1fff8e04 	.word	0x1fff8e04
    b1b8:	1fff8e00 	.word	0x1fff8e00

0000b1bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b1bc:	b500      	push	{lr}
    b1be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1c0:	f7f5 fcd2 	bl	b68 <Sys_GetCoreID>
    b1c4:	4603      	mov	r3, r0
    b1c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b1c8:	4a0d      	ldr	r2, [pc, #52]	; (b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b1ca:	9b01      	ldr	r3, [sp, #4]
    b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d0:	1e5a      	subs	r2, r3, #1
    b1d2:	490b      	ldr	r1, [pc, #44]	; (b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b1d4:	9b01      	ldr	r3, [sp, #4]
    b1d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b1da:	4a0a      	ldr	r2, [pc, #40]	; (b204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b1dc:	9b01      	ldr	r3, [sp, #4]
    b1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1e2:	f003 0301 	and.w	r3, r3, #1
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d106      	bne.n	b1f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b1ea:	4a05      	ldr	r2, [pc, #20]	; (b200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b1ec:	9b01      	ldr	r3, [sp, #4]
    b1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d100      	bne.n	b1f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b1f8:	bf00      	nop
    b1fa:	b003      	add	sp, #12
    b1fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b200:	1fff8e04 	.word	0x1fff8e04
    b204:	1fff8e00 	.word	0x1fff8e00

0000b208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b208:	b500      	push	{lr}
    b20a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b20c:	f7f5 fcac 	bl	b68 <Sys_GetCoreID>
    b210:	4603      	mov	r3, r0
    b212:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b214:	4a10      	ldr	r2, [pc, #64]	; (b258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b216:	9b01      	ldr	r3, [sp, #4]
    b218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d10d      	bne.n	b23c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b220:	f7f5 fbc0 	bl	9a4 <Adc_schm_read_msr>
    b224:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b226:	9b00      	ldr	r3, [sp, #0]
    b228:	f003 0301 	and.w	r3, r3, #1
    b22c:	2b00      	cmp	r3, #0
    b22e:	d100      	bne.n	b232 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b230:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b232:	490a      	ldr	r1, [pc, #40]	; (b25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b234:	9b01      	ldr	r3, [sp, #4]
    b236:	9a00      	ldr	r2, [sp, #0]
    b238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b23c:	4a06      	ldr	r2, [pc, #24]	; (b258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b244:	1c5a      	adds	r2, r3, #1
    b246:	4904      	ldr	r1, [pc, #16]	; (b258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b248:	9b01      	ldr	r3, [sp, #4]
    b24a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b24e:	bf00      	nop
    b250:	b003      	add	sp, #12
    b252:	f85d fb04 	ldr.w	pc, [sp], #4
    b256:	bf00      	nop
    b258:	1fff8e0c 	.word	0x1fff8e0c
    b25c:	1fff8e08 	.word	0x1fff8e08

0000b260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b260:	b500      	push	{lr}
    b262:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b264:	f7f5 fc80 	bl	b68 <Sys_GetCoreID>
    b268:	4603      	mov	r3, r0
    b26a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b26c:	4a0d      	ldr	r2, [pc, #52]	; (b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b26e:	9b01      	ldr	r3, [sp, #4]
    b270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b274:	1e5a      	subs	r2, r3, #1
    b276:	490b      	ldr	r1, [pc, #44]	; (b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b278:	9b01      	ldr	r3, [sp, #4]
    b27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b27e:	4a0a      	ldr	r2, [pc, #40]	; (b2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b280:	9b01      	ldr	r3, [sp, #4]
    b282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b286:	f003 0301 	and.w	r3, r3, #1
    b28a:	2b00      	cmp	r3, #0
    b28c:	d106      	bne.n	b29c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b28e:	4a05      	ldr	r2, [pc, #20]	; (b2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b296:	2b00      	cmp	r3, #0
    b298:	d100      	bne.n	b29c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b29a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b29c:	bf00      	nop
    b29e:	b003      	add	sp, #12
    b2a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b2a4:	1fff8e0c 	.word	0x1fff8e0c
    b2a8:	1fff8e08 	.word	0x1fff8e08

0000b2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b2ac:	b500      	push	{lr}
    b2ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2b0:	f7f5 fc5a 	bl	b68 <Sys_GetCoreID>
    b2b4:	4603      	mov	r3, r0
    b2b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b2b8:	4a10      	ldr	r2, [pc, #64]	; (b2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b2ba:	9b01      	ldr	r3, [sp, #4]
    b2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d10d      	bne.n	b2e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2c4:	f7f5 fb6e 	bl	9a4 <Adc_schm_read_msr>
    b2c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2ca:	9b00      	ldr	r3, [sp, #0]
    b2cc:	f003 0301 	and.w	r3, r3, #1
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d100      	bne.n	b2d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b2d6:	490a      	ldr	r1, [pc, #40]	; (b300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b2d8:	9b01      	ldr	r3, [sp, #4]
    b2da:	9a00      	ldr	r2, [sp, #0]
    b2dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b2e0:	4a06      	ldr	r2, [pc, #24]	; (b2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b2e2:	9b01      	ldr	r3, [sp, #4]
    b2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e8:	1c5a      	adds	r2, r3, #1
    b2ea:	4904      	ldr	r1, [pc, #16]	; (b2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2f2:	bf00      	nop
    b2f4:	b003      	add	sp, #12
    b2f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2fa:	bf00      	nop
    b2fc:	1fff8e14 	.word	0x1fff8e14
    b300:	1fff8e10 	.word	0x1fff8e10

0000b304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b304:	b500      	push	{lr}
    b306:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b308:	f7f5 fc2e 	bl	b68 <Sys_GetCoreID>
    b30c:	4603      	mov	r3, r0
    b30e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b310:	4a0d      	ldr	r2, [pc, #52]	; (b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b312:	9b01      	ldr	r3, [sp, #4]
    b314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b318:	1e5a      	subs	r2, r3, #1
    b31a:	490b      	ldr	r1, [pc, #44]	; (b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b31c:	9b01      	ldr	r3, [sp, #4]
    b31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b322:	4a0a      	ldr	r2, [pc, #40]	; (b34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b32a:	f003 0301 	and.w	r3, r3, #1
    b32e:	2b00      	cmp	r3, #0
    b330:	d106      	bne.n	b340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b332:	4a05      	ldr	r2, [pc, #20]	; (b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b334:	9b01      	ldr	r3, [sp, #4]
    b336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b33a:	2b00      	cmp	r3, #0
    b33c:	d100      	bne.n	b340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b33e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b340:	bf00      	nop
    b342:	b003      	add	sp, #12
    b344:	f85d fb04 	ldr.w	pc, [sp], #4
    b348:	1fff8e14 	.word	0x1fff8e14
    b34c:	1fff8e10 	.word	0x1fff8e10

0000b350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b350:	b500      	push	{lr}
    b352:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b354:	f7f5 fc08 	bl	b68 <Sys_GetCoreID>
    b358:	4603      	mov	r3, r0
    b35a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    b35c:	4a10      	ldr	r2, [pc, #64]	; (b3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b35e:	9b01      	ldr	r3, [sp, #4]
    b360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b364:	2b00      	cmp	r3, #0
    b366:	d10d      	bne.n	b384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b368:	f7f5 fb1c 	bl	9a4 <Adc_schm_read_msr>
    b36c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b36e:	9b00      	ldr	r3, [sp, #0]
    b370:	f003 0301 	and.w	r3, r3, #1
    b374:	2b00      	cmp	r3, #0
    b376:	d100      	bne.n	b37a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b378:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b37a:	490a      	ldr	r1, [pc, #40]	; (b3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    b37c:	9b01      	ldr	r3, [sp, #4]
    b37e:	9a00      	ldr	r2, [sp, #0]
    b380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    b384:	4a06      	ldr	r2, [pc, #24]	; (b3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b386:	9b01      	ldr	r3, [sp, #4]
    b388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38c:	1c5a      	adds	r2, r3, #1
    b38e:	4904      	ldr	r1, [pc, #16]	; (b3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b396:	bf00      	nop
    b398:	b003      	add	sp, #12
    b39a:	f85d fb04 	ldr.w	pc, [sp], #4
    b39e:	bf00      	nop
    b3a0:	1fff8e1c 	.word	0x1fff8e1c
    b3a4:	1fff8e18 	.word	0x1fff8e18

0000b3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b3a8:	b500      	push	{lr}
    b3aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3ac:	f7f5 fbdc 	bl	b68 <Sys_GetCoreID>
    b3b0:	4603      	mov	r3, r0
    b3b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    b3b4:	4a0d      	ldr	r2, [pc, #52]	; (b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b3b6:	9b01      	ldr	r3, [sp, #4]
    b3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3bc:	1e5a      	subs	r2, r3, #1
    b3be:	490b      	ldr	r1, [pc, #44]	; (b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b3c0:	9b01      	ldr	r3, [sp, #4]
    b3c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b3c6:	4a0a      	ldr	r2, [pc, #40]	; (b3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ce:	f003 0301 	and.w	r3, r3, #1
    b3d2:	2b00      	cmp	r3, #0
    b3d4:	d106      	bne.n	b3e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    b3d6:	4a05      	ldr	r2, [pc, #20]	; (b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b3d8:	9b01      	ldr	r3, [sp, #4]
    b3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3de:	2b00      	cmp	r3, #0
    b3e0:	d100      	bne.n	b3e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3e4:	bf00      	nop
    b3e6:	b003      	add	sp, #12
    b3e8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ec:	1fff8e1c 	.word	0x1fff8e1c
    b3f0:	1fff8e18 	.word	0x1fff8e18

0000b3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b3f4:	b500      	push	{lr}
    b3f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3f8:	f7f5 fbb6 	bl	b68 <Sys_GetCoreID>
    b3fc:	4603      	mov	r3, r0
    b3fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    b400:	4a10      	ldr	r2, [pc, #64]	; (b444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b402:	9b01      	ldr	r3, [sp, #4]
    b404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b408:	2b00      	cmp	r3, #0
    b40a:	d10d      	bne.n	b428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b40c:	f7f5 faca 	bl	9a4 <Adc_schm_read_msr>
    b410:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b412:	9b00      	ldr	r3, [sp, #0]
    b414:	f003 0301 	and.w	r3, r3, #1
    b418:	2b00      	cmp	r3, #0
    b41a:	d100      	bne.n	b41e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b41c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b41e:	490a      	ldr	r1, [pc, #40]	; (b448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    b420:	9b01      	ldr	r3, [sp, #4]
    b422:	9a00      	ldr	r2, [sp, #0]
    b424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    b428:	4a06      	ldr	r2, [pc, #24]	; (b444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b42a:	9b01      	ldr	r3, [sp, #4]
    b42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b430:	1c5a      	adds	r2, r3, #1
    b432:	4904      	ldr	r1, [pc, #16]	; (b444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b434:	9b01      	ldr	r3, [sp, #4]
    b436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b43a:	bf00      	nop
    b43c:	b003      	add	sp, #12
    b43e:	f85d fb04 	ldr.w	pc, [sp], #4
    b442:	bf00      	nop
    b444:	1fff8e24 	.word	0x1fff8e24
    b448:	1fff8e20 	.word	0x1fff8e20

0000b44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b44c:	b500      	push	{lr}
    b44e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b450:	f7f5 fb8a 	bl	b68 <Sys_GetCoreID>
    b454:	4603      	mov	r3, r0
    b456:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    b458:	4a0d      	ldr	r2, [pc, #52]	; (b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b460:	1e5a      	subs	r2, r3, #1
    b462:	490b      	ldr	r1, [pc, #44]	; (b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b464:	9b01      	ldr	r3, [sp, #4]
    b466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b46a:	4a0a      	ldr	r2, [pc, #40]	; (b494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b472:	f003 0301 	and.w	r3, r3, #1
    b476:	2b00      	cmp	r3, #0
    b478:	d106      	bne.n	b488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    b47a:	4a05      	ldr	r2, [pc, #20]	; (b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b47c:	9b01      	ldr	r3, [sp, #4]
    b47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b482:	2b00      	cmp	r3, #0
    b484:	d100      	bne.n	b488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b486:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b488:	bf00      	nop
    b48a:	b003      	add	sp, #12
    b48c:	f85d fb04 	ldr.w	pc, [sp], #4
    b490:	1fff8e24 	.word	0x1fff8e24
    b494:	1fff8e20 	.word	0x1fff8e20

0000b498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b498:	b500      	push	{lr}
    b49a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b49c:	f7f5 fb64 	bl	b68 <Sys_GetCoreID>
    b4a0:	4603      	mov	r3, r0
    b4a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    b4a4:	4a10      	ldr	r2, [pc, #64]	; (b4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b4a6:	9b01      	ldr	r3, [sp, #4]
    b4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d10d      	bne.n	b4cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4b0:	f7f5 fa78 	bl	9a4 <Adc_schm_read_msr>
    b4b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4b6:	9b00      	ldr	r3, [sp, #0]
    b4b8:	f003 0301 	and.w	r3, r3, #1
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d100      	bne.n	b4c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b4c2:	490a      	ldr	r1, [pc, #40]	; (b4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    b4c4:	9b01      	ldr	r3, [sp, #4]
    b4c6:	9a00      	ldr	r2, [sp, #0]
    b4c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    b4cc:	4a06      	ldr	r2, [pc, #24]	; (b4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b4ce:	9b01      	ldr	r3, [sp, #4]
    b4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4d4:	1c5a      	adds	r2, r3, #1
    b4d6:	4904      	ldr	r1, [pc, #16]	; (b4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b4d8:	9b01      	ldr	r3, [sp, #4]
    b4da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4de:	bf00      	nop
    b4e0:	b003      	add	sp, #12
    b4e2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4e6:	bf00      	nop
    b4e8:	1fff8e2c 	.word	0x1fff8e2c
    b4ec:	1fff8e28 	.word	0x1fff8e28

0000b4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b4f0:	b500      	push	{lr}
    b4f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4f4:	f7f5 fb38 	bl	b68 <Sys_GetCoreID>
    b4f8:	4603      	mov	r3, r0
    b4fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    b4fc:	4a0d      	ldr	r2, [pc, #52]	; (b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b4fe:	9b01      	ldr	r3, [sp, #4]
    b500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b504:	1e5a      	subs	r2, r3, #1
    b506:	490b      	ldr	r1, [pc, #44]	; (b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b508:	9b01      	ldr	r3, [sp, #4]
    b50a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b50e:	4a0a      	ldr	r2, [pc, #40]	; (b538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    b510:	9b01      	ldr	r3, [sp, #4]
    b512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b516:	f003 0301 	and.w	r3, r3, #1
    b51a:	2b00      	cmp	r3, #0
    b51c:	d106      	bne.n	b52c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    b51e:	4a05      	ldr	r2, [pc, #20]	; (b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b520:	9b01      	ldr	r3, [sp, #4]
    b522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b526:	2b00      	cmp	r3, #0
    b528:	d100      	bne.n	b52c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b52a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b52c:	bf00      	nop
    b52e:	b003      	add	sp, #12
    b530:	f85d fb04 	ldr.w	pc, [sp], #4
    b534:	1fff8e2c 	.word	0x1fff8e2c
    b538:	1fff8e28 	.word	0x1fff8e28

0000b53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b53c:	b500      	push	{lr}
    b53e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b540:	f7f5 fb12 	bl	b68 <Sys_GetCoreID>
    b544:	4603      	mov	r3, r0
    b546:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    b548:	4a10      	ldr	r2, [pc, #64]	; (b58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b54a:	9b01      	ldr	r3, [sp, #4]
    b54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b550:	2b00      	cmp	r3, #0
    b552:	d10d      	bne.n	b570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b554:	f7f5 fa26 	bl	9a4 <Adc_schm_read_msr>
    b558:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b55a:	9b00      	ldr	r3, [sp, #0]
    b55c:	f003 0301 	and.w	r3, r3, #1
    b560:	2b00      	cmp	r3, #0
    b562:	d100      	bne.n	b566 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b564:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b566:	490a      	ldr	r1, [pc, #40]	; (b590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    b568:	9b01      	ldr	r3, [sp, #4]
    b56a:	9a00      	ldr	r2, [sp, #0]
    b56c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    b570:	4a06      	ldr	r2, [pc, #24]	; (b58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b572:	9b01      	ldr	r3, [sp, #4]
    b574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b578:	1c5a      	adds	r2, r3, #1
    b57a:	4904      	ldr	r1, [pc, #16]	; (b58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b57c:	9b01      	ldr	r3, [sp, #4]
    b57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b582:	bf00      	nop
    b584:	b003      	add	sp, #12
    b586:	f85d fb04 	ldr.w	pc, [sp], #4
    b58a:	bf00      	nop
    b58c:	1fff8e34 	.word	0x1fff8e34
    b590:	1fff8e30 	.word	0x1fff8e30

0000b594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b594:	b500      	push	{lr}
    b596:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b598:	f7f5 fae6 	bl	b68 <Sys_GetCoreID>
    b59c:	4603      	mov	r3, r0
    b59e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    b5a0:	4a0d      	ldr	r2, [pc, #52]	; (b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b5a2:	9b01      	ldr	r3, [sp, #4]
    b5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5a8:	1e5a      	subs	r2, r3, #1
    b5aa:	490b      	ldr	r1, [pc, #44]	; (b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b5ac:	9b01      	ldr	r3, [sp, #4]
    b5ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b5b2:	4a0a      	ldr	r2, [pc, #40]	; (b5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    b5b4:	9b01      	ldr	r3, [sp, #4]
    b5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ba:	f003 0301 	and.w	r3, r3, #1
    b5be:	2b00      	cmp	r3, #0
    b5c0:	d106      	bne.n	b5d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    b5c2:	4a05      	ldr	r2, [pc, #20]	; (b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b5c4:	9b01      	ldr	r3, [sp, #4]
    b5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d100      	bne.n	b5d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5d0:	bf00      	nop
    b5d2:	b003      	add	sp, #12
    b5d4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5d8:	1fff8e34 	.word	0x1fff8e34
    b5dc:	1fff8e30 	.word	0x1fff8e30

0000b5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b5e0:	b500      	push	{lr}
    b5e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5e4:	f7f5 fac0 	bl	b68 <Sys_GetCoreID>
    b5e8:	4603      	mov	r3, r0
    b5ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    b5ec:	4a10      	ldr	r2, [pc, #64]	; (b630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b5ee:	9b01      	ldr	r3, [sp, #4]
    b5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5f4:	2b00      	cmp	r3, #0
    b5f6:	d10d      	bne.n	b614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5f8:	f7f5 f9d4 	bl	9a4 <Adc_schm_read_msr>
    b5fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5fe:	9b00      	ldr	r3, [sp, #0]
    b600:	f003 0301 	and.w	r3, r3, #1
    b604:	2b00      	cmp	r3, #0
    b606:	d100      	bne.n	b60a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b608:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b60a:	490a      	ldr	r1, [pc, #40]	; (b634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    b60c:	9b01      	ldr	r3, [sp, #4]
    b60e:	9a00      	ldr	r2, [sp, #0]
    b610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    b614:	4a06      	ldr	r2, [pc, #24]	; (b630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b616:	9b01      	ldr	r3, [sp, #4]
    b618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b61c:	1c5a      	adds	r2, r3, #1
    b61e:	4904      	ldr	r1, [pc, #16]	; (b630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b620:	9b01      	ldr	r3, [sp, #4]
    b622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b626:	bf00      	nop
    b628:	b003      	add	sp, #12
    b62a:	f85d fb04 	ldr.w	pc, [sp], #4
    b62e:	bf00      	nop
    b630:	1fff8e3c 	.word	0x1fff8e3c
    b634:	1fff8e38 	.word	0x1fff8e38

0000b638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b638:	b500      	push	{lr}
    b63a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b63c:	f7f5 fa94 	bl	b68 <Sys_GetCoreID>
    b640:	4603      	mov	r3, r0
    b642:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    b644:	4a0d      	ldr	r2, [pc, #52]	; (b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b646:	9b01      	ldr	r3, [sp, #4]
    b648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b64c:	1e5a      	subs	r2, r3, #1
    b64e:	490b      	ldr	r1, [pc, #44]	; (b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b650:	9b01      	ldr	r3, [sp, #4]
    b652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b656:	4a0a      	ldr	r2, [pc, #40]	; (b680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b65e:	f003 0301 	and.w	r3, r3, #1
    b662:	2b00      	cmp	r3, #0
    b664:	d106      	bne.n	b674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    b666:	4a05      	ldr	r2, [pc, #20]	; (b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b668:	9b01      	ldr	r3, [sp, #4]
    b66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b66e:	2b00      	cmp	r3, #0
    b670:	d100      	bne.n	b674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b672:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b674:	bf00      	nop
    b676:	b003      	add	sp, #12
    b678:	f85d fb04 	ldr.w	pc, [sp], #4
    b67c:	1fff8e3c 	.word	0x1fff8e3c
    b680:	1fff8e38 	.word	0x1fff8e38

0000b684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b684:	b500      	push	{lr}
    b686:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b688:	f7f5 fa6e 	bl	b68 <Sys_GetCoreID>
    b68c:	4603      	mov	r3, r0
    b68e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    b690:	4a10      	ldr	r2, [pc, #64]	; (b6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b692:	9b01      	ldr	r3, [sp, #4]
    b694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b698:	2b00      	cmp	r3, #0
    b69a:	d10d      	bne.n	b6b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b69c:	f7f5 f982 	bl	9a4 <Adc_schm_read_msr>
    b6a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6a2:	9b00      	ldr	r3, [sp, #0]
    b6a4:	f003 0301 	and.w	r3, r3, #1
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d100      	bne.n	b6ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b6ae:	490a      	ldr	r1, [pc, #40]	; (b6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    b6b0:	9b01      	ldr	r3, [sp, #4]
    b6b2:	9a00      	ldr	r2, [sp, #0]
    b6b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    b6b8:	4a06      	ldr	r2, [pc, #24]	; (b6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b6ba:	9b01      	ldr	r3, [sp, #4]
    b6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c0:	1c5a      	adds	r2, r3, #1
    b6c2:	4904      	ldr	r1, [pc, #16]	; (b6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b6c4:	9b01      	ldr	r3, [sp, #4]
    b6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6ca:	bf00      	nop
    b6cc:	b003      	add	sp, #12
    b6ce:	f85d fb04 	ldr.w	pc, [sp], #4
    b6d2:	bf00      	nop
    b6d4:	1fff8e44 	.word	0x1fff8e44
    b6d8:	1fff8e40 	.word	0x1fff8e40

0000b6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b6dc:	b500      	push	{lr}
    b6de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6e0:	f7f5 fa42 	bl	b68 <Sys_GetCoreID>
    b6e4:	4603      	mov	r3, r0
    b6e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    b6e8:	4a0d      	ldr	r2, [pc, #52]	; (b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b6ea:	9b01      	ldr	r3, [sp, #4]
    b6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f0:	1e5a      	subs	r2, r3, #1
    b6f2:	490b      	ldr	r1, [pc, #44]	; (b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b6f4:	9b01      	ldr	r3, [sp, #4]
    b6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b6fa:	4a0a      	ldr	r2, [pc, #40]	; (b724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b702:	f003 0301 	and.w	r3, r3, #1
    b706:	2b00      	cmp	r3, #0
    b708:	d106      	bne.n	b718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    b70a:	4a05      	ldr	r2, [pc, #20]	; (b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b70c:	9b01      	ldr	r3, [sp, #4]
    b70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b712:	2b00      	cmp	r3, #0
    b714:	d100      	bne.n	b718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b716:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b718:	bf00      	nop
    b71a:	b003      	add	sp, #12
    b71c:	f85d fb04 	ldr.w	pc, [sp], #4
    b720:	1fff8e44 	.word	0x1fff8e44
    b724:	1fff8e40 	.word	0x1fff8e40

0000b728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b728:	b500      	push	{lr}
    b72a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b72c:	f7f5 fa1c 	bl	b68 <Sys_GetCoreID>
    b730:	4603      	mov	r3, r0
    b732:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    b734:	4a10      	ldr	r2, [pc, #64]	; (b778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b736:	9b01      	ldr	r3, [sp, #4]
    b738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b73c:	2b00      	cmp	r3, #0
    b73e:	d10d      	bne.n	b75c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b740:	f7f5 f930 	bl	9a4 <Adc_schm_read_msr>
    b744:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b746:	9b00      	ldr	r3, [sp, #0]
    b748:	f003 0301 	and.w	r3, r3, #1
    b74c:	2b00      	cmp	r3, #0
    b74e:	d100      	bne.n	b752 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b750:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b752:	490a      	ldr	r1, [pc, #40]	; (b77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    b754:	9b01      	ldr	r3, [sp, #4]
    b756:	9a00      	ldr	r2, [sp, #0]
    b758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    b75c:	4a06      	ldr	r2, [pc, #24]	; (b778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b75e:	9b01      	ldr	r3, [sp, #4]
    b760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b764:	1c5a      	adds	r2, r3, #1
    b766:	4904      	ldr	r1, [pc, #16]	; (b778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b768:	9b01      	ldr	r3, [sp, #4]
    b76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b76e:	bf00      	nop
    b770:	b003      	add	sp, #12
    b772:	f85d fb04 	ldr.w	pc, [sp], #4
    b776:	bf00      	nop
    b778:	1fff8e4c 	.word	0x1fff8e4c
    b77c:	1fff8e48 	.word	0x1fff8e48

0000b780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b780:	b500      	push	{lr}
    b782:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b784:	f7f5 f9f0 	bl	b68 <Sys_GetCoreID>
    b788:	4603      	mov	r3, r0
    b78a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    b78c:	4a0d      	ldr	r2, [pc, #52]	; (b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b78e:	9b01      	ldr	r3, [sp, #4]
    b790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b794:	1e5a      	subs	r2, r3, #1
    b796:	490b      	ldr	r1, [pc, #44]	; (b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b798:	9b01      	ldr	r3, [sp, #4]
    b79a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b79e:	4a0a      	ldr	r2, [pc, #40]	; (b7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7a6:	f003 0301 	and.w	r3, r3, #1
    b7aa:	2b00      	cmp	r3, #0
    b7ac:	d106      	bne.n	b7bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    b7ae:	4a05      	ldr	r2, [pc, #20]	; (b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b7b0:	9b01      	ldr	r3, [sp, #4]
    b7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d100      	bne.n	b7bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7bc:	bf00      	nop
    b7be:	b003      	add	sp, #12
    b7c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c4:	1fff8e4c 	.word	0x1fff8e4c
    b7c8:	1fff8e48 	.word	0x1fff8e48

0000b7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b7cc:	b500      	push	{lr}
    b7ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7d0:	f7f5 f9ca 	bl	b68 <Sys_GetCoreID>
    b7d4:	4603      	mov	r3, r0
    b7d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    b7d8:	4a10      	ldr	r2, [pc, #64]	; (b81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b7da:	9b01      	ldr	r3, [sp, #4]
    b7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d10d      	bne.n	b800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7e4:	f7f5 f8de 	bl	9a4 <Adc_schm_read_msr>
    b7e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7ea:	9b00      	ldr	r3, [sp, #0]
    b7ec:	f003 0301 	and.w	r3, r3, #1
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d100      	bne.n	b7f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b7f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b7f6:	490a      	ldr	r1, [pc, #40]	; (b820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    b7f8:	9b01      	ldr	r3, [sp, #4]
    b7fa:	9a00      	ldr	r2, [sp, #0]
    b7fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    b800:	4a06      	ldr	r2, [pc, #24]	; (b81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b802:	9b01      	ldr	r3, [sp, #4]
    b804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b808:	1c5a      	adds	r2, r3, #1
    b80a:	4904      	ldr	r1, [pc, #16]	; (b81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b80c:	9b01      	ldr	r3, [sp, #4]
    b80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b812:	bf00      	nop
    b814:	b003      	add	sp, #12
    b816:	f85d fb04 	ldr.w	pc, [sp], #4
    b81a:	bf00      	nop
    b81c:	1fff8e54 	.word	0x1fff8e54
    b820:	1fff8e50 	.word	0x1fff8e50

0000b824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b824:	b500      	push	{lr}
    b826:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b828:	f7f5 f99e 	bl	b68 <Sys_GetCoreID>
    b82c:	4603      	mov	r3, r0
    b82e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    b830:	4a0d      	ldr	r2, [pc, #52]	; (b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b832:	9b01      	ldr	r3, [sp, #4]
    b834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b838:	1e5a      	subs	r2, r3, #1
    b83a:	490b      	ldr	r1, [pc, #44]	; (b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b83c:	9b01      	ldr	r3, [sp, #4]
    b83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b842:	4a0a      	ldr	r2, [pc, #40]	; (b86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    b844:	9b01      	ldr	r3, [sp, #4]
    b846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b84a:	f003 0301 	and.w	r3, r3, #1
    b84e:	2b00      	cmp	r3, #0
    b850:	d106      	bne.n	b860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    b852:	4a05      	ldr	r2, [pc, #20]	; (b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b854:	9b01      	ldr	r3, [sp, #4]
    b856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d100      	bne.n	b860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b85e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b860:	bf00      	nop
    b862:	b003      	add	sp, #12
    b864:	f85d fb04 	ldr.w	pc, [sp], #4
    b868:	1fff8e54 	.word	0x1fff8e54
    b86c:	1fff8e50 	.word	0x1fff8e50

0000b870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b870:	b500      	push	{lr}
    b872:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b874:	f7f5 f978 	bl	b68 <Sys_GetCoreID>
    b878:	4603      	mov	r3, r0
    b87a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    b87c:	4a10      	ldr	r2, [pc, #64]	; (b8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b884:	2b00      	cmp	r3, #0
    b886:	d10d      	bne.n	b8a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b888:	f7f5 f88c 	bl	9a4 <Adc_schm_read_msr>
    b88c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b88e:	9b00      	ldr	r3, [sp, #0]
    b890:	f003 0301 	and.w	r3, r3, #1
    b894:	2b00      	cmp	r3, #0
    b896:	d100      	bne.n	b89a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b898:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b89a:	490a      	ldr	r1, [pc, #40]	; (b8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    b89c:	9b01      	ldr	r3, [sp, #4]
    b89e:	9a00      	ldr	r2, [sp, #0]
    b8a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    b8a4:	4a06      	ldr	r2, [pc, #24]	; (b8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b8a6:	9b01      	ldr	r3, [sp, #4]
    b8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ac:	1c5a      	adds	r2, r3, #1
    b8ae:	4904      	ldr	r1, [pc, #16]	; (b8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b8b0:	9b01      	ldr	r3, [sp, #4]
    b8b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8b6:	bf00      	nop
    b8b8:	b003      	add	sp, #12
    b8ba:	f85d fb04 	ldr.w	pc, [sp], #4
    b8be:	bf00      	nop
    b8c0:	1fff8e5c 	.word	0x1fff8e5c
    b8c4:	1fff8e58 	.word	0x1fff8e58

0000b8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b8c8:	b500      	push	{lr}
    b8ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8cc:	f7f5 f94c 	bl	b68 <Sys_GetCoreID>
    b8d0:	4603      	mov	r3, r0
    b8d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    b8d4:	4a0d      	ldr	r2, [pc, #52]	; (b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b8d6:	9b01      	ldr	r3, [sp, #4]
    b8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8dc:	1e5a      	subs	r2, r3, #1
    b8de:	490b      	ldr	r1, [pc, #44]	; (b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b8e0:	9b01      	ldr	r3, [sp, #4]
    b8e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b8e6:	4a0a      	ldr	r2, [pc, #40]	; (b910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    b8e8:	9b01      	ldr	r3, [sp, #4]
    b8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ee:	f003 0301 	and.w	r3, r3, #1
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	d106      	bne.n	b904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    b8f6:	4a05      	ldr	r2, [pc, #20]	; (b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b8f8:	9b01      	ldr	r3, [sp, #4]
    b8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8fe:	2b00      	cmp	r3, #0
    b900:	d100      	bne.n	b904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b902:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b904:	bf00      	nop
    b906:	b003      	add	sp, #12
    b908:	f85d fb04 	ldr.w	pc, [sp], #4
    b90c:	1fff8e5c 	.word	0x1fff8e5c
    b910:	1fff8e58 	.word	0x1fff8e58

0000b914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    b914:	b500      	push	{lr}
    b916:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b918:	f7f5 f926 	bl	b68 <Sys_GetCoreID>
    b91c:	4603      	mov	r3, r0
    b91e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    b920:	4a10      	ldr	r2, [pc, #64]	; (b964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b922:	9b01      	ldr	r3, [sp, #4]
    b924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b928:	2b00      	cmp	r3, #0
    b92a:	d10d      	bne.n	b948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b92c:	f7f5 f83a 	bl	9a4 <Adc_schm_read_msr>
    b930:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b932:	9b00      	ldr	r3, [sp, #0]
    b934:	f003 0301 	and.w	r3, r3, #1
    b938:	2b00      	cmp	r3, #0
    b93a:	d100      	bne.n	b93e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b93c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b93e:	490a      	ldr	r1, [pc, #40]	; (b968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    b940:	9b01      	ldr	r3, [sp, #4]
    b942:	9a00      	ldr	r2, [sp, #0]
    b944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    b948:	4a06      	ldr	r2, [pc, #24]	; (b964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b94a:	9b01      	ldr	r3, [sp, #4]
    b94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b950:	1c5a      	adds	r2, r3, #1
    b952:	4904      	ldr	r1, [pc, #16]	; (b964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b954:	9b01      	ldr	r3, [sp, #4]
    b956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b95a:	bf00      	nop
    b95c:	b003      	add	sp, #12
    b95e:	f85d fb04 	ldr.w	pc, [sp], #4
    b962:	bf00      	nop
    b964:	1fff8e64 	.word	0x1fff8e64
    b968:	1fff8e60 	.word	0x1fff8e60

0000b96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    b96c:	b500      	push	{lr}
    b96e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b970:	f7f5 f8fa 	bl	b68 <Sys_GetCoreID>
    b974:	4603      	mov	r3, r0
    b976:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    b978:	4a0d      	ldr	r2, [pc, #52]	; (b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    b97a:	9b01      	ldr	r3, [sp, #4]
    b97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b980:	1e5a      	subs	r2, r3, #1
    b982:	490b      	ldr	r1, [pc, #44]	; (b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    b984:	9b01      	ldr	r3, [sp, #4]
    b986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    b98a:	4a0a      	ldr	r2, [pc, #40]	; (b9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    b98c:	9b01      	ldr	r3, [sp, #4]
    b98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b992:	f003 0301 	and.w	r3, r3, #1
    b996:	2b00      	cmp	r3, #0
    b998:	d106      	bne.n	b9a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    b99a:	4a05      	ldr	r2, [pc, #20]	; (b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    b99c:	9b01      	ldr	r3, [sp, #4]
    b99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d100      	bne.n	b9a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9a8:	bf00      	nop
    b9aa:	b003      	add	sp, #12
    b9ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b9b0:	1fff8e64 	.word	0x1fff8e64
    b9b4:	1fff8e60 	.word	0x1fff8e60

0000b9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    b9b8:	b500      	push	{lr}
    b9ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9bc:	f7f5 f8d4 	bl	b68 <Sys_GetCoreID>
    b9c0:	4603      	mov	r3, r0
    b9c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    b9c4:	4a10      	ldr	r2, [pc, #64]	; (ba08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    b9c6:	9b01      	ldr	r3, [sp, #4]
    b9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d10d      	bne.n	b9ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9d0:	f7f4 ffe8 	bl	9a4 <Adc_schm_read_msr>
    b9d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9d6:	9b00      	ldr	r3, [sp, #0]
    b9d8:	f003 0301 	and.w	r3, r3, #1
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d100      	bne.n	b9e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    b9e2:	490a      	ldr	r1, [pc, #40]	; (ba0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    b9e4:	9b01      	ldr	r3, [sp, #4]
    b9e6:	9a00      	ldr	r2, [sp, #0]
    b9e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    b9ec:	4a06      	ldr	r2, [pc, #24]	; (ba08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    b9ee:	9b01      	ldr	r3, [sp, #4]
    b9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9f4:	1c5a      	adds	r2, r3, #1
    b9f6:	4904      	ldr	r1, [pc, #16]	; (ba08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    b9f8:	9b01      	ldr	r3, [sp, #4]
    b9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b9fe:	bf00      	nop
    ba00:	b003      	add	sp, #12
    ba02:	f85d fb04 	ldr.w	pc, [sp], #4
    ba06:	bf00      	nop
    ba08:	1fff8e6c 	.word	0x1fff8e6c
    ba0c:	1fff8e68 	.word	0x1fff8e68

0000ba10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    ba10:	b500      	push	{lr}
    ba12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba14:	f7f5 f8a8 	bl	b68 <Sys_GetCoreID>
    ba18:	4603      	mov	r3, r0
    ba1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    ba1c:	4a0d      	ldr	r2, [pc, #52]	; (ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ba1e:	9b01      	ldr	r3, [sp, #4]
    ba20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba24:	1e5a      	subs	r2, r3, #1
    ba26:	490b      	ldr	r1, [pc, #44]	; (ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ba28:	9b01      	ldr	r3, [sp, #4]
    ba2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    ba2e:	4a0a      	ldr	r2, [pc, #40]	; (ba58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    ba30:	9b01      	ldr	r3, [sp, #4]
    ba32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba36:	f003 0301 	and.w	r3, r3, #1
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d106      	bne.n	ba4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    ba3e:	4a05      	ldr	r2, [pc, #20]	; (ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ba40:	9b01      	ldr	r3, [sp, #4]
    ba42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d100      	bne.n	ba4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba4c:	bf00      	nop
    ba4e:	b003      	add	sp, #12
    ba50:	f85d fb04 	ldr.w	pc, [sp], #4
    ba54:	1fff8e6c 	.word	0x1fff8e6c
    ba58:	1fff8e68 	.word	0x1fff8e68

0000ba5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ba5c:	b500      	push	{lr}
    ba5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba60:	f7f5 f882 	bl	b68 <Sys_GetCoreID>
    ba64:	4603      	mov	r3, r0
    ba66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    ba68:	4a10      	ldr	r2, [pc, #64]	; (baac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ba6a:	9b01      	ldr	r3, [sp, #4]
    ba6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba70:	2b00      	cmp	r3, #0
    ba72:	d10d      	bne.n	ba90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba74:	f7f4 ff96 	bl	9a4 <Adc_schm_read_msr>
    ba78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba7a:	9b00      	ldr	r3, [sp, #0]
    ba7c:	f003 0301 	and.w	r3, r3, #1
    ba80:	2b00      	cmp	r3, #0
    ba82:	d100      	bne.n	ba86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ba86:	490a      	ldr	r1, [pc, #40]	; (bab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    ba88:	9b01      	ldr	r3, [sp, #4]
    ba8a:	9a00      	ldr	r2, [sp, #0]
    ba8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    ba90:	4a06      	ldr	r2, [pc, #24]	; (baac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ba92:	9b01      	ldr	r3, [sp, #4]
    ba94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba98:	1c5a      	adds	r2, r3, #1
    ba9a:	4904      	ldr	r1, [pc, #16]	; (baac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ba9c:	9b01      	ldr	r3, [sp, #4]
    ba9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    baa2:	bf00      	nop
    baa4:	b003      	add	sp, #12
    baa6:	f85d fb04 	ldr.w	pc, [sp], #4
    baaa:	bf00      	nop
    baac:	1fff8e74 	.word	0x1fff8e74
    bab0:	1fff8e70 	.word	0x1fff8e70

0000bab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bab4:	b500      	push	{lr}
    bab6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bab8:	f7f5 f856 	bl	b68 <Sys_GetCoreID>
    babc:	4603      	mov	r3, r0
    babe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    bac0:	4a0d      	ldr	r2, [pc, #52]	; (baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bac2:	9b01      	ldr	r3, [sp, #4]
    bac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bac8:	1e5a      	subs	r2, r3, #1
    baca:	490b      	ldr	r1, [pc, #44]	; (baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bacc:	9b01      	ldr	r3, [sp, #4]
    bace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    bad2:	4a0a      	ldr	r2, [pc, #40]	; (bafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    bad4:	9b01      	ldr	r3, [sp, #4]
    bad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bada:	f003 0301 	and.w	r3, r3, #1
    bade:	2b00      	cmp	r3, #0
    bae0:	d106      	bne.n	baf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    bae2:	4a05      	ldr	r2, [pc, #20]	; (baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bae4:	9b01      	ldr	r3, [sp, #4]
    bae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baea:	2b00      	cmp	r3, #0
    baec:	d100      	bne.n	baf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    baee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    baf0:	bf00      	nop
    baf2:	b003      	add	sp, #12
    baf4:	f85d fb04 	ldr.w	pc, [sp], #4
    baf8:	1fff8e74 	.word	0x1fff8e74
    bafc:	1fff8e70 	.word	0x1fff8e70

0000bb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bb00:	b500      	push	{lr}
    bb02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb04:	f7f5 f830 	bl	b68 <Sys_GetCoreID>
    bb08:	4603      	mov	r3, r0
    bb0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    bb0c:	4a10      	ldr	r2, [pc, #64]	; (bb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bb0e:	9b01      	ldr	r3, [sp, #4]
    bb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb14:	2b00      	cmp	r3, #0
    bb16:	d10d      	bne.n	bb34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb18:	f7f4 ff44 	bl	9a4 <Adc_schm_read_msr>
    bb1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb1e:	9b00      	ldr	r3, [sp, #0]
    bb20:	f003 0301 	and.w	r3, r3, #1
    bb24:	2b00      	cmp	r3, #0
    bb26:	d100      	bne.n	bb2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    bb2a:	490a      	ldr	r1, [pc, #40]	; (bb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    bb2c:	9b01      	ldr	r3, [sp, #4]
    bb2e:	9a00      	ldr	r2, [sp, #0]
    bb30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    bb34:	4a06      	ldr	r2, [pc, #24]	; (bb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bb36:	9b01      	ldr	r3, [sp, #4]
    bb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb3c:	1c5a      	adds	r2, r3, #1
    bb3e:	4904      	ldr	r1, [pc, #16]	; (bb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bb40:	9b01      	ldr	r3, [sp, #4]
    bb42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb46:	bf00      	nop
    bb48:	b003      	add	sp, #12
    bb4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb4e:	bf00      	nop
    bb50:	1fff8e7c 	.word	0x1fff8e7c
    bb54:	1fff8e78 	.word	0x1fff8e78

0000bb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bb58:	b500      	push	{lr}
    bb5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb5c:	f7f5 f804 	bl	b68 <Sys_GetCoreID>
    bb60:	4603      	mov	r3, r0
    bb62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    bb64:	4a0d      	ldr	r2, [pc, #52]	; (bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bb66:	9b01      	ldr	r3, [sp, #4]
    bb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb6c:	1e5a      	subs	r2, r3, #1
    bb6e:	490b      	ldr	r1, [pc, #44]	; (bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bb70:	9b01      	ldr	r3, [sp, #4]
    bb72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    bb76:	4a0a      	ldr	r2, [pc, #40]	; (bba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    bb78:	9b01      	ldr	r3, [sp, #4]
    bb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb7e:	f003 0301 	and.w	r3, r3, #1
    bb82:	2b00      	cmp	r3, #0
    bb84:	d106      	bne.n	bb94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    bb86:	4a05      	ldr	r2, [pc, #20]	; (bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bb88:	9b01      	ldr	r3, [sp, #4]
    bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d100      	bne.n	bb94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb94:	bf00      	nop
    bb96:	b003      	add	sp, #12
    bb98:	f85d fb04 	ldr.w	pc, [sp], #4
    bb9c:	1fff8e7c 	.word	0x1fff8e7c
    bba0:	1fff8e78 	.word	0x1fff8e78

0000bba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bba4:	b500      	push	{lr}
    bba6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bba8:	f7f4 ffde 	bl	b68 <Sys_GetCoreID>
    bbac:	4603      	mov	r3, r0
    bbae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    bbb0:	4a10      	ldr	r2, [pc, #64]	; (bbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bbb2:	9b01      	ldr	r3, [sp, #4]
    bbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d10d      	bne.n	bbd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbbc:	f7f4 fef2 	bl	9a4 <Adc_schm_read_msr>
    bbc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbc2:	9b00      	ldr	r3, [sp, #0]
    bbc4:	f003 0301 	and.w	r3, r3, #1
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d100      	bne.n	bbce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    bbce:	490a      	ldr	r1, [pc, #40]	; (bbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    bbd0:	9b01      	ldr	r3, [sp, #4]
    bbd2:	9a00      	ldr	r2, [sp, #0]
    bbd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    bbd8:	4a06      	ldr	r2, [pc, #24]	; (bbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bbda:	9b01      	ldr	r3, [sp, #4]
    bbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbe0:	1c5a      	adds	r2, r3, #1
    bbe2:	4904      	ldr	r1, [pc, #16]	; (bbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbea:	bf00      	nop
    bbec:	b003      	add	sp, #12
    bbee:	f85d fb04 	ldr.w	pc, [sp], #4
    bbf2:	bf00      	nop
    bbf4:	1fff8e84 	.word	0x1fff8e84
    bbf8:	1fff8e80 	.word	0x1fff8e80

0000bbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bbfc:	b500      	push	{lr}
    bbfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc00:	f7f4 ffb2 	bl	b68 <Sys_GetCoreID>
    bc04:	4603      	mov	r3, r0
    bc06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    bc08:	4a0d      	ldr	r2, [pc, #52]	; (bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bc0a:	9b01      	ldr	r3, [sp, #4]
    bc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc10:	1e5a      	subs	r2, r3, #1
    bc12:	490b      	ldr	r1, [pc, #44]	; (bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bc14:	9b01      	ldr	r3, [sp, #4]
    bc16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    bc1a:	4a0a      	ldr	r2, [pc, #40]	; (bc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    bc1c:	9b01      	ldr	r3, [sp, #4]
    bc1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc22:	f003 0301 	and.w	r3, r3, #1
    bc26:	2b00      	cmp	r3, #0
    bc28:	d106      	bne.n	bc38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    bc2a:	4a05      	ldr	r2, [pc, #20]	; (bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bc2c:	9b01      	ldr	r3, [sp, #4]
    bc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc32:	2b00      	cmp	r3, #0
    bc34:	d100      	bne.n	bc38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc38:	bf00      	nop
    bc3a:	b003      	add	sp, #12
    bc3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bc40:	1fff8e84 	.word	0x1fff8e84
    bc44:	1fff8e80 	.word	0x1fff8e80

0000bc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bc48:	b500      	push	{lr}
    bc4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc4c:	f7f4 ff8c 	bl	b68 <Sys_GetCoreID>
    bc50:	4603      	mov	r3, r0
    bc52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    bc54:	4a10      	ldr	r2, [pc, #64]	; (bc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bc56:	9b01      	ldr	r3, [sp, #4]
    bc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d10d      	bne.n	bc7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc60:	f7f4 fea0 	bl	9a4 <Adc_schm_read_msr>
    bc64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc66:	9b00      	ldr	r3, [sp, #0]
    bc68:	f003 0301 	and.w	r3, r3, #1
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d100      	bne.n	bc72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    bc72:	490a      	ldr	r1, [pc, #40]	; (bc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    bc74:	9b01      	ldr	r3, [sp, #4]
    bc76:	9a00      	ldr	r2, [sp, #0]
    bc78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    bc7c:	4a06      	ldr	r2, [pc, #24]	; (bc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bc7e:	9b01      	ldr	r3, [sp, #4]
    bc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc84:	1c5a      	adds	r2, r3, #1
    bc86:	4904      	ldr	r1, [pc, #16]	; (bc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bc88:	9b01      	ldr	r3, [sp, #4]
    bc8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc8e:	bf00      	nop
    bc90:	b003      	add	sp, #12
    bc92:	f85d fb04 	ldr.w	pc, [sp], #4
    bc96:	bf00      	nop
    bc98:	1fff8e8c 	.word	0x1fff8e8c
    bc9c:	1fff8e88 	.word	0x1fff8e88

0000bca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bca0:	b500      	push	{lr}
    bca2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bca4:	f7f4 ff60 	bl	b68 <Sys_GetCoreID>
    bca8:	4603      	mov	r3, r0
    bcaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    bcac:	4a0d      	ldr	r2, [pc, #52]	; (bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcb4:	1e5a      	subs	r2, r3, #1
    bcb6:	490b      	ldr	r1, [pc, #44]	; (bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bcb8:	9b01      	ldr	r3, [sp, #4]
    bcba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    bcbe:	4a0a      	ldr	r2, [pc, #40]	; (bce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    bcc0:	9b01      	ldr	r3, [sp, #4]
    bcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcc6:	f003 0301 	and.w	r3, r3, #1
    bcca:	2b00      	cmp	r3, #0
    bccc:	d106      	bne.n	bcdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    bcce:	4a05      	ldr	r2, [pc, #20]	; (bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	d100      	bne.n	bcdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bcda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bcdc:	bf00      	nop
    bcde:	b003      	add	sp, #12
    bce0:	f85d fb04 	ldr.w	pc, [sp], #4
    bce4:	1fff8e8c 	.word	0x1fff8e8c
    bce8:	1fff8e88 	.word	0x1fff8e88

0000bcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bcec:	b500      	push	{lr}
    bcee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcf0:	f7f4 ff3a 	bl	b68 <Sys_GetCoreID>
    bcf4:	4603      	mov	r3, r0
    bcf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    bcf8:	4a10      	ldr	r2, [pc, #64]	; (bd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bcfa:	9b01      	ldr	r3, [sp, #4]
    bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd00:	2b00      	cmp	r3, #0
    bd02:	d10d      	bne.n	bd20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd04:	f7f4 fe4e 	bl	9a4 <Adc_schm_read_msr>
    bd08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd0a:	9b00      	ldr	r3, [sp, #0]
    bd0c:	f003 0301 	and.w	r3, r3, #1
    bd10:	2b00      	cmp	r3, #0
    bd12:	d100      	bne.n	bd16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    bd16:	490a      	ldr	r1, [pc, #40]	; (bd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    bd18:	9b01      	ldr	r3, [sp, #4]
    bd1a:	9a00      	ldr	r2, [sp, #0]
    bd1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    bd20:	4a06      	ldr	r2, [pc, #24]	; (bd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bd22:	9b01      	ldr	r3, [sp, #4]
    bd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd28:	1c5a      	adds	r2, r3, #1
    bd2a:	4904      	ldr	r1, [pc, #16]	; (bd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bd2c:	9b01      	ldr	r3, [sp, #4]
    bd2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd32:	bf00      	nop
    bd34:	b003      	add	sp, #12
    bd36:	f85d fb04 	ldr.w	pc, [sp], #4
    bd3a:	bf00      	nop
    bd3c:	1fff8e94 	.word	0x1fff8e94
    bd40:	1fff8e90 	.word	0x1fff8e90

0000bd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bd44:	b500      	push	{lr}
    bd46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd48:	f7f4 ff0e 	bl	b68 <Sys_GetCoreID>
    bd4c:	4603      	mov	r3, r0
    bd4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    bd50:	4a0d      	ldr	r2, [pc, #52]	; (bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd58:	1e5a      	subs	r2, r3, #1
    bd5a:	490b      	ldr	r1, [pc, #44]	; (bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bd5c:	9b01      	ldr	r3, [sp, #4]
    bd5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    bd62:	4a0a      	ldr	r2, [pc, #40]	; (bd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd6a:	f003 0301 	and.w	r3, r3, #1
    bd6e:	2b00      	cmp	r3, #0
    bd70:	d106      	bne.n	bd80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    bd72:	4a05      	ldr	r2, [pc, #20]	; (bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bd74:	9b01      	ldr	r3, [sp, #4]
    bd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd7a:	2b00      	cmp	r3, #0
    bd7c:	d100      	bne.n	bd80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd80:	bf00      	nop
    bd82:	b003      	add	sp, #12
    bd84:	f85d fb04 	ldr.w	pc, [sp], #4
    bd88:	1fff8e94 	.word	0x1fff8e94
    bd8c:	1fff8e90 	.word	0x1fff8e90

0000bd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    bd90:	b500      	push	{lr}
    bd92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd94:	f7f4 fee8 	bl	b68 <Sys_GetCoreID>
    bd98:	4603      	mov	r3, r0
    bd9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    bd9c:	4a10      	ldr	r2, [pc, #64]	; (bde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bd9e:	9b01      	ldr	r3, [sp, #4]
    bda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bda4:	2b00      	cmp	r3, #0
    bda6:	d10d      	bne.n	bdc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bda8:	f7f4 fdfc 	bl	9a4 <Adc_schm_read_msr>
    bdac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdae:	9b00      	ldr	r3, [sp, #0]
    bdb0:	f003 0301 	and.w	r3, r3, #1
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	d100      	bne.n	bdba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    bdba:	490a      	ldr	r1, [pc, #40]	; (bde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    bdbc:	9b01      	ldr	r3, [sp, #4]
    bdbe:	9a00      	ldr	r2, [sp, #0]
    bdc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    bdc4:	4a06      	ldr	r2, [pc, #24]	; (bde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bdc6:	9b01      	ldr	r3, [sp, #4]
    bdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdcc:	1c5a      	adds	r2, r3, #1
    bdce:	4904      	ldr	r1, [pc, #16]	; (bde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdd6:	bf00      	nop
    bdd8:	b003      	add	sp, #12
    bdda:	f85d fb04 	ldr.w	pc, [sp], #4
    bdde:	bf00      	nop
    bde0:	1fff8e9c 	.word	0x1fff8e9c
    bde4:	1fff8e98 	.word	0x1fff8e98

0000bde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    bde8:	b500      	push	{lr}
    bdea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdec:	f7f4 febc 	bl	b68 <Sys_GetCoreID>
    bdf0:	4603      	mov	r3, r0
    bdf2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    bdf4:	4a0d      	ldr	r2, [pc, #52]	; (be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    bdf6:	9b01      	ldr	r3, [sp, #4]
    bdf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdfc:	1e5a      	subs	r2, r3, #1
    bdfe:	490b      	ldr	r1, [pc, #44]	; (be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    be00:	9b01      	ldr	r3, [sp, #4]
    be02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    be06:	4a0a      	ldr	r2, [pc, #40]	; (be30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be0e:	f003 0301 	and.w	r3, r3, #1
    be12:	2b00      	cmp	r3, #0
    be14:	d106      	bne.n	be24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    be16:	4a05      	ldr	r2, [pc, #20]	; (be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be1e:	2b00      	cmp	r3, #0
    be20:	d100      	bne.n	be24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be24:	bf00      	nop
    be26:	b003      	add	sp, #12
    be28:	f85d fb04 	ldr.w	pc, [sp], #4
    be2c:	1fff8e9c 	.word	0x1fff8e9c
    be30:	1fff8e98 	.word	0x1fff8e98

0000be34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    be34:	b500      	push	{lr}
    be36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be38:	f7f4 fe96 	bl	b68 <Sys_GetCoreID>
    be3c:	4603      	mov	r3, r0
    be3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    be40:	4a10      	ldr	r2, [pc, #64]	; (be84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    be42:	9b01      	ldr	r3, [sp, #4]
    be44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be48:	2b00      	cmp	r3, #0
    be4a:	d10d      	bne.n	be68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be4c:	f7f4 fdaa 	bl	9a4 <Adc_schm_read_msr>
    be50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be52:	9b00      	ldr	r3, [sp, #0]
    be54:	f003 0301 	and.w	r3, r3, #1
    be58:	2b00      	cmp	r3, #0
    be5a:	d100      	bne.n	be5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    be5e:	490a      	ldr	r1, [pc, #40]	; (be88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    be60:	9b01      	ldr	r3, [sp, #4]
    be62:	9a00      	ldr	r2, [sp, #0]
    be64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    be68:	4a06      	ldr	r2, [pc, #24]	; (be84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    be6a:	9b01      	ldr	r3, [sp, #4]
    be6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be70:	1c5a      	adds	r2, r3, #1
    be72:	4904      	ldr	r1, [pc, #16]	; (be84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    be74:	9b01      	ldr	r3, [sp, #4]
    be76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be7a:	bf00      	nop
    be7c:	b003      	add	sp, #12
    be7e:	f85d fb04 	ldr.w	pc, [sp], #4
    be82:	bf00      	nop
    be84:	1fff8ea4 	.word	0x1fff8ea4
    be88:	1fff8ea0 	.word	0x1fff8ea0

0000be8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    be8c:	b500      	push	{lr}
    be8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be90:	f7f4 fe6a 	bl	b68 <Sys_GetCoreID>
    be94:	4603      	mov	r3, r0
    be96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    be98:	4a0d      	ldr	r2, [pc, #52]	; (bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    be9a:	9b01      	ldr	r3, [sp, #4]
    be9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea0:	1e5a      	subs	r2, r3, #1
    bea2:	490b      	ldr	r1, [pc, #44]	; (bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    beaa:	4a0a      	ldr	r2, [pc, #40]	; (bed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    beac:	9b01      	ldr	r3, [sp, #4]
    beae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beb2:	f003 0301 	and.w	r3, r3, #1
    beb6:	2b00      	cmp	r3, #0
    beb8:	d106      	bne.n	bec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    beba:	4a05      	ldr	r2, [pc, #20]	; (bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bec2:	2b00      	cmp	r3, #0
    bec4:	d100      	bne.n	bec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bec6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bec8:	bf00      	nop
    beca:	b003      	add	sp, #12
    becc:	f85d fb04 	ldr.w	pc, [sp], #4
    bed0:	1fff8ea4 	.word	0x1fff8ea4
    bed4:	1fff8ea0 	.word	0x1fff8ea0

0000bed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    bed8:	b500      	push	{lr}
    beda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bedc:	f7f4 fe44 	bl	b68 <Sys_GetCoreID>
    bee0:	4603      	mov	r3, r0
    bee2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    bee4:	4a10      	ldr	r2, [pc, #64]	; (bf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bee6:	9b01      	ldr	r3, [sp, #4]
    bee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beec:	2b00      	cmp	r3, #0
    beee:	d10d      	bne.n	bf0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bef0:	f7f4 fd58 	bl	9a4 <Adc_schm_read_msr>
    bef4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bef6:	9b00      	ldr	r3, [sp, #0]
    bef8:	f003 0301 	and.w	r3, r3, #1
    befc:	2b00      	cmp	r3, #0
    befe:	d100      	bne.n	bf02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    bf02:	490a      	ldr	r1, [pc, #40]	; (bf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    bf04:	9b01      	ldr	r3, [sp, #4]
    bf06:	9a00      	ldr	r2, [sp, #0]
    bf08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    bf0c:	4a06      	ldr	r2, [pc, #24]	; (bf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bf0e:	9b01      	ldr	r3, [sp, #4]
    bf10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf14:	1c5a      	adds	r2, r3, #1
    bf16:	4904      	ldr	r1, [pc, #16]	; (bf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bf18:	9b01      	ldr	r3, [sp, #4]
    bf1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf1e:	bf00      	nop
    bf20:	b003      	add	sp, #12
    bf22:	f85d fb04 	ldr.w	pc, [sp], #4
    bf26:	bf00      	nop
    bf28:	1fff8eac 	.word	0x1fff8eac
    bf2c:	1fff8ea8 	.word	0x1fff8ea8

0000bf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    bf30:	b500      	push	{lr}
    bf32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf34:	f7f4 fe18 	bl	b68 <Sys_GetCoreID>
    bf38:	4603      	mov	r3, r0
    bf3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    bf3c:	4a0d      	ldr	r2, [pc, #52]	; (bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bf3e:	9b01      	ldr	r3, [sp, #4]
    bf40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf44:	1e5a      	subs	r2, r3, #1
    bf46:	490b      	ldr	r1, [pc, #44]	; (bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bf48:	9b01      	ldr	r3, [sp, #4]
    bf4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    bf4e:	4a0a      	ldr	r2, [pc, #40]	; (bf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    bf50:	9b01      	ldr	r3, [sp, #4]
    bf52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf56:	f003 0301 	and.w	r3, r3, #1
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d106      	bne.n	bf6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    bf5e:	4a05      	ldr	r2, [pc, #20]	; (bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf66:	2b00      	cmp	r3, #0
    bf68:	d100      	bne.n	bf6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf6c:	bf00      	nop
    bf6e:	b003      	add	sp, #12
    bf70:	f85d fb04 	ldr.w	pc, [sp], #4
    bf74:	1fff8eac 	.word	0x1fff8eac
    bf78:	1fff8ea8 	.word	0x1fff8ea8

0000bf7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    bf7c:	b500      	push	{lr}
    bf7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf80:	f7f4 fdf2 	bl	b68 <Sys_GetCoreID>
    bf84:	4603      	mov	r3, r0
    bf86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    bf88:	4a10      	ldr	r2, [pc, #64]	; (bfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    bf8a:	9b01      	ldr	r3, [sp, #4]
    bf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf90:	2b00      	cmp	r3, #0
    bf92:	d10d      	bne.n	bfb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf94:	f7f4 fd06 	bl	9a4 <Adc_schm_read_msr>
    bf98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf9a:	9b00      	ldr	r3, [sp, #0]
    bf9c:	f003 0301 	and.w	r3, r3, #1
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	d100      	bne.n	bfa6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    bfa6:	490a      	ldr	r1, [pc, #40]	; (bfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    bfa8:	9b01      	ldr	r3, [sp, #4]
    bfaa:	9a00      	ldr	r2, [sp, #0]
    bfac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    bfb0:	4a06      	ldr	r2, [pc, #24]	; (bfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    bfb2:	9b01      	ldr	r3, [sp, #4]
    bfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb8:	1c5a      	adds	r2, r3, #1
    bfba:	4904      	ldr	r1, [pc, #16]	; (bfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    bfbc:	9b01      	ldr	r3, [sp, #4]
    bfbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfc2:	bf00      	nop
    bfc4:	b003      	add	sp, #12
    bfc6:	f85d fb04 	ldr.w	pc, [sp], #4
    bfca:	bf00      	nop
    bfcc:	1fff8eb4 	.word	0x1fff8eb4
    bfd0:	1fff8eb0 	.word	0x1fff8eb0

0000bfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    bfd4:	b500      	push	{lr}
    bfd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfd8:	f7f4 fdc6 	bl	b68 <Sys_GetCoreID>
    bfdc:	4603      	mov	r3, r0
    bfde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    bfe0:	4a0d      	ldr	r2, [pc, #52]	; (c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    bfe2:	9b01      	ldr	r3, [sp, #4]
    bfe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfe8:	1e5a      	subs	r2, r3, #1
    bfea:	490b      	ldr	r1, [pc, #44]	; (c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    bfec:	9b01      	ldr	r3, [sp, #4]
    bfee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    bff2:	4a0a      	ldr	r2, [pc, #40]	; (c01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    bff4:	9b01      	ldr	r3, [sp, #4]
    bff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bffa:	f003 0301 	and.w	r3, r3, #1
    bffe:	2b00      	cmp	r3, #0
    c000:	d106      	bne.n	c010 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c002:	4a05      	ldr	r2, [pc, #20]	; (c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c004:	9b01      	ldr	r3, [sp, #4]
    c006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c00a:	2b00      	cmp	r3, #0
    c00c:	d100      	bne.n	c010 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c00e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c010:	bf00      	nop
    c012:	b003      	add	sp, #12
    c014:	f85d fb04 	ldr.w	pc, [sp], #4
    c018:	1fff8eb4 	.word	0x1fff8eb4
    c01c:	1fff8eb0 	.word	0x1fff8eb0

0000c020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c020:	b500      	push	{lr}
    c022:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c024:	f7f4 fda0 	bl	b68 <Sys_GetCoreID>
    c028:	4603      	mov	r3, r0
    c02a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c02c:	4a10      	ldr	r2, [pc, #64]	; (c070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c02e:	9b01      	ldr	r3, [sp, #4]
    c030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c034:	2b00      	cmp	r3, #0
    c036:	d10d      	bne.n	c054 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c038:	f7f4 fcb4 	bl	9a4 <Adc_schm_read_msr>
    c03c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c03e:	9b00      	ldr	r3, [sp, #0]
    c040:	f003 0301 	and.w	r3, r3, #1
    c044:	2b00      	cmp	r3, #0
    c046:	d100      	bne.n	c04a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c048:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c04a:	490a      	ldr	r1, [pc, #40]	; (c074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c04c:	9b01      	ldr	r3, [sp, #4]
    c04e:	9a00      	ldr	r2, [sp, #0]
    c050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c054:	4a06      	ldr	r2, [pc, #24]	; (c070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c056:	9b01      	ldr	r3, [sp, #4]
    c058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c05c:	1c5a      	adds	r2, r3, #1
    c05e:	4904      	ldr	r1, [pc, #16]	; (c070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c066:	bf00      	nop
    c068:	b003      	add	sp, #12
    c06a:	f85d fb04 	ldr.w	pc, [sp], #4
    c06e:	bf00      	nop
    c070:	1fff8ebc 	.word	0x1fff8ebc
    c074:	1fff8eb8 	.word	0x1fff8eb8

0000c078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c078:	b500      	push	{lr}
    c07a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c07c:	f7f4 fd74 	bl	b68 <Sys_GetCoreID>
    c080:	4603      	mov	r3, r0
    c082:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c084:	4a0d      	ldr	r2, [pc, #52]	; (c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c086:	9b01      	ldr	r3, [sp, #4]
    c088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c08c:	1e5a      	subs	r2, r3, #1
    c08e:	490b      	ldr	r1, [pc, #44]	; (c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c090:	9b01      	ldr	r3, [sp, #4]
    c092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c096:	4a0a      	ldr	r2, [pc, #40]	; (c0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c098:	9b01      	ldr	r3, [sp, #4]
    c09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c09e:	f003 0301 	and.w	r3, r3, #1
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d106      	bne.n	c0b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c0a6:	4a05      	ldr	r2, [pc, #20]	; (c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d100      	bne.n	c0b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0b4:	bf00      	nop
    c0b6:	b003      	add	sp, #12
    c0b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c0bc:	1fff8ebc 	.word	0x1fff8ebc
    c0c0:	1fff8eb8 	.word	0x1fff8eb8

0000c0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c0c4:	b500      	push	{lr}
    c0c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0c8:	f7f4 fd4e 	bl	b68 <Sys_GetCoreID>
    c0cc:	4603      	mov	r3, r0
    c0ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c0d0:	4a10      	ldr	r2, [pc, #64]	; (c114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c0d2:	9b01      	ldr	r3, [sp, #4]
    c0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d10d      	bne.n	c0f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0dc:	f7f4 fc62 	bl	9a4 <Adc_schm_read_msr>
    c0e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0e2:	9b00      	ldr	r3, [sp, #0]
    c0e4:	f003 0301 	and.w	r3, r3, #1
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d100      	bne.n	c0ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c0ee:	490a      	ldr	r1, [pc, #40]	; (c118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c0f0:	9b01      	ldr	r3, [sp, #4]
    c0f2:	9a00      	ldr	r2, [sp, #0]
    c0f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c0f8:	4a06      	ldr	r2, [pc, #24]	; (c114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c0fa:	9b01      	ldr	r3, [sp, #4]
    c0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c100:	1c5a      	adds	r2, r3, #1
    c102:	4904      	ldr	r1, [pc, #16]	; (c114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c104:	9b01      	ldr	r3, [sp, #4]
    c106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c10a:	bf00      	nop
    c10c:	b003      	add	sp, #12
    c10e:	f85d fb04 	ldr.w	pc, [sp], #4
    c112:	bf00      	nop
    c114:	1fff8ec4 	.word	0x1fff8ec4
    c118:	1fff8ec0 	.word	0x1fff8ec0

0000c11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c11c:	b500      	push	{lr}
    c11e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c120:	f7f4 fd22 	bl	b68 <Sys_GetCoreID>
    c124:	4603      	mov	r3, r0
    c126:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c128:	4a0d      	ldr	r2, [pc, #52]	; (c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c12a:	9b01      	ldr	r3, [sp, #4]
    c12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c130:	1e5a      	subs	r2, r3, #1
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c134:	9b01      	ldr	r3, [sp, #4]
    c136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c13a:	4a0a      	ldr	r2, [pc, #40]	; (c164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c13c:	9b01      	ldr	r3, [sp, #4]
    c13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c142:	f003 0301 	and.w	r3, r3, #1
    c146:	2b00      	cmp	r3, #0
    c148:	d106      	bne.n	c158 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c14a:	4a05      	ldr	r2, [pc, #20]	; (c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c152:	2b00      	cmp	r3, #0
    c154:	d100      	bne.n	c158 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c156:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c158:	bf00      	nop
    c15a:	b003      	add	sp, #12
    c15c:	f85d fb04 	ldr.w	pc, [sp], #4
    c160:	1fff8ec4 	.word	0x1fff8ec4
    c164:	1fff8ec0 	.word	0x1fff8ec0

0000c168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c168:	b500      	push	{lr}
    c16a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c16c:	f7f4 fcfc 	bl	b68 <Sys_GetCoreID>
    c170:	4603      	mov	r3, r0
    c172:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c174:	4a10      	ldr	r2, [pc, #64]	; (c1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c176:	9b01      	ldr	r3, [sp, #4]
    c178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c17c:	2b00      	cmp	r3, #0
    c17e:	d10d      	bne.n	c19c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c180:	f7f4 fc10 	bl	9a4 <Adc_schm_read_msr>
    c184:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c186:	9b00      	ldr	r3, [sp, #0]
    c188:	f003 0301 	and.w	r3, r3, #1
    c18c:	2b00      	cmp	r3, #0
    c18e:	d100      	bne.n	c192 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c190:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c192:	490a      	ldr	r1, [pc, #40]	; (c1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c194:	9b01      	ldr	r3, [sp, #4]
    c196:	9a00      	ldr	r2, [sp, #0]
    c198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c19c:	4a06      	ldr	r2, [pc, #24]	; (c1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c19e:	9b01      	ldr	r3, [sp, #4]
    c1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1a4:	1c5a      	adds	r2, r3, #1
    c1a6:	4904      	ldr	r1, [pc, #16]	; (c1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c1a8:	9b01      	ldr	r3, [sp, #4]
    c1aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1ae:	bf00      	nop
    c1b0:	b003      	add	sp, #12
    c1b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c1b6:	bf00      	nop
    c1b8:	1fff8ecc 	.word	0x1fff8ecc
    c1bc:	1fff8ec8 	.word	0x1fff8ec8

0000c1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c1c0:	b500      	push	{lr}
    c1c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1c4:	f7f4 fcd0 	bl	b68 <Sys_GetCoreID>
    c1c8:	4603      	mov	r3, r0
    c1ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c1cc:	4a0d      	ldr	r2, [pc, #52]	; (c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c1ce:	9b01      	ldr	r3, [sp, #4]
    c1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1d4:	1e5a      	subs	r2, r3, #1
    c1d6:	490b      	ldr	r1, [pc, #44]	; (c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c1d8:	9b01      	ldr	r3, [sp, #4]
    c1da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c1de:	4a0a      	ldr	r2, [pc, #40]	; (c208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c1e0:	9b01      	ldr	r3, [sp, #4]
    c1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1e6:	f003 0301 	and.w	r3, r3, #1
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	d106      	bne.n	c1fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c1ee:	4a05      	ldr	r2, [pc, #20]	; (c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c1f0:	9b01      	ldr	r3, [sp, #4]
    c1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	d100      	bne.n	c1fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c1fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c1fc:	bf00      	nop
    c1fe:	b003      	add	sp, #12
    c200:	f85d fb04 	ldr.w	pc, [sp], #4
    c204:	1fff8ecc 	.word	0x1fff8ecc
    c208:	1fff8ec8 	.word	0x1fff8ec8

0000c20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c20c:	b500      	push	{lr}
    c20e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c210:	f7f4 fcaa 	bl	b68 <Sys_GetCoreID>
    c214:	4603      	mov	r3, r0
    c216:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c218:	4a10      	ldr	r2, [pc, #64]	; (c25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c21a:	9b01      	ldr	r3, [sp, #4]
    c21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c220:	2b00      	cmp	r3, #0
    c222:	d10d      	bne.n	c240 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c224:	f7f4 fbbe 	bl	9a4 <Adc_schm_read_msr>
    c228:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c22a:	9b00      	ldr	r3, [sp, #0]
    c22c:	f003 0301 	and.w	r3, r3, #1
    c230:	2b00      	cmp	r3, #0
    c232:	d100      	bne.n	c236 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c234:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c236:	490a      	ldr	r1, [pc, #40]	; (c260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c238:	9b01      	ldr	r3, [sp, #4]
    c23a:	9a00      	ldr	r2, [sp, #0]
    c23c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c240:	4a06      	ldr	r2, [pc, #24]	; (c25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c242:	9b01      	ldr	r3, [sp, #4]
    c244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c248:	1c5a      	adds	r2, r3, #1
    c24a:	4904      	ldr	r1, [pc, #16]	; (c25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c24c:	9b01      	ldr	r3, [sp, #4]
    c24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c252:	bf00      	nop
    c254:	b003      	add	sp, #12
    c256:	f85d fb04 	ldr.w	pc, [sp], #4
    c25a:	bf00      	nop
    c25c:	1fff8ed4 	.word	0x1fff8ed4
    c260:	1fff8ed0 	.word	0x1fff8ed0

0000c264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c264:	b500      	push	{lr}
    c266:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c268:	f7f4 fc7e 	bl	b68 <Sys_GetCoreID>
    c26c:	4603      	mov	r3, r0
    c26e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c270:	4a0d      	ldr	r2, [pc, #52]	; (c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c278:	1e5a      	subs	r2, r3, #1
    c27a:	490b      	ldr	r1, [pc, #44]	; (c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c27c:	9b01      	ldr	r3, [sp, #4]
    c27e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c282:	4a0a      	ldr	r2, [pc, #40]	; (c2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c28a:	f003 0301 	and.w	r3, r3, #1
    c28e:	2b00      	cmp	r3, #0
    c290:	d106      	bne.n	c2a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c292:	4a05      	ldr	r2, [pc, #20]	; (c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c29a:	2b00      	cmp	r3, #0
    c29c:	d100      	bne.n	c2a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c29e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2a0:	bf00      	nop
    c2a2:	b003      	add	sp, #12
    c2a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a8:	1fff8ed4 	.word	0x1fff8ed4
    c2ac:	1fff8ed0 	.word	0x1fff8ed0

0000c2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c2b0:	b500      	push	{lr}
    c2b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2b4:	f7f4 fc58 	bl	b68 <Sys_GetCoreID>
    c2b8:	4603      	mov	r3, r0
    c2ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c2bc:	4a10      	ldr	r2, [pc, #64]	; (c300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c2be:	9b01      	ldr	r3, [sp, #4]
    c2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d10d      	bne.n	c2e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2c8:	f7f4 fb6c 	bl	9a4 <Adc_schm_read_msr>
    c2cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2ce:	9b00      	ldr	r3, [sp, #0]
    c2d0:	f003 0301 	and.w	r3, r3, #1
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d100      	bne.n	c2da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c2da:	490a      	ldr	r1, [pc, #40]	; (c304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c2dc:	9b01      	ldr	r3, [sp, #4]
    c2de:	9a00      	ldr	r2, [sp, #0]
    c2e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c2e4:	4a06      	ldr	r2, [pc, #24]	; (c300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c2e6:	9b01      	ldr	r3, [sp, #4]
    c2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2ec:	1c5a      	adds	r2, r3, #1
    c2ee:	4904      	ldr	r1, [pc, #16]	; (c300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2f6:	bf00      	nop
    c2f8:	b003      	add	sp, #12
    c2fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c2fe:	bf00      	nop
    c300:	1fff8edc 	.word	0x1fff8edc
    c304:	1fff8ed8 	.word	0x1fff8ed8

0000c308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c308:	b500      	push	{lr}
    c30a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c30c:	f7f4 fc2c 	bl	b68 <Sys_GetCoreID>
    c310:	4603      	mov	r3, r0
    c312:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c314:	4a0d      	ldr	r2, [pc, #52]	; (c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c316:	9b01      	ldr	r3, [sp, #4]
    c318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c31c:	1e5a      	subs	r2, r3, #1
    c31e:	490b      	ldr	r1, [pc, #44]	; (c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c320:	9b01      	ldr	r3, [sp, #4]
    c322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c326:	4a0a      	ldr	r2, [pc, #40]	; (c350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c328:	9b01      	ldr	r3, [sp, #4]
    c32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c32e:	f003 0301 	and.w	r3, r3, #1
    c332:	2b00      	cmp	r3, #0
    c334:	d106      	bne.n	c344 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c336:	4a05      	ldr	r2, [pc, #20]	; (c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c338:	9b01      	ldr	r3, [sp, #4]
    c33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33e:	2b00      	cmp	r3, #0
    c340:	d100      	bne.n	c344 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c342:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c344:	bf00      	nop
    c346:	b003      	add	sp, #12
    c348:	f85d fb04 	ldr.w	pc, [sp], #4
    c34c:	1fff8edc 	.word	0x1fff8edc
    c350:	1fff8ed8 	.word	0x1fff8ed8

0000c354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c354:	b500      	push	{lr}
    c356:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c358:	f7f4 fc06 	bl	b68 <Sys_GetCoreID>
    c35c:	4603      	mov	r3, r0
    c35e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    c360:	4a10      	ldr	r2, [pc, #64]	; (c3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c362:	9b01      	ldr	r3, [sp, #4]
    c364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c368:	2b00      	cmp	r3, #0
    c36a:	d10d      	bne.n	c388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c36c:	f7f4 fb1a 	bl	9a4 <Adc_schm_read_msr>
    c370:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c372:	9b00      	ldr	r3, [sp, #0]
    c374:	f003 0301 	and.w	r3, r3, #1
    c378:	2b00      	cmp	r3, #0
    c37a:	d100      	bne.n	c37e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c37c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    c37e:	490a      	ldr	r1, [pc, #40]	; (c3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    c380:	9b01      	ldr	r3, [sp, #4]
    c382:	9a00      	ldr	r2, [sp, #0]
    c384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    c388:	4a06      	ldr	r2, [pc, #24]	; (c3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c38a:	9b01      	ldr	r3, [sp, #4]
    c38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c390:	1c5a      	adds	r2, r3, #1
    c392:	4904      	ldr	r1, [pc, #16]	; (c3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c39a:	bf00      	nop
    c39c:	b003      	add	sp, #12
    c39e:	f85d fb04 	ldr.w	pc, [sp], #4
    c3a2:	bf00      	nop
    c3a4:	1fff8ee4 	.word	0x1fff8ee4
    c3a8:	1fff8ee0 	.word	0x1fff8ee0

0000c3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c3ac:	b500      	push	{lr}
    c3ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3b0:	f7f4 fbda 	bl	b68 <Sys_GetCoreID>
    c3b4:	4603      	mov	r3, r0
    c3b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    c3b8:	4a0d      	ldr	r2, [pc, #52]	; (c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c3ba:	9b01      	ldr	r3, [sp, #4]
    c3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3c0:	1e5a      	subs	r2, r3, #1
    c3c2:	490b      	ldr	r1, [pc, #44]	; (c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c3c4:	9b01      	ldr	r3, [sp, #4]
    c3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    c3ca:	4a0a      	ldr	r2, [pc, #40]	; (c3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d2:	f003 0301 	and.w	r3, r3, #1
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d106      	bne.n	c3e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    c3da:	4a05      	ldr	r2, [pc, #20]	; (c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c3dc:	9b01      	ldr	r3, [sp, #4]
    c3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d100      	bne.n	c3e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3e8:	bf00      	nop
    c3ea:	b003      	add	sp, #12
    c3ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c3f0:	1fff8ee4 	.word	0x1fff8ee4
    c3f4:	1fff8ee0 	.word	0x1fff8ee0

0000c3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c3f8:	b500      	push	{lr}
    c3fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3fc:	f7f4 fbb4 	bl	b68 <Sys_GetCoreID>
    c400:	4603      	mov	r3, r0
    c402:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    c404:	4a10      	ldr	r2, [pc, #64]	; (c448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c406:	9b01      	ldr	r3, [sp, #4]
    c408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c40c:	2b00      	cmp	r3, #0
    c40e:	d10d      	bne.n	c42c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c410:	f7f4 fac8 	bl	9a4 <Adc_schm_read_msr>
    c414:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c416:	9b00      	ldr	r3, [sp, #0]
    c418:	f003 0301 	and.w	r3, r3, #1
    c41c:	2b00      	cmp	r3, #0
    c41e:	d100      	bne.n	c422 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c420:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    c422:	490a      	ldr	r1, [pc, #40]	; (c44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    c424:	9b01      	ldr	r3, [sp, #4]
    c426:	9a00      	ldr	r2, [sp, #0]
    c428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    c42c:	4a06      	ldr	r2, [pc, #24]	; (c448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c42e:	9b01      	ldr	r3, [sp, #4]
    c430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c434:	1c5a      	adds	r2, r3, #1
    c436:	4904      	ldr	r1, [pc, #16]	; (c448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c43e:	bf00      	nop
    c440:	b003      	add	sp, #12
    c442:	f85d fb04 	ldr.w	pc, [sp], #4
    c446:	bf00      	nop
    c448:	1fff8eec 	.word	0x1fff8eec
    c44c:	1fff8ee8 	.word	0x1fff8ee8

0000c450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c450:	b500      	push	{lr}
    c452:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c454:	f7f4 fb88 	bl	b68 <Sys_GetCoreID>
    c458:	4603      	mov	r3, r0
    c45a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    c45c:	4a0d      	ldr	r2, [pc, #52]	; (c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c45e:	9b01      	ldr	r3, [sp, #4]
    c460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c464:	1e5a      	subs	r2, r3, #1
    c466:	490b      	ldr	r1, [pc, #44]	; (c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c468:	9b01      	ldr	r3, [sp, #4]
    c46a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    c46e:	4a0a      	ldr	r2, [pc, #40]	; (c498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c476:	f003 0301 	and.w	r3, r3, #1
    c47a:	2b00      	cmp	r3, #0
    c47c:	d106      	bne.n	c48c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    c47e:	4a05      	ldr	r2, [pc, #20]	; (c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c480:	9b01      	ldr	r3, [sp, #4]
    c482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c486:	2b00      	cmp	r3, #0
    c488:	d100      	bne.n	c48c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c48a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c48c:	bf00      	nop
    c48e:	b003      	add	sp, #12
    c490:	f85d fb04 	ldr.w	pc, [sp], #4
    c494:	1fff8eec 	.word	0x1fff8eec
    c498:	1fff8ee8 	.word	0x1fff8ee8

0000c49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c49c:	b500      	push	{lr}
    c49e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4a0:	f7f4 fb62 	bl	b68 <Sys_GetCoreID>
    c4a4:	4603      	mov	r3, r0
    c4a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    c4a8:	4a10      	ldr	r2, [pc, #64]	; (c4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c4aa:	9b01      	ldr	r3, [sp, #4]
    c4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d10d      	bne.n	c4d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4b4:	f7f4 fa76 	bl	9a4 <Adc_schm_read_msr>
    c4b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4ba:	9b00      	ldr	r3, [sp, #0]
    c4bc:	f003 0301 	and.w	r3, r3, #1
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d100      	bne.n	c4c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    c4c6:	490a      	ldr	r1, [pc, #40]	; (c4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    c4c8:	9b01      	ldr	r3, [sp, #4]
    c4ca:	9a00      	ldr	r2, [sp, #0]
    c4cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    c4d0:	4a06      	ldr	r2, [pc, #24]	; (c4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c4d2:	9b01      	ldr	r3, [sp, #4]
    c4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d8:	1c5a      	adds	r2, r3, #1
    c4da:	4904      	ldr	r1, [pc, #16]	; (c4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c4dc:	9b01      	ldr	r3, [sp, #4]
    c4de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4e2:	bf00      	nop
    c4e4:	b003      	add	sp, #12
    c4e6:	f85d fb04 	ldr.w	pc, [sp], #4
    c4ea:	bf00      	nop
    c4ec:	1fff8ef4 	.word	0x1fff8ef4
    c4f0:	1fff8ef0 	.word	0x1fff8ef0

0000c4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c4f4:	b500      	push	{lr}
    c4f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4f8:	f7f4 fb36 	bl	b68 <Sys_GetCoreID>
    c4fc:	4603      	mov	r3, r0
    c4fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    c500:	4a0d      	ldr	r2, [pc, #52]	; (c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c502:	9b01      	ldr	r3, [sp, #4]
    c504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c508:	1e5a      	subs	r2, r3, #1
    c50a:	490b      	ldr	r1, [pc, #44]	; (c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c50c:	9b01      	ldr	r3, [sp, #4]
    c50e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    c512:	4a0a      	ldr	r2, [pc, #40]	; (c53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    c514:	9b01      	ldr	r3, [sp, #4]
    c516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c51a:	f003 0301 	and.w	r3, r3, #1
    c51e:	2b00      	cmp	r3, #0
    c520:	d106      	bne.n	c530 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    c522:	4a05      	ldr	r2, [pc, #20]	; (c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c524:	9b01      	ldr	r3, [sp, #4]
    c526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c52a:	2b00      	cmp	r3, #0
    c52c:	d100      	bne.n	c530 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c52e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c530:	bf00      	nop
    c532:	b003      	add	sp, #12
    c534:	f85d fb04 	ldr.w	pc, [sp], #4
    c538:	1fff8ef4 	.word	0x1fff8ef4
    c53c:	1fff8ef0 	.word	0x1fff8ef0

0000c540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c540:	b500      	push	{lr}
    c542:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c544:	f7f4 fb10 	bl	b68 <Sys_GetCoreID>
    c548:	4603      	mov	r3, r0
    c54a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    c54c:	4a10      	ldr	r2, [pc, #64]	; (c590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c54e:	9b01      	ldr	r3, [sp, #4]
    c550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c554:	2b00      	cmp	r3, #0
    c556:	d10d      	bne.n	c574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c558:	f7f4 fa24 	bl	9a4 <Adc_schm_read_msr>
    c55c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c55e:	9b00      	ldr	r3, [sp, #0]
    c560:	f003 0301 	and.w	r3, r3, #1
    c564:	2b00      	cmp	r3, #0
    c566:	d100      	bne.n	c56a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c568:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    c56a:	490a      	ldr	r1, [pc, #40]	; (c594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    c56c:	9b01      	ldr	r3, [sp, #4]
    c56e:	9a00      	ldr	r2, [sp, #0]
    c570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    c574:	4a06      	ldr	r2, [pc, #24]	; (c590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c576:	9b01      	ldr	r3, [sp, #4]
    c578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c57c:	1c5a      	adds	r2, r3, #1
    c57e:	4904      	ldr	r1, [pc, #16]	; (c590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c586:	bf00      	nop
    c588:	b003      	add	sp, #12
    c58a:	f85d fb04 	ldr.w	pc, [sp], #4
    c58e:	bf00      	nop
    c590:	1fff8efc 	.word	0x1fff8efc
    c594:	1fff8ef8 	.word	0x1fff8ef8

0000c598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c598:	b500      	push	{lr}
    c59a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c59c:	f7f4 fae4 	bl	b68 <Sys_GetCoreID>
    c5a0:	4603      	mov	r3, r0
    c5a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    c5a4:	4a0d      	ldr	r2, [pc, #52]	; (c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c5a6:	9b01      	ldr	r3, [sp, #4]
    c5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ac:	1e5a      	subs	r2, r3, #1
    c5ae:	490b      	ldr	r1, [pc, #44]	; (c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c5b0:	9b01      	ldr	r3, [sp, #4]
    c5b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    c5b6:	4a0a      	ldr	r2, [pc, #40]	; (c5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    c5b8:	9b01      	ldr	r3, [sp, #4]
    c5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5be:	f003 0301 	and.w	r3, r3, #1
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d106      	bne.n	c5d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    c5c6:	4a05      	ldr	r2, [pc, #20]	; (c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c5c8:	9b01      	ldr	r3, [sp, #4]
    c5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	d100      	bne.n	c5d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5d4:	bf00      	nop
    c5d6:	b003      	add	sp, #12
    c5d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c5dc:	1fff8efc 	.word	0x1fff8efc
    c5e0:	1fff8ef8 	.word	0x1fff8ef8

0000c5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c5e4:	b500      	push	{lr}
    c5e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5e8:	f7f4 fabe 	bl	b68 <Sys_GetCoreID>
    c5ec:	4603      	mov	r3, r0
    c5ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    c5f0:	4a10      	ldr	r2, [pc, #64]	; (c634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c5f2:	9b01      	ldr	r3, [sp, #4]
    c5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d10d      	bne.n	c618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c5fc:	f7f4 f9d2 	bl	9a4 <Adc_schm_read_msr>
    c600:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c602:	9b00      	ldr	r3, [sp, #0]
    c604:	f003 0301 	and.w	r3, r3, #1
    c608:	2b00      	cmp	r3, #0
    c60a:	d100      	bne.n	c60e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c60c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    c60e:	490a      	ldr	r1, [pc, #40]	; (c638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	9a00      	ldr	r2, [sp, #0]
    c614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    c618:	4a06      	ldr	r2, [pc, #24]	; (c634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c61a:	9b01      	ldr	r3, [sp, #4]
    c61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c620:	1c5a      	adds	r2, r3, #1
    c622:	4904      	ldr	r1, [pc, #16]	; (c634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c624:	9b01      	ldr	r3, [sp, #4]
    c626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c62a:	bf00      	nop
    c62c:	b003      	add	sp, #12
    c62e:	f85d fb04 	ldr.w	pc, [sp], #4
    c632:	bf00      	nop
    c634:	1fff8f04 	.word	0x1fff8f04
    c638:	1fff8f00 	.word	0x1fff8f00

0000c63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c63c:	b500      	push	{lr}
    c63e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c640:	f7f4 fa92 	bl	b68 <Sys_GetCoreID>
    c644:	4603      	mov	r3, r0
    c646:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    c648:	4a0d      	ldr	r2, [pc, #52]	; (c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c64a:	9b01      	ldr	r3, [sp, #4]
    c64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c650:	1e5a      	subs	r2, r3, #1
    c652:	490b      	ldr	r1, [pc, #44]	; (c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c654:	9b01      	ldr	r3, [sp, #4]
    c656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    c65a:	4a0a      	ldr	r2, [pc, #40]	; (c684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c662:	f003 0301 	and.w	r3, r3, #1
    c666:	2b00      	cmp	r3, #0
    c668:	d106      	bne.n	c678 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    c66a:	4a05      	ldr	r2, [pc, #20]	; (c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c66c:	9b01      	ldr	r3, [sp, #4]
    c66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c672:	2b00      	cmp	r3, #0
    c674:	d100      	bne.n	c678 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c676:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c678:	bf00      	nop
    c67a:	b003      	add	sp, #12
    c67c:	f85d fb04 	ldr.w	pc, [sp], #4
    c680:	1fff8f04 	.word	0x1fff8f04
    c684:	1fff8f00 	.word	0x1fff8f00

0000c688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c688:	b500      	push	{lr}
    c68a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c68c:	f7f4 fa6c 	bl	b68 <Sys_GetCoreID>
    c690:	4603      	mov	r3, r0
    c692:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    c694:	4a10      	ldr	r2, [pc, #64]	; (c6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c696:	9b01      	ldr	r3, [sp, #4]
    c698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c69c:	2b00      	cmp	r3, #0
    c69e:	d10d      	bne.n	c6bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6a0:	f7f4 f980 	bl	9a4 <Adc_schm_read_msr>
    c6a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6a6:	9b00      	ldr	r3, [sp, #0]
    c6a8:	f003 0301 	and.w	r3, r3, #1
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d100      	bne.n	c6b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    c6b2:	490a      	ldr	r1, [pc, #40]	; (c6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    c6b4:	9b01      	ldr	r3, [sp, #4]
    c6b6:	9a00      	ldr	r2, [sp, #0]
    c6b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    c6bc:	4a06      	ldr	r2, [pc, #24]	; (c6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c6be:	9b01      	ldr	r3, [sp, #4]
    c6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6c4:	1c5a      	adds	r2, r3, #1
    c6c6:	4904      	ldr	r1, [pc, #16]	; (c6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6ce:	bf00      	nop
    c6d0:	b003      	add	sp, #12
    c6d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c6d6:	bf00      	nop
    c6d8:	1fff8f0c 	.word	0x1fff8f0c
    c6dc:	1fff8f08 	.word	0x1fff8f08

0000c6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c6e0:	b500      	push	{lr}
    c6e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6e4:	f7f4 fa40 	bl	b68 <Sys_GetCoreID>
    c6e8:	4603      	mov	r3, r0
    c6ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    c6ec:	4a0d      	ldr	r2, [pc, #52]	; (c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c6ee:	9b01      	ldr	r3, [sp, #4]
    c6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6f4:	1e5a      	subs	r2, r3, #1
    c6f6:	490b      	ldr	r1, [pc, #44]	; (c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c6f8:	9b01      	ldr	r3, [sp, #4]
    c6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    c6fe:	4a0a      	ldr	r2, [pc, #40]	; (c728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    c700:	9b01      	ldr	r3, [sp, #4]
    c702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c706:	f003 0301 	and.w	r3, r3, #1
    c70a:	2b00      	cmp	r3, #0
    c70c:	d106      	bne.n	c71c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    c70e:	4a05      	ldr	r2, [pc, #20]	; (c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c716:	2b00      	cmp	r3, #0
    c718:	d100      	bne.n	c71c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c71a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c71c:	bf00      	nop
    c71e:	b003      	add	sp, #12
    c720:	f85d fb04 	ldr.w	pc, [sp], #4
    c724:	1fff8f0c 	.word	0x1fff8f0c
    c728:	1fff8f08 	.word	0x1fff8f08

0000c72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c72c:	b500      	push	{lr}
    c72e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c730:	f7f4 fa1a 	bl	b68 <Sys_GetCoreID>
    c734:	4603      	mov	r3, r0
    c736:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    c738:	4a10      	ldr	r2, [pc, #64]	; (c77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c73a:	9b01      	ldr	r3, [sp, #4]
    c73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c740:	2b00      	cmp	r3, #0
    c742:	d10d      	bne.n	c760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c744:	f7f4 f92e 	bl	9a4 <Adc_schm_read_msr>
    c748:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c74a:	9b00      	ldr	r3, [sp, #0]
    c74c:	f003 0301 	and.w	r3, r3, #1
    c750:	2b00      	cmp	r3, #0
    c752:	d100      	bne.n	c756 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c754:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    c756:	490a      	ldr	r1, [pc, #40]	; (c780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    c758:	9b01      	ldr	r3, [sp, #4]
    c75a:	9a00      	ldr	r2, [sp, #0]
    c75c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    c760:	4a06      	ldr	r2, [pc, #24]	; (c77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c768:	1c5a      	adds	r2, r3, #1
    c76a:	4904      	ldr	r1, [pc, #16]	; (c77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c772:	bf00      	nop
    c774:	b003      	add	sp, #12
    c776:	f85d fb04 	ldr.w	pc, [sp], #4
    c77a:	bf00      	nop
    c77c:	1fff8f14 	.word	0x1fff8f14
    c780:	1fff8f10 	.word	0x1fff8f10

0000c784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c784:	b500      	push	{lr}
    c786:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c788:	f7f4 f9ee 	bl	b68 <Sys_GetCoreID>
    c78c:	4603      	mov	r3, r0
    c78e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    c790:	4a0d      	ldr	r2, [pc, #52]	; (c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c792:	9b01      	ldr	r3, [sp, #4]
    c794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c798:	1e5a      	subs	r2, r3, #1
    c79a:	490b      	ldr	r1, [pc, #44]	; (c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c79c:	9b01      	ldr	r3, [sp, #4]
    c79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    c7a2:	4a0a      	ldr	r2, [pc, #40]	; (c7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    c7a4:	9b01      	ldr	r3, [sp, #4]
    c7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7aa:	f003 0301 	and.w	r3, r3, #1
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	d106      	bne.n	c7c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    c7b2:	4a05      	ldr	r2, [pc, #20]	; (c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d100      	bne.n	c7c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7c0:	bf00      	nop
    c7c2:	b003      	add	sp, #12
    c7c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c7c8:	1fff8f14 	.word	0x1fff8f14
    c7cc:	1fff8f10 	.word	0x1fff8f10

0000c7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c7d0:	b500      	push	{lr}
    c7d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7d4:	f7f4 f9c8 	bl	b68 <Sys_GetCoreID>
    c7d8:	4603      	mov	r3, r0
    c7da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    c7dc:	4a10      	ldr	r2, [pc, #64]	; (c820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c7de:	9b01      	ldr	r3, [sp, #4]
    c7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d10d      	bne.n	c804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7e8:	f7f4 f8dc 	bl	9a4 <Adc_schm_read_msr>
    c7ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7ee:	9b00      	ldr	r3, [sp, #0]
    c7f0:	f003 0301 	and.w	r3, r3, #1
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d100      	bne.n	c7fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c7f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    c7fa:	490a      	ldr	r1, [pc, #40]	; (c824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    c7fc:	9b01      	ldr	r3, [sp, #4]
    c7fe:	9a00      	ldr	r2, [sp, #0]
    c800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    c804:	4a06      	ldr	r2, [pc, #24]	; (c820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c806:	9b01      	ldr	r3, [sp, #4]
    c808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c80c:	1c5a      	adds	r2, r3, #1
    c80e:	4904      	ldr	r1, [pc, #16]	; (c820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c816:	bf00      	nop
    c818:	b003      	add	sp, #12
    c81a:	f85d fb04 	ldr.w	pc, [sp], #4
    c81e:	bf00      	nop
    c820:	1fff8f1c 	.word	0x1fff8f1c
    c824:	1fff8f18 	.word	0x1fff8f18

0000c828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c828:	b500      	push	{lr}
    c82a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c82c:	f7f4 f99c 	bl	b68 <Sys_GetCoreID>
    c830:	4603      	mov	r3, r0
    c832:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    c834:	4a0d      	ldr	r2, [pc, #52]	; (c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c836:	9b01      	ldr	r3, [sp, #4]
    c838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c83c:	1e5a      	subs	r2, r3, #1
    c83e:	490b      	ldr	r1, [pc, #44]	; (c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c840:	9b01      	ldr	r3, [sp, #4]
    c842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    c846:	4a0a      	ldr	r2, [pc, #40]	; (c870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    c848:	9b01      	ldr	r3, [sp, #4]
    c84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c84e:	f003 0301 	and.w	r3, r3, #1
    c852:	2b00      	cmp	r3, #0
    c854:	d106      	bne.n	c864 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    c856:	4a05      	ldr	r2, [pc, #20]	; (c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c858:	9b01      	ldr	r3, [sp, #4]
    c85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c85e:	2b00      	cmp	r3, #0
    c860:	d100      	bne.n	c864 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c862:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c864:	bf00      	nop
    c866:	b003      	add	sp, #12
    c868:	f85d fb04 	ldr.w	pc, [sp], #4
    c86c:	1fff8f1c 	.word	0x1fff8f1c
    c870:	1fff8f18 	.word	0x1fff8f18

0000c874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c874:	b500      	push	{lr}
    c876:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c878:	f7f4 f976 	bl	b68 <Sys_GetCoreID>
    c87c:	4603      	mov	r3, r0
    c87e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    c880:	4a10      	ldr	r2, [pc, #64]	; (c8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c882:	9b01      	ldr	r3, [sp, #4]
    c884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c888:	2b00      	cmp	r3, #0
    c88a:	d10d      	bne.n	c8a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c88c:	f7f4 f88a 	bl	9a4 <Adc_schm_read_msr>
    c890:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c892:	9b00      	ldr	r3, [sp, #0]
    c894:	f003 0301 	and.w	r3, r3, #1
    c898:	2b00      	cmp	r3, #0
    c89a:	d100      	bne.n	c89e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c89c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    c89e:	490a      	ldr	r1, [pc, #40]	; (c8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    c8a0:	9b01      	ldr	r3, [sp, #4]
    c8a2:	9a00      	ldr	r2, [sp, #0]
    c8a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    c8a8:	4a06      	ldr	r2, [pc, #24]	; (c8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c8aa:	9b01      	ldr	r3, [sp, #4]
    c8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8b0:	1c5a      	adds	r2, r3, #1
    c8b2:	4904      	ldr	r1, [pc, #16]	; (c8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c8b4:	9b01      	ldr	r3, [sp, #4]
    c8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8ba:	bf00      	nop
    c8bc:	b003      	add	sp, #12
    c8be:	f85d fb04 	ldr.w	pc, [sp], #4
    c8c2:	bf00      	nop
    c8c4:	1fff8f24 	.word	0x1fff8f24
    c8c8:	1fff8f20 	.word	0x1fff8f20

0000c8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c8cc:	b500      	push	{lr}
    c8ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8d0:	f7f4 f94a 	bl	b68 <Sys_GetCoreID>
    c8d4:	4603      	mov	r3, r0
    c8d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    c8d8:	4a0d      	ldr	r2, [pc, #52]	; (c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c8da:	9b01      	ldr	r3, [sp, #4]
    c8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e0:	1e5a      	subs	r2, r3, #1
    c8e2:	490b      	ldr	r1, [pc, #44]	; (c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c8e4:	9b01      	ldr	r3, [sp, #4]
    c8e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    c8ea:	4a0a      	ldr	r2, [pc, #40]	; (c914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    c8ec:	9b01      	ldr	r3, [sp, #4]
    c8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8f2:	f003 0301 	and.w	r3, r3, #1
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d106      	bne.n	c908 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    c8fa:	4a05      	ldr	r2, [pc, #20]	; (c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c902:	2b00      	cmp	r3, #0
    c904:	d100      	bne.n	c908 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c906:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c908:	bf00      	nop
    c90a:	b003      	add	sp, #12
    c90c:	f85d fb04 	ldr.w	pc, [sp], #4
    c910:	1fff8f24 	.word	0x1fff8f24
    c914:	1fff8f20 	.word	0x1fff8f20

0000c918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    c918:	b500      	push	{lr}
    c91a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c91c:	f7f4 f924 	bl	b68 <Sys_GetCoreID>
    c920:	4603      	mov	r3, r0
    c922:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    c924:	4a10      	ldr	r2, [pc, #64]	; (c968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    c926:	9b01      	ldr	r3, [sp, #4]
    c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c92c:	2b00      	cmp	r3, #0
    c92e:	d10d      	bne.n	c94c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c930:	f7f4 f838 	bl	9a4 <Adc_schm_read_msr>
    c934:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c936:	9b00      	ldr	r3, [sp, #0]
    c938:	f003 0301 	and.w	r3, r3, #1
    c93c:	2b00      	cmp	r3, #0
    c93e:	d100      	bne.n	c942 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c940:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    c942:	490a      	ldr	r1, [pc, #40]	; (c96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    c944:	9b01      	ldr	r3, [sp, #4]
    c946:	9a00      	ldr	r2, [sp, #0]
    c948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    c94c:	4a06      	ldr	r2, [pc, #24]	; (c968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    c94e:	9b01      	ldr	r3, [sp, #4]
    c950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c954:	1c5a      	adds	r2, r3, #1
    c956:	4904      	ldr	r1, [pc, #16]	; (c968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c95e:	bf00      	nop
    c960:	b003      	add	sp, #12
    c962:	f85d fb04 	ldr.w	pc, [sp], #4
    c966:	bf00      	nop
    c968:	1fff8f2c 	.word	0x1fff8f2c
    c96c:	1fff8f28 	.word	0x1fff8f28

0000c970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    c970:	b500      	push	{lr}
    c972:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c974:	f7f4 f8f8 	bl	b68 <Sys_GetCoreID>
    c978:	4603      	mov	r3, r0
    c97a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    c97c:	4a0d      	ldr	r2, [pc, #52]	; (c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    c97e:	9b01      	ldr	r3, [sp, #4]
    c980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c984:	1e5a      	subs	r2, r3, #1
    c986:	490b      	ldr	r1, [pc, #44]	; (c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    c988:	9b01      	ldr	r3, [sp, #4]
    c98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    c98e:	4a0a      	ldr	r2, [pc, #40]	; (c9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    c990:	9b01      	ldr	r3, [sp, #4]
    c992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c996:	f003 0301 	and.w	r3, r3, #1
    c99a:	2b00      	cmp	r3, #0
    c99c:	d106      	bne.n	c9ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    c99e:	4a05      	ldr	r2, [pc, #20]	; (c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d100      	bne.n	c9ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9ac:	bf00      	nop
    c9ae:	b003      	add	sp, #12
    c9b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c9b4:	1fff8f2c 	.word	0x1fff8f2c
    c9b8:	1fff8f28 	.word	0x1fff8f28

0000c9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    c9bc:	b500      	push	{lr}
    c9be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9c0:	f7f4 f8d2 	bl	b68 <Sys_GetCoreID>
    c9c4:	4603      	mov	r3, r0
    c9c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    c9c8:	4a10      	ldr	r2, [pc, #64]	; (ca0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    c9ca:	9b01      	ldr	r3, [sp, #4]
    c9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d10d      	bne.n	c9f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9d4:	f7f3 ffe6 	bl	9a4 <Adc_schm_read_msr>
    c9d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9da:	9b00      	ldr	r3, [sp, #0]
    c9dc:	f003 0301 	and.w	r3, r3, #1
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d100      	bne.n	c9e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    c9e6:	490a      	ldr	r1, [pc, #40]	; (ca10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    c9e8:	9b01      	ldr	r3, [sp, #4]
    c9ea:	9a00      	ldr	r2, [sp, #0]
    c9ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    c9f0:	4a06      	ldr	r2, [pc, #24]	; (ca0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    c9f2:	9b01      	ldr	r3, [sp, #4]
    c9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f8:	1c5a      	adds	r2, r3, #1
    c9fa:	4904      	ldr	r1, [pc, #16]	; (ca0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca02:	bf00      	nop
    ca04:	b003      	add	sp, #12
    ca06:	f85d fb04 	ldr.w	pc, [sp], #4
    ca0a:	bf00      	nop
    ca0c:	1fff8f34 	.word	0x1fff8f34
    ca10:	1fff8f30 	.word	0x1fff8f30

0000ca14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    ca14:	b500      	push	{lr}
    ca16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca18:	f7f4 f8a6 	bl	b68 <Sys_GetCoreID>
    ca1c:	4603      	mov	r3, r0
    ca1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    ca20:	4a0d      	ldr	r2, [pc, #52]	; (ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca28:	1e5a      	subs	r2, r3, #1
    ca2a:	490b      	ldr	r1, [pc, #44]	; (ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    ca2c:	9b01      	ldr	r3, [sp, #4]
    ca2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    ca32:	4a0a      	ldr	r2, [pc, #40]	; (ca5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca3a:	f003 0301 	and.w	r3, r3, #1
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d106      	bne.n	ca50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    ca42:	4a05      	ldr	r2, [pc, #20]	; (ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    ca44:	9b01      	ldr	r3, [sp, #4]
    ca46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d100      	bne.n	ca50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca50:	bf00      	nop
    ca52:	b003      	add	sp, #12
    ca54:	f85d fb04 	ldr.w	pc, [sp], #4
    ca58:	1fff8f34 	.word	0x1fff8f34
    ca5c:	1fff8f30 	.word	0x1fff8f30

0000ca60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    ca60:	b500      	push	{lr}
    ca62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca64:	f7f4 f880 	bl	b68 <Sys_GetCoreID>
    ca68:	4603      	mov	r3, r0
    ca6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    ca6c:	4a10      	ldr	r2, [pc, #64]	; (cab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    ca6e:	9b01      	ldr	r3, [sp, #4]
    ca70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca74:	2b00      	cmp	r3, #0
    ca76:	d10d      	bne.n	ca94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca78:	f7f3 ff94 	bl	9a4 <Adc_schm_read_msr>
    ca7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca7e:	9b00      	ldr	r3, [sp, #0]
    ca80:	f003 0301 	and.w	r3, r3, #1
    ca84:	2b00      	cmp	r3, #0
    ca86:	d100      	bne.n	ca8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    ca8a:	490a      	ldr	r1, [pc, #40]	; (cab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    ca8c:	9b01      	ldr	r3, [sp, #4]
    ca8e:	9a00      	ldr	r2, [sp, #0]
    ca90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    ca94:	4a06      	ldr	r2, [pc, #24]	; (cab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    ca96:	9b01      	ldr	r3, [sp, #4]
    ca98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca9c:	1c5a      	adds	r2, r3, #1
    ca9e:	4904      	ldr	r1, [pc, #16]	; (cab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    caa6:	bf00      	nop
    caa8:	b003      	add	sp, #12
    caaa:	f85d fb04 	ldr.w	pc, [sp], #4
    caae:	bf00      	nop
    cab0:	1fff8f3c 	.word	0x1fff8f3c
    cab4:	1fff8f38 	.word	0x1fff8f38

0000cab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cab8:	b500      	push	{lr}
    caba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cabc:	f7f4 f854 	bl	b68 <Sys_GetCoreID>
    cac0:	4603      	mov	r3, r0
    cac2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    cac4:	4a0d      	ldr	r2, [pc, #52]	; (cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cac6:	9b01      	ldr	r3, [sp, #4]
    cac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cacc:	1e5a      	subs	r2, r3, #1
    cace:	490b      	ldr	r1, [pc, #44]	; (cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cad0:	9b01      	ldr	r3, [sp, #4]
    cad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    cad6:	4a0a      	ldr	r2, [pc, #40]	; (cb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cade:	f003 0301 	and.w	r3, r3, #1
    cae2:	2b00      	cmp	r3, #0
    cae4:	d106      	bne.n	caf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    cae6:	4a05      	ldr	r2, [pc, #20]	; (cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cae8:	9b01      	ldr	r3, [sp, #4]
    caea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caee:	2b00      	cmp	r3, #0
    caf0:	d100      	bne.n	caf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    caf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    caf4:	bf00      	nop
    caf6:	b003      	add	sp, #12
    caf8:	f85d fb04 	ldr.w	pc, [sp], #4
    cafc:	1fff8f3c 	.word	0x1fff8f3c
    cb00:	1fff8f38 	.word	0x1fff8f38

0000cb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cb04:	b500      	push	{lr}
    cb06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb08:	f7f4 f82e 	bl	b68 <Sys_GetCoreID>
    cb0c:	4603      	mov	r3, r0
    cb0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    cb10:	4a10      	ldr	r2, [pc, #64]	; (cb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cb12:	9b01      	ldr	r3, [sp, #4]
    cb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d10d      	bne.n	cb38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb1c:	f7f3 ff42 	bl	9a4 <Adc_schm_read_msr>
    cb20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb22:	9b00      	ldr	r3, [sp, #0]
    cb24:	f003 0301 	and.w	r3, r3, #1
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d100      	bne.n	cb2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    cb2e:	490a      	ldr	r1, [pc, #40]	; (cb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    cb30:	9b01      	ldr	r3, [sp, #4]
    cb32:	9a00      	ldr	r2, [sp, #0]
    cb34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    cb38:	4a06      	ldr	r2, [pc, #24]	; (cb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cb3a:	9b01      	ldr	r3, [sp, #4]
    cb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb40:	1c5a      	adds	r2, r3, #1
    cb42:	4904      	ldr	r1, [pc, #16]	; (cb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cb44:	9b01      	ldr	r3, [sp, #4]
    cb46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb4a:	bf00      	nop
    cb4c:	b003      	add	sp, #12
    cb4e:	f85d fb04 	ldr.w	pc, [sp], #4
    cb52:	bf00      	nop
    cb54:	1fff8f44 	.word	0x1fff8f44
    cb58:	1fff8f40 	.word	0x1fff8f40

0000cb5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cb5c:	b500      	push	{lr}
    cb5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb60:	f7f4 f802 	bl	b68 <Sys_GetCoreID>
    cb64:	4603      	mov	r3, r0
    cb66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    cb68:	4a0d      	ldr	r2, [pc, #52]	; (cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cb6a:	9b01      	ldr	r3, [sp, #4]
    cb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb70:	1e5a      	subs	r2, r3, #1
    cb72:	490b      	ldr	r1, [pc, #44]	; (cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cb74:	9b01      	ldr	r3, [sp, #4]
    cb76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    cb7a:	4a0a      	ldr	r2, [pc, #40]	; (cba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    cb7c:	9b01      	ldr	r3, [sp, #4]
    cb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb82:	f003 0301 	and.w	r3, r3, #1
    cb86:	2b00      	cmp	r3, #0
    cb88:	d106      	bne.n	cb98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    cb8a:	4a05      	ldr	r2, [pc, #20]	; (cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb92:	2b00      	cmp	r3, #0
    cb94:	d100      	bne.n	cb98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb98:	bf00      	nop
    cb9a:	b003      	add	sp, #12
    cb9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cba0:	1fff8f44 	.word	0x1fff8f44
    cba4:	1fff8f40 	.word	0x1fff8f40

0000cba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cba8:	b500      	push	{lr}
    cbaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbac:	f7f3 ffdc 	bl	b68 <Sys_GetCoreID>
    cbb0:	4603      	mov	r3, r0
    cbb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    cbb4:	4a10      	ldr	r2, [pc, #64]	; (cbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cbb6:	9b01      	ldr	r3, [sp, #4]
    cbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d10d      	bne.n	cbdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbc0:	f7f3 fef0 	bl	9a4 <Adc_schm_read_msr>
    cbc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbc6:	9b00      	ldr	r3, [sp, #0]
    cbc8:	f003 0301 	and.w	r3, r3, #1
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d100      	bne.n	cbd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    cbd2:	490a      	ldr	r1, [pc, #40]	; (cbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    cbd4:	9b01      	ldr	r3, [sp, #4]
    cbd6:	9a00      	ldr	r2, [sp, #0]
    cbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    cbdc:	4a06      	ldr	r2, [pc, #24]	; (cbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cbde:	9b01      	ldr	r3, [sp, #4]
    cbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbe4:	1c5a      	adds	r2, r3, #1
    cbe6:	4904      	ldr	r1, [pc, #16]	; (cbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cbe8:	9b01      	ldr	r3, [sp, #4]
    cbea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbee:	bf00      	nop
    cbf0:	b003      	add	sp, #12
    cbf2:	f85d fb04 	ldr.w	pc, [sp], #4
    cbf6:	bf00      	nop
    cbf8:	1fff8f4c 	.word	0x1fff8f4c
    cbfc:	1fff8f48 	.word	0x1fff8f48

0000cc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cc00:	b500      	push	{lr}
    cc02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc04:	f7f3 ffb0 	bl	b68 <Sys_GetCoreID>
    cc08:	4603      	mov	r3, r0
    cc0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    cc0c:	4a0d      	ldr	r2, [pc, #52]	; (cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc14:	1e5a      	subs	r2, r3, #1
    cc16:	490b      	ldr	r1, [pc, #44]	; (cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cc18:	9b01      	ldr	r3, [sp, #4]
    cc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    cc1e:	4a0a      	ldr	r2, [pc, #40]	; (cc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    cc20:	9b01      	ldr	r3, [sp, #4]
    cc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc26:	f003 0301 	and.w	r3, r3, #1
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	d106      	bne.n	cc3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    cc2e:	4a05      	ldr	r2, [pc, #20]	; (cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cc30:	9b01      	ldr	r3, [sp, #4]
    cc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc36:	2b00      	cmp	r3, #0
    cc38:	d100      	bne.n	cc3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc3c:	bf00      	nop
    cc3e:	b003      	add	sp, #12
    cc40:	f85d fb04 	ldr.w	pc, [sp], #4
    cc44:	1fff8f4c 	.word	0x1fff8f4c
    cc48:	1fff8f48 	.word	0x1fff8f48

0000cc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cc4c:	b500      	push	{lr}
    cc4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc50:	f7f3 ff8a 	bl	b68 <Sys_GetCoreID>
    cc54:	4603      	mov	r3, r0
    cc56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    cc58:	4a10      	ldr	r2, [pc, #64]	; (cc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cc5a:	9b01      	ldr	r3, [sp, #4]
    cc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d10d      	bne.n	cc80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc64:	f7f3 fe9e 	bl	9a4 <Adc_schm_read_msr>
    cc68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc6a:	9b00      	ldr	r3, [sp, #0]
    cc6c:	f003 0301 	and.w	r3, r3, #1
    cc70:	2b00      	cmp	r3, #0
    cc72:	d100      	bne.n	cc76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    cc76:	490a      	ldr	r1, [pc, #40]	; (cca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    cc78:	9b01      	ldr	r3, [sp, #4]
    cc7a:	9a00      	ldr	r2, [sp, #0]
    cc7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    cc80:	4a06      	ldr	r2, [pc, #24]	; (cc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cc82:	9b01      	ldr	r3, [sp, #4]
    cc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc88:	1c5a      	adds	r2, r3, #1
    cc8a:	4904      	ldr	r1, [pc, #16]	; (cc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cc8c:	9b01      	ldr	r3, [sp, #4]
    cc8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc92:	bf00      	nop
    cc94:	b003      	add	sp, #12
    cc96:	f85d fb04 	ldr.w	pc, [sp], #4
    cc9a:	bf00      	nop
    cc9c:	1fff8f54 	.word	0x1fff8f54
    cca0:	1fff8f50 	.word	0x1fff8f50

0000cca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cca4:	b500      	push	{lr}
    cca6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cca8:	f7f3 ff5e 	bl	b68 <Sys_GetCoreID>
    ccac:	4603      	mov	r3, r0
    ccae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    ccb0:	4a0d      	ldr	r2, [pc, #52]	; (cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ccb2:	9b01      	ldr	r3, [sp, #4]
    ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccb8:	1e5a      	subs	r2, r3, #1
    ccba:	490b      	ldr	r1, [pc, #44]	; (cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ccbc:	9b01      	ldr	r3, [sp, #4]
    ccbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    ccc2:	4a0a      	ldr	r2, [pc, #40]	; (ccec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccca:	f003 0301 	and.w	r3, r3, #1
    ccce:	2b00      	cmp	r3, #0
    ccd0:	d106      	bne.n	cce0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    ccd2:	4a05      	ldr	r2, [pc, #20]	; (cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d100      	bne.n	cce0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cce0:	bf00      	nop
    cce2:	b003      	add	sp, #12
    cce4:	f85d fb04 	ldr.w	pc, [sp], #4
    cce8:	1fff8f54 	.word	0x1fff8f54
    ccec:	1fff8f50 	.word	0x1fff8f50

0000ccf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    ccf0:	b500      	push	{lr}
    ccf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccf4:	f7f3 ff38 	bl	b68 <Sys_GetCoreID>
    ccf8:	4603      	mov	r3, r0
    ccfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    ccfc:	4a10      	ldr	r2, [pc, #64]	; (cd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    ccfe:	9b01      	ldr	r3, [sp, #4]
    cd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd04:	2b00      	cmp	r3, #0
    cd06:	d10d      	bne.n	cd24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd08:	f7f3 fe4c 	bl	9a4 <Adc_schm_read_msr>
    cd0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd0e:	9b00      	ldr	r3, [sp, #0]
    cd10:	f003 0301 	and.w	r3, r3, #1
    cd14:	2b00      	cmp	r3, #0
    cd16:	d100      	bne.n	cd1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    cd1a:	490a      	ldr	r1, [pc, #40]	; (cd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    cd1c:	9b01      	ldr	r3, [sp, #4]
    cd1e:	9a00      	ldr	r2, [sp, #0]
    cd20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    cd24:	4a06      	ldr	r2, [pc, #24]	; (cd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cd26:	9b01      	ldr	r3, [sp, #4]
    cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd2c:	1c5a      	adds	r2, r3, #1
    cd2e:	4904      	ldr	r1, [pc, #16]	; (cd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd36:	bf00      	nop
    cd38:	b003      	add	sp, #12
    cd3a:	f85d fb04 	ldr.w	pc, [sp], #4
    cd3e:	bf00      	nop
    cd40:	1fff8f5c 	.word	0x1fff8f5c
    cd44:	1fff8f58 	.word	0x1fff8f58

0000cd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cd48:	b500      	push	{lr}
    cd4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd4c:	f7f3 ff0c 	bl	b68 <Sys_GetCoreID>
    cd50:	4603      	mov	r3, r0
    cd52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    cd54:	4a0d      	ldr	r2, [pc, #52]	; (cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cd56:	9b01      	ldr	r3, [sp, #4]
    cd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd5c:	1e5a      	subs	r2, r3, #1
    cd5e:	490b      	ldr	r1, [pc, #44]	; (cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cd60:	9b01      	ldr	r3, [sp, #4]
    cd62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    cd66:	4a0a      	ldr	r2, [pc, #40]	; (cd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd6e:	f003 0301 	and.w	r3, r3, #1
    cd72:	2b00      	cmp	r3, #0
    cd74:	d106      	bne.n	cd84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    cd76:	4a05      	ldr	r2, [pc, #20]	; (cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cd78:	9b01      	ldr	r3, [sp, #4]
    cd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d100      	bne.n	cd84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd84:	bf00      	nop
    cd86:	b003      	add	sp, #12
    cd88:	f85d fb04 	ldr.w	pc, [sp], #4
    cd8c:	1fff8f5c 	.word	0x1fff8f5c
    cd90:	1fff8f58 	.word	0x1fff8f58

0000cd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    cd94:	b500      	push	{lr}
    cd96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd98:	f7f3 fee6 	bl	b68 <Sys_GetCoreID>
    cd9c:	4603      	mov	r3, r0
    cd9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    cda0:	4a10      	ldr	r2, [pc, #64]	; (cde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cda2:	9b01      	ldr	r3, [sp, #4]
    cda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cda8:	2b00      	cmp	r3, #0
    cdaa:	d10d      	bne.n	cdc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdac:	f7f3 fdfa 	bl	9a4 <Adc_schm_read_msr>
    cdb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdb2:	9b00      	ldr	r3, [sp, #0]
    cdb4:	f003 0301 	and.w	r3, r3, #1
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d100      	bne.n	cdbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    cdbe:	490a      	ldr	r1, [pc, #40]	; (cde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    cdc0:	9b01      	ldr	r3, [sp, #4]
    cdc2:	9a00      	ldr	r2, [sp, #0]
    cdc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    cdc8:	4a06      	ldr	r2, [pc, #24]	; (cde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cdca:	9b01      	ldr	r3, [sp, #4]
    cdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd0:	1c5a      	adds	r2, r3, #1
    cdd2:	4904      	ldr	r1, [pc, #16]	; (cde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cdda:	bf00      	nop
    cddc:	b003      	add	sp, #12
    cdde:	f85d fb04 	ldr.w	pc, [sp], #4
    cde2:	bf00      	nop
    cde4:	1fff8f64 	.word	0x1fff8f64
    cde8:	1fff8f60 	.word	0x1fff8f60

0000cdec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    cdec:	b500      	push	{lr}
    cdee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdf0:	f7f3 feba 	bl	b68 <Sys_GetCoreID>
    cdf4:	4603      	mov	r3, r0
    cdf6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    cdf8:	4a0d      	ldr	r2, [pc, #52]	; (ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    cdfa:	9b01      	ldr	r3, [sp, #4]
    cdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce00:	1e5a      	subs	r2, r3, #1
    ce02:	490b      	ldr	r1, [pc, #44]	; (ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    ce04:	9b01      	ldr	r3, [sp, #4]
    ce06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    ce0a:	4a0a      	ldr	r2, [pc, #40]	; (ce34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    ce0c:	9b01      	ldr	r3, [sp, #4]
    ce0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce12:	f003 0301 	and.w	r3, r3, #1
    ce16:	2b00      	cmp	r3, #0
    ce18:	d106      	bne.n	ce28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    ce1a:	4a05      	ldr	r2, [pc, #20]	; (ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    ce1c:	9b01      	ldr	r3, [sp, #4]
    ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce22:	2b00      	cmp	r3, #0
    ce24:	d100      	bne.n	ce28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce28:	bf00      	nop
    ce2a:	b003      	add	sp, #12
    ce2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ce30:	1fff8f64 	.word	0x1fff8f64
    ce34:	1fff8f60 	.word	0x1fff8f60

0000ce38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    ce38:	b500      	push	{lr}
    ce3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce3c:	f7f3 fe94 	bl	b68 <Sys_GetCoreID>
    ce40:	4603      	mov	r3, r0
    ce42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    ce44:	4a10      	ldr	r2, [pc, #64]	; (ce88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    ce46:	9b01      	ldr	r3, [sp, #4]
    ce48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d10d      	bne.n	ce6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce50:	f7f3 fda8 	bl	9a4 <Adc_schm_read_msr>
    ce54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce56:	9b00      	ldr	r3, [sp, #0]
    ce58:	f003 0301 	and.w	r3, r3, #1
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d100      	bne.n	ce62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    ce62:	490a      	ldr	r1, [pc, #40]	; (ce8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    ce64:	9b01      	ldr	r3, [sp, #4]
    ce66:	9a00      	ldr	r2, [sp, #0]
    ce68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    ce6c:	4a06      	ldr	r2, [pc, #24]	; (ce88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    ce6e:	9b01      	ldr	r3, [sp, #4]
    ce70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce74:	1c5a      	adds	r2, r3, #1
    ce76:	4904      	ldr	r1, [pc, #16]	; (ce88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    ce78:	9b01      	ldr	r3, [sp, #4]
    ce7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce7e:	bf00      	nop
    ce80:	b003      	add	sp, #12
    ce82:	f85d fb04 	ldr.w	pc, [sp], #4
    ce86:	bf00      	nop
    ce88:	1fff8f6c 	.word	0x1fff8f6c
    ce8c:	1fff8f68 	.word	0x1fff8f68

0000ce90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    ce90:	b500      	push	{lr}
    ce92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce94:	f7f3 fe68 	bl	b68 <Sys_GetCoreID>
    ce98:	4603      	mov	r3, r0
    ce9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    ce9c:	4a0d      	ldr	r2, [pc, #52]	; (ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    ce9e:	9b01      	ldr	r3, [sp, #4]
    cea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea4:	1e5a      	subs	r2, r3, #1
    cea6:	490b      	ldr	r1, [pc, #44]	; (ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cea8:	9b01      	ldr	r3, [sp, #4]
    ceaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    ceae:	4a0a      	ldr	r2, [pc, #40]	; (ced8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb6:	f003 0301 	and.w	r3, r3, #1
    ceba:	2b00      	cmp	r3, #0
    cebc:	d106      	bne.n	cecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    cebe:	4a05      	ldr	r2, [pc, #20]	; (ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec6:	2b00      	cmp	r3, #0
    cec8:	d100      	bne.n	cecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ceca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cecc:	bf00      	nop
    cece:	b003      	add	sp, #12
    ced0:	f85d fb04 	ldr.w	pc, [sp], #4
    ced4:	1fff8f6c 	.word	0x1fff8f6c
    ced8:	1fff8f68 	.word	0x1fff8f68

0000cedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    cedc:	b500      	push	{lr}
    cede:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cee0:	f7f3 fe42 	bl	b68 <Sys_GetCoreID>
    cee4:	4603      	mov	r3, r0
    cee6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    cee8:	4a10      	ldr	r2, [pc, #64]	; (cf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    ceea:	9b01      	ldr	r3, [sp, #4]
    ceec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d10d      	bne.n	cf10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cef4:	f7f3 fd56 	bl	9a4 <Adc_schm_read_msr>
    cef8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cefa:	9b00      	ldr	r3, [sp, #0]
    cefc:	f003 0301 	and.w	r3, r3, #1
    cf00:	2b00      	cmp	r3, #0
    cf02:	d100      	bne.n	cf06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    cf06:	490a      	ldr	r1, [pc, #40]	; (cf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    cf08:	9b01      	ldr	r3, [sp, #4]
    cf0a:	9a00      	ldr	r2, [sp, #0]
    cf0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    cf10:	4a06      	ldr	r2, [pc, #24]	; (cf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cf12:	9b01      	ldr	r3, [sp, #4]
    cf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf18:	1c5a      	adds	r2, r3, #1
    cf1a:	4904      	ldr	r1, [pc, #16]	; (cf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf22:	bf00      	nop
    cf24:	b003      	add	sp, #12
    cf26:	f85d fb04 	ldr.w	pc, [sp], #4
    cf2a:	bf00      	nop
    cf2c:	1fff8f74 	.word	0x1fff8f74
    cf30:	1fff8f70 	.word	0x1fff8f70

0000cf34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    cf34:	b500      	push	{lr}
    cf36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf38:	f7f3 fe16 	bl	b68 <Sys_GetCoreID>
    cf3c:	4603      	mov	r3, r0
    cf3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    cf40:	4a0d      	ldr	r2, [pc, #52]	; (cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    cf42:	9b01      	ldr	r3, [sp, #4]
    cf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf48:	1e5a      	subs	r2, r3, #1
    cf4a:	490b      	ldr	r1, [pc, #44]	; (cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    cf4c:	9b01      	ldr	r3, [sp, #4]
    cf4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    cf52:	4a0a      	ldr	r2, [pc, #40]	; (cf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    cf54:	9b01      	ldr	r3, [sp, #4]
    cf56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf5a:	f003 0301 	and.w	r3, r3, #1
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d106      	bne.n	cf70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    cf62:	4a05      	ldr	r2, [pc, #20]	; (cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    cf64:	9b01      	ldr	r3, [sp, #4]
    cf66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d100      	bne.n	cf70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf70:	bf00      	nop
    cf72:	b003      	add	sp, #12
    cf74:	f85d fb04 	ldr.w	pc, [sp], #4
    cf78:	1fff8f74 	.word	0x1fff8f74
    cf7c:	1fff8f70 	.word	0x1fff8f70

0000cf80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    cf80:	b500      	push	{lr}
    cf82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf84:	f7f3 fdf0 	bl	b68 <Sys_GetCoreID>
    cf88:	4603      	mov	r3, r0
    cf8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    cf8c:	4a10      	ldr	r2, [pc, #64]	; (cfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    cf8e:	9b01      	ldr	r3, [sp, #4]
    cf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d10d      	bne.n	cfb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf98:	f7f3 fd04 	bl	9a4 <Adc_schm_read_msr>
    cf9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf9e:	9b00      	ldr	r3, [sp, #0]
    cfa0:	f003 0301 	and.w	r3, r3, #1
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d100      	bne.n	cfaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    cfaa:	490a      	ldr	r1, [pc, #40]	; (cfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    cfac:	9b01      	ldr	r3, [sp, #4]
    cfae:	9a00      	ldr	r2, [sp, #0]
    cfb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    cfb4:	4a06      	ldr	r2, [pc, #24]	; (cfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    cfb6:	9b01      	ldr	r3, [sp, #4]
    cfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfbc:	1c5a      	adds	r2, r3, #1
    cfbe:	4904      	ldr	r1, [pc, #16]	; (cfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    cfc0:	9b01      	ldr	r3, [sp, #4]
    cfc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfc6:	bf00      	nop
    cfc8:	b003      	add	sp, #12
    cfca:	f85d fb04 	ldr.w	pc, [sp], #4
    cfce:	bf00      	nop
    cfd0:	1fff8f7c 	.word	0x1fff8f7c
    cfd4:	1fff8f78 	.word	0x1fff8f78

0000cfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    cfd8:	b500      	push	{lr}
    cfda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfdc:	f7f3 fdc4 	bl	b68 <Sys_GetCoreID>
    cfe0:	4603      	mov	r3, r0
    cfe2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    cfe4:	4a0d      	ldr	r2, [pc, #52]	; (d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    cfe6:	9b01      	ldr	r3, [sp, #4]
    cfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfec:	1e5a      	subs	r2, r3, #1
    cfee:	490b      	ldr	r1, [pc, #44]	; (d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    cff0:	9b01      	ldr	r3, [sp, #4]
    cff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    cff6:	4a0a      	ldr	r2, [pc, #40]	; (d020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    cff8:	9b01      	ldr	r3, [sp, #4]
    cffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cffe:	f003 0301 	and.w	r3, r3, #1
    d002:	2b00      	cmp	r3, #0
    d004:	d106      	bne.n	d014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d006:	4a05      	ldr	r2, [pc, #20]	; (d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d008:	9b01      	ldr	r3, [sp, #4]
    d00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d00e:	2b00      	cmp	r3, #0
    d010:	d100      	bne.n	d014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d012:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d014:	bf00      	nop
    d016:	b003      	add	sp, #12
    d018:	f85d fb04 	ldr.w	pc, [sp], #4
    d01c:	1fff8f7c 	.word	0x1fff8f7c
    d020:	1fff8f78 	.word	0x1fff8f78

0000d024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d024:	b500      	push	{lr}
    d026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d028:	f7f3 fd9e 	bl	b68 <Sys_GetCoreID>
    d02c:	4603      	mov	r3, r0
    d02e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d030:	4a10      	ldr	r2, [pc, #64]	; (d074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d032:	9b01      	ldr	r3, [sp, #4]
    d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d038:	2b00      	cmp	r3, #0
    d03a:	d10d      	bne.n	d058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d03c:	f7f3 fcb2 	bl	9a4 <Adc_schm_read_msr>
    d040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d042:	9b00      	ldr	r3, [sp, #0]
    d044:	f003 0301 	and.w	r3, r3, #1
    d048:	2b00      	cmp	r3, #0
    d04a:	d100      	bne.n	d04e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d04c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d04e:	490a      	ldr	r1, [pc, #40]	; (d078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d050:	9b01      	ldr	r3, [sp, #4]
    d052:	9a00      	ldr	r2, [sp, #0]
    d054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d058:	4a06      	ldr	r2, [pc, #24]	; (d074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d05a:	9b01      	ldr	r3, [sp, #4]
    d05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d060:	1c5a      	adds	r2, r3, #1
    d062:	4904      	ldr	r1, [pc, #16]	; (d074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d06a:	bf00      	nop
    d06c:	b003      	add	sp, #12
    d06e:	f85d fb04 	ldr.w	pc, [sp], #4
    d072:	bf00      	nop
    d074:	1fff8f84 	.word	0x1fff8f84
    d078:	1fff8f80 	.word	0x1fff8f80

0000d07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d07c:	b500      	push	{lr}
    d07e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d080:	f7f3 fd72 	bl	b68 <Sys_GetCoreID>
    d084:	4603      	mov	r3, r0
    d086:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d088:	4a0d      	ldr	r2, [pc, #52]	; (d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d08a:	9b01      	ldr	r3, [sp, #4]
    d08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d090:	1e5a      	subs	r2, r3, #1
    d092:	490b      	ldr	r1, [pc, #44]	; (d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d094:	9b01      	ldr	r3, [sp, #4]
    d096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d09a:	4a0a      	ldr	r2, [pc, #40]	; (d0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a2:	f003 0301 	and.w	r3, r3, #1
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	d106      	bne.n	d0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d0aa:	4a05      	ldr	r2, [pc, #20]	; (d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d0ac:	9b01      	ldr	r3, [sp, #4]
    d0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d100      	bne.n	d0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0b8:	bf00      	nop
    d0ba:	b003      	add	sp, #12
    d0bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c0:	1fff8f84 	.word	0x1fff8f84
    d0c4:	1fff8f80 	.word	0x1fff8f80

0000d0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d0c8:	b500      	push	{lr}
    d0ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0cc:	f7f3 fd4c 	bl	b68 <Sys_GetCoreID>
    d0d0:	4603      	mov	r3, r0
    d0d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d0d4:	4a10      	ldr	r2, [pc, #64]	; (d118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d0d6:	9b01      	ldr	r3, [sp, #4]
    d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d10d      	bne.n	d0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0e0:	f7f3 fc60 	bl	9a4 <Adc_schm_read_msr>
    d0e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0e6:	9b00      	ldr	r3, [sp, #0]
    d0e8:	f003 0301 	and.w	r3, r3, #1
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d100      	bne.n	d0f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d0f2:	490a      	ldr	r1, [pc, #40]	; (d11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d0f4:	9b01      	ldr	r3, [sp, #4]
    d0f6:	9a00      	ldr	r2, [sp, #0]
    d0f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d0fc:	4a06      	ldr	r2, [pc, #24]	; (d118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d0fe:	9b01      	ldr	r3, [sp, #4]
    d100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d104:	1c5a      	adds	r2, r3, #1
    d106:	4904      	ldr	r1, [pc, #16]	; (d118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d108:	9b01      	ldr	r3, [sp, #4]
    d10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d10e:	bf00      	nop
    d110:	b003      	add	sp, #12
    d112:	f85d fb04 	ldr.w	pc, [sp], #4
    d116:	bf00      	nop
    d118:	1fff8f8c 	.word	0x1fff8f8c
    d11c:	1fff8f88 	.word	0x1fff8f88

0000d120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d120:	b500      	push	{lr}
    d122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d124:	f7f3 fd20 	bl	b68 <Sys_GetCoreID>
    d128:	4603      	mov	r3, r0
    d12a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d12c:	4a0d      	ldr	r2, [pc, #52]	; (d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d12e:	9b01      	ldr	r3, [sp, #4]
    d130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d134:	1e5a      	subs	r2, r3, #1
    d136:	490b      	ldr	r1, [pc, #44]	; (d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d138:	9b01      	ldr	r3, [sp, #4]
    d13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d13e:	4a0a      	ldr	r2, [pc, #40]	; (d168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d140:	9b01      	ldr	r3, [sp, #4]
    d142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d146:	f003 0301 	and.w	r3, r3, #1
    d14a:	2b00      	cmp	r3, #0
    d14c:	d106      	bne.n	d15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d14e:	4a05      	ldr	r2, [pc, #20]	; (d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d150:	9b01      	ldr	r3, [sp, #4]
    d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d156:	2b00      	cmp	r3, #0
    d158:	d100      	bne.n	d15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d15a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d15c:	bf00      	nop
    d15e:	b003      	add	sp, #12
    d160:	f85d fb04 	ldr.w	pc, [sp], #4
    d164:	1fff8f8c 	.word	0x1fff8f8c
    d168:	1fff8f88 	.word	0x1fff8f88

0000d16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d16c:	b500      	push	{lr}
    d16e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d170:	f7f3 fcfa 	bl	b68 <Sys_GetCoreID>
    d174:	4603      	mov	r3, r0
    d176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d178:	4a10      	ldr	r2, [pc, #64]	; (d1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d17a:	9b01      	ldr	r3, [sp, #4]
    d17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d180:	2b00      	cmp	r3, #0
    d182:	d10d      	bne.n	d1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d184:	f7f3 fc0e 	bl	9a4 <Adc_schm_read_msr>
    d188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d18a:	9b00      	ldr	r3, [sp, #0]
    d18c:	f003 0301 	and.w	r3, r3, #1
    d190:	2b00      	cmp	r3, #0
    d192:	d100      	bne.n	d196 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d196:	490a      	ldr	r1, [pc, #40]	; (d1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d198:	9b01      	ldr	r3, [sp, #4]
    d19a:	9a00      	ldr	r2, [sp, #0]
    d19c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d1a0:	4a06      	ldr	r2, [pc, #24]	; (d1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d1a2:	9b01      	ldr	r3, [sp, #4]
    d1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a8:	1c5a      	adds	r2, r3, #1
    d1aa:	4904      	ldr	r1, [pc, #16]	; (d1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d1ac:	9b01      	ldr	r3, [sp, #4]
    d1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1b2:	bf00      	nop
    d1b4:	b003      	add	sp, #12
    d1b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ba:	bf00      	nop
    d1bc:	1fff8f94 	.word	0x1fff8f94
    d1c0:	1fff8f90 	.word	0x1fff8f90

0000d1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d1c4:	b500      	push	{lr}
    d1c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1c8:	f7f3 fcce 	bl	b68 <Sys_GetCoreID>
    d1cc:	4603      	mov	r3, r0
    d1ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d1d0:	4a0d      	ldr	r2, [pc, #52]	; (d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1d8:	1e5a      	subs	r2, r3, #1
    d1da:	490b      	ldr	r1, [pc, #44]	; (d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d1dc:	9b01      	ldr	r3, [sp, #4]
    d1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d1e2:	4a0a      	ldr	r2, [pc, #40]	; (d20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1ea:	f003 0301 	and.w	r3, r3, #1
    d1ee:	2b00      	cmp	r3, #0
    d1f0:	d106      	bne.n	d200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d1f2:	4a05      	ldr	r2, [pc, #20]	; (d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d100      	bne.n	d200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d200:	bf00      	nop
    d202:	b003      	add	sp, #12
    d204:	f85d fb04 	ldr.w	pc, [sp], #4
    d208:	1fff8f94 	.word	0x1fff8f94
    d20c:	1fff8f90 	.word	0x1fff8f90

0000d210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d210:	b500      	push	{lr}
    d212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d214:	f7f3 fca8 	bl	b68 <Sys_GetCoreID>
    d218:	4603      	mov	r3, r0
    d21a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d21c:	4a10      	ldr	r2, [pc, #64]	; (d260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d21e:	9b01      	ldr	r3, [sp, #4]
    d220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d224:	2b00      	cmp	r3, #0
    d226:	d10d      	bne.n	d244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d228:	f7f3 fbbc 	bl	9a4 <Adc_schm_read_msr>
    d22c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d22e:	9b00      	ldr	r3, [sp, #0]
    d230:	f003 0301 	and.w	r3, r3, #1
    d234:	2b00      	cmp	r3, #0
    d236:	d100      	bne.n	d23a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d23a:	490a      	ldr	r1, [pc, #40]	; (d264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d23c:	9b01      	ldr	r3, [sp, #4]
    d23e:	9a00      	ldr	r2, [sp, #0]
    d240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d244:	4a06      	ldr	r2, [pc, #24]	; (d260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d246:	9b01      	ldr	r3, [sp, #4]
    d248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d24c:	1c5a      	adds	r2, r3, #1
    d24e:	4904      	ldr	r1, [pc, #16]	; (d260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d250:	9b01      	ldr	r3, [sp, #4]
    d252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d256:	bf00      	nop
    d258:	b003      	add	sp, #12
    d25a:	f85d fb04 	ldr.w	pc, [sp], #4
    d25e:	bf00      	nop
    d260:	1fff8f9c 	.word	0x1fff8f9c
    d264:	1fff8f98 	.word	0x1fff8f98

0000d268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d268:	b500      	push	{lr}
    d26a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d26c:	f7f3 fc7c 	bl	b68 <Sys_GetCoreID>
    d270:	4603      	mov	r3, r0
    d272:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d274:	4a0d      	ldr	r2, [pc, #52]	; (d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d276:	9b01      	ldr	r3, [sp, #4]
    d278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d27c:	1e5a      	subs	r2, r3, #1
    d27e:	490b      	ldr	r1, [pc, #44]	; (d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d280:	9b01      	ldr	r3, [sp, #4]
    d282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d286:	4a0a      	ldr	r2, [pc, #40]	; (d2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d288:	9b01      	ldr	r3, [sp, #4]
    d28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d28e:	f003 0301 	and.w	r3, r3, #1
    d292:	2b00      	cmp	r3, #0
    d294:	d106      	bne.n	d2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d296:	4a05      	ldr	r2, [pc, #20]	; (d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d298:	9b01      	ldr	r3, [sp, #4]
    d29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d100      	bne.n	d2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2a4:	bf00      	nop
    d2a6:	b003      	add	sp, #12
    d2a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ac:	1fff8f9c 	.word	0x1fff8f9c
    d2b0:	1fff8f98 	.word	0x1fff8f98

0000d2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d2b4:	b500      	push	{lr}
    d2b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2b8:	f7f3 fc56 	bl	b68 <Sys_GetCoreID>
    d2bc:	4603      	mov	r3, r0
    d2be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d2c0:	4a10      	ldr	r2, [pc, #64]	; (d304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d2c2:	9b01      	ldr	r3, [sp, #4]
    d2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d10d      	bne.n	d2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2cc:	f7f3 fb6a 	bl	9a4 <Adc_schm_read_msr>
    d2d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2d2:	9b00      	ldr	r3, [sp, #0]
    d2d4:	f003 0301 	and.w	r3, r3, #1
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d100      	bne.n	d2de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d2de:	490a      	ldr	r1, [pc, #40]	; (d308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d2e0:	9b01      	ldr	r3, [sp, #4]
    d2e2:	9a00      	ldr	r2, [sp, #0]
    d2e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d2e8:	4a06      	ldr	r2, [pc, #24]	; (d304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d2ea:	9b01      	ldr	r3, [sp, #4]
    d2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f0:	1c5a      	adds	r2, r3, #1
    d2f2:	4904      	ldr	r1, [pc, #16]	; (d304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d2f4:	9b01      	ldr	r3, [sp, #4]
    d2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2fa:	bf00      	nop
    d2fc:	b003      	add	sp, #12
    d2fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d302:	bf00      	nop
    d304:	1fff8fa4 	.word	0x1fff8fa4
    d308:	1fff8fa0 	.word	0x1fff8fa0

0000d30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d30c:	b500      	push	{lr}
    d30e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d310:	f7f3 fc2a 	bl	b68 <Sys_GetCoreID>
    d314:	4603      	mov	r3, r0
    d316:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d318:	4a0d      	ldr	r2, [pc, #52]	; (d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d31a:	9b01      	ldr	r3, [sp, #4]
    d31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d320:	1e5a      	subs	r2, r3, #1
    d322:	490b      	ldr	r1, [pc, #44]	; (d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d324:	9b01      	ldr	r3, [sp, #4]
    d326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d32a:	4a0a      	ldr	r2, [pc, #40]	; (d354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d32c:	9b01      	ldr	r3, [sp, #4]
    d32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d332:	f003 0301 	and.w	r3, r3, #1
    d336:	2b00      	cmp	r3, #0
    d338:	d106      	bne.n	d348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d33a:	4a05      	ldr	r2, [pc, #20]	; (d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d342:	2b00      	cmp	r3, #0
    d344:	d100      	bne.n	d348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d348:	bf00      	nop
    d34a:	b003      	add	sp, #12
    d34c:	f85d fb04 	ldr.w	pc, [sp], #4
    d350:	1fff8fa4 	.word	0x1fff8fa4
    d354:	1fff8fa0 	.word	0x1fff8fa0

0000d358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d358:	b500      	push	{lr}
    d35a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d35c:	f7f3 fc04 	bl	b68 <Sys_GetCoreID>
    d360:	4603      	mov	r3, r0
    d362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    d364:	4a10      	ldr	r2, [pc, #64]	; (d3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d366:	9b01      	ldr	r3, [sp, #4]
    d368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d36c:	2b00      	cmp	r3, #0
    d36e:	d10d      	bne.n	d38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d370:	f7f3 fb18 	bl	9a4 <Adc_schm_read_msr>
    d374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d376:	9b00      	ldr	r3, [sp, #0]
    d378:	f003 0301 	and.w	r3, r3, #1
    d37c:	2b00      	cmp	r3, #0
    d37e:	d100      	bne.n	d382 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    d382:	490a      	ldr	r1, [pc, #40]	; (d3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    d384:	9b01      	ldr	r3, [sp, #4]
    d386:	9a00      	ldr	r2, [sp, #0]
    d388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    d38c:	4a06      	ldr	r2, [pc, #24]	; (d3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d38e:	9b01      	ldr	r3, [sp, #4]
    d390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d394:	1c5a      	adds	r2, r3, #1
    d396:	4904      	ldr	r1, [pc, #16]	; (d3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d398:	9b01      	ldr	r3, [sp, #4]
    d39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d39e:	bf00      	nop
    d3a0:	b003      	add	sp, #12
    d3a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3a6:	bf00      	nop
    d3a8:	1fff8fac 	.word	0x1fff8fac
    d3ac:	1fff8fa8 	.word	0x1fff8fa8

0000d3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d3b0:	b500      	push	{lr}
    d3b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3b4:	f7f3 fbd8 	bl	b68 <Sys_GetCoreID>
    d3b8:	4603      	mov	r3, r0
    d3ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    d3bc:	4a0d      	ldr	r2, [pc, #52]	; (d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d3be:	9b01      	ldr	r3, [sp, #4]
    d3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c4:	1e5a      	subs	r2, r3, #1
    d3c6:	490b      	ldr	r1, [pc, #44]	; (d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d3c8:	9b01      	ldr	r3, [sp, #4]
    d3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    d3ce:	4a0a      	ldr	r2, [pc, #40]	; (d3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    d3d0:	9b01      	ldr	r3, [sp, #4]
    d3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d6:	f003 0301 	and.w	r3, r3, #1
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d106      	bne.n	d3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    d3de:	4a05      	ldr	r2, [pc, #20]	; (d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d100      	bne.n	d3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3ec:	bf00      	nop
    d3ee:	b003      	add	sp, #12
    d3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d3f4:	1fff8fac 	.word	0x1fff8fac
    d3f8:	1fff8fa8 	.word	0x1fff8fa8

0000d3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d3fc:	b500      	push	{lr}
    d3fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d400:	f7f3 fbb2 	bl	b68 <Sys_GetCoreID>
    d404:	4603      	mov	r3, r0
    d406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    d408:	4a10      	ldr	r2, [pc, #64]	; (d44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d40a:	9b01      	ldr	r3, [sp, #4]
    d40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d410:	2b00      	cmp	r3, #0
    d412:	d10d      	bne.n	d430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d414:	f7f3 fac6 	bl	9a4 <Adc_schm_read_msr>
    d418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d41a:	9b00      	ldr	r3, [sp, #0]
    d41c:	f003 0301 	and.w	r3, r3, #1
    d420:	2b00      	cmp	r3, #0
    d422:	d100      	bne.n	d426 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    d426:	490a      	ldr	r1, [pc, #40]	; (d450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    d428:	9b01      	ldr	r3, [sp, #4]
    d42a:	9a00      	ldr	r2, [sp, #0]
    d42c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    d430:	4a06      	ldr	r2, [pc, #24]	; (d44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d432:	9b01      	ldr	r3, [sp, #4]
    d434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d438:	1c5a      	adds	r2, r3, #1
    d43a:	4904      	ldr	r1, [pc, #16]	; (d44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d442:	bf00      	nop
    d444:	b003      	add	sp, #12
    d446:	f85d fb04 	ldr.w	pc, [sp], #4
    d44a:	bf00      	nop
    d44c:	1fff8fb4 	.word	0x1fff8fb4
    d450:	1fff8fb0 	.word	0x1fff8fb0

0000d454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d454:	b500      	push	{lr}
    d456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d458:	f7f3 fb86 	bl	b68 <Sys_GetCoreID>
    d45c:	4603      	mov	r3, r0
    d45e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    d460:	4a0d      	ldr	r2, [pc, #52]	; (d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d462:	9b01      	ldr	r3, [sp, #4]
    d464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d468:	1e5a      	subs	r2, r3, #1
    d46a:	490b      	ldr	r1, [pc, #44]	; (d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d46c:	9b01      	ldr	r3, [sp, #4]
    d46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    d472:	4a0a      	ldr	r2, [pc, #40]	; (d49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    d474:	9b01      	ldr	r3, [sp, #4]
    d476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d47a:	f003 0301 	and.w	r3, r3, #1
    d47e:	2b00      	cmp	r3, #0
    d480:	d106      	bne.n	d490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    d482:	4a05      	ldr	r2, [pc, #20]	; (d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d48a:	2b00      	cmp	r3, #0
    d48c:	d100      	bne.n	d490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d48e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d490:	bf00      	nop
    d492:	b003      	add	sp, #12
    d494:	f85d fb04 	ldr.w	pc, [sp], #4
    d498:	1fff8fb4 	.word	0x1fff8fb4
    d49c:	1fff8fb0 	.word	0x1fff8fb0

0000d4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d4a0:	b500      	push	{lr}
    d4a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4a4:	f7f3 fb60 	bl	b68 <Sys_GetCoreID>
    d4a8:	4603      	mov	r3, r0
    d4aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    d4ac:	4a10      	ldr	r2, [pc, #64]	; (d4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d4ae:	9b01      	ldr	r3, [sp, #4]
    d4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d10d      	bne.n	d4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4b8:	f7f3 fa74 	bl	9a4 <Adc_schm_read_msr>
    d4bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4be:	9b00      	ldr	r3, [sp, #0]
    d4c0:	f003 0301 	and.w	r3, r3, #1
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d100      	bne.n	d4ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    d4ca:	490a      	ldr	r1, [pc, #40]	; (d4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    d4cc:	9b01      	ldr	r3, [sp, #4]
    d4ce:	9a00      	ldr	r2, [sp, #0]
    d4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    d4d4:	4a06      	ldr	r2, [pc, #24]	; (d4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d4d6:	9b01      	ldr	r3, [sp, #4]
    d4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4dc:	1c5a      	adds	r2, r3, #1
    d4de:	4904      	ldr	r1, [pc, #16]	; (d4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4e6:	bf00      	nop
    d4e8:	b003      	add	sp, #12
    d4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d4ee:	bf00      	nop
    d4f0:	1fff8fbc 	.word	0x1fff8fbc
    d4f4:	1fff8fb8 	.word	0x1fff8fb8

0000d4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d4f8:	b500      	push	{lr}
    d4fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4fc:	f7f3 fb34 	bl	b68 <Sys_GetCoreID>
    d500:	4603      	mov	r3, r0
    d502:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    d504:	4a0d      	ldr	r2, [pc, #52]	; (d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d506:	9b01      	ldr	r3, [sp, #4]
    d508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d50c:	1e5a      	subs	r2, r3, #1
    d50e:	490b      	ldr	r1, [pc, #44]	; (d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d510:	9b01      	ldr	r3, [sp, #4]
    d512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    d516:	4a0a      	ldr	r2, [pc, #40]	; (d540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    d518:	9b01      	ldr	r3, [sp, #4]
    d51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d51e:	f003 0301 	and.w	r3, r3, #1
    d522:	2b00      	cmp	r3, #0
    d524:	d106      	bne.n	d534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    d526:	4a05      	ldr	r2, [pc, #20]	; (d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d52e:	2b00      	cmp	r3, #0
    d530:	d100      	bne.n	d534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d534:	bf00      	nop
    d536:	b003      	add	sp, #12
    d538:	f85d fb04 	ldr.w	pc, [sp], #4
    d53c:	1fff8fbc 	.word	0x1fff8fbc
    d540:	1fff8fb8 	.word	0x1fff8fb8

0000d544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d544:	b500      	push	{lr}
    d546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d548:	f7f3 fb0e 	bl	b68 <Sys_GetCoreID>
    d54c:	4603      	mov	r3, r0
    d54e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    d550:	4a10      	ldr	r2, [pc, #64]	; (d594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d552:	9b01      	ldr	r3, [sp, #4]
    d554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d558:	2b00      	cmp	r3, #0
    d55a:	d10d      	bne.n	d578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d55c:	f7f3 fa22 	bl	9a4 <Adc_schm_read_msr>
    d560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d562:	9b00      	ldr	r3, [sp, #0]
    d564:	f003 0301 	and.w	r3, r3, #1
    d568:	2b00      	cmp	r3, #0
    d56a:	d100      	bne.n	d56e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d56c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    d56e:	490a      	ldr	r1, [pc, #40]	; (d598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    d570:	9b01      	ldr	r3, [sp, #4]
    d572:	9a00      	ldr	r2, [sp, #0]
    d574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    d578:	4a06      	ldr	r2, [pc, #24]	; (d594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d57a:	9b01      	ldr	r3, [sp, #4]
    d57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d580:	1c5a      	adds	r2, r3, #1
    d582:	4904      	ldr	r1, [pc, #16]	; (d594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d58a:	bf00      	nop
    d58c:	b003      	add	sp, #12
    d58e:	f85d fb04 	ldr.w	pc, [sp], #4
    d592:	bf00      	nop
    d594:	1fff8fc4 	.word	0x1fff8fc4
    d598:	1fff8fc0 	.word	0x1fff8fc0

0000d59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d59c:	b500      	push	{lr}
    d59e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a0:	f7f3 fae2 	bl	b68 <Sys_GetCoreID>
    d5a4:	4603      	mov	r3, r0
    d5a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    d5a8:	4a0d      	ldr	r2, [pc, #52]	; (d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d5aa:	9b01      	ldr	r3, [sp, #4]
    d5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b0:	1e5a      	subs	r2, r3, #1
    d5b2:	490b      	ldr	r1, [pc, #44]	; (d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d5b4:	9b01      	ldr	r3, [sp, #4]
    d5b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    d5ba:	4a0a      	ldr	r2, [pc, #40]	; (d5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c2:	f003 0301 	and.w	r3, r3, #1
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d106      	bne.n	d5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    d5ca:	4a05      	ldr	r2, [pc, #20]	; (d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d100      	bne.n	d5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5d8:	bf00      	nop
    d5da:	b003      	add	sp, #12
    d5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e0:	1fff8fc4 	.word	0x1fff8fc4
    d5e4:	1fff8fc0 	.word	0x1fff8fc0

0000d5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d5e8:	b500      	push	{lr}
    d5ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5ec:	f7f3 fabc 	bl	b68 <Sys_GetCoreID>
    d5f0:	4603      	mov	r3, r0
    d5f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    d5f4:	4a10      	ldr	r2, [pc, #64]	; (d638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d5f6:	9b01      	ldr	r3, [sp, #4]
    d5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d10d      	bne.n	d61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d600:	f7f3 f9d0 	bl	9a4 <Adc_schm_read_msr>
    d604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d606:	9b00      	ldr	r3, [sp, #0]
    d608:	f003 0301 	and.w	r3, r3, #1
    d60c:	2b00      	cmp	r3, #0
    d60e:	d100      	bne.n	d612 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    d612:	490a      	ldr	r1, [pc, #40]	; (d63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    d614:	9b01      	ldr	r3, [sp, #4]
    d616:	9a00      	ldr	r2, [sp, #0]
    d618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    d61c:	4a06      	ldr	r2, [pc, #24]	; (d638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d61e:	9b01      	ldr	r3, [sp, #4]
    d620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d624:	1c5a      	adds	r2, r3, #1
    d626:	4904      	ldr	r1, [pc, #16]	; (d638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d62e:	bf00      	nop
    d630:	b003      	add	sp, #12
    d632:	f85d fb04 	ldr.w	pc, [sp], #4
    d636:	bf00      	nop
    d638:	1fff8fcc 	.word	0x1fff8fcc
    d63c:	1fff8fc8 	.word	0x1fff8fc8

0000d640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d640:	b500      	push	{lr}
    d642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d644:	f7f3 fa90 	bl	b68 <Sys_GetCoreID>
    d648:	4603      	mov	r3, r0
    d64a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    d64c:	4a0d      	ldr	r2, [pc, #52]	; (d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d64e:	9b01      	ldr	r3, [sp, #4]
    d650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d654:	1e5a      	subs	r2, r3, #1
    d656:	490b      	ldr	r1, [pc, #44]	; (d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d658:	9b01      	ldr	r3, [sp, #4]
    d65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    d65e:	4a0a      	ldr	r2, [pc, #40]	; (d688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    d660:	9b01      	ldr	r3, [sp, #4]
    d662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d666:	f003 0301 	and.w	r3, r3, #1
    d66a:	2b00      	cmp	r3, #0
    d66c:	d106      	bne.n	d67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    d66e:	4a05      	ldr	r2, [pc, #20]	; (d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d676:	2b00      	cmp	r3, #0
    d678:	d100      	bne.n	d67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d67a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d67c:	bf00      	nop
    d67e:	b003      	add	sp, #12
    d680:	f85d fb04 	ldr.w	pc, [sp], #4
    d684:	1fff8fcc 	.word	0x1fff8fcc
    d688:	1fff8fc8 	.word	0x1fff8fc8

0000d68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d68c:	b500      	push	{lr}
    d68e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d690:	f7f3 fa6a 	bl	b68 <Sys_GetCoreID>
    d694:	4603      	mov	r3, r0
    d696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    d698:	4a10      	ldr	r2, [pc, #64]	; (d6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d69a:	9b01      	ldr	r3, [sp, #4]
    d69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a0:	2b00      	cmp	r3, #0
    d6a2:	d10d      	bne.n	d6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6a4:	f7f3 f97e 	bl	9a4 <Adc_schm_read_msr>
    d6a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6aa:	9b00      	ldr	r3, [sp, #0]
    d6ac:	f003 0301 	and.w	r3, r3, #1
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d100      	bne.n	d6b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    d6b6:	490a      	ldr	r1, [pc, #40]	; (d6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    d6b8:	9b01      	ldr	r3, [sp, #4]
    d6ba:	9a00      	ldr	r2, [sp, #0]
    d6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    d6c0:	4a06      	ldr	r2, [pc, #24]	; (d6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d6c2:	9b01      	ldr	r3, [sp, #4]
    d6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c8:	1c5a      	adds	r2, r3, #1
    d6ca:	4904      	ldr	r1, [pc, #16]	; (d6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6d2:	bf00      	nop
    d6d4:	b003      	add	sp, #12
    d6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d6da:	bf00      	nop
    d6dc:	1fff8fd4 	.word	0x1fff8fd4
    d6e0:	1fff8fd0 	.word	0x1fff8fd0

0000d6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d6e4:	b500      	push	{lr}
    d6e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6e8:	f7f3 fa3e 	bl	b68 <Sys_GetCoreID>
    d6ec:	4603      	mov	r3, r0
    d6ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    d6f0:	4a0d      	ldr	r2, [pc, #52]	; (d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d6f2:	9b01      	ldr	r3, [sp, #4]
    d6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6f8:	1e5a      	subs	r2, r3, #1
    d6fa:	490b      	ldr	r1, [pc, #44]	; (d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d6fc:	9b01      	ldr	r3, [sp, #4]
    d6fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    d702:	4a0a      	ldr	r2, [pc, #40]	; (d72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d70a:	f003 0301 	and.w	r3, r3, #1
    d70e:	2b00      	cmp	r3, #0
    d710:	d106      	bne.n	d720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    d712:	4a05      	ldr	r2, [pc, #20]	; (d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d71a:	2b00      	cmp	r3, #0
    d71c:	d100      	bne.n	d720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d71e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d720:	bf00      	nop
    d722:	b003      	add	sp, #12
    d724:	f85d fb04 	ldr.w	pc, [sp], #4
    d728:	1fff8fd4 	.word	0x1fff8fd4
    d72c:	1fff8fd0 	.word	0x1fff8fd0

0000d730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d730:	b500      	push	{lr}
    d732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d734:	f7f3 fa18 	bl	b68 <Sys_GetCoreID>
    d738:	4603      	mov	r3, r0
    d73a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    d73c:	4a10      	ldr	r2, [pc, #64]	; (d780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d73e:	9b01      	ldr	r3, [sp, #4]
    d740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d744:	2b00      	cmp	r3, #0
    d746:	d10d      	bne.n	d764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d748:	f7f3 f92c 	bl	9a4 <Adc_schm_read_msr>
    d74c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d74e:	9b00      	ldr	r3, [sp, #0]
    d750:	f003 0301 	and.w	r3, r3, #1
    d754:	2b00      	cmp	r3, #0
    d756:	d100      	bne.n	d75a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    d75a:	490a      	ldr	r1, [pc, #40]	; (d784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    d75c:	9b01      	ldr	r3, [sp, #4]
    d75e:	9a00      	ldr	r2, [sp, #0]
    d760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    d764:	4a06      	ldr	r2, [pc, #24]	; (d780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d766:	9b01      	ldr	r3, [sp, #4]
    d768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d76c:	1c5a      	adds	r2, r3, #1
    d76e:	4904      	ldr	r1, [pc, #16]	; (d780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d776:	bf00      	nop
    d778:	b003      	add	sp, #12
    d77a:	f85d fb04 	ldr.w	pc, [sp], #4
    d77e:	bf00      	nop
    d780:	1fff8fdc 	.word	0x1fff8fdc
    d784:	1fff8fd8 	.word	0x1fff8fd8

0000d788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d788:	b500      	push	{lr}
    d78a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d78c:	f7f3 f9ec 	bl	b68 <Sys_GetCoreID>
    d790:	4603      	mov	r3, r0
    d792:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    d794:	4a0d      	ldr	r2, [pc, #52]	; (d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d796:	9b01      	ldr	r3, [sp, #4]
    d798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d79c:	1e5a      	subs	r2, r3, #1
    d79e:	490b      	ldr	r1, [pc, #44]	; (d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d7a0:	9b01      	ldr	r3, [sp, #4]
    d7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    d7a6:	4a0a      	ldr	r2, [pc, #40]	; (d7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    d7a8:	9b01      	ldr	r3, [sp, #4]
    d7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ae:	f003 0301 	and.w	r3, r3, #1
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d106      	bne.n	d7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    d7b6:	4a05      	ldr	r2, [pc, #20]	; (d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d100      	bne.n	d7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7c4:	bf00      	nop
    d7c6:	b003      	add	sp, #12
    d7c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d7cc:	1fff8fdc 	.word	0x1fff8fdc
    d7d0:	1fff8fd8 	.word	0x1fff8fd8

0000d7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d7d4:	b500      	push	{lr}
    d7d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7d8:	f7f3 f9c6 	bl	b68 <Sys_GetCoreID>
    d7dc:	4603      	mov	r3, r0
    d7de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    d7e0:	4a10      	ldr	r2, [pc, #64]	; (d824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d7e2:	9b01      	ldr	r3, [sp, #4]
    d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	d10d      	bne.n	d808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7ec:	f7f3 f8da 	bl	9a4 <Adc_schm_read_msr>
    d7f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7f2:	9b00      	ldr	r3, [sp, #0]
    d7f4:	f003 0301 	and.w	r3, r3, #1
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	d100      	bne.n	d7fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    d7fe:	490a      	ldr	r1, [pc, #40]	; (d828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    d800:	9b01      	ldr	r3, [sp, #4]
    d802:	9a00      	ldr	r2, [sp, #0]
    d804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    d808:	4a06      	ldr	r2, [pc, #24]	; (d824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d80a:	9b01      	ldr	r3, [sp, #4]
    d80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d810:	1c5a      	adds	r2, r3, #1
    d812:	4904      	ldr	r1, [pc, #16]	; (d824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d81a:	bf00      	nop
    d81c:	b003      	add	sp, #12
    d81e:	f85d fb04 	ldr.w	pc, [sp], #4
    d822:	bf00      	nop
    d824:	1fff8fe4 	.word	0x1fff8fe4
    d828:	1fff8fe0 	.word	0x1fff8fe0

0000d82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d82c:	b500      	push	{lr}
    d82e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d830:	f7f3 f99a 	bl	b68 <Sys_GetCoreID>
    d834:	4603      	mov	r3, r0
    d836:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    d838:	4a0d      	ldr	r2, [pc, #52]	; (d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d83a:	9b01      	ldr	r3, [sp, #4]
    d83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d840:	1e5a      	subs	r2, r3, #1
    d842:	490b      	ldr	r1, [pc, #44]	; (d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d844:	9b01      	ldr	r3, [sp, #4]
    d846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    d84a:	4a0a      	ldr	r2, [pc, #40]	; (d874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    d84c:	9b01      	ldr	r3, [sp, #4]
    d84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d852:	f003 0301 	and.w	r3, r3, #1
    d856:	2b00      	cmp	r3, #0
    d858:	d106      	bne.n	d868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    d85a:	4a05      	ldr	r2, [pc, #20]	; (d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d862:	2b00      	cmp	r3, #0
    d864:	d100      	bne.n	d868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d868:	bf00      	nop
    d86a:	b003      	add	sp, #12
    d86c:	f85d fb04 	ldr.w	pc, [sp], #4
    d870:	1fff8fe4 	.word	0x1fff8fe4
    d874:	1fff8fe0 	.word	0x1fff8fe0

0000d878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d878:	b500      	push	{lr}
    d87a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d87c:	f7f3 f974 	bl	b68 <Sys_GetCoreID>
    d880:	4603      	mov	r3, r0
    d882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    d884:	4a10      	ldr	r2, [pc, #64]	; (d8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d886:	9b01      	ldr	r3, [sp, #4]
    d888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d10d      	bne.n	d8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d890:	f7f3 f888 	bl	9a4 <Adc_schm_read_msr>
    d894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d896:	9b00      	ldr	r3, [sp, #0]
    d898:	f003 0301 	and.w	r3, r3, #1
    d89c:	2b00      	cmp	r3, #0
    d89e:	d100      	bne.n	d8a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    d8a2:	490a      	ldr	r1, [pc, #40]	; (d8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    d8a4:	9b01      	ldr	r3, [sp, #4]
    d8a6:	9a00      	ldr	r2, [sp, #0]
    d8a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    d8ac:	4a06      	ldr	r2, [pc, #24]	; (d8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d8ae:	9b01      	ldr	r3, [sp, #4]
    d8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8b4:	1c5a      	adds	r2, r3, #1
    d8b6:	4904      	ldr	r1, [pc, #16]	; (d8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8be:	bf00      	nop
    d8c0:	b003      	add	sp, #12
    d8c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d8c6:	bf00      	nop
    d8c8:	1fff8fec 	.word	0x1fff8fec
    d8cc:	1fff8fe8 	.word	0x1fff8fe8

0000d8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d8d0:	b500      	push	{lr}
    d8d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8d4:	f7f3 f948 	bl	b68 <Sys_GetCoreID>
    d8d8:	4603      	mov	r3, r0
    d8da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    d8dc:	4a0d      	ldr	r2, [pc, #52]	; (d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d8de:	9b01      	ldr	r3, [sp, #4]
    d8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e4:	1e5a      	subs	r2, r3, #1
    d8e6:	490b      	ldr	r1, [pc, #44]	; (d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d8e8:	9b01      	ldr	r3, [sp, #4]
    d8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    d8ee:	4a0a      	ldr	r2, [pc, #40]	; (d918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f6:	f003 0301 	and.w	r3, r3, #1
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d106      	bne.n	d90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    d8fe:	4a05      	ldr	r2, [pc, #20]	; (d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d906:	2b00      	cmp	r3, #0
    d908:	d100      	bne.n	d90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d90a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d90c:	bf00      	nop
    d90e:	b003      	add	sp, #12
    d910:	f85d fb04 	ldr.w	pc, [sp], #4
    d914:	1fff8fec 	.word	0x1fff8fec
    d918:	1fff8fe8 	.word	0x1fff8fe8

0000d91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    d91c:	b500      	push	{lr}
    d91e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d920:	f7f3 f922 	bl	b68 <Sys_GetCoreID>
    d924:	4603      	mov	r3, r0
    d926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    d928:	4a10      	ldr	r2, [pc, #64]	; (d96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    d92a:	9b01      	ldr	r3, [sp, #4]
    d92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d930:	2b00      	cmp	r3, #0
    d932:	d10d      	bne.n	d950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d934:	f7f3 f836 	bl	9a4 <Adc_schm_read_msr>
    d938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d93a:	9b00      	ldr	r3, [sp, #0]
    d93c:	f003 0301 	and.w	r3, r3, #1
    d940:	2b00      	cmp	r3, #0
    d942:	d100      	bne.n	d946 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    d946:	490a      	ldr	r1, [pc, #40]	; (d970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    d948:	9b01      	ldr	r3, [sp, #4]
    d94a:	9a00      	ldr	r2, [sp, #0]
    d94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    d950:	4a06      	ldr	r2, [pc, #24]	; (d96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    d952:	9b01      	ldr	r3, [sp, #4]
    d954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d958:	1c5a      	adds	r2, r3, #1
    d95a:	4904      	ldr	r1, [pc, #16]	; (d96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d962:	bf00      	nop
    d964:	b003      	add	sp, #12
    d966:	f85d fb04 	ldr.w	pc, [sp], #4
    d96a:	bf00      	nop
    d96c:	1fff8ff4 	.word	0x1fff8ff4
    d970:	1fff8ff0 	.word	0x1fff8ff0

0000d974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    d974:	b500      	push	{lr}
    d976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d978:	f7f3 f8f6 	bl	b68 <Sys_GetCoreID>
    d97c:	4603      	mov	r3, r0
    d97e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    d980:	4a0d      	ldr	r2, [pc, #52]	; (d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    d982:	9b01      	ldr	r3, [sp, #4]
    d984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d988:	1e5a      	subs	r2, r3, #1
    d98a:	490b      	ldr	r1, [pc, #44]	; (d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    d98c:	9b01      	ldr	r3, [sp, #4]
    d98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    d992:	4a0a      	ldr	r2, [pc, #40]	; (d9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    d994:	9b01      	ldr	r3, [sp, #4]
    d996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d99a:	f003 0301 	and.w	r3, r3, #1
    d99e:	2b00      	cmp	r3, #0
    d9a0:	d106      	bne.n	d9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    d9a2:	4a05      	ldr	r2, [pc, #20]	; (d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d100      	bne.n	d9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9b0:	bf00      	nop
    d9b2:	b003      	add	sp, #12
    d9b4:	f85d fb04 	ldr.w	pc, [sp], #4
    d9b8:	1fff8ff4 	.word	0x1fff8ff4
    d9bc:	1fff8ff0 	.word	0x1fff8ff0

0000d9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    d9c0:	b500      	push	{lr}
    d9c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9c4:	f7f3 f8d0 	bl	b68 <Sys_GetCoreID>
    d9c8:	4603      	mov	r3, r0
    d9ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    d9cc:	4a10      	ldr	r2, [pc, #64]	; (da10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    d9ce:	9b01      	ldr	r3, [sp, #4]
    d9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9d4:	2b00      	cmp	r3, #0
    d9d6:	d10d      	bne.n	d9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9d8:	f7f2 ffe4 	bl	9a4 <Adc_schm_read_msr>
    d9dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9de:	9b00      	ldr	r3, [sp, #0]
    d9e0:	f003 0301 	and.w	r3, r3, #1
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	d100      	bne.n	d9ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    d9ea:	490a      	ldr	r1, [pc, #40]	; (da14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    d9ec:	9b01      	ldr	r3, [sp, #4]
    d9ee:	9a00      	ldr	r2, [sp, #0]
    d9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    d9f4:	4a06      	ldr	r2, [pc, #24]	; (da10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    d9f6:	9b01      	ldr	r3, [sp, #4]
    d9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9fc:	1c5a      	adds	r2, r3, #1
    d9fe:	4904      	ldr	r1, [pc, #16]	; (da10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da06:	bf00      	nop
    da08:	b003      	add	sp, #12
    da0a:	f85d fb04 	ldr.w	pc, [sp], #4
    da0e:	bf00      	nop
    da10:	1fff8ffc 	.word	0x1fff8ffc
    da14:	1fff8ff8 	.word	0x1fff8ff8

0000da18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    da18:	b500      	push	{lr}
    da1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da1c:	f7f3 f8a4 	bl	b68 <Sys_GetCoreID>
    da20:	4603      	mov	r3, r0
    da22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    da24:	4a0d      	ldr	r2, [pc, #52]	; (da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    da26:	9b01      	ldr	r3, [sp, #4]
    da28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da2c:	1e5a      	subs	r2, r3, #1
    da2e:	490b      	ldr	r1, [pc, #44]	; (da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    da30:	9b01      	ldr	r3, [sp, #4]
    da32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    da36:	4a0a      	ldr	r2, [pc, #40]	; (da60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da3e:	f003 0301 	and.w	r3, r3, #1
    da42:	2b00      	cmp	r3, #0
    da44:	d106      	bne.n	da54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    da46:	4a05      	ldr	r2, [pc, #20]	; (da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da4e:	2b00      	cmp	r3, #0
    da50:	d100      	bne.n	da54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da54:	bf00      	nop
    da56:	b003      	add	sp, #12
    da58:	f85d fb04 	ldr.w	pc, [sp], #4
    da5c:	1fff8ffc 	.word	0x1fff8ffc
    da60:	1fff8ff8 	.word	0x1fff8ff8

0000da64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    da64:	b500      	push	{lr}
    da66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da68:	f7f3 f87e 	bl	b68 <Sys_GetCoreID>
    da6c:	4603      	mov	r3, r0
    da6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    da70:	4a10      	ldr	r2, [pc, #64]	; (dab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    da72:	9b01      	ldr	r3, [sp, #4]
    da74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da78:	2b00      	cmp	r3, #0
    da7a:	d10d      	bne.n	da98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da7c:	f7f2 ff92 	bl	9a4 <Adc_schm_read_msr>
    da80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da82:	9b00      	ldr	r3, [sp, #0]
    da84:	f003 0301 	and.w	r3, r3, #1
    da88:	2b00      	cmp	r3, #0
    da8a:	d100      	bne.n	da8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    da8e:	490a      	ldr	r1, [pc, #40]	; (dab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    da90:	9b01      	ldr	r3, [sp, #4]
    da92:	9a00      	ldr	r2, [sp, #0]
    da94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    da98:	4a06      	ldr	r2, [pc, #24]	; (dab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    da9a:	9b01      	ldr	r3, [sp, #4]
    da9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa0:	1c5a      	adds	r2, r3, #1
    daa2:	4904      	ldr	r1, [pc, #16]	; (dab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    daaa:	bf00      	nop
    daac:	b003      	add	sp, #12
    daae:	f85d fb04 	ldr.w	pc, [sp], #4
    dab2:	bf00      	nop
    dab4:	1fff9004 	.word	0x1fff9004
    dab8:	1fff9000 	.word	0x1fff9000

0000dabc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    dabc:	b500      	push	{lr}
    dabe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac0:	f7f3 f852 	bl	b68 <Sys_GetCoreID>
    dac4:	4603      	mov	r3, r0
    dac6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    dac8:	4a0d      	ldr	r2, [pc, #52]	; (db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    daca:	9b01      	ldr	r3, [sp, #4]
    dacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad0:	1e5a      	subs	r2, r3, #1
    dad2:	490b      	ldr	r1, [pc, #44]	; (db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dad4:	9b01      	ldr	r3, [sp, #4]
    dad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    dada:	4a0a      	ldr	r2, [pc, #40]	; (db04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    dadc:	9b01      	ldr	r3, [sp, #4]
    dade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae2:	f003 0301 	and.w	r3, r3, #1
    dae6:	2b00      	cmp	r3, #0
    dae8:	d106      	bne.n	daf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    daea:	4a05      	ldr	r2, [pc, #20]	; (db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daf2:	2b00      	cmp	r3, #0
    daf4:	d100      	bne.n	daf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    daf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    daf8:	bf00      	nop
    dafa:	b003      	add	sp, #12
    dafc:	f85d fb04 	ldr.w	pc, [sp], #4
    db00:	1fff9004 	.word	0x1fff9004
    db04:	1fff9000 	.word	0x1fff9000

0000db08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    db08:	b500      	push	{lr}
    db0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db0c:	f7f3 f82c 	bl	b68 <Sys_GetCoreID>
    db10:	4603      	mov	r3, r0
    db12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    db14:	4a10      	ldr	r2, [pc, #64]	; (db58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    db16:	9b01      	ldr	r3, [sp, #4]
    db18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d10d      	bne.n	db3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db20:	f7f2 ff40 	bl	9a4 <Adc_schm_read_msr>
    db24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db26:	9b00      	ldr	r3, [sp, #0]
    db28:	f003 0301 	and.w	r3, r3, #1
    db2c:	2b00      	cmp	r3, #0
    db2e:	d100      	bne.n	db32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    db32:	490a      	ldr	r1, [pc, #40]	; (db5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    db34:	9b01      	ldr	r3, [sp, #4]
    db36:	9a00      	ldr	r2, [sp, #0]
    db38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    db3c:	4a06      	ldr	r2, [pc, #24]	; (db58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    db3e:	9b01      	ldr	r3, [sp, #4]
    db40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db44:	1c5a      	adds	r2, r3, #1
    db46:	4904      	ldr	r1, [pc, #16]	; (db58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db4e:	bf00      	nop
    db50:	b003      	add	sp, #12
    db52:	f85d fb04 	ldr.w	pc, [sp], #4
    db56:	bf00      	nop
    db58:	1fff900c 	.word	0x1fff900c
    db5c:	1fff9008 	.word	0x1fff9008

0000db60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    db60:	b500      	push	{lr}
    db62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db64:	f7f3 f800 	bl	b68 <Sys_GetCoreID>
    db68:	4603      	mov	r3, r0
    db6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    db6c:	4a0d      	ldr	r2, [pc, #52]	; (dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    db6e:	9b01      	ldr	r3, [sp, #4]
    db70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db74:	1e5a      	subs	r2, r3, #1
    db76:	490b      	ldr	r1, [pc, #44]	; (dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    db78:	9b01      	ldr	r3, [sp, #4]
    db7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    db7e:	4a0a      	ldr	r2, [pc, #40]	; (dba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    db80:	9b01      	ldr	r3, [sp, #4]
    db82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db86:	f003 0301 	and.w	r3, r3, #1
    db8a:	2b00      	cmp	r3, #0
    db8c:	d106      	bne.n	db9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    db8e:	4a05      	ldr	r2, [pc, #20]	; (dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db96:	2b00      	cmp	r3, #0
    db98:	d100      	bne.n	db9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db9c:	bf00      	nop
    db9e:	b003      	add	sp, #12
    dba0:	f85d fb04 	ldr.w	pc, [sp], #4
    dba4:	1fff900c 	.word	0x1fff900c
    dba8:	1fff9008 	.word	0x1fff9008

0000dbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dbac:	b500      	push	{lr}
    dbae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbb0:	f7f2 ffda 	bl	b68 <Sys_GetCoreID>
    dbb4:	4603      	mov	r3, r0
    dbb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    dbb8:	4a10      	ldr	r2, [pc, #64]	; (dbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dbba:	9b01      	ldr	r3, [sp, #4]
    dbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc0:	2b00      	cmp	r3, #0
    dbc2:	d10d      	bne.n	dbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbc4:	f7f2 feee 	bl	9a4 <Adc_schm_read_msr>
    dbc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbca:	9b00      	ldr	r3, [sp, #0]
    dbcc:	f003 0301 	and.w	r3, r3, #1
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d100      	bne.n	dbd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    dbd6:	490a      	ldr	r1, [pc, #40]	; (dc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    dbd8:	9b01      	ldr	r3, [sp, #4]
    dbda:	9a00      	ldr	r2, [sp, #0]
    dbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    dbe0:	4a06      	ldr	r2, [pc, #24]	; (dbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dbe2:	9b01      	ldr	r3, [sp, #4]
    dbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe8:	1c5a      	adds	r2, r3, #1
    dbea:	4904      	ldr	r1, [pc, #16]	; (dbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbf2:	bf00      	nop
    dbf4:	b003      	add	sp, #12
    dbf6:	f85d fb04 	ldr.w	pc, [sp], #4
    dbfa:	bf00      	nop
    dbfc:	1fff9014 	.word	0x1fff9014
    dc00:	1fff9010 	.word	0x1fff9010

0000dc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dc04:	b500      	push	{lr}
    dc06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc08:	f7f2 ffae 	bl	b68 <Sys_GetCoreID>
    dc0c:	4603      	mov	r3, r0
    dc0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    dc10:	4a0d      	ldr	r2, [pc, #52]	; (dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dc12:	9b01      	ldr	r3, [sp, #4]
    dc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc18:	1e5a      	subs	r2, r3, #1
    dc1a:	490b      	ldr	r1, [pc, #44]	; (dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dc1c:	9b01      	ldr	r3, [sp, #4]
    dc1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    dc22:	4a0a      	ldr	r2, [pc, #40]	; (dc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc2a:	f003 0301 	and.w	r3, r3, #1
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d106      	bne.n	dc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    dc32:	4a05      	ldr	r2, [pc, #20]	; (dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d100      	bne.n	dc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc40:	bf00      	nop
    dc42:	b003      	add	sp, #12
    dc44:	f85d fb04 	ldr.w	pc, [sp], #4
    dc48:	1fff9014 	.word	0x1fff9014
    dc4c:	1fff9010 	.word	0x1fff9010

0000dc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dc50:	b500      	push	{lr}
    dc52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc54:	f7f2 ff88 	bl	b68 <Sys_GetCoreID>
    dc58:	4603      	mov	r3, r0
    dc5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    dc5c:	4a10      	ldr	r2, [pc, #64]	; (dca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dc5e:	9b01      	ldr	r3, [sp, #4]
    dc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc64:	2b00      	cmp	r3, #0
    dc66:	d10d      	bne.n	dc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc68:	f7f2 fe9c 	bl	9a4 <Adc_schm_read_msr>
    dc6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc6e:	9b00      	ldr	r3, [sp, #0]
    dc70:	f003 0301 	and.w	r3, r3, #1
    dc74:	2b00      	cmp	r3, #0
    dc76:	d100      	bne.n	dc7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    dc7a:	490a      	ldr	r1, [pc, #40]	; (dca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    dc7c:	9b01      	ldr	r3, [sp, #4]
    dc7e:	9a00      	ldr	r2, [sp, #0]
    dc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    dc84:	4a06      	ldr	r2, [pc, #24]	; (dca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dc86:	9b01      	ldr	r3, [sp, #4]
    dc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc8c:	1c5a      	adds	r2, r3, #1
    dc8e:	4904      	ldr	r1, [pc, #16]	; (dca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc96:	bf00      	nop
    dc98:	b003      	add	sp, #12
    dc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    dc9e:	bf00      	nop
    dca0:	1fff901c 	.word	0x1fff901c
    dca4:	1fff9018 	.word	0x1fff9018

0000dca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dca8:	b500      	push	{lr}
    dcaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcac:	f7f2 ff5c 	bl	b68 <Sys_GetCoreID>
    dcb0:	4603      	mov	r3, r0
    dcb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    dcb4:	4a0d      	ldr	r2, [pc, #52]	; (dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dcb6:	9b01      	ldr	r3, [sp, #4]
    dcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcbc:	1e5a      	subs	r2, r3, #1
    dcbe:	490b      	ldr	r1, [pc, #44]	; (dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dcc0:	9b01      	ldr	r3, [sp, #4]
    dcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    dcc6:	4a0a      	ldr	r2, [pc, #40]	; (dcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcce:	f003 0301 	and.w	r3, r3, #1
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d106      	bne.n	dce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    dcd6:	4a05      	ldr	r2, [pc, #20]	; (dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcde:	2b00      	cmp	r3, #0
    dce0:	d100      	bne.n	dce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dce4:	bf00      	nop
    dce6:	b003      	add	sp, #12
    dce8:	f85d fb04 	ldr.w	pc, [sp], #4
    dcec:	1fff901c 	.word	0x1fff901c
    dcf0:	1fff9018 	.word	0x1fff9018

0000dcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    dcf4:	b500      	push	{lr}
    dcf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcf8:	f7f2 ff36 	bl	b68 <Sys_GetCoreID>
    dcfc:	4603      	mov	r3, r0
    dcfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    dd00:	4a10      	ldr	r2, [pc, #64]	; (dd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d10d      	bne.n	dd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd0c:	f7f2 fe4a 	bl	9a4 <Adc_schm_read_msr>
    dd10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd12:	9b00      	ldr	r3, [sp, #0]
    dd14:	f003 0301 	and.w	r3, r3, #1
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d100      	bne.n	dd1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    dd1e:	490a      	ldr	r1, [pc, #40]	; (dd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    dd20:	9b01      	ldr	r3, [sp, #4]
    dd22:	9a00      	ldr	r2, [sp, #0]
    dd24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    dd28:	4a06      	ldr	r2, [pc, #24]	; (dd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    dd2a:	9b01      	ldr	r3, [sp, #4]
    dd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd30:	1c5a      	adds	r2, r3, #1
    dd32:	4904      	ldr	r1, [pc, #16]	; (dd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd3a:	bf00      	nop
    dd3c:	b003      	add	sp, #12
    dd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    dd42:	bf00      	nop
    dd44:	1fff9024 	.word	0x1fff9024
    dd48:	1fff9020 	.word	0x1fff9020

0000dd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    dd4c:	b500      	push	{lr}
    dd4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd50:	f7f2 ff0a 	bl	b68 <Sys_GetCoreID>
    dd54:	4603      	mov	r3, r0
    dd56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    dd58:	4a0d      	ldr	r2, [pc, #52]	; (dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    dd5a:	9b01      	ldr	r3, [sp, #4]
    dd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd60:	1e5a      	subs	r2, r3, #1
    dd62:	490b      	ldr	r1, [pc, #44]	; (dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    dd64:	9b01      	ldr	r3, [sp, #4]
    dd66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    dd6a:	4a0a      	ldr	r2, [pc, #40]	; (dd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    dd6c:	9b01      	ldr	r3, [sp, #4]
    dd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd72:	f003 0301 	and.w	r3, r3, #1
    dd76:	2b00      	cmp	r3, #0
    dd78:	d106      	bne.n	dd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    dd7a:	4a05      	ldr	r2, [pc, #20]	; (dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    dd7c:	9b01      	ldr	r3, [sp, #4]
    dd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd82:	2b00      	cmp	r3, #0
    dd84:	d100      	bne.n	dd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd88:	bf00      	nop
    dd8a:	b003      	add	sp, #12
    dd8c:	f85d fb04 	ldr.w	pc, [sp], #4
    dd90:	1fff9024 	.word	0x1fff9024
    dd94:	1fff9020 	.word	0x1fff9020

0000dd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    dd98:	b500      	push	{lr}
    dd9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd9c:	f7f2 fee4 	bl	b68 <Sys_GetCoreID>
    dda0:	4603      	mov	r3, r0
    dda2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    dda4:	4a10      	ldr	r2, [pc, #64]	; (dde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    dda6:	9b01      	ldr	r3, [sp, #4]
    dda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddac:	2b00      	cmp	r3, #0
    ddae:	d10d      	bne.n	ddcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddb0:	f7f2 fdf8 	bl	9a4 <Adc_schm_read_msr>
    ddb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddb6:	9b00      	ldr	r3, [sp, #0]
    ddb8:	f003 0301 	and.w	r3, r3, #1
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d100      	bne.n	ddc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    ddc2:	490a      	ldr	r1, [pc, #40]	; (ddec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    ddc4:	9b01      	ldr	r3, [sp, #4]
    ddc6:	9a00      	ldr	r2, [sp, #0]
    ddc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    ddcc:	4a06      	ldr	r2, [pc, #24]	; (dde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    ddce:	9b01      	ldr	r3, [sp, #4]
    ddd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddd4:	1c5a      	adds	r2, r3, #1
    ddd6:	4904      	ldr	r1, [pc, #16]	; (dde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddde:	bf00      	nop
    dde0:	b003      	add	sp, #12
    dde2:	f85d fb04 	ldr.w	pc, [sp], #4
    dde6:	bf00      	nop
    dde8:	1fff902c 	.word	0x1fff902c
    ddec:	1fff9028 	.word	0x1fff9028

0000ddf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    ddf0:	b500      	push	{lr}
    ddf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddf4:	f7f2 feb8 	bl	b68 <Sys_GetCoreID>
    ddf8:	4603      	mov	r3, r0
    ddfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    ddfc:	4a0d      	ldr	r2, [pc, #52]	; (de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    ddfe:	9b01      	ldr	r3, [sp, #4]
    de00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de04:	1e5a      	subs	r2, r3, #1
    de06:	490b      	ldr	r1, [pc, #44]	; (de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    de08:	9b01      	ldr	r3, [sp, #4]
    de0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    de0e:	4a0a      	ldr	r2, [pc, #40]	; (de38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    de10:	9b01      	ldr	r3, [sp, #4]
    de12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de16:	f003 0301 	and.w	r3, r3, #1
    de1a:	2b00      	cmp	r3, #0
    de1c:	d106      	bne.n	de2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    de1e:	4a05      	ldr	r2, [pc, #20]	; (de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de26:	2b00      	cmp	r3, #0
    de28:	d100      	bne.n	de2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de2c:	bf00      	nop
    de2e:	b003      	add	sp, #12
    de30:	f85d fb04 	ldr.w	pc, [sp], #4
    de34:	1fff902c 	.word	0x1fff902c
    de38:	1fff9028 	.word	0x1fff9028

0000de3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    de3c:	b500      	push	{lr}
    de3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de40:	f7f2 fe92 	bl	b68 <Sys_GetCoreID>
    de44:	4603      	mov	r3, r0
    de46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    de48:	4a10      	ldr	r2, [pc, #64]	; (de8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    de4a:	9b01      	ldr	r3, [sp, #4]
    de4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de50:	2b00      	cmp	r3, #0
    de52:	d10d      	bne.n	de70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de54:	f7f2 fda6 	bl	9a4 <Adc_schm_read_msr>
    de58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de5a:	9b00      	ldr	r3, [sp, #0]
    de5c:	f003 0301 	and.w	r3, r3, #1
    de60:	2b00      	cmp	r3, #0
    de62:	d100      	bne.n	de66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    de66:	490a      	ldr	r1, [pc, #40]	; (de90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    de68:	9b01      	ldr	r3, [sp, #4]
    de6a:	9a00      	ldr	r2, [sp, #0]
    de6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    de70:	4a06      	ldr	r2, [pc, #24]	; (de8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    de72:	9b01      	ldr	r3, [sp, #4]
    de74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de78:	1c5a      	adds	r2, r3, #1
    de7a:	4904      	ldr	r1, [pc, #16]	; (de8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    de7c:	9b01      	ldr	r3, [sp, #4]
    de7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de82:	bf00      	nop
    de84:	b003      	add	sp, #12
    de86:	f85d fb04 	ldr.w	pc, [sp], #4
    de8a:	bf00      	nop
    de8c:	1fff9034 	.word	0x1fff9034
    de90:	1fff9030 	.word	0x1fff9030

0000de94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    de94:	b500      	push	{lr}
    de96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de98:	f7f2 fe66 	bl	b68 <Sys_GetCoreID>
    de9c:	4603      	mov	r3, r0
    de9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    dea0:	4a0d      	ldr	r2, [pc, #52]	; (ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    dea2:	9b01      	ldr	r3, [sp, #4]
    dea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dea8:	1e5a      	subs	r2, r3, #1
    deaa:	490b      	ldr	r1, [pc, #44]	; (ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    deac:	9b01      	ldr	r3, [sp, #4]
    deae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    deb2:	4a0a      	ldr	r2, [pc, #40]	; (dedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deba:	f003 0301 	and.w	r3, r3, #1
    debe:	2b00      	cmp	r3, #0
    dec0:	d106      	bne.n	ded0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    dec2:	4a05      	ldr	r2, [pc, #20]	; (ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    dec4:	9b01      	ldr	r3, [sp, #4]
    dec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deca:	2b00      	cmp	r3, #0
    decc:	d100      	bne.n	ded0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ded0:	bf00      	nop
    ded2:	b003      	add	sp, #12
    ded4:	f85d fb04 	ldr.w	pc, [sp], #4
    ded8:	1fff9034 	.word	0x1fff9034
    dedc:	1fff9030 	.word	0x1fff9030

0000dee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    dee0:	b500      	push	{lr}
    dee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dee4:	f7f2 fe40 	bl	b68 <Sys_GetCoreID>
    dee8:	4603      	mov	r3, r0
    deea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    deec:	4a10      	ldr	r2, [pc, #64]	; (df30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    deee:	9b01      	ldr	r3, [sp, #4]
    def0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    def4:	2b00      	cmp	r3, #0
    def6:	d10d      	bne.n	df14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    def8:	f7f2 fd54 	bl	9a4 <Adc_schm_read_msr>
    defc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    defe:	9b00      	ldr	r3, [sp, #0]
    df00:	f003 0301 	and.w	r3, r3, #1
    df04:	2b00      	cmp	r3, #0
    df06:	d100      	bne.n	df0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    df0a:	490a      	ldr	r1, [pc, #40]	; (df34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    df0c:	9b01      	ldr	r3, [sp, #4]
    df0e:	9a00      	ldr	r2, [sp, #0]
    df10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    df14:	4a06      	ldr	r2, [pc, #24]	; (df30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    df16:	9b01      	ldr	r3, [sp, #4]
    df18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df1c:	1c5a      	adds	r2, r3, #1
    df1e:	4904      	ldr	r1, [pc, #16]	; (df30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    df20:	9b01      	ldr	r3, [sp, #4]
    df22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df26:	bf00      	nop
    df28:	b003      	add	sp, #12
    df2a:	f85d fb04 	ldr.w	pc, [sp], #4
    df2e:	bf00      	nop
    df30:	1fff903c 	.word	0x1fff903c
    df34:	1fff9038 	.word	0x1fff9038

0000df38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    df38:	b500      	push	{lr}
    df3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df3c:	f7f2 fe14 	bl	b68 <Sys_GetCoreID>
    df40:	4603      	mov	r3, r0
    df42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    df44:	4a0d      	ldr	r2, [pc, #52]	; (df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    df46:	9b01      	ldr	r3, [sp, #4]
    df48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df4c:	1e5a      	subs	r2, r3, #1
    df4e:	490b      	ldr	r1, [pc, #44]	; (df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    df50:	9b01      	ldr	r3, [sp, #4]
    df52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    df56:	4a0a      	ldr	r2, [pc, #40]	; (df80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df5e:	f003 0301 	and.w	r3, r3, #1
    df62:	2b00      	cmp	r3, #0
    df64:	d106      	bne.n	df74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    df66:	4a05      	ldr	r2, [pc, #20]	; (df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    df68:	9b01      	ldr	r3, [sp, #4]
    df6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df6e:	2b00      	cmp	r3, #0
    df70:	d100      	bne.n	df74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df74:	bf00      	nop
    df76:	b003      	add	sp, #12
    df78:	f85d fb04 	ldr.w	pc, [sp], #4
    df7c:	1fff903c 	.word	0x1fff903c
    df80:	1fff9038 	.word	0x1fff9038

0000df84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    df84:	b500      	push	{lr}
    df86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df88:	f7f2 fdee 	bl	b68 <Sys_GetCoreID>
    df8c:	4603      	mov	r3, r0
    df8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    df90:	4a10      	ldr	r2, [pc, #64]	; (dfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    df92:	9b01      	ldr	r3, [sp, #4]
    df94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df98:	2b00      	cmp	r3, #0
    df9a:	d10d      	bne.n	dfb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df9c:	f7f2 fd02 	bl	9a4 <Adc_schm_read_msr>
    dfa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfa2:	9b00      	ldr	r3, [sp, #0]
    dfa4:	f003 0301 	and.w	r3, r3, #1
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d100      	bne.n	dfae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    dfae:	490a      	ldr	r1, [pc, #40]	; (dfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    dfb0:	9b01      	ldr	r3, [sp, #4]
    dfb2:	9a00      	ldr	r2, [sp, #0]
    dfb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    dfb8:	4a06      	ldr	r2, [pc, #24]	; (dfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    dfba:	9b01      	ldr	r3, [sp, #4]
    dfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfc0:	1c5a      	adds	r2, r3, #1
    dfc2:	4904      	ldr	r1, [pc, #16]	; (dfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    dfc4:	9b01      	ldr	r3, [sp, #4]
    dfc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfca:	bf00      	nop
    dfcc:	b003      	add	sp, #12
    dfce:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd2:	bf00      	nop
    dfd4:	1fff9044 	.word	0x1fff9044
    dfd8:	1fff9040 	.word	0x1fff9040

0000dfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    dfdc:	b500      	push	{lr}
    dfde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe0:	f7f2 fdc2 	bl	b68 <Sys_GetCoreID>
    dfe4:	4603      	mov	r3, r0
    dfe6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    dfe8:	4a0d      	ldr	r2, [pc, #52]	; (e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    dfea:	9b01      	ldr	r3, [sp, #4]
    dfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff0:	1e5a      	subs	r2, r3, #1
    dff2:	490b      	ldr	r1, [pc, #44]	; (e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    dff4:	9b01      	ldr	r3, [sp, #4]
    dff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    dffa:	4a0a      	ldr	r2, [pc, #40]	; (e024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e002:	f003 0301 	and.w	r3, r3, #1
    e006:	2b00      	cmp	r3, #0
    e008:	d106      	bne.n	e018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e00a:	4a05      	ldr	r2, [pc, #20]	; (e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e012:	2b00      	cmp	r3, #0
    e014:	d100      	bne.n	e018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e018:	bf00      	nop
    e01a:	b003      	add	sp, #12
    e01c:	f85d fb04 	ldr.w	pc, [sp], #4
    e020:	1fff9044 	.word	0x1fff9044
    e024:	1fff9040 	.word	0x1fff9040

0000e028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e028:	b500      	push	{lr}
    e02a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e02c:	f7f2 fd9c 	bl	b68 <Sys_GetCoreID>
    e030:	4603      	mov	r3, r0
    e032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e034:	4a10      	ldr	r2, [pc, #64]	; (e078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e036:	9b01      	ldr	r3, [sp, #4]
    e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e03c:	2b00      	cmp	r3, #0
    e03e:	d10d      	bne.n	e05c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e040:	f7f2 fcb0 	bl	9a4 <Adc_schm_read_msr>
    e044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e046:	9b00      	ldr	r3, [sp, #0]
    e048:	f003 0301 	and.w	r3, r3, #1
    e04c:	2b00      	cmp	r3, #0
    e04e:	d100      	bne.n	e052 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e052:	490a      	ldr	r1, [pc, #40]	; (e07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e054:	9b01      	ldr	r3, [sp, #4]
    e056:	9a00      	ldr	r2, [sp, #0]
    e058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e05c:	4a06      	ldr	r2, [pc, #24]	; (e078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e05e:	9b01      	ldr	r3, [sp, #4]
    e060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e064:	1c5a      	adds	r2, r3, #1
    e066:	4904      	ldr	r1, [pc, #16]	; (e078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e068:	9b01      	ldr	r3, [sp, #4]
    e06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e06e:	bf00      	nop
    e070:	b003      	add	sp, #12
    e072:	f85d fb04 	ldr.w	pc, [sp], #4
    e076:	bf00      	nop
    e078:	1fff904c 	.word	0x1fff904c
    e07c:	1fff9048 	.word	0x1fff9048

0000e080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e080:	b500      	push	{lr}
    e082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e084:	f7f2 fd70 	bl	b68 <Sys_GetCoreID>
    e088:	4603      	mov	r3, r0
    e08a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e08c:	4a0d      	ldr	r2, [pc, #52]	; (e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e08e:	9b01      	ldr	r3, [sp, #4]
    e090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e094:	1e5a      	subs	r2, r3, #1
    e096:	490b      	ldr	r1, [pc, #44]	; (e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e098:	9b01      	ldr	r3, [sp, #4]
    e09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e09e:	4a0a      	ldr	r2, [pc, #40]	; (e0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a6:	f003 0301 	and.w	r3, r3, #1
    e0aa:	2b00      	cmp	r3, #0
    e0ac:	d106      	bne.n	e0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e0ae:	4a05      	ldr	r2, [pc, #20]	; (e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d100      	bne.n	e0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0bc:	bf00      	nop
    e0be:	b003      	add	sp, #12
    e0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e0c4:	1fff904c 	.word	0x1fff904c
    e0c8:	1fff9048 	.word	0x1fff9048

0000e0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e0cc:	b500      	push	{lr}
    e0ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0d0:	f7f2 fd4a 	bl	b68 <Sys_GetCoreID>
    e0d4:	4603      	mov	r3, r0
    e0d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e0d8:	4a10      	ldr	r2, [pc, #64]	; (e11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e0da:	9b01      	ldr	r3, [sp, #4]
    e0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d10d      	bne.n	e100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0e4:	f7f2 fc5e 	bl	9a4 <Adc_schm_read_msr>
    e0e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0ea:	9b00      	ldr	r3, [sp, #0]
    e0ec:	f003 0301 	and.w	r3, r3, #1
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d100      	bne.n	e0f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e0f6:	490a      	ldr	r1, [pc, #40]	; (e120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e0f8:	9b01      	ldr	r3, [sp, #4]
    e0fa:	9a00      	ldr	r2, [sp, #0]
    e0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e100:	4a06      	ldr	r2, [pc, #24]	; (e11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e102:	9b01      	ldr	r3, [sp, #4]
    e104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e108:	1c5a      	adds	r2, r3, #1
    e10a:	4904      	ldr	r1, [pc, #16]	; (e11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e10c:	9b01      	ldr	r3, [sp, #4]
    e10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e112:	bf00      	nop
    e114:	b003      	add	sp, #12
    e116:	f85d fb04 	ldr.w	pc, [sp], #4
    e11a:	bf00      	nop
    e11c:	1fff9054 	.word	0x1fff9054
    e120:	1fff9050 	.word	0x1fff9050

0000e124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e124:	b500      	push	{lr}
    e126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e128:	f7f2 fd1e 	bl	b68 <Sys_GetCoreID>
    e12c:	4603      	mov	r3, r0
    e12e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e130:	4a0d      	ldr	r2, [pc, #52]	; (e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e132:	9b01      	ldr	r3, [sp, #4]
    e134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e138:	1e5a      	subs	r2, r3, #1
    e13a:	490b      	ldr	r1, [pc, #44]	; (e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e13c:	9b01      	ldr	r3, [sp, #4]
    e13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e142:	4a0a      	ldr	r2, [pc, #40]	; (e16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e144:	9b01      	ldr	r3, [sp, #4]
    e146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e14a:	f003 0301 	and.w	r3, r3, #1
    e14e:	2b00      	cmp	r3, #0
    e150:	d106      	bne.n	e160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e152:	4a05      	ldr	r2, [pc, #20]	; (e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e15a:	2b00      	cmp	r3, #0
    e15c:	d100      	bne.n	e160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e15e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e160:	bf00      	nop
    e162:	b003      	add	sp, #12
    e164:	f85d fb04 	ldr.w	pc, [sp], #4
    e168:	1fff9054 	.word	0x1fff9054
    e16c:	1fff9050 	.word	0x1fff9050

0000e170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e170:	b500      	push	{lr}
    e172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e174:	f7f2 fcf8 	bl	b68 <Sys_GetCoreID>
    e178:	4603      	mov	r3, r0
    e17a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e17c:	4a10      	ldr	r2, [pc, #64]	; (e1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e17e:	9b01      	ldr	r3, [sp, #4]
    e180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e184:	2b00      	cmp	r3, #0
    e186:	d10d      	bne.n	e1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e188:	f7f2 fc0c 	bl	9a4 <Adc_schm_read_msr>
    e18c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e18e:	9b00      	ldr	r3, [sp, #0]
    e190:	f003 0301 	and.w	r3, r3, #1
    e194:	2b00      	cmp	r3, #0
    e196:	d100      	bne.n	e19a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e19a:	490a      	ldr	r1, [pc, #40]	; (e1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e19c:	9b01      	ldr	r3, [sp, #4]
    e19e:	9a00      	ldr	r2, [sp, #0]
    e1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e1a4:	4a06      	ldr	r2, [pc, #24]	; (e1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e1a6:	9b01      	ldr	r3, [sp, #4]
    e1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ac:	1c5a      	adds	r2, r3, #1
    e1ae:	4904      	ldr	r1, [pc, #16]	; (e1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1b6:	bf00      	nop
    e1b8:	b003      	add	sp, #12
    e1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e1be:	bf00      	nop
    e1c0:	1fff905c 	.word	0x1fff905c
    e1c4:	1fff9058 	.word	0x1fff9058

0000e1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e1c8:	b500      	push	{lr}
    e1ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1cc:	f7f2 fccc 	bl	b68 <Sys_GetCoreID>
    e1d0:	4603      	mov	r3, r0
    e1d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e1d4:	4a0d      	ldr	r2, [pc, #52]	; (e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e1d6:	9b01      	ldr	r3, [sp, #4]
    e1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1dc:	1e5a      	subs	r2, r3, #1
    e1de:	490b      	ldr	r1, [pc, #44]	; (e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e1e0:	9b01      	ldr	r3, [sp, #4]
    e1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e1e6:	4a0a      	ldr	r2, [pc, #40]	; (e210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ee:	f003 0301 	and.w	r3, r3, #1
    e1f2:	2b00      	cmp	r3, #0
    e1f4:	d106      	bne.n	e204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e1f6:	4a05      	ldr	r2, [pc, #20]	; (e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1fe:	2b00      	cmp	r3, #0
    e200:	d100      	bne.n	e204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e204:	bf00      	nop
    e206:	b003      	add	sp, #12
    e208:	f85d fb04 	ldr.w	pc, [sp], #4
    e20c:	1fff905c 	.word	0x1fff905c
    e210:	1fff9058 	.word	0x1fff9058

0000e214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e214:	b500      	push	{lr}
    e216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e218:	f7f2 fca6 	bl	b68 <Sys_GetCoreID>
    e21c:	4603      	mov	r3, r0
    e21e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e220:	4a10      	ldr	r2, [pc, #64]	; (e264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e222:	9b01      	ldr	r3, [sp, #4]
    e224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e228:	2b00      	cmp	r3, #0
    e22a:	d10d      	bne.n	e248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e22c:	f7f2 fbba 	bl	9a4 <Adc_schm_read_msr>
    e230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e232:	9b00      	ldr	r3, [sp, #0]
    e234:	f003 0301 	and.w	r3, r3, #1
    e238:	2b00      	cmp	r3, #0
    e23a:	d100      	bne.n	e23e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e23c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e23e:	490a      	ldr	r1, [pc, #40]	; (e268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e240:	9b01      	ldr	r3, [sp, #4]
    e242:	9a00      	ldr	r2, [sp, #0]
    e244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e248:	4a06      	ldr	r2, [pc, #24]	; (e264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e24a:	9b01      	ldr	r3, [sp, #4]
    e24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e250:	1c5a      	adds	r2, r3, #1
    e252:	4904      	ldr	r1, [pc, #16]	; (e264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e25a:	bf00      	nop
    e25c:	b003      	add	sp, #12
    e25e:	f85d fb04 	ldr.w	pc, [sp], #4
    e262:	bf00      	nop
    e264:	1fff9064 	.word	0x1fff9064
    e268:	1fff9060 	.word	0x1fff9060

0000e26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e26c:	b500      	push	{lr}
    e26e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e270:	f7f2 fc7a 	bl	b68 <Sys_GetCoreID>
    e274:	4603      	mov	r3, r0
    e276:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e278:	4a0d      	ldr	r2, [pc, #52]	; (e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e27a:	9b01      	ldr	r3, [sp, #4]
    e27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e280:	1e5a      	subs	r2, r3, #1
    e282:	490b      	ldr	r1, [pc, #44]	; (e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e284:	9b01      	ldr	r3, [sp, #4]
    e286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e28a:	4a0a      	ldr	r2, [pc, #40]	; (e2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e28c:	9b01      	ldr	r3, [sp, #4]
    e28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e292:	f003 0301 	and.w	r3, r3, #1
    e296:	2b00      	cmp	r3, #0
    e298:	d106      	bne.n	e2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e29a:	4a05      	ldr	r2, [pc, #20]	; (e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d100      	bne.n	e2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2a8:	bf00      	nop
    e2aa:	b003      	add	sp, #12
    e2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e2b0:	1fff9064 	.word	0x1fff9064
    e2b4:	1fff9060 	.word	0x1fff9060

0000e2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e2b8:	b500      	push	{lr}
    e2ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2bc:	f7f2 fc54 	bl	b68 <Sys_GetCoreID>
    e2c0:	4603      	mov	r3, r0
    e2c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e2c4:	4a10      	ldr	r2, [pc, #64]	; (e308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e2c6:	9b01      	ldr	r3, [sp, #4]
    e2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d10d      	bne.n	e2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2d0:	f7f2 fb68 	bl	9a4 <Adc_schm_read_msr>
    e2d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2d6:	9b00      	ldr	r3, [sp, #0]
    e2d8:	f003 0301 	and.w	r3, r3, #1
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d100      	bne.n	e2e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e2e2:	490a      	ldr	r1, [pc, #40]	; (e30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e2e4:	9b01      	ldr	r3, [sp, #4]
    e2e6:	9a00      	ldr	r2, [sp, #0]
    e2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e2ec:	4a06      	ldr	r2, [pc, #24]	; (e308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e2ee:	9b01      	ldr	r3, [sp, #4]
    e2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2f4:	1c5a      	adds	r2, r3, #1
    e2f6:	4904      	ldr	r1, [pc, #16]	; (e308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e2f8:	9b01      	ldr	r3, [sp, #4]
    e2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2fe:	bf00      	nop
    e300:	b003      	add	sp, #12
    e302:	f85d fb04 	ldr.w	pc, [sp], #4
    e306:	bf00      	nop
    e308:	1fff906c 	.word	0x1fff906c
    e30c:	1fff9068 	.word	0x1fff9068

0000e310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e310:	b500      	push	{lr}
    e312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e314:	f7f2 fc28 	bl	b68 <Sys_GetCoreID>
    e318:	4603      	mov	r3, r0
    e31a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e31c:	4a0d      	ldr	r2, [pc, #52]	; (e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e31e:	9b01      	ldr	r3, [sp, #4]
    e320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e324:	1e5a      	subs	r2, r3, #1
    e326:	490b      	ldr	r1, [pc, #44]	; (e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e328:	9b01      	ldr	r3, [sp, #4]
    e32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e32e:	4a0a      	ldr	r2, [pc, #40]	; (e358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e330:	9b01      	ldr	r3, [sp, #4]
    e332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e336:	f003 0301 	and.w	r3, r3, #1
    e33a:	2b00      	cmp	r3, #0
    e33c:	d106      	bne.n	e34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e33e:	4a05      	ldr	r2, [pc, #20]	; (e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e340:	9b01      	ldr	r3, [sp, #4]
    e342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e346:	2b00      	cmp	r3, #0
    e348:	d100      	bne.n	e34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e34a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e34c:	bf00      	nop
    e34e:	b003      	add	sp, #12
    e350:	f85d fb04 	ldr.w	pc, [sp], #4
    e354:	1fff906c 	.word	0x1fff906c
    e358:	1fff9068 	.word	0x1fff9068

0000e35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e35c:	b500      	push	{lr}
    e35e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e360:	f7f2 fc02 	bl	b68 <Sys_GetCoreID>
    e364:	4603      	mov	r3, r0
    e366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    e368:	4a10      	ldr	r2, [pc, #64]	; (e3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e36a:	9b01      	ldr	r3, [sp, #4]
    e36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e370:	2b00      	cmp	r3, #0
    e372:	d10d      	bne.n	e390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e374:	f7f2 fb16 	bl	9a4 <Adc_schm_read_msr>
    e378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e37a:	9b00      	ldr	r3, [sp, #0]
    e37c:	f003 0301 	and.w	r3, r3, #1
    e380:	2b00      	cmp	r3, #0
    e382:	d100      	bne.n	e386 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    e386:	490a      	ldr	r1, [pc, #40]	; (e3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    e388:	9b01      	ldr	r3, [sp, #4]
    e38a:	9a00      	ldr	r2, [sp, #0]
    e38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    e390:	4a06      	ldr	r2, [pc, #24]	; (e3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e392:	9b01      	ldr	r3, [sp, #4]
    e394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e398:	1c5a      	adds	r2, r3, #1
    e39a:	4904      	ldr	r1, [pc, #16]	; (e3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e39c:	9b01      	ldr	r3, [sp, #4]
    e39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3a2:	bf00      	nop
    e3a4:	b003      	add	sp, #12
    e3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e3aa:	bf00      	nop
    e3ac:	1fff9074 	.word	0x1fff9074
    e3b0:	1fff9070 	.word	0x1fff9070

0000e3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e3b4:	b500      	push	{lr}
    e3b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3b8:	f7f2 fbd6 	bl	b68 <Sys_GetCoreID>
    e3bc:	4603      	mov	r3, r0
    e3be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    e3c0:	4a0d      	ldr	r2, [pc, #52]	; (e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e3c2:	9b01      	ldr	r3, [sp, #4]
    e3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3c8:	1e5a      	subs	r2, r3, #1
    e3ca:	490b      	ldr	r1, [pc, #44]	; (e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e3cc:	9b01      	ldr	r3, [sp, #4]
    e3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    e3d2:	4a0a      	ldr	r2, [pc, #40]	; (e3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3da:	f003 0301 	and.w	r3, r3, #1
    e3de:	2b00      	cmp	r3, #0
    e3e0:	d106      	bne.n	e3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    e3e2:	4a05      	ldr	r2, [pc, #20]	; (e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e3e4:	9b01      	ldr	r3, [sp, #4]
    e3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d100      	bne.n	e3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3f0:	bf00      	nop
    e3f2:	b003      	add	sp, #12
    e3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e3f8:	1fff9074 	.word	0x1fff9074
    e3fc:	1fff9070 	.word	0x1fff9070

0000e400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e400:	b500      	push	{lr}
    e402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e404:	f7f2 fbb0 	bl	b68 <Sys_GetCoreID>
    e408:	4603      	mov	r3, r0
    e40a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    e40c:	4a10      	ldr	r2, [pc, #64]	; (e450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e40e:	9b01      	ldr	r3, [sp, #4]
    e410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e414:	2b00      	cmp	r3, #0
    e416:	d10d      	bne.n	e434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e418:	f7f2 fac4 	bl	9a4 <Adc_schm_read_msr>
    e41c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e41e:	9b00      	ldr	r3, [sp, #0]
    e420:	f003 0301 	and.w	r3, r3, #1
    e424:	2b00      	cmp	r3, #0
    e426:	d100      	bne.n	e42a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    e42a:	490a      	ldr	r1, [pc, #40]	; (e454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    e42c:	9b01      	ldr	r3, [sp, #4]
    e42e:	9a00      	ldr	r2, [sp, #0]
    e430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    e434:	4a06      	ldr	r2, [pc, #24]	; (e450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e436:	9b01      	ldr	r3, [sp, #4]
    e438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e43c:	1c5a      	adds	r2, r3, #1
    e43e:	4904      	ldr	r1, [pc, #16]	; (e450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e440:	9b01      	ldr	r3, [sp, #4]
    e442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e446:	bf00      	nop
    e448:	b003      	add	sp, #12
    e44a:	f85d fb04 	ldr.w	pc, [sp], #4
    e44e:	bf00      	nop
    e450:	1fff907c 	.word	0x1fff907c
    e454:	1fff9078 	.word	0x1fff9078

0000e458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e458:	b500      	push	{lr}
    e45a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e45c:	f7f2 fb84 	bl	b68 <Sys_GetCoreID>
    e460:	4603      	mov	r3, r0
    e462:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    e464:	4a0d      	ldr	r2, [pc, #52]	; (e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e466:	9b01      	ldr	r3, [sp, #4]
    e468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e46c:	1e5a      	subs	r2, r3, #1
    e46e:	490b      	ldr	r1, [pc, #44]	; (e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e470:	9b01      	ldr	r3, [sp, #4]
    e472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    e476:	4a0a      	ldr	r2, [pc, #40]	; (e4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e47e:	f003 0301 	and.w	r3, r3, #1
    e482:	2b00      	cmp	r3, #0
    e484:	d106      	bne.n	e494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    e486:	4a05      	ldr	r2, [pc, #20]	; (e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48e:	2b00      	cmp	r3, #0
    e490:	d100      	bne.n	e494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e494:	bf00      	nop
    e496:	b003      	add	sp, #12
    e498:	f85d fb04 	ldr.w	pc, [sp], #4
    e49c:	1fff907c 	.word	0x1fff907c
    e4a0:	1fff9078 	.word	0x1fff9078

0000e4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e4a4:	b500      	push	{lr}
    e4a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4a8:	f7f2 fb5e 	bl	b68 <Sys_GetCoreID>
    e4ac:	4603      	mov	r3, r0
    e4ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    e4b0:	4a10      	ldr	r2, [pc, #64]	; (e4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e4b2:	9b01      	ldr	r3, [sp, #4]
    e4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4b8:	2b00      	cmp	r3, #0
    e4ba:	d10d      	bne.n	e4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4bc:	f7f2 fa72 	bl	9a4 <Adc_schm_read_msr>
    e4c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4c2:	9b00      	ldr	r3, [sp, #0]
    e4c4:	f003 0301 	and.w	r3, r3, #1
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d100      	bne.n	e4ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    e4ce:	490a      	ldr	r1, [pc, #40]	; (e4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    e4d0:	9b01      	ldr	r3, [sp, #4]
    e4d2:	9a00      	ldr	r2, [sp, #0]
    e4d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    e4d8:	4a06      	ldr	r2, [pc, #24]	; (e4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e4da:	9b01      	ldr	r3, [sp, #4]
    e4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e0:	1c5a      	adds	r2, r3, #1
    e4e2:	4904      	ldr	r1, [pc, #16]	; (e4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e4e4:	9b01      	ldr	r3, [sp, #4]
    e4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4ea:	bf00      	nop
    e4ec:	b003      	add	sp, #12
    e4ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e4f2:	bf00      	nop
    e4f4:	1fff9084 	.word	0x1fff9084
    e4f8:	1fff9080 	.word	0x1fff9080

0000e4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e4fc:	b500      	push	{lr}
    e4fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e500:	f7f2 fb32 	bl	b68 <Sys_GetCoreID>
    e504:	4603      	mov	r3, r0
    e506:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    e508:	4a0d      	ldr	r2, [pc, #52]	; (e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e50a:	9b01      	ldr	r3, [sp, #4]
    e50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e510:	1e5a      	subs	r2, r3, #1
    e512:	490b      	ldr	r1, [pc, #44]	; (e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e514:	9b01      	ldr	r3, [sp, #4]
    e516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    e51a:	4a0a      	ldr	r2, [pc, #40]	; (e544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e522:	f003 0301 	and.w	r3, r3, #1
    e526:	2b00      	cmp	r3, #0
    e528:	d106      	bne.n	e538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    e52a:	4a05      	ldr	r2, [pc, #20]	; (e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e532:	2b00      	cmp	r3, #0
    e534:	d100      	bne.n	e538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e538:	bf00      	nop
    e53a:	b003      	add	sp, #12
    e53c:	f85d fb04 	ldr.w	pc, [sp], #4
    e540:	1fff9084 	.word	0x1fff9084
    e544:	1fff9080 	.word	0x1fff9080

0000e548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e548:	b500      	push	{lr}
    e54a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e54c:	f7f2 fb0c 	bl	b68 <Sys_GetCoreID>
    e550:	4603      	mov	r3, r0
    e552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    e554:	4a10      	ldr	r2, [pc, #64]	; (e598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e556:	9b01      	ldr	r3, [sp, #4]
    e558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e55c:	2b00      	cmp	r3, #0
    e55e:	d10d      	bne.n	e57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e560:	f7f2 fa20 	bl	9a4 <Adc_schm_read_msr>
    e564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e566:	9b00      	ldr	r3, [sp, #0]
    e568:	f003 0301 	and.w	r3, r3, #1
    e56c:	2b00      	cmp	r3, #0
    e56e:	d100      	bne.n	e572 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    e572:	490a      	ldr	r1, [pc, #40]	; (e59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    e574:	9b01      	ldr	r3, [sp, #4]
    e576:	9a00      	ldr	r2, [sp, #0]
    e578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    e57c:	4a06      	ldr	r2, [pc, #24]	; (e598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e57e:	9b01      	ldr	r3, [sp, #4]
    e580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e584:	1c5a      	adds	r2, r3, #1
    e586:	4904      	ldr	r1, [pc, #16]	; (e598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e588:	9b01      	ldr	r3, [sp, #4]
    e58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e58e:	bf00      	nop
    e590:	b003      	add	sp, #12
    e592:	f85d fb04 	ldr.w	pc, [sp], #4
    e596:	bf00      	nop
    e598:	1fff908c 	.word	0x1fff908c
    e59c:	1fff9088 	.word	0x1fff9088

0000e5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e5a0:	b500      	push	{lr}
    e5a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5a4:	f7f2 fae0 	bl	b68 <Sys_GetCoreID>
    e5a8:	4603      	mov	r3, r0
    e5aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    e5ac:	4a0d      	ldr	r2, [pc, #52]	; (e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e5ae:	9b01      	ldr	r3, [sp, #4]
    e5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5b4:	1e5a      	subs	r2, r3, #1
    e5b6:	490b      	ldr	r1, [pc, #44]	; (e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e5b8:	9b01      	ldr	r3, [sp, #4]
    e5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    e5be:	4a0a      	ldr	r2, [pc, #40]	; (e5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5c6:	f003 0301 	and.w	r3, r3, #1
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	d106      	bne.n	e5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    e5ce:	4a05      	ldr	r2, [pc, #20]	; (e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e5d0:	9b01      	ldr	r3, [sp, #4]
    e5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d100      	bne.n	e5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5dc:	bf00      	nop
    e5de:	b003      	add	sp, #12
    e5e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e5e4:	1fff908c 	.word	0x1fff908c
    e5e8:	1fff9088 	.word	0x1fff9088

0000e5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e5ec:	b500      	push	{lr}
    e5ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5f0:	f7f2 faba 	bl	b68 <Sys_GetCoreID>
    e5f4:	4603      	mov	r3, r0
    e5f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    e5f8:	4a10      	ldr	r2, [pc, #64]	; (e63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e5fa:	9b01      	ldr	r3, [sp, #4]
    e5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e600:	2b00      	cmp	r3, #0
    e602:	d10d      	bne.n	e620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e604:	f7f2 f9ce 	bl	9a4 <Adc_schm_read_msr>
    e608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e60a:	9b00      	ldr	r3, [sp, #0]
    e60c:	f003 0301 	and.w	r3, r3, #1
    e610:	2b00      	cmp	r3, #0
    e612:	d100      	bne.n	e616 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    e616:	490a      	ldr	r1, [pc, #40]	; (e640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    e618:	9b01      	ldr	r3, [sp, #4]
    e61a:	9a00      	ldr	r2, [sp, #0]
    e61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    e620:	4a06      	ldr	r2, [pc, #24]	; (e63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e622:	9b01      	ldr	r3, [sp, #4]
    e624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e628:	1c5a      	adds	r2, r3, #1
    e62a:	4904      	ldr	r1, [pc, #16]	; (e63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e62c:	9b01      	ldr	r3, [sp, #4]
    e62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e632:	bf00      	nop
    e634:	b003      	add	sp, #12
    e636:	f85d fb04 	ldr.w	pc, [sp], #4
    e63a:	bf00      	nop
    e63c:	1fff9094 	.word	0x1fff9094
    e640:	1fff9090 	.word	0x1fff9090

0000e644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e644:	b500      	push	{lr}
    e646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e648:	f7f2 fa8e 	bl	b68 <Sys_GetCoreID>
    e64c:	4603      	mov	r3, r0
    e64e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    e650:	4a0d      	ldr	r2, [pc, #52]	; (e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e652:	9b01      	ldr	r3, [sp, #4]
    e654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e658:	1e5a      	subs	r2, r3, #1
    e65a:	490b      	ldr	r1, [pc, #44]	; (e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e65c:	9b01      	ldr	r3, [sp, #4]
    e65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    e662:	4a0a      	ldr	r2, [pc, #40]	; (e68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e66a:	f003 0301 	and.w	r3, r3, #1
    e66e:	2b00      	cmp	r3, #0
    e670:	d106      	bne.n	e680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    e672:	4a05      	ldr	r2, [pc, #20]	; (e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e67a:	2b00      	cmp	r3, #0
    e67c:	d100      	bne.n	e680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e67e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e680:	bf00      	nop
    e682:	b003      	add	sp, #12
    e684:	f85d fb04 	ldr.w	pc, [sp], #4
    e688:	1fff9094 	.word	0x1fff9094
    e68c:	1fff9090 	.word	0x1fff9090

0000e690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e690:	b500      	push	{lr}
    e692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e694:	f7f2 fa68 	bl	b68 <Sys_GetCoreID>
    e698:	4603      	mov	r3, r0
    e69a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    e69c:	4a10      	ldr	r2, [pc, #64]	; (e6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e69e:	9b01      	ldr	r3, [sp, #4]
    e6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6a4:	2b00      	cmp	r3, #0
    e6a6:	d10d      	bne.n	e6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6a8:	f7f2 f97c 	bl	9a4 <Adc_schm_read_msr>
    e6ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6ae:	9b00      	ldr	r3, [sp, #0]
    e6b0:	f003 0301 	and.w	r3, r3, #1
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	d100      	bne.n	e6ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    e6ba:	490a      	ldr	r1, [pc, #40]	; (e6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    e6bc:	9b01      	ldr	r3, [sp, #4]
    e6be:	9a00      	ldr	r2, [sp, #0]
    e6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    e6c4:	4a06      	ldr	r2, [pc, #24]	; (e6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e6c6:	9b01      	ldr	r3, [sp, #4]
    e6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6cc:	1c5a      	adds	r2, r3, #1
    e6ce:	4904      	ldr	r1, [pc, #16]	; (e6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e6d0:	9b01      	ldr	r3, [sp, #4]
    e6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6d6:	bf00      	nop
    e6d8:	b003      	add	sp, #12
    e6da:	f85d fb04 	ldr.w	pc, [sp], #4
    e6de:	bf00      	nop
    e6e0:	1fff909c 	.word	0x1fff909c
    e6e4:	1fff9098 	.word	0x1fff9098

0000e6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e6e8:	b500      	push	{lr}
    e6ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6ec:	f7f2 fa3c 	bl	b68 <Sys_GetCoreID>
    e6f0:	4603      	mov	r3, r0
    e6f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    e6f4:	4a0d      	ldr	r2, [pc, #52]	; (e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e6f6:	9b01      	ldr	r3, [sp, #4]
    e6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6fc:	1e5a      	subs	r2, r3, #1
    e6fe:	490b      	ldr	r1, [pc, #44]	; (e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e700:	9b01      	ldr	r3, [sp, #4]
    e702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    e706:	4a0a      	ldr	r2, [pc, #40]	; (e730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e70e:	f003 0301 	and.w	r3, r3, #1
    e712:	2b00      	cmp	r3, #0
    e714:	d106      	bne.n	e724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    e716:	4a05      	ldr	r2, [pc, #20]	; (e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e718:	9b01      	ldr	r3, [sp, #4]
    e71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e71e:	2b00      	cmp	r3, #0
    e720:	d100      	bne.n	e724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e724:	bf00      	nop
    e726:	b003      	add	sp, #12
    e728:	f85d fb04 	ldr.w	pc, [sp], #4
    e72c:	1fff909c 	.word	0x1fff909c
    e730:	1fff9098 	.word	0x1fff9098

0000e734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e734:	b500      	push	{lr}
    e736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e738:	f7f2 fa16 	bl	b68 <Sys_GetCoreID>
    e73c:	4603      	mov	r3, r0
    e73e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    e740:	4a10      	ldr	r2, [pc, #64]	; (e784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e748:	2b00      	cmp	r3, #0
    e74a:	d10d      	bne.n	e768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e74c:	f7f2 f92a 	bl	9a4 <Adc_schm_read_msr>
    e750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e752:	9b00      	ldr	r3, [sp, #0]
    e754:	f003 0301 	and.w	r3, r3, #1
    e758:	2b00      	cmp	r3, #0
    e75a:	d100      	bne.n	e75e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e75c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    e75e:	490a      	ldr	r1, [pc, #40]	; (e788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    e760:	9b01      	ldr	r3, [sp, #4]
    e762:	9a00      	ldr	r2, [sp, #0]
    e764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    e768:	4a06      	ldr	r2, [pc, #24]	; (e784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e770:	1c5a      	adds	r2, r3, #1
    e772:	4904      	ldr	r1, [pc, #16]	; (e784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e774:	9b01      	ldr	r3, [sp, #4]
    e776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e77a:	bf00      	nop
    e77c:	b003      	add	sp, #12
    e77e:	f85d fb04 	ldr.w	pc, [sp], #4
    e782:	bf00      	nop
    e784:	1fff90a4 	.word	0x1fff90a4
    e788:	1fff90a0 	.word	0x1fff90a0

0000e78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e78c:	b500      	push	{lr}
    e78e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e790:	f7f2 f9ea 	bl	b68 <Sys_GetCoreID>
    e794:	4603      	mov	r3, r0
    e796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    e798:	4a0d      	ldr	r2, [pc, #52]	; (e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e79a:	9b01      	ldr	r3, [sp, #4]
    e79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a0:	1e5a      	subs	r2, r3, #1
    e7a2:	490b      	ldr	r1, [pc, #44]	; (e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e7a4:	9b01      	ldr	r3, [sp, #4]
    e7a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    e7aa:	4a0a      	ldr	r2, [pc, #40]	; (e7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    e7ac:	9b01      	ldr	r3, [sp, #4]
    e7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b2:	f003 0301 	and.w	r3, r3, #1
    e7b6:	2b00      	cmp	r3, #0
    e7b8:	d106      	bne.n	e7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    e7ba:	4a05      	ldr	r2, [pc, #20]	; (e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e7bc:	9b01      	ldr	r3, [sp, #4]
    e7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d100      	bne.n	e7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7c8:	bf00      	nop
    e7ca:	b003      	add	sp, #12
    e7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e7d0:	1fff90a4 	.word	0x1fff90a4
    e7d4:	1fff90a0 	.word	0x1fff90a0

0000e7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e7d8:	b500      	push	{lr}
    e7da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7dc:	f7f2 f9c4 	bl	b68 <Sys_GetCoreID>
    e7e0:	4603      	mov	r3, r0
    e7e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    e7e4:	4a10      	ldr	r2, [pc, #64]	; (e828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e7e6:	9b01      	ldr	r3, [sp, #4]
    e7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d10d      	bne.n	e80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7f0:	f7f2 f8d8 	bl	9a4 <Adc_schm_read_msr>
    e7f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7f6:	9b00      	ldr	r3, [sp, #0]
    e7f8:	f003 0301 	and.w	r3, r3, #1
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	d100      	bne.n	e802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    e802:	490a      	ldr	r1, [pc, #40]	; (e82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    e804:	9b01      	ldr	r3, [sp, #4]
    e806:	9a00      	ldr	r2, [sp, #0]
    e808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    e80c:	4a06      	ldr	r2, [pc, #24]	; (e828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e80e:	9b01      	ldr	r3, [sp, #4]
    e810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e814:	1c5a      	adds	r2, r3, #1
    e816:	4904      	ldr	r1, [pc, #16]	; (e828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e818:	9b01      	ldr	r3, [sp, #4]
    e81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e81e:	bf00      	nop
    e820:	b003      	add	sp, #12
    e822:	f85d fb04 	ldr.w	pc, [sp], #4
    e826:	bf00      	nop
    e828:	1fff90ac 	.word	0x1fff90ac
    e82c:	1fff90a8 	.word	0x1fff90a8

0000e830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e830:	b500      	push	{lr}
    e832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e834:	f7f2 f998 	bl	b68 <Sys_GetCoreID>
    e838:	4603      	mov	r3, r0
    e83a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    e83c:	4a0d      	ldr	r2, [pc, #52]	; (e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e83e:	9b01      	ldr	r3, [sp, #4]
    e840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e844:	1e5a      	subs	r2, r3, #1
    e846:	490b      	ldr	r1, [pc, #44]	; (e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e848:	9b01      	ldr	r3, [sp, #4]
    e84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    e84e:	4a0a      	ldr	r2, [pc, #40]	; (e878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    e850:	9b01      	ldr	r3, [sp, #4]
    e852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e856:	f003 0301 	and.w	r3, r3, #1
    e85a:	2b00      	cmp	r3, #0
    e85c:	d106      	bne.n	e86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    e85e:	4a05      	ldr	r2, [pc, #20]	; (e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e860:	9b01      	ldr	r3, [sp, #4]
    e862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e866:	2b00      	cmp	r3, #0
    e868:	d100      	bne.n	e86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e86a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e86c:	bf00      	nop
    e86e:	b003      	add	sp, #12
    e870:	f85d fb04 	ldr.w	pc, [sp], #4
    e874:	1fff90ac 	.word	0x1fff90ac
    e878:	1fff90a8 	.word	0x1fff90a8

0000e87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e87c:	b500      	push	{lr}
    e87e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e880:	f7f2 f972 	bl	b68 <Sys_GetCoreID>
    e884:	4603      	mov	r3, r0
    e886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    e888:	4a10      	ldr	r2, [pc, #64]	; (e8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e88a:	9b01      	ldr	r3, [sp, #4]
    e88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e890:	2b00      	cmp	r3, #0
    e892:	d10d      	bne.n	e8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e894:	f7f2 f886 	bl	9a4 <Adc_schm_read_msr>
    e898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e89a:	9b00      	ldr	r3, [sp, #0]
    e89c:	f003 0301 	and.w	r3, r3, #1
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d100      	bne.n	e8a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    e8a6:	490a      	ldr	r1, [pc, #40]	; (e8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    e8a8:	9b01      	ldr	r3, [sp, #4]
    e8aa:	9a00      	ldr	r2, [sp, #0]
    e8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    e8b0:	4a06      	ldr	r2, [pc, #24]	; (e8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e8b2:	9b01      	ldr	r3, [sp, #4]
    e8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b8:	1c5a      	adds	r2, r3, #1
    e8ba:	4904      	ldr	r1, [pc, #16]	; (e8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e8bc:	9b01      	ldr	r3, [sp, #4]
    e8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8c2:	bf00      	nop
    e8c4:	b003      	add	sp, #12
    e8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e8ca:	bf00      	nop
    e8cc:	1fff90b4 	.word	0x1fff90b4
    e8d0:	1fff90b0 	.word	0x1fff90b0

0000e8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e8d4:	b500      	push	{lr}
    e8d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8d8:	f7f2 f946 	bl	b68 <Sys_GetCoreID>
    e8dc:	4603      	mov	r3, r0
    e8de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    e8e0:	4a0d      	ldr	r2, [pc, #52]	; (e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e8e2:	9b01      	ldr	r3, [sp, #4]
    e8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8e8:	1e5a      	subs	r2, r3, #1
    e8ea:	490b      	ldr	r1, [pc, #44]	; (e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e8ec:	9b01      	ldr	r3, [sp, #4]
    e8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    e8f2:	4a0a      	ldr	r2, [pc, #40]	; (e91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    e8f4:	9b01      	ldr	r3, [sp, #4]
    e8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8fa:	f003 0301 	and.w	r3, r3, #1
    e8fe:	2b00      	cmp	r3, #0
    e900:	d106      	bne.n	e910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    e902:	4a05      	ldr	r2, [pc, #20]	; (e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e90a:	2b00      	cmp	r3, #0
    e90c:	d100      	bne.n	e910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e90e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e910:	bf00      	nop
    e912:	b003      	add	sp, #12
    e914:	f85d fb04 	ldr.w	pc, [sp], #4
    e918:	1fff90b4 	.word	0x1fff90b4
    e91c:	1fff90b0 	.word	0x1fff90b0

0000e920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    e920:	b500      	push	{lr}
    e922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e924:	f7f2 f920 	bl	b68 <Sys_GetCoreID>
    e928:	4603      	mov	r3, r0
    e92a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    e92c:	4a10      	ldr	r2, [pc, #64]	; (e970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    e92e:	9b01      	ldr	r3, [sp, #4]
    e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e934:	2b00      	cmp	r3, #0
    e936:	d10d      	bne.n	e954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e938:	f7f2 f834 	bl	9a4 <Adc_schm_read_msr>
    e93c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e93e:	9b00      	ldr	r3, [sp, #0]
    e940:	f003 0301 	and.w	r3, r3, #1
    e944:	2b00      	cmp	r3, #0
    e946:	d100      	bne.n	e94a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    e94a:	490a      	ldr	r1, [pc, #40]	; (e974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    e94c:	9b01      	ldr	r3, [sp, #4]
    e94e:	9a00      	ldr	r2, [sp, #0]
    e950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    e954:	4a06      	ldr	r2, [pc, #24]	; (e970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    e956:	9b01      	ldr	r3, [sp, #4]
    e958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e95c:	1c5a      	adds	r2, r3, #1
    e95e:	4904      	ldr	r1, [pc, #16]	; (e970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    e960:	9b01      	ldr	r3, [sp, #4]
    e962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e966:	bf00      	nop
    e968:	b003      	add	sp, #12
    e96a:	f85d fb04 	ldr.w	pc, [sp], #4
    e96e:	bf00      	nop
    e970:	1fff90bc 	.word	0x1fff90bc
    e974:	1fff90b8 	.word	0x1fff90b8

0000e978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    e978:	b500      	push	{lr}
    e97a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e97c:	f7f2 f8f4 	bl	b68 <Sys_GetCoreID>
    e980:	4603      	mov	r3, r0
    e982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    e984:	4a0d      	ldr	r2, [pc, #52]	; (e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    e986:	9b01      	ldr	r3, [sp, #4]
    e988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e98c:	1e5a      	subs	r2, r3, #1
    e98e:	490b      	ldr	r1, [pc, #44]	; (e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    e990:	9b01      	ldr	r3, [sp, #4]
    e992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    e996:	4a0a      	ldr	r2, [pc, #40]	; (e9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e99e:	f003 0301 	and.w	r3, r3, #1
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d106      	bne.n	e9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    e9a6:	4a05      	ldr	r2, [pc, #20]	; (e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d100      	bne.n	e9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9b4:	bf00      	nop
    e9b6:	b003      	add	sp, #12
    e9b8:	f85d fb04 	ldr.w	pc, [sp], #4
    e9bc:	1fff90bc 	.word	0x1fff90bc
    e9c0:	1fff90b8 	.word	0x1fff90b8

0000e9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    e9c4:	b500      	push	{lr}
    e9c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9c8:	f7f2 f8ce 	bl	b68 <Sys_GetCoreID>
    e9cc:	4603      	mov	r3, r0
    e9ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    e9d0:	4a10      	ldr	r2, [pc, #64]	; (ea14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    e9d2:	9b01      	ldr	r3, [sp, #4]
    e9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9d8:	2b00      	cmp	r3, #0
    e9da:	d10d      	bne.n	e9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9dc:	f7f1 ffe2 	bl	9a4 <Adc_schm_read_msr>
    e9e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9e2:	9b00      	ldr	r3, [sp, #0]
    e9e4:	f003 0301 	and.w	r3, r3, #1
    e9e8:	2b00      	cmp	r3, #0
    e9ea:	d100      	bne.n	e9ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    e9ee:	490a      	ldr	r1, [pc, #40]	; (ea18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    e9f0:	9b01      	ldr	r3, [sp, #4]
    e9f2:	9a00      	ldr	r2, [sp, #0]
    e9f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    e9f8:	4a06      	ldr	r2, [pc, #24]	; (ea14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    e9fa:	9b01      	ldr	r3, [sp, #4]
    e9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea00:	1c5a      	adds	r2, r3, #1
    ea02:	4904      	ldr	r1, [pc, #16]	; (ea14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ea04:	9b01      	ldr	r3, [sp, #4]
    ea06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea0a:	bf00      	nop
    ea0c:	b003      	add	sp, #12
    ea0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea12:	bf00      	nop
    ea14:	1fff90c4 	.word	0x1fff90c4
    ea18:	1fff90c0 	.word	0x1fff90c0

0000ea1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ea1c:	b500      	push	{lr}
    ea1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea20:	f7f2 f8a2 	bl	b68 <Sys_GetCoreID>
    ea24:	4603      	mov	r3, r0
    ea26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    ea28:	4a0d      	ldr	r2, [pc, #52]	; (ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ea2a:	9b01      	ldr	r3, [sp, #4]
    ea2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea30:	1e5a      	subs	r2, r3, #1
    ea32:	490b      	ldr	r1, [pc, #44]	; (ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ea34:	9b01      	ldr	r3, [sp, #4]
    ea36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    ea3a:	4a0a      	ldr	r2, [pc, #40]	; (ea64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea42:	f003 0301 	and.w	r3, r3, #1
    ea46:	2b00      	cmp	r3, #0
    ea48:	d106      	bne.n	ea58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    ea4a:	4a05      	ldr	r2, [pc, #20]	; (ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d100      	bne.n	ea58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea58:	bf00      	nop
    ea5a:	b003      	add	sp, #12
    ea5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ea60:	1fff90c4 	.word	0x1fff90c4
    ea64:	1fff90c0 	.word	0x1fff90c0

0000ea68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    ea68:	b500      	push	{lr}
    ea6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea6c:	f7f2 f87c 	bl	b68 <Sys_GetCoreID>
    ea70:	4603      	mov	r3, r0
    ea72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    ea74:	4a10      	ldr	r2, [pc, #64]	; (eab8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ea76:	9b01      	ldr	r3, [sp, #4]
    ea78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea7c:	2b00      	cmp	r3, #0
    ea7e:	d10d      	bne.n	ea9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea80:	f7f1 ff99 	bl	9b6 <Mcu_schm_read_msr>
    ea84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea86:	9b00      	ldr	r3, [sp, #0]
    ea88:	f003 0301 	and.w	r3, r3, #1
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d100      	bne.n	ea92 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ea92:	490a      	ldr	r1, [pc, #40]	; (eabc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    ea94:	9b01      	ldr	r3, [sp, #4]
    ea96:	9a00      	ldr	r2, [sp, #0]
    ea98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    ea9c:	4a06      	ldr	r2, [pc, #24]	; (eab8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ea9e:	9b01      	ldr	r3, [sp, #4]
    eaa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaa4:	1c5a      	adds	r2, r3, #1
    eaa6:	4904      	ldr	r1, [pc, #16]	; (eab8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eaa8:	9b01      	ldr	r3, [sp, #4]
    eaaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eaae:	bf00      	nop
    eab0:	b003      	add	sp, #12
    eab2:	f85d fb04 	ldr.w	pc, [sp], #4
    eab6:	bf00      	nop
    eab8:	1fff90cc 	.word	0x1fff90cc
    eabc:	1fff90c8 	.word	0x1fff90c8

0000eac0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    eac0:	b500      	push	{lr}
    eac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eac4:	f7f2 f850 	bl	b68 <Sys_GetCoreID>
    eac8:	4603      	mov	r3, r0
    eaca:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    eacc:	4a0d      	ldr	r2, [pc, #52]	; (eb04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eace:	9b01      	ldr	r3, [sp, #4]
    ead0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ead4:	1e5a      	subs	r2, r3, #1
    ead6:	490b      	ldr	r1, [pc, #44]	; (eb04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ead8:	9b01      	ldr	r3, [sp, #4]
    eada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    eade:	4a0a      	ldr	r2, [pc, #40]	; (eb08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eae6:	f003 0301 	and.w	r3, r3, #1
    eaea:	2b00      	cmp	r3, #0
    eaec:	d106      	bne.n	eafc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    eaee:	4a05      	ldr	r2, [pc, #20]	; (eb04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eaf0:	9b01      	ldr	r3, [sp, #4]
    eaf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d100      	bne.n	eafc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eafa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eafc:	bf00      	nop
    eafe:	b003      	add	sp, #12
    eb00:	f85d fb04 	ldr.w	pc, [sp], #4
    eb04:	1fff90cc 	.word	0x1fff90cc
    eb08:	1fff90c8 	.word	0x1fff90c8

0000eb0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    eb0c:	b500      	push	{lr}
    eb0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb10:	f7f2 f82a 	bl	b68 <Sys_GetCoreID>
    eb14:	4603      	mov	r3, r0
    eb16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    eb18:	4a10      	ldr	r2, [pc, #64]	; (eb5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    eb1a:	9b01      	ldr	r3, [sp, #4]
    eb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb20:	2b00      	cmp	r3, #0
    eb22:	d10d      	bne.n	eb40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb24:	f7f1 ff47 	bl	9b6 <Mcu_schm_read_msr>
    eb28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb2a:	9b00      	ldr	r3, [sp, #0]
    eb2c:	f003 0301 	and.w	r3, r3, #1
    eb30:	2b00      	cmp	r3, #0
    eb32:	d100      	bne.n	eb36 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    eb36:	490a      	ldr	r1, [pc, #40]	; (eb60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    eb38:	9b01      	ldr	r3, [sp, #4]
    eb3a:	9a00      	ldr	r2, [sp, #0]
    eb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    eb40:	4a06      	ldr	r2, [pc, #24]	; (eb5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    eb42:	9b01      	ldr	r3, [sp, #4]
    eb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb48:	1c5a      	adds	r2, r3, #1
    eb4a:	4904      	ldr	r1, [pc, #16]	; (eb5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb52:	bf00      	nop
    eb54:	b003      	add	sp, #12
    eb56:	f85d fb04 	ldr.w	pc, [sp], #4
    eb5a:	bf00      	nop
    eb5c:	1fff90d4 	.word	0x1fff90d4
    eb60:	1fff90d0 	.word	0x1fff90d0

0000eb64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    eb64:	b500      	push	{lr}
    eb66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb68:	f7f1 fffe 	bl	b68 <Sys_GetCoreID>
    eb6c:	4603      	mov	r3, r0
    eb6e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    eb70:	4a0d      	ldr	r2, [pc, #52]	; (eba8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    eb72:	9b01      	ldr	r3, [sp, #4]
    eb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb78:	1e5a      	subs	r2, r3, #1
    eb7a:	490b      	ldr	r1, [pc, #44]	; (eba8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    eb7c:	9b01      	ldr	r3, [sp, #4]
    eb7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    eb82:	4a0a      	ldr	r2, [pc, #40]	; (ebac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb8a:	f003 0301 	and.w	r3, r3, #1
    eb8e:	2b00      	cmp	r3, #0
    eb90:	d106      	bne.n	eba0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    eb92:	4a05      	ldr	r2, [pc, #20]	; (eba8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    eb94:	9b01      	ldr	r3, [sp, #4]
    eb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	d100      	bne.n	eba0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eba0:	bf00      	nop
    eba2:	b003      	add	sp, #12
    eba4:	f85d fb04 	ldr.w	pc, [sp], #4
    eba8:	1fff90d4 	.word	0x1fff90d4
    ebac:	1fff90d0 	.word	0x1fff90d0

0000ebb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ebb0:	b500      	push	{lr}
    ebb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebb4:	f7f1 ffd8 	bl	b68 <Sys_GetCoreID>
    ebb8:	4603      	mov	r3, r0
    ebba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    ebbc:	4a10      	ldr	r2, [pc, #64]	; (ec00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ebbe:	9b01      	ldr	r3, [sp, #4]
    ebc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	d10d      	bne.n	ebe4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebc8:	f7f1 fef5 	bl	9b6 <Mcu_schm_read_msr>
    ebcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebce:	9b00      	ldr	r3, [sp, #0]
    ebd0:	f003 0301 	and.w	r3, r3, #1
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d100      	bne.n	ebda <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ebda:	490a      	ldr	r1, [pc, #40]	; (ec04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    ebdc:	9b01      	ldr	r3, [sp, #4]
    ebde:	9a00      	ldr	r2, [sp, #0]
    ebe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    ebe4:	4a06      	ldr	r2, [pc, #24]	; (ec00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ebe6:	9b01      	ldr	r3, [sp, #4]
    ebe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebec:	1c5a      	adds	r2, r3, #1
    ebee:	4904      	ldr	r1, [pc, #16]	; (ec00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ebf0:	9b01      	ldr	r3, [sp, #4]
    ebf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebf6:	bf00      	nop
    ebf8:	b003      	add	sp, #12
    ebfa:	f85d fb04 	ldr.w	pc, [sp], #4
    ebfe:	bf00      	nop
    ec00:	1fff90dc 	.word	0x1fff90dc
    ec04:	1fff90d8 	.word	0x1fff90d8

0000ec08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ec08:	b500      	push	{lr}
    ec0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec0c:	f7f1 ffac 	bl	b68 <Sys_GetCoreID>
    ec10:	4603      	mov	r3, r0
    ec12:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    ec14:	4a0d      	ldr	r2, [pc, #52]	; (ec4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ec16:	9b01      	ldr	r3, [sp, #4]
    ec18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec1c:	1e5a      	subs	r2, r3, #1
    ec1e:	490b      	ldr	r1, [pc, #44]	; (ec4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ec20:	9b01      	ldr	r3, [sp, #4]
    ec22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ec26:	4a0a      	ldr	r2, [pc, #40]	; (ec50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    ec28:	9b01      	ldr	r3, [sp, #4]
    ec2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec2e:	f003 0301 	and.w	r3, r3, #1
    ec32:	2b00      	cmp	r3, #0
    ec34:	d106      	bne.n	ec44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    ec36:	4a05      	ldr	r2, [pc, #20]	; (ec4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec3e:	2b00      	cmp	r3, #0
    ec40:	d100      	bne.n	ec44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec44:	bf00      	nop
    ec46:	b003      	add	sp, #12
    ec48:	f85d fb04 	ldr.w	pc, [sp], #4
    ec4c:	1fff90dc 	.word	0x1fff90dc
    ec50:	1fff90d8 	.word	0x1fff90d8

0000ec54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ec54:	b500      	push	{lr}
    ec56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec58:	f7f1 ff86 	bl	b68 <Sys_GetCoreID>
    ec5c:	4603      	mov	r3, r0
    ec5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    ec60:	4a10      	ldr	r2, [pc, #64]	; (eca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ec62:	9b01      	ldr	r3, [sp, #4]
    ec64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec68:	2b00      	cmp	r3, #0
    ec6a:	d10d      	bne.n	ec88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec6c:	f7f1 feac 	bl	9c8 <Port_schm_read_msr>
    ec70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec72:	9b00      	ldr	r3, [sp, #0]
    ec74:	f003 0301 	and.w	r3, r3, #1
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d100      	bne.n	ec7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ec7e:	490a      	ldr	r1, [pc, #40]	; (eca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    ec80:	9b01      	ldr	r3, [sp, #4]
    ec82:	9a00      	ldr	r2, [sp, #0]
    ec84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    ec88:	4a06      	ldr	r2, [pc, #24]	; (eca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ec8a:	9b01      	ldr	r3, [sp, #4]
    ec8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec90:	1c5a      	adds	r2, r3, #1
    ec92:	4904      	ldr	r1, [pc, #16]	; (eca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ec94:	9b01      	ldr	r3, [sp, #4]
    ec96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec9a:	bf00      	nop
    ec9c:	b003      	add	sp, #12
    ec9e:	f85d fb04 	ldr.w	pc, [sp], #4
    eca2:	bf00      	nop
    eca4:	1fff90e4 	.word	0x1fff90e4
    eca8:	1fff90e0 	.word	0x1fff90e0

0000ecac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ecac:	b500      	push	{lr}
    ecae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb0:	f7f1 ff5a 	bl	b68 <Sys_GetCoreID>
    ecb4:	4603      	mov	r3, r0
    ecb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    ecb8:	4a0d      	ldr	r2, [pc, #52]	; (ecf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ecba:	9b01      	ldr	r3, [sp, #4]
    ecbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc0:	1e5a      	subs	r2, r3, #1
    ecc2:	490b      	ldr	r1, [pc, #44]	; (ecf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ecc4:	9b01      	ldr	r3, [sp, #4]
    ecc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ecca:	4a0a      	ldr	r2, [pc, #40]	; (ecf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecd2:	f003 0301 	and.w	r3, r3, #1
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d106      	bne.n	ece8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    ecda:	4a05      	ldr	r2, [pc, #20]	; (ecf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ecdc:	9b01      	ldr	r3, [sp, #4]
    ecde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ece2:	2b00      	cmp	r3, #0
    ece4:	d100      	bne.n	ece8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ece6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ece8:	bf00      	nop
    ecea:	b003      	add	sp, #12
    ecec:	f85d fb04 	ldr.w	pc, [sp], #4
    ecf0:	1fff90e4 	.word	0x1fff90e4
    ecf4:	1fff90e0 	.word	0x1fff90e0

0000ecf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ecf8:	b500      	push	{lr}
    ecfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecfc:	f7f1 ff34 	bl	b68 <Sys_GetCoreID>
    ed00:	4603      	mov	r3, r0
    ed02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    ed04:	4a10      	ldr	r2, [pc, #64]	; (ed48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ed06:	9b01      	ldr	r3, [sp, #4]
    ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed0c:	2b00      	cmp	r3, #0
    ed0e:	d10d      	bne.n	ed2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed10:	f7f1 fe5a 	bl	9c8 <Port_schm_read_msr>
    ed14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed16:	9b00      	ldr	r3, [sp, #0]
    ed18:	f003 0301 	and.w	r3, r3, #1
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d100      	bne.n	ed22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ed22:	490a      	ldr	r1, [pc, #40]	; (ed4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    ed24:	9b01      	ldr	r3, [sp, #4]
    ed26:	9a00      	ldr	r2, [sp, #0]
    ed28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    ed2c:	4a06      	ldr	r2, [pc, #24]	; (ed48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ed2e:	9b01      	ldr	r3, [sp, #4]
    ed30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed34:	1c5a      	adds	r2, r3, #1
    ed36:	4904      	ldr	r1, [pc, #16]	; (ed48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ed38:	9b01      	ldr	r3, [sp, #4]
    ed3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed3e:	bf00      	nop
    ed40:	b003      	add	sp, #12
    ed42:	f85d fb04 	ldr.w	pc, [sp], #4
    ed46:	bf00      	nop
    ed48:	1fff90ec 	.word	0x1fff90ec
    ed4c:	1fff90e8 	.word	0x1fff90e8

0000ed50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ed50:	b500      	push	{lr}
    ed52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed54:	f7f1 ff08 	bl	b68 <Sys_GetCoreID>
    ed58:	4603      	mov	r3, r0
    ed5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    ed5c:	4a0d      	ldr	r2, [pc, #52]	; (ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ed5e:	9b01      	ldr	r3, [sp, #4]
    ed60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed64:	1e5a      	subs	r2, r3, #1
    ed66:	490b      	ldr	r1, [pc, #44]	; (ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ed68:	9b01      	ldr	r3, [sp, #4]
    ed6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ed6e:	4a0a      	ldr	r2, [pc, #40]	; (ed98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed76:	f003 0301 	and.w	r3, r3, #1
    ed7a:	2b00      	cmp	r3, #0
    ed7c:	d106      	bne.n	ed8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    ed7e:	4a05      	ldr	r2, [pc, #20]	; (ed94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ed80:	9b01      	ldr	r3, [sp, #4]
    ed82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed86:	2b00      	cmp	r3, #0
    ed88:	d100      	bne.n	ed8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed8c:	bf00      	nop
    ed8e:	b003      	add	sp, #12
    ed90:	f85d fb04 	ldr.w	pc, [sp], #4
    ed94:	1fff90ec 	.word	0x1fff90ec
    ed98:	1fff90e8 	.word	0x1fff90e8

0000ed9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    ed9c:	b500      	push	{lr}
    ed9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eda0:	f7f1 fee2 	bl	b68 <Sys_GetCoreID>
    eda4:	4603      	mov	r3, r0
    eda6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    eda8:	4a10      	ldr	r2, [pc, #64]	; (edec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    edaa:	9b01      	ldr	r3, [sp, #4]
    edac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d10d      	bne.n	edd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edb4:	f7f1 fe08 	bl	9c8 <Port_schm_read_msr>
    edb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edba:	9b00      	ldr	r3, [sp, #0]
    edbc:	f003 0301 	and.w	r3, r3, #1
    edc0:	2b00      	cmp	r3, #0
    edc2:	d100      	bne.n	edc6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    edc6:	490a      	ldr	r1, [pc, #40]	; (edf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    edc8:	9b01      	ldr	r3, [sp, #4]
    edca:	9a00      	ldr	r2, [sp, #0]
    edcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    edd0:	4a06      	ldr	r2, [pc, #24]	; (edec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    edd2:	9b01      	ldr	r3, [sp, #4]
    edd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd8:	1c5a      	adds	r2, r3, #1
    edda:	4904      	ldr	r1, [pc, #16]	; (edec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    eddc:	9b01      	ldr	r3, [sp, #4]
    edde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ede2:	bf00      	nop
    ede4:	b003      	add	sp, #12
    ede6:	f85d fb04 	ldr.w	pc, [sp], #4
    edea:	bf00      	nop
    edec:	1fff90f4 	.word	0x1fff90f4
    edf0:	1fff90f0 	.word	0x1fff90f0

0000edf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    edf4:	b500      	push	{lr}
    edf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edf8:	f7f1 feb6 	bl	b68 <Sys_GetCoreID>
    edfc:	4603      	mov	r3, r0
    edfe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    ee00:	4a0d      	ldr	r2, [pc, #52]	; (ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ee02:	9b01      	ldr	r3, [sp, #4]
    ee04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee08:	1e5a      	subs	r2, r3, #1
    ee0a:	490b      	ldr	r1, [pc, #44]	; (ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ee0c:	9b01      	ldr	r3, [sp, #4]
    ee0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ee12:	4a0a      	ldr	r2, [pc, #40]	; (ee3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    ee14:	9b01      	ldr	r3, [sp, #4]
    ee16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee1a:	f003 0301 	and.w	r3, r3, #1
    ee1e:	2b00      	cmp	r3, #0
    ee20:	d106      	bne.n	ee30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    ee22:	4a05      	ldr	r2, [pc, #20]	; (ee38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d100      	bne.n	ee30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee30:	bf00      	nop
    ee32:	b003      	add	sp, #12
    ee34:	f85d fb04 	ldr.w	pc, [sp], #4
    ee38:	1fff90f4 	.word	0x1fff90f4
    ee3c:	1fff90f0 	.word	0x1fff90f0

0000ee40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    ee40:	b500      	push	{lr}
    ee42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee44:	f7f1 fe90 	bl	b68 <Sys_GetCoreID>
    ee48:	4603      	mov	r3, r0
    ee4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    ee4c:	4a10      	ldr	r2, [pc, #64]	; (ee90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ee4e:	9b01      	ldr	r3, [sp, #4]
    ee50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee54:	2b00      	cmp	r3, #0
    ee56:	d10d      	bne.n	ee74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee58:	f7f1 fdb6 	bl	9c8 <Port_schm_read_msr>
    ee5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee5e:	9b00      	ldr	r3, [sp, #0]
    ee60:	f003 0301 	and.w	r3, r3, #1
    ee64:	2b00      	cmp	r3, #0
    ee66:	d100      	bne.n	ee6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ee6a:	490a      	ldr	r1, [pc, #40]	; (ee94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    ee6c:	9b01      	ldr	r3, [sp, #4]
    ee6e:	9a00      	ldr	r2, [sp, #0]
    ee70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    ee74:	4a06      	ldr	r2, [pc, #24]	; (ee90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ee76:	9b01      	ldr	r3, [sp, #4]
    ee78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee7c:	1c5a      	adds	r2, r3, #1
    ee7e:	4904      	ldr	r1, [pc, #16]	; (ee90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee86:	bf00      	nop
    ee88:	b003      	add	sp, #12
    ee8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ee8e:	bf00      	nop
    ee90:	1fff90fc 	.word	0x1fff90fc
    ee94:	1fff90f8 	.word	0x1fff90f8

0000ee98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    ee98:	b500      	push	{lr}
    ee9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee9c:	f7f1 fe64 	bl	b68 <Sys_GetCoreID>
    eea0:	4603      	mov	r3, r0
    eea2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    eea4:	4a0d      	ldr	r2, [pc, #52]	; (eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    eea6:	9b01      	ldr	r3, [sp, #4]
    eea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeac:	1e5a      	subs	r2, r3, #1
    eeae:	490b      	ldr	r1, [pc, #44]	; (eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    eeb0:	9b01      	ldr	r3, [sp, #4]
    eeb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    eeb6:	4a0a      	ldr	r2, [pc, #40]	; (eee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    eeb8:	9b01      	ldr	r3, [sp, #4]
    eeba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eebe:	f003 0301 	and.w	r3, r3, #1
    eec2:	2b00      	cmp	r3, #0
    eec4:	d106      	bne.n	eed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    eec6:	4a05      	ldr	r2, [pc, #20]	; (eedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    eec8:	9b01      	ldr	r3, [sp, #4]
    eeca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eece:	2b00      	cmp	r3, #0
    eed0:	d100      	bne.n	eed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eed4:	bf00      	nop
    eed6:	b003      	add	sp, #12
    eed8:	f85d fb04 	ldr.w	pc, [sp], #4
    eedc:	1fff90fc 	.word	0x1fff90fc
    eee0:	1fff90f8 	.word	0x1fff90f8

0000eee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    eee4:	b500      	push	{lr}
    eee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eee8:	f7f1 fe3e 	bl	b68 <Sys_GetCoreID>
    eeec:	4603      	mov	r3, r0
    eeee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    eef0:	4a10      	ldr	r2, [pc, #64]	; (ef34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    eef2:	9b01      	ldr	r3, [sp, #4]
    eef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eef8:	2b00      	cmp	r3, #0
    eefa:	d10d      	bne.n	ef18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eefc:	f7f1 fd64 	bl	9c8 <Port_schm_read_msr>
    ef00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef02:	9b00      	ldr	r3, [sp, #0]
    ef04:	f003 0301 	and.w	r3, r3, #1
    ef08:	2b00      	cmp	r3, #0
    ef0a:	d100      	bne.n	ef0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    ef0e:	490a      	ldr	r1, [pc, #40]	; (ef38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    ef10:	9b01      	ldr	r3, [sp, #4]
    ef12:	9a00      	ldr	r2, [sp, #0]
    ef14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    ef18:	4a06      	ldr	r2, [pc, #24]	; (ef34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    ef1a:	9b01      	ldr	r3, [sp, #4]
    ef1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef20:	1c5a      	adds	r2, r3, #1
    ef22:	4904      	ldr	r1, [pc, #16]	; (ef34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef2a:	bf00      	nop
    ef2c:	b003      	add	sp, #12
    ef2e:	f85d fb04 	ldr.w	pc, [sp], #4
    ef32:	bf00      	nop
    ef34:	1fff9104 	.word	0x1fff9104
    ef38:	1fff9100 	.word	0x1fff9100

0000ef3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    ef3c:	b500      	push	{lr}
    ef3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef40:	f7f1 fe12 	bl	b68 <Sys_GetCoreID>
    ef44:	4603      	mov	r3, r0
    ef46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    ef48:	4a0d      	ldr	r2, [pc, #52]	; (ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ef4a:	9b01      	ldr	r3, [sp, #4]
    ef4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef50:	1e5a      	subs	r2, r3, #1
    ef52:	490b      	ldr	r1, [pc, #44]	; (ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ef54:	9b01      	ldr	r3, [sp, #4]
    ef56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    ef5a:	4a0a      	ldr	r2, [pc, #40]	; (ef84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    ef5c:	9b01      	ldr	r3, [sp, #4]
    ef5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef62:	f003 0301 	and.w	r3, r3, #1
    ef66:	2b00      	cmp	r3, #0
    ef68:	d106      	bne.n	ef78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    ef6a:	4a05      	ldr	r2, [pc, #20]	; (ef80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ef6c:	9b01      	ldr	r3, [sp, #4]
    ef6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef72:	2b00      	cmp	r3, #0
    ef74:	d100      	bne.n	ef78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef78:	bf00      	nop
    ef7a:	b003      	add	sp, #12
    ef7c:	f85d fb04 	ldr.w	pc, [sp], #4
    ef80:	1fff9104 	.word	0x1fff9104
    ef84:	1fff9100 	.word	0x1fff9100

0000ef88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    ef88:	b500      	push	{lr}
    ef8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef8c:	f7f1 fdec 	bl	b68 <Sys_GetCoreID>
    ef90:	4603      	mov	r3, r0
    ef92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    ef94:	4a10      	ldr	r2, [pc, #64]	; (efd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    ef96:	9b01      	ldr	r3, [sp, #4]
    ef98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d10d      	bne.n	efbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efa0:	f7f1 fd12 	bl	9c8 <Port_schm_read_msr>
    efa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efa6:	9b00      	ldr	r3, [sp, #0]
    efa8:	f003 0301 	and.w	r3, r3, #1
    efac:	2b00      	cmp	r3, #0
    efae:	d100      	bne.n	efb2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    efb2:	490a      	ldr	r1, [pc, #40]	; (efdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    efb4:	9b01      	ldr	r3, [sp, #4]
    efb6:	9a00      	ldr	r2, [sp, #0]
    efb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    efbc:	4a06      	ldr	r2, [pc, #24]	; (efd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    efbe:	9b01      	ldr	r3, [sp, #4]
    efc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efc4:	1c5a      	adds	r2, r3, #1
    efc6:	4904      	ldr	r1, [pc, #16]	; (efd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efce:	bf00      	nop
    efd0:	b003      	add	sp, #12
    efd2:	f85d fb04 	ldr.w	pc, [sp], #4
    efd6:	bf00      	nop
    efd8:	1fff910c 	.word	0x1fff910c
    efdc:	1fff9108 	.word	0x1fff9108

0000efe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    efe0:	b500      	push	{lr}
    efe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efe4:	f7f1 fdc0 	bl	b68 <Sys_GetCoreID>
    efe8:	4603      	mov	r3, r0
    efea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    efec:	4a0d      	ldr	r2, [pc, #52]	; (f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    efee:	9b01      	ldr	r3, [sp, #4]
    eff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff4:	1e5a      	subs	r2, r3, #1
    eff6:	490b      	ldr	r1, [pc, #44]	; (f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    eff8:	9b01      	ldr	r3, [sp, #4]
    effa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    effe:	4a0a      	ldr	r2, [pc, #40]	; (f028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f006:	f003 0301 	and.w	r3, r3, #1
    f00a:	2b00      	cmp	r3, #0
    f00c:	d106      	bne.n	f01c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f00e:	4a05      	ldr	r2, [pc, #20]	; (f024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f010:	9b01      	ldr	r3, [sp, #4]
    f012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f016:	2b00      	cmp	r3, #0
    f018:	d100      	bne.n	f01c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f01c:	bf00      	nop
    f01e:	b003      	add	sp, #12
    f020:	f85d fb04 	ldr.w	pc, [sp], #4
    f024:	1fff910c 	.word	0x1fff910c
    f028:	1fff9108 	.word	0x1fff9108

0000f02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f02c:	b500      	push	{lr}
    f02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f030:	f7f1 fd9a 	bl	b68 <Sys_GetCoreID>
    f034:	4603      	mov	r3, r0
    f036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f038:	4a10      	ldr	r2, [pc, #64]	; (f07c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f03a:	9b01      	ldr	r3, [sp, #4]
    f03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f040:	2b00      	cmp	r3, #0
    f042:	d10d      	bne.n	f060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f044:	f7f1 fcc0 	bl	9c8 <Port_schm_read_msr>
    f048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f04a:	9b00      	ldr	r3, [sp, #0]
    f04c:	f003 0301 	and.w	r3, r3, #1
    f050:	2b00      	cmp	r3, #0
    f052:	d100      	bne.n	f056 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f056:	490a      	ldr	r1, [pc, #40]	; (f080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f058:	9b01      	ldr	r3, [sp, #4]
    f05a:	9a00      	ldr	r2, [sp, #0]
    f05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f060:	4a06      	ldr	r2, [pc, #24]	; (f07c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f062:	9b01      	ldr	r3, [sp, #4]
    f064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f068:	1c5a      	adds	r2, r3, #1
    f06a:	4904      	ldr	r1, [pc, #16]	; (f07c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f06c:	9b01      	ldr	r3, [sp, #4]
    f06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f072:	bf00      	nop
    f074:	b003      	add	sp, #12
    f076:	f85d fb04 	ldr.w	pc, [sp], #4
    f07a:	bf00      	nop
    f07c:	1fff9114 	.word	0x1fff9114
    f080:	1fff9110 	.word	0x1fff9110

0000f084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f084:	b500      	push	{lr}
    f086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f088:	f7f1 fd6e 	bl	b68 <Sys_GetCoreID>
    f08c:	4603      	mov	r3, r0
    f08e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f090:	4a0d      	ldr	r2, [pc, #52]	; (f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f092:	9b01      	ldr	r3, [sp, #4]
    f094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f098:	1e5a      	subs	r2, r3, #1
    f09a:	490b      	ldr	r1, [pc, #44]	; (f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f09c:	9b01      	ldr	r3, [sp, #4]
    f09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f0a2:	4a0a      	ldr	r2, [pc, #40]	; (f0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f0a4:	9b01      	ldr	r3, [sp, #4]
    f0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0aa:	f003 0301 	and.w	r3, r3, #1
    f0ae:	2b00      	cmp	r3, #0
    f0b0:	d106      	bne.n	f0c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f0b2:	4a05      	ldr	r2, [pc, #20]	; (f0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f0b4:	9b01      	ldr	r3, [sp, #4]
    f0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d100      	bne.n	f0c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0c0:	bf00      	nop
    f0c2:	b003      	add	sp, #12
    f0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f0c8:	1fff9114 	.word	0x1fff9114
    f0cc:	1fff9110 	.word	0x1fff9110

0000f0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f0d0:	b500      	push	{lr}
    f0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0d4:	f7f1 fd48 	bl	b68 <Sys_GetCoreID>
    f0d8:	4603      	mov	r3, r0
    f0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f0dc:	4a10      	ldr	r2, [pc, #64]	; (f120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f0de:	9b01      	ldr	r3, [sp, #4]
    f0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e4:	2b00      	cmp	r3, #0
    f0e6:	d10d      	bne.n	f104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0e8:	f7f1 fc6e 	bl	9c8 <Port_schm_read_msr>
    f0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0ee:	9b00      	ldr	r3, [sp, #0]
    f0f0:	f003 0301 	and.w	r3, r3, #1
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d100      	bne.n	f0fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f0fa:	490a      	ldr	r1, [pc, #40]	; (f124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f0fc:	9b01      	ldr	r3, [sp, #4]
    f0fe:	9a00      	ldr	r2, [sp, #0]
    f100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f104:	4a06      	ldr	r2, [pc, #24]	; (f120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f106:	9b01      	ldr	r3, [sp, #4]
    f108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f10c:	1c5a      	adds	r2, r3, #1
    f10e:	4904      	ldr	r1, [pc, #16]	; (f120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f116:	bf00      	nop
    f118:	b003      	add	sp, #12
    f11a:	f85d fb04 	ldr.w	pc, [sp], #4
    f11e:	bf00      	nop
    f120:	1fff911c 	.word	0x1fff911c
    f124:	1fff9118 	.word	0x1fff9118

0000f128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f128:	b500      	push	{lr}
    f12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f12c:	f7f1 fd1c 	bl	b68 <Sys_GetCoreID>
    f130:	4603      	mov	r3, r0
    f132:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f134:	4a0d      	ldr	r2, [pc, #52]	; (f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f136:	9b01      	ldr	r3, [sp, #4]
    f138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f13c:	1e5a      	subs	r2, r3, #1
    f13e:	490b      	ldr	r1, [pc, #44]	; (f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f140:	9b01      	ldr	r3, [sp, #4]
    f142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f146:	4a0a      	ldr	r2, [pc, #40]	; (f170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f14e:	f003 0301 	and.w	r3, r3, #1
    f152:	2b00      	cmp	r3, #0
    f154:	d106      	bne.n	f164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f156:	4a05      	ldr	r2, [pc, #20]	; (f16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f15e:	2b00      	cmp	r3, #0
    f160:	d100      	bne.n	f164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f164:	bf00      	nop
    f166:	b003      	add	sp, #12
    f168:	f85d fb04 	ldr.w	pc, [sp], #4
    f16c:	1fff911c 	.word	0x1fff911c
    f170:	1fff9118 	.word	0x1fff9118

0000f174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f174:	b500      	push	{lr}
    f176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f178:	f7f1 fcf6 	bl	b68 <Sys_GetCoreID>
    f17c:	4603      	mov	r3, r0
    f17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f180:	4a10      	ldr	r2, [pc, #64]	; (f1c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f182:	9b01      	ldr	r3, [sp, #4]
    f184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f188:	2b00      	cmp	r3, #0
    f18a:	d10d      	bne.n	f1a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f18c:	f7f1 fc1c 	bl	9c8 <Port_schm_read_msr>
    f190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f192:	9b00      	ldr	r3, [sp, #0]
    f194:	f003 0301 	and.w	r3, r3, #1
    f198:	2b00      	cmp	r3, #0
    f19a:	d100      	bne.n	f19e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f19e:	490a      	ldr	r1, [pc, #40]	; (f1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f1a0:	9b01      	ldr	r3, [sp, #4]
    f1a2:	9a00      	ldr	r2, [sp, #0]
    f1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f1a8:	4a06      	ldr	r2, [pc, #24]	; (f1c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f1aa:	9b01      	ldr	r3, [sp, #4]
    f1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1b0:	1c5a      	adds	r2, r3, #1
    f1b2:	4904      	ldr	r1, [pc, #16]	; (f1c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1ba:	bf00      	nop
    f1bc:	b003      	add	sp, #12
    f1be:	f85d fb04 	ldr.w	pc, [sp], #4
    f1c2:	bf00      	nop
    f1c4:	1fff9124 	.word	0x1fff9124
    f1c8:	1fff9120 	.word	0x1fff9120

0000f1cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f1cc:	b500      	push	{lr}
    f1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d0:	f7f1 fcca 	bl	b68 <Sys_GetCoreID>
    f1d4:	4603      	mov	r3, r0
    f1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f1d8:	4a0d      	ldr	r2, [pc, #52]	; (f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f1da:	9b01      	ldr	r3, [sp, #4]
    f1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e0:	1e5a      	subs	r2, r3, #1
    f1e2:	490b      	ldr	r1, [pc, #44]	; (f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f1e4:	9b01      	ldr	r3, [sp, #4]
    f1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f1ea:	4a0a      	ldr	r2, [pc, #40]	; (f214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f1ec:	9b01      	ldr	r3, [sp, #4]
    f1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f2:	f003 0301 	and.w	r3, r3, #1
    f1f6:	2b00      	cmp	r3, #0
    f1f8:	d106      	bne.n	f208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f1fa:	4a05      	ldr	r2, [pc, #20]	; (f210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f1fc:	9b01      	ldr	r3, [sp, #4]
    f1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f202:	2b00      	cmp	r3, #0
    f204:	d100      	bne.n	f208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f208:	bf00      	nop
    f20a:	b003      	add	sp, #12
    f20c:	f85d fb04 	ldr.w	pc, [sp], #4
    f210:	1fff9124 	.word	0x1fff9124
    f214:	1fff9120 	.word	0x1fff9120

0000f218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f218:	b500      	push	{lr}
    f21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f21c:	f7f1 fca4 	bl	b68 <Sys_GetCoreID>
    f220:	4603      	mov	r3, r0
    f222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f224:	4a10      	ldr	r2, [pc, #64]	; (f268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f226:	9b01      	ldr	r3, [sp, #4]
    f228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f22c:	2b00      	cmp	r3, #0
    f22e:	d10d      	bne.n	f24c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f230:	f7f1 fbca 	bl	9c8 <Port_schm_read_msr>
    f234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f236:	9b00      	ldr	r3, [sp, #0]
    f238:	f003 0301 	and.w	r3, r3, #1
    f23c:	2b00      	cmp	r3, #0
    f23e:	d100      	bne.n	f242 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f242:	490a      	ldr	r1, [pc, #40]	; (f26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f244:	9b01      	ldr	r3, [sp, #4]
    f246:	9a00      	ldr	r2, [sp, #0]
    f248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f24c:	4a06      	ldr	r2, [pc, #24]	; (f268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f24e:	9b01      	ldr	r3, [sp, #4]
    f250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f254:	1c5a      	adds	r2, r3, #1
    f256:	4904      	ldr	r1, [pc, #16]	; (f268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f258:	9b01      	ldr	r3, [sp, #4]
    f25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f25e:	bf00      	nop
    f260:	b003      	add	sp, #12
    f262:	f85d fb04 	ldr.w	pc, [sp], #4
    f266:	bf00      	nop
    f268:	1fff912c 	.word	0x1fff912c
    f26c:	1fff9128 	.word	0x1fff9128

0000f270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f270:	b500      	push	{lr}
    f272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f274:	f7f1 fc78 	bl	b68 <Sys_GetCoreID>
    f278:	4603      	mov	r3, r0
    f27a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f27c:	4a0d      	ldr	r2, [pc, #52]	; (f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f27e:	9b01      	ldr	r3, [sp, #4]
    f280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f284:	1e5a      	subs	r2, r3, #1
    f286:	490b      	ldr	r1, [pc, #44]	; (f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f288:	9b01      	ldr	r3, [sp, #4]
    f28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f28e:	4a0a      	ldr	r2, [pc, #40]	; (f2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f296:	f003 0301 	and.w	r3, r3, #1
    f29a:	2b00      	cmp	r3, #0
    f29c:	d106      	bne.n	f2ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f29e:	4a05      	ldr	r2, [pc, #20]	; (f2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d100      	bne.n	f2ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2ac:	bf00      	nop
    f2ae:	b003      	add	sp, #12
    f2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f2b4:	1fff912c 	.word	0x1fff912c
    f2b8:	1fff9128 	.word	0x1fff9128

0000f2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f2bc:	b500      	push	{lr}
    f2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2c0:	f7f1 fc52 	bl	b68 <Sys_GetCoreID>
    f2c4:	4603      	mov	r3, r0
    f2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f2c8:	4a10      	ldr	r2, [pc, #64]	; (f30c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f2ca:	9b01      	ldr	r3, [sp, #4]
    f2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d10d      	bne.n	f2f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2d4:	f7f1 fb78 	bl	9c8 <Port_schm_read_msr>
    f2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2da:	9b00      	ldr	r3, [sp, #0]
    f2dc:	f003 0301 	and.w	r3, r3, #1
    f2e0:	2b00      	cmp	r3, #0
    f2e2:	d100      	bne.n	f2e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f2e6:	490a      	ldr	r1, [pc, #40]	; (f310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f2e8:	9b01      	ldr	r3, [sp, #4]
    f2ea:	9a00      	ldr	r2, [sp, #0]
    f2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f2f0:	4a06      	ldr	r2, [pc, #24]	; (f30c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f2f2:	9b01      	ldr	r3, [sp, #4]
    f2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f8:	1c5a      	adds	r2, r3, #1
    f2fa:	4904      	ldr	r1, [pc, #16]	; (f30c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f2fc:	9b01      	ldr	r3, [sp, #4]
    f2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f302:	bf00      	nop
    f304:	b003      	add	sp, #12
    f306:	f85d fb04 	ldr.w	pc, [sp], #4
    f30a:	bf00      	nop
    f30c:	1fff9134 	.word	0x1fff9134
    f310:	1fff9130 	.word	0x1fff9130

0000f314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f314:	b500      	push	{lr}
    f316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f318:	f7f1 fc26 	bl	b68 <Sys_GetCoreID>
    f31c:	4603      	mov	r3, r0
    f31e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    f320:	4a0d      	ldr	r2, [pc, #52]	; (f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f322:	9b01      	ldr	r3, [sp, #4]
    f324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f328:	1e5a      	subs	r2, r3, #1
    f32a:	490b      	ldr	r1, [pc, #44]	; (f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f32c:	9b01      	ldr	r3, [sp, #4]
    f32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f332:	4a0a      	ldr	r2, [pc, #40]	; (f35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    f334:	9b01      	ldr	r3, [sp, #4]
    f336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f33a:	f003 0301 	and.w	r3, r3, #1
    f33e:	2b00      	cmp	r3, #0
    f340:	d106      	bne.n	f350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    f342:	4a05      	ldr	r2, [pc, #20]	; (f358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f344:	9b01      	ldr	r3, [sp, #4]
    f346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d100      	bne.n	f350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f350:	bf00      	nop
    f352:	b003      	add	sp, #12
    f354:	f85d fb04 	ldr.w	pc, [sp], #4
    f358:	1fff9134 	.word	0x1fff9134
    f35c:	1fff9130 	.word	0x1fff9130

0000f360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f360:	b500      	push	{lr}
    f362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f364:	f7f1 fc00 	bl	b68 <Sys_GetCoreID>
    f368:	4603      	mov	r3, r0
    f36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    f36c:	4a10      	ldr	r2, [pc, #64]	; (f3b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f36e:	9b01      	ldr	r3, [sp, #4]
    f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f374:	2b00      	cmp	r3, #0
    f376:	d10d      	bne.n	f394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f378:	f7f1 fb26 	bl	9c8 <Port_schm_read_msr>
    f37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f37e:	9b00      	ldr	r3, [sp, #0]
    f380:	f003 0301 	and.w	r3, r3, #1
    f384:	2b00      	cmp	r3, #0
    f386:	d100      	bne.n	f38a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f38a:	490a      	ldr	r1, [pc, #40]	; (f3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    f38c:	9b01      	ldr	r3, [sp, #4]
    f38e:	9a00      	ldr	r2, [sp, #0]
    f390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    f394:	4a06      	ldr	r2, [pc, #24]	; (f3b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f396:	9b01      	ldr	r3, [sp, #4]
    f398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f39c:	1c5a      	adds	r2, r3, #1
    f39e:	4904      	ldr	r1, [pc, #16]	; (f3b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f3a0:	9b01      	ldr	r3, [sp, #4]
    f3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3a6:	bf00      	nop
    f3a8:	b003      	add	sp, #12
    f3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f3ae:	bf00      	nop
    f3b0:	1fff913c 	.word	0x1fff913c
    f3b4:	1fff9138 	.word	0x1fff9138

0000f3b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f3b8:	b500      	push	{lr}
    f3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3bc:	f7f1 fbd4 	bl	b68 <Sys_GetCoreID>
    f3c0:	4603      	mov	r3, r0
    f3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    f3c4:	4a0d      	ldr	r2, [pc, #52]	; (f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f3c6:	9b01      	ldr	r3, [sp, #4]
    f3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3cc:	1e5a      	subs	r2, r3, #1
    f3ce:	490b      	ldr	r1, [pc, #44]	; (f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f3d0:	9b01      	ldr	r3, [sp, #4]
    f3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f3d6:	4a0a      	ldr	r2, [pc, #40]	; (f400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    f3d8:	9b01      	ldr	r3, [sp, #4]
    f3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3de:	f003 0301 	and.w	r3, r3, #1
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	d106      	bne.n	f3f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    f3e6:	4a05      	ldr	r2, [pc, #20]	; (f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f3e8:	9b01      	ldr	r3, [sp, #4]
    f3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d100      	bne.n	f3f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3f4:	bf00      	nop
    f3f6:	b003      	add	sp, #12
    f3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f3fc:	1fff913c 	.word	0x1fff913c
    f400:	1fff9138 	.word	0x1fff9138

0000f404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f404:	b500      	push	{lr}
    f406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f408:	f7f1 fbae 	bl	b68 <Sys_GetCoreID>
    f40c:	4603      	mov	r3, r0
    f40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    f410:	4a10      	ldr	r2, [pc, #64]	; (f454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f412:	9b01      	ldr	r3, [sp, #4]
    f414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f418:	2b00      	cmp	r3, #0
    f41a:	d10d      	bne.n	f438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f41c:	f7f1 fad4 	bl	9c8 <Port_schm_read_msr>
    f420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f422:	9b00      	ldr	r3, [sp, #0]
    f424:	f003 0301 	and.w	r3, r3, #1
    f428:	2b00      	cmp	r3, #0
    f42a:	d100      	bne.n	f42e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f42e:	490a      	ldr	r1, [pc, #40]	; (f458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    f430:	9b01      	ldr	r3, [sp, #4]
    f432:	9a00      	ldr	r2, [sp, #0]
    f434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    f438:	4a06      	ldr	r2, [pc, #24]	; (f454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f43a:	9b01      	ldr	r3, [sp, #4]
    f43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f440:	1c5a      	adds	r2, r3, #1
    f442:	4904      	ldr	r1, [pc, #16]	; (f454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f444:	9b01      	ldr	r3, [sp, #4]
    f446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f44a:	bf00      	nop
    f44c:	b003      	add	sp, #12
    f44e:	f85d fb04 	ldr.w	pc, [sp], #4
    f452:	bf00      	nop
    f454:	1fff9144 	.word	0x1fff9144
    f458:	1fff9140 	.word	0x1fff9140

0000f45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f45c:	b500      	push	{lr}
    f45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f460:	f7f1 fb82 	bl	b68 <Sys_GetCoreID>
    f464:	4603      	mov	r3, r0
    f466:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    f468:	4a0d      	ldr	r2, [pc, #52]	; (f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f46a:	9b01      	ldr	r3, [sp, #4]
    f46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f470:	1e5a      	subs	r2, r3, #1
    f472:	490b      	ldr	r1, [pc, #44]	; (f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f474:	9b01      	ldr	r3, [sp, #4]
    f476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f47a:	4a0a      	ldr	r2, [pc, #40]	; (f4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    f47c:	9b01      	ldr	r3, [sp, #4]
    f47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f482:	f003 0301 	and.w	r3, r3, #1
    f486:	2b00      	cmp	r3, #0
    f488:	d106      	bne.n	f498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    f48a:	4a05      	ldr	r2, [pc, #20]	; (f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f492:	2b00      	cmp	r3, #0
    f494:	d100      	bne.n	f498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f498:	bf00      	nop
    f49a:	b003      	add	sp, #12
    f49c:	f85d fb04 	ldr.w	pc, [sp], #4
    f4a0:	1fff9144 	.word	0x1fff9144
    f4a4:	1fff9140 	.word	0x1fff9140

0000f4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f4a8:	b500      	push	{lr}
    f4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4ac:	f7f1 fb5c 	bl	b68 <Sys_GetCoreID>
    f4b0:	4603      	mov	r3, r0
    f4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    f4b4:	4a10      	ldr	r2, [pc, #64]	; (f4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f4b6:	9b01      	ldr	r3, [sp, #4]
    f4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4bc:	2b00      	cmp	r3, #0
    f4be:	d10d      	bne.n	f4dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4c0:	f7f1 fa82 	bl	9c8 <Port_schm_read_msr>
    f4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4c6:	9b00      	ldr	r3, [sp, #0]
    f4c8:	f003 0301 	and.w	r3, r3, #1
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d100      	bne.n	f4d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f4d2:	490a      	ldr	r1, [pc, #40]	; (f4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    f4d4:	9b01      	ldr	r3, [sp, #4]
    f4d6:	9a00      	ldr	r2, [sp, #0]
    f4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    f4dc:	4a06      	ldr	r2, [pc, #24]	; (f4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f4de:	9b01      	ldr	r3, [sp, #4]
    f4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4e4:	1c5a      	adds	r2, r3, #1
    f4e6:	4904      	ldr	r1, [pc, #16]	; (f4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4ee:	bf00      	nop
    f4f0:	b003      	add	sp, #12
    f4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f4f6:	bf00      	nop
    f4f8:	1fff914c 	.word	0x1fff914c
    f4fc:	1fff9148 	.word	0x1fff9148

0000f500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f500:	b500      	push	{lr}
    f502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f504:	f7f1 fb30 	bl	b68 <Sys_GetCoreID>
    f508:	4603      	mov	r3, r0
    f50a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    f50c:	4a0d      	ldr	r2, [pc, #52]	; (f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f50e:	9b01      	ldr	r3, [sp, #4]
    f510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f514:	1e5a      	subs	r2, r3, #1
    f516:	490b      	ldr	r1, [pc, #44]	; (f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f518:	9b01      	ldr	r3, [sp, #4]
    f51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f51e:	4a0a      	ldr	r2, [pc, #40]	; (f548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    f520:	9b01      	ldr	r3, [sp, #4]
    f522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f526:	f003 0301 	and.w	r3, r3, #1
    f52a:	2b00      	cmp	r3, #0
    f52c:	d106      	bne.n	f53c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    f52e:	4a05      	ldr	r2, [pc, #20]	; (f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f530:	9b01      	ldr	r3, [sp, #4]
    f532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f536:	2b00      	cmp	r3, #0
    f538:	d100      	bne.n	f53c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f53c:	bf00      	nop
    f53e:	b003      	add	sp, #12
    f540:	f85d fb04 	ldr.w	pc, [sp], #4
    f544:	1fff914c 	.word	0x1fff914c
    f548:	1fff9148 	.word	0x1fff9148

0000f54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f54c:	b500      	push	{lr}
    f54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f550:	f7f1 fb0a 	bl	b68 <Sys_GetCoreID>
    f554:	4603      	mov	r3, r0
    f556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    f558:	4a10      	ldr	r2, [pc, #64]	; (f59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f55a:	9b01      	ldr	r3, [sp, #4]
    f55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f560:	2b00      	cmp	r3, #0
    f562:	d10d      	bne.n	f580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f564:	f7f1 fa30 	bl	9c8 <Port_schm_read_msr>
    f568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f56a:	9b00      	ldr	r3, [sp, #0]
    f56c:	f003 0301 	and.w	r3, r3, #1
    f570:	2b00      	cmp	r3, #0
    f572:	d100      	bne.n	f576 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f576:	490a      	ldr	r1, [pc, #40]	; (f5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    f578:	9b01      	ldr	r3, [sp, #4]
    f57a:	9a00      	ldr	r2, [sp, #0]
    f57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    f580:	4a06      	ldr	r2, [pc, #24]	; (f59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f582:	9b01      	ldr	r3, [sp, #4]
    f584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f588:	1c5a      	adds	r2, r3, #1
    f58a:	4904      	ldr	r1, [pc, #16]	; (f59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f58c:	9b01      	ldr	r3, [sp, #4]
    f58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f592:	bf00      	nop
    f594:	b003      	add	sp, #12
    f596:	f85d fb04 	ldr.w	pc, [sp], #4
    f59a:	bf00      	nop
    f59c:	1fff9154 	.word	0x1fff9154
    f5a0:	1fff9150 	.word	0x1fff9150

0000f5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f5a4:	b500      	push	{lr}
    f5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5a8:	f7f1 fade 	bl	b68 <Sys_GetCoreID>
    f5ac:	4603      	mov	r3, r0
    f5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    f5b0:	4a0d      	ldr	r2, [pc, #52]	; (f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f5b2:	9b01      	ldr	r3, [sp, #4]
    f5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5b8:	1e5a      	subs	r2, r3, #1
    f5ba:	490b      	ldr	r1, [pc, #44]	; (f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f5bc:	9b01      	ldr	r3, [sp, #4]
    f5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f5c2:	4a0a      	ldr	r2, [pc, #40]	; (f5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    f5c4:	9b01      	ldr	r3, [sp, #4]
    f5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5ca:	f003 0301 	and.w	r3, r3, #1
    f5ce:	2b00      	cmp	r3, #0
    f5d0:	d106      	bne.n	f5e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    f5d2:	4a05      	ldr	r2, [pc, #20]	; (f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f5d4:	9b01      	ldr	r3, [sp, #4]
    f5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d100      	bne.n	f5e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5e0:	bf00      	nop
    f5e2:	b003      	add	sp, #12
    f5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f5e8:	1fff9154 	.word	0x1fff9154
    f5ec:	1fff9150 	.word	0x1fff9150

0000f5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f5f0:	b500      	push	{lr}
    f5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5f4:	f7f1 fab8 	bl	b68 <Sys_GetCoreID>
    f5f8:	4603      	mov	r3, r0
    f5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    f5fc:	4a10      	ldr	r2, [pc, #64]	; (f640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f5fe:	9b01      	ldr	r3, [sp, #4]
    f600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f604:	2b00      	cmp	r3, #0
    f606:	d10d      	bne.n	f624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f608:	f7f1 f9de 	bl	9c8 <Port_schm_read_msr>
    f60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f60e:	9b00      	ldr	r3, [sp, #0]
    f610:	f003 0301 	and.w	r3, r3, #1
    f614:	2b00      	cmp	r3, #0
    f616:	d100      	bne.n	f61a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    f61a:	490a      	ldr	r1, [pc, #40]	; (f644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    f61c:	9b01      	ldr	r3, [sp, #4]
    f61e:	9a00      	ldr	r2, [sp, #0]
    f620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    f624:	4a06      	ldr	r2, [pc, #24]	; (f640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f626:	9b01      	ldr	r3, [sp, #4]
    f628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f62c:	1c5a      	adds	r2, r3, #1
    f62e:	4904      	ldr	r1, [pc, #16]	; (f640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f630:	9b01      	ldr	r3, [sp, #4]
    f632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f636:	bf00      	nop
    f638:	b003      	add	sp, #12
    f63a:	f85d fb04 	ldr.w	pc, [sp], #4
    f63e:	bf00      	nop
    f640:	1fff915c 	.word	0x1fff915c
    f644:	1fff9158 	.word	0x1fff9158

0000f648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f648:	b500      	push	{lr}
    f64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f64c:	f7f1 fa8c 	bl	b68 <Sys_GetCoreID>
    f650:	4603      	mov	r3, r0
    f652:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    f654:	4a0d      	ldr	r2, [pc, #52]	; (f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f656:	9b01      	ldr	r3, [sp, #4]
    f658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f65c:	1e5a      	subs	r2, r3, #1
    f65e:	490b      	ldr	r1, [pc, #44]	; (f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f660:	9b01      	ldr	r3, [sp, #4]
    f662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    f666:	4a0a      	ldr	r2, [pc, #40]	; (f690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    f668:	9b01      	ldr	r3, [sp, #4]
    f66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f66e:	f003 0301 	and.w	r3, r3, #1
    f672:	2b00      	cmp	r3, #0
    f674:	d106      	bne.n	f684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    f676:	4a05      	ldr	r2, [pc, #20]	; (f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f67e:	2b00      	cmp	r3, #0
    f680:	d100      	bne.n	f684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f684:	bf00      	nop
    f686:	b003      	add	sp, #12
    f688:	f85d fb04 	ldr.w	pc, [sp], #4
    f68c:	1fff915c 	.word	0x1fff915c
    f690:	1fff9158 	.word	0x1fff9158

0000f694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f694:	b500      	push	{lr}
    f696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f698:	f7f1 fa66 	bl	b68 <Sys_GetCoreID>
    f69c:	4603      	mov	r3, r0
    f69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    f6a0:	4a10      	ldr	r2, [pc, #64]	; (f6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f6a2:	9b01      	ldr	r3, [sp, #4]
    f6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d10d      	bne.n	f6c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6ac:	f7f1 f98c 	bl	9c8 <Port_schm_read_msr>
    f6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6b2:	9b00      	ldr	r3, [sp, #0]
    f6b4:	f003 0301 	and.w	r3, r3, #1
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	d100      	bne.n	f6be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    f6be:	490a      	ldr	r1, [pc, #40]	; (f6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    f6c0:	9b01      	ldr	r3, [sp, #4]
    f6c2:	9a00      	ldr	r2, [sp, #0]
    f6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    f6c8:	4a06      	ldr	r2, [pc, #24]	; (f6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f6ca:	9b01      	ldr	r3, [sp, #4]
    f6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6d0:	1c5a      	adds	r2, r3, #1
    f6d2:	4904      	ldr	r1, [pc, #16]	; (f6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f6d4:	9b01      	ldr	r3, [sp, #4]
    f6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6da:	bf00      	nop
    f6dc:	b003      	add	sp, #12
    f6de:	f85d fb04 	ldr.w	pc, [sp], #4
    f6e2:	bf00      	nop
    f6e4:	1fff9164 	.word	0x1fff9164
    f6e8:	1fff9160 	.word	0x1fff9160

0000f6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f6ec:	b500      	push	{lr}
    f6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6f0:	f7f1 fa3a 	bl	b68 <Sys_GetCoreID>
    f6f4:	4603      	mov	r3, r0
    f6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    f6f8:	4a0d      	ldr	r2, [pc, #52]	; (f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f6fa:	9b01      	ldr	r3, [sp, #4]
    f6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f700:	1e5a      	subs	r2, r3, #1
    f702:	490b      	ldr	r1, [pc, #44]	; (f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f704:	9b01      	ldr	r3, [sp, #4]
    f706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    f70a:	4a0a      	ldr	r2, [pc, #40]	; (f734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    f70c:	9b01      	ldr	r3, [sp, #4]
    f70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f712:	f003 0301 	and.w	r3, r3, #1
    f716:	2b00      	cmp	r3, #0
    f718:	d106      	bne.n	f728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    f71a:	4a05      	ldr	r2, [pc, #20]	; (f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f71c:	9b01      	ldr	r3, [sp, #4]
    f71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f722:	2b00      	cmp	r3, #0
    f724:	d100      	bne.n	f728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f728:	bf00      	nop
    f72a:	b003      	add	sp, #12
    f72c:	f85d fb04 	ldr.w	pc, [sp], #4
    f730:	1fff9164 	.word	0x1fff9164
    f734:	1fff9160 	.word	0x1fff9160

0000f738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f738:	b500      	push	{lr}
    f73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f73c:	f7f1 fa14 	bl	b68 <Sys_GetCoreID>
    f740:	4603      	mov	r3, r0
    f742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    f744:	4a10      	ldr	r2, [pc, #64]	; (f788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f746:	9b01      	ldr	r3, [sp, #4]
    f748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f74c:	2b00      	cmp	r3, #0
    f74e:	d10d      	bne.n	f76c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f750:	f7f1 f93a 	bl	9c8 <Port_schm_read_msr>
    f754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f756:	9b00      	ldr	r3, [sp, #0]
    f758:	f003 0301 	and.w	r3, r3, #1
    f75c:	2b00      	cmp	r3, #0
    f75e:	d100      	bne.n	f762 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    f762:	490a      	ldr	r1, [pc, #40]	; (f78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    f764:	9b01      	ldr	r3, [sp, #4]
    f766:	9a00      	ldr	r2, [sp, #0]
    f768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    f76c:	4a06      	ldr	r2, [pc, #24]	; (f788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f76e:	9b01      	ldr	r3, [sp, #4]
    f770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f774:	1c5a      	adds	r2, r3, #1
    f776:	4904      	ldr	r1, [pc, #16]	; (f788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f778:	9b01      	ldr	r3, [sp, #4]
    f77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f77e:	bf00      	nop
    f780:	b003      	add	sp, #12
    f782:	f85d fb04 	ldr.w	pc, [sp], #4
    f786:	bf00      	nop
    f788:	1fff916c 	.word	0x1fff916c
    f78c:	1fff9168 	.word	0x1fff9168

0000f790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f790:	b500      	push	{lr}
    f792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f794:	f7f1 f9e8 	bl	b68 <Sys_GetCoreID>
    f798:	4603      	mov	r3, r0
    f79a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    f79c:	4a0d      	ldr	r2, [pc, #52]	; (f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f79e:	9b01      	ldr	r3, [sp, #4]
    f7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7a4:	1e5a      	subs	r2, r3, #1
    f7a6:	490b      	ldr	r1, [pc, #44]	; (f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f7a8:	9b01      	ldr	r3, [sp, #4]
    f7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    f7ae:	4a0a      	ldr	r2, [pc, #40]	; (f7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    f7b0:	9b01      	ldr	r3, [sp, #4]
    f7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7b6:	f003 0301 	and.w	r3, r3, #1
    f7ba:	2b00      	cmp	r3, #0
    f7bc:	d106      	bne.n	f7cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    f7be:	4a05      	ldr	r2, [pc, #20]	; (f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f7c0:	9b01      	ldr	r3, [sp, #4]
    f7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	d100      	bne.n	f7cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7cc:	bf00      	nop
    f7ce:	b003      	add	sp, #12
    f7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f7d4:	1fff916c 	.word	0x1fff916c
    f7d8:	1fff9168 	.word	0x1fff9168

0000f7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f7dc:	b500      	push	{lr}
    f7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7e0:	f7f1 f9c2 	bl	b68 <Sys_GetCoreID>
    f7e4:	4603      	mov	r3, r0
    f7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    f7e8:	4a10      	ldr	r2, [pc, #64]	; (f82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f7ea:	9b01      	ldr	r3, [sp, #4]
    f7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f0:	2b00      	cmp	r3, #0
    f7f2:	d10d      	bne.n	f810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7f4:	f7f1 f8e8 	bl	9c8 <Port_schm_read_msr>
    f7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7fa:	9b00      	ldr	r3, [sp, #0]
    f7fc:	f003 0301 	and.w	r3, r3, #1
    f800:	2b00      	cmp	r3, #0
    f802:	d100      	bne.n	f806 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    f806:	490a      	ldr	r1, [pc, #40]	; (f830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    f808:	9b01      	ldr	r3, [sp, #4]
    f80a:	9a00      	ldr	r2, [sp, #0]
    f80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    f810:	4a06      	ldr	r2, [pc, #24]	; (f82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f812:	9b01      	ldr	r3, [sp, #4]
    f814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f818:	1c5a      	adds	r2, r3, #1
    f81a:	4904      	ldr	r1, [pc, #16]	; (f82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f81c:	9b01      	ldr	r3, [sp, #4]
    f81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f822:	bf00      	nop
    f824:	b003      	add	sp, #12
    f826:	f85d fb04 	ldr.w	pc, [sp], #4
    f82a:	bf00      	nop
    f82c:	1fff9174 	.word	0x1fff9174
    f830:	1fff9170 	.word	0x1fff9170

0000f834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f834:	b500      	push	{lr}
    f836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f838:	f7f1 f996 	bl	b68 <Sys_GetCoreID>
    f83c:	4603      	mov	r3, r0
    f83e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    f840:	4a0d      	ldr	r2, [pc, #52]	; (f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f842:	9b01      	ldr	r3, [sp, #4]
    f844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f848:	1e5a      	subs	r2, r3, #1
    f84a:	490b      	ldr	r1, [pc, #44]	; (f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f84c:	9b01      	ldr	r3, [sp, #4]
    f84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    f852:	4a0a      	ldr	r2, [pc, #40]	; (f87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    f854:	9b01      	ldr	r3, [sp, #4]
    f856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f85a:	f003 0301 	and.w	r3, r3, #1
    f85e:	2b00      	cmp	r3, #0
    f860:	d106      	bne.n	f870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    f862:	4a05      	ldr	r2, [pc, #20]	; (f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f86a:	2b00      	cmp	r3, #0
    f86c:	d100      	bne.n	f870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f870:	bf00      	nop
    f872:	b003      	add	sp, #12
    f874:	f85d fb04 	ldr.w	pc, [sp], #4
    f878:	1fff9174 	.word	0x1fff9174
    f87c:	1fff9170 	.word	0x1fff9170

0000f880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f880:	b500      	push	{lr}
    f882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f884:	f7f1 f970 	bl	b68 <Sys_GetCoreID>
    f888:	4603      	mov	r3, r0
    f88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    f88c:	4a10      	ldr	r2, [pc, #64]	; (f8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f88e:	9b01      	ldr	r3, [sp, #4]
    f890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f894:	2b00      	cmp	r3, #0
    f896:	d10d      	bne.n	f8b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f898:	f7f1 f896 	bl	9c8 <Port_schm_read_msr>
    f89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f89e:	9b00      	ldr	r3, [sp, #0]
    f8a0:	f003 0301 	and.w	r3, r3, #1
    f8a4:	2b00      	cmp	r3, #0
    f8a6:	d100      	bne.n	f8aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    f8aa:	490a      	ldr	r1, [pc, #40]	; (f8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    f8ac:	9b01      	ldr	r3, [sp, #4]
    f8ae:	9a00      	ldr	r2, [sp, #0]
    f8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    f8b4:	4a06      	ldr	r2, [pc, #24]	; (f8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f8b6:	9b01      	ldr	r3, [sp, #4]
    f8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8bc:	1c5a      	adds	r2, r3, #1
    f8be:	4904      	ldr	r1, [pc, #16]	; (f8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f8c0:	9b01      	ldr	r3, [sp, #4]
    f8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8c6:	bf00      	nop
    f8c8:	b003      	add	sp, #12
    f8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f8ce:	bf00      	nop
    f8d0:	1fff917c 	.word	0x1fff917c
    f8d4:	1fff9178 	.word	0x1fff9178

0000f8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f8d8:	b500      	push	{lr}
    f8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8dc:	f7f1 f944 	bl	b68 <Sys_GetCoreID>
    f8e0:	4603      	mov	r3, r0
    f8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    f8e4:	4a0d      	ldr	r2, [pc, #52]	; (f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f8e6:	9b01      	ldr	r3, [sp, #4]
    f8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8ec:	1e5a      	subs	r2, r3, #1
    f8ee:	490b      	ldr	r1, [pc, #44]	; (f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f8f0:	9b01      	ldr	r3, [sp, #4]
    f8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    f8f6:	4a0a      	ldr	r2, [pc, #40]	; (f920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    f8f8:	9b01      	ldr	r3, [sp, #4]
    f8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8fe:	f003 0301 	and.w	r3, r3, #1
    f902:	2b00      	cmp	r3, #0
    f904:	d106      	bne.n	f914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    f906:	4a05      	ldr	r2, [pc, #20]	; (f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f908:	9b01      	ldr	r3, [sp, #4]
    f90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f90e:	2b00      	cmp	r3, #0
    f910:	d100      	bne.n	f914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f914:	bf00      	nop
    f916:	b003      	add	sp, #12
    f918:	f85d fb04 	ldr.w	pc, [sp], #4
    f91c:	1fff917c 	.word	0x1fff917c
    f920:	1fff9178 	.word	0x1fff9178

0000f924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f924:	b500      	push	{lr}
    f926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f928:	f7f1 f91e 	bl	b68 <Sys_GetCoreID>
    f92c:	4603      	mov	r3, r0
    f92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    f930:	4a10      	ldr	r2, [pc, #64]	; (f974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f932:	9b01      	ldr	r3, [sp, #4]
    f934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f938:	2b00      	cmp	r3, #0
    f93a:	d10d      	bne.n	f958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f93c:	f7f1 f844 	bl	9c8 <Port_schm_read_msr>
    f940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f942:	9b00      	ldr	r3, [sp, #0]
    f944:	f003 0301 	and.w	r3, r3, #1
    f948:	2b00      	cmp	r3, #0
    f94a:	d100      	bne.n	f94e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    f94e:	490a      	ldr	r1, [pc, #40]	; (f978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    f950:	9b01      	ldr	r3, [sp, #4]
    f952:	9a00      	ldr	r2, [sp, #0]
    f954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    f958:	4a06      	ldr	r2, [pc, #24]	; (f974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f95a:	9b01      	ldr	r3, [sp, #4]
    f95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f960:	1c5a      	adds	r2, r3, #1
    f962:	4904      	ldr	r1, [pc, #16]	; (f974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f964:	9b01      	ldr	r3, [sp, #4]
    f966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f96a:	bf00      	nop
    f96c:	b003      	add	sp, #12
    f96e:	f85d fb04 	ldr.w	pc, [sp], #4
    f972:	bf00      	nop
    f974:	1fff9184 	.word	0x1fff9184
    f978:	1fff9180 	.word	0x1fff9180

0000f97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f97c:	b500      	push	{lr}
    f97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f980:	f7f1 f8f2 	bl	b68 <Sys_GetCoreID>
    f984:	4603      	mov	r3, r0
    f986:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    f988:	4a0d      	ldr	r2, [pc, #52]	; (f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f98a:	9b01      	ldr	r3, [sp, #4]
    f98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f990:	1e5a      	subs	r2, r3, #1
    f992:	490b      	ldr	r1, [pc, #44]	; (f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f994:	9b01      	ldr	r3, [sp, #4]
    f996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    f99a:	4a0a      	ldr	r2, [pc, #40]	; (f9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    f99c:	9b01      	ldr	r3, [sp, #4]
    f99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a2:	f003 0301 	and.w	r3, r3, #1
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	d106      	bne.n	f9b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    f9aa:	4a05      	ldr	r2, [pc, #20]	; (f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f9ac:	9b01      	ldr	r3, [sp, #4]
    f9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d100      	bne.n	f9b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9b8:	bf00      	nop
    f9ba:	b003      	add	sp, #12
    f9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f9c0:	1fff9184 	.word	0x1fff9184
    f9c4:	1fff9180 	.word	0x1fff9180

0000f9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    f9c8:	b500      	push	{lr}
    f9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9cc:	f7f1 f8cc 	bl	b68 <Sys_GetCoreID>
    f9d0:	4603      	mov	r3, r0
    f9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    f9d4:	4a10      	ldr	r2, [pc, #64]	; (fa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f9d6:	9b01      	ldr	r3, [sp, #4]
    f9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9dc:	2b00      	cmp	r3, #0
    f9de:	d10d      	bne.n	f9fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9e0:	f7f0 fff2 	bl	9c8 <Port_schm_read_msr>
    f9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9e6:	9b00      	ldr	r3, [sp, #0]
    f9e8:	f003 0301 	and.w	r3, r3, #1
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d100      	bne.n	f9f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    f9f2:	490a      	ldr	r1, [pc, #40]	; (fa1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    f9f4:	9b01      	ldr	r3, [sp, #4]
    f9f6:	9a00      	ldr	r2, [sp, #0]
    f9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    f9fc:	4a06      	ldr	r2, [pc, #24]	; (fa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f9fe:	9b01      	ldr	r3, [sp, #4]
    fa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa04:	1c5a      	adds	r2, r3, #1
    fa06:	4904      	ldr	r1, [pc, #16]	; (fa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fa08:	9b01      	ldr	r3, [sp, #4]
    fa0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa0e:	bf00      	nop
    fa10:	b003      	add	sp, #12
    fa12:	f85d fb04 	ldr.w	pc, [sp], #4
    fa16:	bf00      	nop
    fa18:	1fff918c 	.word	0x1fff918c
    fa1c:	1fff9188 	.word	0x1fff9188

0000fa20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fa20:	b500      	push	{lr}
    fa22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa24:	f7f1 f8a0 	bl	b68 <Sys_GetCoreID>
    fa28:	4603      	mov	r3, r0
    fa2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    fa2c:	4a0d      	ldr	r2, [pc, #52]	; (fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fa2e:	9b01      	ldr	r3, [sp, #4]
    fa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa34:	1e5a      	subs	r2, r3, #1
    fa36:	490b      	ldr	r1, [pc, #44]	; (fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fa38:	9b01      	ldr	r3, [sp, #4]
    fa3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fa3e:	4a0a      	ldr	r2, [pc, #40]	; (fa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    fa40:	9b01      	ldr	r3, [sp, #4]
    fa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa46:	f003 0301 	and.w	r3, r3, #1
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d106      	bne.n	fa5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    fa4e:	4a05      	ldr	r2, [pc, #20]	; (fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fa50:	9b01      	ldr	r3, [sp, #4]
    fa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa56:	2b00      	cmp	r3, #0
    fa58:	d100      	bne.n	fa5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa5c:	bf00      	nop
    fa5e:	b003      	add	sp, #12
    fa60:	f85d fb04 	ldr.w	pc, [sp], #4
    fa64:	1fff918c 	.word	0x1fff918c
    fa68:	1fff9188 	.word	0x1fff9188

0000fa6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fa6c:	b500      	push	{lr}
    fa6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa70:	f7f1 f87a 	bl	b68 <Sys_GetCoreID>
    fa74:	4603      	mov	r3, r0
    fa76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    fa78:	4a10      	ldr	r2, [pc, #64]	; (fabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fa7a:	9b01      	ldr	r3, [sp, #4]
    fa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa80:	2b00      	cmp	r3, #0
    fa82:	d10d      	bne.n	faa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa84:	f7f0 ffa0 	bl	9c8 <Port_schm_read_msr>
    fa88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa8a:	9b00      	ldr	r3, [sp, #0]
    fa8c:	f003 0301 	and.w	r3, r3, #1
    fa90:	2b00      	cmp	r3, #0
    fa92:	d100      	bne.n	fa96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    fa96:	490a      	ldr	r1, [pc, #40]	; (fac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    fa98:	9b01      	ldr	r3, [sp, #4]
    fa9a:	9a00      	ldr	r2, [sp, #0]
    fa9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    faa0:	4a06      	ldr	r2, [pc, #24]	; (fabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    faa2:	9b01      	ldr	r3, [sp, #4]
    faa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faa8:	1c5a      	adds	r2, r3, #1
    faaa:	4904      	ldr	r1, [pc, #16]	; (fabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    faac:	9b01      	ldr	r3, [sp, #4]
    faae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fab2:	bf00      	nop
    fab4:	b003      	add	sp, #12
    fab6:	f85d fb04 	ldr.w	pc, [sp], #4
    faba:	bf00      	nop
    fabc:	1fff9194 	.word	0x1fff9194
    fac0:	1fff9190 	.word	0x1fff9190

0000fac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fac4:	b500      	push	{lr}
    fac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fac8:	f7f1 f84e 	bl	b68 <Sys_GetCoreID>
    facc:	4603      	mov	r3, r0
    face:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    fad0:	4a0d      	ldr	r2, [pc, #52]	; (fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fad2:	9b01      	ldr	r3, [sp, #4]
    fad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fad8:	1e5a      	subs	r2, r3, #1
    fada:	490b      	ldr	r1, [pc, #44]	; (fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fadc:	9b01      	ldr	r3, [sp, #4]
    fade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fae2:	4a0a      	ldr	r2, [pc, #40]	; (fb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    fae4:	9b01      	ldr	r3, [sp, #4]
    fae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faea:	f003 0301 	and.w	r3, r3, #1
    faee:	2b00      	cmp	r3, #0
    faf0:	d106      	bne.n	fb00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    faf2:	4a05      	ldr	r2, [pc, #20]	; (fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    faf4:	9b01      	ldr	r3, [sp, #4]
    faf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fafa:	2b00      	cmp	r3, #0
    fafc:	d100      	bne.n	fb00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb00:	bf00      	nop
    fb02:	b003      	add	sp, #12
    fb04:	f85d fb04 	ldr.w	pc, [sp], #4
    fb08:	1fff9194 	.word	0x1fff9194
    fb0c:	1fff9190 	.word	0x1fff9190

0000fb10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fb10:	b500      	push	{lr}
    fb12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb14:	f7f1 f828 	bl	b68 <Sys_GetCoreID>
    fb18:	4603      	mov	r3, r0
    fb1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    fb1c:	4a10      	ldr	r2, [pc, #64]	; (fb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fb1e:	9b01      	ldr	r3, [sp, #4]
    fb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb24:	2b00      	cmp	r3, #0
    fb26:	d10d      	bne.n	fb44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb28:	f7f0 ff4e 	bl	9c8 <Port_schm_read_msr>
    fb2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb2e:	9b00      	ldr	r3, [sp, #0]
    fb30:	f003 0301 	and.w	r3, r3, #1
    fb34:	2b00      	cmp	r3, #0
    fb36:	d100      	bne.n	fb3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    fb3a:	490a      	ldr	r1, [pc, #40]	; (fb64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    fb3c:	9b01      	ldr	r3, [sp, #4]
    fb3e:	9a00      	ldr	r2, [sp, #0]
    fb40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    fb44:	4a06      	ldr	r2, [pc, #24]	; (fb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fb46:	9b01      	ldr	r3, [sp, #4]
    fb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb4c:	1c5a      	adds	r2, r3, #1
    fb4e:	4904      	ldr	r1, [pc, #16]	; (fb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fb50:	9b01      	ldr	r3, [sp, #4]
    fb52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb56:	bf00      	nop
    fb58:	b003      	add	sp, #12
    fb5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fb5e:	bf00      	nop
    fb60:	1fff919c 	.word	0x1fff919c
    fb64:	1fff9198 	.word	0x1fff9198

0000fb68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fb68:	b500      	push	{lr}
    fb6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb6c:	f7f0 fffc 	bl	b68 <Sys_GetCoreID>
    fb70:	4603      	mov	r3, r0
    fb72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    fb74:	4a0d      	ldr	r2, [pc, #52]	; (fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fb76:	9b01      	ldr	r3, [sp, #4]
    fb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb7c:	1e5a      	subs	r2, r3, #1
    fb7e:	490b      	ldr	r1, [pc, #44]	; (fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fb80:	9b01      	ldr	r3, [sp, #4]
    fb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    fb86:	4a0a      	ldr	r2, [pc, #40]	; (fbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    fb88:	9b01      	ldr	r3, [sp, #4]
    fb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb8e:	f003 0301 	and.w	r3, r3, #1
    fb92:	2b00      	cmp	r3, #0
    fb94:	d106      	bne.n	fba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    fb96:	4a05      	ldr	r2, [pc, #20]	; (fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fb98:	9b01      	ldr	r3, [sp, #4]
    fb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb9e:	2b00      	cmp	r3, #0
    fba0:	d100      	bne.n	fba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fba4:	bf00      	nop
    fba6:	b003      	add	sp, #12
    fba8:	f85d fb04 	ldr.w	pc, [sp], #4
    fbac:	1fff919c 	.word	0x1fff919c
    fbb0:	1fff9198 	.word	0x1fff9198

0000fbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fbb4:	b500      	push	{lr}
    fbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbb8:	f7f0 ffd6 	bl	b68 <Sys_GetCoreID>
    fbbc:	4603      	mov	r3, r0
    fbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    fbc0:	4a10      	ldr	r2, [pc, #64]	; (fc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fbc2:	9b01      	ldr	r3, [sp, #4]
    fbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbc8:	2b00      	cmp	r3, #0
    fbca:	d10d      	bne.n	fbe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbcc:	f7f0 fefc 	bl	9c8 <Port_schm_read_msr>
    fbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbd2:	9b00      	ldr	r3, [sp, #0]
    fbd4:	f003 0301 	and.w	r3, r3, #1
    fbd8:	2b00      	cmp	r3, #0
    fbda:	d100      	bne.n	fbde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fbde:	490a      	ldr	r1, [pc, #40]	; (fc08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    fbe0:	9b01      	ldr	r3, [sp, #4]
    fbe2:	9a00      	ldr	r2, [sp, #0]
    fbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    fbe8:	4a06      	ldr	r2, [pc, #24]	; (fc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fbea:	9b01      	ldr	r3, [sp, #4]
    fbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbf0:	1c5a      	adds	r2, r3, #1
    fbf2:	4904      	ldr	r1, [pc, #16]	; (fc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fbf4:	9b01      	ldr	r3, [sp, #4]
    fbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbfa:	bf00      	nop
    fbfc:	b003      	add	sp, #12
    fbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    fc02:	bf00      	nop
    fc04:	1fff91a4 	.word	0x1fff91a4
    fc08:	1fff91a0 	.word	0x1fff91a0

0000fc0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fc0c:	b500      	push	{lr}
    fc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc10:	f7f0 ffaa 	bl	b68 <Sys_GetCoreID>
    fc14:	4603      	mov	r3, r0
    fc16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    fc18:	4a0d      	ldr	r2, [pc, #52]	; (fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fc1a:	9b01      	ldr	r3, [sp, #4]
    fc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc20:	1e5a      	subs	r2, r3, #1
    fc22:	490b      	ldr	r1, [pc, #44]	; (fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fc24:	9b01      	ldr	r3, [sp, #4]
    fc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    fc2a:	4a0a      	ldr	r2, [pc, #40]	; (fc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    fc2c:	9b01      	ldr	r3, [sp, #4]
    fc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc32:	f003 0301 	and.w	r3, r3, #1
    fc36:	2b00      	cmp	r3, #0
    fc38:	d106      	bne.n	fc48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    fc3a:	4a05      	ldr	r2, [pc, #20]	; (fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fc3c:	9b01      	ldr	r3, [sp, #4]
    fc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc42:	2b00      	cmp	r3, #0
    fc44:	d100      	bne.n	fc48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc48:	bf00      	nop
    fc4a:	b003      	add	sp, #12
    fc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    fc50:	1fff91a4 	.word	0x1fff91a4
    fc54:	1fff91a0 	.word	0x1fff91a0

0000fc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fc58:	b500      	push	{lr}
    fc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc5c:	f7f0 ff84 	bl	b68 <Sys_GetCoreID>
    fc60:	4603      	mov	r3, r0
    fc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    fc64:	4a10      	ldr	r2, [pc, #64]	; (fca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fc66:	9b01      	ldr	r3, [sp, #4]
    fc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d10d      	bne.n	fc8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc70:	f7f0 feaa 	bl	9c8 <Port_schm_read_msr>
    fc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc76:	9b00      	ldr	r3, [sp, #0]
    fc78:	f003 0301 	and.w	r3, r3, #1
    fc7c:	2b00      	cmp	r3, #0
    fc7e:	d100      	bne.n	fc82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    fc82:	490a      	ldr	r1, [pc, #40]	; (fcac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    fc84:	9b01      	ldr	r3, [sp, #4]
    fc86:	9a00      	ldr	r2, [sp, #0]
    fc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    fc8c:	4a06      	ldr	r2, [pc, #24]	; (fca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fc8e:	9b01      	ldr	r3, [sp, #4]
    fc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc94:	1c5a      	adds	r2, r3, #1
    fc96:	4904      	ldr	r1, [pc, #16]	; (fca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fc98:	9b01      	ldr	r3, [sp, #4]
    fc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc9e:	bf00      	nop
    fca0:	b003      	add	sp, #12
    fca2:	f85d fb04 	ldr.w	pc, [sp], #4
    fca6:	bf00      	nop
    fca8:	1fff91ac 	.word	0x1fff91ac
    fcac:	1fff91a8 	.word	0x1fff91a8

0000fcb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fcb0:	b500      	push	{lr}
    fcb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcb4:	f7f0 ff58 	bl	b68 <Sys_GetCoreID>
    fcb8:	4603      	mov	r3, r0
    fcba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    fcbc:	4a0d      	ldr	r2, [pc, #52]	; (fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fcbe:	9b01      	ldr	r3, [sp, #4]
    fcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcc4:	1e5a      	subs	r2, r3, #1
    fcc6:	490b      	ldr	r1, [pc, #44]	; (fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fcc8:	9b01      	ldr	r3, [sp, #4]
    fcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    fcce:	4a0a      	ldr	r2, [pc, #40]	; (fcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    fcd0:	9b01      	ldr	r3, [sp, #4]
    fcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcd6:	f003 0301 	and.w	r3, r3, #1
    fcda:	2b00      	cmp	r3, #0
    fcdc:	d106      	bne.n	fcec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    fcde:	4a05      	ldr	r2, [pc, #20]	; (fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fce0:	9b01      	ldr	r3, [sp, #4]
    fce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fce6:	2b00      	cmp	r3, #0
    fce8:	d100      	bne.n	fcec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcec:	bf00      	nop
    fcee:	b003      	add	sp, #12
    fcf0:	f85d fb04 	ldr.w	pc, [sp], #4
    fcf4:	1fff91ac 	.word	0x1fff91ac
    fcf8:	1fff91a8 	.word	0x1fff91a8

0000fcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fcfc:	b500      	push	{lr}
    fcfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd00:	f7f0 ff32 	bl	b68 <Sys_GetCoreID>
    fd04:	4603      	mov	r3, r0
    fd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    fd08:	4a10      	ldr	r2, [pc, #64]	; (fd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fd0a:	9b01      	ldr	r3, [sp, #4]
    fd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd10:	2b00      	cmp	r3, #0
    fd12:	d10d      	bne.n	fd30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd14:	f7f0 fe58 	bl	9c8 <Port_schm_read_msr>
    fd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd1a:	9b00      	ldr	r3, [sp, #0]
    fd1c:	f003 0301 	and.w	r3, r3, #1
    fd20:	2b00      	cmp	r3, #0
    fd22:	d100      	bne.n	fd26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    fd26:	490a      	ldr	r1, [pc, #40]	; (fd50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    fd28:	9b01      	ldr	r3, [sp, #4]
    fd2a:	9a00      	ldr	r2, [sp, #0]
    fd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    fd30:	4a06      	ldr	r2, [pc, #24]	; (fd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fd32:	9b01      	ldr	r3, [sp, #4]
    fd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd38:	1c5a      	adds	r2, r3, #1
    fd3a:	4904      	ldr	r1, [pc, #16]	; (fd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fd3c:	9b01      	ldr	r3, [sp, #4]
    fd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd42:	bf00      	nop
    fd44:	b003      	add	sp, #12
    fd46:	f85d fb04 	ldr.w	pc, [sp], #4
    fd4a:	bf00      	nop
    fd4c:	1fff91b4 	.word	0x1fff91b4
    fd50:	1fff91b0 	.word	0x1fff91b0

0000fd54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fd54:	b500      	push	{lr}
    fd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd58:	f7f0 ff06 	bl	b68 <Sys_GetCoreID>
    fd5c:	4603      	mov	r3, r0
    fd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    fd60:	4a0d      	ldr	r2, [pc, #52]	; (fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fd62:	9b01      	ldr	r3, [sp, #4]
    fd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd68:	1e5a      	subs	r2, r3, #1
    fd6a:	490b      	ldr	r1, [pc, #44]	; (fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fd6c:	9b01      	ldr	r3, [sp, #4]
    fd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    fd72:	4a0a      	ldr	r2, [pc, #40]	; (fd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd7a:	f003 0301 	and.w	r3, r3, #1
    fd7e:	2b00      	cmp	r3, #0
    fd80:	d106      	bne.n	fd90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    fd82:	4a05      	ldr	r2, [pc, #20]	; (fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fd84:	9b01      	ldr	r3, [sp, #4]
    fd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d100      	bne.n	fd90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd90:	bf00      	nop
    fd92:	b003      	add	sp, #12
    fd94:	f85d fb04 	ldr.w	pc, [sp], #4
    fd98:	1fff91b4 	.word	0x1fff91b4
    fd9c:	1fff91b0 	.word	0x1fff91b0

0000fda0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fda0:	b500      	push	{lr}
    fda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fda4:	f7f0 fee0 	bl	b68 <Sys_GetCoreID>
    fda8:	4603      	mov	r3, r0
    fdaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    fdac:	4a10      	ldr	r2, [pc, #64]	; (fdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fdae:	9b01      	ldr	r3, [sp, #4]
    fdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb4:	2b00      	cmp	r3, #0
    fdb6:	d10d      	bne.n	fdd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdb8:	f7f0 fe06 	bl	9c8 <Port_schm_read_msr>
    fdbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdbe:	9b00      	ldr	r3, [sp, #0]
    fdc0:	f003 0301 	and.w	r3, r3, #1
    fdc4:	2b00      	cmp	r3, #0
    fdc6:	d100      	bne.n	fdca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    fdca:	490a      	ldr	r1, [pc, #40]	; (fdf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    fdcc:	9b01      	ldr	r3, [sp, #4]
    fdce:	9a00      	ldr	r2, [sp, #0]
    fdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    fdd4:	4a06      	ldr	r2, [pc, #24]	; (fdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fdd6:	9b01      	ldr	r3, [sp, #4]
    fdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fddc:	1c5a      	adds	r2, r3, #1
    fdde:	4904      	ldr	r1, [pc, #16]	; (fdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fde0:	9b01      	ldr	r3, [sp, #4]
    fde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fde6:	bf00      	nop
    fde8:	b003      	add	sp, #12
    fdea:	f85d fb04 	ldr.w	pc, [sp], #4
    fdee:	bf00      	nop
    fdf0:	1fff91bc 	.word	0x1fff91bc
    fdf4:	1fff91b8 	.word	0x1fff91b8

0000fdf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fdf8:	b500      	push	{lr}
    fdfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdfc:	f7f0 feb4 	bl	b68 <Sys_GetCoreID>
    fe00:	4603      	mov	r3, r0
    fe02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    fe04:	4a0d      	ldr	r2, [pc, #52]	; (fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    fe06:	9b01      	ldr	r3, [sp, #4]
    fe08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe0c:	1e5a      	subs	r2, r3, #1
    fe0e:	490b      	ldr	r1, [pc, #44]	; (fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    fe10:	9b01      	ldr	r3, [sp, #4]
    fe12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    fe16:	4a0a      	ldr	r2, [pc, #40]	; (fe40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    fe18:	9b01      	ldr	r3, [sp, #4]
    fe1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe1e:	f003 0301 	and.w	r3, r3, #1
    fe22:	2b00      	cmp	r3, #0
    fe24:	d106      	bne.n	fe34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    fe26:	4a05      	ldr	r2, [pc, #20]	; (fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d100      	bne.n	fe34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe34:	bf00      	nop
    fe36:	b003      	add	sp, #12
    fe38:	f85d fb04 	ldr.w	pc, [sp], #4
    fe3c:	1fff91bc 	.word	0x1fff91bc
    fe40:	1fff91b8 	.word	0x1fff91b8

0000fe44 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    fe44:	bf00      	nop
    fe46:	4770      	bx	lr

0000fe48 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    fe48:	b510      	push	{r4, lr}
    fe4a:	b084      	sub	sp, #16
    fe4c:	4604      	mov	r4, r0
    fe4e:	4608      	mov	r0, r1
    fe50:	4611      	mov	r1, r2
    fe52:	461a      	mov	r2, r3
    fe54:	4623      	mov	r3, r4
    fe56:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe5a:	4603      	mov	r3, r0
    fe5c:	f88d 3005 	strb.w	r3, [sp, #5]
    fe60:	460b      	mov	r3, r1
    fe62:	f88d 3004 	strb.w	r3, [sp, #4]
    fe66:	4613      	mov	r3, r2
    fe68:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe6c:	f7f0 fe7c 	bl	b68 <Sys_GetCoreID>
    fe70:	4603      	mov	r3, r0
    fe72:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    fe74:	490d      	ldr	r1, [pc, #52]	; (feac <Det_ReportError+0x64>)
    fe76:	9b03      	ldr	r3, [sp, #12]
    fe78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    fe7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    fe80:	4a0b      	ldr	r2, [pc, #44]	; (feb0 <Det_ReportError+0x68>)
    fe82:	9b03      	ldr	r3, [sp, #12]
    fe84:	4413      	add	r3, r2
    fe86:	f89d 2005 	ldrb.w	r2, [sp, #5]
    fe8a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    fe8c:	4a09      	ldr	r2, [pc, #36]	; (feb4 <Det_ReportError+0x6c>)
    fe8e:	9b03      	ldr	r3, [sp, #12]
    fe90:	4413      	add	r3, r2
    fe92:	f89d 2004 	ldrb.w	r2, [sp, #4]
    fe96:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    fe98:	4a07      	ldr	r2, [pc, #28]	; (feb8 <Det_ReportError+0x70>)
    fe9a:	9b03      	ldr	r3, [sp, #12]
    fe9c:	4413      	add	r3, r2
    fe9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    fea2:	701a      	strb	r2, [r3, #0]

    return E_OK;
    fea4:	2300      	movs	r3, #0
}
    fea6:	4618      	mov	r0, r3
    fea8:	b004      	add	sp, #16
    feaa:	bd10      	pop	{r4, pc}
    feac:	1fff91e8 	.word	0x1fff91e8
    feb0:	1fff91c0 	.word	0x1fff91c0
    feb4:	1fff91c4 	.word	0x1fff91c4
    feb8:	1fff91c8 	.word	0x1fff91c8

0000febc <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    febc:	b510      	push	{r4, lr}
    febe:	b084      	sub	sp, #16
    fec0:	4604      	mov	r4, r0
    fec2:	4608      	mov	r0, r1
    fec4:	4611      	mov	r1, r2
    fec6:	461a      	mov	r2, r3
    fec8:	4623      	mov	r3, r4
    feca:	f8ad 3006 	strh.w	r3, [sp, #6]
    fece:	4603      	mov	r3, r0
    fed0:	f88d 3005 	strb.w	r3, [sp, #5]
    fed4:	460b      	mov	r3, r1
    fed6:	f88d 3004 	strb.w	r3, [sp, #4]
    feda:	4613      	mov	r3, r2
    fedc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fee0:	f7f0 fe42 	bl	b68 <Sys_GetCoreID>
    fee4:	4603      	mov	r3, r0
    fee6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    fee8:	490d      	ldr	r1, [pc, #52]	; (ff20 <Det_ReportRuntimeError+0x64>)
    feea:	9b03      	ldr	r3, [sp, #12]
    feec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    fef0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    fef4:	4a0b      	ldr	r2, [pc, #44]	; (ff24 <Det_ReportRuntimeError+0x68>)
    fef6:	9b03      	ldr	r3, [sp, #12]
    fef8:	4413      	add	r3, r2
    fefa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    fefe:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ff00:	4a09      	ldr	r2, [pc, #36]	; (ff28 <Det_ReportRuntimeError+0x6c>)
    ff02:	9b03      	ldr	r3, [sp, #12]
    ff04:	4413      	add	r3, r2
    ff06:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ff0a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ff0c:	4a07      	ldr	r2, [pc, #28]	; (ff2c <Det_ReportRuntimeError+0x70>)
    ff0e:	9b03      	ldr	r3, [sp, #12]
    ff10:	4413      	add	r3, r2
    ff12:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ff16:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ff18:	2300      	movs	r3, #0
}
    ff1a:	4618      	mov	r0, r3
    ff1c:	b004      	add	sp, #16
    ff1e:	bd10      	pop	{r4, pc}
    ff20:	1fff91ec 	.word	0x1fff91ec
    ff24:	1fff91cc 	.word	0x1fff91cc
    ff28:	1fff91d0 	.word	0x1fff91d0
    ff2c:	1fff91d4 	.word	0x1fff91d4

0000ff30 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ff30:	b510      	push	{r4, lr}
    ff32:	b084      	sub	sp, #16
    ff34:	4604      	mov	r4, r0
    ff36:	4608      	mov	r0, r1
    ff38:	4611      	mov	r1, r2
    ff3a:	461a      	mov	r2, r3
    ff3c:	4623      	mov	r3, r4
    ff3e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ff42:	4603      	mov	r3, r0
    ff44:	f88d 3005 	strb.w	r3, [sp, #5]
    ff48:	460b      	mov	r3, r1
    ff4a:	f88d 3004 	strb.w	r3, [sp, #4]
    ff4e:	4613      	mov	r3, r2
    ff50:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff54:	f7f0 fe08 	bl	b68 <Sys_GetCoreID>
    ff58:	4603      	mov	r3, r0
    ff5a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    ff5c:	490d      	ldr	r1, [pc, #52]	; (ff94 <Det_ReportTransientFault+0x64>)
    ff5e:	9b03      	ldr	r3, [sp, #12]
    ff60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ff64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    ff68:	4a0b      	ldr	r2, [pc, #44]	; (ff98 <Det_ReportTransientFault+0x68>)
    ff6a:	9b03      	ldr	r3, [sp, #12]
    ff6c:	4413      	add	r3, r2
    ff6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ff72:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    ff74:	4a09      	ldr	r2, [pc, #36]	; (ff9c <Det_ReportTransientFault+0x6c>)
    ff76:	9b03      	ldr	r3, [sp, #12]
    ff78:	4413      	add	r3, r2
    ff7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ff7e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    ff80:	4a07      	ldr	r2, [pc, #28]	; (ffa0 <Det_ReportTransientFault+0x70>)
    ff82:	9b03      	ldr	r3, [sp, #12]
    ff84:	4413      	add	r3, r2
    ff86:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ff8a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ff8c:	2300      	movs	r3, #0
}
    ff8e:	4618      	mov	r0, r3
    ff90:	b004      	add	sp, #16
    ff92:	bd10      	pop	{r4, pc}
    ff94:	1fff91e4 	.word	0x1fff91e4
    ff98:	1fff91d8 	.word	0x1fff91d8
    ff9c:	1fff91dc 	.word	0x1fff91dc
    ffa0:	1fff91e0 	.word	0x1fff91e0

0000ffa4 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    ffa4:	bf00      	nop
    ffa6:	4770      	bx	lr

0000ffa8 <Fls_ACEraseRomEnd>:
    ffa8:	31434441 	.word	0x31434441
    ffac:	6c617620 	.word	0x6c617620
    ffb0:	203a6575 	.word	0x203a6575
    ffb4:	202c6425 	.word	0x202c6425
    ffb8:	32434441 	.word	0x32434441
    ffbc:	6c617620 	.word	0x6c617620
    ffc0:	203a6575 	.word	0x203a6575
    ffc4:	000a6425 	.word	0x000a6425
    ffc8:	6d726554 	.word	0x6d726554
    ffcc:	6c616e69 	.word	0x6c616e69
    ffd0:	00000000 	.word	0x00000000
    ffd4:	4c554e28 	.word	0x4c554e28
    ffd8:	0000294c 	.word	0x0000294c

0000ffdc <Clock_Ip_au8DividerCallbackIndex>:
    ffdc:	0e0d0c00 06030201 0a070409 000b0805     ................

0000ffec <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000fffc <Clock_Ip_au8XoscCallbackIndex>:
    fffc:	00000100 00000000 00000000 00000000     ................

0001000c <Clock_Ip_au8IrcoscCallbackIndex>:
   1000c:	03020100 00000004 00000000 00000000     ................

0001001c <Clock_Ip_au8GateCallbackIndex>:
   1001c:	06010200 01040301 00000500 00000000     ................

0001002c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0001003c <Clock_Ip_au8PllCallbackIndex>:
   1003c:	00000100 00000000 00000000 00000000     ................

0001004c <Clock_Ip_au8SelectorCallbackIndex>:
   1004c:	0a090800 03020109 07060504 00000000     ................

0001005c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0001006c <Clock_Ip_au8CmuCallbackIndex>:
	...

0001007c <Clock_Ip_au8ClockFeatures>:
	...
   1008c:	01000000 00000000 00000000 00000002     ................
   1009c:	00000000 00000300 00000000 00040000     ................
   100ac:	00000000 05000000 00000000 00000000     ................
   100bc:	00000006 00000000 00000100 00000000     ................
   100cc:	00010000 00000000 04000000 00000000     ................
   100dc:	00000000 00000005 00000001 00000401     ................
   100ec:	00000200 00050100 00030000 04020000     ................
   100fc:	04000000 02000000 00000005 00000005     ................
   1010c:	00000403 00000600 00050300 00070000     ................
   1011c:	05000000 00000000 00000000 00000006     ................
	...
   1015c:	00050000 00000000 06000000 00000100     ................
   1016c:	00000000 00030007 00000000 00000000     ................
   1017c:	00000000 00060000 00000000 07000000     ................
   1018c:	00000100 00000000 00030008 00000000     ................
	...
   101a4:	00090000 00000000 0a000000 00000100     ................
   101b4:	00000000 0003000b 00000000 00000000     ................
   101c4:	00000000 000c0000 00000000 0d000000     ................
   101d4:	00000100 00000000 0003000e 00000000     ................
   101e4:	00000800 00000000 00090000 00000000     ................
   101f4:	0a000000 00000000 00000000 0000000b     ................
   10204:	00000000 00000b01 00000000 000b0200     ................
   10214:	00000000 0b030000 00000000 00000000     ................
	...
   1022c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   1023c:	01000000 00000000 00000000 00000007     ................
   1024c:	00007300 00000700 00320000 00090000     .s........2.....
   1025c:	02000000 07000000 00000000 00000021     ............!...
   1026c:	00000009 00000400 00000900 00030000     ................
   1027c:	00070000 61000000 07000000 00000000     .......a........
   1028c:	00000024 00000007 00002500 00000700     $........%......
   1029c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   102ac:	00000000 00000020 38000004 00003800     .... ......8.8..
   102bc:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   102cc:	04000000 00260000 00000026 66000004     ......&.&......f
   102dc:	00006600 00000400 00370037 00040000     .f......7.7.....
   102ec:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   102fc:	2e000004 00002e00 00000200 00404040     ............@@@.
   1030c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   1031c:	0000006b 6c000004 00006c00 00000900     k......l.l......
   1032c:	00010000 00090000 00000000 07000000     ................
   1033c:	00000000 00000036 00000007 00003100     ....6........1..
   1034c:	00000700 00490000 00070000 4a000000     ......I........J
   1035c:	07000000 00000000 0000004b 00000007     ........K.......
   1036c:	00004c00 00000700 004d0000 00070000     .L........M.....
   1037c:	3d000000 03000000 00000000 00000000     ...=............

0001038c <Clock_Ip_au16SelectorEntryHardwareValue>:
   1038c:	01010a03 01010001 04040002 02000603     ................
   1039c:	00010810 02020100 00000000 00000007     ................
   103ac:	00000009 00000000 00000c0e 00000000     ................
	...

000103e4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   103e4:	00020000 00000300 00000601 00000000     ................
	...

00010414 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   10414:	00000700 00000000 02020000 01010303     ................
   10424:	03020606 00000000 00000000 00000000     ................
	...

00010444 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10444:	00000001 00000000 02020000 01010303     ................
   10454:	03020606 00000000 00000000 00000000     ................
	...

00010474 <Clock_Ip_au8DividerValueHardwareValue>:
   10474:	00020100 00000003 00000004 00000000     ................
   10484:	00000005 00000000 00000000 00000000     ................
   10494:	00000006 00000000 00000000 00000000     ................
	...
   104b4:	00000007                                ....

000104b8 <Clock_Ip_apxScgPeriphAsyncDivs>:
   104b8:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000104c8 <Clock_Ip_aeSourceTypeClockName>:
   104c8:	00000000 00000001 00000001 00000001     ................
   104d8:	00000001 00000001 00000001 00000001     ................
   104e8:	00000002 00000003 00000001 00000001     ................
   104f8:	00000001 00000001 00000002 00000002     ................
   10508:	00000003 00000003 00000001 00000001     ................
   10518:	00000004 00000004 00000004 00000004     ................
	...

00010584 <Clock_Ip_aeHwPllName>:
   10584:	00000009                                ....

00010588 <Clock_Ip_aeHwDfsName>:
   10588:	00000057                                W...

0001058c <Clock_Ip_axDividerCallbacks>:
   1058c:	00002ba9 00002bb3 00002bcd 00002be7     .+...+...+...+..
   1059c:	00002c01 00002c1b 00002c35 00002c4f     .,...,..5,..O,..
   105ac:	00002c69 00002c83 00002c9d 00002cb7     i,...,...,...,..
   105bc:	00002cd1 00002ceb 00002d05              .,...,...-..

000105c8 <Clock_Ip_axDividerTriggerCallbacks>:
   105c8:	00003079 00003079                       y0..y0..

000105d0 <Clock_Ip_axExtOscCallbacks>:
   105d0:	00003085 00003085 00003085 0000308f     .0...0...0...0..
   105e0:	00003085 00003099 000030b3 000030cd     .0...0...0...0..
   105f0:	00003151 00003165                       Q1..e1..

000105f8 <Clock_Ip_axFracDivCallbacks>:
   105f8:	00003325 00003325 0000332f              %3..%3../3..

00010604 <Clock_Ip_axGateCallbacks>:
   10604:	00003349 00003353 00003453 0000346d     I3..S3..S4..m4..
   10614:	00003403 0000341d 000033b3 000033cd     .4...4...3...3..
   10624:	00003363 0000337d 000034a3 000034bd     c3..}3...4...4..
   10634:	000034f3 0000350d                       .4...5..

0001063c <Clock_Ip_axIntOscCallbacks>:
   1063c:	000036b9 000036b9 000036c3 000036cd     .6...6...6...6..
   1064c:	000036e7 00003701 00003715 0000372f     .6...7...7../7..
   1065c:	00003749 0000375d 00003777 00003791     I7..]7..w7...7..
   1066c:	00003839 00003853 0000386d              98..S8..m8..

00010678 <Clock_Ip_axCmuCallbacks>:
   10678:	00003e09 00003e13 00003e1f 00003e09     .>...>...>...>..

00010688 <Clock_Ip_axPllCallbacks>:
   10688:	00003e29 00003e29 00003e33 00003e29     )>..)>..3>..)>..
   10698:	00003e3f 00003e49 00003e63 00003e7d     ?>..I>..c>..}>..
   106a8:	00003f21 00003f0d                       !?...?..

000106b0 <Clock_Ip_axPcfsCallbacks>:
   106b0:	0000407d                                }@..

000106b4 <Clock_Ip_axSelectorCallbacks>:
   106b4:	00004089 00004089 00004093 000040ad     .@...@...@...@..
   106c4:	00004089 000040c7 000040e1 000040fb     .@...@...@...@..
   106d4:	00004115 0000412f 00004149 00004163     .A../A..IA..cA..
   106e4:	0000417d 00004197 000041b1 000041cb     }A...A...A...A..
   106f4:	000041e5 000041ff 00004219 00004233     .A...A...B..3B..
   10704:	0000424d 00004267                       MB..gB..

0001070c <ClockSource>:
   1070c:	00000000 00000008 00000002 00000005     ................
	...
   10724:	00000009                                ....

00010728 <ResetReasonArray>:
   10728:	00000000 00000001 00000002 00000003     ................
   10738:	00000004 00000005 00000006 00000007     ................
   10748:	00000008 00000009 0000000a 0000000b     ................
   10758:	0000000c 0000000d 0000000e              ............

00010764 <Port_au32PortCiPortBaseAddr>:
   10764:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   10774:	4004d000                                ...@

00010778 <Port_au32PortCiGpioBaseAddr>:
   10778:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10788:	400ff100                                ...@

0001078c <Adc_Ip_apxBase>:
   1078c:	4003b000 40027000                       ...@.p.@

00010794 <Pdb_Adc_Ip_apxBase>:
   10794:	40036000 40031000                       .`.@...@

0001079c <AdcIpChansConfig_0>:
   1079c:	00000000 00000005 00000000 00000001     ................
   107ac:	00000008 00000000                       ........

000107b4 <AdcIpConfig_0>:
   107b4:	00000000 00000003 00000000 0000000c     ................
   107c4:	00000000 00000001 00000001 00000000     ................
	...
   107dc:	00ff0000 00000000 00000000 0001079c     ................
   107ec:	0000a1d9                                ....

000107f0 <AdcIpwCfg>:
   107f0:	000107b4 00000000 00010cb8 00000000     ................
   10800:	ff01ff00 00000001 00000002 0001ffff     ................
   10810:	0000ff00                                ....

00010814 <AdcIpwGroupConfig_0>:
	...
   1081c:	000000c8 00010000 00000000              ............

00010828 <Adc_Group0_Assignment_0>:
   10828:	00010000                                ....

0001082c <Adc_GroupsCfg>:
	...
   10848:	00000001 00010828 00080002 00000005     ....(...........
   10858:	00000000 00010814                       ........

00010860 <Adc_au16GroupIdToIndexMap>:
   10860:	00000000                                ....

00010864 <Adc_Partition_Assignment>:
   10864:	00000000                                ....

00010868 <Adc_Config>:
   10868:	000107f0 0001082c 00000001 00010860     ....,.......`...
   10878:	00000000 00010864 00000001              ....d.......

00010884 <Mcu_aClockConfigPB>:
	...
   1088c:	1c000101 04000010 01000029 00000005     ........).......
   1089c:	00000001 00000000 00000057 00000000     ........W.......
   108ac:	00000000 00000008 007a1200 00000001     ..........z.....
   108bc:	00000001 00000000 00000057 00000000     ........W.......
   108cc:	00000057 00000000 00000000 00000000     W...............
	...
   108ec:	00000019 00000005 0000001a 00000002     ................
   108fc:	0000001b 00000005 0000002a 00000005     ........*.......
   1090c:	00000028 0000000e 00000029 00000001     (.......).......
   1091c:	00000056 0000001c 00000032 0000002a     V.......2...*...
   1092c:	0000002b 00000014 0000002c 00000014     +.......,.......
   1093c:	0000002d 00000014 0000002e 00000014     -...............
   1094c:	0000003f 00000000 00000040 00000000     ?.......@.......
   1095c:	00000041 00000000 00000042 00000000     A.......B.......
   1096c:	00000031 00000000 00000045 00000000     1.......E.......
   1097c:	00000046 00000000 00000047 00000000     F.......G.......
   1098c:	00000044 00000000 00000030 0000000d     D.......0.......
   1099c:	0000003d 00000000 00000043 00000000     =.......C.......
   109ac:	00000049 00000000 0000004a 00000000     I.......J.......
   109bc:	0000004b 00000000 00000048 00000000     K.......H.......
   109cc:	0000000c 00000001 00000000 0000000d     ................
   109dc:	00000002 00000000 0000000e 00000001     ................
   109ec:	00000000 0000000f 00000001 00000000     ................
   109fc:	0000001d 00000001 00000000 0000001e     ................
   10a0c:	00000008 00000000 0000001f 00000001     ................
   10a1c:	00000000 00000021 00000001 00000000     ....!...........
   10a2c:	00000022 00000002 00000000 00000023     "...........#...
   10a3c:	00000001 00000000 00000025 00000003     ........%.......
   10a4c:	00000000 00000026 00000004 00000000     ....&...........
   10a5c:	00000027 00000002 00000000 00000032     '...........2...
   10a6c:	00000001 00000000 00000048 00000001     ........H.......
   10a7c:	00000001 00000056 00000001 00000001     ....V...........
   10a8c:	00000057 00000000 00000000 00000057     W...........W...
	...
   10aa4:	00000057 00000000 00000000 00000057     W...........W...
	...
   10abc:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   10ad8:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10ae8:	00000016 00007d00 00000017 00008000     .....}..........
   10af8:	00000012 00000001 00000013 00000001     ................
   10b08:	00000030 00000001 00000031 00000000     0.......1.......
   10b18:	00000032 00000000 00000033 00000000     2.......3.......
   10b28:	00000034 00000000 00000035 00000001     4.......5.......
   10b38:	00000036 00000000 00000037 00000001     6.......7.......
   10b48:	00000038 00000001 00000039 00000000     8.......9.......
   10b58:	0000003a 00000000 0000003b 00000000     :.......;.......
   10b68:	0000003c 00000000 0000003d 00000000     <.......=.......
   10b78:	0000003e 00000000 0000003f 00000000     >.......?.......
   10b88:	00000040 00000000 00000041 00000000     @.......A.......
   10b98:	00000042 00000000 00000043 00000000     B.......C.......
   10ba8:	00000044 00000000 00000045 00000000     D.......E.......
   10bb8:	00000046 00000000 00000047 00000000     F.......G.......
   10bc8:	00000048 00000000 00000049 00000000     H.......I.......
   10bd8:	0000004a 00000000 0000004b 00000000     J.......K.......
   10be8:	0000004c 00000001 0000004d 00000001     L.......M.......
   10bf8:	0000004e 00000001 0000004f 00000000     N.......O.......
   10c08:	00000050 00000001 00000051 00000001     P.......Q.......
   10c18:	00000052 00000001 00000053 00000001     R.......S.......
   10c28:	00000054 00000001 00000055 00000000     T.......U.......
   10c38:	00000056 00000001 00000057 00000000     V.......W.......
   10c48:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010c7c <aIrqConfiguration>:
   10c7c:	00000027 00000f01 00008b1d              '...........

00010c88 <intCtrlConfig>:
   10c88:	00000001 00010c7c                       ....|...

00010c90 <Mcu_Config>:
   10c90:	0000005a 00000000 00000001 00000001     Z...............
   10ca0:	00010e50 00010884 00010e5c              P.......\...

00010cac <OsIf_xPredefinedConfig>:
   10cac:	00000000 02dc6c00                       .....l..

00010cb4 <OsIf_apxPredefinedConfig>:
   10cb4:	00010cac                                ....

00010cb8 <PdbAdcIpConfig_0>:
	...
   10cc4:	0000000f ffff0000 00000000 00000000     ................
   10cd4:	00000000                                ....

00010cd8 <Platform_uConfiguration>:
   10cd8:	00010ce0                                ....

00010cdc <Platform_Config>:
   10cdc:	00010cd8                                ....

00010ce0 <ipwConfig>:
   10ce0:	00010c88 00000000                       ........

00010ce8 <g_pin_mux_InitConfigArr>:
   10ce8:	4004a000 00000000 00000001 00000002     ...@............
   10cf8:	00000000 00000002 00000000 00000000     ................
	...
   10d10:	4004a000 00000000 0000000d 00000002     ...@............
   10d20:	00000000 00000002 00000000 00000000     ................
	...

00010d38 <au8Port_PartitionList>:
   10d38:	00000001                                ....

00010d3c <au32Port_PinToPartitionMap>:
   10d3c:	00000001 00000001                       ........

00010d44 <Port_au16NoUnUsedPadsArrayDefault>:
   10d44:	00010000 00030002 00070006 00090008     ................
   10d54:	000c000b 000e000d 0010000f 00200011     .............. .
   10d64:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10d74:	002b002a 002e002c 0030002f 00400031     *.+.,.../.0.1.@.
   10d84:	00420041 00460043 00480047 004a0049     A.B.C.F.G.H.I.J.
   10d94:	004c004b 004e004d 0050004f 00600051     K.L.M.N.O.P.Q.`.
   10da4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   10db4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   10dc4:	00800071 00820081 00840083 00860085     q...............
   10dd4:	00880087 008a0089 008c008b 008e008d     ................
   10de4:	0090008f                                ....

00010de8 <Port_UnUsedPin>:
   10de8:	00000100 00000001 00000000              ............

00010df4 <Port_aPinConfigDefault>:
   10df4:	00000021 00000000 00000002 00000000     !...............
   10e04:	00010000 0000002d 00000000 00000002     ....-...........
   10e14:	00000000 00010000                       ........

00010e1c <Port_Config>:
   10e1c:	00520002 00010d44 00010de8 00010df4     ..R.D...........
	...
   10e34:	00010d3c 00010d38 00010ce8              <...8.......

00010e40 <Power_Ip_RCM_ConfigPB>:
	...

00010e48 <Power_Ip_PMC_ConfigPB>:
   10e48:	00000000                                ....

00010e4c <Power_Ip_SMC_ConfigPB>:
   10e4c:	00000000                                ....

00010e50 <Power_Ip_aModeConfigPB>:
	...

00010e5c <Power_Ip_HwIPsConfigPB>:
   10e5c:	00010e40 00010e48 00010e4c              @...H...L...

00010e68 <_aInitStr.0>:
   10e68:	00000000 54540000 45522052 53454747     ......TTR REGGES
   10e78:	00000000                                ....

00010e7c <_aV2C.0>:
   10e7c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00010e8c <__INIT_TABLE>:
   10e8c:	00000002 	.word	0x00000002
   10e90:	1fff8b10 	.word	0x1fff8b10
   10e94:	00010eb4 	.word	0x00010eb4
   10e98:	00010ec8 	.word	0x00010ec8
   10e9c:	1fff8800 	.word	0x1fff8800
   10ea0:	00000000 	.word	0x00000000
   10ea4:	00000310 	.word	0x00000310

00010ea8 <__ZERO_TABLE>:
   10ea8:	00000001 	.word	0x00000001
   10eac:	1fff8b30 	.word	0x1fff8b30
   10eb0:	1fff96b0 	.word	0x1fff96b0
