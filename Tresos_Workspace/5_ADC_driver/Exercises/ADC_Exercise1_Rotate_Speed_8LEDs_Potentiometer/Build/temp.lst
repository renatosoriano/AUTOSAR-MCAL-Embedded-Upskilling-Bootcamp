
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bdb 	.word	0x00000bdb
  10:	00000bdd 	.word	0x00000bdd
  14:	00000bdf 	.word	0x00000bdf
  18:	00000be1 	.word	0x00000be1
	...
  2c:	00000be3 	.word	0x00000be3
  30:	00000be5 	.word	0x00000be5
  34:	00000000 	.word	0x00000000
  38:	00000be7 	.word	0x00000be7
  3c:	00000be9 	.word	0x00000be9
  40:	00000beb 	.word	0x00000beb
  44:	00000beb 	.word	0x00000beb
  48:	00000beb 	.word	0x00000beb
  4c:	00000beb 	.word	0x00000beb
  50:	00000beb 	.word	0x00000beb
  54:	00000beb 	.word	0x00000beb
  58:	00000beb 	.word	0x00000beb
  5c:	00000beb 	.word	0x00000beb
  60:	00000beb 	.word	0x00000beb
  64:	00000beb 	.word	0x00000beb
  68:	00000beb 	.word	0x00000beb
  6c:	00000beb 	.word	0x00000beb
  70:	00000beb 	.word	0x00000beb
  74:	00000beb 	.word	0x00000beb
  78:	00000beb 	.word	0x00000beb
  7c:	00000beb 	.word	0x00000beb
  80:	00000beb 	.word	0x00000beb
  84:	00000beb 	.word	0x00000beb
  88:	00000beb 	.word	0x00000beb
  8c:	00000beb 	.word	0x00000beb
  90:	00000beb 	.word	0x00000beb
  94:	00000beb 	.word	0x00000beb
  98:	00000beb 	.word	0x00000beb
  9c:	00000beb 	.word	0x00000beb
  a0:	00000beb 	.word	0x00000beb
  a4:	00000beb 	.word	0x00000beb
  a8:	00000beb 	.word	0x00000beb
  ac:	00000beb 	.word	0x00000beb
  b0:	00000beb 	.word	0x00000beb
  b4:	00000beb 	.word	0x00000beb
  b8:	00000beb 	.word	0x00000beb
  bc:	00000beb 	.word	0x00000beb
  c0:	00000beb 	.word	0x00000beb
  c4:	00000beb 	.word	0x00000beb
  c8:	00000beb 	.word	0x00000beb
  cc:	00000beb 	.word	0x00000beb
  d0:	00000beb 	.word	0x00000beb
  d4:	00000beb 	.word	0x00000beb
  d8:	00000beb 	.word	0x00000beb
  dc:	00000beb 	.word	0x00000beb
  e0:	00000beb 	.word	0x00000beb
  e4:	00000beb 	.word	0x00000beb
  e8:	00000beb 	.word	0x00000beb
  ec:	00000beb 	.word	0x00000beb
  f0:	00000beb 	.word	0x00000beb
  f4:	00000beb 	.word	0x00000beb
  f8:	00000beb 	.word	0x00000beb
  fc:	00000beb 	.word	0x00000beb
 100:	00000beb 	.word	0x00000beb
 104:	00000beb 	.word	0x00000beb
 108:	00000beb 	.word	0x00000beb
 10c:	00000beb 	.word	0x00000beb
 110:	00000beb 	.word	0x00000beb
 114:	00000beb 	.word	0x00000beb
 118:	00000beb 	.word	0x00000beb
 11c:	00000beb 	.word	0x00000beb
 120:	00000beb 	.word	0x00000beb
 124:	00000beb 	.word	0x00000beb
 128:	00000beb 	.word	0x00000beb
 12c:	00000beb 	.word	0x00000beb
 130:	00000beb 	.word	0x00000beb
 134:	00000beb 	.word	0x00000beb
 138:	00000beb 	.word	0x00000beb
 13c:	00000beb 	.word	0x00000beb
 140:	00000beb 	.word	0x00000beb
 144:	00000beb 	.word	0x00000beb
 148:	00000beb 	.word	0x00000beb
 14c:	00000beb 	.word	0x00000beb
 150:	00000beb 	.word	0x00000beb
 154:	00000beb 	.word	0x00000beb
 158:	00000beb 	.word	0x00000beb
 15c:	00000beb 	.word	0x00000beb
 160:	00000beb 	.word	0x00000beb
 164:	00000beb 	.word	0x00000beb
 168:	00000beb 	.word	0x00000beb
 16c:	00000beb 	.word	0x00000beb
 170:	00000beb 	.word	0x00000beb
 174:	00000beb 	.word	0x00000beb
 178:	00000beb 	.word	0x00000beb
 17c:	00000beb 	.word	0x00000beb
 180:	00000beb 	.word	0x00000beb
 184:	00000beb 	.word	0x00000beb
 188:	00000beb 	.word	0x00000beb
 18c:	00000beb 	.word	0x00000beb
 190:	00000beb 	.word	0x00000beb
 194:	00000beb 	.word	0x00000beb
 198:	00000beb 	.word	0x00000beb
 19c:	00000beb 	.word	0x00000beb
 1a0:	00000beb 	.word	0x00000beb
 1a4:	00000beb 	.word	0x00000beb
 1a8:	00000beb 	.word	0x00000beb
 1ac:	00000beb 	.word	0x00000beb
 1b0:	00000beb 	.word	0x00000beb
 1b4:	00000beb 	.word	0x00000beb
 1b8:	00000beb 	.word	0x00000beb
 1bc:	00000beb 	.word	0x00000beb
 1c0:	00000beb 	.word	0x00000beb
 1c4:	00000beb 	.word	0x00000beb
 1c8:	00000beb 	.word	0x00000beb
 1cc:	00000beb 	.word	0x00000beb
 1d0:	00000beb 	.word	0x00000beb
 1d4:	00000beb 	.word	0x00000beb
 1d8:	00000beb 	.word	0x00000beb
 1dc:	00000beb 	.word	0x00000beb
 1e0:	00000beb 	.word	0x00000beb
 1e4:	00000beb 	.word	0x00000beb
 1e8:	00000beb 	.word	0x00000beb
 1ec:	00000beb 	.word	0x00000beb
 1f0:	00000beb 	.word	0x00000beb
 1f4:	00000beb 	.word	0x00000beb
 1f8:	00000beb 	.word	0x00000beb
 1fc:	00000beb 	.word	0x00000beb
 200:	00000beb 	.word	0x00000beb
 204:	00000beb 	.word	0x00000beb
 208:	00000beb 	.word	0x00000beb
 20c:	00000beb 	.word	0x00000beb
 210:	00000beb 	.word	0x00000beb
 214:	00000beb 	.word	0x00000beb
 218:	00000beb 	.word	0x00000beb
 21c:	00000beb 	.word	0x00000beb
 220:	00000beb 	.word	0x00000beb
 224:	00000beb 	.word	0x00000beb
 228:	00000beb 	.word	0x00000beb
 22c:	00000beb 	.word	0x00000beb
 230:	00000beb 	.word	0x00000beb
 234:	00000beb 	.word	0x00000beb
 238:	00000beb 	.word	0x00000beb
 23c:	00000beb 	.word	0x00000beb
 240:	00000beb 	.word	0x00000beb
 244:	00000beb 	.word	0x00000beb
 248:	00000beb 	.word	0x00000beb
 24c:	00000beb 	.word	0x00000beb
 250:	00000beb 	.word	0x00000beb
 254:	00000beb 	.word	0x00000beb
 258:	00000beb 	.word	0x00000beb
 25c:	00000beb 	.word	0x00000beb
 260:	00000beb 	.word	0x00000beb
 264:	00000beb 	.word	0x00000beb
 268:	00000beb 	.word	0x00000beb
 26c:	00000beb 	.word	0x00000beb
 270:	00000beb 	.word	0x00000beb
 274:	00000beb 	.word	0x00000beb
 278:	00000beb 	.word	0x00000beb
 27c:	00000beb 	.word	0x00000beb
 280:	00000beb 	.word	0x00000beb
 284:	00000beb 	.word	0x00000beb
 288:	00000beb 	.word	0x00000beb
 28c:	00000beb 	.word	0x00000beb
 290:	00000beb 	.word	0x00000beb
 294:	00000beb 	.word	0x00000beb
 298:	00000beb 	.word	0x00000beb
 29c:	00000beb 	.word	0x00000beb
 2a0:	00000beb 	.word	0x00000beb
 2a4:	00000beb 	.word	0x00000beb
 2a8:	00000beb 	.word	0x00000beb
 2ac:	00000beb 	.word	0x00000beb
 2b0:	00000beb 	.word	0x00000beb
 2b4:	00000beb 	.word	0x00000beb
 2b8:	00000beb 	.word	0x00000beb
 2bc:	00000beb 	.word	0x00000beb
 2c0:	00000beb 	.word	0x00000beb
 2c4:	00000beb 	.word	0x00000beb
 2c8:	00000beb 	.word	0x00000beb
 2cc:	00000beb 	.word	0x00000beb
 2d0:	00000beb 	.word	0x00000beb
 2d4:	00000beb 	.word	0x00000beb
 2d8:	00000beb 	.word	0x00000beb
 2dc:	00000beb 	.word	0x00000beb
 2e0:	00000beb 	.word	0x00000beb
 2e4:	00000beb 	.word	0x00000beb
 2e8:	00000beb 	.word	0x00000beb
 2ec:	00000beb 	.word	0x00000beb
 2f0:	00000beb 	.word	0x00000beb
 2f4:	00000beb 	.word	0x00000beb
 2f8:	00000beb 	.word	0x00000beb
 2fc:	00000beb 	.word	0x00000beb
 300:	00000beb 	.word	0x00000beb
 304:	00000beb 	.word	0x00000beb
 308:	00000beb 	.word	0x00000beb
 30c:	00000beb 	.word	0x00000beb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fae1 	bl	a48 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fba0 	bl	bd0 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff921c 	.word	0x1fff921c

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faeb 	bl	b74 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    ResultBuffer[1];

    EcuM_Init();
     8b4:	f000 f860 	bl	978 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b8:	f000 fb2a 	bl	f10 <SEGGER_RTT_Init>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8bc:	ab01      	add	r3, sp, #4
     8be:	4619      	mov	r1, r3
     8c0:	2000      	movs	r0, #0
     8c2:	f007 fc2d 	bl	8120 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     8c6:	466b      	mov	r3, sp
     8c8:	4619      	mov	r1, r3
     8ca:	2000      	movs	r0, #0
     8cc:	f007 f998 	bl	7c00 <Adc_SetupResultBuffer>
    /*Enable the notification function*/
    Adc_EnableGroupNotification( AdcGroup_0 );
     8d0:	2000      	movs	r0, #0
     8d2:	f007 fb14 	bl	7efe <Adc_EnableGroupNotification>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     8d6:	2000      	movs	r0, #0
     8d8:	f007 fa30 	bl	7d3c <Adc_StartGroupConversion>
        /* Wait until the conversion is done, in real world application we shall not wait at all. */
        while( AdcFlag == FALSE );
     8dc:	bf00      	nop
     8de:	4b21      	ldr	r3, [pc, #132]	; (964 <main+0xb4>)
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d0fb      	beq.n	8de <main+0x2e>
        AdcFlag = FALSE;
     8e6:	4b1f      	ldr	r3, [pc, #124]	; (964 <main+0xb4>)
     8e8:	2200      	movs	r2, #0
     8ea:	701a      	strb	r2, [r3, #0]
        /* Display value */
        SEGGER_RTT_printf( 0, "Adc Channel value: %d\n", AdcReadGroupBuffer[0] );
     8ec:	4b1e      	ldr	r3, [pc, #120]	; (968 <main+0xb8>)
     8ee:	881b      	ldrh	r3, [r3, #0]
     8f0:	461a      	mov	r2, r3
     8f2:	491e      	ldr	r1, [pc, #120]	; (96c <main+0xbc>)
     8f4:	2000      	movs	r0, #0
     8f6:	f000 fe73 	bl	15e0 <SEGGER_RTT_printf>
        adcvalue = (uint32)AdcReadGroupBuffer[0];
     8fa:	4b1b      	ldr	r3, [pc, #108]	; (968 <main+0xb8>)
     8fc:	881b      	ldrh	r3, [r3, #0]
     8fe:	461a      	mov	r2, r3
     900:	4b1b      	ldr	r3, [pc, #108]	; (970 <main+0xc0>)
     902:	601a      	str	r2, [r3, #0]
        
        /*A led ON will rotate from C8 to C15*/
        for( uint8 i = 0u ; i < 8u ; i++ )
     904:	2300      	movs	r3, #0
     906:	f88d 300f 	strb.w	r3, [sp, #15]
     90a:	e022      	b.n	952 <main+0xa2>
        {
            Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, 0x00u );
     90c:	2100      	movs	r1, #0
     90e:	4819      	ldr	r0, [pc, #100]	; (974 <main+0xc4>)
     910:	f006 f841 	bl	6996 <Dio_WriteChannelGroup>
            Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, ( 1u << i ) );
     914:	f89d 300f 	ldrb.w	r3, [sp, #15]
     918:	2201      	movs	r2, #1
     91a:	fa02 f303 	lsl.w	r3, r2, r3
     91e:	4619      	mov	r1, r3
     920:	4814      	ldr	r0, [pc, #80]	; (974 <main+0xc4>)
     922:	f006 f838 	bl	6996 <Dio_WriteChannelGroup>
            /*dummy delay*/
            for( uint32 i = 0u ; i < ((adcvalue * 200) + 50000u) ; i++ );   // Small calibration for leds delay
     926:	2300      	movs	r3, #0
     928:	9302      	str	r3, [sp, #8]
     92a:	e002      	b.n	932 <main+0x82>
     92c:	9b02      	ldr	r3, [sp, #8]
     92e:	3301      	adds	r3, #1
     930:	9302      	str	r3, [sp, #8]
     932:	4b0f      	ldr	r3, [pc, #60]	; (970 <main+0xc0>)
     934:	681b      	ldr	r3, [r3, #0]
     936:	22c8      	movs	r2, #200	; 0xc8
     938:	fb02 f303 	mul.w	r3, r2, r3
     93c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
     940:	3350      	adds	r3, #80	; 0x50
     942:	9a02      	ldr	r2, [sp, #8]
     944:	429a      	cmp	r2, r3
     946:	d3f1      	bcc.n	92c <main+0x7c>
        for( uint8 i = 0u ; i < 8u ; i++ )
     948:	f89d 300f 	ldrb.w	r3, [sp, #15]
     94c:	3301      	adds	r3, #1
     94e:	f88d 300f 	strb.w	r3, [sp, #15]
     952:	f89d 300f 	ldrb.w	r3, [sp, #15]
     956:	2b07      	cmp	r3, #7
     958:	d9d8      	bls.n	90c <main+0x5c>
        }
        
        Delay( 30u );
     95a:	201e      	movs	r0, #30
     95c:	f000 f82a 	bl	9b4 <Delay>
    {
     960:	e7b9      	b.n	8d6 <main+0x26>
     962:	bf00      	nop
     964:	1fff8b40 	.word	0x1fff8b40
     968:	1fff8b44 	.word	0x1fff8b44
     96c:	000107a4 	.word	0x000107a4
     970:	1fff8b48 	.word	0x1fff8b48
     974:	00011468 	.word	0x00011468

00000978 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     978:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     97a:	480b      	ldr	r0, [pc, #44]	; (9a8 <EcuM_Init+0x30>)
     97c:	f004 fe84 	bl	5688 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     980:	2000      	movs	r0, #0
     982:	f004 fed5 	bl	5730 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     986:	2000      	movs	r0, #0
     988:	f004 fef6 	bl	5778 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     98c:	2000      	movs	r0, #0
     98e:	f001 f8e6 	bl	1b5e <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     992:	2000      	movs	r0, #0
     994:	f000 ffe0 	bl	1958 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    ports from C8 to C15 are configured as output and  Port Pin ADC0-SE5 (B1) */
    Port_Init( &Port_Config );
     998:	4804      	ldr	r0, [pc, #16]	; (9ac <EcuM_Init+0x34>)
     99a:	f005 fa77 	bl	5e8c <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     99e:	4804      	ldr	r0, [pc, #16]	; (9b0 <EcuM_Init+0x38>)
     9a0:	f007 f8e0 	bl	7b64 <Adc_Init>
}
     9a4:	bf00      	nop
     9a6:	bd08      	pop	{r3, pc}
     9a8:	00011484 	.word	0x00011484
     9ac:	000117c4 	.word	0x000117c4
     9b0:	00011054 	.word	0x00011054

000009b4 <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     9b4:	b500      	push	{lr}
     9b6:	b087      	sub	sp, #28
     9b8:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     9ba:	9b01      	ldr	r3, [sp, #4]
     9bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     9c0:	fb02 f303 	mul.w	r3, r2, r3
     9c4:	2101      	movs	r1, #1
     9c6:	4618      	mov	r0, r3
     9c8:	f001 f91e 	bl	1c08 <OsIf_MicrosToTicks>
     9cc:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     9ce:	2001      	movs	r0, #1
     9d0:	f001 f8ce 	bl	1b70 <OsIf_GetCounter>
     9d4:	4603      	mov	r3, r0
     9d6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     9d8:	2300      	movs	r3, #0
     9da:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     9dc:	ab03      	add	r3, sp, #12
     9de:	2101      	movs	r1, #1
     9e0:	4618      	mov	r0, r3
     9e2:	f001 f8de 	bl	1ba2 <OsIf_GetElapsed>
     9e6:	4602      	mov	r2, r0
     9e8:	9b05      	ldr	r3, [sp, #20]
     9ea:	4413      	add	r3, r2
     9ec:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     9ee:	9a05      	ldr	r2, [sp, #20]
     9f0:	9b04      	ldr	r3, [sp, #16]
     9f2:	429a      	cmp	r2, r3
     9f4:	d3f2      	bcc.n	9dc <Delay+0x28>
}
     9f6:	bf00      	nop
     9f8:	bf00      	nop
     9fa:	b007      	add	sp, #28
     9fc:	f85d fb04 	ldr.w	pc, [sp], #4

00000a00 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     a00:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a02:	f3ef 8310 	mrs	r3, PRIMASK
     a06:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a08:	4623      	mov	r3, r4
}
     a0a:	4618      	mov	r0, r3
     a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a10:	4770      	bx	lr

00000a12 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     a12:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a14:	f3ef 8310 	mrs	r3, PRIMASK
     a18:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a1a:	4623      	mov	r3, r4
}
     a1c:	4618      	mov	r0, r3
     a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
     a22:	4770      	bx	lr

00000a24 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a24:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a26:	f3ef 8310 	mrs	r3, PRIMASK
     a2a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a2c:	4623      	mov	r3, r4
}
     a2e:	4618      	mov	r0, r3
     a30:	f85d 4b04 	ldr.w	r4, [sp], #4
     a34:	4770      	bx	lr

00000a36 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a36:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a38:	f3ef 8310 	mrs	r3, PRIMASK
     a3c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a3e:	4623      	mov	r3, r4
}
     a40:	4618      	mov	r0, r3
     a42:	f85d 4b04 	ldr.w	r4, [sp], #4
     a46:	4770      	bx	lr

00000a48 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a48:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a4a:	2300      	movs	r3, #0
     a4c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a4e:	2300      	movs	r3, #0
     a50:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a52:	2300      	movs	r3, #0
     a54:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a56:	2300      	movs	r3, #0
     a58:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a5a:	4b44      	ldr	r3, [pc, #272]	; (b6c <init_data_bss+0x124>)
     a5c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a5e:	4b44      	ldr	r3, [pc, #272]	; (b70 <init_data_bss+0x128>)
     a60:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a62:	9b05      	ldr	r3, [sp, #20]
     a64:	681b      	ldr	r3, [r3, #0]
     a66:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a68:	9b05      	ldr	r3, [sp, #20]
     a6a:	3304      	adds	r3, #4
     a6c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a6e:	9b05      	ldr	r3, [sp, #20]
     a70:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a72:	2300      	movs	r3, #0
     a74:	9309      	str	r3, [sp, #36]	; 0x24
     a76:	e03d      	b.n	af4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a7a:	4613      	mov	r3, r2
     a7c:	005b      	lsls	r3, r3, #1
     a7e:	4413      	add	r3, r2
     a80:	009b      	lsls	r3, r3, #2
     a82:	461a      	mov	r2, r3
     a84:	9b03      	ldr	r3, [sp, #12]
     a86:	4413      	add	r3, r2
     a88:	685b      	ldr	r3, [r3, #4]
     a8a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a8e:	4613      	mov	r3, r2
     a90:	005b      	lsls	r3, r3, #1
     a92:	4413      	add	r3, r2
     a94:	009b      	lsls	r3, r3, #2
     a96:	461a      	mov	r2, r3
     a98:	9b03      	ldr	r3, [sp, #12]
     a9a:	4413      	add	r3, r2
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aa2:	4613      	mov	r3, r2
     aa4:	005b      	lsls	r3, r3, #1
     aa6:	4413      	add	r3, r2
     aa8:	009b      	lsls	r3, r3, #2
     aaa:	461a      	mov	r2, r3
     aac:	9b03      	ldr	r3, [sp, #12]
     aae:	4413      	add	r3, r2
     ab0:	689b      	ldr	r3, [r3, #8]
     ab2:	4619      	mov	r1, r3
     ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ab6:	4613      	mov	r3, r2
     ab8:	005b      	lsls	r3, r3, #1
     aba:	4413      	add	r3, r2
     abc:	009b      	lsls	r3, r3, #2
     abe:	461a      	mov	r2, r3
     ac0:	9b03      	ldr	r3, [sp, #12]
     ac2:	4413      	add	r3, r2
     ac4:	685b      	ldr	r3, [r3, #4]
     ac6:	1acb      	subs	r3, r1, r3
     ac8:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     aca:	2300      	movs	r3, #0
     acc:	9308      	str	r3, [sp, #32]
     ace:	e00a      	b.n	ae6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ad0:	9a00      	ldr	r2, [sp, #0]
     ad2:	9b08      	ldr	r3, [sp, #32]
     ad4:	441a      	add	r2, r3
     ad6:	9901      	ldr	r1, [sp, #4]
     ad8:	9b08      	ldr	r3, [sp, #32]
     ada:	440b      	add	r3, r1
     adc:	7812      	ldrb	r2, [r2, #0]
     ade:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ae0:	9b08      	ldr	r3, [sp, #32]
     ae2:	3301      	adds	r3, #1
     ae4:	9308      	str	r3, [sp, #32]
     ae6:	9a08      	ldr	r2, [sp, #32]
     ae8:	9b06      	ldr	r3, [sp, #24]
     aea:	429a      	cmp	r2, r3
     aec:	d3f0      	bcc.n	ad0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af0:	3301      	adds	r3, #1
     af2:	9309      	str	r3, [sp, #36]	; 0x24
     af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     af6:	9b07      	ldr	r3, [sp, #28]
     af8:	429a      	cmp	r2, r3
     afa:	d3bd      	bcc.n	a78 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     afc:	9b04      	ldr	r3, [sp, #16]
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b02:	9b04      	ldr	r3, [sp, #16]
     b04:	3304      	adds	r3, #4
     b06:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b08:	9b04      	ldr	r3, [sp, #16]
     b0a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b0c:	2300      	movs	r3, #0
     b0e:	9309      	str	r3, [sp, #36]	; 0x24
     b10:	e024      	b.n	b5c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b14:	00db      	lsls	r3, r3, #3
     b16:	9a02      	ldr	r2, [sp, #8]
     b18:	4413      	add	r3, r2
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b20:	00db      	lsls	r3, r3, #3
     b22:	9a02      	ldr	r2, [sp, #8]
     b24:	4413      	add	r3, r2
     b26:	685b      	ldr	r3, [r3, #4]
     b28:	4619      	mov	r1, r3
     b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b2c:	00db      	lsls	r3, r3, #3
     b2e:	9a02      	ldr	r2, [sp, #8]
     b30:	4413      	add	r3, r2
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	1acb      	subs	r3, r1, r3
     b36:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b38:	2300      	movs	r3, #0
     b3a:	9308      	str	r3, [sp, #32]
     b3c:	e007      	b.n	b4e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b3e:	9a01      	ldr	r2, [sp, #4]
     b40:	9b08      	ldr	r3, [sp, #32]
     b42:	4413      	add	r3, r2
     b44:	2200      	movs	r2, #0
     b46:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b48:	9b08      	ldr	r3, [sp, #32]
     b4a:	3301      	adds	r3, #1
     b4c:	9308      	str	r3, [sp, #32]
     b4e:	9a08      	ldr	r2, [sp, #32]
     b50:	9b06      	ldr	r3, [sp, #24]
     b52:	429a      	cmp	r2, r3
     b54:	d3f3      	bcc.n	b3e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b58:	3301      	adds	r3, #1
     b5a:	9309      	str	r3, [sp, #36]	; 0x24
     b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b5e:	9b07      	ldr	r3, [sp, #28]
     b60:	429a      	cmp	r2, r3
     b62:	d3d6      	bcc.n	b12 <init_data_bss+0xca>
        }
    }
}
     b64:	bf00      	nop
     b66:	bf00      	nop
     b68:	b00a      	add	sp, #40	; 0x28
     b6a:	4770      	bx	lr
     b6c:	00011834 	.word	0x00011834
     b70:	00011850 	.word	0x00011850

00000b74 <sys_m4_cache_init>:
{
     b74:	b084      	sub	sp, #16
     b76:	4603      	mov	r3, r0
     b78:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b7c:	2300      	movs	r3, #0
     b7e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b86:	2b00      	cmp	r3, #0
     b88:	d118      	bne.n	bbc <__BSS_SRAM_SIZE+0x1c>
      IP_LMEM->PCCCR = 0x05000000UL;
     b8a:	4b10      	ldr	r3, [pc, #64]	; (bcc <__BSS_SRAM_SIZE+0x2c>)
     b8c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b90:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b92:	4b0e      	ldr	r3, [pc, #56]	; (bcc <__BSS_SRAM_SIZE+0x2c>)
     b94:	681b      	ldr	r3, [r3, #0]
     b96:	4a0d      	ldr	r2, [pc, #52]	; (bcc <__BSS_SRAM_SIZE+0x2c>)
     b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b9c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b9e:	bf00      	nop
     ba0:	4b0a      	ldr	r3, [pc, #40]	; (bcc <__BSS_SRAM_SIZE+0x2c>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bac:	d0f8      	beq.n	ba0 <__BSS_SRAM_SIZE>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bae:	4b07      	ldr	r3, [pc, #28]	; (bcc <__BSS_SRAM_SIZE+0x2c>)
     bb0:	681b      	ldr	r3, [r3, #0]
     bb2:	4a06      	ldr	r2, [pc, #24]	; (bcc <__BSS_SRAM_SIZE+0x2c>)
     bb4:	f043 0301 	orr.w	r3, r3, #1
     bb8:	6013      	str	r3, [r2, #0]
     bba:	e002      	b.n	bc2 <__BSS_SRAM_SIZE+0x22>
     RetValue = CACHE_INVALID_PARAM;
     bbc:	2301      	movs	r3, #1
     bbe:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bc6:	4618      	mov	r0, r3
     bc8:	b004      	add	sp, #16
     bca:	4770      	bx	lr
     bcc:	e0082000 	.word	0xe0082000

00000bd0 <startup_go_to_user_mode>:
}
     bd0:	bf00      	nop
     bd2:	4770      	bx	lr

00000bd4 <Sys_GetCoreID>:
    return 0U;
     bd4:	2300      	movs	r3, #0
}
     bd6:	4618      	mov	r0, r3
     bd8:	4770      	bx	lr

00000bda <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bda:	e7fe      	b.n	bda <HardFault_Handler>

00000bdc <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bdc:	e7fe      	b.n	bdc <MemManage_Handler>

00000bde <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bde:	e7fe      	b.n	bde <BusFault_Handler>

00000be0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     be0:	e7fe      	b.n	be0 <UsageFault_Handler>

00000be2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     be2:	e7fe      	b.n	be2 <SVC_Handler>

00000be4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     be4:	e7fe      	b.n	be4 <DebugMon_Handler>

00000be6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     be6:	e7fe      	b.n	be6 <PendSV_Handler>

00000be8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     be8:	e7fe      	b.n	be8 <SysTick_Handler>

00000bea <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bea:	e7fe      	b.n	bea <undefined_handler>

00000bec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     bec:	b500      	push	{lr}
     bee:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     bf0:	4b26      	ldr	r3, [pc, #152]	; (c8c <_DoInit+0xa0>)
     bf2:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     bf4:	22a8      	movs	r2, #168	; 0xa8
     bf6:	2100      	movs	r1, #0
     bf8:	9800      	ldr	r0, [sp, #0]
     bfa:	f000 fd13 	bl	1624 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     bfe:	9b00      	ldr	r3, [sp, #0]
     c00:	2203      	movs	r2, #3
     c02:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c04:	9b00      	ldr	r3, [sp, #0]
     c06:	2203      	movs	r2, #3
     c08:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c0a:	9b00      	ldr	r3, [sp, #0]
     c0c:	4a20      	ldr	r2, [pc, #128]	; (c90 <_DoInit+0xa4>)
     c0e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c10:	9b00      	ldr	r3, [sp, #0]
     c12:	4a20      	ldr	r2, [pc, #128]	; (c94 <_DoInit+0xa8>)
     c14:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c16:	9b00      	ldr	r3, [sp, #0]
     c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c1c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c1e:	9b00      	ldr	r3, [sp, #0]
     c20:	2200      	movs	r2, #0
     c22:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c24:	9b00      	ldr	r3, [sp, #0]
     c26:	2200      	movs	r2, #0
     c28:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c2a:	9b00      	ldr	r3, [sp, #0]
     c2c:	2200      	movs	r2, #0
     c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c30:	9b00      	ldr	r3, [sp, #0]
     c32:	4a17      	ldr	r2, [pc, #92]	; (c90 <_DoInit+0xa4>)
     c34:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c36:	9b00      	ldr	r3, [sp, #0]
     c38:	4a17      	ldr	r2, [pc, #92]	; (c98 <_DoInit+0xac>)
     c3a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c3c:	9b00      	ldr	r3, [sp, #0]
     c3e:	2210      	movs	r2, #16
     c40:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c42:	9b00      	ldr	r3, [sp, #0]
     c44:	2200      	movs	r2, #0
     c46:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c48:	9b00      	ldr	r3, [sp, #0]
     c4a:	2200      	movs	r2, #0
     c4c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	2200      	movs	r2, #0
     c52:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c54:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c58:	2300      	movs	r3, #0
     c5a:	9301      	str	r3, [sp, #4]
     c5c:	e00c      	b.n	c78 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c5e:	9b01      	ldr	r3, [sp, #4]
     c60:	f1c3 030f 	rsb	r3, r3, #15
     c64:	4a0d      	ldr	r2, [pc, #52]	; (c9c <_DoInit+0xb0>)
     c66:	5cd1      	ldrb	r1, [r2, r3]
     c68:	9a00      	ldr	r2, [sp, #0]
     c6a:	9b01      	ldr	r3, [sp, #4]
     c6c:	4413      	add	r3, r2
     c6e:	460a      	mov	r2, r1
     c70:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c72:	9b01      	ldr	r3, [sp, #4]
     c74:	3301      	adds	r3, #1
     c76:	9301      	str	r3, [sp, #4]
     c78:	9b01      	ldr	r3, [sp, #4]
     c7a:	2b0f      	cmp	r3, #15
     c7c:	d9ef      	bls.n	c5e <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c7e:	f3bf 8f5f 	dmb	sy
}
     c82:	bf00      	nop
     c84:	b003      	add	sp, #12
     c86:	f85d fb04 	ldr.w	pc, [sp], #4
     c8a:	bf00      	nop
     c8c:	1fff9220 	.word	0x1fff9220
     c90:	000107bc 	.word	0x000107bc
     c94:	1fff92c8 	.word	0x1fff92c8
     c98:	1fff96c8 	.word	0x1fff96c8
     c9c:	00011810 	.word	0x00011810

00000ca0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     ca0:	b500      	push	{lr}
     ca2:	b08b      	sub	sp, #44	; 0x2c
     ca4:	9003      	str	r0, [sp, #12]
     ca6:	9102      	str	r1, [sp, #8]
     ca8:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     caa:	2300      	movs	r3, #0
     cac:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     cae:	9b03      	ldr	r3, [sp, #12]
     cb0:	68db      	ldr	r3, [r3, #12]
     cb2:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     cb4:	9b03      	ldr	r3, [sp, #12]
     cb6:	691b      	ldr	r3, [r3, #16]
     cb8:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cba:	9a06      	ldr	r2, [sp, #24]
     cbc:	9b07      	ldr	r3, [sp, #28]
     cbe:	429a      	cmp	r2, r3
     cc0:	d905      	bls.n	cce <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     cc2:	9a06      	ldr	r2, [sp, #24]
     cc4:	9b07      	ldr	r3, [sp, #28]
     cc6:	1ad3      	subs	r3, r2, r3
     cc8:	3b01      	subs	r3, #1
     cca:	9309      	str	r3, [sp, #36]	; 0x24
     ccc:	e007      	b.n	cde <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     cce:	9b03      	ldr	r3, [sp, #12]
     cd0:	689a      	ldr	r2, [r3, #8]
     cd2:	9906      	ldr	r1, [sp, #24]
     cd4:	9b07      	ldr	r3, [sp, #28]
     cd6:	1acb      	subs	r3, r1, r3
     cd8:	4413      	add	r3, r2
     cda:	3b01      	subs	r3, #1
     cdc:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     cde:	9b03      	ldr	r3, [sp, #12]
     ce0:	689a      	ldr	r2, [r3, #8]
     ce2:	9b07      	ldr	r3, [sp, #28]
     ce4:	1ad3      	subs	r3, r2, r3
     ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ce8:	4293      	cmp	r3, r2
     cea:	bf28      	it	cs
     cec:	4613      	movcs	r3, r2
     cee:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cf2:	9b01      	ldr	r3, [sp, #4]
     cf4:	4293      	cmp	r3, r2
     cf6:	bf28      	it	cs
     cf8:	4613      	movcs	r3, r2
     cfa:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     cfc:	9b03      	ldr	r3, [sp, #12]
     cfe:	685a      	ldr	r2, [r3, #4]
     d00:	9b07      	ldr	r3, [sp, #28]
     d02:	4413      	add	r3, r2
     d04:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d08:	9902      	ldr	r1, [sp, #8]
     d0a:	9805      	ldr	r0, [sp, #20]
     d0c:	f000 fc7c 	bl	1608 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d10:	9a08      	ldr	r2, [sp, #32]
     d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d14:	4413      	add	r3, r2
     d16:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d18:	9a02      	ldr	r2, [sp, #8]
     d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d1c:	4413      	add	r3, r2
     d1e:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d20:	9a01      	ldr	r2, [sp, #4]
     d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d24:	1ad3      	subs	r3, r2, r3
     d26:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d28:	9a07      	ldr	r2, [sp, #28]
     d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d2c:	4413      	add	r3, r2
     d2e:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d30:	9b03      	ldr	r3, [sp, #12]
     d32:	689b      	ldr	r3, [r3, #8]
     d34:	9a07      	ldr	r2, [sp, #28]
     d36:	429a      	cmp	r2, r3
     d38:	d101      	bne.n	d3e <_WriteBlocking+0x9e>
      WrOff = 0u;
     d3a:	2300      	movs	r3, #0
     d3c:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d42:	9b03      	ldr	r3, [sp, #12]
     d44:	9a07      	ldr	r2, [sp, #28]
     d46:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d48:	9b01      	ldr	r3, [sp, #4]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d1b2      	bne.n	cb4 <_WriteBlocking+0x14>
  return NumBytesWritten;
     d4e:	9b08      	ldr	r3, [sp, #32]
}
     d50:	4618      	mov	r0, r3
     d52:	b00b      	add	sp, #44	; 0x2c
     d54:	f85d fb04 	ldr.w	pc, [sp], #4

00000d58 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d58:	b500      	push	{lr}
     d5a:	b089      	sub	sp, #36	; 0x24
     d5c:	9003      	str	r0, [sp, #12]
     d5e:	9102      	str	r1, [sp, #8]
     d60:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d62:	9b03      	ldr	r3, [sp, #12]
     d64:	68db      	ldr	r3, [r3, #12]
     d66:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     d68:	9b03      	ldr	r3, [sp, #12]
     d6a:	689a      	ldr	r2, [r3, #8]
     d6c:	9b07      	ldr	r3, [sp, #28]
     d6e:	1ad3      	subs	r3, r2, r3
     d70:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     d72:	9a06      	ldr	r2, [sp, #24]
     d74:	9b01      	ldr	r3, [sp, #4]
     d76:	429a      	cmp	r2, r3
     d78:	d911      	bls.n	d9e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d7a:	9b03      	ldr	r3, [sp, #12]
     d7c:	685a      	ldr	r2, [r3, #4]
     d7e:	9b07      	ldr	r3, [sp, #28]
     d80:	4413      	add	r3, r2
     d82:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d84:	9a01      	ldr	r2, [sp, #4]
     d86:	9902      	ldr	r1, [sp, #8]
     d88:	9804      	ldr	r0, [sp, #16]
     d8a:	f000 fc3d 	bl	1608 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d8e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     d92:	9a07      	ldr	r2, [sp, #28]
     d94:	9b01      	ldr	r3, [sp, #4]
     d96:	441a      	add	r2, r3
     d98:	9b03      	ldr	r3, [sp, #12]
     d9a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     d9c:	e01f      	b.n	dde <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     d9e:	9b06      	ldr	r3, [sp, #24]
     da0:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     da2:	9b03      	ldr	r3, [sp, #12]
     da4:	685a      	ldr	r2, [r3, #4]
     da6:	9b07      	ldr	r3, [sp, #28]
     da8:	4413      	add	r3, r2
     daa:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     dac:	9a05      	ldr	r2, [sp, #20]
     dae:	9902      	ldr	r1, [sp, #8]
     db0:	9804      	ldr	r0, [sp, #16]
     db2:	f000 fc29 	bl	1608 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     db6:	9a01      	ldr	r2, [sp, #4]
     db8:	9b06      	ldr	r3, [sp, #24]
     dba:	1ad3      	subs	r3, r2, r3
     dbc:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     dbe:	9b03      	ldr	r3, [sp, #12]
     dc0:	685b      	ldr	r3, [r3, #4]
     dc2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     dc4:	9a02      	ldr	r2, [sp, #8]
     dc6:	9b06      	ldr	r3, [sp, #24]
     dc8:	4413      	add	r3, r2
     dca:	9a05      	ldr	r2, [sp, #20]
     dcc:	4619      	mov	r1, r3
     dce:	9804      	ldr	r0, [sp, #16]
     dd0:	f000 fc1a 	bl	1608 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dd4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     dd8:	9b03      	ldr	r3, [sp, #12]
     dda:	9a05      	ldr	r2, [sp, #20]
     ddc:	60da      	str	r2, [r3, #12]
}
     dde:	bf00      	nop
     de0:	b009      	add	sp, #36	; 0x24
     de2:	f85d fb04 	ldr.w	pc, [sp], #4

00000de6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     de6:	b086      	sub	sp, #24
     de8:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     dea:	9b01      	ldr	r3, [sp, #4]
     dec:	691b      	ldr	r3, [r3, #16]
     dee:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     df0:	9b01      	ldr	r3, [sp, #4]
     df2:	68db      	ldr	r3, [r3, #12]
     df4:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     df6:	9a04      	ldr	r2, [sp, #16]
     df8:	9b03      	ldr	r3, [sp, #12]
     dfa:	429a      	cmp	r2, r3
     dfc:	d808      	bhi.n	e10 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     dfe:	9b01      	ldr	r3, [sp, #4]
     e00:	689a      	ldr	r2, [r3, #8]
     e02:	9b03      	ldr	r3, [sp, #12]
     e04:	1ad2      	subs	r2, r2, r3
     e06:	9b04      	ldr	r3, [sp, #16]
     e08:	4413      	add	r3, r2
     e0a:	3b01      	subs	r3, #1
     e0c:	9305      	str	r3, [sp, #20]
     e0e:	e004      	b.n	e1a <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e10:	9a04      	ldr	r2, [sp, #16]
     e12:	9b03      	ldr	r3, [sp, #12]
     e14:	1ad3      	subs	r3, r2, r3
     e16:	3b01      	subs	r3, #1
     e18:	9305      	str	r3, [sp, #20]
  }
  return r;
     e1a:	9b05      	ldr	r3, [sp, #20]
}
     e1c:	4618      	mov	r0, r3
     e1e:	b006      	add	sp, #24
     e20:	4770      	bx	lr
	...

00000e24 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e24:	b500      	push	{lr}
     e26:	b089      	sub	sp, #36	; 0x24
     e28:	9003      	str	r0, [sp, #12]
     e2a:	9102      	str	r1, [sp, #8]
     e2c:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e2e:	9b02      	ldr	r3, [sp, #8]
     e30:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e32:	9b03      	ldr	r3, [sp, #12]
     e34:	1c5a      	adds	r2, r3, #1
     e36:	4613      	mov	r3, r2
     e38:	005b      	lsls	r3, r3, #1
     e3a:	4413      	add	r3, r2
     e3c:	00db      	lsls	r3, r3, #3
     e3e:	4a20      	ldr	r2, [pc, #128]	; (ec0 <SEGGER_RTT_WriteNoLock+0x9c>)
     e40:	4413      	add	r3, r2
     e42:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e44:	9b05      	ldr	r3, [sp, #20]
     e46:	695b      	ldr	r3, [r3, #20]
     e48:	2b02      	cmp	r3, #2
     e4a:	d029      	beq.n	ea0 <SEGGER_RTT_WriteNoLock+0x7c>
     e4c:	2b02      	cmp	r3, #2
     e4e:	d82e      	bhi.n	eae <SEGGER_RTT_WriteNoLock+0x8a>
     e50:	2b00      	cmp	r3, #0
     e52:	d002      	beq.n	e5a <SEGGER_RTT_WriteNoLock+0x36>
     e54:	2b01      	cmp	r3, #1
     e56:	d013      	beq.n	e80 <SEGGER_RTT_WriteNoLock+0x5c>
     e58:	e029      	b.n	eae <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e5a:	9805      	ldr	r0, [sp, #20]
     e5c:	f7ff ffc3 	bl	de6 <_GetAvailWriteSpace>
     e60:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e62:	9a04      	ldr	r2, [sp, #16]
     e64:	9b01      	ldr	r3, [sp, #4]
     e66:	429a      	cmp	r2, r3
     e68:	d202      	bcs.n	e70 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     e6a:	2300      	movs	r3, #0
     e6c:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e6e:	e021      	b.n	eb4 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     e70:	9b01      	ldr	r3, [sp, #4]
     e72:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     e74:	9a01      	ldr	r2, [sp, #4]
     e76:	9906      	ldr	r1, [sp, #24]
     e78:	9805      	ldr	r0, [sp, #20]
     e7a:	f7ff ff6d 	bl	d58 <_WriteNoCheck>
    break;
     e7e:	e019      	b.n	eb4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e80:	9805      	ldr	r0, [sp, #20]
     e82:	f7ff ffb0 	bl	de6 <_GetAvailWriteSpace>
     e86:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     e88:	9a01      	ldr	r2, [sp, #4]
     e8a:	9b04      	ldr	r3, [sp, #16]
     e8c:	4293      	cmp	r3, r2
     e8e:	bf28      	it	cs
     e90:	4613      	movcs	r3, r2
     e92:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     e94:	9a07      	ldr	r2, [sp, #28]
     e96:	9906      	ldr	r1, [sp, #24]
     e98:	9805      	ldr	r0, [sp, #20]
     e9a:	f7ff ff5d 	bl	d58 <_WriteNoCheck>
    break;
     e9e:	e009      	b.n	eb4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     ea0:	9a01      	ldr	r2, [sp, #4]
     ea2:	9906      	ldr	r1, [sp, #24]
     ea4:	9805      	ldr	r0, [sp, #20]
     ea6:	f7ff fefb 	bl	ca0 <_WriteBlocking>
     eaa:	9007      	str	r0, [sp, #28]
    break;
     eac:	e002      	b.n	eb4 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     eae:	2300      	movs	r3, #0
     eb0:	9307      	str	r3, [sp, #28]
    break;
     eb2:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     eb4:	9b07      	ldr	r3, [sp, #28]
}
     eb6:	4618      	mov	r0, r3
     eb8:	b009      	add	sp, #36	; 0x24
     eba:	f85d fb04 	ldr.w	pc, [sp], #4
     ebe:	bf00      	nop
     ec0:	1fff9220 	.word	0x1fff9220

00000ec4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     ec4:	b500      	push	{lr}
     ec6:	b089      	sub	sp, #36	; 0x24
     ec8:	9003      	str	r0, [sp, #12]
     eca:	9102      	str	r1, [sp, #8]
     ecc:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     ece:	4b0f      	ldr	r3, [pc, #60]	; (f0c <SEGGER_RTT_Write+0x48>)
     ed0:	9307      	str	r3, [sp, #28]
     ed2:	9b07      	ldr	r3, [sp, #28]
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	b2db      	uxtb	r3, r3
     ed8:	2b53      	cmp	r3, #83	; 0x53
     eda:	d001      	beq.n	ee0 <SEGGER_RTT_Write+0x1c>
     edc:	f7ff fe86 	bl	bec <_DoInit>
  SEGGER_RTT_LOCK();
     ee0:	f3ef 8311 	mrs	r3, BASEPRI
     ee4:	f04f 0120 	mov.w	r1, #32
     ee8:	f381 8811 	msr	BASEPRI, r1
     eec:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     eee:	9a01      	ldr	r2, [sp, #4]
     ef0:	9902      	ldr	r1, [sp, #8]
     ef2:	9803      	ldr	r0, [sp, #12]
     ef4:	f7ff ff96 	bl	e24 <SEGGER_RTT_WriteNoLock>
     ef8:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     efa:	9b06      	ldr	r3, [sp, #24]
     efc:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f00:	9b05      	ldr	r3, [sp, #20]
}
     f02:	4618      	mov	r0, r3
     f04:	b009      	add	sp, #36	; 0x24
     f06:	f85d fb04 	ldr.w	pc, [sp], #4
     f0a:	bf00      	nop
     f0c:	1fff9220 	.word	0x1fff9220

00000f10 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f10:	b508      	push	{r3, lr}
  _DoInit();
     f12:	f7ff fe6b 	bl	bec <_DoInit>
}
     f16:	bf00      	nop
     f18:	bd08      	pop	{r3, pc}

00000f1a <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f1a:	b500      	push	{lr}
     f1c:	b085      	sub	sp, #20
     f1e:	9001      	str	r0, [sp, #4]
     f20:	460b      	mov	r3, r1
     f22:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f26:	9b01      	ldr	r3, [sp, #4]
     f28:	689b      	ldr	r3, [r3, #8]
     f2a:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f2c:	9b03      	ldr	r3, [sp, #12]
     f2e:	1c5a      	adds	r2, r3, #1
     f30:	9b01      	ldr	r3, [sp, #4]
     f32:	685b      	ldr	r3, [r3, #4]
     f34:	429a      	cmp	r2, r3
     f36:	d80f      	bhi.n	f58 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	681a      	ldr	r2, [r3, #0]
     f3c:	9b03      	ldr	r3, [sp, #12]
     f3e:	4413      	add	r3, r2
     f40:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f44:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f46:	9b03      	ldr	r3, [sp, #12]
     f48:	1c5a      	adds	r2, r3, #1
     f4a:	9b01      	ldr	r3, [sp, #4]
     f4c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f4e:	9b01      	ldr	r3, [sp, #4]
     f50:	68db      	ldr	r3, [r3, #12]
     f52:	1c5a      	adds	r2, r3, #1
     f54:	9b01      	ldr	r3, [sp, #4]
     f56:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f58:	9b01      	ldr	r3, [sp, #4]
     f5a:	689a      	ldr	r2, [r3, #8]
     f5c:	9b01      	ldr	r3, [sp, #4]
     f5e:	685b      	ldr	r3, [r3, #4]
     f60:	429a      	cmp	r2, r3
     f62:	d115      	bne.n	f90 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f64:	9b01      	ldr	r3, [sp, #4]
     f66:	6918      	ldr	r0, [r3, #16]
     f68:	9b01      	ldr	r3, [sp, #4]
     f6a:	6819      	ldr	r1, [r3, #0]
     f6c:	9b01      	ldr	r3, [sp, #4]
     f6e:	689b      	ldr	r3, [r3, #8]
     f70:	461a      	mov	r2, r3
     f72:	f7ff ffa7 	bl	ec4 <SEGGER_RTT_Write>
     f76:	4602      	mov	r2, r0
     f78:	9b01      	ldr	r3, [sp, #4]
     f7a:	689b      	ldr	r3, [r3, #8]
     f7c:	429a      	cmp	r2, r3
     f7e:	d004      	beq.n	f8a <_StoreChar+0x70>
      p->ReturnValue = -1;
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	f04f 32ff 	mov.w	r2, #4294967295
     f86:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     f88:	e002      	b.n	f90 <_StoreChar+0x76>
      p->Cnt = 0u;
     f8a:	9b01      	ldr	r3, [sp, #4]
     f8c:	2200      	movs	r2, #0
     f8e:	609a      	str	r2, [r3, #8]
}
     f90:	bf00      	nop
     f92:	b005      	add	sp, #20
     f94:	f85d fb04 	ldr.w	pc, [sp], #4

00000f98 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     f98:	b500      	push	{lr}
     f9a:	b08b      	sub	sp, #44	; 0x2c
     f9c:	9003      	str	r0, [sp, #12]
     f9e:	9102      	str	r1, [sp, #8]
     fa0:	9201      	str	r2, [sp, #4]
     fa2:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fa4:	9b02      	ldr	r3, [sp, #8]
     fa6:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fa8:	2301      	movs	r3, #1
     faa:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fac:	2301      	movs	r3, #1
     fae:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fb0:	e007      	b.n	fc2 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     fb2:	9a08      	ldr	r2, [sp, #32]
     fb4:	9b01      	ldr	r3, [sp, #4]
     fb6:	fbb2 f3f3 	udiv	r3, r2, r3
     fba:	9308      	str	r3, [sp, #32]
    Width++;
     fbc:	9b07      	ldr	r3, [sp, #28]
     fbe:	3301      	adds	r3, #1
     fc0:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fc2:	9a08      	ldr	r2, [sp, #32]
     fc4:	9b01      	ldr	r3, [sp, #4]
     fc6:	429a      	cmp	r2, r3
     fc8:	d2f3      	bcs.n	fb2 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     fca:	9a00      	ldr	r2, [sp, #0]
     fcc:	9b07      	ldr	r3, [sp, #28]
     fce:	429a      	cmp	r2, r3
     fd0:	d901      	bls.n	fd6 <_PrintUnsigned+0x3e>
    Width = NumDigits;
     fd2:	9b00      	ldr	r3, [sp, #0]
     fd4:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     fd8:	f003 0301 	and.w	r3, r3, #1
     fdc:	2b00      	cmp	r3, #0
     fde:	d128      	bne.n	1032 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fe2:	2b00      	cmp	r3, #0
     fe4:	d025      	beq.n	1032 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     fe8:	f003 0302 	and.w	r3, r3, #2
     fec:	2b00      	cmp	r3, #0
     fee:	d006      	beq.n	ffe <_PrintUnsigned+0x66>
     ff0:	9b00      	ldr	r3, [sp, #0]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d103      	bne.n	ffe <_PrintUnsigned+0x66>
        c = '0';
     ff6:	2330      	movs	r3, #48	; 0x30
     ff8:	f88d 301b 	strb.w	r3, [sp, #27]
     ffc:	e002      	b.n	1004 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     ffe:	2320      	movs	r3, #32
    1000:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1004:	e00c      	b.n	1020 <_PrintUnsigned+0x88>
        FieldWidth--;
    1006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1008:	3b01      	subs	r3, #1
    100a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    100c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1010:	4619      	mov	r1, r3
    1012:	9803      	ldr	r0, [sp, #12]
    1014:	f7ff ff81 	bl	f1a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1018:	9b03      	ldr	r3, [sp, #12]
    101a:	68db      	ldr	r3, [r3, #12]
    101c:	2b00      	cmp	r3, #0
    101e:	db07      	blt.n	1030 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1022:	2b00      	cmp	r3, #0
    1024:	d005      	beq.n	1032 <_PrintUnsigned+0x9a>
    1026:	9a07      	ldr	r2, [sp, #28]
    1028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    102a:	429a      	cmp	r2, r3
    102c:	d3eb      	bcc.n	1006 <_PrintUnsigned+0x6e>
    102e:	e000      	b.n	1032 <_PrintUnsigned+0x9a>
          break;
    1030:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1032:	9b03      	ldr	r3, [sp, #12]
    1034:	68db      	ldr	r3, [r3, #12]
    1036:	2b00      	cmp	r3, #0
    1038:	db55      	blt.n	10e6 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    103a:	9b00      	ldr	r3, [sp, #0]
    103c:	2b01      	cmp	r3, #1
    103e:	d903      	bls.n	1048 <_PrintUnsigned+0xb0>
        NumDigits--;
    1040:	9b00      	ldr	r3, [sp, #0]
    1042:	3b01      	subs	r3, #1
    1044:	9300      	str	r3, [sp, #0]
    1046:	e009      	b.n	105c <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1048:	9a02      	ldr	r2, [sp, #8]
    104a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    104c:	fbb2 f3f3 	udiv	r3, r2, r3
    1050:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1052:	9a05      	ldr	r2, [sp, #20]
    1054:	9b01      	ldr	r3, [sp, #4]
    1056:	429a      	cmp	r2, r3
    1058:	d200      	bcs.n	105c <_PrintUnsigned+0xc4>
          break;
    105a:	e005      	b.n	1068 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    105c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    105e:	9a01      	ldr	r2, [sp, #4]
    1060:	fb02 f303 	mul.w	r3, r2, r3
    1064:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1066:	e7e8      	b.n	103a <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1068:	9a02      	ldr	r2, [sp, #8]
    106a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    106c:	fbb2 f3f3 	udiv	r3, r2, r3
    1070:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1072:	9b05      	ldr	r3, [sp, #20]
    1074:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1076:	fb02 f303 	mul.w	r3, r2, r3
    107a:	9a02      	ldr	r2, [sp, #8]
    107c:	1ad3      	subs	r3, r2, r3
    107e:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1080:	4a1b      	ldr	r2, [pc, #108]	; (10f0 <_PrintUnsigned+0x158>)
    1082:	9b05      	ldr	r3, [sp, #20]
    1084:	4413      	add	r3, r2
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	4619      	mov	r1, r3
    108a:	9803      	ldr	r0, [sp, #12]
    108c:	f7ff ff45 	bl	f1a <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1090:	9b03      	ldr	r3, [sp, #12]
    1092:	68db      	ldr	r3, [r3, #12]
    1094:	2b00      	cmp	r3, #0
    1096:	db08      	blt.n	10aa <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1098:	9a09      	ldr	r2, [sp, #36]	; 0x24
    109a:	9b01      	ldr	r3, [sp, #4]
    109c:	fbb2 f3f3 	udiv	r3, r2, r3
    10a0:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10a4:	2b00      	cmp	r3, #0
    10a6:	d1df      	bne.n	1068 <_PrintUnsigned+0xd0>
    10a8:	e000      	b.n	10ac <_PrintUnsigned+0x114>
        break;
    10aa:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10ae:	f003 0301 	and.w	r3, r3, #1
    10b2:	2b00      	cmp	r3, #0
    10b4:	d017      	beq.n	10e6 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10b8:	2b00      	cmp	r3, #0
    10ba:	d014      	beq.n	10e6 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10bc:	e00a      	b.n	10d4 <_PrintUnsigned+0x13c>
          FieldWidth--;
    10be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10c0:	3b01      	subs	r3, #1
    10c2:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    10c4:	2120      	movs	r1, #32
    10c6:	9803      	ldr	r0, [sp, #12]
    10c8:	f7ff ff27 	bl	f1a <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    10cc:	9b03      	ldr	r3, [sp, #12]
    10ce:	68db      	ldr	r3, [r3, #12]
    10d0:	2b00      	cmp	r3, #0
    10d2:	db07      	blt.n	10e4 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10d6:	2b00      	cmp	r3, #0
    10d8:	d005      	beq.n	10e6 <_PrintUnsigned+0x14e>
    10da:	9a07      	ldr	r2, [sp, #28]
    10dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10de:	429a      	cmp	r2, r3
    10e0:	d3ed      	bcc.n	10be <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    10e2:	e000      	b.n	10e6 <_PrintUnsigned+0x14e>
            break;
    10e4:	bf00      	nop
}
    10e6:	bf00      	nop
    10e8:	b00b      	add	sp, #44	; 0x2c
    10ea:	f85d fb04 	ldr.w	pc, [sp], #4
    10ee:	bf00      	nop
    10f0:	00011824 	.word	0x00011824

000010f4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    10f4:	b500      	push	{lr}
    10f6:	b089      	sub	sp, #36	; 0x24
    10f8:	9005      	str	r0, [sp, #20]
    10fa:	9104      	str	r1, [sp, #16]
    10fc:	9203      	str	r2, [sp, #12]
    10fe:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1100:	9b04      	ldr	r3, [sp, #16]
    1102:	2b00      	cmp	r3, #0
    1104:	bfb8      	it	lt
    1106:	425b      	neglt	r3, r3
    1108:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    110a:	2301      	movs	r3, #1
    110c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    110e:	e007      	b.n	1120 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1110:	9b03      	ldr	r3, [sp, #12]
    1112:	9a06      	ldr	r2, [sp, #24]
    1114:	fb92 f3f3 	sdiv	r3, r2, r3
    1118:	9306      	str	r3, [sp, #24]
    Width++;
    111a:	9b07      	ldr	r3, [sp, #28]
    111c:	3301      	adds	r3, #1
    111e:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1120:	9b03      	ldr	r3, [sp, #12]
    1122:	9a06      	ldr	r2, [sp, #24]
    1124:	429a      	cmp	r2, r3
    1126:	daf3      	bge.n	1110 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1128:	9a02      	ldr	r2, [sp, #8]
    112a:	9b07      	ldr	r3, [sp, #28]
    112c:	429a      	cmp	r2, r3
    112e:	d901      	bls.n	1134 <_PrintInt+0x40>
    Width = NumDigits;
    1130:	9b02      	ldr	r3, [sp, #8]
    1132:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1136:	2b00      	cmp	r3, #0
    1138:	d00a      	beq.n	1150 <_PrintInt+0x5c>
    113a:	9b04      	ldr	r3, [sp, #16]
    113c:	2b00      	cmp	r3, #0
    113e:	db04      	blt.n	114a <_PrintInt+0x56>
    1140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1142:	f003 0304 	and.w	r3, r3, #4
    1146:	2b00      	cmp	r3, #0
    1148:	d002      	beq.n	1150 <_PrintInt+0x5c>
    FieldWidth--;
    114a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    114c:	3b01      	subs	r3, #1
    114e:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1152:	f003 0302 	and.w	r3, r3, #2
    1156:	2b00      	cmp	r3, #0
    1158:	d002      	beq.n	1160 <_PrintInt+0x6c>
    115a:	9b02      	ldr	r3, [sp, #8]
    115c:	2b00      	cmp	r3, #0
    115e:	d01c      	beq.n	119a <_PrintInt+0xa6>
    1160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1162:	f003 0301 	and.w	r3, r3, #1
    1166:	2b00      	cmp	r3, #0
    1168:	d117      	bne.n	119a <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    116a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    116c:	2b00      	cmp	r3, #0
    116e:	d014      	beq.n	119a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1170:	e00a      	b.n	1188 <_PrintInt+0x94>
        FieldWidth--;
    1172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1174:	3b01      	subs	r3, #1
    1176:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1178:	2120      	movs	r1, #32
    117a:	9805      	ldr	r0, [sp, #20]
    117c:	f7ff fecd 	bl	f1a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1180:	9b05      	ldr	r3, [sp, #20]
    1182:	68db      	ldr	r3, [r3, #12]
    1184:	2b00      	cmp	r3, #0
    1186:	db07      	blt.n	1198 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    118a:	2b00      	cmp	r3, #0
    118c:	d005      	beq.n	119a <_PrintInt+0xa6>
    118e:	9a07      	ldr	r2, [sp, #28]
    1190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1192:	429a      	cmp	r2, r3
    1194:	d3ed      	bcc.n	1172 <_PrintInt+0x7e>
    1196:	e000      	b.n	119a <_PrintInt+0xa6>
          break;
    1198:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    119a:	9b05      	ldr	r3, [sp, #20]
    119c:	68db      	ldr	r3, [r3, #12]
    119e:	2b00      	cmp	r3, #0
    11a0:	db4a      	blt.n	1238 <_PrintInt+0x144>
    if (v < 0) {
    11a2:	9b04      	ldr	r3, [sp, #16]
    11a4:	2b00      	cmp	r3, #0
    11a6:	da07      	bge.n	11b8 <_PrintInt+0xc4>
      v = -v;
    11a8:	9b04      	ldr	r3, [sp, #16]
    11aa:	425b      	negs	r3, r3
    11ac:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11ae:	212d      	movs	r1, #45	; 0x2d
    11b0:	9805      	ldr	r0, [sp, #20]
    11b2:	f7ff feb2 	bl	f1a <_StoreChar>
    11b6:	e008      	b.n	11ca <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ba:	f003 0304 	and.w	r3, r3, #4
    11be:	2b00      	cmp	r3, #0
    11c0:	d003      	beq.n	11ca <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    11c2:	212b      	movs	r1, #43	; 0x2b
    11c4:	9805      	ldr	r0, [sp, #20]
    11c6:	f7ff fea8 	bl	f1a <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    11ca:	9b05      	ldr	r3, [sp, #20]
    11cc:	68db      	ldr	r3, [r3, #12]
    11ce:	2b00      	cmp	r3, #0
    11d0:	db32      	blt.n	1238 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    11d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11d4:	f003 0302 	and.w	r3, r3, #2
    11d8:	2b00      	cmp	r3, #0
    11da:	d01f      	beq.n	121c <_PrintInt+0x128>
    11dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11de:	f003 0301 	and.w	r3, r3, #1
    11e2:	2b00      	cmp	r3, #0
    11e4:	d11a      	bne.n	121c <_PrintInt+0x128>
    11e6:	9b02      	ldr	r3, [sp, #8]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d117      	bne.n	121c <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    11ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ee:	2b00      	cmp	r3, #0
    11f0:	d014      	beq.n	121c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11f2:	e00a      	b.n	120a <_PrintInt+0x116>
            FieldWidth--;
    11f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11f6:	3b01      	subs	r3, #1
    11f8:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    11fa:	2130      	movs	r1, #48	; 0x30
    11fc:	9805      	ldr	r0, [sp, #20]
    11fe:	f7ff fe8c 	bl	f1a <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1202:	9b05      	ldr	r3, [sp, #20]
    1204:	68db      	ldr	r3, [r3, #12]
    1206:	2b00      	cmp	r3, #0
    1208:	db07      	blt.n	121a <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    120a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    120c:	2b00      	cmp	r3, #0
    120e:	d005      	beq.n	121c <_PrintInt+0x128>
    1210:	9a07      	ldr	r2, [sp, #28]
    1212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1214:	429a      	cmp	r2, r3
    1216:	d3ed      	bcc.n	11f4 <_PrintInt+0x100>
    1218:	e000      	b.n	121c <_PrintInt+0x128>
              break;
    121a:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    121c:	9b05      	ldr	r3, [sp, #20]
    121e:	68db      	ldr	r3, [r3, #12]
    1220:	2b00      	cmp	r3, #0
    1222:	db09      	blt.n	1238 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1224:	9904      	ldr	r1, [sp, #16]
    1226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1228:	9301      	str	r3, [sp, #4]
    122a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    122c:	9300      	str	r3, [sp, #0]
    122e:	9b02      	ldr	r3, [sp, #8]
    1230:	9a03      	ldr	r2, [sp, #12]
    1232:	9805      	ldr	r0, [sp, #20]
    1234:	f7ff feb0 	bl	f98 <_PrintUnsigned>
      }
    }
  }
}
    1238:	bf00      	nop
    123a:	b009      	add	sp, #36	; 0x24
    123c:	f85d fb04 	ldr.w	pc, [sp], #4

00001240 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1240:	b500      	push	{lr}
    1242:	b0a3      	sub	sp, #140	; 0x8c
    1244:	9005      	str	r0, [sp, #20]
    1246:	9104      	str	r1, [sp, #16]
    1248:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    124a:	ab06      	add	r3, sp, #24
    124c:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    124e:	2340      	movs	r3, #64	; 0x40
    1250:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1252:	2300      	movs	r3, #0
    1254:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1256:	9b05      	ldr	r3, [sp, #20]
    1258:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    125a:	2300      	movs	r3, #0
    125c:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    125e:	9b04      	ldr	r3, [sp, #16]
    1260:	781b      	ldrb	r3, [r3, #0]
    1262:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1266:	9b04      	ldr	r3, [sp, #16]
    1268:	3301      	adds	r3, #1
    126a:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    126c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1270:	2b00      	cmp	r3, #0
    1272:	f000 819c 	beq.w	15ae <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1276:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    127a:	2b25      	cmp	r3, #37	; 0x25
    127c:	f040 818b 	bne.w	1596 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1280:	2300      	movs	r3, #0
    1282:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1284:	2301      	movs	r3, #1
    1286:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1288:	9b04      	ldr	r3, [sp, #16]
    128a:	781b      	ldrb	r3, [r3, #0]
    128c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1290:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1294:	3b23      	subs	r3, #35	; 0x23
    1296:	2b0d      	cmp	r3, #13
    1298:	d83e      	bhi.n	1318 <SEGGER_RTT_vprintf+0xd8>
    129a:	a201      	add	r2, pc, #4	; (adr r2, 12a0 <SEGGER_RTT_vprintf+0x60>)
    129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12a0:	00001309 	.word	0x00001309
    12a4:	00001319 	.word	0x00001319
    12a8:	00001319 	.word	0x00001319
    12ac:	00001319 	.word	0x00001319
    12b0:	00001319 	.word	0x00001319
    12b4:	00001319 	.word	0x00001319
    12b8:	00001319 	.word	0x00001319
    12bc:	00001319 	.word	0x00001319
    12c0:	000012f9 	.word	0x000012f9
    12c4:	00001319 	.word	0x00001319
    12c8:	000012d9 	.word	0x000012d9
    12cc:	00001319 	.word	0x00001319
    12d0:	00001319 	.word	0x00001319
    12d4:	000012e9 	.word	0x000012e9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    12d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12da:	f043 0301 	orr.w	r3, r3, #1
    12de:	931e      	str	r3, [sp, #120]	; 0x78
    12e0:	9b04      	ldr	r3, [sp, #16]
    12e2:	3301      	adds	r3, #1
    12e4:	9304      	str	r3, [sp, #16]
    12e6:	e01a      	b.n	131e <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    12e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12ea:	f043 0302 	orr.w	r3, r3, #2
    12ee:	931e      	str	r3, [sp, #120]	; 0x78
    12f0:	9b04      	ldr	r3, [sp, #16]
    12f2:	3301      	adds	r3, #1
    12f4:	9304      	str	r3, [sp, #16]
    12f6:	e012      	b.n	131e <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    12f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12fa:	f043 0304 	orr.w	r3, r3, #4
    12fe:	931e      	str	r3, [sp, #120]	; 0x78
    1300:	9b04      	ldr	r3, [sp, #16]
    1302:	3301      	adds	r3, #1
    1304:	9304      	str	r3, [sp, #16]
    1306:	e00a      	b.n	131e <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1308:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    130a:	f043 0308 	orr.w	r3, r3, #8
    130e:	931e      	str	r3, [sp, #120]	; 0x78
    1310:	9b04      	ldr	r3, [sp, #16]
    1312:	3301      	adds	r3, #1
    1314:	9304      	str	r3, [sp, #16]
    1316:	e002      	b.n	131e <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1318:	2300      	movs	r3, #0
    131a:	9320      	str	r3, [sp, #128]	; 0x80
    131c:	bf00      	nop
        }
      } while (v);
    131e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1320:	2b00      	cmp	r3, #0
    1322:	d1b1      	bne.n	1288 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1324:	2300      	movs	r3, #0
    1326:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1328:	9b04      	ldr	r3, [sp, #16]
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1330:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1334:	2b2f      	cmp	r3, #47	; 0x2f
    1336:	d912      	bls.n	135e <SEGGER_RTT_vprintf+0x11e>
    1338:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    133c:	2b39      	cmp	r3, #57	; 0x39
    133e:	d80e      	bhi.n	135e <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1340:	9b04      	ldr	r3, [sp, #16]
    1342:	3301      	adds	r3, #1
    1344:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1346:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1348:	4613      	mov	r3, r2
    134a:	009b      	lsls	r3, r3, #2
    134c:	4413      	add	r3, r2
    134e:	005b      	lsls	r3, r3, #1
    1350:	461a      	mov	r2, r3
    1352:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1356:	4413      	add	r3, r2
    1358:	3b30      	subs	r3, #48	; 0x30
    135a:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    135c:	e7e4      	b.n	1328 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    135e:	2300      	movs	r3, #0
    1360:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1362:	9b04      	ldr	r3, [sp, #16]
    1364:	781b      	ldrb	r3, [r3, #0]
    1366:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    136a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136e:	2b2e      	cmp	r3, #46	; 0x2e
    1370:	d11d      	bne.n	13ae <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1372:	9b04      	ldr	r3, [sp, #16]
    1374:	3301      	adds	r3, #1
    1376:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1380:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1384:	2b2f      	cmp	r3, #47	; 0x2f
    1386:	d912      	bls.n	13ae <SEGGER_RTT_vprintf+0x16e>
    1388:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    138c:	2b39      	cmp	r3, #57	; 0x39
    138e:	d80e      	bhi.n	13ae <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1390:	9b04      	ldr	r3, [sp, #16]
    1392:	3301      	adds	r3, #1
    1394:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1396:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1398:	4613      	mov	r3, r2
    139a:	009b      	lsls	r3, r3, #2
    139c:	4413      	add	r3, r2
    139e:	005b      	lsls	r3, r3, #1
    13a0:	461a      	mov	r2, r3
    13a2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13a6:	4413      	add	r3, r2
    13a8:	3b30      	subs	r3, #48	; 0x30
    13aa:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13ac:	e7e4      	b.n	1378 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13ae:	9b04      	ldr	r3, [sp, #16]
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13b6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13ba:	2b6c      	cmp	r3, #108	; 0x6c
    13bc:	d003      	beq.n	13c6 <SEGGER_RTT_vprintf+0x186>
    13be:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c2:	2b68      	cmp	r3, #104	; 0x68
    13c4:	d107      	bne.n	13d6 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    13c6:	9b04      	ldr	r3, [sp, #16]
    13c8:	3301      	adds	r3, #1
    13ca:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    13cc:	9b04      	ldr	r3, [sp, #16]
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    13d4:	e7ef      	b.n	13b6 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    13d6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13da:	2b25      	cmp	r3, #37	; 0x25
    13dc:	f000 80d0 	beq.w	1580 <SEGGER_RTT_vprintf+0x340>
    13e0:	2b25      	cmp	r3, #37	; 0x25
    13e2:	f2c0 80d3 	blt.w	158c <SEGGER_RTT_vprintf+0x34c>
    13e6:	2b78      	cmp	r3, #120	; 0x78
    13e8:	f300 80d0 	bgt.w	158c <SEGGER_RTT_vprintf+0x34c>
    13ec:	2b58      	cmp	r3, #88	; 0x58
    13ee:	f2c0 80cd 	blt.w	158c <SEGGER_RTT_vprintf+0x34c>
    13f2:	3b58      	subs	r3, #88	; 0x58
    13f4:	2b20      	cmp	r3, #32
    13f6:	f200 80c9 	bhi.w	158c <SEGGER_RTT_vprintf+0x34c>
    13fa:	a201      	add	r2, pc, #4	; (adr r2, 1400 <SEGGER_RTT_vprintf+0x1c0>)
    13fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1400:	000014f1 	.word	0x000014f1
    1404:	0000158d 	.word	0x0000158d
    1408:	0000158d 	.word	0x0000158d
    140c:	0000158d 	.word	0x0000158d
    1410:	0000158d 	.word	0x0000158d
    1414:	0000158d 	.word	0x0000158d
    1418:	0000158d 	.word	0x0000158d
    141c:	0000158d 	.word	0x0000158d
    1420:	0000158d 	.word	0x0000158d
    1424:	0000158d 	.word	0x0000158d
    1428:	0000158d 	.word	0x0000158d
    142c:	00001485 	.word	0x00001485
    1430:	000014a9 	.word	0x000014a9
    1434:	0000158d 	.word	0x0000158d
    1438:	0000158d 	.word	0x0000158d
    143c:	0000158d 	.word	0x0000158d
    1440:	0000158d 	.word	0x0000158d
    1444:	0000158d 	.word	0x0000158d
    1448:	0000158d 	.word	0x0000158d
    144c:	0000158d 	.word	0x0000158d
    1450:	0000158d 	.word	0x0000158d
    1454:	0000158d 	.word	0x0000158d
    1458:	0000158d 	.word	0x0000158d
    145c:	0000158d 	.word	0x0000158d
    1460:	0000155d 	.word	0x0000155d
    1464:	0000158d 	.word	0x0000158d
    1468:	0000158d 	.word	0x0000158d
    146c:	00001515 	.word	0x00001515
    1470:	0000158d 	.word	0x0000158d
    1474:	000014cd 	.word	0x000014cd
    1478:	0000158d 	.word	0x0000158d
    147c:	0000158d 	.word	0x0000158d
    1480:	000014f1 	.word	0x000014f1
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1484:	9b03      	ldr	r3, [sp, #12]
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	1d19      	adds	r1, r3, #4
    148a:	9a03      	ldr	r2, [sp, #12]
    148c:	6011      	str	r1, [r2, #0]
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1492:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1494:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1498:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    149c:	ab16      	add	r3, sp, #88	; 0x58
    149e:	4611      	mov	r1, r2
    14a0:	4618      	mov	r0, r3
    14a2:	f7ff fd3a 	bl	f1a <_StoreChar>
        break;
    14a6:	e072      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14a8:	9b03      	ldr	r3, [sp, #12]
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	1d19      	adds	r1, r3, #4
    14ae:	9a03      	ldr	r2, [sp, #12]
    14b0:	6011      	str	r1, [r2, #0]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14b6:	a816      	add	r0, sp, #88	; 0x58
    14b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14ba:	9301      	str	r3, [sp, #4]
    14bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14be:	9300      	str	r3, [sp, #0]
    14c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14c2:	220a      	movs	r2, #10
    14c4:	9920      	ldr	r1, [sp, #128]	; 0x80
    14c6:	f7ff fe15 	bl	10f4 <_PrintInt>
        break;
    14ca:	e060      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    14cc:	9b03      	ldr	r3, [sp, #12]
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	1d19      	adds	r1, r3, #4
    14d2:	9a03      	ldr	r2, [sp, #12]
    14d4:	6011      	str	r1, [r2, #0]
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    14da:	9920      	ldr	r1, [sp, #128]	; 0x80
    14dc:	a816      	add	r0, sp, #88	; 0x58
    14de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14e0:	9301      	str	r3, [sp, #4]
    14e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14e4:	9300      	str	r3, [sp, #0]
    14e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14e8:	220a      	movs	r2, #10
    14ea:	f7ff fd55 	bl	f98 <_PrintUnsigned>
        break;
    14ee:	e04e      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    14f0:	9b03      	ldr	r3, [sp, #12]
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	1d19      	adds	r1, r3, #4
    14f6:	9a03      	ldr	r2, [sp, #12]
    14f8:	6011      	str	r1, [r2, #0]
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    14fe:	9920      	ldr	r1, [sp, #128]	; 0x80
    1500:	a816      	add	r0, sp, #88	; 0x58
    1502:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1504:	9301      	str	r3, [sp, #4]
    1506:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1508:	9300      	str	r3, [sp, #0]
    150a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    150c:	2210      	movs	r2, #16
    150e:	f7ff fd43 	bl	f98 <_PrintUnsigned>
        break;
    1512:	e03c      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1514:	9b03      	ldr	r3, [sp, #12]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	1d19      	adds	r1, r3, #4
    151a:	9a03      	ldr	r2, [sp, #12]
    151c:	6011      	str	r1, [r2, #0]
    151e:	681b      	ldr	r3, [r3, #0]
    1520:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1522:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1524:	2b00      	cmp	r3, #0
    1526:	d101      	bne.n	152c <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1528:	4b2c      	ldr	r3, [pc, #176]	; (15dc <SEGGER_RTT_vprintf+0x39c>)
    152a:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    152c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    152e:	781b      	ldrb	r3, [r3, #0]
    1530:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1534:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1536:	3301      	adds	r3, #1
    1538:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    153a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    153e:	2b00      	cmp	r3, #0
    1540:	d00a      	beq.n	1558 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1542:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1546:	ab16      	add	r3, sp, #88	; 0x58
    1548:	4611      	mov	r1, r2
    154a:	4618      	mov	r0, r3
    154c:	f7ff fce5 	bl	f1a <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1550:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1552:	2b00      	cmp	r3, #0
    1554:	daea      	bge.n	152c <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1556:	e01a      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
              break;
    1558:	bf00      	nop
        break;
    155a:	e018      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    155c:	9b03      	ldr	r3, [sp, #12]
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	1d19      	adds	r1, r3, #4
    1562:	9a03      	ldr	r2, [sp, #12]
    1564:	6011      	str	r1, [r2, #0]
    1566:	681b      	ldr	r3, [r3, #0]
    1568:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    156a:	9920      	ldr	r1, [sp, #128]	; 0x80
    156c:	a816      	add	r0, sp, #88	; 0x58
    156e:	2300      	movs	r3, #0
    1570:	9301      	str	r3, [sp, #4]
    1572:	2308      	movs	r3, #8
    1574:	9300      	str	r3, [sp, #0]
    1576:	2308      	movs	r3, #8
    1578:	2210      	movs	r2, #16
    157a:	f7ff fd0d 	bl	f98 <_PrintUnsigned>
        break;
    157e:	e006      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1580:	ab16      	add	r3, sp, #88	; 0x58
    1582:	2125      	movs	r1, #37	; 0x25
    1584:	4618      	mov	r0, r3
    1586:	f7ff fcc8 	bl	f1a <_StoreChar>
        break;
    158a:	e000      	b.n	158e <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    158c:	bf00      	nop
      }
      sFormat++;
    158e:	9b04      	ldr	r3, [sp, #16]
    1590:	3301      	adds	r3, #1
    1592:	9304      	str	r3, [sp, #16]
    1594:	e006      	b.n	15a4 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1596:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    159a:	ab16      	add	r3, sp, #88	; 0x58
    159c:	4611      	mov	r1, r2
    159e:	4618      	mov	r0, r3
    15a0:	f7ff fcbb 	bl	f1a <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15a6:	2b00      	cmp	r3, #0
    15a8:	f6bf ae59 	bge.w	125e <SEGGER_RTT_vprintf+0x1e>
    15ac:	e000      	b.n	15b0 <SEGGER_RTT_vprintf+0x370>
      break;
    15ae:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15b2:	2b00      	cmp	r3, #0
    15b4:	dd0c      	ble.n	15d0 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15b8:	2b00      	cmp	r3, #0
    15ba:	d005      	beq.n	15c8 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15be:	ab06      	add	r3, sp, #24
    15c0:	4619      	mov	r1, r3
    15c2:	9805      	ldr	r0, [sp, #20]
    15c4:	f7ff fc7e 	bl	ec4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    15c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15cc:	4413      	add	r3, r2
    15ce:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    15d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    15d2:	4618      	mov	r0, r3
    15d4:	b023      	add	sp, #140	; 0x8c
    15d6:	f85d fb04 	ldr.w	pc, [sp], #4
    15da:	bf00      	nop
    15dc:	000107c8 	.word	0x000107c8

000015e0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    15e0:	b40e      	push	{r1, r2, r3}
    15e2:	b500      	push	{lr}
    15e4:	b084      	sub	sp, #16
    15e6:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    15e8:	ab06      	add	r3, sp, #24
    15ea:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    15ec:	ab02      	add	r3, sp, #8
    15ee:	461a      	mov	r2, r3
    15f0:	9905      	ldr	r1, [sp, #20]
    15f2:	9801      	ldr	r0, [sp, #4]
    15f4:	f7ff fe24 	bl	1240 <SEGGER_RTT_vprintf>
    15f8:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    15fa:	9b03      	ldr	r3, [sp, #12]
}
    15fc:	4618      	mov	r0, r3
    15fe:	b004      	add	sp, #16
    1600:	f85d eb04 	ldr.w	lr, [sp], #4
    1604:	b003      	add	sp, #12
    1606:	4770      	bx	lr

00001608 <memcpy>:
    1608:	440a      	add	r2, r1
    160a:	4291      	cmp	r1, r2
    160c:	f100 33ff 	add.w	r3, r0, #4294967295
    1610:	d100      	bne.n	1614 <memcpy+0xc>
    1612:	4770      	bx	lr
    1614:	b510      	push	{r4, lr}
    1616:	f811 4b01 	ldrb.w	r4, [r1], #1
    161a:	f803 4f01 	strb.w	r4, [r3, #1]!
    161e:	4291      	cmp	r1, r2
    1620:	d1f9      	bne.n	1616 <memcpy+0xe>
    1622:	bd10      	pop	{r4, pc}

00001624 <memset>:
    1624:	4402      	add	r2, r0
    1626:	4603      	mov	r3, r0
    1628:	4293      	cmp	r3, r2
    162a:	d100      	bne.n	162e <memset+0xa>
    162c:	4770      	bx	lr
    162e:	f803 1b01 	strb.w	r1, [r3], #1
    1632:	e7f9      	b.n	1628 <memset+0x4>

00001634 <IoHwAb_AdcNotification_0>:
{
    1634:	b508      	push	{r3, lr}
    AdcFlag = TRUE;
    1636:	4b04      	ldr	r3, [pc, #16]	; (1648 <IoHwAb_AdcNotification_0+0x14>)
    1638:	2201      	movs	r2, #1
    163a:	701a      	strb	r2, [r3, #0]
    Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );    
    163c:	4903      	ldr	r1, [pc, #12]	; (164c <IoHwAb_AdcNotification_0+0x18>)
    163e:	2000      	movs	r0, #0
    1640:	f006 fc18 	bl	7e74 <Adc_ReadGroup>
}
    1644:	bf00      	nop
    1646:	bd08      	pop	{r3, pc}
    1648:	1fff8b40 	.word	0x1fff8b40
    164c:	1fff8b44 	.word	0x1fff8b44

00001650 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1650:	b086      	sub	sp, #24
    1652:	9003      	str	r0, [sp, #12]
    1654:	9102      	str	r1, [sp, #8]
    1656:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1658:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    165c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1660:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1662:	9b01      	ldr	r3, [sp, #4]
    1664:	2b00      	cmp	r3, #0
    1666:	d007      	beq.n	1678 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1668:	9b03      	ldr	r3, [sp, #12]
    166a:	3310      	adds	r3, #16
    166c:	009b      	lsls	r3, r3, #2
    166e:	9a05      	ldr	r2, [sp, #20]
    1670:	4413      	add	r3, r2
    1672:	681a      	ldr	r2, [r3, #0]
    1674:	9b01      	ldr	r3, [sp, #4]
    1676:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1678:	9b03      	ldr	r3, [sp, #12]
    167a:	3310      	adds	r3, #16
    167c:	009b      	lsls	r3, r3, #2
    167e:	9a05      	ldr	r2, [sp, #20]
    1680:	4413      	add	r3, r2
    1682:	9a02      	ldr	r2, [sp, #8]
    1684:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1686:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    168a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    168e:	bf00      	nop
    1690:	b006      	add	sp, #24
    1692:	4770      	bx	lr

00001694 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1694:	b082      	sub	sp, #8
    1696:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1698:	9b01      	ldr	r3, [sp, #4]
    169a:	f003 021f 	and.w	r2, r3, #31
    169e:	4905      	ldr	r1, [pc, #20]	; (16b4 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    16a0:	9b01      	ldr	r3, [sp, #4]
    16a2:	095b      	lsrs	r3, r3, #5
    16a4:	2001      	movs	r0, #1
    16a6:	fa00 f202 	lsl.w	r2, r0, r2
    16aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16ae:	bf00      	nop
    16b0:	b002      	add	sp, #8
    16b2:	4770      	bx	lr
    16b4:	e000e100 	.word	0xe000e100

000016b8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16b8:	b082      	sub	sp, #8
    16ba:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	f003 021f 	and.w	r2, r3, #31
    16c2:	4906      	ldr	r1, [pc, #24]	; (16dc <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    16c4:	9b01      	ldr	r3, [sp, #4]
    16c6:	095b      	lsrs	r3, r3, #5
    16c8:	2001      	movs	r0, #1
    16ca:	fa00 f202 	lsl.w	r2, r0, r2
    16ce:	3320      	adds	r3, #32
    16d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16d4:	bf00      	nop
    16d6:	b002      	add	sp, #8
    16d8:	4770      	bx	lr
    16da:	bf00      	nop
    16dc:	e000e100 	.word	0xe000e100

000016e0 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    16e0:	b084      	sub	sp, #16
    16e2:	9001      	str	r0, [sp, #4]
    16e4:	460b      	mov	r3, r1
    16e6:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    16ea:	2304      	movs	r3, #4
    16ec:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    16f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    16f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16f8:	fa02 f103 	lsl.w	r1, r2, r3
    16fc:	4a04      	ldr	r2, [pc, #16]	; (1710 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    16fe:	9b01      	ldr	r3, [sp, #4]
    1700:	b2c9      	uxtb	r1, r1
    1702:	4413      	add	r3, r2
    1704:	460a      	mov	r2, r1
    1706:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    170a:	bf00      	nop
    170c:	b004      	add	sp, #16
    170e:	4770      	bx	lr
    1710:	e000e100 	.word	0xe000e100

00001714 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1714:	b084      	sub	sp, #16
    1716:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1718:	2304      	movs	r3, #4
    171a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    171e:	4a09      	ldr	r2, [pc, #36]	; (1744 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1720:	9b01      	ldr	r3, [sp, #4]
    1722:	4413      	add	r3, r2
    1724:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1728:	b2db      	uxtb	r3, r3
    172a:	461a      	mov	r2, r3
    172c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1730:	fa42 f303 	asr.w	r3, r2, r3
    1734:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1738:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    173c:	4618      	mov	r0, r3
    173e:	b004      	add	sp, #16
    1740:	4770      	bx	lr
    1742:	bf00      	nop
    1744:	e000e100 	.word	0xe000e100

00001748 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1748:	b082      	sub	sp, #8
    174a:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    174c:	9b01      	ldr	r3, [sp, #4]
    174e:	f003 021f 	and.w	r2, r3, #31
    1752:	4906      	ldr	r1, [pc, #24]	; (176c <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1754:	9b01      	ldr	r3, [sp, #4]
    1756:	095b      	lsrs	r3, r3, #5
    1758:	2001      	movs	r0, #1
    175a:	fa00 f202 	lsl.w	r2, r0, r2
    175e:	3360      	adds	r3, #96	; 0x60
    1760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1764:	bf00      	nop
    1766:	b002      	add	sp, #8
    1768:	4770      	bx	lr
    176a:	bf00      	nop
    176c:	e000e100 	.word	0xe000e100

00001770 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1770:	b500      	push	{lr}
    1772:	b085      	sub	sp, #20
    1774:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1776:	2300      	movs	r3, #0
    1778:	9303      	str	r3, [sp, #12]
    177a:	e05d      	b.n	1838 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    177c:	9b01      	ldr	r3, [sp, #4]
    177e:	6859      	ldr	r1, [r3, #4]
    1780:	9a03      	ldr	r2, [sp, #12]
    1782:	4613      	mov	r3, r2
    1784:	005b      	lsls	r3, r3, #1
    1786:	4413      	add	r3, r2
    1788:	009b      	lsls	r3, r3, #2
    178a:	440b      	add	r3, r1
    178c:	681b      	ldr	r3, [r3, #0]
    178e:	4618      	mov	r0, r3
    1790:	f000 f899 	bl	18c6 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1794:	9b01      	ldr	r3, [sp, #4]
    1796:	6859      	ldr	r1, [r3, #4]
    1798:	9a03      	ldr	r2, [sp, #12]
    179a:	4613      	mov	r3, r2
    179c:	005b      	lsls	r3, r3, #1
    179e:	4413      	add	r3, r2
    17a0:	009b      	lsls	r3, r3, #2
    17a2:	440b      	add	r3, r1
    17a4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    17a6:	9b01      	ldr	r3, [sp, #4]
    17a8:	6859      	ldr	r1, [r3, #4]
    17aa:	9a03      	ldr	r2, [sp, #12]
    17ac:	4613      	mov	r3, r2
    17ae:	005b      	lsls	r3, r3, #1
    17b0:	4413      	add	r3, r2
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17b6:	795b      	ldrb	r3, [r3, #5]
    17b8:	4619      	mov	r1, r3
    17ba:	f000 f869 	bl	1890 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17be:	9b01      	ldr	r3, [sp, #4]
    17c0:	6859      	ldr	r1, [r3, #4]
    17c2:	9a03      	ldr	r2, [sp, #12]
    17c4:	4613      	mov	r3, r2
    17c6:	005b      	lsls	r3, r3, #1
    17c8:	4413      	add	r3, r2
    17ca:	009b      	lsls	r3, r3, #2
    17cc:	440b      	add	r3, r1
    17ce:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    17d0:	9b01      	ldr	r3, [sp, #4]
    17d2:	6859      	ldr	r1, [r3, #4]
    17d4:	9a03      	ldr	r2, [sp, #12]
    17d6:	4613      	mov	r3, r2
    17d8:	005b      	lsls	r3, r3, #1
    17da:	4413      	add	r3, r2
    17dc:	009b      	lsls	r3, r3, #2
    17de:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17e0:	689b      	ldr	r3, [r3, #8]
    17e2:	2200      	movs	r2, #0
    17e4:	4619      	mov	r1, r3
    17e6:	f000 f831 	bl	184c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    17ea:	9b01      	ldr	r3, [sp, #4]
    17ec:	6859      	ldr	r1, [r3, #4]
    17ee:	9a03      	ldr	r2, [sp, #12]
    17f0:	4613      	mov	r3, r2
    17f2:	005b      	lsls	r3, r3, #1
    17f4:	4413      	add	r3, r2
    17f6:	009b      	lsls	r3, r3, #2
    17f8:	440b      	add	r3, r1
    17fa:	791b      	ldrb	r3, [r3, #4]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d00c      	beq.n	181a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1800:	9b01      	ldr	r3, [sp, #4]
    1802:	6859      	ldr	r1, [r3, #4]
    1804:	9a03      	ldr	r2, [sp, #12]
    1806:	4613      	mov	r3, r2
    1808:	005b      	lsls	r3, r3, #1
    180a:	4413      	add	r3, r2
    180c:	009b      	lsls	r3, r3, #2
    180e:	440b      	add	r3, r1
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	4618      	mov	r0, r3
    1814:	f000 f828 	bl	1868 <IntCtrl_Ip_EnableIrq>
    1818:	e00b      	b.n	1832 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    181a:	9b01      	ldr	r3, [sp, #4]
    181c:	6859      	ldr	r1, [r3, #4]
    181e:	9a03      	ldr	r2, [sp, #12]
    1820:	4613      	mov	r3, r2
    1822:	005b      	lsls	r3, r3, #1
    1824:	4413      	add	r3, r2
    1826:	009b      	lsls	r3, r3, #2
    1828:	440b      	add	r3, r1
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	4618      	mov	r0, r3
    182e:	f000 f825 	bl	187c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1832:	9b03      	ldr	r3, [sp, #12]
    1834:	3301      	adds	r3, #1
    1836:	9303      	str	r3, [sp, #12]
    1838:	9b01      	ldr	r3, [sp, #4]
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	9a03      	ldr	r2, [sp, #12]
    183e:	429a      	cmp	r2, r3
    1840:	d39c      	bcc.n	177c <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1842:	2300      	movs	r3, #0
}
    1844:	4618      	mov	r0, r3
    1846:	b005      	add	sp, #20
    1848:	f85d fb04 	ldr.w	pc, [sp], #4

0000184c <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    184c:	b500      	push	{lr}
    184e:	b085      	sub	sp, #20
    1850:	9003      	str	r0, [sp, #12]
    1852:	9102      	str	r1, [sp, #8]
    1854:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1856:	9a01      	ldr	r2, [sp, #4]
    1858:	9902      	ldr	r1, [sp, #8]
    185a:	9803      	ldr	r0, [sp, #12]
    185c:	f7ff fef8 	bl	1650 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1860:	bf00      	nop
    1862:	b005      	add	sp, #20
    1864:	f85d fb04 	ldr.w	pc, [sp], #4

00001868 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1868:	b500      	push	{lr}
    186a:	b083      	sub	sp, #12
    186c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    186e:	9801      	ldr	r0, [sp, #4]
    1870:	f7ff ff10 	bl	1694 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1874:	bf00      	nop
    1876:	b003      	add	sp, #12
    1878:	f85d fb04 	ldr.w	pc, [sp], #4

0000187c <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    187c:	b500      	push	{lr}
    187e:	b083      	sub	sp, #12
    1880:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1882:	9801      	ldr	r0, [sp, #4]
    1884:	f7ff ff18 	bl	16b8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1888:	bf00      	nop
    188a:	b003      	add	sp, #12
    188c:	f85d fb04 	ldr.w	pc, [sp], #4

00001890 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1890:	b500      	push	{lr}
    1892:	b083      	sub	sp, #12
    1894:	9001      	str	r0, [sp, #4]
    1896:	460b      	mov	r3, r1
    1898:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    189c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18a0:	4619      	mov	r1, r3
    18a2:	9801      	ldr	r0, [sp, #4]
    18a4:	f7ff ff1c 	bl	16e0 <IntCtrl_Ip_SetPriorityPrivileged>
}
    18a8:	bf00      	nop
    18aa:	b003      	add	sp, #12
    18ac:	f85d fb04 	ldr.w	pc, [sp], #4

000018b0 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    18b0:	b500      	push	{lr}
    18b2:	b083      	sub	sp, #12
    18b4:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    18b6:	9801      	ldr	r0, [sp, #4]
    18b8:	f7ff ff2c 	bl	1714 <IntCtrl_Ip_GetPriorityPrivileged>
    18bc:	4603      	mov	r3, r0
}
    18be:	4618      	mov	r0, r3
    18c0:	b003      	add	sp, #12
    18c2:	f85d fb04 	ldr.w	pc, [sp], #4

000018c6 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    18c6:	b500      	push	{lr}
    18c8:	b083      	sub	sp, #12
    18ca:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    18cc:	9801      	ldr	r0, [sp, #4]
    18ce:	f7ff ff3b 	bl	1748 <IntCtrl_Ip_ClearPendingPrivileged>
}
    18d2:	bf00      	nop
    18d4:	b003      	add	sp, #12
    18d6:	f85d fb04 	ldr.w	pc, [sp], #4
    18da:	bf00      	nop

000018dc <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    18dc:	b500      	push	{lr}
    18de:	b083      	sub	sp, #12
    18e0:	9001      	str	r0, [sp, #4]
    18e2:	460b      	mov	r3, r1
    18e4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    18e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d003      	beq.n	18f8 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    18f0:	9801      	ldr	r0, [sp, #4]
    18f2:	f7ff ffb9 	bl	1868 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    18f6:	e002      	b.n	18fe <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    18f8:	9801      	ldr	r0, [sp, #4]
    18fa:	f7ff ffbf 	bl	187c <IntCtrl_Ip_DisableIrq>
}
    18fe:	bf00      	nop
    1900:	b003      	add	sp, #12
    1902:	f85d fb04 	ldr.w	pc, [sp], #4

00001906 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1906:	b500      	push	{lr}
    1908:	b083      	sub	sp, #12
    190a:	9001      	str	r0, [sp, #4]
    190c:	460b      	mov	r3, r1
    190e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1912:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1916:	4619      	mov	r1, r3
    1918:	9801      	ldr	r0, [sp, #4]
    191a:	f7ff ffb9 	bl	1890 <IntCtrl_Ip_SetPriority>
}
    191e:	bf00      	nop
    1920:	b003      	add	sp, #12
    1922:	f85d fb04 	ldr.w	pc, [sp], #4

00001926 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1926:	b500      	push	{lr}
    1928:	b083      	sub	sp, #12
    192a:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    192c:	9801      	ldr	r0, [sp, #4]
    192e:	f7ff ffbf 	bl	18b0 <IntCtrl_Ip_GetPriority>
    1932:	4603      	mov	r3, r0
}
    1934:	4618      	mov	r0, r3
    1936:	b003      	add	sp, #12
    1938:	f85d fb04 	ldr.w	pc, [sp], #4

0000193c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    193c:	b500      	push	{lr}
    193e:	b085      	sub	sp, #20
    1940:	9003      	str	r0, [sp, #12]
    1942:	9102      	str	r1, [sp, #8]
    1944:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1946:	9a01      	ldr	r2, [sp, #4]
    1948:	9902      	ldr	r1, [sp, #8]
    194a:	9803      	ldr	r0, [sp, #12]
    194c:	f7ff ff7e 	bl	184c <IntCtrl_Ip_InstallHandler>
}
    1950:	bf00      	nop
    1952:	b005      	add	sp, #20
    1954:	f85d fb04 	ldr.w	pc, [sp], #4

00001958 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1958:	b500      	push	{lr}
    195a:	b085      	sub	sp, #20
    195c:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    195e:	2300      	movs	r3, #0
    1960:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1964:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1968:	4a05      	ldr	r2, [pc, #20]	; (1980 <Platform_Init+0x28>)
    196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	4618      	mov	r0, r3
    1972:	f000 f8c7 	bl	1b04 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1976:	bf00      	nop
    1978:	b005      	add	sp, #20
    197a:	f85d fb04 	ldr.w	pc, [sp], #4
    197e:	bf00      	nop
    1980:	000114d0 	.word	0x000114d0

00001984 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1984:	b500      	push	{lr}
    1986:	b085      	sub	sp, #20
    1988:	9001      	str	r0, [sp, #4]
    198a:	460b      	mov	r3, r1
    198c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1990:	2300      	movs	r3, #0
    1992:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1996:	f89d 3003 	ldrb.w	r3, [sp, #3]
    199a:	4619      	mov	r1, r3
    199c:	9801      	ldr	r0, [sp, #4]
    199e:	f7ff ff9d 	bl	18dc <Platform_Ipw_SetIrq>
    }
    return RetValue;
    19a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19a6:	4618      	mov	r0, r3
    19a8:	b005      	add	sp, #20
    19aa:	f85d fb04 	ldr.w	pc, [sp], #4

000019ae <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    19ae:	b500      	push	{lr}
    19b0:	b085      	sub	sp, #20
    19b2:	9001      	str	r0, [sp, #4]
    19b4:	460b      	mov	r3, r1
    19b6:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19ba:	2300      	movs	r3, #0
    19bc:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    19c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19c4:	4619      	mov	r1, r3
    19c6:	9801      	ldr	r0, [sp, #4]
    19c8:	f7ff ff9d 	bl	1906 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    19cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19d0:	4618      	mov	r0, r3
    19d2:	b005      	add	sp, #20
    19d4:	f85d fb04 	ldr.w	pc, [sp], #4

000019d8 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    19d8:	b500      	push	{lr}
    19da:	b085      	sub	sp, #20
    19dc:	9001      	str	r0, [sp, #4]
    19de:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19e0:	2300      	movs	r3, #0
    19e2:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    19e6:	9801      	ldr	r0, [sp, #4]
    19e8:	f7ff ff9d 	bl	1926 <Platform_Ipw_GetIrqPriority>
    19ec:	4603      	mov	r3, r0
    19ee:	461a      	mov	r2, r3
    19f0:	9b00      	ldr	r3, [sp, #0]
    19f2:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    19f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19f8:	4618      	mov	r0, r3
    19fa:	b005      	add	sp, #20
    19fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001a00 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a00:	b500      	push	{lr}
    1a02:	b087      	sub	sp, #28
    1a04:	9003      	str	r0, [sp, #12]
    1a06:	9102      	str	r1, [sp, #8]
    1a08:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a0a:	2300      	movs	r3, #0
    1a0c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a10:	9a01      	ldr	r2, [sp, #4]
    1a12:	9902      	ldr	r1, [sp, #8]
    1a14:	9803      	ldr	r0, [sp, #12]
    1a16:	f7ff ff91 	bl	193c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a1e:	4618      	mov	r0, r3
    1a20:	b007      	add	sp, #28
    1a22:	f85d fb04 	ldr.w	pc, [sp], #4
    1a26:	bf00      	nop

00001a28 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a28:	b500      	push	{lr}
    1a2a:	b085      	sub	sp, #20
    1a2c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a2e:	2300      	movs	r3, #0
    1a30:	9303      	str	r3, [sp, #12]
    1a32:	e05d      	b.n	1af0 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a34:	9b01      	ldr	r3, [sp, #4]
    1a36:	6859      	ldr	r1, [r3, #4]
    1a38:	9a03      	ldr	r2, [sp, #12]
    1a3a:	4613      	mov	r3, r2
    1a3c:	005b      	lsls	r3, r3, #1
    1a3e:	4413      	add	r3, r2
    1a40:	009b      	lsls	r3, r3, #2
    1a42:	440b      	add	r3, r1
    1a44:	681b      	ldr	r3, [r3, #0]
    1a46:	4618      	mov	r0, r3
    1a48:	f7ff ff3d 	bl	18c6 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a4c:	9b01      	ldr	r3, [sp, #4]
    1a4e:	6859      	ldr	r1, [r3, #4]
    1a50:	9a03      	ldr	r2, [sp, #12]
    1a52:	4613      	mov	r3, r2
    1a54:	005b      	lsls	r3, r3, #1
    1a56:	4413      	add	r3, r2
    1a58:	009b      	lsls	r3, r3, #2
    1a5a:	440b      	add	r3, r1
    1a5c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	6859      	ldr	r1, [r3, #4]
    1a62:	9a03      	ldr	r2, [sp, #12]
    1a64:	4613      	mov	r3, r2
    1a66:	005b      	lsls	r3, r3, #1
    1a68:	4413      	add	r3, r2
    1a6a:	009b      	lsls	r3, r3, #2
    1a6c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a6e:	795b      	ldrb	r3, [r3, #5]
    1a70:	4619      	mov	r1, r3
    1a72:	f7ff ff0d 	bl	1890 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a76:	9b01      	ldr	r3, [sp, #4]
    1a78:	6859      	ldr	r1, [r3, #4]
    1a7a:	9a03      	ldr	r2, [sp, #12]
    1a7c:	4613      	mov	r3, r2
    1a7e:	005b      	lsls	r3, r3, #1
    1a80:	4413      	add	r3, r2
    1a82:	009b      	lsls	r3, r3, #2
    1a84:	440b      	add	r3, r1
    1a86:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a88:	9b01      	ldr	r3, [sp, #4]
    1a8a:	6859      	ldr	r1, [r3, #4]
    1a8c:	9a03      	ldr	r2, [sp, #12]
    1a8e:	4613      	mov	r3, r2
    1a90:	005b      	lsls	r3, r3, #1
    1a92:	4413      	add	r3, r2
    1a94:	009b      	lsls	r3, r3, #2
    1a96:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a98:	689b      	ldr	r3, [r3, #8]
    1a9a:	2200      	movs	r2, #0
    1a9c:	4619      	mov	r1, r3
    1a9e:	f7ff fed5 	bl	184c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1aa2:	9b01      	ldr	r3, [sp, #4]
    1aa4:	6859      	ldr	r1, [r3, #4]
    1aa6:	9a03      	ldr	r2, [sp, #12]
    1aa8:	4613      	mov	r3, r2
    1aaa:	005b      	lsls	r3, r3, #1
    1aac:	4413      	add	r3, r2
    1aae:	009b      	lsls	r3, r3, #2
    1ab0:	440b      	add	r3, r1
    1ab2:	791b      	ldrb	r3, [r3, #4]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d00c      	beq.n	1ad2 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ab8:	9b01      	ldr	r3, [sp, #4]
    1aba:	6859      	ldr	r1, [r3, #4]
    1abc:	9a03      	ldr	r2, [sp, #12]
    1abe:	4613      	mov	r3, r2
    1ac0:	005b      	lsls	r3, r3, #1
    1ac2:	4413      	add	r3, r2
    1ac4:	009b      	lsls	r3, r3, #2
    1ac6:	440b      	add	r3, r1
    1ac8:	681b      	ldr	r3, [r3, #0]
    1aca:	4618      	mov	r0, r3
    1acc:	f7ff fecc 	bl	1868 <IntCtrl_Ip_EnableIrq>
    1ad0:	e00b      	b.n	1aea <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ad2:	9b01      	ldr	r3, [sp, #4]
    1ad4:	6859      	ldr	r1, [r3, #4]
    1ad6:	9a03      	ldr	r2, [sp, #12]
    1ad8:	4613      	mov	r3, r2
    1ada:	005b      	lsls	r3, r3, #1
    1adc:	4413      	add	r3, r2
    1ade:	009b      	lsls	r3, r3, #2
    1ae0:	440b      	add	r3, r1
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	4618      	mov	r0, r3
    1ae6:	f7ff fec9 	bl	187c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1aea:	9b03      	ldr	r3, [sp, #12]
    1aec:	3301      	adds	r3, #1
    1aee:	9303      	str	r3, [sp, #12]
    1af0:	9b01      	ldr	r3, [sp, #4]
    1af2:	681b      	ldr	r3, [r3, #0]
    1af4:	9a03      	ldr	r2, [sp, #12]
    1af6:	429a      	cmp	r2, r3
    1af8:	d39c      	bcc.n	1a34 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1afa:	2300      	movs	r3, #0
}
    1afc:	4618      	mov	r0, r3
    1afe:	b005      	add	sp, #20
    1b00:	f85d fb04 	ldr.w	pc, [sp], #4

00001b04 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b04:	b500      	push	{lr}
    1b06:	b085      	sub	sp, #20
    1b08:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b0a:	2300      	movs	r3, #0
    1b0c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b10:	9b01      	ldr	r3, [sp, #4]
    1b12:	681b      	ldr	r3, [r3, #0]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d007      	beq.n	1b28 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b18:	9b01      	ldr	r3, [sp, #4]
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	4618      	mov	r0, r3
    1b1e:	f7ff ff83 	bl	1a28 <Platform_Ipw_InitIntCtrl>
    1b22:	4603      	mov	r3, r0
    1b24:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b2c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b2e:	bf00      	nop
    1b30:	b005      	add	sp, #20
    1b32:	f85d fb04 	ldr.w	pc, [sp], #4

00001b36 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b36:	2300      	movs	r3, #0
}
    1b38:	4618      	mov	r0, r3
    1b3a:	4770      	bx	lr

00001b3c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b3c:	b082      	sub	sp, #8
    1b3e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b40:	2301      	movs	r3, #1
}
    1b42:	4618      	mov	r0, r3
    1b44:	b002      	add	sp, #8
    1b46:	4770      	bx	lr

00001b48 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b48:	b082      	sub	sp, #8
    1b4a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b4c:	bf00      	nop
    1b4e:	b002      	add	sp, #8
    1b50:	4770      	bx	lr

00001b52 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b52:	b082      	sub	sp, #8
    1b54:	9001      	str	r0, [sp, #4]
    return Micros;
    1b56:	9b01      	ldr	r3, [sp, #4]
}
    1b58:	4618      	mov	r0, r3
    1b5a:	b002      	add	sp, #8
    1b5c:	4770      	bx	lr

00001b5e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b5e:	b500      	push	{lr}
    1b60:	b083      	sub	sp, #12
    1b62:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b64:	f000 f86c 	bl	1c40 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b68:	bf00      	nop
    1b6a:	b003      	add	sp, #12
    1b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b70 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b70:	b500      	push	{lr}
    1b72:	b085      	sub	sp, #20
    1b74:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b76:	2300      	movs	r3, #0
    1b78:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b7a:	9b01      	ldr	r3, [sp, #4]
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d003      	beq.n	1b88 <OsIf_GetCounter+0x18>
    1b80:	9b01      	ldr	r3, [sp, #4]
    1b82:	2b01      	cmp	r3, #1
    1b84:	d004      	beq.n	1b90 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b86:	e007      	b.n	1b98 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b88:	f7ff ffd5 	bl	1b36 <OsIf_Timer_Dummy_GetCounter>
    1b8c:	9003      	str	r0, [sp, #12]
            break;
    1b8e:	e003      	b.n	1b98 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1b90:	f000 f872 	bl	1c78 <OsIf_Timer_System_GetCounter>
    1b94:	9003      	str	r0, [sp, #12]
            break;
    1b96:	bf00      	nop
    }

    return Value;
    1b98:	9b03      	ldr	r3, [sp, #12]
}
    1b9a:	4618      	mov	r0, r3
    1b9c:	b005      	add	sp, #20
    1b9e:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1ba2:	b500      	push	{lr}
    1ba4:	b085      	sub	sp, #20
    1ba6:	9001      	str	r0, [sp, #4]
    1ba8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1baa:	2300      	movs	r3, #0
    1bac:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bae:	9b00      	ldr	r3, [sp, #0]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d003      	beq.n	1bbc <OsIf_GetElapsed+0x1a>
    1bb4:	9b00      	ldr	r3, [sp, #0]
    1bb6:	2b01      	cmp	r3, #1
    1bb8:	d005      	beq.n	1bc6 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bba:	e009      	b.n	1bd0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1bbc:	9801      	ldr	r0, [sp, #4]
    1bbe:	f7ff ffbd 	bl	1b3c <OsIf_Timer_Dummy_GetElapsed>
    1bc2:	9003      	str	r0, [sp, #12]
            break;
    1bc4:	e004      	b.n	1bd0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1bc6:	9801      	ldr	r0, [sp, #4]
    1bc8:	f000 f864 	bl	1c94 <OsIf_Timer_System_GetElapsed>
    1bcc:	9003      	str	r0, [sp, #12]
            break;
    1bce:	bf00      	nop
    }

    return Value;
    1bd0:	9b03      	ldr	r3, [sp, #12]
}
    1bd2:	4618      	mov	r0, r3
    1bd4:	b005      	add	sp, #20
    1bd6:	f85d fb04 	ldr.w	pc, [sp], #4

00001bda <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1bda:	b500      	push	{lr}
    1bdc:	b083      	sub	sp, #12
    1bde:	9001      	str	r0, [sp, #4]
    1be0:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1be2:	9b00      	ldr	r3, [sp, #0]
    1be4:	2b00      	cmp	r3, #0
    1be6:	d003      	beq.n	1bf0 <OsIf_SetTimerFrequency+0x16>
    1be8:	9b00      	ldr	r3, [sp, #0]
    1bea:	2b01      	cmp	r3, #1
    1bec:	d004      	beq.n	1bf8 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bee:	e007      	b.n	1c00 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	f7ff ffa9 	bl	1b48 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1bf6:	e003      	b.n	1c00 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1bf8:	9801      	ldr	r0, [sp, #4]
    1bfa:	f000 f85b 	bl	1cb4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1bfe:	bf00      	nop
    }
}
    1c00:	bf00      	nop
    1c02:	b003      	add	sp, #12
    1c04:	f85d fb04 	ldr.w	pc, [sp], #4

00001c08 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c08:	b500      	push	{lr}
    1c0a:	b085      	sub	sp, #20
    1c0c:	9001      	str	r0, [sp, #4]
    1c0e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c10:	2300      	movs	r3, #0
    1c12:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c14:	9b00      	ldr	r3, [sp, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d003      	beq.n	1c22 <OsIf_MicrosToTicks+0x1a>
    1c1a:	9b00      	ldr	r3, [sp, #0]
    1c1c:	2b01      	cmp	r3, #1
    1c1e:	d005      	beq.n	1c2c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c20:	e009      	b.n	1c36 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c22:	9801      	ldr	r0, [sp, #4]
    1c24:	f7ff ff95 	bl	1b52 <OsIf_Timer_Dummy_MicrosToTicks>
    1c28:	9003      	str	r0, [sp, #12]
            break;
    1c2a:	e004      	b.n	1c36 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c2c:	9801      	ldr	r0, [sp, #4]
    1c2e:	f000 f84f 	bl	1cd0 <OsIf_Timer_System_MicrosToTicks>
    1c32:	9003      	str	r0, [sp, #12]
            break;
    1c34:	bf00      	nop
    }

    return Value;
    1c36:	9b03      	ldr	r3, [sp, #12]
}
    1c38:	4618      	mov	r0, r3
    1c3a:	b005      	add	sp, #20
    1c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c40 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c40:	b500      	push	{lr}
    1c42:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c44:	2300      	movs	r3, #0
    1c46:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c48:	4a09      	ldr	r2, [pc, #36]	; (1c70 <OsIf_Timer_System_Init+0x30>)
    1c4a:	9b01      	ldr	r3, [sp, #4]
    1c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c50:	685a      	ldr	r2, [r3, #4]
    1c52:	4908      	ldr	r1, [pc, #32]	; (1c74 <OsIf_Timer_System_Init+0x34>)
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c5a:	4a06      	ldr	r2, [pc, #24]	; (1c74 <OsIf_Timer_System_Init+0x34>)
    1c5c:	9b01      	ldr	r3, [sp, #4]
    1c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c62:	4618      	mov	r0, r3
    1c64:	f000 f868 	bl	1d38 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c68:	bf00      	nop
    1c6a:	b003      	add	sp, #12
    1c6c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c70:	000114a8 	.word	0x000114a8
    1c74:	1fff8b4c 	.word	0x1fff8b4c

00001c78 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c78:	b500      	push	{lr}
    1c7a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c7c:	2300      	movs	r3, #0
    1c7e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c80:	2300      	movs	r3, #0
    1c82:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1c84:	f000 f86c 	bl	1d60 <OsIf_Timer_System_Internal_GetCounter>
    1c88:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c8a:	9b01      	ldr	r3, [sp, #4]
}
    1c8c:	4618      	mov	r0, r3
    1c8e:	b003      	add	sp, #12
    1c90:	f85d fb04 	ldr.w	pc, [sp], #4

00001c94 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1c94:	b500      	push	{lr}
    1c96:	b085      	sub	sp, #20
    1c98:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c9a:	2300      	movs	r3, #0
    1c9c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c9e:	2300      	movs	r3, #0
    1ca0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1ca2:	9801      	ldr	r0, [sp, #4]
    1ca4:	f000 f864 	bl	1d70 <OsIf_Timer_System_Internal_GetElapsed>
    1ca8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1caa:	9b03      	ldr	r3, [sp, #12]
}
    1cac:	4618      	mov	r0, r3
    1cae:	b005      	add	sp, #20
    1cb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cb4:	b084      	sub	sp, #16
    1cb6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1cb8:	2300      	movs	r3, #0
    1cba:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1cbc:	4903      	ldr	r1, [pc, #12]	; (1ccc <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1cbe:	9b03      	ldr	r3, [sp, #12]
    1cc0:	9a01      	ldr	r2, [sp, #4]
    1cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1cc6:	bf00      	nop
    1cc8:	b004      	add	sp, #16
    1cca:	4770      	bx	lr
    1ccc:	1fff8b4c 	.word	0x1fff8b4c

00001cd0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd2:	b087      	sub	sp, #28
    1cd4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1cd6:	2100      	movs	r1, #0
    1cd8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1cda:	2100      	movs	r1, #0
    1cdc:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1cde:	9901      	ldr	r1, [sp, #4]
    1ce0:	2000      	movs	r0, #0
    1ce2:	460e      	mov	r6, r1
    1ce4:	4607      	mov	r7, r0
    1ce6:	4812      	ldr	r0, [pc, #72]	; (1d30 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1ce8:	9904      	ldr	r1, [sp, #16]
    1cea:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1cee:	2000      	movs	r0, #0
    1cf0:	460c      	mov	r4, r1
    1cf2:	4605      	mov	r5, r0
    1cf4:	fb04 f007 	mul.w	r0, r4, r7
    1cf8:	fb06 f105 	mul.w	r1, r6, r5
    1cfc:	4401      	add	r1, r0
    1cfe:	fba6 2304 	umull	r2, r3, r6, r4
    1d02:	4419      	add	r1, r3
    1d04:	460b      	mov	r3, r1
    1d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d12:	4a08      	ldr	r2, [pc, #32]	; (1d34 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d14:	f04f 0300 	mov.w	r3, #0
    1d18:	f7fe fc44 	bl	5a4 <__aeabi_uldivmod>
    1d1c:	4602      	mov	r2, r0
    1d1e:	460b      	mov	r3, r1
    1d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d24:	9b02      	ldr	r3, [sp, #8]
    1d26:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d28:	9b05      	ldr	r3, [sp, #20]
}
    1d2a:	4618      	mov	r0, r3
    1d2c:	b007      	add	sp, #28
    1d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d30:	1fff8b4c 	.word	0x1fff8b4c
    1d34:	000f4240 	.word	0x000f4240

00001d38 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d38:	b082      	sub	sp, #8
    1d3a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d3c:	4b07      	ldr	r3, [pc, #28]	; (1d5c <OsIf_Timer_System_Internal_Init+0x24>)
    1d3e:	2200      	movs	r2, #0
    1d40:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d42:	4b06      	ldr	r3, [pc, #24]	; (1d5c <OsIf_Timer_System_Internal_Init+0x24>)
    1d44:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d48:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d4a:	4b04      	ldr	r3, [pc, #16]	; (1d5c <OsIf_Timer_System_Internal_Init+0x24>)
    1d4c:	2200      	movs	r2, #0
    1d4e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d50:	4b02      	ldr	r3, [pc, #8]	; (1d5c <OsIf_Timer_System_Internal_Init+0x24>)
    1d52:	2205      	movs	r2, #5
    1d54:	601a      	str	r2, [r3, #0]
}
    1d56:	bf00      	nop
    1d58:	b002      	add	sp, #8
    1d5a:	4770      	bx	lr
    1d5c:	e000e010 	.word	0xe000e010

00001d60 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d60:	4b02      	ldr	r3, [pc, #8]	; (1d6c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d62:	689b      	ldr	r3, [r3, #8]
    1d64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d68:	4618      	mov	r0, r3
    1d6a:	4770      	bx	lr
    1d6c:	e000e010 	.word	0xe000e010

00001d70 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d70:	b084      	sub	sp, #16
    1d72:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d74:	4b10      	ldr	r3, [pc, #64]	; (1db8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d76:	689b      	ldr	r3, [r3, #8]
    1d78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d7c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d7e:	2300      	movs	r3, #0
    1d80:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d82:	9b01      	ldr	r3, [sp, #4]
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	9a02      	ldr	r2, [sp, #8]
    1d88:	429a      	cmp	r2, r3
    1d8a:	d909      	bls.n	1da0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1d8c:	9b01      	ldr	r3, [sp, #4]
    1d8e:	681a      	ldr	r2, [r3, #0]
    1d90:	9b02      	ldr	r3, [sp, #8]
    1d92:	1ad3      	subs	r3, r2, r3
    1d94:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d9c:	9303      	str	r3, [sp, #12]
    1d9e:	e004      	b.n	1daa <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	681a      	ldr	r2, [r3, #0]
    1da4:	9b02      	ldr	r3, [sp, #8]
    1da6:	1ad3      	subs	r3, r2, r3
    1da8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1daa:	9b01      	ldr	r3, [sp, #4]
    1dac:	9a02      	ldr	r2, [sp, #8]
    1dae:	601a      	str	r2, [r3, #0]

    return dif;
    1db0:	9b03      	ldr	r3, [sp, #12]
}
    1db2:	4618      	mov	r0, r3
    1db4:	b004      	add	sp, #16
    1db6:	4770      	bx	lr
    1db8:	e000e010 	.word	0xe000e010

00001dbc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1dbc:	b082      	sub	sp, #8
    1dbe:	9001      	str	r0, [sp, #4]
    1dc0:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1dc2:	bf00      	nop
    1dc4:	b002      	add	sp, #8
    1dc6:	4770      	bx	lr

00001dc8 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1dc8:	b500      	push	{lr}
    1dca:	b085      	sub	sp, #20
    1dcc:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1dce:	4b24      	ldr	r3, [pc, #144]	; (1e60 <Clock_Ip_UpdateDriverContext+0x98>)
    1dd0:	2201      	movs	r2, #1
    1dd2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1dd4:	4b23      	ldr	r3, [pc, #140]	; (1e64 <Clock_Ip_UpdateDriverContext+0x9c>)
    1dd6:	681b      	ldr	r3, [r3, #0]
    1dd8:	2102      	movs	r1, #2
    1dda:	4618      	mov	r0, r3
    1ddc:	f003 fc32 	bl	5644 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1de0:	2300      	movs	r3, #0
    1de2:	f88d 300f 	strb.w	r3, [sp, #15]
    1de6:	e015      	b.n	1e14 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1de8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dec:	9a01      	ldr	r2, [sp, #4]
    1dee:	334a      	adds	r3, #74	; 0x4a
    1df0:	00db      	lsls	r3, r3, #3
    1df2:	4413      	add	r3, r2
    1df4:	6858      	ldr	r0, [r3, #4]
    1df6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dfa:	9a01      	ldr	r2, [sp, #4]
    1dfc:	334a      	adds	r3, #74	; 0x4a
    1dfe:	00db      	lsls	r3, r3, #3
    1e00:	4413      	add	r3, r2
    1e02:	689b      	ldr	r3, [r3, #8]
    1e04:	4619      	mov	r1, r3
    1e06:	f001 fadc 	bl	33c2 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e0e:	3301      	adds	r3, #1
    1e10:	f88d 300f 	strb.w	r3, [sp, #15]
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	7bdb      	ldrb	r3, [r3, #15]
    1e18:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e1c:	429a      	cmp	r2, r3
    1e1e:	d3e3      	bcc.n	1de8 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e20:	f000 f824 	bl	1e6c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e24:	2301      	movs	r3, #1
    1e26:	f88d 300f 	strb.w	r3, [sp, #15]
    1e2a:	e00e      	b.n	1e4a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	327e      	adds	r2, #126	; 0x7e
    1e34:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e38:	490b      	ldr	r1, [pc, #44]	; (1e68 <Clock_Ip_UpdateDriverContext+0xa0>)
    1e3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e3e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e44:	3301      	adds	r3, #1
    1e46:	f88d 300f 	strb.w	r3, [sp, #15]
    1e4a:	9b01      	ldr	r3, [sp, #4]
    1e4c:	7cdb      	ldrb	r3, [r3, #19]
    1e4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e52:	429a      	cmp	r2, r3
    1e54:	d3ea      	bcc.n	1e2c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e56:	bf00      	nop
    1e58:	bf00      	nop
    1e5a:	b005      	add	sp, #20
    1e5c:	f85d fb04 	ldr.w	pc, [sp], #4
    1e60:	1fff8b10 	.word	0x1fff8b10
    1e64:	1fff8b50 	.word	0x1fff8b50
    1e68:	1fff8b5c 	.word	0x1fff8b5c

00001e6c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e6c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e6e:	4b23      	ldr	r3, [pc, #140]	; (1efc <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e70:	781b      	ldrb	r3, [r3, #0]
    1e72:	f083 0301 	eor.w	r3, r3, #1
    1e76:	b2db      	uxtb	r3, r3
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d03d      	beq.n	1ef8 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e7c:	4b1f      	ldr	r3, [pc, #124]	; (1efc <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e7e:	2201      	movs	r2, #1
    1e80:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e82:	4b1f      	ldr	r3, [pc, #124]	; (1f00 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e84:	685b      	ldr	r3, [r3, #4]
    1e86:	2100      	movs	r1, #0
    1e88:	2000      	movs	r0, #0
    1e8a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1e8c:	4b1c      	ldr	r3, [pc, #112]	; (1f00 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e8e:	689b      	ldr	r3, [r3, #8]
    1e90:	2057      	movs	r0, #87	; 0x57
    1e92:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e94:	4b1b      	ldr	r3, [pc, #108]	; (1f04 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	2000      	movs	r0, #0
    1e9a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e9c:	4b1a      	ldr	r3, [pc, #104]	; (1f08 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e9e:	681b      	ldr	r3, [r3, #0]
    1ea0:	2000      	movs	r0, #0
    1ea2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1ea4:	4b19      	ldr	r3, [pc, #100]	; (1f0c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	2000      	movs	r0, #0
    1eaa:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eac:	4b18      	ldr	r3, [pc, #96]	; (1f10 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eae:	685b      	ldr	r3, [r3, #4]
    1eb0:	2000      	movs	r0, #0
    1eb2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1eb4:	4b16      	ldr	r3, [pc, #88]	; (1f10 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eb6:	689b      	ldr	r3, [r3, #8]
    1eb8:	2057      	movs	r0, #87	; 0x57
    1eba:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ebc:	4b15      	ldr	r3, [pc, #84]	; (1f14 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	2000      	movs	r0, #0
    1ec2:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1ec4:	4b13      	ldr	r3, [pc, #76]	; (1f14 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ec6:	685b      	ldr	r3, [r3, #4]
    1ec8:	2100      	movs	r1, #0
    1eca:	2057      	movs	r0, #87	; 0x57
    1ecc:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ece:	4b12      	ldr	r3, [pc, #72]	; (1f18 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	2000      	movs	r0, #0
    1ed4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ed6:	4b11      	ldr	r3, [pc, #68]	; (1f1c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1ed8:	685b      	ldr	r3, [r3, #4]
    1eda:	2000      	movs	r0, #0
    1edc:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1ede:	4b0f      	ldr	r3, [pc, #60]	; (1f1c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1ee0:	689b      	ldr	r3, [r3, #8]
    1ee2:	2057      	movs	r0, #87	; 0x57
    1ee4:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ee6:	4b0e      	ldr	r3, [pc, #56]	; (1f20 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1ee8:	685b      	ldr	r3, [r3, #4]
    1eea:	2000      	movs	r0, #0
    1eec:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1eee:	4b0d      	ldr	r3, [pc, #52]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	2100      	movs	r1, #0
    1ef4:	2000      	movs	r0, #0
    1ef6:	4798      	blx	r3
    }
}
    1ef8:	bf00      	nop
    1efa:	bd08      	pop	{r3, pc}
    1efc:	1fff8b54 	.word	0x1fff8b54
    1f00:	00010e6c 	.word	0x00010e6c
    1f04:	00010d80 	.word	0x00010d80
    1f08:	00010dbc 	.word	0x00010dbc
    1f0c:	00010dc4 	.word	0x00010dc4
    1f10:	00010dec 	.word	0x00010dec
    1f14:	00010df8 	.word	0x00010df8
    1f18:	00010e30 	.word	0x00010e30
    1f1c:	00010e7c 	.word	0x00010e7c
    1f20:	00010ea8 	.word	0x00010ea8
    1f24:	00010ea4 	.word	0x00010ea4

00001f28 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f28:	b500      	push	{lr}
    1f2a:	b085      	sub	sp, #20
    1f2c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f2e:	9b01      	ldr	r3, [sp, #4]
    1f30:	7adb      	ldrb	r3, [r3, #11]
    1f32:	9303      	str	r3, [sp, #12]
    1f34:	e01f      	b.n	1f76 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f36:	9b03      	ldr	r3, [sp, #12]
    1f38:	1e5a      	subs	r2, r3, #1
    1f3a:	9b01      	ldr	r3, [sp, #4]
    1f3c:	320d      	adds	r2, #13
    1f3e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f42:	495a      	ldr	r1, [pc, #360]	; (20ac <Clock_Ip_ResetClockConfiguration+0x184>)
    1f44:	4613      	mov	r3, r2
    1f46:	00db      	lsls	r3, r3, #3
    1f48:	4413      	add	r3, r2
    1f4a:	440b      	add	r3, r1
    1f4c:	3301      	adds	r3, #1
    1f4e:	781b      	ldrb	r3, [r3, #0]
    1f50:	461a      	mov	r2, r3
    1f52:	4b57      	ldr	r3, [pc, #348]	; (20b0 <Clock_Ip_ResetClockConfiguration+0x188>)
    1f54:	5c9b      	ldrb	r3, [r3, r2]
    1f56:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f58:	4a56      	ldr	r2, [pc, #344]	; (20b4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f5a:	9b02      	ldr	r3, [sp, #8]
    1f5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f60:	9a03      	ldr	r2, [sp, #12]
    1f62:	3a01      	subs	r2, #1
    1f64:	320d      	adds	r2, #13
    1f66:	00d2      	lsls	r2, r2, #3
    1f68:	9901      	ldr	r1, [sp, #4]
    1f6a:	440a      	add	r2, r1
    1f6c:	4610      	mov	r0, r2
    1f6e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f70:	9b03      	ldr	r3, [sp, #12]
    1f72:	3b01      	subs	r3, #1
    1f74:	9303      	str	r3, [sp, #12]
    1f76:	9b03      	ldr	r3, [sp, #12]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d1dc      	bne.n	1f36 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f7c:	9b01      	ldr	r3, [sp, #4]
    1f7e:	7b9b      	ldrb	r3, [r3, #14]
    1f80:	9303      	str	r3, [sp, #12]
    1f82:	e026      	b.n	1fd2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f84:	9b03      	ldr	r3, [sp, #12]
    1f86:	3b01      	subs	r3, #1
    1f88:	9a01      	ldr	r2, [sp, #4]
    1f8a:	3324      	adds	r3, #36	; 0x24
    1f8c:	011b      	lsls	r3, r3, #4
    1f8e:	4413      	add	r3, r2
    1f90:	3304      	adds	r3, #4
    1f92:	681a      	ldr	r2, [r3, #0]
    1f94:	4945      	ldr	r1, [pc, #276]	; (20ac <Clock_Ip_ResetClockConfiguration+0x184>)
    1f96:	4613      	mov	r3, r2
    1f98:	00db      	lsls	r3, r3, #3
    1f9a:	4413      	add	r3, r2
    1f9c:	440b      	add	r3, r1
    1f9e:	3301      	adds	r3, #1
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	461a      	mov	r2, r3
    1fa4:	4b44      	ldr	r3, [pc, #272]	; (20b8 <Clock_Ip_ResetClockConfiguration+0x190>)
    1fa6:	5c9b      	ldrb	r3, [r3, r2]
    1fa8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1faa:	4944      	ldr	r1, [pc, #272]	; (20bc <Clock_Ip_ResetClockConfiguration+0x194>)
    1fac:	9a02      	ldr	r2, [sp, #8]
    1fae:	4613      	mov	r3, r2
    1fb0:	005b      	lsls	r3, r3, #1
    1fb2:	4413      	add	r3, r2
    1fb4:	009b      	lsls	r3, r3, #2
    1fb6:	440b      	add	r3, r1
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	9a03      	ldr	r2, [sp, #12]
    1fbc:	3a01      	subs	r2, #1
    1fbe:	3224      	adds	r2, #36	; 0x24
    1fc0:	0112      	lsls	r2, r2, #4
    1fc2:	9901      	ldr	r1, [sp, #4]
    1fc4:	440a      	add	r2, r1
    1fc6:	3204      	adds	r2, #4
    1fc8:	4610      	mov	r0, r2
    1fca:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fcc:	9b03      	ldr	r3, [sp, #12]
    1fce:	3b01      	subs	r3, #1
    1fd0:	9303      	str	r3, [sp, #12]
    1fd2:	9b03      	ldr	r3, [sp, #12]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d1d5      	bne.n	1f84 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fd8:	9b01      	ldr	r3, [sp, #4]
    1fda:	7a9b      	ldrb	r3, [r3, #10]
    1fdc:	9303      	str	r3, [sp, #12]
    1fde:	e02a      	b.n	2036 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fe0:	9b03      	ldr	r3, [sp, #12]
    1fe2:	1e5a      	subs	r2, r3, #1
    1fe4:	9901      	ldr	r1, [sp, #4]
    1fe6:	4613      	mov	r3, r2
    1fe8:	009b      	lsls	r3, r3, #2
    1fea:	4413      	add	r3, r2
    1fec:	00db      	lsls	r3, r3, #3
    1fee:	440b      	add	r3, r1
    1ff0:	3340      	adds	r3, #64	; 0x40
    1ff2:	681a      	ldr	r2, [r3, #0]
    1ff4:	492d      	ldr	r1, [pc, #180]	; (20ac <Clock_Ip_ResetClockConfiguration+0x184>)
    1ff6:	4613      	mov	r3, r2
    1ff8:	00db      	lsls	r3, r3, #3
    1ffa:	4413      	add	r3, r2
    1ffc:	440b      	add	r3, r1
    1ffe:	3301      	adds	r3, #1
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	461a      	mov	r2, r3
    2004:	4b2e      	ldr	r3, [pc, #184]	; (20c0 <Clock_Ip_ResetClockConfiguration+0x198>)
    2006:	5c9b      	ldrb	r3, [r3, r2]
    2008:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    200a:	492e      	ldr	r1, [pc, #184]	; (20c4 <Clock_Ip_ResetClockConfiguration+0x19c>)
    200c:	9a02      	ldr	r2, [sp, #8]
    200e:	4613      	mov	r3, r2
    2010:	009b      	lsls	r3, r3, #2
    2012:	4413      	add	r3, r2
    2014:	009b      	lsls	r3, r3, #2
    2016:	440b      	add	r3, r1
    2018:	6819      	ldr	r1, [r3, #0]
    201a:	9b03      	ldr	r3, [sp, #12]
    201c:	1e5a      	subs	r2, r3, #1
    201e:	4613      	mov	r3, r2
    2020:	009b      	lsls	r3, r3, #2
    2022:	4413      	add	r3, r2
    2024:	00db      	lsls	r3, r3, #3
    2026:	3340      	adds	r3, #64	; 0x40
    2028:	9a01      	ldr	r2, [sp, #4]
    202a:	4413      	add	r3, r2
    202c:	4618      	mov	r0, r3
    202e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2030:	9b03      	ldr	r3, [sp, #12]
    2032:	3b01      	subs	r3, #1
    2034:	9303      	str	r3, [sp, #12]
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	2b00      	cmp	r3, #0
    203a:	d1d1      	bne.n	1fe0 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    203c:	9b01      	ldr	r3, [sp, #4]
    203e:	7a5b      	ldrb	r3, [r3, #9]
    2040:	9303      	str	r3, [sp, #12]
    2042:	e02b      	b.n	209c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2044:	9b03      	ldr	r3, [sp, #12]
    2046:	1e5a      	subs	r2, r3, #1
    2048:	9901      	ldr	r1, [sp, #4]
    204a:	4613      	mov	r3, r2
    204c:	009b      	lsls	r3, r3, #2
    204e:	4413      	add	r3, r2
    2050:	009b      	lsls	r3, r3, #2
    2052:	440b      	add	r3, r1
    2054:	332c      	adds	r3, #44	; 0x2c
    2056:	681a      	ldr	r2, [r3, #0]
    2058:	4914      	ldr	r1, [pc, #80]	; (20ac <Clock_Ip_ResetClockConfiguration+0x184>)
    205a:	4613      	mov	r3, r2
    205c:	00db      	lsls	r3, r3, #3
    205e:	4413      	add	r3, r2
    2060:	440b      	add	r3, r1
    2062:	3301      	adds	r3, #1
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	461a      	mov	r2, r3
    2068:	4b17      	ldr	r3, [pc, #92]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    206a:	5c9b      	ldrb	r3, [r3, r2]
    206c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    206e:	4917      	ldr	r1, [pc, #92]	; (20cc <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2070:	9a02      	ldr	r2, [sp, #8]
    2072:	4613      	mov	r3, r2
    2074:	009b      	lsls	r3, r3, #2
    2076:	4413      	add	r3, r2
    2078:	009b      	lsls	r3, r3, #2
    207a:	440b      	add	r3, r1
    207c:	6819      	ldr	r1, [r3, #0]
    207e:	9b03      	ldr	r3, [sp, #12]
    2080:	1e5a      	subs	r2, r3, #1
    2082:	4613      	mov	r3, r2
    2084:	009b      	lsls	r3, r3, #2
    2086:	4413      	add	r3, r2
    2088:	009b      	lsls	r3, r3, #2
    208a:	3328      	adds	r3, #40	; 0x28
    208c:	9a01      	ldr	r2, [sp, #4]
    208e:	4413      	add	r3, r2
    2090:	3304      	adds	r3, #4
    2092:	4618      	mov	r0, r3
    2094:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2096:	9b03      	ldr	r3, [sp, #12]
    2098:	3b01      	subs	r3, #1
    209a:	9303      	str	r3, [sp, #12]
    209c:	9b03      	ldr	r3, [sp, #12]
    209e:	2b00      	cmp	r3, #0
    20a0:	d1d0      	bne.n	2044 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    20a2:	bf00      	nop
    20a4:	bf00      	nop
    20a6:	b005      	add	sp, #20
    20a8:	f85d fb04 	ldr.w	pc, [sp], #4
    20ac:	00010870 	.word	0x00010870
    20b0:	00010840 	.word	0x00010840
    20b4:	00010ea8 	.word	0x00010ea8
    20b8:	00010820 	.word	0x00010820
    20bc:	00010dec 	.word	0x00010dec
    20c0:	00010830 	.word	0x00010830
    20c4:	00010e7c 	.word	0x00010e7c
    20c8:	000107f0 	.word	0x000107f0
    20cc:	00010dc4 	.word	0x00010dc4

000020d0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    20d0:	b500      	push	{lr}
    20d2:	b085      	sub	sp, #20
    20d4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    20d6:	2301      	movs	r3, #1
    20d8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    20da:	9801      	ldr	r0, [sp, #4]
    20dc:	f000 f818 	bl	2110 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    20e0:	4b0a      	ldr	r3, [pc, #40]	; (210c <Clock_Ip_Init+0x3c>)
    20e2:	781b      	ldrb	r3, [r3, #0]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d00a      	beq.n	20fe <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    20e8:	f000 fb74 	bl	27d4 <Clock_Ip_GetPllStatus>
    20ec:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    20ee:	9b02      	ldr	r3, [sp, #8]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d106      	bne.n	2102 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    20f4:	f000 fbf2 	bl	28dc <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    20f8:	2300      	movs	r3, #0
    20fa:	9303      	str	r3, [sp, #12]
    20fc:	e001      	b.n	2102 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    20fe:	2300      	movs	r3, #0
    2100:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2102:	9b03      	ldr	r3, [sp, #12]
}
    2104:	4618      	mov	r0, r3
    2106:	b005      	add	sp, #20
    2108:	f85d fb04 	ldr.w	pc, [sp], #4
    210c:	1fff8b58 	.word	0x1fff8b58

00002110 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2110:	b510      	push	{r4, lr}
    2112:	b084      	sub	sp, #16
    2114:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2116:	4a9f      	ldr	r2, [pc, #636]	; (2394 <Clock_Ip_InitClock+0x284>)
    2118:	9b01      	ldr	r3, [sp, #4]
    211a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    211c:	2101      	movs	r1, #1
    211e:	9801      	ldr	r0, [sp, #4]
    2120:	f003 fa90 	bl	5644 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2124:	4b9b      	ldr	r3, [pc, #620]	; (2394 <Clock_Ip_InitClock+0x284>)
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	2b00      	cmp	r3, #0
    212a:	d030      	beq.n	218e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    212c:	2300      	movs	r3, #0
    212e:	9303      	str	r3, [sp, #12]
    2130:	e027      	b.n	2182 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2132:	9901      	ldr	r1, [sp, #4]
    2134:	9a03      	ldr	r2, [sp, #12]
    2136:	4613      	mov	r3, r2
    2138:	009b      	lsls	r3, r3, #2
    213a:	4413      	add	r3, r2
    213c:	009b      	lsls	r3, r3, #2
    213e:	440b      	add	r3, r1
    2140:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2144:	681a      	ldr	r2, [r3, #0]
    2146:	4994      	ldr	r1, [pc, #592]	; (2398 <Clock_Ip_InitClock+0x288>)
    2148:	4613      	mov	r3, r2
    214a:	00db      	lsls	r3, r3, #3
    214c:	4413      	add	r3, r2
    214e:	440b      	add	r3, r1
    2150:	3301      	adds	r3, #1
    2152:	781b      	ldrb	r3, [r3, #0]
    2154:	461a      	mov	r2, r3
    2156:	4b91      	ldr	r3, [pc, #580]	; (239c <Clock_Ip_InitClock+0x28c>)
    2158:	5c9b      	ldrb	r3, [r3, r2]
    215a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    215c:	4a90      	ldr	r2, [pc, #576]	; (23a0 <Clock_Ip_InitClock+0x290>)
    215e:	9b02      	ldr	r3, [sp, #8]
    2160:	011b      	lsls	r3, r3, #4
    2162:	4413      	add	r3, r2
    2164:	6819      	ldr	r1, [r3, #0]
    2166:	9a03      	ldr	r2, [sp, #12]
    2168:	4613      	mov	r3, r2
    216a:	009b      	lsls	r3, r3, #2
    216c:	4413      	add	r3, r2
    216e:	009b      	lsls	r3, r3, #2
    2170:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2174:	9a01      	ldr	r2, [sp, #4]
    2176:	4413      	add	r3, r2
    2178:	4618      	mov	r0, r3
    217a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    217c:	9b03      	ldr	r3, [sp, #12]
    217e:	3301      	adds	r3, #1
    2180:	9303      	str	r3, [sp, #12]
    2182:	9b01      	ldr	r3, [sp, #4]
    2184:	7c9b      	ldrb	r3, [r3, #18]
    2186:	461a      	mov	r2, r3
    2188:	9b03      	ldr	r3, [sp, #12]
    218a:	4293      	cmp	r3, r2
    218c:	d3d1      	bcc.n	2132 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    218e:	9801      	ldr	r0, [sp, #4]
    2190:	f7ff feca 	bl	1f28 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2194:	2300      	movs	r3, #0
    2196:	9303      	str	r3, [sp, #12]
    2198:	e029      	b.n	21ee <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    219a:	9901      	ldr	r1, [sp, #4]
    219c:	9a03      	ldr	r2, [sp, #12]
    219e:	4613      	mov	r3, r2
    21a0:	005b      	lsls	r3, r3, #1
    21a2:	4413      	add	r3, r2
    21a4:	009b      	lsls	r3, r3, #2
    21a6:	440b      	add	r3, r1
    21a8:	3314      	adds	r3, #20
    21aa:	681a      	ldr	r2, [r3, #0]
    21ac:	497a      	ldr	r1, [pc, #488]	; (2398 <Clock_Ip_InitClock+0x288>)
    21ae:	4613      	mov	r3, r2
    21b0:	00db      	lsls	r3, r3, #3
    21b2:	4413      	add	r3, r2
    21b4:	440b      	add	r3, r1
    21b6:	3301      	adds	r3, #1
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	461a      	mov	r2, r3
    21bc:	4b79      	ldr	r3, [pc, #484]	; (23a4 <Clock_Ip_InitClock+0x294>)
    21be:	5c9b      	ldrb	r3, [r3, r2]
    21c0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    21c2:	4979      	ldr	r1, [pc, #484]	; (23a8 <Clock_Ip_InitClock+0x298>)
    21c4:	9a02      	ldr	r2, [sp, #8]
    21c6:	4613      	mov	r3, r2
    21c8:	005b      	lsls	r3, r3, #1
    21ca:	4413      	add	r3, r2
    21cc:	009b      	lsls	r3, r3, #2
    21ce:	440b      	add	r3, r1
    21d0:	6819      	ldr	r1, [r3, #0]
    21d2:	9a03      	ldr	r2, [sp, #12]
    21d4:	4613      	mov	r3, r2
    21d6:	005b      	lsls	r3, r3, #1
    21d8:	4413      	add	r3, r2
    21da:	009b      	lsls	r3, r3, #2
    21dc:	3310      	adds	r3, #16
    21de:	9a01      	ldr	r2, [sp, #4]
    21e0:	4413      	add	r3, r2
    21e2:	3304      	adds	r3, #4
    21e4:	4618      	mov	r0, r3
    21e6:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21e8:	9b03      	ldr	r3, [sp, #12]
    21ea:	3301      	adds	r3, #1
    21ec:	9303      	str	r3, [sp, #12]
    21ee:	9b01      	ldr	r3, [sp, #4]
    21f0:	7a1b      	ldrb	r3, [r3, #8]
    21f2:	461a      	mov	r2, r3
    21f4:	9b03      	ldr	r3, [sp, #12]
    21f6:	4293      	cmp	r3, r2
    21f8:	d3cf      	bcc.n	219a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21fa:	2300      	movs	r3, #0
    21fc:	9303      	str	r3, [sp, #12]
    21fe:	e02a      	b.n	2256 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2200:	9901      	ldr	r1, [sp, #4]
    2202:	9a03      	ldr	r2, [sp, #12]
    2204:	4613      	mov	r3, r2
    2206:	009b      	lsls	r3, r3, #2
    2208:	4413      	add	r3, r2
    220a:	009b      	lsls	r3, r3, #2
    220c:	440b      	add	r3, r1
    220e:	332c      	adds	r3, #44	; 0x2c
    2210:	681a      	ldr	r2, [r3, #0]
    2212:	4961      	ldr	r1, [pc, #388]	; (2398 <Clock_Ip_InitClock+0x288>)
    2214:	4613      	mov	r3, r2
    2216:	00db      	lsls	r3, r3, #3
    2218:	4413      	add	r3, r2
    221a:	440b      	add	r3, r1
    221c:	3301      	adds	r3, #1
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	461a      	mov	r2, r3
    2222:	4b62      	ldr	r3, [pc, #392]	; (23ac <Clock_Ip_InitClock+0x29c>)
    2224:	5c9b      	ldrb	r3, [r3, r2]
    2226:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2228:	4961      	ldr	r1, [pc, #388]	; (23b0 <Clock_Ip_InitClock+0x2a0>)
    222a:	9a02      	ldr	r2, [sp, #8]
    222c:	4613      	mov	r3, r2
    222e:	009b      	lsls	r3, r3, #2
    2230:	4413      	add	r3, r2
    2232:	009b      	lsls	r3, r3, #2
    2234:	440b      	add	r3, r1
    2236:	3304      	adds	r3, #4
    2238:	6819      	ldr	r1, [r3, #0]
    223a:	9a03      	ldr	r2, [sp, #12]
    223c:	4613      	mov	r3, r2
    223e:	009b      	lsls	r3, r3, #2
    2240:	4413      	add	r3, r2
    2242:	009b      	lsls	r3, r3, #2
    2244:	3328      	adds	r3, #40	; 0x28
    2246:	9a01      	ldr	r2, [sp, #4]
    2248:	4413      	add	r3, r2
    224a:	3304      	adds	r3, #4
    224c:	4618      	mov	r0, r3
    224e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2250:	9b03      	ldr	r3, [sp, #12]
    2252:	3301      	adds	r3, #1
    2254:	9303      	str	r3, [sp, #12]
    2256:	9b01      	ldr	r3, [sp, #4]
    2258:	7a5b      	ldrb	r3, [r3, #9]
    225a:	461a      	mov	r2, r3
    225c:	9b03      	ldr	r3, [sp, #12]
    225e:	4293      	cmp	r3, r2
    2260:	d3ce      	bcc.n	2200 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2262:	9801      	ldr	r0, [sp, #4]
    2264:	f7ff fdb0 	bl	1dc8 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2268:	2300      	movs	r3, #0
    226a:	9303      	str	r3, [sp, #12]
    226c:	e028      	b.n	22c0 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    226e:	9901      	ldr	r1, [sp, #4]
    2270:	9a03      	ldr	r2, [sp, #12]
    2272:	4613      	mov	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	4413      	add	r3, r2
    2278:	009b      	lsls	r3, r3, #2
    227a:	440b      	add	r3, r1
    227c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2280:	681a      	ldr	r2, [r3, #0]
    2282:	4945      	ldr	r1, [pc, #276]	; (2398 <Clock_Ip_InitClock+0x288>)
    2284:	4613      	mov	r3, r2
    2286:	00db      	lsls	r3, r3, #3
    2288:	4413      	add	r3, r2
    228a:	440b      	add	r3, r1
    228c:	3301      	adds	r3, #1
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	461a      	mov	r2, r3
    2292:	4b48      	ldr	r3, [pc, #288]	; (23b4 <Clock_Ip_InitClock+0x2a4>)
    2294:	5c9b      	ldrb	r3, [r3, r2]
    2296:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2298:	4a47      	ldr	r2, [pc, #284]	; (23b8 <Clock_Ip_InitClock+0x2a8>)
    229a:	9b02      	ldr	r3, [sp, #8]
    229c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    22a0:	9a03      	ldr	r2, [sp, #12]
    22a2:	4613      	mov	r3, r2
    22a4:	009b      	lsls	r3, r3, #2
    22a6:	4413      	add	r3, r2
    22a8:	009b      	lsls	r3, r3, #2
    22aa:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22ae:	9a01      	ldr	r2, [sp, #4]
    22b0:	4413      	add	r3, r2
    22b2:	3304      	adds	r3, #4
    22b4:	9903      	ldr	r1, [sp, #12]
    22b6:	4618      	mov	r0, r3
    22b8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22ba:	9b03      	ldr	r3, [sp, #12]
    22bc:	3301      	adds	r3, #1
    22be:	9303      	str	r3, [sp, #12]
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	7c5b      	ldrb	r3, [r3, #17]
    22c4:	461a      	mov	r2, r3
    22c6:	9b03      	ldr	r3, [sp, #12]
    22c8:	4293      	cmp	r3, r2
    22ca:	d3d0      	bcc.n	226e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22cc:	2300      	movs	r3, #0
    22ce:	9303      	str	r3, [sp, #12]
    22d0:	e026      	b.n	2320 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22d2:	9901      	ldr	r1, [sp, #4]
    22d4:	9a03      	ldr	r2, [sp, #12]
    22d6:	4613      	mov	r3, r2
    22d8:	005b      	lsls	r3, r3, #1
    22da:	4413      	add	r3, r2
    22dc:	009b      	lsls	r3, r3, #2
    22de:	440b      	add	r3, r1
    22e0:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22e4:	681a      	ldr	r2, [r3, #0]
    22e6:	492c      	ldr	r1, [pc, #176]	; (2398 <Clock_Ip_InitClock+0x288>)
    22e8:	4613      	mov	r3, r2
    22ea:	00db      	lsls	r3, r3, #3
    22ec:	4413      	add	r3, r2
    22ee:	440b      	add	r3, r1
    22f0:	3301      	adds	r3, #1
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	461a      	mov	r2, r3
    22f6:	4b31      	ldr	r3, [pc, #196]	; (23bc <Clock_Ip_InitClock+0x2ac>)
    22f8:	5c9b      	ldrb	r3, [r3, r2]
    22fa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    22fc:	4a30      	ldr	r2, [pc, #192]	; (23c0 <Clock_Ip_InitClock+0x2b0>)
    22fe:	9b02      	ldr	r3, [sp, #8]
    2300:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2304:	9a03      	ldr	r2, [sp, #12]
    2306:	4613      	mov	r3, r2
    2308:	005b      	lsls	r3, r3, #1
    230a:	4413      	add	r3, r2
    230c:	009b      	lsls	r3, r3, #2
    230e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2312:	9a01      	ldr	r2, [sp, #4]
    2314:	4413      	add	r3, r2
    2316:	4618      	mov	r0, r3
    2318:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    231a:	9b03      	ldr	r3, [sp, #12]
    231c:	3301      	adds	r3, #1
    231e:	9303      	str	r3, [sp, #12]
    2320:	9b01      	ldr	r3, [sp, #4]
    2322:	7b5b      	ldrb	r3, [r3, #13]
    2324:	461a      	mov	r2, r3
    2326:	9b03      	ldr	r3, [sp, #12]
    2328:	4293      	cmp	r3, r2
    232a:	d3d2      	bcc.n	22d2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    232c:	2300      	movs	r3, #0
    232e:	9303      	str	r3, [sp, #12]
    2330:	e026      	b.n	2380 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2332:	9901      	ldr	r1, [sp, #4]
    2334:	9a03      	ldr	r2, [sp, #12]
    2336:	4613      	mov	r3, r2
    2338:	005b      	lsls	r3, r3, #1
    233a:	4413      	add	r3, r2
    233c:	009b      	lsls	r3, r3, #2
    233e:	440b      	add	r3, r1
    2340:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2344:	681a      	ldr	r2, [r3, #0]
    2346:	4914      	ldr	r1, [pc, #80]	; (2398 <Clock_Ip_InitClock+0x288>)
    2348:	4613      	mov	r3, r2
    234a:	00db      	lsls	r3, r3, #3
    234c:	4413      	add	r3, r2
    234e:	440b      	add	r3, r1
    2350:	3301      	adds	r3, #1
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	461a      	mov	r2, r3
    2356:	4b1b      	ldr	r3, [pc, #108]	; (23c4 <Clock_Ip_InitClock+0x2b4>)
    2358:	5c9b      	ldrb	r3, [r3, r2]
    235a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    235c:	4a1a      	ldr	r2, [pc, #104]	; (23c8 <Clock_Ip_InitClock+0x2b8>)
    235e:	9b02      	ldr	r3, [sp, #8]
    2360:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2364:	9a03      	ldr	r2, [sp, #12]
    2366:	4613      	mov	r3, r2
    2368:	005b      	lsls	r3, r3, #1
    236a:	4413      	add	r3, r2
    236c:	009b      	lsls	r3, r3, #2
    236e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2372:	9a01      	ldr	r2, [sp, #4]
    2374:	4413      	add	r3, r2
    2376:	4618      	mov	r0, r3
    2378:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    237a:	9b03      	ldr	r3, [sp, #12]
    237c:	3301      	adds	r3, #1
    237e:	9303      	str	r3, [sp, #12]
    2380:	9b01      	ldr	r3, [sp, #4]
    2382:	7b1b      	ldrb	r3, [r3, #12]
    2384:	461a      	mov	r2, r3
    2386:	9b03      	ldr	r3, [sp, #12]
    2388:	4293      	cmp	r3, r2
    238a:	d3d2      	bcc.n	2332 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    238c:	2300      	movs	r3, #0
    238e:	9303      	str	r3, [sp, #12]
    2390:	e044      	b.n	241c <Clock_Ip_InitClock+0x30c>
    2392:	bf00      	nop
    2394:	1fff8b50 	.word	0x1fff8b50
    2398:	00010870 	.word	0x00010870
    239c:	00010860 	.word	0x00010860
    23a0:	00010e6c 	.word	0x00010e6c
    23a4:	00010800 	.word	0x00010800
    23a8:	00010e30 	.word	0x00010e30
    23ac:	000107f0 	.word	0x000107f0
    23b0:	00010dc4 	.word	0x00010dc4
    23b4:	00010850 	.word	0x00010850
    23b8:	00010ea4 	.word	0x00010ea4
    23bc:	000107e0 	.word	0x000107e0
    23c0:	00010dbc 	.word	0x00010dbc
    23c4:	000107d0 	.word	0x000107d0
    23c8:	00010d80 	.word	0x00010d80
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    23cc:	9901      	ldr	r1, [sp, #4]
    23ce:	9a03      	ldr	r2, [sp, #12]
    23d0:	4613      	mov	r3, r2
    23d2:	005b      	lsls	r3, r3, #1
    23d4:	4413      	add	r3, r2
    23d6:	009b      	lsls	r3, r3, #2
    23d8:	440b      	add	r3, r1
    23da:	f503 730e 	add.w	r3, r3, #568	; 0x238
    23de:	681a      	ldr	r2, [r3, #0]
    23e0:	49ac      	ldr	r1, [pc, #688]	; (2694 <Clock_Ip_InitClock+0x584>)
    23e2:	4613      	mov	r3, r2
    23e4:	00db      	lsls	r3, r3, #3
    23e6:	4413      	add	r3, r2
    23e8:	440b      	add	r3, r1
    23ea:	3301      	adds	r3, #1
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	461a      	mov	r2, r3
    23f0:	4ba9      	ldr	r3, [pc, #676]	; (2698 <Clock_Ip_InitClock+0x588>)
    23f2:	5c9b      	ldrb	r3, [r3, r2]
    23f4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    23f6:	4aa9      	ldr	r2, [pc, #676]	; (269c <Clock_Ip_InitClock+0x58c>)
    23f8:	9b02      	ldr	r3, [sp, #8]
    23fa:	00db      	lsls	r3, r3, #3
    23fc:	4413      	add	r3, r2
    23fe:	6859      	ldr	r1, [r3, #4]
    2400:	9a03      	ldr	r2, [sp, #12]
    2402:	4613      	mov	r3, r2
    2404:	005b      	lsls	r3, r3, #1
    2406:	4413      	add	r3, r2
    2408:	009b      	lsls	r3, r3, #2
    240a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    240e:	9a01      	ldr	r2, [sp, #4]
    2410:	4413      	add	r3, r2
    2412:	4618      	mov	r0, r3
    2414:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2416:	9b03      	ldr	r3, [sp, #12]
    2418:	3301      	adds	r3, #1
    241a:	9303      	str	r3, [sp, #12]
    241c:	9b01      	ldr	r3, [sp, #4]
    241e:	7b5b      	ldrb	r3, [r3, #13]
    2420:	461a      	mov	r2, r3
    2422:	9b03      	ldr	r3, [sp, #12]
    2424:	4293      	cmp	r3, r2
    2426:	d3d1      	bcc.n	23cc <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2428:	2300      	movs	r3, #0
    242a:	9303      	str	r3, [sp, #12]
    242c:	e029      	b.n	2482 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    242e:	9901      	ldr	r1, [sp, #4]
    2430:	9a03      	ldr	r2, [sp, #12]
    2432:	4613      	mov	r3, r2
    2434:	009b      	lsls	r3, r3, #2
    2436:	4413      	add	r3, r2
    2438:	00db      	lsls	r3, r3, #3
    243a:	440b      	add	r3, r1
    243c:	3340      	adds	r3, #64	; 0x40
    243e:	681a      	ldr	r2, [r3, #0]
    2440:	4994      	ldr	r1, [pc, #592]	; (2694 <Clock_Ip_InitClock+0x584>)
    2442:	4613      	mov	r3, r2
    2444:	00db      	lsls	r3, r3, #3
    2446:	4413      	add	r3, r2
    2448:	440b      	add	r3, r1
    244a:	3301      	adds	r3, #1
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	461a      	mov	r2, r3
    2450:	4b93      	ldr	r3, [pc, #588]	; (26a0 <Clock_Ip_InitClock+0x590>)
    2452:	5c9b      	ldrb	r3, [r3, r2]
    2454:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2456:	4993      	ldr	r1, [pc, #588]	; (26a4 <Clock_Ip_InitClock+0x594>)
    2458:	9a02      	ldr	r2, [sp, #8]
    245a:	4613      	mov	r3, r2
    245c:	009b      	lsls	r3, r3, #2
    245e:	4413      	add	r3, r2
    2460:	009b      	lsls	r3, r3, #2
    2462:	440b      	add	r3, r1
    2464:	3304      	adds	r3, #4
    2466:	6819      	ldr	r1, [r3, #0]
    2468:	9a03      	ldr	r2, [sp, #12]
    246a:	4613      	mov	r3, r2
    246c:	009b      	lsls	r3, r3, #2
    246e:	4413      	add	r3, r2
    2470:	00db      	lsls	r3, r3, #3
    2472:	3340      	adds	r3, #64	; 0x40
    2474:	9a01      	ldr	r2, [sp, #4]
    2476:	4413      	add	r3, r2
    2478:	4618      	mov	r0, r3
    247a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    247c:	9b03      	ldr	r3, [sp, #12]
    247e:	3301      	adds	r3, #1
    2480:	9303      	str	r3, [sp, #12]
    2482:	9b01      	ldr	r3, [sp, #4]
    2484:	7a9b      	ldrb	r3, [r3, #10]
    2486:	461a      	mov	r2, r3
    2488:	9b03      	ldr	r3, [sp, #12]
    248a:	4293      	cmp	r3, r2
    248c:	d3cf      	bcc.n	242e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    248e:	2300      	movs	r3, #0
    2490:	9303      	str	r3, [sp, #12]
    2492:	e029      	b.n	24e8 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2494:	9901      	ldr	r1, [sp, #4]
    2496:	9a03      	ldr	r2, [sp, #12]
    2498:	4613      	mov	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	4413      	add	r3, r2
    249e:	009b      	lsls	r3, r3, #2
    24a0:	440b      	add	r3, r1
    24a2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24a6:	681a      	ldr	r2, [r3, #0]
    24a8:	497a      	ldr	r1, [pc, #488]	; (2694 <Clock_Ip_InitClock+0x584>)
    24aa:	4613      	mov	r3, r2
    24ac:	00db      	lsls	r3, r3, #3
    24ae:	4413      	add	r3, r2
    24b0:	440b      	add	r3, r1
    24b2:	3301      	adds	r3, #1
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	461a      	mov	r2, r3
    24b8:	4b7b      	ldr	r3, [pc, #492]	; (26a8 <Clock_Ip_InitClock+0x598>)
    24ba:	5c9b      	ldrb	r3, [r3, r2]
    24bc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    24be:	4a7b      	ldr	r2, [pc, #492]	; (26ac <Clock_Ip_InitClock+0x59c>)
    24c0:	9b02      	ldr	r3, [sp, #8]
    24c2:	011b      	lsls	r3, r3, #4
    24c4:	4413      	add	r3, r2
    24c6:	3304      	adds	r3, #4
    24c8:	681c      	ldr	r4, [r3, #0]
    24ca:	9a03      	ldr	r2, [sp, #12]
    24cc:	4613      	mov	r3, r2
    24ce:	009b      	lsls	r3, r3, #2
    24d0:	4413      	add	r3, r2
    24d2:	009b      	lsls	r3, r3, #2
    24d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24d8:	9a01      	ldr	r2, [sp, #4]
    24da:	4413      	add	r3, r2
    24dc:	9903      	ldr	r1, [sp, #12]
    24de:	4618      	mov	r0, r3
    24e0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24e2:	9b03      	ldr	r3, [sp, #12]
    24e4:	3301      	adds	r3, #1
    24e6:	9303      	str	r3, [sp, #12]
    24e8:	9b01      	ldr	r3, [sp, #4]
    24ea:	7c9b      	ldrb	r3, [r3, #18]
    24ec:	461a      	mov	r2, r3
    24ee:	9b03      	ldr	r3, [sp, #12]
    24f0:	4293      	cmp	r3, r2
    24f2:	d3cf      	bcc.n	2494 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24f4:	2300      	movs	r3, #0
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	e02a      	b.n	2550 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    24fa:	9901      	ldr	r1, [sp, #4]
    24fc:	9a03      	ldr	r2, [sp, #12]
    24fe:	4613      	mov	r3, r2
    2500:	009b      	lsls	r3, r3, #2
    2502:	4413      	add	r3, r2
    2504:	009b      	lsls	r3, r3, #2
    2506:	440b      	add	r3, r1
    2508:	332c      	adds	r3, #44	; 0x2c
    250a:	681a      	ldr	r2, [r3, #0]
    250c:	4961      	ldr	r1, [pc, #388]	; (2694 <Clock_Ip_InitClock+0x584>)
    250e:	4613      	mov	r3, r2
    2510:	00db      	lsls	r3, r3, #3
    2512:	4413      	add	r3, r2
    2514:	440b      	add	r3, r1
    2516:	3301      	adds	r3, #1
    2518:	781b      	ldrb	r3, [r3, #0]
    251a:	461a      	mov	r2, r3
    251c:	4b64      	ldr	r3, [pc, #400]	; (26b0 <Clock_Ip_InitClock+0x5a0>)
    251e:	5c9b      	ldrb	r3, [r3, r2]
    2520:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2522:	4964      	ldr	r1, [pc, #400]	; (26b4 <Clock_Ip_InitClock+0x5a4>)
    2524:	9a02      	ldr	r2, [sp, #8]
    2526:	4613      	mov	r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	4413      	add	r3, r2
    252c:	009b      	lsls	r3, r3, #2
    252e:	440b      	add	r3, r1
    2530:	3308      	adds	r3, #8
    2532:	6819      	ldr	r1, [r3, #0]
    2534:	9a03      	ldr	r2, [sp, #12]
    2536:	4613      	mov	r3, r2
    2538:	009b      	lsls	r3, r3, #2
    253a:	4413      	add	r3, r2
    253c:	009b      	lsls	r3, r3, #2
    253e:	3328      	adds	r3, #40	; 0x28
    2540:	9a01      	ldr	r2, [sp, #4]
    2542:	4413      	add	r3, r2
    2544:	3304      	adds	r3, #4
    2546:	4618      	mov	r0, r3
    2548:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    254a:	9b03      	ldr	r3, [sp, #12]
    254c:	3301      	adds	r3, #1
    254e:	9303      	str	r3, [sp, #12]
    2550:	9b01      	ldr	r3, [sp, #4]
    2552:	7a5b      	ldrb	r3, [r3, #9]
    2554:	461a      	mov	r2, r3
    2556:	9b03      	ldr	r3, [sp, #12]
    2558:	4293      	cmp	r3, r2
    255a:	d3ce      	bcc.n	24fa <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    255c:	2300      	movs	r3, #0
    255e:	9303      	str	r3, [sp, #12]
    2560:	e029      	b.n	25b6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2562:	9901      	ldr	r1, [sp, #4]
    2564:	9a03      	ldr	r2, [sp, #12]
    2566:	4613      	mov	r3, r2
    2568:	009b      	lsls	r3, r3, #2
    256a:	4413      	add	r3, r2
    256c:	00db      	lsls	r3, r3, #3
    256e:	440b      	add	r3, r1
    2570:	3340      	adds	r3, #64	; 0x40
    2572:	681a      	ldr	r2, [r3, #0]
    2574:	4947      	ldr	r1, [pc, #284]	; (2694 <Clock_Ip_InitClock+0x584>)
    2576:	4613      	mov	r3, r2
    2578:	00db      	lsls	r3, r3, #3
    257a:	4413      	add	r3, r2
    257c:	440b      	add	r3, r1
    257e:	3301      	adds	r3, #1
    2580:	781b      	ldrb	r3, [r3, #0]
    2582:	461a      	mov	r2, r3
    2584:	4b46      	ldr	r3, [pc, #280]	; (26a0 <Clock_Ip_InitClock+0x590>)
    2586:	5c9b      	ldrb	r3, [r3, r2]
    2588:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    258a:	4946      	ldr	r1, [pc, #280]	; (26a4 <Clock_Ip_InitClock+0x594>)
    258c:	9a02      	ldr	r2, [sp, #8]
    258e:	4613      	mov	r3, r2
    2590:	009b      	lsls	r3, r3, #2
    2592:	4413      	add	r3, r2
    2594:	009b      	lsls	r3, r3, #2
    2596:	440b      	add	r3, r1
    2598:	330c      	adds	r3, #12
    259a:	6819      	ldr	r1, [r3, #0]
    259c:	9a03      	ldr	r2, [sp, #12]
    259e:	4613      	mov	r3, r2
    25a0:	009b      	lsls	r3, r3, #2
    25a2:	4413      	add	r3, r2
    25a4:	00db      	lsls	r3, r3, #3
    25a6:	3340      	adds	r3, #64	; 0x40
    25a8:	9a01      	ldr	r2, [sp, #4]
    25aa:	4413      	add	r3, r2
    25ac:	4618      	mov	r0, r3
    25ae:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25b0:	9b03      	ldr	r3, [sp, #12]
    25b2:	3301      	adds	r3, #1
    25b4:	9303      	str	r3, [sp, #12]
    25b6:	9b01      	ldr	r3, [sp, #4]
    25b8:	7a9b      	ldrb	r3, [r3, #10]
    25ba:	461a      	mov	r2, r3
    25bc:	9b03      	ldr	r3, [sp, #12]
    25be:	4293      	cmp	r3, r2
    25c0:	d3cf      	bcc.n	2562 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25c2:	2300      	movs	r3, #0
    25c4:	9303      	str	r3, [sp, #12]
    25c6:	e025      	b.n	2614 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    25c8:	9a01      	ldr	r2, [sp, #4]
    25ca:	9b03      	ldr	r3, [sp, #12]
    25cc:	3324      	adds	r3, #36	; 0x24
    25ce:	011b      	lsls	r3, r3, #4
    25d0:	4413      	add	r3, r2
    25d2:	3304      	adds	r3, #4
    25d4:	681a      	ldr	r2, [r3, #0]
    25d6:	492f      	ldr	r1, [pc, #188]	; (2694 <Clock_Ip_InitClock+0x584>)
    25d8:	4613      	mov	r3, r2
    25da:	00db      	lsls	r3, r3, #3
    25dc:	4413      	add	r3, r2
    25de:	440b      	add	r3, r1
    25e0:	3301      	adds	r3, #1
    25e2:	781b      	ldrb	r3, [r3, #0]
    25e4:	461a      	mov	r2, r3
    25e6:	4b34      	ldr	r3, [pc, #208]	; (26b8 <Clock_Ip_InitClock+0x5a8>)
    25e8:	5c9b      	ldrb	r3, [r3, r2]
    25ea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    25ec:	4933      	ldr	r1, [pc, #204]	; (26bc <Clock_Ip_InitClock+0x5ac>)
    25ee:	9a02      	ldr	r2, [sp, #8]
    25f0:	4613      	mov	r3, r2
    25f2:	005b      	lsls	r3, r3, #1
    25f4:	4413      	add	r3, r2
    25f6:	009b      	lsls	r3, r3, #2
    25f8:	440b      	add	r3, r1
    25fa:	3304      	adds	r3, #4
    25fc:	681b      	ldr	r3, [r3, #0]
    25fe:	9a03      	ldr	r2, [sp, #12]
    2600:	3224      	adds	r2, #36	; 0x24
    2602:	0112      	lsls	r2, r2, #4
    2604:	9901      	ldr	r1, [sp, #4]
    2606:	440a      	add	r2, r1
    2608:	3204      	adds	r2, #4
    260a:	4610      	mov	r0, r2
    260c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    260e:	9b03      	ldr	r3, [sp, #12]
    2610:	3301      	adds	r3, #1
    2612:	9303      	str	r3, [sp, #12]
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	7b9b      	ldrb	r3, [r3, #14]
    2618:	461a      	mov	r2, r3
    261a:	9b03      	ldr	r3, [sp, #12]
    261c:	4293      	cmp	r3, r2
    261e:	d3d3      	bcc.n	25c8 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2620:	4b27      	ldr	r3, [pc, #156]	; (26c0 <Clock_Ip_InitClock+0x5b0>)
    2622:	2200      	movs	r2, #0
    2624:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2626:	4b26      	ldr	r3, [pc, #152]	; (26c0 <Clock_Ip_InitClock+0x5b0>)
    2628:	2200      	movs	r2, #0
    262a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    262c:	4b24      	ldr	r3, [pc, #144]	; (26c0 <Clock_Ip_InitClock+0x5b0>)
    262e:	2201      	movs	r2, #1
    2630:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2632:	4b23      	ldr	r3, [pc, #140]	; (26c0 <Clock_Ip_InitClock+0x5b0>)
    2634:	2200      	movs	r2, #0
    2636:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2638:	f000 fa9c 	bl	2b74 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    263c:	2300      	movs	r3, #0
    263e:	9303      	str	r3, [sp, #12]
    2640:	e04c      	b.n	26dc <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2642:	9a01      	ldr	r2, [sp, #4]
    2644:	9b03      	ldr	r3, [sp, #12]
    2646:	330d      	adds	r3, #13
    2648:	00db      	lsls	r3, r3, #3
    264a:	4413      	add	r3, r2
    264c:	685b      	ldr	r3, [r3, #4]
    264e:	4a1d      	ldr	r2, [pc, #116]	; (26c4 <Clock_Ip_InitClock+0x5b4>)
    2650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2654:	2b03      	cmp	r3, #3
    2656:	d03b      	beq.n	26d0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2658:	9b01      	ldr	r3, [sp, #4]
    265a:	9a03      	ldr	r2, [sp, #12]
    265c:	320d      	adds	r2, #13
    265e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2662:	490c      	ldr	r1, [pc, #48]	; (2694 <Clock_Ip_InitClock+0x584>)
    2664:	4613      	mov	r3, r2
    2666:	00db      	lsls	r3, r3, #3
    2668:	4413      	add	r3, r2
    266a:	440b      	add	r3, r1
    266c:	3301      	adds	r3, #1
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	461a      	mov	r2, r3
    2672:	4b15      	ldr	r3, [pc, #84]	; (26c8 <Clock_Ip_InitClock+0x5b8>)
    2674:	5c9b      	ldrb	r3, [r3, r2]
    2676:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2678:	4a14      	ldr	r2, [pc, #80]	; (26cc <Clock_Ip_InitClock+0x5bc>)
    267a:	9b02      	ldr	r3, [sp, #8]
    267c:	00db      	lsls	r3, r3, #3
    267e:	4413      	add	r3, r2
    2680:	685b      	ldr	r3, [r3, #4]
    2682:	9a03      	ldr	r2, [sp, #12]
    2684:	320d      	adds	r2, #13
    2686:	00d2      	lsls	r2, r2, #3
    2688:	9901      	ldr	r1, [sp, #4]
    268a:	440a      	add	r2, r1
    268c:	4610      	mov	r0, r2
    268e:	4798      	blx	r3
    2690:	e021      	b.n	26d6 <Clock_Ip_InitClock+0x5c6>
    2692:	bf00      	nop
    2694:	00010870 	.word	0x00010870
    2698:	000107e0 	.word	0x000107e0
    269c:	00010dbc 	.word	0x00010dbc
    26a0:	00010830 	.word	0x00010830
    26a4:	00010e7c 	.word	0x00010e7c
    26a8:	00010860 	.word	0x00010860
    26ac:	00010e6c 	.word	0x00010e6c
    26b0:	000107f0 	.word	0x000107f0
    26b4:	00010dc4 	.word	0x00010dc4
    26b8:	00010820 	.word	0x00010820
    26bc:	00010dec 	.word	0x00010dec
    26c0:	1fff8b58 	.word	0x1fff8b58
    26c4:	00010cbc 	.word	0x00010cbc
    26c8:	00010840 	.word	0x00010840
    26cc:	00010ea8 	.word	0x00010ea8
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    26d0:	4b3a      	ldr	r3, [pc, #232]	; (27bc <Clock_Ip_InitClock+0x6ac>)
    26d2:	2201      	movs	r2, #1
    26d4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26d6:	9b03      	ldr	r3, [sp, #12]
    26d8:	3301      	adds	r3, #1
    26da:	9303      	str	r3, [sp, #12]
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	7adb      	ldrb	r3, [r3, #11]
    26e0:	461a      	mov	r2, r3
    26e2:	9b03      	ldr	r3, [sp, #12]
    26e4:	4293      	cmp	r3, r2
    26e6:	d3ac      	bcc.n	2642 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    26e8:	4b34      	ldr	r3, [pc, #208]	; (27bc <Clock_Ip_InitClock+0x6ac>)
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	f083 0301 	eor.w	r3, r3, #1
    26f0:	b2db      	uxtb	r3, r3
    26f2:	2b00      	cmp	r3, #0
    26f4:	d05e      	beq.n	27b4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26f6:	2300      	movs	r3, #0
    26f8:	9303      	str	r3, [sp, #12]
    26fa:	e01f      	b.n	273c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    26fc:	9a01      	ldr	r2, [sp, #4]
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	334e      	adds	r3, #78	; 0x4e
    2702:	00db      	lsls	r3, r3, #3
    2704:	4413      	add	r3, r2
    2706:	685a      	ldr	r2, [r3, #4]
    2708:	492d      	ldr	r1, [pc, #180]	; (27c0 <Clock_Ip_InitClock+0x6b0>)
    270a:	4613      	mov	r3, r2
    270c:	00db      	lsls	r3, r3, #3
    270e:	4413      	add	r3, r2
    2710:	440b      	add	r3, r1
    2712:	3301      	adds	r3, #1
    2714:	781b      	ldrb	r3, [r3, #0]
    2716:	461a      	mov	r2, r3
    2718:	4b2a      	ldr	r3, [pc, #168]	; (27c4 <Clock_Ip_InitClock+0x6b4>)
    271a:	5c9b      	ldrb	r3, [r3, r2]
    271c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    271e:	4a2a      	ldr	r2, [pc, #168]	; (27c8 <Clock_Ip_InitClock+0x6b8>)
    2720:	9b02      	ldr	r3, [sp, #8]
    2722:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2726:	9a03      	ldr	r2, [sp, #12]
    2728:	324e      	adds	r2, #78	; 0x4e
    272a:	00d2      	lsls	r2, r2, #3
    272c:	9901      	ldr	r1, [sp, #4]
    272e:	440a      	add	r2, r1
    2730:	3204      	adds	r2, #4
    2732:	4610      	mov	r0, r2
    2734:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2736:	9b03      	ldr	r3, [sp, #12]
    2738:	3301      	adds	r3, #1
    273a:	9303      	str	r3, [sp, #12]
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	7c1b      	ldrb	r3, [r3, #16]
    2740:	461a      	mov	r2, r3
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	4293      	cmp	r3, r2
    2746:	d3d9      	bcc.n	26fc <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2748:	2300      	movs	r3, #0
    274a:	9303      	str	r3, [sp, #12]
    274c:	e028      	b.n	27a0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    274e:	9901      	ldr	r1, [sp, #4]
    2750:	9a03      	ldr	r2, [sp, #12]
    2752:	4613      	mov	r3, r2
    2754:	009b      	lsls	r3, r3, #2
    2756:	4413      	add	r3, r2
    2758:	009b      	lsls	r3, r3, #2
    275a:	440b      	add	r3, r1
    275c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2760:	681a      	ldr	r2, [r3, #0]
    2762:	4917      	ldr	r1, [pc, #92]	; (27c0 <Clock_Ip_InitClock+0x6b0>)
    2764:	4613      	mov	r3, r2
    2766:	00db      	lsls	r3, r3, #3
    2768:	4413      	add	r3, r2
    276a:	440b      	add	r3, r1
    276c:	3301      	adds	r3, #1
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	461a      	mov	r2, r3
    2772:	4b16      	ldr	r3, [pc, #88]	; (27cc <Clock_Ip_InitClock+0x6bc>)
    2774:	5c9b      	ldrb	r3, [r3, r2]
    2776:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2778:	4a15      	ldr	r2, [pc, #84]	; (27d0 <Clock_Ip_InitClock+0x6c0>)
    277a:	9b02      	ldr	r3, [sp, #8]
    277c:	011b      	lsls	r3, r3, #4
    277e:	4413      	add	r3, r2
    2780:	330c      	adds	r3, #12
    2782:	6819      	ldr	r1, [r3, #0]
    2784:	9a03      	ldr	r2, [sp, #12]
    2786:	4613      	mov	r3, r2
    2788:	009b      	lsls	r3, r3, #2
    278a:	4413      	add	r3, r2
    278c:	009b      	lsls	r3, r3, #2
    278e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2792:	9a01      	ldr	r2, [sp, #4]
    2794:	4413      	add	r3, r2
    2796:	4618      	mov	r0, r3
    2798:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    279a:	9b03      	ldr	r3, [sp, #12]
    279c:	3301      	adds	r3, #1
    279e:	9303      	str	r3, [sp, #12]
    27a0:	9b01      	ldr	r3, [sp, #4]
    27a2:	7c9b      	ldrb	r3, [r3, #18]
    27a4:	461a      	mov	r2, r3
    27a6:	9b03      	ldr	r3, [sp, #12]
    27a8:	4293      	cmp	r3, r2
    27aa:	d3d0      	bcc.n	274e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27ac:	2104      	movs	r1, #4
    27ae:	9801      	ldr	r0, [sp, #4]
    27b0:	f002 ff48 	bl	5644 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27b4:	bf00      	nop
    27b6:	b004      	add	sp, #16
    27b8:	bd10      	pop	{r4, pc}
    27ba:	bf00      	nop
    27bc:	1fff8b58 	.word	0x1fff8b58
    27c0:	00010870 	.word	0x00010870
    27c4:	00010810 	.word	0x00010810
    27c8:	00010df8 	.word	0x00010df8
    27cc:	00010860 	.word	0x00010860
    27d0:	00010e6c 	.word	0x00010e6c

000027d4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    27d4:	b500      	push	{lr}
    27d6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    27d8:	2302      	movs	r3, #2
    27da:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27dc:	2300      	movs	r3, #0
    27de:	9304      	str	r3, [sp, #16]
    27e0:	e02c      	b.n	283c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    27e2:	4a36      	ldr	r2, [pc, #216]	; (28bc <Clock_Ip_GetPllStatus+0xe8>)
    27e4:	9b04      	ldr	r3, [sp, #16]
    27e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27ea:	4935      	ldr	r1, [pc, #212]	; (28c0 <Clock_Ip_GetPllStatus+0xec>)
    27ec:	4613      	mov	r3, r2
    27ee:	00db      	lsls	r3, r3, #3
    27f0:	4413      	add	r3, r2
    27f2:	440b      	add	r3, r1
    27f4:	3301      	adds	r3, #1
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	461a      	mov	r2, r3
    27fa:	4b32      	ldr	r3, [pc, #200]	; (28c4 <Clock_Ip_GetPllStatus+0xf0>)
    27fc:	5c9b      	ldrb	r3, [r3, r2]
    27fe:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2800:	4931      	ldr	r1, [pc, #196]	; (28c8 <Clock_Ip_GetPllStatus+0xf4>)
    2802:	9a03      	ldr	r2, [sp, #12]
    2804:	4613      	mov	r3, r2
    2806:	009b      	lsls	r3, r3, #2
    2808:	4413      	add	r3, r2
    280a:	009b      	lsls	r3, r3, #2
    280c:	440b      	add	r3, r1
    280e:	3308      	adds	r3, #8
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	492a      	ldr	r1, [pc, #168]	; (28bc <Clock_Ip_GetPllStatus+0xe8>)
    2814:	9a04      	ldr	r2, [sp, #16]
    2816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    281a:	4610      	mov	r0, r2
    281c:	4798      	blx	r3
    281e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2820:	9b02      	ldr	r3, [sp, #8]
    2822:	2b01      	cmp	r3, #1
    2824:	d102      	bne.n	282c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2826:	2301      	movs	r3, #1
    2828:	9305      	str	r3, [sp, #20]
            break;
    282a:	e00d      	b.n	2848 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    282c:	9b02      	ldr	r3, [sp, #8]
    282e:	2b02      	cmp	r3, #2
    2830:	d101      	bne.n	2836 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2832:	2300      	movs	r3, #0
    2834:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2836:	9b04      	ldr	r3, [sp, #16]
    2838:	3301      	adds	r3, #1
    283a:	9304      	str	r3, [sp, #16]
    283c:	4b23      	ldr	r3, [pc, #140]	; (28cc <Clock_Ip_GetPllStatus+0xf8>)
    283e:	789b      	ldrb	r3, [r3, #2]
    2840:	461a      	mov	r2, r3
    2842:	9b04      	ldr	r3, [sp, #16]
    2844:	4293      	cmp	r3, r2
    2846:	d3cc      	bcc.n	27e2 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2848:	9b05      	ldr	r3, [sp, #20]
    284a:	2b00      	cmp	r3, #0
    284c:	d130      	bne.n	28b0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    284e:	2300      	movs	r3, #0
    2850:	9304      	str	r3, [sp, #16]
    2852:	e027      	b.n	28a4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2854:	4a1e      	ldr	r2, [pc, #120]	; (28d0 <Clock_Ip_GetPllStatus+0xfc>)
    2856:	9b04      	ldr	r3, [sp, #16]
    2858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    285c:	4918      	ldr	r1, [pc, #96]	; (28c0 <Clock_Ip_GetPllStatus+0xec>)
    285e:	4613      	mov	r3, r2
    2860:	00db      	lsls	r3, r3, #3
    2862:	4413      	add	r3, r2
    2864:	440b      	add	r3, r1
    2866:	3301      	adds	r3, #1
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	461a      	mov	r2, r3
    286c:	4b19      	ldr	r3, [pc, #100]	; (28d4 <Clock_Ip_GetPllStatus+0x100>)
    286e:	5c9b      	ldrb	r3, [r3, r2]
    2870:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2872:	4919      	ldr	r1, [pc, #100]	; (28d8 <Clock_Ip_GetPllStatus+0x104>)
    2874:	9a03      	ldr	r2, [sp, #12]
    2876:	4613      	mov	r3, r2
    2878:	005b      	lsls	r3, r3, #1
    287a:	4413      	add	r3, r2
    287c:	009b      	lsls	r3, r3, #2
    287e:	440b      	add	r3, r1
    2880:	3308      	adds	r3, #8
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	4912      	ldr	r1, [pc, #72]	; (28d0 <Clock_Ip_GetPllStatus+0xfc>)
    2886:	9a04      	ldr	r2, [sp, #16]
    2888:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    288c:	4610      	mov	r0, r2
    288e:	4798      	blx	r3
    2890:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2892:	9b01      	ldr	r3, [sp, #4]
    2894:	2b01      	cmp	r3, #1
    2896:	d102      	bne.n	289e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2898:	2301      	movs	r3, #1
    289a:	9305      	str	r3, [sp, #20]
                break;
    289c:	e008      	b.n	28b0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    289e:	9b04      	ldr	r3, [sp, #16]
    28a0:	3301      	adds	r3, #1
    28a2:	9304      	str	r3, [sp, #16]
    28a4:	4b09      	ldr	r3, [pc, #36]	; (28cc <Clock_Ip_GetPllStatus+0xf8>)
    28a6:	78db      	ldrb	r3, [r3, #3]
    28a8:	461a      	mov	r2, r3
    28aa:	9b04      	ldr	r3, [sp, #16]
    28ac:	4293      	cmp	r3, r2
    28ae:	d3d1      	bcc.n	2854 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28b0:	9b05      	ldr	r3, [sp, #20]
}
    28b2:	4618      	mov	r0, r3
    28b4:	b007      	add	sp, #28
    28b6:	f85d fb04 	ldr.w	pc, [sp], #4
    28ba:	bf00      	nop
    28bc:	00010d78 	.word	0x00010d78
    28c0:	00010870 	.word	0x00010870
    28c4:	00010830 	.word	0x00010830
    28c8:	00010e7c 	.word	0x00010e7c
    28cc:	1fff8b58 	.word	0x1fff8b58
    28d0:	00010d7c 	.word	0x00010d7c
    28d4:	00010820 	.word	0x00010820
    28d8:	00010dec 	.word	0x00010dec

000028dc <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    28dc:	b500      	push	{lr}
    28de:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    28e0:	4b55      	ldr	r3, [pc, #340]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    28e2:	681b      	ldr	r3, [r3, #0]
    28e4:	2b00      	cmp	r3, #0
    28e6:	f000 80a2 	beq.w	2a2e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28ea:	2300      	movs	r3, #0
    28ec:	9301      	str	r3, [sp, #4]
    28ee:	e02c      	b.n	294a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    28f0:	4b51      	ldr	r3, [pc, #324]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    28f2:	681a      	ldr	r2, [r3, #0]
    28f4:	9b01      	ldr	r3, [sp, #4]
    28f6:	330d      	adds	r3, #13
    28f8:	00db      	lsls	r3, r3, #3
    28fa:	4413      	add	r3, r2
    28fc:	685b      	ldr	r3, [r3, #4]
    28fe:	4a4f      	ldr	r2, [pc, #316]	; (2a3c <Clock_Ip_DistributePll+0x160>)
    2900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2904:	2b03      	cmp	r3, #3
    2906:	d11d      	bne.n	2944 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2908:	4b4b      	ldr	r3, [pc, #300]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    290a:	681b      	ldr	r3, [r3, #0]
    290c:	9a01      	ldr	r2, [sp, #4]
    290e:	320d      	adds	r2, #13
    2910:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2914:	494a      	ldr	r1, [pc, #296]	; (2a40 <Clock_Ip_DistributePll+0x164>)
    2916:	4613      	mov	r3, r2
    2918:	00db      	lsls	r3, r3, #3
    291a:	4413      	add	r3, r2
    291c:	440b      	add	r3, r1
    291e:	3301      	adds	r3, #1
    2920:	781b      	ldrb	r3, [r3, #0]
    2922:	461a      	mov	r2, r3
    2924:	4b47      	ldr	r3, [pc, #284]	; (2a44 <Clock_Ip_DistributePll+0x168>)
    2926:	5c9b      	ldrb	r3, [r3, r2]
    2928:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    292a:	4a47      	ldr	r2, [pc, #284]	; (2a48 <Clock_Ip_DistributePll+0x16c>)
    292c:	9b00      	ldr	r3, [sp, #0]
    292e:	00db      	lsls	r3, r3, #3
    2930:	4413      	add	r3, r2
    2932:	685b      	ldr	r3, [r3, #4]
    2934:	4a40      	ldr	r2, [pc, #256]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    2936:	6811      	ldr	r1, [r2, #0]
    2938:	9a01      	ldr	r2, [sp, #4]
    293a:	320d      	adds	r2, #13
    293c:	00d2      	lsls	r2, r2, #3
    293e:	440a      	add	r2, r1
    2940:	4610      	mov	r0, r2
    2942:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2944:	9b01      	ldr	r3, [sp, #4]
    2946:	3301      	adds	r3, #1
    2948:	9301      	str	r3, [sp, #4]
    294a:	4b3b      	ldr	r3, [pc, #236]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	7adb      	ldrb	r3, [r3, #11]
    2950:	461a      	mov	r2, r3
    2952:	9b01      	ldr	r3, [sp, #4]
    2954:	4293      	cmp	r3, r2
    2956:	d3cb      	bcc.n	28f0 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2958:	4b3c      	ldr	r3, [pc, #240]	; (2a4c <Clock_Ip_DistributePll+0x170>)
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	2b00      	cmp	r3, #0
    295e:	d066      	beq.n	2a2e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2960:	2300      	movs	r3, #0
    2962:	9301      	str	r3, [sp, #4]
    2964:	e021      	b.n	29aa <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2966:	4b34      	ldr	r3, [pc, #208]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    2968:	681a      	ldr	r2, [r3, #0]
    296a:	9b01      	ldr	r3, [sp, #4]
    296c:	334e      	adds	r3, #78	; 0x4e
    296e:	00db      	lsls	r3, r3, #3
    2970:	4413      	add	r3, r2
    2972:	685a      	ldr	r2, [r3, #4]
    2974:	4932      	ldr	r1, [pc, #200]	; (2a40 <Clock_Ip_DistributePll+0x164>)
    2976:	4613      	mov	r3, r2
    2978:	00db      	lsls	r3, r3, #3
    297a:	4413      	add	r3, r2
    297c:	440b      	add	r3, r1
    297e:	3301      	adds	r3, #1
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	461a      	mov	r2, r3
    2984:	4b32      	ldr	r3, [pc, #200]	; (2a50 <Clock_Ip_DistributePll+0x174>)
    2986:	5c9b      	ldrb	r3, [r3, r2]
    2988:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    298a:	4a32      	ldr	r2, [pc, #200]	; (2a54 <Clock_Ip_DistributePll+0x178>)
    298c:	9b00      	ldr	r3, [sp, #0]
    298e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2992:	4a29      	ldr	r2, [pc, #164]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    2994:	6811      	ldr	r1, [r2, #0]
    2996:	9a01      	ldr	r2, [sp, #4]
    2998:	324e      	adds	r2, #78	; 0x4e
    299a:	00d2      	lsls	r2, r2, #3
    299c:	440a      	add	r2, r1
    299e:	3204      	adds	r2, #4
    29a0:	4610      	mov	r0, r2
    29a2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	3301      	adds	r3, #1
    29a8:	9301      	str	r3, [sp, #4]
    29aa:	4b23      	ldr	r3, [pc, #140]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    29ac:	681b      	ldr	r3, [r3, #0]
    29ae:	7c1b      	ldrb	r3, [r3, #16]
    29b0:	461a      	mov	r2, r3
    29b2:	9b01      	ldr	r3, [sp, #4]
    29b4:	4293      	cmp	r3, r2
    29b6:	d3d6      	bcc.n	2966 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29b8:	2300      	movs	r3, #0
    29ba:	9301      	str	r3, [sp, #4]
    29bc:	e02a      	b.n	2a14 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29be:	4b1e      	ldr	r3, [pc, #120]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    29c0:	6819      	ldr	r1, [r3, #0]
    29c2:	9a01      	ldr	r2, [sp, #4]
    29c4:	4613      	mov	r3, r2
    29c6:	009b      	lsls	r3, r3, #2
    29c8:	4413      	add	r3, r2
    29ca:	009b      	lsls	r3, r3, #2
    29cc:	440b      	add	r3, r1
    29ce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29d2:	681a      	ldr	r2, [r3, #0]
    29d4:	491a      	ldr	r1, [pc, #104]	; (2a40 <Clock_Ip_DistributePll+0x164>)
    29d6:	4613      	mov	r3, r2
    29d8:	00db      	lsls	r3, r3, #3
    29da:	4413      	add	r3, r2
    29dc:	440b      	add	r3, r1
    29de:	3301      	adds	r3, #1
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	461a      	mov	r2, r3
    29e4:	4b1c      	ldr	r3, [pc, #112]	; (2a58 <Clock_Ip_DistributePll+0x17c>)
    29e6:	5c9b      	ldrb	r3, [r3, r2]
    29e8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    29ea:	4a1c      	ldr	r2, [pc, #112]	; (2a5c <Clock_Ip_DistributePll+0x180>)
    29ec:	9b00      	ldr	r3, [sp, #0]
    29ee:	011b      	lsls	r3, r3, #4
    29f0:	4413      	add	r3, r2
    29f2:	330c      	adds	r3, #12
    29f4:	6819      	ldr	r1, [r3, #0]
    29f6:	4b10      	ldr	r3, [pc, #64]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    29f8:	6818      	ldr	r0, [r3, #0]
    29fa:	9a01      	ldr	r2, [sp, #4]
    29fc:	4613      	mov	r3, r2
    29fe:	009b      	lsls	r3, r3, #2
    2a00:	4413      	add	r3, r2
    2a02:	009b      	lsls	r3, r3, #2
    2a04:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a08:	4403      	add	r3, r0
    2a0a:	4618      	mov	r0, r3
    2a0c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a0e:	9b01      	ldr	r3, [sp, #4]
    2a10:	3301      	adds	r3, #1
    2a12:	9301      	str	r3, [sp, #4]
    2a14:	4b08      	ldr	r3, [pc, #32]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	7c9b      	ldrb	r3, [r3, #18]
    2a1a:	461a      	mov	r2, r3
    2a1c:	9b01      	ldr	r3, [sp, #4]
    2a1e:	4293      	cmp	r3, r2
    2a20:	d3cd      	bcc.n	29be <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a22:	4b05      	ldr	r3, [pc, #20]	; (2a38 <Clock_Ip_DistributePll+0x15c>)
    2a24:	681b      	ldr	r3, [r3, #0]
    2a26:	2104      	movs	r1, #4
    2a28:	4618      	mov	r0, r3
    2a2a:	f002 fe0b 	bl	5644 <Clock_Ip_Command>
        }
    }
}
    2a2e:	bf00      	nop
    2a30:	b003      	add	sp, #12
    2a32:	f85d fb04 	ldr.w	pc, [sp], #4
    2a36:	bf00      	nop
    2a38:	1fff8b50 	.word	0x1fff8b50
    2a3c:	00010cbc 	.word	0x00010cbc
    2a40:	00010870 	.word	0x00010870
    2a44:	00010840 	.word	0x00010840
    2a48:	00010ea8 	.word	0x00010ea8
    2a4c:	1fff8b58 	.word	0x1fff8b58
    2a50:	00010810 	.word	0x00010810
    2a54:	00010df8 	.word	0x00010df8
    2a58:	00010860 	.word	0x00010860
    2a5c:	00010e6c 	.word	0x00010e6c

00002a60 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a60:	b500      	push	{lr}
    2a62:	b085      	sub	sp, #20
    2a64:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a66:	490c      	ldr	r1, [pc, #48]	; (2a98 <Clock_Ip_DisableClockMonitor+0x38>)
    2a68:	9a01      	ldr	r2, [sp, #4]
    2a6a:	4613      	mov	r3, r2
    2a6c:	00db      	lsls	r3, r3, #3
    2a6e:	4413      	add	r3, r2
    2a70:	440b      	add	r3, r1
    2a72:	3301      	adds	r3, #1
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	461a      	mov	r2, r3
    2a78:	4b08      	ldr	r3, [pc, #32]	; (2a9c <Clock_Ip_DisableClockMonitor+0x3c>)
    2a7a:	5c9b      	ldrb	r3, [r3, r2]
    2a7c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a7e:	4a08      	ldr	r2, [pc, #32]	; (2aa0 <Clock_Ip_DisableClockMonitor+0x40>)
    2a80:	9b03      	ldr	r3, [sp, #12]
    2a82:	011b      	lsls	r3, r3, #4
    2a84:	4413      	add	r3, r2
    2a86:	3308      	adds	r3, #8
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	9801      	ldr	r0, [sp, #4]
    2a8c:	4798      	blx	r3
}
    2a8e:	bf00      	nop
    2a90:	b005      	add	sp, #20
    2a92:	f85d fb04 	ldr.w	pc, [sp], #4
    2a96:	bf00      	nop
    2a98:	00010870 	.word	0x00010870
    2a9c:	00010860 	.word	0x00010860
    2aa0:	00010e6c 	.word	0x00010e6c

00002aa4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2aa4:	b082      	sub	sp, #8
    2aa6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2aa8:	4a02      	ldr	r2, [pc, #8]	; (2ab4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2aaa:	9b01      	ldr	r3, [sp, #4]
    2aac:	6013      	str	r3, [r2, #0]
}
    2aae:	bf00      	nop
    2ab0:	b002      	add	sp, #8
    2ab2:	4770      	bx	lr
    2ab4:	1fff8b14 	.word	0x1fff8b14

00002ab8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2ab8:	b500      	push	{lr}
    2aba:	b085      	sub	sp, #20
    2abc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2abe:	490c      	ldr	r1, [pc, #48]	; (2af0 <Clock_Ip_DisableModuleClock+0x38>)
    2ac0:	9a01      	ldr	r2, [sp, #4]
    2ac2:	4613      	mov	r3, r2
    2ac4:	00db      	lsls	r3, r3, #3
    2ac6:	4413      	add	r3, r2
    2ac8:	440b      	add	r3, r1
    2aca:	3301      	adds	r3, #1
    2acc:	781b      	ldrb	r3, [r3, #0]
    2ace:	461a      	mov	r2, r3
    2ad0:	4b08      	ldr	r3, [pc, #32]	; (2af4 <Clock_Ip_DisableModuleClock+0x3c>)
    2ad2:	5c9b      	ldrb	r3, [r3, r2]
    2ad4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2ad6:	4a08      	ldr	r2, [pc, #32]	; (2af8 <Clock_Ip_DisableModuleClock+0x40>)
    2ad8:	9b03      	ldr	r3, [sp, #12]
    2ada:	00db      	lsls	r3, r3, #3
    2adc:	4413      	add	r3, r2
    2ade:	685b      	ldr	r3, [r3, #4]
    2ae0:	2101      	movs	r1, #1
    2ae2:	9801      	ldr	r0, [sp, #4]
    2ae4:	4798      	blx	r3
}
    2ae6:	bf00      	nop
    2ae8:	b005      	add	sp, #20
    2aea:	f85d fb04 	ldr.w	pc, [sp], #4
    2aee:	bf00      	nop
    2af0:	00010870 	.word	0x00010870
    2af4:	00010810 	.word	0x00010810
    2af8:	00010df8 	.word	0x00010df8

00002afc <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2afc:	b500      	push	{lr}
    2afe:	b085      	sub	sp, #20
    2b00:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b02:	490c      	ldr	r1, [pc, #48]	; (2b34 <Clock_Ip_EnableModuleClock+0x38>)
    2b04:	9a01      	ldr	r2, [sp, #4]
    2b06:	4613      	mov	r3, r2
    2b08:	00db      	lsls	r3, r3, #3
    2b0a:	4413      	add	r3, r2
    2b0c:	440b      	add	r3, r1
    2b0e:	3301      	adds	r3, #1
    2b10:	781b      	ldrb	r3, [r3, #0]
    2b12:	461a      	mov	r2, r3
    2b14:	4b08      	ldr	r3, [pc, #32]	; (2b38 <Clock_Ip_EnableModuleClock+0x3c>)
    2b16:	5c9b      	ldrb	r3, [r3, r2]
    2b18:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b1a:	4a08      	ldr	r2, [pc, #32]	; (2b3c <Clock_Ip_EnableModuleClock+0x40>)
    2b1c:	9b03      	ldr	r3, [sp, #12]
    2b1e:	00db      	lsls	r3, r3, #3
    2b20:	4413      	add	r3, r2
    2b22:	685b      	ldr	r3, [r3, #4]
    2b24:	2100      	movs	r1, #0
    2b26:	9801      	ldr	r0, [sp, #4]
    2b28:	4798      	blx	r3
}
    2b2a:	bf00      	nop
    2b2c:	b005      	add	sp, #20
    2b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b32:	bf00      	nop
    2b34:	00010870 	.word	0x00010870
    2b38:	00010810 	.word	0x00010810
    2b3c:	00010df8 	.word	0x00010df8

00002b40 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b40:	b500      	push	{lr}
    2b42:	b083      	sub	sp, #12
    2b44:	9001      	str	r0, [sp, #4]
    2b46:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b48:	4b08      	ldr	r3, [pc, #32]	; (2b6c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b4a:	2200      	movs	r2, #0
    2b4c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b4e:	4b08      	ldr	r3, [pc, #32]	; (2b70 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	2102      	movs	r1, #2
    2b54:	4618      	mov	r0, r3
    2b56:	f002 fd75 	bl	5644 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b5a:	9900      	ldr	r1, [sp, #0]
    2b5c:	9801      	ldr	r0, [sp, #4]
    2b5e:	f002 fc51 	bl	5404 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b62:	bf00      	nop
    2b64:	b003      	add	sp, #12
    2b66:	f85d fb04 	ldr.w	pc, [sp], #4
    2b6a:	bf00      	nop
    2b6c:	1fff8b10 	.word	0x1fff8b10
    2b70:	1fff8b50 	.word	0x1fff8b50

00002b74 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b74:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b76:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b7a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b7c:	4b06      	ldr	r3, [pc, #24]	; (2b98 <Clock_Ip_SetWaitStates+0x24>)
    2b7e:	785b      	ldrb	r3, [r3, #1]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d005      	beq.n	2b90 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	3b01      	subs	r3, #1
    2b88:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b8a:	9b01      	ldr	r3, [sp, #4]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d1f9      	bne.n	2b84 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2b90:	bf00      	nop
    2b92:	b002      	add	sp, #8
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop
    2b98:	1fff8b58 	.word	0x1fff8b58

00002b9c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b9c:	b500      	push	{lr}
    2b9e:	b083      	sub	sp, #12
    2ba0:	9001      	str	r0, [sp, #4]
    2ba2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2ba4:	4b04      	ldr	r3, [pc, #16]	; (2bb8 <Clock_Ip_ReportClockErrors+0x1c>)
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	9900      	ldr	r1, [sp, #0]
    2baa:	9801      	ldr	r0, [sp, #4]
    2bac:	4798      	blx	r3
}
    2bae:	bf00      	nop
    2bb0:	b003      	add	sp, #12
    2bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    2bb6:	bf00      	nop
    2bb8:	1fff8b14 	.word	0x1fff8b14

00002bbc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2bbc:	b500      	push	{lr}
    2bbe:	b085      	sub	sp, #20
    2bc0:	9003      	str	r0, [sp, #12]
    2bc2:	9102      	str	r1, [sp, #8]
    2bc4:	9201      	str	r2, [sp, #4]
    2bc6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2bc8:	2000      	movs	r0, #0
    2bca:	f7fe ffd1 	bl	1b70 <OsIf_GetCounter>
    2bce:	4602      	mov	r2, r0
    2bd0:	9b03      	ldr	r3, [sp, #12]
    2bd2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2bd4:	9b02      	ldr	r3, [sp, #8]
    2bd6:	2200      	movs	r2, #0
    2bd8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2bda:	2100      	movs	r1, #0
    2bdc:	9800      	ldr	r0, [sp, #0]
    2bde:	f7ff f813 	bl	1c08 <OsIf_MicrosToTicks>
    2be2:	4602      	mov	r2, r0
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	601a      	str	r2, [r3, #0]
}
    2be8:	bf00      	nop
    2bea:	b005      	add	sp, #20
    2bec:	f85d fb04 	ldr.w	pc, [sp], #4

00002bf0 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2bf0:	b500      	push	{lr}
    2bf2:	b087      	sub	sp, #28
    2bf4:	9003      	str	r0, [sp, #12]
    2bf6:	9102      	str	r1, [sp, #8]
    2bf8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2bfa:	2300      	movs	r3, #0
    2bfc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c00:	2100      	movs	r1, #0
    2c02:	9803      	ldr	r0, [sp, #12]
    2c04:	f7fe ffcd 	bl	1ba2 <OsIf_GetElapsed>
    2c08:	4602      	mov	r2, r0
    2c0a:	9b02      	ldr	r3, [sp, #8]
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	441a      	add	r2, r3
    2c10:	9b02      	ldr	r3, [sp, #8]
    2c12:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c14:	9b02      	ldr	r3, [sp, #8]
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	9a01      	ldr	r2, [sp, #4]
    2c1a:	429a      	cmp	r2, r3
    2c1c:	d802      	bhi.n	2c24 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c1e:	2301      	movs	r3, #1
    2c20:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c24:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c28:	4618      	mov	r0, r3
    2c2a:	b007      	add	sp, #28
    2c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c30 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c30:	b082      	sub	sp, #8
    2c32:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c34:	bf00      	nop
    2c36:	b002      	add	sp, #8
    2c38:	4770      	bx	lr

00002c3a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c3a:	b500      	push	{lr}
    2c3c:	b083      	sub	sp, #12
    2c3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c40:	9b01      	ldr	r3, [sp, #4]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d002      	beq.n	2c4c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c46:	9801      	ldr	r0, [sp, #4]
    2c48:	f000 f8ad 	bl	2da6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c4c:	bf00      	nop
    2c4e:	b003      	add	sp, #12
    2c50:	f85d fb04 	ldr.w	pc, [sp], #4

00002c54 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c54:	b500      	push	{lr}
    2c56:	b083      	sub	sp, #12
    2c58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c5a:	9b01      	ldr	r3, [sp, #4]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d002      	beq.n	2c66 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c60:	9801      	ldr	r0, [sp, #4]
    2c62:	f000 f8cd 	bl	2e00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c66:	bf00      	nop
    2c68:	b003      	add	sp, #12
    2c6a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c6e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c6e:	b500      	push	{lr}
    2c70:	b083      	sub	sp, #12
    2c72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c74:	9b01      	ldr	r3, [sp, #4]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d002      	beq.n	2c80 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c7a:	9801      	ldr	r0, [sp, #4]
    2c7c:	f000 f8ee 	bl	2e5c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c80:	bf00      	nop
    2c82:	b003      	add	sp, #12
    2c84:	f85d fb04 	ldr.w	pc, [sp], #4

00002c88 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c88:	b500      	push	{lr}
    2c8a:	b083      	sub	sp, #12
    2c8c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c8e:	9b01      	ldr	r3, [sp, #4]
    2c90:	2b00      	cmp	r3, #0
    2c92:	d002      	beq.n	2c9a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2c94:	9801      	ldr	r0, [sp, #4]
    2c96:	f000 f8f9 	bl	2e8c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c9a:	bf00      	nop
    2c9c:	b003      	add	sp, #12
    2c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002ca2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ca2:	b500      	push	{lr}
    2ca4:	b083      	sub	sp, #12
    2ca6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ca8:	9b01      	ldr	r3, [sp, #4]
    2caa:	2b00      	cmp	r3, #0
    2cac:	d002      	beq.n	2cb4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2cae:	9801      	ldr	r0, [sp, #4]
    2cb0:	f000 f904 	bl	2ebc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cb4:	bf00      	nop
    2cb6:	b003      	add	sp, #12
    2cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002cbc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cbc:	b500      	push	{lr}
    2cbe:	b083      	sub	sp, #12
    2cc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cc2:	9b01      	ldr	r3, [sp, #4]
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d002      	beq.n	2cce <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2cc8:	9801      	ldr	r0, [sp, #4]
    2cca:	f000 f90f 	bl	2eec <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cce:	bf00      	nop
    2cd0:	b003      	add	sp, #12
    2cd2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cd6:	b500      	push	{lr}
    2cd8:	b083      	sub	sp, #12
    2cda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cdc:	9b01      	ldr	r3, [sp, #4]
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d002      	beq.n	2ce8 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2ce2:	9801      	ldr	r0, [sp, #4]
    2ce4:	f000 f91a 	bl	2f1c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce8:	bf00      	nop
    2cea:	b003      	add	sp, #12
    2cec:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf0 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cf0:	b500      	push	{lr}
    2cf2:	b083      	sub	sp, #12
    2cf4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d002      	beq.n	2d02 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2cfc:	9801      	ldr	r0, [sp, #4]
    2cfe:	f000 f925 	bl	2f4c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d02:	bf00      	nop
    2d04:	b003      	add	sp, #12
    2d06:	f85d fb04 	ldr.w	pc, [sp], #4

00002d0a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d0a:	b500      	push	{lr}
    2d0c:	b083      	sub	sp, #12
    2d0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d10:	9b01      	ldr	r3, [sp, #4]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d002      	beq.n	2d1c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d16:	9801      	ldr	r0, [sp, #4]
    2d18:	f000 f930 	bl	2f7c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d1c:	bf00      	nop
    2d1e:	b003      	add	sp, #12
    2d20:	f85d fb04 	ldr.w	pc, [sp], #4

00002d24 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d24:	b500      	push	{lr}
    2d26:	b083      	sub	sp, #12
    2d28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d2a:	9b01      	ldr	r3, [sp, #4]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d002      	beq.n	2d36 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d30:	9801      	ldr	r0, [sp, #4]
    2d32:	f000 f93b 	bl	2fac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d36:	bf00      	nop
    2d38:	b003      	add	sp, #12
    2d3a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d3e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d3e:	b500      	push	{lr}
    2d40:	b083      	sub	sp, #12
    2d42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d44:	9b01      	ldr	r3, [sp, #4]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d002      	beq.n	2d50 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d4a:	9801      	ldr	r0, [sp, #4]
    2d4c:	f000 f946 	bl	2fdc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d50:	bf00      	nop
    2d52:	b003      	add	sp, #12
    2d54:	f85d fb04 	ldr.w	pc, [sp], #4

00002d58 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d58:	b500      	push	{lr}
    2d5a:	b083      	sub	sp, #12
    2d5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d5e:	9b01      	ldr	r3, [sp, #4]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d002      	beq.n	2d6a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d64:	9801      	ldr	r0, [sp, #4]
    2d66:	f000 f951 	bl	300c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d6a:	bf00      	nop
    2d6c:	b003      	add	sp, #12
    2d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d72 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d72:	b500      	push	{lr}
    2d74:	b083      	sub	sp, #12
    2d76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d78:	9b01      	ldr	r3, [sp, #4]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d002      	beq.n	2d84 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d7e:	9801      	ldr	r0, [sp, #4]
    2d80:	f000 f95e 	bl	3040 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d84:	bf00      	nop
    2d86:	b003      	add	sp, #12
    2d88:	f85d fb04 	ldr.w	pc, [sp], #4

00002d8c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2d8c:	b500      	push	{lr}
    2d8e:	b083      	sub	sp, #12
    2d90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d92:	9b01      	ldr	r3, [sp, #4]
    2d94:	2b00      	cmp	r3, #0
    2d96:	d002      	beq.n	2d9e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d98:	9801      	ldr	r0, [sp, #4]
    2d9a:	f000 f98b 	bl	30b4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d9e:	bf00      	nop
    2da0:	b003      	add	sp, #12
    2da2:	f85d fb04 	ldr.w	pc, [sp], #4

00002da6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2da6:	b086      	sub	sp, #24
    2da8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2daa:	9b01      	ldr	r3, [sp, #4]
    2dac:	681a      	ldr	r2, [r3, #0]
    2dae:	4911      	ldr	r1, [pc, #68]	; (2df4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2db0:	4613      	mov	r3, r2
    2db2:	00db      	lsls	r3, r3, #3
    2db4:	4413      	add	r3, r2
    2db6:	440b      	add	r3, r1
    2db8:	781b      	ldrb	r3, [r3, #0]
    2dba:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2dbc:	9b01      	ldr	r3, [sp, #4]
    2dbe:	685b      	ldr	r3, [r3, #4]
    2dc0:	4a0d      	ldr	r2, [pc, #52]	; (2df8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2dc2:	5cd3      	ldrb	r3, [r2, r3]
    2dc4:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2dc6:	4a0d      	ldr	r2, [pc, #52]	; (2dfc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2dc8:	9b05      	ldr	r3, [sp, #20]
    2dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2dd2:	9b03      	ldr	r3, [sp, #12]
    2dd4:	f023 0307 	bic.w	r3, r3, #7
    2dd8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2dda:	9a03      	ldr	r2, [sp, #12]
    2ddc:	9b04      	ldr	r3, [sp, #16]
    2dde:	4313      	orrs	r3, r2
    2de0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2de2:	4a06      	ldr	r2, [pc, #24]	; (2dfc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2de4:	9b05      	ldr	r3, [sp, #20]
    2de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dea:	9a03      	ldr	r2, [sp, #12]
    2dec:	601a      	str	r2, [r3, #0]
}
    2dee:	bf00      	nop
    2df0:	b006      	add	sp, #24
    2df2:	4770      	bx	lr
    2df4:	00010870 	.word	0x00010870
    2df8:	00010c68 	.word	0x00010c68
    2dfc:	00010cac 	.word	0x00010cac

00002e00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e00:	b086      	sub	sp, #24
    2e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e04:	9b01      	ldr	r3, [sp, #4]
    2e06:	681a      	ldr	r2, [r3, #0]
    2e08:	4911      	ldr	r1, [pc, #68]	; (2e50 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e0a:	4613      	mov	r3, r2
    2e0c:	00db      	lsls	r3, r3, #3
    2e0e:	4413      	add	r3, r2
    2e10:	440b      	add	r3, r1
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e16:	9b01      	ldr	r3, [sp, #4]
    2e18:	685b      	ldr	r3, [r3, #4]
    2e1a:	4a0e      	ldr	r2, [pc, #56]	; (2e54 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e1c:	5cd3      	ldrb	r3, [r2, r3]
    2e1e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e20:	4a0d      	ldr	r2, [pc, #52]	; (2e58 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e22:	9b05      	ldr	r3, [sp, #20]
    2e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e2c:	9b03      	ldr	r3, [sp, #12]
    2e2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e32:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e34:	9b04      	ldr	r3, [sp, #16]
    2e36:	021b      	lsls	r3, r3, #8
    2e38:	9a03      	ldr	r2, [sp, #12]
    2e3a:	4313      	orrs	r3, r2
    2e3c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e3e:	4a06      	ldr	r2, [pc, #24]	; (2e58 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e40:	9b05      	ldr	r3, [sp, #20]
    2e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e46:	9a03      	ldr	r2, [sp, #12]
    2e48:	601a      	str	r2, [r3, #0]
}
    2e4a:	bf00      	nop
    2e4c:	b006      	add	sp, #24
    2e4e:	4770      	bx	lr
    2e50:	00010870 	.word	0x00010870
    2e54:	00010c68 	.word	0x00010c68
    2e58:	00010cac 	.word	0x00010cac

00002e5c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e5c:	b084      	sub	sp, #16
    2e5e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e60:	4b09      	ldr	r3, [pc, #36]	; (2e88 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e62:	695b      	ldr	r3, [r3, #20]
    2e64:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e66:	9b03      	ldr	r3, [sp, #12]
    2e68:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e6c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e6e:	9b01      	ldr	r3, [sp, #4]
    2e70:	685b      	ldr	r3, [r3, #4]
    2e72:	3b01      	subs	r3, #1
    2e74:	041b      	lsls	r3, r3, #16
    2e76:	9a03      	ldr	r2, [sp, #12]
    2e78:	4313      	orrs	r3, r2
    2e7a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e7c:	4a02      	ldr	r2, [pc, #8]	; (2e88 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e7e:	9b03      	ldr	r3, [sp, #12]
    2e80:	6153      	str	r3, [r2, #20]
}
    2e82:	bf00      	nop
    2e84:	b004      	add	sp, #16
    2e86:	4770      	bx	lr
    2e88:	40064000 	.word	0x40064000

00002e8c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e8c:	b084      	sub	sp, #16
    2e8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e90:	4b09      	ldr	r3, [pc, #36]	; (2eb8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e92:	695b      	ldr	r3, [r3, #20]
    2e94:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2e96:	9b03      	ldr	r3, [sp, #12]
    2e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e9c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e9e:	9b01      	ldr	r3, [sp, #4]
    2ea0:	685b      	ldr	r3, [r3, #4]
    2ea2:	3b01      	subs	r3, #1
    2ea4:	011b      	lsls	r3, r3, #4
    2ea6:	9a03      	ldr	r2, [sp, #12]
    2ea8:	4313      	orrs	r3, r2
    2eaa:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2eac:	4a02      	ldr	r2, [pc, #8]	; (2eb8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eae:	9b03      	ldr	r3, [sp, #12]
    2eb0:	6153      	str	r3, [r2, #20]
}
    2eb2:	bf00      	nop
    2eb4:	b004      	add	sp, #16
    2eb6:	4770      	bx	lr
    2eb8:	40064000 	.word	0x40064000

00002ebc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ebc:	b084      	sub	sp, #16
    2ebe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ec0:	4b09      	ldr	r3, [pc, #36]	; (2ee8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ec2:	695b      	ldr	r3, [r3, #20]
    2ec4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2ec6:	9b03      	ldr	r3, [sp, #12]
    2ec8:	f023 030f 	bic.w	r3, r3, #15
    2ecc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	685b      	ldr	r3, [r3, #4]
    2ed2:	3b01      	subs	r3, #1
    2ed4:	9a03      	ldr	r2, [sp, #12]
    2ed6:	4313      	orrs	r3, r2
    2ed8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2eda:	4a03      	ldr	r2, [pc, #12]	; (2ee8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2edc:	9b03      	ldr	r3, [sp, #12]
    2ede:	6153      	str	r3, [r2, #20]
}
    2ee0:	bf00      	nop
    2ee2:	b004      	add	sp, #16
    2ee4:	4770      	bx	lr
    2ee6:	bf00      	nop
    2ee8:	40064000 	.word	0x40064000

00002eec <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2eec:	b084      	sub	sp, #16
    2eee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2ef0:	4b09      	ldr	r3, [pc, #36]	; (2f18 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2ef2:	699b      	ldr	r3, [r3, #24]
    2ef4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2ef6:	9b03      	ldr	r3, [sp, #12]
    2ef8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2efc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2efe:	9b01      	ldr	r3, [sp, #4]
    2f00:	685b      	ldr	r3, [r3, #4]
    2f02:	3b01      	subs	r3, #1
    2f04:	041b      	lsls	r3, r3, #16
    2f06:	9a03      	ldr	r2, [sp, #12]
    2f08:	4313      	orrs	r3, r2
    2f0a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f0c:	4a02      	ldr	r2, [pc, #8]	; (2f18 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	6193      	str	r3, [r2, #24]
}
    2f12:	bf00      	nop
    2f14:	b004      	add	sp, #16
    2f16:	4770      	bx	lr
    2f18:	40064000 	.word	0x40064000

00002f1c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f1c:	b084      	sub	sp, #16
    2f1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f20:	4b09      	ldr	r3, [pc, #36]	; (2f48 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f22:	699b      	ldr	r3, [r3, #24]
    2f24:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f26:	9b03      	ldr	r3, [sp, #12]
    2f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f2c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f2e:	9b01      	ldr	r3, [sp, #4]
    2f30:	685b      	ldr	r3, [r3, #4]
    2f32:	3b01      	subs	r3, #1
    2f34:	011b      	lsls	r3, r3, #4
    2f36:	9a03      	ldr	r2, [sp, #12]
    2f38:	4313      	orrs	r3, r2
    2f3a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f3c:	4a02      	ldr	r2, [pc, #8]	; (2f48 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f3e:	9b03      	ldr	r3, [sp, #12]
    2f40:	6193      	str	r3, [r2, #24]
}
    2f42:	bf00      	nop
    2f44:	b004      	add	sp, #16
    2f46:	4770      	bx	lr
    2f48:	40064000 	.word	0x40064000

00002f4c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f4c:	b084      	sub	sp, #16
    2f4e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f50:	4b09      	ldr	r3, [pc, #36]	; (2f78 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f52:	699b      	ldr	r3, [r3, #24]
    2f54:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	f023 030f 	bic.w	r3, r3, #15
    2f5c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f5e:	9b01      	ldr	r3, [sp, #4]
    2f60:	685b      	ldr	r3, [r3, #4]
    2f62:	3b01      	subs	r3, #1
    2f64:	9a03      	ldr	r2, [sp, #12]
    2f66:	4313      	orrs	r3, r2
    2f68:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f6a:	4a03      	ldr	r2, [pc, #12]	; (2f78 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f6c:	9b03      	ldr	r3, [sp, #12]
    2f6e:	6193      	str	r3, [r2, #24]
}
    2f70:	bf00      	nop
    2f72:	b004      	add	sp, #16
    2f74:	4770      	bx	lr
    2f76:	bf00      	nop
    2f78:	40064000 	.word	0x40064000

00002f7c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f7c:	b084      	sub	sp, #16
    2f7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f80:	4b09      	ldr	r3, [pc, #36]	; (2fa8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f82:	69db      	ldr	r3, [r3, #28]
    2f84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2f86:	9b03      	ldr	r3, [sp, #12]
    2f88:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f8c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2f8e:	9b01      	ldr	r3, [sp, #4]
    2f90:	685b      	ldr	r3, [r3, #4]
    2f92:	3b01      	subs	r3, #1
    2f94:	041b      	lsls	r3, r3, #16
    2f96:	9a03      	ldr	r2, [sp, #12]
    2f98:	4313      	orrs	r3, r2
    2f9a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f9c:	4a02      	ldr	r2, [pc, #8]	; (2fa8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f9e:	9b03      	ldr	r3, [sp, #12]
    2fa0:	61d3      	str	r3, [r2, #28]
}
    2fa2:	bf00      	nop
    2fa4:	b004      	add	sp, #16
    2fa6:	4770      	bx	lr
    2fa8:	40064000 	.word	0x40064000

00002fac <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fac:	b084      	sub	sp, #16
    2fae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fb0:	4b09      	ldr	r3, [pc, #36]	; (2fd8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fb2:	69db      	ldr	r3, [r3, #28]
    2fb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2fb6:	9b03      	ldr	r3, [sp, #12]
    2fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2fbc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2fbe:	9b01      	ldr	r3, [sp, #4]
    2fc0:	685b      	ldr	r3, [r3, #4]
    2fc2:	3b01      	subs	r3, #1
    2fc4:	011b      	lsls	r3, r3, #4
    2fc6:	9a03      	ldr	r2, [sp, #12]
    2fc8:	4313      	orrs	r3, r2
    2fca:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fcc:	4a02      	ldr	r2, [pc, #8]	; (2fd8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fce:	9b03      	ldr	r3, [sp, #12]
    2fd0:	61d3      	str	r3, [r2, #28]
}
    2fd2:	bf00      	nop
    2fd4:	b004      	add	sp, #16
    2fd6:	4770      	bx	lr
    2fd8:	40064000 	.word	0x40064000

00002fdc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fdc:	b084      	sub	sp, #16
    2fde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fe0:	4b09      	ldr	r3, [pc, #36]	; (3008 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2fe2:	69db      	ldr	r3, [r3, #28]
    2fe4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2fe6:	9b03      	ldr	r3, [sp, #12]
    2fe8:	f023 030f 	bic.w	r3, r3, #15
    2fec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2fee:	9b01      	ldr	r3, [sp, #4]
    2ff0:	685b      	ldr	r3, [r3, #4]
    2ff2:	3b01      	subs	r3, #1
    2ff4:	9a03      	ldr	r2, [sp, #12]
    2ff6:	4313      	orrs	r3, r2
    2ff8:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ffa:	4a03      	ldr	r2, [pc, #12]	; (3008 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ffc:	9b03      	ldr	r3, [sp, #12]
    2ffe:	61d3      	str	r3, [r2, #28]
}
    3000:	bf00      	nop
    3002:	b004      	add	sp, #16
    3004:	4770      	bx	lr
    3006:	bf00      	nop
    3008:	40064000 	.word	0x40064000

0000300c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    300c:	b084      	sub	sp, #16
    300e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3010:	4b0a      	ldr	r3, [pc, #40]	; (303c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3012:	685b      	ldr	r3, [r3, #4]
    3014:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3016:	9b03      	ldr	r3, [sp, #12]
    3018:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    301c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	685b      	ldr	r3, [r3, #4]
    3022:	3b01      	subs	r3, #1
    3024:	021b      	lsls	r3, r3, #8
    3026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    302a:	9a03      	ldr	r2, [sp, #12]
    302c:	4313      	orrs	r3, r2
    302e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3030:	4a02      	ldr	r2, [pc, #8]	; (303c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3032:	9b03      	ldr	r3, [sp, #12]
    3034:	6053      	str	r3, [r2, #4]
}
    3036:	bf00      	nop
    3038:	b004      	add	sp, #16
    303a:	4770      	bx	lr
    303c:	40048000 	.word	0x40048000

00003040 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3040:	b084      	sub	sp, #16
    3042:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3044:	4919      	ldr	r1, [pc, #100]	; (30ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	681a      	ldr	r2, [r3, #0]
    304a:	4819      	ldr	r0, [pc, #100]	; (30b0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    304c:	4613      	mov	r3, r2
    304e:	00db      	lsls	r3, r3, #3
    3050:	4413      	add	r3, r2
    3052:	4403      	add	r3, r0
    3054:	3305      	adds	r3, #5
    3056:	781b      	ldrb	r3, [r3, #0]
    3058:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    305c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    305e:	9b03      	ldr	r3, [sp, #12]
    3060:	f023 030f 	bic.w	r3, r3, #15
    3064:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3066:	9b01      	ldr	r3, [sp, #4]
    3068:	685b      	ldr	r3, [r3, #4]
    306a:	3b01      	subs	r3, #1
    306c:	f003 0307 	and.w	r3, r3, #7
    3070:	9a03      	ldr	r2, [sp, #12]
    3072:	4313      	orrs	r3, r2
    3074:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3076:	9b01      	ldr	r3, [sp, #4]
    3078:	7a1b      	ldrb	r3, [r3, #8]
    307a:	3b01      	subs	r3, #1
    307c:	00db      	lsls	r3, r3, #3
    307e:	f003 0308 	and.w	r3, r3, #8
    3082:	9a03      	ldr	r2, [sp, #12]
    3084:	4313      	orrs	r3, r2
    3086:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3088:	4908      	ldr	r1, [pc, #32]	; (30ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    308a:	9b01      	ldr	r3, [sp, #4]
    308c:	681a      	ldr	r2, [r3, #0]
    308e:	4808      	ldr	r0, [pc, #32]	; (30b0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3090:	4613      	mov	r3, r2
    3092:	00db      	lsls	r3, r3, #3
    3094:	4413      	add	r3, r2
    3096:	4403      	add	r3, r0
    3098:	3305      	adds	r3, #5
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	461a      	mov	r2, r3
    309e:	9b03      	ldr	r3, [sp, #12]
    30a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30a4:	bf00      	nop
    30a6:	b004      	add	sp, #16
    30a8:	4770      	bx	lr
    30aa:	bf00      	nop
    30ac:	40065000 	.word	0x40065000
    30b0:	00010870 	.word	0x00010870

000030b4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30b4:	b084      	sub	sp, #16
    30b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    30b8:	4b10      	ldr	r3, [pc, #64]	; (30fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30bc:	4a0f      	ldr	r2, [pc, #60]	; (30fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    30c2:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    30c4:	4b0d      	ldr	r3, [pc, #52]	; (30fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    30ca:	9b03      	ldr	r3, [sp, #12]
    30cc:	f023 030f 	bic.w	r3, r3, #15
    30d0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30d2:	9b01      	ldr	r3, [sp, #4]
    30d4:	685b      	ldr	r3, [r3, #4]
    30d6:	3b01      	subs	r3, #1
    30d8:	005b      	lsls	r3, r3, #1
    30da:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    30de:	9b01      	ldr	r3, [sp, #4]
    30e0:	7a1b      	ldrb	r3, [r3, #8]
    30e2:	3b01      	subs	r3, #1
    30e4:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30e8:	4313      	orrs	r3, r2
    30ea:	9a03      	ldr	r2, [sp, #12]
    30ec:	4313      	orrs	r3, r2
    30ee:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    30f0:	4a02      	ldr	r2, [pc, #8]	; (30fc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30f2:	9b03      	ldr	r3, [sp, #12]
    30f4:	6693      	str	r3, [r2, #104]	; 0x68
}
    30f6:	bf00      	nop
    30f8:	b004      	add	sp, #16
    30fa:	4770      	bx	lr
    30fc:	40048000 	.word	0x40048000

00003100 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3100:	b082      	sub	sp, #8
    3102:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3104:	bf00      	nop
    3106:	b002      	add	sp, #8
    3108:	4770      	bx	lr
	...

0000310c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    310c:	b082      	sub	sp, #8
    310e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3110:	bf00      	nop
    3112:	b002      	add	sp, #8
    3114:	4770      	bx	lr

00003116 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3116:	b082      	sub	sp, #8
    3118:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    311a:	bf00      	nop
    311c:	b002      	add	sp, #8
    311e:	4770      	bx	lr

00003120 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3120:	b500      	push	{lr}
    3122:	b083      	sub	sp, #12
    3124:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3126:	9b01      	ldr	r3, [sp, #4]
    3128:	2b00      	cmp	r3, #0
    312a:	d002      	beq.n	3132 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    312c:	9801      	ldr	r0, [sp, #4]
    312e:	f000 f86a 	bl	3206 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3132:	bf00      	nop
    3134:	b003      	add	sp, #12
    3136:	f85d fb04 	ldr.w	pc, [sp], #4

0000313a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    313a:	b500      	push	{lr}
    313c:	b083      	sub	sp, #12
    313e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3140:	9b01      	ldr	r3, [sp, #4]
    3142:	2b00      	cmp	r3, #0
    3144:	d002      	beq.n	314c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3146:	9801      	ldr	r0, [sp, #4]
    3148:	f000 f884 	bl	3254 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    314c:	bf00      	nop
    314e:	b003      	add	sp, #12
    3150:	f85d fb04 	ldr.w	pc, [sp], #4

00003154 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3154:	b500      	push	{lr}
    3156:	b089      	sub	sp, #36	; 0x24
    3158:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    315a:	2300      	movs	r3, #0
    315c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3160:	9b01      	ldr	r3, [sp, #4]
    3162:	2b00      	cmp	r3, #0
    3164:	d031      	beq.n	31ca <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3166:	4b1b      	ldr	r3, [pc, #108]	; (31d4 <Clock_Ip_CompleteSOSC+0x80>)
    3168:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    316c:	f003 0301 	and.w	r3, r3, #1
    3170:	2b00      	cmp	r3, #0
    3172:	d02a      	beq.n	31ca <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3174:	aa03      	add	r2, sp, #12
    3176:	a904      	add	r1, sp, #16
    3178:	a805      	add	r0, sp, #20
    317a:	f24c 3350 	movw	r3, #50000	; 0xc350
    317e:	f7ff fd1d 	bl	2bbc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3182:	4b14      	ldr	r3, [pc, #80]	; (31d4 <Clock_Ip_CompleteSOSC+0x80>)
    3184:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3188:	0e1b      	lsrs	r3, r3, #24
    318a:	f003 0301 	and.w	r3, r3, #1
    318e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3190:	9a03      	ldr	r2, [sp, #12]
    3192:	a904      	add	r1, sp, #16
    3194:	ab05      	add	r3, sp, #20
    3196:	4618      	mov	r0, r3
    3198:	f7ff fd2a 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    319c:	4603      	mov	r3, r0
    319e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    31a2:	9b06      	ldr	r3, [sp, #24]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d106      	bne.n	31b6 <Clock_Ip_CompleteSOSC+0x62>
    31a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31ac:	f083 0301 	eor.w	r3, r3, #1
    31b0:	b2db      	uxtb	r3, r3
    31b2:	2b00      	cmp	r3, #0
    31b4:	d1e5      	bne.n	3182 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d005      	beq.n	31ca <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31be:	9b01      	ldr	r3, [sp, #4]
    31c0:	681b      	ldr	r3, [r3, #0]
    31c2:	4619      	mov	r1, r3
    31c4:	2001      	movs	r0, #1
    31c6:	f7ff fce9 	bl	2b9c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    31ca:	bf00      	nop
    31cc:	b009      	add	sp, #36	; 0x24
    31ce:	f85d fb04 	ldr.w	pc, [sp], #4
    31d2:	bf00      	nop
    31d4:	40064000 	.word	0x40064000

000031d8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    31d8:	b500      	push	{lr}
    31da:	b083      	sub	sp, #12
    31dc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    31de:	9801      	ldr	r0, [sp, #4]
    31e0:	f000 f8c0 	bl	3364 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    31e4:	bf00      	nop
    31e6:	b003      	add	sp, #12
    31e8:	f85d fb04 	ldr.w	pc, [sp], #4

000031ec <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    31ec:	b500      	push	{lr}
    31ee:	b083      	sub	sp, #12
    31f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31f2:	9b01      	ldr	r3, [sp, #4]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d002      	beq.n	31fe <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    31f8:	9801      	ldr	r0, [sp, #4]
    31fa:	f000 f8c3 	bl	3384 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31fe:	bf00      	nop
    3200:	b003      	add	sp, #12
    3202:	f85d fb04 	ldr.w	pc, [sp], #4

00003206 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3206:	b082      	sub	sp, #8
    3208:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    320a:	4b11      	ldr	r3, [pc, #68]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    320c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3210:	4a0f      	ldr	r2, [pc, #60]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3212:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3216:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    321a:	4b0d      	ldr	r3, [pc, #52]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    321c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3220:	4a0b      	ldr	r2, [pc, #44]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3226:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    322a:	4b09      	ldr	r3, [pc, #36]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    322c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3230:	4a07      	ldr	r2, [pc, #28]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3232:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3236:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    323a:	4b05      	ldr	r3, [pc, #20]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    323c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3240:	4a03      	ldr	r2, [pc, #12]	; (3250 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3242:	f023 0301 	bic.w	r3, r3, #1
    3246:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    324a:	bf00      	nop
    324c:	b002      	add	sp, #8
    324e:	4770      	bx	lr
    3250:	40064000 	.word	0x40064000

00003254 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3254:	b082      	sub	sp, #8
    3256:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3258:	9b01      	ldr	r3, [sp, #4]
    325a:	891b      	ldrh	r3, [r3, #8]
    325c:	2b01      	cmp	r3, #1
    325e:	d174      	bne.n	334a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3260:	9b01      	ldr	r3, [sp, #4]
    3262:	7bdb      	ldrb	r3, [r3, #15]
    3264:	2b00      	cmp	r3, #0
    3266:	d002      	beq.n	326e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3268:	2b01      	cmp	r3, #1
    326a:	d009      	beq.n	3280 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    326c:	e011      	b.n	3292 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    326e:	4b39      	ldr	r3, [pc, #228]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3270:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3274:	4a37      	ldr	r2, [pc, #220]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3276:	f023 0308 	bic.w	r3, r3, #8
    327a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    327e:	e008      	b.n	3292 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3280:	4b34      	ldr	r3, [pc, #208]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3282:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3286:	4a33      	ldr	r2, [pc, #204]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3288:	f043 0308 	orr.w	r3, r3, #8
    328c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3290:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3292:	4b30      	ldr	r3, [pc, #192]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3294:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3298:	4a2e      	ldr	r2, [pc, #184]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    329e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    32a2:	9b01      	ldr	r3, [sp, #4]
    32a4:	685b      	ldr	r3, [r3, #4]
    32a6:	4a2c      	ldr	r2, [pc, #176]	; (3358 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32a8:	4293      	cmp	r3, r2
    32aa:	d90d      	bls.n	32c8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32ac:	9b01      	ldr	r3, [sp, #4]
    32ae:	685b      	ldr	r3, [r3, #4]
    32b0:	4a2a      	ldr	r2, [pc, #168]	; (335c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32b2:	4293      	cmp	r3, r2
    32b4:	d208      	bcs.n	32c8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32b6:	4b27      	ldr	r3, [pc, #156]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32bc:	4a25      	ldr	r2, [pc, #148]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32be:	f043 0320 	orr.w	r3, r3, #32
    32c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32c6:	e007      	b.n	32d8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    32c8:	4b22      	ldr	r3, [pc, #136]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32ce:	4a21      	ldr	r2, [pc, #132]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    32d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    32d8:	9b01      	ldr	r3, [sp, #4]
    32da:	7b1b      	ldrb	r3, [r3, #12]
    32dc:	2b00      	cmp	r3, #0
    32de:	d108      	bne.n	32f2 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    32e0:	4b1c      	ldr	r3, [pc, #112]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e6:	4a1b      	ldr	r2, [pc, #108]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e8:	f043 0304 	orr.w	r3, r3, #4
    32ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32f0:	e007      	b.n	3302 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    32f2:	4b18      	ldr	r3, [pc, #96]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32f8:	4a16      	ldr	r2, [pc, #88]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32fa:	f023 0304 	bic.w	r3, r3, #4
    32fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3302:	9b01      	ldr	r3, [sp, #4]
    3304:	7c1b      	ldrb	r3, [r3, #16]
    3306:	2b02      	cmp	r3, #2
    3308:	d011      	beq.n	332e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    330a:	2b02      	cmp	r3, #2
    330c:	dc14      	bgt.n	3338 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    330e:	2b00      	cmp	r3, #0
    3310:	d002      	beq.n	3318 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3312:	2b01      	cmp	r3, #1
    3314:	d005      	beq.n	3322 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3316:	e00f      	b.n	3338 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3318:	4b0e      	ldr	r3, [pc, #56]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    331a:	2201      	movs	r2, #1
    331c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3320:	e014      	b.n	334c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3322:	4b0c      	ldr	r3, [pc, #48]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3324:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3328:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    332c:	e00e      	b.n	334c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    332e:	4b09      	ldr	r3, [pc, #36]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3330:	4a0b      	ldr	r2, [pc, #44]	; (3360 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3332:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3336:	e009      	b.n	334c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3338:	4b06      	ldr	r3, [pc, #24]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    333a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    333e:	4a05      	ldr	r2, [pc, #20]	; (3354 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3340:	f043 0301 	orr.w	r3, r3, #1
    3344:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3348:	e000      	b.n	334c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    334a:	bf00      	nop
}
    334c:	bf00      	nop
    334e:	b002      	add	sp, #8
    3350:	4770      	bx	lr
    3352:	bf00      	nop
    3354:	40064000 	.word	0x40064000
    3358:	003d08ff 	.word	0x003d08ff
    335c:	007a1200 	.word	0x007a1200
    3360:	00030001 	.word	0x00030001

00003364 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3364:	b082      	sub	sp, #8
    3366:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    336a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    336e:	4a04      	ldr	r2, [pc, #16]	; (3380 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3370:	f023 0301 	bic.w	r3, r3, #1
    3374:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3378:	bf00      	nop
    337a:	b002      	add	sp, #8
    337c:	4770      	bx	lr
    337e:	bf00      	nop
    3380:	40064000 	.word	0x40064000

00003384 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3384:	b082      	sub	sp, #8
    3386:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3388:	9b01      	ldr	r3, [sp, #4]
    338a:	891b      	ldrh	r3, [r3, #8]
    338c:	2b01      	cmp	r3, #1
    338e:	d107      	bne.n	33a0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3390:	4b05      	ldr	r3, [pc, #20]	; (33a8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3392:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3396:	4a04      	ldr	r2, [pc, #16]	; (33a8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3398:	f043 0301 	orr.w	r3, r3, #1
    339c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    33a0:	bf00      	nop
    33a2:	b002      	add	sp, #8
    33a4:	4770      	bx	lr
    33a6:	bf00      	nop
    33a8:	40064000 	.word	0x40064000

000033ac <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33ac:	b082      	sub	sp, #8
    33ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33b0:	bf00      	nop
    33b2:	b002      	add	sp, #8
    33b4:	4770      	bx	lr

000033b6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33b6:	b082      	sub	sp, #8
    33b8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    33ba:	2300      	movs	r3, #0
}
    33bc:	4618      	mov	r0, r3
    33be:	b002      	add	sp, #8
    33c0:	4770      	bx	lr

000033c2 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    33c2:	b082      	sub	sp, #8
    33c4:	9001      	str	r0, [sp, #4]
    33c6:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    33c8:	bf00      	nop
    33ca:	b002      	add	sp, #8
    33cc:	4770      	bx	lr
	...

000033d0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    33d0:	b082      	sub	sp, #8
    33d2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33d4:	bf00      	nop
    33d6:	b002      	add	sp, #8
    33d8:	4770      	bx	lr

000033da <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    33da:	b082      	sub	sp, #8
    33dc:	9001      	str	r0, [sp, #4]
    33de:	460b      	mov	r3, r1
    33e0:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    33e4:	bf00      	nop
    33e6:	b002      	add	sp, #8
    33e8:	4770      	bx	lr

000033ea <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    33ea:	b500      	push	{lr}
    33ec:	b083      	sub	sp, #12
    33ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33f0:	9b01      	ldr	r3, [sp, #4]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d002      	beq.n	33fc <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    33f6:	9801      	ldr	r0, [sp, #4]
    33f8:	f000 f8e7 	bl	35ca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33fc:	bf00      	nop
    33fe:	b003      	add	sp, #12
    3400:	f85d fb04 	ldr.w	pc, [sp], #4

00003404 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3404:	b500      	push	{lr}
    3406:	b085      	sub	sp, #20
    3408:	9001      	str	r0, [sp, #4]
    340a:	460b      	mov	r3, r1
    340c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3410:	9b01      	ldr	r3, [sp, #4]
    3412:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3414:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3418:	2b00      	cmp	r3, #0
    341a:	d003      	beq.n	3424 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    341c:	2300      	movs	r3, #0
    341e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3422:	e002      	b.n	342a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3424:	2301      	movs	r3, #1
    3426:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    342a:	ab02      	add	r3, sp, #8
    342c:	4618      	mov	r0, r3
    342e:	f7ff ffdc 	bl	33ea <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3432:	bf00      	nop
    3434:	b005      	add	sp, #20
    3436:	f85d fb04 	ldr.w	pc, [sp], #4

0000343a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    343a:	b500      	push	{lr}
    343c:	b083      	sub	sp, #12
    343e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3440:	9b01      	ldr	r3, [sp, #4]
    3442:	2b00      	cmp	r3, #0
    3444:	d002      	beq.n	344c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3446:	9801      	ldr	r0, [sp, #4]
    3448:	f000 f8d6 	bl	35f8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    344c:	bf00      	nop
    344e:	b003      	add	sp, #12
    3450:	f85d fb04 	ldr.w	pc, [sp], #4

00003454 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3454:	b500      	push	{lr}
    3456:	b085      	sub	sp, #20
    3458:	9001      	str	r0, [sp, #4]
    345a:	460b      	mov	r3, r1
    345c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3460:	9b01      	ldr	r3, [sp, #4]
    3462:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3464:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3468:	2b00      	cmp	r3, #0
    346a:	d003      	beq.n	3474 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    346c:	2300      	movs	r3, #0
    346e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3472:	e002      	b.n	347a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3474:	2301      	movs	r3, #1
    3476:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    347a:	ab02      	add	r3, sp, #8
    347c:	4618      	mov	r0, r3
    347e:	f7ff ffdc 	bl	343a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3482:	bf00      	nop
    3484:	b005      	add	sp, #20
    3486:	f85d fb04 	ldr.w	pc, [sp], #4

0000348a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    348a:	b500      	push	{lr}
    348c:	b083      	sub	sp, #12
    348e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3490:	9b01      	ldr	r3, [sp, #4]
    3492:	2b00      	cmp	r3, #0
    3494:	d002      	beq.n	349c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3496:	9801      	ldr	r0, [sp, #4]
    3498:	f000 f8c6 	bl	3628 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    349c:	bf00      	nop
    349e:	b003      	add	sp, #12
    34a0:	f85d fb04 	ldr.w	pc, [sp], #4

000034a4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34a4:	b500      	push	{lr}
    34a6:	b085      	sub	sp, #20
    34a8:	9001      	str	r0, [sp, #4]
    34aa:	460b      	mov	r3, r1
    34ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34b0:	9b01      	ldr	r3, [sp, #4]
    34b2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34b8:	2b00      	cmp	r3, #0
    34ba:	d003      	beq.n	34c4 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    34bc:	2300      	movs	r3, #0
    34be:	f8ad 300c 	strh.w	r3, [sp, #12]
    34c2:	e002      	b.n	34ca <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34c4:	2301      	movs	r3, #1
    34c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    34ca:	ab02      	add	r3, sp, #8
    34cc:	4618      	mov	r0, r3
    34ce:	f7ff ffdc 	bl	348a <Clock_Ip_ClockSetSimClkoutEnable>
}
    34d2:	bf00      	nop
    34d4:	b005      	add	sp, #20
    34d6:	f85d fb04 	ldr.w	pc, [sp], #4

000034da <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    34da:	b500      	push	{lr}
    34dc:	b083      	sub	sp, #12
    34de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34e0:	9b01      	ldr	r3, [sp, #4]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d002      	beq.n	34ec <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    34e6:	9801      	ldr	r0, [sp, #4]
    34e8:	f000 f8b6 	bl	3658 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34ec:	bf00      	nop
    34ee:	b003      	add	sp, #12
    34f0:	f85d fb04 	ldr.w	pc, [sp], #4

000034f4 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34f4:	b500      	push	{lr}
    34f6:	b085      	sub	sp, #20
    34f8:	9001      	str	r0, [sp, #4]
    34fa:	460b      	mov	r3, r1
    34fc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3500:	9b01      	ldr	r3, [sp, #4]
    3502:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3504:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3508:	2b00      	cmp	r3, #0
    350a:	d003      	beq.n	3514 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    350c:	2300      	movs	r3, #0
    350e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3512:	e002      	b.n	351a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3514:	2301      	movs	r3, #1
    3516:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    351a:	ab02      	add	r3, sp, #8
    351c:	4618      	mov	r0, r3
    351e:	f7ff ffdc 	bl	34da <Clock_Ip_ClockSetPccCgcEnable>
}
    3522:	bf00      	nop
    3524:	b005      	add	sp, #20
    3526:	f85d fb04 	ldr.w	pc, [sp], #4

0000352a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    352a:	b500      	push	{lr}
    352c:	b083      	sub	sp, #12
    352e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3530:	9b01      	ldr	r3, [sp, #4]
    3532:	2b00      	cmp	r3, #0
    3534:	d002      	beq.n	353c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3536:	9801      	ldr	r0, [sp, #4]
    3538:	f000 f8bc 	bl	36b4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    353c:	bf00      	nop
    353e:	b003      	add	sp, #12
    3540:	f85d fb04 	ldr.w	pc, [sp], #4

00003544 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3544:	b500      	push	{lr}
    3546:	b085      	sub	sp, #20
    3548:	9001      	str	r0, [sp, #4]
    354a:	460b      	mov	r3, r1
    354c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3550:	9b01      	ldr	r3, [sp, #4]
    3552:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3554:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3558:	2b00      	cmp	r3, #0
    355a:	d003      	beq.n	3564 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    355c:	2300      	movs	r3, #0
    355e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3562:	e002      	b.n	356a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3564:	2301      	movs	r3, #1
    3566:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    356a:	ab02      	add	r3, sp, #8
    356c:	4618      	mov	r0, r3
    356e:	f7ff ffdc 	bl	352a <Clock_Ip_ClockSetSimGate>
}
    3572:	bf00      	nop
    3574:	b005      	add	sp, #20
    3576:	f85d fb04 	ldr.w	pc, [sp], #4

0000357a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    357a:	b500      	push	{lr}
    357c:	b083      	sub	sp, #12
    357e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3580:	9b01      	ldr	r3, [sp, #4]
    3582:	2b00      	cmp	r3, #0
    3584:	d002      	beq.n	358c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3586:	9801      	ldr	r0, [sp, #4]
    3588:	f000 f8c0 	bl	370c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    358c:	bf00      	nop
    358e:	b003      	add	sp, #12
    3590:	f85d fb04 	ldr.w	pc, [sp], #4

00003594 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3594:	b500      	push	{lr}
    3596:	b085      	sub	sp, #20
    3598:	9001      	str	r0, [sp, #4]
    359a:	460b      	mov	r3, r1
    359c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35a0:	9b01      	ldr	r3, [sp, #4]
    35a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35a8:	2b00      	cmp	r3, #0
    35aa:	d003      	beq.n	35b4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35ac:	2300      	movs	r3, #0
    35ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    35b2:	e002      	b.n	35ba <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35b4:	2301      	movs	r3, #1
    35b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    35ba:	ab02      	add	r3, sp, #8
    35bc:	4618      	mov	r0, r3
    35be:	f7ff ffdc 	bl	357a <Clock_Ip_ClockSetSimTraceEnable>
}
    35c2:	bf00      	nop
    35c4:	b005      	add	sp, #20
    35c6:	f85d fb04 	ldr.w	pc, [sp], #4

000035ca <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35ca:	b084      	sub	sp, #16
    35cc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35ce:	4b09      	ldr	r3, [pc, #36]	; (35f4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35d0:	691b      	ldr	r3, [r3, #16]
    35d2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    35d4:	9b03      	ldr	r3, [sp, #12]
    35d6:	f023 0301 	bic.w	r3, r3, #1
    35da:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    35dc:	9b01      	ldr	r3, [sp, #4]
    35de:	889b      	ldrh	r3, [r3, #4]
    35e0:	461a      	mov	r2, r3
    35e2:	9b03      	ldr	r3, [sp, #12]
    35e4:	4313      	orrs	r3, r2
    35e6:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    35e8:	4a02      	ldr	r2, [pc, #8]	; (35f4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35ea:	9b03      	ldr	r3, [sp, #12]
    35ec:	6113      	str	r3, [r2, #16]
}
    35ee:	bf00      	nop
    35f0:	b004      	add	sp, #16
    35f2:	4770      	bx	lr
    35f4:	40048000 	.word	0x40048000

000035f8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35f8:	b084      	sub	sp, #16
    35fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35fc:	4b09      	ldr	r3, [pc, #36]	; (3624 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    35fe:	691b      	ldr	r3, [r3, #16]
    3600:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3602:	9b03      	ldr	r3, [sp, #12]
    3604:	f023 0302 	bic.w	r3, r3, #2
    3608:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	889b      	ldrh	r3, [r3, #4]
    360e:	005b      	lsls	r3, r3, #1
    3610:	9a03      	ldr	r2, [sp, #12]
    3612:	4313      	orrs	r3, r2
    3614:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3616:	4a03      	ldr	r2, [pc, #12]	; (3624 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3618:	9b03      	ldr	r3, [sp, #12]
    361a:	6113      	str	r3, [r2, #16]
}
    361c:	bf00      	nop
    361e:	b004      	add	sp, #16
    3620:	4770      	bx	lr
    3622:	bf00      	nop
    3624:	40048000 	.word	0x40048000

00003628 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3628:	b084      	sub	sp, #16
    362a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    362c:	4b09      	ldr	r3, [pc, #36]	; (3654 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    362e:	685b      	ldr	r3, [r3, #4]
    3630:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3632:	9b03      	ldr	r3, [sp, #12]
    3634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3638:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    363a:	9b01      	ldr	r3, [sp, #4]
    363c:	889b      	ldrh	r3, [r3, #4]
    363e:	02db      	lsls	r3, r3, #11
    3640:	9a03      	ldr	r2, [sp, #12]
    3642:	4313      	orrs	r3, r2
    3644:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3646:	4a03      	ldr	r2, [pc, #12]	; (3654 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3648:	9b03      	ldr	r3, [sp, #12]
    364a:	6053      	str	r3, [r2, #4]
}
    364c:	bf00      	nop
    364e:	b004      	add	sp, #16
    3650:	4770      	bx	lr
    3652:	bf00      	nop
    3654:	40048000 	.word	0x40048000

00003658 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3658:	b084      	sub	sp, #16
    365a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    365c:	4913      	ldr	r1, [pc, #76]	; (36ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    365e:	9b01      	ldr	r3, [sp, #4]
    3660:	681a      	ldr	r2, [r3, #0]
    3662:	4813      	ldr	r0, [pc, #76]	; (36b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3664:	4613      	mov	r3, r2
    3666:	00db      	lsls	r3, r3, #3
    3668:	4413      	add	r3, r2
    366a:	4403      	add	r3, r0
    366c:	3306      	adds	r3, #6
    366e:	781b      	ldrb	r3, [r3, #0]
    3670:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3674:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3676:	9b03      	ldr	r3, [sp, #12]
    3678:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    367c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	889b      	ldrh	r3, [r3, #4]
    3682:	079b      	lsls	r3, r3, #30
    3684:	9a03      	ldr	r2, [sp, #12]
    3686:	4313      	orrs	r3, r2
    3688:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    368a:	4908      	ldr	r1, [pc, #32]	; (36ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    368c:	9b01      	ldr	r3, [sp, #4]
    368e:	681a      	ldr	r2, [r3, #0]
    3690:	4807      	ldr	r0, [pc, #28]	; (36b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3692:	4613      	mov	r3, r2
    3694:	00db      	lsls	r3, r3, #3
    3696:	4413      	add	r3, r2
    3698:	4403      	add	r3, r0
    369a:	3306      	adds	r3, #6
    369c:	781b      	ldrb	r3, [r3, #0]
    369e:	461a      	mov	r2, r3
    36a0:	9b03      	ldr	r3, [sp, #12]
    36a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36a6:	bf00      	nop
    36a8:	b004      	add	sp, #16
    36aa:	4770      	bx	lr
    36ac:	40065000 	.word	0x40065000
    36b0:	00010870 	.word	0x00010870

000036b4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36b4:	b086      	sub	sp, #24
    36b6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    36b8:	9b01      	ldr	r3, [sp, #4]
    36ba:	889b      	ldrh	r3, [r3, #4]
    36bc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    36be:	9b01      	ldr	r3, [sp, #4]
    36c0:	681a      	ldr	r2, [r3, #0]
    36c2:	4910      	ldr	r1, [pc, #64]	; (3704 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    36c4:	4613      	mov	r3, r2
    36c6:	00db      	lsls	r3, r3, #3
    36c8:	4413      	add	r3, r2
    36ca:	440b      	add	r3, r1
    36cc:	3306      	adds	r3, #6
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    36d2:	4b0d      	ldr	r3, [pc, #52]	; (3708 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36d6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    36d8:	2201      	movs	r2, #1
    36da:	9b04      	ldr	r3, [sp, #16]
    36dc:	fa02 f303 	lsl.w	r3, r2, r3
    36e0:	43db      	mvns	r3, r3
    36e2:	9a03      	ldr	r2, [sp, #12]
    36e4:	4013      	ands	r3, r2
    36e6:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    36e8:	9a05      	ldr	r2, [sp, #20]
    36ea:	9b04      	ldr	r3, [sp, #16]
    36ec:	fa02 f303 	lsl.w	r3, r2, r3
    36f0:	9a03      	ldr	r2, [sp, #12]
    36f2:	4313      	orrs	r3, r2
    36f4:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    36f6:	4a04      	ldr	r2, [pc, #16]	; (3708 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36f8:	9b03      	ldr	r3, [sp, #12]
    36fa:	6413      	str	r3, [r2, #64]	; 0x40
}
    36fc:	bf00      	nop
    36fe:	b006      	add	sp, #24
    3700:	4770      	bx	lr
    3702:	bf00      	nop
    3704:	00010870 	.word	0x00010870
    3708:	40048000 	.word	0x40048000

0000370c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    370c:	b084      	sub	sp, #16
    370e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3710:	4b0a      	ldr	r3, [pc, #40]	; (373c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3714:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3716:	9b01      	ldr	r3, [sp, #4]
    3718:	889b      	ldrh	r3, [r3, #4]
    371a:	2b01      	cmp	r3, #1
    371c:	d104      	bne.n	3728 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    371e:	9b03      	ldr	r3, [sp, #12]
    3720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3724:	9303      	str	r3, [sp, #12]
    3726:	e003      	b.n	3730 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3728:	9b03      	ldr	r3, [sp, #12]
    372a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    372e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3730:	4a02      	ldr	r2, [pc, #8]	; (373c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3732:	9b03      	ldr	r3, [sp, #12]
    3734:	6693      	str	r3, [r2, #104]	; 0x68
}
    3736:	bf00      	nop
    3738:	b004      	add	sp, #16
    373a:	4770      	bx	lr
    373c:	40048000 	.word	0x40048000

00003740 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3740:	b082      	sub	sp, #8
    3742:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3744:	bf00      	nop
    3746:	b002      	add	sp, #8
    3748:	4770      	bx	lr

0000374a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    374a:	b082      	sub	sp, #8
    374c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    374e:	bf00      	nop
    3750:	b002      	add	sp, #8
    3752:	4770      	bx	lr

00003754 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3754:	b500      	push	{lr}
    3756:	b083      	sub	sp, #12
    3758:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    375a:	9b01      	ldr	r3, [sp, #4]
    375c:	2b00      	cmp	r3, #0
    375e:	d002      	beq.n	3766 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3760:	9801      	ldr	r0, [sp, #4]
    3762:	f000 f8d1 	bl	3908 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3766:	bf00      	nop
    3768:	b003      	add	sp, #12
    376a:	f85d fb04 	ldr.w	pc, [sp], #4

0000376e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    376e:	b500      	push	{lr}
    3770:	b083      	sub	sp, #12
    3772:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3774:	9b01      	ldr	r3, [sp, #4]
    3776:	2b00      	cmp	r3, #0
    3778:	d002      	beq.n	3780 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    377a:	9801      	ldr	r0, [sp, #4]
    377c:	f000 f950 	bl	3a20 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3780:	bf00      	nop
    3782:	b003      	add	sp, #12
    3784:	f85d fb04 	ldr.w	pc, [sp], #4

00003788 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3788:	b500      	push	{lr}
    378a:	b083      	sub	sp, #12
    378c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    378e:	9801      	ldr	r0, [sp, #4]
    3790:	f000 f98e 	bl	3ab0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3794:	bf00      	nop
    3796:	b003      	add	sp, #12
    3798:	f85d fb04 	ldr.w	pc, [sp], #4

0000379c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    379c:	b500      	push	{lr}
    379e:	b083      	sub	sp, #12
    37a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37a2:	9b01      	ldr	r3, [sp, #4]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d002      	beq.n	37ae <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37a8:	9801      	ldr	r0, [sp, #4]
    37aa:	f000 f999 	bl	3ae0 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ae:	bf00      	nop
    37b0:	b003      	add	sp, #12
    37b2:	f85d fb04 	ldr.w	pc, [sp], #4

000037b6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37b6:	b500      	push	{lr}
    37b8:	b083      	sub	sp, #12
    37ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37bc:	9b01      	ldr	r3, [sp, #4]
    37be:	2b00      	cmp	r3, #0
    37c0:	d002      	beq.n	37c8 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    37c2:	9801      	ldr	r0, [sp, #4]
    37c4:	f000 f9b0 	bl	3b28 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c8:	bf00      	nop
    37ca:	b003      	add	sp, #12
    37cc:	f85d fb04 	ldr.w	pc, [sp], #4

000037d0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    37d0:	b500      	push	{lr}
    37d2:	b083      	sub	sp, #12
    37d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    37d6:	9801      	ldr	r0, [sp, #4]
    37d8:	f000 f9ba 	bl	3b50 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37dc:	bf00      	nop
    37de:	b003      	add	sp, #12
    37e0:	f85d fb04 	ldr.w	pc, [sp], #4

000037e4 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37e4:	b500      	push	{lr}
    37e6:	b083      	sub	sp, #12
    37e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ea:	9b01      	ldr	r3, [sp, #4]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d002      	beq.n	37f6 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    37f0:	9801      	ldr	r0, [sp, #4]
    37f2:	f000 f9bd 	bl	3b70 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f6:	bf00      	nop
    37f8:	b003      	add	sp, #12
    37fa:	f85d fb04 	ldr.w	pc, [sp], #4

000037fe <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37fe:	b500      	push	{lr}
    3800:	b083      	sub	sp, #12
    3802:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3804:	9b01      	ldr	r3, [sp, #4]
    3806:	2b00      	cmp	r3, #0
    3808:	d002      	beq.n	3810 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    380a:	9801      	ldr	r0, [sp, #4]
    380c:	f000 f9d4 	bl	3bb8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3810:	bf00      	nop
    3812:	b003      	add	sp, #12
    3814:	f85d fb04 	ldr.w	pc, [sp], #4

00003818 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3818:	b500      	push	{lr}
    381a:	b083      	sub	sp, #12
    381c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    381e:	9801      	ldr	r0, [sp, #4]
    3820:	f000 f9de 	bl	3be0 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3824:	bf00      	nop
    3826:	b003      	add	sp, #12
    3828:	f85d fb04 	ldr.w	pc, [sp], #4

0000382c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    382c:	b500      	push	{lr}
    382e:	b089      	sub	sp, #36	; 0x24
    3830:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3832:	2300      	movs	r3, #0
    3834:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3838:	4b20      	ldr	r3, [pc, #128]	; (38bc <SetInputSouceSytemClock+0x90>)
    383a:	695b      	ldr	r3, [r3, #20]
    383c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    383e:	9b06      	ldr	r3, [sp, #24]
    3840:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3844:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3846:	9b01      	ldr	r3, [sp, #4]
    3848:	061b      	lsls	r3, r3, #24
    384a:	9a06      	ldr	r2, [sp, #24]
    384c:	4313      	orrs	r3, r2
    384e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3850:	4a1a      	ldr	r2, [pc, #104]	; (38bc <SetInputSouceSytemClock+0x90>)
    3852:	9b06      	ldr	r3, [sp, #24]
    3854:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3856:	aa02      	add	r2, sp, #8
    3858:	a903      	add	r1, sp, #12
    385a:	a804      	add	r0, sp, #16
    385c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3860:	f7ff f9ac 	bl	2bbc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3864:	4b15      	ldr	r3, [pc, #84]	; (38bc <SetInputSouceSytemClock+0x90>)
    3866:	691b      	ldr	r3, [r3, #16]
    3868:	0e1b      	lsrs	r3, r3, #24
    386a:	f003 030f 	and.w	r3, r3, #15
    386e:	9a01      	ldr	r2, [sp, #4]
    3870:	429a      	cmp	r2, r3
    3872:	bf0c      	ite	eq
    3874:	2301      	moveq	r3, #1
    3876:	2300      	movne	r3, #0
    3878:	b2db      	uxtb	r3, r3
    387a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    387c:	9a02      	ldr	r2, [sp, #8]
    387e:	a903      	add	r1, sp, #12
    3880:	ab04      	add	r3, sp, #16
    3882:	4618      	mov	r0, r3
    3884:	f7ff f9b4 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    3888:	4603      	mov	r3, r0
    388a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    388e:	9b05      	ldr	r3, [sp, #20]
    3890:	2b00      	cmp	r3, #0
    3892:	d106      	bne.n	38a2 <SetInputSouceSytemClock+0x76>
    3894:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3898:	f083 0301 	eor.w	r3, r3, #1
    389c:	b2db      	uxtb	r3, r3
    389e:	2b00      	cmp	r3, #0
    38a0:	d1e0      	bne.n	3864 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    38a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38a6:	2b00      	cmp	r3, #0
    38a8:	d003      	beq.n	38b2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38aa:	2105      	movs	r1, #5
    38ac:	2001      	movs	r0, #1
    38ae:	f7ff f975 	bl	2b9c <Clock_Ip_ReportClockErrors>
    }
}
    38b2:	bf00      	nop
    38b4:	b009      	add	sp, #36	; 0x24
    38b6:	f85d fb04 	ldr.w	pc, [sp], #4
    38ba:	bf00      	nop
    38bc:	40064000 	.word	0x40064000

000038c0 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38c0:	b500      	push	{lr}
    38c2:	b083      	sub	sp, #12
    38c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38c6:	9b01      	ldr	r3, [sp, #4]
    38c8:	2b00      	cmp	r3, #0
    38ca:	d002      	beq.n	38d2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    38cc:	9801      	ldr	r0, [sp, #4]
    38ce:	f000 f997 	bl	3c00 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38d2:	bf00      	nop
    38d4:	b003      	add	sp, #12
    38d6:	f85d fb04 	ldr.w	pc, [sp], #4

000038da <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38da:	b500      	push	{lr}
    38dc:	b083      	sub	sp, #12
    38de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38e0:	9b01      	ldr	r3, [sp, #4]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d002      	beq.n	38ec <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    38e6:	9801      	ldr	r0, [sp, #4]
    38e8:	f000 fa7e 	bl	3de8 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38ec:	bf00      	nop
    38ee:	b003      	add	sp, #12
    38f0:	f85d fb04 	ldr.w	pc, [sp], #4

000038f4 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    38f4:	b500      	push	{lr}
    38f6:	b083      	sub	sp, #12
    38f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    38fa:	9801      	ldr	r0, [sp, #4]
    38fc:	f000 fab8 	bl	3e70 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3900:	bf00      	nop
    3902:	b003      	add	sp, #12
    3904:	f85d fb04 	ldr.w	pc, [sp], #4

00003908 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3908:	b500      	push	{lr}
    390a:	b08b      	sub	sp, #44	; 0x2c
    390c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    390e:	2300      	movs	r3, #0
    3910:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3914:	9b01      	ldr	r3, [sp, #4]
    3916:	2b00      	cmp	r3, #0
    3918:	d10b      	bne.n	3932 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    391a:	2305      	movs	r3, #5
    391c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    391e:	2301      	movs	r3, #1
    3920:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3924:	2301      	movs	r3, #1
    3926:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    392a:	2301      	movs	r3, #1
    392c:	f88d 3010 	strb.w	r3, [sp, #16]
    3930:	e00e      	b.n	3950 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3932:	9b01      	ldr	r3, [sp, #4]
    3934:	681b      	ldr	r3, [r3, #0]
    3936:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	79db      	ldrb	r3, [r3, #7]
    393c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	889b      	ldrh	r3, [r3, #4]
    3944:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3948:	9b01      	ldr	r3, [sp, #4]
    394a:	7a1b      	ldrb	r3, [r3, #8]
    394c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3950:	4b32      	ldr	r3, [pc, #200]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3956:	4a31      	ldr	r2, [pc, #196]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3958:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    395c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3960:	4b2e      	ldr	r3, [pc, #184]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3962:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3966:	4a2d      	ldr	r2, [pc, #180]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3968:	f023 0301 	bic.w	r3, r3, #1
    396c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3970:	4b2a      	ldr	r3, [pc, #168]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3972:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3976:	4a29      	ldr	r2, [pc, #164]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3978:	f023 0304 	bic.w	r3, r3, #4
    397c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3980:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3984:	2b01      	cmp	r3, #1
    3986:	d144      	bne.n	3a12 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3988:	f89d 300f 	ldrb.w	r3, [sp, #15]
    398c:	4a23      	ldr	r2, [pc, #140]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398e:	f003 0301 	and.w	r3, r3, #1
    3992:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3996:	4b21      	ldr	r3, [pc, #132]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399c:	4a1f      	ldr	r2, [pc, #124]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    399e:	f043 0301 	orr.w	r3, r3, #1
    39a2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39a6:	4b1d      	ldr	r3, [pc, #116]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39b0:	009b      	lsls	r3, r3, #2
    39b2:	f003 0304 	and.w	r3, r3, #4
    39b6:	4919      	ldr	r1, [pc, #100]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b8:	4313      	orrs	r3, r2
    39ba:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39be:	aa05      	add	r2, sp, #20
    39c0:	a906      	add	r1, sp, #24
    39c2:	a807      	add	r0, sp, #28
    39c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    39c8:	f7ff f8f8 	bl	2bbc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39cc:	4b13      	ldr	r3, [pc, #76]	; (3a1c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39d2:	0e1b      	lsrs	r3, r3, #24
    39d4:	f003 0301 	and.w	r3, r3, #1
    39d8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39da:	9a05      	ldr	r2, [sp, #20]
    39dc:	a906      	add	r1, sp, #24
    39de:	ab07      	add	r3, sp, #28
    39e0:	4618      	mov	r0, r3
    39e2:	f7ff f905 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    39e6:	4603      	mov	r3, r0
    39e8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    39ec:	9b08      	ldr	r3, [sp, #32]
    39ee:	2b00      	cmp	r3, #0
    39f0:	d106      	bne.n	3a00 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    39f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    39f6:	f083 0301 	eor.w	r3, r3, #1
    39fa:	b2db      	uxtb	r3, r3
    39fc:	2b00      	cmp	r3, #0
    39fe:	d1e5      	bne.n	39cc <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a00:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a04:	2b00      	cmp	r3, #0
    3a06:	d004      	beq.n	3a12 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a08:	9b02      	ldr	r3, [sp, #8]
    3a0a:	4619      	mov	r1, r3
    3a0c:	2001      	movs	r0, #1
    3a0e:	f7ff f8c5 	bl	2b9c <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a12:	bf00      	nop
    3a14:	b00b      	add	sp, #44	; 0x2c
    3a16:	f85d fb04 	ldr.w	pc, [sp], #4
    3a1a:	bf00      	nop
    3a1c:	40064000 	.word	0x40064000

00003a20 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a20:	b500      	push	{lr}
    3a22:	b089      	sub	sp, #36	; 0x24
    3a24:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a26:	2300      	movs	r3, #0
    3a28:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a2c:	4b1f      	ldr	r3, [pc, #124]	; (3aac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a32:	4a1e      	ldr	r2, [pc, #120]	; (3aac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a34:	f043 0301 	orr.w	r3, r3, #1
    3a38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a3c:	4b1b      	ldr	r3, [pc, #108]	; (3aac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a42:	4a1a      	ldr	r2, [pc, #104]	; (3aac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a44:	f043 0304 	orr.w	r3, r3, #4
    3a48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a4c:	aa03      	add	r2, sp, #12
    3a4e:	a904      	add	r1, sp, #16
    3a50:	a805      	add	r0, sp, #20
    3a52:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a56:	f7ff f8b1 	bl	2bbc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a5a:	4b14      	ldr	r3, [pc, #80]	; (3aac <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a60:	0e1b      	lsrs	r3, r3, #24
    3a62:	f003 0301 	and.w	r3, r3, #1
    3a66:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a68:	9a03      	ldr	r2, [sp, #12]
    3a6a:	a904      	add	r1, sp, #16
    3a6c:	ab05      	add	r3, sp, #20
    3a6e:	4618      	mov	r0, r3
    3a70:	f7ff f8be 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    3a74:	4603      	mov	r3, r0
    3a76:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a7a:	9b06      	ldr	r3, [sp, #24]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d106      	bne.n	3a8e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a84:	f083 0301 	eor.w	r3, r3, #1
    3a88:	b2db      	uxtb	r3, r3
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d1e5      	bne.n	3a5a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3a8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a92:	2b00      	cmp	r3, #0
    3a94:	d005      	beq.n	3aa2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a96:	9b01      	ldr	r3, [sp, #4]
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	4619      	mov	r1, r3
    3a9c:	2001      	movs	r0, #1
    3a9e:	f7ff f87d 	bl	2b9c <Clock_Ip_ReportClockErrors>
    }
}
    3aa2:	bf00      	nop
    3aa4:	b009      	add	sp, #36	; 0x24
    3aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    3aaa:	bf00      	nop
    3aac:	40064000 	.word	0x40064000

00003ab0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3ab0:	b082      	sub	sp, #8
    3ab2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3ab4:	4b09      	ldr	r3, [pc, #36]	; (3adc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aba:	4a08      	ldr	r2, [pc, #32]	; (3adc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3abc:	f023 0301 	bic.w	r3, r3, #1
    3ac0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ac4:	4b05      	ldr	r3, [pc, #20]	; (3adc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aca:	4a04      	ldr	r2, [pc, #16]	; (3adc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3acc:	f023 0304 	bic.w	r3, r3, #4
    3ad0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ad4:	bf00      	nop
    3ad6:	b002      	add	sp, #8
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop
    3adc:	40064000 	.word	0x40064000

00003ae0 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae0:	b082      	sub	sp, #8
    3ae2:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3ae4:	4b0f      	ldr	r3, [pc, #60]	; (3b24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aea:	4a0e      	ldr	r2, [pc, #56]	; (3b24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3aec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3af0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3af4:	4b0b      	ldr	r3, [pc, #44]	; (3b24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3afa:	4a0a      	ldr	r2, [pc, #40]	; (3b24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3afc:	f023 0304 	bic.w	r3, r3, #4
    3b00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b04:	4b07      	ldr	r3, [pc, #28]	; (3b24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b0a:	9b01      	ldr	r3, [sp, #4]
    3b0c:	7a1b      	ldrb	r3, [r3, #8]
    3b0e:	009b      	lsls	r3, r3, #2
    3b10:	f003 0304 	and.w	r3, r3, #4
    3b14:	4903      	ldr	r1, [pc, #12]	; (3b24 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b16:	4313      	orrs	r3, r2
    3b18:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b1c:	bf00      	nop
    3b1e:	b002      	add	sp, #8
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	40064000 	.word	0x40064000

00003b28 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b28:	b082      	sub	sp, #8
    3b2a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b2c:	9b01      	ldr	r3, [sp, #4]
    3b2e:	889b      	ldrh	r3, [r3, #4]
    3b30:	2b01      	cmp	r3, #1
    3b32:	d107      	bne.n	3b44 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b34:	4b05      	ldr	r3, [pc, #20]	; (3b4c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b3a:	4a04      	ldr	r2, [pc, #16]	; (3b4c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b3c:	f043 0304 	orr.w	r3, r3, #4
    3b40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b44:	bf00      	nop
    3b46:	b002      	add	sp, #8
    3b48:	4770      	bx	lr
    3b4a:	bf00      	nop
    3b4c:	40064000 	.word	0x40064000

00003b50 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b50:	b082      	sub	sp, #8
    3b52:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b54:	4b05      	ldr	r3, [pc, #20]	; (3b6c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b5a:	4a04      	ldr	r2, [pc, #16]	; (3b6c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b5c:	f023 0304 	bic.w	r3, r3, #4
    3b60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b64:	bf00      	nop
    3b66:	b002      	add	sp, #8
    3b68:	4770      	bx	lr
    3b6a:	bf00      	nop
    3b6c:	40064000 	.word	0x40064000

00003b70 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b70:	b082      	sub	sp, #8
    3b72:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b74:	4b0f      	ldr	r3, [pc, #60]	; (3bb4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b7a:	4a0e      	ldr	r2, [pc, #56]	; (3bb4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b84:	4b0b      	ldr	r3, [pc, #44]	; (3bb4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b8a:	4a0a      	ldr	r2, [pc, #40]	; (3bb4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b8c:	f023 0302 	bic.w	r3, r3, #2
    3b90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3b94:	4b07      	ldr	r3, [pc, #28]	; (3bb4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b9a:	9b01      	ldr	r3, [sp, #4]
    3b9c:	7a5b      	ldrb	r3, [r3, #9]
    3b9e:	005b      	lsls	r3, r3, #1
    3ba0:	f003 0302 	and.w	r3, r3, #2
    3ba4:	4903      	ldr	r1, [pc, #12]	; (3bb4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba6:	4313      	orrs	r3, r2
    3ba8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3bac:	bf00      	nop
    3bae:	b002      	add	sp, #8
    3bb0:	4770      	bx	lr
    3bb2:	bf00      	nop
    3bb4:	40064000 	.word	0x40064000

00003bb8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bb8:	b082      	sub	sp, #8
    3bba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	889b      	ldrh	r3, [r3, #4]
    3bc0:	2b01      	cmp	r3, #1
    3bc2:	d107      	bne.n	3bd4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3bc4:	4b05      	ldr	r3, [pc, #20]	; (3bdc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bca:	4a04      	ldr	r2, [pc, #16]	; (3bdc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bcc:	f043 0302 	orr.w	r3, r3, #2
    3bd0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3bd4:	bf00      	nop
    3bd6:	b002      	add	sp, #8
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop
    3bdc:	40064000 	.word	0x40064000

00003be0 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3be0:	b082      	sub	sp, #8
    3be2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3be4:	4b05      	ldr	r3, [pc, #20]	; (3bfc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bea:	4a04      	ldr	r2, [pc, #16]	; (3bfc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3bec:	f023 0302 	bic.w	r3, r3, #2
    3bf0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bf4:	bf00      	nop
    3bf6:	b002      	add	sp, #8
    3bf8:	4770      	bx	lr
    3bfa:	bf00      	nop
    3bfc:	40064000 	.word	0x40064000

00003c00 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c00:	b500      	push	{lr}
    3c02:	b08b      	sub	sp, #44	; 0x2c
    3c04:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c06:	9b01      	ldr	r3, [sp, #4]
    3c08:	681a      	ldr	r2, [r3, #0]
    3c0a:	4975      	ldr	r1, [pc, #468]	; (3de0 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c0c:	4613      	mov	r3, r2
    3c0e:	00db      	lsls	r3, r3, #3
    3c10:	4413      	add	r3, r2
    3c12:	440b      	add	r3, r1
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c18:	2300      	movs	r3, #0
    3c1a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c1e:	2300      	movs	r3, #0
    3c20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c24:	4b6f      	ldr	r3, [pc, #444]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c2a:	4a6e      	ldr	r2, [pc, #440]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c34:	4b6b      	ldr	r3, [pc, #428]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d07d      	beq.n	3d3e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c42:	9b01      	ldr	r3, [sp, #4]
    3c44:	79db      	ldrb	r3, [r3, #7]
    3c46:	461a      	mov	r2, r3
    3c48:	4b66      	ldr	r3, [pc, #408]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c4e:	f003 0303 	and.w	r3, r3, #3
    3c52:	429a      	cmp	r2, r3
    3c54:	d10b      	bne.n	3c6e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c56:	9b01      	ldr	r3, [sp, #4]
    3c58:	799b      	ldrb	r3, [r3, #6]
    3c5a:	461a      	mov	r2, r3
    3c5c:	4b61      	ldr	r3, [pc, #388]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c62:	08db      	lsrs	r3, r3, #3
    3c64:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c68:	429a      	cmp	r2, r3
    3c6a:	f000 80b4 	beq.w	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c6e:	4b5d      	ldr	r3, [pc, #372]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c74:	f003 0301 	and.w	r3, r3, #1
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d105      	bne.n	3c88 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c7c:	2301      	movs	r3, #1
    3c7e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c82:	2000      	movs	r0, #0
    3c84:	f7ff fd66 	bl	3754 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c88:	2002      	movs	r0, #2
    3c8a:	f7ff fdcf 	bl	382c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c8e:	4b55      	ldr	r3, [pc, #340]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c90:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c94:	4a53      	ldr	r2, [pc, #332]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c96:	f023 0301 	bic.w	r3, r3, #1
    3c9a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	889b      	ldrh	r3, [r3, #4]
    3ca2:	2b01      	cmp	r3, #1
    3ca4:	f040 8097 	bne.w	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ca8:	9b01      	ldr	r3, [sp, #4]
    3caa:	79db      	ldrb	r3, [r3, #7]
    3cac:	4a4d      	ldr	r2, [pc, #308]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cae:	f003 0303 	and.w	r3, r3, #3
    3cb2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cb6:	4b4b      	ldr	r3, [pc, #300]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cbc:	9b01      	ldr	r3, [sp, #4]
    3cbe:	799b      	ldrb	r3, [r3, #6]
    3cc0:	00db      	lsls	r3, r3, #3
    3cc2:	f003 0308 	and.w	r3, r3, #8
    3cc6:	4313      	orrs	r3, r2
    3cc8:	4a46      	ldr	r2, [pc, #280]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cca:	f043 0301 	orr.w	r3, r3, #1
    3cce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cd2:	aa03      	add	r2, sp, #12
    3cd4:	a904      	add	r1, sp, #16
    3cd6:	a805      	add	r0, sp, #20
    3cd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cdc:	f7fe ff6e 	bl	2bbc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3ce0:	4b40      	ldr	r3, [pc, #256]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ce2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ce6:	0e1b      	lsrs	r3, r3, #24
    3ce8:	f003 0301 	and.w	r3, r3, #1
    3cec:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3cee:	9a03      	ldr	r2, [sp, #12]
    3cf0:	a904      	add	r1, sp, #16
    3cf2:	ab05      	add	r3, sp, #20
    3cf4:	4618      	mov	r0, r3
    3cf6:	f7fe ff7b 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    3cfa:	4603      	mov	r3, r0
    3cfc:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d00:	9b06      	ldr	r3, [sp, #24]
    3d02:	2b00      	cmp	r3, #0
    3d04:	d106      	bne.n	3d14 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d0a:	f083 0301 	eor.w	r3, r3, #1
    3d0e:	b2db      	uxtb	r3, r3
    3d10:	2b00      	cmp	r3, #0
    3d12:	d1e5      	bne.n	3ce0 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d14:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d005      	beq.n	3d28 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d1c:	9b01      	ldr	r3, [sp, #4]
    3d1e:	681b      	ldr	r3, [r3, #0]
    3d20:	4619      	mov	r1, r3
    3d22:	2001      	movs	r0, #1
    3d24:	f7fe ff3a 	bl	2b9c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d28:	2003      	movs	r0, #3
    3d2a:	f7ff fd7f 	bl	382c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d32:	2b00      	cmp	r3, #0
    3d34:	d04f      	beq.n	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d36:	2002      	movs	r0, #2
    3d38:	f7ff fd26 	bl	3788 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d3c:	e04b      	b.n	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d3e:	4b29      	ldr	r3, [pc, #164]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d44:	4a27      	ldr	r2, [pc, #156]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d46:	f023 0301 	bic.w	r3, r3, #1
    3d4a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d4e:	9b01      	ldr	r3, [sp, #4]
    3d50:	889b      	ldrh	r3, [r3, #4]
    3d52:	2b01      	cmp	r3, #1
    3d54:	d13f      	bne.n	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d56:	9b01      	ldr	r3, [sp, #4]
    3d58:	79db      	ldrb	r3, [r3, #7]
    3d5a:	4a22      	ldr	r2, [pc, #136]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d5c:	f003 0303 	and.w	r3, r3, #3
    3d60:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d64:	4b1f      	ldr	r3, [pc, #124]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d66:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d6a:	9b01      	ldr	r3, [sp, #4]
    3d6c:	799b      	ldrb	r3, [r3, #6]
    3d6e:	00db      	lsls	r3, r3, #3
    3d70:	f003 0308 	and.w	r3, r3, #8
    3d74:	4313      	orrs	r3, r2
    3d76:	4a1b      	ldr	r2, [pc, #108]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d78:	f043 0301 	orr.w	r3, r3, #1
    3d7c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d80:	aa03      	add	r2, sp, #12
    3d82:	a904      	add	r1, sp, #16
    3d84:	a805      	add	r0, sp, #20
    3d86:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d8a:	f7fe ff17 	bl	2bbc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d8e:	4b15      	ldr	r3, [pc, #84]	; (3de4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d90:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d94:	0e1b      	lsrs	r3, r3, #24
    3d96:	f003 0301 	and.w	r3, r3, #1
    3d9a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d9c:	9a03      	ldr	r2, [sp, #12]
    3d9e:	a904      	add	r1, sp, #16
    3da0:	ab05      	add	r3, sp, #20
    3da2:	4618      	mov	r0, r3
    3da4:	f7fe ff24 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    3da8:	4603      	mov	r3, r0
    3daa:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dae:	9b06      	ldr	r3, [sp, #24]
    3db0:	2b00      	cmp	r3, #0
    3db2:	d106      	bne.n	3dc2 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3db4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3db8:	f083 0301 	eor.w	r3, r3, #1
    3dbc:	b2db      	uxtb	r3, r3
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d1e5      	bne.n	3d8e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3dc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d005      	beq.n	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dca:	9b01      	ldr	r3, [sp, #4]
    3dcc:	681b      	ldr	r3, [r3, #0]
    3dce:	4619      	mov	r1, r3
    3dd0:	2001      	movs	r0, #1
    3dd2:	f7fe fee3 	bl	2b9c <Clock_Ip_ReportClockErrors>
}
    3dd6:	bf00      	nop
    3dd8:	b00b      	add	sp, #44	; 0x2c
    3dda:	f85d fb04 	ldr.w	pc, [sp], #4
    3dde:	bf00      	nop
    3de0:	00010870 	.word	0x00010870
    3de4:	40064000 	.word	0x40064000

00003de8 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3de8:	b500      	push	{lr}
    3dea:	b089      	sub	sp, #36	; 0x24
    3dec:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3dee:	2300      	movs	r3, #0
    3df0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3df4:	9b01      	ldr	r3, [sp, #4]
    3df6:	889b      	ldrh	r3, [r3, #4]
    3df8:	2b01      	cmp	r3, #1
    3dfa:	d132      	bne.n	3e62 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3dfc:	4b1b      	ldr	r3, [pc, #108]	; (3e6c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3dfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e02:	4a1a      	ldr	r2, [pc, #104]	; (3e6c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e04:	f043 0301 	orr.w	r3, r3, #1
    3e08:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e0c:	aa03      	add	r2, sp, #12
    3e0e:	a904      	add	r1, sp, #16
    3e10:	a805      	add	r0, sp, #20
    3e12:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e16:	f7fe fed1 	bl	2bbc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e1a:	4b14      	ldr	r3, [pc, #80]	; (3e6c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e1c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e20:	0e1b      	lsrs	r3, r3, #24
    3e22:	f003 0301 	and.w	r3, r3, #1
    3e26:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e28:	9a03      	ldr	r2, [sp, #12]
    3e2a:	a904      	add	r1, sp, #16
    3e2c:	ab05      	add	r3, sp, #20
    3e2e:	4618      	mov	r0, r3
    3e30:	f7fe fede 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    3e34:	4603      	mov	r3, r0
    3e36:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e3a:	9b06      	ldr	r3, [sp, #24]
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d106      	bne.n	3e4e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e44:	f083 0301 	eor.w	r3, r3, #1
    3e48:	b2db      	uxtb	r3, r3
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d1e5      	bne.n	3e1a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d005      	beq.n	3e62 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e56:	9b01      	ldr	r3, [sp, #4]
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	4619      	mov	r1, r3
    3e5c:	2001      	movs	r0, #1
    3e5e:	f7fe fe9d 	bl	2b9c <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e62:	bf00      	nop
    3e64:	b009      	add	sp, #36	; 0x24
    3e66:	f85d fb04 	ldr.w	pc, [sp], #4
    3e6a:	bf00      	nop
    3e6c:	40064000 	.word	0x40064000

00003e70 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e70:	b082      	sub	sp, #8
    3e72:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e74:	4b05      	ldr	r3, [pc, #20]	; (3e8c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e7a:	4a04      	ldr	r2, [pc, #16]	; (3e8c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e7c:	f023 0301 	bic.w	r3, r3, #1
    3e80:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3e84:	bf00      	nop
    3e86:	b002      	add	sp, #8
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop
    3e8c:	40064000 	.word	0x40064000

00003e90 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3e90:	b082      	sub	sp, #8
    3e92:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e94:	bf00      	nop
    3e96:	b002      	add	sp, #8
    3e98:	4770      	bx	lr

00003e9a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e9a:	b082      	sub	sp, #8
    3e9c:	9001      	str	r0, [sp, #4]
    3e9e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3ea0:	bf00      	nop
    3ea2:	b002      	add	sp, #8
    3ea4:	4770      	bx	lr

00003ea6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3ea6:	b082      	sub	sp, #8
    3ea8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3eaa:	bf00      	nop
    3eac:	b002      	add	sp, #8
    3eae:	4770      	bx	lr

00003eb0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3eb0:	b082      	sub	sp, #8
    3eb2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3eb4:	bf00      	nop
    3eb6:	b002      	add	sp, #8
    3eb8:	4770      	bx	lr

00003eba <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3eba:	b082      	sub	sp, #8
    3ebc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3ebe:	2302      	movs	r3, #2
}
    3ec0:	4618      	mov	r0, r3
    3ec2:	b002      	add	sp, #8
    3ec4:	4770      	bx	lr

00003ec6 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3ec6:	b082      	sub	sp, #8
    3ec8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3eca:	bf00      	nop
    3ecc:	b002      	add	sp, #8
    3ece:	4770      	bx	lr

00003ed0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ed0:	b500      	push	{lr}
    3ed2:	b083      	sub	sp, #12
    3ed4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ed6:	9b01      	ldr	r3, [sp, #4]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d002      	beq.n	3ee2 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3edc:	9801      	ldr	r0, [sp, #4]
    3ede:	f000 f870 	bl	3fc2 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ee2:	bf00      	nop
    3ee4:	b003      	add	sp, #12
    3ee6:	f85d fb04 	ldr.w	pc, [sp], #4

00003eea <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3eea:	b500      	push	{lr}
    3eec:	b083      	sub	sp, #12
    3eee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ef0:	9b01      	ldr	r3, [sp, #4]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d002      	beq.n	3efc <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3ef6:	9801      	ldr	r0, [sp, #4]
    3ef8:	f000 f89a 	bl	4030 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3efc:	bf00      	nop
    3efe:	b003      	add	sp, #12
    3f00:	f85d fb04 	ldr.w	pc, [sp], #4

00003f04 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f04:	b500      	push	{lr}
    3f06:	b089      	sub	sp, #36	; 0x24
    3f08:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f0a:	2301      	movs	r3, #1
    3f0c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f0e:	2300      	movs	r3, #0
    3f10:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f14:	4b1e      	ldr	r3, [pc, #120]	; (3f90 <Clock_Ip_CompleteSpll+0x8c>)
    3f16:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f1a:	f003 0301 	and.w	r3, r3, #1
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d02f      	beq.n	3f82 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f22:	aa02      	add	r2, sp, #8
    3f24:	a903      	add	r1, sp, #12
    3f26:	a804      	add	r0, sp, #16
    3f28:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f2c:	f7fe fe46 	bl	2bbc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f30:	4b17      	ldr	r3, [pc, #92]	; (3f90 <Clock_Ip_CompleteSpll+0x8c>)
    3f32:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f36:	0e1b      	lsrs	r3, r3, #24
    3f38:	f003 0301 	and.w	r3, r3, #1
    3f3c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f3e:	9a02      	ldr	r2, [sp, #8]
    3f40:	a903      	add	r1, sp, #12
    3f42:	ab04      	add	r3, sp, #16
    3f44:	4618      	mov	r0, r3
    3f46:	f7fe fe53 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    3f4a:	4603      	mov	r3, r0
    3f4c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f50:	9b05      	ldr	r3, [sp, #20]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d106      	bne.n	3f64 <Clock_Ip_CompleteSpll+0x60>
    3f56:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f5a:	f083 0301 	eor.w	r3, r3, #1
    3f5e:	b2db      	uxtb	r3, r3
    3f60:	2b00      	cmp	r3, #0
    3f62:	d1e5      	bne.n	3f30 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f64:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f68:	f083 0301 	eor.w	r3, r3, #1
    3f6c:	b2db      	uxtb	r3, r3
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d002      	beq.n	3f78 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f72:	2302      	movs	r3, #2
    3f74:	9307      	str	r3, [sp, #28]
    3f76:	e006      	b.n	3f86 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f78:	9901      	ldr	r1, [sp, #4]
    3f7a:	2001      	movs	r0, #1
    3f7c:	f7fe fe0e 	bl	2b9c <Clock_Ip_ReportClockErrors>
    3f80:	e001      	b.n	3f86 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f82:	2300      	movs	r3, #0
    3f84:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3f86:	9b07      	ldr	r3, [sp, #28]
}
    3f88:	4618      	mov	r0, r3
    3f8a:	b009      	add	sp, #36	; 0x24
    3f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    3f90:	40064000 	.word	0x40064000

00003f94 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3f94:	b500      	push	{lr}
    3f96:	b083      	sub	sp, #12
    3f98:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f9a:	9801      	ldr	r0, [sp, #4]
    3f9c:	f000 f886 	bl	40ac <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3fa0:	bf00      	nop
    3fa2:	b003      	add	sp, #12
    3fa4:	f85d fb04 	ldr.w	pc, [sp], #4

00003fa8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3fa8:	b500      	push	{lr}
    3faa:	b083      	sub	sp, #12
    3fac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fae:	9b01      	ldr	r3, [sp, #4]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d002      	beq.n	3fba <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3fb4:	9801      	ldr	r0, [sp, #4]
    3fb6:	f000 f891 	bl	40dc <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fba:	bf00      	nop
    3fbc:	b003      	add	sp, #12
    3fbe:	f85d fb04 	ldr.w	pc, [sp], #4

00003fc2 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fc2:	b082      	sub	sp, #8
    3fc4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3fc6:	4b19      	ldr	r3, [pc, #100]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fc8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fcc:	4a17      	ldr	r2, [pc, #92]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fd2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3fd6:	4b15      	ldr	r3, [pc, #84]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fd8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fdc:	4a13      	ldr	r2, [pc, #76]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3fe2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3fe6:	4b11      	ldr	r3, [pc, #68]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fe8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fec:	4a0f      	ldr	r2, [pc, #60]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3ff2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3ff6:	4b0d      	ldr	r3, [pc, #52]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ffc:	4a0b      	ldr	r2, [pc, #44]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ffe:	f023 0301 	bic.w	r3, r3, #1
    4002:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4006:	4b09      	ldr	r3, [pc, #36]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4008:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    400c:	4a07      	ldr	r2, [pc, #28]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    400e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4012:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4016:	4b05      	ldr	r3, [pc, #20]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4018:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    401c:	4a03      	ldr	r2, [pc, #12]	; (402c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    401e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4022:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4026:	bf00      	nop
    4028:	b002      	add	sp, #8
    402a:	4770      	bx	lr
    402c:	40064000 	.word	0x40064000

00004030 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4030:	b082      	sub	sp, #8
    4032:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	889b      	ldrh	r3, [r3, #4]
    4038:	2b01      	cmp	r3, #1
    403a:	d12f      	bne.n	409c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    403c:	4b1a      	ldr	r3, [pc, #104]	; (40a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    403e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4042:	9b01      	ldr	r3, [sp, #4]
    4044:	7b5b      	ldrb	r3, [r3, #13]
    4046:	3b01      	subs	r3, #1
    4048:	021b      	lsls	r3, r3, #8
    404a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    404e:	9b01      	ldr	r3, [sp, #4]
    4050:	7d1b      	ldrb	r3, [r3, #20]
    4052:	3b10      	subs	r3, #16
    4054:	041b      	lsls	r3, r3, #16
    4056:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    405a:	430b      	orrs	r3, r1
    405c:	4912      	ldr	r1, [pc, #72]	; (40a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    405e:	4313      	orrs	r3, r2
    4060:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4064:	9b01      	ldr	r3, [sp, #4]
    4066:	7fdb      	ldrb	r3, [r3, #31]
    4068:	2b02      	cmp	r3, #2
    406a:	d011      	beq.n	4090 <Clock_Ip_SetSpll_TrustedCall+0x60>
    406c:	2b02      	cmp	r3, #2
    406e:	dc17      	bgt.n	40a0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4070:	2b00      	cmp	r3, #0
    4072:	d002      	beq.n	407a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4074:	2b01      	cmp	r3, #1
    4076:	d005      	beq.n	4084 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4078:	e012      	b.n	40a0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    407a:	4b0b      	ldr	r3, [pc, #44]	; (40a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    407c:	2200      	movs	r2, #0
    407e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4082:	e00e      	b.n	40a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4084:	4b08      	ldr	r3, [pc, #32]	; (40a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4086:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    408a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    408e:	e008      	b.n	40a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4090:	4b05      	ldr	r3, [pc, #20]	; (40a8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4092:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4096:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    409a:	e002      	b.n	40a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    409c:	bf00      	nop
    409e:	e000      	b.n	40a2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    40a0:	bf00      	nop
}
    40a2:	bf00      	nop
    40a4:	b002      	add	sp, #8
    40a6:	4770      	bx	lr
    40a8:	40064000 	.word	0x40064000

000040ac <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40ac:	b082      	sub	sp, #8
    40ae:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40b0:	4b09      	ldr	r3, [pc, #36]	; (40d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40b2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40b6:	4a08      	ldr	r2, [pc, #32]	; (40d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    40bc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    40c0:	4b05      	ldr	r3, [pc, #20]	; (40d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40c6:	4a04      	ldr	r2, [pc, #16]	; (40d8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40c8:	f023 0301 	bic.w	r3, r3, #1
    40cc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    40d0:	bf00      	nop
    40d2:	b002      	add	sp, #8
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop
    40d8:	40064000 	.word	0x40064000

000040dc <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    40dc:	b082      	sub	sp, #8
    40de:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    40e0:	9b01      	ldr	r3, [sp, #4]
    40e2:	889b      	ldrh	r3, [r3, #4]
    40e4:	2b01      	cmp	r3, #1
    40e6:	d107      	bne.n	40f8 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    40e8:	4b05      	ldr	r3, [pc, #20]	; (4100 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40ea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40ee:	4a04      	ldr	r2, [pc, #16]	; (4100 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40f0:	f043 0301 	orr.w	r3, r3, #1
    40f4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    40f8:	bf00      	nop
    40fa:	b002      	add	sp, #8
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop
    4100:	40064000 	.word	0x40064000

00004104 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4104:	b082      	sub	sp, #8
    4106:	9001      	str	r0, [sp, #4]
    4108:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    410a:	bf00      	nop
    410c:	b002      	add	sp, #8
    410e:	4770      	bx	lr

00004110 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4110:	b082      	sub	sp, #8
    4112:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4114:	bf00      	nop
    4116:	b002      	add	sp, #8
    4118:	4770      	bx	lr

0000411a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    411a:	b500      	push	{lr}
    411c:	b083      	sub	sp, #12
    411e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4120:	9b01      	ldr	r3, [sp, #4]
    4122:	2b00      	cmp	r3, #0
    4124:	d002      	beq.n	412c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4126:	9801      	ldr	r0, [sp, #4]
    4128:	f000 f8ee 	bl	4308 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    412c:	bf00      	nop
    412e:	b003      	add	sp, #12
    4130:	f85d fb04 	ldr.w	pc, [sp], #4

00004134 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4134:	b500      	push	{lr}
    4136:	b083      	sub	sp, #12
    4138:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    413a:	9b01      	ldr	r3, [sp, #4]
    413c:	2b00      	cmp	r3, #0
    413e:	d002      	beq.n	4146 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4140:	9801      	ldr	r0, [sp, #4]
    4142:	f000 f8ff 	bl	4344 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4146:	bf00      	nop
    4148:	b003      	add	sp, #12
    414a:	f85d fb04 	ldr.w	pc, [sp], #4

0000414e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    414e:	b500      	push	{lr}
    4150:	b083      	sub	sp, #12
    4152:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4154:	9b01      	ldr	r3, [sp, #4]
    4156:	2b00      	cmp	r3, #0
    4158:	d002      	beq.n	4160 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    415a:	9801      	ldr	r0, [sp, #4]
    415c:	f000 f912 	bl	4384 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4160:	bf00      	nop
    4162:	b003      	add	sp, #12
    4164:	f85d fb04 	ldr.w	pc, [sp], #4

00004168 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4168:	b500      	push	{lr}
    416a:	b083      	sub	sp, #12
    416c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    416e:	9b01      	ldr	r3, [sp, #4]
    4170:	2b00      	cmp	r3, #0
    4172:	d002      	beq.n	417a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4174:	9801      	ldr	r0, [sp, #4]
    4176:	f000 f925 	bl	43c4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    417a:	bf00      	nop
    417c:	b003      	add	sp, #12
    417e:	f85d fb04 	ldr.w	pc, [sp], #4

00004182 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4182:	b500      	push	{lr}
    4184:	b083      	sub	sp, #12
    4186:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4188:	9b01      	ldr	r3, [sp, #4]
    418a:	2b00      	cmp	r3, #0
    418c:	d002      	beq.n	4194 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    418e:	9801      	ldr	r0, [sp, #4]
    4190:	f000 f936 	bl	4400 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4194:	bf00      	nop
    4196:	b003      	add	sp, #12
    4198:	f85d fb04 	ldr.w	pc, [sp], #4

0000419c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    419c:	b500      	push	{lr}
    419e:	b083      	sub	sp, #12
    41a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a2:	9b01      	ldr	r3, [sp, #4]
    41a4:	2b00      	cmp	r3, #0
    41a6:	d002      	beq.n	41ae <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41a8:	9801      	ldr	r0, [sp, #4]
    41aa:	f000 f949 	bl	4440 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ae:	bf00      	nop
    41b0:	b003      	add	sp, #12
    41b2:	f85d fb04 	ldr.w	pc, [sp], #4

000041b6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b6:	b500      	push	{lr}
    41b8:	b083      	sub	sp, #12
    41ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41bc:	9b01      	ldr	r3, [sp, #4]
    41be:	2b00      	cmp	r3, #0
    41c0:	d002      	beq.n	41c8 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    41c2:	9801      	ldr	r0, [sp, #4]
    41c4:	f000 f958 	bl	4478 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c8:	bf00      	nop
    41ca:	b003      	add	sp, #12
    41cc:	f85d fb04 	ldr.w	pc, [sp], #4

000041d0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41d0:	b500      	push	{lr}
    41d2:	b083      	sub	sp, #12
    41d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d6:	9b01      	ldr	r3, [sp, #4]
    41d8:	2b00      	cmp	r3, #0
    41da:	d002      	beq.n	41e2 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    41dc:	9801      	ldr	r0, [sp, #4]
    41de:	f000 f969 	bl	44b4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e2:	bf00      	nop
    41e4:	b003      	add	sp, #12
    41e6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ea <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ea:	b500      	push	{lr}
    41ec:	b083      	sub	sp, #12
    41ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41f0:	9b01      	ldr	r3, [sp, #4]
    41f2:	2b00      	cmp	r3, #0
    41f4:	d002      	beq.n	41fc <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    41f6:	9801      	ldr	r0, [sp, #4]
    41f8:	f000 f978 	bl	44ec <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41fc:	bf00      	nop
    41fe:	b003      	add	sp, #12
    4200:	f85d fb04 	ldr.w	pc, [sp], #4

00004204 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4204:	b500      	push	{lr}
    4206:	b083      	sub	sp, #12
    4208:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    420a:	9b01      	ldr	r3, [sp, #4]
    420c:	2b00      	cmp	r3, #0
    420e:	d002      	beq.n	4216 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4210:	9801      	ldr	r0, [sp, #4]
    4212:	f000 f989 	bl	4528 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4216:	bf00      	nop
    4218:	b003      	add	sp, #12
    421a:	f85d fb04 	ldr.w	pc, [sp], #4

0000421e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    421e:	b500      	push	{lr}
    4220:	b083      	sub	sp, #12
    4222:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4224:	9b01      	ldr	r3, [sp, #4]
    4226:	2b00      	cmp	r3, #0
    4228:	d002      	beq.n	4230 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    422a:	9801      	ldr	r0, [sp, #4]
    422c:	f000 f998 	bl	4560 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4230:	bf00      	nop
    4232:	b003      	add	sp, #12
    4234:	f85d fb04 	ldr.w	pc, [sp], #4

00004238 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4238:	b500      	push	{lr}
    423a:	b083      	sub	sp, #12
    423c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    423e:	9b01      	ldr	r3, [sp, #4]
    4240:	2b00      	cmp	r3, #0
    4242:	d002      	beq.n	424a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4244:	9801      	ldr	r0, [sp, #4]
    4246:	f000 f9a9 	bl	459c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    424a:	bf00      	nop
    424c:	b003      	add	sp, #12
    424e:	f85d fb04 	ldr.w	pc, [sp], #4

00004252 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4252:	b500      	push	{lr}
    4254:	b083      	sub	sp, #12
    4256:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4258:	9b01      	ldr	r3, [sp, #4]
    425a:	2b00      	cmp	r3, #0
    425c:	d002      	beq.n	4264 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    425e:	9801      	ldr	r0, [sp, #4]
    4260:	f000 f9e6 	bl	4630 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4264:	bf00      	nop
    4266:	b003      	add	sp, #12
    4268:	f85d fb04 	ldr.w	pc, [sp], #4

0000426c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    426c:	b500      	push	{lr}
    426e:	b083      	sub	sp, #12
    4270:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4272:	9b01      	ldr	r3, [sp, #4]
    4274:	2b00      	cmp	r3, #0
    4276:	d002      	beq.n	427e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4278:	9801      	ldr	r0, [sp, #4]
    427a:	f000 fa25 	bl	46c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    427e:	bf00      	nop
    4280:	b003      	add	sp, #12
    4282:	f85d fb04 	ldr.w	pc, [sp], #4

00004286 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4286:	b500      	push	{lr}
    4288:	b083      	sub	sp, #12
    428a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    428c:	9b01      	ldr	r3, [sp, #4]
    428e:	2b00      	cmp	r3, #0
    4290:	d002      	beq.n	4298 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4292:	9801      	ldr	r0, [sp, #4]
    4294:	f000 fa2a 	bl	46ec <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4298:	bf00      	nop
    429a:	b003      	add	sp, #12
    429c:	f85d fb04 	ldr.w	pc, [sp], #4

000042a0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42a0:	b500      	push	{lr}
    42a2:	b083      	sub	sp, #12
    42a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42a6:	9b01      	ldr	r3, [sp, #4]
    42a8:	2b00      	cmp	r3, #0
    42aa:	d002      	beq.n	42b2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42ac:	9801      	ldr	r0, [sp, #4]
    42ae:	f000 fa3b 	bl	4728 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42b2:	bf00      	nop
    42b4:	b003      	add	sp, #12
    42b6:	f85d fb04 	ldr.w	pc, [sp], #4

000042ba <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42ba:	b500      	push	{lr}
    42bc:	b083      	sub	sp, #12
    42be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d002      	beq.n	42cc <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    42c6:	9801      	ldr	r0, [sp, #4]
    42c8:	f000 fa56 	bl	4778 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42cc:	bf00      	nop
    42ce:	b003      	add	sp, #12
    42d0:	f85d fb04 	ldr.w	pc, [sp], #4

000042d4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42d4:	b500      	push	{lr}
    42d6:	b083      	sub	sp, #12
    42d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	2b00      	cmp	r3, #0
    42de:	d002      	beq.n	42e6 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    42e0:	9801      	ldr	r0, [sp, #4]
    42e2:	f000 fa79 	bl	47d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42e6:	bf00      	nop
    42e8:	b003      	add	sp, #12
    42ea:	f85d fb04 	ldr.w	pc, [sp], #4

000042ee <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42ee:	b500      	push	{lr}
    42f0:	b083      	sub	sp, #12
    42f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42f4:	9b01      	ldr	r3, [sp, #4]
    42f6:	2b00      	cmp	r3, #0
    42f8:	d002      	beq.n	4300 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    42fa:	9801      	ldr	r0, [sp, #4]
    42fc:	f000 fa8a 	bl	4814 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4300:	bf00      	nop
    4302:	b003      	add	sp, #12
    4304:	f85d fb04 	ldr.w	pc, [sp], #4

00004308 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4308:	b084      	sub	sp, #16
    430a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    430c:	4b0b      	ldr	r3, [pc, #44]	; (433c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    430e:	795b      	ldrb	r3, [r3, #5]
    4310:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4312:	4b0b      	ldr	r3, [pc, #44]	; (4340 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4314:	695b      	ldr	r3, [r3, #20]
    4316:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4318:	9b02      	ldr	r3, [sp, #8]
    431a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    431e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4320:	9b03      	ldr	r3, [sp, #12]
    4322:	061b      	lsls	r3, r3, #24
    4324:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4328:	9a02      	ldr	r2, [sp, #8]
    432a:	4313      	orrs	r3, r2
    432c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    432e:	4a04      	ldr	r2, [pc, #16]	; (4340 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4330:	9b02      	ldr	r3, [sp, #8]
    4332:	6153      	str	r3, [r2, #20]
}
    4334:	bf00      	nop
    4336:	b004      	add	sp, #16
    4338:	4770      	bx	lr
    433a:	bf00      	nop
    433c:	00010bd8 	.word	0x00010bd8
    4340:	40064000 	.word	0x40064000

00004344 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4344:	b084      	sub	sp, #16
    4346:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4348:	9b01      	ldr	r3, [sp, #4]
    434a:	685b      	ldr	r3, [r3, #4]
    434c:	4a0b      	ldr	r2, [pc, #44]	; (437c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    434e:	5cd3      	ldrb	r3, [r2, r3]
    4350:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4352:	4b0b      	ldr	r3, [pc, #44]	; (4380 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4354:	695b      	ldr	r3, [r3, #20]
    4356:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4358:	9b02      	ldr	r3, [sp, #8]
    435a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    435e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4360:	9b03      	ldr	r3, [sp, #12]
    4362:	061b      	lsls	r3, r3, #24
    4364:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4368:	9a02      	ldr	r2, [sp, #8]
    436a:	4313      	orrs	r3, r2
    436c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    436e:	4a04      	ldr	r2, [pc, #16]	; (4380 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4370:	9b02      	ldr	r3, [sp, #8]
    4372:	6153      	str	r3, [r2, #20]
}
    4374:	bf00      	nop
    4376:	b004      	add	sp, #16
    4378:	4770      	bx	lr
    437a:	bf00      	nop
    437c:	00010bd8 	.word	0x00010bd8
    4380:	40064000 	.word	0x40064000

00004384 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4384:	b084      	sub	sp, #16
    4386:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4388:	9b01      	ldr	r3, [sp, #4]
    438a:	685b      	ldr	r3, [r3, #4]
    438c:	4a0b      	ldr	r2, [pc, #44]	; (43bc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    438e:	5cd3      	ldrb	r3, [r2, r3]
    4390:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4392:	4b0b      	ldr	r3, [pc, #44]	; (43c0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4394:	699b      	ldr	r3, [r3, #24]
    4396:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4398:	9b02      	ldr	r3, [sp, #8]
    439a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    439e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    43a0:	9b03      	ldr	r3, [sp, #12]
    43a2:	061b      	lsls	r3, r3, #24
    43a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43a8:	9a02      	ldr	r2, [sp, #8]
    43aa:	4313      	orrs	r3, r2
    43ac:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43ae:	4a04      	ldr	r2, [pc, #16]	; (43c0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43b0:	9b02      	ldr	r3, [sp, #8]
    43b2:	6193      	str	r3, [r2, #24]
}
    43b4:	bf00      	nop
    43b6:	b004      	add	sp, #16
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop
    43bc:	00010bd8 	.word	0x00010bd8
    43c0:	40064000 	.word	0x40064000

000043c4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43c4:	b084      	sub	sp, #16
    43c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43c8:	4b0b      	ldr	r3, [pc, #44]	; (43f8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    43ca:	795b      	ldrb	r3, [r3, #5]
    43cc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    43ce:	4b0b      	ldr	r3, [pc, #44]	; (43fc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43d0:	69db      	ldr	r3, [r3, #28]
    43d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43d4:	9b02      	ldr	r3, [sp, #8]
    43d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43da:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43dc:	9b03      	ldr	r3, [sp, #12]
    43de:	061b      	lsls	r3, r3, #24
    43e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43e4:	9a02      	ldr	r2, [sp, #8]
    43e6:	4313      	orrs	r3, r2
    43e8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43ea:	4a04      	ldr	r2, [pc, #16]	; (43fc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43ec:	9b02      	ldr	r3, [sp, #8]
    43ee:	61d3      	str	r3, [r2, #28]
}
    43f0:	bf00      	nop
    43f2:	b004      	add	sp, #16
    43f4:	4770      	bx	lr
    43f6:	bf00      	nop
    43f8:	00010bd8 	.word	0x00010bd8
    43fc:	40064000 	.word	0x40064000

00004400 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4400:	b084      	sub	sp, #16
    4402:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4404:	9b01      	ldr	r3, [sp, #4]
    4406:	685b      	ldr	r3, [r3, #4]
    4408:	4a0b      	ldr	r2, [pc, #44]	; (4438 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    440a:	5cd3      	ldrb	r3, [r2, r3]
    440c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    440e:	4b0b      	ldr	r3, [pc, #44]	; (443c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4410:	69db      	ldr	r3, [r3, #28]
    4412:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4414:	9b02      	ldr	r3, [sp, #8]
    4416:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    441a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    441c:	9b03      	ldr	r3, [sp, #12]
    441e:	061b      	lsls	r3, r3, #24
    4420:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4424:	9a02      	ldr	r2, [sp, #8]
    4426:	4313      	orrs	r3, r2
    4428:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    442a:	4a04      	ldr	r2, [pc, #16]	; (443c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    442c:	9b02      	ldr	r3, [sp, #8]
    442e:	61d3      	str	r3, [r2, #28]
}
    4430:	bf00      	nop
    4432:	b004      	add	sp, #16
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	00010bd8 	.word	0x00010bd8
    443c:	40064000 	.word	0x40064000

00004440 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4440:	b084      	sub	sp, #16
    4442:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4444:	4b0a      	ldr	r3, [pc, #40]	; (4470 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4446:	7b9b      	ldrb	r3, [r3, #14]
    4448:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    444a:	4b0a      	ldr	r3, [pc, #40]	; (4474 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    444c:	691b      	ldr	r3, [r3, #16]
    444e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4450:	9b02      	ldr	r3, [sp, #8]
    4452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4456:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4458:	9b03      	ldr	r3, [sp, #12]
    445a:	011b      	lsls	r3, r3, #4
    445c:	9a02      	ldr	r2, [sp, #8]
    445e:	4313      	orrs	r3, r2
    4460:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4462:	4a04      	ldr	r2, [pc, #16]	; (4474 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4464:	9b02      	ldr	r3, [sp, #8]
    4466:	6113      	str	r3, [r2, #16]
}
    4468:	bf00      	nop
    446a:	b004      	add	sp, #16
    446c:	4770      	bx	lr
    446e:	bf00      	nop
    4470:	00010b80 	.word	0x00010b80
    4474:	40048000 	.word	0x40048000

00004478 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4478:	b084      	sub	sp, #16
    447a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    447c:	9b01      	ldr	r3, [sp, #4]
    447e:	685b      	ldr	r3, [r3, #4]
    4480:	4a0a      	ldr	r2, [pc, #40]	; (44ac <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4482:	5cd3      	ldrb	r3, [r2, r3]
    4484:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4486:	4b0a      	ldr	r3, [pc, #40]	; (44b0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4488:	691b      	ldr	r3, [r3, #16]
    448a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    448c:	9b02      	ldr	r3, [sp, #8]
    448e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4492:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4494:	9b03      	ldr	r3, [sp, #12]
    4496:	011b      	lsls	r3, r3, #4
    4498:	9a02      	ldr	r2, [sp, #8]
    449a:	4313      	orrs	r3, r2
    449c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    449e:	4a04      	ldr	r2, [pc, #16]	; (44b0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44a0:	9b02      	ldr	r3, [sp, #8]
    44a2:	6113      	str	r3, [r2, #16]
}
    44a4:	bf00      	nop
    44a6:	b004      	add	sp, #16
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	00010b80 	.word	0x00010b80
    44b0:	40048000 	.word	0x40048000

000044b4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44b4:	b084      	sub	sp, #16
    44b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44b8:	4b0a      	ldr	r3, [pc, #40]	; (44e4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    44ba:	785b      	ldrb	r3, [r3, #1]
    44bc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44be:	4b0a      	ldr	r3, [pc, #40]	; (44e8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44c0:	691b      	ldr	r3, [r3, #16]
    44c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44c4:	9b02      	ldr	r3, [sp, #8]
    44c6:	f023 030c 	bic.w	r3, r3, #12
    44ca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44cc:	9b03      	ldr	r3, [sp, #12]
    44ce:	009b      	lsls	r3, r3, #2
    44d0:	9a02      	ldr	r2, [sp, #8]
    44d2:	4313      	orrs	r3, r2
    44d4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44d6:	4a04      	ldr	r2, [pc, #16]	; (44e8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44d8:	9b02      	ldr	r3, [sp, #8]
    44da:	6113      	str	r3, [r2, #16]
}
    44dc:	bf00      	nop
    44de:	b004      	add	sp, #16
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop
    44e4:	00010c38 	.word	0x00010c38
    44e8:	40048000 	.word	0x40048000

000044ec <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44ec:	b084      	sub	sp, #16
    44ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44f0:	9b01      	ldr	r3, [sp, #4]
    44f2:	685b      	ldr	r3, [r3, #4]
    44f4:	4a0a      	ldr	r2, [pc, #40]	; (4520 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    44f6:	5cd3      	ldrb	r3, [r2, r3]
    44f8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44fa:	4b0a      	ldr	r3, [pc, #40]	; (4524 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    44fc:	691b      	ldr	r3, [r3, #16]
    44fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4500:	9b02      	ldr	r3, [sp, #8]
    4502:	f023 030c 	bic.w	r3, r3, #12
    4506:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4508:	9b03      	ldr	r3, [sp, #12]
    450a:	009b      	lsls	r3, r3, #2
    450c:	9a02      	ldr	r2, [sp, #8]
    450e:	4313      	orrs	r3, r2
    4510:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4512:	4a04      	ldr	r2, [pc, #16]	; (4524 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4514:	9b02      	ldr	r3, [sp, #8]
    4516:	6113      	str	r3, [r2, #16]
}
    4518:	bf00      	nop
    451a:	b004      	add	sp, #16
    451c:	4770      	bx	lr
    451e:	bf00      	nop
    4520:	00010c38 	.word	0x00010c38
    4524:	40048000 	.word	0x40048000

00004528 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4528:	b084      	sub	sp, #16
    452a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    452c:	4b0a      	ldr	r3, [pc, #40]	; (4558 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    452e:	795b      	ldrb	r3, [r3, #5]
    4530:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4532:	4b0a      	ldr	r3, [pc, #40]	; (455c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4534:	6a1b      	ldr	r3, [r3, #32]
    4536:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4538:	9b02      	ldr	r3, [sp, #8]
    453a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    453e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4540:	9b03      	ldr	r3, [sp, #12]
    4542:	061b      	lsls	r3, r3, #24
    4544:	9a02      	ldr	r2, [sp, #8]
    4546:	4313      	orrs	r3, r2
    4548:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    454a:	4a04      	ldr	r2, [pc, #16]	; (455c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    454c:	9b02      	ldr	r3, [sp, #8]
    454e:	6213      	str	r3, [r2, #32]
}
    4550:	bf00      	nop
    4552:	b004      	add	sp, #16
    4554:	4770      	bx	lr
    4556:	bf00      	nop
    4558:	00010bd8 	.word	0x00010bd8
    455c:	40064000 	.word	0x40064000

00004560 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4560:	b084      	sub	sp, #16
    4562:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4564:	9b01      	ldr	r3, [sp, #4]
    4566:	685b      	ldr	r3, [r3, #4]
    4568:	4a0a      	ldr	r2, [pc, #40]	; (4594 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    456a:	5cd3      	ldrb	r3, [r2, r3]
    456c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    456e:	4b0a      	ldr	r3, [pc, #40]	; (4598 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4570:	6a1b      	ldr	r3, [r3, #32]
    4572:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4574:	9b02      	ldr	r3, [sp, #8]
    4576:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    457a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    457c:	9b03      	ldr	r3, [sp, #12]
    457e:	061b      	lsls	r3, r3, #24
    4580:	9a02      	ldr	r2, [sp, #8]
    4582:	4313      	orrs	r3, r2
    4584:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4586:	4a04      	ldr	r2, [pc, #16]	; (4598 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4588:	9b02      	ldr	r3, [sp, #8]
    458a:	6213      	str	r3, [r2, #32]
}
    458c:	bf00      	nop
    458e:	b004      	add	sp, #16
    4590:	4770      	bx	lr
    4592:	bf00      	nop
    4594:	00010bd8 	.word	0x00010bd8
    4598:	40064000 	.word	0x40064000

0000459c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    459c:	b086      	sub	sp, #24
    459e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45a0:	4b20      	ldr	r3, [pc, #128]	; (4624 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    45a2:	795b      	ldrb	r3, [r3, #5]
    45a4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45a6:	9b01      	ldr	r3, [sp, #4]
    45a8:	681a      	ldr	r2, [r3, #0]
    45aa:	491f      	ldr	r1, [pc, #124]	; (4628 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45ac:	4613      	mov	r3, r2
    45ae:	00db      	lsls	r3, r3, #3
    45b0:	4413      	add	r3, r2
    45b2:	440b      	add	r3, r1
    45b4:	781b      	ldrb	r3, [r3, #0]
    45b6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45b8:	4b1c      	ldr	r3, [pc, #112]	; (462c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45ba:	68db      	ldr	r3, [r3, #12]
    45bc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45be:	9b03      	ldr	r3, [sp, #12]
    45c0:	2b03      	cmp	r3, #3
    45c2:	d813      	bhi.n	45ec <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45c4:	9b03      	ldr	r3, [sp, #12]
    45c6:	005b      	lsls	r3, r3, #1
    45c8:	3318      	adds	r3, #24
    45ca:	2203      	movs	r2, #3
    45cc:	fa02 f303 	lsl.w	r3, r2, r3
    45d0:	43db      	mvns	r3, r3
    45d2:	9a05      	ldr	r2, [sp, #20]
    45d4:	4013      	ands	r3, r2
    45d6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45d8:	9b03      	ldr	r3, [sp, #12]
    45da:	005b      	lsls	r3, r3, #1
    45dc:	3318      	adds	r3, #24
    45de:	9a04      	ldr	r2, [sp, #16]
    45e0:	fa02 f303 	lsl.w	r3, r2, r3
    45e4:	9a05      	ldr	r2, [sp, #20]
    45e6:	4313      	orrs	r3, r2
    45e8:	9305      	str	r3, [sp, #20]
    45ea:	e014      	b.n	4616 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    45ec:	9b03      	ldr	r3, [sp, #12]
    45ee:	3b04      	subs	r3, #4
    45f0:	005b      	lsls	r3, r3, #1
    45f2:	3310      	adds	r3, #16
    45f4:	2203      	movs	r2, #3
    45f6:	fa02 f303 	lsl.w	r3, r2, r3
    45fa:	43db      	mvns	r3, r3
    45fc:	9a05      	ldr	r2, [sp, #20]
    45fe:	4013      	ands	r3, r2
    4600:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4602:	9b03      	ldr	r3, [sp, #12]
    4604:	3b04      	subs	r3, #4
    4606:	005b      	lsls	r3, r3, #1
    4608:	3310      	adds	r3, #16
    460a:	9a04      	ldr	r2, [sp, #16]
    460c:	fa02 f303 	lsl.w	r3, r2, r3
    4610:	9a05      	ldr	r2, [sp, #20]
    4612:	4313      	orrs	r3, r2
    4614:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4616:	4a05      	ldr	r2, [pc, #20]	; (462c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4618:	9b05      	ldr	r3, [sp, #20]
    461a:	60d3      	str	r3, [r2, #12]
}
    461c:	bf00      	nop
    461e:	b006      	add	sp, #24
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	00010b80 	.word	0x00010b80
    4628:	00010870 	.word	0x00010870
    462c:	40048000 	.word	0x40048000

00004630 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4630:	b086      	sub	sp, #24
    4632:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4634:	9b01      	ldr	r3, [sp, #4]
    4636:	685b      	ldr	r3, [r3, #4]
    4638:	4a20      	ldr	r2, [pc, #128]	; (46bc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    463a:	5cd3      	ldrb	r3, [r2, r3]
    463c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    463e:	9b01      	ldr	r3, [sp, #4]
    4640:	681a      	ldr	r2, [r3, #0]
    4642:	491f      	ldr	r1, [pc, #124]	; (46c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4644:	4613      	mov	r3, r2
    4646:	00db      	lsls	r3, r3, #3
    4648:	4413      	add	r3, r2
    464a:	440b      	add	r3, r1
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4650:	4b1c      	ldr	r3, [pc, #112]	; (46c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4652:	68db      	ldr	r3, [r3, #12]
    4654:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4656:	9b03      	ldr	r3, [sp, #12]
    4658:	2b03      	cmp	r3, #3
    465a:	d813      	bhi.n	4684 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    465c:	9b03      	ldr	r3, [sp, #12]
    465e:	005b      	lsls	r3, r3, #1
    4660:	3318      	adds	r3, #24
    4662:	2203      	movs	r2, #3
    4664:	fa02 f303 	lsl.w	r3, r2, r3
    4668:	43db      	mvns	r3, r3
    466a:	9a05      	ldr	r2, [sp, #20]
    466c:	4013      	ands	r3, r2
    466e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4670:	9b03      	ldr	r3, [sp, #12]
    4672:	005b      	lsls	r3, r3, #1
    4674:	3318      	adds	r3, #24
    4676:	9a04      	ldr	r2, [sp, #16]
    4678:	fa02 f303 	lsl.w	r3, r2, r3
    467c:	9a05      	ldr	r2, [sp, #20]
    467e:	4313      	orrs	r3, r2
    4680:	9305      	str	r3, [sp, #20]
    4682:	e014      	b.n	46ae <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4684:	9b03      	ldr	r3, [sp, #12]
    4686:	3b04      	subs	r3, #4
    4688:	005b      	lsls	r3, r3, #1
    468a:	3310      	adds	r3, #16
    468c:	2203      	movs	r2, #3
    468e:	fa02 f303 	lsl.w	r3, r2, r3
    4692:	43db      	mvns	r3, r3
    4694:	9a05      	ldr	r2, [sp, #20]
    4696:	4013      	ands	r3, r2
    4698:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    469a:	9b03      	ldr	r3, [sp, #12]
    469c:	3b04      	subs	r3, #4
    469e:	005b      	lsls	r3, r3, #1
    46a0:	3310      	adds	r3, #16
    46a2:	9a04      	ldr	r2, [sp, #16]
    46a4:	fa02 f303 	lsl.w	r3, r2, r3
    46a8:	9a05      	ldr	r2, [sp, #20]
    46aa:	4313      	orrs	r3, r2
    46ac:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46ae:	4a05      	ldr	r2, [pc, #20]	; (46c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46b0:	9b05      	ldr	r3, [sp, #20]
    46b2:	60d3      	str	r3, [r2, #12]
}
    46b4:	bf00      	nop
    46b6:	b006      	add	sp, #24
    46b8:	4770      	bx	lr
    46ba:	bf00      	nop
    46bc:	00010b80 	.word	0x00010b80
    46c0:	00010870 	.word	0x00010870
    46c4:	40048000 	.word	0x40048000

000046c8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46c8:	b084      	sub	sp, #16
    46ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    46cc:	4b06      	ldr	r3, [pc, #24]	; (46e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46ce:	685b      	ldr	r3, [r3, #4]
    46d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    46d2:	9b03      	ldr	r3, [sp, #12]
    46d4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    46d8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    46da:	4a03      	ldr	r2, [pc, #12]	; (46e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46dc:	9b03      	ldr	r3, [sp, #12]
    46de:	6053      	str	r3, [r2, #4]
}
    46e0:	bf00      	nop
    46e2:	b004      	add	sp, #16
    46e4:	4770      	bx	lr
    46e6:	bf00      	nop
    46e8:	40048000 	.word	0x40048000

000046ec <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46ec:	b084      	sub	sp, #16
    46ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46f0:	9b01      	ldr	r3, [sp, #4]
    46f2:	685b      	ldr	r3, [r3, #4]
    46f4:	4a0a      	ldr	r2, [pc, #40]	; (4720 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    46f6:	5cd3      	ldrb	r3, [r2, r3]
    46f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    46fa:	4b0a      	ldr	r3, [pc, #40]	; (4724 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    46fc:	685b      	ldr	r3, [r3, #4]
    46fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4700:	9b02      	ldr	r3, [sp, #8]
    4702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4706:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4708:	9b03      	ldr	r3, [sp, #12]
    470a:	011b      	lsls	r3, r3, #4
    470c:	9a02      	ldr	r2, [sp, #8]
    470e:	4313      	orrs	r3, r2
    4710:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4712:	4a04      	ldr	r2, [pc, #16]	; (4724 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4714:	9b02      	ldr	r3, [sp, #8]
    4716:	6053      	str	r3, [r2, #4]
}
    4718:	bf00      	nop
    471a:	b004      	add	sp, #16
    471c:	4770      	bx	lr
    471e:	bf00      	nop
    4720:	00010b80 	.word	0x00010b80
    4724:	40048000 	.word	0x40048000

00004728 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4728:	b084      	sub	sp, #16
    472a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    472c:	9b01      	ldr	r3, [sp, #4]
    472e:	681a      	ldr	r2, [r3, #0]
    4730:	490f      	ldr	r1, [pc, #60]	; (4770 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4732:	4613      	mov	r3, r2
    4734:	00db      	lsls	r3, r3, #3
    4736:	4413      	add	r3, r2
    4738:	440b      	add	r3, r1
    473a:	3304      	adds	r3, #4
    473c:	781b      	ldrb	r3, [r3, #0]
    473e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4740:	4a0c      	ldr	r2, [pc, #48]	; (4774 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4742:	9b03      	ldr	r3, [sp, #12]
    4744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4748:	490a      	ldr	r1, [pc, #40]	; (4774 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    474a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    474e:	9b03      	ldr	r3, [sp, #12]
    4750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4754:	4a07      	ldr	r2, [pc, #28]	; (4774 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4756:	9b03      	ldr	r3, [sp, #12]
    4758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    475c:	4905      	ldr	r1, [pc, #20]	; (4774 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    475e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4762:	9b03      	ldr	r3, [sp, #12]
    4764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4768:	bf00      	nop
    476a:	b004      	add	sp, #16
    476c:	4770      	bx	lr
    476e:	bf00      	nop
    4770:	00010870 	.word	0x00010870
    4774:	40065000 	.word	0x40065000

00004778 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4778:	b086      	sub	sp, #24
    477a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    477c:	9b01      	ldr	r3, [sp, #4]
    477e:	681a      	ldr	r2, [r3, #0]
    4780:	4912      	ldr	r1, [pc, #72]	; (47cc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4782:	4613      	mov	r3, r2
    4784:	00db      	lsls	r3, r3, #3
    4786:	4413      	add	r3, r2
    4788:	440b      	add	r3, r1
    478a:	3304      	adds	r3, #4
    478c:	781b      	ldrb	r3, [r3, #0]
    478e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4790:	9b01      	ldr	r3, [sp, #4]
    4792:	685b      	ldr	r3, [r3, #4]
    4794:	4a0e      	ldr	r2, [pc, #56]	; (47d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4796:	5cd3      	ldrb	r3, [r2, r3]
    4798:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    479a:	4a0e      	ldr	r2, [pc, #56]	; (47d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    479c:	9b05      	ldr	r3, [sp, #20]
    479e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47a4:	9b03      	ldr	r3, [sp, #12]
    47a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47aa:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47ac:	9b04      	ldr	r3, [sp, #16]
    47ae:	061b      	lsls	r3, r3, #24
    47b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47b4:	9a03      	ldr	r2, [sp, #12]
    47b6:	4313      	orrs	r3, r2
    47b8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    47ba:	4906      	ldr	r1, [pc, #24]	; (47d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47bc:	9b05      	ldr	r3, [sp, #20]
    47be:	9a03      	ldr	r2, [sp, #12]
    47c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47c4:	bf00      	nop
    47c6:	b006      	add	sp, #24
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	00010870 	.word	0x00010870
    47d0:	00010c08 	.word	0x00010c08
    47d4:	40065000 	.word	0x40065000

000047d8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47d8:	b084      	sub	sp, #16
    47da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47dc:	4b0b      	ldr	r3, [pc, #44]	; (480c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    47de:	7f1b      	ldrb	r3, [r3, #28]
    47e0:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    47e2:	4b0b      	ldr	r3, [pc, #44]	; (4810 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    47e4:	685b      	ldr	r3, [r3, #4]
    47e6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47e8:	9b02      	ldr	r3, [sp, #8]
    47ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47ee:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47f0:	9b03      	ldr	r3, [sp, #12]
    47f2:	031b      	lsls	r3, r3, #12
    47f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47f8:	9a02      	ldr	r2, [sp, #8]
    47fa:	4313      	orrs	r3, r2
    47fc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47fe:	4a04      	ldr	r2, [pc, #16]	; (4810 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4800:	9b02      	ldr	r3, [sp, #8]
    4802:	6053      	str	r3, [r2, #4]
}
    4804:	bf00      	nop
    4806:	b004      	add	sp, #16
    4808:	4770      	bx	lr
    480a:	bf00      	nop
    480c:	00010b80 	.word	0x00010b80
    4810:	40048000 	.word	0x40048000

00004814 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4814:	b084      	sub	sp, #16
    4816:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4818:	9b01      	ldr	r3, [sp, #4]
    481a:	685b      	ldr	r3, [r3, #4]
    481c:	4a0b      	ldr	r2, [pc, #44]	; (484c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    481e:	5cd3      	ldrb	r3, [r2, r3]
    4820:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4822:	4b0b      	ldr	r3, [pc, #44]	; (4850 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4824:	685b      	ldr	r3, [r3, #4]
    4826:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4828:	9b02      	ldr	r3, [sp, #8]
    482a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    482e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4830:	9b03      	ldr	r3, [sp, #12]
    4832:	031b      	lsls	r3, r3, #12
    4834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4838:	9a02      	ldr	r2, [sp, #8]
    483a:	4313      	orrs	r3, r2
    483c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    483e:	4a04      	ldr	r2, [pc, #16]	; (4850 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4840:	9b02      	ldr	r3, [sp, #8]
    4842:	6053      	str	r3, [r2, #4]
}
    4844:	bf00      	nop
    4846:	b004      	add	sp, #16
    4848:	4770      	bx	lr
    484a:	bf00      	nop
    484c:	00010b80 	.word	0x00010b80
    4850:	40048000 	.word	0x40048000

00004854 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4854:	b500      	push	{lr}
    4856:	b085      	sub	sp, #20
    4858:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    485a:	2300      	movs	r3, #0
    485c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	2b00      	cmp	r3, #0
    4864:	d037      	beq.n	48d6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4866:	2300      	movs	r3, #0
    4868:	9303      	str	r3, [sp, #12]
    486a:	e02b      	b.n	48c4 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    486c:	4b29      	ldr	r3, [pc, #164]	; (4914 <DisableSafeClock+0xc0>)
    486e:	6819      	ldr	r1, [r3, #0]
    4870:	9a03      	ldr	r2, [sp, #12]
    4872:	4613      	mov	r3, r2
    4874:	005b      	lsls	r3, r3, #1
    4876:	4413      	add	r3, r2
    4878:	009b      	lsls	r3, r3, #2
    487a:	440b      	add	r3, r1
    487c:	3314      	adds	r3, #20
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	2b05      	cmp	r3, #5
    4882:	d11c      	bne.n	48be <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4884:	2301      	movs	r3, #1
    4886:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    488a:	4b22      	ldr	r3, [pc, #136]	; (4914 <DisableSafeClock+0xc0>)
    488c:	6819      	ldr	r1, [r3, #0]
    488e:	9a03      	ldr	r2, [sp, #12]
    4890:	4613      	mov	r3, r2
    4892:	005b      	lsls	r3, r3, #1
    4894:	4413      	add	r3, r2
    4896:	009b      	lsls	r3, r3, #2
    4898:	440b      	add	r3, r1
    489a:	3318      	adds	r3, #24
    489c:	881b      	ldrh	r3, [r3, #0]
    489e:	2b00      	cmp	r3, #0
    48a0:	d118      	bne.n	48d4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48a2:	4b1d      	ldr	r3, [pc, #116]	; (4918 <DisableSafeClock+0xc4>)
    48a4:	791b      	ldrb	r3, [r3, #4]
    48a6:	4619      	mov	r1, r3
    48a8:	4a1c      	ldr	r2, [pc, #112]	; (491c <DisableSafeClock+0xc8>)
    48aa:	460b      	mov	r3, r1
    48ac:	005b      	lsls	r3, r3, #1
    48ae:	440b      	add	r3, r1
    48b0:	009b      	lsls	r3, r3, #2
    48b2:	4413      	add	r3, r2
    48b4:	3308      	adds	r3, #8
    48b6:	681b      	ldr	r3, [r3, #0]
    48b8:	2005      	movs	r0, #5
    48ba:	4798      	blx	r3
                }
                break;
    48bc:	e00a      	b.n	48d4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48be:	9b03      	ldr	r3, [sp, #12]
    48c0:	3301      	adds	r3, #1
    48c2:	9303      	str	r3, [sp, #12]
    48c4:	4b13      	ldr	r3, [pc, #76]	; (4914 <DisableSafeClock+0xc0>)
    48c6:	681b      	ldr	r3, [r3, #0]
    48c8:	7a1b      	ldrb	r3, [r3, #8]
    48ca:	461a      	mov	r2, r3
    48cc:	9b03      	ldr	r3, [sp, #12]
    48ce:	4293      	cmp	r3, r2
    48d0:	d3cc      	bcc.n	486c <DisableSafeClock+0x18>
    48d2:	e000      	b.n	48d6 <DisableSafeClock+0x82>
                break;
    48d4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    48d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    48da:	f083 0301 	eor.w	r3, r3, #1
    48de:	b2db      	uxtb	r3, r3
    48e0:	2b00      	cmp	r3, #0
    48e2:	d013      	beq.n	490c <DisableSafeClock+0xb8>
    48e4:	4b0e      	ldr	r3, [pc, #56]	; (4920 <DisableSafeClock+0xcc>)
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	f083 0301 	eor.w	r3, r3, #1
    48ec:	b2db      	uxtb	r3, r3
    48ee:	2b00      	cmp	r3, #0
    48f0:	d00c      	beq.n	490c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48f2:	4b09      	ldr	r3, [pc, #36]	; (4918 <DisableSafeClock+0xc4>)
    48f4:	791b      	ldrb	r3, [r3, #4]
    48f6:	4619      	mov	r1, r3
    48f8:	4a08      	ldr	r2, [pc, #32]	; (491c <DisableSafeClock+0xc8>)
    48fa:	460b      	mov	r3, r1
    48fc:	005b      	lsls	r3, r3, #1
    48fe:	440b      	add	r3, r1
    4900:	009b      	lsls	r3, r3, #2
    4902:	4413      	add	r3, r2
    4904:	3308      	adds	r3, #8
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	2005      	movs	r0, #5
    490a:	4798      	blx	r3
    }
}
    490c:	bf00      	nop
    490e:	b005      	add	sp, #20
    4910:	f85d fb04 	ldr.w	pc, [sp], #4
    4914:	1fff8bb4 	.word	0x1fff8bb4
    4918:	00010800 	.word	0x00010800
    491c:	00010e30 	.word	0x00010e30
    4920:	1fff8b18 	.word	0x1fff8b18

00004924 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4924:	4b06      	ldr	r3, [pc, #24]	; (4940 <SetFircToResetValue_TrustedCall+0x1c>)
    4926:	2200      	movs	r2, #0
    4928:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    492c:	4b04      	ldr	r3, [pc, #16]	; (4940 <SetFircToResetValue_TrustedCall+0x1c>)
    492e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4932:	4a03      	ldr	r2, [pc, #12]	; (4940 <SetFircToResetValue_TrustedCall+0x1c>)
    4934:	f043 0301 	orr.w	r3, r3, #1
    4938:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    493c:	bf00      	nop
    493e:	4770      	bx	lr
    4940:	40064000 	.word	0x40064000

00004944 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4944:	b084      	sub	sp, #16
    4946:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4948:	2303      	movs	r3, #3
    494a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    494c:	2300      	movs	r3, #0
    494e:	9302      	str	r3, [sp, #8]
    4950:	e028      	b.n	49a4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4952:	9b01      	ldr	r3, [sp, #4]
    4954:	9a02      	ldr	r2, [sp, #8]
    4956:	320d      	adds	r2, #13
    4958:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    495c:	2b28      	cmp	r3, #40	; 0x28
    495e:	d10b      	bne.n	4978 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4960:	9a01      	ldr	r2, [sp, #4]
    4962:	9b02      	ldr	r3, [sp, #8]
    4964:	330d      	adds	r3, #13
    4966:	00db      	lsls	r3, r3, #3
    4968:	4413      	add	r3, r2
    496a:	685b      	ldr	r3, [r3, #4]
    496c:	4a2b      	ldr	r2, [pc, #172]	; (4a1c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    496e:	5cd3      	ldrb	r3, [r2, r3]
    4970:	011b      	lsls	r3, r3, #4
    4972:	9a03      	ldr	r2, [sp, #12]
    4974:	4313      	orrs	r3, r2
    4976:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4978:	9b01      	ldr	r3, [sp, #4]
    497a:	9a02      	ldr	r2, [sp, #8]
    497c:	320d      	adds	r2, #13
    497e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4982:	2b29      	cmp	r3, #41	; 0x29
    4984:	d10b      	bne.n	499e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4986:	9a01      	ldr	r2, [sp, #4]
    4988:	9b02      	ldr	r3, [sp, #8]
    498a:	330d      	adds	r3, #13
    498c:	00db      	lsls	r3, r3, #3
    498e:	4413      	add	r3, r2
    4990:	685b      	ldr	r3, [r3, #4]
    4992:	4a23      	ldr	r2, [pc, #140]	; (4a20 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4994:	5cd3      	ldrb	r3, [r2, r3]
    4996:	009b      	lsls	r3, r3, #2
    4998:	9a03      	ldr	r2, [sp, #12]
    499a:	4313      	orrs	r3, r2
    499c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    499e:	9b02      	ldr	r3, [sp, #8]
    49a0:	3301      	adds	r3, #1
    49a2:	9302      	str	r3, [sp, #8]
    49a4:	9b01      	ldr	r3, [sp, #4]
    49a6:	7adb      	ldrb	r3, [r3, #11]
    49a8:	461a      	mov	r2, r3
    49aa:	9b02      	ldr	r3, [sp, #8]
    49ac:	4293      	cmp	r3, r2
    49ae:	d3d0      	bcc.n	4952 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49b0:	2300      	movs	r3, #0
    49b2:	9302      	str	r3, [sp, #8]
    49b4:	e026      	b.n	4a04 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49b6:	9a01      	ldr	r2, [sp, #4]
    49b8:	9b02      	ldr	r3, [sp, #8]
    49ba:	334e      	adds	r3, #78	; 0x4e
    49bc:	00db      	lsls	r3, r3, #3
    49be:	4413      	add	r3, r2
    49c0:	685b      	ldr	r3, [r3, #4]
    49c2:	2b12      	cmp	r3, #18
    49c4:	d109      	bne.n	49da <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    49c6:	9a01      	ldr	r2, [sp, #4]
    49c8:	9b02      	ldr	r3, [sp, #8]
    49ca:	334e      	adds	r3, #78	; 0x4e
    49cc:	00db      	lsls	r3, r3, #3
    49ce:	4413      	add	r3, r2
    49d0:	891b      	ldrh	r3, [r3, #8]
    49d2:	005b      	lsls	r3, r3, #1
    49d4:	9a03      	ldr	r2, [sp, #12]
    49d6:	4313      	orrs	r3, r2
    49d8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    49da:	9a01      	ldr	r2, [sp, #4]
    49dc:	9b02      	ldr	r3, [sp, #8]
    49de:	334e      	adds	r3, #78	; 0x4e
    49e0:	00db      	lsls	r3, r3, #3
    49e2:	4413      	add	r3, r2
    49e4:	685b      	ldr	r3, [r3, #4]
    49e6:	2b13      	cmp	r3, #19
    49e8:	d109      	bne.n	49fe <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    49ea:	9a01      	ldr	r2, [sp, #4]
    49ec:	9b02      	ldr	r3, [sp, #8]
    49ee:	334e      	adds	r3, #78	; 0x4e
    49f0:	00db      	lsls	r3, r3, #3
    49f2:	4413      	add	r3, r2
    49f4:	891b      	ldrh	r3, [r3, #8]
    49f6:	461a      	mov	r2, r3
    49f8:	9b03      	ldr	r3, [sp, #12]
    49fa:	4313      	orrs	r3, r2
    49fc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49fe:	9b02      	ldr	r3, [sp, #8]
    4a00:	3301      	adds	r3, #1
    4a02:	9302      	str	r3, [sp, #8]
    4a04:	9b01      	ldr	r3, [sp, #4]
    4a06:	7c1b      	ldrb	r3, [r3, #16]
    4a08:	461a      	mov	r2, r3
    4a0a:	9b02      	ldr	r3, [sp, #8]
    4a0c:	4293      	cmp	r3, r2
    4a0e:	d3d2      	bcc.n	49b6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a10:	4a04      	ldr	r2, [pc, #16]	; (4a24 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a12:	9b03      	ldr	r3, [sp, #12]
    4a14:	6113      	str	r3, [r2, #16]
}
    4a16:	bf00      	nop
    4a18:	b004      	add	sp, #16
    4a1a:	4770      	bx	lr
    4a1c:	00010b80 	.word	0x00010b80
    4a20:	00010c38 	.word	0x00010c38
    4a24:	40048000 	.word	0x40048000

00004a28 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a28:	b500      	push	{lr}
    4a2a:	b089      	sub	sp, #36	; 0x24
    4a2c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a2e:	2300      	movs	r3, #0
    4a30:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a34:	4a21      	ldr	r2, [pc, #132]	; (4abc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a36:	9b01      	ldr	r3, [sp, #4]
    4a38:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a3a:	4b21      	ldr	r3, [pc, #132]	; (4ac0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a3c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a40:	f003 0301 	and.w	r3, r3, #1
    4a44:	2b00      	cmp	r3, #0
    4a46:	d12e      	bne.n	4aa6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a48:	4b1e      	ldr	r3, [pc, #120]	; (4ac4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a4a:	2200      	movs	r2, #0
    4a4c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a4e:	f7ff ff69 	bl	4924 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a52:	aa03      	add	r2, sp, #12
    4a54:	a904      	add	r1, sp, #16
    4a56:	a805      	add	r0, sp, #20
    4a58:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a5c:	f7fe f8ae 	bl	2bbc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a60:	4b17      	ldr	r3, [pc, #92]	; (4ac0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a66:	0e1b      	lsrs	r3, r3, #24
    4a68:	f003 0301 	and.w	r3, r3, #1
    4a6c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a6e:	9a03      	ldr	r2, [sp, #12]
    4a70:	a904      	add	r1, sp, #16
    4a72:	ab05      	add	r3, sp, #20
    4a74:	4618      	mov	r0, r3
    4a76:	f7fe f8bb 	bl	2bf0 <Clock_Ip_TimeoutExpired>
    4a7a:	4603      	mov	r3, r0
    4a7c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a80:	9b06      	ldr	r3, [sp, #24]
    4a82:	2b00      	cmp	r3, #0
    4a84:	d106      	bne.n	4a94 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4a86:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a8a:	f083 0301 	eor.w	r3, r3, #1
    4a8e:	b2db      	uxtb	r3, r3
    4a90:	2b00      	cmp	r3, #0
    4a92:	d1e5      	bne.n	4a60 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4a94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d007      	beq.n	4aac <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a9c:	2105      	movs	r1, #5
    4a9e:	2001      	movs	r0, #1
    4aa0:	f7fe f87c 	bl	2b9c <Clock_Ip_ReportClockErrors>
    4aa4:	e002      	b.n	4aac <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4aa6:	4b07      	ldr	r3, [pc, #28]	; (4ac4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4aa8:	2201      	movs	r2, #1
    4aaa:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4aac:	9801      	ldr	r0, [sp, #4]
    4aae:	f7ff ff49 	bl	4944 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4ab2:	bf00      	nop
    4ab4:	b009      	add	sp, #36	; 0x24
    4ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    4aba:	bf00      	nop
    4abc:	1fff8bb4 	.word	0x1fff8bb4
    4ac0:	40064000 	.word	0x40064000
    4ac4:	1fff8b18 	.word	0x1fff8b18

00004ac8 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4ac8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4aca:	2300      	movs	r3, #0
    4acc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4ace:	4b29      	ldr	r3, [pc, #164]	; (4b74 <getFircConfig+0xac>)
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d024      	beq.n	4b20 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4ad6:	2300      	movs	r3, #0
    4ad8:	9301      	str	r3, [sp, #4]
    4ada:	e01a      	b.n	4b12 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4adc:	4b25      	ldr	r3, [pc, #148]	; (4b74 <getFircConfig+0xac>)
    4ade:	6819      	ldr	r1, [r3, #0]
    4ae0:	9a01      	ldr	r2, [sp, #4]
    4ae2:	4613      	mov	r3, r2
    4ae4:	005b      	lsls	r3, r3, #1
    4ae6:	4413      	add	r3, r2
    4ae8:	009b      	lsls	r3, r3, #2
    4aea:	440b      	add	r3, r1
    4aec:	3314      	adds	r3, #20
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	2b05      	cmp	r3, #5
    4af2:	d10b      	bne.n	4b0c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4af4:	4b1f      	ldr	r3, [pc, #124]	; (4b74 <getFircConfig+0xac>)
    4af6:	6819      	ldr	r1, [r3, #0]
    4af8:	9a01      	ldr	r2, [sp, #4]
    4afa:	4613      	mov	r3, r2
    4afc:	005b      	lsls	r3, r3, #1
    4afe:	4413      	add	r3, r2
    4b00:	009b      	lsls	r3, r3, #2
    4b02:	3310      	adds	r3, #16
    4b04:	440b      	add	r3, r1
    4b06:	3304      	adds	r3, #4
    4b08:	9300      	str	r3, [sp, #0]
                break;
    4b0a:	e009      	b.n	4b20 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b0c:	9b01      	ldr	r3, [sp, #4]
    4b0e:	3301      	adds	r3, #1
    4b10:	9301      	str	r3, [sp, #4]
    4b12:	4b18      	ldr	r3, [pc, #96]	; (4b74 <getFircConfig+0xac>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	7a1b      	ldrb	r3, [r3, #8]
    4b18:	461a      	mov	r2, r3
    4b1a:	9b01      	ldr	r3, [sp, #4]
    4b1c:	4293      	cmp	r3, r2
    4b1e:	d3dd      	bcc.n	4adc <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b20:	9b00      	ldr	r3, [sp, #0]
    4b22:	2b00      	cmp	r3, #0
    4b24:	d121      	bne.n	4b6a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b26:	4b14      	ldr	r3, [pc, #80]	; (4b78 <getFircConfig+0xb0>)
    4b28:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b2a:	4b13      	ldr	r3, [pc, #76]	; (4b78 <getFircConfig+0xb0>)
    4b2c:	2205      	movs	r2, #5
    4b2e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b30:	4b12      	ldr	r3, [pc, #72]	; (4b7c <getFircConfig+0xb4>)
    4b32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b36:	b29b      	uxth	r3, r3
    4b38:	f003 0301 	and.w	r3, r3, #1
    4b3c:	b29a      	uxth	r2, r3
    4b3e:	4b0e      	ldr	r3, [pc, #56]	; (4b78 <getFircConfig+0xb0>)
    4b40:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b42:	4b0e      	ldr	r3, [pc, #56]	; (4b7c <getFircConfig+0xb4>)
    4b44:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b48:	b2db      	uxtb	r3, r3
    4b4a:	f003 0303 	and.w	r3, r3, #3
    4b4e:	b2da      	uxtb	r2, r3
    4b50:	4b09      	ldr	r3, [pc, #36]	; (4b78 <getFircConfig+0xb0>)
    4b52:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b54:	4b09      	ldr	r3, [pc, #36]	; (4b7c <getFircConfig+0xb4>)
    4b56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b5a:	b2db      	uxtb	r3, r3
    4b5c:	10db      	asrs	r3, r3, #3
    4b5e:	b2db      	uxtb	r3, r3
    4b60:	f003 0301 	and.w	r3, r3, #1
    4b64:	b2da      	uxtb	r2, r3
    4b66:	4b04      	ldr	r3, [pc, #16]	; (4b78 <getFircConfig+0xb0>)
    4b68:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b6a:	9b00      	ldr	r3, [sp, #0]
}
    4b6c:	4618      	mov	r0, r3
    4b6e:	b002      	add	sp, #8
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop
    4b74:	1fff8bb4 	.word	0x1fff8bb4
    4b78:	1fff8c20 	.word	0x1fff8c20
    4b7c:	40064000 	.word	0x40064000

00004b80 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b80:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b82:	2300      	movs	r3, #0
    4b84:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b86:	4b20      	ldr	r3, [pc, #128]	; (4c08 <getSoscConfig+0x88>)
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d024      	beq.n	4bd8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b8e:	2300      	movs	r3, #0
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	e01a      	b.n	4bca <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4b94:	4b1c      	ldr	r3, [pc, #112]	; (4c08 <getSoscConfig+0x88>)
    4b96:	6819      	ldr	r1, [r3, #0]
    4b98:	9a01      	ldr	r2, [sp, #4]
    4b9a:	4613      	mov	r3, r2
    4b9c:	009b      	lsls	r3, r3, #2
    4b9e:	4413      	add	r3, r2
    4ba0:	009b      	lsls	r3, r3, #2
    4ba2:	440b      	add	r3, r1
    4ba4:	332c      	adds	r3, #44	; 0x2c
    4ba6:	681b      	ldr	r3, [r3, #0]
    4ba8:	2b08      	cmp	r3, #8
    4baa:	d10b      	bne.n	4bc4 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4bac:	4b16      	ldr	r3, [pc, #88]	; (4c08 <getSoscConfig+0x88>)
    4bae:	6819      	ldr	r1, [r3, #0]
    4bb0:	9a01      	ldr	r2, [sp, #4]
    4bb2:	4613      	mov	r3, r2
    4bb4:	009b      	lsls	r3, r3, #2
    4bb6:	4413      	add	r3, r2
    4bb8:	009b      	lsls	r3, r3, #2
    4bba:	3328      	adds	r3, #40	; 0x28
    4bbc:	440b      	add	r3, r1
    4bbe:	3304      	adds	r3, #4
    4bc0:	9300      	str	r3, [sp, #0]
                break;
    4bc2:	e009      	b.n	4bd8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bc4:	9b01      	ldr	r3, [sp, #4]
    4bc6:	3301      	adds	r3, #1
    4bc8:	9301      	str	r3, [sp, #4]
    4bca:	4b0f      	ldr	r3, [pc, #60]	; (4c08 <getSoscConfig+0x88>)
    4bcc:	681b      	ldr	r3, [r3, #0]
    4bce:	7a5b      	ldrb	r3, [r3, #9]
    4bd0:	461a      	mov	r2, r3
    4bd2:	9b01      	ldr	r3, [sp, #4]
    4bd4:	4293      	cmp	r3, r2
    4bd6:	d3dd      	bcc.n	4b94 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bd8:	9b00      	ldr	r3, [sp, #0]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d110      	bne.n	4c00 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4bde:	4b0b      	ldr	r3, [pc, #44]	; (4c0c <getSoscConfig+0x8c>)
    4be0:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4be2:	4b0a      	ldr	r3, [pc, #40]	; (4c0c <getSoscConfig+0x8c>)
    4be4:	2208      	movs	r2, #8
    4be6:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4be8:	4b09      	ldr	r3, [pc, #36]	; (4c10 <getSoscConfig+0x90>)
    4bea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4bee:	b29b      	uxth	r3, r3
    4bf0:	f003 0301 	and.w	r3, r3, #1
    4bf4:	b29a      	uxth	r2, r3
    4bf6:	4b05      	ldr	r3, [pc, #20]	; (4c0c <getSoscConfig+0x8c>)
    4bf8:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4bfa:	4b04      	ldr	r3, [pc, #16]	; (4c0c <getSoscConfig+0x8c>)
    4bfc:	4a05      	ldr	r2, [pc, #20]	; (4c14 <getSoscConfig+0x94>)
    4bfe:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c00:	9b00      	ldr	r3, [sp, #0]
}
    4c02:	4618      	mov	r0, r3
    4c04:	b002      	add	sp, #8
    4c06:	4770      	bx	lr
    4c08:	1fff8bb4 	.word	0x1fff8bb4
    4c0c:	1fff8c2c 	.word	0x1fff8c2c
    4c10:	40064000 	.word	0x40064000
    4c14:	02625a00 	.word	0x02625a00

00004c18 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c18:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c1a:	2300      	movs	r3, #0
    4c1c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c1e:	4b28      	ldr	r3, [pc, #160]	; (4cc0 <getSpllConfig+0xa8>)
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	2b00      	cmp	r3, #0
    4c24:	d023      	beq.n	4c6e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c26:	2300      	movs	r3, #0
    4c28:	9301      	str	r3, [sp, #4]
    4c2a:	e019      	b.n	4c60 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c2c:	4b24      	ldr	r3, [pc, #144]	; (4cc0 <getSpllConfig+0xa8>)
    4c2e:	6819      	ldr	r1, [r3, #0]
    4c30:	9a01      	ldr	r2, [sp, #4]
    4c32:	4613      	mov	r3, r2
    4c34:	009b      	lsls	r3, r3, #2
    4c36:	4413      	add	r3, r2
    4c38:	00db      	lsls	r3, r3, #3
    4c3a:	440b      	add	r3, r1
    4c3c:	3340      	adds	r3, #64	; 0x40
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	2b09      	cmp	r3, #9
    4c42:	d10a      	bne.n	4c5a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c44:	4b1e      	ldr	r3, [pc, #120]	; (4cc0 <getSpllConfig+0xa8>)
    4c46:	6819      	ldr	r1, [r3, #0]
    4c48:	9a01      	ldr	r2, [sp, #4]
    4c4a:	4613      	mov	r3, r2
    4c4c:	009b      	lsls	r3, r3, #2
    4c4e:	4413      	add	r3, r2
    4c50:	00db      	lsls	r3, r3, #3
    4c52:	3340      	adds	r3, #64	; 0x40
    4c54:	440b      	add	r3, r1
    4c56:	9300      	str	r3, [sp, #0]
                break;
    4c58:	e009      	b.n	4c6e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c5a:	9b01      	ldr	r3, [sp, #4]
    4c5c:	3301      	adds	r3, #1
    4c5e:	9301      	str	r3, [sp, #4]
    4c60:	4b17      	ldr	r3, [pc, #92]	; (4cc0 <getSpllConfig+0xa8>)
    4c62:	681b      	ldr	r3, [r3, #0]
    4c64:	7a9b      	ldrb	r3, [r3, #10]
    4c66:	461a      	mov	r2, r3
    4c68:	9b01      	ldr	r3, [sp, #4]
    4c6a:	4293      	cmp	r3, r2
    4c6c:	d3de      	bcc.n	4c2c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c6e:	9b00      	ldr	r3, [sp, #0]
    4c70:	2b00      	cmp	r3, #0
    4c72:	d121      	bne.n	4cb8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c74:	4b13      	ldr	r3, [pc, #76]	; (4cc4 <getSpllConfig+0xac>)
    4c76:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c78:	4b12      	ldr	r3, [pc, #72]	; (4cc4 <getSpllConfig+0xac>)
    4c7a:	2209      	movs	r2, #9
    4c7c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c7e:	4b12      	ldr	r3, [pc, #72]	; (4cc8 <getSpllConfig+0xb0>)
    4c80:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c84:	b29b      	uxth	r3, r3
    4c86:	f003 0301 	and.w	r3, r3, #1
    4c8a:	b29a      	uxth	r2, r3
    4c8c:	4b0d      	ldr	r3, [pc, #52]	; (4cc4 <getSpllConfig+0xac>)
    4c8e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4c90:	4b0d      	ldr	r3, [pc, #52]	; (4cc8 <getSpllConfig+0xb0>)
    4c92:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c96:	0a1b      	lsrs	r3, r3, #8
    4c98:	b2db      	uxtb	r3, r3
    4c9a:	f003 0307 	and.w	r3, r3, #7
    4c9e:	b2da      	uxtb	r2, r3
    4ca0:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <getSpllConfig+0xac>)
    4ca2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4ca4:	4b08      	ldr	r3, [pc, #32]	; (4cc8 <getSpllConfig+0xb0>)
    4ca6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4caa:	0c1b      	lsrs	r3, r3, #16
    4cac:	b2db      	uxtb	r3, r3
    4cae:	f003 031f 	and.w	r3, r3, #31
    4cb2:	b2da      	uxtb	r2, r3
    4cb4:	4b03      	ldr	r3, [pc, #12]	; (4cc4 <getSpllConfig+0xac>)
    4cb6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4cb8:	9b00      	ldr	r3, [sp, #0]
}
    4cba:	4618      	mov	r0, r3
    4cbc:	b002      	add	sp, #8
    4cbe:	4770      	bx	lr
    4cc0:	1fff8bb4 	.word	0x1fff8bb4
    4cc4:	1fff8c40 	.word	0x1fff8c40
    4cc8:	40064000 	.word	0x40064000

00004ccc <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4ccc:	b086      	sub	sp, #24
    4cce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4cd0:	2300      	movs	r3, #0
    4cd2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4cd4:	9b01      	ldr	r3, [sp, #4]
    4cd6:	2b1b      	cmp	r3, #27
    4cd8:	d00f      	beq.n	4cfa <getSelectorConfig+0x2e>
    4cda:	9b01      	ldr	r3, [sp, #4]
    4cdc:	2b1b      	cmp	r3, #27
    4cde:	d80f      	bhi.n	4d00 <getSelectorConfig+0x34>
    4ce0:	9b01      	ldr	r3, [sp, #4]
    4ce2:	2b19      	cmp	r3, #25
    4ce4:	d003      	beq.n	4cee <getSelectorConfig+0x22>
    4ce6:	9b01      	ldr	r3, [sp, #4]
    4ce8:	2b1a      	cmp	r3, #26
    4cea:	d003      	beq.n	4cf4 <getSelectorConfig+0x28>
    4cec:	e008      	b.n	4d00 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4cee:	2300      	movs	r3, #0
    4cf0:	9304      	str	r3, [sp, #16]
            break;
    4cf2:	e008      	b.n	4d06 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4cf4:	2301      	movs	r3, #1
    4cf6:	9304      	str	r3, [sp, #16]
            break;
    4cf8:	e005      	b.n	4d06 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4cfa:	2302      	movs	r3, #2
    4cfc:	9304      	str	r3, [sp, #16]
            break;
    4cfe:	e002      	b.n	4d06 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d00:	2300      	movs	r3, #0
    4d02:	9304      	str	r3, [sp, #16]
            break;
    4d04:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d06:	4b36      	ldr	r3, [pc, #216]	; (4de0 <getSelectorConfig+0x114>)
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d01d      	beq.n	4d4a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d0e:	2300      	movs	r3, #0
    4d10:	9303      	str	r3, [sp, #12]
    4d12:	e013      	b.n	4d3c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d14:	4b32      	ldr	r3, [pc, #200]	; (4de0 <getSelectorConfig+0x114>)
    4d16:	681b      	ldr	r3, [r3, #0]
    4d18:	9a03      	ldr	r2, [sp, #12]
    4d1a:	320d      	adds	r2, #13
    4d1c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d20:	9a01      	ldr	r2, [sp, #4]
    4d22:	429a      	cmp	r2, r3
    4d24:	d107      	bne.n	4d36 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d26:	4b2e      	ldr	r3, [pc, #184]	; (4de0 <getSelectorConfig+0x114>)
    4d28:	681a      	ldr	r2, [r3, #0]
    4d2a:	9b03      	ldr	r3, [sp, #12]
    4d2c:	330d      	adds	r3, #13
    4d2e:	00db      	lsls	r3, r3, #3
    4d30:	4413      	add	r3, r2
    4d32:	9305      	str	r3, [sp, #20]
                break;
    4d34:	e009      	b.n	4d4a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d36:	9b03      	ldr	r3, [sp, #12]
    4d38:	3301      	adds	r3, #1
    4d3a:	9303      	str	r3, [sp, #12]
    4d3c:	4b28      	ldr	r3, [pc, #160]	; (4de0 <getSelectorConfig+0x114>)
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	7adb      	ldrb	r3, [r3, #11]
    4d42:	461a      	mov	r2, r3
    4d44:	9b03      	ldr	r3, [sp, #12]
    4d46:	4293      	cmp	r3, r2
    4d48:	d3e4      	bcc.n	4d14 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d4a:	9b05      	ldr	r3, [sp, #20]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d140      	bne.n	4dd2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d50:	9b04      	ldr	r3, [sp, #16]
    4d52:	00db      	lsls	r3, r3, #3
    4d54:	4a23      	ldr	r2, [pc, #140]	; (4de4 <getSelectorConfig+0x118>)
    4d56:	4413      	add	r3, r2
    4d58:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d5a:	4922      	ldr	r1, [pc, #136]	; (4de4 <getSelectorConfig+0x118>)
    4d5c:	9b04      	ldr	r3, [sp, #16]
    4d5e:	9a01      	ldr	r2, [sp, #4]
    4d60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d64:	9b01      	ldr	r3, [sp, #4]
    4d66:	2b1b      	cmp	r3, #27
    4d68:	d025      	beq.n	4db6 <getSelectorConfig+0xea>
    4d6a:	9b01      	ldr	r3, [sp, #4]
    4d6c:	2b1b      	cmp	r3, #27
    4d6e:	d832      	bhi.n	4dd6 <getSelectorConfig+0x10a>
    4d70:	9b01      	ldr	r3, [sp, #4]
    4d72:	2b19      	cmp	r3, #25
    4d74:	d003      	beq.n	4d7e <getSelectorConfig+0xb2>
    4d76:	9b01      	ldr	r3, [sp, #4]
    4d78:	2b1a      	cmp	r3, #26
    4d7a:	d00e      	beq.n	4d9a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d7c:	e02b      	b.n	4dd6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d7e:	4b1a      	ldr	r3, [pc, #104]	; (4de8 <getSelectorConfig+0x11c>)
    4d80:	695b      	ldr	r3, [r3, #20]
    4d82:	0e1b      	lsrs	r3, r3, #24
    4d84:	f003 030f 	and.w	r3, r3, #15
    4d88:	4a18      	ldr	r2, [pc, #96]	; (4dec <getSelectorConfig+0x120>)
    4d8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d8e:	4915      	ldr	r1, [pc, #84]	; (4de4 <getSelectorConfig+0x118>)
    4d90:	9b04      	ldr	r3, [sp, #16]
    4d92:	00db      	lsls	r3, r3, #3
    4d94:	440b      	add	r3, r1
    4d96:	605a      	str	r2, [r3, #4]
                break;
    4d98:	e01e      	b.n	4dd8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d9a:	4b13      	ldr	r3, [pc, #76]	; (4de8 <getSelectorConfig+0x11c>)
    4d9c:	699b      	ldr	r3, [r3, #24]
    4d9e:	0e1b      	lsrs	r3, r3, #24
    4da0:	f003 030f 	and.w	r3, r3, #15
    4da4:	4a11      	ldr	r2, [pc, #68]	; (4dec <getSelectorConfig+0x120>)
    4da6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4daa:	490e      	ldr	r1, [pc, #56]	; (4de4 <getSelectorConfig+0x118>)
    4dac:	9b04      	ldr	r3, [sp, #16]
    4dae:	00db      	lsls	r3, r3, #3
    4db0:	440b      	add	r3, r1
    4db2:	605a      	str	r2, [r3, #4]
                break;
    4db4:	e010      	b.n	4dd8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4db6:	4b0c      	ldr	r3, [pc, #48]	; (4de8 <getSelectorConfig+0x11c>)
    4db8:	69db      	ldr	r3, [r3, #28]
    4dba:	0e1b      	lsrs	r3, r3, #24
    4dbc:	f003 030f 	and.w	r3, r3, #15
    4dc0:	4a0a      	ldr	r2, [pc, #40]	; (4dec <getSelectorConfig+0x120>)
    4dc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dc6:	4907      	ldr	r1, [pc, #28]	; (4de4 <getSelectorConfig+0x118>)
    4dc8:	9b04      	ldr	r3, [sp, #16]
    4dca:	00db      	lsls	r3, r3, #3
    4dcc:	440b      	add	r3, r1
    4dce:	605a      	str	r2, [r3, #4]
                break;
    4dd0:	e002      	b.n	4dd8 <getSelectorConfig+0x10c>
        }
    }
    4dd2:	bf00      	nop
    4dd4:	e000      	b.n	4dd8 <getSelectorConfig+0x10c>
                break;
    4dd6:	bf00      	nop

    return ReturnValue;
    4dd8:	9b05      	ldr	r3, [sp, #20]
}
    4dda:	4618      	mov	r0, r3
    4ddc:	b006      	add	sp, #24
    4dde:	4770      	bx	lr
    4de0:	1fff8bb4 	.word	0x1fff8bb4
    4de4:	1fff8c68 	.word	0x1fff8c68
    4de8:	40064000 	.word	0x40064000
    4dec:	00010f00 	.word	0x00010f00

00004df0 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4df0:	b086      	sub	sp, #24
    4df2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4df4:	2300      	movs	r3, #0
    4df6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4df8:	2300      	movs	r3, #0
    4dfa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4dfc:	9b01      	ldr	r3, [sp, #4]
    4dfe:	2b1f      	cmp	r3, #31
    4e00:	d00f      	beq.n	4e22 <getCoreDividerConfig+0x32>
    4e02:	9b01      	ldr	r3, [sp, #4]
    4e04:	2b1f      	cmp	r3, #31
    4e06:	d80f      	bhi.n	4e28 <getCoreDividerConfig+0x38>
    4e08:	9b01      	ldr	r3, [sp, #4]
    4e0a:	2b1d      	cmp	r3, #29
    4e0c:	d003      	beq.n	4e16 <getCoreDividerConfig+0x26>
    4e0e:	9b01      	ldr	r3, [sp, #4]
    4e10:	2b1e      	cmp	r3, #30
    4e12:	d003      	beq.n	4e1c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e14:	e008      	b.n	4e28 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e16:	2300      	movs	r3, #0
    4e18:	9304      	str	r3, [sp, #16]
            break;
    4e1a:	e006      	b.n	4e2a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e1c:	2301      	movs	r3, #1
    4e1e:	9304      	str	r3, [sp, #16]
            break;
    4e20:	e003      	b.n	4e2a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e22:	2302      	movs	r3, #2
    4e24:	9304      	str	r3, [sp, #16]
            break;
    4e26:	e000      	b.n	4e2a <getCoreDividerConfig+0x3a>
                break;
    4e28:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e2a:	4b41      	ldr	r3, [pc, #260]	; (4f30 <getCoreDividerConfig+0x140>)
    4e2c:	681b      	ldr	r3, [r3, #0]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d026      	beq.n	4e80 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e32:	2300      	movs	r3, #0
    4e34:	9303      	str	r3, [sp, #12]
    4e36:	e01c      	b.n	4e72 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e38:	4b3d      	ldr	r3, [pc, #244]	; (4f30 <getCoreDividerConfig+0x140>)
    4e3a:	6819      	ldr	r1, [r3, #0]
    4e3c:	9a03      	ldr	r2, [sp, #12]
    4e3e:	4613      	mov	r3, r2
    4e40:	005b      	lsls	r3, r3, #1
    4e42:	4413      	add	r3, r2
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	440b      	add	r3, r1
    4e48:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	9a01      	ldr	r2, [sp, #4]
    4e50:	429a      	cmp	r2, r3
    4e52:	d10b      	bne.n	4e6c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e54:	4b36      	ldr	r3, [pc, #216]	; (4f30 <getCoreDividerConfig+0x140>)
    4e56:	6819      	ldr	r1, [r3, #0]
    4e58:	9a03      	ldr	r2, [sp, #12]
    4e5a:	4613      	mov	r3, r2
    4e5c:	005b      	lsls	r3, r3, #1
    4e5e:	4413      	add	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e66:	440b      	add	r3, r1
    4e68:	9305      	str	r3, [sp, #20]
                break;
    4e6a:	e009      	b.n	4e80 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e6c:	9b03      	ldr	r3, [sp, #12]
    4e6e:	3301      	adds	r3, #1
    4e70:	9303      	str	r3, [sp, #12]
    4e72:	4b2f      	ldr	r3, [pc, #188]	; (4f30 <getCoreDividerConfig+0x140>)
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	7b1b      	ldrb	r3, [r3, #12]
    4e78:	461a      	mov	r2, r3
    4e7a:	9b03      	ldr	r3, [sp, #12]
    4e7c:	4293      	cmp	r3, r2
    4e7e:	d3db      	bcc.n	4e38 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e80:	9b05      	ldr	r3, [sp, #20]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d14d      	bne.n	4f22 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4e86:	9a04      	ldr	r2, [sp, #16]
    4e88:	4613      	mov	r3, r2
    4e8a:	005b      	lsls	r3, r3, #1
    4e8c:	4413      	add	r3, r2
    4e8e:	009b      	lsls	r3, r3, #2
    4e90:	4a28      	ldr	r2, [pc, #160]	; (4f34 <getCoreDividerConfig+0x144>)
    4e92:	4413      	add	r3, r2
    4e94:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4e96:	4927      	ldr	r1, [pc, #156]	; (4f34 <getCoreDividerConfig+0x144>)
    4e98:	9a04      	ldr	r2, [sp, #16]
    4e9a:	4613      	mov	r3, r2
    4e9c:	005b      	lsls	r3, r3, #1
    4e9e:	4413      	add	r3, r2
    4ea0:	009b      	lsls	r3, r3, #2
    4ea2:	440b      	add	r3, r1
    4ea4:	9a01      	ldr	r2, [sp, #4]
    4ea6:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	2b1f      	cmp	r3, #31
    4eac:	d029      	beq.n	4f02 <getCoreDividerConfig+0x112>
    4eae:	9b01      	ldr	r3, [sp, #4]
    4eb0:	2b1f      	cmp	r3, #31
    4eb2:	d838      	bhi.n	4f26 <getCoreDividerConfig+0x136>
    4eb4:	9b01      	ldr	r3, [sp, #4]
    4eb6:	2b1d      	cmp	r3, #29
    4eb8:	d003      	beq.n	4ec2 <getCoreDividerConfig+0xd2>
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	2b1e      	cmp	r3, #30
    4ebe:	d010      	beq.n	4ee2 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ec0:	e031      	b.n	4f26 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4ec2:	4b1d      	ldr	r3, [pc, #116]	; (4f38 <getCoreDividerConfig+0x148>)
    4ec4:	695b      	ldr	r3, [r3, #20]
    4ec6:	0c1b      	lsrs	r3, r3, #16
    4ec8:	f003 030f 	and.w	r3, r3, #15
    4ecc:	1c59      	adds	r1, r3, #1
    4ece:	4819      	ldr	r0, [pc, #100]	; (4f34 <getCoreDividerConfig+0x144>)
    4ed0:	9a04      	ldr	r2, [sp, #16]
    4ed2:	4613      	mov	r3, r2
    4ed4:	005b      	lsls	r3, r3, #1
    4ed6:	4413      	add	r3, r2
    4ed8:	009b      	lsls	r3, r3, #2
    4eda:	4403      	add	r3, r0
    4edc:	3304      	adds	r3, #4
    4ede:	6019      	str	r1, [r3, #0]
                break;
    4ee0:	e022      	b.n	4f28 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4ee2:	4b15      	ldr	r3, [pc, #84]	; (4f38 <getCoreDividerConfig+0x148>)
    4ee4:	699b      	ldr	r3, [r3, #24]
    4ee6:	0c1b      	lsrs	r3, r3, #16
    4ee8:	f003 030f 	and.w	r3, r3, #15
    4eec:	1c59      	adds	r1, r3, #1
    4eee:	4811      	ldr	r0, [pc, #68]	; (4f34 <getCoreDividerConfig+0x144>)
    4ef0:	9a04      	ldr	r2, [sp, #16]
    4ef2:	4613      	mov	r3, r2
    4ef4:	005b      	lsls	r3, r3, #1
    4ef6:	4413      	add	r3, r2
    4ef8:	009b      	lsls	r3, r3, #2
    4efa:	4403      	add	r3, r0
    4efc:	3304      	adds	r3, #4
    4efe:	6019      	str	r1, [r3, #0]
                break;
    4f00:	e012      	b.n	4f28 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f02:	4b0d      	ldr	r3, [pc, #52]	; (4f38 <getCoreDividerConfig+0x148>)
    4f04:	69db      	ldr	r3, [r3, #28]
    4f06:	0c1b      	lsrs	r3, r3, #16
    4f08:	f003 030f 	and.w	r3, r3, #15
    4f0c:	1c59      	adds	r1, r3, #1
    4f0e:	4809      	ldr	r0, [pc, #36]	; (4f34 <getCoreDividerConfig+0x144>)
    4f10:	9a04      	ldr	r2, [sp, #16]
    4f12:	4613      	mov	r3, r2
    4f14:	005b      	lsls	r3, r3, #1
    4f16:	4413      	add	r3, r2
    4f18:	009b      	lsls	r3, r3, #2
    4f1a:	4403      	add	r3, r0
    4f1c:	3304      	adds	r3, #4
    4f1e:	6019      	str	r1, [r3, #0]
                break;
    4f20:	e002      	b.n	4f28 <getCoreDividerConfig+0x138>
        }
    }
    4f22:	bf00      	nop
    4f24:	e000      	b.n	4f28 <getCoreDividerConfig+0x138>
                break;
    4f26:	bf00      	nop

    return ReturnValue;
    4f28:	9b05      	ldr	r3, [sp, #20]
}
    4f2a:	4618      	mov	r0, r3
    4f2c:	b006      	add	sp, #24
    4f2e:	4770      	bx	lr
    4f30:	1fff8bb4 	.word	0x1fff8bb4
    4f34:	1fff8c80 	.word	0x1fff8c80
    4f38:	40064000 	.word	0x40064000

00004f3c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f3c:	b086      	sub	sp, #24
    4f3e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f40:	2300      	movs	r3, #0
    4f42:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f44:	2300      	movs	r3, #0
    4f46:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f48:	9b01      	ldr	r3, [sp, #4]
    4f4a:	2b23      	cmp	r3, #35	; 0x23
    4f4c:	d00f      	beq.n	4f6e <getBusDividerConfig+0x32>
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	2b23      	cmp	r3, #35	; 0x23
    4f52:	d80f      	bhi.n	4f74 <getBusDividerConfig+0x38>
    4f54:	9b01      	ldr	r3, [sp, #4]
    4f56:	2b21      	cmp	r3, #33	; 0x21
    4f58:	d003      	beq.n	4f62 <getBusDividerConfig+0x26>
    4f5a:	9b01      	ldr	r3, [sp, #4]
    4f5c:	2b22      	cmp	r3, #34	; 0x22
    4f5e:	d003      	beq.n	4f68 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f60:	e008      	b.n	4f74 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f62:	2300      	movs	r3, #0
    4f64:	9304      	str	r3, [sp, #16]
            break;
    4f66:	e006      	b.n	4f76 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f68:	2301      	movs	r3, #1
    4f6a:	9304      	str	r3, [sp, #16]
            break;
    4f6c:	e003      	b.n	4f76 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f6e:	2302      	movs	r3, #2
    4f70:	9304      	str	r3, [sp, #16]
            break;
    4f72:	e000      	b.n	4f76 <getBusDividerConfig+0x3a>
                break;
    4f74:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f76:	4b41      	ldr	r3, [pc, #260]	; (507c <getBusDividerConfig+0x140>)
    4f78:	681b      	ldr	r3, [r3, #0]
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d026      	beq.n	4fcc <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f7e:	2300      	movs	r3, #0
    4f80:	9303      	str	r3, [sp, #12]
    4f82:	e01c      	b.n	4fbe <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f84:	4b3d      	ldr	r3, [pc, #244]	; (507c <getBusDividerConfig+0x140>)
    4f86:	6819      	ldr	r1, [r3, #0]
    4f88:	9a03      	ldr	r2, [sp, #12]
    4f8a:	4613      	mov	r3, r2
    4f8c:	005b      	lsls	r3, r3, #1
    4f8e:	4413      	add	r3, r2
    4f90:	009b      	lsls	r3, r3, #2
    4f92:	440b      	add	r3, r1
    4f94:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	9a01      	ldr	r2, [sp, #4]
    4f9c:	429a      	cmp	r2, r3
    4f9e:	d10b      	bne.n	4fb8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fa0:	4b36      	ldr	r3, [pc, #216]	; (507c <getBusDividerConfig+0x140>)
    4fa2:	6819      	ldr	r1, [r3, #0]
    4fa4:	9a03      	ldr	r2, [sp, #12]
    4fa6:	4613      	mov	r3, r2
    4fa8:	005b      	lsls	r3, r3, #1
    4faa:	4413      	add	r3, r2
    4fac:	009b      	lsls	r3, r3, #2
    4fae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fb2:	440b      	add	r3, r1
    4fb4:	9305      	str	r3, [sp, #20]
                break;
    4fb6:	e009      	b.n	4fcc <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fb8:	9b03      	ldr	r3, [sp, #12]
    4fba:	3301      	adds	r3, #1
    4fbc:	9303      	str	r3, [sp, #12]
    4fbe:	4b2f      	ldr	r3, [pc, #188]	; (507c <getBusDividerConfig+0x140>)
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	7b1b      	ldrb	r3, [r3, #12]
    4fc4:	461a      	mov	r2, r3
    4fc6:	9b03      	ldr	r3, [sp, #12]
    4fc8:	4293      	cmp	r3, r2
    4fca:	d3db      	bcc.n	4f84 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fcc:	9b05      	ldr	r3, [sp, #20]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d14d      	bne.n	506e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4fd2:	9a04      	ldr	r2, [sp, #16]
    4fd4:	4613      	mov	r3, r2
    4fd6:	005b      	lsls	r3, r3, #1
    4fd8:	4413      	add	r3, r2
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	4a28      	ldr	r2, [pc, #160]	; (5080 <getBusDividerConfig+0x144>)
    4fde:	4413      	add	r3, r2
    4fe0:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4fe2:	4927      	ldr	r1, [pc, #156]	; (5080 <getBusDividerConfig+0x144>)
    4fe4:	9a04      	ldr	r2, [sp, #16]
    4fe6:	4613      	mov	r3, r2
    4fe8:	005b      	lsls	r3, r3, #1
    4fea:	4413      	add	r3, r2
    4fec:	009b      	lsls	r3, r3, #2
    4fee:	440b      	add	r3, r1
    4ff0:	9a01      	ldr	r2, [sp, #4]
    4ff2:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ff4:	9b01      	ldr	r3, [sp, #4]
    4ff6:	2b23      	cmp	r3, #35	; 0x23
    4ff8:	d029      	beq.n	504e <getBusDividerConfig+0x112>
    4ffa:	9b01      	ldr	r3, [sp, #4]
    4ffc:	2b23      	cmp	r3, #35	; 0x23
    4ffe:	d838      	bhi.n	5072 <getBusDividerConfig+0x136>
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	2b21      	cmp	r3, #33	; 0x21
    5004:	d003      	beq.n	500e <getBusDividerConfig+0xd2>
    5006:	9b01      	ldr	r3, [sp, #4]
    5008:	2b22      	cmp	r3, #34	; 0x22
    500a:	d010      	beq.n	502e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    500c:	e031      	b.n	5072 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    500e:	4b1d      	ldr	r3, [pc, #116]	; (5084 <getBusDividerConfig+0x148>)
    5010:	695b      	ldr	r3, [r3, #20]
    5012:	091b      	lsrs	r3, r3, #4
    5014:	f003 030f 	and.w	r3, r3, #15
    5018:	1c59      	adds	r1, r3, #1
    501a:	4819      	ldr	r0, [pc, #100]	; (5080 <getBusDividerConfig+0x144>)
    501c:	9a04      	ldr	r2, [sp, #16]
    501e:	4613      	mov	r3, r2
    5020:	005b      	lsls	r3, r3, #1
    5022:	4413      	add	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	4403      	add	r3, r0
    5028:	3304      	adds	r3, #4
    502a:	6019      	str	r1, [r3, #0]
                break;
    502c:	e022      	b.n	5074 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    502e:	4b15      	ldr	r3, [pc, #84]	; (5084 <getBusDividerConfig+0x148>)
    5030:	699b      	ldr	r3, [r3, #24]
    5032:	091b      	lsrs	r3, r3, #4
    5034:	f003 030f 	and.w	r3, r3, #15
    5038:	1c59      	adds	r1, r3, #1
    503a:	4811      	ldr	r0, [pc, #68]	; (5080 <getBusDividerConfig+0x144>)
    503c:	9a04      	ldr	r2, [sp, #16]
    503e:	4613      	mov	r3, r2
    5040:	005b      	lsls	r3, r3, #1
    5042:	4413      	add	r3, r2
    5044:	009b      	lsls	r3, r3, #2
    5046:	4403      	add	r3, r0
    5048:	3304      	adds	r3, #4
    504a:	6019      	str	r1, [r3, #0]
                break;
    504c:	e012      	b.n	5074 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    504e:	4b0d      	ldr	r3, [pc, #52]	; (5084 <getBusDividerConfig+0x148>)
    5050:	69db      	ldr	r3, [r3, #28]
    5052:	091b      	lsrs	r3, r3, #4
    5054:	f003 030f 	and.w	r3, r3, #15
    5058:	1c59      	adds	r1, r3, #1
    505a:	4809      	ldr	r0, [pc, #36]	; (5080 <getBusDividerConfig+0x144>)
    505c:	9a04      	ldr	r2, [sp, #16]
    505e:	4613      	mov	r3, r2
    5060:	005b      	lsls	r3, r3, #1
    5062:	4413      	add	r3, r2
    5064:	009b      	lsls	r3, r3, #2
    5066:	4403      	add	r3, r0
    5068:	3304      	adds	r3, #4
    506a:	6019      	str	r1, [r3, #0]
                break;
    506c:	e002      	b.n	5074 <getBusDividerConfig+0x138>
        }
    }
    506e:	bf00      	nop
    5070:	e000      	b.n	5074 <getBusDividerConfig+0x138>
                break;
    5072:	bf00      	nop

    return ReturnValue;
    5074:	9b05      	ldr	r3, [sp, #20]
}
    5076:	4618      	mov	r0, r3
    5078:	b006      	add	sp, #24
    507a:	4770      	bx	lr
    507c:	1fff8bb4 	.word	0x1fff8bb4
    5080:	1fff8ca4 	.word	0x1fff8ca4
    5084:	40064000 	.word	0x40064000

00005088 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5088:	b086      	sub	sp, #24
    508a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    508c:	2300      	movs	r3, #0
    508e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5090:	2300      	movs	r3, #0
    5092:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5094:	9b01      	ldr	r3, [sp, #4]
    5096:	2b27      	cmp	r3, #39	; 0x27
    5098:	d00f      	beq.n	50ba <getSlowDividerConfig+0x32>
    509a:	9b01      	ldr	r3, [sp, #4]
    509c:	2b27      	cmp	r3, #39	; 0x27
    509e:	d80f      	bhi.n	50c0 <getSlowDividerConfig+0x38>
    50a0:	9b01      	ldr	r3, [sp, #4]
    50a2:	2b25      	cmp	r3, #37	; 0x25
    50a4:	d003      	beq.n	50ae <getSlowDividerConfig+0x26>
    50a6:	9b01      	ldr	r3, [sp, #4]
    50a8:	2b26      	cmp	r3, #38	; 0x26
    50aa:	d003      	beq.n	50b4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50ac:	e008      	b.n	50c0 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50ae:	2300      	movs	r3, #0
    50b0:	9304      	str	r3, [sp, #16]
            break;
    50b2:	e006      	b.n	50c2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50b4:	2301      	movs	r3, #1
    50b6:	9304      	str	r3, [sp, #16]
            break;
    50b8:	e003      	b.n	50c2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50ba:	2302      	movs	r3, #2
    50bc:	9304      	str	r3, [sp, #16]
            break;
    50be:	e000      	b.n	50c2 <getSlowDividerConfig+0x3a>
                break;
    50c0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50c2:	4b40      	ldr	r3, [pc, #256]	; (51c4 <getSlowDividerConfig+0x13c>)
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	2b00      	cmp	r3, #0
    50c8:	d026      	beq.n	5118 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50ca:	2300      	movs	r3, #0
    50cc:	9303      	str	r3, [sp, #12]
    50ce:	e01c      	b.n	510a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50d0:	4b3c      	ldr	r3, [pc, #240]	; (51c4 <getSlowDividerConfig+0x13c>)
    50d2:	6819      	ldr	r1, [r3, #0]
    50d4:	9a03      	ldr	r2, [sp, #12]
    50d6:	4613      	mov	r3, r2
    50d8:	005b      	lsls	r3, r3, #1
    50da:	4413      	add	r3, r2
    50dc:	009b      	lsls	r3, r3, #2
    50de:	440b      	add	r3, r1
    50e0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	9a01      	ldr	r2, [sp, #4]
    50e8:	429a      	cmp	r2, r3
    50ea:	d10b      	bne.n	5104 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    50ec:	4b35      	ldr	r3, [pc, #212]	; (51c4 <getSlowDividerConfig+0x13c>)
    50ee:	6819      	ldr	r1, [r3, #0]
    50f0:	9a03      	ldr	r2, [sp, #12]
    50f2:	4613      	mov	r3, r2
    50f4:	005b      	lsls	r3, r3, #1
    50f6:	4413      	add	r3, r2
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50fe:	440b      	add	r3, r1
    5100:	9305      	str	r3, [sp, #20]
                break;
    5102:	e009      	b.n	5118 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5104:	9b03      	ldr	r3, [sp, #12]
    5106:	3301      	adds	r3, #1
    5108:	9303      	str	r3, [sp, #12]
    510a:	4b2e      	ldr	r3, [pc, #184]	; (51c4 <getSlowDividerConfig+0x13c>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	7b1b      	ldrb	r3, [r3, #12]
    5110:	461a      	mov	r2, r3
    5112:	9b03      	ldr	r3, [sp, #12]
    5114:	4293      	cmp	r3, r2
    5116:	d3db      	bcc.n	50d0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5118:	9b05      	ldr	r3, [sp, #20]
    511a:	2b00      	cmp	r3, #0
    511c:	d14a      	bne.n	51b4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    511e:	9a04      	ldr	r2, [sp, #16]
    5120:	4613      	mov	r3, r2
    5122:	005b      	lsls	r3, r3, #1
    5124:	4413      	add	r3, r2
    5126:	009b      	lsls	r3, r3, #2
    5128:	4a27      	ldr	r2, [pc, #156]	; (51c8 <getSlowDividerConfig+0x140>)
    512a:	4413      	add	r3, r2
    512c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    512e:	4926      	ldr	r1, [pc, #152]	; (51c8 <getSlowDividerConfig+0x140>)
    5130:	9a04      	ldr	r2, [sp, #16]
    5132:	4613      	mov	r3, r2
    5134:	005b      	lsls	r3, r3, #1
    5136:	4413      	add	r3, r2
    5138:	009b      	lsls	r3, r3, #2
    513a:	440b      	add	r3, r1
    513c:	9a01      	ldr	r2, [sp, #4]
    513e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5140:	9b01      	ldr	r3, [sp, #4]
    5142:	2b27      	cmp	r3, #39	; 0x27
    5144:	d027      	beq.n	5196 <getSlowDividerConfig+0x10e>
    5146:	9b01      	ldr	r3, [sp, #4]
    5148:	2b27      	cmp	r3, #39	; 0x27
    514a:	d835      	bhi.n	51b8 <getSlowDividerConfig+0x130>
    514c:	9b01      	ldr	r3, [sp, #4]
    514e:	2b25      	cmp	r3, #37	; 0x25
    5150:	d003      	beq.n	515a <getSlowDividerConfig+0xd2>
    5152:	9b01      	ldr	r3, [sp, #4]
    5154:	2b26      	cmp	r3, #38	; 0x26
    5156:	d00f      	beq.n	5178 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5158:	e02e      	b.n	51b8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    515a:	4b1c      	ldr	r3, [pc, #112]	; (51cc <getSlowDividerConfig+0x144>)
    515c:	695b      	ldr	r3, [r3, #20]
    515e:	f003 030f 	and.w	r3, r3, #15
    5162:	1c59      	adds	r1, r3, #1
    5164:	4818      	ldr	r0, [pc, #96]	; (51c8 <getSlowDividerConfig+0x140>)
    5166:	9a04      	ldr	r2, [sp, #16]
    5168:	4613      	mov	r3, r2
    516a:	005b      	lsls	r3, r3, #1
    516c:	4413      	add	r3, r2
    516e:	009b      	lsls	r3, r3, #2
    5170:	4403      	add	r3, r0
    5172:	3304      	adds	r3, #4
    5174:	6019      	str	r1, [r3, #0]
                break;
    5176:	e020      	b.n	51ba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5178:	4b14      	ldr	r3, [pc, #80]	; (51cc <getSlowDividerConfig+0x144>)
    517a:	699b      	ldr	r3, [r3, #24]
    517c:	f003 030f 	and.w	r3, r3, #15
    5180:	1c59      	adds	r1, r3, #1
    5182:	4811      	ldr	r0, [pc, #68]	; (51c8 <getSlowDividerConfig+0x140>)
    5184:	9a04      	ldr	r2, [sp, #16]
    5186:	4613      	mov	r3, r2
    5188:	005b      	lsls	r3, r3, #1
    518a:	4413      	add	r3, r2
    518c:	009b      	lsls	r3, r3, #2
    518e:	4403      	add	r3, r0
    5190:	3304      	adds	r3, #4
    5192:	6019      	str	r1, [r3, #0]
                break;
    5194:	e011      	b.n	51ba <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5196:	4b0d      	ldr	r3, [pc, #52]	; (51cc <getSlowDividerConfig+0x144>)
    5198:	69db      	ldr	r3, [r3, #28]
    519a:	f003 030f 	and.w	r3, r3, #15
    519e:	1c59      	adds	r1, r3, #1
    51a0:	4809      	ldr	r0, [pc, #36]	; (51c8 <getSlowDividerConfig+0x140>)
    51a2:	9a04      	ldr	r2, [sp, #16]
    51a4:	4613      	mov	r3, r2
    51a6:	005b      	lsls	r3, r3, #1
    51a8:	4413      	add	r3, r2
    51aa:	009b      	lsls	r3, r3, #2
    51ac:	4403      	add	r3, r0
    51ae:	3304      	adds	r3, #4
    51b0:	6019      	str	r1, [r3, #0]
                break;
    51b2:	e002      	b.n	51ba <getSlowDividerConfig+0x132>
        }
    }
    51b4:	bf00      	nop
    51b6:	e000      	b.n	51ba <getSlowDividerConfig+0x132>
                break;
    51b8:	bf00      	nop

    return ReturnValue;
    51ba:	9b05      	ldr	r3, [sp, #20]
}
    51bc:	4618      	mov	r0, r3
    51be:	b006      	add	sp, #24
    51c0:	4770      	bx	lr
    51c2:	bf00      	nop
    51c4:	1fff8bb4 	.word	0x1fff8bb4
    51c8:	1fff8cc8 	.word	0x1fff8cc8
    51cc:	40064000 	.word	0x40064000

000051d0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    51d0:	b500      	push	{lr}
    51d2:	b083      	sub	sp, #12
    51d4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    51d6:	4b64      	ldr	r3, [pc, #400]	; (5368 <Clock_Ip_ClockInitializeObjects+0x198>)
    51d8:	781b      	ldrb	r3, [r3, #0]
    51da:	f083 0301 	eor.w	r3, r3, #1
    51de:	b2db      	uxtb	r3, r3
    51e0:	2b00      	cmp	r3, #0
    51e2:	d05b      	beq.n	529c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    51e4:	4b60      	ldr	r3, [pc, #384]	; (5368 <Clock_Ip_ClockInitializeObjects+0x198>)
    51e6:	2201      	movs	r2, #1
    51e8:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    51ea:	4b60      	ldr	r3, [pc, #384]	; (536c <Clock_Ip_ClockInitializeObjects+0x19c>)
    51ec:	785b      	ldrb	r3, [r3, #1]
    51ee:	461a      	mov	r2, r3
    51f0:	4613      	mov	r3, r2
    51f2:	009b      	lsls	r3, r3, #2
    51f4:	4413      	add	r3, r2
    51f6:	009b      	lsls	r3, r3, #2
    51f8:	4a5d      	ldr	r2, [pc, #372]	; (5370 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    51fa:	4413      	add	r3, r2
    51fc:	4a5d      	ldr	r2, [pc, #372]	; (5374 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    51fe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5200:	4b5d      	ldr	r3, [pc, #372]	; (5378 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5202:	785b      	ldrb	r3, [r3, #1]
    5204:	461a      	mov	r2, r3
    5206:	4613      	mov	r3, r2
    5208:	009b      	lsls	r3, r3, #2
    520a:	4413      	add	r3, r2
    520c:	009b      	lsls	r3, r3, #2
    520e:	4a5b      	ldr	r2, [pc, #364]	; (537c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5210:	4413      	add	r3, r2
    5212:	4a5b      	ldr	r2, [pc, #364]	; (5380 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5214:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5216:	4b5b      	ldr	r3, [pc, #364]	; (5384 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5218:	791b      	ldrb	r3, [r3, #4]
    521a:	461a      	mov	r2, r3
    521c:	4613      	mov	r3, r2
    521e:	005b      	lsls	r3, r3, #1
    5220:	4413      	add	r3, r2
    5222:	009b      	lsls	r3, r3, #2
    5224:	4a58      	ldr	r2, [pc, #352]	; (5388 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5226:	4413      	add	r3, r2
    5228:	4a58      	ldr	r2, [pc, #352]	; (538c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    522a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    522c:	4b58      	ldr	r3, [pc, #352]	; (5390 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    522e:	795b      	ldrb	r3, [r3, #5]
    5230:	00db      	lsls	r3, r3, #3
    5232:	4a58      	ldr	r2, [pc, #352]	; (5394 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5234:	4413      	add	r3, r2
    5236:	4a58      	ldr	r2, [pc, #352]	; (5398 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5238:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    523a:	4b55      	ldr	r3, [pc, #340]	; (5390 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    523c:	79db      	ldrb	r3, [r3, #7]
    523e:	00db      	lsls	r3, r3, #3
    5240:	4a54      	ldr	r2, [pc, #336]	; (5394 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5242:	4413      	add	r3, r2
    5244:	4a55      	ldr	r2, [pc, #340]	; (539c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5246:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5248:	4b55      	ldr	r3, [pc, #340]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    524a:	799b      	ldrb	r3, [r3, #6]
    524c:	009b      	lsls	r3, r3, #2
    524e:	4a55      	ldr	r2, [pc, #340]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5250:	4413      	add	r3, r2
    5252:	4a55      	ldr	r2, [pc, #340]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5254:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5256:	4b52      	ldr	r3, [pc, #328]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5258:	7a1b      	ldrb	r3, [r3, #8]
    525a:	009b      	lsls	r3, r3, #2
    525c:	4a51      	ldr	r2, [pc, #324]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    525e:	4413      	add	r3, r2
    5260:	4a52      	ldr	r2, [pc, #328]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5262:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5264:	4b4e      	ldr	r3, [pc, #312]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5266:	7a5b      	ldrb	r3, [r3, #9]
    5268:	009b      	lsls	r3, r3, #2
    526a:	4a4e      	ldr	r2, [pc, #312]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    526c:	4413      	add	r3, r2
    526e:	4a50      	ldr	r2, [pc, #320]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5270:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5272:	4b4b      	ldr	r3, [pc, #300]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5274:	7adb      	ldrb	r3, [r3, #11]
    5276:	009b      	lsls	r3, r3, #2
    5278:	4a4a      	ldr	r2, [pc, #296]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    527a:	4413      	add	r3, r2
    527c:	4a4d      	ldr	r2, [pc, #308]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    527e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5280:	4b47      	ldr	r3, [pc, #284]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5282:	7b1b      	ldrb	r3, [r3, #12]
    5284:	009b      	lsls	r3, r3, #2
    5286:	4a47      	ldr	r2, [pc, #284]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5288:	4413      	add	r3, r2
    528a:	4a4b      	ldr	r2, [pc, #300]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    528c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    528e:	4b44      	ldr	r3, [pc, #272]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5290:	7b9b      	ldrb	r3, [r3, #14]
    5292:	009b      	lsls	r3, r3, #2
    5294:	4a43      	ldr	r2, [pc, #268]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5296:	4413      	add	r3, r2
    5298:	4a48      	ldr	r2, [pc, #288]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    529a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    529c:	4b48      	ldr	r3, [pc, #288]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    529e:	781b      	ldrb	r3, [r3, #0]
    52a0:	2b00      	cmp	r3, #0
    52a2:	d002      	beq.n	52aa <Clock_Ip_ClockInitializeObjects+0xda>
    52a4:	9b01      	ldr	r3, [sp, #4]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d003      	beq.n	52b2 <Clock_Ip_ClockInitializeObjects+0xe2>
    52aa:	4b46      	ldr	r3, [pc, #280]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52ac:	781b      	ldrb	r3, [r3, #0]
    52ae:	2b00      	cmp	r3, #0
    52b0:	d056      	beq.n	5360 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52b2:	f7ff fc09 	bl	4ac8 <getFircConfig>
    52b6:	4603      	mov	r3, r0
    52b8:	4a43      	ldr	r2, [pc, #268]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    52ba:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    52bc:	f7ff fc60 	bl	4b80 <getSoscConfig>
    52c0:	4603      	mov	r3, r0
    52c2:	4a42      	ldr	r2, [pc, #264]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1fc>)
    52c4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    52c6:	f7ff fca7 	bl	4c18 <getSpllConfig>
    52ca:	4603      	mov	r3, r0
    52cc:	4a40      	ldr	r2, [pc, #256]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x200>)
    52ce:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    52d0:	2019      	movs	r0, #25
    52d2:	f7ff fcfb 	bl	4ccc <getSelectorConfig>
    52d6:	4603      	mov	r3, r0
    52d8:	4a3e      	ldr	r2, [pc, #248]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x204>)
    52da:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    52dc:	201a      	movs	r0, #26
    52de:	f7ff fcf5 	bl	4ccc <getSelectorConfig>
    52e2:	4603      	mov	r3, r0
    52e4:	4a3c      	ldr	r2, [pc, #240]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x208>)
    52e6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    52e8:	201b      	movs	r0, #27
    52ea:	f7ff fcef 	bl	4ccc <getSelectorConfig>
    52ee:	4603      	mov	r3, r0
    52f0:	4a3a      	ldr	r2, [pc, #232]	; (53dc <Clock_Ip_ClockInitializeObjects+0x20c>)
    52f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    52f4:	201d      	movs	r0, #29
    52f6:	f7ff fd7b 	bl	4df0 <getCoreDividerConfig>
    52fa:	4603      	mov	r3, r0
    52fc:	4a38      	ldr	r2, [pc, #224]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x210>)
    52fe:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5300:	201e      	movs	r0, #30
    5302:	f7ff fd75 	bl	4df0 <getCoreDividerConfig>
    5306:	4603      	mov	r3, r0
    5308:	4a36      	ldr	r2, [pc, #216]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x214>)
    530a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    530c:	201f      	movs	r0, #31
    530e:	f7ff fd6f 	bl	4df0 <getCoreDividerConfig>
    5312:	4603      	mov	r3, r0
    5314:	4a34      	ldr	r2, [pc, #208]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x218>)
    5316:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5318:	2021      	movs	r0, #33	; 0x21
    531a:	f7ff fe0f 	bl	4f3c <getBusDividerConfig>
    531e:	4603      	mov	r3, r0
    5320:	4a32      	ldr	r2, [pc, #200]	; (53ec <Clock_Ip_ClockInitializeObjects+0x21c>)
    5322:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5324:	2022      	movs	r0, #34	; 0x22
    5326:	f7ff fe09 	bl	4f3c <getBusDividerConfig>
    532a:	4603      	mov	r3, r0
    532c:	4a30      	ldr	r2, [pc, #192]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x220>)
    532e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5330:	2023      	movs	r0, #35	; 0x23
    5332:	f7ff fe03 	bl	4f3c <getBusDividerConfig>
    5336:	4603      	mov	r3, r0
    5338:	4a2e      	ldr	r2, [pc, #184]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x224>)
    533a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    533c:	2025      	movs	r0, #37	; 0x25
    533e:	f7ff fea3 	bl	5088 <getSlowDividerConfig>
    5342:	4603      	mov	r3, r0
    5344:	4a2c      	ldr	r2, [pc, #176]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x228>)
    5346:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5348:	2026      	movs	r0, #38	; 0x26
    534a:	f7ff fe9d 	bl	5088 <getSlowDividerConfig>
    534e:	4603      	mov	r3, r0
    5350:	4a2a      	ldr	r2, [pc, #168]	; (53fc <Clock_Ip_ClockInitializeObjects+0x22c>)
    5352:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5354:	2027      	movs	r0, #39	; 0x27
    5356:	f7ff fe97 	bl	5088 <getSlowDividerConfig>
    535a:	4603      	mov	r3, r0
    535c:	4a28      	ldr	r2, [pc, #160]	; (5400 <Clock_Ip_ClockInitializeObjects+0x230>)
    535e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5360:	bf00      	nop
    5362:	b003      	add	sp, #12
    5364:	f85d fb04 	ldr.w	pc, [sp], #4
    5368:	1fff8cec 	.word	0x1fff8cec
    536c:	00010830 	.word	0x00010830
    5370:	00010e7c 	.word	0x00010e7c
    5374:	1fff8bb8 	.word	0x1fff8bb8
    5378:	000107f0 	.word	0x000107f0
    537c:	00010dc4 	.word	0x00010dc4
    5380:	1fff8bbc 	.word	0x1fff8bbc
    5384:	00010800 	.word	0x00010800
    5388:	00010e30 	.word	0x00010e30
    538c:	1fff8bc0 	.word	0x1fff8bc0
    5390:	00010840 	.word	0x00010840
    5394:	00010ea8 	.word	0x00010ea8
    5398:	1fff8bc4 	.word	0x1fff8bc4
    539c:	1fff8c00 	.word	0x1fff8c00
    53a0:	000107d0 	.word	0x000107d0
    53a4:	00010d80 	.word	0x00010d80
    53a8:	1fff8bc8 	.word	0x1fff8bc8
    53ac:	1fff8c04 	.word	0x1fff8c04
    53b0:	1fff8bcc 	.word	0x1fff8bcc
    53b4:	1fff8c08 	.word	0x1fff8c08
    53b8:	1fff8bd0 	.word	0x1fff8bd0
    53bc:	1fff8c0c 	.word	0x1fff8c0c
    53c0:	1fff8b19 	.word	0x1fff8b19
    53c4:	1fff8b10 	.word	0x1fff8b10
    53c8:	1fff8bd4 	.word	0x1fff8bd4
    53cc:	1fff8bd8 	.word	0x1fff8bd8
    53d0:	1fff8bdc 	.word	0x1fff8bdc
    53d4:	1fff8be0 	.word	0x1fff8be0
    53d8:	1fff8be4 	.word	0x1fff8be4
    53dc:	1fff8c10 	.word	0x1fff8c10
    53e0:	1fff8be8 	.word	0x1fff8be8
    53e4:	1fff8bec 	.word	0x1fff8bec
    53e8:	1fff8c14 	.word	0x1fff8c14
    53ec:	1fff8bf0 	.word	0x1fff8bf0
    53f0:	1fff8bf4 	.word	0x1fff8bf4
    53f4:	1fff8c18 	.word	0x1fff8c18
    53f8:	1fff8bf8 	.word	0x1fff8bf8
    53fc:	1fff8bfc 	.word	0x1fff8bfc
    5400:	1fff8c1c 	.word	0x1fff8c1c

00005404 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5404:	b500      	push	{lr}
    5406:	b083      	sub	sp, #12
    5408:	9001      	str	r0, [sp, #4]
    540a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    540c:	9b01      	ldr	r3, [sp, #4]
    540e:	2b03      	cmp	r3, #3
    5410:	f000 8090 	beq.w	5534 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5414:	9b01      	ldr	r3, [sp, #4]
    5416:	2b03      	cmp	r3, #3
    5418:	f200 80d3 	bhi.w	55c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    541c:	9b01      	ldr	r3, [sp, #4]
    541e:	2b00      	cmp	r3, #0
    5420:	d040      	beq.n	54a4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5422:	9b01      	ldr	r3, [sp, #4]
    5424:	3b01      	subs	r3, #1
    5426:	2b01      	cmp	r3, #1
    5428:	f200 80cb 	bhi.w	55c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    542c:	9b00      	ldr	r3, [sp, #0]
    542e:	2b00      	cmp	r3, #0
    5430:	f040 80c9 	bne.w	55c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5434:	4b68      	ldr	r3, [pc, #416]	; (55d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5436:	2200      	movs	r2, #0
    5438:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    543a:	4b68      	ldr	r3, [pc, #416]	; (55dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	685b      	ldr	r3, [r3, #4]
    5440:	4a67      	ldr	r2, [pc, #412]	; (55e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5442:	6812      	ldr	r2, [r2, #0]
    5444:	4610      	mov	r0, r2
    5446:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5448:	4b66      	ldr	r3, [pc, #408]	; (55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	4a66      	ldr	r2, [pc, #408]	; (55e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5450:	6812      	ldr	r2, [r2, #0]
    5452:	4610      	mov	r0, r2
    5454:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5456:	4b65      	ldr	r3, [pc, #404]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	681b      	ldr	r3, [r3, #0]
    545c:	4a64      	ldr	r2, [pc, #400]	; (55f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    545e:	6812      	ldr	r2, [r2, #0]
    5460:	4610      	mov	r0, r2
    5462:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5464:	4b63      	ldr	r3, [pc, #396]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	4a63      	ldr	r2, [pc, #396]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    546c:	6812      	ldr	r2, [r2, #0]
    546e:	4610      	mov	r0, r2
    5470:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5472:	4b62      	ldr	r3, [pc, #392]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	691b      	ldr	r3, [r3, #16]
    5478:	4a61      	ldr	r2, [pc, #388]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    547a:	6812      	ldr	r2, [r2, #0]
    547c:	6812      	ldr	r2, [r2, #0]
    547e:	4610      	mov	r0, r2
    5480:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5482:	4b60      	ldr	r3, [pc, #384]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	68db      	ldr	r3, [r3, #12]
    5488:	4a5f      	ldr	r2, [pc, #380]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    548a:	6812      	ldr	r2, [r2, #0]
    548c:	6812      	ldr	r2, [r2, #0]
    548e:	4610      	mov	r0, r2
    5490:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5492:	4b5e      	ldr	r3, [pc, #376]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	689b      	ldr	r3, [r3, #8]
    5498:	4a5d      	ldr	r2, [pc, #372]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    549a:	6812      	ldr	r2, [r2, #0]
    549c:	6812      	ldr	r2, [r2, #0]
    549e:	4610      	mov	r0, r2
    54a0:	4798      	blx	r3
            }
        }
        break;
    54a2:	e090      	b.n	55c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54a4:	9b00      	ldr	r3, [sp, #0]
    54a6:	2b02      	cmp	r3, #2
    54a8:	f040 808f 	bne.w	55ca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54ac:	4b4a      	ldr	r3, [pc, #296]	; (55d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54ae:	2201      	movs	r2, #1
    54b0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54b2:	4b56      	ldr	r3, [pc, #344]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54b4:	681b      	ldr	r3, [r3, #0]
    54b6:	685b      	ldr	r3, [r3, #4]
    54b8:	4a55      	ldr	r2, [pc, #340]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54ba:	6812      	ldr	r2, [r2, #0]
    54bc:	4610      	mov	r0, r2
    54be:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54c0:	4b50      	ldr	r3, [pc, #320]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	691b      	ldr	r3, [r3, #16]
    54c6:	4a50      	ldr	r2, [pc, #320]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54c8:	6812      	ldr	r2, [r2, #0]
    54ca:	4610      	mov	r0, r2
    54cc:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54ce:	4b4d      	ldr	r3, [pc, #308]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	689b      	ldr	r3, [r3, #8]
    54d4:	4a4c      	ldr	r2, [pc, #304]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54d6:	6812      	ldr	r2, [r2, #0]
    54d8:	4610      	mov	r0, r2
    54da:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54dc:	4b47      	ldr	r3, [pc, #284]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	68db      	ldr	r3, [r3, #12]
    54e2:	4a47      	ldr	r2, [pc, #284]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54e4:	6812      	ldr	r2, [r2, #0]
    54e6:	4610      	mov	r0, r2
    54e8:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    54ea:	4b44      	ldr	r3, [pc, #272]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	689b      	ldr	r3, [r3, #8]
    54f0:	4a43      	ldr	r2, [pc, #268]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54f2:	6812      	ldr	r2, [r2, #0]
    54f4:	6812      	ldr	r2, [r2, #0]
    54f6:	4610      	mov	r0, r2
    54f8:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    54fa:	4b38      	ldr	r3, [pc, #224]	; (55dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	685b      	ldr	r3, [r3, #4]
    5500:	4a44      	ldr	r2, [pc, #272]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5502:	6812      	ldr	r2, [r2, #0]
    5504:	4610      	mov	r0, r2
    5506:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5508:	4b36      	ldr	r3, [pc, #216]	; (55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	4a42      	ldr	r2, [pc, #264]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5510:	6812      	ldr	r2, [r2, #0]
    5512:	4610      	mov	r0, r2
    5514:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5516:	4b35      	ldr	r3, [pc, #212]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5518:	681b      	ldr	r3, [r3, #0]
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	4a3f      	ldr	r2, [pc, #252]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    551e:	6812      	ldr	r2, [r2, #0]
    5520:	4610      	mov	r0, r2
    5522:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5524:	4b33      	ldr	r3, [pc, #204]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5526:	681b      	ldr	r3, [r3, #0]
    5528:	681b      	ldr	r3, [r3, #0]
    552a:	4a3d      	ldr	r2, [pc, #244]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    552c:	6812      	ldr	r2, [r2, #0]
    552e:	4610      	mov	r0, r2
    5530:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5532:	e04a      	b.n	55ca <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5534:	9b00      	ldr	r3, [sp, #0]
    5536:	2b02      	cmp	r3, #2
    5538:	d149      	bne.n	55ce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    553a:	4b27      	ldr	r3, [pc, #156]	; (55d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    553c:	2201      	movs	r2, #1
    553e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5540:	4b32      	ldr	r3, [pc, #200]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	685b      	ldr	r3, [r3, #4]
    5546:	4a32      	ldr	r2, [pc, #200]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5548:	6812      	ldr	r2, [r2, #0]
    554a:	4610      	mov	r0, r2
    554c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    554e:	4b2d      	ldr	r3, [pc, #180]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5550:	681b      	ldr	r3, [r3, #0]
    5552:	691b      	ldr	r3, [r3, #16]
    5554:	4a2c      	ldr	r2, [pc, #176]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5556:	6812      	ldr	r2, [r2, #0]
    5558:	4610      	mov	r0, r2
    555a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    555c:	4b29      	ldr	r3, [pc, #164]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	689b      	ldr	r3, [r3, #8]
    5562:	4a29      	ldr	r2, [pc, #164]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5564:	6812      	ldr	r2, [r2, #0]
    5566:	4610      	mov	r0, r2
    5568:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    556a:	4b24      	ldr	r3, [pc, #144]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    556c:	681b      	ldr	r3, [r3, #0]
    556e:	68db      	ldr	r3, [r3, #12]
    5570:	4a23      	ldr	r2, [pc, #140]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5572:	6812      	ldr	r2, [r2, #0]
    5574:	4610      	mov	r0, r2
    5576:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5578:	4b20      	ldr	r3, [pc, #128]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	689b      	ldr	r3, [r3, #8]
    557e:	4a20      	ldr	r2, [pc, #128]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5580:	6812      	ldr	r2, [r2, #0]
    5582:	6812      	ldr	r2, [r2, #0]
    5584:	4610      	mov	r0, r2
    5586:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5588:	4b26      	ldr	r3, [pc, #152]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    558a:	681b      	ldr	r3, [r3, #0]
    558c:	685b      	ldr	r3, [r3, #4]
    558e:	4a26      	ldr	r2, [pc, #152]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5590:	6812      	ldr	r2, [r2, #0]
    5592:	4610      	mov	r0, r2
    5594:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5596:	4b25      	ldr	r3, [pc, #148]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5598:	681b      	ldr	r3, [r3, #0]
    559a:	681b      	ldr	r3, [r3, #0]
    559c:	4a24      	ldr	r2, [pc, #144]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    559e:	6812      	ldr	r2, [r2, #0]
    55a0:	4610      	mov	r0, r2
    55a2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55a4:	4b23      	ldr	r3, [pc, #140]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	4a23      	ldr	r2, [pc, #140]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55ac:	6812      	ldr	r2, [r2, #0]
    55ae:	4610      	mov	r0, r2
    55b0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55b2:	4b22      	ldr	r3, [pc, #136]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	681b      	ldr	r3, [r3, #0]
    55b8:	4a21      	ldr	r2, [pc, #132]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    55ba:	6812      	ldr	r2, [r2, #0]
    55bc:	4610      	mov	r0, r2
    55be:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    55c0:	e005      	b.n	55ce <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    55c2:	bf00      	nop
    55c4:	e004      	b.n	55d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55c6:	bf00      	nop
    55c8:	e002      	b.n	55d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ca:	bf00      	nop
    55cc:	e000      	b.n	55d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ce:	bf00      	nop
    }

}
    55d0:	bf00      	nop
    55d2:	b003      	add	sp, #12
    55d4:	f85d fb04 	ldr.w	pc, [sp], #4
    55d8:	1fff8b19 	.word	0x1fff8b19
    55dc:	1fff8bc4 	.word	0x1fff8bc4
    55e0:	1fff8be4 	.word	0x1fff8be4
    55e4:	1fff8bc8 	.word	0x1fff8bc8
    55e8:	1fff8bec 	.word	0x1fff8bec
    55ec:	1fff8bcc 	.word	0x1fff8bcc
    55f0:	1fff8bf4 	.word	0x1fff8bf4
    55f4:	1fff8bd0 	.word	0x1fff8bd0
    55f8:	1fff8bfc 	.word	0x1fff8bfc
    55fc:	1fff8bb8 	.word	0x1fff8bb8
    5600:	1fff8bdc 	.word	0x1fff8bdc
    5604:	1fff8bbc 	.word	0x1fff8bbc
    5608:	1fff8bd8 	.word	0x1fff8bd8
    560c:	1fff8bc0 	.word	0x1fff8bc0
    5610:	1fff8bd4 	.word	0x1fff8bd4
    5614:	1fff8be0 	.word	0x1fff8be0
    5618:	1fff8be8 	.word	0x1fff8be8
    561c:	1fff8bf0 	.word	0x1fff8bf0
    5620:	1fff8bf8 	.word	0x1fff8bf8
    5624:	1fff8c00 	.word	0x1fff8c00
    5628:	1fff8c10 	.word	0x1fff8c10
    562c:	1fff8c04 	.word	0x1fff8c04
    5630:	1fff8c14 	.word	0x1fff8c14
    5634:	1fff8c08 	.word	0x1fff8c08
    5638:	1fff8c18 	.word	0x1fff8c18
    563c:	1fff8c0c 	.word	0x1fff8c0c
    5640:	1fff8c1c 	.word	0x1fff8c1c

00005644 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5644:	b500      	push	{lr}
    5646:	b083      	sub	sp, #12
    5648:	9001      	str	r0, [sp, #4]
    564a:	9100      	str	r1, [sp, #0]
    switch(Command)
    564c:	9b00      	ldr	r3, [sp, #0]
    564e:	2b04      	cmp	r3, #4
    5650:	d010      	beq.n	5674 <Clock_Ip_Command+0x30>
    5652:	9b00      	ldr	r3, [sp, #0]
    5654:	2b04      	cmp	r3, #4
    5656:	d811      	bhi.n	567c <Clock_Ip_Command+0x38>
    5658:	9b00      	ldr	r3, [sp, #0]
    565a:	2b01      	cmp	r3, #1
    565c:	d006      	beq.n	566c <Clock_Ip_Command+0x28>
    565e:	9b00      	ldr	r3, [sp, #0]
    5660:	2b02      	cmp	r3, #2
    5662:	d10b      	bne.n	567c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5664:	9801      	ldr	r0, [sp, #4]
    5666:	f7ff fdb3 	bl	51d0 <Clock_Ip_ClockInitializeObjects>
            break;
    566a:	e008      	b.n	567e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    566c:	9801      	ldr	r0, [sp, #4]
    566e:	f7ff f9db 	bl	4a28 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5672:	e004      	b.n	567e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5674:	9801      	ldr	r0, [sp, #4]
    5676:	f7ff f8ed 	bl	4854 <DisableSafeClock>
            break;
    567a:	e000      	b.n	567e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    567c:	bf00      	nop
    }
}
    567e:	bf00      	nop
    5680:	b003      	add	sp, #12
    5682:	f85d fb04 	ldr.w	pc, [sp], #4
    5686:	bf00      	nop

00005688 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5688:	b500      	push	{lr}
    568a:	b085      	sub	sp, #20
    568c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    568e:	4a20      	ldr	r2, [pc, #128]	; (5710 <Mcu_Init+0x88>)
    5690:	9b01      	ldr	r3, [sp, #4]
    5692:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5694:	2300      	movs	r3, #0
    5696:	9303      	str	r3, [sp, #12]
    5698:	e010      	b.n	56bc <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    569a:	4b1d      	ldr	r3, [pc, #116]	; (5710 <Mcu_Init+0x88>)
    569c:	681b      	ldr	r3, [r3, #0]
    569e:	6919      	ldr	r1, [r3, #16]
    56a0:	9a03      	ldr	r2, [sp, #12]
    56a2:	4613      	mov	r3, r2
    56a4:	005b      	lsls	r3, r3, #1
    56a6:	4413      	add	r3, r2
    56a8:	009b      	lsls	r3, r3, #2
    56aa:	440b      	add	r3, r1
    56ac:	681b      	ldr	r3, [r3, #0]
    56ae:	9a03      	ldr	r2, [sp, #12]
    56b0:	b2d1      	uxtb	r1, r2
    56b2:	4a18      	ldr	r2, [pc, #96]	; (5714 <Mcu_Init+0x8c>)
    56b4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56b6:	9b03      	ldr	r3, [sp, #12]
    56b8:	3301      	adds	r3, #1
    56ba:	9303      	str	r3, [sp, #12]
    56bc:	4b14      	ldr	r3, [pc, #80]	; (5710 <Mcu_Init+0x88>)
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	689b      	ldr	r3, [r3, #8]
    56c2:	9a03      	ldr	r2, [sp, #12]
    56c4:	429a      	cmp	r2, r3
    56c6:	d3e8      	bcc.n	569a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56c8:	2300      	movs	r3, #0
    56ca:	9303      	str	r3, [sp, #12]
    56cc:	e010      	b.n	56f0 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    56ce:	4b10      	ldr	r3, [pc, #64]	; (5710 <Mcu_Init+0x88>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	6959      	ldr	r1, [r3, #20]
    56d4:	9a03      	ldr	r2, [sp, #12]
    56d6:	4613      	mov	r3, r2
    56d8:	01db      	lsls	r3, r3, #7
    56da:	1a9b      	subs	r3, r3, r2
    56dc:	00db      	lsls	r3, r3, #3
    56de:	440b      	add	r3, r1
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	9a03      	ldr	r2, [sp, #12]
    56e4:	b2d1      	uxtb	r1, r2
    56e6:	4a0c      	ldr	r2, [pc, #48]	; (5718 <Mcu_Init+0x90>)
    56e8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56ea:	9b03      	ldr	r3, [sp, #12]
    56ec:	3301      	adds	r3, #1
    56ee:	9303      	str	r3, [sp, #12]
    56f0:	4b07      	ldr	r3, [pc, #28]	; (5710 <Mcu_Init+0x88>)
    56f2:	681b      	ldr	r3, [r3, #0]
    56f4:	68db      	ldr	r3, [r3, #12]
    56f6:	9a03      	ldr	r2, [sp, #12]
    56f8:	429a      	cmp	r2, r3
    56fa:	d3e8      	bcc.n	56ce <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    56fc:	4b04      	ldr	r3, [pc, #16]	; (5710 <Mcu_Init+0x88>)
    56fe:	681b      	ldr	r3, [r3, #0]
    5700:	699b      	ldr	r3, [r3, #24]
    5702:	4618      	mov	r0, r3
    5704:	f000 f88a 	bl	581c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5708:	bf00      	nop
    570a:	b005      	add	sp, #20
    570c:	f85d fb04 	ldr.w	pc, [sp], #4
    5710:	1fff8cf8 	.word	0x1fff8cf8
    5714:	1fff8cf4 	.word	0x1fff8cf4
    5718:	1fff8cf0 	.word	0x1fff8cf0

0000571c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    571c:	b084      	sub	sp, #16
    571e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5720:	2301      	movs	r3, #1
    5722:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5726:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    572a:	4618      	mov	r0, r3
    572c:	b004      	add	sp, #16
    572e:	4770      	bx	lr

00005730 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5730:	b500      	push	{lr}
    5732:	b085      	sub	sp, #20
    5734:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5736:	4a0e      	ldr	r2, [pc, #56]	; (5770 <Mcu_InitClock+0x40>)
    5738:	9b01      	ldr	r3, [sp, #4]
    573a:	4413      	add	r3, r2
    573c:	781b      	ldrb	r3, [r3, #0]
    573e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5742:	4b0c      	ldr	r3, [pc, #48]	; (5774 <Mcu_InitClock+0x44>)
    5744:	681b      	ldr	r3, [r3, #0]
    5746:	6959      	ldr	r1, [r3, #20]
    5748:	f89d 200f 	ldrb.w	r2, [sp, #15]
    574c:	4613      	mov	r3, r2
    574e:	01db      	lsls	r3, r3, #7
    5750:	1a9b      	subs	r3, r3, r2
    5752:	00db      	lsls	r3, r3, #3
    5754:	440b      	add	r3, r1
    5756:	4618      	mov	r0, r3
    5758:	f000 f86a 	bl	5830 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    575c:	2300      	movs	r3, #0
    575e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5762:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5766:	4618      	mov	r0, r3
    5768:	b005      	add	sp, #20
    576a:	f85d fb04 	ldr.w	pc, [sp], #4
    576e:	bf00      	nop
    5770:	1fff8cf0 	.word	0x1fff8cf0
    5774:	1fff8cf8 	.word	0x1fff8cf8

00005778 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5778:	b500      	push	{lr}
    577a:	b085      	sub	sp, #20
    577c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    577e:	4a0d      	ldr	r2, [pc, #52]	; (57b4 <Mcu_SetMode+0x3c>)
    5780:	9b01      	ldr	r3, [sp, #4]
    5782:	4413      	add	r3, r2
    5784:	781b      	ldrb	r3, [r3, #0]
    5786:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    578a:	f009 fd6b 	bl	f264 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    578e:	4b0a      	ldr	r3, [pc, #40]	; (57b8 <Mcu_SetMode+0x40>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	6919      	ldr	r1, [r3, #16]
    5794:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5798:	4613      	mov	r3, r2
    579a:	005b      	lsls	r3, r3, #1
    579c:	4413      	add	r3, r2
    579e:	009b      	lsls	r3, r3, #2
    57a0:	440b      	add	r3, r1
    57a2:	4618      	mov	r0, r3
    57a4:	f000 f84e 	bl	5844 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57a8:	f009 fd88 	bl	f2bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57ac:	bf00      	nop
    57ae:	b005      	add	sp, #20
    57b0:	f85d fb04 	ldr.w	pc, [sp], #4
    57b4:	1fff8cf4 	.word	0x1fff8cf4
    57b8:	1fff8cf8 	.word	0x1fff8cf8

000057bc <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    57bc:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    57be:	2302      	movs	r3, #2
    57c0:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    57c2:	9b01      	ldr	r3, [sp, #4]
}
    57c4:	4618      	mov	r0, r3
    57c6:	b002      	add	sp, #8
    57c8:	4770      	bx	lr

000057ca <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    57ca:	b500      	push	{lr}
    57cc:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    57ce:	f000 f843 	bl	5858 <Mcu_Ipw_GetResetReason>
    57d2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    57d4:	9b01      	ldr	r3, [sp, #4]
}
    57d6:	4618      	mov	r0, r3
    57d8:	b003      	add	sp, #12
    57da:	f85d fb04 	ldr.w	pc, [sp], #4

000057de <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    57de:	b500      	push	{lr}
    57e0:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    57e2:	f000 f83f 	bl	5864 <Mcu_Ipw_GetResetRawValue>
    57e6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    57e8:	9b01      	ldr	r3, [sp, #4]
}
    57ea:	4618      	mov	r0, r3
    57ec:	b003      	add	sp, #12
    57ee:	f85d fb04 	ldr.w	pc, [sp], #4

000057f2 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57f2:	b500      	push	{lr}
    57f4:	b083      	sub	sp, #12
    57f6:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    57f8:	9801      	ldr	r0, [sp, #4]
    57fa:	f000 f839 	bl	5870 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    57fe:	bf00      	nop
    5800:	b003      	add	sp, #12
    5802:	f85d fb04 	ldr.w	pc, [sp], #4

00005806 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5806:	b082      	sub	sp, #8
    5808:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    580a:	4b03      	ldr	r3, [pc, #12]	; (5818 <Mcu_ClkSrcFailureNotification+0x12>)
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5810:	bf00      	nop
    5812:	b002      	add	sp, #8
    5814:	4770      	bx	lr
    5816:	bf00      	nop
    5818:	1fff8cf8 	.word	0x1fff8cf8

0000581c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    581c:	b500      	push	{lr}
    581e:	b083      	sub	sp, #12
    5820:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5822:	9801      	ldr	r0, [sp, #4]
    5824:	f000 f882 	bl	592c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5828:	bf00      	nop
    582a:	b003      	add	sp, #12
    582c:	f85d fb04 	ldr.w	pc, [sp], #4

00005830 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5830:	b500      	push	{lr}
    5832:	b083      	sub	sp, #12
    5834:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5836:	9801      	ldr	r0, [sp, #4]
    5838:	f7fc fc6a 	bl	2110 <Clock_Ip_InitClock>
}
    583c:	bf00      	nop
    583e:	b003      	add	sp, #12
    5840:	f85d fb04 	ldr.w	pc, [sp], #4

00005844 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5844:	b500      	push	{lr}
    5846:	b083      	sub	sp, #12
    5848:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    584a:	9801      	ldr	r0, [sp, #4]
    584c:	f000 f820 	bl	5890 <Power_Ip_SetMode>
}
    5850:	bf00      	nop
    5852:	b003      	add	sp, #12
    5854:	f85d fb04 	ldr.w	pc, [sp], #4

00005858 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5858:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    585a:	f000 f84f 	bl	58fc <Power_Ip_GetResetReason>
    585e:	4603      	mov	r3, r0
}
    5860:	4618      	mov	r0, r3
    5862:	bd08      	pop	{r3, pc}

00005864 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5864:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5866:	f000 f857 	bl	5918 <Power_Ip_GetResetRawValue>
    586a:	4603      	mov	r3, r0
}
    586c:	4618      	mov	r0, r3
    586e:	bd08      	pop	{r3, pc}

00005870 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5870:	b500      	push	{lr}
    5872:	b083      	sub	sp, #12
    5874:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5876:	9b01      	ldr	r3, [sp, #4]
    5878:	2b00      	cmp	r3, #0
    587a:	d102      	bne.n	5882 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    587c:	f000 f86c 	bl	5958 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5880:	e001      	b.n	5886 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5882:	f000 f86e 	bl	5962 <Power_Ip_EnableSleepOnExit>
}
    5886:	bf00      	nop
    5888:	b003      	add	sp, #12
    588a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005890 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5890:	b500      	push	{lr}
    5892:	b085      	sub	sp, #20
    5894:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5896:	9b01      	ldr	r3, [sp, #4]
    5898:	685b      	ldr	r3, [r3, #4]
    589a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    589c:	9802      	ldr	r0, [sp, #8]
    589e:	f000 f9f5 	bl	5c8c <Power_Ip_SMC_ModeCheckEntry>
    58a2:	4603      	mov	r3, r0
    58a4:	2b00      	cmp	r3, #0
    58a6:	d002      	beq.n	58ae <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58a8:	2301      	movs	r3, #1
    58aa:	9303      	str	r3, [sp, #12]
    58ac:	e003      	b.n	58b6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58ae:	9801      	ldr	r0, [sp, #4]
    58b0:	f000 fa1e 	bl	5cf0 <Power_Ip_SMC_ModeConfig>
    58b4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58b6:	9b03      	ldr	r3, [sp, #12]
    58b8:	2b01      	cmp	r3, #1
    58ba:	d103      	bne.n	58c4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58bc:	21ff      	movs	r1, #255	; 0xff
    58be:	2003      	movs	r0, #3
    58c0:	f000 f8f4 	bl	5aac <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    58c4:	bf00      	nop
    58c6:	b005      	add	sp, #20
    58c8:	f85d fb04 	ldr.w	pc, [sp], #4

000058cc <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    58cc:	b084      	sub	sp, #16
    58ce:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    58d0:	230c      	movs	r3, #12
    58d2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    58d4:	4a08      	ldr	r2, [pc, #32]	; (58f8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58d6:	9b01      	ldr	r3, [sp, #4]
    58d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58dc:	2b0e      	cmp	r3, #14
    58de:	d805      	bhi.n	58ec <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    58e0:	4a05      	ldr	r2, [pc, #20]	; (58f8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58e2:	9b01      	ldr	r3, [sp, #4]
    58e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58e8:	9303      	str	r3, [sp, #12]
    58ea:	e001      	b.n	58f0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    58ec:	230c      	movs	r3, #12
    58ee:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    58f0:	9b03      	ldr	r3, [sp, #12]
}
    58f2:	4618      	mov	r0, r3
    58f4:	b004      	add	sp, #16
    58f6:	4770      	bx	lr
    58f8:	00010f1c 	.word	0x00010f1c

000058fc <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    58fc:	b500      	push	{lr}
    58fe:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5900:	f000 f940 	bl	5b84 <Power_Ip_RCM_GetResetReason>
    5904:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5906:	9801      	ldr	r0, [sp, #4]
    5908:	f7ff ffe0 	bl	58cc <Power_Ip_ConvertIntergeToResetType>
    590c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    590e:	9b00      	ldr	r3, [sp, #0]
}
    5910:	4618      	mov	r0, r3
    5912:	b003      	add	sp, #12
    5914:	f85d fb04 	ldr.w	pc, [sp], #4

00005918 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5918:	b500      	push	{lr}
    591a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    591c:	f000 f98a 	bl	5c34 <Power_Ip_RCM_GetResetRawValue>
    5920:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5922:	9b01      	ldr	r3, [sp, #4]
}
    5924:	4618      	mov	r0, r3
    5926:	b003      	add	sp, #12
    5928:	f85d fb04 	ldr.w	pc, [sp], #4

0000592c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    592c:	b500      	push	{lr}
    592e:	b083      	sub	sp, #12
    5930:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5932:	9b01      	ldr	r3, [sp, #4]
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	4618      	mov	r0, r3
    5938:	f000 f90e 	bl	5b58 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    593c:	9b01      	ldr	r3, [sp, #4]
    593e:	685b      	ldr	r3, [r3, #4]
    5940:	4618      	mov	r0, r3
    5942:	f000 f86d 	bl	5a20 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	689b      	ldr	r3, [r3, #8]
    594a:	4618      	mov	r0, r3
    594c:	f000 f990 	bl	5c70 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5950:	bf00      	nop
    5952:	b003      	add	sp, #12
    5954:	f85d fb04 	ldr.w	pc, [sp], #4

00005958 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5958:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    595a:	f000 f811 	bl	5980 <Power_Ip_CM4_DisableSleepOnExit>
}
    595e:	bf00      	nop
    5960:	bd08      	pop	{r3, pc}

00005962 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5962:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5964:	f000 f820 	bl	59a8 <Power_Ip_CM4_EnableSleepOnExit>
}
    5968:	bf00      	nop
    596a:	bd08      	pop	{r3, pc}

0000596c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    596c:	b082      	sub	sp, #8
    596e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5970:	4a02      	ldr	r2, [pc, #8]	; (597c <Power_Ip_InstallNotificationsCallback+0x10>)
    5972:	9b01      	ldr	r3, [sp, #4]
    5974:	6013      	str	r3, [r2, #0]
}
    5976:	bf00      	nop
    5978:	b002      	add	sp, #8
    597a:	4770      	bx	lr
    597c:	1fff8b1c 	.word	0x1fff8b1c

00005980 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5980:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5982:	2300      	movs	r3, #0
    5984:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5986:	4b07      	ldr	r3, [pc, #28]	; (59a4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	685b      	ldr	r3, [r3, #4]
    598c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    598e:	9b01      	ldr	r3, [sp, #4]
    5990:	f023 0302 	bic.w	r3, r3, #2
    5994:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5996:	4b03      	ldr	r3, [pc, #12]	; (59a4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	9a01      	ldr	r2, [sp, #4]
    599c:	605a      	str	r2, [r3, #4]
}
    599e:	bf00      	nop
    59a0:	b002      	add	sp, #8
    59a2:	4770      	bx	lr
    59a4:	1fff8b20 	.word	0x1fff8b20

000059a8 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59a8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59aa:	2300      	movs	r3, #0
    59ac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59ae:	4b07      	ldr	r3, [pc, #28]	; (59cc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	f043 0302 	orr.w	r3, r3, #2
    59bc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59be:	4b03      	ldr	r3, [pc, #12]	; (59cc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	9a01      	ldr	r2, [sp, #4]
    59c4:	605a      	str	r2, [r3, #4]
}
    59c6:	bf00      	nop
    59c8:	b002      	add	sp, #8
    59ca:	4770      	bx	lr
    59cc:	1fff8b20 	.word	0x1fff8b20

000059d0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    59d0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59d2:	2300      	movs	r3, #0
    59d4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59d6:	4b07      	ldr	r3, [pc, #28]	; (59f4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	685b      	ldr	r3, [r3, #4]
    59dc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    59de:	9b01      	ldr	r3, [sp, #4]
    59e0:	f043 0304 	orr.w	r3, r3, #4
    59e4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59e6:	4b03      	ldr	r3, [pc, #12]	; (59f4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	9a01      	ldr	r2, [sp, #4]
    59ec:	605a      	str	r2, [r3, #4]
}
    59ee:	bf00      	nop
    59f0:	b002      	add	sp, #8
    59f2:	4770      	bx	lr
    59f4:	1fff8b20 	.word	0x1fff8b20

000059f8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    59f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59fa:	2300      	movs	r3, #0
    59fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59fe:	4b07      	ldr	r3, [pc, #28]	; (5a1c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	685b      	ldr	r3, [r3, #4]
    5a04:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a06:	9b01      	ldr	r3, [sp, #4]
    5a08:	f023 0304 	bic.w	r3, r3, #4
    5a0c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a0e:	4b03      	ldr	r3, [pc, #12]	; (5a1c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	9a01      	ldr	r2, [sp, #4]
    5a14:	605a      	str	r2, [r3, #4]
}
    5a16:	bf00      	nop
    5a18:	b002      	add	sp, #8
    5a1a:	4770      	bx	lr
    5a1c:	1fff8b20 	.word	0x1fff8b20

00005a20 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a20:	b084      	sub	sp, #16
    5a22:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a24:	4b20      	ldr	r3, [pc, #128]	; (5aa8 <Power_Ip_PMC_PowerInit+0x88>)
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a30:	f003 030f 	and.w	r3, r3, #15
    5a34:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a38:	9b01      	ldr	r3, [sp, #4]
    5a3a:	781a      	ldrb	r2, [r3, #0]
    5a3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a40:	4313      	orrs	r3, r2
    5a42:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a46:	4a18      	ldr	r2, [pc, #96]	; (5aa8 <Power_Ip_PMC_PowerInit+0x88>)
    5a48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a4c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a4e:	4b16      	ldr	r3, [pc, #88]	; (5aa8 <Power_Ip_PMC_PowerInit+0x88>)
    5a50:	785b      	ldrb	r3, [r3, #1]
    5a52:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a5a:	f003 031f 	and.w	r3, r3, #31
    5a5e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a62:	9b01      	ldr	r3, [sp, #4]
    5a64:	785a      	ldrb	r2, [r3, #1]
    5a66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a6a:	4313      	orrs	r3, r2
    5a6c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a70:	4a0d      	ldr	r2, [pc, #52]	; (5aa8 <Power_Ip_PMC_PowerInit+0x88>)
    5a72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a76:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a78:	4b0b      	ldr	r3, [pc, #44]	; (5aa8 <Power_Ip_PMC_PowerInit+0x88>)
    5a7a:	789b      	ldrb	r3, [r3, #2]
    5a7c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a88:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5a8c:	9b01      	ldr	r3, [sp, #4]
    5a8e:	789a      	ldrb	r2, [r3, #2]
    5a90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a94:	4313      	orrs	r3, r2
    5a96:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a9a:	4a03      	ldr	r2, [pc, #12]	; (5aa8 <Power_Ip_PMC_PowerInit+0x88>)
    5a9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aa0:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5aa2:	bf00      	nop
    5aa4:	b004      	add	sp, #16
    5aa6:	4770      	bx	lr
    5aa8:	4007d000 	.word	0x4007d000

00005aac <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5aac:	b500      	push	{lr}
    5aae:	b083      	sub	sp, #12
    5ab0:	9001      	str	r0, [sp, #4]
    5ab2:	460b      	mov	r3, r1
    5ab4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5ab8:	4b05      	ldr	r3, [pc, #20]	; (5ad0 <Power_Ip_ReportPowerErrors+0x24>)
    5aba:	681b      	ldr	r3, [r3, #0]
    5abc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ac0:	4611      	mov	r1, r2
    5ac2:	9801      	ldr	r0, [sp, #4]
    5ac4:	4798      	blx	r3
}
    5ac6:	bf00      	nop
    5ac8:	b003      	add	sp, #12
    5aca:	f85d fb04 	ldr.w	pc, [sp], #4
    5ace:	bf00      	nop
    5ad0:	1fff8b1c 	.word	0x1fff8b1c

00005ad4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ad4:	b082      	sub	sp, #8
    5ad6:	9001      	str	r0, [sp, #4]
    5ad8:	460b      	mov	r3, r1
    5ada:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5ade:	bf00      	nop
    5ae0:	b002      	add	sp, #8
    5ae2:	4770      	bx	lr

00005ae4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5ae4:	b500      	push	{lr}
    5ae6:	b085      	sub	sp, #20
    5ae8:	9003      	str	r0, [sp, #12]
    5aea:	9102      	str	r1, [sp, #8]
    5aec:	9201      	str	r2, [sp, #4]
    5aee:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5af0:	2000      	movs	r0, #0
    5af2:	f7fc f83d 	bl	1b70 <OsIf_GetCounter>
    5af6:	4602      	mov	r2, r0
    5af8:	9b03      	ldr	r3, [sp, #12]
    5afa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5afc:	9b02      	ldr	r3, [sp, #8]
    5afe:	2200      	movs	r2, #0
    5b00:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b02:	2100      	movs	r1, #0
    5b04:	9800      	ldr	r0, [sp, #0]
    5b06:	f7fc f87f 	bl	1c08 <OsIf_MicrosToTicks>
    5b0a:	4602      	mov	r2, r0
    5b0c:	9b01      	ldr	r3, [sp, #4]
    5b0e:	601a      	str	r2, [r3, #0]
}
    5b10:	bf00      	nop
    5b12:	b005      	add	sp, #20
    5b14:	f85d fb04 	ldr.w	pc, [sp], #4

00005b18 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b18:	b500      	push	{lr}
    5b1a:	b087      	sub	sp, #28
    5b1c:	9003      	str	r0, [sp, #12]
    5b1e:	9102      	str	r1, [sp, #8]
    5b20:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b22:	2300      	movs	r3, #0
    5b24:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b28:	2100      	movs	r1, #0
    5b2a:	9803      	ldr	r0, [sp, #12]
    5b2c:	f7fc f839 	bl	1ba2 <OsIf_GetElapsed>
    5b30:	4602      	mov	r2, r0
    5b32:	9b02      	ldr	r3, [sp, #8]
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	441a      	add	r2, r3
    5b38:	9b02      	ldr	r3, [sp, #8]
    5b3a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b3c:	9b02      	ldr	r3, [sp, #8]
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	9a01      	ldr	r2, [sp, #4]
    5b42:	429a      	cmp	r2, r3
    5b44:	d802      	bhi.n	5b4c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b46:	2301      	movs	r3, #1
    5b48:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b50:	4618      	mov	r0, r3
    5b52:	b007      	add	sp, #28
    5b54:	f85d fb04 	ldr.w	pc, [sp], #4

00005b58 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b58:	b082      	sub	sp, #8
    5b5a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b5c:	9b01      	ldr	r3, [sp, #4]
    5b5e:	681a      	ldr	r2, [r3, #0]
    5b60:	4907      	ldr	r1, [pc, #28]	; (5b80 <Power_Ip_RCM_ResetInit+0x28>)
    5b62:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b66:	4013      	ands	r3, r2
    5b68:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b6a:	9b01      	ldr	r3, [sp, #4]
    5b6c:	685a      	ldr	r2, [r3, #4]
    5b6e:	4904      	ldr	r1, [pc, #16]	; (5b80 <Power_Ip_RCM_ResetInit+0x28>)
    5b70:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b74:	4013      	ands	r3, r2
    5b76:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b78:	bf00      	nop
    5b7a:	b002      	add	sp, #8
    5b7c:	4770      	bx	lr
    5b7e:	bf00      	nop
    5b80:	4007f000 	.word	0x4007f000

00005b84 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5b84:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5b86:	230c      	movs	r3, #12
    5b88:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b8a:	2300      	movs	r3, #0
    5b8c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5b8e:	2300      	movs	r3, #0
    5b90:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5b92:	2300      	movs	r3, #0
    5b94:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b96:	4b25      	ldr	r3, [pc, #148]	; (5c2c <Power_Ip_RCM_GetResetReason+0xa8>)
    5b98:	699a      	ldr	r2, [r3, #24]
    5b9a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b9e:	4013      	ands	r3, r2
    5ba0:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5ba2:	9b03      	ldr	r3, [sp, #12]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d008      	beq.n	5bba <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5ba8:	4920      	ldr	r1, [pc, #128]	; (5c2c <Power_Ip_RCM_GetResetReason+0xa8>)
    5baa:	9a03      	ldr	r2, [sp, #12]
    5bac:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bb0:	4013      	ands	r3, r2
    5bb2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bb4:	4a1e      	ldr	r2, [pc, #120]	; (5c30 <Power_Ip_RCM_GetResetReason+0xac>)
    5bb6:	9b03      	ldr	r3, [sp, #12]
    5bb8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5bba:	4b1d      	ldr	r3, [pc, #116]	; (5c30 <Power_Ip_RCM_GetResetReason+0xac>)
    5bbc:	681b      	ldr	r3, [r3, #0]
    5bbe:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5bc0:	9a02      	ldr	r2, [sp, #8]
    5bc2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc6:	4013      	ands	r3, r2
    5bc8:	2b82      	cmp	r3, #130	; 0x82
    5bca:	d102      	bne.n	5bd2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5bcc:	2305      	movs	r3, #5
    5bce:	9307      	str	r3, [sp, #28]
    5bd0:	e027      	b.n	5c22 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5bd2:	2300      	movs	r3, #0
    5bd4:	9306      	str	r3, [sp, #24]
    5bd6:	e021      	b.n	5c1c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5bd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5bdc:	9b06      	ldr	r3, [sp, #24]
    5bde:	fa22 f303 	lsr.w	r3, r2, r3
    5be2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5be4:	9a01      	ldr	r2, [sp, #4]
    5be6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5bea:	4013      	ands	r3, r2
    5bec:	2b00      	cmp	r3, #0
    5bee:	d012      	beq.n	5c16 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5bf0:	9a01      	ldr	r2, [sp, #4]
    5bf2:	9b02      	ldr	r3, [sp, #8]
    5bf4:	4013      	ands	r3, r2
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d00a      	beq.n	5c10 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5bfa:	9b05      	ldr	r3, [sp, #20]
    5bfc:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5bfe:	9b04      	ldr	r3, [sp, #16]
    5c00:	3301      	adds	r3, #1
    5c02:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c04:	9b04      	ldr	r3, [sp, #16]
    5c06:	2b01      	cmp	r3, #1
    5c08:	d902      	bls.n	5c10 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c0a:	230d      	movs	r3, #13
    5c0c:	9307      	str	r3, [sp, #28]
                        break;
    5c0e:	e008      	b.n	5c22 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c10:	9b05      	ldr	r3, [sp, #20]
    5c12:	3301      	adds	r3, #1
    5c14:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c16:	9b06      	ldr	r3, [sp, #24]
    5c18:	3301      	adds	r3, #1
    5c1a:	9306      	str	r3, [sp, #24]
    5c1c:	9b06      	ldr	r3, [sp, #24]
    5c1e:	2b1f      	cmp	r3, #31
    5c20:	d9da      	bls.n	5bd8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c22:	9b07      	ldr	r3, [sp, #28]
}
    5c24:	4618      	mov	r0, r3
    5c26:	b008      	add	sp, #32
    5c28:	4770      	bx	lr
    5c2a:	bf00      	nop
    5c2c:	4007f000 	.word	0x4007f000
    5c30:	1fff8cfc 	.word	0x1fff8cfc

00005c34 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c34:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c36:	4b0c      	ldr	r3, [pc, #48]	; (5c68 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c38:	699a      	ldr	r2, [r3, #24]
    5c3a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c3e:	4013      	ands	r3, r2
    5c40:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c42:	9b01      	ldr	r3, [sp, #4]
    5c44:	2b00      	cmp	r3, #0
    5c46:	d008      	beq.n	5c5a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c48:	4907      	ldr	r1, [pc, #28]	; (5c68 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c4a:	9a01      	ldr	r2, [sp, #4]
    5c4c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c50:	4013      	ands	r3, r2
    5c52:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c54:	4a05      	ldr	r2, [pc, #20]	; (5c6c <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c56:	9b01      	ldr	r3, [sp, #4]
    5c58:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c5a:	4b04      	ldr	r3, [pc, #16]	; (5c6c <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c5c:	681b      	ldr	r3, [r3, #0]
    5c5e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c60:	9b00      	ldr	r3, [sp, #0]
}
    5c62:	4618      	mov	r0, r3
    5c64:	b002      	add	sp, #8
    5c66:	4770      	bx	lr
    5c68:	4007f000 	.word	0x4007f000
    5c6c:	1fff8cfc 	.word	0x1fff8cfc

00005c70 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c70:	b082      	sub	sp, #8
    5c72:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c74:	9b01      	ldr	r3, [sp, #4]
    5c76:	681b      	ldr	r3, [r3, #0]
    5c78:	4a03      	ldr	r2, [pc, #12]	; (5c88 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c7e:	6093      	str	r3, [r2, #8]
}
    5c80:	bf00      	nop
    5c82:	b002      	add	sp, #8
    5c84:	4770      	bx	lr
    5c86:	bf00      	nop
    5c88:	4007e000 	.word	0x4007e000

00005c8c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5c8c:	b084      	sub	sp, #16
    5c8e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5c90:	2301      	movs	r3, #1
    5c92:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5c94:	4b15      	ldr	r3, [pc, #84]	; (5cec <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5c96:	695b      	ldr	r3, [r3, #20]
    5c98:	b2db      	uxtb	r3, r3
    5c9a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c9c:	9b01      	ldr	r3, [sp, #4]
    5c9e:	2b02      	cmp	r3, #2
    5ca0:	d012      	beq.n	5cc8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5ca2:	9b01      	ldr	r3, [sp, #4]
    5ca4:	2b02      	cmp	r3, #2
    5ca6:	d818      	bhi.n	5cda <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5ca8:	9b01      	ldr	r3, [sp, #4]
    5caa:	2b00      	cmp	r3, #0
    5cac:	d003      	beq.n	5cb6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5cae:	9b01      	ldr	r3, [sp, #4]
    5cb0:	2b01      	cmp	r3, #1
    5cb2:	d003      	beq.n	5cbc <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cb4:	e011      	b.n	5cda <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cb6:	2300      	movs	r3, #0
    5cb8:	9303      	str	r3, [sp, #12]
            break;
    5cba:	e013      	b.n	5ce4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5cbc:	9b02      	ldr	r3, [sp, #8]
    5cbe:	2b01      	cmp	r3, #1
    5cc0:	d10d      	bne.n	5cde <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cc2:	2300      	movs	r3, #0
    5cc4:	9303      	str	r3, [sp, #12]
            break;
    5cc6:	e00a      	b.n	5cde <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5cc8:	9b02      	ldr	r3, [sp, #8]
    5cca:	2b01      	cmp	r3, #1
    5ccc:	d002      	beq.n	5cd4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5cce:	9b02      	ldr	r3, [sp, #8]
    5cd0:	2b10      	cmp	r3, #16
    5cd2:	d106      	bne.n	5ce2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cd4:	2300      	movs	r3, #0
    5cd6:	9303      	str	r3, [sp, #12]
            break;
    5cd8:	e003      	b.n	5ce2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5cda:	bf00      	nop
    5cdc:	e002      	b.n	5ce4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cde:	bf00      	nop
    5ce0:	e000      	b.n	5ce4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5ce2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5ce4:	9b03      	ldr	r3, [sp, #12]
}
    5ce6:	4618      	mov	r0, r3
    5ce8:	b004      	add	sp, #16
    5cea:	4770      	bx	lr
    5cec:	4007e000 	.word	0x4007e000

00005cf0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5cf0:	b500      	push	{lr}
    5cf2:	b08b      	sub	sp, #44	; 0x2c
    5cf4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5cf6:	2300      	movs	r3, #0
    5cf8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5cfa:	2300      	movs	r3, #0
    5cfc:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5cfe:	2300      	movs	r3, #0
    5d00:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d04:	9b01      	ldr	r3, [sp, #4]
    5d06:	685b      	ldr	r3, [r3, #4]
    5d08:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d0a:	9b08      	ldr	r3, [sp, #32]
    5d0c:	2b02      	cmp	r3, #2
    5d0e:	d076      	beq.n	5dfe <Power_Ip_SMC_ModeConfig+0x10e>
    5d10:	9b08      	ldr	r3, [sp, #32]
    5d12:	2b02      	cmp	r3, #2
    5d14:	f200 80ab 	bhi.w	5e6e <Power_Ip_SMC_ModeConfig+0x17e>
    5d18:	9b08      	ldr	r3, [sp, #32]
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d003      	beq.n	5d26 <Power_Ip_SMC_ModeConfig+0x36>
    5d1e:	9b08      	ldr	r3, [sp, #32]
    5d20:	2b01      	cmp	r3, #1
    5d22:	d034      	beq.n	5d8e <Power_Ip_SMC_ModeConfig+0x9e>
    5d24:	e0a3      	b.n	5e6e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d26:	4b58      	ldr	r3, [pc, #352]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5d28:	68db      	ldr	r3, [r3, #12]
    5d2a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d2c:	9b06      	ldr	r3, [sp, #24]
    5d2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d32:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d34:	4a54      	ldr	r2, [pc, #336]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5d36:	9b06      	ldr	r3, [sp, #24]
    5d38:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d3a:	aa02      	add	r2, sp, #8
    5d3c:	a903      	add	r1, sp, #12
    5d3e:	a804      	add	r0, sp, #16
    5d40:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d44:	f7ff fece 	bl	5ae4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d48:	9a02      	ldr	r2, [sp, #8]
    5d4a:	a903      	add	r1, sp, #12
    5d4c:	ab04      	add	r3, sp, #16
    5d4e:	4618      	mov	r0, r3
    5d50:	f7ff fee2 	bl	5b18 <Power_Ip_TimeoutExpired>
    5d54:	4603      	mov	r3, r0
    5d56:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d5a:	4b4b      	ldr	r3, [pc, #300]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5d5c:	695b      	ldr	r3, [r3, #20]
    5d5e:	f003 0301 	and.w	r3, r3, #1
    5d62:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d64:	9b05      	ldr	r3, [sp, #20]
    5d66:	2b01      	cmp	r3, #1
    5d68:	d006      	beq.n	5d78 <Power_Ip_SMC_ModeConfig+0x88>
    5d6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d6e:	f083 0301 	eor.w	r3, r3, #1
    5d72:	b2db      	uxtb	r3, r3
    5d74:	2b00      	cmp	r3, #0
    5d76:	d1e7      	bne.n	5d48 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d78:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d079      	beq.n	5e74 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d80:	2301      	movs	r3, #1
    5d82:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d84:	21ff      	movs	r1, #255	; 0xff
    5d86:	2000      	movs	r0, #0
    5d88:	f7ff fe90 	bl	5aac <Power_Ip_ReportPowerErrors>
            }

            break;
    5d8c:	e072      	b.n	5e74 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5d8e:	4b3e      	ldr	r3, [pc, #248]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5d90:	68db      	ldr	r3, [r3, #12]
    5d92:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d94:	9b06      	ldr	r3, [sp, #24]
    5d96:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d9a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d9c:	9b06      	ldr	r3, [sp, #24]
    5d9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5da2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5da4:	4a38      	ldr	r2, [pc, #224]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5da6:	9b06      	ldr	r3, [sp, #24]
    5da8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5daa:	aa02      	add	r2, sp, #8
    5dac:	a903      	add	r1, sp, #12
    5dae:	a804      	add	r0, sp, #16
    5db0:	f24c 3350 	movw	r3, #50000	; 0xc350
    5db4:	f7ff fe96 	bl	5ae4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5db8:	9a02      	ldr	r2, [sp, #8]
    5dba:	a903      	add	r1, sp, #12
    5dbc:	ab04      	add	r3, sp, #16
    5dbe:	4618      	mov	r0, r3
    5dc0:	f7ff feaa 	bl	5b18 <Power_Ip_TimeoutExpired>
    5dc4:	4603      	mov	r3, r0
    5dc6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5dca:	4b2f      	ldr	r3, [pc, #188]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5dcc:	695b      	ldr	r3, [r3, #20]
    5dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5dd2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dd4:	9b05      	ldr	r3, [sp, #20]
    5dd6:	2b80      	cmp	r3, #128	; 0x80
    5dd8:	d006      	beq.n	5de8 <Power_Ip_SMC_ModeConfig+0xf8>
    5dda:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dde:	f083 0301 	eor.w	r3, r3, #1
    5de2:	b2db      	uxtb	r3, r3
    5de4:	2b00      	cmp	r3, #0
    5de6:	d1e7      	bne.n	5db8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5de8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dec:	2b00      	cmp	r3, #0
    5dee:	d043      	beq.n	5e78 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5df0:	2301      	movs	r3, #1
    5df2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5df4:	21ff      	movs	r1, #255	; 0xff
    5df6:	2000      	movs	r0, #0
    5df8:	f7ff fe58 	bl	5aac <Power_Ip_ReportPowerErrors>
            }

            break;
    5dfc:	e03c      	b.n	5e78 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5dfe:	4b22      	ldr	r3, [pc, #136]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5e00:	68db      	ldr	r3, [r3, #12]
    5e02:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e04:	9b06      	ldr	r3, [sp, #24]
    5e06:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e0a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e0c:	9b06      	ldr	r3, [sp, #24]
    5e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e12:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e14:	4a1c      	ldr	r2, [pc, #112]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5e16:	9b06      	ldr	r3, [sp, #24]
    5e18:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e1a:	aa02      	add	r2, sp, #8
    5e1c:	a903      	add	r1, sp, #12
    5e1e:	a804      	add	r0, sp, #16
    5e20:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e24:	f7ff fe5e 	bl	5ae4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e28:	9a02      	ldr	r2, [sp, #8]
    5e2a:	a903      	add	r1, sp, #12
    5e2c:	ab04      	add	r3, sp, #16
    5e2e:	4618      	mov	r0, r3
    5e30:	f7ff fe72 	bl	5b18 <Power_Ip_TimeoutExpired>
    5e34:	4603      	mov	r3, r0
    5e36:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e3a:	4b13      	ldr	r3, [pc, #76]	; (5e88 <Power_Ip_SMC_ModeConfig+0x198>)
    5e3c:	695b      	ldr	r3, [r3, #20]
    5e3e:	f003 0304 	and.w	r3, r3, #4
    5e42:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e44:	9b05      	ldr	r3, [sp, #20]
    5e46:	2b04      	cmp	r3, #4
    5e48:	d006      	beq.n	5e58 <Power_Ip_SMC_ModeConfig+0x168>
    5e4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e4e:	f083 0301 	eor.w	r3, r3, #1
    5e52:	b2db      	uxtb	r3, r3
    5e54:	2b00      	cmp	r3, #0
    5e56:	d1e7      	bne.n	5e28 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e58:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d00d      	beq.n	5e7c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e60:	2301      	movs	r3, #1
    5e62:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e64:	21ff      	movs	r1, #255	; 0xff
    5e66:	2000      	movs	r0, #0
    5e68:	f7ff fe20 	bl	5aac <Power_Ip_ReportPowerErrors>
            }

            break;
    5e6c:	e006      	b.n	5e7c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e6e:	2301      	movs	r3, #1
    5e70:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e72:	e004      	b.n	5e7e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e74:	bf00      	nop
    5e76:	e002      	b.n	5e7e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e78:	bf00      	nop
    5e7a:	e000      	b.n	5e7e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e7c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e80:	4618      	mov	r0, r3
    5e82:	b00b      	add	sp, #44	; 0x2c
    5e84:	f85d fb04 	ldr.w	pc, [sp], #4
    5e88:	4007e000 	.word	0x4007e000

00005e8c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5e8c:	b500      	push	{lr}
    5e8e:	b085      	sub	sp, #20
    5e90:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5e92:	9b01      	ldr	r3, [sp, #4]
    5e94:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5e96:	9803      	ldr	r0, [sp, #12]
    5e98:	f000 fbc8 	bl	662c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e9c:	4a03      	ldr	r2, [pc, #12]	; (5eac <Port_Init+0x20>)
    5e9e:	9b03      	ldr	r3, [sp, #12]
    5ea0:	6013      	str	r3, [r2, #0]
        }
    }
}
    5ea2:	bf00      	nop
    5ea4:	b005      	add	sp, #20
    5ea6:	f85d fb04 	ldr.w	pc, [sp], #4
    5eaa:	bf00      	nop
    5eac:	1fff8d00 	.word	0x1fff8d00

00005eb0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5eb0:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5eb2:	4b03      	ldr	r3, [pc, #12]	; (5ec0 <Port_RefreshPortDirection+0x10>)
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	4618      	mov	r0, r3
    5eb8:	f000 fc10 	bl	66dc <Port_Ipw_RefreshPortDirection>
    }
}
    5ebc:	bf00      	nop
    5ebe:	bd08      	pop	{r3, pc}
    5ec0:	1fff8d00 	.word	0x1fff8d00

00005ec4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5ec4:	b086      	sub	sp, #24
    5ec6:	9003      	str	r0, [sp, #12]
    5ec8:	9102      	str	r1, [sp, #8]
    5eca:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5ecc:	23ff      	movs	r3, #255	; 0xff
    5ece:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5ed0:	9b03      	ldr	r3, [sp, #12]
    5ed2:	4a39      	ldr	r2, [pc, #228]	; (5fb8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5ed4:	4293      	cmp	r3, r2
    5ed6:	d151      	bne.n	5f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5ed8:	9b02      	ldr	r3, [sp, #8]
    5eda:	2b10      	cmp	r3, #16
    5edc:	d867      	bhi.n	5fae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5ede:	a201      	add	r2, pc, #4	; (adr r2, 5ee4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5ee4:	00005f29 	.word	0x00005f29
    5ee8:	00005f37 	.word	0x00005f37
    5eec:	00005faf 	.word	0x00005faf
    5ef0:	00005faf 	.word	0x00005faf
    5ef4:	00005faf 	.word	0x00005faf
    5ef8:	00005faf 	.word	0x00005faf
    5efc:	00005faf 	.word	0x00005faf
    5f00:	00005faf 	.word	0x00005faf
    5f04:	00005faf 	.word	0x00005faf
    5f08:	00005faf 	.word	0x00005faf
    5f0c:	00005faf 	.word	0x00005faf
    5f10:	00005faf 	.word	0x00005faf
    5f14:	00005faf 	.word	0x00005faf
    5f18:	00005f45 	.word	0x00005f45
    5f1c:	00005f53 	.word	0x00005f53
    5f20:	00005f61 	.word	0x00005f61
    5f24:	00005f6f 	.word	0x00005f6f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f28:	2301      	movs	r3, #1
    5f2a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f2c:	9a05      	ldr	r2, [sp, #20]
    5f2e:	9b01      	ldr	r3, [sp, #4]
    5f30:	4313      	orrs	r3, r2
    5f32:	9305      	str	r3, [sp, #20]
                break;
    5f34:	e03c      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f36:	2302      	movs	r3, #2
    5f38:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f3a:	9a05      	ldr	r2, [sp, #20]
    5f3c:	9b01      	ldr	r3, [sp, #4]
    5f3e:	4313      	orrs	r3, r2
    5f40:	9305      	str	r3, [sp, #20]
                break;
    5f42:	e035      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f44:	2304      	movs	r3, #4
    5f46:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f48:	9a05      	ldr	r2, [sp, #20]
    5f4a:	9b01      	ldr	r3, [sp, #4]
    5f4c:	4313      	orrs	r3, r2
    5f4e:	9305      	str	r3, [sp, #20]
                break;
    5f50:	e02e      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f52:	2308      	movs	r3, #8
    5f54:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f56:	9a05      	ldr	r2, [sp, #20]
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	4313      	orrs	r3, r2
    5f5c:	9305      	str	r3, [sp, #20]
                break;
    5f5e:	e027      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f60:	230e      	movs	r3, #14
    5f62:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f64:	9a05      	ldr	r2, [sp, #20]
    5f66:	9b01      	ldr	r3, [sp, #4]
    5f68:	4013      	ands	r3, r2
    5f6a:	9305      	str	r3, [sp, #20]
                break;
    5f6c:	e020      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f6e:	230d      	movs	r3, #13
    5f70:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f72:	9a05      	ldr	r2, [sp, #20]
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	4013      	ands	r3, r2
    5f78:	9305      	str	r3, [sp, #20]
                break;
    5f7a:	e019      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f7c:	9b03      	ldr	r3, [sp, #12]
    5f7e:	4a0f      	ldr	r2, [pc, #60]	; (5fbc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f80:	4293      	cmp	r3, r2
    5f82:	d115      	bne.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5f84:	9b02      	ldr	r3, [sp, #8]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d003      	beq.n	5f92 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f8a:	9b02      	ldr	r3, [sp, #8]
    5f8c:	2b01      	cmp	r3, #1
    5f8e:	d007      	beq.n	5fa0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5f90:	e00e      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5f92:	230b      	movs	r3, #11
    5f94:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f96:	9a05      	ldr	r2, [sp, #20]
    5f98:	9b01      	ldr	r3, [sp, #4]
    5f9a:	4013      	ands	r3, r2
    5f9c:	9305      	str	r3, [sp, #20]
                break;
    5f9e:	e007      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5fa0:	2307      	movs	r3, #7
    5fa2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fa4:	9a05      	ldr	r2, [sp, #20]
    5fa6:	9b01      	ldr	r3, [sp, #4]
    5fa8:	4013      	ands	r3, r2
    5faa:	9305      	str	r3, [sp, #20]
                break;
    5fac:	e000      	b.n	5fb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5fae:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5fb0:	9b05      	ldr	r3, [sp, #20]
}
    5fb2:	4618      	mov	r0, r3
    5fb4:	b006      	add	sp, #24
    5fb6:	4770      	bx	lr
    5fb8:	4004a000 	.word	0x4004a000
    5fbc:	4004b000 	.word	0x4004b000

00005fc0 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5fc0:	b500      	push	{lr}
    5fc2:	b089      	sub	sp, #36	; 0x24
    5fc4:	9003      	str	r0, [sp, #12]
    5fc6:	9102      	str	r1, [sp, #8]
    5fc8:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5fce:	9b01      	ldr	r3, [sp, #4]
    5fd0:	2b08      	cmp	r3, #8
    5fd2:	d121      	bne.n	6018 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5fd4:	4b13      	ldr	r3, [pc, #76]	; (6024 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fd6:	685b      	ldr	r3, [r3, #4]
    5fd8:	f003 030f 	and.w	r3, r3, #15
    5fdc:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5fde:	9a06      	ldr	r2, [sp, #24]
    5fe0:	9902      	ldr	r1, [sp, #8]
    5fe2:	9803      	ldr	r0, [sp, #12]
    5fe4:	f7ff ff6e 	bl	5ec4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5fe8:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5fea:	9b05      	ldr	r3, [sp, #20]
    5fec:	2bff      	cmp	r3, #255	; 0xff
    5fee:	d011      	beq.n	6014 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5ff0:	f009 fbc8 	bl	f784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5ff4:	4b0b      	ldr	r3, [pc, #44]	; (6024 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ff6:	685b      	ldr	r3, [r3, #4]
    5ff8:	4a0a      	ldr	r2, [pc, #40]	; (6024 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ffa:	f023 030f 	bic.w	r3, r3, #15
    5ffe:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6000:	4b08      	ldr	r3, [pc, #32]	; (6024 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6002:	685a      	ldr	r2, [r3, #4]
    6004:	9b05      	ldr	r3, [sp, #20]
    6006:	f003 030f 	and.w	r3, r3, #15
    600a:	4906      	ldr	r1, [pc, #24]	; (6024 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    600c:	4313      	orrs	r3, r2
    600e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6010:	f009 fbe4 	bl	f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6014:	2300      	movs	r3, #0
    6016:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6018:	9b07      	ldr	r3, [sp, #28]
}
    601a:	4618      	mov	r0, r3
    601c:	b009      	add	sp, #36	; 0x24
    601e:	f85d fb04 	ldr.w	pc, [sp], #4
    6022:	bf00      	nop
    6024:	40048000 	.word	0x40048000

00006028 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6028:	b500      	push	{lr}
    602a:	b087      	sub	sp, #28
    602c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    602e:	2300      	movs	r3, #0
    6030:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6032:	2300      	movs	r3, #0
    6034:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6036:	2300      	movs	r3, #0
    6038:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    603a:	9b01      	ldr	r3, [sp, #4]
    603c:	68db      	ldr	r3, [r3, #12]
    603e:	2b02      	cmp	r3, #2
    6040:	d00a      	beq.n	6058 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6042:	9b05      	ldr	r3, [sp, #20]
    6044:	f043 0302 	orr.w	r3, r3, #2
    6048:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	68db      	ldr	r3, [r3, #12]
    604e:	f003 0301 	and.w	r3, r3, #1
    6052:	9a05      	ldr	r2, [sp, #20]
    6054:	4313      	orrs	r3, r2
    6056:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6058:	9b01      	ldr	r3, [sp, #4]
    605a:	699b      	ldr	r3, [r3, #24]
    605c:	019b      	lsls	r3, r3, #6
    605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6062:	9a05      	ldr	r2, [sp, #20]
    6064:	4313      	orrs	r3, r2
    6066:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	6a1b      	ldr	r3, [r3, #32]
    606c:	03db      	lsls	r3, r3, #15
    606e:	b29b      	uxth	r3, r3
    6070:	9a05      	ldr	r2, [sp, #20]
    6072:	4313      	orrs	r3, r2
    6074:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6076:	9b01      	ldr	r3, [sp, #4]
    6078:	7f1b      	ldrb	r3, [r3, #28]
    607a:	2b00      	cmp	r3, #0
    607c:	d001      	beq.n	6082 <Port_Ci_Port_Ip_PinInit+0x5a>
    607e:	2310      	movs	r3, #16
    6080:	e000      	b.n	6084 <Port_Ci_Port_Ip_PinInit+0x5c>
    6082:	2300      	movs	r3, #0
    6084:	9a05      	ldr	r2, [sp, #20]
    6086:	4313      	orrs	r3, r2
    6088:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	691b      	ldr	r3, [r3, #16]
    608e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	6818      	ldr	r0, [r3, #0]
    6094:	9b01      	ldr	r3, [sp, #4]
    6096:	689b      	ldr	r3, [r3, #8]
    6098:	9a04      	ldr	r2, [sp, #16]
    609a:	4619      	mov	r1, r3
    609c:	f7ff ff90 	bl	5fc0 <Port_Ci_Port_Ip_ConfigureInterleave>
    60a0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    60a2:	9b03      	ldr	r3, [sp, #12]
    60a4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60a6:	9b04      	ldr	r3, [sp, #16]
    60a8:	021b      	lsls	r3, r3, #8
    60aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60ae:	9a05      	ldr	r2, [sp, #20]
    60b0:	4313      	orrs	r3, r2
    60b2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60b4:	f009 f9cc 	bl	f450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	681b      	ldr	r3, [r3, #0]
    60bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    60c0:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    60c2:	9b01      	ldr	r3, [sp, #4]
    60c4:	689b      	ldr	r3, [r3, #8]
    60c6:	2201      	movs	r2, #1
    60c8:	fa02 f303 	lsl.w	r3, r2, r3
    60cc:	43db      	mvns	r3, r3
    60ce:	9a02      	ldr	r2, [sp, #8]
    60d0:	4013      	ands	r3, r2
    60d2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    60da:	2b00      	cmp	r3, #0
    60dc:	d001      	beq.n	60e2 <Port_Ci_Port_Ip_PinInit+0xba>
    60de:	2201      	movs	r2, #1
    60e0:	e000      	b.n	60e4 <Port_Ci_Port_Ip_PinInit+0xbc>
    60e2:	2200      	movs	r2, #0
    60e4:	9b01      	ldr	r3, [sp, #4]
    60e6:	689b      	ldr	r3, [r3, #8]
    60e8:	fa02 f303 	lsl.w	r3, r2, r3
    60ec:	9a02      	ldr	r2, [sp, #8]
    60ee:	4313      	orrs	r3, r2
    60f0:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	681b      	ldr	r3, [r3, #0]
    60f6:	9a02      	ldr	r2, [sp, #8]
    60f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    60fc:	f009 f9d4 	bl	f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6100:	9b04      	ldr	r3, [sp, #16]
    6102:	2b01      	cmp	r3, #1
    6104:	d16d      	bne.n	61e2 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6106:	9b01      	ldr	r3, [sp, #4]
    6108:	695b      	ldr	r3, [r3, #20]
    610a:	2b02      	cmp	r3, #2
    610c:	d138      	bne.n	6180 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    610e:	9b01      	ldr	r3, [sp, #4]
    6110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6114:	2b01      	cmp	r3, #1
    6116:	d10f      	bne.n	6138 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6118:	f009 f9ec 	bl	f4f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    611c:	9b01      	ldr	r3, [sp, #4]
    611e:	685b      	ldr	r3, [r3, #4]
    6120:	6859      	ldr	r1, [r3, #4]
    6122:	9b01      	ldr	r3, [sp, #4]
    6124:	689b      	ldr	r3, [r3, #8]
    6126:	2201      	movs	r2, #1
    6128:	409a      	lsls	r2, r3
    612a:	9b01      	ldr	r3, [sp, #4]
    612c:	685b      	ldr	r3, [r3, #4]
    612e:	430a      	orrs	r2, r1
    6130:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6132:	f009 fa0b 	bl	f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6136:	e013      	b.n	6160 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    613e:	2b00      	cmp	r3, #0
    6140:	d10e      	bne.n	6160 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6142:	f009 fa29 	bl	f598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	685b      	ldr	r3, [r3, #4]
    614a:	6899      	ldr	r1, [r3, #8]
    614c:	9b01      	ldr	r3, [sp, #4]
    614e:	689b      	ldr	r3, [r3, #8]
    6150:	2201      	movs	r2, #1
    6152:	409a      	lsls	r2, r3
    6154:	9b01      	ldr	r3, [sp, #4]
    6156:	685b      	ldr	r3, [r3, #4]
    6158:	430a      	orrs	r2, r1
    615a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    615c:	f009 fa48 	bl	f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6160:	f009 fa6c 	bl	f63c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6164:	9b01      	ldr	r3, [sp, #4]
    6166:	685b      	ldr	r3, [r3, #4]
    6168:	6959      	ldr	r1, [r3, #20]
    616a:	9b01      	ldr	r3, [sp, #4]
    616c:	689b      	ldr	r3, [r3, #8]
    616e:	2201      	movs	r2, #1
    6170:	409a      	lsls	r2, r3
    6172:	9b01      	ldr	r3, [sp, #4]
    6174:	685b      	ldr	r3, [r3, #4]
    6176:	430a      	orrs	r2, r1
    6178:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    617a:	f009 fa8b 	bl	f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    617e:	e030      	b.n	61e2 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6180:	f009 fa5c 	bl	f63c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6184:	9b01      	ldr	r3, [sp, #4]
    6186:	685b      	ldr	r3, [r3, #4]
    6188:	6959      	ldr	r1, [r3, #20]
    618a:	9b01      	ldr	r3, [sp, #4]
    618c:	689b      	ldr	r3, [r3, #8]
    618e:	2201      	movs	r2, #1
    6190:	fa02 f303 	lsl.w	r3, r2, r3
    6194:	43da      	mvns	r2, r3
    6196:	9b01      	ldr	r3, [sp, #4]
    6198:	685b      	ldr	r3, [r3, #4]
    619a:	400a      	ands	r2, r1
    619c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    619e:	f009 fa79 	bl	f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    61a2:	f009 fa9d 	bl	f6e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61a6:	9b01      	ldr	r3, [sp, #4]
    61a8:	685b      	ldr	r3, [r3, #4]
    61aa:	6999      	ldr	r1, [r3, #24]
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	689b      	ldr	r3, [r3, #8]
    61b0:	2201      	movs	r2, #1
    61b2:	fa02 f303 	lsl.w	r3, r2, r3
    61b6:	43da      	mvns	r2, r3
    61b8:	9b01      	ldr	r3, [sp, #4]
    61ba:	685b      	ldr	r3, [r3, #4]
    61bc:	400a      	ands	r2, r1
    61be:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    61c0:	9b01      	ldr	r3, [sp, #4]
    61c2:	695b      	ldr	r3, [r3, #20]
    61c4:	2b03      	cmp	r3, #3
    61c6:	d10a      	bne.n	61de <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    61c8:	9b01      	ldr	r3, [sp, #4]
    61ca:	685b      	ldr	r3, [r3, #4]
    61cc:	6999      	ldr	r1, [r3, #24]
    61ce:	9b01      	ldr	r3, [sp, #4]
    61d0:	689b      	ldr	r3, [r3, #8]
    61d2:	2201      	movs	r2, #1
    61d4:	409a      	lsls	r2, r3
    61d6:	9b01      	ldr	r3, [sp, #4]
    61d8:	685b      	ldr	r3, [r3, #4]
    61da:	430a      	orrs	r2, r1
    61dc:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    61de:	f009 faab 	bl	f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    61e2:	9b01      	ldr	r3, [sp, #4]
    61e4:	681b      	ldr	r3, [r3, #0]
    61e6:	9a01      	ldr	r2, [sp, #4]
    61e8:	6892      	ldr	r2, [r2, #8]
    61ea:	9905      	ldr	r1, [sp, #20]
    61ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    61f0:	bf00      	nop
    61f2:	b007      	add	sp, #28
    61f4:	f85d fb04 	ldr.w	pc, [sp], #4

000061f8 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    61f8:	b500      	push	{lr}
    61fa:	b085      	sub	sp, #20
    61fc:	9001      	str	r0, [sp, #4]
    61fe:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6200:	2300      	movs	r3, #0
    6202:	9303      	str	r3, [sp, #12]
    6204:	e00d      	b.n	6222 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6206:	9a03      	ldr	r2, [sp, #12]
    6208:	4613      	mov	r3, r2
    620a:	009b      	lsls	r3, r3, #2
    620c:	4413      	add	r3, r2
    620e:	00db      	lsls	r3, r3, #3
    6210:	461a      	mov	r2, r3
    6212:	9b00      	ldr	r3, [sp, #0]
    6214:	4413      	add	r3, r2
    6216:	4618      	mov	r0, r3
    6218:	f7ff ff06 	bl	6028 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    621c:	9b03      	ldr	r3, [sp, #12]
    621e:	3301      	adds	r3, #1
    6220:	9303      	str	r3, [sp, #12]
    6222:	9a03      	ldr	r2, [sp, #12]
    6224:	9b01      	ldr	r3, [sp, #4]
    6226:	429a      	cmp	r2, r3
    6228:	d3ed      	bcc.n	6206 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    622a:	2300      	movs	r3, #0
}
    622c:	4618      	mov	r0, r3
    622e:	b005      	add	sp, #20
    6230:	f85d fb04 	ldr.w	pc, [sp], #4

00006234 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6234:	b500      	push	{lr}
    6236:	b087      	sub	sp, #28
    6238:	9003      	str	r0, [sp, #12]
    623a:	9102      	str	r1, [sp, #8]
    623c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    623e:	9a01      	ldr	r2, [sp, #4]
    6240:	9902      	ldr	r1, [sp, #8]
    6242:	9803      	ldr	r0, [sp, #12]
    6244:	f7ff febc 	bl	5fc0 <Port_Ci_Port_Ip_ConfigureInterleave>
    6248:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    624a:	f009 faed 	bl	f828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    624e:	9b03      	ldr	r3, [sp, #12]
    6250:	9a02      	ldr	r2, [sp, #8]
    6252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6256:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6258:	9b04      	ldr	r3, [sp, #16]
    625a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    625e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6260:	9b05      	ldr	r3, [sp, #20]
    6262:	021b      	lsls	r3, r3, #8
    6264:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6268:	9a04      	ldr	r2, [sp, #16]
    626a:	4313      	orrs	r3, r2
    626c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    626e:	9b03      	ldr	r3, [sp, #12]
    6270:	9a02      	ldr	r2, [sp, #8]
    6272:	9904      	ldr	r1, [sp, #16]
    6274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6278:	f009 fb02 	bl	f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    627c:	bf00      	nop
    627e:	b007      	add	sp, #28
    6280:	f85d fb04 	ldr.w	pc, [sp], #4

00006284 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6284:	b500      	push	{lr}
    6286:	b083      	sub	sp, #12
    6288:	9001      	str	r0, [sp, #4]
    628a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    628c:	f009 fb1e 	bl	f8cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6290:	9b01      	ldr	r3, [sp, #4]
    6292:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6296:	2101      	movs	r1, #1
    6298:	9b00      	ldr	r3, [sp, #0]
    629a:	fa01 f303 	lsl.w	r3, r1, r3
    629e:	431a      	orrs	r2, r3
    62a0:	9b01      	ldr	r3, [sp, #4]
    62a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62a6:	f009 fb3d 	bl	f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62aa:	bf00      	nop
    62ac:	b003      	add	sp, #12
    62ae:	f85d fb04 	ldr.w	pc, [sp], #4

000062b2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62b2:	b500      	push	{lr}
    62b4:	b083      	sub	sp, #12
    62b6:	9001      	str	r0, [sp, #4]
    62b8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    62ba:	f009 fb59 	bl	f970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    62be:	9b01      	ldr	r3, [sp, #4]
    62c0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62c4:	2101      	movs	r1, #1
    62c6:	9b00      	ldr	r3, [sp, #0]
    62c8:	fa01 f303 	lsl.w	r3, r1, r3
    62cc:	43db      	mvns	r3, r3
    62ce:	401a      	ands	r2, r3
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    62d6:	f009 fb77 	bl	f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    62da:	bf00      	nop
    62dc:	b003      	add	sp, #12
    62de:	f85d fb04 	ldr.w	pc, [sp], #4

000062e2 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    62e2:	b082      	sub	sp, #8
    62e4:	9001      	str	r0, [sp, #4]
    62e6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    62e8:	9b00      	ldr	r3, [sp, #0]
    62ea:	785b      	ldrb	r3, [r3, #1]
    62ec:	f003 0201 	and.w	r2, r3, #1
    62f0:	9b01      	ldr	r3, [sp, #4]
    62f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    62f6:	9b00      	ldr	r3, [sp, #0]
    62f8:	789b      	ldrb	r3, [r3, #2]
    62fa:	f003 021f 	and.w	r2, r3, #31
    62fe:	9b01      	ldr	r3, [sp, #4]
    6300:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6304:	bf00      	nop
    6306:	b002      	add	sp, #8
    6308:	4770      	bx	lr

0000630a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    630a:	b086      	sub	sp, #24
    630c:	9003      	str	r0, [sp, #12]
    630e:	9301      	str	r3, [sp, #4]
    6310:	460b      	mov	r3, r1
    6312:	f8ad 300a 	strh.w	r3, [sp, #10]
    6316:	4613      	mov	r3, r2
    6318:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    631c:	2300      	movs	r3, #0
    631e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6322:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6326:	f043 0301 	orr.w	r3, r3, #1
    632a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    632e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6332:	f043 0302 	orr.w	r3, r3, #2
    6336:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    633a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    633e:	f043 0310 	orr.w	r3, r3, #16
    6342:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6346:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    634a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    634e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6352:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    635a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    635e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    636a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    636e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6372:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6376:	4013      	ands	r3, r2
    6378:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    637c:	9b01      	ldr	r3, [sp, #4]
    637e:	2b00      	cmp	r3, #0
    6380:	d003      	beq.n	638a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	2b01      	cmp	r3, #1
    6386:	d00a      	beq.n	639e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6388:	e013      	b.n	63b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    638a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    638e:	041a      	lsls	r2, r3, #16
    6390:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6394:	431a      	orrs	r2, r3
    6396:	9b03      	ldr	r3, [sp, #12]
    6398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    639c:	e009      	b.n	63b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    639e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63a2:	041a      	lsls	r2, r3, #16
    63a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63a8:	431a      	orrs	r2, r3
    63aa:	9b03      	ldr	r3, [sp, #12]
    63ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63b0:	bf00      	nop
    }
}
    63b2:	bf00      	nop
    63b4:	b006      	add	sp, #24
    63b6:	4770      	bx	lr

000063b8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    63b8:	b500      	push	{lr}
    63ba:	b087      	sub	sp, #28
    63bc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    63be:	9b01      	ldr	r3, [sp, #4]
    63c0:	885b      	ldrh	r3, [r3, #2]
    63c2:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    63c6:	9b01      	ldr	r3, [sp, #4]
    63c8:	689b      	ldr	r3, [r3, #8]
    63ca:	7a1b      	ldrb	r3, [r3, #8]
    63cc:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    63d0:	9b01      	ldr	r3, [sp, #4]
    63d2:	689b      	ldr	r3, [r3, #8]
    63d4:	681b      	ldr	r3, [r3, #0]
    63d6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    63d8:	9b01      	ldr	r3, [sp, #4]
    63da:	689b      	ldr	r3, [r3, #8]
    63dc:	685b      	ldr	r3, [r3, #4]
    63de:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    63e0:	2300      	movs	r3, #0
    63e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    63e6:	e111      	b.n	660c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    63e8:	9b02      	ldr	r3, [sp, #8]
    63ea:	2b02      	cmp	r3, #2
    63ec:	d169      	bne.n	64c2 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    63ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63f2:	2b01      	cmp	r3, #1
    63f4:	d11a      	bne.n	642c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63f6:	9b01      	ldr	r3, [sp, #4]
    63f8:	685a      	ldr	r2, [r3, #4]
    63fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63fe:	005b      	lsls	r3, r3, #1
    6400:	4413      	add	r3, r2
    6402:	881b      	ldrh	r3, [r3, #0]
    6404:	f003 021f 	and.w	r2, r3, #31
    6408:	9b01      	ldr	r3, [sp, #4]
    640a:	6859      	ldr	r1, [r3, #4]
    640c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6410:	005b      	lsls	r3, r3, #1
    6412:	440b      	add	r3, r1
    6414:	881b      	ldrh	r3, [r3, #0]
    6416:	095b      	lsrs	r3, r3, #5
    6418:	b29b      	uxth	r3, r3
    641a:	4619      	mov	r1, r3
    641c:	4b81      	ldr	r3, [pc, #516]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    641e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6422:	2101      	movs	r1, #1
    6424:	fa01 f202 	lsl.w	r2, r1, r2
    6428:	605a      	str	r2, [r3, #4]
    642a:	e01d      	b.n	6468 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    642c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6430:	2b00      	cmp	r3, #0
    6432:	d119      	bne.n	6468 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6434:	9b01      	ldr	r3, [sp, #4]
    6436:	685a      	ldr	r2, [r3, #4]
    6438:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    643c:	005b      	lsls	r3, r3, #1
    643e:	4413      	add	r3, r2
    6440:	881b      	ldrh	r3, [r3, #0]
    6442:	f003 021f 	and.w	r2, r3, #31
    6446:	9b01      	ldr	r3, [sp, #4]
    6448:	6859      	ldr	r1, [r3, #4]
    644a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    644e:	005b      	lsls	r3, r3, #1
    6450:	440b      	add	r3, r1
    6452:	881b      	ldrh	r3, [r3, #0]
    6454:	095b      	lsrs	r3, r3, #5
    6456:	b29b      	uxth	r3, r3
    6458:	4619      	mov	r1, r3
    645a:	4b72      	ldr	r3, [pc, #456]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    645c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6460:	2101      	movs	r1, #1
    6462:	fa01 f202 	lsl.w	r2, r1, r2
    6466:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6468:	f009 fad4 	bl	fa14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    646c:	9b01      	ldr	r3, [sp, #4]
    646e:	685a      	ldr	r2, [r3, #4]
    6470:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6474:	005b      	lsls	r3, r3, #1
    6476:	4413      	add	r3, r2
    6478:	881b      	ldrh	r3, [r3, #0]
    647a:	095b      	lsrs	r3, r3, #5
    647c:	b29b      	uxth	r3, r3
    647e:	461a      	mov	r2, r3
    6480:	4b68      	ldr	r3, [pc, #416]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    6482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6486:	6959      	ldr	r1, [r3, #20]
    6488:	9b01      	ldr	r3, [sp, #4]
    648a:	685a      	ldr	r2, [r3, #4]
    648c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6490:	005b      	lsls	r3, r3, #1
    6492:	4413      	add	r3, r2
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	f003 031f 	and.w	r3, r3, #31
    649a:	2201      	movs	r2, #1
    649c:	409a      	lsls	r2, r3
    649e:	9b01      	ldr	r3, [sp, #4]
    64a0:	6858      	ldr	r0, [r3, #4]
    64a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64a6:	005b      	lsls	r3, r3, #1
    64a8:	4403      	add	r3, r0
    64aa:	881b      	ldrh	r3, [r3, #0]
    64ac:	095b      	lsrs	r3, r3, #5
    64ae:	b29b      	uxth	r3, r3
    64b0:	4618      	mov	r0, r3
    64b2:	4b5c      	ldr	r3, [pc, #368]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    64b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64b8:	430a      	orrs	r2, r1
    64ba:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64bc:	f009 fad6 	bl	fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    64c0:	e086      	b.n	65d0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64c2:	f009 faa7 	bl	fa14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    64c6:	9b01      	ldr	r3, [sp, #4]
    64c8:	685a      	ldr	r2, [r3, #4]
    64ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ce:	005b      	lsls	r3, r3, #1
    64d0:	4413      	add	r3, r2
    64d2:	881b      	ldrh	r3, [r3, #0]
    64d4:	095b      	lsrs	r3, r3, #5
    64d6:	b29b      	uxth	r3, r3
    64d8:	461a      	mov	r2, r3
    64da:	4b52      	ldr	r3, [pc, #328]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    64dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64e0:	6959      	ldr	r1, [r3, #20]
    64e2:	9b01      	ldr	r3, [sp, #4]
    64e4:	685a      	ldr	r2, [r3, #4]
    64e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ea:	005b      	lsls	r3, r3, #1
    64ec:	4413      	add	r3, r2
    64ee:	881b      	ldrh	r3, [r3, #0]
    64f0:	f003 031f 	and.w	r3, r3, #31
    64f4:	2201      	movs	r2, #1
    64f6:	fa02 f303 	lsl.w	r3, r2, r3
    64fa:	43da      	mvns	r2, r3
    64fc:	9b01      	ldr	r3, [sp, #4]
    64fe:	6858      	ldr	r0, [r3, #4]
    6500:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6504:	005b      	lsls	r3, r3, #1
    6506:	4403      	add	r3, r0
    6508:	881b      	ldrh	r3, [r3, #0]
    650a:	095b      	lsrs	r3, r3, #5
    650c:	b29b      	uxth	r3, r3
    650e:	4618      	mov	r0, r3
    6510:	4b44      	ldr	r3, [pc, #272]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    6512:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6516:	400a      	ands	r2, r1
    6518:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    651a:	f009 faa7 	bl	fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    651e:	f009 facb 	bl	fab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6522:	9b01      	ldr	r3, [sp, #4]
    6524:	685a      	ldr	r2, [r3, #4]
    6526:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    652a:	005b      	lsls	r3, r3, #1
    652c:	4413      	add	r3, r2
    652e:	881b      	ldrh	r3, [r3, #0]
    6530:	095b      	lsrs	r3, r3, #5
    6532:	b29b      	uxth	r3, r3
    6534:	461a      	mov	r2, r3
    6536:	4b3b      	ldr	r3, [pc, #236]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    6538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    653c:	6999      	ldr	r1, [r3, #24]
    653e:	9b01      	ldr	r3, [sp, #4]
    6540:	685a      	ldr	r2, [r3, #4]
    6542:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6546:	005b      	lsls	r3, r3, #1
    6548:	4413      	add	r3, r2
    654a:	881b      	ldrh	r3, [r3, #0]
    654c:	f003 031f 	and.w	r3, r3, #31
    6550:	2201      	movs	r2, #1
    6552:	fa02 f303 	lsl.w	r3, r2, r3
    6556:	43da      	mvns	r2, r3
    6558:	9b01      	ldr	r3, [sp, #4]
    655a:	6858      	ldr	r0, [r3, #4]
    655c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6560:	005b      	lsls	r3, r3, #1
    6562:	4403      	add	r3, r0
    6564:	881b      	ldrh	r3, [r3, #0]
    6566:	095b      	lsrs	r3, r3, #5
    6568:	b29b      	uxth	r3, r3
    656a:	4618      	mov	r0, r3
    656c:	4b2d      	ldr	r3, [pc, #180]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    656e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6572:	400a      	ands	r2, r1
    6574:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6576:	9b02      	ldr	r3, [sp, #8]
    6578:	2b03      	cmp	r3, #3
    657a:	d127      	bne.n	65cc <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	685a      	ldr	r2, [r3, #4]
    6580:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6584:	005b      	lsls	r3, r3, #1
    6586:	4413      	add	r3, r2
    6588:	881b      	ldrh	r3, [r3, #0]
    658a:	095b      	lsrs	r3, r3, #5
    658c:	b29b      	uxth	r3, r3
    658e:	461a      	mov	r2, r3
    6590:	4b24      	ldr	r3, [pc, #144]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    6592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6596:	6999      	ldr	r1, [r3, #24]
    6598:	9b01      	ldr	r3, [sp, #4]
    659a:	685a      	ldr	r2, [r3, #4]
    659c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a0:	005b      	lsls	r3, r3, #1
    65a2:	4413      	add	r3, r2
    65a4:	881b      	ldrh	r3, [r3, #0]
    65a6:	f003 031f 	and.w	r3, r3, #31
    65aa:	2201      	movs	r2, #1
    65ac:	409a      	lsls	r2, r3
    65ae:	9b01      	ldr	r3, [sp, #4]
    65b0:	6858      	ldr	r0, [r3, #4]
    65b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65b6:	005b      	lsls	r3, r3, #1
    65b8:	4403      	add	r3, r0
    65ba:	881b      	ldrh	r3, [r3, #0]
    65bc:	095b      	lsrs	r3, r3, #5
    65be:	b29b      	uxth	r3, r3
    65c0:	4618      	mov	r0, r3
    65c2:	4b18      	ldr	r3, [pc, #96]	; (6624 <Port_Ipw_Init_UnusedPins+0x26c>)
    65c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65c8:	430a      	orrs	r2, r1
    65ca:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    65cc:	f009 faa0 	bl	fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    65d0:	9b01      	ldr	r3, [sp, #4]
    65d2:	685a      	ldr	r2, [r3, #4]
    65d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65d8:	005b      	lsls	r3, r3, #1
    65da:	4413      	add	r3, r2
    65dc:	881b      	ldrh	r3, [r3, #0]
    65de:	095b      	lsrs	r3, r3, #5
    65e0:	b29b      	uxth	r3, r3
    65e2:	461a      	mov	r2, r3
    65e4:	4b10      	ldr	r3, [pc, #64]	; (6628 <Port_Ipw_Init_UnusedPins+0x270>)
    65e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65ea:	9a01      	ldr	r2, [sp, #4]
    65ec:	6851      	ldr	r1, [r2, #4]
    65ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    65f2:	0052      	lsls	r2, r2, #1
    65f4:	440a      	add	r2, r1
    65f6:	8812      	ldrh	r2, [r2, #0]
    65f8:	f002 021f 	and.w	r2, r2, #31
    65fc:	9903      	ldr	r1, [sp, #12]
    65fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6602:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6606:	3301      	adds	r3, #1
    6608:	f8ad 3016 	strh.w	r3, [sp, #22]
    660c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6610:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6614:	429a      	cmp	r2, r3
    6616:	f4ff aee7 	bcc.w	63e8 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    661a:	bf00      	nop
    661c:	bf00      	nop
    661e:	b007      	add	sp, #28
    6620:	f85d fb04 	ldr.w	pc, [sp], #4
    6624:	00010f6c 	.word	0x00010f6c
    6628:	00010f58 	.word	0x00010f58

0000662c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    662c:	b500      	push	{lr}
    662e:	b085      	sub	sp, #20
    6630:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6632:	9b01      	ldr	r3, [sp, #4]
    6634:	7c1b      	ldrb	r3, [r3, #16]
    6636:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    663a:	2300      	movs	r3, #0
    663c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6640:	e035      	b.n	66ae <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6642:	9b01      	ldr	r3, [sp, #4]
    6644:	695a      	ldr	r2, [r3, #20]
    6646:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    664a:	00db      	lsls	r3, r3, #3
    664c:	4413      	add	r3, r2
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6654:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6658:	4a1f      	ldr	r2, [pc, #124]	; (66d8 <Port_Ipw_Init+0xac>)
    665a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    665e:	9b01      	ldr	r3, [sp, #4]
    6660:	695a      	ldr	r2, [r3, #20]
    6662:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6666:	00db      	lsls	r3, r3, #3
    6668:	4413      	add	r3, r2
    666a:	4619      	mov	r1, r3
    666c:	f7ff fe39 	bl	62e2 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6670:	f009 fbbc 	bl	fdec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6674:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6678:	4a17      	ldr	r2, [pc, #92]	; (66d8 <Port_Ipw_Init+0xac>)
    667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    667e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	695a      	ldr	r2, [r3, #20]
    6686:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    668a:	00db      	lsls	r3, r3, #3
    668c:	4413      	add	r3, r2
    668e:	685a      	ldr	r2, [r3, #4]
    6690:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6694:	4810      	ldr	r0, [pc, #64]	; (66d8 <Port_Ipw_Init+0xac>)
    6696:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    669a:	430a      	orrs	r2, r1
    669c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    66a0:	f009 fbd0 	bl	fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66a8:	3301      	adds	r3, #1
    66aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    66ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66b2:	b29b      	uxth	r3, r3
    66b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66b8:	429a      	cmp	r2, r3
    66ba:	d3c2      	bcc.n	6642 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    66bc:	9b01      	ldr	r3, [sp, #4]
    66be:	6a1b      	ldr	r3, [r3, #32]
    66c0:	4619      	mov	r1, r3
    66c2:	2009      	movs	r0, #9
    66c4:	f7ff fd98 	bl	61f8 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    66c8:	9801      	ldr	r0, [sp, #4]
    66ca:	f7ff fe75 	bl	63b8 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    66ce:	bf00      	nop
    66d0:	b005      	add	sp, #20
    66d2:	f85d fb04 	ldr.w	pc, [sp], #4
    66d6:	bf00      	nop
    66d8:	00010f58 	.word	0x00010f58

000066dc <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    66dc:	b500      	push	{lr}
    66de:	b085      	sub	sp, #20
    66e0:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    66e2:	9b01      	ldr	r3, [sp, #4]
    66e4:	881b      	ldrh	r3, [r3, #0]
    66e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    66ea:	2300      	movs	r3, #0
    66ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    66f0:	e0d2      	b.n	6898 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    66f2:	9b01      	ldr	r3, [sp, #4]
    66f4:	68d9      	ldr	r1, [r3, #12]
    66f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66fa:	4613      	mov	r3, r2
    66fc:	009b      	lsls	r3, r3, #2
    66fe:	4413      	add	r3, r2
    6700:	009b      	lsls	r3, r3, #2
    6702:	440b      	add	r3, r1
    6704:	7c5b      	ldrb	r3, [r3, #17]
    6706:	f083 0301 	eor.w	r3, r3, #1
    670a:	b2db      	uxtb	r3, r3
    670c:	2b00      	cmp	r3, #0
    670e:	f000 80be 	beq.w	688e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6712:	9b01      	ldr	r3, [sp, #4]
    6714:	68d9      	ldr	r1, [r3, #12]
    6716:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    671a:	4613      	mov	r3, r2
    671c:	009b      	lsls	r3, r3, #2
    671e:	4413      	add	r3, r2
    6720:	009b      	lsls	r3, r3, #2
    6722:	440b      	add	r3, r1
    6724:	7c1b      	ldrb	r3, [r3, #16]
    6726:	2b00      	cmp	r3, #0
    6728:	f000 80b1 	beq.w	688e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    672c:	9b01      	ldr	r3, [sp, #4]
    672e:	68d9      	ldr	r1, [r3, #12]
    6730:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6734:	4613      	mov	r3, r2
    6736:	009b      	lsls	r3, r3, #2
    6738:	4413      	add	r3, r2
    673a:	009b      	lsls	r3, r3, #2
    673c:	440b      	add	r3, r1
    673e:	881b      	ldrh	r3, [r3, #0]
    6740:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6744:	9b01      	ldr	r3, [sp, #4]
    6746:	68d9      	ldr	r1, [r3, #12]
    6748:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    674c:	4613      	mov	r3, r2
    674e:	009b      	lsls	r3, r3, #2
    6750:	4413      	add	r3, r2
    6752:	009b      	lsls	r3, r3, #2
    6754:	440b      	add	r3, r1
    6756:	68db      	ldr	r3, [r3, #12]
    6758:	2b02      	cmp	r3, #2
    675a:	d11d      	bne.n	6798 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    675c:	f009 fc8e 	bl	1007c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6760:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6764:	095b      	lsrs	r3, r3, #5
    6766:	b29b      	uxth	r3, r3
    6768:	461a      	mov	r2, r3
    676a:	4b51      	ldr	r3, [pc, #324]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6770:	6959      	ldr	r1, [r3, #20]
    6772:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6776:	f003 031f 	and.w	r3, r3, #31
    677a:	2201      	movs	r2, #1
    677c:	409a      	lsls	r2, r3
    677e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6782:	095b      	lsrs	r3, r3, #5
    6784:	b29b      	uxth	r3, r3
    6786:	4618      	mov	r0, r3
    6788:	4b49      	ldr	r3, [pc, #292]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    678a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    678e:	430a      	orrs	r2, r1
    6790:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6792:	f009 fc9f 	bl	100d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6796:	e07a      	b.n	688e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	68d9      	ldr	r1, [r3, #12]
    679c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67a0:	4613      	mov	r3, r2
    67a2:	009b      	lsls	r3, r3, #2
    67a4:	4413      	add	r3, r2
    67a6:	009b      	lsls	r3, r3, #2
    67a8:	440b      	add	r3, r1
    67aa:	68db      	ldr	r3, [r3, #12]
    67ac:	2b01      	cmp	r3, #1
    67ae:	d00b      	beq.n	67c8 <Port_Ipw_RefreshPortDirection+0xec>
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	68d9      	ldr	r1, [r3, #12]
    67b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67b8:	4613      	mov	r3, r2
    67ba:	009b      	lsls	r3, r3, #2
    67bc:	4413      	add	r3, r2
    67be:	009b      	lsls	r3, r3, #2
    67c0:	440b      	add	r3, r1
    67c2:	68db      	ldr	r3, [r3, #12]
    67c4:	2b03      	cmp	r3, #3
    67c6:	d162      	bne.n	688e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67c8:	f009 fc58 	bl	1007c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67d0:	095b      	lsrs	r3, r3, #5
    67d2:	b29b      	uxth	r3, r3
    67d4:	461a      	mov	r2, r3
    67d6:	4b36      	ldr	r3, [pc, #216]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67dc:	6959      	ldr	r1, [r3, #20]
    67de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e2:	f003 031f 	and.w	r3, r3, #31
    67e6:	2201      	movs	r2, #1
    67e8:	fa02 f303 	lsl.w	r3, r2, r3
    67ec:	43da      	mvns	r2, r3
    67ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67f2:	095b      	lsrs	r3, r3, #5
    67f4:	b29b      	uxth	r3, r3
    67f6:	4618      	mov	r0, r3
    67f8:	4b2d      	ldr	r3, [pc, #180]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67fe:	400a      	ands	r2, r1
    6800:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6802:	f009 fc67 	bl	100d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6806:	f009 fc8b 	bl	10120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    680a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    680e:	095b      	lsrs	r3, r3, #5
    6810:	b29b      	uxth	r3, r3
    6812:	461a      	mov	r2, r3
    6814:	4b26      	ldr	r3, [pc, #152]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    681a:	6999      	ldr	r1, [r3, #24]
    681c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6820:	f003 031f 	and.w	r3, r3, #31
    6824:	2201      	movs	r2, #1
    6826:	fa02 f303 	lsl.w	r3, r2, r3
    682a:	43da      	mvns	r2, r3
    682c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6830:	095b      	lsrs	r3, r3, #5
    6832:	b29b      	uxth	r3, r3
    6834:	4618      	mov	r0, r3
    6836:	4b1e      	ldr	r3, [pc, #120]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6838:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    683c:	400a      	ands	r2, r1
    683e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6840:	9b01      	ldr	r3, [sp, #4]
    6842:	68d9      	ldr	r1, [r3, #12]
    6844:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6848:	4613      	mov	r3, r2
    684a:	009b      	lsls	r3, r3, #2
    684c:	4413      	add	r3, r2
    684e:	009b      	lsls	r3, r3, #2
    6850:	440b      	add	r3, r1
    6852:	68db      	ldr	r3, [r3, #12]
    6854:	2b03      	cmp	r3, #3
    6856:	d118      	bne.n	688a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6858:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    685c:	095b      	lsrs	r3, r3, #5
    685e:	b29b      	uxth	r3, r3
    6860:	461a      	mov	r2, r3
    6862:	4b13      	ldr	r3, [pc, #76]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6868:	6999      	ldr	r1, [r3, #24]
    686a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    686e:	f003 031f 	and.w	r3, r3, #31
    6872:	2201      	movs	r2, #1
    6874:	409a      	lsls	r2, r3
    6876:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    687a:	095b      	lsrs	r3, r3, #5
    687c:	b29b      	uxth	r3, r3
    687e:	4618      	mov	r0, r3
    6880:	4b0b      	ldr	r3, [pc, #44]	; (68b0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6882:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6886:	430a      	orrs	r2, r1
    6888:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    688a:	f009 fc75 	bl	10178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    688e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6892:	3301      	adds	r3, #1
    6894:	f8ad 300e 	strh.w	r3, [sp, #14]
    6898:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    689c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    68a0:	429a      	cmp	r2, r3
    68a2:	f4ff af26 	bcc.w	66f2 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68a6:	bf00      	nop
    68a8:	bf00      	nop
    68aa:	b005      	add	sp, #20
    68ac:	f85d fb04 	ldr.w	pc, [sp], #4
    68b0:	00010f6c 	.word	0x00010f6c

000068b4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    68b4:	b500      	push	{lr}
    68b6:	b085      	sub	sp, #20
    68b8:	4603      	mov	r3, r0
    68ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    68be:	2300      	movs	r3, #0
    68c0:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    68c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68c8:	4618      	mov	r0, r3
    68ca:	f000 f871 	bl	69b0 <Dio_Ipw_ReadChannel>
    68ce:	4603      	mov	r3, r0
    68d0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    68d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    68d8:	4618      	mov	r0, r3
    68da:	b005      	add	sp, #20
    68dc:	f85d fb04 	ldr.w	pc, [sp], #4

000068e0 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    68e0:	b500      	push	{lr}
    68e2:	b083      	sub	sp, #12
    68e4:	4603      	mov	r3, r0
    68e6:	460a      	mov	r2, r1
    68e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    68ec:	4613      	mov	r3, r2
    68ee:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    68f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    68f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68fa:	4611      	mov	r1, r2
    68fc:	4618      	mov	r0, r3
    68fe:	f000 f87d 	bl	69fc <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6902:	bf00      	nop
    6904:	b003      	add	sp, #12
    6906:	f85d fb04 	ldr.w	pc, [sp], #4

0000690a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    690a:	b500      	push	{lr}
    690c:	b085      	sub	sp, #20
    690e:	4603      	mov	r3, r0
    6910:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6914:	2300      	movs	r3, #0
    6916:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    691a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    691e:	4618      	mov	r0, r3
    6920:	f000 f892 	bl	6a48 <Dio_Ipw_FlipChannel>
    6924:	4603      	mov	r3, r0
    6926:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    692a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    692e:	4618      	mov	r0, r3
    6930:	b005      	add	sp, #20
    6932:	f85d fb04 	ldr.w	pc, [sp], #4

00006936 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6936:	b500      	push	{lr}
    6938:	b085      	sub	sp, #20
    693a:	4603      	mov	r3, r0
    693c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6940:	2300      	movs	r3, #0
    6942:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6944:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6948:	4618      	mov	r0, r3
    694a:	f000 f8b3 	bl	6ab4 <Dio_Ipw_ReadPort>
    694e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6950:	9b03      	ldr	r3, [sp, #12]
}
    6952:	4618      	mov	r0, r3
    6954:	b005      	add	sp, #20
    6956:	f85d fb04 	ldr.w	pc, [sp], #4

0000695a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    695a:	b500      	push	{lr}
    695c:	b083      	sub	sp, #12
    695e:	4603      	mov	r3, r0
    6960:	9100      	str	r1, [sp, #0]
    6962:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6966:	f89d 3007 	ldrb.w	r3, [sp, #7]
    696a:	9900      	ldr	r1, [sp, #0]
    696c:	4618      	mov	r0, r3
    696e:	f000 f8b9 	bl	6ae4 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6972:	bf00      	nop
    6974:	b003      	add	sp, #12
    6976:	f85d fb04 	ldr.w	pc, [sp], #4

0000697a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    697a:	b500      	push	{lr}
    697c:	b085      	sub	sp, #20
    697e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6980:	2300      	movs	r3, #0
    6982:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6984:	9801      	ldr	r0, [sp, #4]
    6986:	f000 f8c5 	bl	6b14 <Dio_Ipw_ReadChannelGroup>
    698a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    698c:	9b03      	ldr	r3, [sp, #12]
}
    698e:	4618      	mov	r0, r3
    6990:	b005      	add	sp, #20
    6992:	f85d fb04 	ldr.w	pc, [sp], #4

00006996 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6996:	b500      	push	{lr}
    6998:	b083      	sub	sp, #12
    699a:	9001      	str	r0, [sp, #4]
    699c:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    699e:	9900      	ldr	r1, [sp, #0]
    69a0:	9801      	ldr	r0, [sp, #4]
    69a2:	f000 f8d7 	bl	6b54 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    69a6:	bf00      	nop
    69a8:	b003      	add	sp, #12
    69aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000069b0 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    69b0:	b500      	push	{lr}
    69b2:	b087      	sub	sp, #28
    69b4:	4603      	mov	r3, r0
    69b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    69ba:	2300      	movs	r3, #0
    69bc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    69c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69c4:	095b      	lsrs	r3, r3, #5
    69c6:	b29b      	uxth	r3, r3
    69c8:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    69ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69ce:	f003 031f 	and.w	r3, r3, #31
    69d2:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    69d4:	4a08      	ldr	r2, [pc, #32]	; (69f8 <Dio_Ipw_ReadChannel+0x48>)
    69d6:	9b04      	ldr	r3, [sp, #16]
    69d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69dc:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    69de:	9903      	ldr	r1, [sp, #12]
    69e0:	9802      	ldr	r0, [sp, #8]
    69e2:	f000 f940 	bl	6c66 <Gpio_Dio_Ip_ReadPin>
    69e6:	4603      	mov	r3, r0
    69e8:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    69ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    69f0:	4618      	mov	r0, r3
    69f2:	b007      	add	sp, #28
    69f4:	f85d fb04 	ldr.w	pc, [sp], #4
    69f8:	1fff8b24 	.word	0x1fff8b24

000069fc <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    69fc:	b500      	push	{lr}
    69fe:	b087      	sub	sp, #28
    6a00:	4603      	mov	r3, r0
    6a02:	460a      	mov	r2, r1
    6a04:	f8ad 3006 	strh.w	r3, [sp, #6]
    6a08:	4613      	mov	r3, r2
    6a0a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6a0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a12:	095b      	lsrs	r3, r3, #5
    6a14:	b29b      	uxth	r3, r3
    6a16:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6a18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a1c:	f003 031f 	and.w	r3, r3, #31
    6a20:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6a22:	4a08      	ldr	r2, [pc, #32]	; (6a44 <Dio_Ipw_WriteChannel+0x48>)
    6a24:	9b05      	ldr	r3, [sp, #20]
    6a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a2a:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6a2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6a30:	461a      	mov	r2, r3
    6a32:	9904      	ldr	r1, [sp, #16]
    6a34:	9803      	ldr	r0, [sp, #12]
    6a36:	f000 f8b7 	bl	6ba8 <Gpio_Dio_Ip_WritePin>
}
    6a3a:	bf00      	nop
    6a3c:	b007      	add	sp, #28
    6a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6a42:	bf00      	nop
    6a44:	1fff8b24 	.word	0x1fff8b24

00006a48 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6a48:	b500      	push	{lr}
    6a4a:	b089      	sub	sp, #36	; 0x24
    6a4c:	4603      	mov	r3, r0
    6a4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6a52:	2300      	movs	r3, #0
    6a54:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6a58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a5c:	095b      	lsrs	r3, r3, #5
    6a5e:	b29b      	uxth	r3, r3
    6a60:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6a62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a66:	f003 031f 	and.w	r3, r3, #31
    6a6a:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6a6c:	4a10      	ldr	r2, [pc, #64]	; (6ab0 <Dio_Ipw_FlipChannel+0x68>)
    6a6e:	9b06      	ldr	r3, [sp, #24]
    6a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a74:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6a76:	2201      	movs	r2, #1
    6a78:	9b05      	ldr	r3, [sp, #20]
    6a7a:	fa02 f303 	lsl.w	r3, r2, r3
    6a7e:	4619      	mov	r1, r3
    6a80:	9804      	ldr	r0, [sp, #16]
    6a82:	f000 f8dc 	bl	6c3e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6a86:	9804      	ldr	r0, [sp, #16]
    6a88:	f000 f8bc 	bl	6c04 <Gpio_Dio_Ip_GetPinsOutput>
    6a8c:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6a8e:	2201      	movs	r2, #1
    6a90:	9b05      	ldr	r3, [sp, #20]
    6a92:	409a      	lsls	r2, r3
    6a94:	9b03      	ldr	r3, [sp, #12]
    6a96:	401a      	ands	r2, r3
    6a98:	9b05      	ldr	r3, [sp, #20]
    6a9a:	fa22 f303 	lsr.w	r3, r2, r3
    6a9e:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6aa2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6aa6:	4618      	mov	r0, r3
    6aa8:	b009      	add	sp, #36	; 0x24
    6aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    6aae:	bf00      	nop
    6ab0:	1fff8b24 	.word	0x1fff8b24

00006ab4 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6ab4:	b500      	push	{lr}
    6ab6:	b085      	sub	sp, #20
    6ab8:	4603      	mov	r3, r0
    6aba:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6abe:	2300      	movs	r3, #0
    6ac0:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ac6:	4a06      	ldr	r2, [pc, #24]	; (6ae0 <Dio_Ipw_ReadPort+0x2c>)
    6ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6acc:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6ace:	9802      	ldr	r0, [sp, #8]
    6ad0:	f000 f8be 	bl	6c50 <Gpio_Dio_Ip_ReadPins>
    6ad4:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6ad6:	9b03      	ldr	r3, [sp, #12]
}
    6ad8:	4618      	mov	r0, r3
    6ada:	b005      	add	sp, #20
    6adc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae0:	1fff8b24 	.word	0x1fff8b24

00006ae4 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6ae4:	b500      	push	{lr}
    6ae6:	b085      	sub	sp, #20
    6ae8:	4603      	mov	r3, r0
    6aea:	9100      	str	r1, [sp, #0]
    6aec:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6af0:	9b00      	ldr	r3, [sp, #0]
    6af2:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6af8:	4a05      	ldr	r2, [pc, #20]	; (6b10 <Dio_Ipw_WritePort+0x2c>)
    6afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6afe:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6b00:	9903      	ldr	r1, [sp, #12]
    6b02:	9802      	ldr	r0, [sp, #8]
    6b04:	f000 f875 	bl	6bf2 <Gpio_Dio_Ip_WritePins>
}
    6b08:	bf00      	nop
    6b0a:	b005      	add	sp, #20
    6b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    6b10:	1fff8b24 	.word	0x1fff8b24

00006b14 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6b14:	b500      	push	{lr}
    6b16:	b087      	sub	sp, #28
    6b18:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6b1a:	2300      	movs	r3, #0
    6b1c:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6b1e:	9b01      	ldr	r3, [sp, #4]
    6b20:	781b      	ldrb	r3, [r3, #0]
    6b22:	461a      	mov	r2, r3
    6b24:	4b0a      	ldr	r3, [pc, #40]	; (6b50 <Dio_Ipw_ReadChannelGroup+0x3c>)
    6b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b2a:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6b2c:	9804      	ldr	r0, [sp, #16]
    6b2e:	f000 f88f 	bl	6c50 <Gpio_Dio_Ip_ReadPins>
    6b32:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6b34:	9b01      	ldr	r3, [sp, #4]
    6b36:	685a      	ldr	r2, [r3, #4]
    6b38:	9b03      	ldr	r3, [sp, #12]
    6b3a:	4013      	ands	r3, r2
    6b3c:	9a01      	ldr	r2, [sp, #4]
    6b3e:	7852      	ldrb	r2, [r2, #1]
    6b40:	40d3      	lsrs	r3, r2
    6b42:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6b44:	9b05      	ldr	r3, [sp, #20]
}
    6b46:	4618      	mov	r0, r3
    6b48:	b007      	add	sp, #28
    6b4a:	f85d fb04 	ldr.w	pc, [sp], #4
    6b4e:	bf00      	nop
    6b50:	1fff8b24 	.word	0x1fff8b24

00006b54 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6b54:	b500      	push	{lr}
    6b56:	b087      	sub	sp, #28
    6b58:	9001      	str	r0, [sp, #4]
    6b5a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6b5c:	9b01      	ldr	r3, [sp, #4]
    6b5e:	781b      	ldrb	r3, [r3, #0]
    6b60:	461a      	mov	r2, r3
    6b62:	4b10      	ldr	r3, [pc, #64]	; (6ba4 <Dio_Ipw_WriteChannelGroup+0x50>)
    6b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b68:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6b6a:	9b01      	ldr	r3, [sp, #4]
    6b6c:	785b      	ldrb	r3, [r3, #1]
    6b6e:	461a      	mov	r2, r3
    6b70:	9b00      	ldr	r3, [sp, #0]
    6b72:	fa03 f202 	lsl.w	r2, r3, r2
    6b76:	9b01      	ldr	r3, [sp, #4]
    6b78:	685b      	ldr	r3, [r3, #4]
    6b7a:	4013      	ands	r3, r2
    6b7c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6b7e:	9904      	ldr	r1, [sp, #16]
    6b80:	9805      	ldr	r0, [sp, #20]
    6b82:	f000 f84a 	bl	6c1a <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6b86:	9b04      	ldr	r3, [sp, #16]
    6b88:	43da      	mvns	r2, r3
    6b8a:	9b01      	ldr	r3, [sp, #4]
    6b8c:	685b      	ldr	r3, [r3, #4]
    6b8e:	4013      	ands	r3, r2
    6b90:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6b92:	9903      	ldr	r1, [sp, #12]
    6b94:	9805      	ldr	r0, [sp, #20]
    6b96:	f000 f849 	bl	6c2c <Gpio_Dio_Ip_ClearPins>

}
    6b9a:	bf00      	nop
    6b9c:	b007      	add	sp, #28
    6b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    6ba2:	bf00      	nop
    6ba4:	1fff8b24 	.word	0x1fff8b24

00006ba8 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6ba8:	b500      	push	{lr}
    6baa:	b087      	sub	sp, #28
    6bac:	9003      	str	r0, [sp, #12]
    6bae:	9102      	str	r1, [sp, #8]
    6bb0:	4613      	mov	r3, r2
    6bb2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6bb6:	f008 fab1 	bl	f11c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6bba:	9b03      	ldr	r3, [sp, #12]
    6bbc:	681b      	ldr	r3, [r3, #0]
    6bbe:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6bc0:	2201      	movs	r2, #1
    6bc2:	9b02      	ldr	r3, [sp, #8]
    6bc4:	fa02 f303 	lsl.w	r3, r2, r3
    6bc8:	43db      	mvns	r3, r3
    6bca:	9a05      	ldr	r2, [sp, #20]
    6bcc:	4013      	ands	r3, r2
    6bce:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6bd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6bd4:	9b02      	ldr	r3, [sp, #8]
    6bd6:	fa02 f303 	lsl.w	r3, r2, r3
    6bda:	9a05      	ldr	r2, [sp, #20]
    6bdc:	4313      	orrs	r3, r2
    6bde:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6be0:	9b03      	ldr	r3, [sp, #12]
    6be2:	9a05      	ldr	r2, [sp, #20]
    6be4:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6be6:	f008 fac5 	bl	f174 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6bea:	bf00      	nop
    6bec:	b007      	add	sp, #28
    6bee:	f85d fb04 	ldr.w	pc, [sp], #4

00006bf2 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6bf2:	b082      	sub	sp, #8
    6bf4:	9001      	str	r0, [sp, #4]
    6bf6:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6bf8:	9b01      	ldr	r3, [sp, #4]
    6bfa:	9a00      	ldr	r2, [sp, #0]
    6bfc:	601a      	str	r2, [r3, #0]
}
    6bfe:	bf00      	nop
    6c00:	b002      	add	sp, #8
    6c02:	4770      	bx	lr

00006c04 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6c04:	b084      	sub	sp, #16
    6c06:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6c08:	2300      	movs	r3, #0
    6c0a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6c0c:	9b01      	ldr	r3, [sp, #4]
    6c0e:	681b      	ldr	r3, [r3, #0]
    6c10:	9303      	str	r3, [sp, #12]
    return returnValue;
    6c12:	9b03      	ldr	r3, [sp, #12]
}
    6c14:	4618      	mov	r0, r3
    6c16:	b004      	add	sp, #16
    6c18:	4770      	bx	lr

00006c1a <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c1a:	b082      	sub	sp, #8
    6c1c:	9001      	str	r0, [sp, #4]
    6c1e:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6c20:	9b01      	ldr	r3, [sp, #4]
    6c22:	9a00      	ldr	r2, [sp, #0]
    6c24:	605a      	str	r2, [r3, #4]
}
    6c26:	bf00      	nop
    6c28:	b002      	add	sp, #8
    6c2a:	4770      	bx	lr

00006c2c <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c2c:	b082      	sub	sp, #8
    6c2e:	9001      	str	r0, [sp, #4]
    6c30:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6c32:	9b01      	ldr	r3, [sp, #4]
    6c34:	9a00      	ldr	r2, [sp, #0]
    6c36:	609a      	str	r2, [r3, #8]
}
    6c38:	bf00      	nop
    6c3a:	b002      	add	sp, #8
    6c3c:	4770      	bx	lr

00006c3e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6c3e:	b082      	sub	sp, #8
    6c40:	9001      	str	r0, [sp, #4]
    6c42:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	9a00      	ldr	r2, [sp, #0]
    6c48:	60da      	str	r2, [r3, #12]
}
    6c4a:	bf00      	nop
    6c4c:	b002      	add	sp, #8
    6c4e:	4770      	bx	lr

00006c50 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6c50:	b084      	sub	sp, #16
    6c52:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6c54:	2300      	movs	r3, #0
    6c56:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6c58:	9b01      	ldr	r3, [sp, #4]
    6c5a:	691b      	ldr	r3, [r3, #16]
    6c5c:	9303      	str	r3, [sp, #12]
    return returnValue;
    6c5e:	9b03      	ldr	r3, [sp, #12]
}
    6c60:	4618      	mov	r0, r3
    6c62:	b004      	add	sp, #16
    6c64:	4770      	bx	lr

00006c66 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6c66:	b084      	sub	sp, #16
    6c68:	9001      	str	r0, [sp, #4]
    6c6a:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6c6c:	2300      	movs	r3, #0
    6c6e:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6c72:	9b01      	ldr	r3, [sp, #4]
    6c74:	691a      	ldr	r2, [r3, #16]
    6c76:	2101      	movs	r1, #1
    6c78:	9b00      	ldr	r3, [sp, #0]
    6c7a:	fa01 f303 	lsl.w	r3, r1, r3
    6c7e:	401a      	ands	r2, r3
    6c80:	9b00      	ldr	r3, [sp, #0]
    6c82:	fa22 f303 	lsr.w	r3, r2, r3
    6c86:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6c8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c8e:	4618      	mov	r0, r3
    6c90:	b004      	add	sp, #16
    6c92:	4770      	bx	lr

00006c94 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    6c94:	b500      	push	{lr}
    6c96:	b083      	sub	sp, #12
    6c98:	4603      	mov	r3, r0
    6c9a:	460a      	mov	r2, r1
    6c9c:	f88d 3007 	strb.w	r3, [sp, #7]
    6ca0:	4613      	mov	r3, r2
    6ca2:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    6ca6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6caa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6cae:	2100      	movs	r1, #0
    6cb0:	207b      	movs	r0, #123	; 0x7b
    6cb2:	f009 fd01 	bl	106b8 <Det_ReportRuntimeError>
}
    6cb6:	bf00      	nop
    6cb8:	b003      	add	sp, #12
    6cba:	f85d fb04 	ldr.w	pc, [sp], #4

00006cbe <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6cbe:	b500      	push	{lr}
    6cc0:	b085      	sub	sp, #20
    6cc2:	4603      	mov	r3, r0
    6cc4:	460a      	mov	r2, r1
    6cc6:	f88d 3007 	strb.w	r3, [sp, #7]
    6cca:	4613      	mov	r3, r2
    6ccc:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6cd0:	2300      	movs	r3, #0
    6cd2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6cd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6cda:	490e      	ldr	r1, [pc, #56]	; (6d14 <Adc_ValidateNotBusyNoQueue+0x56>)
    6cdc:	4613      	mov	r3, r2
    6cde:	005b      	lsls	r3, r3, #1
    6ce0:	4413      	add	r3, r2
    6ce2:	005b      	lsls	r3, r3, #1
    6ce4:	440b      	add	r3, r1
    6ce6:	881b      	ldrh	r3, [r3, #0]
    6ce8:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6cec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d008      	beq.n	6d06 <Adc_ValidateNotBusyNoQueue+0x48>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6cf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6cf8:	210b      	movs	r1, #11
    6cfa:	4618      	mov	r0, r3
    6cfc:	f7ff ffca 	bl	6c94 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6d00:	2301      	movs	r3, #1
    6d02:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6d06:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6d0a:	4618      	mov	r0, r3
    6d0c:	b005      	add	sp, #20
    6d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d12:	bf00      	nop
    6d14:	1fff8d20 	.word	0x1fff8d20

00006d18 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    6d18:	b500      	push	{lr}
    6d1a:	b085      	sub	sp, #20
    6d1c:	4603      	mov	r3, r0
    6d1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    6d22:	460b      	mov	r3, r1
    6d24:	f88d 3005 	strb.w	r3, [sp, #5]
    6d28:	4613      	mov	r3, r2
    6d2a:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6d2e:	2301      	movs	r3, #1
    6d30:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    6d34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6d38:	4917      	ldr	r1, [pc, #92]	; (6d98 <Adc_ValidateNotBusyNoPrio+0x80>)
    6d3a:	4613      	mov	r3, r2
    6d3c:	005b      	lsls	r3, r3, #1
    6d3e:	4413      	add	r3, r2
    6d40:	00db      	lsls	r3, r3, #3
    6d42:	440b      	add	r3, r1
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    6d48:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6d4c:	f083 0301 	eor.w	r3, r3, #1
    6d50:	b2db      	uxtb	r3, r3
    6d52:	2b00      	cmp	r3, #0
    6d54:	d007      	beq.n	6d66 <Adc_ValidateNotBusyNoPrio+0x4e>
    6d56:	9b02      	ldr	r3, [sp, #8]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d004      	beq.n	6d66 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6d5c:	210b      	movs	r1, #11
    6d5e:	2002      	movs	r0, #2
    6d60:	f7ff ff98 	bl	6c94 <Adc_ReportDetRuntimeError>
    6d64:	e011      	b.n	6d8a <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    6d66:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d00a      	beq.n	6d84 <Adc_ValidateNotBusyNoPrio+0x6c>
    6d6e:	9b02      	ldr	r3, [sp, #8]
    6d70:	2b00      	cmp	r3, #0
    6d72:	d007      	beq.n	6d84 <Adc_ValidateNotBusyNoPrio+0x6c>
    6d74:	9b02      	ldr	r3, [sp, #8]
    6d76:	2b03      	cmp	r3, #3
    6d78:	d004      	beq.n	6d84 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6d7a:	210b      	movs	r1, #11
    6d7c:	2002      	movs	r0, #2
    6d7e:	f7ff ff89 	bl	6c94 <Adc_ReportDetRuntimeError>
    6d82:	e002      	b.n	6d8a <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6d84:	2300      	movs	r3, #0
    6d86:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    6d8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6d8e:	4618      	mov	r0, r3
    6d90:	b005      	add	sp, #20
    6d92:	f85d fb04 	ldr.w	pc, [sp], #4
    6d96:	bf00      	nop
    6d98:	1fff8d08 	.word	0x1fff8d08

00006d9c <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    6d9c:	b500      	push	{lr}
    6d9e:	b087      	sub	sp, #28
    6da0:	4603      	mov	r3, r0
    6da2:	460a      	mov	r2, r1
    6da4:	f88d 3007 	strb.w	r3, [sp, #7]
    6da8:	4613      	mov	r3, r2
    6daa:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6dae:	2300      	movs	r3, #0
    6db0:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6db4:	2300      	movs	r3, #0
    6db6:	f8ad 3016 	strh.w	r3, [sp, #22]
    6dba:	e02d      	b.n	6e18 <Adc_ValidateCheckGroupNotConversion+0x7c>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    6dbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dc0:	4a1d      	ldr	r2, [pc, #116]	; (6e38 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dc6:	6859      	ldr	r1, [r3, #4]
    6dc8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6dcc:	4613      	mov	r3, r2
    6dce:	00db      	lsls	r3, r3, #3
    6dd0:	1a9b      	subs	r3, r3, r2
    6dd2:	00db      	lsls	r3, r3, #3
    6dd4:	440b      	add	r3, r1
    6dd6:	881b      	ldrh	r3, [r3, #0]
    6dd8:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6ddc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6de0:	4916      	ldr	r1, [pc, #88]	; (6e3c <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6de2:	4613      	mov	r3, r2
    6de4:	005b      	lsls	r3, r3, #1
    6de6:	4413      	add	r3, r2
    6de8:	00db      	lsls	r3, r3, #3
    6dea:	440b      	add	r3, r1
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6df0:	9b03      	ldr	r3, [sp, #12]
    6df2:	2b00      	cmp	r3, #0
    6df4:	d00b      	beq.n	6e0e <Adc_ValidateCheckGroupNotConversion+0x72>
    6df6:	9b03      	ldr	r3, [sp, #12]
    6df8:	2b03      	cmp	r3, #3
    6dfa:	d008      	beq.n	6e0e <Adc_ValidateCheckGroupNotConversion+0x72>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e00:	210b      	movs	r1, #11
    6e02:	4618      	mov	r0, r3
    6e04:	f7ff ff46 	bl	6c94 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    6e08:	2301      	movs	r3, #1
    6e0a:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6e0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6e12:	3301      	adds	r3, #1
    6e14:	f8ad 3016 	strh.w	r3, [sp, #22]
    6e18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e1c:	4a06      	ldr	r2, [pc, #24]	; (6e38 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e22:	891b      	ldrh	r3, [r3, #8]
    6e24:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6e28:	429a      	cmp	r2, r3
    6e2a:	d3c7      	bcc.n	6dbc <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    6e2c:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    6e30:	4618      	mov	r0, r3
    6e32:	b007      	add	sp, #28
    6e34:	f85d fb04 	ldr.w	pc, [sp], #4
    6e38:	1fff8d04 	.word	0x1fff8d04
    6e3c:	1fff8d08 	.word	0x1fff8d08

00006e40 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    6e40:	b500      	push	{lr}
    6e42:	b085      	sub	sp, #20
    6e44:	4603      	mov	r3, r0
    6e46:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6e4a:	2300      	movs	r3, #0
    6e4c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6e50:	2301      	movs	r3, #1
    6e52:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6e56:	2300      	movs	r3, #0
    6e58:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e5c:	2300      	movs	r3, #0
    6e5e:	f88d 300d 	strb.w	r3, [sp, #13]
    6e62:	e01d      	b.n	6ea0 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6e64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e68:	4a1b      	ldr	r2, [pc, #108]	; (6ed8 <Adc_ValidateDeInitNotBusy+0x98>)
    6e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e6e:	681a      	ldr	r2, [r3, #0]
    6e70:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6e74:	4413      	add	r3, r2
    6e76:	7f9b      	ldrb	r3, [r3, #30]
    6e78:	2b01      	cmp	r3, #1
    6e7a:	d10c      	bne.n	6e96 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6e7c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6e80:	2101      	movs	r1, #1
    6e82:	4618      	mov	r0, r3
    6e84:	f7ff ff1b 	bl	6cbe <Adc_ValidateNotBusyNoQueue>
    6e88:	4603      	mov	r3, r0
    6e8a:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6e8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e92:	2b01      	cmp	r3, #1
    6e94:	d009      	beq.n	6eaa <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e96:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6e9a:	3301      	adds	r3, #1
    6e9c:	f88d 300d 	strb.w	r3, [sp, #13]
    6ea0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ea4:	2b01      	cmp	r3, #1
    6ea6:	d9dd      	bls.n	6e64 <Adc_ValidateDeInitNotBusy+0x24>
    6ea8:	e000      	b.n	6eac <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6eaa:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6eac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d10b      	bne.n	6ecc <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6eb8:	4619      	mov	r1, r3
    6eba:	2001      	movs	r0, #1
    6ebc:	f7ff ff6e 	bl	6d9c <Adc_ValidateCheckGroupNotConversion>
    6ec0:	4603      	mov	r3, r0
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d102      	bne.n	6ecc <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6ec6:	2300      	movs	r3, #0
    6ec8:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6ecc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6ed0:	4618      	mov	r0, r3
    6ed2:	b005      	add	sp, #20
    6ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ed8:	1fff8d04 	.word	0x1fff8d04

00006edc <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6edc:	b500      	push	{lr}
    6ede:	b085      	sub	sp, #20
    6ee0:	4603      	mov	r3, r0
    6ee2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6ee6:	2301      	movs	r3, #1
    6ee8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6eec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ef0:	490b      	ldr	r1, [pc, #44]	; (6f20 <Adc_ValidateSetupBufferNotBusy+0x44>)
    6ef2:	4613      	mov	r3, r2
    6ef4:	005b      	lsls	r3, r3, #1
    6ef6:	4413      	add	r3, r2
    6ef8:	00db      	lsls	r3, r3, #3
    6efa:	440b      	add	r3, r1
    6efc:	681b      	ldr	r3, [r3, #0]
    6efe:	2b00      	cmp	r3, #0
    6f00:	d004      	beq.n	6f0c <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6f02:	210b      	movs	r1, #11
    6f04:	200c      	movs	r0, #12
    6f06:	f7ff fec5 	bl	6c94 <Adc_ReportDetRuntimeError>
    6f0a:	e002      	b.n	6f12 <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6f0c:	2300      	movs	r3, #0
    6f0e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6f12:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f16:	4618      	mov	r0, r3
    6f18:	b005      	add	sp, #20
    6f1a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f1e:	bf00      	nop
    6f20:	1fff8d08 	.word	0x1fff8d08

00006f24 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6f24:	b500      	push	{lr}
    6f26:	b085      	sub	sp, #20
    6f28:	4603      	mov	r3, r0
    6f2a:	460a      	mov	r2, r1
    6f2c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6f30:	4613      	mov	r3, r2
    6f32:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6f36:	2300      	movs	r3, #0
    6f38:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6f3c:	2300      	movs	r3, #0
    6f3e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6f42:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f46:	4a34      	ldr	r2, [pc, #208]	; (7018 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4c:	68da      	ldr	r2, [r3, #12]
    6f4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f52:	005b      	lsls	r3, r3, #1
    6f54:	4413      	add	r3, r2
    6f56:	881b      	ldrh	r3, [r3, #0]
    6f58:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6f5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f60:	4a2d      	ldr	r2, [pc, #180]	; (7018 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f66:	6859      	ldr	r1, [r3, #4]
    6f68:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6f6c:	4613      	mov	r3, r2
    6f6e:	00db      	lsls	r3, r3, #3
    6f70:	1a9b      	subs	r3, r3, r2
    6f72:	00db      	lsls	r3, r3, #3
    6f74:	440b      	add	r3, r1
    6f76:	689b      	ldr	r3, [r3, #8]
    6f78:	2b00      	cmp	r3, #0
    6f7a:	d02f      	beq.n	6fdc <Adc_ValidateStateStartGroupConvNotBusy+0xb8>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6f7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f80:	4a25      	ldr	r2, [pc, #148]	; (7018 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f86:	6859      	ldr	r1, [r3, #4]
    6f88:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6f8c:	4613      	mov	r3, r2
    6f8e:	00db      	lsls	r3, r3, #3
    6f90:	1a9b      	subs	r3, r3, r2
    6f92:	00db      	lsls	r3, r3, #3
    6f94:	440b      	add	r3, r1
    6f96:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6f98:	2b01      	cmp	r3, #1
    6f9a:	d122      	bne.n	6fe2 <Adc_ValidateStateStartGroupConvNotBusy+0xbe>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6f9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fa0:	4a1d      	ldr	r2, [pc, #116]	; (7018 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa6:	6859      	ldr	r1, [r3, #4]
    6fa8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6fac:	4613      	mov	r3, r2
    6fae:	00db      	lsls	r3, r3, #3
    6fb0:	1a9b      	subs	r3, r3, r2
    6fb2:	00db      	lsls	r3, r3, #3
    6fb4:	440b      	add	r3, r1
    6fb6:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6fb8:	2b01      	cmp	r3, #1
    6fba:	d112      	bne.n	6fe2 <Adc_ValidateStateStartGroupConvNotBusy+0xbe>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6fbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fc0:	4a15      	ldr	r2, [pc, #84]	; (7018 <Adc_ValidateStateStartGroupConvNotBusy+0xf4>)
    6fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fc6:	6859      	ldr	r1, [r3, #4]
    6fc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6fcc:	4613      	mov	r3, r2
    6fce:	00db      	lsls	r3, r3, #3
    6fd0:	1a9b      	subs	r3, r3, r2
    6fd2:	00db      	lsls	r3, r3, #3
    6fd4:	440b      	add	r3, r1
    6fd6:	69db      	ldr	r3, [r3, #28]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6fd8:	2b00      	cmp	r3, #0
    6fda:	d102      	bne.n	6fe2 <Adc_ValidateStateStartGroupConvNotBusy+0xbe>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6fdc:	2301      	movs	r3, #1
    6fde:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6fe2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fe6:	2b01      	cmp	r3, #1
    6fe8:	d104      	bne.n	6ff4 <Adc_ValidateStateStartGroupConvNotBusy+0xd0>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6fea:	210b      	movs	r1, #11
    6fec:	2002      	movs	r0, #2
    6fee:	f7ff fe51 	bl	6c94 <Adc_ReportDetRuntimeError>
    6ff2:	e00b      	b.n	700c <Adc_ValidateStateStartGroupConvNotBusy+0xe8>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6ff4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ff8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6ffc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7000:	4618      	mov	r0, r3
    7002:	f7ff fe89 	bl	6d18 <Adc_ValidateNotBusyNoPrio>
    7006:	4603      	mov	r3, r0
    7008:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    700c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7010:	4618      	mov	r0, r3
    7012:	b005      	add	sp, #20
    7014:	f85d fb04 	ldr.w	pc, [sp], #4
    7018:	1fff8d04 	.word	0x1fff8d04

0000701c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    701c:	b500      	push	{lr}
    701e:	b085      	sub	sp, #20
    7020:	4603      	mov	r3, r0
    7022:	f88d 3007 	strb.w	r3, [sp, #7]
    7026:	460b      	mov	r3, r1
    7028:	f8ad 3004 	strh.w	r3, [sp, #4]
    702c:	4613      	mov	r3, r2
    702e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7032:	2300      	movs	r3, #0
    7034:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    7038:	f89d 3007 	ldrb.w	r3, [sp, #7]
    703c:	2b0b      	cmp	r3, #11
    703e:	d03b      	beq.n	70b8 <Adc_ValidateStateNotIdle+0x9c>
    7040:	2b0b      	cmp	r3, #11
    7042:	dc4e      	bgt.n	70e2 <Adc_ValidateStateNotIdle+0xc6>
    7044:	2b03      	cmp	r3, #3
    7046:	d022      	beq.n	708e <Adc_ValidateStateNotIdle+0x72>
    7048:	2b04      	cmp	r3, #4
    704a:	d14a      	bne.n	70e2 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    704c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7050:	492a      	ldr	r1, [pc, #168]	; (70fc <Adc_ValidateStateNotIdle+0xe0>)
    7052:	4613      	mov	r3, r2
    7054:	005b      	lsls	r3, r3, #1
    7056:	4413      	add	r3, r2
    7058:	00db      	lsls	r3, r3, #3
    705a:	440b      	add	r3, r1
    705c:	681b      	ldr	r3, [r3, #0]
    705e:	2b00      	cmp	r3, #0
    7060:	d141      	bne.n	70e6 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    7062:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7066:	4925      	ldr	r1, [pc, #148]	; (70fc <Adc_ValidateStateNotIdle+0xe0>)
    7068:	4613      	mov	r3, r2
    706a:	005b      	lsls	r3, r3, #1
    706c:	4413      	add	r3, r2
    706e:	00db      	lsls	r3, r3, #3
    7070:	440b      	add	r3, r1
    7072:	3304      	adds	r3, #4
    7074:	681b      	ldr	r3, [r3, #0]
    7076:	2b00      	cmp	r3, #0
    7078:	d135      	bne.n	70e6 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    707a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    707e:	210c      	movs	r1, #12
    7080:	4618      	mov	r0, r3
    7082:	f7ff fe07 	bl	6c94 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    7086:	2301      	movs	r3, #1
    7088:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    708c:	e02b      	b.n	70e6 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    708e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7092:	491a      	ldr	r1, [pc, #104]	; (70fc <Adc_ValidateStateNotIdle+0xe0>)
    7094:	4613      	mov	r3, r2
    7096:	005b      	lsls	r3, r3, #1
    7098:	4413      	add	r3, r2
    709a:	00db      	lsls	r3, r3, #3
    709c:	440b      	add	r3, r1
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d122      	bne.n	70ea <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    70a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70a8:	210c      	movs	r1, #12
    70aa:	4618      	mov	r0, r3
    70ac:	f7ff fdf2 	bl	6c94 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    70b0:	2301      	movs	r3, #1
    70b2:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    70b6:	e018      	b.n	70ea <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    70b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    70bc:	490f      	ldr	r1, [pc, #60]	; (70fc <Adc_ValidateStateNotIdle+0xe0>)
    70be:	4613      	mov	r3, r2
    70c0:	005b      	lsls	r3, r3, #1
    70c2:	4413      	add	r3, r2
    70c4:	00db      	lsls	r3, r3, #3
    70c6:	440b      	add	r3, r1
    70c8:	681b      	ldr	r3, [r3, #0]
    70ca:	2b00      	cmp	r3, #0
    70cc:	d10f      	bne.n	70ee <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    70ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70d2:	210c      	movs	r1, #12
    70d4:	4618      	mov	r0, r3
    70d6:	f7ff fddd 	bl	6c94 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    70da:	2301      	movs	r3, #1
    70dc:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    70e0:	e005      	b.n	70ee <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    70e2:	bf00      	nop
    70e4:	e004      	b.n	70f0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    70e6:	bf00      	nop
    70e8:	e002      	b.n	70f0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    70ea:	bf00      	nop
    70ec:	e000      	b.n	70f0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    70ee:	bf00      	nop
        }
    }

    return ValidState;
    70f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    70f4:	4618      	mov	r0, r3
    70f6:	b005      	add	sp, #20
    70f8:	f85d fb04 	ldr.w	pc, [sp], #4
    70fc:	1fff8d08 	.word	0x1fff8d08

00007100 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7100:	b084      	sub	sp, #16
    7102:	4603      	mov	r3, r0
    7104:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    7108:	2300      	movs	r3, #0
    710a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    710e:	2300      	movs	r3, #0
    7110:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7114:	2300      	movs	r3, #0
    7116:	f8ad 300e 	strh.w	r3, [sp, #14]
    711a:	e055      	b.n	71c8 <Adc_InitGroupsStatus+0xc8>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    711c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7120:	4a30      	ldr	r2, [pc, #192]	; (71e4 <Adc_InitGroupsStatus+0xe4>)
    7122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7126:	6859      	ldr	r1, [r3, #4]
    7128:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    712c:	4613      	mov	r3, r2
    712e:	00db      	lsls	r3, r3, #3
    7130:	1a9b      	subs	r3, r3, r2
    7132:	00db      	lsls	r3, r3, #3
    7134:	440b      	add	r3, r1
    7136:	881b      	ldrh	r3, [r3, #0]
    7138:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    713c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7140:	4929      	ldr	r1, [pc, #164]	; (71e8 <Adc_InitGroupsStatus+0xe8>)
    7142:	4613      	mov	r3, r2
    7144:	005b      	lsls	r3, r3, #1
    7146:	4413      	add	r3, r2
    7148:	00db      	lsls	r3, r3, #3
    714a:	440b      	add	r3, r1
    714c:	2200      	movs	r2, #0
    714e:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7150:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7154:	4924      	ldr	r1, [pc, #144]	; (71e8 <Adc_InitGroupsStatus+0xe8>)
    7156:	4613      	mov	r3, r2
    7158:	005b      	lsls	r3, r3, #1
    715a:	4413      	add	r3, r2
    715c:	00db      	lsls	r3, r3, #3
    715e:	440b      	add	r3, r1
    7160:	3304      	adds	r3, #4
    7162:	2200      	movs	r2, #0
    7164:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7166:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    716a:	491f      	ldr	r1, [pc, #124]	; (71e8 <Adc_InitGroupsStatus+0xe8>)
    716c:	4613      	mov	r3, r2
    716e:	005b      	lsls	r3, r3, #1
    7170:	4413      	add	r3, r2
    7172:	00db      	lsls	r3, r3, #3
    7174:	440b      	add	r3, r1
    7176:	330c      	adds	r3, #12
    7178:	2200      	movs	r2, #0
    717a:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    717c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7180:	4919      	ldr	r1, [pc, #100]	; (71e8 <Adc_InitGroupsStatus+0xe8>)
    7182:	4613      	mov	r3, r2
    7184:	005b      	lsls	r3, r3, #1
    7186:	4413      	add	r3, r2
    7188:	00db      	lsls	r3, r3, #3
    718a:	440b      	add	r3, r1
    718c:	3310      	adds	r3, #16
    718e:	2200      	movs	r2, #0
    7190:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7192:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7196:	4914      	ldr	r1, [pc, #80]	; (71e8 <Adc_InitGroupsStatus+0xe8>)
    7198:	4613      	mov	r3, r2
    719a:	005b      	lsls	r3, r3, #1
    719c:	4413      	add	r3, r2
    719e:	00db      	lsls	r3, r3, #3
    71a0:	440b      	add	r3, r1
    71a2:	3314      	adds	r3, #20
    71a4:	2200      	movs	r2, #0
    71a6:	701a      	strb	r2, [r3, #0]
        /* SWS_Adc_00077 */
#if (ADC_HW_TRIGGER_API == STD_ON)
        Adc_axGroupStatus[GroupId].HwTriggering = ADC_HWTRIGGER_DISABLED;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
        Adc_axGroupStatus[GroupId].Notification = ADC_NOTIFICATION_DISABLED;
    71a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    71ac:	490e      	ldr	r1, [pc, #56]	; (71e8 <Adc_InitGroupsStatus+0xe8>)
    71ae:	4613      	mov	r3, r2
    71b0:	005b      	lsls	r3, r3, #1
    71b2:	4413      	add	r3, r2
    71b4:	00db      	lsls	r3, r3, #3
    71b6:	440b      	add	r3, r1
    71b8:	3308      	adds	r3, #8
    71ba:	2200      	movs	r2, #0
    71bc:	601a      	str	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    71be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71c2:	3301      	adds	r3, #1
    71c4:	f8ad 300e 	strh.w	r3, [sp, #14]
    71c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71cc:	4a05      	ldr	r2, [pc, #20]	; (71e4 <Adc_InitGroupsStatus+0xe4>)
    71ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d2:	891b      	ldrh	r3, [r3, #8]
    71d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    71d8:	429a      	cmp	r2, r3
    71da:	d39f      	bcc.n	711c <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    71dc:	bf00      	nop
    71de:	bf00      	nop
    71e0:	b004      	add	sp, #16
    71e2:	4770      	bx	lr
    71e4:	1fff8d04 	.word	0x1fff8d04
    71e8:	1fff8d08 	.word	0x1fff8d08

000071ec <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    71ec:	b084      	sub	sp, #16
    71ee:	4603      	mov	r3, r0
    71f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    71f4:	2300      	movs	r3, #0
    71f6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    71fa:	2300      	movs	r3, #0
    71fc:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7200:	2300      	movs	r3, #0
    7202:	f88d 300f 	strb.w	r3, [sp, #15]
    7206:	e03f      	b.n	7288 <Adc_InitUnitStatus+0x9c>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    720c:	4a22      	ldr	r2, [pc, #136]	; (7298 <Adc_InitUnitStatus+0xac>)
    720e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7212:	681a      	ldr	r2, [r3, #0]
    7214:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7218:	4413      	add	r3, r2
    721a:	7f9b      	ldrb	r3, [r3, #30]
    721c:	2b01      	cmp	r3, #1
    721e:	d12e      	bne.n	727e <Adc_InitUnitStatus+0x92>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    7220:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7224:	491d      	ldr	r1, [pc, #116]	; (729c <Adc_InitUnitStatus+0xb0>)
    7226:	4613      	mov	r3, r2
    7228:	005b      	lsls	r3, r3, #1
    722a:	4413      	add	r3, r2
    722c:	005b      	lsls	r3, r3, #1
    722e:	440b      	add	r3, r1
    7230:	2200      	movs	r2, #0
    7232:	801a      	strh	r2, [r3, #0]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7234:	2300      	movs	r3, #0
    7236:	f8ad 300c 	strh.w	r3, [sp, #12]
    723a:	e011      	b.n	7260 <Adc_InitUnitStatus+0x74>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    723c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7240:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7244:	4815      	ldr	r0, [pc, #84]	; (729c <Adc_InitUnitStatus+0xb0>)
    7246:	4613      	mov	r3, r2
    7248:	005b      	lsls	r3, r3, #1
    724a:	4413      	add	r3, r2
    724c:	440b      	add	r3, r1
    724e:	005b      	lsls	r3, r3, #1
    7250:	4403      	add	r3, r0
    7252:	2200      	movs	r2, #0
    7254:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7256:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    725a:	3301      	adds	r3, #1
    725c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7260:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7264:	2b00      	cmp	r3, #0
    7266:	d0e9      	beq.n	723c <Adc_InitUnitStatus+0x50>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7268:	f89d 200f 	ldrb.w	r2, [sp, #15]
    726c:	490b      	ldr	r1, [pc, #44]	; (729c <Adc_InitUnitStatus+0xb0>)
    726e:	4613      	mov	r3, r2
    7270:	005b      	lsls	r3, r3, #1
    7272:	4413      	add	r3, r2
    7274:	005b      	lsls	r3, r3, #1
    7276:	440b      	add	r3, r1
    7278:	3304      	adds	r3, #4
    727a:	2200      	movs	r2, #0
    727c:	701a      	strb	r2, [r3, #0]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    727e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7282:	3301      	adds	r3, #1
    7284:	f88d 300f 	strb.w	r3, [sp, #15]
    7288:	f89d 300f 	ldrb.w	r3, [sp, #15]
    728c:	2b01      	cmp	r3, #1
    728e:	d9bb      	bls.n	7208 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7290:	bf00      	nop
    7292:	bf00      	nop
    7294:	b004      	add	sp, #16
    7296:	4770      	bx	lr
    7298:	1fff8d04 	.word	0x1fff8d04
    729c:	1fff8d20 	.word	0x1fff8d20

000072a0 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    72a0:	b084      	sub	sp, #16
    72a2:	9001      	str	r0, [sp, #4]
    72a4:	460b      	mov	r3, r1
    72a6:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    72aa:	2300      	movs	r3, #0
    72ac:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    72b0:	2301      	movs	r3, #1
    72b2:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    72b6:	9b01      	ldr	r3, [sp, #4]
    72b8:	7c1b      	ldrb	r3, [r3, #16]
    72ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    72be:	429a      	cmp	r2, r3
    72c0:	d11c      	bne.n	72fc <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    72c2:	2300      	movs	r3, #0
    72c4:	f88d 300f 	strb.w	r3, [sp, #15]
    72c8:	e012      	b.n	72f0 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    72ca:	9b01      	ldr	r3, [sp, #4]
    72cc:	695a      	ldr	r2, [r3, #20]
    72ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72d2:	4413      	add	r3, r2
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    72da:	429a      	cmp	r2, r3
    72dc:	d103      	bne.n	72e6 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    72de:	2300      	movs	r3, #0
    72e0:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    72e4:	e00a      	b.n	72fc <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    72e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72ea:	3301      	adds	r3, #1
    72ec:	f88d 300f 	strb.w	r3, [sp, #15]
    72f0:	9b01      	ldr	r3, [sp, #4]
    72f2:	7e1b      	ldrb	r3, [r3, #24]
    72f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    72f8:	429a      	cmp	r2, r3
    72fa:	d3e6      	bcc.n	72ca <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    72fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7300:	4618      	mov	r0, r3
    7302:	b004      	add	sp, #16
    7304:	4770      	bx	lr

00007306 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    7306:	b500      	push	{lr}
    7308:	b085      	sub	sp, #20
    730a:	4603      	mov	r3, r0
    730c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7310:	460b      	mov	r3, r1
    7312:	f88d 3005 	strb.w	r3, [sp, #5]
    7316:	4613      	mov	r3, r2
    7318:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_QueueIndexType QueueIndex = 0U;
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    731c:	2300      	movs	r3, #0
    731e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7322:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7326:	4938      	ldr	r1, [pc, #224]	; (7408 <Adc_UpdateStatusStartConversion+0x102>)
    7328:	4613      	mov	r3, r2
    732a:	005b      	lsls	r3, r3, #1
    732c:	4413      	add	r3, r2
    732e:	00db      	lsls	r3, r3, #3
    7330:	440b      	add	r3, r1
    7332:	2201      	movs	r2, #1
    7334:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    7336:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    733a:	4933      	ldr	r1, [pc, #204]	; (7408 <Adc_UpdateStatusStartConversion+0x102>)
    733c:	4613      	mov	r3, r2
    733e:	005b      	lsls	r3, r3, #1
    7340:	4413      	add	r3, r2
    7342:	00db      	lsls	r3, r3, #3
    7344:	440b      	add	r3, r1
    7346:	330c      	adds	r3, #12
    7348:	2200      	movs	r2, #0
    734a:	801a      	strh	r2, [r3, #0]
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    734c:	f003 ffd4 	bl	b2f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7350:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7354:	492d      	ldr	r1, [pc, #180]	; (740c <Adc_UpdateStatusStartConversion+0x106>)
    7356:	4613      	mov	r3, r2
    7358:	005b      	lsls	r3, r3, #1
    735a:	4413      	add	r3, r2
    735c:	005b      	lsls	r3, r3, #1
    735e:	440b      	add	r3, r1
    7360:	881b      	ldrh	r3, [r3, #0]
    7362:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7366:	f89d 2005 	ldrb.w	r2, [sp, #5]
    736a:	4928      	ldr	r1, [pc, #160]	; (740c <Adc_UpdateStatusStartConversion+0x106>)
    736c:	4613      	mov	r3, r2
    736e:	005b      	lsls	r3, r3, #1
    7370:	4413      	add	r3, r2
    7372:	005b      	lsls	r3, r3, #1
    7374:	440b      	add	r3, r1
    7376:	3302      	adds	r3, #2
    7378:	881b      	ldrh	r3, [r3, #0]
    737a:	b29b      	uxth	r3, r3
    737c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7380:	429a      	cmp	r2, r3
    7382:	d003      	beq.n	738c <Adc_UpdateStatusStartConversion+0x86>
    7384:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7388:	2b00      	cmp	r3, #0
    738a:	d136      	bne.n	73fa <Adc_UpdateStatusStartConversion+0xf4>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    738c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7390:	491e      	ldr	r1, [pc, #120]	; (740c <Adc_UpdateStatusStartConversion+0x106>)
    7392:	4613      	mov	r3, r2
    7394:	005b      	lsls	r3, r3, #1
    7396:	4413      	add	r3, r2
    7398:	005b      	lsls	r3, r3, #1
    739a:	440b      	add	r3, r1
    739c:	881b      	ldrh	r3, [r3, #0]
    739e:	b29b      	uxth	r3, r3
    73a0:	2b00      	cmp	r3, #0
    73a2:	d11f      	bne.n	73e4 <Adc_UpdateStatusStartConversion+0xde>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    73a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    73a8:	4918      	ldr	r1, [pc, #96]	; (740c <Adc_UpdateStatusStartConversion+0x106>)
    73aa:	4613      	mov	r3, r2
    73ac:	005b      	lsls	r3, r3, #1
    73ae:	4413      	add	r3, r2
    73b0:	005b      	lsls	r3, r3, #1
    73b2:	440b      	add	r3, r1
    73b4:	3302      	adds	r3, #2
    73b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    73ba:	801a      	strh	r2, [r3, #0]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    73bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    73c0:	4912      	ldr	r1, [pc, #72]	; (740c <Adc_UpdateStatusStartConversion+0x106>)
    73c2:	4613      	mov	r3, r2
    73c4:	005b      	lsls	r3, r3, #1
    73c6:	4413      	add	r3, r2
    73c8:	005b      	lsls	r3, r3, #1
    73ca:	440b      	add	r3, r1
    73cc:	881b      	ldrh	r3, [r3, #0]
    73ce:	b29b      	uxth	r3, r3
    73d0:	3301      	adds	r3, #1
    73d2:	b298      	uxth	r0, r3
    73d4:	490d      	ldr	r1, [pc, #52]	; (740c <Adc_UpdateStatusStartConversion+0x106>)
    73d6:	4613      	mov	r3, r2
    73d8:	005b      	lsls	r3, r3, #1
    73da:	4413      	add	r3, r2
    73dc:	005b      	lsls	r3, r3, #1
    73de:	440b      	add	r3, r1
    73e0:	4602      	mov	r2, r0
    73e2:	801a      	strh	r2, [r3, #0]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    73e4:	f003 ffb4 	bl	b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    73e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    73ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73f0:	4611      	mov	r1, r2
    73f2:	4618      	mov	r0, r3
    73f4:	f002 fc8a 	bl	9d0c <Adc_Ipw_StartNormalConversion>
    73f8:	e002      	b.n	7400 <Adc_UpdateStatusStartConversion+0xfa>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    73fa:	f003 ffa9 	bl	b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    73fe:	bf00      	nop
    7400:	bf00      	nop
    7402:	b005      	add	sp, #20
    7404:	f85d fb04 	ldr.w	pc, [sp], #4
    7408:	1fff8d08 	.word	0x1fff8d08
    740c:	1fff8d20 	.word	0x1fff8d20

00007410 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    7410:	b500      	push	{lr}
    7412:	b085      	sub	sp, #20
    7414:	9001      	str	r0, [sp, #4]
    7416:	4608      	mov	r0, r1
    7418:	4611      	mov	r1, r2
    741a:	461a      	mov	r2, r3
    741c:	4603      	mov	r3, r0
    741e:	f8ad 3002 	strh.w	r3, [sp, #2]
    7422:	460b      	mov	r3, r1
    7424:	f88d 3001 	strb.w	r3, [sp, #1]
    7428:	4613      	mov	r3, r2
    742a:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    742e:	2300      	movs	r3, #0
    7430:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    7434:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7438:	492b      	ldr	r1, [pc, #172]	; (74e8 <Adc_StopSwGroupConversion+0xd8>)
    743a:	4613      	mov	r3, r2
    743c:	005b      	lsls	r3, r3, #1
    743e:	4413      	add	r3, r2
    7440:	005b      	lsls	r3, r3, #1
    7442:	440b      	add	r3, r1
    7444:	881b      	ldrh	r3, [r3, #0]
    7446:	b29a      	uxth	r2, r3
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    744c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7450:	4925      	ldr	r1, [pc, #148]	; (74e8 <Adc_StopSwGroupConversion+0xd8>)
    7452:	4613      	mov	r3, r2
    7454:	005b      	lsls	r3, r3, #1
    7456:	4413      	add	r3, r2
    7458:	005b      	lsls	r3, r3, #1
    745a:	440b      	add	r3, r1
    745c:	881b      	ldrh	r3, [r3, #0]
    745e:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7462:	2300      	movs	r3, #0
    7464:	f8ad 300c 	strh.w	r3, [sp, #12]
    7468:	e031      	b.n	74ce <Adc_StopSwGroupConversion+0xbe>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    746a:	f89d 2001 	ldrb.w	r2, [sp, #1]
    746e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7472:	481d      	ldr	r0, [pc, #116]	; (74e8 <Adc_StopSwGroupConversion+0xd8>)
    7474:	4613      	mov	r3, r2
    7476:	005b      	lsls	r3, r3, #1
    7478:	4413      	add	r3, r2
    747a:	440b      	add	r3, r1
    747c:	005b      	lsls	r3, r3, #1
    747e:	4403      	add	r3, r0
    7480:	885b      	ldrh	r3, [r3, #2]
    7482:	b29b      	uxth	r3, r3
    7484:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7488:	429a      	cmp	r2, r3
    748a:	d11b      	bne.n	74c4 <Adc_StopSwGroupConversion+0xb4>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    748c:	9b01      	ldr	r3, [sp, #4]
    748e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7492:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    7494:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7498:	2b00      	cmp	r3, #0
    749a:	d10b      	bne.n	74b4 <Adc_StopSwGroupConversion+0xa4>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    749c:	f89d 2000 	ldrb.w	r2, [sp]
    74a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    74a4:	f89d 3001 	ldrb.w	r3, [sp, #1]
    74a8:	4618      	mov	r0, r3
    74aa:	f002 fced 	bl	9e88 <Adc_Ipw_StopCurrentConversion>
    74ae:	4603      	mov	r3, r0
    74b0:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    74b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    74b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    74bc:	4611      	mov	r1, r2
    74be:	4618      	mov	r0, r3
    74c0:	f001 fde8 	bl	9094 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    74c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74c8:	3301      	adds	r3, #1
    74ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    74ce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    74d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74d6:	429a      	cmp	r2, r3
    74d8:	d3c7      	bcc.n	746a <Adc_StopSwGroupConversion+0x5a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    74da:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    74de:	4618      	mov	r0, r3
    74e0:	b005      	add	sp, #20
    74e2:	f85d fb04 	ldr.w	pc, [sp], #4
    74e6:	bf00      	nop
    74e8:	1fff8d20 	.word	0x1fff8d20

000074ec <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    74ec:	b500      	push	{lr}
    74ee:	b089      	sub	sp, #36	; 0x24
    74f0:	4603      	mov	r3, r0
    74f2:	f8ad 3006 	strh.w	r3, [sp, #6]
    74f6:	460b      	mov	r3, r1
    74f8:	f88d 3005 	strb.w	r3, [sp, #5]
    74fc:	4613      	mov	r3, r2
    74fe:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7502:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7506:	4a58      	ldr	r2, [pc, #352]	; (7668 <Adc_UpdateStatusStopConversion+0x17c>)
    7508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    750c:	68da      	ldr	r2, [r3, #12]
    750e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7512:	005b      	lsls	r3, r3, #1
    7514:	4413      	add	r3, r2
    7516:	881b      	ldrh	r3, [r3, #0]
    7518:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    751c:	2300      	movs	r3, #0
    751e:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7522:	2300      	movs	r3, #0
    7524:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    7528:	f89d 3004 	ldrb.w	r3, [sp, #4]
    752c:	4a4e      	ldr	r2, [pc, #312]	; (7668 <Adc_UpdateStatusStopConversion+0x17c>)
    752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7532:	6859      	ldr	r1, [r3, #4]
    7534:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    7538:	4613      	mov	r3, r2
    753a:	00db      	lsls	r3, r3, #3
    753c:	1a9b      	subs	r3, r3, r2
    753e:	00db      	lsls	r3, r3, #3
    7540:	440b      	add	r3, r1
    7542:	689b      	ldr	r3, [r3, #8]
    7544:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    7546:	f89d 3004 	ldrb.w	r3, [sp, #4]
    754a:	4a47      	ldr	r2, [pc, #284]	; (7668 <Adc_UpdateStatusStopConversion+0x17c>)
    754c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7550:	6859      	ldr	r1, [r3, #4]
    7552:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    7556:	4613      	mov	r3, r2
    7558:	00db      	lsls	r3, r3, #3
    755a:	1a9b      	subs	r3, r3, r2
    755c:	00db      	lsls	r3, r3, #3
    755e:	440b      	add	r3, r1
    7560:	685b      	ldr	r3, [r3, #4]
    7562:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    7564:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7568:	4a3f      	ldr	r2, [pc, #252]	; (7668 <Adc_UpdateStatusStopConversion+0x17c>)
    756a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    756e:	6859      	ldr	r1, [r3, #4]
    7570:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    7574:	4613      	mov	r3, r2
    7576:	00db      	lsls	r3, r3, #3
    7578:	1a9b      	subs	r3, r3, r2
    757a:	00db      	lsls	r3, r3, #3
    757c:	440b      	add	r3, r1
    757e:	69db      	ldr	r3, [r3, #28]
    7580:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7582:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7586:	4939      	ldr	r1, [pc, #228]	; (766c <Adc_UpdateStatusStopConversion+0x180>)
    7588:	4613      	mov	r3, r2
    758a:	005b      	lsls	r3, r3, #1
    758c:	4413      	add	r3, r2
    758e:	00db      	lsls	r3, r3, #3
    7590:	440b      	add	r3, r1
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    7596:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    759a:	4934      	ldr	r1, [pc, #208]	; (766c <Adc_UpdateStatusStopConversion+0x180>)
    759c:	4613      	mov	r3, r2
    759e:	005b      	lsls	r3, r3, #1
    75a0:	4413      	add	r3, r2
    75a2:	00db      	lsls	r3, r3, #3
    75a4:	440b      	add	r3, r1
    75a6:	330c      	adds	r3, #12
    75a8:	2200      	movs	r2, #0
    75aa:	801a      	strh	r2, [r3, #0]
#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
     /* disable group notification (SWS_Adc_00155) */
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
    75ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75b0:	492e      	ldr	r1, [pc, #184]	; (766c <Adc_UpdateStatusStopConversion+0x180>)
    75b2:	4613      	mov	r3, r2
    75b4:	005b      	lsls	r3, r3, #1
    75b6:	4413      	add	r3, r2
    75b8:	00db      	lsls	r3, r3, #3
    75ba:	440b      	add	r3, r1
    75bc:	3308      	adds	r3, #8
    75be:	2200      	movs	r2, #0
    75c0:	601a      	str	r2, [r3, #0]
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    75c2:	9b06      	ldr	r3, [sp, #24]
    75c4:	2b00      	cmp	r3, #0
    75c6:	d005      	beq.n	75d4 <Adc_UpdateStatusStopConversion+0xe8>
    75c8:	9b05      	ldr	r3, [sp, #20]
    75ca:	2b01      	cmp	r3, #1
    75cc:	d110      	bne.n	75f0 <Adc_UpdateStatusStopConversion+0x104>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    75ce:	9b04      	ldr	r3, [sp, #16]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d10d      	bne.n	75f0 <Adc_UpdateStatusStopConversion+0x104>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    75d4:	9b03      	ldr	r3, [sp, #12]
    75d6:	2b03      	cmp	r3, #3
    75d8:	d10a      	bne.n	75f0 <Adc_UpdateStatusStopConversion+0x104>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    75da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75de:	4923      	ldr	r1, [pc, #140]	; (766c <Adc_UpdateStatusStopConversion+0x180>)
    75e0:	4613      	mov	r3, r2
    75e2:	005b      	lsls	r3, r3, #1
    75e4:	4413      	add	r3, r2
    75e6:	00db      	lsls	r3, r3, #3
    75e8:	440b      	add	r3, r1
    75ea:	2200      	movs	r2, #0
    75ec:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    75ee:	e036      	b.n	765e <Adc_UpdateStatusStopConversion+0x172>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    75f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    75f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    75f8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    75fc:	f10d 000a 	add.w	r0, sp, #10
    7600:	f7ff ff06 	bl	7410 <Adc_StopSwGroupConversion>
    7604:	4603      	mov	r3, r0
    7606:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    760a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    760e:	4917      	ldr	r1, [pc, #92]	; (766c <Adc_UpdateStatusStopConversion+0x180>)
    7610:	4613      	mov	r3, r2
    7612:	005b      	lsls	r3, r3, #1
    7614:	4413      	add	r3, r2
    7616:	00db      	lsls	r3, r3, #3
    7618:	440b      	add	r3, r1
    761a:	2200      	movs	r2, #0
    761c:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    761e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7622:	2b00      	cmp	r3, #0
    7624:	d113      	bne.n	764e <Adc_UpdateStatusStopConversion+0x162>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7626:	f89d 2005 	ldrb.w	r2, [sp, #5]
    762a:	4911      	ldr	r1, [pc, #68]	; (7670 <Adc_UpdateStatusStopConversion+0x184>)
    762c:	4613      	mov	r3, r2
    762e:	005b      	lsls	r3, r3, #1
    7630:	4413      	add	r3, r2
    7632:	005b      	lsls	r3, r3, #1
    7634:	440b      	add	r3, r1
    7636:	881b      	ldrh	r3, [r3, #0]
    7638:	b29b      	uxth	r3, r3
    763a:	2b00      	cmp	r3, #0
    763c:	d007      	beq.n	764e <Adc_UpdateStatusStopConversion+0x162>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    763e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7642:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7646:	4611      	mov	r1, r2
    7648:	4618      	mov	r0, r3
    764a:	f002 fb5f 	bl	9d0c <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    764e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    7652:	2b01      	cmp	r3, #1
    7654:	d103      	bne.n	765e <Adc_UpdateStatusStopConversion+0x172>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    7656:	212b      	movs	r1, #43	; 0x2b
    7658:	2003      	movs	r0, #3
    765a:	f7ff fb1b 	bl	6c94 <Adc_ReportDetRuntimeError>
}
    765e:	bf00      	nop
    7660:	b009      	add	sp, #36	; 0x24
    7662:	f85d fb04 	ldr.w	pc, [sp], #4
    7666:	bf00      	nop
    7668:	1fff8d04 	.word	0x1fff8d04
    766c:	1fff8d08 	.word	0x1fff8d08
    7670:	1fff8d20 	.word	0x1fff8d20

00007674 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    7674:	b500      	push	{lr}
    7676:	b085      	sub	sp, #20
    7678:	4603      	mov	r3, r0
    767a:	f8ad 3006 	strh.w	r3, [sp, #6]
    767e:	460b      	mov	r3, r1
    7680:	f88d 3005 	strb.w	r3, [sp, #5]
    7684:	4613      	mov	r3, r2
    7686:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    768a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    768e:	4a19      	ldr	r2, [pc, #100]	; (76f4 <Adc_UpdateStatusReadGroup+0x80>)
    7690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7694:	68da      	ldr	r2, [r3, #12]
    7696:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    769a:	005b      	lsls	r3, r3, #1
    769c:	4413      	add	r3, r2
    769e:	881b      	ldrh	r3, [r3, #0]
    76a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    76a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    76a8:	4a12      	ldr	r2, [pc, #72]	; (76f4 <Adc_UpdateStatusReadGroup+0x80>)
    76aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ae:	6859      	ldr	r1, [r3, #4]
    76b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    76b4:	4613      	mov	r3, r2
    76b6:	00db      	lsls	r3, r3, #3
    76b8:	1a9b      	subs	r3, r3, r2
    76ba:	00db      	lsls	r3, r3, #3
    76bc:	440b      	add	r3, r1
    76be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    76c2:	2b01      	cmp	r3, #1
    76c4:	d109      	bne.n	76da <Adc_UpdateStatusReadGroup+0x66>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    76c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    76ca:	f89d 1005 	ldrb.w	r1, [sp, #5]
    76ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    76d2:	4618      	mov	r0, r3
    76d4:	f000 f810 	bl	76f8 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    76d8:	e007      	b.n	76ea <Adc_UpdateStatusReadGroup+0x76>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    76da:	f89d 2004 	ldrb.w	r2, [sp, #4]
    76de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    76e2:	4611      	mov	r1, r2
    76e4:	4618      	mov	r0, r3
    76e6:	f000 f8f9 	bl	78dc <Adc_UpdateStatusReadGroupInt>
}
    76ea:	bf00      	nop
    76ec:	b005      	add	sp, #20
    76ee:	f85d fb04 	ldr.w	pc, [sp], #4
    76f2:	bf00      	nop
    76f4:	1fff8d04 	.word	0x1fff8d04

000076f8 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    76f8:	b500      	push	{lr}
    76fa:	b085      	sub	sp, #20
    76fc:	4603      	mov	r3, r0
    76fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    7702:	460b      	mov	r3, r1
    7704:	f88d 3005 	strb.w	r3, [sp, #5]
    7708:	4613      	mov	r3, r2
    770a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    770e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7712:	4a2d      	ldr	r2, [pc, #180]	; (77c8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    7714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7718:	68da      	ldr	r2, [r3, #12]
    771a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    771e:	005b      	lsls	r3, r3, #1
    7720:	4413      	add	r3, r2
    7722:	881b      	ldrh	r3, [r3, #0]
    7724:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7728:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    772c:	4927      	ldr	r1, [pc, #156]	; (77cc <Adc_UpdateStatusReadGroupNoInt+0xd4>)
    772e:	4613      	mov	r3, r2
    7730:	005b      	lsls	r3, r3, #1
    7732:	4413      	add	r3, r2
    7734:	00db      	lsls	r3, r3, #3
    7736:	440b      	add	r3, r1
    7738:	3304      	adds	r3, #4
    773a:	2201      	movs	r2, #1
    773c:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    773e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7742:	2b00      	cmp	r3, #0
    7744:	d03c      	beq.n	77c0 <Adc_UpdateStatusReadGroupNoInt+0xc8>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    7746:	f89d 3004 	ldrb.w	r3, [sp, #4]
    774a:	4a1f      	ldr	r2, [pc, #124]	; (77c8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7750:	6859      	ldr	r1, [r3, #4]
    7752:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7756:	4613      	mov	r3, r2
    7758:	00db      	lsls	r3, r3, #3
    775a:	1a9b      	subs	r3, r3, r2
    775c:	00db      	lsls	r3, r3, #3
    775e:	440b      	add	r3, r1
    7760:	689b      	ldr	r3, [r3, #8]
    7762:	2b01      	cmp	r3, #1
    7764:	d10a      	bne.n	777c <Adc_UpdateStatusReadGroupNoInt+0x84>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7766:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    776a:	4918      	ldr	r1, [pc, #96]	; (77cc <Adc_UpdateStatusReadGroupNoInt+0xd4>)
    776c:	4613      	mov	r3, r2
    776e:	005b      	lsls	r3, r3, #1
    7770:	4413      	add	r3, r2
    7772:	00db      	lsls	r3, r3, #3
    7774:	440b      	add	r3, r1
    7776:	2201      	movs	r2, #1
    7778:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    777a:	e021      	b.n	77c0 <Adc_UpdateStatusReadGroupNoInt+0xc8>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    777c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7780:	4a11      	ldr	r2, [pc, #68]	; (77c8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    7782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7786:	6859      	ldr	r1, [r3, #4]
    7788:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    778c:	4613      	mov	r3, r2
    778e:	00db      	lsls	r3, r3, #3
    7790:	1a9b      	subs	r3, r3, r2
    7792:	00db      	lsls	r3, r3, #3
    7794:	440b      	add	r3, r1
    7796:	695b      	ldr	r3, [r3, #20]
    7798:	2b00      	cmp	r3, #0
    779a:	d111      	bne.n	77c0 <Adc_UpdateStatusReadGroupNoInt+0xc8>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    779c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77a0:	490a      	ldr	r1, [pc, #40]	; (77cc <Adc_UpdateStatusReadGroupNoInt+0xd4>)
    77a2:	4613      	mov	r3, r2
    77a4:	005b      	lsls	r3, r3, #1
    77a6:	4413      	add	r3, r2
    77a8:	00db      	lsls	r3, r3, #3
    77aa:	440b      	add	r3, r1
    77ac:	2200      	movs	r2, #0
    77ae:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    77b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    77b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77b8:	4611      	mov	r1, r2
    77ba:	4618      	mov	r0, r3
    77bc:	f000 f808 	bl	77d0 <Adc_UpdateSwQueueIndexNoInt>
}
    77c0:	bf00      	nop
    77c2:	b005      	add	sp, #20
    77c4:	f85d fb04 	ldr.w	pc, [sp], #4
    77c8:	1fff8d04 	.word	0x1fff8d04
    77cc:	1fff8d08 	.word	0x1fff8d08

000077d0 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    77d0:	b500      	push	{lr}
    77d2:	b085      	sub	sp, #20
    77d4:	4603      	mov	r3, r0
    77d6:	460a      	mov	r2, r1
    77d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    77dc:	4613      	mov	r3, r2
    77de:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    77e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77e6:	4a3b      	ldr	r2, [pc, #236]	; (78d4 <Adc_UpdateSwQueueIndexNoInt+0x104>)
    77e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ec:	68da      	ldr	r2, [r3, #12]
    77ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77f2:	005b      	lsls	r3, r3, #1
    77f4:	4413      	add	r3, r2
    77f6:	881b      	ldrh	r3, [r3, #0]
    77f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    77fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7800:	4a34      	ldr	r2, [pc, #208]	; (78d4 <Adc_UpdateSwQueueIndexNoInt+0x104>)
    7802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7806:	6859      	ldr	r1, [r3, #4]
    7808:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    780c:	4613      	mov	r3, r2
    780e:	00db      	lsls	r3, r3, #3
    7810:	1a9b      	subs	r3, r3, r2
    7812:	00db      	lsls	r3, r3, #3
    7814:	440b      	add	r3, r1
    7816:	789b      	ldrb	r3, [r3, #2]
    7818:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    781c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7820:	492d      	ldr	r1, [pc, #180]	; (78d8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    7822:	4613      	mov	r3, r2
    7824:	005b      	lsls	r3, r3, #1
    7826:	4413      	add	r3, r2
    7828:	005b      	lsls	r3, r3, #1
    782a:	440b      	add	r3, r1
    782c:	881b      	ldrh	r3, [r3, #0]
    782e:	b29b      	uxth	r3, r3
    7830:	2b00      	cmp	r3, #0
    7832:	d04b      	beq.n	78cc <Adc_UpdateSwQueueIndexNoInt+0xfc>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7834:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7838:	4927      	ldr	r1, [pc, #156]	; (78d8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    783a:	4613      	mov	r3, r2
    783c:	005b      	lsls	r3, r3, #1
    783e:	4413      	add	r3, r2
    7840:	005b      	lsls	r3, r3, #1
    7842:	440b      	add	r3, r1
    7844:	881b      	ldrh	r3, [r3, #0]
    7846:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    784a:	2300      	movs	r3, #0
    784c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7850:	e01e      	b.n	7890 <Adc_UpdateSwQueueIndexNoInt+0xc0>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    7852:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7856:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    785a:	481f      	ldr	r0, [pc, #124]	; (78d8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    785c:	4613      	mov	r3, r2
    785e:	005b      	lsls	r3, r3, #1
    7860:	4413      	add	r3, r2
    7862:	440b      	add	r3, r1
    7864:	005b      	lsls	r3, r3, #1
    7866:	4403      	add	r3, r0
    7868:	885b      	ldrh	r3, [r3, #2]
    786a:	b29b      	uxth	r3, r3
    786c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7870:	429a      	cmp	r2, r3
    7872:	d108      	bne.n	7886 <Adc_UpdateSwQueueIndexNoInt+0xb6>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    7874:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7878:	f89d 300b 	ldrb.w	r3, [sp, #11]
    787c:	4611      	mov	r1, r2
    787e:	4618      	mov	r0, r3
    7880:	f001 fc08 	bl	9094 <Adc_Ipw_RemoveFromQueue>
                    break;
    7884:	e00a      	b.n	789c <Adc_UpdateSwQueueIndexNoInt+0xcc>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7886:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    788a:	3301      	adds	r3, #1
    788c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7890:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7894:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7898:	429a      	cmp	r2, r3
    789a:	d3da      	bcc.n	7852 <Adc_UpdateSwQueueIndexNoInt+0x82>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    789c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78a0:	2b00      	cmp	r3, #0
    78a2:	d113      	bne.n	78cc <Adc_UpdateSwQueueIndexNoInt+0xfc>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    78a4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    78a8:	490b      	ldr	r1, [pc, #44]	; (78d8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    78aa:	4613      	mov	r3, r2
    78ac:	005b      	lsls	r3, r3, #1
    78ae:	4413      	add	r3, r2
    78b0:	005b      	lsls	r3, r3, #1
    78b2:	440b      	add	r3, r1
    78b4:	881b      	ldrh	r3, [r3, #0]
    78b6:	b29b      	uxth	r3, r3
    78b8:	2b00      	cmp	r3, #0
    78ba:	d007      	beq.n	78cc <Adc_UpdateSwQueueIndexNoInt+0xfc>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    78bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    78c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    78c4:	4611      	mov	r1, r2
    78c6:	4618      	mov	r0, r3
    78c8:	f002 fa20 	bl	9d0c <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    78cc:	bf00      	nop
    78ce:	b005      	add	sp, #20
    78d0:	f85d fb04 	ldr.w	pc, [sp], #4
    78d4:	1fff8d04 	.word	0x1fff8d04
    78d8:	1fff8d20 	.word	0x1fff8d20

000078dc <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    78dc:	b084      	sub	sp, #16
    78de:	4603      	mov	r3, r0
    78e0:	460a      	mov	r2, r1
    78e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    78e6:	4613      	mov	r3, r2
    78e8:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    78ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    78f0:	4a49      	ldr	r2, [pc, #292]	; (7a18 <Adc_UpdateStatusReadGroupInt+0x13c>)
    78f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f6:	68da      	ldr	r2, [r3, #12]
    78f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78fc:	005b      	lsls	r3, r3, #1
    78fe:	4413      	add	r3, r2
    7900:	881b      	ldrh	r3, [r3, #0]
    7902:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7906:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    790a:	4944      	ldr	r1, [pc, #272]	; (7a1c <Adc_UpdateStatusReadGroupInt+0x140>)
    790c:	4613      	mov	r3, r2
    790e:	005b      	lsls	r3, r3, #1
    7910:	4413      	add	r3, r2
    7912:	00db      	lsls	r3, r3, #3
    7914:	440b      	add	r3, r1
    7916:	681b      	ldr	r3, [r3, #0]
    7918:	2b02      	cmp	r3, #2
    791a:	d10a      	bne.n	7932 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    791c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7920:	493e      	ldr	r1, [pc, #248]	; (7a1c <Adc_UpdateStatusReadGroupInt+0x140>)
    7922:	4613      	mov	r3, r2
    7924:	005b      	lsls	r3, r3, #1
    7926:	4413      	add	r3, r2
    7928:	00db      	lsls	r3, r3, #3
    792a:	440b      	add	r3, r1
    792c:	2201      	movs	r2, #1
    792e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    7930:	e06f      	b.n	7a12 <Adc_UpdateStatusReadGroupInt+0x136>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7932:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7936:	4939      	ldr	r1, [pc, #228]	; (7a1c <Adc_UpdateStatusReadGroupInt+0x140>)
    7938:	4613      	mov	r3, r2
    793a:	005b      	lsls	r3, r3, #1
    793c:	4413      	add	r3, r2
    793e:	00db      	lsls	r3, r3, #3
    7940:	440b      	add	r3, r1
    7942:	681b      	ldr	r3, [r3, #0]
    7944:	2b03      	cmp	r3, #3
    7946:	d164      	bne.n	7a12 <Adc_UpdateStatusReadGroupInt+0x136>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7948:	f89d 3005 	ldrb.w	r3, [sp, #5]
    794c:	4a32      	ldr	r2, [pc, #200]	; (7a18 <Adc_UpdateStatusReadGroupInt+0x13c>)
    794e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7952:	6859      	ldr	r1, [r3, #4]
    7954:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7958:	4613      	mov	r3, r2
    795a:	00db      	lsls	r3, r3, #3
    795c:	1a9b      	subs	r3, r3, r2
    795e:	00db      	lsls	r3, r3, #3
    7960:	440b      	add	r3, r1
    7962:	695b      	ldr	r3, [r3, #20]
    7964:	2b00      	cmp	r3, #0
    7966:	d154      	bne.n	7a12 <Adc_UpdateStatusReadGroupInt+0x136>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7968:	f89d 3005 	ldrb.w	r3, [sp, #5]
    796c:	4a2a      	ldr	r2, [pc, #168]	; (7a18 <Adc_UpdateStatusReadGroupInt+0x13c>)
    796e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7972:	6859      	ldr	r1, [r3, #4]
    7974:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7978:	4613      	mov	r3, r2
    797a:	00db      	lsls	r3, r3, #3
    797c:	1a9b      	subs	r3, r3, r2
    797e:	00db      	lsls	r3, r3, #3
    7980:	440b      	add	r3, r1
    7982:	689b      	ldr	r3, [r3, #8]
    7984:	2b00      	cmp	r3, #0
    7986:	d02f      	beq.n	79e8 <Adc_UpdateStatusReadGroupInt+0x10c>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7988:	f89d 3005 	ldrb.w	r3, [sp, #5]
    798c:	4a22      	ldr	r2, [pc, #136]	; (7a18 <Adc_UpdateStatusReadGroupInt+0x13c>)
    798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7992:	6859      	ldr	r1, [r3, #4]
    7994:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7998:	4613      	mov	r3, r2
    799a:	00db      	lsls	r3, r3, #3
    799c:	1a9b      	subs	r3, r3, r2
    799e:	00db      	lsls	r3, r3, #3
    79a0:	440b      	add	r3, r1
    79a2:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    79a4:	2b01      	cmp	r3, #1
    79a6:	d12a      	bne.n	79fe <Adc_UpdateStatusReadGroupInt+0x122>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    79a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79ac:	4a1a      	ldr	r2, [pc, #104]	; (7a18 <Adc_UpdateStatusReadGroupInt+0x13c>)
    79ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79b2:	6859      	ldr	r1, [r3, #4]
    79b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    79b8:	4613      	mov	r3, r2
    79ba:	00db      	lsls	r3, r3, #3
    79bc:	1a9b      	subs	r3, r3, r2
    79be:	00db      	lsls	r3, r3, #3
    79c0:	440b      	add	r3, r1
    79c2:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    79c4:	2b01      	cmp	r3, #1
    79c6:	d11a      	bne.n	79fe <Adc_UpdateStatusReadGroupInt+0x122>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    79c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79cc:	4a12      	ldr	r2, [pc, #72]	; (7a18 <Adc_UpdateStatusReadGroupInt+0x13c>)
    79ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d2:	6859      	ldr	r1, [r3, #4]
    79d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    79d8:	4613      	mov	r3, r2
    79da:	00db      	lsls	r3, r3, #3
    79dc:	1a9b      	subs	r3, r3, r2
    79de:	00db      	lsls	r3, r3, #3
    79e0:	440b      	add	r3, r1
    79e2:	69db      	ldr	r3, [r3, #28]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    79e4:	2b00      	cmp	r3, #0
    79e6:	d10a      	bne.n	79fe <Adc_UpdateStatusReadGroupInt+0x122>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    79e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    79ec:	490b      	ldr	r1, [pc, #44]	; (7a1c <Adc_UpdateStatusReadGroupInt+0x140>)
    79ee:	4613      	mov	r3, r2
    79f0:	005b      	lsls	r3, r3, #1
    79f2:	4413      	add	r3, r2
    79f4:	00db      	lsls	r3, r3, #3
    79f6:	440b      	add	r3, r1
    79f8:	2200      	movs	r2, #0
    79fa:	601a      	str	r2, [r3, #0]
}
    79fc:	e009      	b.n	7a12 <Adc_UpdateStatusReadGroupInt+0x136>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    79fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a02:	4906      	ldr	r1, [pc, #24]	; (7a1c <Adc_UpdateStatusReadGroupInt+0x140>)
    7a04:	4613      	mov	r3, r2
    7a06:	005b      	lsls	r3, r3, #1
    7a08:	4413      	add	r3, r2
    7a0a:	00db      	lsls	r3, r3, #3
    7a0c:	440b      	add	r3, r1
    7a0e:	2201      	movs	r2, #1
    7a10:	601a      	str	r2, [r3, #0]
}
    7a12:	bf00      	nop
    7a14:	b004      	add	sp, #16
    7a16:	4770      	bx	lr
    7a18:	1fff8d04 	.word	0x1fff8d04
    7a1c:	1fff8d08 	.word	0x1fff8d08

00007a20 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    7a20:	b084      	sub	sp, #16
    7a22:	4603      	mov	r3, r0
    7a24:	460a      	mov	r2, r1
    7a26:	f8ad 3006 	strh.w	r3, [sp, #6]
    7a2a:	4613      	mov	r3, r2
    7a2c:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7a30:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a34:	4a49      	ldr	r2, [pc, #292]	; (7b5c <Adc_UpdateStatusAfterGetStream+0x13c>)
    7a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a3a:	68da      	ldr	r2, [r3, #12]
    7a3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a40:	005b      	lsls	r3, r3, #1
    7a42:	4413      	add	r3, r2
    7a44:	881b      	ldrh	r3, [r3, #0]
    7a46:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7a4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a4e:	4944      	ldr	r1, [pc, #272]	; (7b60 <Adc_UpdateStatusAfterGetStream+0x140>)
    7a50:	4613      	mov	r3, r2
    7a52:	005b      	lsls	r3, r3, #1
    7a54:	4413      	add	r3, r2
    7a56:	00db      	lsls	r3, r3, #3
    7a58:	440b      	add	r3, r1
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	2b02      	cmp	r3, #2
    7a5e:	d109      	bne.n	7a74 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7a60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a64:	493e      	ldr	r1, [pc, #248]	; (7b60 <Adc_UpdateStatusAfterGetStream+0x140>)
    7a66:	4613      	mov	r3, r2
    7a68:	005b      	lsls	r3, r3, #1
    7a6a:	4413      	add	r3, r2
    7a6c:	00db      	lsls	r3, r3, #3
    7a6e:	440b      	add	r3, r1
    7a70:	2201      	movs	r2, #1
    7a72:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7a74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a78:	4939      	ldr	r1, [pc, #228]	; (7b60 <Adc_UpdateStatusAfterGetStream+0x140>)
    7a7a:	4613      	mov	r3, r2
    7a7c:	005b      	lsls	r3, r3, #1
    7a7e:	4413      	add	r3, r2
    7a80:	00db      	lsls	r3, r3, #3
    7a82:	440b      	add	r3, r1
    7a84:	681b      	ldr	r3, [r3, #0]
    7a86:	2b03      	cmp	r3, #3
    7a88:	d164      	bne.n	7b54 <Adc_UpdateStatusAfterGetStream+0x134>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7a8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a8e:	4a33      	ldr	r2, [pc, #204]	; (7b5c <Adc_UpdateStatusAfterGetStream+0x13c>)
    7a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a94:	6859      	ldr	r1, [r3, #4]
    7a96:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7a9a:	4613      	mov	r3, r2
    7a9c:	00db      	lsls	r3, r3, #3
    7a9e:	1a9b      	subs	r3, r3, r2
    7aa0:	00db      	lsls	r3, r3, #3
    7aa2:	440b      	add	r3, r1
    7aa4:	695b      	ldr	r3, [r3, #20]
    7aa6:	2b00      	cmp	r3, #0
    7aa8:	d154      	bne.n	7b54 <Adc_UpdateStatusAfterGetStream+0x134>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7aaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7aae:	4a2b      	ldr	r2, [pc, #172]	; (7b5c <Adc_UpdateStatusAfterGetStream+0x13c>)
    7ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ab4:	6859      	ldr	r1, [r3, #4]
    7ab6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7aba:	4613      	mov	r3, r2
    7abc:	00db      	lsls	r3, r3, #3
    7abe:	1a9b      	subs	r3, r3, r2
    7ac0:	00db      	lsls	r3, r3, #3
    7ac2:	440b      	add	r3, r1
    7ac4:	689b      	ldr	r3, [r3, #8]
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d02f      	beq.n	7b2a <Adc_UpdateStatusAfterGetStream+0x10a>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7aca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ace:	4a23      	ldr	r2, [pc, #140]	; (7b5c <Adc_UpdateStatusAfterGetStream+0x13c>)
    7ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ad4:	6859      	ldr	r1, [r3, #4]
    7ad6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ada:	4613      	mov	r3, r2
    7adc:	00db      	lsls	r3, r3, #3
    7ade:	1a9b      	subs	r3, r3, r2
    7ae0:	00db      	lsls	r3, r3, #3
    7ae2:	440b      	add	r3, r1
    7ae4:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7ae6:	2b01      	cmp	r3, #1
    7ae8:	d12a      	bne.n	7b40 <Adc_UpdateStatusAfterGetStream+0x120>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7aea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7aee:	4a1b      	ldr	r2, [pc, #108]	; (7b5c <Adc_UpdateStatusAfterGetStream+0x13c>)
    7af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af4:	6859      	ldr	r1, [r3, #4]
    7af6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7afa:	4613      	mov	r3, r2
    7afc:	00db      	lsls	r3, r3, #3
    7afe:	1a9b      	subs	r3, r3, r2
    7b00:	00db      	lsls	r3, r3, #3
    7b02:	440b      	add	r3, r1
    7b04:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7b06:	2b01      	cmp	r3, #1
    7b08:	d11a      	bne.n	7b40 <Adc_UpdateStatusAfterGetStream+0x120>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7b0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b0e:	4a13      	ldr	r2, [pc, #76]	; (7b5c <Adc_UpdateStatusAfterGetStream+0x13c>)
    7b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b14:	6859      	ldr	r1, [r3, #4]
    7b16:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7b1a:	4613      	mov	r3, r2
    7b1c:	00db      	lsls	r3, r3, #3
    7b1e:	1a9b      	subs	r3, r3, r2
    7b20:	00db      	lsls	r3, r3, #3
    7b22:	440b      	add	r3, r1
    7b24:	69db      	ldr	r3, [r3, #28]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7b26:	2b00      	cmp	r3, #0
    7b28:	d10a      	bne.n	7b40 <Adc_UpdateStatusAfterGetStream+0x120>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7b2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b2e:	490c      	ldr	r1, [pc, #48]	; (7b60 <Adc_UpdateStatusAfterGetStream+0x140>)
    7b30:	4613      	mov	r3, r2
    7b32:	005b      	lsls	r3, r3, #1
    7b34:	4413      	add	r3, r2
    7b36:	00db      	lsls	r3, r3, #3
    7b38:	440b      	add	r3, r1
    7b3a:	2200      	movs	r2, #0
    7b3c:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    7b3e:	e009      	b.n	7b54 <Adc_UpdateStatusAfterGetStream+0x134>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7b40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b44:	4906      	ldr	r1, [pc, #24]	; (7b60 <Adc_UpdateStatusAfterGetStream+0x140>)
    7b46:	4613      	mov	r3, r2
    7b48:	005b      	lsls	r3, r3, #1
    7b4a:	4413      	add	r3, r2
    7b4c:	00db      	lsls	r3, r3, #3
    7b4e:	440b      	add	r3, r1
    7b50:	2201      	movs	r2, #1
    7b52:	601a      	str	r2, [r3, #0]
}
    7b54:	bf00      	nop
    7b56:	b004      	add	sp, #16
    7b58:	4770      	bx	lr
    7b5a:	bf00      	nop
    7b5c:	1fff8d04 	.word	0x1fff8d04
    7b60:	1fff8d08 	.word	0x1fff8d08

00007b64 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    7b64:	b500      	push	{lr}
    7b66:	b085      	sub	sp, #20
    7b68:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7b6a:	f002 fad7 	bl	a11c <Adc_GetCoreID>
    7b6e:	4603      	mov	r3, r0
    7b70:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7b74:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b78:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7b7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b80:	b2db      	uxtb	r3, r3
    7b82:	4619      	mov	r1, r3
    7b84:	9801      	ldr	r0, [sp, #4]
    7b86:	f7ff fb8b 	bl	72a0 <Adc_CheckCurrentCoreId>
    7b8a:	4603      	mov	r3, r0
    7b8c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    7b90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d12c      	bne.n	7bf2 <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    7b98:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b9c:	b2db      	uxtb	r3, r3
    7b9e:	4619      	mov	r1, r3
    7ba0:	4a16      	ldr	r2, [pc, #88]	; (7bfc <Adc_Init+0x98>)
    7ba2:	9b01      	ldr	r3, [sp, #4]
    7ba4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7ba8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bac:	b2db      	uxtb	r3, r3
    7bae:	4618      	mov	r0, r3
    7bb0:	f7ff fb1c 	bl	71ec <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    7bb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bb8:	b2db      	uxtb	r3, r3
    7bba:	4618      	mov	r0, r3
    7bbc:	f7ff faa0 	bl	7100 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    7bc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7bc4:	b2db      	uxtb	r3, r3
    7bc6:	461a      	mov	r2, r3
    7bc8:	4b0c      	ldr	r3, [pc, #48]	; (7bfc <Adc_Init+0x98>)
    7bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bce:	681b      	ldr	r3, [r3, #0]
    7bd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7bd4:	4611      	mov	r1, r2
    7bd6:	4618      	mov	r0, r3
    7bd8:	f001 ffcc 	bl	9b74 <Adc_Ipw_Init>
    7bdc:	4603      	mov	r3, r0
    7bde:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7be2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7be6:	2b01      	cmp	r3, #1
    7be8:	d103      	bne.n	7bf2 <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    7bea:	212b      	movs	r1, #43	; 0x2b
    7bec:	2000      	movs	r0, #0
    7bee:	f7ff f851 	bl	6c94 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    7bf2:	bf00      	nop
    7bf4:	b005      	add	sp, #20
    7bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    7bfa:	bf00      	nop
    7bfc:	1fff8d04 	.word	0x1fff8d04

00007c00 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    7c00:	b500      	push	{lr}
    7c02:	b085      	sub	sp, #20
    7c04:	4603      	mov	r3, r0
    7c06:	9100      	str	r1, [sp, #0]
    7c08:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    7c0c:	2301      	movs	r3, #1
    7c0e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    7c12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c16:	4618      	mov	r0, r3
    7c18:	f7ff f960 	bl	6edc <Adc_ValidateSetupBufferNotBusy>
    7c1c:	4603      	mov	r3, r0
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d10d      	bne.n	7c3e <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    7c22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c26:	4909      	ldr	r1, [pc, #36]	; (7c4c <Adc_SetupResultBuffer+0x4c>)
    7c28:	4613      	mov	r3, r2
    7c2a:	005b      	lsls	r3, r3, #1
    7c2c:	4413      	add	r3, r2
    7c2e:	00db      	lsls	r3, r3, #3
    7c30:	440b      	add	r3, r1
    7c32:	3310      	adds	r3, #16
    7c34:	9a00      	ldr	r2, [sp, #0]
    7c36:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7c38:	2300      	movs	r3, #0
    7c3a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    7c3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7c42:	4618      	mov	r0, r3
    7c44:	b005      	add	sp, #20
    7c46:	f85d fb04 	ldr.w	pc, [sp], #4
    7c4a:	bf00      	nop
    7c4c:	1fff8d08 	.word	0x1fff8d08

00007c50 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    7c50:	b500      	push	{lr}
    7c52:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7c54:	2300      	movs	r3, #0
    7c56:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7c5a:	f002 fa5f 	bl	a11c <Adc_GetCoreID>
    7c5e:	4603      	mov	r3, r0
    7c60:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7c64:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7c68:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7c6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7c70:	b2db      	uxtb	r3, r3
    7c72:	461a      	mov	r2, r3
    7c74:	4b2f      	ldr	r3, [pc, #188]	; (7d34 <Adc_DeInit+0xe4>)
    7c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7c7e:	4611      	mov	r1, r2
    7c80:	4618      	mov	r0, r3
    7c82:	f7ff fb0d 	bl	72a0 <Adc_CheckCurrentCoreId>
    7c86:	4603      	mov	r3, r0
    7c88:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7c8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7c90:	2b00      	cmp	r3, #0
    7c92:	d14b      	bne.n	7d2c <Adc_DeInit+0xdc>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    7c94:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7c98:	b2db      	uxtb	r3, r3
    7c9a:	4618      	mov	r0, r3
    7c9c:	f7ff f8d0 	bl	6e40 <Adc_ValidateDeInitNotBusy>
    7ca0:	4603      	mov	r3, r0
    7ca2:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    7ca6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7caa:	2b00      	cmp	r3, #0
    7cac:	d13e      	bne.n	7d2c <Adc_DeInit+0xdc>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    7cae:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7cb2:	b2db      	uxtb	r3, r3
    7cb4:	4618      	mov	r0, r3
    7cb6:	f001 ffa2 	bl	9bfe <Adc_Ipw_DeInit>
    7cba:	4603      	mov	r3, r0
    7cbc:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    7cc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7cc4:	2b01      	cmp	r3, #1
    7cc6:	d103      	bne.n	7cd0 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7cc8:	212b      	movs	r1, #43	; 0x2b
    7cca:	2001      	movs	r0, #1
    7ccc:	f7fe ffe2 	bl	6c94 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7cd0:	2300      	movs	r3, #0
    7cd2:	f88d 3007 	strb.w	r3, [sp, #7]
    7cd6:	e01d      	b.n	7d14 <Adc_DeInit+0xc4>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7cd8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7cdc:	b2db      	uxtb	r3, r3
    7cde:	461a      	mov	r2, r3
    7ce0:	4b14      	ldr	r3, [pc, #80]	; (7d34 <Adc_DeInit+0xe4>)
    7ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ce6:	681a      	ldr	r2, [r3, #0]
    7ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cec:	4413      	add	r3, r2
    7cee:	7f9b      	ldrb	r3, [r3, #30]
    7cf0:	2b01      	cmp	r3, #1
    7cf2:	d10a      	bne.n	7d0a <Adc_DeInit+0xba>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7cf4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7cf8:	490f      	ldr	r1, [pc, #60]	; (7d38 <Adc_DeInit+0xe8>)
    7cfa:	4613      	mov	r3, r2
    7cfc:	005b      	lsls	r3, r3, #1
    7cfe:	4413      	add	r3, r2
    7d00:	005b      	lsls	r3, r3, #1
    7d02:	440b      	add	r3, r1
    7d04:	3304      	adds	r3, #4
    7d06:	2200      	movs	r2, #0
    7d08:	701a      	strb	r2, [r3, #0]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d0e:	3301      	adds	r3, #1
    7d10:	f88d 3007 	strb.w	r3, [sp, #7]
    7d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d18:	2b01      	cmp	r3, #1
    7d1a:	d9dd      	bls.n	7cd8 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    7d1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7d20:	b2db      	uxtb	r3, r3
    7d22:	4619      	mov	r1, r3
    7d24:	4b03      	ldr	r3, [pc, #12]	; (7d34 <Adc_DeInit+0xe4>)
    7d26:	2200      	movs	r2, #0
    7d28:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    7d2c:	bf00      	nop
    7d2e:	b003      	add	sp, #12
    7d30:	f85d fb04 	ldr.w	pc, [sp], #4
    7d34:	1fff8d04 	.word	0x1fff8d04
    7d38:	1fff8d20 	.word	0x1fff8d20

00007d3c <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    7d3c:	b500      	push	{lr}
    7d3e:	b085      	sub	sp, #20
    7d40:	4603      	mov	r3, r0
    7d42:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7d46:	2300      	movs	r3, #0
    7d48:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7d4c:	2300      	movs	r3, #0
    7d4e:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7d52:	f002 f9e3 	bl	a11c <Adc_GetCoreID>
    7d56:	4603      	mov	r3, r0
    7d58:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7d5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7d60:	b2db      	uxtb	r3, r3
    7d62:	461a      	mov	r2, r3
    7d64:	4b1b      	ldr	r3, [pc, #108]	; (7dd4 <Adc_StartGroupConversion+0x98>)
    7d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d6a:	68da      	ldr	r2, [r3, #12]
    7d6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d70:	005b      	lsls	r3, r3, #1
    7d72:	4413      	add	r3, r2
    7d74:	881b      	ldrh	r3, [r3, #0]
    7d76:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    7d7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7d7e:	b2da      	uxtb	r2, r3
    7d80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d84:	4611      	mov	r1, r2
    7d86:	4618      	mov	r0, r3
    7d88:	f7ff f8cc 	bl	6f24 <Adc_ValidateStateStartGroupConvNotBusy>
    7d8c:	4603      	mov	r3, r0
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d11b      	bne.n	7dca <Adc_StartGroupConversion+0x8e>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7d92:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7d96:	b2db      	uxtb	r3, r3
    7d98:	461a      	mov	r2, r3
    7d9a:	4b0e      	ldr	r3, [pc, #56]	; (7dd4 <Adc_StartGroupConversion+0x98>)
    7d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7da0:	6859      	ldr	r1, [r3, #4]
    7da2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7da6:	4613      	mov	r3, r2
    7da8:	00db      	lsls	r3, r3, #3
    7daa:	1a9b      	subs	r3, r3, r2
    7dac:	00db      	lsls	r3, r3, #3
    7dae:	440b      	add	r3, r1
    7db0:	789b      	ldrb	r3, [r3, #2]
    7db2:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7db6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7dba:	b2da      	uxtb	r2, r3
    7dbc:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7dc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7dc4:	4618      	mov	r0, r3
    7dc6:	f7ff fa9e 	bl	7306 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7dca:	bf00      	nop
    7dcc:	b005      	add	sp, #20
    7dce:	f85d fb04 	ldr.w	pc, [sp], #4
    7dd2:	bf00      	nop
    7dd4:	1fff8d04 	.word	0x1fff8d04

00007dd8 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7dd8:	b500      	push	{lr}
    7dda:	b085      	sub	sp, #20
    7ddc:	4603      	mov	r3, r0
    7dde:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7de2:	2300      	movs	r3, #0
    7de4:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7de8:	2300      	movs	r3, #0
    7dea:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    7dee:	f002 f995 	bl	a11c <Adc_GetCoreID>
    7df2:	4603      	mov	r3, r0
    7df4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    7df8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7dfc:	b2da      	uxtb	r2, r3
    7dfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e02:	4619      	mov	r1, r3
    7e04:	2003      	movs	r0, #3
    7e06:	f7ff f909 	bl	701c <Adc_ValidateStateNotIdle>
    7e0a:	4603      	mov	r3, r0
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d12a      	bne.n	7e66 <Adc_StopGroupConversion+0x8e>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7e10:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e14:	b2db      	uxtb	r3, r3
    7e16:	461a      	mov	r2, r3
    7e18:	4b15      	ldr	r3, [pc, #84]	; (7e70 <Adc_StopGroupConversion+0x98>)
    7e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e1e:	68da      	ldr	r2, [r3, #12]
    7e20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e24:	005b      	lsls	r3, r3, #1
    7e26:	4413      	add	r3, r2
    7e28:	881b      	ldrh	r3, [r3, #0]
    7e2a:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7e2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e32:	b2db      	uxtb	r3, r3
    7e34:	461a      	mov	r2, r3
    7e36:	4b0e      	ldr	r3, [pc, #56]	; (7e70 <Adc_StopGroupConversion+0x98>)
    7e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e3c:	6859      	ldr	r1, [r3, #4]
    7e3e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7e42:	4613      	mov	r3, r2
    7e44:	00db      	lsls	r3, r3, #3
    7e46:	1a9b      	subs	r3, r3, r2
    7e48:	00db      	lsls	r3, r3, #3
    7e4a:	440b      	add	r3, r1
    7e4c:	789b      	ldrb	r3, [r3, #2]
    7e4e:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    7e52:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e56:	b2da      	uxtb	r2, r3
    7e58:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7e5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e60:	4618      	mov	r0, r3
    7e62:	f7ff fb43 	bl	74ec <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7e66:	bf00      	nop
    7e68:	b005      	add	sp, #20
    7e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    7e6e:	bf00      	nop
    7e70:	1fff8d04 	.word	0x1fff8d04

00007e74 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7e74:	b500      	push	{lr}
    7e76:	b085      	sub	sp, #20
    7e78:	4603      	mov	r3, r0
    7e7a:	9100      	str	r1, [sp, #0]
    7e7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7e80:	2301      	movs	r3, #1
    7e82:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7e86:	2301      	movs	r3, #1
    7e88:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7e8c:	f002 f946 	bl	a11c <Adc_GetCoreID>
    7e90:	4603      	mov	r3, r0
    7e92:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7e96:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7e9a:	b2da      	uxtb	r2, r3
    7e9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ea0:	4619      	mov	r1, r3
    7ea2:	2004      	movs	r0, #4
    7ea4:	f7ff f8ba 	bl	701c <Adc_ValidateStateNotIdle>
    7ea8:	4603      	mov	r3, r0
    7eaa:	2b00      	cmp	r3, #0
    7eac:	d121      	bne.n	7ef2 <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7eae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7eb2:	b2db      	uxtb	r3, r3
    7eb4:	f10d 020d 	add.w	r2, sp, #13
    7eb8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7ebc:	9900      	ldr	r1, [sp, #0]
    7ebe:	f002 f882 	bl	9fc6 <Adc_Ipw_ReadGroup>
    7ec2:	4603      	mov	r3, r0
    7ec4:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7ec8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d006      	beq.n	7ede <Adc_ReadGroup+0x6a>
    7ed0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ed4:	f083 0301 	eor.w	r3, r3, #1
    7ed8:	b2db      	uxtb	r3, r3
    7eda:	2b00      	cmp	r3, #0
    7edc:	d009      	beq.n	7ef2 <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7ede:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7ee2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7ee6:	b2da      	uxtb	r2, r3
    7ee8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7eec:	4618      	mov	r0, r3
    7eee:	f7ff fbc1 	bl	7674 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7ef2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7ef6:	4618      	mov	r0, r3
    7ef8:	b005      	add	sp, #20
    7efa:	f85d fb04 	ldr.w	pc, [sp], #4

00007efe <Adc_EnableGroupNotification>:

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
/* SWS_Adc_00372, SWS_Adc_00413 */
/** @implements      Adc_EnableGroupNotification_Activity */
void Adc_EnableGroupNotification(Adc_GroupType Group)
{
    7efe:	b082      	sub	sp, #8
    7f00:	4603      	mov	r3, r0
    7f02:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_NotifyCapablity(ADC_ENABLEGROUPNOTIFICATION_ID, Group, CoreId))
        {
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */
            /* SWS_Adc_00057 */
            Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_ENABLED;
    7f06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f0a:	4906      	ldr	r1, [pc, #24]	; (7f24 <Adc_EnableGroupNotification+0x26>)
    7f0c:	4613      	mov	r3, r2
    7f0e:	005b      	lsls	r3, r3, #1
    7f10:	4413      	add	r3, r2
    7f12:	00db      	lsls	r3, r3, #3
    7f14:	440b      	add	r3, r1
    7f16:	3308      	adds	r3, #8
    7f18:	2201      	movs	r2, #1
    7f1a:	601a      	str	r2, [r3, #0]
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7f1c:	bf00      	nop
    7f1e:	b002      	add	sp, #8
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop
    7f24:	1fff8d08 	.word	0x1fff8d08

00007f28 <Adc_DisableGroupNotification>:

/* SWS_Adc_00373, SWS_Adc_00413, SWS_Adc_00416 */
/** @implements      Adc_DisableGroupNotification_Activity */
void Adc_DisableGroupNotification(Adc_GroupType Group)
{
    7f28:	b082      	sub	sp, #8
    7f2a:	4603      	mov	r3, r0
    7f2c:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_NotifyCapablity(ADC_DISABLEGROUPNOTIFICATION_ID, Group, CoreId))
        {
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */
            /* SWS_Adc_00058 */
            Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
    7f30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f34:	4905      	ldr	r1, [pc, #20]	; (7f4c <Adc_DisableGroupNotification+0x24>)
    7f36:	4613      	mov	r3, r2
    7f38:	005b      	lsls	r3, r3, #1
    7f3a:	4413      	add	r3, r2
    7f3c:	00db      	lsls	r3, r3, #3
    7f3e:	440b      	add	r3, r1
    7f40:	3308      	adds	r3, #8
    7f42:	2200      	movs	r2, #0
    7f44:	601a      	str	r2, [r3, #0]
#endif /* ADC_VALIDATE_NOTIFY_CAPABILITY == STD_ON */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7f46:	bf00      	nop
    7f48:	b002      	add	sp, #8
    7f4a:	4770      	bx	lr
    7f4c:	1fff8d08 	.word	0x1fff8d08

00007f50 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7f50:	b084      	sub	sp, #16
    7f52:	4603      	mov	r3, r0
    7f54:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7f58:	2300      	movs	r3, #0
    7f5a:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7f5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f60:	4905      	ldr	r1, [pc, #20]	; (7f78 <Adc_GetGroupStatus+0x28>)
    7f62:	4613      	mov	r3, r2
    7f64:	005b      	lsls	r3, r3, #1
    7f66:	4413      	add	r3, r2
    7f68:	00db      	lsls	r3, r3, #3
    7f6a:	440b      	add	r3, r1
    7f6c:	681b      	ldr	r3, [r3, #0]
    7f6e:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7f70:	9b03      	ldr	r3, [sp, #12]
}
    7f72:	4618      	mov	r0, r3
    7f74:	b004      	add	sp, #16
    7f76:	4770      	bx	lr
    7f78:	1fff8d08 	.word	0x1fff8d08

00007f7c <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7f7c:	b500      	push	{lr}
    7f7e:	b085      	sub	sp, #20
    7f80:	4603      	mov	r3, r0
    7f82:	9100      	str	r1, [sp, #0]
    7f84:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7f88:	f002 f8c8 	bl	a11c <Adc_GetCoreID>
    7f8c:	4603      	mov	r3, r0
    7f8e:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7f92:	2300      	movs	r3, #0
    7f94:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7f98:	2300      	movs	r3, #0
    7f9a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7f9e:	2300      	movs	r3, #0
    7fa0:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7fa4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7fa8:	b2da      	uxtb	r2, r3
    7faa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7fae:	4619      	mov	r1, r3
    7fb0:	200b      	movs	r0, #11
    7fb2:	f7ff f833 	bl	701c <Adc_ValidateStateNotIdle>
    7fb6:	4603      	mov	r3, r0
    7fb8:	2b00      	cmp	r3, #0
    7fba:	f040 8090 	bne.w	80de <Adc_GetStreamLastPointer+0x162>
        {
            *PtrToSamplePtr = NULL_PTR;
    7fbe:	9b00      	ldr	r3, [sp, #0]
    7fc0:	2200      	movs	r2, #0
    7fc2:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7fc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fc8:	4949      	ldr	r1, [pc, #292]	; (80f0 <Adc_GetStreamLastPointer+0x174>)
    7fca:	4613      	mov	r3, r2
    7fcc:	005b      	lsls	r3, r3, #1
    7fce:	4413      	add	r3, r2
    7fd0:	00db      	lsls	r3, r3, #3
    7fd2:	440b      	add	r3, r1
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	2b00      	cmp	r3, #0
    7fd8:	f000 8084 	beq.w	80e4 <Adc_GetStreamLastPointer+0x168>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7fdc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fe0:	4943      	ldr	r1, [pc, #268]	; (80f0 <Adc_GetStreamLastPointer+0x174>)
    7fe2:	4613      	mov	r3, r2
    7fe4:	005b      	lsls	r3, r3, #1
    7fe6:	4413      	add	r3, r2
    7fe8:	00db      	lsls	r3, r3, #3
    7fea:	440b      	add	r3, r1
    7fec:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7fee:	2b01      	cmp	r3, #1
    7ff0:	d078      	beq.n	80e4 <Adc_GetStreamLastPointer+0x168>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7ff2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ff6:	b2db      	uxtb	r3, r3
    7ff8:	461a      	mov	r2, r3
    7ffa:	4b3e      	ldr	r3, [pc, #248]	; (80f4 <Adc_GetStreamLastPointer+0x178>)
    7ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8000:	68da      	ldr	r2, [r3, #12]
    8002:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8006:	005b      	lsls	r3, r3, #1
    8008:	4413      	add	r3, r2
    800a:	881b      	ldrh	r3, [r3, #0]
    800c:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8010:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8014:	4936      	ldr	r1, [pc, #216]	; (80f0 <Adc_GetStreamLastPointer+0x174>)
    8016:	4613      	mov	r3, r2
    8018:	005b      	lsls	r3, r3, #1
    801a:	4413      	add	r3, r2
    801c:	00db      	lsls	r3, r3, #3
    801e:	440b      	add	r3, r1
    8020:	330c      	adds	r3, #12
    8022:	881b      	ldrh	r3, [r3, #0]
    8024:	b29b      	uxth	r3, r3
    8026:	2b00      	cmp	r3, #0
    8028:	d125      	bne.n	8076 <Adc_GetStreamLastPointer+0xfa>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    802a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    802e:	b2db      	uxtb	r3, r3
    8030:	461a      	mov	r2, r3
    8032:	4b30      	ldr	r3, [pc, #192]	; (80f4 <Adc_GetStreamLastPointer+0x178>)
    8034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8038:	6859      	ldr	r1, [r3, #4]
    803a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    803e:	4613      	mov	r3, r2
    8040:	00db      	lsls	r3, r3, #3
    8042:	1a9b      	subs	r3, r3, r2
    8044:	00db      	lsls	r3, r3, #3
    8046:	440b      	add	r3, r1
    8048:	8c1b      	ldrh	r3, [r3, #32]
    804a:	3b01      	subs	r3, #1
    804c:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8050:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8054:	b2db      	uxtb	r3, r3
    8056:	461a      	mov	r2, r3
    8058:	4b26      	ldr	r3, [pc, #152]	; (80f4 <Adc_GetStreamLastPointer+0x178>)
    805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    805e:	6859      	ldr	r1, [r3, #4]
    8060:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    8064:	4613      	mov	r3, r2
    8066:	00db      	lsls	r3, r3, #3
    8068:	1a9b      	subs	r3, r3, r2
    806a:	00db      	lsls	r3, r3, #3
    806c:	440b      	add	r3, r1
    806e:	8c1b      	ldrh	r3, [r3, #32]
    8070:	f8ad 300e 	strh.w	r3, [sp, #14]
    8074:	e019      	b.n	80aa <Adc_GetStreamLastPointer+0x12e>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8076:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    807a:	491d      	ldr	r1, [pc, #116]	; (80f0 <Adc_GetStreamLastPointer+0x174>)
    807c:	4613      	mov	r3, r2
    807e:	005b      	lsls	r3, r3, #1
    8080:	4413      	add	r3, r2
    8082:	00db      	lsls	r3, r3, #3
    8084:	440b      	add	r3, r1
    8086:	330c      	adds	r3, #12
    8088:	881b      	ldrh	r3, [r3, #0]
    808a:	b29b      	uxth	r3, r3
    808c:	3b01      	subs	r3, #1
    808e:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    8092:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8096:	4916      	ldr	r1, [pc, #88]	; (80f0 <Adc_GetStreamLastPointer+0x174>)
    8098:	4613      	mov	r3, r2
    809a:	005b      	lsls	r3, r3, #1
    809c:	4413      	add	r3, r2
    809e:	00db      	lsls	r3, r3, #3
    80a0:	440b      	add	r3, r1
    80a2:	330c      	adds	r3, #12
    80a4:	881b      	ldrh	r3, [r3, #0]
    80a6:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    80aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    80ae:	4910      	ldr	r1, [pc, #64]	; (80f0 <Adc_GetStreamLastPointer+0x174>)
    80b0:	4613      	mov	r3, r2
    80b2:	005b      	lsls	r3, r3, #1
    80b4:	4413      	add	r3, r2
    80b6:	00db      	lsls	r3, r3, #3
    80b8:	440b      	add	r3, r1
    80ba:	3310      	adds	r3, #16
    80bc:	681a      	ldr	r2, [r3, #0]
    80be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80c2:	005b      	lsls	r3, r3, #1
    80c4:	441a      	add	r2, r3
    80c6:	9b00      	ldr	r3, [sp, #0]
    80c8:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    80ca:	f89d 3009 	ldrb.w	r3, [sp, #9]
    80ce:	b2da      	uxtb	r2, r3
    80d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80d4:	4611      	mov	r1, r2
    80d6:	4618      	mov	r0, r3
    80d8:	f7ff fca2 	bl	7a20 <Adc_UpdateStatusAfterGetStream>
    80dc:	e002      	b.n	80e4 <Adc_GetStreamLastPointer+0x168>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    80de:	9b00      	ldr	r3, [sp, #0]
    80e0:	2200      	movs	r2, #0
    80e2:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    80e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    80e8:	4618      	mov	r0, r3
    80ea:	b005      	add	sp, #20
    80ec:	f85d fb04 	ldr.w	pc, [sp], #4
    80f0:	1fff8d08 	.word	0x1fff8d08
    80f4:	1fff8d04 	.word	0x1fff8d04

000080f8 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    80f8:	b082      	sub	sp, #8
    80fa:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    80fc:	9b01      	ldr	r3, [sp, #4]
    80fe:	222b      	movs	r2, #43	; 0x2b
    8100:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    8102:	9b01      	ldr	r3, [sp, #4]
    8104:	227b      	movs	r2, #123	; 0x7b
    8106:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    8108:	9b01      	ldr	r3, [sp, #4]
    810a:	2202      	movs	r2, #2
    810c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    810e:	9b01      	ldr	r3, [sp, #4]
    8110:	2200      	movs	r2, #0
    8112:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    8114:	9b01      	ldr	r3, [sp, #4]
    8116:	2200      	movs	r2, #0
    8118:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    811a:	bf00      	nop
    811c:	b002      	add	sp, #8
    811e:	4770      	bx	lr

00008120 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    8120:	b500      	push	{lr}
    8122:	b085      	sub	sp, #20
    8124:	4603      	mov	r3, r0
    8126:	9100      	str	r1, [sp, #0]
    8128:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    812c:	2300      	movs	r3, #0
    812e:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    8132:	f001 fff3 	bl	a11c <Adc_GetCoreID>
    8136:	4603      	mov	r3, r0
    8138:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    813c:	9b00      	ldr	r3, [sp, #0]
    813e:	2201      	movs	r2, #1
    8140:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    8142:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8146:	2129      	movs	r1, #41	; 0x29
    8148:	4618      	mov	r0, r3
    814a:	f7fe fdb8 	bl	6cbe <Adc_ValidateNotBusyNoQueue>
    814e:	4603      	mov	r3, r0
    8150:	2b00      	cmp	r3, #0
    8152:	d115      	bne.n	8180 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8154:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8158:	b2db      	uxtb	r3, r3
    815a:	4619      	mov	r1, r3
    815c:	2029      	movs	r0, #41	; 0x29
    815e:	f7fe fe1d 	bl	6d9c <Adc_ValidateCheckGroupNotConversion>
    8162:	4603      	mov	r3, r0
    8164:	2b00      	cmp	r3, #0
    8166:	d10b      	bne.n	8180 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    8168:	f89d 300e 	ldrb.w	r3, [sp, #14]
    816c:	b2da      	uxtb	r2, r3
    816e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8172:	9900      	ldr	r1, [sp, #0]
    8174:	4618      	mov	r0, r3
    8176:	f001 ffa7 	bl	a0c8 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    817a:	2301      	movs	r3, #1
    817c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8180:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8184:	2b00      	cmp	r3, #0
    8186:	d007      	beq.n	8198 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    8188:	9b00      	ldr	r3, [sp, #0]
    818a:	781b      	ldrb	r3, [r3, #0]
    818c:	2b01      	cmp	r3, #1
    818e:	d103      	bne.n	8198 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8190:	212b      	movs	r1, #43	; 0x2b
    8192:	2029      	movs	r0, #41	; 0x29
    8194:	f7fe fd7e 	bl	6c94 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    8198:	bf00      	nop
    819a:	b005      	add	sp, #20
    819c:	f85d fb04 	ldr.w	pc, [sp], #4

000081a0 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    81a0:	b086      	sub	sp, #24
    81a2:	9003      	str	r0, [sp, #12]
    81a4:	9102      	str	r1, [sp, #8]
    81a6:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    81a8:	9b03      	ldr	r3, [sp, #12]
    81aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    81ae:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    81b0:	9b02      	ldr	r3, [sp, #8]
    81b2:	43db      	mvns	r3, r3
    81b4:	9a05      	ldr	r2, [sp, #20]
    81b6:	4013      	ands	r3, r2
    81b8:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    81ba:	9a05      	ldr	r2, [sp, #20]
    81bc:	9b01      	ldr	r3, [sp, #4]
    81be:	4313      	orrs	r3, r2
    81c0:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    81c2:	9b03      	ldr	r3, [sp, #12]
    81c4:	9a05      	ldr	r2, [sp, #20]
    81c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    81ca:	bf00      	nop
    81cc:	b006      	add	sp, #24
    81ce:	4770      	bx	lr

000081d0 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    81d0:	b086      	sub	sp, #24
    81d2:	9003      	str	r0, [sp, #12]
    81d4:	9102      	str	r1, [sp, #8]
    81d6:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    81d8:	9b03      	ldr	r3, [sp, #12]
    81da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    81dc:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    81de:	9b05      	ldr	r3, [sp, #20]
    81e0:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    81e4:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    81e6:	9b02      	ldr	r3, [sp, #8]
    81e8:	015b      	lsls	r3, r3, #5
    81ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
    81ee:	9a05      	ldr	r2, [sp, #20]
    81f0:	4313      	orrs	r3, r2
    81f2:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    81f4:	9b01      	ldr	r3, [sp, #4]
    81f6:	f003 0303 	and.w	r3, r3, #3
    81fa:	9a05      	ldr	r2, [sp, #20]
    81fc:	4313      	orrs	r3, r2
    81fe:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    8200:	9b03      	ldr	r3, [sp, #12]
    8202:	9a05      	ldr	r2, [sp, #20]
    8204:	641a      	str	r2, [r3, #64]	; 0x40
}
    8206:	bf00      	nop
    8208:	b006      	add	sp, #24
    820a:	4770      	bx	lr

0000820c <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    820c:	b084      	sub	sp, #16
    820e:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8210:	2300      	movs	r3, #0
    8212:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8214:	9b01      	ldr	r3, [sp, #4]
    8216:	095b      	lsrs	r3, r3, #5
    8218:	f003 0303 	and.w	r3, r3, #3
    821c:	2b03      	cmp	r3, #3
    821e:	d00c      	beq.n	823a <Adc_HwAcc_GetClockDivide+0x2e>
    8220:	2b03      	cmp	r3, #3
    8222:	d80d      	bhi.n	8240 <Adc_HwAcc_GetClockDivide+0x34>
    8224:	2b01      	cmp	r3, #1
    8226:	d002      	beq.n	822e <Adc_HwAcc_GetClockDivide+0x22>
    8228:	2b02      	cmp	r3, #2
    822a:	d003      	beq.n	8234 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    822c:	e008      	b.n	8240 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    822e:	2301      	movs	r3, #1
    8230:	9303      	str	r3, [sp, #12]
            break;
    8232:	e006      	b.n	8242 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8234:	2302      	movs	r3, #2
    8236:	9303      	str	r3, [sp, #12]
            break;
    8238:	e003      	b.n	8242 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    823a:	2303      	movs	r3, #3
    823c:	9303      	str	r3, [sp, #12]
            break;
    823e:	e000      	b.n	8242 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8240:	bf00      	nop
    }
    return ReturnValue;
    8242:	9b03      	ldr	r3, [sp, #12]
}
    8244:	4618      	mov	r0, r3
    8246:	b004      	add	sp, #16
    8248:	4770      	bx	lr

0000824a <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    824a:	b084      	sub	sp, #16
    824c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    824e:	2300      	movs	r3, #0
    8250:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8252:	9b01      	ldr	r3, [sp, #4]
    8254:	f003 0303 	and.w	r3, r3, #3
    8258:	2b03      	cmp	r3, #3
    825a:	d00c      	beq.n	8276 <Adc_HwAcc_GetInputClock+0x2c>
    825c:	2b03      	cmp	r3, #3
    825e:	d80d      	bhi.n	827c <Adc_HwAcc_GetInputClock+0x32>
    8260:	2b01      	cmp	r3, #1
    8262:	d002      	beq.n	826a <Adc_HwAcc_GetInputClock+0x20>
    8264:	2b02      	cmp	r3, #2
    8266:	d003      	beq.n	8270 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    8268:	e008      	b.n	827c <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    826a:	2301      	movs	r3, #1
    826c:	9303      	str	r3, [sp, #12]
            break;
    826e:	e006      	b.n	827e <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8270:	2302      	movs	r3, #2
    8272:	9303      	str	r3, [sp, #12]
            break;
    8274:	e003      	b.n	827e <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    8276:	2303      	movs	r3, #3
    8278:	9303      	str	r3, [sp, #12]
            break;
    827a:	e000      	b.n	827e <Adc_HwAcc_GetInputClock+0x34>
            break;
    827c:	bf00      	nop
    }
    return ReturnValue;
    827e:	9b03      	ldr	r3, [sp, #12]
}
    8280:	4618      	mov	r0, r3
    8282:	b004      	add	sp, #16
    8284:	4770      	bx	lr

00008286 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    8286:	b084      	sub	sp, #16
    8288:	9001      	str	r0, [sp, #4]
    828a:	460b      	mov	r3, r1
    828c:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8290:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8294:	2b00      	cmp	r3, #0
    8296:	d002      	beq.n	829e <Adc_HwAcc_SetSampleTime+0x18>
    8298:	f89d 3003 	ldrb.w	r3, [sp, #3]
    829c:	e000      	b.n	82a0 <Adc_HwAcc_SetSampleTime+0x1a>
    829e:	2301      	movs	r3, #1
    82a0:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    82a4:	9b01      	ldr	r3, [sp, #4]
    82a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    82a8:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    82aa:	9b02      	ldr	r3, [sp, #8]
    82ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    82b0:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    82b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82b6:	9a02      	ldr	r2, [sp, #8]
    82b8:	4313      	orrs	r3, r2
    82ba:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    82bc:	9b01      	ldr	r3, [sp, #4]
    82be:	9a02      	ldr	r2, [sp, #8]
    82c0:	645a      	str	r2, [r3, #68]	; 0x44
}
    82c2:	bf00      	nop
    82c4:	b004      	add	sp, #16
    82c6:	4770      	bx	lr

000082c8 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    82c8:	b086      	sub	sp, #24
    82ca:	9003      	str	r0, [sp, #12]
    82cc:	460b      	mov	r3, r1
    82ce:	9201      	str	r2, [sp, #4]
    82d0:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    82d4:	9b03      	ldr	r3, [sp, #12]
    82d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    82da:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    82dc:	9b05      	ldr	r3, [sp, #20]
    82de:	f023 0307 	bic.w	r3, r3, #7
    82e2:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    82e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    82e8:	2b00      	cmp	r3, #0
    82ea:	d001      	beq.n	82f0 <Adc_HwAcc_SetAveraging+0x28>
    82ec:	2304      	movs	r3, #4
    82ee:	e000      	b.n	82f2 <Adc_HwAcc_SetAveraging+0x2a>
    82f0:	2300      	movs	r3, #0
    82f2:	9a05      	ldr	r2, [sp, #20]
    82f4:	4313      	orrs	r3, r2
    82f6:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    82f8:	9b01      	ldr	r3, [sp, #4]
    82fa:	f003 0303 	and.w	r3, r3, #3
    82fe:	9a05      	ldr	r2, [sp, #20]
    8300:	4313      	orrs	r3, r2
    8302:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    8304:	9b03      	ldr	r3, [sp, #12]
    8306:	9a05      	ldr	r2, [sp, #20]
    8308:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    830c:	bf00      	nop
    830e:	b006      	add	sp, #24
    8310:	4770      	bx	lr

00008312 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8312:	b084      	sub	sp, #16
    8314:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    8316:	2300      	movs	r3, #0
    8318:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    831a:	9b01      	ldr	r3, [sp, #4]
    831c:	f003 0303 	and.w	r3, r3, #3
    8320:	2b03      	cmp	r3, #3
    8322:	d00c      	beq.n	833e <Adc_HwAcc_GetAverageSelect+0x2c>
    8324:	2b03      	cmp	r3, #3
    8326:	d80d      	bhi.n	8344 <Adc_HwAcc_GetAverageSelect+0x32>
    8328:	2b01      	cmp	r3, #1
    832a:	d002      	beq.n	8332 <Adc_HwAcc_GetAverageSelect+0x20>
    832c:	2b02      	cmp	r3, #2
    832e:	d003      	beq.n	8338 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8330:	e008      	b.n	8344 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8332:	2301      	movs	r3, #1
    8334:	9303      	str	r3, [sp, #12]
            break;
    8336:	e006      	b.n	8346 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    8338:	2302      	movs	r3, #2
    833a:	9303      	str	r3, [sp, #12]
            break;
    833c:	e003      	b.n	8346 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    833e:	2303      	movs	r3, #3
    8340:	9303      	str	r3, [sp, #12]
            break;
    8342:	e000      	b.n	8346 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8344:	bf00      	nop
    }
    return ReturnValue;
    8346:	9b03      	ldr	r3, [sp, #12]
}
    8348:	4618      	mov	r0, r3
    834a:	b004      	add	sp, #16
    834c:	4770      	bx	lr

0000834e <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    834e:	b084      	sub	sp, #16
    8350:	9001      	str	r0, [sp, #4]
    8352:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8354:	9b01      	ldr	r3, [sp, #4]
    8356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    835a:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    835c:	9b03      	ldr	r3, [sp, #12]
    835e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8362:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8364:	9b00      	ldr	r3, [sp, #0]
    8366:	019b      	lsls	r3, r3, #6
    8368:	f003 0340 	and.w	r3, r3, #64	; 0x40
    836c:	9a03      	ldr	r2, [sp, #12]
    836e:	4313      	orrs	r3, r2
    8370:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8372:	9b01      	ldr	r3, [sp, #4]
    8374:	9a03      	ldr	r2, [sp, #12]
    8376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    837a:	bf00      	nop
    837c:	b004      	add	sp, #16
    837e:	4770      	bx	lr

00008380 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8380:	b084      	sub	sp, #16
    8382:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8384:	2300      	movs	r3, #0
    8386:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    8388:	9b01      	ldr	r3, [sp, #4]
    838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    838e:	2b00      	cmp	r3, #0
    8390:	d001      	beq.n	8396 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8392:	2301      	movs	r3, #1
    8394:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    8396:	9b03      	ldr	r3, [sp, #12]
}
    8398:	4618      	mov	r0, r3
    839a:	b004      	add	sp, #16
    839c:	4770      	bx	lr

0000839e <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    839e:	b086      	sub	sp, #24
    83a0:	9003      	str	r0, [sp, #12]
    83a2:	9201      	str	r2, [sp, #4]
    83a4:	461a      	mov	r2, r3
    83a6:	460b      	mov	r3, r1
    83a8:	f88d 300b 	strb.w	r3, [sp, #11]
    83ac:	4613      	mov	r3, r2
    83ae:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    83b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    83b6:	9b03      	ldr	r3, [sp, #12]
    83b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83bc:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    83be:	9b05      	ldr	r3, [sp, #20]
    83c0:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    83c4:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    83c6:	9b01      	ldr	r3, [sp, #4]
    83c8:	f003 031f 	and.w	r3, r3, #31
    83cc:	9a05      	ldr	r2, [sp, #20]
    83ce:	4313      	orrs	r3, r2
    83d0:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    83d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d001      	beq.n	83de <Adc_HwAcc_SetChannel+0x40>
    83da:	2340      	movs	r3, #64	; 0x40
    83dc:	e000      	b.n	83e0 <Adc_HwAcc_SetChannel+0x42>
    83de:	2300      	movs	r3, #0
    83e0:	9a05      	ldr	r2, [sp, #20]
    83e2:	4313      	orrs	r3, r2
    83e4:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    83e6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    83ea:	9b03      	ldr	r3, [sp, #12]
    83ec:	9905      	ldr	r1, [sp, #20]
    83ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    83f2:	bf00      	nop
    83f4:	b006      	add	sp, #24
    83f6:	4770      	bx	lr

000083f8 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    83f8:	b082      	sub	sp, #8
    83fa:	9001      	str	r0, [sp, #4]
    83fc:	460b      	mov	r3, r1
    83fe:	f8ad 3002 	strh.w	r3, [sp, #2]
    8402:	4613      	mov	r3, r2
    8404:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    8408:	f8bd 3000 	ldrh.w	r3, [sp]
    840c:	b2da      	uxtb	r2, r3
    840e:	9b01      	ldr	r3, [sp, #4]
    8410:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8414:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8418:	f3c3 0209 	ubfx	r2, r3, #0, #10
    841c:	9b01      	ldr	r3, [sp, #4]
    841e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8422:	bf00      	nop
    8424:	b002      	add	sp, #8
    8426:	4770      	bx	lr

00008428 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    8428:	b082      	sub	sp, #8
    842a:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    842c:	9b01      	ldr	r3, [sp, #4]
    842e:	099b      	lsrs	r3, r3, #6
    8430:	f003 0301 	and.w	r3, r3, #1
    8434:	2b00      	cmp	r3, #0
    8436:	bf14      	ite	ne
    8438:	2301      	movne	r3, #1
    843a:	2300      	moveq	r3, #0
    843c:	b2db      	uxtb	r3, r3
}
    843e:	4618      	mov	r0, r3
    8440:	b002      	add	sp, #8
    8442:	4770      	bx	lr

00008444 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8444:	b082      	sub	sp, #8
    8446:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    8448:	9b01      	ldr	r3, [sp, #4]
    844a:	09db      	lsrs	r3, r3, #7
    844c:	f003 0301 	and.w	r3, r3, #1
    8450:	2b00      	cmp	r3, #0
    8452:	bf14      	ite	ne
    8454:	2301      	movne	r3, #1
    8456:	2300      	moveq	r3, #0
    8458:	b2db      	uxtb	r3, r3
}
    845a:	4618      	mov	r0, r3
    845c:	b002      	add	sp, #8
    845e:	4770      	bx	lr

00008460 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8460:	b084      	sub	sp, #16
    8462:	9001      	str	r0, [sp, #4]
    8464:	460b      	mov	r3, r1
    8466:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    846a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    846e:	9b01      	ldr	r3, [sp, #4]
    8470:	3212      	adds	r2, #18
    8472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8476:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    847a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    847e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8482:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    8486:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    848a:	4618      	mov	r0, r3
    848c:	b004      	add	sp, #16
    848e:	4770      	bx	lr

00008490 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8490:	b500      	push	{lr}
    8492:	b085      	sub	sp, #20
    8494:	9003      	str	r0, [sp, #12]
    8496:	9102      	str	r1, [sp, #8]
    8498:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    849a:	f004 f825 	bl	c4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    849e:	9b02      	ldr	r3, [sp, #8]
    84a0:	7a59      	ldrb	r1, [r3, #9]
    84a2:	9b02      	ldr	r3, [sp, #8]
    84a4:	68db      	ldr	r3, [r3, #12]
    84a6:	461a      	mov	r2, r3
    84a8:	9803      	ldr	r0, [sp, #12]
    84aa:	f7ff ff0d 	bl	82c8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    84ae:	f004 f847 	bl	c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    84b2:	f003 fe7f 	bl	c1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    84b6:	9901      	ldr	r1, [sp, #4]
    84b8:	9803      	ldr	r0, [sp, #12]
    84ba:	f7ff ff48 	bl	834e <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    84be:	f003 fea5 	bl	c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    84c2:	f003 fb95 	bl	bbf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    84c6:	9b02      	ldr	r3, [sp, #8]
    84c8:	7a1b      	ldrb	r3, [r3, #8]
    84ca:	4619      	mov	r1, r3
    84cc:	9803      	ldr	r0, [sp, #12]
    84ce:	f7ff feda 	bl	8286 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    84d2:	f003 fbb9 	bl	bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    84d6:	f003 fae7 	bl	baa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    84da:	9b02      	ldr	r3, [sp, #8]
    84dc:	6819      	ldr	r1, [r3, #0]
    84de:	9b02      	ldr	r3, [sp, #8]
    84e0:	685b      	ldr	r3, [r3, #4]
    84e2:	461a      	mov	r2, r3
    84e4:	9803      	ldr	r0, [sp, #12]
    84e6:	f7ff fe73 	bl	81d0 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    84ea:	f003 fb09 	bl	bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    84ee:	bf00      	nop
    84f0:	b005      	add	sp, #20
    84f2:	f85d fb04 	ldr.w	pc, [sp], #4

000084f6 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    84f6:	b500      	push	{lr}
    84f8:	b087      	sub	sp, #28
    84fa:	9001      	str	r0, [sp, #4]
    84fc:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84fe:	4a67      	ldr	r2, [pc, #412]	; (869c <Adc_Ip_Init+0x1a6>)
    8500:	9b01      	ldr	r3, [sp, #4]
    8502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8506:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    8508:	2300      	movs	r3, #0
    850a:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    850c:	2300      	movs	r3, #0
    850e:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8510:	9b00      	ldr	r3, [sp, #0]
    8512:	6819      	ldr	r1, [r3, #0]
    8514:	9b00      	ldr	r3, [sp, #0]
    8516:	689b      	ldr	r3, [r3, #8]
    8518:	461a      	mov	r2, r3
    851a:	9802      	ldr	r0, [sp, #8]
    851c:	f7ff fe58 	bl	81d0 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8520:	9b00      	ldr	r3, [sp, #0]
    8522:	7b1b      	ldrb	r3, [r3, #12]
    8524:	4619      	mov	r1, r3
    8526:	9802      	ldr	r0, [sp, #8]
    8528:	f7ff fead 	bl	8286 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    852c:	9b00      	ldr	r3, [sp, #0]
    852e:	7b59      	ldrb	r1, [r3, #13]
    8530:	9b00      	ldr	r3, [sp, #0]
    8532:	691b      	ldr	r3, [r3, #16]
    8534:	461a      	mov	r2, r3
    8536:	9802      	ldr	r0, [sp, #8]
    8538:	f7ff fec6 	bl	82c8 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    853c:	9b00      	ldr	r3, [sp, #0]
    853e:	695b      	ldr	r3, [r3, #20]
    8540:	4619      	mov	r1, r3
    8542:	9801      	ldr	r0, [sp, #4]
    8544:	f000 f9ea 	bl	891c <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    8548:	9b04      	ldr	r3, [sp, #16]
    854a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    854e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    8550:	9b00      	ldr	r3, [sp, #0]
    8552:	699b      	ldr	r3, [r3, #24]
    8554:	019b      	lsls	r3, r3, #6
    8556:	f003 0340 	and.w	r3, r3, #64	; 0x40
    855a:	9a05      	ldr	r2, [sp, #20]
    855c:	4313      	orrs	r3, r2
    855e:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8560:	9b00      	ldr	r3, [sp, #0]
    8562:	7f1b      	ldrb	r3, [r3, #28]
    8564:	2b00      	cmp	r3, #0
    8566:	d004      	beq.n	8572 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    8568:	9b05      	ldr	r3, [sp, #20]
    856a:	f043 0304 	orr.w	r3, r3, #4
    856e:	9305      	str	r3, [sp, #20]
    8570:	e003      	b.n	857a <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    8572:	9b04      	ldr	r3, [sp, #16]
    8574:	f043 0304 	orr.w	r3, r3, #4
    8578:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    857a:	9b04      	ldr	r3, [sp, #16]
    857c:	f043 0303 	orr.w	r3, r3, #3
    8580:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    8582:	9b00      	ldr	r3, [sp, #0]
    8584:	6a1b      	ldr	r3, [r3, #32]
    8586:	f003 0303 	and.w	r3, r3, #3
    858a:	9a05      	ldr	r2, [sp, #20]
    858c:	4313      	orrs	r3, r2
    858e:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8590:	9b04      	ldr	r3, [sp, #16]
    8592:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    8596:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    8598:	9b00      	ldr	r3, [sp, #0]
    859a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    859e:	2b00      	cmp	r3, #0
    85a0:	d001      	beq.n	85a6 <Adc_Ip_Init+0xb0>
    85a2:	2320      	movs	r3, #32
    85a4:	e000      	b.n	85a8 <Adc_Ip_Init+0xb2>
    85a6:	2300      	movs	r3, #0
    85a8:	9a05      	ldr	r2, [sp, #20]
    85aa:	4313      	orrs	r3, r2
    85ac:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    85ae:	9b00      	ldr	r3, [sp, #0]
    85b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    85b4:	2b00      	cmp	r3, #0
    85b6:	d001      	beq.n	85bc <Adc_Ip_Init+0xc6>
    85b8:	2310      	movs	r3, #16
    85ba:	e000      	b.n	85be <Adc_Ip_Init+0xc8>
    85bc:	2300      	movs	r3, #0
    85be:	9a05      	ldr	r2, [sp, #20]
    85c0:	4313      	orrs	r3, r2
    85c2:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    85c4:	9b00      	ldr	r3, [sp, #0]
    85c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    85ca:	2b00      	cmp	r3, #0
    85cc:	d001      	beq.n	85d2 <Adc_Ip_Init+0xdc>
    85ce:	2308      	movs	r3, #8
    85d0:	e000      	b.n	85d4 <Adc_Ip_Init+0xde>
    85d2:	2300      	movs	r3, #0
    85d4:	9a05      	ldr	r2, [sp, #20]
    85d6:	4313      	orrs	r3, r2
    85d8:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    85da:	9b00      	ldr	r3, [sp, #0]
    85dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    85de:	461a      	mov	r2, r3
    85e0:	9b02      	ldr	r3, [sp, #8]
    85e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    85e6:	9b00      	ldr	r3, [sp, #0]
    85e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    85ea:	461a      	mov	r2, r3
    85ec:	9b02      	ldr	r3, [sp, #8]
    85ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    85f2:	9a05      	ldr	r2, [sp, #20]
    85f4:	9904      	ldr	r1, [sp, #16]
    85f6:	9802      	ldr	r0, [sp, #8]
    85f8:	f7ff fdd2 	bl	81a0 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    85fc:	9b00      	ldr	r3, [sp, #0]
    85fe:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    8600:	9b00      	ldr	r3, [sp, #0]
    8602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8604:	461a      	mov	r2, r3
    8606:	9802      	ldr	r0, [sp, #8]
    8608:	f7ff fef6 	bl	83f8 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    860c:	9b00      	ldr	r3, [sp, #0]
    860e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8612:	4619      	mov	r1, r3
    8614:	9801      	ldr	r0, [sp, #4]
    8616:	f000 f955 	bl	88c4 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    861a:	9b00      	ldr	r3, [sp, #0]
    861c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    861e:	2b00      	cmp	r3, #0
    8620:	d01c      	beq.n	865c <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8622:	2300      	movs	r3, #0
    8624:	f88d 300f 	strb.w	r3, [sp, #15]
    8628:	e011      	b.n	864e <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    862a:	9b00      	ldr	r3, [sp, #0]
    862c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    862e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8632:	4613      	mov	r3, r2
    8634:	005b      	lsls	r3, r3, #1
    8636:	4413      	add	r3, r2
    8638:	009b      	lsls	r3, r3, #2
    863a:	440b      	add	r3, r1
    863c:	4619      	mov	r1, r3
    863e:	9801      	ldr	r0, [sp, #4]
    8640:	f000 f9c2 	bl	89c8 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8644:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8648:	3301      	adds	r3, #1
    864a:	f88d 300f 	strb.w	r3, [sp, #15]
    864e:	9b00      	ldr	r3, [sp, #0]
    8650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8654:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8658:	429a      	cmp	r2, r3
    865a:	d3e6      	bcc.n	862a <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    865c:	9b00      	ldr	r3, [sp, #0]
    865e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8660:	490f      	ldr	r1, [pc, #60]	; (86a0 <Adc_Ip_Init+0x1aa>)
    8662:	9b01      	ldr	r3, [sp, #4]
    8664:	204c      	movs	r0, #76	; 0x4c
    8666:	fb00 f303 	mul.w	r3, r0, r3
    866a:	440b      	add	r3, r1
    866c:	3308      	adds	r3, #8
    866e:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8670:	9b00      	ldr	r3, [sp, #0]
    8672:	685a      	ldr	r2, [r3, #4]
    8674:	490a      	ldr	r1, [pc, #40]	; (86a0 <Adc_Ip_Init+0x1aa>)
    8676:	9b01      	ldr	r3, [sp, #4]
    8678:	204c      	movs	r0, #76	; 0x4c
    867a:	fb00 f303 	mul.w	r3, r0, r3
    867e:	440b      	add	r3, r1
    8680:	3304      	adds	r3, #4
    8682:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    8684:	4a06      	ldr	r2, [pc, #24]	; (86a0 <Adc_Ip_Init+0x1aa>)
    8686:	9b01      	ldr	r3, [sp, #4]
    8688:	214c      	movs	r1, #76	; 0x4c
    868a:	fb01 f303 	mul.w	r3, r1, r3
    868e:	4413      	add	r3, r2
    8690:	2201      	movs	r2, #1
    8692:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8694:	bf00      	nop
    8696:	b007      	add	sp, #28
    8698:	f85d fb04 	ldr.w	pc, [sp], #4
    869c:	00010f80 	.word	0x00010f80
    86a0:	1fff8d2c 	.word	0x1fff8d2c

000086a4 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    86a4:	b500      	push	{lr}
    86a6:	b0c3      	sub	sp, #268	; 0x10c
    86a8:	ab42      	add	r3, sp, #264	; 0x108
    86aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    86ae:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    86b0:	2300      	movs	r3, #0
    86b2:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    86b4:	2303      	movs	r3, #3
    86b6:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    86b8:	2300      	movs	r3, #0
    86ba:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    86bc:	230c      	movs	r3, #12
    86be:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    86c2:	2300      	movs	r3, #0
    86c4:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    86c8:	2300      	movs	r3, #0
    86ca:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    86cc:	2300      	movs	r3, #0
    86ce:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    86d0:	2300      	movs	r3, #0
    86d2:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    86d4:	2300      	movs	r3, #0
    86d6:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    86da:	2300      	movs	r3, #0
    86dc:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    86de:	2300      	movs	r3, #0
    86e0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    86e4:	2300      	movs	r3, #0
    86e6:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    86ea:	2300      	movs	r3, #0
    86ec:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    86f0:	2300      	movs	r3, #0
    86f2:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    86f6:	2300      	movs	r3, #0
    86f8:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    86fc:	2300      	movs	r3, #0
    86fe:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    8702:	2304      	movs	r3, #4
    8704:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    8708:	2300      	movs	r3, #0
    870a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    870e:	2310      	movs	r3, #16
    8710:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    8714:	2300      	movs	r3, #0
    8716:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    871a:	e02b      	b.n	8774 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    871c:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8720:	ab42      	add	r3, sp, #264	; 0x108
    8722:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8726:	4613      	mov	r3, r2
    8728:	005b      	lsls	r3, r3, #1
    872a:	4413      	add	r3, r2
    872c:	009b      	lsls	r3, r3, #2
    872e:	440b      	add	r3, r1
    8730:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8734:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    8736:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    873a:	ab42      	add	r3, sp, #264	; 0x108
    873c:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8740:	4613      	mov	r3, r2
    8742:	005b      	lsls	r3, r3, #1
    8744:	4413      	add	r3, r2
    8746:	009b      	lsls	r3, r3, #2
    8748:	440b      	add	r3, r1
    874a:	3304      	adds	r3, #4
    874c:	221f      	movs	r2, #31
    874e:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    8750:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8754:	ab42      	add	r3, sp, #264	; 0x108
    8756:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    875a:	4613      	mov	r3, r2
    875c:	005b      	lsls	r3, r3, #1
    875e:	4413      	add	r3, r2
    8760:	009b      	lsls	r3, r3, #2
    8762:	440b      	add	r3, r1
    8764:	3308      	adds	r3, #8
    8766:	2200      	movs	r2, #0
    8768:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    876a:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    876e:	3301      	adds	r3, #1
    8770:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    8774:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8778:	2b0f      	cmp	r3, #15
    877a:	d9cf      	bls.n	871c <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    877c:	ab02      	add	r3, sp, #8
    877e:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8780:	2300      	movs	r3, #0
    8782:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    8784:	aa32      	add	r2, sp, #200	; 0xc8
    8786:	ab42      	add	r3, sp, #264	; 0x108
    8788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    878c:	4611      	mov	r1, r2
    878e:	6818      	ldr	r0, [r3, #0]
    8790:	f7ff feb1 	bl	84f6 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    8794:	4a07      	ldr	r2, [pc, #28]	; (87b4 <Adc_Ip_DeInit+0x110>)
    8796:	ab42      	add	r3, sp, #264	; 0x108
    8798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    879c:	681b      	ldr	r3, [r3, #0]
    879e:	214c      	movs	r1, #76	; 0x4c
    87a0:	fb01 f303 	mul.w	r3, r1, r3
    87a4:	4413      	add	r3, r2
    87a6:	2200      	movs	r2, #0
    87a8:	701a      	strb	r2, [r3, #0]
}
    87aa:	bf00      	nop
    87ac:	b043      	add	sp, #268	; 0x10c
    87ae:	f85d fb04 	ldr.w	pc, [sp], #4
    87b2:	bf00      	nop
    87b4:	1fff8d2c 	.word	0x1fff8d2c

000087b8 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    87b8:	b500      	push	{lr}
    87ba:	b087      	sub	sp, #28
    87bc:	9003      	str	r0, [sp, #12]
    87be:	460b      	mov	r3, r1
    87c0:	9201      	str	r2, [sp, #4]
    87c2:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    87c6:	4a0a      	ldr	r2, [pc, #40]	; (87f0 <Adc_Ip_SetAveraging+0x38>)
    87c8:	9b03      	ldr	r3, [sp, #12]
    87ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87ce:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    87d0:	f003 fde6 	bl	c3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    87d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    87d8:	9a01      	ldr	r2, [sp, #4]
    87da:	4619      	mov	r1, r3
    87dc:	9805      	ldr	r0, [sp, #20]
    87de:	f7ff fd73 	bl	82c8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    87e2:	f003 fe09 	bl	c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    87e6:	bf00      	nop
    87e8:	b007      	add	sp, #28
    87ea:	f85d fb04 	ldr.w	pc, [sp], #4
    87ee:	bf00      	nop
    87f0:	00010f80 	.word	0x00010f80

000087f4 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    87f4:	b500      	push	{lr}
    87f6:	b085      	sub	sp, #20
    87f8:	9001      	str	r0, [sp, #4]
    87fa:	460b      	mov	r3, r1
    87fc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8800:	4a09      	ldr	r2, [pc, #36]	; (8828 <Adc_Ip_SetSampleTime+0x34>)
    8802:	9b01      	ldr	r3, [sp, #4]
    8804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8808:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    880a:	f003 fa43 	bl	bc94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    880e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8812:	4619      	mov	r1, r3
    8814:	9803      	ldr	r0, [sp, #12]
    8816:	f7ff fd36 	bl	8286 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    881a:	f003 fa67 	bl	bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    881e:	bf00      	nop
    8820:	b005      	add	sp, #20
    8822:	f85d fb04 	ldr.w	pc, [sp], #4
    8826:	bf00      	nop
    8828:	00010f80 	.word	0x00010f80

0000882c <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    882c:	b500      	push	{lr}
    882e:	b085      	sub	sp, #20
    8830:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8832:	4a0a      	ldr	r2, [pc, #40]	; (885c <Adc_Ip_EnableDma+0x30>)
    8834:	9b01      	ldr	r3, [sp, #4]
    8836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    883a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    883c:	f003 fd5e 	bl	c2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    8840:	9b03      	ldr	r3, [sp, #12]
    8842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8846:	f043 0204 	orr.w	r2, r3, #4
    884a:	9b03      	ldr	r3, [sp, #12]
    884c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    8850:	f003 fd80 	bl	c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    8854:	bf00      	nop
    8856:	b005      	add	sp, #20
    8858:	f85d fb04 	ldr.w	pc, [sp], #4
    885c:	00010f80 	.word	0x00010f80

00008860 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8860:	b500      	push	{lr}
    8862:	b085      	sub	sp, #20
    8864:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8866:	4a0a      	ldr	r2, [pc, #40]	; (8890 <Adc_Ip_DisableDma+0x30>)
    8868:	9b01      	ldr	r3, [sp, #4]
    886a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    886e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8870:	f003 fbfc 	bl	c06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    8874:	9b03      	ldr	r3, [sp, #12]
    8876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    887a:	f023 0204 	bic.w	r2, r3, #4
    887e:	9b03      	ldr	r3, [sp, #12]
    8880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    8884:	f003 fc1e 	bl	c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    8888:	bf00      	nop
    888a:	b005      	add	sp, #20
    888c:	f85d fb04 	ldr.w	pc, [sp], #4
    8890:	00010f80 	.word	0x00010f80

00008894 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    8894:	b500      	push	{lr}
    8896:	b085      	sub	sp, #20
    8898:	9001      	str	r0, [sp, #4]
    889a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    889c:	4a08      	ldr	r2, [pc, #32]	; (88c0 <Adc_Ip_SetTriggerMode+0x2c>)
    889e:	9b01      	ldr	r3, [sp, #4]
    88a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88a4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    88a6:	f003 fc33 	bl	c110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    88aa:	9900      	ldr	r1, [sp, #0]
    88ac:	9803      	ldr	r0, [sp, #12]
    88ae:	f7ff fd4e 	bl	834e <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    88b2:	f003 fc59 	bl	c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    88b6:	bf00      	nop
    88b8:	b005      	add	sp, #20
    88ba:	f85d fb04 	ldr.w	pc, [sp], #4
    88be:	bf00      	nop
    88c0:	00010f80 	.word	0x00010f80

000088c4 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    88c4:	b500      	push	{lr}
    88c6:	b085      	sub	sp, #20
    88c8:	9001      	str	r0, [sp, #4]
    88ca:	460b      	mov	r3, r1
    88cc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88d0:	4a11      	ldr	r2, [pc, #68]	; (8918 <Adc_Ip_SetContinuousMode+0x54>)
    88d2:	9b01      	ldr	r3, [sp, #4]
    88d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    88da:	f003 fe57 	bl	c58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    88de:	9b03      	ldr	r3, [sp, #12]
    88e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    88e4:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    88e6:	9b02      	ldr	r3, [sp, #8]
    88e8:	f023 0308 	bic.w	r3, r3, #8
    88ec:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    88ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    88f2:	2b00      	cmp	r3, #0
    88f4:	d001      	beq.n	88fa <Adc_Ip_SetContinuousMode+0x36>
    88f6:	2308      	movs	r3, #8
    88f8:	e000      	b.n	88fc <Adc_Ip_SetContinuousMode+0x38>
    88fa:	2300      	movs	r3, #0
    88fc:	9a02      	ldr	r2, [sp, #8]
    88fe:	4313      	orrs	r3, r2
    8900:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    8902:	9b03      	ldr	r3, [sp, #12]
    8904:	9a02      	ldr	r2, [sp, #8]
    8906:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    890a:	f003 fe6b 	bl	c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    890e:	bf00      	nop
    8910:	b005      	add	sp, #20
    8912:	f85d fb04 	ldr.w	pc, [sp], #4
    8916:	bf00      	nop
    8918:	00010f80 	.word	0x00010f80

0000891c <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    891c:	b500      	push	{lr}
    891e:	b085      	sub	sp, #20
    8920:	9001      	str	r0, [sp, #4]
    8922:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8924:	4a0e      	ldr	r2, [pc, #56]	; (8960 <Adc_Ip_SetResolution+0x44>)
    8926:	9b01      	ldr	r3, [sp, #4]
    8928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    892c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    892e:	f002 fe7d 	bl	b62c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    8932:	9b03      	ldr	r3, [sp, #12]
    8934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8936:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    8938:	9b02      	ldr	r3, [sp, #8]
    893a:	f023 030c 	bic.w	r3, r3, #12
    893e:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8940:	9b00      	ldr	r3, [sp, #0]
    8942:	009b      	lsls	r3, r3, #2
    8944:	f003 030c 	and.w	r3, r3, #12
    8948:	9a02      	ldr	r2, [sp, #8]
    894a:	4313      	orrs	r3, r2
    894c:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    894e:	9b03      	ldr	r3, [sp, #12]
    8950:	9a02      	ldr	r2, [sp, #8]
    8952:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    8954:	f002 fe96 	bl	b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    8958:	bf00      	nop
    895a:	b005      	add	sp, #20
    895c:	f85d fb04 	ldr.w	pc, [sp], #4
    8960:	00010f80 	.word	0x00010f80

00008964 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    8964:	b500      	push	{lr}
    8966:	b085      	sub	sp, #20
    8968:	9001      	str	r0, [sp, #4]
    896a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    896c:	4a15      	ldr	r2, [pc, #84]	; (89c4 <Adc_Ip_SetClockMode+0x60>)
    896e:	9b01      	ldr	r3, [sp, #4]
    8970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8974:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    8976:	f002 fff3 	bl	b960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    897a:	9b00      	ldr	r3, [sp, #0]
    897c:	6819      	ldr	r1, [r3, #0]
    897e:	9b00      	ldr	r3, [sp, #0]
    8980:	685b      	ldr	r3, [r3, #4]
    8982:	461a      	mov	r2, r3
    8984:	9803      	ldr	r0, [sp, #12]
    8986:	f7ff fc23 	bl	81d0 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    898a:	f003 f815 	bl	b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    898e:	f003 f8dd 	bl	bb4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8992:	9b00      	ldr	r3, [sp, #0]
    8994:	7a1b      	ldrb	r3, [r3, #8]
    8996:	4619      	mov	r1, r3
    8998:	9803      	ldr	r0, [sp, #12]
    899a:	f7ff fc74 	bl	8286 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    899e:	f003 f901 	bl	bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    89a2:	f003 fd4f 	bl	c444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    89a6:	9b00      	ldr	r3, [sp, #0]
    89a8:	7a59      	ldrb	r1, [r3, #9]
    89aa:	9b00      	ldr	r3, [sp, #0]
    89ac:	68db      	ldr	r3, [r3, #12]
    89ae:	461a      	mov	r2, r3
    89b0:	9803      	ldr	r0, [sp, #12]
    89b2:	f7ff fc89 	bl	82c8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    89b6:	f003 fd71 	bl	c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    89ba:	bf00      	nop
    89bc:	b005      	add	sp, #20
    89be:	f85d fb04 	ldr.w	pc, [sp], #4
    89c2:	bf00      	nop
    89c4:	00010f80 	.word	0x00010f80

000089c8 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    89c8:	b510      	push	{r4, lr}
    89ca:	b084      	sub	sp, #16
    89cc:	9001      	str	r0, [sp, #4]
    89ce:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89d0:	4a13      	ldr	r2, [pc, #76]	; (8a20 <Adc_Ip_ConfigChannel+0x58>)
    89d2:	9b01      	ldr	r3, [sp, #4]
    89d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d8:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    89da:	9b00      	ldr	r3, [sp, #0]
    89dc:	685b      	ldr	r3, [r3, #4]
    89de:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    89e0:	f003 faf2 	bl	bfc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    89e4:	9b00      	ldr	r3, [sp, #0]
    89e6:	7819      	ldrb	r1, [r3, #0]
    89e8:	9b00      	ldr	r3, [sp, #0]
    89ea:	7a1b      	ldrb	r3, [r3, #8]
    89ec:	9a02      	ldr	r2, [sp, #8]
    89ee:	9803      	ldr	r0, [sp, #12]
    89f0:	f7ff fcd5 	bl	839e <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    89f4:	f003 fb14 	bl	c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    89f8:	9b00      	ldr	r3, [sp, #0]
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	461c      	mov	r4, r3
    89fe:	9b00      	ldr	r3, [sp, #0]
    8a00:	6859      	ldr	r1, [r3, #4]
    8a02:	4808      	ldr	r0, [pc, #32]	; (8a24 <Adc_Ip_ConfigChannel+0x5c>)
    8a04:	9a01      	ldr	r2, [sp, #4]
    8a06:	4613      	mov	r3, r2
    8a08:	00db      	lsls	r3, r3, #3
    8a0a:	4413      	add	r3, r2
    8a0c:	005b      	lsls	r3, r3, #1
    8a0e:	4413      	add	r3, r2
    8a10:	4423      	add	r3, r4
    8a12:	3302      	adds	r3, #2
    8a14:	009b      	lsls	r3, r3, #2
    8a16:	4403      	add	r3, r0
    8a18:	6059      	str	r1, [r3, #4]
}
    8a1a:	bf00      	nop
    8a1c:	b004      	add	sp, #16
    8a1e:	bd10      	pop	{r4, pc}
    8a20:	00010f80 	.word	0x00010f80
    8a24:	1fff8d2c 	.word	0x1fff8d2c

00008a28 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    8a28:	b500      	push	{lr}
    8a2a:	b089      	sub	sp, #36	; 0x24
    8a2c:	9001      	str	r0, [sp, #4]
    8a2e:	460b      	mov	r3, r1
    8a30:	f88d 3003 	strb.w	r3, [sp, #3]
    8a34:	4613      	mov	r3, r2
    8a36:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a3a:	4a24      	ldr	r2, [pc, #144]	; (8acc <Adc_Ip_SetDisabledChannel+0xa4>)
    8a3c:	9b01      	ldr	r3, [sp, #4]
    8a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a42:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8a44:	2300      	movs	r3, #0
    8a46:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8a48:	2100      	movs	r1, #0
    8a4a:	4821      	ldr	r0, [pc, #132]	; (8ad0 <Adc_Ip_SetDisabledChannel+0xa8>)
    8a4c:	f7f9 f8dc 	bl	1c08 <OsIf_MicrosToTicks>
    8a50:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8a52:	2000      	movs	r0, #0
    8a54:	f7f9 f88c 	bl	1b70 <OsIf_GetCounter>
    8a58:	4603      	mov	r3, r0
    8a5a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8a5c:	2300      	movs	r3, #0
    8a5e:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8a60:	f003 f96a 	bl	bd38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    8a64:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8a68:	9b05      	ldr	r3, [sp, #20]
    8a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8a72:	f043 011f 	orr.w	r1, r3, #31
    8a76:	9b05      	ldr	r3, [sp, #20]
    8a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8a7c:	f003 f988 	bl	bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8a80:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d01c      	beq.n	8ac2 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8a88:	e008      	b.n	8a9c <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8a8a:	ab03      	add	r3, sp, #12
    8a8c:	2100      	movs	r1, #0
    8a8e:	4618      	mov	r0, r3
    8a90:	f7f9 f887 	bl	1ba2 <OsIf_GetElapsed>
    8a94:	4602      	mov	r2, r0
    8a96:	9b06      	ldr	r3, [sp, #24]
    8a98:	4413      	add	r3, r2
    8a9a:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8a9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8aa0:	9b05      	ldr	r3, [sp, #20]
    8aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8aa6:	f003 031f 	and.w	r3, r3, #31
    8aaa:	2b1f      	cmp	r3, #31
    8aac:	d003      	beq.n	8ab6 <Adc_Ip_SetDisabledChannel+0x8e>
    8aae:	9a06      	ldr	r2, [sp, #24]
    8ab0:	9b04      	ldr	r3, [sp, #16]
    8ab2:	429a      	cmp	r2, r3
    8ab4:	d3e9      	bcc.n	8a8a <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    8ab6:	9a06      	ldr	r2, [sp, #24]
    8ab8:	9b04      	ldr	r3, [sp, #16]
    8aba:	429a      	cmp	r2, r3
    8abc:	d301      	bcc.n	8ac2 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8abe:	2302      	movs	r3, #2
    8ac0:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    8ac2:	9b07      	ldr	r3, [sp, #28]
}
    8ac4:	4618      	mov	r0, r3
    8ac6:	b009      	add	sp, #36	; 0x24
    8ac8:	f85d fb04 	ldr.w	pc, [sp], #4
    8acc:	00010f80 	.word	0x00010f80
    8ad0:	000186a0 	.word	0x000186a0

00008ad4 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    8ad4:	b500      	push	{lr}
    8ad6:	b087      	sub	sp, #28
    8ad8:	9003      	str	r0, [sp, #12]
    8ada:	9102      	str	r1, [sp, #8]
    8adc:	4613      	mov	r3, r2
    8ade:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8ae2:	4a0a      	ldr	r2, [pc, #40]	; (8b0c <Adc_Ip_StartConversion+0x38>)
    8ae4:	9b03      	ldr	r3, [sp, #12]
    8ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aea:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    8aec:	f003 f976 	bl	bddc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8af4:	9a02      	ldr	r2, [sp, #8]
    8af6:	2100      	movs	r1, #0
    8af8:	9805      	ldr	r0, [sp, #20]
    8afa:	f7ff fc50 	bl	839e <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    8afe:	f003 f999 	bl	be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    8b02:	bf00      	nop
    8b04:	b007      	add	sp, #28
    8b06:	f85d fb04 	ldr.w	pc, [sp], #4
    8b0a:	bf00      	nop
    8b0c:	00010f80 	.word	0x00010f80

00008b10 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    8b10:	b084      	sub	sp, #16
    8b12:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8b14:	4a0b      	ldr	r2, [pc, #44]	; (8b44 <Adc_Ip_GetConvActiveFlag+0x34>)
    8b16:	9b01      	ldr	r3, [sp, #4]
    8b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b1c:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    8b1e:	9b03      	ldr	r3, [sp, #12]
    8b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8b24:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    8b26:	9b02      	ldr	r3, [sp, #8]
    8b28:	09db      	lsrs	r3, r3, #7
    8b2a:	f003 0301 	and.w	r3, r3, #1
    8b2e:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    8b30:	9b02      	ldr	r3, [sp, #8]
    8b32:	2b00      	cmp	r3, #0
    8b34:	bf14      	ite	ne
    8b36:	2301      	movne	r3, #1
    8b38:	2300      	moveq	r3, #0
    8b3a:	b2db      	uxtb	r3, r3
}
    8b3c:	4618      	mov	r0, r3
    8b3e:	b004      	add	sp, #16
    8b40:	4770      	bx	lr
    8b42:	bf00      	nop
    8b44:	00010f80 	.word	0x00010f80

00008b48 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    8b48:	b500      	push	{lr}
    8b4a:	b085      	sub	sp, #20
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	460b      	mov	r3, r1
    8b50:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b54:	4a08      	ldr	r2, [pc, #32]	; (8b78 <Adc_Ip_GetChanInterrupt+0x30>)
    8b56:	9b01      	ldr	r3, [sp, #4]
    8b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b64:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    8b66:	9803      	ldr	r0, [sp, #12]
    8b68:	f7ff fc5e 	bl	8428 <Adc_HwAcc_GetAIEN>
    8b6c:	4603      	mov	r3, r0
}
    8b6e:	4618      	mov	r0, r3
    8b70:	b005      	add	sp, #20
    8b72:	f85d fb04 	ldr.w	pc, [sp], #4
    8b76:	bf00      	nop
    8b78:	00010f80 	.word	0x00010f80

00008b7c <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8b7c:	b500      	push	{lr}
    8b7e:	b085      	sub	sp, #20
    8b80:	9001      	str	r0, [sp, #4]
    8b82:	460b      	mov	r3, r1
    8b84:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b88:	4a08      	ldr	r2, [pc, #32]	; (8bac <Adc_Ip_GetConvCompleteFlag+0x30>)
    8b8a:	9b01      	ldr	r3, [sp, #4]
    8b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b90:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b98:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    8b9a:	9803      	ldr	r0, [sp, #12]
    8b9c:	f7ff fc52 	bl	8444 <Adc_HwAcc_GetCOCO>
    8ba0:	4603      	mov	r3, r0
}
    8ba2:	4618      	mov	r0, r3
    8ba4:	b005      	add	sp, #20
    8ba6:	f85d fb04 	ldr.w	pc, [sp], #4
    8baa:	bf00      	nop
    8bac:	00010f80 	.word	0x00010f80

00008bb0 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8bb0:	b500      	push	{lr}
    8bb2:	b085      	sub	sp, #20
    8bb4:	9001      	str	r0, [sp, #4]
    8bb6:	460b      	mov	r3, r1
    8bb8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8bbc:	4a07      	ldr	r2, [pc, #28]	; (8bdc <Adc_Ip_GetConvData+0x2c>)
    8bbe:	9b01      	ldr	r3, [sp, #4]
    8bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bc4:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    8bc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8bca:	4619      	mov	r1, r3
    8bcc:	9803      	ldr	r0, [sp, #12]
    8bce:	f7ff fc47 	bl	8460 <Adc_HwAcc_GetData>
    8bd2:	4603      	mov	r3, r0
}
    8bd4:	4618      	mov	r0, r3
    8bd6:	b005      	add	sp, #20
    8bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    8bdc:	00010f80 	.word	0x00010f80

00008be0 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8be0:	b500      	push	{lr}
    8be2:	b093      	sub	sp, #76	; 0x4c
    8be4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8be6:	4a59      	ldr	r2, [pc, #356]	; (8d4c <Adc_Ip_DoCalibration+0x16c>)
    8be8:	9b01      	ldr	r3, [sp, #4]
    8bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bee:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8bf0:	2300      	movs	r3, #0
    8bf2:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8bf4:	2100      	movs	r1, #0
    8bf6:	4856      	ldr	r0, [pc, #344]	; (8d50 <Adc_Ip_DoCalibration+0x170>)
    8bf8:	f7f9 f806 	bl	1c08 <OsIf_MicrosToTicks>
    8bfc:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8bfe:	2000      	movs	r0, #0
    8c00:	f7f8 ffb6 	bl	1b70 <OsIf_GetCounter>
    8c04:	4603      	mov	r3, r0
    8c06:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    8c08:	2300      	movs	r3, #0
    8c0a:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    8c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8c12:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    8c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c16:	089b      	lsrs	r3, r3, #2
    8c18:	f003 0301 	and.w	r3, r3, #1
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	bf14      	ite	ne
    8c20:	2301      	movne	r3, #1
    8c22:	2300      	moveq	r3, #0
    8c24:	b2db      	uxtb	r3, r3
    8c26:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    8c2a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c2c:	f7ff fb71 	bl	8312 <Adc_HwAcc_GetAverageSelect>
    8c30:	4603      	mov	r3, r0
    8c32:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    8c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8c38:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    8c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c3c:	b2db      	uxtb	r3, r3
    8c3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8c48:	4618      	mov	r0, r3
    8c4a:	f7ff fb99 	bl	8380 <Adc_HwAcc_GetTriggerMode>
    8c4e:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    8c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8c54:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    8c56:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c58:	f7ff fad8 	bl	820c <Adc_HwAcc_GetClockDivide>
    8c5c:	4603      	mov	r3, r0
    8c5e:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8c60:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c62:	f7ff faf2 	bl	824a <Adc_HwAcc_GetInputClock>
    8c66:	4603      	mov	r3, r0
    8c68:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    8c6a:	2301      	movs	r3, #1
    8c6c:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8c70:	2303      	movs	r3, #3
    8c72:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8c74:	230c      	movs	r3, #12
    8c76:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    8c7a:	4a36      	ldr	r2, [pc, #216]	; (8d54 <Adc_Ip_DoCalibration+0x174>)
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	214c      	movs	r1, #76	; 0x4c
    8c80:	fb01 f303 	mul.w	r3, r1, r3
    8c84:	4413      	add	r3, r2
    8c86:	3304      	adds	r3, #4
    8c88:	681b      	ldr	r3, [r3, #0]
    8c8a:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8c8c:	9b08      	ldr	r3, [sp, #32]
    8c8e:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8c90:	ab03      	add	r3, sp, #12
    8c92:	2200      	movs	r2, #0
    8c94:	4619      	mov	r1, r3
    8c96:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8c98:	f7ff fbfa 	bl	8490 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c9e:	2200      	movs	r2, #0
    8ca0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ca6:	2200      	movs	r2, #0
    8ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cae:	2200      	movs	r2, #0
    8cb0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cb6:	2200      	movs	r2, #0
    8cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cbe:	2200      	movs	r2, #0
    8cc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cc6:	2200      	movs	r2, #0
    8cc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cce:	2200      	movs	r2, #0
    8cd0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8cd4:	f003 fc08 	bl	c4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8cde:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8ce6:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8cee:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8cf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8cf8:	f003 fc22 	bl	c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8cfc:	e008      	b.n	8d10 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8cfe:	ab0b      	add	r3, sp, #44	; 0x2c
    8d00:	2100      	movs	r1, #0
    8d02:	4618      	mov	r0, r3
    8d04:	f7f8 ff4d 	bl	1ba2 <OsIf_GetElapsed>
    8d08:	4602      	mov	r2, r0
    8d0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d0c:	4413      	add	r3, r2
    8d0e:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d003      	beq.n	8d26 <Adc_Ip_DoCalibration+0x146>
    8d1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d22:	429a      	cmp	r2, r3
    8d24:	d3eb      	bcc.n	8cfe <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d2a:	429a      	cmp	r2, r3
    8d2c:	d301      	bcc.n	8d32 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8d2e:	2302      	movs	r3, #2
    8d30:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    8d32:	ab07      	add	r3, sp, #28
    8d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8d36:	4619      	mov	r1, r3
    8d38:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8d3a:	f7ff fba9 	bl	8490 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8d44:	4618      	mov	r0, r3
    8d46:	b013      	add	sp, #76	; 0x4c
    8d48:	f85d fb04 	ldr.w	pc, [sp], #4
    8d4c:	00010f80 	.word	0x00010f80
    8d50:	000186a0 	.word	0x000186a0
    8d54:	1fff8d2c 	.word	0x1fff8d2c

00008d58 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8d58:	b500      	push	{lr}
    8d5a:	b089      	sub	sp, #36	; 0x24
    8d5c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8d5e:	4a1e      	ldr	r2, [pc, #120]	; (8dd8 <Adc_Ip_ClearLatchedTriggers+0x80>)
    8d60:	9b01      	ldr	r3, [sp, #4]
    8d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d66:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8d68:	2300      	movs	r3, #0
    8d6a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8d6c:	2100      	movs	r1, #0
    8d6e:	481b      	ldr	r0, [pc, #108]	; (8ddc <Adc_Ip_ClearLatchedTriggers+0x84>)
    8d70:	f7f8 ff4a 	bl	1c08 <OsIf_MicrosToTicks>
    8d74:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8d76:	2000      	movs	r0, #0
    8d78:	f7f8 fefa 	bl	1b70 <OsIf_GetCounter>
    8d7c:	4603      	mov	r3, r0
    8d7e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8d80:	2300      	movs	r3, #0
    8d82:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8d84:	f002 fe3e 	bl	ba04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8d88:	9b05      	ldr	r3, [sp, #20]
    8d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8d90:	9b05      	ldr	r3, [sp, #20]
    8d92:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8d94:	f002 fe62 	bl	ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8d98:	e008      	b.n	8dac <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8d9a:	ab03      	add	r3, sp, #12
    8d9c:	2100      	movs	r1, #0
    8d9e:	4618      	mov	r0, r3
    8da0:	f7f8 feff 	bl	1ba2 <OsIf_GetElapsed>
    8da4:	4602      	mov	r2, r0
    8da6:	9b06      	ldr	r3, [sp, #24]
    8da8:	4413      	add	r3, r2
    8daa:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8dac:	9b05      	ldr	r3, [sp, #20]
    8dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8db2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8db6:	2b00      	cmp	r3, #0
    8db8:	d003      	beq.n	8dc2 <Adc_Ip_ClearLatchedTriggers+0x6a>
    8dba:	9a06      	ldr	r2, [sp, #24]
    8dbc:	9b04      	ldr	r3, [sp, #16]
    8dbe:	429a      	cmp	r2, r3
    8dc0:	d3eb      	bcc.n	8d9a <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8dc2:	9a06      	ldr	r2, [sp, #24]
    8dc4:	9b04      	ldr	r3, [sp, #16]
    8dc6:	429a      	cmp	r2, r3
    8dc8:	d301      	bcc.n	8dce <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8dca:	2302      	movs	r3, #2
    8dcc:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8dce:	9b07      	ldr	r3, [sp, #28]
}
    8dd0:	4618      	mov	r0, r3
    8dd2:	b009      	add	sp, #36	; 0x24
    8dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    8dd8:	00010f80 	.word	0x00010f80
    8ddc:	000186a0 	.word	0x000186a0

00008de0 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8de0:	b500      	push	{lr}
    8de2:	b085      	sub	sp, #20
    8de4:	9001      	str	r0, [sp, #4]
    8de6:	460b      	mov	r3, r1
    8de8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8dec:	4a0c      	ldr	r2, [pc, #48]	; (8e20 <Adc_Ip_EnableChannelNotification+0x40>)
    8dee:	9b01      	ldr	r3, [sp, #4]
    8df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8df6:	f003 f843 	bl	be80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8dfa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8dfe:	9b03      	ldr	r3, [sp, #12]
    8e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8e04:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8e08:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8e0c:	9b03      	ldr	r3, [sp, #12]
    8e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    8e12:	f003 f861 	bl	bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    8e16:	bf00      	nop
    8e18:	b005      	add	sp, #20
    8e1a:	f85d fb04 	ldr.w	pc, [sp], #4
    8e1e:	bf00      	nop
    8e20:	00010f80 	.word	0x00010f80

00008e24 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    8e24:	b500      	push	{lr}
    8e26:	b085      	sub	sp, #20
    8e28:	9001      	str	r0, [sp, #4]
    8e2a:	460b      	mov	r3, r1
    8e2c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8e30:	4a0c      	ldr	r2, [pc, #48]	; (8e64 <Adc_Ip_DisableChannelNotification+0x40>)
    8e32:	9b01      	ldr	r3, [sp, #4]
    8e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e38:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8e3a:	f003 f873 	bl	bf24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8e3e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8e42:	9b03      	ldr	r3, [sp, #12]
    8e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8e48:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8e4c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8e50:	9b03      	ldr	r3, [sp, #12]
    8e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    8e56:	f003 f891 	bl	bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8e5a:	bf00      	nop
    8e5c:	b005      	add	sp, #20
    8e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    8e62:	bf00      	nop
    8e64:	00010f80 	.word	0x00010f80

00008e68 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8e68:	b500      	push	{lr}
    8e6a:	b085      	sub	sp, #20
    8e6c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8e6e:	4a0a      	ldr	r2, [pc, #40]	; (8e98 <Adc_Ip_ClearTrigErrReg+0x30>)
    8e70:	9b01      	ldr	r3, [sp, #4]
    8e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e76:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8e78:	f003 f9ee 	bl	c258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8e7c:	9b03      	ldr	r3, [sp, #12]
    8e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8e82:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    8e86:	9b03      	ldr	r3, [sp, #12]
    8e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8e8c:	f003 fa10 	bl	c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8e90:	bf00      	nop
    8e92:	b005      	add	sp, #20
    8e94:	f85d fb04 	ldr.w	pc, [sp], #4
    8e98:	00010f80 	.word	0x00010f80

00008e9c <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8e9c:	b084      	sub	sp, #16
    8e9e:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8ea0:	4a06      	ldr	r2, [pc, #24]	; (8ebc <Adc_Ip_GetTrigErrReg+0x20>)
    8ea2:	9b01      	ldr	r3, [sp, #4]
    8ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ea8:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8eaa:	9b03      	ldr	r3, [sp, #12]
    8eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8eb0:	0e1b      	lsrs	r3, r3, #24
    8eb2:	f003 030f 	and.w	r3, r3, #15
}
    8eb6:	4618      	mov	r0, r3
    8eb8:	b004      	add	sp, #16
    8eba:	4770      	bx	lr
    8ebc:	00010f80 	.word	0x00010f80

00008ec0 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8ec0:	b082      	sub	sp, #8
    8ec2:	9001      	str	r0, [sp, #4]
    8ec4:	460b      	mov	r3, r1
    8ec6:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8eca:	4a06      	ldr	r2, [pc, #24]	; (8ee4 <Adc_Ip_GetDataAddress+0x24>)
    8ecc:	9b01      	ldr	r3, [sp, #4]
    8ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8ed2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ed6:	3312      	adds	r3, #18
    8ed8:	009b      	lsls	r3, r3, #2
    8eda:	4413      	add	r3, r2
}
    8edc:	4618      	mov	r0, r3
    8ede:	b002      	add	sp, #8
    8ee0:	4770      	bx	lr
    8ee2:	bf00      	nop
    8ee4:	00010f80 	.word	0x00010f80

00008ee8 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8ee8:	b088      	sub	sp, #32
    8eea:	9003      	str	r0, [sp, #12]
    8eec:	9102      	str	r1, [sp, #8]
    8eee:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8ef0:	4a25      	ldr	r2, [pc, #148]	; (8f88 <Adc_Ip_GetChanData+0xa0>)
    8ef2:	9b03      	ldr	r3, [sp, #12]
    8ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef8:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8efa:	2300      	movs	r3, #0
    8efc:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8efe:	2300      	movs	r3, #0
    8f00:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8f04:	2300      	movs	r3, #0
    8f06:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8f0a:	2300      	movs	r3, #0
    8f0c:	f88d 3019 	strb.w	r3, [sp, #25]
    8f10:	e019      	b.n	8f46 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8f12:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8f16:	481d      	ldr	r0, [pc, #116]	; (8f8c <Adc_Ip_GetChanData+0xa4>)
    8f18:	9a03      	ldr	r2, [sp, #12]
    8f1a:	4613      	mov	r3, r2
    8f1c:	00db      	lsls	r3, r3, #3
    8f1e:	4413      	add	r3, r2
    8f20:	005b      	lsls	r3, r3, #1
    8f22:	4413      	add	r3, r2
    8f24:	440b      	add	r3, r1
    8f26:	3302      	adds	r3, #2
    8f28:	009b      	lsls	r3, r3, #2
    8f2a:	4403      	add	r3, r0
    8f2c:	685b      	ldr	r3, [r3, #4]
    8f2e:	9a02      	ldr	r2, [sp, #8]
    8f30:	429a      	cmp	r2, r3
    8f32:	d103      	bne.n	8f3c <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8f34:	2301      	movs	r3, #1
    8f36:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8f3a:	e008      	b.n	8f4e <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8f3c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8f40:	3301      	adds	r3, #1
    8f42:	f88d 3019 	strb.w	r3, [sp, #25]
    8f46:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8f4a:	2b0f      	cmp	r3, #15
    8f4c:	d9e1      	bls.n	8f12 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8f4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8f52:	2b00      	cmp	r3, #0
    8f54:	d00e      	beq.n	8f74 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8f56:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8f5a:	9b05      	ldr	r3, [sp, #20]
    8f5c:	3212      	adds	r2, #18
    8f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f62:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8f66:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8f6e:	f8ad 301a 	strh.w	r3, [sp, #26]
    8f72:	e001      	b.n	8f78 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8f74:	2301      	movs	r3, #1
    8f76:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8f78:	9b01      	ldr	r3, [sp, #4]
    8f7a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8f7e:	801a      	strh	r2, [r3, #0]

    return Status;
    8f80:	9b07      	ldr	r3, [sp, #28]
}
    8f82:	4618      	mov	r0, r3
    8f84:	b008      	add	sp, #32
    8f86:	4770      	bx	lr
    8f88:	00010f80 	.word	0x00010f80
    8f8c:	1fff8d2c 	.word	0x1fff8d2c

00008f90 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8f90:	b500      	push	{lr}
    8f92:	b085      	sub	sp, #20
    8f94:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8f96:	2300      	movs	r3, #0
    8f98:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8f9c:	2300      	movs	r3, #0
    8f9e:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8fa2:	4a32      	ldr	r2, [pc, #200]	; (906c <Adc_Ip_IRQHandler+0xdc>)
    8fa4:	9b01      	ldr	r3, [sp, #4]
    8fa6:	214c      	movs	r1, #76	; 0x4c
    8fa8:	fb01 f303 	mul.w	r3, r1, r3
    8fac:	4413      	add	r3, r2
    8fae:	781b      	ldrb	r3, [r3, #0]
    8fb0:	2b00      	cmp	r3, #0
    8fb2:	d040      	beq.n	9036 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8fb4:	4a2d      	ldr	r2, [pc, #180]	; (906c <Adc_Ip_IRQHandler+0xdc>)
    8fb6:	9b01      	ldr	r3, [sp, #4]
    8fb8:	214c      	movs	r1, #76	; 0x4c
    8fba:	fb01 f303 	mul.w	r3, r1, r3
    8fbe:	4413      	add	r3, r2
    8fc0:	3308      	adds	r3, #8
    8fc2:	681b      	ldr	r3, [r3, #0]
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	d04d      	beq.n	9064 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8fc8:	2300      	movs	r3, #0
    8fca:	f88d 300f 	strb.w	r3, [sp, #15]
    8fce:	e02d      	b.n	902c <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8fd0:	4a27      	ldr	r2, [pc, #156]	; (9070 <Adc_Ip_IRQHandler+0xe0>)
    8fd2:	9b01      	ldr	r3, [sp, #4]
    8fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fd8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8fe0:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8fe2:	9802      	ldr	r0, [sp, #8]
    8fe4:	f7ff fa20 	bl	8428 <Adc_HwAcc_GetAIEN>
    8fe8:	4603      	mov	r3, r0
    8fea:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8fee:	9802      	ldr	r0, [sp, #8]
    8ff0:	f7ff fa28 	bl	8444 <Adc_HwAcc_GetCOCO>
    8ff4:	4603      	mov	r3, r0
    8ff6:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8ffa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8ffe:	2b00      	cmp	r3, #0
    9000:	d00f      	beq.n	9022 <Adc_Ip_IRQHandler+0x92>
    9002:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9006:	2b00      	cmp	r3, #0
    9008:	d00b      	beq.n	9022 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    900a:	4a18      	ldr	r2, [pc, #96]	; (906c <Adc_Ip_IRQHandler+0xdc>)
    900c:	9b01      	ldr	r3, [sp, #4]
    900e:	214c      	movs	r1, #76	; 0x4c
    9010:	fb01 f303 	mul.w	r3, r1, r3
    9014:	4413      	add	r3, r2
    9016:	3308      	adds	r3, #8
    9018:	681b      	ldr	r3, [r3, #0]
    901a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    901e:	4610      	mov	r0, r2
    9020:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9022:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9026:	3301      	adds	r3, #1
    9028:	f88d 300f 	strb.w	r3, [sp, #15]
    902c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9030:	2b0f      	cmp	r3, #15
    9032:	d9cd      	bls.n	8fd0 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    9034:	e016      	b.n	9064 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9036:	2300      	movs	r3, #0
    9038:	f88d 300f 	strb.w	r3, [sp, #15]
    903c:	e00e      	b.n	905c <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    903e:	4a0c      	ldr	r2, [pc, #48]	; (9070 <Adc_Ip_IRQHandler+0xe0>)
    9040:	9b01      	ldr	r3, [sp, #4]
    9042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9046:	f89d 200f 	ldrb.w	r2, [sp, #15]
    904a:	4611      	mov	r1, r2
    904c:	4618      	mov	r0, r3
    904e:	f7ff fa07 	bl	8460 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9052:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9056:	3301      	adds	r3, #1
    9058:	f88d 300f 	strb.w	r3, [sp, #15]
    905c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9060:	2b0f      	cmp	r3, #15
    9062:	d9ec      	bls.n	903e <Adc_Ip_IRQHandler+0xae>
}
    9064:	bf00      	nop
    9066:	b005      	add	sp, #20
    9068:	f85d fb04 	ldr.w	pc, [sp], #4
    906c:	1fff8d2c 	.word	0x1fff8d2c
    9070:	00010f80 	.word	0x00010f80

00009074 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9074:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    9076:	2000      	movs	r0, #0
    9078:	f7ff ff8a 	bl	8f90 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    907c:	f3bf 8f4f 	dsb	sy
}
    9080:	bf00      	nop
    9082:	bd08      	pop	{r3, pc}

00009084 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9084:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    9086:	2001      	movs	r0, #1
    9088:	f7ff ff82 	bl	8f90 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    908c:	f3bf 8f4f 	dsb	sy
}
    9090:	bf00      	nop
    9092:	bd08      	pop	{r3, pc}

00009094 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    9094:	b530      	push	{r4, r5, lr}
    9096:	b085      	sub	sp, #20
    9098:	4603      	mov	r3, r0
    909a:	460a      	mov	r2, r1
    909c:	f88d 3007 	strb.w	r3, [sp, #7]
    90a0:	4613      	mov	r3, r2
    90a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    90a6:	2300      	movs	r3, #0
    90a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    90ac:	2300      	movs	r3, #0
    90ae:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    90b2:	f002 f8cf 	bl	b254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    90b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    90ba:	492e      	ldr	r1, [pc, #184]	; (9174 <Adc_Ipw_RemoveFromQueue+0xe0>)
    90bc:	4613      	mov	r3, r2
    90be:	005b      	lsls	r3, r3, #1
    90c0:	4413      	add	r3, r2
    90c2:	005b      	lsls	r3, r3, #1
    90c4:	440b      	add	r3, r1
    90c6:	881b      	ldrh	r3, [r3, #0]
    90c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    90cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    90d0:	2b01      	cmp	r3, #1
    90d2:	d80a      	bhi.n	90ea <Adc_Ipw_RemoveFromQueue+0x56>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    90d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    90d8:	4926      	ldr	r1, [pc, #152]	; (9174 <Adc_Ipw_RemoveFromQueue+0xe0>)
    90da:	4613      	mov	r3, r2
    90dc:	005b      	lsls	r3, r3, #1
    90de:	4413      	add	r3, r2
    90e0:	005b      	lsls	r3, r3, #1
    90e2:	440b      	add	r3, r1
    90e4:	2200      	movs	r2, #0
    90e6:	801a      	strh	r2, [r3, #0]
    90e8:	e03f      	b.n	916a <Adc_Ipw_RemoveFromQueue+0xd6>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    90ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    90ee:	3301      	adds	r3, #1
    90f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    90f4:	e01f      	b.n	9136 <Adc_Ipw_RemoveFromQueue+0xa2>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    90f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    90fa:	f8bd 400e 	ldrh.w	r4, [sp, #14]
    90fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9102:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9106:	1e58      	subs	r0, r3, #1
    9108:	4d1a      	ldr	r5, [pc, #104]	; (9174 <Adc_Ipw_RemoveFromQueue+0xe0>)
    910a:	460b      	mov	r3, r1
    910c:	005b      	lsls	r3, r3, #1
    910e:	440b      	add	r3, r1
    9110:	4423      	add	r3, r4
    9112:	005b      	lsls	r3, r3, #1
    9114:	442b      	add	r3, r5
    9116:	885b      	ldrh	r3, [r3, #2]
    9118:	b29c      	uxth	r4, r3
    911a:	4916      	ldr	r1, [pc, #88]	; (9174 <Adc_Ipw_RemoveFromQueue+0xe0>)
    911c:	4613      	mov	r3, r2
    911e:	005b      	lsls	r3, r3, #1
    9120:	4413      	add	r3, r2
    9122:	4403      	add	r3, r0
    9124:	005b      	lsls	r3, r3, #1
    9126:	440b      	add	r3, r1
    9128:	4622      	mov	r2, r4
    912a:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    912c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9130:	3301      	adds	r3, #1
    9132:	f8ad 300e 	strh.w	r3, [sp, #14]
    9136:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    913a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    913e:	429a      	cmp	r2, r3
    9140:	d3d9      	bcc.n	90f6 <Adc_Ipw_RemoveFromQueue+0x62>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    9142:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9146:	490b      	ldr	r1, [pc, #44]	; (9174 <Adc_Ipw_RemoveFromQueue+0xe0>)
    9148:	4613      	mov	r3, r2
    914a:	005b      	lsls	r3, r3, #1
    914c:	4413      	add	r3, r2
    914e:	005b      	lsls	r3, r3, #1
    9150:	440b      	add	r3, r1
    9152:	881b      	ldrh	r3, [r3, #0]
    9154:	b29b      	uxth	r3, r3
    9156:	3b01      	subs	r3, #1
    9158:	b298      	uxth	r0, r3
    915a:	4906      	ldr	r1, [pc, #24]	; (9174 <Adc_Ipw_RemoveFromQueue+0xe0>)
    915c:	4613      	mov	r3, r2
    915e:	005b      	lsls	r3, r3, #1
    9160:	4413      	add	r3, r2
    9162:	005b      	lsls	r3, r3, #1
    9164:	440b      	add	r3, r1
    9166:	4602      	mov	r2, r0
    9168:	801a      	strh	r2, [r3, #0]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    916a:	f002 f89f 	bl	b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    916e:	bf00      	nop
    9170:	b005      	add	sp, #20
    9172:	bd30      	pop	{r4, r5, pc}
    9174:	1fff8d20 	.word	0x1fff8d20

00009178 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9178:	b500      	push	{lr}
    917a:	b087      	sub	sp, #28
    917c:	9003      	str	r0, [sp, #12]
    917e:	9102      	str	r1, [sp, #8]
    9180:	9201      	str	r2, [sp, #4]
    9182:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9186:	2300      	movs	r3, #0
    9188:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    918c:	9b03      	ldr	r3, [sp, #12]
    918e:	789b      	ldrb	r3, [r3, #2]
    9190:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9194:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9198:	4a29      	ldr	r2, [pc, #164]	; (9240 <Adc_Ipw_ReadGroupConvData+0xc8>)
    919a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    919e:	681a      	ldr	r2, [r3, #0]
    91a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    91a4:	4413      	add	r3, r2
    91a6:	7c1b      	ldrb	r3, [r3, #16]
    91a8:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    91ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    91b0:	4a23      	ldr	r2, [pc, #140]	; (9240 <Adc_Ipw_ReadGroupConvData+0xc8>)
    91b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91b6:	681b      	ldr	r3, [r3, #0]
    91b8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    91bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    91c0:	695b      	ldr	r3, [r3, #20]
    91c2:	4618      	mov	r0, r3
    91c4:	f000 fbd6 	bl	9974 <Adc_Ipw_CalculateNumsBitShift>
    91c8:	4603      	mov	r3, r0
    91ca:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    91ce:	9b03      	ldr	r3, [sp, #12]
    91d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    91d4:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    91d8:	2300      	movs	r3, #0
    91da:	f88d 3017 	strb.w	r3, [sp, #23]
    91de:	e022      	b.n	9226 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    91e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    91e4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    91e8:	4611      	mov	r1, r2
    91ea:	4618      	mov	r0, r3
    91ec:	f7ff fce0 	bl	8bb0 <Adc_Ip_GetConvData>
    91f0:	4603      	mov	r3, r0
    91f2:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    91f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    91fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    91fe:	fa02 f303 	lsl.w	r3, r2, r3
    9202:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9206:	9b01      	ldr	r3, [sp, #4]
    9208:	2201      	movs	r2, #1
    920a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    920c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9210:	005b      	lsls	r3, r3, #1
    9212:	9a02      	ldr	r2, [sp, #8]
    9214:	4413      	add	r3, r2
    9216:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    921a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    921c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9220:	3301      	adds	r3, #1
    9222:	f88d 3017 	strb.w	r3, [sp, #23]
    9226:	f89d 2017 	ldrb.w	r2, [sp, #23]
    922a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    922e:	429a      	cmp	r2, r3
    9230:	d3d6      	bcc.n	91e0 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    9232:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9236:	4618      	mov	r0, r3
    9238:	b007      	add	sp, #28
    923a:	f85d fb04 	ldr.w	pc, [sp], #4
    923e:	bf00      	nop
    9240:	1fff8d04 	.word	0x1fff8d04

00009244 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9244:	b500      	push	{lr}
    9246:	b087      	sub	sp, #28
    9248:	9003      	str	r0, [sp, #12]
    924a:	9102      	str	r1, [sp, #8]
    924c:	9201      	str	r2, [sp, #4]
    924e:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    9252:	2301      	movs	r3, #1
    9254:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9258:	2300      	movs	r3, #0
    925a:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    925e:	9b03      	ldr	r3, [sp, #12]
    9260:	789b      	ldrb	r3, [r3, #2]
    9262:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9266:	f89d 3003 	ldrb.w	r3, [sp, #3]
    926a:	4a19      	ldr	r2, [pc, #100]	; (92d0 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    926c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9270:	681a      	ldr	r2, [r3, #0]
    9272:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9276:	4413      	add	r3, r2
    9278:	7c1b      	ldrb	r3, [r3, #16]
    927a:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    927e:	9b03      	ldr	r3, [sp, #12]
    9280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9284:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9288:	f89d 2013 	ldrb.w	r2, [sp, #19]
    928c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9290:	2100      	movs	r1, #0
    9292:	4618      	mov	r0, r3
    9294:	f000 fe5c 	bl	9f50 <Adc_Ipw_CheckValidConversion>
    9298:	4603      	mov	r3, r0
    929a:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    929e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    92a2:	2b00      	cmp	r3, #0
    92a4:	d00a      	beq.n	92bc <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    92a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    92aa:	9a01      	ldr	r2, [sp, #4]
    92ac:	9902      	ldr	r1, [sp, #8]
    92ae:	9803      	ldr	r0, [sp, #12]
    92b0:	f7ff ff62 	bl	9178 <Adc_Ipw_ReadGroupConvData>
    92b4:	4603      	mov	r3, r0
    92b6:	f88d 3017 	strb.w	r3, [sp, #23]
    92ba:	e002      	b.n	92c2 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    92bc:	2301      	movs	r3, #1
    92be:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    92c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    92c6:	4618      	mov	r0, r3
    92c8:	b007      	add	sp, #28
    92ca:	f85d fb04 	ldr.w	pc, [sp], #4
    92ce:	bf00      	nop
    92d0:	1fff8d04 	.word	0x1fff8d04

000092d4 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    92d4:	b088      	sub	sp, #32
    92d6:	4603      	mov	r3, r0
    92d8:	9100      	str	r1, [sp, #0]
    92da:	f8ad 3006 	strh.w	r3, [sp, #6]
    92de:	4613      	mov	r3, r2
    92e0:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    92e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    92e8:	4a3b      	ldr	r2, [pc, #236]	; (93d8 <Adc_Ipw_WriteDataBuffer+0x104>)
    92ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ee:	68da      	ldr	r2, [r3, #12]
    92f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    92f4:	005b      	lsls	r3, r3, #1
    92f6:	4413      	add	r3, r2
    92f8:	881b      	ldrh	r3, [r3, #0]
    92fa:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    92fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9302:	4a35      	ldr	r2, [pc, #212]	; (93d8 <Adc_Ipw_WriteDataBuffer+0x104>)
    9304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9308:	6859      	ldr	r1, [r3, #4]
    930a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    930e:	4613      	mov	r3, r2
    9310:	00db      	lsls	r3, r3, #3
    9312:	1a9b      	subs	r3, r3, r2
    9314:	00db      	lsls	r3, r3, #3
    9316:	440b      	add	r3, r1
    9318:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    931a:	9b04      	ldr	r3, [sp, #16]
    931c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9320:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    9324:	2300      	movs	r3, #0
    9326:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    9328:	2300      	movs	r3, #0
    932a:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    932e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9332:	492a      	ldr	r1, [pc, #168]	; (93dc <Adc_Ipw_WriteDataBuffer+0x108>)
    9334:	4613      	mov	r3, r2
    9336:	005b      	lsls	r3, r3, #1
    9338:	4413      	add	r3, r2
    933a:	00db      	lsls	r3, r3, #3
    933c:	440b      	add	r3, r1
    933e:	330c      	adds	r3, #12
    9340:	881b      	ldrh	r3, [r3, #0]
    9342:	b29b      	uxth	r3, r3
    9344:	3b01      	subs	r3, #1
    9346:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    934a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    934e:	4923      	ldr	r1, [pc, #140]	; (93dc <Adc_Ipw_WriteDataBuffer+0x108>)
    9350:	4613      	mov	r3, r2
    9352:	005b      	lsls	r3, r3, #1
    9354:	4413      	add	r3, r2
    9356:	00db      	lsls	r3, r3, #3
    9358:	440b      	add	r3, r1
    935a:	330c      	adds	r3, #12
    935c:	881b      	ldrh	r3, [r3, #0]
    935e:	b29b      	uxth	r3, r3
    9360:	2b00      	cmp	r3, #0
    9362:	d104      	bne.n	936e <Adc_Ipw_WriteDataBuffer+0x9a>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    9364:	9b04      	ldr	r3, [sp, #16]
    9366:	8c1b      	ldrh	r3, [r3, #32]
    9368:	3b01      	subs	r3, #1
    936a:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    936e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9372:	491a      	ldr	r1, [pc, #104]	; (93dc <Adc_Ipw_WriteDataBuffer+0x108>)
    9374:	4613      	mov	r3, r2
    9376:	005b      	lsls	r3, r3, #1
    9378:	4413      	add	r3, r2
    937a:	00db      	lsls	r3, r3, #3
    937c:	440b      	add	r3, r1
    937e:	3310      	adds	r3, #16
    9380:	681a      	ldr	r2, [r3, #0]
    9382:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9386:	005b      	lsls	r3, r3, #1
    9388:	4413      	add	r3, r2
    938a:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    938c:	9b04      	ldr	r3, [sp, #16]
    938e:	8c1b      	ldrh	r3, [r3, #32]
    9390:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    9394:	2300      	movs	r3, #0
    9396:	f88d 301f 	strb.w	r3, [sp, #31]
    939a:	e012      	b.n	93c2 <Adc_Ipw_WriteDataBuffer+0xee>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    939c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    93a0:	005b      	lsls	r3, r3, #1
    93a2:	9a00      	ldr	r2, [sp, #0]
    93a4:	4413      	add	r3, r2
    93a6:	9a06      	ldr	r2, [sp, #24]
    93a8:	8812      	ldrh	r2, [r2, #0]
    93aa:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    93ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    93b0:	005b      	lsls	r3, r3, #1
    93b2:	9a06      	ldr	r2, [sp, #24]
    93b4:	4413      	add	r3, r2
    93b6:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    93b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    93bc:	3301      	adds	r3, #1
    93be:	f88d 301f 	strb.w	r3, [sp, #31]
    93c2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    93c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    93ca:	429a      	cmp	r2, r3
    93cc:	d3e6      	bcc.n	939c <Adc_Ipw_WriteDataBuffer+0xc8>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    93ce:	bf00      	nop
    93d0:	bf00      	nop
    93d2:	b008      	add	sp, #32
    93d4:	4770      	bx	lr
    93d6:	bf00      	nop
    93d8:	1fff8d04 	.word	0x1fff8d04
    93dc:	1fff8d08 	.word	0x1fff8d08

000093e0 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    93e0:	b500      	push	{lr}
    93e2:	b089      	sub	sp, #36	; 0x24
    93e4:	9200      	str	r2, [sp, #0]
    93e6:	461a      	mov	r2, r3
    93e8:	4603      	mov	r3, r0
    93ea:	f88d 3007 	strb.w	r3, [sp, #7]
    93ee:	460b      	mov	r3, r1
    93f0:	f8ad 3004 	strh.w	r3, [sp, #4]
    93f4:	4613      	mov	r3, r2
    93f6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    93fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93fe:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9402:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9406:	f003 0307 	and.w	r3, r3, #7
    940a:	b2db      	uxtb	r3, r3
    940c:	2b00      	cmp	r3, #0
    940e:	d006      	beq.n	941e <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9410:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9414:	08db      	lsrs	r3, r3, #3
    9416:	b2db      	uxtb	r3, r3
    9418:	3301      	adds	r3, #1
    941a:	b2db      	uxtb	r3, r3
    941c:	e003      	b.n	9426 <Adc_Ipw_ConfigurePdbChannels+0x46>
    941e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9422:	08db      	lsrs	r3, r3, #3
    9424:	b2db      	uxtb	r3, r3
    9426:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    942a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    942e:	4987      	ldr	r1, [pc, #540]	; (964c <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    9430:	4613      	mov	r3, r2
    9432:	005b      	lsls	r3, r3, #1
    9434:	4413      	add	r3, r2
    9436:	00db      	lsls	r3, r3, #3
    9438:	440b      	add	r3, r1
    943a:	3314      	adds	r3, #20
    943c:	781b      	ldrb	r3, [r3, #0]
    943e:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9442:	4b83      	ldr	r3, [pc, #524]	; (9650 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    9444:	681b      	ldr	r3, [r3, #0]
    9446:	681a      	ldr	r2, [r3, #0]
    9448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    944c:	4413      	add	r3, r2
    944e:	7c1b      	ldrb	r3, [r3, #16]
    9450:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9454:	9b00      	ldr	r3, [sp, #0]
    9456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9458:	691b      	ldr	r3, [r3, #16]
    945a:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    945c:	2300      	movs	r3, #0
    945e:	f88d 301f 	strb.w	r3, [sp, #31]
    9462:	e0e6      	b.n	9632 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    9464:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9468:	08db      	lsrs	r3, r3, #3
    946a:	b2db      	uxtb	r3, r3
    946c:	2b00      	cmp	r3, #0
    946e:	d102      	bne.n	9476 <Adc_Ipw_ConfigurePdbChannels+0x96>
    9470:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9474:	e000      	b.n	9478 <Adc_Ipw_ConfigurePdbChannels+0x98>
    9476:	2308      	movs	r3, #8
    9478:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    947c:	9b00      	ldr	r3, [sp, #0]
    947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9480:	7bdb      	ldrb	r3, [r3, #15]
    9482:	2b00      	cmp	r3, #0
    9484:	d05e      	beq.n	9544 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9486:	9b00      	ldr	r3, [sp, #0]
    9488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    948a:	7b9b      	ldrb	r3, [r3, #14]
    948c:	f083 0301 	eor.w	r3, r3, #1
    9490:	b2db      	uxtb	r3, r3
    9492:	2b00      	cmp	r3, #0
    9494:	d02a      	beq.n	94ec <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9496:	f89d 3013 	ldrb.w	r3, [sp, #19]
    949a:	f1c3 0308 	rsb	r3, r3, #8
    949e:	22ff      	movs	r2, #255	; 0xff
    94a0:	fa22 f303 	lsr.w	r3, r2, r3
    94a4:	b2db      	uxtb	r3, r3
    94a6:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    94aa:	2300      	movs	r3, #0
    94ac:	f88d 301e 	strb.w	r3, [sp, #30]
    94b0:	e015      	b.n	94de <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    94b2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    94b6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    94ba:	f89d 301e 	ldrb.w	r3, [sp, #30]
    94be:	4413      	add	r3, r2
    94c0:	005b      	lsls	r3, r3, #1
    94c2:	9a05      	ldr	r2, [sp, #20]
    94c4:	4413      	add	r3, r2
    94c6:	881b      	ldrh	r3, [r3, #0]
    94c8:	f89d 201e 	ldrb.w	r2, [sp, #30]
    94cc:	f89d 101f 	ldrb.w	r1, [sp, #31]
    94d0:	f001 fd9e 	bl	b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    94d4:	f89d 301e 	ldrb.w	r3, [sp, #30]
    94d8:	3301      	adds	r3, #1
    94da:	f88d 301e 	strb.w	r3, [sp, #30]
    94de:	f89d 201e 	ldrb.w	r2, [sp, #30]
    94e2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    94e6:	429a      	cmp	r2, r3
    94e8:	d3e3      	bcc.n	94b2 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    94ea:	e051      	b.n	9590 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    94ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    94f0:	2b00      	cmp	r3, #0
    94f2:	d110      	bne.n	9516 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    94f4:	2301      	movs	r3, #1
    94f6:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    94fa:	9b05      	ldr	r3, [sp, #20]
    94fc:	881b      	ldrh	r3, [r3, #0]
    94fe:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9502:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9506:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    950a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    950e:	2200      	movs	r2, #0
    9510:	f001 fd7e 	bl	b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9514:	e03c      	b.n	9590 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    9516:	2301      	movs	r3, #1
    9518:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    951c:	9b00      	ldr	r3, [sp, #0]
    951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9520:	899a      	ldrh	r2, [r3, #12]
    9522:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9526:	b29b      	uxth	r3, r3
    9528:	fb12 f303 	smulbb	r3, r2, r3
    952c:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9530:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9534:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9538:	f89d 101f 	ldrb.w	r1, [sp, #31]
    953c:	2200      	movs	r2, #0
    953e:	f001 fd67 	bl	b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9542:	e025      	b.n	9590 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    9544:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9548:	2b00      	cmp	r3, #0
    954a:	d10b      	bne.n	9564 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    954c:	2301      	movs	r3, #1
    954e:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    9552:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9556:	f89d 101f 	ldrb.w	r1, [sp, #31]
    955a:	2300      	movs	r3, #0
    955c:	2200      	movs	r2, #0
    955e:	f001 fd57 	bl	b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9562:	e015      	b.n	9590 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9564:	2301      	movs	r3, #1
    9566:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    956a:	9b00      	ldr	r3, [sp, #0]
    956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    956e:	899a      	ldrh	r2, [r3, #12]
    9570:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9574:	b29b      	uxth	r3, r3
    9576:	fb12 f303 	smulbb	r3, r2, r3
    957a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    957e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9582:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9586:	f89d 101f 	ldrb.w	r1, [sp, #31]
    958a:	2200      	movs	r2, #0
    958c:	f001 fd40 	bl	b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9590:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9594:	4618      	mov	r0, r3
    9596:	f001 fc0f 	bl	adb8 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    959a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    959e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    95a2:	1ad3      	subs	r3, r2, r3
    95a4:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    95a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    95ac:	b29a      	uxth	r2, r3
    95ae:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    95b2:	4413      	add	r3, r2
    95b4:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    95b8:	9b00      	ldr	r3, [sp, #0]
    95ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    95bc:	7b9b      	ldrb	r3, [r3, #14]
    95be:	2b00      	cmp	r3, #0
    95c0:	d01d      	beq.n	95fe <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    95c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    95c6:	2b00      	cmp	r3, #0
    95c8:	d10c      	bne.n	95e4 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    95ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    95ce:	f1c3 0308 	rsb	r3, r3, #8
    95d2:	22ff      	movs	r2, #255	; 0xff
    95d4:	fa22 f303 	lsr.w	r3, r2, r3
    95d8:	b2db      	uxtb	r3, r3
    95da:	3b01      	subs	r3, #1
    95dc:	b2db      	uxtb	r3, r3
    95de:	f88d 300e 	strb.w	r3, [sp, #14]
    95e2:	e00f      	b.n	9604 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    95e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    95e8:	f1c3 0308 	rsb	r3, r3, #8
    95ec:	22ff      	movs	r2, #255	; 0xff
    95ee:	fa22 f303 	lsr.w	r3, r2, r3
    95f2:	b2db      	uxtb	r3, r3
    95f4:	3b01      	subs	r3, #1
    95f6:	b2db      	uxtb	r3, r3
    95f8:	f88d 300e 	strb.w	r3, [sp, #14]
    95fc:	e002      	b.n	9604 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    95fe:	2300      	movs	r3, #0
    9600:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9604:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9608:	f1c3 0308 	rsb	r3, r3, #8
    960c:	22ff      	movs	r2, #255	; 0xff
    960e:	fa22 f303 	lsr.w	r3, r2, r3
    9612:	b2db      	uxtb	r3, r3
    9614:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9618:	f89d 3018 	ldrb.w	r3, [sp, #24]
    961c:	aa03      	add	r2, sp, #12
    961e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9622:	4618      	mov	r0, r3
    9624:	f001 fc04 	bl	ae30 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9628:	f89d 301f 	ldrb.w	r3, [sp, #31]
    962c:	3301      	adds	r3, #1
    962e:	f88d 301f 	strb.w	r3, [sp, #31]
    9632:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9636:	f89d 3019 	ldrb.w	r3, [sp, #25]
    963a:	429a      	cmp	r2, r3
    963c:	f4ff af12 	bcc.w	9464 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    9640:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9644:	4618      	mov	r0, r3
    9646:	b009      	add	sp, #36	; 0x24
    9648:	f85d fb04 	ldr.w	pc, [sp], #4
    964c:	1fff8d08 	.word	0x1fff8d08
    9650:	1fff8d04 	.word	0x1fff8d04

00009654 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    9654:	b500      	push	{lr}
    9656:	b089      	sub	sp, #36	; 0x24
    9658:	9202      	str	r2, [sp, #8]
    965a:	9301      	str	r3, [sp, #4]
    965c:	4603      	mov	r3, r0
    965e:	f88d 300f 	strb.w	r3, [sp, #15]
    9662:	460b      	mov	r3, r1
    9664:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9668:	2300      	movs	r3, #0
    966a:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    966e:	4b62      	ldr	r3, [pc, #392]	; (97f8 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9670:	681b      	ldr	r3, [r3, #0]
    9672:	681a      	ldr	r2, [r3, #0]
    9674:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9678:	4413      	add	r3, r2
    967a:	7c1b      	ldrb	r3, [r3, #16]
    967c:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9680:	9b02      	ldr	r3, [sp, #8]
    9682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9684:	691b      	ldr	r3, [r3, #16]
    9686:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9688:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    968c:	f003 0307 	and.w	r3, r3, #7
    9690:	b2db      	uxtb	r3, r3
    9692:	2b00      	cmp	r3, #0
    9694:	d006      	beq.n	96a4 <Adc_Ipw_ConfigurePdbConversion+0x50>
    9696:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    969a:	08db      	lsrs	r3, r3, #3
    969c:	b2db      	uxtb	r3, r3
    969e:	3301      	adds	r3, #1
    96a0:	b2db      	uxtb	r3, r3
    96a2:	e003      	b.n	96ac <Adc_Ipw_ConfigurePdbConversion+0x58>
    96a4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    96a8:	08db      	lsrs	r3, r3, #3
    96aa:	b2db      	uxtb	r3, r3
    96ac:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    96b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    96b4:	4618      	mov	r0, r3
    96b6:	f001 fae9 	bl	ac8c <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    96ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
    96be:	9901      	ldr	r1, [sp, #4]
    96c0:	4618      	mov	r0, r3
    96c2:	f001 fb11 	bl	ace8 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    96c6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    96ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    96ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96d2:	9a02      	ldr	r2, [sp, #8]
    96d4:	f7ff fe84 	bl	93e0 <Adc_Ipw_ConfigurePdbChannels>
    96d8:	4603      	mov	r3, r0
    96da:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    96de:	9b02      	ldr	r3, [sp, #8]
    96e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    96e2:	7bdb      	ldrb	r3, [r3, #15]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d02f      	beq.n	9748 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    96e8:	9b02      	ldr	r3, [sp, #8]
    96ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    96ec:	7b9b      	ldrb	r3, [r3, #14]
    96ee:	f083 0301 	eor.w	r3, r3, #1
    96f2:	b2db      	uxtb	r3, r3
    96f4:	2b00      	cmp	r3, #0
    96f6:	d017      	beq.n	9728 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    96f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    96fc:	493f      	ldr	r1, [pc, #252]	; (97fc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    96fe:	4613      	mov	r3, r2
    9700:	005b      	lsls	r3, r3, #1
    9702:	4413      	add	r3, r2
    9704:	00db      	lsls	r3, r3, #3
    9706:	440b      	add	r3, r1
    9708:	3314      	adds	r3, #20
    970a:	781b      	ldrb	r3, [r3, #0]
    970c:	461a      	mov	r2, r3
    970e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9712:	4413      	add	r3, r2
    9714:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9718:	3b01      	subs	r3, #1
    971a:	005b      	lsls	r3, r3, #1
    971c:	9a05      	ldr	r2, [sp, #20]
    971e:	4413      	add	r3, r2
    9720:	881b      	ldrh	r3, [r3, #0]
    9722:	f8ad 301c 	strh.w	r3, [sp, #28]
    9726:	e01a      	b.n	975e <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    9728:	9b05      	ldr	r3, [sp, #20]
    972a:	881a      	ldrh	r2, [r3, #0]
    972c:	9b02      	ldr	r3, [sp, #8]
    972e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9730:	8999      	ldrh	r1, [r3, #12]
    9732:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9736:	3b01      	subs	r3, #1
    9738:	b29b      	uxth	r3, r3
    973a:	fb11 f303 	smulbb	r3, r1, r3
    973e:	b29b      	uxth	r3, r3
    9740:	4413      	add	r3, r2
    9742:	f8ad 301c 	strh.w	r3, [sp, #28]
    9746:	e00a      	b.n	975e <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    9748:	9b02      	ldr	r3, [sp, #8]
    974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    974c:	899a      	ldrh	r2, [r3, #12]
    974e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9752:	3b01      	subs	r3, #1
    9754:	b29b      	uxth	r3, r3
    9756:	fb12 f303 	smulbb	r3, r2, r3
    975a:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    975e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9762:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9766:	4611      	mov	r1, r2
    9768:	4618      	mov	r0, r3
    976a:	f001 fb3d 	bl	ade8 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    976e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9772:	4618      	mov	r0, r3
    9774:	f001 fb20 	bl	adb8 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    9778:	2300      	movs	r3, #0
    977a:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    977e:	2300      	movs	r3, #0
    9780:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9784:	2300      	movs	r3, #0
    9786:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    978a:	e00c      	b.n	97a6 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    978c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9790:	aa04      	add	r2, sp, #16
    9792:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9796:	4618      	mov	r0, r3
    9798:	f001 fb4a 	bl	ae30 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    979c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    97a0:	3301      	adds	r3, #1
    97a2:	f88d 301f 	strb.w	r3, [sp, #31]
    97a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    97aa:	2b01      	cmp	r3, #1
    97ac:	d9ee      	bls.n	978c <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    97ae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    97b2:	4912      	ldr	r1, [pc, #72]	; (97fc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    97b4:	4613      	mov	r3, r2
    97b6:	005b      	lsls	r3, r3, #1
    97b8:	4413      	add	r3, r2
    97ba:	00db      	lsls	r3, r3, #3
    97bc:	440b      	add	r3, r1
    97be:	3314      	adds	r3, #20
    97c0:	7819      	ldrb	r1, [r3, #0]
    97c2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    97c6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    97ca:	440b      	add	r3, r1
    97cc:	b2d8      	uxtb	r0, r3
    97ce:	490b      	ldr	r1, [pc, #44]	; (97fc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    97d0:	4613      	mov	r3, r2
    97d2:	005b      	lsls	r3, r3, #1
    97d4:	4413      	add	r3, r2
    97d6:	00db      	lsls	r3, r3, #3
    97d8:	440b      	add	r3, r1
    97da:	3314      	adds	r3, #20
    97dc:	4602      	mov	r2, r0
    97de:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    97e0:	9b01      	ldr	r3, [sp, #4]
    97e2:	2b0f      	cmp	r3, #15
    97e4:	d104      	bne.n	97f0 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    97e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    97ea:	4618      	mov	r0, r3
    97ec:	f001 fabc 	bl	ad68 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    97f0:	bf00      	nop
    97f2:	b009      	add	sp, #36	; 0x24
    97f4:	f85d fb04 	ldr.w	pc, [sp], #4
    97f8:	1fff8d04 	.word	0x1fff8d04
    97fc:	1fff8d08 	.word	0x1fff8d08

00009800 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    9800:	b500      	push	{lr}
    9802:	b087      	sub	sp, #28
    9804:	4603      	mov	r3, r0
    9806:	f88d 3007 	strb.w	r3, [sp, #7]
    980a:	460b      	mov	r3, r1
    980c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9810:	4613      	mov	r3, r2
    9812:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9816:	f89d 3006 	ldrb.w	r3, [sp, #6]
    981a:	4a39      	ldr	r2, [pc, #228]	; (9900 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    981c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9820:	68da      	ldr	r2, [r3, #12]
    9822:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9826:	005b      	lsls	r3, r3, #1
    9828:	4413      	add	r3, r2
    982a:	881b      	ldrh	r3, [r3, #0]
    982c:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9830:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9834:	4a32      	ldr	r2, [pc, #200]	; (9900 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    9836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983a:	681a      	ldr	r2, [r3, #0]
    983c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9840:	4413      	add	r3, r2
    9842:	7c1b      	ldrb	r3, [r3, #16]
    9844:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    9848:	2300      	movs	r3, #0
    984a:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    984e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9852:	4618      	mov	r0, r3
    9854:	f001 fc06 	bl	b064 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    9858:	f89d 3006 	ldrb.w	r3, [sp, #6]
    985c:	4a28      	ldr	r2, [pc, #160]	; (9900 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    985e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9862:	6859      	ldr	r1, [r3, #4]
    9864:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9868:	4613      	mov	r3, r2
    986a:	00db      	lsls	r3, r3, #3
    986c:	1a9b      	subs	r3, r3, r2
    986e:	00db      	lsls	r3, r3, #3
    9870:	440b      	add	r3, r1
    9872:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9876:	2b01      	cmp	r3, #1
    9878:	d115      	bne.n	98a6 <Adc_Ipw_StopConversionCheckTimeout+0xa6>
    987a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    987e:	4a20      	ldr	r2, [pc, #128]	; (9900 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    9880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9884:	6859      	ldr	r1, [r3, #4]
    9886:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    988a:	4613      	mov	r3, r2
    988c:	00db      	lsls	r3, r3, #3
    988e:	1a9b      	subs	r3, r3, r2
    9890:	00db      	lsls	r3, r3, #3
    9892:	440b      	add	r3, r1
    9894:	689b      	ldr	r3, [r3, #8]
    9896:	2b01      	cmp	r3, #1
    9898:	d105      	bne.n	98a6 <Adc_Ipw_StopConversionCheckTimeout+0xa6>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    989a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    989e:	2100      	movs	r1, #0
    98a0:	4618      	mov	r0, r3
    98a2:	f7ff f80f 	bl	88c4 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98a6:	2300      	movs	r3, #0
    98a8:	f88d 3016 	strb.w	r3, [sp, #22]
    98ac:	e013      	b.n	98d6 <Adc_Ipw_StopConversionCheckTimeout+0xd6>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    98ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    98b2:	f89d 1016 	ldrb.w	r1, [sp, #22]
    98b6:	2201      	movs	r2, #1
    98b8:	4618      	mov	r0, r3
    98ba:	f7ff f8b5 	bl	8a28 <Adc_Ip_SetDisabledChannel>
    98be:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    98c0:	9b03      	ldr	r3, [sp, #12]
    98c2:	2b02      	cmp	r3, #2
    98c4:	d102      	bne.n	98cc <Adc_Ipw_StopConversionCheckTimeout+0xcc>
        {
            Status = E_NOT_OK;
    98c6:	2301      	movs	r3, #1
    98c8:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    98d0:	3301      	adds	r3, #1
    98d2:	f88d 3016 	strb.w	r3, [sp, #22]
    98d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    98da:	490a      	ldr	r1, [pc, #40]	; (9904 <Adc_Ipw_StopConversionCheckTimeout+0x104>)
    98dc:	4613      	mov	r3, r2
    98de:	005b      	lsls	r3, r3, #1
    98e0:	4413      	add	r3, r2
    98e2:	005b      	lsls	r3, r3, #1
    98e4:	440b      	add	r3, r1
    98e6:	3304      	adds	r3, #4
    98e8:	781b      	ldrb	r3, [r3, #0]
    98ea:	f89d 2016 	ldrb.w	r2, [sp, #22]
    98ee:	429a      	cmp	r2, r3
    98f0:	d3dd      	bcc.n	98ae <Adc_Ipw_StopConversionCheckTimeout+0xae>
        }
    }
    return Status;
    98f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    98f6:	4618      	mov	r0, r3
    98f8:	b007      	add	sp, #28
    98fa:	f85d fb04 	ldr.w	pc, [sp], #4
    98fe:	bf00      	nop
    9900:	1fff8d04 	.word	0x1fff8d04
    9904:	1fff8d20 	.word	0x1fff8d20

00009908 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9908:	b500      	push	{lr}
    990a:	b085      	sub	sp, #20
    990c:	4603      	mov	r3, r0
    990e:	9100      	str	r1, [sp, #0]
    9910:	f88d 3007 	strb.w	r3, [sp, #7]
    9914:	4613      	mov	r3, r2
    9916:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    991a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    991e:	4a14      	ldr	r2, [pc, #80]	; (9970 <Adc_Ipw_PrepareGroupStart+0x68>)
    9920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9924:	681a      	ldr	r2, [r3, #0]
    9926:	f89d 3007 	ldrb.w	r3, [sp, #7]
    992a:	4413      	add	r3, r2
    992c:	7c1b      	ldrb	r3, [r3, #16]
    992e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    9932:	9b00      	ldr	r3, [sp, #0]
    9934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	2b01      	cmp	r3, #1
    993a:	d108      	bne.n	994e <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    993c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9940:	9b00      	ldr	r3, [sp, #0]
    9942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9944:	685b      	ldr	r3, [r3, #4]
    9946:	461a      	mov	r2, r3
    9948:	2101      	movs	r1, #1
    994a:	f7fe ff35 	bl	87b8 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    994e:	9b00      	ldr	r3, [sp, #0]
    9950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9952:	7a1b      	ldrb	r3, [r3, #8]
    9954:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9958:	f89d 300f 	ldrb.w	r3, [sp, #15]
    995c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9960:	4611      	mov	r1, r2
    9962:	4618      	mov	r0, r3
    9964:	f7fe ff46 	bl	87f4 <Adc_Ip_SetSampleTime>
}
    9968:	bf00      	nop
    996a:	b005      	add	sp, #20
    996c:	f85d fb04 	ldr.w	pc, [sp], #4
    9970:	1fff8d04 	.word	0x1fff8d04

00009974 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9974:	b084      	sub	sp, #16
    9976:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9978:	2300      	movs	r3, #0
    997a:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    997e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9982:	4618      	mov	r0, r3
    9984:	b004      	add	sp, #16
    9986:	4770      	bx	lr

00009988 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    9988:	b500      	push	{lr}
    998a:	b08f      	sub	sp, #60	; 0x3c
    998c:	9202      	str	r2, [sp, #8]
    998e:	461a      	mov	r2, r3
    9990:	4603      	mov	r3, r0
    9992:	f88d 300f 	strb.w	r3, [sp, #15]
    9996:	460b      	mov	r3, r1
    9998:	f8ad 300c 	strh.w	r3, [sp, #12]
    999c:	4613      	mov	r3, r2
    999e:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    99a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    99a6:	4a70      	ldr	r2, [pc, #448]	; (9b68 <Adc_Ipw_ConfigureConversion+0x1e0>)
    99a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ac:	68da      	ldr	r2, [r3, #12]
    99ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    99b2:	005b      	lsls	r3, r3, #1
    99b4:	4413      	add	r3, r2
    99b6:	881b      	ldrh	r3, [r3, #0]
    99b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    99bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    99c0:	4a69      	ldr	r2, [pc, #420]	; (9b68 <Adc_Ipw_ConfigureConversion+0x1e0>)
    99c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c6:	6859      	ldr	r1, [r3, #4]
    99c8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    99cc:	4613      	mov	r3, r2
    99ce:	00db      	lsls	r3, r3, #3
    99d0:	1a9b      	subs	r3, r3, r2
    99d2:	00db      	lsls	r3, r3, #3
    99d4:	440b      	add	r3, r1
    99d6:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    99d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    99dc:	4a62      	ldr	r2, [pc, #392]	; (9b68 <Adc_Ipw_ConfigureConversion+0x1e0>)
    99de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99e2:	681a      	ldr	r2, [r3, #0]
    99e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99e8:	4413      	add	r3, r2
    99ea:	7c1b      	ldrb	r3, [r3, #16]
    99ec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    99f0:	2300      	movs	r3, #0
    99f2:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    99f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    99f8:	495c      	ldr	r1, [pc, #368]	; (9b6c <Adc_Ipw_ConfigureConversion+0x1e4>)
    99fa:	4613      	mov	r3, r2
    99fc:	005b      	lsls	r3, r3, #1
    99fe:	4413      	add	r3, r2
    9a00:	00db      	lsls	r3, r3, #3
    9a02:	440b      	add	r3, r1
    9a04:	3314      	adds	r3, #20
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    9a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9a10:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9a12:	2300      	movs	r3, #0
    9a14:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9a18:	e030      	b.n	9a7c <Adc_Ipw_ConfigureConversion+0xf4>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9a1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9a1e:	4a52      	ldr	r2, [pc, #328]	; (9b68 <Adc_Ipw_ConfigureConversion+0x1e0>)
    9a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9a30:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9a34:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9a38:	440b      	add	r3, r1
    9a3a:	005b      	lsls	r3, r3, #1
    9a3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a3e:	440b      	add	r3, r1
    9a40:	881b      	ldrh	r3, [r3, #0]
    9a42:	4619      	mov	r1, r3
    9a44:	460b      	mov	r3, r1
    9a46:	005b      	lsls	r3, r3, #1
    9a48:	440b      	add	r3, r1
    9a4a:	009b      	lsls	r3, r3, #2
    9a4c:	4413      	add	r3, r2
    9a4e:	685b      	ldr	r3, [r3, #4]
    9a50:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    9a52:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9a56:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9a5a:	9b08      	ldr	r3, [sp, #32]
    9a5c:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    9a5e:	2300      	movs	r3, #0
    9a60:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9a64:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9a68:	aa05      	add	r2, sp, #20
    9a6a:	4611      	mov	r1, r2
    9a6c:	4618      	mov	r0, r3
    9a6e:	f7fe ffab 	bl	89c8 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9a72:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9a76:	3301      	adds	r3, #1
    9a78:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9a7c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    9a80:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a84:	3b01      	subs	r3, #1
    9a86:	429a      	cmp	r2, r3
    9a88:	d3c7      	bcc.n	9a1a <Adc_Ipw_ConfigureConversion+0x92>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9a8a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9a8e:	4a36      	ldr	r2, [pc, #216]	; (9b68 <Adc_Ipw_ConfigureConversion+0x1e0>)
    9a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a94:	681b      	ldr	r3, [r3, #0]
    9a96:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9aa0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9aa4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9aa8:	440b      	add	r3, r1
    9aaa:	005b      	lsls	r3, r3, #1
    9aac:	990a      	ldr	r1, [sp, #40]	; 0x28
    9aae:	440b      	add	r3, r1
    9ab0:	881b      	ldrh	r3, [r3, #0]
    9ab2:	4619      	mov	r1, r3
    9ab4:	460b      	mov	r3, r1
    9ab6:	005b      	lsls	r3, r3, #1
    9ab8:	440b      	add	r3, r1
    9aba:	009b      	lsls	r3, r3, #2
    9abc:	4413      	add	r3, r2
    9abe:	685b      	ldr	r3, [r3, #4]
    9ac0:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    9ac2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9ac6:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9aca:	9b08      	ldr	r3, [sp, #32]
    9acc:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ad0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d103      	bne.n	9ae0 <Adc_Ipw_ConfigureConversion+0x158>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9ad8:	2301      	movs	r3, #1
    9ada:	f88d 301c 	strb.w	r3, [sp, #28]
    9ade:	e002      	b.n	9ae6 <Adc_Ipw_ConfigureConversion+0x15e>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    9ae0:	2300      	movs	r3, #0
    9ae2:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9ae6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9aea:	aa05      	add	r2, sp, #20
    9aec:	4611      	mov	r1, r2
    9aee:	4618      	mov	r0, r3
    9af0:	f7fe ff6a 	bl	89c8 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9af4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9af8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9afc:	e014      	b.n	9b28 <Adc_Ipw_ConfigureConversion+0x1a0>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    9afe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9b02:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9b06:	231f      	movs	r3, #31
    9b08:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9b0a:	2300      	movs	r3, #0
    9b0c:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9b10:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9b14:	aa05      	add	r2, sp, #20
    9b16:	4611      	mov	r1, r2
    9b18:	4618      	mov	r0, r3
    9b1a:	f7fe ff55 	bl	89c8 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9b1e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9b22:	3301      	adds	r3, #1
    9b24:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9b28:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9b2c:	2b0f      	cmp	r3, #15
    9b2e:	d9e6      	bls.n	9afe <Adc_Ipw_ConfigureConversion+0x176>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9b30:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b34:	490e      	ldr	r1, [pc, #56]	; (9b70 <Adc_Ipw_ConfigureConversion+0x1e8>)
    9b36:	4613      	mov	r3, r2
    9b38:	005b      	lsls	r3, r3, #1
    9b3a:	4413      	add	r3, r2
    9b3c:	005b      	lsls	r3, r3, #1
    9b3e:	440b      	add	r3, r1
    9b40:	3304      	adds	r3, #4
    9b42:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9b46:	701a      	strb	r2, [r3, #0]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    9b48:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9b4c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9b50:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9b54:	9300      	str	r3, [sp, #0]
    9b56:	9b02      	ldr	r3, [sp, #8]
    9b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9b5a:	f7ff fd7b 	bl	9654 <Adc_Ipw_ConfigurePdbConversion>
}
    9b5e:	bf00      	nop
    9b60:	b00f      	add	sp, #60	; 0x3c
    9b62:	f85d fb04 	ldr.w	pc, [sp], #4
    9b66:	bf00      	nop
    9b68:	1fff8d04 	.word	0x1fff8d04
    9b6c:	1fff8d08 	.word	0x1fff8d08
    9b70:	1fff8d20 	.word	0x1fff8d20

00009b74 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    9b74:	b500      	push	{lr}
    9b76:	b085      	sub	sp, #20
    9b78:	9001      	str	r0, [sp, #4]
    9b7a:	460b      	mov	r3, r1
    9b7c:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9b80:	2300      	movs	r3, #0
    9b82:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9b86:	2300      	movs	r3, #0
    9b88:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    9b8c:	2300      	movs	r3, #0
    9b8e:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9b92:	2300      	movs	r3, #0
    9b94:	f88d 300f 	strb.w	r3, [sp, #15]
    9b98:	e027      	b.n	9bea <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    9b9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b9e:	9a01      	ldr	r2, [sp, #4]
    9ba0:	4413      	add	r3, r2
    9ba2:	7f9b      	ldrb	r3, [r3, #30]
    9ba4:	2b01      	cmp	r3, #1
    9ba6:	d11b      	bne.n	9be0 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9ba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bac:	9a01      	ldr	r2, [sp, #4]
    9bae:	4413      	add	r3, r2
    9bb0:	7c1b      	ldrb	r3, [r3, #16]
    9bb2:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    9bb6:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9bba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9bbe:	9b01      	ldr	r3, [sp, #4]
    9bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9bc4:	4619      	mov	r1, r3
    9bc6:	f7fe fc96 	bl	84f6 <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    9bca:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9bce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9bd2:	9b01      	ldr	r3, [sp, #4]
    9bd4:	3202      	adds	r2, #2
    9bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9bda:	4619      	mov	r1, r3
    9bdc:	f000 ff29 	bl	aa32 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9be0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9be4:	3301      	adds	r3, #1
    9be6:	f88d 300f 	strb.w	r3, [sp, #15]
    9bea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d0d3      	beq.n	9b9a <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    9bf2:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    9bf6:	4618      	mov	r0, r3
    9bf8:	b005      	add	sp, #20
    9bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00009bfe <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    9bfe:	b500      	push	{lr}
    9c00:	b087      	sub	sp, #28
    9c02:	4603      	mov	r3, r0
    9c04:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9c08:	2300      	movs	r3, #0
    9c0a:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9c0e:	2300      	movs	r3, #0
    9c10:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    9c14:	2300      	movs	r3, #0
    9c16:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    9c1a:	2300      	movs	r3, #0
    9c1c:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    9c20:	2300      	movs	r3, #0
    9c22:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9c26:	2300      	movs	r3, #0
    9c28:	f88d 3017 	strb.w	r3, [sp, #23]
    9c2c:	e026      	b.n	9c7c <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c32:	4a34      	ldr	r2, [pc, #208]	; (9d04 <Adc_Ipw_DeInit+0x106>)
    9c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c38:	681a      	ldr	r2, [r3, #0]
    9c3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9c3e:	4413      	add	r3, r2
    9c40:	7f9b      	ldrb	r3, [r3, #30]
    9c42:	2b01      	cmp	r3, #1
    9c44:	d115      	bne.n	9c72 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c4a:	4a2e      	ldr	r2, [pc, #184]	; (9d04 <Adc_Ipw_DeInit+0x106>)
    9c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c50:	681a      	ldr	r2, [r3, #0]
    9c52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9c56:	4413      	add	r3, r2
    9c58:	7c1b      	ldrb	r3, [r3, #16]
    9c5a:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    9c5e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9c62:	4618      	mov	r0, r3
    9c64:	f7fe fd1e 	bl	86a4 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    9c68:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9c6c:	4618      	mov	r0, r3
    9c6e:	f000 ff89 	bl	ab84 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9c72:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9c76:	3301      	adds	r3, #1
    9c78:	f88d 3017 	strb.w	r3, [sp, #23]
    9c7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9c80:	2b00      	cmp	r3, #0
    9c82:	d0d4      	beq.n	9c2e <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9c84:	2300      	movs	r3, #0
    9c86:	f8ad 3014 	strh.w	r3, [sp, #20]
    9c8a:	e02a      	b.n	9ce2 <Adc_Ipw_DeInit+0xe4>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c90:	4a1c      	ldr	r2, [pc, #112]	; (9d04 <Adc_Ipw_DeInit+0x106>)
    9c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c96:	6859      	ldr	r1, [r3, #4]
    9c98:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9c9c:	4613      	mov	r3, r2
    9c9e:	00db      	lsls	r3, r3, #3
    9ca0:	1a9b      	subs	r3, r3, r2
    9ca2:	00db      	lsls	r3, r3, #3
    9ca4:	440b      	add	r3, r1
    9ca6:	881b      	ldrh	r3, [r3, #0]
    9ca8:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9cac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9cb0:	4915      	ldr	r1, [pc, #84]	; (9d08 <Adc_Ipw_DeInit+0x10a>)
    9cb2:	4613      	mov	r3, r2
    9cb4:	005b      	lsls	r3, r3, #1
    9cb6:	4413      	add	r3, r2
    9cb8:	00db      	lsls	r3, r3, #3
    9cba:	440b      	add	r3, r1
    9cbc:	3310      	adds	r3, #16
    9cbe:	2200      	movs	r2, #0
    9cc0:	601a      	str	r2, [r3, #0]
#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
        Adc_axGroupStatus[GroupId].Notification = ADC_NOTIFICATION_DISABLED;
    9cc2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9cc6:	4910      	ldr	r1, [pc, #64]	; (9d08 <Adc_Ipw_DeInit+0x10a>)
    9cc8:	4613      	mov	r3, r2
    9cca:	005b      	lsls	r3, r3, #1
    9ccc:	4413      	add	r3, r2
    9cce:	00db      	lsls	r3, r3, #3
    9cd0:	440b      	add	r3, r1
    9cd2:	3308      	adds	r3, #8
    9cd4:	2200      	movs	r2, #0
    9cd6:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9cd8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9cdc:	3301      	adds	r3, #1
    9cde:	f8ad 3014 	strh.w	r3, [sp, #20]
    9ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ce6:	4a07      	ldr	r2, [pc, #28]	; (9d04 <Adc_Ipw_DeInit+0x106>)
    9ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cec:	891b      	ldrh	r3, [r3, #8]
    9cee:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9cf2:	429a      	cmp	r2, r3
    9cf4:	d3ca      	bcc.n	9c8c <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    9cf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9cfa:	4618      	mov	r0, r3
    9cfc:	b007      	add	sp, #28
    9cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    9d02:	bf00      	nop
    9d04:	1fff8d04 	.word	0x1fff8d04
    9d08:	1fff8d08 	.word	0x1fff8d08

00009d0c <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9d0c:	b500      	push	{lr}
    9d0e:	b089      	sub	sp, #36	; 0x24
    9d10:	4603      	mov	r3, r0
    9d12:	460a      	mov	r2, r1
    9d14:	f88d 300f 	strb.w	r3, [sp, #15]
    9d18:	4613      	mov	r3, r2
    9d1a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    9d1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9d22:	4956      	ldr	r1, [pc, #344]	; (9e7c <Adc_Ipw_StartNormalConversion+0x170>)
    9d24:	4613      	mov	r3, r2
    9d26:	005b      	lsls	r3, r3, #1
    9d28:	4413      	add	r3, r2
    9d2a:	005b      	lsls	r3, r3, #1
    9d2c:	440b      	add	r3, r1
    9d2e:	3302      	adds	r3, #2
    9d30:	881b      	ldrh	r3, [r3, #0]
    9d32:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    9d36:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d3a:	4a51      	ldr	r2, [pc, #324]	; (9e80 <Adc_Ipw_StartNormalConversion+0x174>)
    9d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d40:	68da      	ldr	r2, [r3, #12]
    9d42:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9d46:	005b      	lsls	r3, r3, #1
    9d48:	4413      	add	r3, r2
    9d4a:	881b      	ldrh	r3, [r3, #0]
    9d4c:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9d50:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d54:	4a4a      	ldr	r2, [pc, #296]	; (9e80 <Adc_Ipw_StartNormalConversion+0x174>)
    9d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d5a:	6859      	ldr	r1, [r3, #4]
    9d5c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9d60:	4613      	mov	r3, r2
    9d62:	00db      	lsls	r3, r3, #3
    9d64:	1a9b      	subs	r3, r3, r2
    9d66:	00db      	lsls	r3, r3, #3
    9d68:	440b      	add	r3, r1
    9d6a:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9d6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d70:	4a43      	ldr	r2, [pc, #268]	; (9e80 <Adc_Ipw_StartNormalConversion+0x174>)
    9d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d76:	681a      	ldr	r2, [r3, #0]
    9d78:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d7c:	4413      	add	r3, r2
    9d7e:	7c1b      	ldrb	r3, [r3, #16]
    9d80:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9d84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9d88:	493c      	ldr	r1, [pc, #240]	; (9e7c <Adc_Ipw_StartNormalConversion+0x170>)
    9d8a:	4613      	mov	r3, r2
    9d8c:	005b      	lsls	r3, r3, #1
    9d8e:	4413      	add	r3, r2
    9d90:	005b      	lsls	r3, r3, #1
    9d92:	440b      	add	r3, r1
    9d94:	881b      	ldrh	r3, [r3, #0]
    9d96:	b29b      	uxth	r3, r3
    9d98:	2b00      	cmp	r3, #0
    9d9a:	d06b      	beq.n	9e74 <Adc_Ipw_StartNormalConversion+0x168>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9d9c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9da0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9da4:	9905      	ldr	r1, [sp, #20]
    9da6:	4618      	mov	r0, r3
    9da8:	f7ff fdae 	bl	9908 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9dac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9db0:	4934      	ldr	r1, [pc, #208]	; (9e84 <Adc_Ipw_StartNormalConversion+0x178>)
    9db2:	4613      	mov	r3, r2
    9db4:	005b      	lsls	r3, r3, #1
    9db6:	4413      	add	r3, r2
    9db8:	00db      	lsls	r3, r3, #3
    9dba:	440b      	add	r3, r1
    9dbc:	3314      	adds	r3, #20
    9dbe:	2200      	movs	r2, #0
    9dc0:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    9dc2:	9b05      	ldr	r3, [sp, #20]
    9dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9dc8:	2b0f      	cmp	r3, #15
    9dca:	d806      	bhi.n	9dda <Adc_Ipw_StartNormalConversion+0xce>
    9dcc:	9b05      	ldr	r3, [sp, #20]
    9dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    9dd2:	f003 030f 	and.w	r3, r3, #15
    9dd6:	b2db      	uxtb	r3, r3
    9dd8:	e000      	b.n	9ddc <Adc_Ipw_StartNormalConversion+0xd0>
    9dda:	2310      	movs	r3, #16
    9ddc:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    9de0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9de4:	4925      	ldr	r1, [pc, #148]	; (9e7c <Adc_Ipw_StartNormalConversion+0x170>)
    9de6:	4613      	mov	r3, r2
    9de8:	005b      	lsls	r3, r3, #1
    9dea:	4413      	add	r3, r2
    9dec:	005b      	lsls	r3, r3, #1
    9dee:	440b      	add	r3, r1
    9df0:	3304      	adds	r3, #4
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d10b      	bne.n	9e10 <Adc_Ipw_StartNormalConversion+0x104>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9df8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9dfc:	491f      	ldr	r1, [pc, #124]	; (9e7c <Adc_Ipw_StartNormalConversion+0x170>)
    9dfe:	4613      	mov	r3, r2
    9e00:	005b      	lsls	r3, r3, #1
    9e02:	4413      	add	r3, r2
    9e04:	005b      	lsls	r3, r3, #1
    9e06:	440b      	add	r3, r1
    9e08:	3304      	adds	r3, #4
    9e0a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9e0e:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9e10:	2300      	movs	r3, #0
    9e12:	f88d 301f 	strb.w	r3, [sp, #31]
    9e16:	e00c      	b.n	9e32 <Adc_Ipw_StartNormalConversion+0x126>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9e18:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9e1c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9e20:	4611      	mov	r1, r2
    9e22:	4618      	mov	r0, r3
    9e24:	f7fe fec4 	bl	8bb0 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9e28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e2c:	3301      	adds	r3, #1
    9e2e:	f88d 301f 	strb.w	r3, [sp, #31]
    9e32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9e36:	4911      	ldr	r1, [pc, #68]	; (9e7c <Adc_Ipw_StartNormalConversion+0x170>)
    9e38:	4613      	mov	r3, r2
    9e3a:	005b      	lsls	r3, r3, #1
    9e3c:	4413      	add	r3, r2
    9e3e:	005b      	lsls	r3, r3, #1
    9e40:	440b      	add	r3, r1
    9e42:	3304      	adds	r3, #4
    9e44:	781b      	ldrb	r3, [r3, #0]
    9e46:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9e4a:	429a      	cmp	r2, r3
    9e4c:	d3e4      	bcc.n	9e18 <Adc_Ipw_StartNormalConversion+0x10c>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    9e4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9e52:	2101      	movs	r1, #1
    9e54:	4618      	mov	r0, r3
    9e56:	f7fe fd1d 	bl	8894 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9e5a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9e5e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9e62:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9e66:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e6a:	9300      	str	r3, [sp, #0]
    9e6c:	4613      	mov	r3, r2
    9e6e:	220f      	movs	r2, #15
    9e70:	f7ff fd8a 	bl	9988 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9e74:	bf00      	nop
    9e76:	b009      	add	sp, #36	; 0x24
    9e78:	f85d fb04 	ldr.w	pc, [sp], #4
    9e7c:	1fff8d20 	.word	0x1fff8d20
    9e80:	1fff8d04 	.word	0x1fff8d04
    9e84:	1fff8d08 	.word	0x1fff8d08

00009e88 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9e88:	b500      	push	{lr}
    9e8a:	b085      	sub	sp, #20
    9e8c:	4603      	mov	r3, r0
    9e8e:	f88d 3007 	strb.w	r3, [sp, #7]
    9e92:	460b      	mov	r3, r1
    9e94:	f8ad 3004 	strh.w	r3, [sp, #4]
    9e98:	4613      	mov	r3, r2
    9e9a:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9e9e:	2300      	movs	r3, #0
    9ea0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9ea4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ea8:	4a26      	ldr	r2, [pc, #152]	; (9f44 <Adc_Ipw_StopCurrentConversion+0xbc>)
    9eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eae:	681a      	ldr	r2, [r3, #0]
    9eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eb4:	4413      	add	r3, r2
    9eb6:	7c1b      	ldrb	r3, [r3, #16]
    9eb8:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9ebc:	2300      	movs	r3, #0
    9ebe:	f88d 300f 	strb.w	r3, [sp, #15]
    9ec2:	e014      	b.n	9eee <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9ec4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ec8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9ecc:	2200      	movs	r2, #0
    9ece:	4618      	mov	r0, r3
    9ed0:	f7fe fdaa 	bl	8a28 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9ed4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ed8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9edc:	4611      	mov	r1, r2
    9ede:	4618      	mov	r0, r3
    9ee0:	f7fe fe66 	bl	8bb0 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9ee4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ee8:	3301      	adds	r3, #1
    9eea:	f88d 300f 	strb.w	r3, [sp, #15]
    9eee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9ef2:	4915      	ldr	r1, [pc, #84]	; (9f48 <Adc_Ipw_StopCurrentConversion+0xc0>)
    9ef4:	4613      	mov	r3, r2
    9ef6:	005b      	lsls	r3, r3, #1
    9ef8:	4413      	add	r3, r2
    9efa:	005b      	lsls	r3, r3, #1
    9efc:	440b      	add	r3, r1
    9efe:	3304      	adds	r3, #4
    9f00:	781b      	ldrb	r3, [r3, #0]
    9f02:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9f06:	429a      	cmp	r2, r3
    9f08:	d3dc      	bcc.n	9ec4 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9f0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f0e:	490f      	ldr	r1, [pc, #60]	; (9f4c <Adc_Ipw_StopCurrentConversion+0xc4>)
    9f10:	4613      	mov	r3, r2
    9f12:	005b      	lsls	r3, r3, #1
    9f14:	4413      	add	r3, r2
    9f16:	00db      	lsls	r3, r3, #3
    9f18:	440b      	add	r3, r1
    9f1a:	3314      	adds	r3, #20
    9f1c:	2200      	movs	r2, #0
    9f1e:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    9f20:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9f24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9f28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f2c:	4618      	mov	r0, r3
    9f2e:	f7ff fc67 	bl	9800 <Adc_Ipw_StopConversionCheckTimeout>
    9f32:	4603      	mov	r3, r0
    9f34:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9f38:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9f3c:	4618      	mov	r0, r3
    9f3e:	b005      	add	sp, #20
    9f40:	f85d fb04 	ldr.w	pc, [sp], #4
    9f44:	1fff8d04 	.word	0x1fff8d04
    9f48:	1fff8d20 	.word	0x1fff8d20
    9f4c:	1fff8d08 	.word	0x1fff8d08

00009f50 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9f50:	b500      	push	{lr}
    9f52:	b085      	sub	sp, #20
    9f54:	4603      	mov	r3, r0
    9f56:	f88d 3007 	strb.w	r3, [sp, #7]
    9f5a:	460b      	mov	r3, r1
    9f5c:	f88d 3006 	strb.w	r3, [sp, #6]
    9f60:	4613      	mov	r3, r2
    9f62:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9f66:	2301      	movs	r3, #1
    9f68:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9f6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f70:	f88d 300f 	strb.w	r3, [sp, #15]
    9f74:	e019      	b.n	9faa <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9f76:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9f7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9f7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f82:	1ad3      	subs	r3, r2, r3
    9f84:	b2db      	uxtb	r3, r3
    9f86:	4619      	mov	r1, r3
    9f88:	f7fe fdf8 	bl	8b7c <Adc_Ip_GetConvCompleteFlag>
    9f8c:	4603      	mov	r3, r0
    9f8e:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9f92:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f96:	f083 0301 	eor.w	r3, r3, #1
    9f9a:	b2db      	uxtb	r3, r3
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	d10b      	bne.n	9fb8 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9fa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9fa4:	3301      	adds	r3, #1
    9fa6:	f88d 300f 	strb.w	r3, [sp, #15]
    9faa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9fae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9fb2:	429a      	cmp	r2, r3
    9fb4:	d3df      	bcc.n	9f76 <Adc_Ipw_CheckValidConversion+0x26>
    9fb6:	e000      	b.n	9fba <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9fb8:	bf00      	nop
        }
    }

    return ValidConversion;
    9fba:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9fbe:	4618      	mov	r0, r3
    9fc0:	b005      	add	sp, #20
    9fc2:	f85d fb04 	ldr.w	pc, [sp], #4

00009fc6 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9fc6:	b500      	push	{lr}
    9fc8:	b089      	sub	sp, #36	; 0x24
    9fca:	9102      	str	r1, [sp, #8]
    9fcc:	9201      	str	r2, [sp, #4]
    9fce:	461a      	mov	r2, r3
    9fd0:	4603      	mov	r3, r0
    9fd2:	f8ad 300e 	strh.w	r3, [sp, #14]
    9fd6:	4613      	mov	r3, r2
    9fd8:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9fdc:	2300      	movs	r3, #0
    9fde:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9fe2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9fe6:	4a35      	ldr	r2, [pc, #212]	; (a0bc <Adc_Ipw_ReadGroup+0xf6>)
    9fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fec:	68da      	ldr	r2, [r3, #12]
    9fee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ff2:	005b      	lsls	r3, r3, #1
    9ff4:	4413      	add	r3, r2
    9ff6:	881b      	ldrh	r3, [r3, #0]
    9ff8:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9ffc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a000:	4a2e      	ldr	r2, [pc, #184]	; (a0bc <Adc_Ipw_ReadGroup+0xf6>)
    a002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a006:	6859      	ldr	r1, [r3, #4]
    a008:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a00c:	4613      	mov	r3, r2
    a00e:	00db      	lsls	r3, r3, #3
    a010:	1a9b      	subs	r3, r3, r2
    a012:	00db      	lsls	r3, r3, #3
    a014:	440b      	add	r3, r1
    a016:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    a018:	9b06      	ldr	r3, [sp, #24]
    a01a:	789b      	ldrb	r3, [r3, #2]
    a01c:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    a020:	9b06      	ldr	r3, [sp, #24]
    a022:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    a026:	2b01      	cmp	r3, #1
    a028:	d128      	bne.n	a07c <Adc_Ipw_ReadGroup+0xb6>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    a02a:	9b06      	ldr	r3, [sp, #24]
    a02c:	68db      	ldr	r3, [r3, #12]
    a02e:	2b00      	cmp	r3, #0
    a030:	d115      	bne.n	a05e <Adc_Ipw_ReadGroup+0x98>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    a032:	9b06      	ldr	r3, [sp, #24]
    a034:	695b      	ldr	r3, [r3, #20]
    a036:	2b00      	cmp	r3, #0
    a038:	d111      	bne.n	a05e <Adc_Ipw_ReadGroup+0x98>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    a03a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a03e:	4920      	ldr	r1, [pc, #128]	; (a0c0 <Adc_Ipw_ReadGroup+0xfa>)
    a040:	4613      	mov	r3, r2
    a042:	005b      	lsls	r3, r3, #1
    a044:	4413      	add	r3, r2
    a046:	005b      	lsls	r3, r3, #1
    a048:	440b      	add	r3, r1
    a04a:	3302      	adds	r3, #2
    a04c:	881b      	ldrh	r3, [r3, #0]
    a04e:	b29b      	uxth	r3, r3
    a050:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a054:	429a      	cmp	r2, r3
    a056:	d002      	beq.n	a05e <Adc_Ipw_ReadGroup+0x98>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    a058:	2301      	movs	r3, #1
    a05a:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    a05e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a062:	2b00      	cmp	r3, #0
    a064:	d124      	bne.n	a0b0 <Adc_Ipw_ReadGroup+0xea>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    a066:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a06a:	9a01      	ldr	r2, [sp, #4]
    a06c:	9902      	ldr	r1, [sp, #8]
    a06e:	9806      	ldr	r0, [sp, #24]
    a070:	f7ff f8e8 	bl	9244 <Adc_Ipw_ReadGroupNoInt>
    a074:	4603      	mov	r3, r0
    a076:	f88d 301f 	strb.w	r3, [sp, #31]
    a07a:	e019      	b.n	a0b0 <Adc_Ipw_ReadGroup+0xea>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a07c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a080:	4910      	ldr	r1, [pc, #64]	; (a0c4 <Adc_Ipw_ReadGroup+0xfe>)
    a082:	4613      	mov	r3, r2
    a084:	005b      	lsls	r3, r3, #1
    a086:	4413      	add	r3, r2
    a088:	00db      	lsls	r3, r3, #3
    a08a:	440b      	add	r3, r1
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	2b01      	cmp	r3, #1
    a090:	d102      	bne.n	a098 <Adc_Ipw_ReadGroup+0xd2>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    a092:	2301      	movs	r3, #1
    a094:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    a098:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a09c:	2b00      	cmp	r3, #0
    a09e:	d107      	bne.n	a0b0 <Adc_Ipw_ReadGroup+0xea>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    a0a0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    a0a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a0a8:	9902      	ldr	r1, [sp, #8]
    a0aa:	4618      	mov	r0, r3
    a0ac:	f7ff f912 	bl	92d4 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    a0b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a0b4:	4618      	mov	r0, r3
    a0b6:	b009      	add	sp, #36	; 0x24
    a0b8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0bc:	1fff8d04 	.word	0x1fff8d04
    a0c0:	1fff8d20 	.word	0x1fff8d20
    a0c4:	1fff8d08 	.word	0x1fff8d08

0000a0c8 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    a0c8:	b500      	push	{lr}
    a0ca:	b085      	sub	sp, #20
    a0cc:	4603      	mov	r3, r0
    a0ce:	9100      	str	r1, [sp, #0]
    a0d0:	f88d 3007 	strb.w	r3, [sp, #7]
    a0d4:	4613      	mov	r3, r2
    a0d6:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a0da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0de:	4a0e      	ldr	r2, [pc, #56]	; (a118 <Adc_Ipw_Calibrate+0x50>)
    a0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0e4:	681a      	ldr	r2, [r3, #0]
    a0e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a0ea:	4413      	add	r3, r2
    a0ec:	7c1b      	ldrb	r3, [r3, #16]
    a0ee:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    a0f2:	9b00      	ldr	r3, [sp, #0]
    a0f4:	2200      	movs	r2, #0
    a0f6:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    a0f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0fc:	4618      	mov	r0, r3
    a0fe:	f7fe fd6f 	bl	8be0 <Adc_Ip_DoCalibration>
    a102:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    a104:	9b02      	ldr	r3, [sp, #8]
    a106:	2b00      	cmp	r3, #0
    a108:	d002      	beq.n	a110 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    a10a:	9b00      	ldr	r3, [sp, #0]
    a10c:	2201      	movs	r2, #1
    a10e:	701a      	strb	r2, [r3, #0]
    }
}
    a110:	bf00      	nop
    a112:	b005      	add	sp, #20
    a114:	f85d fb04 	ldr.w	pc, [sp], #4
    a118:	1fff8d04 	.word	0x1fff8d04

0000a11c <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    a11c:	2300      	movs	r3, #0
}
    a11e:	4618      	mov	r0, r3
    a120:	4770      	bx	lr
    a122:	bf00      	nop

0000a124 <Adc_Ipw_CallNotification>:
* @return         void
*
*/
static inline void Adc_Ipw_CallNotification(Adc_GroupType Group,
                                            uint8 CoreId)
{
    a124:	b500      	push	{lr}
    a126:	b085      	sub	sp, #20
    a128:	4603      	mov	r3, r0
    a12a:	460a      	mov	r2, r1
    a12c:	f8ad 3006 	strh.w	r3, [sp, #6]
    a130:	4613      	mov	r3, r2
    a132:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a136:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a13a:	4a1d      	ldr	r2, [pc, #116]	; (a1b0 <Adc_Ipw_CallNotification+0x8c>)
    a13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a140:	68da      	ldr	r2, [r3, #12]
    a142:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a146:	005b      	lsls	r3, r3, #1
    a148:	4413      	add	r3, r2
    a14a:	881b      	ldrh	r3, [r3, #0]
    a14c:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* SWS_Adc_00080, SWS_Adc_00083 */
    if ((ADC_NOTIFICATION_ENABLED == Adc_axGroupStatus[Group].Notification) && \
    a150:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a154:	4917      	ldr	r1, [pc, #92]	; (a1b4 <Adc_Ipw_CallNotification+0x90>)
    a156:	4613      	mov	r3, r2
    a158:	005b      	lsls	r3, r3, #1
    a15a:	4413      	add	r3, r2
    a15c:	00db      	lsls	r3, r3, #3
    a15e:	440b      	add	r3, r1
    a160:	3308      	adds	r3, #8
    a162:	681b      	ldr	r3, [r3, #0]
    a164:	2b01      	cmp	r3, #1
    a166:	d11e      	bne.n	a1a6 <Adc_Ipw_CallNotification+0x82>
        (NULL_PTR != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Notification)
    a168:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a16c:	4a10      	ldr	r2, [pc, #64]	; (a1b0 <Adc_Ipw_CallNotification+0x8c>)
    a16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a172:	6859      	ldr	r1, [r3, #4]
    a174:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a178:	4613      	mov	r3, r2
    a17a:	00db      	lsls	r3, r3, #3
    a17c:	1a9b      	subs	r3, r3, r2
    a17e:	00db      	lsls	r3, r3, #3
    a180:	440b      	add	r3, r1
    a182:	699b      	ldr	r3, [r3, #24]
    if ((ADC_NOTIFICATION_ENABLED == Adc_axGroupStatus[Group].Notification) && \
    a184:	2b00      	cmp	r3, #0
    a186:	d00e      	beq.n	a1a6 <Adc_Ipw_CallNotification+0x82>
       )
    {
        /* Execute notification function */
        Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Notification();
    a188:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a18c:	4a08      	ldr	r2, [pc, #32]	; (a1b0 <Adc_Ipw_CallNotification+0x8c>)
    a18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a192:	6859      	ldr	r1, [r3, #4]
    a194:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a198:	4613      	mov	r3, r2
    a19a:	00db      	lsls	r3, r3, #3
    a19c:	1a9b      	subs	r3, r3, r2
    a19e:	00db      	lsls	r3, r3, #3
    a1a0:	440b      	add	r3, r1
    a1a2:	699b      	ldr	r3, [r3, #24]
    a1a4:	4798      	blx	r3
    }
}
    a1a6:	bf00      	nop
    a1a8:	b005      	add	sp, #20
    a1aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a1ae:	bf00      	nop
    a1b0:	1fff8d04 	.word	0x1fff8d04
    a1b4:	1fff8d08 	.word	0x1fff8d08

0000a1b8 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    a1b8:	b500      	push	{lr}
    a1ba:	b083      	sub	sp, #12
    a1bc:	4603      	mov	r3, r0
    a1be:	460a      	mov	r2, r1
    a1c0:	f88d 3007 	strb.w	r3, [sp, #7]
    a1c4:	4613      	mov	r3, r2
    a1c6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    a1ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1ce:	2100      	movs	r1, #0
    a1d0:	4618      	mov	r0, r3
    a1d2:	f7fe ff5f 	bl	9094 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a1d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    a1da:	490b      	ldr	r1, [pc, #44]	; (a208 <Adc_Ipw_UpdateQueue+0x50>)
    a1dc:	4613      	mov	r3, r2
    a1de:	005b      	lsls	r3, r3, #1
    a1e0:	4413      	add	r3, r2
    a1e2:	005b      	lsls	r3, r3, #1
    a1e4:	440b      	add	r3, r1
    a1e6:	881b      	ldrh	r3, [r3, #0]
    a1e8:	b29b      	uxth	r3, r3
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d007      	beq.n	a1fe <Adc_Ipw_UpdateQueue+0x46>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    a1ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a1f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1f6:	4611      	mov	r1, r2
    a1f8:	4618      	mov	r0, r3
    a1fa:	f7ff fd87 	bl	9d0c <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    a1fe:	bf00      	nop
    a200:	b003      	add	sp, #12
    a202:	f85d fb04 	ldr.w	pc, [sp], #4
    a206:	bf00      	nop
    a208:	1fff8d20 	.word	0x1fff8d20

0000a20c <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    a20c:	b510      	push	{r4, lr}
    a20e:	b08a      	sub	sp, #40	; 0x28
    a210:	4604      	mov	r4, r0
    a212:	4608      	mov	r0, r1
    a214:	4611      	mov	r1, r2
    a216:	461a      	mov	r2, r3
    a218:	4623      	mov	r3, r4
    a21a:	f88d 300f 	strb.w	r3, [sp, #15]
    a21e:	4603      	mov	r3, r0
    a220:	f8ad 300c 	strh.w	r3, [sp, #12]
    a224:	460b      	mov	r3, r1
    a226:	f8ad 300a 	strh.w	r3, [sp, #10]
    a22a:	4613      	mov	r3, r2
    a22c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a230:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a234:	4a69      	ldr	r2, [pc, #420]	; (a3dc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a23a:	68da      	ldr	r2, [r3, #12]
    a23c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a240:	005b      	lsls	r3, r3, #1
    a242:	4413      	add	r3, r2
    a244:	881b      	ldrh	r3, [r3, #0]
    a246:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a24a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a24e:	4964      	ldr	r1, [pc, #400]	; (a3e0 <Adc_Ipw_CheckConversionChannels+0x1d4>)
    a250:	4613      	mov	r3, r2
    a252:	005b      	lsls	r3, r3, #1
    a254:	4413      	add	r3, r2
    a256:	00db      	lsls	r3, r3, #3
    a258:	440b      	add	r3, r1
    a25a:	3314      	adds	r3, #20
    a25c:	781b      	ldrb	r3, [r3, #0]
    a25e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    a262:	2300      	movs	r3, #0
    a264:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a266:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a26a:	4a5c      	ldr	r2, [pc, #368]	; (a3dc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a270:	681a      	ldr	r2, [r3, #0]
    a272:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a276:	4413      	add	r3, r2
    a278:	7c1b      	ldrb	r3, [r3, #16]
    a27a:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a27e:	2300      	movs	r3, #0
    a280:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    a284:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a288:	4a54      	ldr	r2, [pc, #336]	; (a3dc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a28e:	681b      	ldr	r3, [r3, #0]
    a290:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a298:	695b      	ldr	r3, [r3, #20]
    a29a:	4618      	mov	r0, r3
    a29c:	f7ff fb6a 	bl	9974 <Adc_Ipw_CalculateNumsBitShift>
    a2a0:	4603      	mov	r3, r0
    a2a2:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    a2a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a2aa:	4a4c      	ldr	r2, [pc, #304]	; (a3dc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2b0:	6859      	ldr	r1, [r3, #4]
    a2b2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    a2b6:	4613      	mov	r3, r2
    a2b8:	00db      	lsls	r3, r3, #3
    a2ba:	1a9b      	subs	r3, r3, r2
    a2bc:	00db      	lsls	r3, r3, #3
    a2be:	440b      	add	r3, r1
    a2c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a2c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a2c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a2cc:	4a43      	ldr	r2, [pc, #268]	; (a3dc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d2:	6859      	ldr	r1, [r3, #4]
    a2d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    a2d8:	4613      	mov	r3, r2
    a2da:	00db      	lsls	r3, r3, #3
    a2dc:	1a9b      	subs	r3, r3, r2
    a2de:	00db      	lsls	r3, r3, #3
    a2e0:	440b      	add	r3, r1
    a2e2:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    a2e4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a2e8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a2ec:	429a      	cmp	r2, r3
    a2ee:	d870      	bhi.n	a3d2 <Adc_Ipw_CheckConversionChannels+0x1c6>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    a2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a2f4:	f003 030f 	and.w	r3, r3, #15
    a2f8:	b2db      	uxtb	r3, r3
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d104      	bne.n	a308 <Adc_Ipw_CheckConversionChannels+0xfc>
    a2fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a302:	3b10      	subs	r3, #16
    a304:	b2db      	uxtb	r3, r3
    a306:	e004      	b.n	a312 <Adc_Ipw_CheckConversionChannels+0x106>
    a308:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a30c:	f023 030f 	bic.w	r3, r3, #15
    a310:	b2db      	uxtb	r3, r3
    a312:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    a316:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a31a:	4931      	ldr	r1, [pc, #196]	; (a3e0 <Adc_Ipw_CheckConversionChannels+0x1d4>)
    a31c:	4613      	mov	r3, r2
    a31e:	005b      	lsls	r3, r3, #1
    a320:	4413      	add	r3, r2
    a322:	00db      	lsls	r3, r3, #3
    a324:	440b      	add	r3, r1
    a326:	3310      	adds	r3, #16
    a328:	6819      	ldr	r1, [r3, #0]
    a32a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a32e:	482c      	ldr	r0, [pc, #176]	; (a3e0 <Adc_Ipw_CheckConversionChannels+0x1d4>)
    a330:	4613      	mov	r3, r2
    a332:	005b      	lsls	r3, r3, #1
    a334:	4413      	add	r3, r2
    a336:	00db      	lsls	r3, r3, #3
    a338:	4403      	add	r3, r0
    a33a:	330c      	adds	r3, #12
    a33c:	881b      	ldrh	r3, [r3, #0]
    a33e:	b29b      	uxth	r3, r3
    a340:	005b      	lsls	r3, r3, #1
    a342:	440b      	add	r3, r1
    a344:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    a346:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a34a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    a34e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a352:	4618      	mov	r0, r3
    a354:	f7ff fdfc 	bl	9f50 <Adc_Ipw_CheckValidConversion>
    a358:	4603      	mov	r3, r0
    a35a:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    a35e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    a362:	2b00      	cmp	r3, #0
    a364:	d032      	beq.n	a3cc <Adc_Ipw_CheckConversionChannels+0x1c0>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    a366:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a36a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a36e:	e026      	b.n	a3be <Adc_Ipw_CheckConversionChannels+0x1b2>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    a370:	f89d 001b 	ldrb.w	r0, [sp, #27]
    a374:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a378:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a37c:	1ad3      	subs	r3, r2, r3
    a37e:	b2db      	uxtb	r3, r3
    a380:	4619      	mov	r1, r3
    a382:	f7fe fc15 	bl	8bb0 <Adc_Ip_GetConvData>
    a386:	4603      	mov	r3, r0
    a388:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    a38c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a390:	f89d 301a 	ldrb.w	r3, [sp, #26]
    a394:	fa02 f303 	lsl.w	r3, r2, r3
    a398:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    a39c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a3a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    a3a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a3a8:	9300      	str	r3, [sp, #0]
    a3aa:	460b      	mov	r3, r1
    a3ac:	9907      	ldr	r1, [sp, #28]
    a3ae:	9805      	ldr	r0, [sp, #20]
    a3b0:	f000 fa0e 	bl	a7d0 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    a3b4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a3b8:	3301      	adds	r3, #1
    a3ba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a3be:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a3c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a3c6:	429a      	cmp	r2, r3
    a3c8:	d3d2      	bcc.n	a370 <Adc_Ipw_CheckConversionChannels+0x164>
    a3ca:	e002      	b.n	a3d2 <Adc_Ipw_CheckConversionChannels+0x1c6>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    a3cc:	2301      	movs	r3, #1
    a3ce:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    a3d2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    a3d6:	4618      	mov	r0, r3
    a3d8:	b00a      	add	sp, #40	; 0x28
    a3da:	bd10      	pop	{r4, pc}
    a3dc:	1fff8d04 	.word	0x1fff8d04
    a3e0:	1fff8d08 	.word	0x1fff8d08

0000a3e4 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a3e4:	b500      	push	{lr}
    a3e6:	b087      	sub	sp, #28
    a3e8:	4603      	mov	r3, r0
    a3ea:	f88d 300f 	strb.w	r3, [sp, #15]
    a3ee:	460b      	mov	r3, r1
    a3f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    a3f4:	4613      	mov	r3, r2
    a3f6:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a3fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3fe:	4a33      	ldr	r2, [pc, #204]	; (a4cc <Adc_Ipw_RestartConversion+0xe8>)
    a400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a404:	68da      	ldr	r2, [r3, #12]
    a406:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a40a:	005b      	lsls	r3, r3, #1
    a40c:	4413      	add	r3, r2
    a40e:	881b      	ldrh	r3, [r3, #0]
    a410:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a414:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a418:	4a2c      	ldr	r2, [pc, #176]	; (a4cc <Adc_Ipw_RestartConversion+0xe8>)
    a41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a41e:	681a      	ldr	r2, [r3, #0]
    a420:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a424:	4413      	add	r3, r2
    a426:	7c1b      	ldrb	r3, [r3, #16]
    a428:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    a42c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a430:	4a26      	ldr	r2, [pc, #152]	; (a4cc <Adc_Ipw_RestartConversion+0xe8>)
    a432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a436:	6859      	ldr	r1, [r3, #4]
    a438:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a43c:	4613      	mov	r3, r2
    a43e:	00db      	lsls	r3, r3, #3
    a440:	1a9b      	subs	r3, r3, r2
    a442:	00db      	lsls	r3, r3, #3
    a444:	440b      	add	r3, r1
    a446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a44a:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    a44e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a452:	2b0f      	cmp	r3, #15
    a454:	d805      	bhi.n	a462 <Adc_Ipw_RestartConversion+0x7e>
    a456:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a45a:	f003 030f 	and.w	r3, r3, #15
    a45e:	b2db      	uxtb	r3, r3
    a460:	e000      	b.n	a464 <Adc_Ipw_RestartConversion+0x80>
    a462:	2310      	movs	r3, #16
    a464:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    a468:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a46c:	2b10      	cmp	r3, #16
    a46e:	d811      	bhi.n	a494 <Adc_Ipw_RestartConversion+0xb0>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    a470:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a474:	4916      	ldr	r1, [pc, #88]	; (a4d0 <Adc_Ipw_RestartConversion+0xec>)
    a476:	4613      	mov	r3, r2
    a478:	005b      	lsls	r3, r3, #1
    a47a:	4413      	add	r3, r2
    a47c:	00db      	lsls	r3, r3, #3
    a47e:	440b      	add	r3, r1
    a480:	3314      	adds	r3, #20
    a482:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a486:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a488:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a48c:	4618      	mov	r0, r3
    a48e:	f000 fc6b 	bl	ad68 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    a492:	e017      	b.n	a4c4 <Adc_Ipw_RestartConversion+0xe0>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a494:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a498:	490d      	ldr	r1, [pc, #52]	; (a4d0 <Adc_Ipw_RestartConversion+0xec>)
    a49a:	4613      	mov	r3, r2
    a49c:	005b      	lsls	r3, r3, #1
    a49e:	4413      	add	r3, r2
    a4a0:	00db      	lsls	r3, r3, #3
    a4a2:	440b      	add	r3, r1
    a4a4:	3314      	adds	r3, #20
    a4a6:	2200      	movs	r2, #0
    a4a8:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a4aa:	f89d 2013 	ldrb.w	r2, [sp, #19]
    a4ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a4b2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a4b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a4ba:	9300      	str	r3, [sp, #0]
    a4bc:	4613      	mov	r3, r2
    a4be:	220f      	movs	r2, #15
    a4c0:	f7ff fa62 	bl	9988 <Adc_Ipw_ConfigureConversion>
}
    a4c4:	bf00      	nop
    a4c6:	b007      	add	sp, #28
    a4c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a4cc:	1fff8d04 	.word	0x1fff8d04
    a4d0:	1fff8d08 	.word	0x1fff8d08

0000a4d4 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    a4d4:	b084      	sub	sp, #16
    a4d6:	4603      	mov	r3, r0
    a4d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    a4dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a4e0:	4907      	ldr	r1, [pc, #28]	; (a500 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    a4e2:	4613      	mov	r3, r2
    a4e4:	005b      	lsls	r3, r3, #1
    a4e6:	4413      	add	r3, r2
    a4e8:	00db      	lsls	r3, r3, #3
    a4ea:	440b      	add	r3, r1
    a4ec:	330c      	adds	r3, #12
    a4ee:	881b      	ldrh	r3, [r3, #0]
    a4f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    a4f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a4f8:	4618      	mov	r0, r3
    a4fa:	b004      	add	sp, #16
    a4fc:	4770      	bx	lr
    a4fe:	bf00      	nop
    a500:	1fff8d08 	.word	0x1fff8d08

0000a504 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    a504:	b510      	push	{r4, lr}
    a506:	b084      	sub	sp, #16
    a508:	4604      	mov	r4, r0
    a50a:	4608      	mov	r0, r1
    a50c:	4611      	mov	r1, r2
    a50e:	461a      	mov	r2, r3
    a510:	4623      	mov	r3, r4
    a512:	f88d 3007 	strb.w	r3, [sp, #7]
    a516:	4603      	mov	r3, r0
    a518:	f8ad 3004 	strh.w	r3, [sp, #4]
    a51c:	460b      	mov	r3, r1
    a51e:	f8ad 3002 	strh.w	r3, [sp, #2]
    a522:	4613      	mov	r3, r2
    a524:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a528:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a52c:	4a55      	ldr	r2, [pc, #340]	; (a684 <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a532:	68da      	ldr	r2, [r3, #12]
    a534:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a538:	005b      	lsls	r3, r3, #1
    a53a:	4413      	add	r3, r2
    a53c:	881b      	ldrh	r3, [r3, #0]
    a53e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    a542:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a546:	4950      	ldr	r1, [pc, #320]	; (a688 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a548:	4613      	mov	r3, r2
    a54a:	005b      	lsls	r3, r3, #1
    a54c:	4413      	add	r3, r2
    a54e:	00db      	lsls	r3, r3, #3
    a550:	440b      	add	r3, r1
    a552:	3304      	adds	r3, #4
    a554:	2201      	movs	r2, #1
    a556:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a558:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a55c:	494a      	ldr	r1, [pc, #296]	; (a688 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a55e:	4613      	mov	r3, r2
    a560:	005b      	lsls	r3, r3, #1
    a562:	4413      	add	r3, r2
    a564:	00db      	lsls	r3, r3, #3
    a566:	440b      	add	r3, r1
    a568:	681b      	ldr	r3, [r3, #0]
    a56a:	2b01      	cmp	r3, #1
    a56c:	d109      	bne.n	a582 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    a56e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a572:	4945      	ldr	r1, [pc, #276]	; (a688 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a574:	4613      	mov	r3, r2
    a576:	005b      	lsls	r3, r3, #1
    a578:	4413      	add	r3, r2
    a57a:	00db      	lsls	r3, r3, #3
    a57c:	440b      	add	r3, r1
    a57e:	2202      	movs	r2, #2
    a580:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    a582:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a586:	4618      	mov	r0, r3
    a588:	f7ff ffa4 	bl	a4d4 <Adc_Ipw_GetCurrentSampleCount>
    a58c:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    a58e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a592:	9a02      	ldr	r2, [sp, #8]
    a594:	429a      	cmp	r2, r3
    a596:	d360      	bcc.n	a65a <Adc_Ipw_UpdateSoftwareGroupState+0x156>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    a598:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a59c:	493a      	ldr	r1, [pc, #232]	; (a688 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a59e:	4613      	mov	r3, r2
    a5a0:	005b      	lsls	r3, r3, #1
    a5a2:	4413      	add	r3, r2
    a5a4:	00db      	lsls	r3, r3, #3
    a5a6:	440b      	add	r3, r1
    a5a8:	2203      	movs	r2, #3
    a5aa:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a5ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5b0:	4a34      	ldr	r2, [pc, #208]	; (a684 <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b6:	6859      	ldr	r1, [r3, #4]
    a5b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a5bc:	4613      	mov	r3, r2
    a5be:	00db      	lsls	r3, r3, #3
    a5c0:	1a9b      	subs	r3, r3, r2
    a5c2:	00db      	lsls	r3, r3, #3
    a5c4:	440b      	add	r3, r1
    a5c6:	69db      	ldr	r3, [r3, #28]
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d118      	bne.n	a5fe <Adc_Ipw_UpdateSoftwareGroupState+0xfa>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    a5cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5d0:	4a2c      	ldr	r2, [pc, #176]	; (a684 <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5d6:	6859      	ldr	r1, [r3, #4]
    a5d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a5dc:	4613      	mov	r3, r2
    a5de:	00db      	lsls	r3, r3, #3
    a5e0:	1a9b      	subs	r3, r3, r2
    a5e2:	00db      	lsls	r3, r3, #3
    a5e4:	440b      	add	r3, r1
    a5e6:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a5e8:	2b01      	cmp	r3, #1
    a5ea:	d108      	bne.n	a5fe <Adc_Ipw_UpdateSoftwareGroupState+0xfa>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a5ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a5f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5f4:	4611      	mov	r1, r2
    a5f6:	4618      	mov	r0, r3
    a5f8:	f7ff fdde 	bl	a1b8 <Adc_Ipw_UpdateQueue>
    a5fc:	e036      	b.n	a66c <Adc_Ipw_UpdateSoftwareGroupState+0x168>
        }
        else
        {
            /* ADC_ACCESS_MODE_STREAMING && ADC_STREAM_BUFFER_CIRCULAR */
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a5fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a602:	4a20      	ldr	r2, [pc, #128]	; (a684 <Adc_Ipw_UpdateSoftwareGroupState+0x180>)
    a604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a608:	6859      	ldr	r1, [r3, #4]
    a60a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a60e:	4613      	mov	r3, r2
    a610:	00db      	lsls	r3, r3, #3
    a612:	1a9b      	subs	r3, r3, r2
    a614:	00db      	lsls	r3, r3, #3
    a616:	440b      	add	r3, r1
    a618:	689b      	ldr	r3, [r3, #8]
    a61a:	2b01      	cmp	r3, #1
    a61c:	d114      	bne.n	a648 <Adc_Ipw_UpdateSoftwareGroupState+0x144>
            {
                /* Restart new continuous conversion */
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a61e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a622:	4919      	ldr	r1, [pc, #100]	; (a688 <Adc_Ipw_UpdateSoftwareGroupState+0x184>)
    a624:	4613      	mov	r3, r2
    a626:	005b      	lsls	r3, r3, #1
    a628:	4413      	add	r3, r2
    a62a:	00db      	lsls	r3, r3, #3
    a62c:	440b      	add	r3, r1
    a62e:	330c      	adds	r3, #12
    a630:	2200      	movs	r2, #0
    a632:	801a      	strh	r2, [r3, #0]
                        LocTransferList[0].Value = (uint32)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[0U]));
                        (void)Dma_Ip_SetLogicChannelTransferList(AdcDmaLogicChId, LocTransferList, 1U);
                    }
                }
#endif /*ADC_DMA_SUPPORTED*/
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a634:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a638:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a63c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a640:	4618      	mov	r0, r3
    a642:	f7ff fecf 	bl	a3e4 <Adc_Ipw_RestartConversion>
    a646:	e011      	b.n	a66c <Adc_Ipw_UpdateSoftwareGroupState+0x168>
            }
            else
            {
                /* Update queue and execute new request from queue if available */
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a648:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a64c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a650:	4611      	mov	r1, r2
    a652:	4618      	mov	r0, r3
    a654:	f7ff fdb0 	bl	a1b8 <Adc_Ipw_UpdateQueue>
    a658:	e008      	b.n	a66c <Adc_Ipw_UpdateSoftwareGroupState+0x168>
        }
    }
    else
    {
        /* Need to restart conversion until buffer is full */
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a65a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a65e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a662:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a666:	4618      	mov	r0, r3
    a668:	f7ff febc 	bl	a3e4 <Adc_Ipw_RestartConversion>
    }

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
    a66c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a670:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a674:	4611      	mov	r1, r2
    a676:	4618      	mov	r0, r3
    a678:	f7ff fd54 	bl	a124 <Adc_Ipw_CallNotification>
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a67c:	bf00      	nop
    a67e:	b004      	add	sp, #16
    a680:	bd10      	pop	{r4, pc}
    a682:	bf00      	nop
    a684:	1fff8d04 	.word	0x1fff8d04
    a688:	1fff8d08 	.word	0x1fff8d08

0000a68c <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a68c:	b510      	push	{r4, lr}
    a68e:	b088      	sub	sp, #32
    a690:	4604      	mov	r4, r0
    a692:	4608      	mov	r0, r1
    a694:	4611      	mov	r1, r2
    a696:	461a      	mov	r2, r3
    a698:	4623      	mov	r3, r4
    a69a:	f88d 300f 	strb.w	r3, [sp, #15]
    a69e:	4603      	mov	r3, r0
    a6a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    a6a4:	460b      	mov	r3, r1
    a6a6:	f88d 300e 	strb.w	r3, [sp, #14]
    a6aa:	4613      	mov	r3, r2
    a6ac:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a6b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a6b4:	4a44      	ldr	r2, [pc, #272]	; (a7c8 <Adc_Ipw_EndConversion+0x13c>)
    a6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ba:	68da      	ldr	r2, [r3, #12]
    a6bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a6c0:	005b      	lsls	r3, r3, #1
    a6c2:	4413      	add	r3, r2
    a6c4:	881b      	ldrh	r3, [r3, #0]
    a6c6:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a6ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a6ce:	4a3e      	ldr	r2, [pc, #248]	; (a7c8 <Adc_Ipw_EndConversion+0x13c>)
    a6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6d4:	6859      	ldr	r1, [r3, #4]
    a6d6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    a6da:	4613      	mov	r3, r2
    a6dc:	00db      	lsls	r3, r3, #3
    a6de:	1a9b      	subs	r3, r3, r2
    a6e0:	00db      	lsls	r3, r3, #3
    a6e2:	440b      	add	r3, r1
    a6e4:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a6e6:	9b06      	ldr	r3, [sp, #24]
    a6e8:	8c1a      	ldrh	r2, [r3, #32]
    a6ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a6ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a6f2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a6f6:	f7ff fd89 	bl	a20c <Adc_Ipw_CheckConversionChannels>
    a6fa:	4603      	mov	r3, r0
    a6fc:	2b00      	cmp	r3, #0
    a6fe:	d160      	bne.n	a7c2 <Adc_Ipw_EndConversion+0x136>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a700:	9b06      	ldr	r3, [sp, #24]
    a702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a706:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a70a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a70e:	492f      	ldr	r1, [pc, #188]	; (a7cc <Adc_Ipw_EndConversion+0x140>)
    a710:	4613      	mov	r3, r2
    a712:	005b      	lsls	r3, r3, #1
    a714:	4413      	add	r3, r2
    a716:	00db      	lsls	r3, r3, #3
    a718:	440b      	add	r3, r1
    a71a:	3314      	adds	r3, #20
    a71c:	781b      	ldrb	r3, [r3, #0]
    a71e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a722:	429a      	cmp	r2, r3
    a724:	d929      	bls.n	a77a <Adc_Ipw_EndConversion+0xee>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a726:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a72a:	4928      	ldr	r1, [pc, #160]	; (a7cc <Adc_Ipw_EndConversion+0x140>)
    a72c:	4613      	mov	r3, r2
    a72e:	005b      	lsls	r3, r3, #1
    a730:	4413      	add	r3, r2
    a732:	00db      	lsls	r3, r3, #3
    a734:	440b      	add	r3, r1
    a736:	3314      	adds	r3, #20
    a738:	781b      	ldrb	r3, [r3, #0]
    a73a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a73e:	1ad3      	subs	r3, r2, r3
    a740:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a744:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a748:	2b0f      	cmp	r3, #15
    a74a:	d805      	bhi.n	a758 <Adc_Ipw_EndConversion+0xcc>
    a74c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a750:	f003 030f 	and.w	r3, r3, #15
    a754:	b2db      	uxtb	r3, r3
    a756:	e000      	b.n	a75a <Adc_Ipw_EndConversion+0xce>
    a758:	2310      	movs	r3, #16
    a75a:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a75e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a762:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a766:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a76a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a76e:	9300      	str	r3, [sp, #0]
    a770:	4613      	mov	r3, r2
    a772:	220f      	movs	r2, #15
    a774:	f7ff f908 	bl	9988 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a778:	e023      	b.n	a7c2 <Adc_Ipw_EndConversion+0x136>
                Adc_axGroupStatus[Group].ResultIndex++;
    a77a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a77e:	4913      	ldr	r1, [pc, #76]	; (a7cc <Adc_Ipw_EndConversion+0x140>)
    a780:	4613      	mov	r3, r2
    a782:	005b      	lsls	r3, r3, #1
    a784:	4413      	add	r3, r2
    a786:	00db      	lsls	r3, r3, #3
    a788:	440b      	add	r3, r1
    a78a:	330c      	adds	r3, #12
    a78c:	881b      	ldrh	r3, [r3, #0]
    a78e:	b29b      	uxth	r3, r3
    a790:	3301      	adds	r3, #1
    a792:	b298      	uxth	r0, r3
    a794:	490d      	ldr	r1, [pc, #52]	; (a7cc <Adc_Ipw_EndConversion+0x140>)
    a796:	4613      	mov	r3, r2
    a798:	005b      	lsls	r3, r3, #1
    a79a:	4413      	add	r3, r2
    a79c:	00db      	lsls	r3, r3, #3
    a79e:	440b      	add	r3, r1
    a7a0:	330c      	adds	r3, #12
    a7a2:	4602      	mov	r2, r0
    a7a4:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a7a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a7aa:	2b00      	cmp	r3, #0
    a7ac:	d009      	beq.n	a7c2 <Adc_Ipw_EndConversion+0x136>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a7ae:	9b06      	ldr	r3, [sp, #24]
    a7b0:	8c1a      	ldrh	r2, [r3, #32]
    a7b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a7ba:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a7be:	f7ff fea1 	bl	a504 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a7c2:	bf00      	nop
    a7c4:	b008      	add	sp, #32
    a7c6:	bd10      	pop	{r4, pc}
    a7c8:	1fff8d04 	.word	0x1fff8d04
    a7cc:	1fff8d08 	.word	0x1fff8d08

0000a7d0 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a7d0:	b084      	sub	sp, #16
    a7d2:	9003      	str	r0, [sp, #12]
    a7d4:	9102      	str	r1, [sp, #8]
    a7d6:	4611      	mov	r1, r2
    a7d8:	461a      	mov	r2, r3
    a7da:	460b      	mov	r3, r1
    a7dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    a7e0:	4613      	mov	r3, r2
    a7e2:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a7e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a7ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a7ee:	fb02 f303 	mul.w	r3, r2, r3
    a7f2:	005b      	lsls	r3, r3, #1
    a7f4:	9a02      	ldr	r2, [sp, #8]
    a7f6:	4413      	add	r3, r2
    a7f8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a7fc:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a7fe:	bf00      	nop
    a800:	b004      	add	sp, #16
    a802:	4770      	bx	lr

0000a804 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a804:	b500      	push	{lr}
    a806:	b085      	sub	sp, #20
    a808:	4603      	mov	r3, r0
    a80a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a80e:	f7ff fc85 	bl	a11c <Adc_GetCoreID>
    a812:	4603      	mov	r3, r0
    a814:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a818:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a81c:	b2db      	uxtb	r3, r3
    a81e:	461a      	mov	r2, r3
    a820:	4b18      	ldr	r3, [pc, #96]	; (a884 <Adc_Ipw_EndConversionNotification+0x80>)
    a822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a826:	681a      	ldr	r2, [r3, #0]
    a828:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a82c:	4413      	add	r3, r2
    a82e:	f893 3020 	ldrb.w	r3, [r3, #32]
    a832:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a836:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a83a:	4913      	ldr	r1, [pc, #76]	; (a888 <Adc_Ipw_EndConversionNotification+0x84>)
    a83c:	4613      	mov	r3, r2
    a83e:	005b      	lsls	r3, r3, #1
    a840:	4413      	add	r3, r2
    a842:	005b      	lsls	r3, r3, #1
    a844:	440b      	add	r3, r1
    a846:	3302      	adds	r3, #2
    a848:	881b      	ldrh	r3, [r3, #0]
    a84a:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a84e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a852:	490d      	ldr	r1, [pc, #52]	; (a888 <Adc_Ipw_EndConversionNotification+0x84>)
    a854:	4613      	mov	r3, r2
    a856:	005b      	lsls	r3, r3, #1
    a858:	4413      	add	r3, r2
    a85a:	005b      	lsls	r3, r3, #1
    a85c:	440b      	add	r3, r1
    a85e:	881b      	ldrh	r3, [r3, #0]
    a860:	b29b      	uxth	r3, r3
    a862:	2b00      	cmp	r3, #0
    a864:	d009      	beq.n	a87a <Adc_Ipw_EndConversionNotification+0x76>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a866:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a86a:	b2db      	uxtb	r3, r3
    a86c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a870:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a874:	2201      	movs	r2, #1
    a876:	f7ff ff09 	bl	a68c <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a87a:	bf00      	nop
    a87c:	b005      	add	sp, #20
    a87e:	f85d fb04 	ldr.w	pc, [sp], #4
    a882:	bf00      	nop
    a884:	1fff8d04 	.word	0x1fff8d04
    a888:	1fff8d20 	.word	0x1fff8d20

0000a88c <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a88c:	b500      	push	{lr}
    a88e:	b085      	sub	sp, #20
    a890:	4603      	mov	r3, r0
    a892:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a896:	2300      	movs	r3, #0
    a898:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a89c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8a0:	4618      	mov	r0, r3
    a8a2:	f7ff ffaf 	bl	a804 <Adc_Ipw_EndConversionNotification>
}
    a8a6:	bf00      	nop
    a8a8:	b005      	add	sp, #20
    a8aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ae:	bf00      	nop

0000a8b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a8b0:	b084      	sub	sp, #16
    a8b2:	9003      	str	r0, [sp, #12]
    a8b4:	9201      	str	r2, [sp, #4]
    a8b6:	461a      	mov	r2, r3
    a8b8:	460b      	mov	r3, r1
    a8ba:	f88d 300b 	strb.w	r3, [sp, #11]
    a8be:	4613      	mov	r3, r2
    a8c0:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a8c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d016      	beq.n	a8fa <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a8cc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a8d0:	9903      	ldr	r1, [sp, #12]
    a8d2:	4613      	mov	r3, r2
    a8d4:	009b      	lsls	r3, r3, #2
    a8d6:	4413      	add	r3, r2
    a8d8:	00db      	lsls	r3, r3, #3
    a8da:	440b      	add	r3, r1
    a8dc:	3310      	adds	r3, #16
    a8de:	6819      	ldr	r1, [r3, #0]
    a8e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a8e4:	9b01      	ldr	r3, [sp, #4]
    a8e6:	4319      	orrs	r1, r3
    a8e8:	9803      	ldr	r0, [sp, #12]
    a8ea:	4613      	mov	r3, r2
    a8ec:	009b      	lsls	r3, r3, #2
    a8ee:	4413      	add	r3, r2
    a8f0:	00db      	lsls	r3, r3, #3
    a8f2:	4403      	add	r3, r0
    a8f4:	3310      	adds	r3, #16
    a8f6:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a8f8:	e016      	b.n	a928 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a8fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a8fe:	9903      	ldr	r1, [sp, #12]
    a900:	4613      	mov	r3, r2
    a902:	009b      	lsls	r3, r3, #2
    a904:	4413      	add	r3, r2
    a906:	00db      	lsls	r3, r3, #3
    a908:	440b      	add	r3, r1
    a90a:	3310      	adds	r3, #16
    a90c:	6819      	ldr	r1, [r3, #0]
    a90e:	9b01      	ldr	r3, [sp, #4]
    a910:	43db      	mvns	r3, r3
    a912:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a916:	4019      	ands	r1, r3
    a918:	9803      	ldr	r0, [sp, #12]
    a91a:	4613      	mov	r3, r2
    a91c:	009b      	lsls	r3, r3, #2
    a91e:	4413      	add	r3, r2
    a920:	00db      	lsls	r3, r3, #3
    a922:	4403      	add	r3, r0
    a924:	3310      	adds	r3, #16
    a926:	6019      	str	r1, [r3, #0]
}
    a928:	bf00      	nop
    a92a:	b004      	add	sp, #16
    a92c:	4770      	bx	lr

0000a92e <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a92e:	b082      	sub	sp, #8
    a930:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a932:	9b01      	ldr	r3, [sp, #4]
    a934:	681b      	ldr	r3, [r3, #0]
    a936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a93a:	9b01      	ldr	r3, [sp, #4]
    a93c:	601a      	str	r2, [r3, #0]
}
    a93e:	bf00      	nop
    a940:	b002      	add	sp, #8
    a942:	4770      	bx	lr

0000a944 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a944:	b082      	sub	sp, #8
    a946:	9001      	str	r0, [sp, #4]
    a948:	460b      	mov	r3, r1
    a94a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a94e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a952:	2b00      	cmp	r3, #0
    a954:	d006      	beq.n	a964 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a956:	9b01      	ldr	r3, [sp, #4]
    a958:	681b      	ldr	r3, [r3, #0]
    a95a:	f043 0202 	orr.w	r2, r3, #2
    a95e:	9b01      	ldr	r3, [sp, #4]
    a960:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a962:	e005      	b.n	a970 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a964:	9b01      	ldr	r3, [sp, #4]
    a966:	681b      	ldr	r3, [r3, #0]
    a968:	f023 0202 	bic.w	r2, r3, #2
    a96c:	9b01      	ldr	r3, [sp, #4]
    a96e:	601a      	str	r2, [r3, #0]
}
    a970:	bf00      	nop
    a972:	b002      	add	sp, #8
    a974:	4770      	bx	lr

0000a976 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a976:	b086      	sub	sp, #24
    a978:	9003      	str	r0, [sp, #12]
    a97a:	460b      	mov	r3, r1
    a97c:	9201      	str	r2, [sp, #4]
    a97e:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a982:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a986:	9903      	ldr	r1, [sp, #12]
    a988:	4613      	mov	r3, r2
    a98a:	009b      	lsls	r3, r3, #2
    a98c:	4413      	add	r3, r2
    a98e:	00db      	lsls	r3, r3, #3
    a990:	440b      	add	r3, r1
    a992:	3310      	adds	r3, #16
    a994:	681b      	ldr	r3, [r3, #0]
    a996:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a998:	9b05      	ldr	r3, [sp, #20]
    a99a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a99e:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a9a0:	9b01      	ldr	r3, [sp, #4]
    a9a2:	781b      	ldrb	r3, [r3, #0]
    a9a4:	461a      	mov	r2, r3
    a9a6:	9b05      	ldr	r3, [sp, #20]
    a9a8:	4313      	orrs	r3, r2
    a9aa:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a9ac:	9b01      	ldr	r3, [sp, #4]
    a9ae:	785b      	ldrb	r3, [r3, #1]
    a9b0:	021b      	lsls	r3, r3, #8
    a9b2:	b29b      	uxth	r3, r3
    a9b4:	9a05      	ldr	r2, [sp, #20]
    a9b6:	4313      	orrs	r3, r2
    a9b8:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a9ba:	9b01      	ldr	r3, [sp, #4]
    a9bc:	789b      	ldrb	r3, [r3, #2]
    a9be:	041b      	lsls	r3, r3, #16
    a9c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a9c4:	9a05      	ldr	r2, [sp, #20]
    a9c6:	4313      	orrs	r3, r2
    a9c8:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a9ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a9ce:	9903      	ldr	r1, [sp, #12]
    a9d0:	4613      	mov	r3, r2
    a9d2:	009b      	lsls	r3, r3, #2
    a9d4:	4413      	add	r3, r2
    a9d6:	00db      	lsls	r3, r3, #3
    a9d8:	440b      	add	r3, r1
    a9da:	3310      	adds	r3, #16
    a9dc:	9a05      	ldr	r2, [sp, #20]
    a9de:	601a      	str	r2, [r3, #0]
}
    a9e0:	bf00      	nop
    a9e2:	b006      	add	sp, #24
    a9e4:	4770      	bx	lr

0000a9e6 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a9e6:	b082      	sub	sp, #8
    a9e8:	9001      	str	r0, [sp, #4]
    a9ea:	460b      	mov	r3, r1
    a9ec:	f88d 3003 	strb.w	r3, [sp, #3]
    a9f0:	4613      	mov	r3, r2
    a9f2:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a9f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a9fa:	9901      	ldr	r1, [sp, #4]
    a9fc:	4613      	mov	r3, r2
    a9fe:	009b      	lsls	r3, r3, #2
    aa00:	4413      	add	r3, r2
    aa02:	00db      	lsls	r3, r3, #3
    aa04:	440b      	add	r3, r1
    aa06:	3314      	adds	r3, #20
    aa08:	6819      	ldr	r1, [r3, #0]
    aa0a:	f8bd 3000 	ldrh.w	r3, [sp]
    aa0e:	041b      	lsls	r3, r3, #16
    aa10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    aa14:	43db      	mvns	r3, r3
    aa16:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa1a:	4019      	ands	r1, r3
    aa1c:	9801      	ldr	r0, [sp, #4]
    aa1e:	4613      	mov	r3, r2
    aa20:	009b      	lsls	r3, r3, #2
    aa22:	4413      	add	r3, r2
    aa24:	00db      	lsls	r3, r3, #3
    aa26:	4403      	add	r3, r0
    aa28:	3314      	adds	r3, #20
    aa2a:	6019      	str	r1, [r3, #0]
}
    aa2c:	bf00      	nop
    aa2e:	b002      	add	sp, #8
    aa30:	4770      	bx	lr

0000aa32 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    aa32:	b500      	push	{lr}
    aa34:	b087      	sub	sp, #28
    aa36:	9001      	str	r0, [sp, #4]
    aa38:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa3a:	4a50      	ldr	r2, [pc, #320]	; (ab7c <Pdb_Adc_Ip_Init+0x14a>)
    aa3c:	9b01      	ldr	r3, [sp, #4]
    aa3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa42:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    aa44:	2300      	movs	r3, #0
    aa46:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    aa48:	9b00      	ldr	r3, [sp, #0]
    aa4a:	681b      	ldr	r3, [r3, #0]
    aa4c:	049b      	lsls	r3, r3, #18
    aa4e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    aa52:	9a04      	ldr	r2, [sp, #16]
    aa54:	4313      	orrs	r3, r2
    aa56:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    aa58:	9b00      	ldr	r3, [sp, #0]
    aa5a:	685b      	ldr	r3, [r3, #4]
    aa5c:	031b      	lsls	r3, r3, #12
    aa5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    aa62:	9a04      	ldr	r2, [sp, #16]
    aa64:	4313      	orrs	r3, r2
    aa66:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    aa68:	9b00      	ldr	r3, [sp, #0]
    aa6a:	689b      	ldr	r3, [r3, #8]
    aa6c:	009b      	lsls	r3, r3, #2
    aa6e:	f003 030c 	and.w	r3, r3, #12
    aa72:	9a04      	ldr	r2, [sp, #16]
    aa74:	4313      	orrs	r3, r2
    aa76:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    aa78:	9b00      	ldr	r3, [sp, #0]
    aa7a:	68db      	ldr	r3, [r3, #12]
    aa7c:	021b      	lsls	r3, r3, #8
    aa7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    aa82:	9a04      	ldr	r2, [sp, #16]
    aa84:	4313      	orrs	r3, r2
    aa86:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    aa88:	9b00      	ldr	r3, [sp, #0]
    aa8a:	7c1b      	ldrb	r3, [r3, #16]
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	d003      	beq.n	aa98 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    aa90:	9b04      	ldr	r3, [sp, #16]
    aa92:	f043 0302 	orr.w	r3, r3, #2
    aa96:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    aa98:	9b00      	ldr	r3, [sp, #0]
    aa9a:	7c5b      	ldrb	r3, [r3, #17]
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d003      	beq.n	aaa8 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    aaa0:	9b04      	ldr	r3, [sp, #16]
    aaa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    aaa6:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    aaa8:	9b00      	ldr	r3, [sp, #0]
    aaaa:	69db      	ldr	r3, [r3, #28]
    aaac:	2b00      	cmp	r3, #0
    aaae:	d003      	beq.n	aab8 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    aab0:	9b04      	ldr	r3, [sp, #16]
    aab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    aab6:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    aab8:	9b03      	ldr	r3, [sp, #12]
    aaba:	9a04      	ldr	r2, [sp, #16]
    aabc:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    aabe:	9b00      	ldr	r3, [sp, #0]
    aac0:	8a5b      	ldrh	r3, [r3, #18]
    aac2:	4619      	mov	r1, r3
    aac4:	9801      	ldr	r0, [sp, #4]
    aac6:	f000 f98f 	bl	ade8 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    aaca:	9b00      	ldr	r3, [sp, #0]
    aacc:	7d1b      	ldrb	r3, [r3, #20]
    aace:	2b00      	cmp	r3, #0
    aad0:	d03e      	beq.n	ab50 <Pdb_Adc_Ip_Init+0x11e>
    aad2:	9b00      	ldr	r3, [sp, #0]
    aad4:	699b      	ldr	r3, [r3, #24]
    aad6:	2b00      	cmp	r3, #0
    aad8:	d03a      	beq.n	ab50 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    aada:	2300      	movs	r3, #0
    aadc:	f88d 3017 	strb.w	r3, [sp, #23]
    aae0:	e030      	b.n	ab44 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    aae2:	9b00      	ldr	r3, [sp, #0]
    aae4:	6999      	ldr	r1, [r3, #24]
    aae6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aaea:	4613      	mov	r3, r2
    aaec:	009b      	lsls	r3, r3, #2
    aaee:	4413      	add	r3, r2
    aaf0:	009b      	lsls	r3, r3, #2
    aaf2:	440b      	add	r3, r1
    aaf4:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    aaf6:	9b02      	ldr	r3, [sp, #8]
    aaf8:	7819      	ldrb	r1, [r3, #0]
    aafa:	9b02      	ldr	r3, [sp, #8]
    aafc:	3301      	adds	r3, #1
    aafe:	461a      	mov	r2, r3
    ab00:	9803      	ldr	r0, [sp, #12]
    ab02:	f7ff ff38 	bl	a976 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ab06:	2300      	movs	r3, #0
    ab08:	f88d 3016 	strb.w	r3, [sp, #22]
    ab0c:	e011      	b.n	ab32 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    ab0e:	9b02      	ldr	r3, [sp, #8]
    ab10:	7819      	ldrb	r1, [r3, #0]
    ab12:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab16:	9a02      	ldr	r2, [sp, #8]
    ab18:	005b      	lsls	r3, r3, #1
    ab1a:	4413      	add	r3, r2
    ab1c:	889b      	ldrh	r3, [r3, #4]
    ab1e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    ab22:	9801      	ldr	r0, [sp, #4]
    ab24:	f000 fa74 	bl	b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ab28:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab2c:	3301      	adds	r3, #1
    ab2e:	f88d 3016 	strb.w	r3, [sp, #22]
    ab32:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab36:	2b07      	cmp	r3, #7
    ab38:	d9e9      	bls.n	ab0e <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    ab3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab3e:	3301      	adds	r3, #1
    ab40:	f88d 3017 	strb.w	r3, [sp, #23]
    ab44:	9b00      	ldr	r3, [sp, #0]
    ab46:	7d1b      	ldrb	r3, [r3, #20]
    ab48:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab4c:	429a      	cmp	r2, r3
    ab4e:	d3c8      	bcc.n	aae2 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    ab50:	9801      	ldr	r0, [sp, #4]
    ab52:	f000 f89b 	bl	ac8c <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    ab56:	9801      	ldr	r0, [sp, #4]
    ab58:	f000 f92e 	bl	adb8 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    ab5c:	9b00      	ldr	r3, [sp, #0]
    ab5e:	69da      	ldr	r2, [r3, #28]
    ab60:	4907      	ldr	r1, [pc, #28]	; (ab80 <Pdb_Adc_Ip_Init+0x14e>)
    ab62:	9b01      	ldr	r3, [sp, #4]
    ab64:	00db      	lsls	r3, r3, #3
    ab66:	440b      	add	r3, r1
    ab68:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    ab6a:	4a05      	ldr	r2, [pc, #20]	; (ab80 <Pdb_Adc_Ip_Init+0x14e>)
    ab6c:	9b01      	ldr	r3, [sp, #4]
    ab6e:	2101      	movs	r1, #1
    ab70:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    ab74:	bf00      	nop
    ab76:	b007      	add	sp, #28
    ab78:	f85d fb04 	ldr.w	pc, [sp], #4
    ab7c:	00010f88 	.word	0x00010f88
    ab80:	1fff8dc4 	.word	0x1fff8dc4

0000ab84 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    ab84:	b500      	push	{lr}
    ab86:	b097      	sub	sp, #92	; 0x5c
    ab88:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    ab8a:	2300      	movs	r3, #0
    ab8c:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    ab8e:	2300      	movs	r3, #0
    ab90:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    ab92:	2300      	movs	r3, #0
    ab94:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    ab96:	2300      	movs	r3, #0
    ab98:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    ab9a:	2300      	movs	r3, #0
    ab9c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    aba0:	2300      	movs	r3, #0
    aba2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    aba6:	2300      	movs	r3, #0
    aba8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    abac:	2302      	movs	r3, #2
    abae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    abb2:	2300      	movs	r3, #0
    abb4:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    abb8:	e04d      	b.n	ac56 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    abba:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    abbe:	4613      	mov	r3, r2
    abc0:	009b      	lsls	r3, r3, #2
    abc2:	4413      	add	r3, r2
    abc4:	009b      	lsls	r3, r3, #2
    abc6:	aa16      	add	r2, sp, #88	; 0x58
    abc8:	4413      	add	r3, r2
    abca:	3b4c      	subs	r3, #76	; 0x4c
    abcc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    abd0:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    abd2:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    abd6:	4613      	mov	r3, r2
    abd8:	009b      	lsls	r3, r3, #2
    abda:	4413      	add	r3, r2
    abdc:	009b      	lsls	r3, r3, #2
    abde:	aa16      	add	r2, sp, #88	; 0x58
    abe0:	4413      	add	r3, r2
    abe2:	3b4b      	subs	r3, #75	; 0x4b
    abe4:	2200      	movs	r2, #0
    abe6:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    abe8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    abec:	4613      	mov	r3, r2
    abee:	009b      	lsls	r3, r3, #2
    abf0:	4413      	add	r3, r2
    abf2:	009b      	lsls	r3, r3, #2
    abf4:	aa16      	add	r2, sp, #88	; 0x58
    abf6:	4413      	add	r3, r2
    abf8:	3b4a      	subs	r3, #74	; 0x4a
    abfa:	2200      	movs	r2, #0
    abfc:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    abfe:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac02:	4613      	mov	r3, r2
    ac04:	009b      	lsls	r3, r3, #2
    ac06:	4413      	add	r3, r2
    ac08:	009b      	lsls	r3, r3, #2
    ac0a:	aa16      	add	r2, sp, #88	; 0x58
    ac0c:	4413      	add	r3, r2
    ac0e:	3b49      	subs	r3, #73	; 0x49
    ac10:	2200      	movs	r2, #0
    ac12:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ac14:	2300      	movs	r3, #0
    ac16:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    ac1a:	e013      	b.n	ac44 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    ac1c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac20:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    ac24:	4613      	mov	r3, r2
    ac26:	009b      	lsls	r3, r3, #2
    ac28:	4413      	add	r3, r2
    ac2a:	005b      	lsls	r3, r3, #1
    ac2c:	440b      	add	r3, r1
    ac2e:	005b      	lsls	r3, r3, #1
    ac30:	aa16      	add	r2, sp, #88	; 0x58
    ac32:	4413      	add	r3, r2
    ac34:	2200      	movs	r2, #0
    ac36:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ac3a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    ac3e:	3301      	adds	r3, #1
    ac40:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    ac44:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    ac48:	2b07      	cmp	r3, #7
    ac4a:	d9e7      	bls.n	ac1c <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    ac4c:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    ac50:	3301      	adds	r3, #1
    ac52:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    ac56:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    ac5a:	2b01      	cmp	r3, #1
    ac5c:	d9ad      	bls.n	abba <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    ac5e:	ab03      	add	r3, sp, #12
    ac60:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    ac62:	2300      	movs	r3, #0
    ac64:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    ac66:	ab0d      	add	r3, sp, #52	; 0x34
    ac68:	4619      	mov	r1, r3
    ac6a:	9801      	ldr	r0, [sp, #4]
    ac6c:	f7ff fee1 	bl	aa32 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    ac70:	9801      	ldr	r0, [sp, #4]
    ac72:	f000 f823 	bl	acbc <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    ac76:	4a04      	ldr	r2, [pc, #16]	; (ac88 <Pdb_Adc_Ip_DeInit+0x104>)
    ac78:	9b01      	ldr	r3, [sp, #4]
    ac7a:	2100      	movs	r1, #0
    ac7c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    ac80:	bf00      	nop
    ac82:	b017      	add	sp, #92	; 0x5c
    ac84:	f85d fb04 	ldr.w	pc, [sp], #4
    ac88:	1fff8dc4 	.word	0x1fff8dc4

0000ac8c <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    ac8c:	b500      	push	{lr}
    ac8e:	b085      	sub	sp, #20
    ac90:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ac92:	4a09      	ldr	r2, [pc, #36]	; (acb8 <Pdb_Adc_Ip_Enable+0x2c>)
    ac94:	9b01      	ldr	r3, [sp, #4]
    ac96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac9a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    ac9c:	f001 fdbe 	bl	c81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    aca0:	9b03      	ldr	r3, [sp, #12]
    aca2:	681b      	ldr	r3, [r3, #0]
    aca4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    aca8:	9b03      	ldr	r3, [sp, #12]
    acaa:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    acac:	f001 fde2 	bl	c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    acb0:	bf00      	nop
    acb2:	b005      	add	sp, #20
    acb4:	f85d fb04 	ldr.w	pc, [sp], #4
    acb8:	00010f88 	.word	0x00010f88

0000acbc <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    acbc:	b500      	push	{lr}
    acbe:	b085      	sub	sp, #20
    acc0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    acc2:	4a08      	ldr	r2, [pc, #32]	; (ace4 <Pdb_Adc_Ip_Disable+0x28>)
    acc4:	9b01      	ldr	r3, [sp, #4]
    acc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acca:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    accc:	f001 fdf8 	bl	c8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    acd0:	9803      	ldr	r0, [sp, #12]
    acd2:	f7ff fe2c 	bl	a92e <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    acd6:	f001 fe1f 	bl	c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    acda:	bf00      	nop
    acdc:	b005      	add	sp, #20
    acde:	f85d fb04 	ldr.w	pc, [sp], #4
    ace2:	bf00      	nop
    ace4:	00010f88 	.word	0x00010f88

0000ace8 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    ace8:	b500      	push	{lr}
    acea:	b085      	sub	sp, #20
    acec:	9001      	str	r0, [sp, #4]
    acee:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    acf0:	4a0e      	ldr	r2, [pc, #56]	; (ad2c <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    acf2:	9b01      	ldr	r3, [sp, #4]
    acf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acf8:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    acfa:	f001 fe33 	bl	c964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    acfe:	9b03      	ldr	r3, [sp, #12]
    ad00:	681b      	ldr	r3, [r3, #0]
    ad02:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    ad04:	9b02      	ldr	r3, [sp, #8]
    ad06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    ad0a:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    ad0c:	9b00      	ldr	r3, [sp, #0]
    ad0e:	021b      	lsls	r3, r3, #8
    ad10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ad14:	9a02      	ldr	r2, [sp, #8]
    ad16:	4313      	orrs	r3, r2
    ad18:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    ad1a:	9b03      	ldr	r3, [sp, #12]
    ad1c:	9a02      	ldr	r2, [sp, #8]
    ad1e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    ad20:	f001 fe4c 	bl	c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    ad24:	bf00      	nop
    ad26:	b005      	add	sp, #20
    ad28:	f85d fb04 	ldr.w	pc, [sp], #4
    ad2c:	00010f88 	.word	0x00010f88

0000ad30 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    ad30:	b500      	push	{lr}
    ad32:	b085      	sub	sp, #20
    ad34:	9001      	str	r0, [sp, #4]
    ad36:	460b      	mov	r3, r1
    ad38:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad3c:	4a09      	ldr	r2, [pc, #36]	; (ad64 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    ad3e:	9b01      	ldr	r3, [sp, #4]
    ad40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad44:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    ad46:	f001 fe5f 	bl	ca08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    ad4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ad4e:	4619      	mov	r1, r3
    ad50:	9803      	ldr	r0, [sp, #12]
    ad52:	f7ff fdf7 	bl	a944 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    ad56:	f001 fe83 	bl	ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    ad5a:	bf00      	nop
    ad5c:	b005      	add	sp, #20
    ad5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad62:	bf00      	nop
    ad64:	00010f88 	.word	0x00010f88

0000ad68 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    ad68:	b500      	push	{lr}
    ad6a:	b085      	sub	sp, #20
    ad6c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad6e:	4a09      	ldr	r2, [pc, #36]	; (ad94 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    ad70:	9b01      	ldr	r3, [sp, #4]
    ad72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad76:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    ad78:	f001 fe98 	bl	caac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    ad7c:	9b03      	ldr	r3, [sp, #12]
    ad7e:	681b      	ldr	r3, [r3, #0]
    ad80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    ad84:	9b03      	ldr	r3, [sp, #12]
    ad86:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    ad88:	f001 febc 	bl	cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    ad8c:	bf00      	nop
    ad8e:	b005      	add	sp, #20
    ad90:	f85d fb04 	ldr.w	pc, [sp], #4
    ad94:	00010f88 	.word	0x00010f88

0000ad98 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    ad98:	b084      	sub	sp, #16
    ad9a:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad9c:	4a05      	ldr	r2, [pc, #20]	; (adb4 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    ad9e:	9b01      	ldr	r3, [sp, #4]
    ada0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ada4:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    ada6:	9b03      	ldr	r3, [sp, #12]
    ada8:	689b      	ldr	r3, [r3, #8]
    adaa:	b29b      	uxth	r3, r3
}
    adac:	4618      	mov	r0, r3
    adae:	b004      	add	sp, #16
    adb0:	4770      	bx	lr
    adb2:	bf00      	nop
    adb4:	00010f88 	.word	0x00010f88

0000adb8 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    adb8:	b500      	push	{lr}
    adba:	b085      	sub	sp, #20
    adbc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    adbe:	4a09      	ldr	r2, [pc, #36]	; (ade4 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    adc0:	9b01      	ldr	r3, [sp, #4]
    adc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc6:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    adc8:	f001 fec2 	bl	cb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    adcc:	9b03      	ldr	r3, [sp, #12]
    adce:	681b      	ldr	r3, [r3, #0]
    add0:	f043 0201 	orr.w	r2, r3, #1
    add4:	9b03      	ldr	r3, [sp, #12]
    add6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    add8:	f001 fee6 	bl	cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    addc:	bf00      	nop
    adde:	b005      	add	sp, #20
    ade0:	f85d fb04 	ldr.w	pc, [sp], #4
    ade4:	00010f88 	.word	0x00010f88

0000ade8 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    ade8:	b500      	push	{lr}
    adea:	b085      	sub	sp, #20
    adec:	9001      	str	r0, [sp, #4]
    adee:	460b      	mov	r3, r1
    adf0:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    adf4:	4a0d      	ldr	r2, [pc, #52]	; (ae2c <Pdb_Adc_Ip_SetModulus+0x44>)
    adf6:	9b01      	ldr	r3, [sp, #4]
    adf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfc:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    adfe:	f002 f989 	bl	d114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    ae02:	9b03      	ldr	r3, [sp, #12]
    ae04:	685b      	ldr	r3, [r3, #4]
    ae06:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    ae08:	9b02      	ldr	r3, [sp, #8]
    ae0a:	0c1b      	lsrs	r3, r3, #16
    ae0c:	041b      	lsls	r3, r3, #16
    ae0e:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    ae10:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ae14:	9a02      	ldr	r2, [sp, #8]
    ae16:	4313      	orrs	r3, r2
    ae18:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    ae1a:	9b03      	ldr	r3, [sp, #12]
    ae1c:	9a02      	ldr	r2, [sp, #8]
    ae1e:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    ae20:	f002 f9a4 	bl	d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    ae24:	bf00      	nop
    ae26:	b005      	add	sp, #20
    ae28:	f85d fb04 	ldr.w	pc, [sp], #4
    ae2c:	00010f88 	.word	0x00010f88

0000ae30 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    ae30:	b500      	push	{lr}
    ae32:	b087      	sub	sp, #28
    ae34:	9003      	str	r0, [sp, #12]
    ae36:	460b      	mov	r3, r1
    ae38:	9201      	str	r2, [sp, #4]
    ae3a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ae3e:	4a0a      	ldr	r2, [pc, #40]	; (ae68 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    ae40:	9b03      	ldr	r3, [sp, #12]
    ae42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae46:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    ae48:	f001 ff26 	bl	cc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    ae4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae50:	9a01      	ldr	r2, [sp, #4]
    ae52:	4619      	mov	r1, r3
    ae54:	9805      	ldr	r0, [sp, #20]
    ae56:	f7ff fd8e 	bl	a976 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    ae5a:	f001 ff49 	bl	ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    ae5e:	bf00      	nop
    ae60:	b007      	add	sp, #28
    ae62:	f85d fb04 	ldr.w	pc, [sp], #4
    ae66:	bf00      	nop
    ae68:	00010f88 	.word	0x00010f88

0000ae6c <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    ae6c:	b084      	sub	sp, #16
    ae6e:	9001      	str	r0, [sp, #4]
    ae70:	460b      	mov	r3, r1
    ae72:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ae76:	4a0c      	ldr	r2, [pc, #48]	; (aea8 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    ae78:	9b01      	ldr	r3, [sp, #4]
    ae7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7e:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    ae80:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae84:	9903      	ldr	r1, [sp, #12]
    ae86:	4613      	mov	r3, r2
    ae88:	009b      	lsls	r3, r3, #2
    ae8a:	4413      	add	r3, r2
    ae8c:	00db      	lsls	r3, r3, #3
    ae8e:	440b      	add	r3, r1
    ae90:	3314      	adds	r3, #20
    ae92:	681b      	ldr	r3, [r3, #0]
    ae94:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    ae96:	9b02      	ldr	r3, [sp, #8]
    ae98:	0c1b      	lsrs	r3, r3, #16
    ae9a:	b2db      	uxtb	r3, r3
    ae9c:	9302      	str	r3, [sp, #8]

    return Result;
    ae9e:	9b02      	ldr	r3, [sp, #8]
}
    aea0:	4618      	mov	r0, r3
    aea2:	b004      	add	sp, #16
    aea4:	4770      	bx	lr
    aea6:	bf00      	nop
    aea8:	00010f88 	.word	0x00010f88

0000aeac <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    aeac:	b500      	push	{lr}
    aeae:	b085      	sub	sp, #20
    aeb0:	9001      	str	r0, [sp, #4]
    aeb2:	460b      	mov	r3, r1
    aeb4:	f88d 3003 	strb.w	r3, [sp, #3]
    aeb8:	4613      	mov	r3, r2
    aeba:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aebe:	4a0a      	ldr	r2, [pc, #40]	; (aee8 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    aec0:	9b01      	ldr	r3, [sp, #4]
    aec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    aec8:	f002 f880 	bl	cfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    aecc:	f8bd 2000 	ldrh.w	r2, [sp]
    aed0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aed4:	4619      	mov	r1, r3
    aed6:	9803      	ldr	r0, [sp, #12]
    aed8:	f7ff fd85 	bl	a9e6 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    aedc:	f002 f8a2 	bl	d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    aee0:	bf00      	nop
    aee2:	b005      	add	sp, #20
    aee4:	f85d fb04 	ldr.w	pc, [sp], #4
    aee8:	00010f88 	.word	0x00010f88

0000aeec <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    aeec:	b500      	push	{lr}
    aeee:	b085      	sub	sp, #20
    aef0:	9001      	str	r0, [sp, #4]
    aef2:	4608      	mov	r0, r1
    aef4:	4611      	mov	r1, r2
    aef6:	461a      	mov	r2, r3
    aef8:	4603      	mov	r3, r0
    aefa:	f88d 3003 	strb.w	r3, [sp, #3]
    aefe:	460b      	mov	r3, r1
    af00:	f88d 3002 	strb.w	r3, [sp, #2]
    af04:	4613      	mov	r3, r2
    af06:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    af0a:	4a10      	ldr	r2, [pc, #64]	; (af4c <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    af0c:	9b01      	ldr	r3, [sp, #4]
    af0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af12:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    af14:	f89d 3002 	ldrb.w	r3, [sp, #2]
    af18:	2201      	movs	r2, #1
    af1a:	fa02 f303 	lsl.w	r3, r2, r3
    af1e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    af20:	9b02      	ldr	r3, [sp, #8]
    af22:	041b      	lsls	r3, r3, #16
    af24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    af28:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    af2a:	f001 ff07 	bl	cd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    af2e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    af32:	f89d 1003 	ldrb.w	r1, [sp, #3]
    af36:	9a02      	ldr	r2, [sp, #8]
    af38:	9803      	ldr	r0, [sp, #12]
    af3a:	f7ff fcb9 	bl	a8b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    af3e:	f001 ff29 	bl	cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    af42:	bf00      	nop
    af44:	b005      	add	sp, #20
    af46:	f85d fb04 	ldr.w	pc, [sp], #4
    af4a:	bf00      	nop
    af4c:	00010f88 	.word	0x00010f88

0000af50 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    af50:	b500      	push	{lr}
    af52:	b085      	sub	sp, #20
    af54:	9001      	str	r0, [sp, #4]
    af56:	4608      	mov	r0, r1
    af58:	4611      	mov	r1, r2
    af5a:	461a      	mov	r2, r3
    af5c:	4603      	mov	r3, r0
    af5e:	f88d 3003 	strb.w	r3, [sp, #3]
    af62:	460b      	mov	r3, r1
    af64:	f88d 3002 	strb.w	r3, [sp, #2]
    af68:	4613      	mov	r3, r2
    af6a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    af6e:	4a0f      	ldr	r2, [pc, #60]	; (afac <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af76:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    af78:	f89d 3002 	ldrb.w	r3, [sp, #2]
    af7c:	2201      	movs	r2, #1
    af7e:	fa02 f303 	lsl.w	r3, r2, r3
    af82:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    af84:	9b02      	ldr	r3, [sp, #8]
    af86:	b2db      	uxtb	r3, r3
    af88:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    af8a:	f001 ff29 	bl	cde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    af8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    af92:	f89d 1003 	ldrb.w	r1, [sp, #3]
    af96:	9a02      	ldr	r2, [sp, #8]
    af98:	9803      	ldr	r0, [sp, #12]
    af9a:	f7ff fc89 	bl	a8b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    af9e:	f001 ff4b 	bl	ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    afa2:	bf00      	nop
    afa4:	b005      	add	sp, #20
    afa6:	f85d fb04 	ldr.w	pc, [sp], #4
    afaa:	bf00      	nop
    afac:	00010f88 	.word	0x00010f88

0000afb0 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    afb0:	b500      	push	{lr}
    afb2:	b085      	sub	sp, #20
    afb4:	9001      	str	r0, [sp, #4]
    afb6:	4608      	mov	r0, r1
    afb8:	4611      	mov	r1, r2
    afba:	461a      	mov	r2, r3
    afbc:	4603      	mov	r3, r0
    afbe:	f88d 3003 	strb.w	r3, [sp, #3]
    afc2:	460b      	mov	r3, r1
    afc4:	f88d 3002 	strb.w	r3, [sp, #2]
    afc8:	4613      	mov	r3, r2
    afca:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    afce:	4a0f      	ldr	r2, [pc, #60]	; (b00c <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    afd0:	9b01      	ldr	r3, [sp, #4]
    afd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afd6:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    afd8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    afdc:	2201      	movs	r2, #1
    afde:	fa02 f303 	lsl.w	r3, r2, r3
    afe2:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    afe4:	9b02      	ldr	r3, [sp, #8]
    afe6:	021b      	lsls	r3, r3, #8
    afe8:	b29b      	uxth	r3, r3
    afea:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    afec:	f001 ff4a 	bl	ce84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    aff0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    aff4:	f89d 1003 	ldrb.w	r1, [sp, #3]
    aff8:	9a02      	ldr	r2, [sp, #8]
    affa:	9803      	ldr	r0, [sp, #12]
    affc:	f7ff fc58 	bl	a8b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    b000:	f001 ff6c 	bl	cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    b004:	bf00      	nop
    b006:	b005      	add	sp, #20
    b008:	f85d fb04 	ldr.w	pc, [sp], #4
    b00c:	00010f88 	.word	0x00010f88

0000b010 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    b010:	b410      	push	{r4}
    b012:	b085      	sub	sp, #20
    b014:	9001      	str	r0, [sp, #4]
    b016:	4608      	mov	r0, r1
    b018:	4611      	mov	r1, r2
    b01a:	461a      	mov	r2, r3
    b01c:	4603      	mov	r3, r0
    b01e:	f88d 3003 	strb.w	r3, [sp, #3]
    b022:	460b      	mov	r3, r1
    b024:	f88d 3002 	strb.w	r3, [sp, #2]
    b028:	4613      	mov	r3, r2
    b02a:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b02e:	4a0c      	ldr	r2, [pc, #48]	; (b060 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    b030:	9b01      	ldr	r3, [sp, #4]
    b032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b036:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    b038:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b03c:	f89d 4002 	ldrb.w	r4, [sp, #2]
    b040:	f8bd 0000 	ldrh.w	r0, [sp]
    b044:	9903      	ldr	r1, [sp, #12]
    b046:	4613      	mov	r3, r2
    b048:	009b      	lsls	r3, r3, #2
    b04a:	4413      	add	r3, r2
    b04c:	005b      	lsls	r3, r3, #1
    b04e:	4423      	add	r3, r4
    b050:	3306      	adds	r3, #6
    b052:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    b056:	bf00      	nop
    b058:	b005      	add	sp, #20
    b05a:	f85d 4b04 	ldr.w	r4, [sp], #4
    b05e:	4770      	bx	lr
    b060:	00010f88 	.word	0x00010f88

0000b064 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    b064:	b500      	push	{lr}
    b066:	b087      	sub	sp, #28
    b068:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b06a:	4a19      	ldr	r2, [pc, #100]	; (b0d0 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    b06c:	9b01      	ldr	r3, [sp, #4]
    b06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b072:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    b074:	2300      	movs	r3, #0
    b076:	f88d 300c 	strb.w	r3, [sp, #12]
    b07a:	2300      	movs	r3, #0
    b07c:	f88d 300d 	strb.w	r3, [sp, #13]
    b080:	2300      	movs	r3, #0
    b082:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    b086:	f001 fdb5 	bl	cbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b08a:	9804      	ldr	r0, [sp, #16]
    b08c:	f7ff fc4f 	bl	a92e <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    b090:	2100      	movs	r1, #0
    b092:	9804      	ldr	r0, [sp, #16]
    b094:	f7ff fc56 	bl	a944 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    b098:	f001 fdd8 	bl	cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b09c:	2300      	movs	r3, #0
    b09e:	f88d 3017 	strb.w	r3, [sp, #23]
    b0a2:	e00b      	b.n	b0bc <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    b0a4:	aa03      	add	r2, sp, #12
    b0a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b0aa:	4619      	mov	r1, r3
    b0ac:	9804      	ldr	r0, [sp, #16]
    b0ae:	f000 f899 	bl	b1e4 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b0b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b0b6:	3301      	adds	r3, #1
    b0b8:	f88d 3017 	strb.w	r3, [sp, #23]
    b0bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b0c0:	2b01      	cmp	r3, #1
    b0c2:	d9ef      	bls.n	b0a4 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    b0c4:	bf00      	nop
    b0c6:	bf00      	nop
    b0c8:	b007      	add	sp, #28
    b0ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b0ce:	bf00      	nop
    b0d0:	00010f88 	.word	0x00010f88

0000b0d4 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    b0d4:	b500      	push	{lr}
    b0d6:	b087      	sub	sp, #28
    b0d8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b0da:	4a40      	ldr	r2, [pc, #256]	; (b1dc <Pdb_Adc_Ip_IRQHandler+0x108>)
    b0dc:	9b01      	ldr	r3, [sp, #4]
    b0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e2:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    b0e4:	4a3e      	ldr	r2, [pc, #248]	; (b1e0 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b0e6:	9b01      	ldr	r3, [sp, #4]
    b0e8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d04d      	beq.n	b18c <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    b0f0:	9b04      	ldr	r3, [sp, #16]
    b0f2:	681b      	ldr	r3, [r3, #0]
    b0f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d06a      	beq.n	b1d2 <Pdb_Adc_Ip_IRQHandler+0xfe>
    b0fc:	4a38      	ldr	r2, [pc, #224]	; (b1e0 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b0fe:	9b01      	ldr	r3, [sp, #4]
    b100:	00db      	lsls	r3, r3, #3
    b102:	4413      	add	r3, r2
    b104:	685b      	ldr	r3, [r3, #4]
    b106:	2b00      	cmp	r3, #0
    b108:	d063      	beq.n	b1d2 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b10a:	2300      	movs	r3, #0
    b10c:	f88d 3017 	strb.w	r3, [sp, #23]
    b110:	e037      	b.n	b182 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    b112:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b116:	9904      	ldr	r1, [sp, #16]
    b118:	4613      	mov	r3, r2
    b11a:	009b      	lsls	r3, r3, #2
    b11c:	4413      	add	r3, r2
    b11e:	00db      	lsls	r3, r3, #3
    b120:	440b      	add	r3, r1
    b122:	3314      	adds	r3, #20
    b124:	681b      	ldr	r3, [r3, #0]
    b126:	b29b      	uxth	r3, r3
    b128:	b2db      	uxtb	r3, r3
    b12a:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    b12e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b132:	2b00      	cmp	r3, #0
    b134:	d020      	beq.n	b178 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b136:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b13a:	9904      	ldr	r1, [sp, #16]
    b13c:	4613      	mov	r3, r2
    b13e:	009b      	lsls	r3, r3, #2
    b140:	4413      	add	r3, r2
    b142:	00db      	lsls	r3, r3, #3
    b144:	440b      	add	r3, r1
    b146:	3314      	adds	r3, #20
    b148:	681b      	ldr	r3, [r3, #0]
    b14a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b14e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b152:	9804      	ldr	r0, [sp, #16]
    b154:	4613      	mov	r3, r2
    b156:	009b      	lsls	r3, r3, #2
    b158:	4413      	add	r3, r2
    b15a:	00db      	lsls	r3, r3, #3
    b15c:	4403      	add	r3, r0
    b15e:	3314      	adds	r3, #20
    b160:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    b162:	4a1f      	ldr	r2, [pc, #124]	; (b1e0 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b164:	9b01      	ldr	r3, [sp, #4]
    b166:	00db      	lsls	r3, r3, #3
    b168:	4413      	add	r3, r2
    b16a:	685b      	ldr	r3, [r3, #4]
    b16c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b170:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b174:	4610      	mov	r0, r2
    b176:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b178:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b17c:	3301      	adds	r3, #1
    b17e:	f88d 3017 	strb.w	r3, [sp, #23]
    b182:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b186:	2b01      	cmp	r3, #1
    b188:	d9c3      	bls.n	b112 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    b18a:	e022      	b.n	b1d2 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b18c:	2300      	movs	r3, #0
    b18e:	f88d 3017 	strb.w	r3, [sp, #23]
    b192:	e01a      	b.n	b1ca <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b194:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b198:	9904      	ldr	r1, [sp, #16]
    b19a:	4613      	mov	r3, r2
    b19c:	009b      	lsls	r3, r3, #2
    b19e:	4413      	add	r3, r2
    b1a0:	00db      	lsls	r3, r3, #3
    b1a2:	440b      	add	r3, r1
    b1a4:	3314      	adds	r3, #20
    b1a6:	681b      	ldr	r3, [r3, #0]
    b1a8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b1ac:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b1b0:	9804      	ldr	r0, [sp, #16]
    b1b2:	4613      	mov	r3, r2
    b1b4:	009b      	lsls	r3, r3, #2
    b1b6:	4413      	add	r3, r2
    b1b8:	00db      	lsls	r3, r3, #3
    b1ba:	4403      	add	r3, r0
    b1bc:	3314      	adds	r3, #20
    b1be:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b1c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b1c4:	3301      	adds	r3, #1
    b1c6:	f88d 3017 	strb.w	r3, [sp, #23]
    b1ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b1ce:	2b01      	cmp	r3, #1
    b1d0:	d9e0      	bls.n	b194 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    b1d2:	bf00      	nop
    b1d4:	b007      	add	sp, #28
    b1d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b1da:	bf00      	nop
    b1dc:	00010f88 	.word	0x00010f88
    b1e0:	1fff8dc4 	.word	0x1fff8dc4

0000b1e4 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    b1e4:	b500      	push	{lr}
    b1e6:	b085      	sub	sp, #20
    b1e8:	9003      	str	r0, [sp, #12]
    b1ea:	460b      	mov	r3, r1
    b1ec:	9201      	str	r2, [sp, #4]
    b1ee:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    b1f2:	f001 fe99 	bl	cf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    b1f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1fa:	9a01      	ldr	r2, [sp, #4]
    b1fc:	4619      	mov	r1, r3
    b1fe:	9803      	ldr	r0, [sp, #12]
    b200:	f7ff fbb9 	bl	a976 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    b204:	f001 febc 	bl	cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    b208:	f001 ff32 	bl	d070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    b20c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b210:	22ff      	movs	r2, #255	; 0xff
    b212:	4619      	mov	r1, r3
    b214:	9803      	ldr	r0, [sp, #12]
    b216:	f7ff fbe6 	bl	a9e6 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b21a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b21e:	9903      	ldr	r1, [sp, #12]
    b220:	4613      	mov	r3, r2
    b222:	009b      	lsls	r3, r3, #2
    b224:	4413      	add	r3, r2
    b226:	00db      	lsls	r3, r3, #3
    b228:	440b      	add	r3, r1
    b22a:	3314      	adds	r3, #20
    b22c:	681b      	ldr	r3, [r3, #0]
    b22e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b236:	9803      	ldr	r0, [sp, #12]
    b238:	4613      	mov	r3, r2
    b23a:	009b      	lsls	r3, r3, #2
    b23c:	4413      	add	r3, r2
    b23e:	00db      	lsls	r3, r3, #3
    b240:	4403      	add	r3, r0
    b242:	3314      	adds	r3, #20
    b244:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    b246:	f001 ff3f 	bl	d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    b24a:	bf00      	nop
    b24c:	b005      	add	sp, #20
    b24e:	f85d fb04 	ldr.w	pc, [sp], #4
    b252:	bf00      	nop

0000b254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    b254:	b500      	push	{lr}
    b256:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b258:	f7f5 fcbc 	bl	bd4 <Sys_GetCoreID>
    b25c:	4603      	mov	r3, r0
    b25e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    b260:	4a10      	ldr	r2, [pc, #64]	; (b2a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    b262:	9b01      	ldr	r3, [sp, #4]
    b264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b268:	2b00      	cmp	r3, #0
    b26a:	d10d      	bne.n	b288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b26c:	f7f5 fbc8 	bl	a00 <Adc_schm_read_msr>
    b270:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b272:	9b00      	ldr	r3, [sp, #0]
    b274:	f003 0301 	and.w	r3, r3, #1
    b278:	2b00      	cmp	r3, #0
    b27a:	d100      	bne.n	b27e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b27c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    b27e:	490a      	ldr	r1, [pc, #40]	; (b2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    b280:	9b01      	ldr	r3, [sp, #4]
    b282:	9a00      	ldr	r2, [sp, #0]
    b284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    b288:	4a06      	ldr	r2, [pc, #24]	; (b2a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    b28a:	9b01      	ldr	r3, [sp, #4]
    b28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b290:	1c5a      	adds	r2, r3, #1
    b292:	4904      	ldr	r1, [pc, #16]	; (b2a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    b294:	9b01      	ldr	r3, [sp, #4]
    b296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b29a:	bf00      	nop
    b29c:	b003      	add	sp, #12
    b29e:	f85d fb04 	ldr.w	pc, [sp], #4
    b2a2:	bf00      	nop
    b2a4:	1fff8dd8 	.word	0x1fff8dd8
    b2a8:	1fff8dd4 	.word	0x1fff8dd4

0000b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    b2ac:	b500      	push	{lr}
    b2ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2b0:	f7f5 fc90 	bl	bd4 <Sys_GetCoreID>
    b2b4:	4603      	mov	r3, r0
    b2b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    b2b8:	4a0d      	ldr	r2, [pc, #52]	; (b2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    b2ba:	9b01      	ldr	r3, [sp, #4]
    b2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c0:	1e5a      	subs	r2, r3, #1
    b2c2:	490b      	ldr	r1, [pc, #44]	; (b2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    b2c4:	9b01      	ldr	r3, [sp, #4]
    b2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    b2ca:	4a0a      	ldr	r2, [pc, #40]	; (b2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    b2cc:	9b01      	ldr	r3, [sp, #4]
    b2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2d2:	f003 0301 	and.w	r3, r3, #1
    b2d6:	2b00      	cmp	r3, #0
    b2d8:	d106      	bne.n	b2e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    b2da:	4a05      	ldr	r2, [pc, #20]	; (b2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    b2dc:	9b01      	ldr	r3, [sp, #4]
    b2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d100      	bne.n	b2e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2e8:	bf00      	nop
    b2ea:	b003      	add	sp, #12
    b2ec:	f85d fb04 	ldr.w	pc, [sp], #4
    b2f0:	1fff8dd8 	.word	0x1fff8dd8
    b2f4:	1fff8dd4 	.word	0x1fff8dd4

0000b2f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    b2f8:	b500      	push	{lr}
    b2fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2fc:	f7f5 fc6a 	bl	bd4 <Sys_GetCoreID>
    b300:	4603      	mov	r3, r0
    b302:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    b304:	4a10      	ldr	r2, [pc, #64]	; (b348 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    b306:	9b01      	ldr	r3, [sp, #4]
    b308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b30c:	2b00      	cmp	r3, #0
    b30e:	d10d      	bne.n	b32c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b310:	f7f5 fb76 	bl	a00 <Adc_schm_read_msr>
    b314:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b316:	9b00      	ldr	r3, [sp, #0]
    b318:	f003 0301 	and.w	r3, r3, #1
    b31c:	2b00      	cmp	r3, #0
    b31e:	d100      	bne.n	b322 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b320:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    b322:	490a      	ldr	r1, [pc, #40]	; (b34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	9a00      	ldr	r2, [sp, #0]
    b328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    b32c:	4a06      	ldr	r2, [pc, #24]	; (b348 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    b32e:	9b01      	ldr	r3, [sp, #4]
    b330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b334:	1c5a      	adds	r2, r3, #1
    b336:	4904      	ldr	r1, [pc, #16]	; (b348 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    b338:	9b01      	ldr	r3, [sp, #4]
    b33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b33e:	bf00      	nop
    b340:	b003      	add	sp, #12
    b342:	f85d fb04 	ldr.w	pc, [sp], #4
    b346:	bf00      	nop
    b348:	1fff8de0 	.word	0x1fff8de0
    b34c:	1fff8ddc 	.word	0x1fff8ddc

0000b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    b350:	b500      	push	{lr}
    b352:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b354:	f7f5 fc3e 	bl	bd4 <Sys_GetCoreID>
    b358:	4603      	mov	r3, r0
    b35a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    b35c:	4a0d      	ldr	r2, [pc, #52]	; (b394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b35e:	9b01      	ldr	r3, [sp, #4]
    b360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b364:	1e5a      	subs	r2, r3, #1
    b366:	490b      	ldr	r1, [pc, #44]	; (b394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b368:	9b01      	ldr	r3, [sp, #4]
    b36a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    b36e:	4a0a      	ldr	r2, [pc, #40]	; (b398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    b370:	9b01      	ldr	r3, [sp, #4]
    b372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b376:	f003 0301 	and.w	r3, r3, #1
    b37a:	2b00      	cmp	r3, #0
    b37c:	d106      	bne.n	b38c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    b37e:	4a05      	ldr	r2, [pc, #20]	; (b394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b380:	9b01      	ldr	r3, [sp, #4]
    b382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b386:	2b00      	cmp	r3, #0
    b388:	d100      	bne.n	b38c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b38a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b38c:	bf00      	nop
    b38e:	b003      	add	sp, #12
    b390:	f85d fb04 	ldr.w	pc, [sp], #4
    b394:	1fff8de0 	.word	0x1fff8de0
    b398:	1fff8ddc 	.word	0x1fff8ddc

0000b39c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    b39c:	b500      	push	{lr}
    b39e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3a0:	f7f5 fc18 	bl	bd4 <Sys_GetCoreID>
    b3a4:	4603      	mov	r3, r0
    b3a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    b3a8:	4a10      	ldr	r2, [pc, #64]	; (b3ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b3aa:	9b01      	ldr	r3, [sp, #4]
    b3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3b0:	2b00      	cmp	r3, #0
    b3b2:	d10d      	bne.n	b3d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3b4:	f7f5 fb24 	bl	a00 <Adc_schm_read_msr>
    b3b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3ba:	9b00      	ldr	r3, [sp, #0]
    b3bc:	f003 0301 	and.w	r3, r3, #1
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d100      	bne.n	b3c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    b3c6:	490a      	ldr	r1, [pc, #40]	; (b3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	9a00      	ldr	r2, [sp, #0]
    b3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    b3d0:	4a06      	ldr	r2, [pc, #24]	; (b3ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b3d2:	9b01      	ldr	r3, [sp, #4]
    b3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d8:	1c5a      	adds	r2, r3, #1
    b3da:	4904      	ldr	r1, [pc, #16]	; (b3ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b3dc:	9b01      	ldr	r3, [sp, #4]
    b3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3e2:	bf00      	nop
    b3e4:	b003      	add	sp, #12
    b3e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ea:	bf00      	nop
    b3ec:	1fff8de8 	.word	0x1fff8de8
    b3f0:	1fff8de4 	.word	0x1fff8de4

0000b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    b3f4:	b500      	push	{lr}
    b3f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3f8:	f7f5 fbec 	bl	bd4 <Sys_GetCoreID>
    b3fc:	4603      	mov	r3, r0
    b3fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    b400:	4a0d      	ldr	r2, [pc, #52]	; (b438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b402:	9b01      	ldr	r3, [sp, #4]
    b404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b408:	1e5a      	subs	r2, r3, #1
    b40a:	490b      	ldr	r1, [pc, #44]	; (b438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b40c:	9b01      	ldr	r3, [sp, #4]
    b40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    b412:	4a0a      	ldr	r2, [pc, #40]	; (b43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    b414:	9b01      	ldr	r3, [sp, #4]
    b416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b41a:	f003 0301 	and.w	r3, r3, #1
    b41e:	2b00      	cmp	r3, #0
    b420:	d106      	bne.n	b430 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    b422:	4a05      	ldr	r2, [pc, #20]	; (b438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b424:	9b01      	ldr	r3, [sp, #4]
    b426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b42a:	2b00      	cmp	r3, #0
    b42c:	d100      	bne.n	b430 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b42e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b430:	bf00      	nop
    b432:	b003      	add	sp, #12
    b434:	f85d fb04 	ldr.w	pc, [sp], #4
    b438:	1fff8de8 	.word	0x1fff8de8
    b43c:	1fff8de4 	.word	0x1fff8de4

0000b440 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b440:	b500      	push	{lr}
    b442:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b444:	f7f5 fbc6 	bl	bd4 <Sys_GetCoreID>
    b448:	4603      	mov	r3, r0
    b44a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    b44c:	4a10      	ldr	r2, [pc, #64]	; (b490 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b44e:	9b01      	ldr	r3, [sp, #4]
    b450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b454:	2b00      	cmp	r3, #0
    b456:	d10d      	bne.n	b474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b458:	f7f5 fad2 	bl	a00 <Adc_schm_read_msr>
    b45c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b45e:	9b00      	ldr	r3, [sp, #0]
    b460:	f003 0301 	and.w	r3, r3, #1
    b464:	2b00      	cmp	r3, #0
    b466:	d100      	bne.n	b46a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b468:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    b46a:	490a      	ldr	r1, [pc, #40]	; (b494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	9a00      	ldr	r2, [sp, #0]
    b470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    b474:	4a06      	ldr	r2, [pc, #24]	; (b490 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47c:	1c5a      	adds	r2, r3, #1
    b47e:	4904      	ldr	r1, [pc, #16]	; (b490 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b480:	9b01      	ldr	r3, [sp, #4]
    b482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b486:	bf00      	nop
    b488:	b003      	add	sp, #12
    b48a:	f85d fb04 	ldr.w	pc, [sp], #4
    b48e:	bf00      	nop
    b490:	1fff8df0 	.word	0x1fff8df0
    b494:	1fff8dec 	.word	0x1fff8dec

0000b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b498:	b500      	push	{lr}
    b49a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b49c:	f7f5 fb9a 	bl	bd4 <Sys_GetCoreID>
    b4a0:	4603      	mov	r3, r0
    b4a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    b4a4:	4a0d      	ldr	r2, [pc, #52]	; (b4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b4a6:	9b01      	ldr	r3, [sp, #4]
    b4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ac:	1e5a      	subs	r2, r3, #1
    b4ae:	490b      	ldr	r1, [pc, #44]	; (b4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b4b0:	9b01      	ldr	r3, [sp, #4]
    b4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    b4b6:	4a0a      	ldr	r2, [pc, #40]	; (b4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    b4b8:	9b01      	ldr	r3, [sp, #4]
    b4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4be:	f003 0301 	and.w	r3, r3, #1
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d106      	bne.n	b4d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    b4c6:	4a05      	ldr	r2, [pc, #20]	; (b4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b4c8:	9b01      	ldr	r3, [sp, #4]
    b4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d100      	bne.n	b4d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4d4:	bf00      	nop
    b4d6:	b003      	add	sp, #12
    b4d8:	f85d fb04 	ldr.w	pc, [sp], #4
    b4dc:	1fff8df0 	.word	0x1fff8df0
    b4e0:	1fff8dec 	.word	0x1fff8dec

0000b4e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b4e4:	b500      	push	{lr}
    b4e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4e8:	f7f5 fb74 	bl	bd4 <Sys_GetCoreID>
    b4ec:	4603      	mov	r3, r0
    b4ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    b4f0:	4a10      	ldr	r2, [pc, #64]	; (b534 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b4f2:	9b01      	ldr	r3, [sp, #4]
    b4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d10d      	bne.n	b518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4fc:	f7f5 fa80 	bl	a00 <Adc_schm_read_msr>
    b500:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b502:	9b00      	ldr	r3, [sp, #0]
    b504:	f003 0301 	and.w	r3, r3, #1
    b508:	2b00      	cmp	r3, #0
    b50a:	d100      	bne.n	b50e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b50c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    b50e:	490a      	ldr	r1, [pc, #40]	; (b538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    b510:	9b01      	ldr	r3, [sp, #4]
    b512:	9a00      	ldr	r2, [sp, #0]
    b514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    b518:	4a06      	ldr	r2, [pc, #24]	; (b534 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b51a:	9b01      	ldr	r3, [sp, #4]
    b51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b520:	1c5a      	adds	r2, r3, #1
    b522:	4904      	ldr	r1, [pc, #16]	; (b534 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b524:	9b01      	ldr	r3, [sp, #4]
    b526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b52a:	bf00      	nop
    b52c:	b003      	add	sp, #12
    b52e:	f85d fb04 	ldr.w	pc, [sp], #4
    b532:	bf00      	nop
    b534:	1fff8df8 	.word	0x1fff8df8
    b538:	1fff8df4 	.word	0x1fff8df4

0000b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b53c:	b500      	push	{lr}
    b53e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b540:	f7f5 fb48 	bl	bd4 <Sys_GetCoreID>
    b544:	4603      	mov	r3, r0
    b546:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    b548:	4a0d      	ldr	r2, [pc, #52]	; (b580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b54a:	9b01      	ldr	r3, [sp, #4]
    b54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b550:	1e5a      	subs	r2, r3, #1
    b552:	490b      	ldr	r1, [pc, #44]	; (b580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b554:	9b01      	ldr	r3, [sp, #4]
    b556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    b55a:	4a0a      	ldr	r2, [pc, #40]	; (b584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    b55c:	9b01      	ldr	r3, [sp, #4]
    b55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b562:	f003 0301 	and.w	r3, r3, #1
    b566:	2b00      	cmp	r3, #0
    b568:	d106      	bne.n	b578 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    b56a:	4a05      	ldr	r2, [pc, #20]	; (b580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b56c:	9b01      	ldr	r3, [sp, #4]
    b56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b572:	2b00      	cmp	r3, #0
    b574:	d100      	bne.n	b578 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b576:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b578:	bf00      	nop
    b57a:	b003      	add	sp, #12
    b57c:	f85d fb04 	ldr.w	pc, [sp], #4
    b580:	1fff8df8 	.word	0x1fff8df8
    b584:	1fff8df4 	.word	0x1fff8df4

0000b588 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b588:	b500      	push	{lr}
    b58a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b58c:	f7f5 fb22 	bl	bd4 <Sys_GetCoreID>
    b590:	4603      	mov	r3, r0
    b592:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    b594:	4a10      	ldr	r2, [pc, #64]	; (b5d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b596:	9b01      	ldr	r3, [sp, #4]
    b598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b59c:	2b00      	cmp	r3, #0
    b59e:	d10d      	bne.n	b5bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5a0:	f7f5 fa2e 	bl	a00 <Adc_schm_read_msr>
    b5a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5a6:	9b00      	ldr	r3, [sp, #0]
    b5a8:	f003 0301 	and.w	r3, r3, #1
    b5ac:	2b00      	cmp	r3, #0
    b5ae:	d100      	bne.n	b5b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b5b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    b5b2:	490a      	ldr	r1, [pc, #40]	; (b5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    b5b4:	9b01      	ldr	r3, [sp, #4]
    b5b6:	9a00      	ldr	r2, [sp, #0]
    b5b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    b5bc:	4a06      	ldr	r2, [pc, #24]	; (b5d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b5be:	9b01      	ldr	r3, [sp, #4]
    b5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c4:	1c5a      	adds	r2, r3, #1
    b5c6:	4904      	ldr	r1, [pc, #16]	; (b5d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b5c8:	9b01      	ldr	r3, [sp, #4]
    b5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5ce:	bf00      	nop
    b5d0:	b003      	add	sp, #12
    b5d2:	f85d fb04 	ldr.w	pc, [sp], #4
    b5d6:	bf00      	nop
    b5d8:	1fff8e00 	.word	0x1fff8e00
    b5dc:	1fff8dfc 	.word	0x1fff8dfc

0000b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b5e0:	b500      	push	{lr}
    b5e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5e4:	f7f5 faf6 	bl	bd4 <Sys_GetCoreID>
    b5e8:	4603      	mov	r3, r0
    b5ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    b5ec:	4a0d      	ldr	r2, [pc, #52]	; (b624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b5ee:	9b01      	ldr	r3, [sp, #4]
    b5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5f4:	1e5a      	subs	r2, r3, #1
    b5f6:	490b      	ldr	r1, [pc, #44]	; (b624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b5f8:	9b01      	ldr	r3, [sp, #4]
    b5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    b5fe:	4a0a      	ldr	r2, [pc, #40]	; (b628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    b600:	9b01      	ldr	r3, [sp, #4]
    b602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b606:	f003 0301 	and.w	r3, r3, #1
    b60a:	2b00      	cmp	r3, #0
    b60c:	d106      	bne.n	b61c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b60e:	4a05      	ldr	r2, [pc, #20]	; (b624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b616:	2b00      	cmp	r3, #0
    b618:	d100      	bne.n	b61c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b61a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b61c:	bf00      	nop
    b61e:	b003      	add	sp, #12
    b620:	f85d fb04 	ldr.w	pc, [sp], #4
    b624:	1fff8e00 	.word	0x1fff8e00
    b628:	1fff8dfc 	.word	0x1fff8dfc

0000b62c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b62c:	b500      	push	{lr}
    b62e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b630:	f7f5 fad0 	bl	bd4 <Sys_GetCoreID>
    b634:	4603      	mov	r3, r0
    b636:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b638:	4a10      	ldr	r2, [pc, #64]	; (b67c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b63a:	9b01      	ldr	r3, [sp, #4]
    b63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b640:	2b00      	cmp	r3, #0
    b642:	d10d      	bne.n	b660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b644:	f7f5 f9dc 	bl	a00 <Adc_schm_read_msr>
    b648:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b64a:	9b00      	ldr	r3, [sp, #0]
    b64c:	f003 0301 	and.w	r3, r3, #1
    b650:	2b00      	cmp	r3, #0
    b652:	d100      	bne.n	b656 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b654:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b656:	490a      	ldr	r1, [pc, #40]	; (b680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	9a00      	ldr	r2, [sp, #0]
    b65c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b660:	4a06      	ldr	r2, [pc, #24]	; (b67c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b662:	9b01      	ldr	r3, [sp, #4]
    b664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b668:	1c5a      	adds	r2, r3, #1
    b66a:	4904      	ldr	r1, [pc, #16]	; (b67c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b66c:	9b01      	ldr	r3, [sp, #4]
    b66e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b672:	bf00      	nop
    b674:	b003      	add	sp, #12
    b676:	f85d fb04 	ldr.w	pc, [sp], #4
    b67a:	bf00      	nop
    b67c:	1fff8e08 	.word	0x1fff8e08
    b680:	1fff8e04 	.word	0x1fff8e04

0000b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b684:	b500      	push	{lr}
    b686:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b688:	f7f5 faa4 	bl	bd4 <Sys_GetCoreID>
    b68c:	4603      	mov	r3, r0
    b68e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b690:	4a0d      	ldr	r2, [pc, #52]	; (b6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b692:	9b01      	ldr	r3, [sp, #4]
    b694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b698:	1e5a      	subs	r2, r3, #1
    b69a:	490b      	ldr	r1, [pc, #44]	; (b6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b69c:	9b01      	ldr	r3, [sp, #4]
    b69e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b6a2:	4a0a      	ldr	r2, [pc, #40]	; (b6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b6a4:	9b01      	ldr	r3, [sp, #4]
    b6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6aa:	f003 0301 	and.w	r3, r3, #1
    b6ae:	2b00      	cmp	r3, #0
    b6b0:	d106      	bne.n	b6c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b6b2:	4a05      	ldr	r2, [pc, #20]	; (b6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b6b4:	9b01      	ldr	r3, [sp, #4]
    b6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d100      	bne.n	b6c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b6be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b6c0:	bf00      	nop
    b6c2:	b003      	add	sp, #12
    b6c4:	f85d fb04 	ldr.w	pc, [sp], #4
    b6c8:	1fff8e08 	.word	0x1fff8e08
    b6cc:	1fff8e04 	.word	0x1fff8e04

0000b6d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b6d0:	b500      	push	{lr}
    b6d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6d4:	f7f5 fa7e 	bl	bd4 <Sys_GetCoreID>
    b6d8:	4603      	mov	r3, r0
    b6da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b6dc:	4a10      	ldr	r2, [pc, #64]	; (b720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b6de:	9b01      	ldr	r3, [sp, #4]
    b6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d10d      	bne.n	b704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6e8:	f7f5 f98a 	bl	a00 <Adc_schm_read_msr>
    b6ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6ee:	9b00      	ldr	r3, [sp, #0]
    b6f0:	f003 0301 	and.w	r3, r3, #1
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	d100      	bne.n	b6fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b6fa:	490a      	ldr	r1, [pc, #40]	; (b724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	9a00      	ldr	r2, [sp, #0]
    b700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b704:	4a06      	ldr	r2, [pc, #24]	; (b720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b706:	9b01      	ldr	r3, [sp, #4]
    b708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b70c:	1c5a      	adds	r2, r3, #1
    b70e:	4904      	ldr	r1, [pc, #16]	; (b720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b710:	9b01      	ldr	r3, [sp, #4]
    b712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b716:	bf00      	nop
    b718:	b003      	add	sp, #12
    b71a:	f85d fb04 	ldr.w	pc, [sp], #4
    b71e:	bf00      	nop
    b720:	1fff8e10 	.word	0x1fff8e10
    b724:	1fff8e0c 	.word	0x1fff8e0c

0000b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b728:	b500      	push	{lr}
    b72a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b72c:	f7f5 fa52 	bl	bd4 <Sys_GetCoreID>
    b730:	4603      	mov	r3, r0
    b732:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b734:	4a0d      	ldr	r2, [pc, #52]	; (b76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b736:	9b01      	ldr	r3, [sp, #4]
    b738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b73c:	1e5a      	subs	r2, r3, #1
    b73e:	490b      	ldr	r1, [pc, #44]	; (b76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b740:	9b01      	ldr	r3, [sp, #4]
    b742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b746:	4a0a      	ldr	r2, [pc, #40]	; (b770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b748:	9b01      	ldr	r3, [sp, #4]
    b74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b74e:	f003 0301 	and.w	r3, r3, #1
    b752:	2b00      	cmp	r3, #0
    b754:	d106      	bne.n	b764 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b756:	4a05      	ldr	r2, [pc, #20]	; (b76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b758:	9b01      	ldr	r3, [sp, #4]
    b75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b75e:	2b00      	cmp	r3, #0
    b760:	d100      	bne.n	b764 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b762:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b764:	bf00      	nop
    b766:	b003      	add	sp, #12
    b768:	f85d fb04 	ldr.w	pc, [sp], #4
    b76c:	1fff8e10 	.word	0x1fff8e10
    b770:	1fff8e0c 	.word	0x1fff8e0c

0000b774 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b774:	b500      	push	{lr}
    b776:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b778:	f7f5 fa2c 	bl	bd4 <Sys_GetCoreID>
    b77c:	4603      	mov	r3, r0
    b77e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b780:	4a10      	ldr	r2, [pc, #64]	; (b7c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b782:	9b01      	ldr	r3, [sp, #4]
    b784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b788:	2b00      	cmp	r3, #0
    b78a:	d10d      	bne.n	b7a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b78c:	f7f5 f938 	bl	a00 <Adc_schm_read_msr>
    b790:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b792:	9b00      	ldr	r3, [sp, #0]
    b794:	f003 0301 	and.w	r3, r3, #1
    b798:	2b00      	cmp	r3, #0
    b79a:	d100      	bne.n	b79e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b79c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b79e:	490a      	ldr	r1, [pc, #40]	; (b7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	9a00      	ldr	r2, [sp, #0]
    b7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b7a8:	4a06      	ldr	r2, [pc, #24]	; (b7c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b7aa:	9b01      	ldr	r3, [sp, #4]
    b7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b0:	1c5a      	adds	r2, r3, #1
    b7b2:	4904      	ldr	r1, [pc, #16]	; (b7c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b7b4:	9b01      	ldr	r3, [sp, #4]
    b7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b7ba:	bf00      	nop
    b7bc:	b003      	add	sp, #12
    b7be:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c2:	bf00      	nop
    b7c4:	1fff8e18 	.word	0x1fff8e18
    b7c8:	1fff8e14 	.word	0x1fff8e14

0000b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b7cc:	b500      	push	{lr}
    b7ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7d0:	f7f5 fa00 	bl	bd4 <Sys_GetCoreID>
    b7d4:	4603      	mov	r3, r0
    b7d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b7d8:	4a0d      	ldr	r2, [pc, #52]	; (b810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b7da:	9b01      	ldr	r3, [sp, #4]
    b7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e0:	1e5a      	subs	r2, r3, #1
    b7e2:	490b      	ldr	r1, [pc, #44]	; (b810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b7e4:	9b01      	ldr	r3, [sp, #4]
    b7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b7ea:	4a0a      	ldr	r2, [pc, #40]	; (b814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b7ec:	9b01      	ldr	r3, [sp, #4]
    b7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f2:	f003 0301 	and.w	r3, r3, #1
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d106      	bne.n	b808 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b7fa:	4a05      	ldr	r2, [pc, #20]	; (b810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b7fc:	9b01      	ldr	r3, [sp, #4]
    b7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b802:	2b00      	cmp	r3, #0
    b804:	d100      	bne.n	b808 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b806:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b808:	bf00      	nop
    b80a:	b003      	add	sp, #12
    b80c:	f85d fb04 	ldr.w	pc, [sp], #4
    b810:	1fff8e18 	.word	0x1fff8e18
    b814:	1fff8e14 	.word	0x1fff8e14

0000b818 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b818:	b500      	push	{lr}
    b81a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b81c:	f7f5 f9da 	bl	bd4 <Sys_GetCoreID>
    b820:	4603      	mov	r3, r0
    b822:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b824:	4a10      	ldr	r2, [pc, #64]	; (b868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b826:	9b01      	ldr	r3, [sp, #4]
    b828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b82c:	2b00      	cmp	r3, #0
    b82e:	d10d      	bne.n	b84c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b830:	f7f5 f8e6 	bl	a00 <Adc_schm_read_msr>
    b834:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b836:	9b00      	ldr	r3, [sp, #0]
    b838:	f003 0301 	and.w	r3, r3, #1
    b83c:	2b00      	cmp	r3, #0
    b83e:	d100      	bne.n	b842 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b840:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b842:	490a      	ldr	r1, [pc, #40]	; (b86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b844:	9b01      	ldr	r3, [sp, #4]
    b846:	9a00      	ldr	r2, [sp, #0]
    b848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b84c:	4a06      	ldr	r2, [pc, #24]	; (b868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b84e:	9b01      	ldr	r3, [sp, #4]
    b850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b854:	1c5a      	adds	r2, r3, #1
    b856:	4904      	ldr	r1, [pc, #16]	; (b868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b858:	9b01      	ldr	r3, [sp, #4]
    b85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b85e:	bf00      	nop
    b860:	b003      	add	sp, #12
    b862:	f85d fb04 	ldr.w	pc, [sp], #4
    b866:	bf00      	nop
    b868:	1fff8e20 	.word	0x1fff8e20
    b86c:	1fff8e1c 	.word	0x1fff8e1c

0000b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b870:	b500      	push	{lr}
    b872:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b874:	f7f5 f9ae 	bl	bd4 <Sys_GetCoreID>
    b878:	4603      	mov	r3, r0
    b87a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b87c:	4a0d      	ldr	r2, [pc, #52]	; (b8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b884:	1e5a      	subs	r2, r3, #1
    b886:	490b      	ldr	r1, [pc, #44]	; (b8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b888:	9b01      	ldr	r3, [sp, #4]
    b88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b88e:	4a0a      	ldr	r2, [pc, #40]	; (b8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b890:	9b01      	ldr	r3, [sp, #4]
    b892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b896:	f003 0301 	and.w	r3, r3, #1
    b89a:	2b00      	cmp	r3, #0
    b89c:	d106      	bne.n	b8ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b89e:	4a05      	ldr	r2, [pc, #20]	; (b8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b8a0:	9b01      	ldr	r3, [sp, #4]
    b8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	d100      	bne.n	b8ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b8aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b8ac:	bf00      	nop
    b8ae:	b003      	add	sp, #12
    b8b0:	f85d fb04 	ldr.w	pc, [sp], #4
    b8b4:	1fff8e20 	.word	0x1fff8e20
    b8b8:	1fff8e1c 	.word	0x1fff8e1c

0000b8bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b8bc:	b500      	push	{lr}
    b8be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8c0:	f7f5 f988 	bl	bd4 <Sys_GetCoreID>
    b8c4:	4603      	mov	r3, r0
    b8c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b8c8:	4a10      	ldr	r2, [pc, #64]	; (b90c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b8ca:	9b01      	ldr	r3, [sp, #4]
    b8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8d0:	2b00      	cmp	r3, #0
    b8d2:	d10d      	bne.n	b8f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b8d4:	f7f5 f894 	bl	a00 <Adc_schm_read_msr>
    b8d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b8da:	9b00      	ldr	r3, [sp, #0]
    b8dc:	f003 0301 	and.w	r3, r3, #1
    b8e0:	2b00      	cmp	r3, #0
    b8e2:	d100      	bne.n	b8e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b8e6:	490a      	ldr	r1, [pc, #40]	; (b910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b8e8:	9b01      	ldr	r3, [sp, #4]
    b8ea:	9a00      	ldr	r2, [sp, #0]
    b8ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b8f0:	4a06      	ldr	r2, [pc, #24]	; (b90c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b8f2:	9b01      	ldr	r3, [sp, #4]
    b8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8f8:	1c5a      	adds	r2, r3, #1
    b8fa:	4904      	ldr	r1, [pc, #16]	; (b90c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b8fc:	9b01      	ldr	r3, [sp, #4]
    b8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b902:	bf00      	nop
    b904:	b003      	add	sp, #12
    b906:	f85d fb04 	ldr.w	pc, [sp], #4
    b90a:	bf00      	nop
    b90c:	1fff8e28 	.word	0x1fff8e28
    b910:	1fff8e24 	.word	0x1fff8e24

0000b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b914:	b500      	push	{lr}
    b916:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b918:	f7f5 f95c 	bl	bd4 <Sys_GetCoreID>
    b91c:	4603      	mov	r3, r0
    b91e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b920:	4a0d      	ldr	r2, [pc, #52]	; (b958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b922:	9b01      	ldr	r3, [sp, #4]
    b924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b928:	1e5a      	subs	r2, r3, #1
    b92a:	490b      	ldr	r1, [pc, #44]	; (b958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b92c:	9b01      	ldr	r3, [sp, #4]
    b92e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b932:	4a0a      	ldr	r2, [pc, #40]	; (b95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b934:	9b01      	ldr	r3, [sp, #4]
    b936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b93a:	f003 0301 	and.w	r3, r3, #1
    b93e:	2b00      	cmp	r3, #0
    b940:	d106      	bne.n	b950 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b942:	4a05      	ldr	r2, [pc, #20]	; (b958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b944:	9b01      	ldr	r3, [sp, #4]
    b946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b94a:	2b00      	cmp	r3, #0
    b94c:	d100      	bne.n	b950 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b94e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b950:	bf00      	nop
    b952:	b003      	add	sp, #12
    b954:	f85d fb04 	ldr.w	pc, [sp], #4
    b958:	1fff8e28 	.word	0x1fff8e28
    b95c:	1fff8e24 	.word	0x1fff8e24

0000b960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b960:	b500      	push	{lr}
    b962:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b964:	f7f5 f936 	bl	bd4 <Sys_GetCoreID>
    b968:	4603      	mov	r3, r0
    b96a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b96c:	4a10      	ldr	r2, [pc, #64]	; (b9b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b96e:	9b01      	ldr	r3, [sp, #4]
    b970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b974:	2b00      	cmp	r3, #0
    b976:	d10d      	bne.n	b994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b978:	f7f5 f842 	bl	a00 <Adc_schm_read_msr>
    b97c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b97e:	9b00      	ldr	r3, [sp, #0]
    b980:	f003 0301 	and.w	r3, r3, #1
    b984:	2b00      	cmp	r3, #0
    b986:	d100      	bne.n	b98a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b988:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b98a:	490a      	ldr	r1, [pc, #40]	; (b9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b98c:	9b01      	ldr	r3, [sp, #4]
    b98e:	9a00      	ldr	r2, [sp, #0]
    b990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b994:	4a06      	ldr	r2, [pc, #24]	; (b9b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b996:	9b01      	ldr	r3, [sp, #4]
    b998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b99c:	1c5a      	adds	r2, r3, #1
    b99e:	4904      	ldr	r1, [pc, #16]	; (b9b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b9a0:	9b01      	ldr	r3, [sp, #4]
    b9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b9a6:	bf00      	nop
    b9a8:	b003      	add	sp, #12
    b9aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b9ae:	bf00      	nop
    b9b0:	1fff8e30 	.word	0x1fff8e30
    b9b4:	1fff8e2c 	.word	0x1fff8e2c

0000b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b9b8:	b500      	push	{lr}
    b9ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9bc:	f7f5 f90a 	bl	bd4 <Sys_GetCoreID>
    b9c0:	4603      	mov	r3, r0
    b9c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b9c4:	4a0d      	ldr	r2, [pc, #52]	; (b9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b9c6:	9b01      	ldr	r3, [sp, #4]
    b9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9cc:	1e5a      	subs	r2, r3, #1
    b9ce:	490b      	ldr	r1, [pc, #44]	; (b9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b9d0:	9b01      	ldr	r3, [sp, #4]
    b9d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b9d6:	4a0a      	ldr	r2, [pc, #40]	; (ba00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b9d8:	9b01      	ldr	r3, [sp, #4]
    b9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9de:	f003 0301 	and.w	r3, r3, #1
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	d106      	bne.n	b9f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b9e6:	4a05      	ldr	r2, [pc, #20]	; (b9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b9e8:	9b01      	ldr	r3, [sp, #4]
    b9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	d100      	bne.n	b9f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9f4:	bf00      	nop
    b9f6:	b003      	add	sp, #12
    b9f8:	f85d fb04 	ldr.w	pc, [sp], #4
    b9fc:	1fff8e30 	.word	0x1fff8e30
    ba00:	1fff8e2c 	.word	0x1fff8e2c

0000ba04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    ba04:	b500      	push	{lr}
    ba06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba08:	f7f5 f8e4 	bl	bd4 <Sys_GetCoreID>
    ba0c:	4603      	mov	r3, r0
    ba0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    ba10:	4a10      	ldr	r2, [pc, #64]	; (ba54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    ba12:	9b01      	ldr	r3, [sp, #4]
    ba14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba18:	2b00      	cmp	r3, #0
    ba1a:	d10d      	bne.n	ba38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba1c:	f7f4 fff0 	bl	a00 <Adc_schm_read_msr>
    ba20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba22:	9b00      	ldr	r3, [sp, #0]
    ba24:	f003 0301 	and.w	r3, r3, #1
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d100      	bne.n	ba2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    ba2e:	490a      	ldr	r1, [pc, #40]	; (ba58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    ba30:	9b01      	ldr	r3, [sp, #4]
    ba32:	9a00      	ldr	r2, [sp, #0]
    ba34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    ba38:	4a06      	ldr	r2, [pc, #24]	; (ba54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    ba3a:	9b01      	ldr	r3, [sp, #4]
    ba3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba40:	1c5a      	adds	r2, r3, #1
    ba42:	4904      	ldr	r1, [pc, #16]	; (ba54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    ba44:	9b01      	ldr	r3, [sp, #4]
    ba46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba4a:	bf00      	nop
    ba4c:	b003      	add	sp, #12
    ba4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ba52:	bf00      	nop
    ba54:	1fff8e38 	.word	0x1fff8e38
    ba58:	1fff8e34 	.word	0x1fff8e34

0000ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    ba5c:	b500      	push	{lr}
    ba5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba60:	f7f5 f8b8 	bl	bd4 <Sys_GetCoreID>
    ba64:	4603      	mov	r3, r0
    ba66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    ba68:	4a0d      	ldr	r2, [pc, #52]	; (baa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    ba6a:	9b01      	ldr	r3, [sp, #4]
    ba6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba70:	1e5a      	subs	r2, r3, #1
    ba72:	490b      	ldr	r1, [pc, #44]	; (baa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    ba74:	9b01      	ldr	r3, [sp, #4]
    ba76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ba7a:	4a0a      	ldr	r2, [pc, #40]	; (baa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    ba7c:	9b01      	ldr	r3, [sp, #4]
    ba7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba82:	f003 0301 	and.w	r3, r3, #1
    ba86:	2b00      	cmp	r3, #0
    ba88:	d106      	bne.n	ba98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    ba8a:	4a05      	ldr	r2, [pc, #20]	; (baa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    ba8c:	9b01      	ldr	r3, [sp, #4]
    ba8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba92:	2b00      	cmp	r3, #0
    ba94:	d100      	bne.n	ba98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba98:	bf00      	nop
    ba9a:	b003      	add	sp, #12
    ba9c:	f85d fb04 	ldr.w	pc, [sp], #4
    baa0:	1fff8e38 	.word	0x1fff8e38
    baa4:	1fff8e34 	.word	0x1fff8e34

0000baa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    baa8:	b500      	push	{lr}
    baaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    baac:	f7f5 f892 	bl	bd4 <Sys_GetCoreID>
    bab0:	4603      	mov	r3, r0
    bab2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    bab4:	4a10      	ldr	r2, [pc, #64]	; (baf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    bab6:	9b01      	ldr	r3, [sp, #4]
    bab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    babc:	2b00      	cmp	r3, #0
    babe:	d10d      	bne.n	badc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bac0:	f7f4 ff9e 	bl	a00 <Adc_schm_read_msr>
    bac4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bac6:	9b00      	ldr	r3, [sp, #0]
    bac8:	f003 0301 	and.w	r3, r3, #1
    bacc:	2b00      	cmp	r3, #0
    bace:	d100      	bne.n	bad2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bad0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    bad2:	490a      	ldr	r1, [pc, #40]	; (bafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    bad4:	9b01      	ldr	r3, [sp, #4]
    bad6:	9a00      	ldr	r2, [sp, #0]
    bad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    badc:	4a06      	ldr	r2, [pc, #24]	; (baf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    bade:	9b01      	ldr	r3, [sp, #4]
    bae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae4:	1c5a      	adds	r2, r3, #1
    bae6:	4904      	ldr	r1, [pc, #16]	; (baf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    bae8:	9b01      	ldr	r3, [sp, #4]
    baea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    baee:	bf00      	nop
    baf0:	b003      	add	sp, #12
    baf2:	f85d fb04 	ldr.w	pc, [sp], #4
    baf6:	bf00      	nop
    baf8:	1fff8e40 	.word	0x1fff8e40
    bafc:	1fff8e3c 	.word	0x1fff8e3c

0000bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    bb00:	b500      	push	{lr}
    bb02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb04:	f7f5 f866 	bl	bd4 <Sys_GetCoreID>
    bb08:	4603      	mov	r3, r0
    bb0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    bb0c:	4a0d      	ldr	r2, [pc, #52]	; (bb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    bb0e:	9b01      	ldr	r3, [sp, #4]
    bb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb14:	1e5a      	subs	r2, r3, #1
    bb16:	490b      	ldr	r1, [pc, #44]	; (bb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    bb18:	9b01      	ldr	r3, [sp, #4]
    bb1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    bb1e:	4a0a      	ldr	r2, [pc, #40]	; (bb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    bb20:	9b01      	ldr	r3, [sp, #4]
    bb22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb26:	f003 0301 	and.w	r3, r3, #1
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d106      	bne.n	bb3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    bb2e:	4a05      	ldr	r2, [pc, #20]	; (bb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    bb30:	9b01      	ldr	r3, [sp, #4]
    bb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb36:	2b00      	cmp	r3, #0
    bb38:	d100      	bne.n	bb3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb3c:	bf00      	nop
    bb3e:	b003      	add	sp, #12
    bb40:	f85d fb04 	ldr.w	pc, [sp], #4
    bb44:	1fff8e40 	.word	0x1fff8e40
    bb48:	1fff8e3c 	.word	0x1fff8e3c

0000bb4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    bb4c:	b500      	push	{lr}
    bb4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb50:	f7f5 f840 	bl	bd4 <Sys_GetCoreID>
    bb54:	4603      	mov	r3, r0
    bb56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    bb58:	4a10      	ldr	r2, [pc, #64]	; (bb9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    bb5a:	9b01      	ldr	r3, [sp, #4]
    bb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb60:	2b00      	cmp	r3, #0
    bb62:	d10d      	bne.n	bb80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb64:	f7f4 ff4c 	bl	a00 <Adc_schm_read_msr>
    bb68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb6a:	9b00      	ldr	r3, [sp, #0]
    bb6c:	f003 0301 	and.w	r3, r3, #1
    bb70:	2b00      	cmp	r3, #0
    bb72:	d100      	bne.n	bb76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    bb76:	490a      	ldr	r1, [pc, #40]	; (bba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    bb78:	9b01      	ldr	r3, [sp, #4]
    bb7a:	9a00      	ldr	r2, [sp, #0]
    bb7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    bb80:	4a06      	ldr	r2, [pc, #24]	; (bb9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    bb82:	9b01      	ldr	r3, [sp, #4]
    bb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb88:	1c5a      	adds	r2, r3, #1
    bb8a:	4904      	ldr	r1, [pc, #16]	; (bb9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    bb8c:	9b01      	ldr	r3, [sp, #4]
    bb8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb92:	bf00      	nop
    bb94:	b003      	add	sp, #12
    bb96:	f85d fb04 	ldr.w	pc, [sp], #4
    bb9a:	bf00      	nop
    bb9c:	1fff8e48 	.word	0x1fff8e48
    bba0:	1fff8e44 	.word	0x1fff8e44

0000bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    bba4:	b500      	push	{lr}
    bba6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bba8:	f7f5 f814 	bl	bd4 <Sys_GetCoreID>
    bbac:	4603      	mov	r3, r0
    bbae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    bbb0:	4a0d      	ldr	r2, [pc, #52]	; (bbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    bbb2:	9b01      	ldr	r3, [sp, #4]
    bbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbb8:	1e5a      	subs	r2, r3, #1
    bbba:	490b      	ldr	r1, [pc, #44]	; (bbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    bbbc:	9b01      	ldr	r3, [sp, #4]
    bbbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    bbc2:	4a0a      	ldr	r2, [pc, #40]	; (bbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    bbc4:	9b01      	ldr	r3, [sp, #4]
    bbc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbca:	f003 0301 	and.w	r3, r3, #1
    bbce:	2b00      	cmp	r3, #0
    bbd0:	d106      	bne.n	bbe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    bbd2:	4a05      	ldr	r2, [pc, #20]	; (bbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    bbd4:	9b01      	ldr	r3, [sp, #4]
    bbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbda:	2b00      	cmp	r3, #0
    bbdc:	d100      	bne.n	bbe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bbde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bbe0:	bf00      	nop
    bbe2:	b003      	add	sp, #12
    bbe4:	f85d fb04 	ldr.w	pc, [sp], #4
    bbe8:	1fff8e48 	.word	0x1fff8e48
    bbec:	1fff8e44 	.word	0x1fff8e44

0000bbf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    bbf0:	b500      	push	{lr}
    bbf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbf4:	f7f4 ffee 	bl	bd4 <Sys_GetCoreID>
    bbf8:	4603      	mov	r3, r0
    bbfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    bbfc:	4a10      	ldr	r2, [pc, #64]	; (bc40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    bbfe:	9b01      	ldr	r3, [sp, #4]
    bc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d10d      	bne.n	bc24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc08:	f7f4 fefa 	bl	a00 <Adc_schm_read_msr>
    bc0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc0e:	9b00      	ldr	r3, [sp, #0]
    bc10:	f003 0301 	and.w	r3, r3, #1
    bc14:	2b00      	cmp	r3, #0
    bc16:	d100      	bne.n	bc1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    bc1a:	490a      	ldr	r1, [pc, #40]	; (bc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    bc1c:	9b01      	ldr	r3, [sp, #4]
    bc1e:	9a00      	ldr	r2, [sp, #0]
    bc20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    bc24:	4a06      	ldr	r2, [pc, #24]	; (bc40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    bc26:	9b01      	ldr	r3, [sp, #4]
    bc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc2c:	1c5a      	adds	r2, r3, #1
    bc2e:	4904      	ldr	r1, [pc, #16]	; (bc40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    bc30:	9b01      	ldr	r3, [sp, #4]
    bc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc36:	bf00      	nop
    bc38:	b003      	add	sp, #12
    bc3a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc3e:	bf00      	nop
    bc40:	1fff8e50 	.word	0x1fff8e50
    bc44:	1fff8e4c 	.word	0x1fff8e4c

0000bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    bc48:	b500      	push	{lr}
    bc4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc4c:	f7f4 ffc2 	bl	bd4 <Sys_GetCoreID>
    bc50:	4603      	mov	r3, r0
    bc52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    bc54:	4a0d      	ldr	r2, [pc, #52]	; (bc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    bc56:	9b01      	ldr	r3, [sp, #4]
    bc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc5c:	1e5a      	subs	r2, r3, #1
    bc5e:	490b      	ldr	r1, [pc, #44]	; (bc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    bc60:	9b01      	ldr	r3, [sp, #4]
    bc62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    bc66:	4a0a      	ldr	r2, [pc, #40]	; (bc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    bc68:	9b01      	ldr	r3, [sp, #4]
    bc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc6e:	f003 0301 	and.w	r3, r3, #1
    bc72:	2b00      	cmp	r3, #0
    bc74:	d106      	bne.n	bc84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    bc76:	4a05      	ldr	r2, [pc, #20]	; (bc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    bc78:	9b01      	ldr	r3, [sp, #4]
    bc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d100      	bne.n	bc84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc84:	bf00      	nop
    bc86:	b003      	add	sp, #12
    bc88:	f85d fb04 	ldr.w	pc, [sp], #4
    bc8c:	1fff8e50 	.word	0x1fff8e50
    bc90:	1fff8e4c 	.word	0x1fff8e4c

0000bc94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    bc94:	b500      	push	{lr}
    bc96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc98:	f7f4 ff9c 	bl	bd4 <Sys_GetCoreID>
    bc9c:	4603      	mov	r3, r0
    bc9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    bca0:	4a10      	ldr	r2, [pc, #64]	; (bce4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    bca2:	9b01      	ldr	r3, [sp, #4]
    bca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bca8:	2b00      	cmp	r3, #0
    bcaa:	d10d      	bne.n	bcc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bcac:	f7f4 fea8 	bl	a00 <Adc_schm_read_msr>
    bcb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bcb2:	9b00      	ldr	r3, [sp, #0]
    bcb4:	f003 0301 	and.w	r3, r3, #1
    bcb8:	2b00      	cmp	r3, #0
    bcba:	d100      	bne.n	bcbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bcbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    bcbe:	490a      	ldr	r1, [pc, #40]	; (bce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    bcc0:	9b01      	ldr	r3, [sp, #4]
    bcc2:	9a00      	ldr	r2, [sp, #0]
    bcc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    bcc8:	4a06      	ldr	r2, [pc, #24]	; (bce4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    bcca:	9b01      	ldr	r3, [sp, #4]
    bccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd0:	1c5a      	adds	r2, r3, #1
    bcd2:	4904      	ldr	r1, [pc, #16]	; (bce4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bcda:	bf00      	nop
    bcdc:	b003      	add	sp, #12
    bcde:	f85d fb04 	ldr.w	pc, [sp], #4
    bce2:	bf00      	nop
    bce4:	1fff8e58 	.word	0x1fff8e58
    bce8:	1fff8e54 	.word	0x1fff8e54

0000bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    bcec:	b500      	push	{lr}
    bcee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcf0:	f7f4 ff70 	bl	bd4 <Sys_GetCoreID>
    bcf4:	4603      	mov	r3, r0
    bcf6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    bcf8:	4a0d      	ldr	r2, [pc, #52]	; (bd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    bcfa:	9b01      	ldr	r3, [sp, #4]
    bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd00:	1e5a      	subs	r2, r3, #1
    bd02:	490b      	ldr	r1, [pc, #44]	; (bd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    bd04:	9b01      	ldr	r3, [sp, #4]
    bd06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    bd0a:	4a0a      	ldr	r2, [pc, #40]	; (bd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    bd0c:	9b01      	ldr	r3, [sp, #4]
    bd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd12:	f003 0301 	and.w	r3, r3, #1
    bd16:	2b00      	cmp	r3, #0
    bd18:	d106      	bne.n	bd28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    bd1a:	4a05      	ldr	r2, [pc, #20]	; (bd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    bd1c:	9b01      	ldr	r3, [sp, #4]
    bd1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd22:	2b00      	cmp	r3, #0
    bd24:	d100      	bne.n	bd28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd28:	bf00      	nop
    bd2a:	b003      	add	sp, #12
    bd2c:	f85d fb04 	ldr.w	pc, [sp], #4
    bd30:	1fff8e58 	.word	0x1fff8e58
    bd34:	1fff8e54 	.word	0x1fff8e54

0000bd38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    bd38:	b500      	push	{lr}
    bd3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd3c:	f7f4 ff4a 	bl	bd4 <Sys_GetCoreID>
    bd40:	4603      	mov	r3, r0
    bd42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    bd44:	4a10      	ldr	r2, [pc, #64]	; (bd88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    bd46:	9b01      	ldr	r3, [sp, #4]
    bd48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d10d      	bne.n	bd6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd50:	f7f4 fe56 	bl	a00 <Adc_schm_read_msr>
    bd54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd56:	9b00      	ldr	r3, [sp, #0]
    bd58:	f003 0301 	and.w	r3, r3, #1
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d100      	bne.n	bd62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    bd62:	490a      	ldr	r1, [pc, #40]	; (bd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	9a00      	ldr	r2, [sp, #0]
    bd68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    bd6c:	4a06      	ldr	r2, [pc, #24]	; (bd88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    bd6e:	9b01      	ldr	r3, [sp, #4]
    bd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd74:	1c5a      	adds	r2, r3, #1
    bd76:	4904      	ldr	r1, [pc, #16]	; (bd88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    bd78:	9b01      	ldr	r3, [sp, #4]
    bd7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd7e:	bf00      	nop
    bd80:	b003      	add	sp, #12
    bd82:	f85d fb04 	ldr.w	pc, [sp], #4
    bd86:	bf00      	nop
    bd88:	1fff8e60 	.word	0x1fff8e60
    bd8c:	1fff8e5c 	.word	0x1fff8e5c

0000bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    bd90:	b500      	push	{lr}
    bd92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd94:	f7f4 ff1e 	bl	bd4 <Sys_GetCoreID>
    bd98:	4603      	mov	r3, r0
    bd9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    bd9c:	4a0d      	ldr	r2, [pc, #52]	; (bdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    bd9e:	9b01      	ldr	r3, [sp, #4]
    bda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bda4:	1e5a      	subs	r2, r3, #1
    bda6:	490b      	ldr	r1, [pc, #44]	; (bdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    bda8:	9b01      	ldr	r3, [sp, #4]
    bdaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    bdae:	4a0a      	ldr	r2, [pc, #40]	; (bdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    bdb0:	9b01      	ldr	r3, [sp, #4]
    bdb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdb6:	f003 0301 	and.w	r3, r3, #1
    bdba:	2b00      	cmp	r3, #0
    bdbc:	d106      	bne.n	bdcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    bdbe:	4a05      	ldr	r2, [pc, #20]	; (bdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    bdc0:	9b01      	ldr	r3, [sp, #4]
    bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d100      	bne.n	bdcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bdca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bdcc:	bf00      	nop
    bdce:	b003      	add	sp, #12
    bdd0:	f85d fb04 	ldr.w	pc, [sp], #4
    bdd4:	1fff8e60 	.word	0x1fff8e60
    bdd8:	1fff8e5c 	.word	0x1fff8e5c

0000bddc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    bddc:	b500      	push	{lr}
    bdde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bde0:	f7f4 fef8 	bl	bd4 <Sys_GetCoreID>
    bde4:	4603      	mov	r3, r0
    bde6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    bde8:	4a10      	ldr	r2, [pc, #64]	; (be2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    bdea:	9b01      	ldr	r3, [sp, #4]
    bdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	d10d      	bne.n	be10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdf4:	f7f4 fe04 	bl	a00 <Adc_schm_read_msr>
    bdf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdfa:	9b00      	ldr	r3, [sp, #0]
    bdfc:	f003 0301 	and.w	r3, r3, #1
    be00:	2b00      	cmp	r3, #0
    be02:	d100      	bne.n	be06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    be06:	490a      	ldr	r1, [pc, #40]	; (be30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	9a00      	ldr	r2, [sp, #0]
    be0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    be10:	4a06      	ldr	r2, [pc, #24]	; (be2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    be12:	9b01      	ldr	r3, [sp, #4]
    be14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be18:	1c5a      	adds	r2, r3, #1
    be1a:	4904      	ldr	r1, [pc, #16]	; (be2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    be1c:	9b01      	ldr	r3, [sp, #4]
    be1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be22:	bf00      	nop
    be24:	b003      	add	sp, #12
    be26:	f85d fb04 	ldr.w	pc, [sp], #4
    be2a:	bf00      	nop
    be2c:	1fff8e68 	.word	0x1fff8e68
    be30:	1fff8e64 	.word	0x1fff8e64

0000be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    be34:	b500      	push	{lr}
    be36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be38:	f7f4 fecc 	bl	bd4 <Sys_GetCoreID>
    be3c:	4603      	mov	r3, r0
    be3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    be40:	4a0d      	ldr	r2, [pc, #52]	; (be78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    be42:	9b01      	ldr	r3, [sp, #4]
    be44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be48:	1e5a      	subs	r2, r3, #1
    be4a:	490b      	ldr	r1, [pc, #44]	; (be78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    be4c:	9b01      	ldr	r3, [sp, #4]
    be4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    be52:	4a0a      	ldr	r2, [pc, #40]	; (be7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    be54:	9b01      	ldr	r3, [sp, #4]
    be56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be5a:	f003 0301 	and.w	r3, r3, #1
    be5e:	2b00      	cmp	r3, #0
    be60:	d106      	bne.n	be70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    be62:	4a05      	ldr	r2, [pc, #20]	; (be78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    be64:	9b01      	ldr	r3, [sp, #4]
    be66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be6a:	2b00      	cmp	r3, #0
    be6c:	d100      	bne.n	be70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be70:	bf00      	nop
    be72:	b003      	add	sp, #12
    be74:	f85d fb04 	ldr.w	pc, [sp], #4
    be78:	1fff8e68 	.word	0x1fff8e68
    be7c:	1fff8e64 	.word	0x1fff8e64

0000be80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    be80:	b500      	push	{lr}
    be82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be84:	f7f4 fea6 	bl	bd4 <Sys_GetCoreID>
    be88:	4603      	mov	r3, r0
    be8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    be8c:	4a10      	ldr	r2, [pc, #64]	; (bed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    be8e:	9b01      	ldr	r3, [sp, #4]
    be90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be94:	2b00      	cmp	r3, #0
    be96:	d10d      	bne.n	beb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be98:	f7f4 fdb2 	bl	a00 <Adc_schm_read_msr>
    be9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be9e:	9b00      	ldr	r3, [sp, #0]
    bea0:	f003 0301 	and.w	r3, r3, #1
    bea4:	2b00      	cmp	r3, #0
    bea6:	d100      	bne.n	beaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bea8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    beaa:	490a      	ldr	r1, [pc, #40]	; (bed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    beac:	9b01      	ldr	r3, [sp, #4]
    beae:	9a00      	ldr	r2, [sp, #0]
    beb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    beb4:	4a06      	ldr	r2, [pc, #24]	; (bed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    beb6:	9b01      	ldr	r3, [sp, #4]
    beb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bebc:	1c5a      	adds	r2, r3, #1
    bebe:	4904      	ldr	r1, [pc, #16]	; (bed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bec0:	9b01      	ldr	r3, [sp, #4]
    bec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bec6:	bf00      	nop
    bec8:	b003      	add	sp, #12
    beca:	f85d fb04 	ldr.w	pc, [sp], #4
    bece:	bf00      	nop
    bed0:	1fff8e70 	.word	0x1fff8e70
    bed4:	1fff8e6c 	.word	0x1fff8e6c

0000bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    bed8:	b500      	push	{lr}
    beda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bedc:	f7f4 fe7a 	bl	bd4 <Sys_GetCoreID>
    bee0:	4603      	mov	r3, r0
    bee2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    bee4:	4a0d      	ldr	r2, [pc, #52]	; (bf1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bee6:	9b01      	ldr	r3, [sp, #4]
    bee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beec:	1e5a      	subs	r2, r3, #1
    beee:	490b      	ldr	r1, [pc, #44]	; (bf1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bef0:	9b01      	ldr	r3, [sp, #4]
    bef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    bef6:	4a0a      	ldr	r2, [pc, #40]	; (bf20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    bef8:	9b01      	ldr	r3, [sp, #4]
    befa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    befe:	f003 0301 	and.w	r3, r3, #1
    bf02:	2b00      	cmp	r3, #0
    bf04:	d106      	bne.n	bf14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    bf06:	4a05      	ldr	r2, [pc, #20]	; (bf1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bf08:	9b01      	ldr	r3, [sp, #4]
    bf0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d100      	bne.n	bf14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf14:	bf00      	nop
    bf16:	b003      	add	sp, #12
    bf18:	f85d fb04 	ldr.w	pc, [sp], #4
    bf1c:	1fff8e70 	.word	0x1fff8e70
    bf20:	1fff8e6c 	.word	0x1fff8e6c

0000bf24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bf24:	b500      	push	{lr}
    bf26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf28:	f7f4 fe54 	bl	bd4 <Sys_GetCoreID>
    bf2c:	4603      	mov	r3, r0
    bf2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    bf30:	4a10      	ldr	r2, [pc, #64]	; (bf74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bf32:	9b01      	ldr	r3, [sp, #4]
    bf34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d10d      	bne.n	bf58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf3c:	f7f4 fd60 	bl	a00 <Adc_schm_read_msr>
    bf40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf42:	9b00      	ldr	r3, [sp, #0]
    bf44:	f003 0301 	and.w	r3, r3, #1
    bf48:	2b00      	cmp	r3, #0
    bf4a:	d100      	bne.n	bf4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    bf4e:	490a      	ldr	r1, [pc, #40]	; (bf78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    bf50:	9b01      	ldr	r3, [sp, #4]
    bf52:	9a00      	ldr	r2, [sp, #0]
    bf54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    bf58:	4a06      	ldr	r2, [pc, #24]	; (bf74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bf5a:	9b01      	ldr	r3, [sp, #4]
    bf5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf60:	1c5a      	adds	r2, r3, #1
    bf62:	4904      	ldr	r1, [pc, #16]	; (bf74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bf64:	9b01      	ldr	r3, [sp, #4]
    bf66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf6a:	bf00      	nop
    bf6c:	b003      	add	sp, #12
    bf6e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf72:	bf00      	nop
    bf74:	1fff8e78 	.word	0x1fff8e78
    bf78:	1fff8e74 	.word	0x1fff8e74

0000bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bf7c:	b500      	push	{lr}
    bf7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf80:	f7f4 fe28 	bl	bd4 <Sys_GetCoreID>
    bf84:	4603      	mov	r3, r0
    bf86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    bf88:	4a0d      	ldr	r2, [pc, #52]	; (bfc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bf8a:	9b01      	ldr	r3, [sp, #4]
    bf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf90:	1e5a      	subs	r2, r3, #1
    bf92:	490b      	ldr	r1, [pc, #44]	; (bfc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bf94:	9b01      	ldr	r3, [sp, #4]
    bf96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    bf9a:	4a0a      	ldr	r2, [pc, #40]	; (bfc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    bf9c:	9b01      	ldr	r3, [sp, #4]
    bf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfa2:	f003 0301 	and.w	r3, r3, #1
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d106      	bne.n	bfb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    bfaa:	4a05      	ldr	r2, [pc, #20]	; (bfc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bfac:	9b01      	ldr	r3, [sp, #4]
    bfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d100      	bne.n	bfb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bfb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bfb8:	bf00      	nop
    bfba:	b003      	add	sp, #12
    bfbc:	f85d fb04 	ldr.w	pc, [sp], #4
    bfc0:	1fff8e78 	.word	0x1fff8e78
    bfc4:	1fff8e74 	.word	0x1fff8e74

0000bfc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    bfc8:	b500      	push	{lr}
    bfca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfcc:	f7f4 fe02 	bl	bd4 <Sys_GetCoreID>
    bfd0:	4603      	mov	r3, r0
    bfd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    bfd4:	4a10      	ldr	r2, [pc, #64]	; (c018 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bfd6:	9b01      	ldr	r3, [sp, #4]
    bfd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfdc:	2b00      	cmp	r3, #0
    bfde:	d10d      	bne.n	bffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bfe0:	f7f4 fd0e 	bl	a00 <Adc_schm_read_msr>
    bfe4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfe6:	9b00      	ldr	r3, [sp, #0]
    bfe8:	f003 0301 	and.w	r3, r3, #1
    bfec:	2b00      	cmp	r3, #0
    bfee:	d100      	bne.n	bff2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bff0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    bff2:	490a      	ldr	r1, [pc, #40]	; (c01c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    bff4:	9b01      	ldr	r3, [sp, #4]
    bff6:	9a00      	ldr	r2, [sp, #0]
    bff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    bffc:	4a06      	ldr	r2, [pc, #24]	; (c018 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    bffe:	9b01      	ldr	r3, [sp, #4]
    c000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c004:	1c5a      	adds	r2, r3, #1
    c006:	4904      	ldr	r1, [pc, #16]	; (c018 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    c008:	9b01      	ldr	r3, [sp, #4]
    c00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c00e:	bf00      	nop
    c010:	b003      	add	sp, #12
    c012:	f85d fb04 	ldr.w	pc, [sp], #4
    c016:	bf00      	nop
    c018:	1fff8e80 	.word	0x1fff8e80
    c01c:	1fff8e7c 	.word	0x1fff8e7c

0000c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    c020:	b500      	push	{lr}
    c022:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c024:	f7f4 fdd6 	bl	bd4 <Sys_GetCoreID>
    c028:	4603      	mov	r3, r0
    c02a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    c02c:	4a0d      	ldr	r2, [pc, #52]	; (c064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    c02e:	9b01      	ldr	r3, [sp, #4]
    c030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c034:	1e5a      	subs	r2, r3, #1
    c036:	490b      	ldr	r1, [pc, #44]	; (c064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    c038:	9b01      	ldr	r3, [sp, #4]
    c03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    c03e:	4a0a      	ldr	r2, [pc, #40]	; (c068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    c040:	9b01      	ldr	r3, [sp, #4]
    c042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c046:	f003 0301 	and.w	r3, r3, #1
    c04a:	2b00      	cmp	r3, #0
    c04c:	d106      	bne.n	c05c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    c04e:	4a05      	ldr	r2, [pc, #20]	; (c064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    c050:	9b01      	ldr	r3, [sp, #4]
    c052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c056:	2b00      	cmp	r3, #0
    c058:	d100      	bne.n	c05c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c05a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c05c:	bf00      	nop
    c05e:	b003      	add	sp, #12
    c060:	f85d fb04 	ldr.w	pc, [sp], #4
    c064:	1fff8e80 	.word	0x1fff8e80
    c068:	1fff8e7c 	.word	0x1fff8e7c

0000c06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    c06c:	b500      	push	{lr}
    c06e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c070:	f7f4 fdb0 	bl	bd4 <Sys_GetCoreID>
    c074:	4603      	mov	r3, r0
    c076:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    c078:	4a10      	ldr	r2, [pc, #64]	; (c0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    c07a:	9b01      	ldr	r3, [sp, #4]
    c07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c080:	2b00      	cmp	r3, #0
    c082:	d10d      	bne.n	c0a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c084:	f7f4 fcbc 	bl	a00 <Adc_schm_read_msr>
    c088:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c08a:	9b00      	ldr	r3, [sp, #0]
    c08c:	f003 0301 	and.w	r3, r3, #1
    c090:	2b00      	cmp	r3, #0
    c092:	d100      	bne.n	c096 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c094:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    c096:	490a      	ldr	r1, [pc, #40]	; (c0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    c098:	9b01      	ldr	r3, [sp, #4]
    c09a:	9a00      	ldr	r2, [sp, #0]
    c09c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    c0a0:	4a06      	ldr	r2, [pc, #24]	; (c0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    c0a2:	9b01      	ldr	r3, [sp, #4]
    c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0a8:	1c5a      	adds	r2, r3, #1
    c0aa:	4904      	ldr	r1, [pc, #16]	; (c0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    c0ac:	9b01      	ldr	r3, [sp, #4]
    c0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c0b2:	bf00      	nop
    c0b4:	b003      	add	sp, #12
    c0b6:	f85d fb04 	ldr.w	pc, [sp], #4
    c0ba:	bf00      	nop
    c0bc:	1fff8e88 	.word	0x1fff8e88
    c0c0:	1fff8e84 	.word	0x1fff8e84

0000c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    c0c4:	b500      	push	{lr}
    c0c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0c8:	f7f4 fd84 	bl	bd4 <Sys_GetCoreID>
    c0cc:	4603      	mov	r3, r0
    c0ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    c0d0:	4a0d      	ldr	r2, [pc, #52]	; (c108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    c0d2:	9b01      	ldr	r3, [sp, #4]
    c0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0d8:	1e5a      	subs	r2, r3, #1
    c0da:	490b      	ldr	r1, [pc, #44]	; (c108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    c0dc:	9b01      	ldr	r3, [sp, #4]
    c0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    c0e2:	4a0a      	ldr	r2, [pc, #40]	; (c10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    c0e4:	9b01      	ldr	r3, [sp, #4]
    c0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ea:	f003 0301 	and.w	r3, r3, #1
    c0ee:	2b00      	cmp	r3, #0
    c0f0:	d106      	bne.n	c100 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    c0f2:	4a05      	ldr	r2, [pc, #20]	; (c108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    c0f4:	9b01      	ldr	r3, [sp, #4]
    c0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	d100      	bne.n	c100 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c100:	bf00      	nop
    c102:	b003      	add	sp, #12
    c104:	f85d fb04 	ldr.w	pc, [sp], #4
    c108:	1fff8e88 	.word	0x1fff8e88
    c10c:	1fff8e84 	.word	0x1fff8e84

0000c110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    c110:	b500      	push	{lr}
    c112:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c114:	f7f4 fd5e 	bl	bd4 <Sys_GetCoreID>
    c118:	4603      	mov	r3, r0
    c11a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    c11c:	4a10      	ldr	r2, [pc, #64]	; (c160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    c11e:	9b01      	ldr	r3, [sp, #4]
    c120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c124:	2b00      	cmp	r3, #0
    c126:	d10d      	bne.n	c144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c128:	f7f4 fc6a 	bl	a00 <Adc_schm_read_msr>
    c12c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c12e:	9b00      	ldr	r3, [sp, #0]
    c130:	f003 0301 	and.w	r3, r3, #1
    c134:	2b00      	cmp	r3, #0
    c136:	d100      	bne.n	c13a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c138:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    c13a:	490a      	ldr	r1, [pc, #40]	; (c164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    c13c:	9b01      	ldr	r3, [sp, #4]
    c13e:	9a00      	ldr	r2, [sp, #0]
    c140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    c144:	4a06      	ldr	r2, [pc, #24]	; (c160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    c146:	9b01      	ldr	r3, [sp, #4]
    c148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c14c:	1c5a      	adds	r2, r3, #1
    c14e:	4904      	ldr	r1, [pc, #16]	; (c160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    c150:	9b01      	ldr	r3, [sp, #4]
    c152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c156:	bf00      	nop
    c158:	b003      	add	sp, #12
    c15a:	f85d fb04 	ldr.w	pc, [sp], #4
    c15e:	bf00      	nop
    c160:	1fff8e90 	.word	0x1fff8e90
    c164:	1fff8e8c 	.word	0x1fff8e8c

0000c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    c168:	b500      	push	{lr}
    c16a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c16c:	f7f4 fd32 	bl	bd4 <Sys_GetCoreID>
    c170:	4603      	mov	r3, r0
    c172:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    c174:	4a0d      	ldr	r2, [pc, #52]	; (c1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    c176:	9b01      	ldr	r3, [sp, #4]
    c178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c17c:	1e5a      	subs	r2, r3, #1
    c17e:	490b      	ldr	r1, [pc, #44]	; (c1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    c180:	9b01      	ldr	r3, [sp, #4]
    c182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    c186:	4a0a      	ldr	r2, [pc, #40]	; (c1b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    c188:	9b01      	ldr	r3, [sp, #4]
    c18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c18e:	f003 0301 	and.w	r3, r3, #1
    c192:	2b00      	cmp	r3, #0
    c194:	d106      	bne.n	c1a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    c196:	4a05      	ldr	r2, [pc, #20]	; (c1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    c198:	9b01      	ldr	r3, [sp, #4]
    c19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c19e:	2b00      	cmp	r3, #0
    c1a0:	d100      	bne.n	c1a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c1a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c1a4:	bf00      	nop
    c1a6:	b003      	add	sp, #12
    c1a8:	f85d fb04 	ldr.w	pc, [sp], #4
    c1ac:	1fff8e90 	.word	0x1fff8e90
    c1b0:	1fff8e8c 	.word	0x1fff8e8c

0000c1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    c1b4:	b500      	push	{lr}
    c1b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1b8:	f7f4 fd0c 	bl	bd4 <Sys_GetCoreID>
    c1bc:	4603      	mov	r3, r0
    c1be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    c1c0:	4a10      	ldr	r2, [pc, #64]	; (c204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    c1c2:	9b01      	ldr	r3, [sp, #4]
    c1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1c8:	2b00      	cmp	r3, #0
    c1ca:	d10d      	bne.n	c1e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c1cc:	f7f4 fc18 	bl	a00 <Adc_schm_read_msr>
    c1d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c1d2:	9b00      	ldr	r3, [sp, #0]
    c1d4:	f003 0301 	and.w	r3, r3, #1
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d100      	bne.n	c1de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c1dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    c1de:	490a      	ldr	r1, [pc, #40]	; (c208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    c1e0:	9b01      	ldr	r3, [sp, #4]
    c1e2:	9a00      	ldr	r2, [sp, #0]
    c1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    c1e8:	4a06      	ldr	r2, [pc, #24]	; (c204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    c1ea:	9b01      	ldr	r3, [sp, #4]
    c1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1f0:	1c5a      	adds	r2, r3, #1
    c1f2:	4904      	ldr	r1, [pc, #16]	; (c204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    c1f4:	9b01      	ldr	r3, [sp, #4]
    c1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1fa:	bf00      	nop
    c1fc:	b003      	add	sp, #12
    c1fe:	f85d fb04 	ldr.w	pc, [sp], #4
    c202:	bf00      	nop
    c204:	1fff8e98 	.word	0x1fff8e98
    c208:	1fff8e94 	.word	0x1fff8e94

0000c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    c20c:	b500      	push	{lr}
    c20e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c210:	f7f4 fce0 	bl	bd4 <Sys_GetCoreID>
    c214:	4603      	mov	r3, r0
    c216:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    c218:	4a0d      	ldr	r2, [pc, #52]	; (c250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    c21a:	9b01      	ldr	r3, [sp, #4]
    c21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c220:	1e5a      	subs	r2, r3, #1
    c222:	490b      	ldr	r1, [pc, #44]	; (c250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    c224:	9b01      	ldr	r3, [sp, #4]
    c226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    c22a:	4a0a      	ldr	r2, [pc, #40]	; (c254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    c22c:	9b01      	ldr	r3, [sp, #4]
    c22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c232:	f003 0301 	and.w	r3, r3, #1
    c236:	2b00      	cmp	r3, #0
    c238:	d106      	bne.n	c248 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    c23a:	4a05      	ldr	r2, [pc, #20]	; (c250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    c23c:	9b01      	ldr	r3, [sp, #4]
    c23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c242:	2b00      	cmp	r3, #0
    c244:	d100      	bne.n	c248 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c246:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c248:	bf00      	nop
    c24a:	b003      	add	sp, #12
    c24c:	f85d fb04 	ldr.w	pc, [sp], #4
    c250:	1fff8e98 	.word	0x1fff8e98
    c254:	1fff8e94 	.word	0x1fff8e94

0000c258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    c258:	b500      	push	{lr}
    c25a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c25c:	f7f4 fcba 	bl	bd4 <Sys_GetCoreID>
    c260:	4603      	mov	r3, r0
    c262:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    c264:	4a10      	ldr	r2, [pc, #64]	; (c2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    c266:	9b01      	ldr	r3, [sp, #4]
    c268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c26c:	2b00      	cmp	r3, #0
    c26e:	d10d      	bne.n	c28c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c270:	f7f4 fbc6 	bl	a00 <Adc_schm_read_msr>
    c274:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c276:	9b00      	ldr	r3, [sp, #0]
    c278:	f003 0301 	and.w	r3, r3, #1
    c27c:	2b00      	cmp	r3, #0
    c27e:	d100      	bne.n	c282 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c280:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    c282:	490a      	ldr	r1, [pc, #40]	; (c2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	9a00      	ldr	r2, [sp, #0]
    c288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    c28c:	4a06      	ldr	r2, [pc, #24]	; (c2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    c28e:	9b01      	ldr	r3, [sp, #4]
    c290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c294:	1c5a      	adds	r2, r3, #1
    c296:	4904      	ldr	r1, [pc, #16]	; (c2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    c298:	9b01      	ldr	r3, [sp, #4]
    c29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c29e:	bf00      	nop
    c2a0:	b003      	add	sp, #12
    c2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a6:	bf00      	nop
    c2a8:	1fff8ea0 	.word	0x1fff8ea0
    c2ac:	1fff8e9c 	.word	0x1fff8e9c

0000c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    c2b0:	b500      	push	{lr}
    c2b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2b4:	f7f4 fc8e 	bl	bd4 <Sys_GetCoreID>
    c2b8:	4603      	mov	r3, r0
    c2ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    c2bc:	4a0d      	ldr	r2, [pc, #52]	; (c2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    c2be:	9b01      	ldr	r3, [sp, #4]
    c2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2c4:	1e5a      	subs	r2, r3, #1
    c2c6:	490b      	ldr	r1, [pc, #44]	; (c2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    c2c8:	9b01      	ldr	r3, [sp, #4]
    c2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    c2ce:	4a0a      	ldr	r2, [pc, #40]	; (c2f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    c2d0:	9b01      	ldr	r3, [sp, #4]
    c2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d6:	f003 0301 	and.w	r3, r3, #1
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d106      	bne.n	c2ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    c2de:	4a05      	ldr	r2, [pc, #20]	; (c2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    c2e0:	9b01      	ldr	r3, [sp, #4]
    c2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d100      	bne.n	c2ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2ec:	bf00      	nop
    c2ee:	b003      	add	sp, #12
    c2f0:	f85d fb04 	ldr.w	pc, [sp], #4
    c2f4:	1fff8ea0 	.word	0x1fff8ea0
    c2f8:	1fff8e9c 	.word	0x1fff8e9c

0000c2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    c2fc:	b500      	push	{lr}
    c2fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c300:	f7f4 fc68 	bl	bd4 <Sys_GetCoreID>
    c304:	4603      	mov	r3, r0
    c306:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    c308:	4a10      	ldr	r2, [pc, #64]	; (c34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    c30a:	9b01      	ldr	r3, [sp, #4]
    c30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c310:	2b00      	cmp	r3, #0
    c312:	d10d      	bne.n	c330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c314:	f7f4 fb74 	bl	a00 <Adc_schm_read_msr>
    c318:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c31a:	9b00      	ldr	r3, [sp, #0]
    c31c:	f003 0301 	and.w	r3, r3, #1
    c320:	2b00      	cmp	r3, #0
    c322:	d100      	bne.n	c326 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c324:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    c326:	490a      	ldr	r1, [pc, #40]	; (c350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    c328:	9b01      	ldr	r3, [sp, #4]
    c32a:	9a00      	ldr	r2, [sp, #0]
    c32c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    c330:	4a06      	ldr	r2, [pc, #24]	; (c34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    c332:	9b01      	ldr	r3, [sp, #4]
    c334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c338:	1c5a      	adds	r2, r3, #1
    c33a:	4904      	ldr	r1, [pc, #16]	; (c34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    c33c:	9b01      	ldr	r3, [sp, #4]
    c33e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c342:	bf00      	nop
    c344:	b003      	add	sp, #12
    c346:	f85d fb04 	ldr.w	pc, [sp], #4
    c34a:	bf00      	nop
    c34c:	1fff8ea8 	.word	0x1fff8ea8
    c350:	1fff8ea4 	.word	0x1fff8ea4

0000c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    c354:	b500      	push	{lr}
    c356:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c358:	f7f4 fc3c 	bl	bd4 <Sys_GetCoreID>
    c35c:	4603      	mov	r3, r0
    c35e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    c360:	4a0d      	ldr	r2, [pc, #52]	; (c398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c362:	9b01      	ldr	r3, [sp, #4]
    c364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c368:	1e5a      	subs	r2, r3, #1
    c36a:	490b      	ldr	r1, [pc, #44]	; (c398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c36c:	9b01      	ldr	r3, [sp, #4]
    c36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    c372:	4a0a      	ldr	r2, [pc, #40]	; (c39c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    c374:	9b01      	ldr	r3, [sp, #4]
    c376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c37a:	f003 0301 	and.w	r3, r3, #1
    c37e:	2b00      	cmp	r3, #0
    c380:	d106      	bne.n	c390 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    c382:	4a05      	ldr	r2, [pc, #20]	; (c398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c384:	9b01      	ldr	r3, [sp, #4]
    c386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c38a:	2b00      	cmp	r3, #0
    c38c:	d100      	bne.n	c390 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c38e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c390:	bf00      	nop
    c392:	b003      	add	sp, #12
    c394:	f85d fb04 	ldr.w	pc, [sp], #4
    c398:	1fff8ea8 	.word	0x1fff8ea8
    c39c:	1fff8ea4 	.word	0x1fff8ea4

0000c3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    c3a0:	b500      	push	{lr}
    c3a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3a4:	f7f4 fc16 	bl	bd4 <Sys_GetCoreID>
    c3a8:	4603      	mov	r3, r0
    c3aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    c3ac:	4a10      	ldr	r2, [pc, #64]	; (c3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c3ae:	9b01      	ldr	r3, [sp, #4]
    c3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d10d      	bne.n	c3d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c3b8:	f7f4 fb22 	bl	a00 <Adc_schm_read_msr>
    c3bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c3be:	9b00      	ldr	r3, [sp, #0]
    c3c0:	f003 0301 	and.w	r3, r3, #1
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d100      	bne.n	c3ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c3c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    c3ca:	490a      	ldr	r1, [pc, #40]	; (c3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	9a00      	ldr	r2, [sp, #0]
    c3d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    c3d4:	4a06      	ldr	r2, [pc, #24]	; (c3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c3d6:	9b01      	ldr	r3, [sp, #4]
    c3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3dc:	1c5a      	adds	r2, r3, #1
    c3de:	4904      	ldr	r1, [pc, #16]	; (c3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c3e0:	9b01      	ldr	r3, [sp, #4]
    c3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3e6:	bf00      	nop
    c3e8:	b003      	add	sp, #12
    c3ea:	f85d fb04 	ldr.w	pc, [sp], #4
    c3ee:	bf00      	nop
    c3f0:	1fff8eb0 	.word	0x1fff8eb0
    c3f4:	1fff8eac 	.word	0x1fff8eac

0000c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    c3f8:	b500      	push	{lr}
    c3fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3fc:	f7f4 fbea 	bl	bd4 <Sys_GetCoreID>
    c400:	4603      	mov	r3, r0
    c402:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    c404:	4a0d      	ldr	r2, [pc, #52]	; (c43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c406:	9b01      	ldr	r3, [sp, #4]
    c408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c40c:	1e5a      	subs	r2, r3, #1
    c40e:	490b      	ldr	r1, [pc, #44]	; (c43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c410:	9b01      	ldr	r3, [sp, #4]
    c412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    c416:	4a0a      	ldr	r2, [pc, #40]	; (c440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    c418:	9b01      	ldr	r3, [sp, #4]
    c41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c41e:	f003 0301 	and.w	r3, r3, #1
    c422:	2b00      	cmp	r3, #0
    c424:	d106      	bne.n	c434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    c426:	4a05      	ldr	r2, [pc, #20]	; (c43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c428:	9b01      	ldr	r3, [sp, #4]
    c42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c42e:	2b00      	cmp	r3, #0
    c430:	d100      	bne.n	c434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c432:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c434:	bf00      	nop
    c436:	b003      	add	sp, #12
    c438:	f85d fb04 	ldr.w	pc, [sp], #4
    c43c:	1fff8eb0 	.word	0x1fff8eb0
    c440:	1fff8eac 	.word	0x1fff8eac

0000c444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c444:	b500      	push	{lr}
    c446:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c448:	f7f4 fbc4 	bl	bd4 <Sys_GetCoreID>
    c44c:	4603      	mov	r3, r0
    c44e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    c450:	4a10      	ldr	r2, [pc, #64]	; (c494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c452:	9b01      	ldr	r3, [sp, #4]
    c454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c458:	2b00      	cmp	r3, #0
    c45a:	d10d      	bne.n	c478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c45c:	f7f4 fad0 	bl	a00 <Adc_schm_read_msr>
    c460:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c462:	9b00      	ldr	r3, [sp, #0]
    c464:	f003 0301 	and.w	r3, r3, #1
    c468:	2b00      	cmp	r3, #0
    c46a:	d100      	bne.n	c46e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c46c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    c46e:	490a      	ldr	r1, [pc, #40]	; (c498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	9a00      	ldr	r2, [sp, #0]
    c474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    c478:	4a06      	ldr	r2, [pc, #24]	; (c494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c47a:	9b01      	ldr	r3, [sp, #4]
    c47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c480:	1c5a      	adds	r2, r3, #1
    c482:	4904      	ldr	r1, [pc, #16]	; (c494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c484:	9b01      	ldr	r3, [sp, #4]
    c486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c48a:	bf00      	nop
    c48c:	b003      	add	sp, #12
    c48e:	f85d fb04 	ldr.w	pc, [sp], #4
    c492:	bf00      	nop
    c494:	1fff8eb8 	.word	0x1fff8eb8
    c498:	1fff8eb4 	.word	0x1fff8eb4

0000c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c49c:	b500      	push	{lr}
    c49e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4a0:	f7f4 fb98 	bl	bd4 <Sys_GetCoreID>
    c4a4:	4603      	mov	r3, r0
    c4a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    c4a8:	4a0d      	ldr	r2, [pc, #52]	; (c4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c4aa:	9b01      	ldr	r3, [sp, #4]
    c4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4b0:	1e5a      	subs	r2, r3, #1
    c4b2:	490b      	ldr	r1, [pc, #44]	; (c4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c4b4:	9b01      	ldr	r3, [sp, #4]
    c4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    c4ba:	4a0a      	ldr	r2, [pc, #40]	; (c4e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    c4bc:	9b01      	ldr	r3, [sp, #4]
    c4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c2:	f003 0301 	and.w	r3, r3, #1
    c4c6:	2b00      	cmp	r3, #0
    c4c8:	d106      	bne.n	c4d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    c4ca:	4a05      	ldr	r2, [pc, #20]	; (c4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c4cc:	9b01      	ldr	r3, [sp, #4]
    c4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d2:	2b00      	cmp	r3, #0
    c4d4:	d100      	bne.n	c4d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c4d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c4d8:	bf00      	nop
    c4da:	b003      	add	sp, #12
    c4dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c4e0:	1fff8eb8 	.word	0x1fff8eb8
    c4e4:	1fff8eb4 	.word	0x1fff8eb4

0000c4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c4e8:	b500      	push	{lr}
    c4ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4ec:	f7f4 fb72 	bl	bd4 <Sys_GetCoreID>
    c4f0:	4603      	mov	r3, r0
    c4f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    c4f4:	4a10      	ldr	r2, [pc, #64]	; (c538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c4f6:	9b01      	ldr	r3, [sp, #4]
    c4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	d10d      	bne.n	c51c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c500:	f7f4 fa7e 	bl	a00 <Adc_schm_read_msr>
    c504:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c506:	9b00      	ldr	r3, [sp, #0]
    c508:	f003 0301 	and.w	r3, r3, #1
    c50c:	2b00      	cmp	r3, #0
    c50e:	d100      	bne.n	c512 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c510:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    c512:	490a      	ldr	r1, [pc, #40]	; (c53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    c514:	9b01      	ldr	r3, [sp, #4]
    c516:	9a00      	ldr	r2, [sp, #0]
    c518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    c51c:	4a06      	ldr	r2, [pc, #24]	; (c538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c51e:	9b01      	ldr	r3, [sp, #4]
    c520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c524:	1c5a      	adds	r2, r3, #1
    c526:	4904      	ldr	r1, [pc, #16]	; (c538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c528:	9b01      	ldr	r3, [sp, #4]
    c52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c52e:	bf00      	nop
    c530:	b003      	add	sp, #12
    c532:	f85d fb04 	ldr.w	pc, [sp], #4
    c536:	bf00      	nop
    c538:	1fff8ec0 	.word	0x1fff8ec0
    c53c:	1fff8ebc 	.word	0x1fff8ebc

0000c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c540:	b500      	push	{lr}
    c542:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c544:	f7f4 fb46 	bl	bd4 <Sys_GetCoreID>
    c548:	4603      	mov	r3, r0
    c54a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    c54c:	4a0d      	ldr	r2, [pc, #52]	; (c584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c54e:	9b01      	ldr	r3, [sp, #4]
    c550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c554:	1e5a      	subs	r2, r3, #1
    c556:	490b      	ldr	r1, [pc, #44]	; (c584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c558:	9b01      	ldr	r3, [sp, #4]
    c55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    c55e:	4a0a      	ldr	r2, [pc, #40]	; (c588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    c560:	9b01      	ldr	r3, [sp, #4]
    c562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c566:	f003 0301 	and.w	r3, r3, #1
    c56a:	2b00      	cmp	r3, #0
    c56c:	d106      	bne.n	c57c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    c56e:	4a05      	ldr	r2, [pc, #20]	; (c584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c570:	9b01      	ldr	r3, [sp, #4]
    c572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c576:	2b00      	cmp	r3, #0
    c578:	d100      	bne.n	c57c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c57a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c57c:	bf00      	nop
    c57e:	b003      	add	sp, #12
    c580:	f85d fb04 	ldr.w	pc, [sp], #4
    c584:	1fff8ec0 	.word	0x1fff8ec0
    c588:	1fff8ebc 	.word	0x1fff8ebc

0000c58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c58c:	b500      	push	{lr}
    c58e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c590:	f7f4 fb20 	bl	bd4 <Sys_GetCoreID>
    c594:	4603      	mov	r3, r0
    c596:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    c598:	4a10      	ldr	r2, [pc, #64]	; (c5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c59a:	9b01      	ldr	r3, [sp, #4]
    c59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5a0:	2b00      	cmp	r3, #0
    c5a2:	d10d      	bne.n	c5c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c5a4:	f7f4 fa2c 	bl	a00 <Adc_schm_read_msr>
    c5a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c5aa:	9b00      	ldr	r3, [sp, #0]
    c5ac:	f003 0301 	and.w	r3, r3, #1
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	d100      	bne.n	c5b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c5b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    c5b6:	490a      	ldr	r1, [pc, #40]	; (c5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    c5b8:	9b01      	ldr	r3, [sp, #4]
    c5ba:	9a00      	ldr	r2, [sp, #0]
    c5bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    c5c0:	4a06      	ldr	r2, [pc, #24]	; (c5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c5c2:	9b01      	ldr	r3, [sp, #4]
    c5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5c8:	1c5a      	adds	r2, r3, #1
    c5ca:	4904      	ldr	r1, [pc, #16]	; (c5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c5cc:	9b01      	ldr	r3, [sp, #4]
    c5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c5d2:	bf00      	nop
    c5d4:	b003      	add	sp, #12
    c5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    c5da:	bf00      	nop
    c5dc:	1fff8ec8 	.word	0x1fff8ec8
    c5e0:	1fff8ec4 	.word	0x1fff8ec4

0000c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c5e4:	b500      	push	{lr}
    c5e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5e8:	f7f4 faf4 	bl	bd4 <Sys_GetCoreID>
    c5ec:	4603      	mov	r3, r0
    c5ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    c5f0:	4a0d      	ldr	r2, [pc, #52]	; (c628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c5f2:	9b01      	ldr	r3, [sp, #4]
    c5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5f8:	1e5a      	subs	r2, r3, #1
    c5fa:	490b      	ldr	r1, [pc, #44]	; (c628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c5fc:	9b01      	ldr	r3, [sp, #4]
    c5fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    c602:	4a0a      	ldr	r2, [pc, #40]	; (c62c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    c604:	9b01      	ldr	r3, [sp, #4]
    c606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c60a:	f003 0301 	and.w	r3, r3, #1
    c60e:	2b00      	cmp	r3, #0
    c610:	d106      	bne.n	c620 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c612:	4a05      	ldr	r2, [pc, #20]	; (c628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c614:	9b01      	ldr	r3, [sp, #4]
    c616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c61a:	2b00      	cmp	r3, #0
    c61c:	d100      	bne.n	c620 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c61e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c620:	bf00      	nop
    c622:	b003      	add	sp, #12
    c624:	f85d fb04 	ldr.w	pc, [sp], #4
    c628:	1fff8ec8 	.word	0x1fff8ec8
    c62c:	1fff8ec4 	.word	0x1fff8ec4

0000c630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c630:	b500      	push	{lr}
    c632:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c634:	f7f4 face 	bl	bd4 <Sys_GetCoreID>
    c638:	4603      	mov	r3, r0
    c63a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c63c:	4a10      	ldr	r2, [pc, #64]	; (c680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c63e:	9b01      	ldr	r3, [sp, #4]
    c640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c644:	2b00      	cmp	r3, #0
    c646:	d10d      	bne.n	c664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c648:	f7f4 f9da 	bl	a00 <Adc_schm_read_msr>
    c64c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c64e:	9b00      	ldr	r3, [sp, #0]
    c650:	f003 0301 	and.w	r3, r3, #1
    c654:	2b00      	cmp	r3, #0
    c656:	d100      	bne.n	c65a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c658:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c65a:	490a      	ldr	r1, [pc, #40]	; (c684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	9a00      	ldr	r2, [sp, #0]
    c660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c664:	4a06      	ldr	r2, [pc, #24]	; (c680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c666:	9b01      	ldr	r3, [sp, #4]
    c668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c66c:	1c5a      	adds	r2, r3, #1
    c66e:	4904      	ldr	r1, [pc, #16]	; (c680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c670:	9b01      	ldr	r3, [sp, #4]
    c672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c676:	bf00      	nop
    c678:	b003      	add	sp, #12
    c67a:	f85d fb04 	ldr.w	pc, [sp], #4
    c67e:	bf00      	nop
    c680:	1fff8ed0 	.word	0x1fff8ed0
    c684:	1fff8ecc 	.word	0x1fff8ecc

0000c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c688:	b500      	push	{lr}
    c68a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c68c:	f7f4 faa2 	bl	bd4 <Sys_GetCoreID>
    c690:	4603      	mov	r3, r0
    c692:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c694:	4a0d      	ldr	r2, [pc, #52]	; (c6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c696:	9b01      	ldr	r3, [sp, #4]
    c698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c69c:	1e5a      	subs	r2, r3, #1
    c69e:	490b      	ldr	r1, [pc, #44]	; (c6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c6a0:	9b01      	ldr	r3, [sp, #4]
    c6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c6a6:	4a0a      	ldr	r2, [pc, #40]	; (c6d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c6a8:	9b01      	ldr	r3, [sp, #4]
    c6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ae:	f003 0301 	and.w	r3, r3, #1
    c6b2:	2b00      	cmp	r3, #0
    c6b4:	d106      	bne.n	c6c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c6b6:	4a05      	ldr	r2, [pc, #20]	; (c6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c6b8:	9b01      	ldr	r3, [sp, #4]
    c6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d100      	bne.n	c6c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c6c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c6c4:	bf00      	nop
    c6c6:	b003      	add	sp, #12
    c6c8:	f85d fb04 	ldr.w	pc, [sp], #4
    c6cc:	1fff8ed0 	.word	0x1fff8ed0
    c6d0:	1fff8ecc 	.word	0x1fff8ecc

0000c6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c6d4:	b500      	push	{lr}
    c6d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6d8:	f7f4 fa7c 	bl	bd4 <Sys_GetCoreID>
    c6dc:	4603      	mov	r3, r0
    c6de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c6e0:	4a10      	ldr	r2, [pc, #64]	; (c724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c6e2:	9b01      	ldr	r3, [sp, #4]
    c6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6e8:	2b00      	cmp	r3, #0
    c6ea:	d10d      	bne.n	c708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6ec:	f7f4 f988 	bl	a00 <Adc_schm_read_msr>
    c6f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6f2:	9b00      	ldr	r3, [sp, #0]
    c6f4:	f003 0301 	and.w	r3, r3, #1
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d100      	bne.n	c6fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c6fe:	490a      	ldr	r1, [pc, #40]	; (c728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c700:	9b01      	ldr	r3, [sp, #4]
    c702:	9a00      	ldr	r2, [sp, #0]
    c704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c708:	4a06      	ldr	r2, [pc, #24]	; (c724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c70a:	9b01      	ldr	r3, [sp, #4]
    c70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c710:	1c5a      	adds	r2, r3, #1
    c712:	4904      	ldr	r1, [pc, #16]	; (c724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c714:	9b01      	ldr	r3, [sp, #4]
    c716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c71a:	bf00      	nop
    c71c:	b003      	add	sp, #12
    c71e:	f85d fb04 	ldr.w	pc, [sp], #4
    c722:	bf00      	nop
    c724:	1fff8ed8 	.word	0x1fff8ed8
    c728:	1fff8ed4 	.word	0x1fff8ed4

0000c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c72c:	b500      	push	{lr}
    c72e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c730:	f7f4 fa50 	bl	bd4 <Sys_GetCoreID>
    c734:	4603      	mov	r3, r0
    c736:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c738:	4a0d      	ldr	r2, [pc, #52]	; (c770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c73a:	9b01      	ldr	r3, [sp, #4]
    c73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c740:	1e5a      	subs	r2, r3, #1
    c742:	490b      	ldr	r1, [pc, #44]	; (c770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c744:	9b01      	ldr	r3, [sp, #4]
    c746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c74a:	4a0a      	ldr	r2, [pc, #40]	; (c774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c74c:	9b01      	ldr	r3, [sp, #4]
    c74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c752:	f003 0301 	and.w	r3, r3, #1
    c756:	2b00      	cmp	r3, #0
    c758:	d106      	bne.n	c768 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c75a:	4a05      	ldr	r2, [pc, #20]	; (c770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c75c:	9b01      	ldr	r3, [sp, #4]
    c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c762:	2b00      	cmp	r3, #0
    c764:	d100      	bne.n	c768 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c766:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c768:	bf00      	nop
    c76a:	b003      	add	sp, #12
    c76c:	f85d fb04 	ldr.w	pc, [sp], #4
    c770:	1fff8ed8 	.word	0x1fff8ed8
    c774:	1fff8ed4 	.word	0x1fff8ed4

0000c778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c778:	b500      	push	{lr}
    c77a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c77c:	f7f4 fa2a 	bl	bd4 <Sys_GetCoreID>
    c780:	4603      	mov	r3, r0
    c782:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c784:	4a10      	ldr	r2, [pc, #64]	; (c7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c786:	9b01      	ldr	r3, [sp, #4]
    c788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c78c:	2b00      	cmp	r3, #0
    c78e:	d10d      	bne.n	c7ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c790:	f7f4 f936 	bl	a00 <Adc_schm_read_msr>
    c794:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c796:	9b00      	ldr	r3, [sp, #0]
    c798:	f003 0301 	and.w	r3, r3, #1
    c79c:	2b00      	cmp	r3, #0
    c79e:	d100      	bne.n	c7a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c7a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c7a2:	490a      	ldr	r1, [pc, #40]	; (c7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c7a4:	9b01      	ldr	r3, [sp, #4]
    c7a6:	9a00      	ldr	r2, [sp, #0]
    c7a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c7ac:	4a06      	ldr	r2, [pc, #24]	; (c7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c7ae:	9b01      	ldr	r3, [sp, #4]
    c7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7b4:	1c5a      	adds	r2, r3, #1
    c7b6:	4904      	ldr	r1, [pc, #16]	; (c7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c7b8:	9b01      	ldr	r3, [sp, #4]
    c7ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c7be:	bf00      	nop
    c7c0:	b003      	add	sp, #12
    c7c2:	f85d fb04 	ldr.w	pc, [sp], #4
    c7c6:	bf00      	nop
    c7c8:	1fff8ee0 	.word	0x1fff8ee0
    c7cc:	1fff8edc 	.word	0x1fff8edc

0000c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c7d0:	b500      	push	{lr}
    c7d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7d4:	f7f4 f9fe 	bl	bd4 <Sys_GetCoreID>
    c7d8:	4603      	mov	r3, r0
    c7da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c7dc:	4a0d      	ldr	r2, [pc, #52]	; (c814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c7de:	9b01      	ldr	r3, [sp, #4]
    c7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7e4:	1e5a      	subs	r2, r3, #1
    c7e6:	490b      	ldr	r1, [pc, #44]	; (c814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c7e8:	9b01      	ldr	r3, [sp, #4]
    c7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c7ee:	4a0a      	ldr	r2, [pc, #40]	; (c818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f6:	f003 0301 	and.w	r3, r3, #1
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	d106      	bne.n	c80c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c7fe:	4a05      	ldr	r2, [pc, #20]	; (c814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c800:	9b01      	ldr	r3, [sp, #4]
    c802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c806:	2b00      	cmp	r3, #0
    c808:	d100      	bne.n	c80c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c80a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c80c:	bf00      	nop
    c80e:	b003      	add	sp, #12
    c810:	f85d fb04 	ldr.w	pc, [sp], #4
    c814:	1fff8ee0 	.word	0x1fff8ee0
    c818:	1fff8edc 	.word	0x1fff8edc

0000c81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c81c:	b500      	push	{lr}
    c81e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c820:	f7f4 f9d8 	bl	bd4 <Sys_GetCoreID>
    c824:	4603      	mov	r3, r0
    c826:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c828:	4a10      	ldr	r2, [pc, #64]	; (c86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c82a:	9b01      	ldr	r3, [sp, #4]
    c82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c830:	2b00      	cmp	r3, #0
    c832:	d10d      	bne.n	c850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c834:	f7f4 f8e4 	bl	a00 <Adc_schm_read_msr>
    c838:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c83a:	9b00      	ldr	r3, [sp, #0]
    c83c:	f003 0301 	and.w	r3, r3, #1
    c840:	2b00      	cmp	r3, #0
    c842:	d100      	bne.n	c846 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c844:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c846:	490a      	ldr	r1, [pc, #40]	; (c870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c848:	9b01      	ldr	r3, [sp, #4]
    c84a:	9a00      	ldr	r2, [sp, #0]
    c84c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c850:	4a06      	ldr	r2, [pc, #24]	; (c86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c852:	9b01      	ldr	r3, [sp, #4]
    c854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c858:	1c5a      	adds	r2, r3, #1
    c85a:	4904      	ldr	r1, [pc, #16]	; (c86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c85c:	9b01      	ldr	r3, [sp, #4]
    c85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c862:	bf00      	nop
    c864:	b003      	add	sp, #12
    c866:	f85d fb04 	ldr.w	pc, [sp], #4
    c86a:	bf00      	nop
    c86c:	1fff8ee8 	.word	0x1fff8ee8
    c870:	1fff8ee4 	.word	0x1fff8ee4

0000c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c874:	b500      	push	{lr}
    c876:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c878:	f7f4 f9ac 	bl	bd4 <Sys_GetCoreID>
    c87c:	4603      	mov	r3, r0
    c87e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c880:	4a0d      	ldr	r2, [pc, #52]	; (c8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c882:	9b01      	ldr	r3, [sp, #4]
    c884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c888:	1e5a      	subs	r2, r3, #1
    c88a:	490b      	ldr	r1, [pc, #44]	; (c8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c88c:	9b01      	ldr	r3, [sp, #4]
    c88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c892:	4a0a      	ldr	r2, [pc, #40]	; (c8bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c894:	9b01      	ldr	r3, [sp, #4]
    c896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c89a:	f003 0301 	and.w	r3, r3, #1
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d106      	bne.n	c8b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c8a2:	4a05      	ldr	r2, [pc, #20]	; (c8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c8a4:	9b01      	ldr	r3, [sp, #4]
    c8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8aa:	2b00      	cmp	r3, #0
    c8ac:	d100      	bne.n	c8b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c8ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c8b0:	bf00      	nop
    c8b2:	b003      	add	sp, #12
    c8b4:	f85d fb04 	ldr.w	pc, [sp], #4
    c8b8:	1fff8ee8 	.word	0x1fff8ee8
    c8bc:	1fff8ee4 	.word	0x1fff8ee4

0000c8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c8c0:	b500      	push	{lr}
    c8c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8c4:	f7f4 f986 	bl	bd4 <Sys_GetCoreID>
    c8c8:	4603      	mov	r3, r0
    c8ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c8cc:	4a10      	ldr	r2, [pc, #64]	; (c910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c8ce:	9b01      	ldr	r3, [sp, #4]
    c8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d10d      	bne.n	c8f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c8d8:	f7f4 f892 	bl	a00 <Adc_schm_read_msr>
    c8dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c8de:	9b00      	ldr	r3, [sp, #0]
    c8e0:	f003 0301 	and.w	r3, r3, #1
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d100      	bne.n	c8ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c8ea:	490a      	ldr	r1, [pc, #40]	; (c914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c8ec:	9b01      	ldr	r3, [sp, #4]
    c8ee:	9a00      	ldr	r2, [sp, #0]
    c8f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c8f4:	4a06      	ldr	r2, [pc, #24]	; (c910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c8f6:	9b01      	ldr	r3, [sp, #4]
    c8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8fc:	1c5a      	adds	r2, r3, #1
    c8fe:	4904      	ldr	r1, [pc, #16]	; (c910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c900:	9b01      	ldr	r3, [sp, #4]
    c902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c906:	bf00      	nop
    c908:	b003      	add	sp, #12
    c90a:	f85d fb04 	ldr.w	pc, [sp], #4
    c90e:	bf00      	nop
    c910:	1fff8ef0 	.word	0x1fff8ef0
    c914:	1fff8eec 	.word	0x1fff8eec

0000c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c918:	b500      	push	{lr}
    c91a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c91c:	f7f4 f95a 	bl	bd4 <Sys_GetCoreID>
    c920:	4603      	mov	r3, r0
    c922:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c924:	4a0d      	ldr	r2, [pc, #52]	; (c95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c926:	9b01      	ldr	r3, [sp, #4]
    c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c92c:	1e5a      	subs	r2, r3, #1
    c92e:	490b      	ldr	r1, [pc, #44]	; (c95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c930:	9b01      	ldr	r3, [sp, #4]
    c932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c936:	4a0a      	ldr	r2, [pc, #40]	; (c960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c938:	9b01      	ldr	r3, [sp, #4]
    c93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c93e:	f003 0301 	and.w	r3, r3, #1
    c942:	2b00      	cmp	r3, #0
    c944:	d106      	bne.n	c954 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c946:	4a05      	ldr	r2, [pc, #20]	; (c95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c948:	9b01      	ldr	r3, [sp, #4]
    c94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c94e:	2b00      	cmp	r3, #0
    c950:	d100      	bne.n	c954 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c952:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c954:	bf00      	nop
    c956:	b003      	add	sp, #12
    c958:	f85d fb04 	ldr.w	pc, [sp], #4
    c95c:	1fff8ef0 	.word	0x1fff8ef0
    c960:	1fff8eec 	.word	0x1fff8eec

0000c964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c964:	b500      	push	{lr}
    c966:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c968:	f7f4 f934 	bl	bd4 <Sys_GetCoreID>
    c96c:	4603      	mov	r3, r0
    c96e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c970:	4a10      	ldr	r2, [pc, #64]	; (c9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c972:	9b01      	ldr	r3, [sp, #4]
    c974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c978:	2b00      	cmp	r3, #0
    c97a:	d10d      	bne.n	c998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c97c:	f7f4 f840 	bl	a00 <Adc_schm_read_msr>
    c980:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c982:	9b00      	ldr	r3, [sp, #0]
    c984:	f003 0301 	and.w	r3, r3, #1
    c988:	2b00      	cmp	r3, #0
    c98a:	d100      	bne.n	c98e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c98c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c98e:	490a      	ldr	r1, [pc, #40]	; (c9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c990:	9b01      	ldr	r3, [sp, #4]
    c992:	9a00      	ldr	r2, [sp, #0]
    c994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c998:	4a06      	ldr	r2, [pc, #24]	; (c9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c99a:	9b01      	ldr	r3, [sp, #4]
    c99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9a0:	1c5a      	adds	r2, r3, #1
    c9a2:	4904      	ldr	r1, [pc, #16]	; (c9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c9a4:	9b01      	ldr	r3, [sp, #4]
    c9a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c9aa:	bf00      	nop
    c9ac:	b003      	add	sp, #12
    c9ae:	f85d fb04 	ldr.w	pc, [sp], #4
    c9b2:	bf00      	nop
    c9b4:	1fff8ef8 	.word	0x1fff8ef8
    c9b8:	1fff8ef4 	.word	0x1fff8ef4

0000c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c9bc:	b500      	push	{lr}
    c9be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9c0:	f7f4 f908 	bl	bd4 <Sys_GetCoreID>
    c9c4:	4603      	mov	r3, r0
    c9c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c9c8:	4a0d      	ldr	r2, [pc, #52]	; (ca00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c9ca:	9b01      	ldr	r3, [sp, #4]
    c9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9d0:	1e5a      	subs	r2, r3, #1
    c9d2:	490b      	ldr	r1, [pc, #44]	; (ca00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c9d4:	9b01      	ldr	r3, [sp, #4]
    c9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c9da:	4a0a      	ldr	r2, [pc, #40]	; (ca04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c9dc:	9b01      	ldr	r3, [sp, #4]
    c9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e2:	f003 0301 	and.w	r3, r3, #1
    c9e6:	2b00      	cmp	r3, #0
    c9e8:	d106      	bne.n	c9f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c9ea:	4a05      	ldr	r2, [pc, #20]	; (ca00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d100      	bne.n	c9f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9f8:	bf00      	nop
    c9fa:	b003      	add	sp, #12
    c9fc:	f85d fb04 	ldr.w	pc, [sp], #4
    ca00:	1fff8ef8 	.word	0x1fff8ef8
    ca04:	1fff8ef4 	.word	0x1fff8ef4

0000ca08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    ca08:	b500      	push	{lr}
    ca0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca0c:	f7f4 f8e2 	bl	bd4 <Sys_GetCoreID>
    ca10:	4603      	mov	r3, r0
    ca12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    ca14:	4a10      	ldr	r2, [pc, #64]	; (ca58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    ca16:	9b01      	ldr	r3, [sp, #4]
    ca18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d10d      	bne.n	ca3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca20:	f7f3 ffee 	bl	a00 <Adc_schm_read_msr>
    ca24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca26:	9b00      	ldr	r3, [sp, #0]
    ca28:	f003 0301 	and.w	r3, r3, #1
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	d100      	bne.n	ca32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    ca32:	490a      	ldr	r1, [pc, #40]	; (ca5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	9a00      	ldr	r2, [sp, #0]
    ca38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    ca3c:	4a06      	ldr	r2, [pc, #24]	; (ca58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    ca3e:	9b01      	ldr	r3, [sp, #4]
    ca40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca44:	1c5a      	adds	r2, r3, #1
    ca46:	4904      	ldr	r1, [pc, #16]	; (ca58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca4e:	bf00      	nop
    ca50:	b003      	add	sp, #12
    ca52:	f85d fb04 	ldr.w	pc, [sp], #4
    ca56:	bf00      	nop
    ca58:	1fff8f00 	.word	0x1fff8f00
    ca5c:	1fff8efc 	.word	0x1fff8efc

0000ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    ca60:	b500      	push	{lr}
    ca62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca64:	f7f4 f8b6 	bl	bd4 <Sys_GetCoreID>
    ca68:	4603      	mov	r3, r0
    ca6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    ca6c:	4a0d      	ldr	r2, [pc, #52]	; (caa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    ca6e:	9b01      	ldr	r3, [sp, #4]
    ca70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca74:	1e5a      	subs	r2, r3, #1
    ca76:	490b      	ldr	r1, [pc, #44]	; (caa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    ca78:	9b01      	ldr	r3, [sp, #4]
    ca7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    ca7e:	4a0a      	ldr	r2, [pc, #40]	; (caa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    ca80:	9b01      	ldr	r3, [sp, #4]
    ca82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca86:	f003 0301 	and.w	r3, r3, #1
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d106      	bne.n	ca9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    ca8e:	4a05      	ldr	r2, [pc, #20]	; (caa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    ca90:	9b01      	ldr	r3, [sp, #4]
    ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca96:	2b00      	cmp	r3, #0
    ca98:	d100      	bne.n	ca9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca9c:	bf00      	nop
    ca9e:	b003      	add	sp, #12
    caa0:	f85d fb04 	ldr.w	pc, [sp], #4
    caa4:	1fff8f00 	.word	0x1fff8f00
    caa8:	1fff8efc 	.word	0x1fff8efc

0000caac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    caac:	b500      	push	{lr}
    caae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cab0:	f7f4 f890 	bl	bd4 <Sys_GetCoreID>
    cab4:	4603      	mov	r3, r0
    cab6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    cab8:	4a10      	ldr	r2, [pc, #64]	; (cafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    caba:	9b01      	ldr	r3, [sp, #4]
    cabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cac0:	2b00      	cmp	r3, #0
    cac2:	d10d      	bne.n	cae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cac4:	f7f3 ff9c 	bl	a00 <Adc_schm_read_msr>
    cac8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    caca:	9b00      	ldr	r3, [sp, #0]
    cacc:	f003 0301 	and.w	r3, r3, #1
    cad0:	2b00      	cmp	r3, #0
    cad2:	d100      	bne.n	cad6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cad4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    cad6:	490a      	ldr	r1, [pc, #40]	; (cb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	9a00      	ldr	r2, [sp, #0]
    cadc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    cae0:	4a06      	ldr	r2, [pc, #24]	; (cafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    cae2:	9b01      	ldr	r3, [sp, #4]
    cae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae8:	1c5a      	adds	r2, r3, #1
    caea:	4904      	ldr	r1, [pc, #16]	; (cafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    caec:	9b01      	ldr	r3, [sp, #4]
    caee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    caf2:	bf00      	nop
    caf4:	b003      	add	sp, #12
    caf6:	f85d fb04 	ldr.w	pc, [sp], #4
    cafa:	bf00      	nop
    cafc:	1fff8f08 	.word	0x1fff8f08
    cb00:	1fff8f04 	.word	0x1fff8f04

0000cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    cb04:	b500      	push	{lr}
    cb06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb08:	f7f4 f864 	bl	bd4 <Sys_GetCoreID>
    cb0c:	4603      	mov	r3, r0
    cb0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    cb10:	4a0d      	ldr	r2, [pc, #52]	; (cb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    cb12:	9b01      	ldr	r3, [sp, #4]
    cb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb18:	1e5a      	subs	r2, r3, #1
    cb1a:	490b      	ldr	r1, [pc, #44]	; (cb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    cb1c:	9b01      	ldr	r3, [sp, #4]
    cb1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    cb22:	4a0a      	ldr	r2, [pc, #40]	; (cb4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    cb24:	9b01      	ldr	r3, [sp, #4]
    cb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb2a:	f003 0301 	and.w	r3, r3, #1
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d106      	bne.n	cb40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    cb32:	4a05      	ldr	r2, [pc, #20]	; (cb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    cb34:	9b01      	ldr	r3, [sp, #4]
    cb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d100      	bne.n	cb40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb40:	bf00      	nop
    cb42:	b003      	add	sp, #12
    cb44:	f85d fb04 	ldr.w	pc, [sp], #4
    cb48:	1fff8f08 	.word	0x1fff8f08
    cb4c:	1fff8f04 	.word	0x1fff8f04

0000cb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    cb50:	b500      	push	{lr}
    cb52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb54:	f7f4 f83e 	bl	bd4 <Sys_GetCoreID>
    cb58:	4603      	mov	r3, r0
    cb5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    cb5c:	4a10      	ldr	r2, [pc, #64]	; (cba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    cb5e:	9b01      	ldr	r3, [sp, #4]
    cb60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb64:	2b00      	cmp	r3, #0
    cb66:	d10d      	bne.n	cb84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb68:	f7f3 ff4a 	bl	a00 <Adc_schm_read_msr>
    cb6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb6e:	9b00      	ldr	r3, [sp, #0]
    cb70:	f003 0301 	and.w	r3, r3, #1
    cb74:	2b00      	cmp	r3, #0
    cb76:	d100      	bne.n	cb7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    cb7a:	490a      	ldr	r1, [pc, #40]	; (cba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    cb7c:	9b01      	ldr	r3, [sp, #4]
    cb7e:	9a00      	ldr	r2, [sp, #0]
    cb80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    cb84:	4a06      	ldr	r2, [pc, #24]	; (cba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    cb86:	9b01      	ldr	r3, [sp, #4]
    cb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb8c:	1c5a      	adds	r2, r3, #1
    cb8e:	4904      	ldr	r1, [pc, #16]	; (cba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    cb90:	9b01      	ldr	r3, [sp, #4]
    cb92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb96:	bf00      	nop
    cb98:	b003      	add	sp, #12
    cb9a:	f85d fb04 	ldr.w	pc, [sp], #4
    cb9e:	bf00      	nop
    cba0:	1fff8f10 	.word	0x1fff8f10
    cba4:	1fff8f0c 	.word	0x1fff8f0c

0000cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    cba8:	b500      	push	{lr}
    cbaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbac:	f7f4 f812 	bl	bd4 <Sys_GetCoreID>
    cbb0:	4603      	mov	r3, r0
    cbb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    cbb4:	4a0d      	ldr	r2, [pc, #52]	; (cbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    cbb6:	9b01      	ldr	r3, [sp, #4]
    cbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbbc:	1e5a      	subs	r2, r3, #1
    cbbe:	490b      	ldr	r1, [pc, #44]	; (cbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    cbc0:	9b01      	ldr	r3, [sp, #4]
    cbc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    cbc6:	4a0a      	ldr	r2, [pc, #40]	; (cbf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    cbc8:	9b01      	ldr	r3, [sp, #4]
    cbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbce:	f003 0301 	and.w	r3, r3, #1
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d106      	bne.n	cbe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    cbd6:	4a05      	ldr	r2, [pc, #20]	; (cbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    cbd8:	9b01      	ldr	r3, [sp, #4]
    cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbde:	2b00      	cmp	r3, #0
    cbe0:	d100      	bne.n	cbe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cbe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cbe4:	bf00      	nop
    cbe6:	b003      	add	sp, #12
    cbe8:	f85d fb04 	ldr.w	pc, [sp], #4
    cbec:	1fff8f10 	.word	0x1fff8f10
    cbf0:	1fff8f0c 	.word	0x1fff8f0c

0000cbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    cbf4:	b500      	push	{lr}
    cbf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbf8:	f7f3 ffec 	bl	bd4 <Sys_GetCoreID>
    cbfc:	4603      	mov	r3, r0
    cbfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    cc00:	4a10      	ldr	r2, [pc, #64]	; (cc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc08:	2b00      	cmp	r3, #0
    cc0a:	d10d      	bne.n	cc28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc0c:	f7f3 fef8 	bl	a00 <Adc_schm_read_msr>
    cc10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc12:	9b00      	ldr	r3, [sp, #0]
    cc14:	f003 0301 	and.w	r3, r3, #1
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d100      	bne.n	cc1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    cc1e:	490a      	ldr	r1, [pc, #40]	; (cc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    cc20:	9b01      	ldr	r3, [sp, #4]
    cc22:	9a00      	ldr	r2, [sp, #0]
    cc24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    cc28:	4a06      	ldr	r2, [pc, #24]	; (cc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    cc2a:	9b01      	ldr	r3, [sp, #4]
    cc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc30:	1c5a      	adds	r2, r3, #1
    cc32:	4904      	ldr	r1, [pc, #16]	; (cc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    cc34:	9b01      	ldr	r3, [sp, #4]
    cc36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc3a:	bf00      	nop
    cc3c:	b003      	add	sp, #12
    cc3e:	f85d fb04 	ldr.w	pc, [sp], #4
    cc42:	bf00      	nop
    cc44:	1fff8f18 	.word	0x1fff8f18
    cc48:	1fff8f14 	.word	0x1fff8f14

0000cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    cc4c:	b500      	push	{lr}
    cc4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc50:	f7f3 ffc0 	bl	bd4 <Sys_GetCoreID>
    cc54:	4603      	mov	r3, r0
    cc56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    cc58:	4a0d      	ldr	r2, [pc, #52]	; (cc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    cc5a:	9b01      	ldr	r3, [sp, #4]
    cc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc60:	1e5a      	subs	r2, r3, #1
    cc62:	490b      	ldr	r1, [pc, #44]	; (cc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    cc64:	9b01      	ldr	r3, [sp, #4]
    cc66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    cc6a:	4a0a      	ldr	r2, [pc, #40]	; (cc94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    cc6c:	9b01      	ldr	r3, [sp, #4]
    cc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc72:	f003 0301 	and.w	r3, r3, #1
    cc76:	2b00      	cmp	r3, #0
    cc78:	d106      	bne.n	cc88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    cc7a:	4a05      	ldr	r2, [pc, #20]	; (cc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    cc7c:	9b01      	ldr	r3, [sp, #4]
    cc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc82:	2b00      	cmp	r3, #0
    cc84:	d100      	bne.n	cc88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc88:	bf00      	nop
    cc8a:	b003      	add	sp, #12
    cc8c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc90:	1fff8f18 	.word	0x1fff8f18
    cc94:	1fff8f14 	.word	0x1fff8f14

0000cc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    cc98:	b500      	push	{lr}
    cc9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc9c:	f7f3 ff9a 	bl	bd4 <Sys_GetCoreID>
    cca0:	4603      	mov	r3, r0
    cca2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    cca4:	4a10      	ldr	r2, [pc, #64]	; (cce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    cca6:	9b01      	ldr	r3, [sp, #4]
    cca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccac:	2b00      	cmp	r3, #0
    ccae:	d10d      	bne.n	cccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ccb0:	f7f3 fea6 	bl	a00 <Adc_schm_read_msr>
    ccb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ccb6:	9b00      	ldr	r3, [sp, #0]
    ccb8:	f003 0301 	and.w	r3, r3, #1
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d100      	bne.n	ccc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ccc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    ccc2:	490a      	ldr	r1, [pc, #40]	; (ccec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	9a00      	ldr	r2, [sp, #0]
    ccc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    cccc:	4a06      	ldr	r2, [pc, #24]	; (cce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    ccce:	9b01      	ldr	r3, [sp, #4]
    ccd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd4:	1c5a      	adds	r2, r3, #1
    ccd6:	4904      	ldr	r1, [pc, #16]	; (cce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    ccd8:	9b01      	ldr	r3, [sp, #4]
    ccda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ccde:	bf00      	nop
    cce0:	b003      	add	sp, #12
    cce2:	f85d fb04 	ldr.w	pc, [sp], #4
    cce6:	bf00      	nop
    cce8:	1fff8f20 	.word	0x1fff8f20
    ccec:	1fff8f1c 	.word	0x1fff8f1c

0000ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    ccf0:	b500      	push	{lr}
    ccf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccf4:	f7f3 ff6e 	bl	bd4 <Sys_GetCoreID>
    ccf8:	4603      	mov	r3, r0
    ccfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    ccfc:	4a0d      	ldr	r2, [pc, #52]	; (cd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    ccfe:	9b01      	ldr	r3, [sp, #4]
    cd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd04:	1e5a      	subs	r2, r3, #1
    cd06:	490b      	ldr	r1, [pc, #44]	; (cd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    cd08:	9b01      	ldr	r3, [sp, #4]
    cd0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    cd0e:	4a0a      	ldr	r2, [pc, #40]	; (cd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    cd10:	9b01      	ldr	r3, [sp, #4]
    cd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd16:	f003 0301 	and.w	r3, r3, #1
    cd1a:	2b00      	cmp	r3, #0
    cd1c:	d106      	bne.n	cd2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    cd1e:	4a05      	ldr	r2, [pc, #20]	; (cd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    cd20:	9b01      	ldr	r3, [sp, #4]
    cd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd26:	2b00      	cmp	r3, #0
    cd28:	d100      	bne.n	cd2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd2c:	bf00      	nop
    cd2e:	b003      	add	sp, #12
    cd30:	f85d fb04 	ldr.w	pc, [sp], #4
    cd34:	1fff8f20 	.word	0x1fff8f20
    cd38:	1fff8f1c 	.word	0x1fff8f1c

0000cd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    cd3c:	b500      	push	{lr}
    cd3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd40:	f7f3 ff48 	bl	bd4 <Sys_GetCoreID>
    cd44:	4603      	mov	r3, r0
    cd46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    cd48:	4a10      	ldr	r2, [pc, #64]	; (cd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    cd4a:	9b01      	ldr	r3, [sp, #4]
    cd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd50:	2b00      	cmp	r3, #0
    cd52:	d10d      	bne.n	cd70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd54:	f7f3 fe54 	bl	a00 <Adc_schm_read_msr>
    cd58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd5a:	9b00      	ldr	r3, [sp, #0]
    cd5c:	f003 0301 	and.w	r3, r3, #1
    cd60:	2b00      	cmp	r3, #0
    cd62:	d100      	bne.n	cd66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    cd66:	490a      	ldr	r1, [pc, #40]	; (cd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	9a00      	ldr	r2, [sp, #0]
    cd6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    cd70:	4a06      	ldr	r2, [pc, #24]	; (cd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    cd72:	9b01      	ldr	r3, [sp, #4]
    cd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd78:	1c5a      	adds	r2, r3, #1
    cd7a:	4904      	ldr	r1, [pc, #16]	; (cd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    cd7c:	9b01      	ldr	r3, [sp, #4]
    cd7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd82:	bf00      	nop
    cd84:	b003      	add	sp, #12
    cd86:	f85d fb04 	ldr.w	pc, [sp], #4
    cd8a:	bf00      	nop
    cd8c:	1fff8f28 	.word	0x1fff8f28
    cd90:	1fff8f24 	.word	0x1fff8f24

0000cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    cd94:	b500      	push	{lr}
    cd96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd98:	f7f3 ff1c 	bl	bd4 <Sys_GetCoreID>
    cd9c:	4603      	mov	r3, r0
    cd9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    cda0:	4a0d      	ldr	r2, [pc, #52]	; (cdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    cda2:	9b01      	ldr	r3, [sp, #4]
    cda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cda8:	1e5a      	subs	r2, r3, #1
    cdaa:	490b      	ldr	r1, [pc, #44]	; (cdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    cdac:	9b01      	ldr	r3, [sp, #4]
    cdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    cdb2:	4a0a      	ldr	r2, [pc, #40]	; (cddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    cdb4:	9b01      	ldr	r3, [sp, #4]
    cdb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdba:	f003 0301 	and.w	r3, r3, #1
    cdbe:	2b00      	cmp	r3, #0
    cdc0:	d106      	bne.n	cdd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    cdc2:	4a05      	ldr	r2, [pc, #20]	; (cdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    cdc4:	9b01      	ldr	r3, [sp, #4]
    cdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d100      	bne.n	cdd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cdce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cdd0:	bf00      	nop
    cdd2:	b003      	add	sp, #12
    cdd4:	f85d fb04 	ldr.w	pc, [sp], #4
    cdd8:	1fff8f28 	.word	0x1fff8f28
    cddc:	1fff8f24 	.word	0x1fff8f24

0000cde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    cde0:	b500      	push	{lr}
    cde2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cde4:	f7f3 fef6 	bl	bd4 <Sys_GetCoreID>
    cde8:	4603      	mov	r3, r0
    cdea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    cdec:	4a10      	ldr	r2, [pc, #64]	; (ce30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    cdee:	9b01      	ldr	r3, [sp, #4]
    cdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdf4:	2b00      	cmp	r3, #0
    cdf6:	d10d      	bne.n	ce14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdf8:	f7f3 fe02 	bl	a00 <Adc_schm_read_msr>
    cdfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdfe:	9b00      	ldr	r3, [sp, #0]
    ce00:	f003 0301 	and.w	r3, r3, #1
    ce04:	2b00      	cmp	r3, #0
    ce06:	d100      	bne.n	ce0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    ce0a:	490a      	ldr	r1, [pc, #40]	; (ce34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    ce0c:	9b01      	ldr	r3, [sp, #4]
    ce0e:	9a00      	ldr	r2, [sp, #0]
    ce10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    ce14:	4a06      	ldr	r2, [pc, #24]	; (ce30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ce16:	9b01      	ldr	r3, [sp, #4]
    ce18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce1c:	1c5a      	adds	r2, r3, #1
    ce1e:	4904      	ldr	r1, [pc, #16]	; (ce30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ce20:	9b01      	ldr	r3, [sp, #4]
    ce22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce26:	bf00      	nop
    ce28:	b003      	add	sp, #12
    ce2a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce2e:	bf00      	nop
    ce30:	1fff8f30 	.word	0x1fff8f30
    ce34:	1fff8f2c 	.word	0x1fff8f2c

0000ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    ce38:	b500      	push	{lr}
    ce3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce3c:	f7f3 feca 	bl	bd4 <Sys_GetCoreID>
    ce40:	4603      	mov	r3, r0
    ce42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    ce44:	4a0d      	ldr	r2, [pc, #52]	; (ce7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ce46:	9b01      	ldr	r3, [sp, #4]
    ce48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce4c:	1e5a      	subs	r2, r3, #1
    ce4e:	490b      	ldr	r1, [pc, #44]	; (ce7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ce50:	9b01      	ldr	r3, [sp, #4]
    ce52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    ce56:	4a0a      	ldr	r2, [pc, #40]	; (ce80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    ce58:	9b01      	ldr	r3, [sp, #4]
    ce5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce5e:	f003 0301 	and.w	r3, r3, #1
    ce62:	2b00      	cmp	r3, #0
    ce64:	d106      	bne.n	ce74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    ce66:	4a05      	ldr	r2, [pc, #20]	; (ce7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ce68:	9b01      	ldr	r3, [sp, #4]
    ce6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce6e:	2b00      	cmp	r3, #0
    ce70:	d100      	bne.n	ce74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce74:	bf00      	nop
    ce76:	b003      	add	sp, #12
    ce78:	f85d fb04 	ldr.w	pc, [sp], #4
    ce7c:	1fff8f30 	.word	0x1fff8f30
    ce80:	1fff8f2c 	.word	0x1fff8f2c

0000ce84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    ce84:	b500      	push	{lr}
    ce86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce88:	f7f3 fea4 	bl	bd4 <Sys_GetCoreID>
    ce8c:	4603      	mov	r3, r0
    ce8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    ce90:	4a10      	ldr	r2, [pc, #64]	; (ced4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ce92:	9b01      	ldr	r3, [sp, #4]
    ce94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce98:	2b00      	cmp	r3, #0
    ce9a:	d10d      	bne.n	ceb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce9c:	f7f3 fdb0 	bl	a00 <Adc_schm_read_msr>
    cea0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cea2:	9b00      	ldr	r3, [sp, #0]
    cea4:	f003 0301 	and.w	r3, r3, #1
    cea8:	2b00      	cmp	r3, #0
    ceaa:	d100      	bne.n	ceae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ceac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    ceae:	490a      	ldr	r1, [pc, #40]	; (ced8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	9a00      	ldr	r2, [sp, #0]
    ceb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    ceb8:	4a06      	ldr	r2, [pc, #24]	; (ced4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ceba:	9b01      	ldr	r3, [sp, #4]
    cebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec0:	1c5a      	adds	r2, r3, #1
    cec2:	4904      	ldr	r1, [pc, #16]	; (ced4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    cec4:	9b01      	ldr	r3, [sp, #4]
    cec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ceca:	bf00      	nop
    cecc:	b003      	add	sp, #12
    cece:	f85d fb04 	ldr.w	pc, [sp], #4
    ced2:	bf00      	nop
    ced4:	1fff8f38 	.word	0x1fff8f38
    ced8:	1fff8f34 	.word	0x1fff8f34

0000cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    cedc:	b500      	push	{lr}
    cede:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cee0:	f7f3 fe78 	bl	bd4 <Sys_GetCoreID>
    cee4:	4603      	mov	r3, r0
    cee6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    cee8:	4a0d      	ldr	r2, [pc, #52]	; (cf20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    ceea:	9b01      	ldr	r3, [sp, #4]
    ceec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef0:	1e5a      	subs	r2, r3, #1
    cef2:	490b      	ldr	r1, [pc, #44]	; (cf20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cef4:	9b01      	ldr	r3, [sp, #4]
    cef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    cefa:	4a0a      	ldr	r2, [pc, #40]	; (cf24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    cefc:	9b01      	ldr	r3, [sp, #4]
    cefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf02:	f003 0301 	and.w	r3, r3, #1
    cf06:	2b00      	cmp	r3, #0
    cf08:	d106      	bne.n	cf18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    cf0a:	4a05      	ldr	r2, [pc, #20]	; (cf20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cf0c:	9b01      	ldr	r3, [sp, #4]
    cf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d100      	bne.n	cf18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf18:	bf00      	nop
    cf1a:	b003      	add	sp, #12
    cf1c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf20:	1fff8f38 	.word	0x1fff8f38
    cf24:	1fff8f34 	.word	0x1fff8f34

0000cf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cf28:	b500      	push	{lr}
    cf2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf2c:	f7f3 fe52 	bl	bd4 <Sys_GetCoreID>
    cf30:	4603      	mov	r3, r0
    cf32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    cf34:	4a10      	ldr	r2, [pc, #64]	; (cf78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cf36:	9b01      	ldr	r3, [sp, #4]
    cf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d10d      	bne.n	cf5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf40:	f7f3 fd5e 	bl	a00 <Adc_schm_read_msr>
    cf44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf46:	9b00      	ldr	r3, [sp, #0]
    cf48:	f003 0301 	and.w	r3, r3, #1
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d100      	bne.n	cf52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    cf52:	490a      	ldr	r1, [pc, #40]	; (cf7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    cf54:	9b01      	ldr	r3, [sp, #4]
    cf56:	9a00      	ldr	r2, [sp, #0]
    cf58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    cf5c:	4a06      	ldr	r2, [pc, #24]	; (cf78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cf5e:	9b01      	ldr	r3, [sp, #4]
    cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf64:	1c5a      	adds	r2, r3, #1
    cf66:	4904      	ldr	r1, [pc, #16]	; (cf78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cf68:	9b01      	ldr	r3, [sp, #4]
    cf6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf6e:	bf00      	nop
    cf70:	b003      	add	sp, #12
    cf72:	f85d fb04 	ldr.w	pc, [sp], #4
    cf76:	bf00      	nop
    cf78:	1fff8f40 	.word	0x1fff8f40
    cf7c:	1fff8f3c 	.word	0x1fff8f3c

0000cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cf80:	b500      	push	{lr}
    cf82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf84:	f7f3 fe26 	bl	bd4 <Sys_GetCoreID>
    cf88:	4603      	mov	r3, r0
    cf8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    cf8c:	4a0d      	ldr	r2, [pc, #52]	; (cfc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cf8e:	9b01      	ldr	r3, [sp, #4]
    cf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf94:	1e5a      	subs	r2, r3, #1
    cf96:	490b      	ldr	r1, [pc, #44]	; (cfc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cf98:	9b01      	ldr	r3, [sp, #4]
    cf9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    cf9e:	4a0a      	ldr	r2, [pc, #40]	; (cfc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    cfa0:	9b01      	ldr	r3, [sp, #4]
    cfa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa6:	f003 0301 	and.w	r3, r3, #1
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d106      	bne.n	cfbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    cfae:	4a05      	ldr	r2, [pc, #20]	; (cfc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cfb0:	9b01      	ldr	r3, [sp, #4]
    cfb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d100      	bne.n	cfbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cfba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cfbc:	bf00      	nop
    cfbe:	b003      	add	sp, #12
    cfc0:	f85d fb04 	ldr.w	pc, [sp], #4
    cfc4:	1fff8f40 	.word	0x1fff8f40
    cfc8:	1fff8f3c 	.word	0x1fff8f3c

0000cfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    cfcc:	b500      	push	{lr}
    cfce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfd0:	f7f3 fe00 	bl	bd4 <Sys_GetCoreID>
    cfd4:	4603      	mov	r3, r0
    cfd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    cfd8:	4a10      	ldr	r2, [pc, #64]	; (d01c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    cfda:	9b01      	ldr	r3, [sp, #4]
    cfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d10d      	bne.n	d000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfe4:	f7f3 fd0c 	bl	a00 <Adc_schm_read_msr>
    cfe8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfea:	9b00      	ldr	r3, [sp, #0]
    cfec:	f003 0301 	and.w	r3, r3, #1
    cff0:	2b00      	cmp	r3, #0
    cff2:	d100      	bne.n	cff6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cff4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    cff6:	490a      	ldr	r1, [pc, #40]	; (d020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    cff8:	9b01      	ldr	r3, [sp, #4]
    cffa:	9a00      	ldr	r2, [sp, #0]
    cffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    d000:	4a06      	ldr	r2, [pc, #24]	; (d01c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    d002:	9b01      	ldr	r3, [sp, #4]
    d004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d008:	1c5a      	adds	r2, r3, #1
    d00a:	4904      	ldr	r1, [pc, #16]	; (d01c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    d00c:	9b01      	ldr	r3, [sp, #4]
    d00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d012:	bf00      	nop
    d014:	b003      	add	sp, #12
    d016:	f85d fb04 	ldr.w	pc, [sp], #4
    d01a:	bf00      	nop
    d01c:	1fff8f48 	.word	0x1fff8f48
    d020:	1fff8f44 	.word	0x1fff8f44

0000d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    d024:	b500      	push	{lr}
    d026:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d028:	f7f3 fdd4 	bl	bd4 <Sys_GetCoreID>
    d02c:	4603      	mov	r3, r0
    d02e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    d030:	4a0d      	ldr	r2, [pc, #52]	; (d068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    d032:	9b01      	ldr	r3, [sp, #4]
    d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d038:	1e5a      	subs	r2, r3, #1
    d03a:	490b      	ldr	r1, [pc, #44]	; (d068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    d03c:	9b01      	ldr	r3, [sp, #4]
    d03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    d042:	4a0a      	ldr	r2, [pc, #40]	; (d06c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    d044:	9b01      	ldr	r3, [sp, #4]
    d046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d04a:	f003 0301 	and.w	r3, r3, #1
    d04e:	2b00      	cmp	r3, #0
    d050:	d106      	bne.n	d060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    d052:	4a05      	ldr	r2, [pc, #20]	; (d068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    d054:	9b01      	ldr	r3, [sp, #4]
    d056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d100      	bne.n	d060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d05e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d060:	bf00      	nop
    d062:	b003      	add	sp, #12
    d064:	f85d fb04 	ldr.w	pc, [sp], #4
    d068:	1fff8f48 	.word	0x1fff8f48
    d06c:	1fff8f44 	.word	0x1fff8f44

0000d070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    d070:	b500      	push	{lr}
    d072:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d074:	f7f3 fdae 	bl	bd4 <Sys_GetCoreID>
    d078:	4603      	mov	r3, r0
    d07a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    d07c:	4a10      	ldr	r2, [pc, #64]	; (d0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    d07e:	9b01      	ldr	r3, [sp, #4]
    d080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d084:	2b00      	cmp	r3, #0
    d086:	d10d      	bne.n	d0a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d088:	f7f3 fcba 	bl	a00 <Adc_schm_read_msr>
    d08c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d08e:	9b00      	ldr	r3, [sp, #0]
    d090:	f003 0301 	and.w	r3, r3, #1
    d094:	2b00      	cmp	r3, #0
    d096:	d100      	bne.n	d09a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d098:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    d09a:	490a      	ldr	r1, [pc, #40]	; (d0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	9a00      	ldr	r2, [sp, #0]
    d0a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    d0a4:	4a06      	ldr	r2, [pc, #24]	; (d0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    d0a6:	9b01      	ldr	r3, [sp, #4]
    d0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ac:	1c5a      	adds	r2, r3, #1
    d0ae:	4904      	ldr	r1, [pc, #16]	; (d0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    d0b0:	9b01      	ldr	r3, [sp, #4]
    d0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d0b6:	bf00      	nop
    d0b8:	b003      	add	sp, #12
    d0ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d0be:	bf00      	nop
    d0c0:	1fff8f50 	.word	0x1fff8f50
    d0c4:	1fff8f4c 	.word	0x1fff8f4c

0000d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    d0c8:	b500      	push	{lr}
    d0ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0cc:	f7f3 fd82 	bl	bd4 <Sys_GetCoreID>
    d0d0:	4603      	mov	r3, r0
    d0d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    d0d4:	4a0d      	ldr	r2, [pc, #52]	; (d10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    d0d6:	9b01      	ldr	r3, [sp, #4]
    d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0dc:	1e5a      	subs	r2, r3, #1
    d0de:	490b      	ldr	r1, [pc, #44]	; (d10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    d0e0:	9b01      	ldr	r3, [sp, #4]
    d0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    d0e6:	4a0a      	ldr	r2, [pc, #40]	; (d110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    d0e8:	9b01      	ldr	r3, [sp, #4]
    d0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ee:	f003 0301 	and.w	r3, r3, #1
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d106      	bne.n	d104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    d0f6:	4a05      	ldr	r2, [pc, #20]	; (d10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    d0f8:	9b01      	ldr	r3, [sp, #4]
    d0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0fe:	2b00      	cmp	r3, #0
    d100:	d100      	bne.n	d104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d102:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d104:	bf00      	nop
    d106:	b003      	add	sp, #12
    d108:	f85d fb04 	ldr.w	pc, [sp], #4
    d10c:	1fff8f50 	.word	0x1fff8f50
    d110:	1fff8f4c 	.word	0x1fff8f4c

0000d114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    d114:	b500      	push	{lr}
    d116:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d118:	f7f3 fd5c 	bl	bd4 <Sys_GetCoreID>
    d11c:	4603      	mov	r3, r0
    d11e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    d120:	4a10      	ldr	r2, [pc, #64]	; (d164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    d122:	9b01      	ldr	r3, [sp, #4]
    d124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d128:	2b00      	cmp	r3, #0
    d12a:	d10d      	bne.n	d148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d12c:	f7f3 fc68 	bl	a00 <Adc_schm_read_msr>
    d130:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d132:	9b00      	ldr	r3, [sp, #0]
    d134:	f003 0301 	and.w	r3, r3, #1
    d138:	2b00      	cmp	r3, #0
    d13a:	d100      	bne.n	d13e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d13c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    d13e:	490a      	ldr	r1, [pc, #40]	; (d168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    d140:	9b01      	ldr	r3, [sp, #4]
    d142:	9a00      	ldr	r2, [sp, #0]
    d144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    d148:	4a06      	ldr	r2, [pc, #24]	; (d164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    d14a:	9b01      	ldr	r3, [sp, #4]
    d14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d150:	1c5a      	adds	r2, r3, #1
    d152:	4904      	ldr	r1, [pc, #16]	; (d164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    d154:	9b01      	ldr	r3, [sp, #4]
    d156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d15a:	bf00      	nop
    d15c:	b003      	add	sp, #12
    d15e:	f85d fb04 	ldr.w	pc, [sp], #4
    d162:	bf00      	nop
    d164:	1fff8f58 	.word	0x1fff8f58
    d168:	1fff8f54 	.word	0x1fff8f54

0000d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    d16c:	b500      	push	{lr}
    d16e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d170:	f7f3 fd30 	bl	bd4 <Sys_GetCoreID>
    d174:	4603      	mov	r3, r0
    d176:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    d178:	4a0d      	ldr	r2, [pc, #52]	; (d1b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    d17a:	9b01      	ldr	r3, [sp, #4]
    d17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d180:	1e5a      	subs	r2, r3, #1
    d182:	490b      	ldr	r1, [pc, #44]	; (d1b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    d184:	9b01      	ldr	r3, [sp, #4]
    d186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    d18a:	4a0a      	ldr	r2, [pc, #40]	; (d1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    d18c:	9b01      	ldr	r3, [sp, #4]
    d18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d192:	f003 0301 	and.w	r3, r3, #1
    d196:	2b00      	cmp	r3, #0
    d198:	d106      	bne.n	d1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    d19a:	4a05      	ldr	r2, [pc, #20]	; (d1b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	d100      	bne.n	d1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d1a8:	bf00      	nop
    d1aa:	b003      	add	sp, #12
    d1ac:	f85d fb04 	ldr.w	pc, [sp], #4
    d1b0:	1fff8f58 	.word	0x1fff8f58
    d1b4:	1fff8f54 	.word	0x1fff8f54

0000d1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    d1b8:	b500      	push	{lr}
    d1ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1bc:	f7f3 fd0a 	bl	bd4 <Sys_GetCoreID>
    d1c0:	4603      	mov	r3, r0
    d1c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    d1c4:	4a10      	ldr	r2, [pc, #64]	; (d208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    d1c6:	9b01      	ldr	r3, [sp, #4]
    d1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	d10d      	bne.n	d1ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d1d0:	f7f3 fc16 	bl	a00 <Adc_schm_read_msr>
    d1d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d1d6:	9b00      	ldr	r3, [sp, #0]
    d1d8:	f003 0301 	and.w	r3, r3, #1
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d100      	bne.n	d1e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    d1e2:	490a      	ldr	r1, [pc, #40]	; (d20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	9a00      	ldr	r2, [sp, #0]
    d1e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    d1ec:	4a06      	ldr	r2, [pc, #24]	; (d208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    d1ee:	9b01      	ldr	r3, [sp, #4]
    d1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f4:	1c5a      	adds	r2, r3, #1
    d1f6:	4904      	ldr	r1, [pc, #16]	; (d208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    d1f8:	9b01      	ldr	r3, [sp, #4]
    d1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1fe:	bf00      	nop
    d200:	b003      	add	sp, #12
    d202:	f85d fb04 	ldr.w	pc, [sp], #4
    d206:	bf00      	nop
    d208:	1fff8f60 	.word	0x1fff8f60
    d20c:	1fff8f5c 	.word	0x1fff8f5c

0000d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    d210:	b500      	push	{lr}
    d212:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d214:	f7f3 fcde 	bl	bd4 <Sys_GetCoreID>
    d218:	4603      	mov	r3, r0
    d21a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    d21c:	4a0d      	ldr	r2, [pc, #52]	; (d254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    d21e:	9b01      	ldr	r3, [sp, #4]
    d220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d224:	1e5a      	subs	r2, r3, #1
    d226:	490b      	ldr	r1, [pc, #44]	; (d254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    d228:	9b01      	ldr	r3, [sp, #4]
    d22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    d22e:	4a0a      	ldr	r2, [pc, #40]	; (d258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    d230:	9b01      	ldr	r3, [sp, #4]
    d232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d236:	f003 0301 	and.w	r3, r3, #1
    d23a:	2b00      	cmp	r3, #0
    d23c:	d106      	bne.n	d24c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    d23e:	4a05      	ldr	r2, [pc, #20]	; (d254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    d240:	9b01      	ldr	r3, [sp, #4]
    d242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d246:	2b00      	cmp	r3, #0
    d248:	d100      	bne.n	d24c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d24a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d24c:	bf00      	nop
    d24e:	b003      	add	sp, #12
    d250:	f85d fb04 	ldr.w	pc, [sp], #4
    d254:	1fff8f60 	.word	0x1fff8f60
    d258:	1fff8f5c 	.word	0x1fff8f5c

0000d25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    d25c:	b500      	push	{lr}
    d25e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d260:	f7f3 fcb8 	bl	bd4 <Sys_GetCoreID>
    d264:	4603      	mov	r3, r0
    d266:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    d268:	4a10      	ldr	r2, [pc, #64]	; (d2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    d26a:	9b01      	ldr	r3, [sp, #4]
    d26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d270:	2b00      	cmp	r3, #0
    d272:	d10d      	bne.n	d290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d274:	f7f3 fbc4 	bl	a00 <Adc_schm_read_msr>
    d278:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d27a:	9b00      	ldr	r3, [sp, #0]
    d27c:	f003 0301 	and.w	r3, r3, #1
    d280:	2b00      	cmp	r3, #0
    d282:	d100      	bne.n	d286 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d284:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    d286:	490a      	ldr	r1, [pc, #40]	; (d2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    d288:	9b01      	ldr	r3, [sp, #4]
    d28a:	9a00      	ldr	r2, [sp, #0]
    d28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    d290:	4a06      	ldr	r2, [pc, #24]	; (d2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    d292:	9b01      	ldr	r3, [sp, #4]
    d294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d298:	1c5a      	adds	r2, r3, #1
    d29a:	4904      	ldr	r1, [pc, #16]	; (d2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    d29c:	9b01      	ldr	r3, [sp, #4]
    d29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2a2:	bf00      	nop
    d2a4:	b003      	add	sp, #12
    d2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    d2aa:	bf00      	nop
    d2ac:	1fff8f68 	.word	0x1fff8f68
    d2b0:	1fff8f64 	.word	0x1fff8f64

0000d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    d2b4:	b500      	push	{lr}
    d2b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2b8:	f7f3 fc8c 	bl	bd4 <Sys_GetCoreID>
    d2bc:	4603      	mov	r3, r0
    d2be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    d2c0:	4a0d      	ldr	r2, [pc, #52]	; (d2f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    d2c2:	9b01      	ldr	r3, [sp, #4]
    d2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2c8:	1e5a      	subs	r2, r3, #1
    d2ca:	490b      	ldr	r1, [pc, #44]	; (d2f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    d2cc:	9b01      	ldr	r3, [sp, #4]
    d2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    d2d2:	4a0a      	ldr	r2, [pc, #40]	; (d2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    d2d4:	9b01      	ldr	r3, [sp, #4]
    d2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2da:	f003 0301 	and.w	r3, r3, #1
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d106      	bne.n	d2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    d2e2:	4a05      	ldr	r2, [pc, #20]	; (d2f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    d2e4:	9b01      	ldr	r3, [sp, #4]
    d2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d100      	bne.n	d2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2f0:	bf00      	nop
    d2f2:	b003      	add	sp, #12
    d2f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d2f8:	1fff8f68 	.word	0x1fff8f68
    d2fc:	1fff8f64 	.word	0x1fff8f64

0000d300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    d300:	b500      	push	{lr}
    d302:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d304:	f7f3 fc66 	bl	bd4 <Sys_GetCoreID>
    d308:	4603      	mov	r3, r0
    d30a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    d30c:	4a10      	ldr	r2, [pc, #64]	; (d350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    d30e:	9b01      	ldr	r3, [sp, #4]
    d310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d314:	2b00      	cmp	r3, #0
    d316:	d10d      	bne.n	d334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d318:	f7f3 fb72 	bl	a00 <Adc_schm_read_msr>
    d31c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d31e:	9b00      	ldr	r3, [sp, #0]
    d320:	f003 0301 	and.w	r3, r3, #1
    d324:	2b00      	cmp	r3, #0
    d326:	d100      	bne.n	d32a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d328:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    d32a:	490a      	ldr	r1, [pc, #40]	; (d354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    d32c:	9b01      	ldr	r3, [sp, #4]
    d32e:	9a00      	ldr	r2, [sp, #0]
    d330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    d334:	4a06      	ldr	r2, [pc, #24]	; (d350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    d336:	9b01      	ldr	r3, [sp, #4]
    d338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33c:	1c5a      	adds	r2, r3, #1
    d33e:	4904      	ldr	r1, [pc, #16]	; (d350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    d340:	9b01      	ldr	r3, [sp, #4]
    d342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d346:	bf00      	nop
    d348:	b003      	add	sp, #12
    d34a:	f85d fb04 	ldr.w	pc, [sp], #4
    d34e:	bf00      	nop
    d350:	1fff8f70 	.word	0x1fff8f70
    d354:	1fff8f6c 	.word	0x1fff8f6c

0000d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    d358:	b500      	push	{lr}
    d35a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d35c:	f7f3 fc3a 	bl	bd4 <Sys_GetCoreID>
    d360:	4603      	mov	r3, r0
    d362:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    d364:	4a0d      	ldr	r2, [pc, #52]	; (d39c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d366:	9b01      	ldr	r3, [sp, #4]
    d368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d36c:	1e5a      	subs	r2, r3, #1
    d36e:	490b      	ldr	r1, [pc, #44]	; (d39c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d370:	9b01      	ldr	r3, [sp, #4]
    d372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    d376:	4a0a      	ldr	r2, [pc, #40]	; (d3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    d378:	9b01      	ldr	r3, [sp, #4]
    d37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d37e:	f003 0301 	and.w	r3, r3, #1
    d382:	2b00      	cmp	r3, #0
    d384:	d106      	bne.n	d394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    d386:	4a05      	ldr	r2, [pc, #20]	; (d39c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d388:	9b01      	ldr	r3, [sp, #4]
    d38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d38e:	2b00      	cmp	r3, #0
    d390:	d100      	bne.n	d394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d392:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d394:	bf00      	nop
    d396:	b003      	add	sp, #12
    d398:	f85d fb04 	ldr.w	pc, [sp], #4
    d39c:	1fff8f70 	.word	0x1fff8f70
    d3a0:	1fff8f6c 	.word	0x1fff8f6c

0000d3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    d3a4:	b500      	push	{lr}
    d3a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3a8:	f7f3 fc14 	bl	bd4 <Sys_GetCoreID>
    d3ac:	4603      	mov	r3, r0
    d3ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    d3b0:	4a10      	ldr	r2, [pc, #64]	; (d3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d3b2:	9b01      	ldr	r3, [sp, #4]
    d3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d10d      	bne.n	d3d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d3bc:	f7f3 fb20 	bl	a00 <Adc_schm_read_msr>
    d3c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3c2:	9b00      	ldr	r3, [sp, #0]
    d3c4:	f003 0301 	and.w	r3, r3, #1
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d100      	bne.n	d3ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    d3ce:	490a      	ldr	r1, [pc, #40]	; (d3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    d3d0:	9b01      	ldr	r3, [sp, #4]
    d3d2:	9a00      	ldr	r2, [sp, #0]
    d3d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    d3d8:	4a06      	ldr	r2, [pc, #24]	; (d3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d3da:	9b01      	ldr	r3, [sp, #4]
    d3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3e0:	1c5a      	adds	r2, r3, #1
    d3e2:	4904      	ldr	r1, [pc, #16]	; (d3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d3e4:	9b01      	ldr	r3, [sp, #4]
    d3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3ea:	bf00      	nop
    d3ec:	b003      	add	sp, #12
    d3ee:	f85d fb04 	ldr.w	pc, [sp], #4
    d3f2:	bf00      	nop
    d3f4:	1fff8f78 	.word	0x1fff8f78
    d3f8:	1fff8f74 	.word	0x1fff8f74

0000d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    d3fc:	b500      	push	{lr}
    d3fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d400:	f7f3 fbe8 	bl	bd4 <Sys_GetCoreID>
    d404:	4603      	mov	r3, r0
    d406:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    d408:	4a0d      	ldr	r2, [pc, #52]	; (d440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d40a:	9b01      	ldr	r3, [sp, #4]
    d40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d410:	1e5a      	subs	r2, r3, #1
    d412:	490b      	ldr	r1, [pc, #44]	; (d440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d414:	9b01      	ldr	r3, [sp, #4]
    d416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    d41a:	4a0a      	ldr	r2, [pc, #40]	; (d444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    d41c:	9b01      	ldr	r3, [sp, #4]
    d41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d422:	f003 0301 	and.w	r3, r3, #1
    d426:	2b00      	cmp	r3, #0
    d428:	d106      	bne.n	d438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    d42a:	4a05      	ldr	r2, [pc, #20]	; (d440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d42c:	9b01      	ldr	r3, [sp, #4]
    d42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d432:	2b00      	cmp	r3, #0
    d434:	d100      	bne.n	d438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d436:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d438:	bf00      	nop
    d43a:	b003      	add	sp, #12
    d43c:	f85d fb04 	ldr.w	pc, [sp], #4
    d440:	1fff8f78 	.word	0x1fff8f78
    d444:	1fff8f74 	.word	0x1fff8f74

0000d448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d448:	b500      	push	{lr}
    d44a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d44c:	f7f3 fbc2 	bl	bd4 <Sys_GetCoreID>
    d450:	4603      	mov	r3, r0
    d452:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    d454:	4a10      	ldr	r2, [pc, #64]	; (d498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d456:	9b01      	ldr	r3, [sp, #4]
    d458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d45c:	2b00      	cmp	r3, #0
    d45e:	d10d      	bne.n	d47c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d460:	f7f3 face 	bl	a00 <Adc_schm_read_msr>
    d464:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d466:	9b00      	ldr	r3, [sp, #0]
    d468:	f003 0301 	and.w	r3, r3, #1
    d46c:	2b00      	cmp	r3, #0
    d46e:	d100      	bne.n	d472 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d470:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    d472:	490a      	ldr	r1, [pc, #40]	; (d49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    d474:	9b01      	ldr	r3, [sp, #4]
    d476:	9a00      	ldr	r2, [sp, #0]
    d478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    d47c:	4a06      	ldr	r2, [pc, #24]	; (d498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d47e:	9b01      	ldr	r3, [sp, #4]
    d480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d484:	1c5a      	adds	r2, r3, #1
    d486:	4904      	ldr	r1, [pc, #16]	; (d498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d488:	9b01      	ldr	r3, [sp, #4]
    d48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d48e:	bf00      	nop
    d490:	b003      	add	sp, #12
    d492:	f85d fb04 	ldr.w	pc, [sp], #4
    d496:	bf00      	nop
    d498:	1fff8f80 	.word	0x1fff8f80
    d49c:	1fff8f7c 	.word	0x1fff8f7c

0000d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d4a0:	b500      	push	{lr}
    d4a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4a4:	f7f3 fb96 	bl	bd4 <Sys_GetCoreID>
    d4a8:	4603      	mov	r3, r0
    d4aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    d4ac:	4a0d      	ldr	r2, [pc, #52]	; (d4e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d4ae:	9b01      	ldr	r3, [sp, #4]
    d4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4b4:	1e5a      	subs	r2, r3, #1
    d4b6:	490b      	ldr	r1, [pc, #44]	; (d4e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d4b8:	9b01      	ldr	r3, [sp, #4]
    d4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    d4be:	4a0a      	ldr	r2, [pc, #40]	; (d4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    d4c0:	9b01      	ldr	r3, [sp, #4]
    d4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c6:	f003 0301 	and.w	r3, r3, #1
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d106      	bne.n	d4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    d4ce:	4a05      	ldr	r2, [pc, #20]	; (d4e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d4d0:	9b01      	ldr	r3, [sp, #4]
    d4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d100      	bne.n	d4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4dc:	bf00      	nop
    d4de:	b003      	add	sp, #12
    d4e0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4e4:	1fff8f80 	.word	0x1fff8f80
    d4e8:	1fff8f7c 	.word	0x1fff8f7c

0000d4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d4ec:	b500      	push	{lr}
    d4ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4f0:	f7f3 fb70 	bl	bd4 <Sys_GetCoreID>
    d4f4:	4603      	mov	r3, r0
    d4f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    d4f8:	4a10      	ldr	r2, [pc, #64]	; (d53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d4fa:	9b01      	ldr	r3, [sp, #4]
    d4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d500:	2b00      	cmp	r3, #0
    d502:	d10d      	bne.n	d520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d504:	f7f3 fa7c 	bl	a00 <Adc_schm_read_msr>
    d508:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d50a:	9b00      	ldr	r3, [sp, #0]
    d50c:	f003 0301 	and.w	r3, r3, #1
    d510:	2b00      	cmp	r3, #0
    d512:	d100      	bne.n	d516 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d514:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    d516:	490a      	ldr	r1, [pc, #40]	; (d540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    d518:	9b01      	ldr	r3, [sp, #4]
    d51a:	9a00      	ldr	r2, [sp, #0]
    d51c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    d520:	4a06      	ldr	r2, [pc, #24]	; (d53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d522:	9b01      	ldr	r3, [sp, #4]
    d524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d528:	1c5a      	adds	r2, r3, #1
    d52a:	4904      	ldr	r1, [pc, #16]	; (d53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d52c:	9b01      	ldr	r3, [sp, #4]
    d52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d532:	bf00      	nop
    d534:	b003      	add	sp, #12
    d536:	f85d fb04 	ldr.w	pc, [sp], #4
    d53a:	bf00      	nop
    d53c:	1fff8f88 	.word	0x1fff8f88
    d540:	1fff8f84 	.word	0x1fff8f84

0000d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d544:	b500      	push	{lr}
    d546:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d548:	f7f3 fb44 	bl	bd4 <Sys_GetCoreID>
    d54c:	4603      	mov	r3, r0
    d54e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    d550:	4a0d      	ldr	r2, [pc, #52]	; (d588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d552:	9b01      	ldr	r3, [sp, #4]
    d554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d558:	1e5a      	subs	r2, r3, #1
    d55a:	490b      	ldr	r1, [pc, #44]	; (d588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d55c:	9b01      	ldr	r3, [sp, #4]
    d55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    d562:	4a0a      	ldr	r2, [pc, #40]	; (d58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    d564:	9b01      	ldr	r3, [sp, #4]
    d566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d56a:	f003 0301 	and.w	r3, r3, #1
    d56e:	2b00      	cmp	r3, #0
    d570:	d106      	bne.n	d580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    d572:	4a05      	ldr	r2, [pc, #20]	; (d588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d574:	9b01      	ldr	r3, [sp, #4]
    d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d57a:	2b00      	cmp	r3, #0
    d57c:	d100      	bne.n	d580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d57e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d580:	bf00      	nop
    d582:	b003      	add	sp, #12
    d584:	f85d fb04 	ldr.w	pc, [sp], #4
    d588:	1fff8f88 	.word	0x1fff8f88
    d58c:	1fff8f84 	.word	0x1fff8f84

0000d590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d590:	b500      	push	{lr}
    d592:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d594:	f7f3 fb1e 	bl	bd4 <Sys_GetCoreID>
    d598:	4603      	mov	r3, r0
    d59a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    d59c:	4a10      	ldr	r2, [pc, #64]	; (d5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d59e:	9b01      	ldr	r3, [sp, #4]
    d5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	d10d      	bne.n	d5c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d5a8:	f7f3 fa2a 	bl	a00 <Adc_schm_read_msr>
    d5ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d5ae:	9b00      	ldr	r3, [sp, #0]
    d5b0:	f003 0301 	and.w	r3, r3, #1
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d100      	bne.n	d5ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d5b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    d5ba:	490a      	ldr	r1, [pc, #40]	; (d5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	9a00      	ldr	r2, [sp, #0]
    d5c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    d5c4:	4a06      	ldr	r2, [pc, #24]	; (d5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d5c6:	9b01      	ldr	r3, [sp, #4]
    d5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5cc:	1c5a      	adds	r2, r3, #1
    d5ce:	4904      	ldr	r1, [pc, #16]	; (d5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d5d0:	9b01      	ldr	r3, [sp, #4]
    d5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5d6:	bf00      	nop
    d5d8:	b003      	add	sp, #12
    d5da:	f85d fb04 	ldr.w	pc, [sp], #4
    d5de:	bf00      	nop
    d5e0:	1fff8f90 	.word	0x1fff8f90
    d5e4:	1fff8f8c 	.word	0x1fff8f8c

0000d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d5e8:	b500      	push	{lr}
    d5ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5ec:	f7f3 faf2 	bl	bd4 <Sys_GetCoreID>
    d5f0:	4603      	mov	r3, r0
    d5f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    d5f4:	4a0d      	ldr	r2, [pc, #52]	; (d62c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d5f6:	9b01      	ldr	r3, [sp, #4]
    d5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5fc:	1e5a      	subs	r2, r3, #1
    d5fe:	490b      	ldr	r1, [pc, #44]	; (d62c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d600:	9b01      	ldr	r3, [sp, #4]
    d602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    d606:	4a0a      	ldr	r2, [pc, #40]	; (d630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d608:	9b01      	ldr	r3, [sp, #4]
    d60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d60e:	f003 0301 	and.w	r3, r3, #1
    d612:	2b00      	cmp	r3, #0
    d614:	d106      	bne.n	d624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d616:	4a05      	ldr	r2, [pc, #20]	; (d62c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d618:	9b01      	ldr	r3, [sp, #4]
    d61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d61e:	2b00      	cmp	r3, #0
    d620:	d100      	bne.n	d624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d622:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d624:	bf00      	nop
    d626:	b003      	add	sp, #12
    d628:	f85d fb04 	ldr.w	pc, [sp], #4
    d62c:	1fff8f90 	.word	0x1fff8f90
    d630:	1fff8f8c 	.word	0x1fff8f8c

0000d634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d634:	b500      	push	{lr}
    d636:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d638:	f7f3 facc 	bl	bd4 <Sys_GetCoreID>
    d63c:	4603      	mov	r3, r0
    d63e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d640:	4a10      	ldr	r2, [pc, #64]	; (d684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d642:	9b01      	ldr	r3, [sp, #4]
    d644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d648:	2b00      	cmp	r3, #0
    d64a:	d10d      	bne.n	d668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d64c:	f7f3 f9d8 	bl	a00 <Adc_schm_read_msr>
    d650:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d652:	9b00      	ldr	r3, [sp, #0]
    d654:	f003 0301 	and.w	r3, r3, #1
    d658:	2b00      	cmp	r3, #0
    d65a:	d100      	bne.n	d65e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d65c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d65e:	490a      	ldr	r1, [pc, #40]	; (d688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d660:	9b01      	ldr	r3, [sp, #4]
    d662:	9a00      	ldr	r2, [sp, #0]
    d664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d668:	4a06      	ldr	r2, [pc, #24]	; (d684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d66a:	9b01      	ldr	r3, [sp, #4]
    d66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d670:	1c5a      	adds	r2, r3, #1
    d672:	4904      	ldr	r1, [pc, #16]	; (d684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d674:	9b01      	ldr	r3, [sp, #4]
    d676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d67a:	bf00      	nop
    d67c:	b003      	add	sp, #12
    d67e:	f85d fb04 	ldr.w	pc, [sp], #4
    d682:	bf00      	nop
    d684:	1fff8f98 	.word	0x1fff8f98
    d688:	1fff8f94 	.word	0x1fff8f94

0000d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d68c:	b500      	push	{lr}
    d68e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d690:	f7f3 faa0 	bl	bd4 <Sys_GetCoreID>
    d694:	4603      	mov	r3, r0
    d696:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d698:	4a0d      	ldr	r2, [pc, #52]	; (d6d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d69a:	9b01      	ldr	r3, [sp, #4]
    d69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a0:	1e5a      	subs	r2, r3, #1
    d6a2:	490b      	ldr	r1, [pc, #44]	; (d6d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d6a4:	9b01      	ldr	r3, [sp, #4]
    d6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d6aa:	4a0a      	ldr	r2, [pc, #40]	; (d6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d6ac:	9b01      	ldr	r3, [sp, #4]
    d6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b2:	f003 0301 	and.w	r3, r3, #1
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d106      	bne.n	d6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d6ba:	4a05      	ldr	r2, [pc, #20]	; (d6d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d6bc:	9b01      	ldr	r3, [sp, #4]
    d6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	d100      	bne.n	d6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6c8:	bf00      	nop
    d6ca:	b003      	add	sp, #12
    d6cc:	f85d fb04 	ldr.w	pc, [sp], #4
    d6d0:	1fff8f98 	.word	0x1fff8f98
    d6d4:	1fff8f94 	.word	0x1fff8f94

0000d6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d6d8:	b500      	push	{lr}
    d6da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6dc:	f7f3 fa7a 	bl	bd4 <Sys_GetCoreID>
    d6e0:	4603      	mov	r3, r0
    d6e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d6e4:	4a10      	ldr	r2, [pc, #64]	; (d728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d6e6:	9b01      	ldr	r3, [sp, #4]
    d6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	d10d      	bne.n	d70c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6f0:	f7f3 f986 	bl	a00 <Adc_schm_read_msr>
    d6f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6f6:	9b00      	ldr	r3, [sp, #0]
    d6f8:	f003 0301 	and.w	r3, r3, #1
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d100      	bne.n	d702 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d700:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d702:	490a      	ldr	r1, [pc, #40]	; (d72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	9a00      	ldr	r2, [sp, #0]
    d708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d70c:	4a06      	ldr	r2, [pc, #24]	; (d728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d70e:	9b01      	ldr	r3, [sp, #4]
    d710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d714:	1c5a      	adds	r2, r3, #1
    d716:	4904      	ldr	r1, [pc, #16]	; (d728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d718:	9b01      	ldr	r3, [sp, #4]
    d71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d71e:	bf00      	nop
    d720:	b003      	add	sp, #12
    d722:	f85d fb04 	ldr.w	pc, [sp], #4
    d726:	bf00      	nop
    d728:	1fff8fa0 	.word	0x1fff8fa0
    d72c:	1fff8f9c 	.word	0x1fff8f9c

0000d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d730:	b500      	push	{lr}
    d732:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d734:	f7f3 fa4e 	bl	bd4 <Sys_GetCoreID>
    d738:	4603      	mov	r3, r0
    d73a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d73c:	4a0d      	ldr	r2, [pc, #52]	; (d774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d73e:	9b01      	ldr	r3, [sp, #4]
    d740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d744:	1e5a      	subs	r2, r3, #1
    d746:	490b      	ldr	r1, [pc, #44]	; (d774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d748:	9b01      	ldr	r3, [sp, #4]
    d74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d74e:	4a0a      	ldr	r2, [pc, #40]	; (d778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d750:	9b01      	ldr	r3, [sp, #4]
    d752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d756:	f003 0301 	and.w	r3, r3, #1
    d75a:	2b00      	cmp	r3, #0
    d75c:	d106      	bne.n	d76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d75e:	4a05      	ldr	r2, [pc, #20]	; (d774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d760:	9b01      	ldr	r3, [sp, #4]
    d762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d766:	2b00      	cmp	r3, #0
    d768:	d100      	bne.n	d76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d76a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d76c:	bf00      	nop
    d76e:	b003      	add	sp, #12
    d770:	f85d fb04 	ldr.w	pc, [sp], #4
    d774:	1fff8fa0 	.word	0x1fff8fa0
    d778:	1fff8f9c 	.word	0x1fff8f9c

0000d77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d77c:	b500      	push	{lr}
    d77e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d780:	f7f3 fa28 	bl	bd4 <Sys_GetCoreID>
    d784:	4603      	mov	r3, r0
    d786:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d788:	4a10      	ldr	r2, [pc, #64]	; (d7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d78a:	9b01      	ldr	r3, [sp, #4]
    d78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d790:	2b00      	cmp	r3, #0
    d792:	d10d      	bne.n	d7b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d794:	f7f3 f934 	bl	a00 <Adc_schm_read_msr>
    d798:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d79a:	9b00      	ldr	r3, [sp, #0]
    d79c:	f003 0301 	and.w	r3, r3, #1
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d100      	bne.n	d7a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d7a6:	490a      	ldr	r1, [pc, #40]	; (d7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d7a8:	9b01      	ldr	r3, [sp, #4]
    d7aa:	9a00      	ldr	r2, [sp, #0]
    d7ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d7b0:	4a06      	ldr	r2, [pc, #24]	; (d7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d7b2:	9b01      	ldr	r3, [sp, #4]
    d7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b8:	1c5a      	adds	r2, r3, #1
    d7ba:	4904      	ldr	r1, [pc, #16]	; (d7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d7bc:	9b01      	ldr	r3, [sp, #4]
    d7be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7c2:	bf00      	nop
    d7c4:	b003      	add	sp, #12
    d7c6:	f85d fb04 	ldr.w	pc, [sp], #4
    d7ca:	bf00      	nop
    d7cc:	1fff8fa8 	.word	0x1fff8fa8
    d7d0:	1fff8fa4 	.word	0x1fff8fa4

0000d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d7d4:	b500      	push	{lr}
    d7d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7d8:	f7f3 f9fc 	bl	bd4 <Sys_GetCoreID>
    d7dc:	4603      	mov	r3, r0
    d7de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d7e0:	4a0d      	ldr	r2, [pc, #52]	; (d818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d7e2:	9b01      	ldr	r3, [sp, #4]
    d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7e8:	1e5a      	subs	r2, r3, #1
    d7ea:	490b      	ldr	r1, [pc, #44]	; (d818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d7ec:	9b01      	ldr	r3, [sp, #4]
    d7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d7f2:	4a0a      	ldr	r2, [pc, #40]	; (d81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d7f4:	9b01      	ldr	r3, [sp, #4]
    d7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7fa:	f003 0301 	and.w	r3, r3, #1
    d7fe:	2b00      	cmp	r3, #0
    d800:	d106      	bne.n	d810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d802:	4a05      	ldr	r2, [pc, #20]	; (d818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d804:	9b01      	ldr	r3, [sp, #4]
    d806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d80a:	2b00      	cmp	r3, #0
    d80c:	d100      	bne.n	d810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d80e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d810:	bf00      	nop
    d812:	b003      	add	sp, #12
    d814:	f85d fb04 	ldr.w	pc, [sp], #4
    d818:	1fff8fa8 	.word	0x1fff8fa8
    d81c:	1fff8fa4 	.word	0x1fff8fa4

0000d820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d820:	b500      	push	{lr}
    d822:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d824:	f7f3 f9d6 	bl	bd4 <Sys_GetCoreID>
    d828:	4603      	mov	r3, r0
    d82a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d82c:	4a10      	ldr	r2, [pc, #64]	; (d870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d82e:	9b01      	ldr	r3, [sp, #4]
    d830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d834:	2b00      	cmp	r3, #0
    d836:	d10d      	bne.n	d854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d838:	f7f3 f8e2 	bl	a00 <Adc_schm_read_msr>
    d83c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d83e:	9b00      	ldr	r3, [sp, #0]
    d840:	f003 0301 	and.w	r3, r3, #1
    d844:	2b00      	cmp	r3, #0
    d846:	d100      	bne.n	d84a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d848:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d84a:	490a      	ldr	r1, [pc, #40]	; (d874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d84c:	9b01      	ldr	r3, [sp, #4]
    d84e:	9a00      	ldr	r2, [sp, #0]
    d850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d854:	4a06      	ldr	r2, [pc, #24]	; (d870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d856:	9b01      	ldr	r3, [sp, #4]
    d858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d85c:	1c5a      	adds	r2, r3, #1
    d85e:	4904      	ldr	r1, [pc, #16]	; (d870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d860:	9b01      	ldr	r3, [sp, #4]
    d862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d866:	bf00      	nop
    d868:	b003      	add	sp, #12
    d86a:	f85d fb04 	ldr.w	pc, [sp], #4
    d86e:	bf00      	nop
    d870:	1fff8fb0 	.word	0x1fff8fb0
    d874:	1fff8fac 	.word	0x1fff8fac

0000d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d878:	b500      	push	{lr}
    d87a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d87c:	f7f3 f9aa 	bl	bd4 <Sys_GetCoreID>
    d880:	4603      	mov	r3, r0
    d882:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d884:	4a0d      	ldr	r2, [pc, #52]	; (d8bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d886:	9b01      	ldr	r3, [sp, #4]
    d888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d88c:	1e5a      	subs	r2, r3, #1
    d88e:	490b      	ldr	r1, [pc, #44]	; (d8bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d890:	9b01      	ldr	r3, [sp, #4]
    d892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d896:	4a0a      	ldr	r2, [pc, #40]	; (d8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d898:	9b01      	ldr	r3, [sp, #4]
    d89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d89e:	f003 0301 	and.w	r3, r3, #1
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d106      	bne.n	d8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d8a6:	4a05      	ldr	r2, [pc, #20]	; (d8bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d8a8:	9b01      	ldr	r3, [sp, #4]
    d8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	d100      	bne.n	d8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d8b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d8b4:	bf00      	nop
    d8b6:	b003      	add	sp, #12
    d8b8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8bc:	1fff8fb0 	.word	0x1fff8fb0
    d8c0:	1fff8fac 	.word	0x1fff8fac

0000d8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d8c4:	b500      	push	{lr}
    d8c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8c8:	f7f3 f984 	bl	bd4 <Sys_GetCoreID>
    d8cc:	4603      	mov	r3, r0
    d8ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d8d0:	4a10      	ldr	r2, [pc, #64]	; (d914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d8d2:	9b01      	ldr	r3, [sp, #4]
    d8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8d8:	2b00      	cmp	r3, #0
    d8da:	d10d      	bne.n	d8f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8dc:	f7f3 f890 	bl	a00 <Adc_schm_read_msr>
    d8e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8e2:	9b00      	ldr	r3, [sp, #0]
    d8e4:	f003 0301 	and.w	r3, r3, #1
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d100      	bne.n	d8ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d8ee:	490a      	ldr	r1, [pc, #40]	; (d918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	9a00      	ldr	r2, [sp, #0]
    d8f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d8f8:	4a06      	ldr	r2, [pc, #24]	; (d914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d8fa:	9b01      	ldr	r3, [sp, #4]
    d8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d900:	1c5a      	adds	r2, r3, #1
    d902:	4904      	ldr	r1, [pc, #16]	; (d914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d904:	9b01      	ldr	r3, [sp, #4]
    d906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d90a:	bf00      	nop
    d90c:	b003      	add	sp, #12
    d90e:	f85d fb04 	ldr.w	pc, [sp], #4
    d912:	bf00      	nop
    d914:	1fff8fb8 	.word	0x1fff8fb8
    d918:	1fff8fb4 	.word	0x1fff8fb4

0000d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d91c:	b500      	push	{lr}
    d91e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d920:	f7f3 f958 	bl	bd4 <Sys_GetCoreID>
    d924:	4603      	mov	r3, r0
    d926:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d928:	4a0d      	ldr	r2, [pc, #52]	; (d960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d92a:	9b01      	ldr	r3, [sp, #4]
    d92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d930:	1e5a      	subs	r2, r3, #1
    d932:	490b      	ldr	r1, [pc, #44]	; (d960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d934:	9b01      	ldr	r3, [sp, #4]
    d936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d93a:	4a0a      	ldr	r2, [pc, #40]	; (d964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d93c:	9b01      	ldr	r3, [sp, #4]
    d93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d942:	f003 0301 	and.w	r3, r3, #1
    d946:	2b00      	cmp	r3, #0
    d948:	d106      	bne.n	d958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d94a:	4a05      	ldr	r2, [pc, #20]	; (d960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d94c:	9b01      	ldr	r3, [sp, #4]
    d94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d952:	2b00      	cmp	r3, #0
    d954:	d100      	bne.n	d958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d956:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d958:	bf00      	nop
    d95a:	b003      	add	sp, #12
    d95c:	f85d fb04 	ldr.w	pc, [sp], #4
    d960:	1fff8fb8 	.word	0x1fff8fb8
    d964:	1fff8fb4 	.word	0x1fff8fb4

0000d968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d968:	b500      	push	{lr}
    d96a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d96c:	f7f3 f932 	bl	bd4 <Sys_GetCoreID>
    d970:	4603      	mov	r3, r0
    d972:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d974:	4a10      	ldr	r2, [pc, #64]	; (d9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d976:	9b01      	ldr	r3, [sp, #4]
    d978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d97c:	2b00      	cmp	r3, #0
    d97e:	d10d      	bne.n	d99c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d980:	f7f3 f83e 	bl	a00 <Adc_schm_read_msr>
    d984:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d986:	9b00      	ldr	r3, [sp, #0]
    d988:	f003 0301 	and.w	r3, r3, #1
    d98c:	2b00      	cmp	r3, #0
    d98e:	d100      	bne.n	d992 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d990:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d992:	490a      	ldr	r1, [pc, #40]	; (d9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d994:	9b01      	ldr	r3, [sp, #4]
    d996:	9a00      	ldr	r2, [sp, #0]
    d998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d99c:	4a06      	ldr	r2, [pc, #24]	; (d9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d99e:	9b01      	ldr	r3, [sp, #4]
    d9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a4:	1c5a      	adds	r2, r3, #1
    d9a6:	4904      	ldr	r1, [pc, #16]	; (d9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d9a8:	9b01      	ldr	r3, [sp, #4]
    d9aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d9ae:	bf00      	nop
    d9b0:	b003      	add	sp, #12
    d9b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d9b6:	bf00      	nop
    d9b8:	1fff8fc0 	.word	0x1fff8fc0
    d9bc:	1fff8fbc 	.word	0x1fff8fbc

0000d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d9c0:	b500      	push	{lr}
    d9c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9c4:	f7f3 f906 	bl	bd4 <Sys_GetCoreID>
    d9c8:	4603      	mov	r3, r0
    d9ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d9cc:	4a0d      	ldr	r2, [pc, #52]	; (da04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d9ce:	9b01      	ldr	r3, [sp, #4]
    d9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9d4:	1e5a      	subs	r2, r3, #1
    d9d6:	490b      	ldr	r1, [pc, #44]	; (da04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d9d8:	9b01      	ldr	r3, [sp, #4]
    d9da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d9de:	4a0a      	ldr	r2, [pc, #40]	; (da08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d9e0:	9b01      	ldr	r3, [sp, #4]
    d9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e6:	f003 0301 	and.w	r3, r3, #1
    d9ea:	2b00      	cmp	r3, #0
    d9ec:	d106      	bne.n	d9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d9ee:	4a05      	ldr	r2, [pc, #20]	; (da04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d9f0:	9b01      	ldr	r3, [sp, #4]
    d9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f6:	2b00      	cmp	r3, #0
    d9f8:	d100      	bne.n	d9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9fc:	bf00      	nop
    d9fe:	b003      	add	sp, #12
    da00:	f85d fb04 	ldr.w	pc, [sp], #4
    da04:	1fff8fc0 	.word	0x1fff8fc0
    da08:	1fff8fbc 	.word	0x1fff8fbc

0000da0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    da0c:	b500      	push	{lr}
    da0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da10:	f7f3 f8e0 	bl	bd4 <Sys_GetCoreID>
    da14:	4603      	mov	r3, r0
    da16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    da18:	4a10      	ldr	r2, [pc, #64]	; (da5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    da1a:	9b01      	ldr	r3, [sp, #4]
    da1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da20:	2b00      	cmp	r3, #0
    da22:	d10d      	bne.n	da40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da24:	f7f2 ffec 	bl	a00 <Adc_schm_read_msr>
    da28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da2a:	9b00      	ldr	r3, [sp, #0]
    da2c:	f003 0301 	and.w	r3, r3, #1
    da30:	2b00      	cmp	r3, #0
    da32:	d100      	bne.n	da36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    da36:	490a      	ldr	r1, [pc, #40]	; (da60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	9a00      	ldr	r2, [sp, #0]
    da3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    da40:	4a06      	ldr	r2, [pc, #24]	; (da5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    da42:	9b01      	ldr	r3, [sp, #4]
    da44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da48:	1c5a      	adds	r2, r3, #1
    da4a:	4904      	ldr	r1, [pc, #16]	; (da5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    da4c:	9b01      	ldr	r3, [sp, #4]
    da4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da52:	bf00      	nop
    da54:	b003      	add	sp, #12
    da56:	f85d fb04 	ldr.w	pc, [sp], #4
    da5a:	bf00      	nop
    da5c:	1fff8fc8 	.word	0x1fff8fc8
    da60:	1fff8fc4 	.word	0x1fff8fc4

0000da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    da64:	b500      	push	{lr}
    da66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da68:	f7f3 f8b4 	bl	bd4 <Sys_GetCoreID>
    da6c:	4603      	mov	r3, r0
    da6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    da70:	4a0d      	ldr	r2, [pc, #52]	; (daa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    da72:	9b01      	ldr	r3, [sp, #4]
    da74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da78:	1e5a      	subs	r2, r3, #1
    da7a:	490b      	ldr	r1, [pc, #44]	; (daa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    da7c:	9b01      	ldr	r3, [sp, #4]
    da7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    da82:	4a0a      	ldr	r2, [pc, #40]	; (daac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    da84:	9b01      	ldr	r3, [sp, #4]
    da86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da8a:	f003 0301 	and.w	r3, r3, #1
    da8e:	2b00      	cmp	r3, #0
    da90:	d106      	bne.n	daa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    da92:	4a05      	ldr	r2, [pc, #20]	; (daa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    da94:	9b01      	ldr	r3, [sp, #4]
    da96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9a:	2b00      	cmp	r3, #0
    da9c:	d100      	bne.n	daa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    daa0:	bf00      	nop
    daa2:	b003      	add	sp, #12
    daa4:	f85d fb04 	ldr.w	pc, [sp], #4
    daa8:	1fff8fc8 	.word	0x1fff8fc8
    daac:	1fff8fc4 	.word	0x1fff8fc4

0000dab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    dab0:	b500      	push	{lr}
    dab2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dab4:	f7f3 f88e 	bl	bd4 <Sys_GetCoreID>
    dab8:	4603      	mov	r3, r0
    daba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    dabc:	4a10      	ldr	r2, [pc, #64]	; (db00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    dabe:	9b01      	ldr	r3, [sp, #4]
    dac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dac4:	2b00      	cmp	r3, #0
    dac6:	d10d      	bne.n	dae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dac8:	f7f2 ff9a 	bl	a00 <Adc_schm_read_msr>
    dacc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dace:	9b00      	ldr	r3, [sp, #0]
    dad0:	f003 0301 	and.w	r3, r3, #1
    dad4:	2b00      	cmp	r3, #0
    dad6:	d100      	bne.n	dada <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dad8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    dada:	490a      	ldr	r1, [pc, #40]	; (db04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    dadc:	9b01      	ldr	r3, [sp, #4]
    dade:	9a00      	ldr	r2, [sp, #0]
    dae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    dae4:	4a06      	ldr	r2, [pc, #24]	; (db00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    dae6:	9b01      	ldr	r3, [sp, #4]
    dae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daec:	1c5a      	adds	r2, r3, #1
    daee:	4904      	ldr	r1, [pc, #16]	; (db00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    daf0:	9b01      	ldr	r3, [sp, #4]
    daf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    daf6:	bf00      	nop
    daf8:	b003      	add	sp, #12
    dafa:	f85d fb04 	ldr.w	pc, [sp], #4
    dafe:	bf00      	nop
    db00:	1fff8fd0 	.word	0x1fff8fd0
    db04:	1fff8fcc 	.word	0x1fff8fcc

0000db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    db08:	b500      	push	{lr}
    db0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db0c:	f7f3 f862 	bl	bd4 <Sys_GetCoreID>
    db10:	4603      	mov	r3, r0
    db12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    db14:	4a0d      	ldr	r2, [pc, #52]	; (db4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    db16:	9b01      	ldr	r3, [sp, #4]
    db18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db1c:	1e5a      	subs	r2, r3, #1
    db1e:	490b      	ldr	r1, [pc, #44]	; (db4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    db20:	9b01      	ldr	r3, [sp, #4]
    db22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    db26:	4a0a      	ldr	r2, [pc, #40]	; (db50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    db28:	9b01      	ldr	r3, [sp, #4]
    db2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db2e:	f003 0301 	and.w	r3, r3, #1
    db32:	2b00      	cmp	r3, #0
    db34:	d106      	bne.n	db44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    db36:	4a05      	ldr	r2, [pc, #20]	; (db4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    db38:	9b01      	ldr	r3, [sp, #4]
    db3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db3e:	2b00      	cmp	r3, #0
    db40:	d100      	bne.n	db44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db44:	bf00      	nop
    db46:	b003      	add	sp, #12
    db48:	f85d fb04 	ldr.w	pc, [sp], #4
    db4c:	1fff8fd0 	.word	0x1fff8fd0
    db50:	1fff8fcc 	.word	0x1fff8fcc

0000db54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    db54:	b500      	push	{lr}
    db56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db58:	f7f3 f83c 	bl	bd4 <Sys_GetCoreID>
    db5c:	4603      	mov	r3, r0
    db5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    db60:	4a10      	ldr	r2, [pc, #64]	; (dba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    db62:	9b01      	ldr	r3, [sp, #4]
    db64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db68:	2b00      	cmp	r3, #0
    db6a:	d10d      	bne.n	db88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db6c:	f7f2 ff48 	bl	a00 <Adc_schm_read_msr>
    db70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db72:	9b00      	ldr	r3, [sp, #0]
    db74:	f003 0301 	and.w	r3, r3, #1
    db78:	2b00      	cmp	r3, #0
    db7a:	d100      	bne.n	db7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    db7e:	490a      	ldr	r1, [pc, #40]	; (dba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    db80:	9b01      	ldr	r3, [sp, #4]
    db82:	9a00      	ldr	r2, [sp, #0]
    db84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    db88:	4a06      	ldr	r2, [pc, #24]	; (dba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    db8a:	9b01      	ldr	r3, [sp, #4]
    db8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db90:	1c5a      	adds	r2, r3, #1
    db92:	4904      	ldr	r1, [pc, #16]	; (dba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    db94:	9b01      	ldr	r3, [sp, #4]
    db96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db9a:	bf00      	nop
    db9c:	b003      	add	sp, #12
    db9e:	f85d fb04 	ldr.w	pc, [sp], #4
    dba2:	bf00      	nop
    dba4:	1fff8fd8 	.word	0x1fff8fd8
    dba8:	1fff8fd4 	.word	0x1fff8fd4

0000dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    dbac:	b500      	push	{lr}
    dbae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbb0:	f7f3 f810 	bl	bd4 <Sys_GetCoreID>
    dbb4:	4603      	mov	r3, r0
    dbb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    dbb8:	4a0d      	ldr	r2, [pc, #52]	; (dbf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    dbba:	9b01      	ldr	r3, [sp, #4]
    dbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc0:	1e5a      	subs	r2, r3, #1
    dbc2:	490b      	ldr	r1, [pc, #44]	; (dbf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    dbc4:	9b01      	ldr	r3, [sp, #4]
    dbc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    dbca:	4a0a      	ldr	r2, [pc, #40]	; (dbf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    dbcc:	9b01      	ldr	r3, [sp, #4]
    dbce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd2:	f003 0301 	and.w	r3, r3, #1
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	d106      	bne.n	dbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    dbda:	4a05      	ldr	r2, [pc, #20]	; (dbf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    dbdc:	9b01      	ldr	r3, [sp, #4]
    dbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe2:	2b00      	cmp	r3, #0
    dbe4:	d100      	bne.n	dbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbe8:	bf00      	nop
    dbea:	b003      	add	sp, #12
    dbec:	f85d fb04 	ldr.w	pc, [sp], #4
    dbf0:	1fff8fd8 	.word	0x1fff8fd8
    dbf4:	1fff8fd4 	.word	0x1fff8fd4

0000dbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    dbf8:	b500      	push	{lr}
    dbfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbfc:	f7f2 ffea 	bl	bd4 <Sys_GetCoreID>
    dc00:	4603      	mov	r3, r0
    dc02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    dc04:	4a10      	ldr	r2, [pc, #64]	; (dc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    dc06:	9b01      	ldr	r3, [sp, #4]
    dc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d10d      	bne.n	dc2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc10:	f7f2 fef6 	bl	a00 <Adc_schm_read_msr>
    dc14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc16:	9b00      	ldr	r3, [sp, #0]
    dc18:	f003 0301 	and.w	r3, r3, #1
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d100      	bne.n	dc22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    dc22:	490a      	ldr	r1, [pc, #40]	; (dc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	9a00      	ldr	r2, [sp, #0]
    dc28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    dc2c:	4a06      	ldr	r2, [pc, #24]	; (dc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    dc2e:	9b01      	ldr	r3, [sp, #4]
    dc30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc34:	1c5a      	adds	r2, r3, #1
    dc36:	4904      	ldr	r1, [pc, #16]	; (dc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    dc38:	9b01      	ldr	r3, [sp, #4]
    dc3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc3e:	bf00      	nop
    dc40:	b003      	add	sp, #12
    dc42:	f85d fb04 	ldr.w	pc, [sp], #4
    dc46:	bf00      	nop
    dc48:	1fff8fe0 	.word	0x1fff8fe0
    dc4c:	1fff8fdc 	.word	0x1fff8fdc

0000dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    dc50:	b500      	push	{lr}
    dc52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc54:	f7f2 ffbe 	bl	bd4 <Sys_GetCoreID>
    dc58:	4603      	mov	r3, r0
    dc5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    dc5c:	4a0d      	ldr	r2, [pc, #52]	; (dc94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    dc5e:	9b01      	ldr	r3, [sp, #4]
    dc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc64:	1e5a      	subs	r2, r3, #1
    dc66:	490b      	ldr	r1, [pc, #44]	; (dc94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    dc68:	9b01      	ldr	r3, [sp, #4]
    dc6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    dc6e:	4a0a      	ldr	r2, [pc, #40]	; (dc98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    dc70:	9b01      	ldr	r3, [sp, #4]
    dc72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc76:	f003 0301 	and.w	r3, r3, #1
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d106      	bne.n	dc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    dc7e:	4a05      	ldr	r2, [pc, #20]	; (dc94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    dc80:	9b01      	ldr	r3, [sp, #4]
    dc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d100      	bne.n	dc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc8c:	bf00      	nop
    dc8e:	b003      	add	sp, #12
    dc90:	f85d fb04 	ldr.w	pc, [sp], #4
    dc94:	1fff8fe0 	.word	0x1fff8fe0
    dc98:	1fff8fdc 	.word	0x1fff8fdc

0000dc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    dc9c:	b500      	push	{lr}
    dc9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dca0:	f7f2 ff98 	bl	bd4 <Sys_GetCoreID>
    dca4:	4603      	mov	r3, r0
    dca6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    dca8:	4a10      	ldr	r2, [pc, #64]	; (dcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    dcaa:	9b01      	ldr	r3, [sp, #4]
    dcac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcb0:	2b00      	cmp	r3, #0
    dcb2:	d10d      	bne.n	dcd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dcb4:	f7f2 fea4 	bl	a00 <Adc_schm_read_msr>
    dcb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dcba:	9b00      	ldr	r3, [sp, #0]
    dcbc:	f003 0301 	and.w	r3, r3, #1
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d100      	bne.n	dcc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dcc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    dcc6:	490a      	ldr	r1, [pc, #40]	; (dcf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	9a00      	ldr	r2, [sp, #0]
    dccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    dcd0:	4a06      	ldr	r2, [pc, #24]	; (dcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    dcd2:	9b01      	ldr	r3, [sp, #4]
    dcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd8:	1c5a      	adds	r2, r3, #1
    dcda:	4904      	ldr	r1, [pc, #16]	; (dcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    dcdc:	9b01      	ldr	r3, [sp, #4]
    dcde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dce2:	bf00      	nop
    dce4:	b003      	add	sp, #12
    dce6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcea:	bf00      	nop
    dcec:	1fff8fe8 	.word	0x1fff8fe8
    dcf0:	1fff8fe4 	.word	0x1fff8fe4

0000dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    dcf4:	b500      	push	{lr}
    dcf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcf8:	f7f2 ff6c 	bl	bd4 <Sys_GetCoreID>
    dcfc:	4603      	mov	r3, r0
    dcfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    dd00:	4a0d      	ldr	r2, [pc, #52]	; (dd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd08:	1e5a      	subs	r2, r3, #1
    dd0a:	490b      	ldr	r1, [pc, #44]	; (dd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    dd0c:	9b01      	ldr	r3, [sp, #4]
    dd0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    dd12:	4a0a      	ldr	r2, [pc, #40]	; (dd3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    dd14:	9b01      	ldr	r3, [sp, #4]
    dd16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd1a:	f003 0301 	and.w	r3, r3, #1
    dd1e:	2b00      	cmp	r3, #0
    dd20:	d106      	bne.n	dd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    dd22:	4a05      	ldr	r2, [pc, #20]	; (dd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    dd24:	9b01      	ldr	r3, [sp, #4]
    dd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d100      	bne.n	dd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd30:	bf00      	nop
    dd32:	b003      	add	sp, #12
    dd34:	f85d fb04 	ldr.w	pc, [sp], #4
    dd38:	1fff8fe8 	.word	0x1fff8fe8
    dd3c:	1fff8fe4 	.word	0x1fff8fe4

0000dd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    dd40:	b500      	push	{lr}
    dd42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd44:	f7f2 ff46 	bl	bd4 <Sys_GetCoreID>
    dd48:	4603      	mov	r3, r0
    dd4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    dd4c:	4a10      	ldr	r2, [pc, #64]	; (dd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    dd4e:	9b01      	ldr	r3, [sp, #4]
    dd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd54:	2b00      	cmp	r3, #0
    dd56:	d10d      	bne.n	dd74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd58:	f7f2 fe52 	bl	a00 <Adc_schm_read_msr>
    dd5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd5e:	9b00      	ldr	r3, [sp, #0]
    dd60:	f003 0301 	and.w	r3, r3, #1
    dd64:	2b00      	cmp	r3, #0
    dd66:	d100      	bne.n	dd6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    dd6a:	490a      	ldr	r1, [pc, #40]	; (dd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    dd6c:	9b01      	ldr	r3, [sp, #4]
    dd6e:	9a00      	ldr	r2, [sp, #0]
    dd70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    dd74:	4a06      	ldr	r2, [pc, #24]	; (dd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    dd76:	9b01      	ldr	r3, [sp, #4]
    dd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7c:	1c5a      	adds	r2, r3, #1
    dd7e:	4904      	ldr	r1, [pc, #16]	; (dd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    dd80:	9b01      	ldr	r3, [sp, #4]
    dd82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd86:	bf00      	nop
    dd88:	b003      	add	sp, #12
    dd8a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd8e:	bf00      	nop
    dd90:	1fff8ff0 	.word	0x1fff8ff0
    dd94:	1fff8fec 	.word	0x1fff8fec

0000dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    dd98:	b500      	push	{lr}
    dd9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd9c:	f7f2 ff1a 	bl	bd4 <Sys_GetCoreID>
    dda0:	4603      	mov	r3, r0
    dda2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    dda4:	4a0d      	ldr	r2, [pc, #52]	; (dddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    dda6:	9b01      	ldr	r3, [sp, #4]
    dda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddac:	1e5a      	subs	r2, r3, #1
    ddae:	490b      	ldr	r1, [pc, #44]	; (dddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    ddb0:	9b01      	ldr	r3, [sp, #4]
    ddb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    ddb6:	4a0a      	ldr	r2, [pc, #40]	; (dde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    ddb8:	9b01      	ldr	r3, [sp, #4]
    ddba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddbe:	f003 0301 	and.w	r3, r3, #1
    ddc2:	2b00      	cmp	r3, #0
    ddc4:	d106      	bne.n	ddd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    ddc6:	4a05      	ldr	r2, [pc, #20]	; (dddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    ddc8:	9b01      	ldr	r3, [sp, #4]
    ddca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddce:	2b00      	cmp	r3, #0
    ddd0:	d100      	bne.n	ddd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ddd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ddd4:	bf00      	nop
    ddd6:	b003      	add	sp, #12
    ddd8:	f85d fb04 	ldr.w	pc, [sp], #4
    dddc:	1fff8ff0 	.word	0x1fff8ff0
    dde0:	1fff8fec 	.word	0x1fff8fec

0000dde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    dde4:	b500      	push	{lr}
    dde6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dde8:	f7f2 fef4 	bl	bd4 <Sys_GetCoreID>
    ddec:	4603      	mov	r3, r0
    ddee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    ddf0:	4a10      	ldr	r2, [pc, #64]	; (de34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    ddf2:	9b01      	ldr	r3, [sp, #4]
    ddf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddf8:	2b00      	cmp	r3, #0
    ddfa:	d10d      	bne.n	de18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddfc:	f7f2 fe00 	bl	a00 <Adc_schm_read_msr>
    de00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de02:	9b00      	ldr	r3, [sp, #0]
    de04:	f003 0301 	and.w	r3, r3, #1
    de08:	2b00      	cmp	r3, #0
    de0a:	d100      	bne.n	de0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    de0e:	490a      	ldr	r1, [pc, #40]	; (de38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    de10:	9b01      	ldr	r3, [sp, #4]
    de12:	9a00      	ldr	r2, [sp, #0]
    de14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    de18:	4a06      	ldr	r2, [pc, #24]	; (de34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    de1a:	9b01      	ldr	r3, [sp, #4]
    de1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de20:	1c5a      	adds	r2, r3, #1
    de22:	4904      	ldr	r1, [pc, #16]	; (de34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    de24:	9b01      	ldr	r3, [sp, #4]
    de26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de2a:	bf00      	nop
    de2c:	b003      	add	sp, #12
    de2e:	f85d fb04 	ldr.w	pc, [sp], #4
    de32:	bf00      	nop
    de34:	1fff8ff8 	.word	0x1fff8ff8
    de38:	1fff8ff4 	.word	0x1fff8ff4

0000de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    de3c:	b500      	push	{lr}
    de3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de40:	f7f2 fec8 	bl	bd4 <Sys_GetCoreID>
    de44:	4603      	mov	r3, r0
    de46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    de48:	4a0d      	ldr	r2, [pc, #52]	; (de80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    de4a:	9b01      	ldr	r3, [sp, #4]
    de4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de50:	1e5a      	subs	r2, r3, #1
    de52:	490b      	ldr	r1, [pc, #44]	; (de80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    de54:	9b01      	ldr	r3, [sp, #4]
    de56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    de5a:	4a0a      	ldr	r2, [pc, #40]	; (de84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    de5c:	9b01      	ldr	r3, [sp, #4]
    de5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de62:	f003 0301 	and.w	r3, r3, #1
    de66:	2b00      	cmp	r3, #0
    de68:	d106      	bne.n	de78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    de6a:	4a05      	ldr	r2, [pc, #20]	; (de80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    de6c:	9b01      	ldr	r3, [sp, #4]
    de6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de72:	2b00      	cmp	r3, #0
    de74:	d100      	bne.n	de78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de78:	bf00      	nop
    de7a:	b003      	add	sp, #12
    de7c:	f85d fb04 	ldr.w	pc, [sp], #4
    de80:	1fff8ff8 	.word	0x1fff8ff8
    de84:	1fff8ff4 	.word	0x1fff8ff4

0000de88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    de88:	b500      	push	{lr}
    de8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de8c:	f7f2 fea2 	bl	bd4 <Sys_GetCoreID>
    de90:	4603      	mov	r3, r0
    de92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    de94:	4a10      	ldr	r2, [pc, #64]	; (ded8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    de96:	9b01      	ldr	r3, [sp, #4]
    de98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de9c:	2b00      	cmp	r3, #0
    de9e:	d10d      	bne.n	debc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dea0:	f7f2 fdae 	bl	a00 <Adc_schm_read_msr>
    dea4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dea6:	9b00      	ldr	r3, [sp, #0]
    dea8:	f003 0301 	and.w	r3, r3, #1
    deac:	2b00      	cmp	r3, #0
    deae:	d100      	bne.n	deb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    deb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    deb2:	490a      	ldr	r1, [pc, #40]	; (dedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	9a00      	ldr	r2, [sp, #0]
    deb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    debc:	4a06      	ldr	r2, [pc, #24]	; (ded8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    debe:	9b01      	ldr	r3, [sp, #4]
    dec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec4:	1c5a      	adds	r2, r3, #1
    dec6:	4904      	ldr	r1, [pc, #16]	; (ded8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    dec8:	9b01      	ldr	r3, [sp, #4]
    deca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dece:	bf00      	nop
    ded0:	b003      	add	sp, #12
    ded2:	f85d fb04 	ldr.w	pc, [sp], #4
    ded6:	bf00      	nop
    ded8:	1fff9000 	.word	0x1fff9000
    dedc:	1fff8ffc 	.word	0x1fff8ffc

0000dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    dee0:	b500      	push	{lr}
    dee2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dee4:	f7f2 fe76 	bl	bd4 <Sys_GetCoreID>
    dee8:	4603      	mov	r3, r0
    deea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    deec:	4a0d      	ldr	r2, [pc, #52]	; (df24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    deee:	9b01      	ldr	r3, [sp, #4]
    def0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    def4:	1e5a      	subs	r2, r3, #1
    def6:	490b      	ldr	r1, [pc, #44]	; (df24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    def8:	9b01      	ldr	r3, [sp, #4]
    defa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    defe:	4a0a      	ldr	r2, [pc, #40]	; (df28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    df00:	9b01      	ldr	r3, [sp, #4]
    df02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df06:	f003 0301 	and.w	r3, r3, #1
    df0a:	2b00      	cmp	r3, #0
    df0c:	d106      	bne.n	df1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    df0e:	4a05      	ldr	r2, [pc, #20]	; (df24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    df10:	9b01      	ldr	r3, [sp, #4]
    df12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df16:	2b00      	cmp	r3, #0
    df18:	d100      	bne.n	df1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df1c:	bf00      	nop
    df1e:	b003      	add	sp, #12
    df20:	f85d fb04 	ldr.w	pc, [sp], #4
    df24:	1fff9000 	.word	0x1fff9000
    df28:	1fff8ffc 	.word	0x1fff8ffc

0000df2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    df2c:	b500      	push	{lr}
    df2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df30:	f7f2 fe50 	bl	bd4 <Sys_GetCoreID>
    df34:	4603      	mov	r3, r0
    df36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    df38:	4a10      	ldr	r2, [pc, #64]	; (df7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    df3a:	9b01      	ldr	r3, [sp, #4]
    df3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df40:	2b00      	cmp	r3, #0
    df42:	d10d      	bne.n	df60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df44:	f7f2 fd5c 	bl	a00 <Adc_schm_read_msr>
    df48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df4a:	9b00      	ldr	r3, [sp, #0]
    df4c:	f003 0301 	and.w	r3, r3, #1
    df50:	2b00      	cmp	r3, #0
    df52:	d100      	bne.n	df56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    df56:	490a      	ldr	r1, [pc, #40]	; (df80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	9a00      	ldr	r2, [sp, #0]
    df5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    df60:	4a06      	ldr	r2, [pc, #24]	; (df7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    df62:	9b01      	ldr	r3, [sp, #4]
    df64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df68:	1c5a      	adds	r2, r3, #1
    df6a:	4904      	ldr	r1, [pc, #16]	; (df7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    df6c:	9b01      	ldr	r3, [sp, #4]
    df6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df72:	bf00      	nop
    df74:	b003      	add	sp, #12
    df76:	f85d fb04 	ldr.w	pc, [sp], #4
    df7a:	bf00      	nop
    df7c:	1fff9008 	.word	0x1fff9008
    df80:	1fff9004 	.word	0x1fff9004

0000df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    df84:	b500      	push	{lr}
    df86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df88:	f7f2 fe24 	bl	bd4 <Sys_GetCoreID>
    df8c:	4603      	mov	r3, r0
    df8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    df90:	4a0d      	ldr	r2, [pc, #52]	; (dfc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    df92:	9b01      	ldr	r3, [sp, #4]
    df94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df98:	1e5a      	subs	r2, r3, #1
    df9a:	490b      	ldr	r1, [pc, #44]	; (dfc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    df9c:	9b01      	ldr	r3, [sp, #4]
    df9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    dfa2:	4a0a      	ldr	r2, [pc, #40]	; (dfcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    dfa4:	9b01      	ldr	r3, [sp, #4]
    dfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfaa:	f003 0301 	and.w	r3, r3, #1
    dfae:	2b00      	cmp	r3, #0
    dfb0:	d106      	bne.n	dfc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    dfb2:	4a05      	ldr	r2, [pc, #20]	; (dfc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    dfb4:	9b01      	ldr	r3, [sp, #4]
    dfb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d100      	bne.n	dfc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dfbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfc0:	bf00      	nop
    dfc2:	b003      	add	sp, #12
    dfc4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfc8:	1fff9008 	.word	0x1fff9008
    dfcc:	1fff9004 	.word	0x1fff9004

0000dfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    dfd0:	b500      	push	{lr}
    dfd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfd4:	f7f2 fdfe 	bl	bd4 <Sys_GetCoreID>
    dfd8:	4603      	mov	r3, r0
    dfda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    dfdc:	4a10      	ldr	r2, [pc, #64]	; (e020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dfde:	9b01      	ldr	r3, [sp, #4]
    dfe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d10d      	bne.n	e004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfe8:	f7f2 fd0a 	bl	a00 <Adc_schm_read_msr>
    dfec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfee:	9b00      	ldr	r3, [sp, #0]
    dff0:	f003 0301 	and.w	r3, r3, #1
    dff4:	2b00      	cmp	r3, #0
    dff6:	d100      	bne.n	dffa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dff8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    dffa:	490a      	ldr	r1, [pc, #40]	; (e024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	9a00      	ldr	r2, [sp, #0]
    e000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    e004:	4a06      	ldr	r2, [pc, #24]	; (e020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    e006:	9b01      	ldr	r3, [sp, #4]
    e008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e00c:	1c5a      	adds	r2, r3, #1
    e00e:	4904      	ldr	r1, [pc, #16]	; (e020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    e010:	9b01      	ldr	r3, [sp, #4]
    e012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e016:	bf00      	nop
    e018:	b003      	add	sp, #12
    e01a:	f85d fb04 	ldr.w	pc, [sp], #4
    e01e:	bf00      	nop
    e020:	1fff9010 	.word	0x1fff9010
    e024:	1fff900c 	.word	0x1fff900c

0000e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    e028:	b500      	push	{lr}
    e02a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e02c:	f7f2 fdd2 	bl	bd4 <Sys_GetCoreID>
    e030:	4603      	mov	r3, r0
    e032:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    e034:	4a0d      	ldr	r2, [pc, #52]	; (e06c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    e036:	9b01      	ldr	r3, [sp, #4]
    e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e03c:	1e5a      	subs	r2, r3, #1
    e03e:	490b      	ldr	r1, [pc, #44]	; (e06c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    e040:	9b01      	ldr	r3, [sp, #4]
    e042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    e046:	4a0a      	ldr	r2, [pc, #40]	; (e070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    e048:	9b01      	ldr	r3, [sp, #4]
    e04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e04e:	f003 0301 	and.w	r3, r3, #1
    e052:	2b00      	cmp	r3, #0
    e054:	d106      	bne.n	e064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    e056:	4a05      	ldr	r2, [pc, #20]	; (e06c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    e058:	9b01      	ldr	r3, [sp, #4]
    e05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e05e:	2b00      	cmp	r3, #0
    e060:	d100      	bne.n	e064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e062:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e064:	bf00      	nop
    e066:	b003      	add	sp, #12
    e068:	f85d fb04 	ldr.w	pc, [sp], #4
    e06c:	1fff9010 	.word	0x1fff9010
    e070:	1fff900c 	.word	0x1fff900c

0000e074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    e074:	b500      	push	{lr}
    e076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e078:	f7f2 fdac 	bl	bd4 <Sys_GetCoreID>
    e07c:	4603      	mov	r3, r0
    e07e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    e080:	4a10      	ldr	r2, [pc, #64]	; (e0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    e082:	9b01      	ldr	r3, [sp, #4]
    e084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e088:	2b00      	cmp	r3, #0
    e08a:	d10d      	bne.n	e0a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e08c:	f7f2 fcb8 	bl	a00 <Adc_schm_read_msr>
    e090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e092:	9b00      	ldr	r3, [sp, #0]
    e094:	f003 0301 	and.w	r3, r3, #1
    e098:	2b00      	cmp	r3, #0
    e09a:	d100      	bne.n	e09e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e09c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    e09e:	490a      	ldr	r1, [pc, #40]	; (e0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	9a00      	ldr	r2, [sp, #0]
    e0a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    e0a8:	4a06      	ldr	r2, [pc, #24]	; (e0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    e0aa:	9b01      	ldr	r3, [sp, #4]
    e0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b0:	1c5a      	adds	r2, r3, #1
    e0b2:	4904      	ldr	r1, [pc, #16]	; (e0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    e0b4:	9b01      	ldr	r3, [sp, #4]
    e0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e0ba:	bf00      	nop
    e0bc:	b003      	add	sp, #12
    e0be:	f85d fb04 	ldr.w	pc, [sp], #4
    e0c2:	bf00      	nop
    e0c4:	1fff9018 	.word	0x1fff9018
    e0c8:	1fff9014 	.word	0x1fff9014

0000e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    e0cc:	b500      	push	{lr}
    e0ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0d0:	f7f2 fd80 	bl	bd4 <Sys_GetCoreID>
    e0d4:	4603      	mov	r3, r0
    e0d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    e0d8:	4a0d      	ldr	r2, [pc, #52]	; (e110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    e0da:	9b01      	ldr	r3, [sp, #4]
    e0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e0:	1e5a      	subs	r2, r3, #1
    e0e2:	490b      	ldr	r1, [pc, #44]	; (e110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    e0e4:	9b01      	ldr	r3, [sp, #4]
    e0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    e0ea:	4a0a      	ldr	r2, [pc, #40]	; (e114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    e0ec:	9b01      	ldr	r3, [sp, #4]
    e0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f2:	f003 0301 	and.w	r3, r3, #1
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d106      	bne.n	e108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    e0fa:	4a05      	ldr	r2, [pc, #20]	; (e110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    e0fc:	9b01      	ldr	r3, [sp, #4]
    e0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e102:	2b00      	cmp	r3, #0
    e104:	d100      	bne.n	e108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e108:	bf00      	nop
    e10a:	b003      	add	sp, #12
    e10c:	f85d fb04 	ldr.w	pc, [sp], #4
    e110:	1fff9018 	.word	0x1fff9018
    e114:	1fff9014 	.word	0x1fff9014

0000e118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    e118:	b500      	push	{lr}
    e11a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e11c:	f7f2 fd5a 	bl	bd4 <Sys_GetCoreID>
    e120:	4603      	mov	r3, r0
    e122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    e124:	4a10      	ldr	r2, [pc, #64]	; (e168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    e126:	9b01      	ldr	r3, [sp, #4]
    e128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e12c:	2b00      	cmp	r3, #0
    e12e:	d10d      	bne.n	e14c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e130:	f7f2 fc66 	bl	a00 <Adc_schm_read_msr>
    e134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e136:	9b00      	ldr	r3, [sp, #0]
    e138:	f003 0301 	and.w	r3, r3, #1
    e13c:	2b00      	cmp	r3, #0
    e13e:	d100      	bne.n	e142 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    e142:	490a      	ldr	r1, [pc, #40]	; (e16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    e144:	9b01      	ldr	r3, [sp, #4]
    e146:	9a00      	ldr	r2, [sp, #0]
    e148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    e14c:	4a06      	ldr	r2, [pc, #24]	; (e168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    e14e:	9b01      	ldr	r3, [sp, #4]
    e150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e154:	1c5a      	adds	r2, r3, #1
    e156:	4904      	ldr	r1, [pc, #16]	; (e168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    e158:	9b01      	ldr	r3, [sp, #4]
    e15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e15e:	bf00      	nop
    e160:	b003      	add	sp, #12
    e162:	f85d fb04 	ldr.w	pc, [sp], #4
    e166:	bf00      	nop
    e168:	1fff9020 	.word	0x1fff9020
    e16c:	1fff901c 	.word	0x1fff901c

0000e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    e170:	b500      	push	{lr}
    e172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e174:	f7f2 fd2e 	bl	bd4 <Sys_GetCoreID>
    e178:	4603      	mov	r3, r0
    e17a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    e17c:	4a0d      	ldr	r2, [pc, #52]	; (e1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    e17e:	9b01      	ldr	r3, [sp, #4]
    e180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e184:	1e5a      	subs	r2, r3, #1
    e186:	490b      	ldr	r1, [pc, #44]	; (e1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    e188:	9b01      	ldr	r3, [sp, #4]
    e18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    e18e:	4a0a      	ldr	r2, [pc, #40]	; (e1b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    e190:	9b01      	ldr	r3, [sp, #4]
    e192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e196:	f003 0301 	and.w	r3, r3, #1
    e19a:	2b00      	cmp	r3, #0
    e19c:	d106      	bne.n	e1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    e19e:	4a05      	ldr	r2, [pc, #20]	; (e1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    e1a0:	9b01      	ldr	r3, [sp, #4]
    e1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	d100      	bne.n	e1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e1aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e1ac:	bf00      	nop
    e1ae:	b003      	add	sp, #12
    e1b0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1b4:	1fff9020 	.word	0x1fff9020
    e1b8:	1fff901c 	.word	0x1fff901c

0000e1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    e1bc:	b500      	push	{lr}
    e1be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1c0:	f7f2 fd08 	bl	bd4 <Sys_GetCoreID>
    e1c4:	4603      	mov	r3, r0
    e1c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    e1c8:	4a10      	ldr	r2, [pc, #64]	; (e20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    e1ca:	9b01      	ldr	r3, [sp, #4]
    e1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	d10d      	bne.n	e1f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1d4:	f7f2 fc14 	bl	a00 <Adc_schm_read_msr>
    e1d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1da:	9b00      	ldr	r3, [sp, #0]
    e1dc:	f003 0301 	and.w	r3, r3, #1
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	d100      	bne.n	e1e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    e1e6:	490a      	ldr	r1, [pc, #40]	; (e210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	9a00      	ldr	r2, [sp, #0]
    e1ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    e1f0:	4a06      	ldr	r2, [pc, #24]	; (e20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    e1f2:	9b01      	ldr	r3, [sp, #4]
    e1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f8:	1c5a      	adds	r2, r3, #1
    e1fa:	4904      	ldr	r1, [pc, #16]	; (e20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    e1fc:	9b01      	ldr	r3, [sp, #4]
    e1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e202:	bf00      	nop
    e204:	b003      	add	sp, #12
    e206:	f85d fb04 	ldr.w	pc, [sp], #4
    e20a:	bf00      	nop
    e20c:	1fff9028 	.word	0x1fff9028
    e210:	1fff9024 	.word	0x1fff9024

0000e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    e214:	b500      	push	{lr}
    e216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e218:	f7f2 fcdc 	bl	bd4 <Sys_GetCoreID>
    e21c:	4603      	mov	r3, r0
    e21e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    e220:	4a0d      	ldr	r2, [pc, #52]	; (e258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    e222:	9b01      	ldr	r3, [sp, #4]
    e224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e228:	1e5a      	subs	r2, r3, #1
    e22a:	490b      	ldr	r1, [pc, #44]	; (e258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    e22c:	9b01      	ldr	r3, [sp, #4]
    e22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    e232:	4a0a      	ldr	r2, [pc, #40]	; (e25c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    e234:	9b01      	ldr	r3, [sp, #4]
    e236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e23a:	f003 0301 	and.w	r3, r3, #1
    e23e:	2b00      	cmp	r3, #0
    e240:	d106      	bne.n	e250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    e242:	4a05      	ldr	r2, [pc, #20]	; (e258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    e244:	9b01      	ldr	r3, [sp, #4]
    e246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e24a:	2b00      	cmp	r3, #0
    e24c:	d100      	bne.n	e250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e24e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e250:	bf00      	nop
    e252:	b003      	add	sp, #12
    e254:	f85d fb04 	ldr.w	pc, [sp], #4
    e258:	1fff9028 	.word	0x1fff9028
    e25c:	1fff9024 	.word	0x1fff9024

0000e260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    e260:	b500      	push	{lr}
    e262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e264:	f7f2 fcb6 	bl	bd4 <Sys_GetCoreID>
    e268:	4603      	mov	r3, r0
    e26a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    e26c:	4a10      	ldr	r2, [pc, #64]	; (e2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    e26e:	9b01      	ldr	r3, [sp, #4]
    e270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e274:	2b00      	cmp	r3, #0
    e276:	d10d      	bne.n	e294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e278:	f7f2 fbc2 	bl	a00 <Adc_schm_read_msr>
    e27c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e27e:	9b00      	ldr	r3, [sp, #0]
    e280:	f003 0301 	and.w	r3, r3, #1
    e284:	2b00      	cmp	r3, #0
    e286:	d100      	bne.n	e28a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    e28a:	490a      	ldr	r1, [pc, #40]	; (e2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    e28c:	9b01      	ldr	r3, [sp, #4]
    e28e:	9a00      	ldr	r2, [sp, #0]
    e290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    e294:	4a06      	ldr	r2, [pc, #24]	; (e2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    e296:	9b01      	ldr	r3, [sp, #4]
    e298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29c:	1c5a      	adds	r2, r3, #1
    e29e:	4904      	ldr	r1, [pc, #16]	; (e2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    e2a0:	9b01      	ldr	r3, [sp, #4]
    e2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2a6:	bf00      	nop
    e2a8:	b003      	add	sp, #12
    e2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    e2ae:	bf00      	nop
    e2b0:	1fff9030 	.word	0x1fff9030
    e2b4:	1fff902c 	.word	0x1fff902c

0000e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    e2b8:	b500      	push	{lr}
    e2ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2bc:	f7f2 fc8a 	bl	bd4 <Sys_GetCoreID>
    e2c0:	4603      	mov	r3, r0
    e2c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    e2c4:	4a0d      	ldr	r2, [pc, #52]	; (e2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    e2c6:	9b01      	ldr	r3, [sp, #4]
    e2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2cc:	1e5a      	subs	r2, r3, #1
    e2ce:	490b      	ldr	r1, [pc, #44]	; (e2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    e2d0:	9b01      	ldr	r3, [sp, #4]
    e2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    e2d6:	4a0a      	ldr	r2, [pc, #40]	; (e300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    e2d8:	9b01      	ldr	r3, [sp, #4]
    e2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2de:	f003 0301 	and.w	r3, r3, #1
    e2e2:	2b00      	cmp	r3, #0
    e2e4:	d106      	bne.n	e2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    e2e6:	4a05      	ldr	r2, [pc, #20]	; (e2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    e2e8:	9b01      	ldr	r3, [sp, #4]
    e2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d100      	bne.n	e2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2f4:	bf00      	nop
    e2f6:	b003      	add	sp, #12
    e2f8:	f85d fb04 	ldr.w	pc, [sp], #4
    e2fc:	1fff9030 	.word	0x1fff9030
    e300:	1fff902c 	.word	0x1fff902c

0000e304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    e304:	b500      	push	{lr}
    e306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e308:	f7f2 fc64 	bl	bd4 <Sys_GetCoreID>
    e30c:	4603      	mov	r3, r0
    e30e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    e310:	4a10      	ldr	r2, [pc, #64]	; (e354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    e312:	9b01      	ldr	r3, [sp, #4]
    e314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e318:	2b00      	cmp	r3, #0
    e31a:	d10d      	bne.n	e338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e31c:	f7f2 fb70 	bl	a00 <Adc_schm_read_msr>
    e320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e322:	9b00      	ldr	r3, [sp, #0]
    e324:	f003 0301 	and.w	r3, r3, #1
    e328:	2b00      	cmp	r3, #0
    e32a:	d100      	bne.n	e32e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e32c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    e32e:	490a      	ldr	r1, [pc, #40]	; (e358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    e330:	9b01      	ldr	r3, [sp, #4]
    e332:	9a00      	ldr	r2, [sp, #0]
    e334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    e338:	4a06      	ldr	r2, [pc, #24]	; (e354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    e33a:	9b01      	ldr	r3, [sp, #4]
    e33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e340:	1c5a      	adds	r2, r3, #1
    e342:	4904      	ldr	r1, [pc, #16]	; (e354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    e344:	9b01      	ldr	r3, [sp, #4]
    e346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e34a:	bf00      	nop
    e34c:	b003      	add	sp, #12
    e34e:	f85d fb04 	ldr.w	pc, [sp], #4
    e352:	bf00      	nop
    e354:	1fff9038 	.word	0x1fff9038
    e358:	1fff9034 	.word	0x1fff9034

0000e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    e35c:	b500      	push	{lr}
    e35e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e360:	f7f2 fc38 	bl	bd4 <Sys_GetCoreID>
    e364:	4603      	mov	r3, r0
    e366:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    e368:	4a0d      	ldr	r2, [pc, #52]	; (e3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e36a:	9b01      	ldr	r3, [sp, #4]
    e36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e370:	1e5a      	subs	r2, r3, #1
    e372:	490b      	ldr	r1, [pc, #44]	; (e3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e374:	9b01      	ldr	r3, [sp, #4]
    e376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    e37a:	4a0a      	ldr	r2, [pc, #40]	; (e3a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    e37c:	9b01      	ldr	r3, [sp, #4]
    e37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e382:	f003 0301 	and.w	r3, r3, #1
    e386:	2b00      	cmp	r3, #0
    e388:	d106      	bne.n	e398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    e38a:	4a05      	ldr	r2, [pc, #20]	; (e3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e38c:	9b01      	ldr	r3, [sp, #4]
    e38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e392:	2b00      	cmp	r3, #0
    e394:	d100      	bne.n	e398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e398:	bf00      	nop
    e39a:	b003      	add	sp, #12
    e39c:	f85d fb04 	ldr.w	pc, [sp], #4
    e3a0:	1fff9038 	.word	0x1fff9038
    e3a4:	1fff9034 	.word	0x1fff9034

0000e3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    e3a8:	b500      	push	{lr}
    e3aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3ac:	f7f2 fc12 	bl	bd4 <Sys_GetCoreID>
    e3b0:	4603      	mov	r3, r0
    e3b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    e3b4:	4a10      	ldr	r2, [pc, #64]	; (e3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e3b6:	9b01      	ldr	r3, [sp, #4]
    e3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3bc:	2b00      	cmp	r3, #0
    e3be:	d10d      	bne.n	e3dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3c0:	f7f2 fb1e 	bl	a00 <Adc_schm_read_msr>
    e3c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3c6:	9b00      	ldr	r3, [sp, #0]
    e3c8:	f003 0301 	and.w	r3, r3, #1
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d100      	bne.n	e3d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    e3d2:	490a      	ldr	r1, [pc, #40]	; (e3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	9a00      	ldr	r2, [sp, #0]
    e3d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    e3dc:	4a06      	ldr	r2, [pc, #24]	; (e3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e3de:	9b01      	ldr	r3, [sp, #4]
    e3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e4:	1c5a      	adds	r2, r3, #1
    e3e6:	4904      	ldr	r1, [pc, #16]	; (e3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e3e8:	9b01      	ldr	r3, [sp, #4]
    e3ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3ee:	bf00      	nop
    e3f0:	b003      	add	sp, #12
    e3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    e3f6:	bf00      	nop
    e3f8:	1fff9040 	.word	0x1fff9040
    e3fc:	1fff903c 	.word	0x1fff903c

0000e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    e400:	b500      	push	{lr}
    e402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e404:	f7f2 fbe6 	bl	bd4 <Sys_GetCoreID>
    e408:	4603      	mov	r3, r0
    e40a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    e40c:	4a0d      	ldr	r2, [pc, #52]	; (e444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e40e:	9b01      	ldr	r3, [sp, #4]
    e410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e414:	1e5a      	subs	r2, r3, #1
    e416:	490b      	ldr	r1, [pc, #44]	; (e444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e418:	9b01      	ldr	r3, [sp, #4]
    e41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    e41e:	4a0a      	ldr	r2, [pc, #40]	; (e448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    e420:	9b01      	ldr	r3, [sp, #4]
    e422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e426:	f003 0301 	and.w	r3, r3, #1
    e42a:	2b00      	cmp	r3, #0
    e42c:	d106      	bne.n	e43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    e42e:	4a05      	ldr	r2, [pc, #20]	; (e444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e430:	9b01      	ldr	r3, [sp, #4]
    e432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e436:	2b00      	cmp	r3, #0
    e438:	d100      	bne.n	e43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e43a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e43c:	bf00      	nop
    e43e:	b003      	add	sp, #12
    e440:	f85d fb04 	ldr.w	pc, [sp], #4
    e444:	1fff9040 	.word	0x1fff9040
    e448:	1fff903c 	.word	0x1fff903c

0000e44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e44c:	b500      	push	{lr}
    e44e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e450:	f7f2 fbc0 	bl	bd4 <Sys_GetCoreID>
    e454:	4603      	mov	r3, r0
    e456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    e458:	4a10      	ldr	r2, [pc, #64]	; (e49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e45a:	9b01      	ldr	r3, [sp, #4]
    e45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e460:	2b00      	cmp	r3, #0
    e462:	d10d      	bne.n	e480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e464:	f7f2 facc 	bl	a00 <Adc_schm_read_msr>
    e468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e46a:	9b00      	ldr	r3, [sp, #0]
    e46c:	f003 0301 	and.w	r3, r3, #1
    e470:	2b00      	cmp	r3, #0
    e472:	d100      	bne.n	e476 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    e476:	490a      	ldr	r1, [pc, #40]	; (e4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	9a00      	ldr	r2, [sp, #0]
    e47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    e480:	4a06      	ldr	r2, [pc, #24]	; (e49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e482:	9b01      	ldr	r3, [sp, #4]
    e484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e488:	1c5a      	adds	r2, r3, #1
    e48a:	4904      	ldr	r1, [pc, #16]	; (e49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e48c:	9b01      	ldr	r3, [sp, #4]
    e48e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e492:	bf00      	nop
    e494:	b003      	add	sp, #12
    e496:	f85d fb04 	ldr.w	pc, [sp], #4
    e49a:	bf00      	nop
    e49c:	1fff9048 	.word	0x1fff9048
    e4a0:	1fff9044 	.word	0x1fff9044

0000e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e4a4:	b500      	push	{lr}
    e4a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4a8:	f7f2 fb94 	bl	bd4 <Sys_GetCoreID>
    e4ac:	4603      	mov	r3, r0
    e4ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    e4b0:	4a0d      	ldr	r2, [pc, #52]	; (e4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e4b2:	9b01      	ldr	r3, [sp, #4]
    e4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4b8:	1e5a      	subs	r2, r3, #1
    e4ba:	490b      	ldr	r1, [pc, #44]	; (e4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e4bc:	9b01      	ldr	r3, [sp, #4]
    e4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    e4c2:	4a0a      	ldr	r2, [pc, #40]	; (e4ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    e4c4:	9b01      	ldr	r3, [sp, #4]
    e4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ca:	f003 0301 	and.w	r3, r3, #1
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	d106      	bne.n	e4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    e4d2:	4a05      	ldr	r2, [pc, #20]	; (e4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e4d4:	9b01      	ldr	r3, [sp, #4]
    e4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4da:	2b00      	cmp	r3, #0
    e4dc:	d100      	bne.n	e4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4e0:	bf00      	nop
    e4e2:	b003      	add	sp, #12
    e4e4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4e8:	1fff9048 	.word	0x1fff9048
    e4ec:	1fff9044 	.word	0x1fff9044

0000e4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e4f0:	b500      	push	{lr}
    e4f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4f4:	f7f2 fb6e 	bl	bd4 <Sys_GetCoreID>
    e4f8:	4603      	mov	r3, r0
    e4fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    e4fc:	4a10      	ldr	r2, [pc, #64]	; (e540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e4fe:	9b01      	ldr	r3, [sp, #4]
    e500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e504:	2b00      	cmp	r3, #0
    e506:	d10d      	bne.n	e524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e508:	f7f2 fa7a 	bl	a00 <Adc_schm_read_msr>
    e50c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e50e:	9b00      	ldr	r3, [sp, #0]
    e510:	f003 0301 	and.w	r3, r3, #1
    e514:	2b00      	cmp	r3, #0
    e516:	d100      	bne.n	e51a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    e51a:	490a      	ldr	r1, [pc, #40]	; (e544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	9a00      	ldr	r2, [sp, #0]
    e520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    e524:	4a06      	ldr	r2, [pc, #24]	; (e540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e526:	9b01      	ldr	r3, [sp, #4]
    e528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52c:	1c5a      	adds	r2, r3, #1
    e52e:	4904      	ldr	r1, [pc, #16]	; (e540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e530:	9b01      	ldr	r3, [sp, #4]
    e532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e536:	bf00      	nop
    e538:	b003      	add	sp, #12
    e53a:	f85d fb04 	ldr.w	pc, [sp], #4
    e53e:	bf00      	nop
    e540:	1fff9050 	.word	0x1fff9050
    e544:	1fff904c 	.word	0x1fff904c

0000e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e548:	b500      	push	{lr}
    e54a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e54c:	f7f2 fb42 	bl	bd4 <Sys_GetCoreID>
    e550:	4603      	mov	r3, r0
    e552:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    e554:	4a0d      	ldr	r2, [pc, #52]	; (e58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e556:	9b01      	ldr	r3, [sp, #4]
    e558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e55c:	1e5a      	subs	r2, r3, #1
    e55e:	490b      	ldr	r1, [pc, #44]	; (e58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e560:	9b01      	ldr	r3, [sp, #4]
    e562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    e566:	4a0a      	ldr	r2, [pc, #40]	; (e590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    e568:	9b01      	ldr	r3, [sp, #4]
    e56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e56e:	f003 0301 	and.w	r3, r3, #1
    e572:	2b00      	cmp	r3, #0
    e574:	d106      	bne.n	e584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    e576:	4a05      	ldr	r2, [pc, #20]	; (e58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e578:	9b01      	ldr	r3, [sp, #4]
    e57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e57e:	2b00      	cmp	r3, #0
    e580:	d100      	bne.n	e584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e584:	bf00      	nop
    e586:	b003      	add	sp, #12
    e588:	f85d fb04 	ldr.w	pc, [sp], #4
    e58c:	1fff9050 	.word	0x1fff9050
    e590:	1fff904c 	.word	0x1fff904c

0000e594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e594:	b500      	push	{lr}
    e596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e598:	f7f2 fb1c 	bl	bd4 <Sys_GetCoreID>
    e59c:	4603      	mov	r3, r0
    e59e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    e5a0:	4a10      	ldr	r2, [pc, #64]	; (e5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e5a2:	9b01      	ldr	r3, [sp, #4]
    e5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5a8:	2b00      	cmp	r3, #0
    e5aa:	d10d      	bne.n	e5c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5ac:	f7f2 fa28 	bl	a00 <Adc_schm_read_msr>
    e5b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5b2:	9b00      	ldr	r3, [sp, #0]
    e5b4:	f003 0301 	and.w	r3, r3, #1
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d100      	bne.n	e5be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    e5be:	490a      	ldr	r1, [pc, #40]	; (e5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	9a00      	ldr	r2, [sp, #0]
    e5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    e5c8:	4a06      	ldr	r2, [pc, #24]	; (e5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e5ca:	9b01      	ldr	r3, [sp, #4]
    e5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5d0:	1c5a      	adds	r2, r3, #1
    e5d2:	4904      	ldr	r1, [pc, #16]	; (e5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e5d4:	9b01      	ldr	r3, [sp, #4]
    e5d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5da:	bf00      	nop
    e5dc:	b003      	add	sp, #12
    e5de:	f85d fb04 	ldr.w	pc, [sp], #4
    e5e2:	bf00      	nop
    e5e4:	1fff9058 	.word	0x1fff9058
    e5e8:	1fff9054 	.word	0x1fff9054

0000e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e5ec:	b500      	push	{lr}
    e5ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5f0:	f7f2 faf0 	bl	bd4 <Sys_GetCoreID>
    e5f4:	4603      	mov	r3, r0
    e5f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    e5f8:	4a0d      	ldr	r2, [pc, #52]	; (e630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e5fa:	9b01      	ldr	r3, [sp, #4]
    e5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e600:	1e5a      	subs	r2, r3, #1
    e602:	490b      	ldr	r1, [pc, #44]	; (e630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e604:	9b01      	ldr	r3, [sp, #4]
    e606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e60a:	4a0a      	ldr	r2, [pc, #40]	; (e634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e60c:	9b01      	ldr	r3, [sp, #4]
    e60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e612:	f003 0301 	and.w	r3, r3, #1
    e616:	2b00      	cmp	r3, #0
    e618:	d106      	bne.n	e628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e61a:	4a05      	ldr	r2, [pc, #20]	; (e630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e61c:	9b01      	ldr	r3, [sp, #4]
    e61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e622:	2b00      	cmp	r3, #0
    e624:	d100      	bne.n	e628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e628:	bf00      	nop
    e62a:	b003      	add	sp, #12
    e62c:	f85d fb04 	ldr.w	pc, [sp], #4
    e630:	1fff9058 	.word	0x1fff9058
    e634:	1fff9054 	.word	0x1fff9054

0000e638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e638:	b500      	push	{lr}
    e63a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e63c:	f7f2 faca 	bl	bd4 <Sys_GetCoreID>
    e640:	4603      	mov	r3, r0
    e642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e644:	4a10      	ldr	r2, [pc, #64]	; (e688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e646:	9b01      	ldr	r3, [sp, #4]
    e648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e64c:	2b00      	cmp	r3, #0
    e64e:	d10d      	bne.n	e66c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e650:	f7f2 f9d6 	bl	a00 <Adc_schm_read_msr>
    e654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e656:	9b00      	ldr	r3, [sp, #0]
    e658:	f003 0301 	and.w	r3, r3, #1
    e65c:	2b00      	cmp	r3, #0
    e65e:	d100      	bne.n	e662 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e662:	490a      	ldr	r1, [pc, #40]	; (e68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	9a00      	ldr	r2, [sp, #0]
    e668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e66c:	4a06      	ldr	r2, [pc, #24]	; (e688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e66e:	9b01      	ldr	r3, [sp, #4]
    e670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e674:	1c5a      	adds	r2, r3, #1
    e676:	4904      	ldr	r1, [pc, #16]	; (e688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e678:	9b01      	ldr	r3, [sp, #4]
    e67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e67e:	bf00      	nop
    e680:	b003      	add	sp, #12
    e682:	f85d fb04 	ldr.w	pc, [sp], #4
    e686:	bf00      	nop
    e688:	1fff9060 	.word	0x1fff9060
    e68c:	1fff905c 	.word	0x1fff905c

0000e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e690:	b500      	push	{lr}
    e692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e694:	f7f2 fa9e 	bl	bd4 <Sys_GetCoreID>
    e698:	4603      	mov	r3, r0
    e69a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e69c:	4a0d      	ldr	r2, [pc, #52]	; (e6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e69e:	9b01      	ldr	r3, [sp, #4]
    e6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6a4:	1e5a      	subs	r2, r3, #1
    e6a6:	490b      	ldr	r1, [pc, #44]	; (e6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e6a8:	9b01      	ldr	r3, [sp, #4]
    e6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e6ae:	4a0a      	ldr	r2, [pc, #40]	; (e6d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e6b0:	9b01      	ldr	r3, [sp, #4]
    e6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b6:	f003 0301 	and.w	r3, r3, #1
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	d106      	bne.n	e6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e6be:	4a05      	ldr	r2, [pc, #20]	; (e6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e6c0:	9b01      	ldr	r3, [sp, #4]
    e6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6c6:	2b00      	cmp	r3, #0
    e6c8:	d100      	bne.n	e6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6cc:	bf00      	nop
    e6ce:	b003      	add	sp, #12
    e6d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6d4:	1fff9060 	.word	0x1fff9060
    e6d8:	1fff905c 	.word	0x1fff905c

0000e6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e6dc:	b500      	push	{lr}
    e6de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6e0:	f7f2 fa78 	bl	bd4 <Sys_GetCoreID>
    e6e4:	4603      	mov	r3, r0
    e6e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e6e8:	4a10      	ldr	r2, [pc, #64]	; (e72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e6ea:	9b01      	ldr	r3, [sp, #4]
    e6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6f0:	2b00      	cmp	r3, #0
    e6f2:	d10d      	bne.n	e710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6f4:	f7f2 f984 	bl	a00 <Adc_schm_read_msr>
    e6f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6fa:	9b00      	ldr	r3, [sp, #0]
    e6fc:	f003 0301 	and.w	r3, r3, #1
    e700:	2b00      	cmp	r3, #0
    e702:	d100      	bne.n	e706 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e706:	490a      	ldr	r1, [pc, #40]	; (e730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	9a00      	ldr	r2, [sp, #0]
    e70c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e710:	4a06      	ldr	r2, [pc, #24]	; (e72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e712:	9b01      	ldr	r3, [sp, #4]
    e714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e718:	1c5a      	adds	r2, r3, #1
    e71a:	4904      	ldr	r1, [pc, #16]	; (e72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e71c:	9b01      	ldr	r3, [sp, #4]
    e71e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e722:	bf00      	nop
    e724:	b003      	add	sp, #12
    e726:	f85d fb04 	ldr.w	pc, [sp], #4
    e72a:	bf00      	nop
    e72c:	1fff9068 	.word	0x1fff9068
    e730:	1fff9064 	.word	0x1fff9064

0000e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e734:	b500      	push	{lr}
    e736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e738:	f7f2 fa4c 	bl	bd4 <Sys_GetCoreID>
    e73c:	4603      	mov	r3, r0
    e73e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e740:	4a0d      	ldr	r2, [pc, #52]	; (e778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e748:	1e5a      	subs	r2, r3, #1
    e74a:	490b      	ldr	r1, [pc, #44]	; (e778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e74c:	9b01      	ldr	r3, [sp, #4]
    e74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e752:	4a0a      	ldr	r2, [pc, #40]	; (e77c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e754:	9b01      	ldr	r3, [sp, #4]
    e756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e75a:	f003 0301 	and.w	r3, r3, #1
    e75e:	2b00      	cmp	r3, #0
    e760:	d106      	bne.n	e770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e762:	4a05      	ldr	r2, [pc, #20]	; (e778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e764:	9b01      	ldr	r3, [sp, #4]
    e766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e76a:	2b00      	cmp	r3, #0
    e76c:	d100      	bne.n	e770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e76e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e770:	bf00      	nop
    e772:	b003      	add	sp, #12
    e774:	f85d fb04 	ldr.w	pc, [sp], #4
    e778:	1fff9068 	.word	0x1fff9068
    e77c:	1fff9064 	.word	0x1fff9064

0000e780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e780:	b500      	push	{lr}
    e782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e784:	f7f2 fa26 	bl	bd4 <Sys_GetCoreID>
    e788:	4603      	mov	r3, r0
    e78a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e78c:	4a10      	ldr	r2, [pc, #64]	; (e7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e78e:	9b01      	ldr	r3, [sp, #4]
    e790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e794:	2b00      	cmp	r3, #0
    e796:	d10d      	bne.n	e7b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e798:	f7f2 f932 	bl	a00 <Adc_schm_read_msr>
    e79c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e79e:	9b00      	ldr	r3, [sp, #0]
    e7a0:	f003 0301 	and.w	r3, r3, #1
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d100      	bne.n	e7aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e7aa:	490a      	ldr	r1, [pc, #40]	; (e7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e7ac:	9b01      	ldr	r3, [sp, #4]
    e7ae:	9a00      	ldr	r2, [sp, #0]
    e7b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e7b4:	4a06      	ldr	r2, [pc, #24]	; (e7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e7b6:	9b01      	ldr	r3, [sp, #4]
    e7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7bc:	1c5a      	adds	r2, r3, #1
    e7be:	4904      	ldr	r1, [pc, #16]	; (e7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e7c0:	9b01      	ldr	r3, [sp, #4]
    e7c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7c6:	bf00      	nop
    e7c8:	b003      	add	sp, #12
    e7ca:	f85d fb04 	ldr.w	pc, [sp], #4
    e7ce:	bf00      	nop
    e7d0:	1fff9070 	.word	0x1fff9070
    e7d4:	1fff906c 	.word	0x1fff906c

0000e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e7d8:	b500      	push	{lr}
    e7da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7dc:	f7f2 f9fa 	bl	bd4 <Sys_GetCoreID>
    e7e0:	4603      	mov	r3, r0
    e7e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e7e4:	4a0d      	ldr	r2, [pc, #52]	; (e81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e7e6:	9b01      	ldr	r3, [sp, #4]
    e7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ec:	1e5a      	subs	r2, r3, #1
    e7ee:	490b      	ldr	r1, [pc, #44]	; (e81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e7f0:	9b01      	ldr	r3, [sp, #4]
    e7f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e7f6:	4a0a      	ldr	r2, [pc, #40]	; (e820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e7f8:	9b01      	ldr	r3, [sp, #4]
    e7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7fe:	f003 0301 	and.w	r3, r3, #1
    e802:	2b00      	cmp	r3, #0
    e804:	d106      	bne.n	e814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e806:	4a05      	ldr	r2, [pc, #20]	; (e81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e808:	9b01      	ldr	r3, [sp, #4]
    e80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e80e:	2b00      	cmp	r3, #0
    e810:	d100      	bne.n	e814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e814:	bf00      	nop
    e816:	b003      	add	sp, #12
    e818:	f85d fb04 	ldr.w	pc, [sp], #4
    e81c:	1fff9070 	.word	0x1fff9070
    e820:	1fff906c 	.word	0x1fff906c

0000e824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e824:	b500      	push	{lr}
    e826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e828:	f7f2 f9d4 	bl	bd4 <Sys_GetCoreID>
    e82c:	4603      	mov	r3, r0
    e82e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e830:	4a10      	ldr	r2, [pc, #64]	; (e874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e832:	9b01      	ldr	r3, [sp, #4]
    e834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e838:	2b00      	cmp	r3, #0
    e83a:	d10d      	bne.n	e858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e83c:	f7f2 f8e0 	bl	a00 <Adc_schm_read_msr>
    e840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e842:	9b00      	ldr	r3, [sp, #0]
    e844:	f003 0301 	and.w	r3, r3, #1
    e848:	2b00      	cmp	r3, #0
    e84a:	d100      	bne.n	e84e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e84c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e84e:	490a      	ldr	r1, [pc, #40]	; (e878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e850:	9b01      	ldr	r3, [sp, #4]
    e852:	9a00      	ldr	r2, [sp, #0]
    e854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e858:	4a06      	ldr	r2, [pc, #24]	; (e874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e85a:	9b01      	ldr	r3, [sp, #4]
    e85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e860:	1c5a      	adds	r2, r3, #1
    e862:	4904      	ldr	r1, [pc, #16]	; (e874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e864:	9b01      	ldr	r3, [sp, #4]
    e866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e86a:	bf00      	nop
    e86c:	b003      	add	sp, #12
    e86e:	f85d fb04 	ldr.w	pc, [sp], #4
    e872:	bf00      	nop
    e874:	1fff9078 	.word	0x1fff9078
    e878:	1fff9074 	.word	0x1fff9074

0000e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e87c:	b500      	push	{lr}
    e87e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e880:	f7f2 f9a8 	bl	bd4 <Sys_GetCoreID>
    e884:	4603      	mov	r3, r0
    e886:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e888:	4a0d      	ldr	r2, [pc, #52]	; (e8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e88a:	9b01      	ldr	r3, [sp, #4]
    e88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e890:	1e5a      	subs	r2, r3, #1
    e892:	490b      	ldr	r1, [pc, #44]	; (e8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e894:	9b01      	ldr	r3, [sp, #4]
    e896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e89a:	4a0a      	ldr	r2, [pc, #40]	; (e8c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e89c:	9b01      	ldr	r3, [sp, #4]
    e89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a2:	f003 0301 	and.w	r3, r3, #1
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	d106      	bne.n	e8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e8aa:	4a05      	ldr	r2, [pc, #20]	; (e8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e8ac:	9b01      	ldr	r3, [sp, #4]
    e8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	d100      	bne.n	e8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8b8:	bf00      	nop
    e8ba:	b003      	add	sp, #12
    e8bc:	f85d fb04 	ldr.w	pc, [sp], #4
    e8c0:	1fff9078 	.word	0x1fff9078
    e8c4:	1fff9074 	.word	0x1fff9074

0000e8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e8c8:	b500      	push	{lr}
    e8ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8cc:	f7f2 f982 	bl	bd4 <Sys_GetCoreID>
    e8d0:	4603      	mov	r3, r0
    e8d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e8d4:	4a10      	ldr	r2, [pc, #64]	; (e918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e8d6:	9b01      	ldr	r3, [sp, #4]
    e8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8dc:	2b00      	cmp	r3, #0
    e8de:	d10d      	bne.n	e8fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8e0:	f7f2 f88e 	bl	a00 <Adc_schm_read_msr>
    e8e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8e6:	9b00      	ldr	r3, [sp, #0]
    e8e8:	f003 0301 	and.w	r3, r3, #1
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d100      	bne.n	e8f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e8f2:	490a      	ldr	r1, [pc, #40]	; (e91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e8f4:	9b01      	ldr	r3, [sp, #4]
    e8f6:	9a00      	ldr	r2, [sp, #0]
    e8f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e8fc:	4a06      	ldr	r2, [pc, #24]	; (e918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e8fe:	9b01      	ldr	r3, [sp, #4]
    e900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e904:	1c5a      	adds	r2, r3, #1
    e906:	4904      	ldr	r1, [pc, #16]	; (e918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e908:	9b01      	ldr	r3, [sp, #4]
    e90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e90e:	bf00      	nop
    e910:	b003      	add	sp, #12
    e912:	f85d fb04 	ldr.w	pc, [sp], #4
    e916:	bf00      	nop
    e918:	1fff9080 	.word	0x1fff9080
    e91c:	1fff907c 	.word	0x1fff907c

0000e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e920:	b500      	push	{lr}
    e922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e924:	f7f2 f956 	bl	bd4 <Sys_GetCoreID>
    e928:	4603      	mov	r3, r0
    e92a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e92c:	4a0d      	ldr	r2, [pc, #52]	; (e964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e92e:	9b01      	ldr	r3, [sp, #4]
    e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e934:	1e5a      	subs	r2, r3, #1
    e936:	490b      	ldr	r1, [pc, #44]	; (e964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e938:	9b01      	ldr	r3, [sp, #4]
    e93a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e93e:	4a0a      	ldr	r2, [pc, #40]	; (e968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e940:	9b01      	ldr	r3, [sp, #4]
    e942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e946:	f003 0301 	and.w	r3, r3, #1
    e94a:	2b00      	cmp	r3, #0
    e94c:	d106      	bne.n	e95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e94e:	4a05      	ldr	r2, [pc, #20]	; (e964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e950:	9b01      	ldr	r3, [sp, #4]
    e952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e956:	2b00      	cmp	r3, #0
    e958:	d100      	bne.n	e95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e95a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e95c:	bf00      	nop
    e95e:	b003      	add	sp, #12
    e960:	f85d fb04 	ldr.w	pc, [sp], #4
    e964:	1fff9080 	.word	0x1fff9080
    e968:	1fff907c 	.word	0x1fff907c

0000e96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e96c:	b500      	push	{lr}
    e96e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e970:	f7f2 f930 	bl	bd4 <Sys_GetCoreID>
    e974:	4603      	mov	r3, r0
    e976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e978:	4a10      	ldr	r2, [pc, #64]	; (e9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e97a:	9b01      	ldr	r3, [sp, #4]
    e97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e980:	2b00      	cmp	r3, #0
    e982:	d10d      	bne.n	e9a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e984:	f7f2 f83c 	bl	a00 <Adc_schm_read_msr>
    e988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e98a:	9b00      	ldr	r3, [sp, #0]
    e98c:	f003 0301 	and.w	r3, r3, #1
    e990:	2b00      	cmp	r3, #0
    e992:	d100      	bne.n	e996 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e996:	490a      	ldr	r1, [pc, #40]	; (e9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	9a00      	ldr	r2, [sp, #0]
    e99c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e9a0:	4a06      	ldr	r2, [pc, #24]	; (e9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e9a2:	9b01      	ldr	r3, [sp, #4]
    e9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a8:	1c5a      	adds	r2, r3, #1
    e9aa:	4904      	ldr	r1, [pc, #16]	; (e9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e9ac:	9b01      	ldr	r3, [sp, #4]
    e9ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9b2:	bf00      	nop
    e9b4:	b003      	add	sp, #12
    e9b6:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ba:	bf00      	nop
    e9bc:	1fff9088 	.word	0x1fff9088
    e9c0:	1fff9084 	.word	0x1fff9084

0000e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e9c4:	b500      	push	{lr}
    e9c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9c8:	f7f2 f904 	bl	bd4 <Sys_GetCoreID>
    e9cc:	4603      	mov	r3, r0
    e9ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e9d0:	4a0d      	ldr	r2, [pc, #52]	; (ea08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e9d2:	9b01      	ldr	r3, [sp, #4]
    e9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9d8:	1e5a      	subs	r2, r3, #1
    e9da:	490b      	ldr	r1, [pc, #44]	; (ea08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e9dc:	9b01      	ldr	r3, [sp, #4]
    e9de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e9e2:	4a0a      	ldr	r2, [pc, #40]	; (ea0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e9e4:	9b01      	ldr	r3, [sp, #4]
    e9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ea:	f003 0301 	and.w	r3, r3, #1
    e9ee:	2b00      	cmp	r3, #0
    e9f0:	d106      	bne.n	ea00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e9f2:	4a05      	ldr	r2, [pc, #20]	; (ea08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d100      	bne.n	ea00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea00:	bf00      	nop
    ea02:	b003      	add	sp, #12
    ea04:	f85d fb04 	ldr.w	pc, [sp], #4
    ea08:	1fff9088 	.word	0x1fff9088
    ea0c:	1fff9084 	.word	0x1fff9084

0000ea10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    ea10:	b500      	push	{lr}
    ea12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea14:	f7f2 f8de 	bl	bd4 <Sys_GetCoreID>
    ea18:	4603      	mov	r3, r0
    ea1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    ea1c:	4a10      	ldr	r2, [pc, #64]	; (ea60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    ea1e:	9b01      	ldr	r3, [sp, #4]
    ea20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea24:	2b00      	cmp	r3, #0
    ea26:	d10d      	bne.n	ea44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea28:	f7f1 ffea 	bl	a00 <Adc_schm_read_msr>
    ea2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea2e:	9b00      	ldr	r3, [sp, #0]
    ea30:	f003 0301 	and.w	r3, r3, #1
    ea34:	2b00      	cmp	r3, #0
    ea36:	d100      	bne.n	ea3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    ea3a:	490a      	ldr	r1, [pc, #40]	; (ea64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	9a00      	ldr	r2, [sp, #0]
    ea40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    ea44:	4a06      	ldr	r2, [pc, #24]	; (ea60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    ea46:	9b01      	ldr	r3, [sp, #4]
    ea48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea4c:	1c5a      	adds	r2, r3, #1
    ea4e:	4904      	ldr	r1, [pc, #16]	; (ea60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    ea50:	9b01      	ldr	r3, [sp, #4]
    ea52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea56:	bf00      	nop
    ea58:	b003      	add	sp, #12
    ea5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea5e:	bf00      	nop
    ea60:	1fff9090 	.word	0x1fff9090
    ea64:	1fff908c 	.word	0x1fff908c

0000ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    ea68:	b500      	push	{lr}
    ea6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea6c:	f7f2 f8b2 	bl	bd4 <Sys_GetCoreID>
    ea70:	4603      	mov	r3, r0
    ea72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    ea74:	4a0d      	ldr	r2, [pc, #52]	; (eaac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    ea76:	9b01      	ldr	r3, [sp, #4]
    ea78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea7c:	1e5a      	subs	r2, r3, #1
    ea7e:	490b      	ldr	r1, [pc, #44]	; (eaac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    ea80:	9b01      	ldr	r3, [sp, #4]
    ea82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    ea86:	4a0a      	ldr	r2, [pc, #40]	; (eab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    ea88:	9b01      	ldr	r3, [sp, #4]
    ea8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea8e:	f003 0301 	and.w	r3, r3, #1
    ea92:	2b00      	cmp	r3, #0
    ea94:	d106      	bne.n	eaa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    ea96:	4a05      	ldr	r2, [pc, #20]	; (eaac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    ea98:	9b01      	ldr	r3, [sp, #4]
    ea9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea9e:	2b00      	cmp	r3, #0
    eaa0:	d100      	bne.n	eaa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eaa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eaa4:	bf00      	nop
    eaa6:	b003      	add	sp, #12
    eaa8:	f85d fb04 	ldr.w	pc, [sp], #4
    eaac:	1fff9090 	.word	0x1fff9090
    eab0:	1fff908c 	.word	0x1fff908c

0000eab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    eab4:	b500      	push	{lr}
    eab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eab8:	f7f2 f88c 	bl	bd4 <Sys_GetCoreID>
    eabc:	4603      	mov	r3, r0
    eabe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    eac0:	4a10      	ldr	r2, [pc, #64]	; (eb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    eac2:	9b01      	ldr	r3, [sp, #4]
    eac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eac8:	2b00      	cmp	r3, #0
    eaca:	d10d      	bne.n	eae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eacc:	f7f1 ff98 	bl	a00 <Adc_schm_read_msr>
    ead0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ead2:	9b00      	ldr	r3, [sp, #0]
    ead4:	f003 0301 	and.w	r3, r3, #1
    ead8:	2b00      	cmp	r3, #0
    eada:	d100      	bne.n	eade <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eadc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    eade:	490a      	ldr	r1, [pc, #40]	; (eb08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	9a00      	ldr	r2, [sp, #0]
    eae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    eae8:	4a06      	ldr	r2, [pc, #24]	; (eb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    eaea:	9b01      	ldr	r3, [sp, #4]
    eaec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaf0:	1c5a      	adds	r2, r3, #1
    eaf2:	4904      	ldr	r1, [pc, #16]	; (eb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    eaf4:	9b01      	ldr	r3, [sp, #4]
    eaf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eafa:	bf00      	nop
    eafc:	b003      	add	sp, #12
    eafe:	f85d fb04 	ldr.w	pc, [sp], #4
    eb02:	bf00      	nop
    eb04:	1fff9098 	.word	0x1fff9098
    eb08:	1fff9094 	.word	0x1fff9094

0000eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    eb0c:	b500      	push	{lr}
    eb0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb10:	f7f2 f860 	bl	bd4 <Sys_GetCoreID>
    eb14:	4603      	mov	r3, r0
    eb16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    eb18:	4a0d      	ldr	r2, [pc, #52]	; (eb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    eb1a:	9b01      	ldr	r3, [sp, #4]
    eb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb20:	1e5a      	subs	r2, r3, #1
    eb22:	490b      	ldr	r1, [pc, #44]	; (eb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    eb24:	9b01      	ldr	r3, [sp, #4]
    eb26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    eb2a:	4a0a      	ldr	r2, [pc, #40]	; (eb54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    eb2c:	9b01      	ldr	r3, [sp, #4]
    eb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb32:	f003 0301 	and.w	r3, r3, #1
    eb36:	2b00      	cmp	r3, #0
    eb38:	d106      	bne.n	eb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    eb3a:	4a05      	ldr	r2, [pc, #20]	; (eb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    eb3c:	9b01      	ldr	r3, [sp, #4]
    eb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb42:	2b00      	cmp	r3, #0
    eb44:	d100      	bne.n	eb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb48:	bf00      	nop
    eb4a:	b003      	add	sp, #12
    eb4c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb50:	1fff9098 	.word	0x1fff9098
    eb54:	1fff9094 	.word	0x1fff9094

0000eb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    eb58:	b500      	push	{lr}
    eb5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb5c:	f7f2 f83a 	bl	bd4 <Sys_GetCoreID>
    eb60:	4603      	mov	r3, r0
    eb62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    eb64:	4a10      	ldr	r2, [pc, #64]	; (eba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    eb66:	9b01      	ldr	r3, [sp, #4]
    eb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb6c:	2b00      	cmp	r3, #0
    eb6e:	d10d      	bne.n	eb8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb70:	f7f1 ff46 	bl	a00 <Adc_schm_read_msr>
    eb74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb76:	9b00      	ldr	r3, [sp, #0]
    eb78:	f003 0301 	and.w	r3, r3, #1
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d100      	bne.n	eb82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    eb82:	490a      	ldr	r1, [pc, #40]	; (ebac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	9a00      	ldr	r2, [sp, #0]
    eb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    eb8c:	4a06      	ldr	r2, [pc, #24]	; (eba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    eb8e:	9b01      	ldr	r3, [sp, #4]
    eb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb94:	1c5a      	adds	r2, r3, #1
    eb96:	4904      	ldr	r1, [pc, #16]	; (eba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    eb98:	9b01      	ldr	r3, [sp, #4]
    eb9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb9e:	bf00      	nop
    eba0:	b003      	add	sp, #12
    eba2:	f85d fb04 	ldr.w	pc, [sp], #4
    eba6:	bf00      	nop
    eba8:	1fff90a0 	.word	0x1fff90a0
    ebac:	1fff909c 	.word	0x1fff909c

0000ebb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    ebb0:	b500      	push	{lr}
    ebb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebb4:	f7f2 f80e 	bl	bd4 <Sys_GetCoreID>
    ebb8:	4603      	mov	r3, r0
    ebba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    ebbc:	4a0d      	ldr	r2, [pc, #52]	; (ebf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    ebbe:	9b01      	ldr	r3, [sp, #4]
    ebc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebc4:	1e5a      	subs	r2, r3, #1
    ebc6:	490b      	ldr	r1, [pc, #44]	; (ebf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    ebc8:	9b01      	ldr	r3, [sp, #4]
    ebca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    ebce:	4a0a      	ldr	r2, [pc, #40]	; (ebf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    ebd0:	9b01      	ldr	r3, [sp, #4]
    ebd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebd6:	f003 0301 	and.w	r3, r3, #1
    ebda:	2b00      	cmp	r3, #0
    ebdc:	d106      	bne.n	ebec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    ebde:	4a05      	ldr	r2, [pc, #20]	; (ebf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    ebe0:	9b01      	ldr	r3, [sp, #4]
    ebe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe6:	2b00      	cmp	r3, #0
    ebe8:	d100      	bne.n	ebec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ebea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ebec:	bf00      	nop
    ebee:	b003      	add	sp, #12
    ebf0:	f85d fb04 	ldr.w	pc, [sp], #4
    ebf4:	1fff90a0 	.word	0x1fff90a0
    ebf8:	1fff909c 	.word	0x1fff909c

0000ebfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    ebfc:	b500      	push	{lr}
    ebfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec00:	f7f1 ffe8 	bl	bd4 <Sys_GetCoreID>
    ec04:	4603      	mov	r3, r0
    ec06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    ec08:	4a10      	ldr	r2, [pc, #64]	; (ec4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    ec0a:	9b01      	ldr	r3, [sp, #4]
    ec0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec10:	2b00      	cmp	r3, #0
    ec12:	d10d      	bne.n	ec30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec14:	f7f1 fef4 	bl	a00 <Adc_schm_read_msr>
    ec18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec1a:	9b00      	ldr	r3, [sp, #0]
    ec1c:	f003 0301 	and.w	r3, r3, #1
    ec20:	2b00      	cmp	r3, #0
    ec22:	d100      	bne.n	ec26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    ec26:	490a      	ldr	r1, [pc, #40]	; (ec50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    ec28:	9b01      	ldr	r3, [sp, #4]
    ec2a:	9a00      	ldr	r2, [sp, #0]
    ec2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    ec30:	4a06      	ldr	r2, [pc, #24]	; (ec4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    ec32:	9b01      	ldr	r3, [sp, #4]
    ec34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec38:	1c5a      	adds	r2, r3, #1
    ec3a:	4904      	ldr	r1, [pc, #16]	; (ec4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    ec3c:	9b01      	ldr	r3, [sp, #4]
    ec3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec42:	bf00      	nop
    ec44:	b003      	add	sp, #12
    ec46:	f85d fb04 	ldr.w	pc, [sp], #4
    ec4a:	bf00      	nop
    ec4c:	1fff90a8 	.word	0x1fff90a8
    ec50:	1fff90a4 	.word	0x1fff90a4

0000ec54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    ec54:	b500      	push	{lr}
    ec56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec58:	f7f1 ffbc 	bl	bd4 <Sys_GetCoreID>
    ec5c:	4603      	mov	r3, r0
    ec5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    ec60:	4a0d      	ldr	r2, [pc, #52]	; (ec98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    ec62:	9b01      	ldr	r3, [sp, #4]
    ec64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec68:	1e5a      	subs	r2, r3, #1
    ec6a:	490b      	ldr	r1, [pc, #44]	; (ec98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    ec6c:	9b01      	ldr	r3, [sp, #4]
    ec6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    ec72:	4a0a      	ldr	r2, [pc, #40]	; (ec9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    ec74:	9b01      	ldr	r3, [sp, #4]
    ec76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec7a:	f003 0301 	and.w	r3, r3, #1
    ec7e:	2b00      	cmp	r3, #0
    ec80:	d106      	bne.n	ec90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    ec82:	4a05      	ldr	r2, [pc, #20]	; (ec98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    ec84:	9b01      	ldr	r3, [sp, #4]
    ec86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec8a:	2b00      	cmp	r3, #0
    ec8c:	d100      	bne.n	ec90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec90:	bf00      	nop
    ec92:	b003      	add	sp, #12
    ec94:	f85d fb04 	ldr.w	pc, [sp], #4
    ec98:	1fff90a8 	.word	0x1fff90a8
    ec9c:	1fff90a4 	.word	0x1fff90a4

0000eca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    eca0:	b500      	push	{lr}
    eca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eca4:	f7f1 ff96 	bl	bd4 <Sys_GetCoreID>
    eca8:	4603      	mov	r3, r0
    ecaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    ecac:	4a10      	ldr	r2, [pc, #64]	; (ecf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    ecae:	9b01      	ldr	r3, [sp, #4]
    ecb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d10d      	bne.n	ecd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecb8:	f7f1 fea2 	bl	a00 <Adc_schm_read_msr>
    ecbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ecbe:	9b00      	ldr	r3, [sp, #0]
    ecc0:	f003 0301 	and.w	r3, r3, #1
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d100      	bne.n	ecca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ecc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    ecca:	490a      	ldr	r1, [pc, #40]	; (ecf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	9a00      	ldr	r2, [sp, #0]
    ecd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    ecd4:	4a06      	ldr	r2, [pc, #24]	; (ecf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    ecd6:	9b01      	ldr	r3, [sp, #4]
    ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecdc:	1c5a      	adds	r2, r3, #1
    ecde:	4904      	ldr	r1, [pc, #16]	; (ecf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    ece0:	9b01      	ldr	r3, [sp, #4]
    ece2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ece6:	bf00      	nop
    ece8:	b003      	add	sp, #12
    ecea:	f85d fb04 	ldr.w	pc, [sp], #4
    ecee:	bf00      	nop
    ecf0:	1fff90b0 	.word	0x1fff90b0
    ecf4:	1fff90ac 	.word	0x1fff90ac

0000ecf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    ecf8:	b500      	push	{lr}
    ecfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecfc:	f7f1 ff6a 	bl	bd4 <Sys_GetCoreID>
    ed00:	4603      	mov	r3, r0
    ed02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    ed04:	4a0d      	ldr	r2, [pc, #52]	; (ed3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    ed06:	9b01      	ldr	r3, [sp, #4]
    ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed0c:	1e5a      	subs	r2, r3, #1
    ed0e:	490b      	ldr	r1, [pc, #44]	; (ed3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    ed10:	9b01      	ldr	r3, [sp, #4]
    ed12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    ed16:	4a0a      	ldr	r2, [pc, #40]	; (ed40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    ed18:	9b01      	ldr	r3, [sp, #4]
    ed1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed1e:	f003 0301 	and.w	r3, r3, #1
    ed22:	2b00      	cmp	r3, #0
    ed24:	d106      	bne.n	ed34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    ed26:	4a05      	ldr	r2, [pc, #20]	; (ed3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    ed28:	9b01      	ldr	r3, [sp, #4]
    ed2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed2e:	2b00      	cmp	r3, #0
    ed30:	d100      	bne.n	ed34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed34:	bf00      	nop
    ed36:	b003      	add	sp, #12
    ed38:	f85d fb04 	ldr.w	pc, [sp], #4
    ed3c:	1fff90b0 	.word	0x1fff90b0
    ed40:	1fff90ac 	.word	0x1fff90ac

0000ed44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    ed44:	b500      	push	{lr}
    ed46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed48:	f7f1 ff44 	bl	bd4 <Sys_GetCoreID>
    ed4c:	4603      	mov	r3, r0
    ed4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    ed50:	4a10      	ldr	r2, [pc, #64]	; (ed94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    ed52:	9b01      	ldr	r3, [sp, #4]
    ed54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed58:	2b00      	cmp	r3, #0
    ed5a:	d10d      	bne.n	ed78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed5c:	f7f1 fe50 	bl	a00 <Adc_schm_read_msr>
    ed60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed62:	9b00      	ldr	r3, [sp, #0]
    ed64:	f003 0301 	and.w	r3, r3, #1
    ed68:	2b00      	cmp	r3, #0
    ed6a:	d100      	bne.n	ed6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    ed6e:	490a      	ldr	r1, [pc, #40]	; (ed98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	9a00      	ldr	r2, [sp, #0]
    ed74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    ed78:	4a06      	ldr	r2, [pc, #24]	; (ed94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    ed7a:	9b01      	ldr	r3, [sp, #4]
    ed7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed80:	1c5a      	adds	r2, r3, #1
    ed82:	4904      	ldr	r1, [pc, #16]	; (ed94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    ed84:	9b01      	ldr	r3, [sp, #4]
    ed86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed8a:	bf00      	nop
    ed8c:	b003      	add	sp, #12
    ed8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed92:	bf00      	nop
    ed94:	1fff90b8 	.word	0x1fff90b8
    ed98:	1fff90b4 	.word	0x1fff90b4

0000ed9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    ed9c:	b500      	push	{lr}
    ed9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eda0:	f7f1 ff18 	bl	bd4 <Sys_GetCoreID>
    eda4:	4603      	mov	r3, r0
    eda6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    eda8:	4a0d      	ldr	r2, [pc, #52]	; (ede0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    edaa:	9b01      	ldr	r3, [sp, #4]
    edac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb0:	1e5a      	subs	r2, r3, #1
    edb2:	490b      	ldr	r1, [pc, #44]	; (ede0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    edb4:	9b01      	ldr	r3, [sp, #4]
    edb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    edba:	4a0a      	ldr	r2, [pc, #40]	; (ede4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    edbc:	9b01      	ldr	r3, [sp, #4]
    edbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edc2:	f003 0301 	and.w	r3, r3, #1
    edc6:	2b00      	cmp	r3, #0
    edc8:	d106      	bne.n	edd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    edca:	4a05      	ldr	r2, [pc, #20]	; (ede0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    edcc:	9b01      	ldr	r3, [sp, #4]
    edce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd2:	2b00      	cmp	r3, #0
    edd4:	d100      	bne.n	edd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    edd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    edd8:	bf00      	nop
    edda:	b003      	add	sp, #12
    eddc:	f85d fb04 	ldr.w	pc, [sp], #4
    ede0:	1fff90b8 	.word	0x1fff90b8
    ede4:	1fff90b4 	.word	0x1fff90b4

0000ede8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    ede8:	b500      	push	{lr}
    edea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edec:	f7f1 fef2 	bl	bd4 <Sys_GetCoreID>
    edf0:	4603      	mov	r3, r0
    edf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    edf4:	4a10      	ldr	r2, [pc, #64]	; (ee38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    edf6:	9b01      	ldr	r3, [sp, #4]
    edf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edfc:	2b00      	cmp	r3, #0
    edfe:	d10d      	bne.n	ee1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee00:	f7f1 fdfe 	bl	a00 <Adc_schm_read_msr>
    ee04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee06:	9b00      	ldr	r3, [sp, #0]
    ee08:	f003 0301 	and.w	r3, r3, #1
    ee0c:	2b00      	cmp	r3, #0
    ee0e:	d100      	bne.n	ee12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    ee12:	490a      	ldr	r1, [pc, #40]	; (ee3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    ee14:	9b01      	ldr	r3, [sp, #4]
    ee16:	9a00      	ldr	r2, [sp, #0]
    ee18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    ee1c:	4a06      	ldr	r2, [pc, #24]	; (ee38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    ee1e:	9b01      	ldr	r3, [sp, #4]
    ee20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee24:	1c5a      	adds	r2, r3, #1
    ee26:	4904      	ldr	r1, [pc, #16]	; (ee38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    ee28:	9b01      	ldr	r3, [sp, #4]
    ee2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee2e:	bf00      	nop
    ee30:	b003      	add	sp, #12
    ee32:	f85d fb04 	ldr.w	pc, [sp], #4
    ee36:	bf00      	nop
    ee38:	1fff90c0 	.word	0x1fff90c0
    ee3c:	1fff90bc 	.word	0x1fff90bc

0000ee40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    ee40:	b500      	push	{lr}
    ee42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee44:	f7f1 fec6 	bl	bd4 <Sys_GetCoreID>
    ee48:	4603      	mov	r3, r0
    ee4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    ee4c:	4a0d      	ldr	r2, [pc, #52]	; (ee84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    ee4e:	9b01      	ldr	r3, [sp, #4]
    ee50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee54:	1e5a      	subs	r2, r3, #1
    ee56:	490b      	ldr	r1, [pc, #44]	; (ee84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    ee58:	9b01      	ldr	r3, [sp, #4]
    ee5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    ee5e:	4a0a      	ldr	r2, [pc, #40]	; (ee88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    ee60:	9b01      	ldr	r3, [sp, #4]
    ee62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee66:	f003 0301 	and.w	r3, r3, #1
    ee6a:	2b00      	cmp	r3, #0
    ee6c:	d106      	bne.n	ee7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    ee6e:	4a05      	ldr	r2, [pc, #20]	; (ee84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    ee70:	9b01      	ldr	r3, [sp, #4]
    ee72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee76:	2b00      	cmp	r3, #0
    ee78:	d100      	bne.n	ee7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee7c:	bf00      	nop
    ee7e:	b003      	add	sp, #12
    ee80:	f85d fb04 	ldr.w	pc, [sp], #4
    ee84:	1fff90c0 	.word	0x1fff90c0
    ee88:	1fff90bc 	.word	0x1fff90bc

0000ee8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    ee8c:	b500      	push	{lr}
    ee8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee90:	f7f1 fea0 	bl	bd4 <Sys_GetCoreID>
    ee94:	4603      	mov	r3, r0
    ee96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    ee98:	4a10      	ldr	r2, [pc, #64]	; (eedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    ee9a:	9b01      	ldr	r3, [sp, #4]
    ee9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eea0:	2b00      	cmp	r3, #0
    eea2:	d10d      	bne.n	eec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eea4:	f7f1 fdac 	bl	a00 <Adc_schm_read_msr>
    eea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eeaa:	9b00      	ldr	r3, [sp, #0]
    eeac:	f003 0301 	and.w	r3, r3, #1
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d100      	bne.n	eeb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eeb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    eeb6:	490a      	ldr	r1, [pc, #40]	; (eee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    eeb8:	9b01      	ldr	r3, [sp, #4]
    eeba:	9a00      	ldr	r2, [sp, #0]
    eebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    eec0:	4a06      	ldr	r2, [pc, #24]	; (eedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    eec2:	9b01      	ldr	r3, [sp, #4]
    eec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec8:	1c5a      	adds	r2, r3, #1
    eeca:	4904      	ldr	r1, [pc, #16]	; (eedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    eecc:	9b01      	ldr	r3, [sp, #4]
    eece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eed2:	bf00      	nop
    eed4:	b003      	add	sp, #12
    eed6:	f85d fb04 	ldr.w	pc, [sp], #4
    eeda:	bf00      	nop
    eedc:	1fff90c8 	.word	0x1fff90c8
    eee0:	1fff90c4 	.word	0x1fff90c4

0000eee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    eee4:	b500      	push	{lr}
    eee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eee8:	f7f1 fe74 	bl	bd4 <Sys_GetCoreID>
    eeec:	4603      	mov	r3, r0
    eeee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    eef0:	4a0d      	ldr	r2, [pc, #52]	; (ef28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eef2:	9b01      	ldr	r3, [sp, #4]
    eef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eef8:	1e5a      	subs	r2, r3, #1
    eefa:	490b      	ldr	r1, [pc, #44]	; (ef28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    eefc:	9b01      	ldr	r3, [sp, #4]
    eefe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    ef02:	4a0a      	ldr	r2, [pc, #40]	; (ef2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    ef04:	9b01      	ldr	r3, [sp, #4]
    ef06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef0a:	f003 0301 	and.w	r3, r3, #1
    ef0e:	2b00      	cmp	r3, #0
    ef10:	d106      	bne.n	ef20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    ef12:	4a05      	ldr	r2, [pc, #20]	; (ef28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    ef14:	9b01      	ldr	r3, [sp, #4]
    ef16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	d100      	bne.n	ef20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef20:	bf00      	nop
    ef22:	b003      	add	sp, #12
    ef24:	f85d fb04 	ldr.w	pc, [sp], #4
    ef28:	1fff90c8 	.word	0x1fff90c8
    ef2c:	1fff90c4 	.word	0x1fff90c4

0000ef30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ef30:	b500      	push	{lr}
    ef32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef34:	f7f1 fe4e 	bl	bd4 <Sys_GetCoreID>
    ef38:	4603      	mov	r3, r0
    ef3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    ef3c:	4a10      	ldr	r2, [pc, #64]	; (ef80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ef3e:	9b01      	ldr	r3, [sp, #4]
    ef40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef44:	2b00      	cmp	r3, #0
    ef46:	d10d      	bne.n	ef64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef48:	f7f1 fd5a 	bl	a00 <Adc_schm_read_msr>
    ef4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef4e:	9b00      	ldr	r3, [sp, #0]
    ef50:	f003 0301 	and.w	r3, r3, #1
    ef54:	2b00      	cmp	r3, #0
    ef56:	d100      	bne.n	ef5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    ef5a:	490a      	ldr	r1, [pc, #40]	; (ef84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    ef5c:	9b01      	ldr	r3, [sp, #4]
    ef5e:	9a00      	ldr	r2, [sp, #0]
    ef60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    ef64:	4a06      	ldr	r2, [pc, #24]	; (ef80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ef66:	9b01      	ldr	r3, [sp, #4]
    ef68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef6c:	1c5a      	adds	r2, r3, #1
    ef6e:	4904      	ldr	r1, [pc, #16]	; (ef80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ef70:	9b01      	ldr	r3, [sp, #4]
    ef72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef76:	bf00      	nop
    ef78:	b003      	add	sp, #12
    ef7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef7e:	bf00      	nop
    ef80:	1fff90d0 	.word	0x1fff90d0
    ef84:	1fff90cc 	.word	0x1fff90cc

0000ef88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ef88:	b500      	push	{lr}
    ef8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef8c:	f7f1 fe22 	bl	bd4 <Sys_GetCoreID>
    ef90:	4603      	mov	r3, r0
    ef92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    ef94:	4a0d      	ldr	r2, [pc, #52]	; (efcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ef96:	9b01      	ldr	r3, [sp, #4]
    ef98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef9c:	1e5a      	subs	r2, r3, #1
    ef9e:	490b      	ldr	r1, [pc, #44]	; (efcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    efa0:	9b01      	ldr	r3, [sp, #4]
    efa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    efa6:	4a0a      	ldr	r2, [pc, #40]	; (efd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    efa8:	9b01      	ldr	r3, [sp, #4]
    efaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efae:	f003 0301 	and.w	r3, r3, #1
    efb2:	2b00      	cmp	r3, #0
    efb4:	d106      	bne.n	efc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    efb6:	4a05      	ldr	r2, [pc, #20]	; (efcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    efb8:	9b01      	ldr	r3, [sp, #4]
    efba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efbe:	2b00      	cmp	r3, #0
    efc0:	d100      	bne.n	efc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efc4:	bf00      	nop
    efc6:	b003      	add	sp, #12
    efc8:	f85d fb04 	ldr.w	pc, [sp], #4
    efcc:	1fff90d0 	.word	0x1fff90d0
    efd0:	1fff90cc 	.word	0x1fff90cc

0000efd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    efd4:	b500      	push	{lr}
    efd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efd8:	f7f1 fdfc 	bl	bd4 <Sys_GetCoreID>
    efdc:	4603      	mov	r3, r0
    efde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    efe0:	4a10      	ldr	r2, [pc, #64]	; (f024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    efe2:	9b01      	ldr	r3, [sp, #4]
    efe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efe8:	2b00      	cmp	r3, #0
    efea:	d10d      	bne.n	f008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efec:	f7f1 fd08 	bl	a00 <Adc_schm_read_msr>
    eff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eff2:	9b00      	ldr	r3, [sp, #0]
    eff4:	f003 0301 	and.w	r3, r3, #1
    eff8:	2b00      	cmp	r3, #0
    effa:	d100      	bne.n	effe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    effc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    effe:	490a      	ldr	r1, [pc, #40]	; (f028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	9a00      	ldr	r2, [sp, #0]
    f004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    f008:	4a06      	ldr	r2, [pc, #24]	; (f024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    f00a:	9b01      	ldr	r3, [sp, #4]
    f00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f010:	1c5a      	adds	r2, r3, #1
    f012:	4904      	ldr	r1, [pc, #16]	; (f024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    f014:	9b01      	ldr	r3, [sp, #4]
    f016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f01a:	bf00      	nop
    f01c:	b003      	add	sp, #12
    f01e:	f85d fb04 	ldr.w	pc, [sp], #4
    f022:	bf00      	nop
    f024:	1fff90d8 	.word	0x1fff90d8
    f028:	1fff90d4 	.word	0x1fff90d4

0000f02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    f02c:	b500      	push	{lr}
    f02e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f030:	f7f1 fdd0 	bl	bd4 <Sys_GetCoreID>
    f034:	4603      	mov	r3, r0
    f036:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    f038:	4a0d      	ldr	r2, [pc, #52]	; (f070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    f03a:	9b01      	ldr	r3, [sp, #4]
    f03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f040:	1e5a      	subs	r2, r3, #1
    f042:	490b      	ldr	r1, [pc, #44]	; (f070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    f044:	9b01      	ldr	r3, [sp, #4]
    f046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    f04a:	4a0a      	ldr	r2, [pc, #40]	; (f074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    f04c:	9b01      	ldr	r3, [sp, #4]
    f04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f052:	f003 0301 	and.w	r3, r3, #1
    f056:	2b00      	cmp	r3, #0
    f058:	d106      	bne.n	f068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    f05a:	4a05      	ldr	r2, [pc, #20]	; (f070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    f05c:	9b01      	ldr	r3, [sp, #4]
    f05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f062:	2b00      	cmp	r3, #0
    f064:	d100      	bne.n	f068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f068:	bf00      	nop
    f06a:	b003      	add	sp, #12
    f06c:	f85d fb04 	ldr.w	pc, [sp], #4
    f070:	1fff90d8 	.word	0x1fff90d8
    f074:	1fff90d4 	.word	0x1fff90d4

0000f078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    f078:	b500      	push	{lr}
    f07a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f07c:	f7f1 fdaa 	bl	bd4 <Sys_GetCoreID>
    f080:	4603      	mov	r3, r0
    f082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    f084:	4a10      	ldr	r2, [pc, #64]	; (f0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    f086:	9b01      	ldr	r3, [sp, #4]
    f088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f08c:	2b00      	cmp	r3, #0
    f08e:	d10d      	bne.n	f0ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f090:	f7f1 fcb6 	bl	a00 <Adc_schm_read_msr>
    f094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f096:	9b00      	ldr	r3, [sp, #0]
    f098:	f003 0301 	and.w	r3, r3, #1
    f09c:	2b00      	cmp	r3, #0
    f09e:	d100      	bne.n	f0a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    f0a2:	490a      	ldr	r1, [pc, #40]	; (f0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    f0a4:	9b01      	ldr	r3, [sp, #4]
    f0a6:	9a00      	ldr	r2, [sp, #0]
    f0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    f0ac:	4a06      	ldr	r2, [pc, #24]	; (f0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    f0ae:	9b01      	ldr	r3, [sp, #4]
    f0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b4:	1c5a      	adds	r2, r3, #1
    f0b6:	4904      	ldr	r1, [pc, #16]	; (f0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    f0b8:	9b01      	ldr	r3, [sp, #4]
    f0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0be:	bf00      	nop
    f0c0:	b003      	add	sp, #12
    f0c2:	f85d fb04 	ldr.w	pc, [sp], #4
    f0c6:	bf00      	nop
    f0c8:	1fff90e0 	.word	0x1fff90e0
    f0cc:	1fff90dc 	.word	0x1fff90dc

0000f0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    f0d0:	b500      	push	{lr}
    f0d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0d4:	f7f1 fd7e 	bl	bd4 <Sys_GetCoreID>
    f0d8:	4603      	mov	r3, r0
    f0da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    f0dc:	4a0d      	ldr	r2, [pc, #52]	; (f114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    f0de:	9b01      	ldr	r3, [sp, #4]
    f0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e4:	1e5a      	subs	r2, r3, #1
    f0e6:	490b      	ldr	r1, [pc, #44]	; (f114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    f0e8:	9b01      	ldr	r3, [sp, #4]
    f0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    f0ee:	4a0a      	ldr	r2, [pc, #40]	; (f118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    f0f0:	9b01      	ldr	r3, [sp, #4]
    f0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f6:	f003 0301 	and.w	r3, r3, #1
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	d106      	bne.n	f10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    f0fe:	4a05      	ldr	r2, [pc, #20]	; (f114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    f100:	9b01      	ldr	r3, [sp, #4]
    f102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f106:	2b00      	cmp	r3, #0
    f108:	d100      	bne.n	f10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f10a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f10c:	bf00      	nop
    f10e:	b003      	add	sp, #12
    f110:	f85d fb04 	ldr.w	pc, [sp], #4
    f114:	1fff90e0 	.word	0x1fff90e0
    f118:	1fff90dc 	.word	0x1fff90dc

0000f11c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    f11c:	b500      	push	{lr}
    f11e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f120:	f7f1 fd58 	bl	bd4 <Sys_GetCoreID>
    f124:	4603      	mov	r3, r0
    f126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    f128:	4a10      	ldr	r2, [pc, #64]	; (f16c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    f12a:	9b01      	ldr	r3, [sp, #4]
    f12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f130:	2b00      	cmp	r3, #0
    f132:	d10d      	bne.n	f150 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f134:	f7f1 fc6d 	bl	a12 <Dio_schm_read_msr>
    f138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f13a:	9b00      	ldr	r3, [sp, #0]
    f13c:	f003 0301 	and.w	r3, r3, #1
    f140:	2b00      	cmp	r3, #0
    f142:	d100      	bne.n	f146 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f146:	490a      	ldr	r1, [pc, #40]	; (f170 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	9a00      	ldr	r2, [sp, #0]
    f14c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    f150:	4a06      	ldr	r2, [pc, #24]	; (f16c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    f152:	9b01      	ldr	r3, [sp, #4]
    f154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f158:	1c5a      	adds	r2, r3, #1
    f15a:	4904      	ldr	r1, [pc, #16]	; (f16c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    f15c:	9b01      	ldr	r3, [sp, #4]
    f15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f162:	bf00      	nop
    f164:	b003      	add	sp, #12
    f166:	f85d fb04 	ldr.w	pc, [sp], #4
    f16a:	bf00      	nop
    f16c:	1fff90e8 	.word	0x1fff90e8
    f170:	1fff90e4 	.word	0x1fff90e4

0000f174 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    f174:	b500      	push	{lr}
    f176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f178:	f7f1 fd2c 	bl	bd4 <Sys_GetCoreID>
    f17c:	4603      	mov	r3, r0
    f17e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    f180:	4a0d      	ldr	r2, [pc, #52]	; (f1b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    f182:	9b01      	ldr	r3, [sp, #4]
    f184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f188:	1e5a      	subs	r2, r3, #1
    f18a:	490b      	ldr	r1, [pc, #44]	; (f1b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    f18c:	9b01      	ldr	r3, [sp, #4]
    f18e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f192:	4a0a      	ldr	r2, [pc, #40]	; (f1bc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    f194:	9b01      	ldr	r3, [sp, #4]
    f196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f19a:	f003 0301 	and.w	r3, r3, #1
    f19e:	2b00      	cmp	r3, #0
    f1a0:	d106      	bne.n	f1b0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    f1a2:	4a05      	ldr	r2, [pc, #20]	; (f1b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    f1a4:	9b01      	ldr	r3, [sp, #4]
    f1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	d100      	bne.n	f1b0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1b0:	bf00      	nop
    f1b2:	b003      	add	sp, #12
    f1b4:	f85d fb04 	ldr.w	pc, [sp], #4
    f1b8:	1fff90e8 	.word	0x1fff90e8
    f1bc:	1fff90e4 	.word	0x1fff90e4

0000f1c0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    f1c0:	b500      	push	{lr}
    f1c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1c4:	f7f1 fd06 	bl	bd4 <Sys_GetCoreID>
    f1c8:	4603      	mov	r3, r0
    f1ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    f1cc:	4a10      	ldr	r2, [pc, #64]	; (f210 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    f1ce:	9b01      	ldr	r3, [sp, #4]
    f1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d10d      	bne.n	f1f4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1d8:	f7f1 fc1b 	bl	a12 <Dio_schm_read_msr>
    f1dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1de:	9b00      	ldr	r3, [sp, #0]
    f1e0:	f003 0301 	and.w	r3, r3, #1
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d100      	bne.n	f1ea <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f1ea:	490a      	ldr	r1, [pc, #40]	; (f214 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    f1ec:	9b01      	ldr	r3, [sp, #4]
    f1ee:	9a00      	ldr	r2, [sp, #0]
    f1f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    f1f4:	4a06      	ldr	r2, [pc, #24]	; (f210 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    f1f6:	9b01      	ldr	r3, [sp, #4]
    f1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1fc:	1c5a      	adds	r2, r3, #1
    f1fe:	4904      	ldr	r1, [pc, #16]	; (f210 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    f200:	9b01      	ldr	r3, [sp, #4]
    f202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f206:	bf00      	nop
    f208:	b003      	add	sp, #12
    f20a:	f85d fb04 	ldr.w	pc, [sp], #4
    f20e:	bf00      	nop
    f210:	1fff90f0 	.word	0x1fff90f0
    f214:	1fff90ec 	.word	0x1fff90ec

0000f218 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    f218:	b500      	push	{lr}
    f21a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f21c:	f7f1 fcda 	bl	bd4 <Sys_GetCoreID>
    f220:	4603      	mov	r3, r0
    f222:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    f224:	4a0d      	ldr	r2, [pc, #52]	; (f25c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    f226:	9b01      	ldr	r3, [sp, #4]
    f228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f22c:	1e5a      	subs	r2, r3, #1
    f22e:	490b      	ldr	r1, [pc, #44]	; (f25c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    f230:	9b01      	ldr	r3, [sp, #4]
    f232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f236:	4a0a      	ldr	r2, [pc, #40]	; (f260 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    f238:	9b01      	ldr	r3, [sp, #4]
    f23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f23e:	f003 0301 	and.w	r3, r3, #1
    f242:	2b00      	cmp	r3, #0
    f244:	d106      	bne.n	f254 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    f246:	4a05      	ldr	r2, [pc, #20]	; (f25c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    f248:	9b01      	ldr	r3, [sp, #4]
    f24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f24e:	2b00      	cmp	r3, #0
    f250:	d100      	bne.n	f254 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f254:	bf00      	nop
    f256:	b003      	add	sp, #12
    f258:	f85d fb04 	ldr.w	pc, [sp], #4
    f25c:	1fff90f0 	.word	0x1fff90f0
    f260:	1fff90ec 	.word	0x1fff90ec

0000f264 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    f264:	b500      	push	{lr}
    f266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f268:	f7f1 fcb4 	bl	bd4 <Sys_GetCoreID>
    f26c:	4603      	mov	r3, r0
    f26e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    f270:	4a10      	ldr	r2, [pc, #64]	; (f2b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    f272:	9b01      	ldr	r3, [sp, #4]
    f274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f278:	2b00      	cmp	r3, #0
    f27a:	d10d      	bne.n	f298 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f27c:	f7f1 fbd2 	bl	a24 <Mcu_schm_read_msr>
    f280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f282:	9b00      	ldr	r3, [sp, #0]
    f284:	f003 0301 	and.w	r3, r3, #1
    f288:	2b00      	cmp	r3, #0
    f28a:	d100      	bne.n	f28e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f28c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f28e:	490a      	ldr	r1, [pc, #40]	; (f2b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	9a00      	ldr	r2, [sp, #0]
    f294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    f298:	4a06      	ldr	r2, [pc, #24]	; (f2b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    f29a:	9b01      	ldr	r3, [sp, #4]
    f29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2a0:	1c5a      	adds	r2, r3, #1
    f2a2:	4904      	ldr	r1, [pc, #16]	; (f2b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    f2a4:	9b01      	ldr	r3, [sp, #4]
    f2a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2aa:	bf00      	nop
    f2ac:	b003      	add	sp, #12
    f2ae:	f85d fb04 	ldr.w	pc, [sp], #4
    f2b2:	bf00      	nop
    f2b4:	1fff90f8 	.word	0x1fff90f8
    f2b8:	1fff90f4 	.word	0x1fff90f4

0000f2bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    f2bc:	b500      	push	{lr}
    f2be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2c0:	f7f1 fc88 	bl	bd4 <Sys_GetCoreID>
    f2c4:	4603      	mov	r3, r0
    f2c6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    f2c8:	4a0d      	ldr	r2, [pc, #52]	; (f300 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    f2ca:	9b01      	ldr	r3, [sp, #4]
    f2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d0:	1e5a      	subs	r2, r3, #1
    f2d2:	490b      	ldr	r1, [pc, #44]	; (f300 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    f2d4:	9b01      	ldr	r3, [sp, #4]
    f2d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f2da:	4a0a      	ldr	r2, [pc, #40]	; (f304 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    f2dc:	9b01      	ldr	r3, [sp, #4]
    f2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2e2:	f003 0301 	and.w	r3, r3, #1
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d106      	bne.n	f2f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    f2ea:	4a05      	ldr	r2, [pc, #20]	; (f300 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    f2ec:	9b01      	ldr	r3, [sp, #4]
    f2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f2:	2b00      	cmp	r3, #0
    f2f4:	d100      	bne.n	f2f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2f8:	bf00      	nop
    f2fa:	b003      	add	sp, #12
    f2fc:	f85d fb04 	ldr.w	pc, [sp], #4
    f300:	1fff90f8 	.word	0x1fff90f8
    f304:	1fff90f4 	.word	0x1fff90f4

0000f308 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    f308:	b500      	push	{lr}
    f30a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f30c:	f7f1 fc62 	bl	bd4 <Sys_GetCoreID>
    f310:	4603      	mov	r3, r0
    f312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    f314:	4a10      	ldr	r2, [pc, #64]	; (f358 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    f316:	9b01      	ldr	r3, [sp, #4]
    f318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f31c:	2b00      	cmp	r3, #0
    f31e:	d10d      	bne.n	f33c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f320:	f7f1 fb80 	bl	a24 <Mcu_schm_read_msr>
    f324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f326:	9b00      	ldr	r3, [sp, #0]
    f328:	f003 0301 	and.w	r3, r3, #1
    f32c:	2b00      	cmp	r3, #0
    f32e:	d100      	bne.n	f332 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f332:	490a      	ldr	r1, [pc, #40]	; (f35c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    f334:	9b01      	ldr	r3, [sp, #4]
    f336:	9a00      	ldr	r2, [sp, #0]
    f338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    f33c:	4a06      	ldr	r2, [pc, #24]	; (f358 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    f33e:	9b01      	ldr	r3, [sp, #4]
    f340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f344:	1c5a      	adds	r2, r3, #1
    f346:	4904      	ldr	r1, [pc, #16]	; (f358 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    f348:	9b01      	ldr	r3, [sp, #4]
    f34a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f34e:	bf00      	nop
    f350:	b003      	add	sp, #12
    f352:	f85d fb04 	ldr.w	pc, [sp], #4
    f356:	bf00      	nop
    f358:	1fff9100 	.word	0x1fff9100
    f35c:	1fff90fc 	.word	0x1fff90fc

0000f360 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    f360:	b500      	push	{lr}
    f362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f364:	f7f1 fc36 	bl	bd4 <Sys_GetCoreID>
    f368:	4603      	mov	r3, r0
    f36a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    f36c:	4a0d      	ldr	r2, [pc, #52]	; (f3a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f36e:	9b01      	ldr	r3, [sp, #4]
    f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f374:	1e5a      	subs	r2, r3, #1
    f376:	490b      	ldr	r1, [pc, #44]	; (f3a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f378:	9b01      	ldr	r3, [sp, #4]
    f37a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f37e:	4a0a      	ldr	r2, [pc, #40]	; (f3a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    f380:	9b01      	ldr	r3, [sp, #4]
    f382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f386:	f003 0301 	and.w	r3, r3, #1
    f38a:	2b00      	cmp	r3, #0
    f38c:	d106      	bne.n	f39c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    f38e:	4a05      	ldr	r2, [pc, #20]	; (f3a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f390:	9b01      	ldr	r3, [sp, #4]
    f392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f396:	2b00      	cmp	r3, #0
    f398:	d100      	bne.n	f39c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f39a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f39c:	bf00      	nop
    f39e:	b003      	add	sp, #12
    f3a0:	f85d fb04 	ldr.w	pc, [sp], #4
    f3a4:	1fff9100 	.word	0x1fff9100
    f3a8:	1fff90fc 	.word	0x1fff90fc

0000f3ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    f3ac:	b500      	push	{lr}
    f3ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3b0:	f7f1 fc10 	bl	bd4 <Sys_GetCoreID>
    f3b4:	4603      	mov	r3, r0
    f3b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    f3b8:	4a10      	ldr	r2, [pc, #64]	; (f3fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f3ba:	9b01      	ldr	r3, [sp, #4]
    f3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	d10d      	bne.n	f3e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3c4:	f7f1 fb2e 	bl	a24 <Mcu_schm_read_msr>
    f3c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3ca:	9b00      	ldr	r3, [sp, #0]
    f3cc:	f003 0301 	and.w	r3, r3, #1
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d100      	bne.n	f3d6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f3d6:	490a      	ldr	r1, [pc, #40]	; (f400 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    f3d8:	9b01      	ldr	r3, [sp, #4]
    f3da:	9a00      	ldr	r2, [sp, #0]
    f3dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    f3e0:	4a06      	ldr	r2, [pc, #24]	; (f3fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f3e2:	9b01      	ldr	r3, [sp, #4]
    f3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e8:	1c5a      	adds	r2, r3, #1
    f3ea:	4904      	ldr	r1, [pc, #16]	; (f3fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f3ec:	9b01      	ldr	r3, [sp, #4]
    f3ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3f2:	bf00      	nop
    f3f4:	b003      	add	sp, #12
    f3f6:	f85d fb04 	ldr.w	pc, [sp], #4
    f3fa:	bf00      	nop
    f3fc:	1fff9108 	.word	0x1fff9108
    f400:	1fff9104 	.word	0x1fff9104

0000f404 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    f404:	b500      	push	{lr}
    f406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f408:	f7f1 fbe4 	bl	bd4 <Sys_GetCoreID>
    f40c:	4603      	mov	r3, r0
    f40e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    f410:	4a0d      	ldr	r2, [pc, #52]	; (f448 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f412:	9b01      	ldr	r3, [sp, #4]
    f414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f418:	1e5a      	subs	r2, r3, #1
    f41a:	490b      	ldr	r1, [pc, #44]	; (f448 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f41c:	9b01      	ldr	r3, [sp, #4]
    f41e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f422:	4a0a      	ldr	r2, [pc, #40]	; (f44c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    f424:	9b01      	ldr	r3, [sp, #4]
    f426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f42a:	f003 0301 	and.w	r3, r3, #1
    f42e:	2b00      	cmp	r3, #0
    f430:	d106      	bne.n	f440 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    f432:	4a05      	ldr	r2, [pc, #20]	; (f448 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f434:	9b01      	ldr	r3, [sp, #4]
    f436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f43a:	2b00      	cmp	r3, #0
    f43c:	d100      	bne.n	f440 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f43e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f440:	bf00      	nop
    f442:	b003      	add	sp, #12
    f444:	f85d fb04 	ldr.w	pc, [sp], #4
    f448:	1fff9108 	.word	0x1fff9108
    f44c:	1fff9104 	.word	0x1fff9104

0000f450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    f450:	b500      	push	{lr}
    f452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f454:	f7f1 fbbe 	bl	bd4 <Sys_GetCoreID>
    f458:	4603      	mov	r3, r0
    f45a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    f45c:	4a10      	ldr	r2, [pc, #64]	; (f4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f45e:	9b01      	ldr	r3, [sp, #4]
    f460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f464:	2b00      	cmp	r3, #0
    f466:	d10d      	bne.n	f484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f468:	f7f1 fae5 	bl	a36 <Port_schm_read_msr>
    f46c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f46e:	9b00      	ldr	r3, [sp, #0]
    f470:	f003 0301 	and.w	r3, r3, #1
    f474:	2b00      	cmp	r3, #0
    f476:	d100      	bne.n	f47a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f47a:	490a      	ldr	r1, [pc, #40]	; (f4a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    f47c:	9b01      	ldr	r3, [sp, #4]
    f47e:	9a00      	ldr	r2, [sp, #0]
    f480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    f484:	4a06      	ldr	r2, [pc, #24]	; (f4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f486:	9b01      	ldr	r3, [sp, #4]
    f488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f48c:	1c5a      	adds	r2, r3, #1
    f48e:	4904      	ldr	r1, [pc, #16]	; (f4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f490:	9b01      	ldr	r3, [sp, #4]
    f492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f496:	bf00      	nop
    f498:	b003      	add	sp, #12
    f49a:	f85d fb04 	ldr.w	pc, [sp], #4
    f49e:	bf00      	nop
    f4a0:	1fff9110 	.word	0x1fff9110
    f4a4:	1fff910c 	.word	0x1fff910c

0000f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    f4a8:	b500      	push	{lr}
    f4aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4ac:	f7f1 fb92 	bl	bd4 <Sys_GetCoreID>
    f4b0:	4603      	mov	r3, r0
    f4b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    f4b4:	4a0d      	ldr	r2, [pc, #52]	; (f4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f4b6:	9b01      	ldr	r3, [sp, #4]
    f4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4bc:	1e5a      	subs	r2, r3, #1
    f4be:	490b      	ldr	r1, [pc, #44]	; (f4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f4c0:	9b01      	ldr	r3, [sp, #4]
    f4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f4c6:	4a0a      	ldr	r2, [pc, #40]	; (f4f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    f4c8:	9b01      	ldr	r3, [sp, #4]
    f4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ce:	f003 0301 	and.w	r3, r3, #1
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d106      	bne.n	f4e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    f4d6:	4a05      	ldr	r2, [pc, #20]	; (f4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f4d8:	9b01      	ldr	r3, [sp, #4]
    f4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4de:	2b00      	cmp	r3, #0
    f4e0:	d100      	bne.n	f4e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4e4:	bf00      	nop
    f4e6:	b003      	add	sp, #12
    f4e8:	f85d fb04 	ldr.w	pc, [sp], #4
    f4ec:	1fff9110 	.word	0x1fff9110
    f4f0:	1fff910c 	.word	0x1fff910c

0000f4f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    f4f4:	b500      	push	{lr}
    f4f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4f8:	f7f1 fb6c 	bl	bd4 <Sys_GetCoreID>
    f4fc:	4603      	mov	r3, r0
    f4fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    f500:	4a10      	ldr	r2, [pc, #64]	; (f544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f502:	9b01      	ldr	r3, [sp, #4]
    f504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f508:	2b00      	cmp	r3, #0
    f50a:	d10d      	bne.n	f528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f50c:	f7f1 fa93 	bl	a36 <Port_schm_read_msr>
    f510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f512:	9b00      	ldr	r3, [sp, #0]
    f514:	f003 0301 	and.w	r3, r3, #1
    f518:	2b00      	cmp	r3, #0
    f51a:	d100      	bne.n	f51e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f51c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f51e:	490a      	ldr	r1, [pc, #40]	; (f548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    f520:	9b01      	ldr	r3, [sp, #4]
    f522:	9a00      	ldr	r2, [sp, #0]
    f524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    f528:	4a06      	ldr	r2, [pc, #24]	; (f544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f52a:	9b01      	ldr	r3, [sp, #4]
    f52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f530:	1c5a      	adds	r2, r3, #1
    f532:	4904      	ldr	r1, [pc, #16]	; (f544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f534:	9b01      	ldr	r3, [sp, #4]
    f536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f53a:	bf00      	nop
    f53c:	b003      	add	sp, #12
    f53e:	f85d fb04 	ldr.w	pc, [sp], #4
    f542:	bf00      	nop
    f544:	1fff9118 	.word	0x1fff9118
    f548:	1fff9114 	.word	0x1fff9114

0000f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    f54c:	b500      	push	{lr}
    f54e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f550:	f7f1 fb40 	bl	bd4 <Sys_GetCoreID>
    f554:	4603      	mov	r3, r0
    f556:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    f558:	4a0d      	ldr	r2, [pc, #52]	; (f590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f55a:	9b01      	ldr	r3, [sp, #4]
    f55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f560:	1e5a      	subs	r2, r3, #1
    f562:	490b      	ldr	r1, [pc, #44]	; (f590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f564:	9b01      	ldr	r3, [sp, #4]
    f566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f56a:	4a0a      	ldr	r2, [pc, #40]	; (f594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    f56c:	9b01      	ldr	r3, [sp, #4]
    f56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f572:	f003 0301 	and.w	r3, r3, #1
    f576:	2b00      	cmp	r3, #0
    f578:	d106      	bne.n	f588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    f57a:	4a05      	ldr	r2, [pc, #20]	; (f590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f57c:	9b01      	ldr	r3, [sp, #4]
    f57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f582:	2b00      	cmp	r3, #0
    f584:	d100      	bne.n	f588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f588:	bf00      	nop
    f58a:	b003      	add	sp, #12
    f58c:	f85d fb04 	ldr.w	pc, [sp], #4
    f590:	1fff9118 	.word	0x1fff9118
    f594:	1fff9114 	.word	0x1fff9114

0000f598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f598:	b500      	push	{lr}
    f59a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f59c:	f7f1 fb1a 	bl	bd4 <Sys_GetCoreID>
    f5a0:	4603      	mov	r3, r0
    f5a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    f5a4:	4a10      	ldr	r2, [pc, #64]	; (f5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f5a6:	9b01      	ldr	r3, [sp, #4]
    f5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5ac:	2b00      	cmp	r3, #0
    f5ae:	d10d      	bne.n	f5cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5b0:	f7f1 fa41 	bl	a36 <Port_schm_read_msr>
    f5b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5b6:	9b00      	ldr	r3, [sp, #0]
    f5b8:	f003 0301 	and.w	r3, r3, #1
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d100      	bne.n	f5c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f5c2:	490a      	ldr	r1, [pc, #40]	; (f5ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    f5c4:	9b01      	ldr	r3, [sp, #4]
    f5c6:	9a00      	ldr	r2, [sp, #0]
    f5c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    f5cc:	4a06      	ldr	r2, [pc, #24]	; (f5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f5ce:	9b01      	ldr	r3, [sp, #4]
    f5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d4:	1c5a      	adds	r2, r3, #1
    f5d6:	4904      	ldr	r1, [pc, #16]	; (f5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f5d8:	9b01      	ldr	r3, [sp, #4]
    f5da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5de:	bf00      	nop
    f5e0:	b003      	add	sp, #12
    f5e2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5e6:	bf00      	nop
    f5e8:	1fff9120 	.word	0x1fff9120
    f5ec:	1fff911c 	.word	0x1fff911c

0000f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f5f0:	b500      	push	{lr}
    f5f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5f4:	f7f1 faee 	bl	bd4 <Sys_GetCoreID>
    f5f8:	4603      	mov	r3, r0
    f5fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    f5fc:	4a0d      	ldr	r2, [pc, #52]	; (f634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f5fe:	9b01      	ldr	r3, [sp, #4]
    f600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f604:	1e5a      	subs	r2, r3, #1
    f606:	490b      	ldr	r1, [pc, #44]	; (f634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f608:	9b01      	ldr	r3, [sp, #4]
    f60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f60e:	4a0a      	ldr	r2, [pc, #40]	; (f638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    f610:	9b01      	ldr	r3, [sp, #4]
    f612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f616:	f003 0301 	and.w	r3, r3, #1
    f61a:	2b00      	cmp	r3, #0
    f61c:	d106      	bne.n	f62c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    f61e:	4a05      	ldr	r2, [pc, #20]	; (f634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f620:	9b01      	ldr	r3, [sp, #4]
    f622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f626:	2b00      	cmp	r3, #0
    f628:	d100      	bne.n	f62c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f62a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f62c:	bf00      	nop
    f62e:	b003      	add	sp, #12
    f630:	f85d fb04 	ldr.w	pc, [sp], #4
    f634:	1fff9120 	.word	0x1fff9120
    f638:	1fff911c 	.word	0x1fff911c

0000f63c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f63c:	b500      	push	{lr}
    f63e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f640:	f7f1 fac8 	bl	bd4 <Sys_GetCoreID>
    f644:	4603      	mov	r3, r0
    f646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    f648:	4a10      	ldr	r2, [pc, #64]	; (f68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f64a:	9b01      	ldr	r3, [sp, #4]
    f64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f650:	2b00      	cmp	r3, #0
    f652:	d10d      	bne.n	f670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f654:	f7f1 f9ef 	bl	a36 <Port_schm_read_msr>
    f658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f65a:	9b00      	ldr	r3, [sp, #0]
    f65c:	f003 0301 	and.w	r3, r3, #1
    f660:	2b00      	cmp	r3, #0
    f662:	d100      	bne.n	f666 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f666:	490a      	ldr	r1, [pc, #40]	; (f690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    f668:	9b01      	ldr	r3, [sp, #4]
    f66a:	9a00      	ldr	r2, [sp, #0]
    f66c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    f670:	4a06      	ldr	r2, [pc, #24]	; (f68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f672:	9b01      	ldr	r3, [sp, #4]
    f674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f678:	1c5a      	adds	r2, r3, #1
    f67a:	4904      	ldr	r1, [pc, #16]	; (f68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f67c:	9b01      	ldr	r3, [sp, #4]
    f67e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f682:	bf00      	nop
    f684:	b003      	add	sp, #12
    f686:	f85d fb04 	ldr.w	pc, [sp], #4
    f68a:	bf00      	nop
    f68c:	1fff9128 	.word	0x1fff9128
    f690:	1fff9124 	.word	0x1fff9124

0000f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f694:	b500      	push	{lr}
    f696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f698:	f7f1 fa9c 	bl	bd4 <Sys_GetCoreID>
    f69c:	4603      	mov	r3, r0
    f69e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    f6a0:	4a0d      	ldr	r2, [pc, #52]	; (f6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f6a2:	9b01      	ldr	r3, [sp, #4]
    f6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6a8:	1e5a      	subs	r2, r3, #1
    f6aa:	490b      	ldr	r1, [pc, #44]	; (f6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f6ac:	9b01      	ldr	r3, [sp, #4]
    f6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f6b2:	4a0a      	ldr	r2, [pc, #40]	; (f6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    f6b4:	9b01      	ldr	r3, [sp, #4]
    f6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ba:	f003 0301 	and.w	r3, r3, #1
    f6be:	2b00      	cmp	r3, #0
    f6c0:	d106      	bne.n	f6d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    f6c2:	4a05      	ldr	r2, [pc, #20]	; (f6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f6c4:	9b01      	ldr	r3, [sp, #4]
    f6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ca:	2b00      	cmp	r3, #0
    f6cc:	d100      	bne.n	f6d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f6ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f6d0:	bf00      	nop
    f6d2:	b003      	add	sp, #12
    f6d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f6d8:	1fff9128 	.word	0x1fff9128
    f6dc:	1fff9124 	.word	0x1fff9124

0000f6e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f6e0:	b500      	push	{lr}
    f6e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6e4:	f7f1 fa76 	bl	bd4 <Sys_GetCoreID>
    f6e8:	4603      	mov	r3, r0
    f6ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    f6ec:	4a10      	ldr	r2, [pc, #64]	; (f730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f6ee:	9b01      	ldr	r3, [sp, #4]
    f6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6f4:	2b00      	cmp	r3, #0
    f6f6:	d10d      	bne.n	f714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6f8:	f7f1 f99d 	bl	a36 <Port_schm_read_msr>
    f6fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6fe:	9b00      	ldr	r3, [sp, #0]
    f700:	f003 0301 	and.w	r3, r3, #1
    f704:	2b00      	cmp	r3, #0
    f706:	d100      	bne.n	f70a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f70a:	490a      	ldr	r1, [pc, #40]	; (f734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    f70c:	9b01      	ldr	r3, [sp, #4]
    f70e:	9a00      	ldr	r2, [sp, #0]
    f710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    f714:	4a06      	ldr	r2, [pc, #24]	; (f730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f716:	9b01      	ldr	r3, [sp, #4]
    f718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f71c:	1c5a      	adds	r2, r3, #1
    f71e:	4904      	ldr	r1, [pc, #16]	; (f730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f720:	9b01      	ldr	r3, [sp, #4]
    f722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f726:	bf00      	nop
    f728:	b003      	add	sp, #12
    f72a:	f85d fb04 	ldr.w	pc, [sp], #4
    f72e:	bf00      	nop
    f730:	1fff9130 	.word	0x1fff9130
    f734:	1fff912c 	.word	0x1fff912c

0000f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f738:	b500      	push	{lr}
    f73a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f73c:	f7f1 fa4a 	bl	bd4 <Sys_GetCoreID>
    f740:	4603      	mov	r3, r0
    f742:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    f744:	4a0d      	ldr	r2, [pc, #52]	; (f77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f746:	9b01      	ldr	r3, [sp, #4]
    f748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f74c:	1e5a      	subs	r2, r3, #1
    f74e:	490b      	ldr	r1, [pc, #44]	; (f77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f750:	9b01      	ldr	r3, [sp, #4]
    f752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f756:	4a0a      	ldr	r2, [pc, #40]	; (f780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f758:	9b01      	ldr	r3, [sp, #4]
    f75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f75e:	f003 0301 	and.w	r3, r3, #1
    f762:	2b00      	cmp	r3, #0
    f764:	d106      	bne.n	f774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f766:	4a05      	ldr	r2, [pc, #20]	; (f77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f768:	9b01      	ldr	r3, [sp, #4]
    f76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f76e:	2b00      	cmp	r3, #0
    f770:	d100      	bne.n	f774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f774:	bf00      	nop
    f776:	b003      	add	sp, #12
    f778:	f85d fb04 	ldr.w	pc, [sp], #4
    f77c:	1fff9130 	.word	0x1fff9130
    f780:	1fff912c 	.word	0x1fff912c

0000f784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f784:	b500      	push	{lr}
    f786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f788:	f7f1 fa24 	bl	bd4 <Sys_GetCoreID>
    f78c:	4603      	mov	r3, r0
    f78e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f790:	4a10      	ldr	r2, [pc, #64]	; (f7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f792:	9b01      	ldr	r3, [sp, #4]
    f794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f798:	2b00      	cmp	r3, #0
    f79a:	d10d      	bne.n	f7b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f79c:	f7f1 f94b 	bl	a36 <Port_schm_read_msr>
    f7a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7a2:	9b00      	ldr	r3, [sp, #0]
    f7a4:	f003 0301 	and.w	r3, r3, #1
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	d100      	bne.n	f7ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f7ae:	490a      	ldr	r1, [pc, #40]	; (f7d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f7b0:	9b01      	ldr	r3, [sp, #4]
    f7b2:	9a00      	ldr	r2, [sp, #0]
    f7b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f7b8:	4a06      	ldr	r2, [pc, #24]	; (f7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f7ba:	9b01      	ldr	r3, [sp, #4]
    f7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7c0:	1c5a      	adds	r2, r3, #1
    f7c2:	4904      	ldr	r1, [pc, #16]	; (f7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f7c4:	9b01      	ldr	r3, [sp, #4]
    f7c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7ca:	bf00      	nop
    f7cc:	b003      	add	sp, #12
    f7ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f7d2:	bf00      	nop
    f7d4:	1fff9138 	.word	0x1fff9138
    f7d8:	1fff9134 	.word	0x1fff9134

0000f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f7dc:	b500      	push	{lr}
    f7de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7e0:	f7f1 f9f8 	bl	bd4 <Sys_GetCoreID>
    f7e4:	4603      	mov	r3, r0
    f7e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f7e8:	4a0d      	ldr	r2, [pc, #52]	; (f820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f7ea:	9b01      	ldr	r3, [sp, #4]
    f7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f0:	1e5a      	subs	r2, r3, #1
    f7f2:	490b      	ldr	r1, [pc, #44]	; (f820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f7f4:	9b01      	ldr	r3, [sp, #4]
    f7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f7fa:	4a0a      	ldr	r2, [pc, #40]	; (f824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f7fc:	9b01      	ldr	r3, [sp, #4]
    f7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f802:	f003 0301 	and.w	r3, r3, #1
    f806:	2b00      	cmp	r3, #0
    f808:	d106      	bne.n	f818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f80a:	4a05      	ldr	r2, [pc, #20]	; (f820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f80c:	9b01      	ldr	r3, [sp, #4]
    f80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f812:	2b00      	cmp	r3, #0
    f814:	d100      	bne.n	f818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f818:	bf00      	nop
    f81a:	b003      	add	sp, #12
    f81c:	f85d fb04 	ldr.w	pc, [sp], #4
    f820:	1fff9138 	.word	0x1fff9138
    f824:	1fff9134 	.word	0x1fff9134

0000f828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f828:	b500      	push	{lr}
    f82a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f82c:	f7f1 f9d2 	bl	bd4 <Sys_GetCoreID>
    f830:	4603      	mov	r3, r0
    f832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f834:	4a10      	ldr	r2, [pc, #64]	; (f878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f836:	9b01      	ldr	r3, [sp, #4]
    f838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f83c:	2b00      	cmp	r3, #0
    f83e:	d10d      	bne.n	f85c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f840:	f7f1 f8f9 	bl	a36 <Port_schm_read_msr>
    f844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f846:	9b00      	ldr	r3, [sp, #0]
    f848:	f003 0301 	and.w	r3, r3, #1
    f84c:	2b00      	cmp	r3, #0
    f84e:	d100      	bne.n	f852 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f852:	490a      	ldr	r1, [pc, #40]	; (f87c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f854:	9b01      	ldr	r3, [sp, #4]
    f856:	9a00      	ldr	r2, [sp, #0]
    f858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f85c:	4a06      	ldr	r2, [pc, #24]	; (f878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f85e:	9b01      	ldr	r3, [sp, #4]
    f860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f864:	1c5a      	adds	r2, r3, #1
    f866:	4904      	ldr	r1, [pc, #16]	; (f878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f868:	9b01      	ldr	r3, [sp, #4]
    f86a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f86e:	bf00      	nop
    f870:	b003      	add	sp, #12
    f872:	f85d fb04 	ldr.w	pc, [sp], #4
    f876:	bf00      	nop
    f878:	1fff9140 	.word	0x1fff9140
    f87c:	1fff913c 	.word	0x1fff913c

0000f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f880:	b500      	push	{lr}
    f882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f884:	f7f1 f9a6 	bl	bd4 <Sys_GetCoreID>
    f888:	4603      	mov	r3, r0
    f88a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f88c:	4a0d      	ldr	r2, [pc, #52]	; (f8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f88e:	9b01      	ldr	r3, [sp, #4]
    f890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f894:	1e5a      	subs	r2, r3, #1
    f896:	490b      	ldr	r1, [pc, #44]	; (f8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f898:	9b01      	ldr	r3, [sp, #4]
    f89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f89e:	4a0a      	ldr	r2, [pc, #40]	; (f8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f8a0:	9b01      	ldr	r3, [sp, #4]
    f8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8a6:	f003 0301 	and.w	r3, r3, #1
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	d106      	bne.n	f8bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f8ae:	4a05      	ldr	r2, [pc, #20]	; (f8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f8b0:	9b01      	ldr	r3, [sp, #4]
    f8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	d100      	bne.n	f8bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8bc:	bf00      	nop
    f8be:	b003      	add	sp, #12
    f8c0:	f85d fb04 	ldr.w	pc, [sp], #4
    f8c4:	1fff9140 	.word	0x1fff9140
    f8c8:	1fff913c 	.word	0x1fff913c

0000f8cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f8cc:	b500      	push	{lr}
    f8ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8d0:	f7f1 f980 	bl	bd4 <Sys_GetCoreID>
    f8d4:	4603      	mov	r3, r0
    f8d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f8d8:	4a10      	ldr	r2, [pc, #64]	; (f91c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f8da:	9b01      	ldr	r3, [sp, #4]
    f8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8e0:	2b00      	cmp	r3, #0
    f8e2:	d10d      	bne.n	f900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8e4:	f7f1 f8a7 	bl	a36 <Port_schm_read_msr>
    f8e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8ea:	9b00      	ldr	r3, [sp, #0]
    f8ec:	f003 0301 	and.w	r3, r3, #1
    f8f0:	2b00      	cmp	r3, #0
    f8f2:	d100      	bne.n	f8f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f8f6:	490a      	ldr	r1, [pc, #40]	; (f920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f8f8:	9b01      	ldr	r3, [sp, #4]
    f8fa:	9a00      	ldr	r2, [sp, #0]
    f8fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f900:	4a06      	ldr	r2, [pc, #24]	; (f91c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f902:	9b01      	ldr	r3, [sp, #4]
    f904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f908:	1c5a      	adds	r2, r3, #1
    f90a:	4904      	ldr	r1, [pc, #16]	; (f91c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f90c:	9b01      	ldr	r3, [sp, #4]
    f90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f912:	bf00      	nop
    f914:	b003      	add	sp, #12
    f916:	f85d fb04 	ldr.w	pc, [sp], #4
    f91a:	bf00      	nop
    f91c:	1fff9148 	.word	0x1fff9148
    f920:	1fff9144 	.word	0x1fff9144

0000f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f924:	b500      	push	{lr}
    f926:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f928:	f7f1 f954 	bl	bd4 <Sys_GetCoreID>
    f92c:	4603      	mov	r3, r0
    f92e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f930:	4a0d      	ldr	r2, [pc, #52]	; (f968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f932:	9b01      	ldr	r3, [sp, #4]
    f934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f938:	1e5a      	subs	r2, r3, #1
    f93a:	490b      	ldr	r1, [pc, #44]	; (f968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f93c:	9b01      	ldr	r3, [sp, #4]
    f93e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f942:	4a0a      	ldr	r2, [pc, #40]	; (f96c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f944:	9b01      	ldr	r3, [sp, #4]
    f946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f94a:	f003 0301 	and.w	r3, r3, #1
    f94e:	2b00      	cmp	r3, #0
    f950:	d106      	bne.n	f960 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f952:	4a05      	ldr	r2, [pc, #20]	; (f968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f954:	9b01      	ldr	r3, [sp, #4]
    f956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f95a:	2b00      	cmp	r3, #0
    f95c:	d100      	bne.n	f960 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f95e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f960:	bf00      	nop
    f962:	b003      	add	sp, #12
    f964:	f85d fb04 	ldr.w	pc, [sp], #4
    f968:	1fff9148 	.word	0x1fff9148
    f96c:	1fff9144 	.word	0x1fff9144

0000f970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f970:	b500      	push	{lr}
    f972:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f974:	f7f1 f92e 	bl	bd4 <Sys_GetCoreID>
    f978:	4603      	mov	r3, r0
    f97a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f97c:	4a10      	ldr	r2, [pc, #64]	; (f9c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f97e:	9b01      	ldr	r3, [sp, #4]
    f980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f984:	2b00      	cmp	r3, #0
    f986:	d10d      	bne.n	f9a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f988:	f7f1 f855 	bl	a36 <Port_schm_read_msr>
    f98c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f98e:	9b00      	ldr	r3, [sp, #0]
    f990:	f003 0301 	and.w	r3, r3, #1
    f994:	2b00      	cmp	r3, #0
    f996:	d100      	bne.n	f99a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f998:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f99a:	490a      	ldr	r1, [pc, #40]	; (f9c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f99c:	9b01      	ldr	r3, [sp, #4]
    f99e:	9a00      	ldr	r2, [sp, #0]
    f9a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f9a4:	4a06      	ldr	r2, [pc, #24]	; (f9c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f9a6:	9b01      	ldr	r3, [sp, #4]
    f9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ac:	1c5a      	adds	r2, r3, #1
    f9ae:	4904      	ldr	r1, [pc, #16]	; (f9c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f9b0:	9b01      	ldr	r3, [sp, #4]
    f9b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9b6:	bf00      	nop
    f9b8:	b003      	add	sp, #12
    f9ba:	f85d fb04 	ldr.w	pc, [sp], #4
    f9be:	bf00      	nop
    f9c0:	1fff9150 	.word	0x1fff9150
    f9c4:	1fff914c 	.word	0x1fff914c

0000f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f9c8:	b500      	push	{lr}
    f9ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9cc:	f7f1 f902 	bl	bd4 <Sys_GetCoreID>
    f9d0:	4603      	mov	r3, r0
    f9d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f9d4:	4a0d      	ldr	r2, [pc, #52]	; (fa0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f9d6:	9b01      	ldr	r3, [sp, #4]
    f9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9dc:	1e5a      	subs	r2, r3, #1
    f9de:	490b      	ldr	r1, [pc, #44]	; (fa0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f9e0:	9b01      	ldr	r3, [sp, #4]
    f9e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f9e6:	4a0a      	ldr	r2, [pc, #40]	; (fa10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f9e8:	9b01      	ldr	r3, [sp, #4]
    f9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ee:	f003 0301 	and.w	r3, r3, #1
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d106      	bne.n	fa04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f9f6:	4a05      	ldr	r2, [pc, #20]	; (fa0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f9f8:	9b01      	ldr	r3, [sp, #4]
    f9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9fe:	2b00      	cmp	r3, #0
    fa00:	d100      	bne.n	fa04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa04:	bf00      	nop
    fa06:	b003      	add	sp, #12
    fa08:	f85d fb04 	ldr.w	pc, [sp], #4
    fa0c:	1fff9150 	.word	0x1fff9150
    fa10:	1fff914c 	.word	0x1fff914c

0000fa14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    fa14:	b500      	push	{lr}
    fa16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa18:	f7f1 f8dc 	bl	bd4 <Sys_GetCoreID>
    fa1c:	4603      	mov	r3, r0
    fa1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    fa20:	4a10      	ldr	r2, [pc, #64]	; (fa64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    fa22:	9b01      	ldr	r3, [sp, #4]
    fa24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d10d      	bne.n	fa48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa2c:	f7f1 f803 	bl	a36 <Port_schm_read_msr>
    fa30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa32:	9b00      	ldr	r3, [sp, #0]
    fa34:	f003 0301 	and.w	r3, r3, #1
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d100      	bne.n	fa3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    fa3e:	490a      	ldr	r1, [pc, #40]	; (fa68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    fa40:	9b01      	ldr	r3, [sp, #4]
    fa42:	9a00      	ldr	r2, [sp, #0]
    fa44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    fa48:	4a06      	ldr	r2, [pc, #24]	; (fa64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    fa4a:	9b01      	ldr	r3, [sp, #4]
    fa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa50:	1c5a      	adds	r2, r3, #1
    fa52:	4904      	ldr	r1, [pc, #16]	; (fa64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    fa54:	9b01      	ldr	r3, [sp, #4]
    fa56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa5a:	bf00      	nop
    fa5c:	b003      	add	sp, #12
    fa5e:	f85d fb04 	ldr.w	pc, [sp], #4
    fa62:	bf00      	nop
    fa64:	1fff9158 	.word	0x1fff9158
    fa68:	1fff9154 	.word	0x1fff9154

0000fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    fa6c:	b500      	push	{lr}
    fa6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa70:	f7f1 f8b0 	bl	bd4 <Sys_GetCoreID>
    fa74:	4603      	mov	r3, r0
    fa76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    fa78:	4a0d      	ldr	r2, [pc, #52]	; (fab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    fa7a:	9b01      	ldr	r3, [sp, #4]
    fa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa80:	1e5a      	subs	r2, r3, #1
    fa82:	490b      	ldr	r1, [pc, #44]	; (fab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    fa84:	9b01      	ldr	r3, [sp, #4]
    fa86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    fa8a:	4a0a      	ldr	r2, [pc, #40]	; (fab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    fa8c:	9b01      	ldr	r3, [sp, #4]
    fa8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa92:	f003 0301 	and.w	r3, r3, #1
    fa96:	2b00      	cmp	r3, #0
    fa98:	d106      	bne.n	faa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    fa9a:	4a05      	ldr	r2, [pc, #20]	; (fab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    fa9c:	9b01      	ldr	r3, [sp, #4]
    fa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faa2:	2b00      	cmp	r3, #0
    faa4:	d100      	bne.n	faa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    faa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    faa8:	bf00      	nop
    faaa:	b003      	add	sp, #12
    faac:	f85d fb04 	ldr.w	pc, [sp], #4
    fab0:	1fff9158 	.word	0x1fff9158
    fab4:	1fff9154 	.word	0x1fff9154

0000fab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    fab8:	b500      	push	{lr}
    faba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fabc:	f7f1 f88a 	bl	bd4 <Sys_GetCoreID>
    fac0:	4603      	mov	r3, r0
    fac2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    fac4:	4a10      	ldr	r2, [pc, #64]	; (fb08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    fac6:	9b01      	ldr	r3, [sp, #4]
    fac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    facc:	2b00      	cmp	r3, #0
    face:	d10d      	bne.n	faec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fad0:	f7f0 ffb1 	bl	a36 <Port_schm_read_msr>
    fad4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fad6:	9b00      	ldr	r3, [sp, #0]
    fad8:	f003 0301 	and.w	r3, r3, #1
    fadc:	2b00      	cmp	r3, #0
    fade:	d100      	bne.n	fae2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fae0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    fae2:	490a      	ldr	r1, [pc, #40]	; (fb0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    fae4:	9b01      	ldr	r3, [sp, #4]
    fae6:	9a00      	ldr	r2, [sp, #0]
    fae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    faec:	4a06      	ldr	r2, [pc, #24]	; (fb08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    faee:	9b01      	ldr	r3, [sp, #4]
    faf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf4:	1c5a      	adds	r2, r3, #1
    faf6:	4904      	ldr	r1, [pc, #16]	; (fb08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    faf8:	9b01      	ldr	r3, [sp, #4]
    fafa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fafe:	bf00      	nop
    fb00:	b003      	add	sp, #12
    fb02:	f85d fb04 	ldr.w	pc, [sp], #4
    fb06:	bf00      	nop
    fb08:	1fff9160 	.word	0x1fff9160
    fb0c:	1fff915c 	.word	0x1fff915c

0000fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    fb10:	b500      	push	{lr}
    fb12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb14:	f7f1 f85e 	bl	bd4 <Sys_GetCoreID>
    fb18:	4603      	mov	r3, r0
    fb1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    fb1c:	4a0d      	ldr	r2, [pc, #52]	; (fb54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    fb1e:	9b01      	ldr	r3, [sp, #4]
    fb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb24:	1e5a      	subs	r2, r3, #1
    fb26:	490b      	ldr	r1, [pc, #44]	; (fb54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    fb28:	9b01      	ldr	r3, [sp, #4]
    fb2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    fb2e:	4a0a      	ldr	r2, [pc, #40]	; (fb58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    fb30:	9b01      	ldr	r3, [sp, #4]
    fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb36:	f003 0301 	and.w	r3, r3, #1
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	d106      	bne.n	fb4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    fb3e:	4a05      	ldr	r2, [pc, #20]	; (fb54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    fb40:	9b01      	ldr	r3, [sp, #4]
    fb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb46:	2b00      	cmp	r3, #0
    fb48:	d100      	bne.n	fb4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb4c:	bf00      	nop
    fb4e:	b003      	add	sp, #12
    fb50:	f85d fb04 	ldr.w	pc, [sp], #4
    fb54:	1fff9160 	.word	0x1fff9160
    fb58:	1fff915c 	.word	0x1fff915c

0000fb5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    fb5c:	b500      	push	{lr}
    fb5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb60:	f7f1 f838 	bl	bd4 <Sys_GetCoreID>
    fb64:	4603      	mov	r3, r0
    fb66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    fb68:	4a10      	ldr	r2, [pc, #64]	; (fbac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    fb6a:	9b01      	ldr	r3, [sp, #4]
    fb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb70:	2b00      	cmp	r3, #0
    fb72:	d10d      	bne.n	fb90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb74:	f7f0 ff5f 	bl	a36 <Port_schm_read_msr>
    fb78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb7a:	9b00      	ldr	r3, [sp, #0]
    fb7c:	f003 0301 	and.w	r3, r3, #1
    fb80:	2b00      	cmp	r3, #0
    fb82:	d100      	bne.n	fb86 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    fb86:	490a      	ldr	r1, [pc, #40]	; (fbb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    fb88:	9b01      	ldr	r3, [sp, #4]
    fb8a:	9a00      	ldr	r2, [sp, #0]
    fb8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    fb90:	4a06      	ldr	r2, [pc, #24]	; (fbac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    fb92:	9b01      	ldr	r3, [sp, #4]
    fb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb98:	1c5a      	adds	r2, r3, #1
    fb9a:	4904      	ldr	r1, [pc, #16]	; (fbac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    fb9c:	9b01      	ldr	r3, [sp, #4]
    fb9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fba2:	bf00      	nop
    fba4:	b003      	add	sp, #12
    fba6:	f85d fb04 	ldr.w	pc, [sp], #4
    fbaa:	bf00      	nop
    fbac:	1fff9168 	.word	0x1fff9168
    fbb0:	1fff9164 	.word	0x1fff9164

0000fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    fbb4:	b500      	push	{lr}
    fbb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbb8:	f7f1 f80c 	bl	bd4 <Sys_GetCoreID>
    fbbc:	4603      	mov	r3, r0
    fbbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    fbc0:	4a0d      	ldr	r2, [pc, #52]	; (fbf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    fbc2:	9b01      	ldr	r3, [sp, #4]
    fbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbc8:	1e5a      	subs	r2, r3, #1
    fbca:	490b      	ldr	r1, [pc, #44]	; (fbf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    fbcc:	9b01      	ldr	r3, [sp, #4]
    fbce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    fbd2:	4a0a      	ldr	r2, [pc, #40]	; (fbfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    fbd4:	9b01      	ldr	r3, [sp, #4]
    fbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbda:	f003 0301 	and.w	r3, r3, #1
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d106      	bne.n	fbf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    fbe2:	4a05      	ldr	r2, [pc, #20]	; (fbf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    fbe4:	9b01      	ldr	r3, [sp, #4]
    fbe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbea:	2b00      	cmp	r3, #0
    fbec:	d100      	bne.n	fbf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbf0:	bf00      	nop
    fbf2:	b003      	add	sp, #12
    fbf4:	f85d fb04 	ldr.w	pc, [sp], #4
    fbf8:	1fff9168 	.word	0x1fff9168
    fbfc:	1fff9164 	.word	0x1fff9164

0000fc00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    fc00:	b500      	push	{lr}
    fc02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc04:	f7f0 ffe6 	bl	bd4 <Sys_GetCoreID>
    fc08:	4603      	mov	r3, r0
    fc0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    fc0c:	4a10      	ldr	r2, [pc, #64]	; (fc50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    fc0e:	9b01      	ldr	r3, [sp, #4]
    fc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc14:	2b00      	cmp	r3, #0
    fc16:	d10d      	bne.n	fc34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc18:	f7f0 ff0d 	bl	a36 <Port_schm_read_msr>
    fc1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc1e:	9b00      	ldr	r3, [sp, #0]
    fc20:	f003 0301 	and.w	r3, r3, #1
    fc24:	2b00      	cmp	r3, #0
    fc26:	d100      	bne.n	fc2a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    fc2a:	490a      	ldr	r1, [pc, #40]	; (fc54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    fc2c:	9b01      	ldr	r3, [sp, #4]
    fc2e:	9a00      	ldr	r2, [sp, #0]
    fc30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    fc34:	4a06      	ldr	r2, [pc, #24]	; (fc50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    fc36:	9b01      	ldr	r3, [sp, #4]
    fc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc3c:	1c5a      	adds	r2, r3, #1
    fc3e:	4904      	ldr	r1, [pc, #16]	; (fc50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    fc40:	9b01      	ldr	r3, [sp, #4]
    fc42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc46:	bf00      	nop
    fc48:	b003      	add	sp, #12
    fc4a:	f85d fb04 	ldr.w	pc, [sp], #4
    fc4e:	bf00      	nop
    fc50:	1fff9170 	.word	0x1fff9170
    fc54:	1fff916c 	.word	0x1fff916c

0000fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    fc58:	b500      	push	{lr}
    fc5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc5c:	f7f0 ffba 	bl	bd4 <Sys_GetCoreID>
    fc60:	4603      	mov	r3, r0
    fc62:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    fc64:	4a0d      	ldr	r2, [pc, #52]	; (fc9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    fc66:	9b01      	ldr	r3, [sp, #4]
    fc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc6c:	1e5a      	subs	r2, r3, #1
    fc6e:	490b      	ldr	r1, [pc, #44]	; (fc9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    fc70:	9b01      	ldr	r3, [sp, #4]
    fc72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    fc76:	4a0a      	ldr	r2, [pc, #40]	; (fca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    fc78:	9b01      	ldr	r3, [sp, #4]
    fc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc7e:	f003 0301 	and.w	r3, r3, #1
    fc82:	2b00      	cmp	r3, #0
    fc84:	d106      	bne.n	fc94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    fc86:	4a05      	ldr	r2, [pc, #20]	; (fc9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    fc88:	9b01      	ldr	r3, [sp, #4]
    fc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc8e:	2b00      	cmp	r3, #0
    fc90:	d100      	bne.n	fc94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc94:	bf00      	nop
    fc96:	b003      	add	sp, #12
    fc98:	f85d fb04 	ldr.w	pc, [sp], #4
    fc9c:	1fff9170 	.word	0x1fff9170
    fca0:	1fff916c 	.word	0x1fff916c

0000fca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    fca4:	b500      	push	{lr}
    fca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fca8:	f7f0 ff94 	bl	bd4 <Sys_GetCoreID>
    fcac:	4603      	mov	r3, r0
    fcae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    fcb0:	4a10      	ldr	r2, [pc, #64]	; (fcf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    fcb2:	9b01      	ldr	r3, [sp, #4]
    fcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcb8:	2b00      	cmp	r3, #0
    fcba:	d10d      	bne.n	fcd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fcbc:	f7f0 febb 	bl	a36 <Port_schm_read_msr>
    fcc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fcc2:	9b00      	ldr	r3, [sp, #0]
    fcc4:	f003 0301 	and.w	r3, r3, #1
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d100      	bne.n	fcce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    fcce:	490a      	ldr	r1, [pc, #40]	; (fcf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    fcd0:	9b01      	ldr	r3, [sp, #4]
    fcd2:	9a00      	ldr	r2, [sp, #0]
    fcd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    fcd8:	4a06      	ldr	r2, [pc, #24]	; (fcf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    fcda:	9b01      	ldr	r3, [sp, #4]
    fcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fce0:	1c5a      	adds	r2, r3, #1
    fce2:	4904      	ldr	r1, [pc, #16]	; (fcf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    fce4:	9b01      	ldr	r3, [sp, #4]
    fce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fcea:	bf00      	nop
    fcec:	b003      	add	sp, #12
    fcee:	f85d fb04 	ldr.w	pc, [sp], #4
    fcf2:	bf00      	nop
    fcf4:	1fff9178 	.word	0x1fff9178
    fcf8:	1fff9174 	.word	0x1fff9174

0000fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    fcfc:	b500      	push	{lr}
    fcfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd00:	f7f0 ff68 	bl	bd4 <Sys_GetCoreID>
    fd04:	4603      	mov	r3, r0
    fd06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    fd08:	4a0d      	ldr	r2, [pc, #52]	; (fd40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    fd0a:	9b01      	ldr	r3, [sp, #4]
    fd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd10:	1e5a      	subs	r2, r3, #1
    fd12:	490b      	ldr	r1, [pc, #44]	; (fd40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    fd14:	9b01      	ldr	r3, [sp, #4]
    fd16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    fd1a:	4a0a      	ldr	r2, [pc, #40]	; (fd44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    fd1c:	9b01      	ldr	r3, [sp, #4]
    fd1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd22:	f003 0301 	and.w	r3, r3, #1
    fd26:	2b00      	cmp	r3, #0
    fd28:	d106      	bne.n	fd38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    fd2a:	4a05      	ldr	r2, [pc, #20]	; (fd40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    fd2c:	9b01      	ldr	r3, [sp, #4]
    fd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd32:	2b00      	cmp	r3, #0
    fd34:	d100      	bne.n	fd38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd38:	bf00      	nop
    fd3a:	b003      	add	sp, #12
    fd3c:	f85d fb04 	ldr.w	pc, [sp], #4
    fd40:	1fff9178 	.word	0x1fff9178
    fd44:	1fff9174 	.word	0x1fff9174

0000fd48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    fd48:	b500      	push	{lr}
    fd4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd4c:	f7f0 ff42 	bl	bd4 <Sys_GetCoreID>
    fd50:	4603      	mov	r3, r0
    fd52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    fd54:	4a10      	ldr	r2, [pc, #64]	; (fd98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fd56:	9b01      	ldr	r3, [sp, #4]
    fd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	d10d      	bne.n	fd7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd60:	f7f0 fe69 	bl	a36 <Port_schm_read_msr>
    fd64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd66:	9b00      	ldr	r3, [sp, #0]
    fd68:	f003 0301 	and.w	r3, r3, #1
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d100      	bne.n	fd72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    fd72:	490a      	ldr	r1, [pc, #40]	; (fd9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	9a00      	ldr	r2, [sp, #0]
    fd78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    fd7c:	4a06      	ldr	r2, [pc, #24]	; (fd98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fd7e:	9b01      	ldr	r3, [sp, #4]
    fd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd84:	1c5a      	adds	r2, r3, #1
    fd86:	4904      	ldr	r1, [pc, #16]	; (fd98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fd88:	9b01      	ldr	r3, [sp, #4]
    fd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd8e:	bf00      	nop
    fd90:	b003      	add	sp, #12
    fd92:	f85d fb04 	ldr.w	pc, [sp], #4
    fd96:	bf00      	nop
    fd98:	1fff9180 	.word	0x1fff9180
    fd9c:	1fff917c 	.word	0x1fff917c

0000fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    fda0:	b500      	push	{lr}
    fda2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fda4:	f7f0 ff16 	bl	bd4 <Sys_GetCoreID>
    fda8:	4603      	mov	r3, r0
    fdaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    fdac:	4a0d      	ldr	r2, [pc, #52]	; (fde4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fdae:	9b01      	ldr	r3, [sp, #4]
    fdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb4:	1e5a      	subs	r2, r3, #1
    fdb6:	490b      	ldr	r1, [pc, #44]	; (fde4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fdb8:	9b01      	ldr	r3, [sp, #4]
    fdba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    fdbe:	4a0a      	ldr	r2, [pc, #40]	; (fde8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    fdc0:	9b01      	ldr	r3, [sp, #4]
    fdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdc6:	f003 0301 	and.w	r3, r3, #1
    fdca:	2b00      	cmp	r3, #0
    fdcc:	d106      	bne.n	fddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    fdce:	4a05      	ldr	r2, [pc, #20]	; (fde4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fdd0:	9b01      	ldr	r3, [sp, #4]
    fdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd6:	2b00      	cmp	r3, #0
    fdd8:	d100      	bne.n	fddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fddc:	bf00      	nop
    fdde:	b003      	add	sp, #12
    fde0:	f85d fb04 	ldr.w	pc, [sp], #4
    fde4:	1fff9180 	.word	0x1fff9180
    fde8:	1fff917c 	.word	0x1fff917c

0000fdec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    fdec:	b500      	push	{lr}
    fdee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdf0:	f7f0 fef0 	bl	bd4 <Sys_GetCoreID>
    fdf4:	4603      	mov	r3, r0
    fdf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    fdf8:	4a10      	ldr	r2, [pc, #64]	; (fe3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fdfa:	9b01      	ldr	r3, [sp, #4]
    fdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe00:	2b00      	cmp	r3, #0
    fe02:	d10d      	bne.n	fe20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe04:	f7f0 fe17 	bl	a36 <Port_schm_read_msr>
    fe08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe0a:	9b00      	ldr	r3, [sp, #0]
    fe0c:	f003 0301 	and.w	r3, r3, #1
    fe10:	2b00      	cmp	r3, #0
    fe12:	d100      	bne.n	fe16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    fe16:	490a      	ldr	r1, [pc, #40]	; (fe40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    fe18:	9b01      	ldr	r3, [sp, #4]
    fe1a:	9a00      	ldr	r2, [sp, #0]
    fe1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    fe20:	4a06      	ldr	r2, [pc, #24]	; (fe3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fe22:	9b01      	ldr	r3, [sp, #4]
    fe24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe28:	1c5a      	adds	r2, r3, #1
    fe2a:	4904      	ldr	r1, [pc, #16]	; (fe3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fe2c:	9b01      	ldr	r3, [sp, #4]
    fe2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe32:	bf00      	nop
    fe34:	b003      	add	sp, #12
    fe36:	f85d fb04 	ldr.w	pc, [sp], #4
    fe3a:	bf00      	nop
    fe3c:	1fff9188 	.word	0x1fff9188
    fe40:	1fff9184 	.word	0x1fff9184

0000fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    fe44:	b500      	push	{lr}
    fe46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe48:	f7f0 fec4 	bl	bd4 <Sys_GetCoreID>
    fe4c:	4603      	mov	r3, r0
    fe4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    fe50:	4a0d      	ldr	r2, [pc, #52]	; (fe88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fe52:	9b01      	ldr	r3, [sp, #4]
    fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe58:	1e5a      	subs	r2, r3, #1
    fe5a:	490b      	ldr	r1, [pc, #44]	; (fe88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fe5c:	9b01      	ldr	r3, [sp, #4]
    fe5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    fe62:	4a0a      	ldr	r2, [pc, #40]	; (fe8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    fe64:	9b01      	ldr	r3, [sp, #4]
    fe66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe6a:	f003 0301 	and.w	r3, r3, #1
    fe6e:	2b00      	cmp	r3, #0
    fe70:	d106      	bne.n	fe80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    fe72:	4a05      	ldr	r2, [pc, #20]	; (fe88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fe74:	9b01      	ldr	r3, [sp, #4]
    fe76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe7a:	2b00      	cmp	r3, #0
    fe7c:	d100      	bne.n	fe80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe80:	bf00      	nop
    fe82:	b003      	add	sp, #12
    fe84:	f85d fb04 	ldr.w	pc, [sp], #4
    fe88:	1fff9188 	.word	0x1fff9188
    fe8c:	1fff9184 	.word	0x1fff9184

0000fe90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    fe90:	b500      	push	{lr}
    fe92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe94:	f7f0 fe9e 	bl	bd4 <Sys_GetCoreID>
    fe98:	4603      	mov	r3, r0
    fe9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    fe9c:	4a10      	ldr	r2, [pc, #64]	; (fee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fe9e:	9b01      	ldr	r3, [sp, #4]
    fea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fea4:	2b00      	cmp	r3, #0
    fea6:	d10d      	bne.n	fec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fea8:	f7f0 fdc5 	bl	a36 <Port_schm_read_msr>
    feac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    feae:	9b00      	ldr	r3, [sp, #0]
    feb0:	f003 0301 	and.w	r3, r3, #1
    feb4:	2b00      	cmp	r3, #0
    feb6:	d100      	bne.n	feba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    feb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    feba:	490a      	ldr	r1, [pc, #40]	; (fee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    febc:	9b01      	ldr	r3, [sp, #4]
    febe:	9a00      	ldr	r2, [sp, #0]
    fec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    fec4:	4a06      	ldr	r2, [pc, #24]	; (fee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fec6:	9b01      	ldr	r3, [sp, #4]
    fec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fecc:	1c5a      	adds	r2, r3, #1
    fece:	4904      	ldr	r1, [pc, #16]	; (fee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fed0:	9b01      	ldr	r3, [sp, #4]
    fed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fed6:	bf00      	nop
    fed8:	b003      	add	sp, #12
    feda:	f85d fb04 	ldr.w	pc, [sp], #4
    fede:	bf00      	nop
    fee0:	1fff9190 	.word	0x1fff9190
    fee4:	1fff918c 	.word	0x1fff918c

0000fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    fee8:	b500      	push	{lr}
    feea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feec:	f7f0 fe72 	bl	bd4 <Sys_GetCoreID>
    fef0:	4603      	mov	r3, r0
    fef2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    fef4:	4a0d      	ldr	r2, [pc, #52]	; (ff2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fef6:	9b01      	ldr	r3, [sp, #4]
    fef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fefc:	1e5a      	subs	r2, r3, #1
    fefe:	490b      	ldr	r1, [pc, #44]	; (ff2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ff00:	9b01      	ldr	r3, [sp, #4]
    ff02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    ff06:	4a0a      	ldr	r2, [pc, #40]	; (ff30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    ff08:	9b01      	ldr	r3, [sp, #4]
    ff0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff0e:	f003 0301 	and.w	r3, r3, #1
    ff12:	2b00      	cmp	r3, #0
    ff14:	d106      	bne.n	ff24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    ff16:	4a05      	ldr	r2, [pc, #20]	; (ff2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ff18:	9b01      	ldr	r3, [sp, #4]
    ff1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff1e:	2b00      	cmp	r3, #0
    ff20:	d100      	bne.n	ff24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff24:	bf00      	nop
    ff26:	b003      	add	sp, #12
    ff28:	f85d fb04 	ldr.w	pc, [sp], #4
    ff2c:	1fff9190 	.word	0x1fff9190
    ff30:	1fff918c 	.word	0x1fff918c

0000ff34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ff34:	b500      	push	{lr}
    ff36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff38:	f7f0 fe4c 	bl	bd4 <Sys_GetCoreID>
    ff3c:	4603      	mov	r3, r0
    ff3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    ff40:	4a10      	ldr	r2, [pc, #64]	; (ff84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ff42:	9b01      	ldr	r3, [sp, #4]
    ff44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff48:	2b00      	cmp	r3, #0
    ff4a:	d10d      	bne.n	ff68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff4c:	f7f0 fd73 	bl	a36 <Port_schm_read_msr>
    ff50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff52:	9b00      	ldr	r3, [sp, #0]
    ff54:	f003 0301 	and.w	r3, r3, #1
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d100      	bne.n	ff5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    ff5e:	490a      	ldr	r1, [pc, #40]	; (ff88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    ff60:	9b01      	ldr	r3, [sp, #4]
    ff62:	9a00      	ldr	r2, [sp, #0]
    ff64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    ff68:	4a06      	ldr	r2, [pc, #24]	; (ff84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ff6a:	9b01      	ldr	r3, [sp, #4]
    ff6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff70:	1c5a      	adds	r2, r3, #1
    ff72:	4904      	ldr	r1, [pc, #16]	; (ff84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ff74:	9b01      	ldr	r3, [sp, #4]
    ff76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff7a:	bf00      	nop
    ff7c:	b003      	add	sp, #12
    ff7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff82:	bf00      	nop
    ff84:	1fff9198 	.word	0x1fff9198
    ff88:	1fff9194 	.word	0x1fff9194

0000ff8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ff8c:	b500      	push	{lr}
    ff8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff90:	f7f0 fe20 	bl	bd4 <Sys_GetCoreID>
    ff94:	4603      	mov	r3, r0
    ff96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    ff98:	4a0d      	ldr	r2, [pc, #52]	; (ffd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    ff9a:	9b01      	ldr	r3, [sp, #4]
    ff9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa0:	1e5a      	subs	r2, r3, #1
    ffa2:	490b      	ldr	r1, [pc, #44]	; (ffd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    ffa4:	9b01      	ldr	r3, [sp, #4]
    ffa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    ffaa:	4a0a      	ldr	r2, [pc, #40]	; (ffd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    ffac:	9b01      	ldr	r3, [sp, #4]
    ffae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb2:	f003 0301 	and.w	r3, r3, #1
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d106      	bne.n	ffc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    ffba:	4a05      	ldr	r2, [pc, #20]	; (ffd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    ffbc:	9b01      	ldr	r3, [sp, #4]
    ffbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc2:	2b00      	cmp	r3, #0
    ffc4:	d100      	bne.n	ffc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffc8:	bf00      	nop
    ffca:	b003      	add	sp, #12
    ffcc:	f85d fb04 	ldr.w	pc, [sp], #4
    ffd0:	1fff9198 	.word	0x1fff9198
    ffd4:	1fff9194 	.word	0x1fff9194

0000ffd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    ffd8:	b500      	push	{lr}
    ffda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffdc:	f7f0 fdfa 	bl	bd4 <Sys_GetCoreID>
    ffe0:	4603      	mov	r3, r0
    ffe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    ffe4:	4a10      	ldr	r2, [pc, #64]	; (10028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ffe6:	9b01      	ldr	r3, [sp, #4]
    ffe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffec:	2b00      	cmp	r3, #0
    ffee:	d10d      	bne.n	1000c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fff0:	f7f0 fd21 	bl	a36 <Port_schm_read_msr>
    fff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fff6:	9b00      	ldr	r3, [sp, #0]
    fff8:	f003 0301 	and.w	r3, r3, #1
    fffc:	2b00      	cmp	r3, #0
    fffe:	d100      	bne.n	10002 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   10002:	490a      	ldr	r1, [pc, #40]	; (1002c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   10004:	9b01      	ldr	r3, [sp, #4]
   10006:	9a00      	ldr	r2, [sp, #0]
   10008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   1000c:	4a06      	ldr	r2, [pc, #24]	; (10028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1000e:	9b01      	ldr	r3, [sp, #4]
   10010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10014:	1c5a      	adds	r2, r3, #1
   10016:	4904      	ldr	r1, [pc, #16]	; (10028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   10018:	9b01      	ldr	r3, [sp, #4]
   1001a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1001e:	bf00      	nop
   10020:	b003      	add	sp, #12
   10022:	f85d fb04 	ldr.w	pc, [sp], #4
   10026:	bf00      	nop
   10028:	1fff91a0 	.word	0x1fff91a0
   1002c:	1fff919c 	.word	0x1fff919c

00010030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   10030:	b500      	push	{lr}
   10032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10034:	f7f0 fdce 	bl	bd4 <Sys_GetCoreID>
   10038:	4603      	mov	r3, r0
   1003a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   1003c:	4a0d      	ldr	r2, [pc, #52]	; (10074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1003e:	9b01      	ldr	r3, [sp, #4]
   10040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10044:	1e5a      	subs	r2, r3, #1
   10046:	490b      	ldr	r1, [pc, #44]	; (10074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   10048:	9b01      	ldr	r3, [sp, #4]
   1004a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1004e:	4a0a      	ldr	r2, [pc, #40]	; (10078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   10050:	9b01      	ldr	r3, [sp, #4]
   10052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10056:	f003 0301 	and.w	r3, r3, #1
   1005a:	2b00      	cmp	r3, #0
   1005c:	d106      	bne.n	1006c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   1005e:	4a05      	ldr	r2, [pc, #20]	; (10074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   10060:	9b01      	ldr	r3, [sp, #4]
   10062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10066:	2b00      	cmp	r3, #0
   10068:	d100      	bne.n	1006c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1006a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1006c:	bf00      	nop
   1006e:	b003      	add	sp, #12
   10070:	f85d fb04 	ldr.w	pc, [sp], #4
   10074:	1fff91a0 	.word	0x1fff91a0
   10078:	1fff919c 	.word	0x1fff919c

0001007c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   1007c:	b500      	push	{lr}
   1007e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10080:	f7f0 fda8 	bl	bd4 <Sys_GetCoreID>
   10084:	4603      	mov	r3, r0
   10086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   10088:	4a10      	ldr	r2, [pc, #64]	; (100cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1008a:	9b01      	ldr	r3, [sp, #4]
   1008c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10090:	2b00      	cmp	r3, #0
   10092:	d10d      	bne.n	100b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10094:	f7f0 fccf 	bl	a36 <Port_schm_read_msr>
   10098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1009a:	9b00      	ldr	r3, [sp, #0]
   1009c:	f003 0301 	and.w	r3, r3, #1
   100a0:	2b00      	cmp	r3, #0
   100a2:	d100      	bne.n	100a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   100a6:	490a      	ldr	r1, [pc, #40]	; (100d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   100a8:	9b01      	ldr	r3, [sp, #4]
   100aa:	9a00      	ldr	r2, [sp, #0]
   100ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   100b0:	4a06      	ldr	r2, [pc, #24]	; (100cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   100b2:	9b01      	ldr	r3, [sp, #4]
   100b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b8:	1c5a      	adds	r2, r3, #1
   100ba:	4904      	ldr	r1, [pc, #16]	; (100cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   100bc:	9b01      	ldr	r3, [sp, #4]
   100be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100c2:	bf00      	nop
   100c4:	b003      	add	sp, #12
   100c6:	f85d fb04 	ldr.w	pc, [sp], #4
   100ca:	bf00      	nop
   100cc:	1fff91a8 	.word	0x1fff91a8
   100d0:	1fff91a4 	.word	0x1fff91a4

000100d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   100d4:	b500      	push	{lr}
   100d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100d8:	f7f0 fd7c 	bl	bd4 <Sys_GetCoreID>
   100dc:	4603      	mov	r3, r0
   100de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   100e0:	4a0d      	ldr	r2, [pc, #52]	; (10118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   100e2:	9b01      	ldr	r3, [sp, #4]
   100e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100e8:	1e5a      	subs	r2, r3, #1
   100ea:	490b      	ldr	r1, [pc, #44]	; (10118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   100ec:	9b01      	ldr	r3, [sp, #4]
   100ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   100f2:	4a0a      	ldr	r2, [pc, #40]	; (1011c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   100f4:	9b01      	ldr	r3, [sp, #4]
   100f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fa:	f003 0301 	and.w	r3, r3, #1
   100fe:	2b00      	cmp	r3, #0
   10100:	d106      	bne.n	10110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   10102:	4a05      	ldr	r2, [pc, #20]	; (10118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   10104:	9b01      	ldr	r3, [sp, #4]
   10106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1010a:	2b00      	cmp	r3, #0
   1010c:	d100      	bne.n	10110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1010e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10110:	bf00      	nop
   10112:	b003      	add	sp, #12
   10114:	f85d fb04 	ldr.w	pc, [sp], #4
   10118:	1fff91a8 	.word	0x1fff91a8
   1011c:	1fff91a4 	.word	0x1fff91a4

00010120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   10120:	b500      	push	{lr}
   10122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10124:	f7f0 fd56 	bl	bd4 <Sys_GetCoreID>
   10128:	4603      	mov	r3, r0
   1012a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1012c:	4a10      	ldr	r2, [pc, #64]	; (10170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1012e:	9b01      	ldr	r3, [sp, #4]
   10130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10134:	2b00      	cmp	r3, #0
   10136:	d10d      	bne.n	10154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10138:	f7f0 fc7d 	bl	a36 <Port_schm_read_msr>
   1013c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1013e:	9b00      	ldr	r3, [sp, #0]
   10140:	f003 0301 	and.w	r3, r3, #1
   10144:	2b00      	cmp	r3, #0
   10146:	d100      	bne.n	1014a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1014a:	490a      	ldr	r1, [pc, #40]	; (10174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   1014c:	9b01      	ldr	r3, [sp, #4]
   1014e:	9a00      	ldr	r2, [sp, #0]
   10150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   10154:	4a06      	ldr	r2, [pc, #24]	; (10170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10156:	9b01      	ldr	r3, [sp, #4]
   10158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1015c:	1c5a      	adds	r2, r3, #1
   1015e:	4904      	ldr	r1, [pc, #16]	; (10170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10160:	9b01      	ldr	r3, [sp, #4]
   10162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10166:	bf00      	nop
   10168:	b003      	add	sp, #12
   1016a:	f85d fb04 	ldr.w	pc, [sp], #4
   1016e:	bf00      	nop
   10170:	1fff91b0 	.word	0x1fff91b0
   10174:	1fff91ac 	.word	0x1fff91ac

00010178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   10178:	b500      	push	{lr}
   1017a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1017c:	f7f0 fd2a 	bl	bd4 <Sys_GetCoreID>
   10180:	4603      	mov	r3, r0
   10182:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   10184:	4a0d      	ldr	r2, [pc, #52]	; (101bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   10186:	9b01      	ldr	r3, [sp, #4]
   10188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1018c:	1e5a      	subs	r2, r3, #1
   1018e:	490b      	ldr	r1, [pc, #44]	; (101bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   10190:	9b01      	ldr	r3, [sp, #4]
   10192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10196:	4a0a      	ldr	r2, [pc, #40]	; (101c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   10198:	9b01      	ldr	r3, [sp, #4]
   1019a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1019e:	f003 0301 	and.w	r3, r3, #1
   101a2:	2b00      	cmp	r3, #0
   101a4:	d106      	bne.n	101b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   101a6:	4a05      	ldr	r2, [pc, #20]	; (101bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   101a8:	9b01      	ldr	r3, [sp, #4]
   101aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ae:	2b00      	cmp	r3, #0
   101b0:	d100      	bne.n	101b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101b4:	bf00      	nop
   101b6:	b003      	add	sp, #12
   101b8:	f85d fb04 	ldr.w	pc, [sp], #4
   101bc:	1fff91b0 	.word	0x1fff91b0
   101c0:	1fff91ac 	.word	0x1fff91ac

000101c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   101c4:	b500      	push	{lr}
   101c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101c8:	f7f0 fd04 	bl	bd4 <Sys_GetCoreID>
   101cc:	4603      	mov	r3, r0
   101ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   101d0:	4a10      	ldr	r2, [pc, #64]	; (10214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   101d2:	9b01      	ldr	r3, [sp, #4]
   101d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101d8:	2b00      	cmp	r3, #0
   101da:	d10d      	bne.n	101f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101dc:	f7f0 fc2b 	bl	a36 <Port_schm_read_msr>
   101e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101e2:	9b00      	ldr	r3, [sp, #0]
   101e4:	f003 0301 	and.w	r3, r3, #1
   101e8:	2b00      	cmp	r3, #0
   101ea:	d100      	bne.n	101ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   101ee:	490a      	ldr	r1, [pc, #40]	; (10218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   101f0:	9b01      	ldr	r3, [sp, #4]
   101f2:	9a00      	ldr	r2, [sp, #0]
   101f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   101f8:	4a06      	ldr	r2, [pc, #24]	; (10214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   101fa:	9b01      	ldr	r3, [sp, #4]
   101fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10200:	1c5a      	adds	r2, r3, #1
   10202:	4904      	ldr	r1, [pc, #16]	; (10214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   10204:	9b01      	ldr	r3, [sp, #4]
   10206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1020a:	bf00      	nop
   1020c:	b003      	add	sp, #12
   1020e:	f85d fb04 	ldr.w	pc, [sp], #4
   10212:	bf00      	nop
   10214:	1fff91b8 	.word	0x1fff91b8
   10218:	1fff91b4 	.word	0x1fff91b4

0001021c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1021c:	b500      	push	{lr}
   1021e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10220:	f7f0 fcd8 	bl	bd4 <Sys_GetCoreID>
   10224:	4603      	mov	r3, r0
   10226:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   10228:	4a0d      	ldr	r2, [pc, #52]	; (10260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1022a:	9b01      	ldr	r3, [sp, #4]
   1022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10230:	1e5a      	subs	r2, r3, #1
   10232:	490b      	ldr	r1, [pc, #44]	; (10260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   10234:	9b01      	ldr	r3, [sp, #4]
   10236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1023a:	4a0a      	ldr	r2, [pc, #40]	; (10264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   1023c:	9b01      	ldr	r3, [sp, #4]
   1023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10242:	f003 0301 	and.w	r3, r3, #1
   10246:	2b00      	cmp	r3, #0
   10248:	d106      	bne.n	10258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1024a:	4a05      	ldr	r2, [pc, #20]	; (10260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1024c:	9b01      	ldr	r3, [sp, #4]
   1024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10252:	2b00      	cmp	r3, #0
   10254:	d100      	bne.n	10258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10258:	bf00      	nop
   1025a:	b003      	add	sp, #12
   1025c:	f85d fb04 	ldr.w	pc, [sp], #4
   10260:	1fff91b8 	.word	0x1fff91b8
   10264:	1fff91b4 	.word	0x1fff91b4

00010268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   10268:	b500      	push	{lr}
   1026a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1026c:	f7f0 fcb2 	bl	bd4 <Sys_GetCoreID>
   10270:	4603      	mov	r3, r0
   10272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   10274:	4a10      	ldr	r2, [pc, #64]	; (102b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   10276:	9b01      	ldr	r3, [sp, #4]
   10278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1027c:	2b00      	cmp	r3, #0
   1027e:	d10d      	bne.n	1029c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10280:	f7f0 fbd9 	bl	a36 <Port_schm_read_msr>
   10284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10286:	9b00      	ldr	r3, [sp, #0]
   10288:	f003 0301 	and.w	r3, r3, #1
   1028c:	2b00      	cmp	r3, #0
   1028e:	d100      	bne.n	10292 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10292:	490a      	ldr	r1, [pc, #40]	; (102bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   10294:	9b01      	ldr	r3, [sp, #4]
   10296:	9a00      	ldr	r2, [sp, #0]
   10298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   1029c:	4a06      	ldr	r2, [pc, #24]	; (102b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1029e:	9b01      	ldr	r3, [sp, #4]
   102a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a4:	1c5a      	adds	r2, r3, #1
   102a6:	4904      	ldr	r1, [pc, #16]	; (102b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   102a8:	9b01      	ldr	r3, [sp, #4]
   102aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102ae:	bf00      	nop
   102b0:	b003      	add	sp, #12
   102b2:	f85d fb04 	ldr.w	pc, [sp], #4
   102b6:	bf00      	nop
   102b8:	1fff91c0 	.word	0x1fff91c0
   102bc:	1fff91bc 	.word	0x1fff91bc

000102c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   102c0:	b500      	push	{lr}
   102c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102c4:	f7f0 fc86 	bl	bd4 <Sys_GetCoreID>
   102c8:	4603      	mov	r3, r0
   102ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   102cc:	4a0d      	ldr	r2, [pc, #52]	; (10304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   102ce:	9b01      	ldr	r3, [sp, #4]
   102d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102d4:	1e5a      	subs	r2, r3, #1
   102d6:	490b      	ldr	r1, [pc, #44]	; (10304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   102d8:	9b01      	ldr	r3, [sp, #4]
   102da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   102de:	4a0a      	ldr	r2, [pc, #40]	; (10308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   102e0:	9b01      	ldr	r3, [sp, #4]
   102e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102e6:	f003 0301 	and.w	r3, r3, #1
   102ea:	2b00      	cmp	r3, #0
   102ec:	d106      	bne.n	102fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   102ee:	4a05      	ldr	r2, [pc, #20]	; (10304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   102f0:	9b01      	ldr	r3, [sp, #4]
   102f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102f6:	2b00      	cmp	r3, #0
   102f8:	d100      	bne.n	102fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102fc:	bf00      	nop
   102fe:	b003      	add	sp, #12
   10300:	f85d fb04 	ldr.w	pc, [sp], #4
   10304:	1fff91c0 	.word	0x1fff91c0
   10308:	1fff91bc 	.word	0x1fff91bc

0001030c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   1030c:	b500      	push	{lr}
   1030e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10310:	f7f0 fc60 	bl	bd4 <Sys_GetCoreID>
   10314:	4603      	mov	r3, r0
   10316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   10318:	4a10      	ldr	r2, [pc, #64]	; (1035c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1031a:	9b01      	ldr	r3, [sp, #4]
   1031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10320:	2b00      	cmp	r3, #0
   10322:	d10d      	bne.n	10340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10324:	f7f0 fb87 	bl	a36 <Port_schm_read_msr>
   10328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1032a:	9b00      	ldr	r3, [sp, #0]
   1032c:	f003 0301 	and.w	r3, r3, #1
   10330:	2b00      	cmp	r3, #0
   10332:	d100      	bne.n	10336 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10336:	490a      	ldr	r1, [pc, #40]	; (10360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   10338:	9b01      	ldr	r3, [sp, #4]
   1033a:	9a00      	ldr	r2, [sp, #0]
   1033c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   10340:	4a06      	ldr	r2, [pc, #24]	; (1035c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   10342:	9b01      	ldr	r3, [sp, #4]
   10344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10348:	1c5a      	adds	r2, r3, #1
   1034a:	4904      	ldr	r1, [pc, #16]	; (1035c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1034c:	9b01      	ldr	r3, [sp, #4]
   1034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10352:	bf00      	nop
   10354:	b003      	add	sp, #12
   10356:	f85d fb04 	ldr.w	pc, [sp], #4
   1035a:	bf00      	nop
   1035c:	1fff91c8 	.word	0x1fff91c8
   10360:	1fff91c4 	.word	0x1fff91c4

00010364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   10364:	b500      	push	{lr}
   10366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10368:	f7f0 fc34 	bl	bd4 <Sys_GetCoreID>
   1036c:	4603      	mov	r3, r0
   1036e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   10370:	4a0d      	ldr	r2, [pc, #52]	; (103a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10372:	9b01      	ldr	r3, [sp, #4]
   10374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10378:	1e5a      	subs	r2, r3, #1
   1037a:	490b      	ldr	r1, [pc, #44]	; (103a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   1037c:	9b01      	ldr	r3, [sp, #4]
   1037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10382:	4a0a      	ldr	r2, [pc, #40]	; (103ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   10384:	9b01      	ldr	r3, [sp, #4]
   10386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1038a:	f003 0301 	and.w	r3, r3, #1
   1038e:	2b00      	cmp	r3, #0
   10390:	d106      	bne.n	103a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   10392:	4a05      	ldr	r2, [pc, #20]	; (103a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10394:	9b01      	ldr	r3, [sp, #4]
   10396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1039a:	2b00      	cmp	r3, #0
   1039c:	d100      	bne.n	103a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1039e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103a0:	bf00      	nop
   103a2:	b003      	add	sp, #12
   103a4:	f85d fb04 	ldr.w	pc, [sp], #4
   103a8:	1fff91c8 	.word	0x1fff91c8
   103ac:	1fff91c4 	.word	0x1fff91c4

000103b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   103b0:	b500      	push	{lr}
   103b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103b4:	f7f0 fc0e 	bl	bd4 <Sys_GetCoreID>
   103b8:	4603      	mov	r3, r0
   103ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   103bc:	4a10      	ldr	r2, [pc, #64]	; (10400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   103be:	9b01      	ldr	r3, [sp, #4]
   103c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103c4:	2b00      	cmp	r3, #0
   103c6:	d10d      	bne.n	103e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103c8:	f7f0 fb35 	bl	a36 <Port_schm_read_msr>
   103cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103ce:	9b00      	ldr	r3, [sp, #0]
   103d0:	f003 0301 	and.w	r3, r3, #1
   103d4:	2b00      	cmp	r3, #0
   103d6:	d100      	bne.n	103da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   103da:	490a      	ldr	r1, [pc, #40]	; (10404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   103dc:	9b01      	ldr	r3, [sp, #4]
   103de:	9a00      	ldr	r2, [sp, #0]
   103e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   103e4:	4a06      	ldr	r2, [pc, #24]	; (10400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   103e6:	9b01      	ldr	r3, [sp, #4]
   103e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ec:	1c5a      	adds	r2, r3, #1
   103ee:	4904      	ldr	r1, [pc, #16]	; (10400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   103f0:	9b01      	ldr	r3, [sp, #4]
   103f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103f6:	bf00      	nop
   103f8:	b003      	add	sp, #12
   103fa:	f85d fb04 	ldr.w	pc, [sp], #4
   103fe:	bf00      	nop
   10400:	1fff91d0 	.word	0x1fff91d0
   10404:	1fff91cc 	.word	0x1fff91cc

00010408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   10408:	b500      	push	{lr}
   1040a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1040c:	f7f0 fbe2 	bl	bd4 <Sys_GetCoreID>
   10410:	4603      	mov	r3, r0
   10412:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   10414:	4a0d      	ldr	r2, [pc, #52]	; (1044c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10416:	9b01      	ldr	r3, [sp, #4]
   10418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1041c:	1e5a      	subs	r2, r3, #1
   1041e:	490b      	ldr	r1, [pc, #44]	; (1044c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10420:	9b01      	ldr	r3, [sp, #4]
   10422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10426:	4a0a      	ldr	r2, [pc, #40]	; (10450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   10428:	9b01      	ldr	r3, [sp, #4]
   1042a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1042e:	f003 0301 	and.w	r3, r3, #1
   10432:	2b00      	cmp	r3, #0
   10434:	d106      	bne.n	10444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   10436:	4a05      	ldr	r2, [pc, #20]	; (1044c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10438:	9b01      	ldr	r3, [sp, #4]
   1043a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1043e:	2b00      	cmp	r3, #0
   10440:	d100      	bne.n	10444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10444:	bf00      	nop
   10446:	b003      	add	sp, #12
   10448:	f85d fb04 	ldr.w	pc, [sp], #4
   1044c:	1fff91d0 	.word	0x1fff91d0
   10450:	1fff91cc 	.word	0x1fff91cc

00010454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   10454:	b500      	push	{lr}
   10456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10458:	f7f0 fbbc 	bl	bd4 <Sys_GetCoreID>
   1045c:	4603      	mov	r3, r0
   1045e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   10460:	4a10      	ldr	r2, [pc, #64]	; (104a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10462:	9b01      	ldr	r3, [sp, #4]
   10464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10468:	2b00      	cmp	r3, #0
   1046a:	d10d      	bne.n	10488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1046c:	f7f0 fae3 	bl	a36 <Port_schm_read_msr>
   10470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10472:	9b00      	ldr	r3, [sp, #0]
   10474:	f003 0301 	and.w	r3, r3, #1
   10478:	2b00      	cmp	r3, #0
   1047a:	d100      	bne.n	1047e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1047c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1047e:	490a      	ldr	r1, [pc, #40]	; (104a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   10480:	9b01      	ldr	r3, [sp, #4]
   10482:	9a00      	ldr	r2, [sp, #0]
   10484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   10488:	4a06      	ldr	r2, [pc, #24]	; (104a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1048a:	9b01      	ldr	r3, [sp, #4]
   1048c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10490:	1c5a      	adds	r2, r3, #1
   10492:	4904      	ldr	r1, [pc, #16]	; (104a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10494:	9b01      	ldr	r3, [sp, #4]
   10496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1049a:	bf00      	nop
   1049c:	b003      	add	sp, #12
   1049e:	f85d fb04 	ldr.w	pc, [sp], #4
   104a2:	bf00      	nop
   104a4:	1fff91d8 	.word	0x1fff91d8
   104a8:	1fff91d4 	.word	0x1fff91d4

000104ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   104ac:	b500      	push	{lr}
   104ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104b0:	f7f0 fb90 	bl	bd4 <Sys_GetCoreID>
   104b4:	4603      	mov	r3, r0
   104b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   104b8:	4a0d      	ldr	r2, [pc, #52]	; (104f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   104ba:	9b01      	ldr	r3, [sp, #4]
   104bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c0:	1e5a      	subs	r2, r3, #1
   104c2:	490b      	ldr	r1, [pc, #44]	; (104f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   104c4:	9b01      	ldr	r3, [sp, #4]
   104c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   104ca:	4a0a      	ldr	r2, [pc, #40]	; (104f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   104cc:	9b01      	ldr	r3, [sp, #4]
   104ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d2:	f003 0301 	and.w	r3, r3, #1
   104d6:	2b00      	cmp	r3, #0
   104d8:	d106      	bne.n	104e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   104da:	4a05      	ldr	r2, [pc, #20]	; (104f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   104dc:	9b01      	ldr	r3, [sp, #4]
   104de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104e2:	2b00      	cmp	r3, #0
   104e4:	d100      	bne.n	104e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104e8:	bf00      	nop
   104ea:	b003      	add	sp, #12
   104ec:	f85d fb04 	ldr.w	pc, [sp], #4
   104f0:	1fff91d8 	.word	0x1fff91d8
   104f4:	1fff91d4 	.word	0x1fff91d4

000104f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   104f8:	b500      	push	{lr}
   104fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104fc:	f7f0 fb6a 	bl	bd4 <Sys_GetCoreID>
   10500:	4603      	mov	r3, r0
   10502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   10504:	4a10      	ldr	r2, [pc, #64]	; (10548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10506:	9b01      	ldr	r3, [sp, #4]
   10508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1050c:	2b00      	cmp	r3, #0
   1050e:	d10d      	bne.n	1052c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10510:	f7f0 fa91 	bl	a36 <Port_schm_read_msr>
   10514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10516:	9b00      	ldr	r3, [sp, #0]
   10518:	f003 0301 	and.w	r3, r3, #1
   1051c:	2b00      	cmp	r3, #0
   1051e:	d100      	bne.n	10522 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10522:	490a      	ldr	r1, [pc, #40]	; (1054c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   10524:	9b01      	ldr	r3, [sp, #4]
   10526:	9a00      	ldr	r2, [sp, #0]
   10528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   1052c:	4a06      	ldr	r2, [pc, #24]	; (10548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1052e:	9b01      	ldr	r3, [sp, #4]
   10530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10534:	1c5a      	adds	r2, r3, #1
   10536:	4904      	ldr	r1, [pc, #16]	; (10548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10538:	9b01      	ldr	r3, [sp, #4]
   1053a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1053e:	bf00      	nop
   10540:	b003      	add	sp, #12
   10542:	f85d fb04 	ldr.w	pc, [sp], #4
   10546:	bf00      	nop
   10548:	1fff91e0 	.word	0x1fff91e0
   1054c:	1fff91dc 	.word	0x1fff91dc

00010550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   10550:	b500      	push	{lr}
   10552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10554:	f7f0 fb3e 	bl	bd4 <Sys_GetCoreID>
   10558:	4603      	mov	r3, r0
   1055a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   1055c:	4a0d      	ldr	r2, [pc, #52]	; (10594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1055e:	9b01      	ldr	r3, [sp, #4]
   10560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10564:	1e5a      	subs	r2, r3, #1
   10566:	490b      	ldr	r1, [pc, #44]	; (10594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10568:	9b01      	ldr	r3, [sp, #4]
   1056a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1056e:	4a0a      	ldr	r2, [pc, #40]	; (10598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   10570:	9b01      	ldr	r3, [sp, #4]
   10572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10576:	f003 0301 	and.w	r3, r3, #1
   1057a:	2b00      	cmp	r3, #0
   1057c:	d106      	bne.n	1058c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   1057e:	4a05      	ldr	r2, [pc, #20]	; (10594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10580:	9b01      	ldr	r3, [sp, #4]
   10582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10586:	2b00      	cmp	r3, #0
   10588:	d100      	bne.n	1058c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1058a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1058c:	bf00      	nop
   1058e:	b003      	add	sp, #12
   10590:	f85d fb04 	ldr.w	pc, [sp], #4
   10594:	1fff91e0 	.word	0x1fff91e0
   10598:	1fff91dc 	.word	0x1fff91dc

0001059c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   1059c:	b500      	push	{lr}
   1059e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105a0:	f7f0 fb18 	bl	bd4 <Sys_GetCoreID>
   105a4:	4603      	mov	r3, r0
   105a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   105a8:	4a10      	ldr	r2, [pc, #64]	; (105ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   105aa:	9b01      	ldr	r3, [sp, #4]
   105ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105b0:	2b00      	cmp	r3, #0
   105b2:	d10d      	bne.n	105d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105b4:	f7f0 fa3f 	bl	a36 <Port_schm_read_msr>
   105b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105ba:	9b00      	ldr	r3, [sp, #0]
   105bc:	f003 0301 	and.w	r3, r3, #1
   105c0:	2b00      	cmp	r3, #0
   105c2:	d100      	bne.n	105c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   105c6:	490a      	ldr	r1, [pc, #40]	; (105f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   105c8:	9b01      	ldr	r3, [sp, #4]
   105ca:	9a00      	ldr	r2, [sp, #0]
   105cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   105d0:	4a06      	ldr	r2, [pc, #24]	; (105ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   105d2:	9b01      	ldr	r3, [sp, #4]
   105d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105d8:	1c5a      	adds	r2, r3, #1
   105da:	4904      	ldr	r1, [pc, #16]	; (105ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   105dc:	9b01      	ldr	r3, [sp, #4]
   105de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105e2:	bf00      	nop
   105e4:	b003      	add	sp, #12
   105e6:	f85d fb04 	ldr.w	pc, [sp], #4
   105ea:	bf00      	nop
   105ec:	1fff91e8 	.word	0x1fff91e8
   105f0:	1fff91e4 	.word	0x1fff91e4

000105f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   105f4:	b500      	push	{lr}
   105f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105f8:	f7f0 faec 	bl	bd4 <Sys_GetCoreID>
   105fc:	4603      	mov	r3, r0
   105fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   10600:	4a0d      	ldr	r2, [pc, #52]	; (10638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10602:	9b01      	ldr	r3, [sp, #4]
   10604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10608:	1e5a      	subs	r2, r3, #1
   1060a:	490b      	ldr	r1, [pc, #44]	; (10638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1060c:	9b01      	ldr	r3, [sp, #4]
   1060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10612:	4a0a      	ldr	r2, [pc, #40]	; (1063c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   10614:	9b01      	ldr	r3, [sp, #4]
   10616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1061a:	f003 0301 	and.w	r3, r3, #1
   1061e:	2b00      	cmp	r3, #0
   10620:	d106      	bne.n	10630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   10622:	4a05      	ldr	r2, [pc, #20]	; (10638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10624:	9b01      	ldr	r3, [sp, #4]
   10626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1062a:	2b00      	cmp	r3, #0
   1062c:	d100      	bne.n	10630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1062e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10630:	bf00      	nop
   10632:	b003      	add	sp, #12
   10634:	f85d fb04 	ldr.w	pc, [sp], #4
   10638:	1fff91e8 	.word	0x1fff91e8
   1063c:	1fff91e4 	.word	0x1fff91e4

00010640 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   10640:	bf00      	nop
   10642:	4770      	bx	lr

00010644 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   10644:	b510      	push	{r4, lr}
   10646:	b084      	sub	sp, #16
   10648:	4604      	mov	r4, r0
   1064a:	4608      	mov	r0, r1
   1064c:	4611      	mov	r1, r2
   1064e:	461a      	mov	r2, r3
   10650:	4623      	mov	r3, r4
   10652:	f8ad 3006 	strh.w	r3, [sp, #6]
   10656:	4603      	mov	r3, r0
   10658:	f88d 3005 	strb.w	r3, [sp, #5]
   1065c:	460b      	mov	r3, r1
   1065e:	f88d 3004 	strb.w	r3, [sp, #4]
   10662:	4613      	mov	r3, r2
   10664:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10668:	f7f0 fab4 	bl	bd4 <Sys_GetCoreID>
   1066c:	4603      	mov	r3, r0
   1066e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   10670:	490d      	ldr	r1, [pc, #52]	; (106a8 <Det_ReportError+0x64>)
   10672:	9b03      	ldr	r3, [sp, #12]
   10674:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10678:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   1067c:	4a0b      	ldr	r2, [pc, #44]	; (106ac <Det_ReportError+0x68>)
   1067e:	9b03      	ldr	r3, [sp, #12]
   10680:	4413      	add	r3, r2
   10682:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10686:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   10688:	4a09      	ldr	r2, [pc, #36]	; (106b0 <Det_ReportError+0x6c>)
   1068a:	9b03      	ldr	r3, [sp, #12]
   1068c:	4413      	add	r3, r2
   1068e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10692:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   10694:	4a07      	ldr	r2, [pc, #28]	; (106b4 <Det_ReportError+0x70>)
   10696:	9b03      	ldr	r3, [sp, #12]
   10698:	4413      	add	r3, r2
   1069a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1069e:	701a      	strb	r2, [r3, #0]

    return E_OK;
   106a0:	2300      	movs	r3, #0
}
   106a2:	4618      	mov	r0, r3
   106a4:	b004      	add	sp, #16
   106a6:	bd10      	pop	{r4, pc}
   106a8:	1fff9214 	.word	0x1fff9214
   106ac:	1fff91ec 	.word	0x1fff91ec
   106b0:	1fff91f0 	.word	0x1fff91f0
   106b4:	1fff91f4 	.word	0x1fff91f4

000106b8 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   106b8:	b510      	push	{r4, lr}
   106ba:	b084      	sub	sp, #16
   106bc:	4604      	mov	r4, r0
   106be:	4608      	mov	r0, r1
   106c0:	4611      	mov	r1, r2
   106c2:	461a      	mov	r2, r3
   106c4:	4623      	mov	r3, r4
   106c6:	f8ad 3006 	strh.w	r3, [sp, #6]
   106ca:	4603      	mov	r3, r0
   106cc:	f88d 3005 	strb.w	r3, [sp, #5]
   106d0:	460b      	mov	r3, r1
   106d2:	f88d 3004 	strb.w	r3, [sp, #4]
   106d6:	4613      	mov	r3, r2
   106d8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106dc:	f7f0 fa7a 	bl	bd4 <Sys_GetCoreID>
   106e0:	4603      	mov	r3, r0
   106e2:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   106e4:	490d      	ldr	r1, [pc, #52]	; (1071c <Det_ReportRuntimeError+0x64>)
   106e6:	9b03      	ldr	r3, [sp, #12]
   106e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   106ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   106f0:	4a0b      	ldr	r2, [pc, #44]	; (10720 <Det_ReportRuntimeError+0x68>)
   106f2:	9b03      	ldr	r3, [sp, #12]
   106f4:	4413      	add	r3, r2
   106f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   106fa:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   106fc:	4a09      	ldr	r2, [pc, #36]	; (10724 <Det_ReportRuntimeError+0x6c>)
   106fe:	9b03      	ldr	r3, [sp, #12]
   10700:	4413      	add	r3, r2
   10702:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10706:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   10708:	4a07      	ldr	r2, [pc, #28]	; (10728 <Det_ReportRuntimeError+0x70>)
   1070a:	9b03      	ldr	r3, [sp, #12]
   1070c:	4413      	add	r3, r2
   1070e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10712:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10714:	2300      	movs	r3, #0
}
   10716:	4618      	mov	r0, r3
   10718:	b004      	add	sp, #16
   1071a:	bd10      	pop	{r4, pc}
   1071c:	1fff9218 	.word	0x1fff9218
   10720:	1fff91f8 	.word	0x1fff91f8
   10724:	1fff91fc 	.word	0x1fff91fc
   10728:	1fff9200 	.word	0x1fff9200

0001072c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   1072c:	b510      	push	{r4, lr}
   1072e:	b084      	sub	sp, #16
   10730:	4604      	mov	r4, r0
   10732:	4608      	mov	r0, r1
   10734:	4611      	mov	r1, r2
   10736:	461a      	mov	r2, r3
   10738:	4623      	mov	r3, r4
   1073a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1073e:	4603      	mov	r3, r0
   10740:	f88d 3005 	strb.w	r3, [sp, #5]
   10744:	460b      	mov	r3, r1
   10746:	f88d 3004 	strb.w	r3, [sp, #4]
   1074a:	4613      	mov	r3, r2
   1074c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10750:	f7f0 fa40 	bl	bd4 <Sys_GetCoreID>
   10754:	4603      	mov	r3, r0
   10756:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   10758:	490d      	ldr	r1, [pc, #52]	; (10790 <Det_ReportTransientFault+0x64>)
   1075a:	9b03      	ldr	r3, [sp, #12]
   1075c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10760:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   10764:	4a0b      	ldr	r2, [pc, #44]	; (10794 <Det_ReportTransientFault+0x68>)
   10766:	9b03      	ldr	r3, [sp, #12]
   10768:	4413      	add	r3, r2
   1076a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1076e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   10770:	4a09      	ldr	r2, [pc, #36]	; (10798 <Det_ReportTransientFault+0x6c>)
   10772:	9b03      	ldr	r3, [sp, #12]
   10774:	4413      	add	r3, r2
   10776:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1077a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   1077c:	4a07      	ldr	r2, [pc, #28]	; (1079c <Det_ReportTransientFault+0x70>)
   1077e:	9b03      	ldr	r3, [sp, #12]
   10780:	4413      	add	r3, r2
   10782:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10786:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10788:	2300      	movs	r3, #0
}
   1078a:	4618      	mov	r0, r3
   1078c:	b004      	add	sp, #16
   1078e:	bd10      	pop	{r4, pc}
   10790:	1fff9210 	.word	0x1fff9210
   10794:	1fff9204 	.word	0x1fff9204
   10798:	1fff9208 	.word	0x1fff9208
   1079c:	1fff920c 	.word	0x1fff920c

000107a0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   107a0:	bf00      	nop
   107a2:	4770      	bx	lr

000107a4 <Fls_ACEraseRomEnd>:
   107a4:	20636441 	.word	0x20636441
   107a8:	6e616843 	.word	0x6e616843
   107ac:	206c656e 	.word	0x206c656e
   107b0:	756c6176 	.word	0x756c6176
   107b4:	25203a65 	.word	0x25203a65
   107b8:	00000a64 	.word	0x00000a64
   107bc:	6d726554 	.word	0x6d726554
   107c0:	6c616e69 	.word	0x6c616e69
   107c4:	00000000 	.word	0x00000000
   107c8:	4c554e28 	.word	0x4c554e28
   107cc:	0000294c 	.word	0x0000294c

000107d0 <Clock_Ip_au8DividerCallbackIndex>:
   107d0:	0e0d0c00 06030201 0a070409 000b0805     ................

000107e0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000107f0 <Clock_Ip_au8XoscCallbackIndex>:
   107f0:	00000100 00000000 00000000 00000000     ................

00010800 <Clock_Ip_au8IrcoscCallbackIndex>:
   10800:	03020100 00000004 00000000 00000000     ................

00010810 <Clock_Ip_au8GateCallbackIndex>:
   10810:	06010200 01040301 00000500 00000000     ................

00010820 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00010830 <Clock_Ip_au8PllCallbackIndex>:
   10830:	00000100 00000000 00000000 00000000     ................

00010840 <Clock_Ip_au8SelectorCallbackIndex>:
   10840:	0a090800 03020109 07060504 00000000     ................

00010850 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00010860 <Clock_Ip_au8CmuCallbackIndex>:
	...

00010870 <Clock_Ip_au8ClockFeatures>:
	...
   10880:	01000000 00000000 00000000 00000002     ................
   10890:	00000000 00000300 00000000 00040000     ................
   108a0:	00000000 05000000 00000000 00000000     ................
   108b0:	00000006 00000000 00000100 00000000     ................
   108c0:	00010000 00000000 04000000 00000000     ................
   108d0:	00000000 00000005 00000001 00000401     ................
   108e0:	00000200 00050100 00030000 04020000     ................
   108f0:	04000000 02000000 00000005 00000005     ................
   10900:	00000403 00000600 00050300 00070000     ................
   10910:	05000000 00000000 00000000 00000006     ................
	...
   10950:	00050000 00000000 06000000 00000100     ................
   10960:	00000000 00030007 00000000 00000000     ................
   10970:	00000000 00060000 00000000 07000000     ................
   10980:	00000100 00000000 00030008 00000000     ................
	...
   10998:	00090000 00000000 0a000000 00000100     ................
   109a8:	00000000 0003000b 00000000 00000000     ................
   109b8:	00000000 000c0000 00000000 0d000000     ................
   109c8:	00000100 00000000 0003000e 00000000     ................
   109d8:	00000800 00000000 00090000 00000000     ................
   109e8:	0a000000 00000000 00000000 0000000b     ................
   109f8:	00000000 00000b01 00000000 000b0200     ................
   10a08:	00000000 0b030000 00000000 00000000     ................
	...
   10a20:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   10a30:	01000000 00000000 00000000 00000007     ................
   10a40:	00007300 00000700 00320000 00090000     .s........2.....
   10a50:	02000000 07000000 00000000 00000021     ............!...
   10a60:	00000009 00000400 00000900 00030000     ................
   10a70:	00070000 61000000 07000000 00000000     .......a........
   10a80:	00000024 00000007 00002500 00000700     $........%......
   10a90:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   10aa0:	00000000 00000020 38000004 00003800     .... ......8.8..
   10ab0:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   10ac0:	04000000 00260000 00000026 66000004     ......&.&......f
   10ad0:	00006600 00000400 00370037 00040000     .f......7.7.....
   10ae0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   10af0:	2e000004 00002e00 00000200 00404040     ............@@@.
   10b00:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   10b10:	0000006b 6c000004 00006c00 00000900     k......l.l......
   10b20:	00010000 00090000 00000000 07000000     ................
   10b30:	00000000 00000036 00000007 00003100     ....6........1..
   10b40:	00000700 00490000 00070000 4a000000     ......I........J
   10b50:	07000000 00000000 0000004b 00000007     ........K.......
   10b60:	00004c00 00000700 004d0000 00070000     .L........M.....
   10b70:	3d000000 03000000 00000000 00000000     ...=............

00010b80 <Clock_Ip_au16SelectorEntryHardwareValue>:
   10b80:	01010a03 01010001 04040002 02000603     ................
   10b90:	00010810 02020100 00000000 00000007     ................
   10ba0:	00000009 00000000 00000c0e 00000000     ................
	...

00010bd8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   10bd8:	00020000 00000300 00000601 00000000     ................
	...

00010c08 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   10c08:	00000700 00000000 02020000 01010303     ................
   10c18:	03020606 00000000 00000000 00000000     ................
	...

00010c38 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10c38:	00000001 00000000 02020000 01010303     ................
   10c48:	03020606 00000000 00000000 00000000     ................
	...

00010c68 <Clock_Ip_au8DividerValueHardwareValue>:
   10c68:	00020100 00000003 00000004 00000000     ................
   10c78:	00000005 00000000 00000000 00000000     ................
   10c88:	00000006 00000000 00000000 00000000     ................
	...
   10ca8:	00000007                                ....

00010cac <Clock_Ip_apxScgPeriphAsyncDivs>:
   10cac:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00010cbc <Clock_Ip_aeSourceTypeClockName>:
   10cbc:	00000000 00000001 00000001 00000001     ................
   10ccc:	00000001 00000001 00000001 00000001     ................
   10cdc:	00000002 00000003 00000001 00000001     ................
   10cec:	00000001 00000001 00000002 00000002     ................
   10cfc:	00000003 00000003 00000001 00000001     ................
   10d0c:	00000004 00000004 00000004 00000004     ................
	...

00010d78 <Clock_Ip_aeHwPllName>:
   10d78:	00000009                                ....

00010d7c <Clock_Ip_aeHwDfsName>:
   10d7c:	00000057                                W...

00010d80 <Clock_Ip_axDividerCallbacks>:
   10d80:	00002c31 00002c3b 00002c55 00002c6f     1,..;,..U,..o,..
   10d90:	00002c89 00002ca3 00002cbd 00002cd7     .,...,...,...,..
   10da0:	00002cf1 00002d0b 00002d25 00002d3f     .,...-..%-..?-..
   10db0:	00002d59 00002d73 00002d8d              Y-..s-...-..

00010dbc <Clock_Ip_axDividerTriggerCallbacks>:
   10dbc:	00003101 00003101                       .1...1..

00010dc4 <Clock_Ip_axExtOscCallbacks>:
   10dc4:	0000310d 0000310d 0000310d 00003117     .1...1...1...1..
   10dd4:	0000310d 00003121 0000313b 00003155     .1..!1..;1..U1..
   10de4:	000031d9 000031ed                       .1...1..

00010dec <Clock_Ip_axFracDivCallbacks>:
   10dec:	000033ad 000033ad 000033b7              .3...3...3..

00010df8 <Clock_Ip_axGateCallbacks>:
   10df8:	000033d1 000033db 000034db 000034f5     .3...3...4...4..
   10e08:	0000348b 000034a5 0000343b 00003455     .4...4..;4..U4..
   10e18:	000033eb 00003405 0000352b 00003545     .3...4..+5..E5..
   10e28:	0000357b 00003595                       {5...5..

00010e30 <Clock_Ip_axIntOscCallbacks>:
   10e30:	00003741 00003741 0000374b 00003755     A7..A7..K7..U7..
   10e40:	0000376f 00003789 0000379d 000037b7     o7...7...7...7..
   10e50:	000037d1 000037e5 000037ff 00003819     .7...7...7...8..
   10e60:	000038c1 000038db 000038f5              .8...8...8..

00010e6c <Clock_Ip_axCmuCallbacks>:
   10e6c:	00003e91 00003e9b 00003ea7 00003e91     .>...>...>...>..

00010e7c <Clock_Ip_axPllCallbacks>:
   10e7c:	00003eb1 00003eb1 00003ebb 00003eb1     .>...>...>...>..
   10e8c:	00003ec7 00003ed1 00003eeb 00003f05     .>...>...>...?..
   10e9c:	00003fa9 00003f95                       .?...?..

00010ea4 <Clock_Ip_axPcfsCallbacks>:
   10ea4:	00004105                                .A..

00010ea8 <Clock_Ip_axSelectorCallbacks>:
   10ea8:	00004111 00004111 0000411b 00004135     .A...A...A..5A..
   10eb8:	00004111 0000414f 00004169 00004183     .A..OA..iA...A..
   10ec8:	0000419d 000041b7 000041d1 000041eb     .A...A...A...A..
   10ed8:	00004205 0000421f 00004239 00004253     .B...B..9B..SB..
   10ee8:	0000426d 00004287 000042a1 000042bb     mB...B...B...B..
   10ef8:	000042d5 000042ef                       .B...B..

00010f00 <ClockSource>:
   10f00:	00000000 00000008 00000002 00000005     ................
	...
   10f18:	00000009                                ....

00010f1c <ResetReasonArray>:
   10f1c:	00000000 00000001 00000002 00000003     ................
   10f2c:	00000004 00000005 00000006 00000007     ................
   10f3c:	00000008 00000009 0000000a 0000000b     ................
   10f4c:	0000000c 0000000d 0000000e              ............

00010f58 <Port_au32PortCiPortBaseAddr>:
   10f58:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   10f68:	4004d000                                ...@

00010f6c <Port_au32PortCiGpioBaseAddr>:
   10f6c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10f7c:	400ff100                                ...@

00010f80 <Adc_Ip_apxBase>:
   10f80:	4003b000 40027000                       ...@.p.@

00010f88 <Pdb_Adc_Ip_apxBase>:
   10f88:	40036000 40031000                       .`.@...@

00010f90 <AdcIpChansConfig_0>:
   10f90:	00000000 00000005 00000000              ............

00010f9c <AdcIpConfig_0>:
   10f9c:	00000000 00000003 00000000 0000000c     ................
   10fac:	00000000 00000001 00000001 00000000     ................
	...
   10fc4:	00ff0000 00000000 00000000 00010f90     ................
   10fd4:	0000a88d                                ....

00010fd8 <AdcIpwCfg>:
   10fd8:	00010f9c 00000000 000114ac 00000000     ................
   10fe8:	ff01ff00 00000001 00000001 0001ffff     ................
   10ff8:	0000ff00                                ....

00010ffc <AdcIpwGroupConfig_0>:
	...
   11004:	000000c8 00010000 00000000              ............

00011010 <Adc_Group0_Assignment_0>:
   11010:	00000000                                ....

00011014 <Adc_GroupsCfg>:
	...
   1102c:	00001635 00000000 00000001 00011010     5...............
   1103c:	00050001 00000005 00000000 00010ffc     ................

0001104c <Adc_au16GroupIdToIndexMap>:
   1104c:	00000000                                ....

00011050 <Adc_Partition_Assignment>:
   11050:	00000000                                ....

00011054 <Adc_Config>:
   11054:	00010fd8 00011014 00000001 0001104c     ............L...
   11064:	00000000 00011050 00000001              ....P.......

00011070 <Mcu_aClockConfigPB>:
	...
   11078:	1c000101 04000010 01000029 00000005     ........).......
   11088:	00000001 00000000 00000057 00000000     ........W.......
   11098:	00000000 00000008 007a1200 00000001     ..........z.....
   110a8:	00000001 00000000 00000057 00000000     ........W.......
   110b8:	00000057 00000000 00000000 00000000     W...............
	...
   110d8:	00000019 00000005 0000001a 00000002     ................
   110e8:	0000001b 00000005 0000002a 00000005     ........*.......
   110f8:	00000028 0000000e 00000029 00000001     (.......).......
   11108:	00000056 0000001c 00000032 0000002a     V.......2...*...
   11118:	0000002b 00000014 0000002c 00000014     +.......,.......
   11128:	0000002d 00000014 0000002e 00000014     -...............
   11138:	0000003f 00000000 00000040 00000000     ?.......@.......
   11148:	00000041 00000000 00000042 00000000     A.......B.......
   11158:	00000031 00000000 00000045 00000000     1.......E.......
   11168:	00000046 00000000 00000047 00000000     F.......G.......
   11178:	00000044 00000000 00000030 0000000d     D.......0.......
   11188:	0000003d 00000000 00000043 00000000     =.......C.......
   11198:	00000049 00000000 0000004a 00000000     I.......J.......
   111a8:	0000004b 00000000 00000048 00000000     K.......H.......
   111b8:	0000000c 00000001 00000000 0000000d     ................
   111c8:	00000002 00000000 0000000e 00000001     ................
   111d8:	00000000 0000000f 00000001 00000000     ................
   111e8:	0000001d 00000001 00000000 0000001e     ................
   111f8:	00000008 00000000 0000001f 00000001     ................
   11208:	00000000 00000021 00000001 00000000     ....!...........
   11218:	00000022 00000002 00000000 00000023     "...........#...
   11228:	00000001 00000000 00000025 00000003     ........%.......
   11238:	00000000 00000026 00000004 00000000     ....&...........
   11248:	00000027 00000002 00000000 00000032     '...........2...
   11258:	00000001 00000000 00000048 00000001     ........H.......
   11268:	00000001 00000056 00000001 00000001     ....V...........
   11278:	00000057 00000000 00000000 00000057     W...........W...
	...
   11290:	00000057 00000000 00000000 00000057     W...........W...
	...
   112a8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   112c4:	00000014 00007d00 00000015 00007d00     .....}.......}..
   112d4:	00000016 00007d00 00000017 00008000     .....}..........
   112e4:	00000012 00000001 00000013 00000001     ................
   112f4:	00000030 00000001 00000031 00000000     0.......1.......
   11304:	00000032 00000000 00000033 00000000     2.......3.......
   11314:	00000034 00000000 00000035 00000001     4.......5.......
   11324:	00000036 00000000 00000037 00000001     6.......7.......
   11334:	00000038 00000001 00000039 00000000     8.......9.......
   11344:	0000003a 00000000 0000003b 00000000     :.......;.......
   11354:	0000003c 00000000 0000003d 00000000     <.......=.......
   11364:	0000003e 00000000 0000003f 00000000     >.......?.......
   11374:	00000040 00000000 00000041 00000000     @.......A.......
   11384:	00000042 00000000 00000043 00000000     B.......C.......
   11394:	00000044 00000000 00000045 00000000     D.......E.......
   113a4:	00000046 00000000 00000047 00000000     F.......G.......
   113b4:	00000048 00000000 00000049 00000000     H.......I.......
   113c4:	0000004a 00000000 0000004b 00000000     J.......K.......
   113d4:	0000004c 00000001 0000004d 00000001     L.......M.......
   113e4:	0000004e 00000001 0000004f 00000000     N.......O.......
   113f4:	00000050 00000001 00000051 00000001     P.......Q.......
   11404:	00000052 00000001 00000053 00000001     R.......S.......
   11414:	00000054 00000001 00000055 00000000     T.......U.......
   11424:	00000056 00000001 00000057 00000000     V.......W.......
   11434:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00011468 <DioConfig_aChannelGroupList>:
   11468:	00000802 0000ff00                       ........

00011470 <aIrqConfiguration>:
   11470:	00000027 00000f01 00009075              '.......u...

0001147c <intCtrlConfig>:
   1147c:	00000001 00011470                       ....p...

00011484 <Mcu_Config>:
   11484:	0000005a 00000000 00000001 00000001     Z...............
   11494:	000117f8 00011070 00011804              ....p.......

000114a0 <OsIf_xPredefinedConfig>:
   114a0:	00000000 02dc6c00                       .....l..

000114a8 <OsIf_apxPredefinedConfig>:
   114a8:	000114a0                                ....

000114ac <PdbAdcIpConfig_0>:
	...
   114b8:	0000000f ffff0000 00000000 00000000     ................
   114c8:	00000000                                ....

000114cc <Platform_uConfiguration>:
   114cc:	000114d4                                ....

000114d0 <Platform_Config>:
   114d0:	000114cc                                ....

000114d4 <ipwConfig>:
   114d4:	0001147c 00000000                       |.......

000114dc <g_pin_mux_InitConfigArr>:
   114dc:	4004a000 00000000 00000001 00000002     ...@............
   114ec:	00000000 00000002 00000000 00000000     ................
	...
   11504:	4004b000 400ff080 00000008 00000002     ...@...@........
   11514:	00000001 00000002 00000000 00000000     ................
	...
   1152c:	4004b000 400ff080 00000009 00000002     ...@...@........
   1153c:	00000001 00000002 00000000 00000000     ................
	...
   11554:	4004b000 400ff080 0000000a 00000002     ...@...@........
   11564:	00000001 00000002 00000000 00000000     ................
	...
   1157c:	4004b000 400ff080 0000000b 00000002     ...@...@........
   1158c:	00000001 00000002 00000000 00000000     ................
	...
   115a4:	4004b000 400ff080 0000000c 00000002     ...@...@........
   115b4:	00000001 00000002 00000000 00000000     ................
	...
   115cc:	4004b000 400ff080 0000000d 00000002     ...@...@........
   115dc:	00000001 00000002 00000000 00000000     ................
	...
   115f4:	4004b000 400ff080 0000000e 00000002     ...@...@........
   11604:	00000001 00000002 00000000 00000000     ................
	...
   1161c:	4004b000 400ff080 0000000f 00000002     ...@...@........
   1162c:	00000001 00000002 00000000 00000000     ................
	...

00011644 <au8Port_PartitionList>:
   11644:	00000001                                ....

00011648 <au32Port_PinToPartitionMap>:
   11648:	00000001 00000001 00000001 00000001     ................
   11658:	00000001 00000001 00000001 00000001     ................
   11668:	00000001                                ....

0001166c <Port_au16NoUnUsedPadsArrayDefault>:
   1166c:	00010000 00030002 00070006 00090008     ................
   1167c:	000c000b 000e000d 0010000f 00200011     .............. .
   1168c:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   1169c:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   116ac:	00410040 00430042 00470046 00510050     @.A.B.C.F.G.P.Q.
   116bc:	00610060 00630062 00650064 00670066     `.a.b.c.d.e.f.g.
   116cc:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
   116dc:	00710070 00810080 00830082 00850084     p.q.............
   116ec:	00870086 00890088 008b008a 008d008c     ................
   116fc:	008f008e 00000090                       ........

00011704 <Port_UnUsedPin>:
   11704:	00000100 00000001 00000000              ............

00011710 <Port_aPinConfigDefault>:
   11710:	00000021 00000000 00000002 00000000     !...............
   11720:	00010000 00000048 00000100 00000000     ....H...........
   11730:	00000002 00010001 00000049 00000100     ........I.......
   11740:	00000000 00000002 00010001 0000004a     ............J...
   11750:	00000100 00000000 00000002 00010001     ................
   11760:	0000004b 00000100 00000000 00000002     K...............
   11770:	00010001 0000004c 00000100 00000000     ....L...........
   11780:	00000002 00010001 0000004d 00000100     ........M.......
   11790:	00000000 00000002 00010001 0000004e     ............N...
   117a0:	00000100 00000000 00000002 00010001     ................
   117b0:	0000004f 00000100 00000000 00000002     O...............
   117c0:	00010001                                ....

000117c4 <Port_Config>:
   117c4:	004b0009 0001166c 00011704 00011710     ..K.l...........
	...
   117dc:	00011648 00011644 000114dc              H...D.......

000117e8 <Power_Ip_RCM_ConfigPB>:
	...

000117f0 <Power_Ip_PMC_ConfigPB>:
   117f0:	00000000                                ....

000117f4 <Power_Ip_SMC_ConfigPB>:
   117f4:	00000000                                ....

000117f8 <Power_Ip_aModeConfigPB>:
	...

00011804 <Power_Ip_HwIPsConfigPB>:
   11804:	000117e8 000117f0 000117f4              ............

00011810 <_aInitStr.0>:
   11810:	00000000 54540000 45522052 53454747     ......TTR REGGES
   11820:	00000000                                ....

00011824 <_aV2C.0>:
   11824:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00011834 <__INIT_TABLE>:
   11834:	00000002 	.word	0x00000002
   11838:	1fff8b10 	.word	0x1fff8b10
   1183c:	0001185c 	.word	0x0001185c
   11840:	00011884 	.word	0x00011884
   11844:	1fff8800 	.word	0x1fff8800
   11848:	00000000 	.word	0x00000000
   1184c:	00000310 	.word	0x00000310

00011850 <__ZERO_TABLE>:
   11850:	00000001 	.word	0x00000001
   11854:	1fff8b40 	.word	0x1fff8b40
   11858:	1fff96e0 	.word	0x1fff96e0
