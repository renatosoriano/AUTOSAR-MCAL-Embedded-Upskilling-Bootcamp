
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000127b 	.word	0x0000127b
  10:	0000127d 	.word	0x0000127d
  14:	0000127f 	.word	0x0000127f
  18:	00001281 	.word	0x00001281
	...
  2c:	00001283 	.word	0x00001283
  30:	00001285 	.word	0x00001285
  34:	00000000 	.word	0x00000000
  38:	00001287 	.word	0x00001287
  3c:	00001289 	.word	0x00001289
  40:	0000128b 	.word	0x0000128b
  44:	0000128b 	.word	0x0000128b
  48:	0000128b 	.word	0x0000128b
  4c:	0000128b 	.word	0x0000128b
  50:	0000128b 	.word	0x0000128b
  54:	0000128b 	.word	0x0000128b
  58:	0000128b 	.word	0x0000128b
  5c:	0000128b 	.word	0x0000128b
  60:	0000128b 	.word	0x0000128b
  64:	0000128b 	.word	0x0000128b
  68:	0000128b 	.word	0x0000128b
  6c:	0000128b 	.word	0x0000128b
  70:	0000128b 	.word	0x0000128b
  74:	0000128b 	.word	0x0000128b
  78:	0000128b 	.word	0x0000128b
  7c:	0000128b 	.word	0x0000128b
  80:	0000128b 	.word	0x0000128b
  84:	0000128b 	.word	0x0000128b
  88:	0000128b 	.word	0x0000128b
  8c:	0000128b 	.word	0x0000128b
  90:	0000128b 	.word	0x0000128b
  94:	0000128b 	.word	0x0000128b
  98:	0000128b 	.word	0x0000128b
  9c:	0000128b 	.word	0x0000128b
  a0:	0000128b 	.word	0x0000128b
  a4:	0000128b 	.word	0x0000128b
  a8:	0000128b 	.word	0x0000128b
  ac:	0000128b 	.word	0x0000128b
  b0:	0000128b 	.word	0x0000128b
  b4:	0000128b 	.word	0x0000128b
  b8:	0000128b 	.word	0x0000128b
  bc:	0000128b 	.word	0x0000128b
  c0:	0000128b 	.word	0x0000128b
  c4:	0000128b 	.word	0x0000128b
  c8:	0000128b 	.word	0x0000128b
  cc:	0000128b 	.word	0x0000128b
  d0:	0000128b 	.word	0x0000128b
  d4:	0000128b 	.word	0x0000128b
  d8:	0000128b 	.word	0x0000128b
  dc:	0000128b 	.word	0x0000128b
  e0:	0000128b 	.word	0x0000128b
  e4:	0000128b 	.word	0x0000128b
  e8:	0000128b 	.word	0x0000128b
  ec:	0000128b 	.word	0x0000128b
  f0:	0000128b 	.word	0x0000128b
  f4:	0000128b 	.word	0x0000128b
  f8:	0000128b 	.word	0x0000128b
  fc:	0000128b 	.word	0x0000128b
 100:	0000128b 	.word	0x0000128b
 104:	0000128b 	.word	0x0000128b
 108:	0000128b 	.word	0x0000128b
 10c:	0000128b 	.word	0x0000128b
 110:	0000128b 	.word	0x0000128b
 114:	0000128b 	.word	0x0000128b
 118:	0000128b 	.word	0x0000128b
 11c:	0000128b 	.word	0x0000128b
 120:	0000128b 	.word	0x0000128b
 124:	0000128b 	.word	0x0000128b
 128:	0000128b 	.word	0x0000128b
 12c:	0000128b 	.word	0x0000128b
 130:	0000128b 	.word	0x0000128b
 134:	0000128b 	.word	0x0000128b
 138:	0000128b 	.word	0x0000128b
 13c:	0000128b 	.word	0x0000128b
 140:	0000128b 	.word	0x0000128b
 144:	0000128b 	.word	0x0000128b
 148:	0000128b 	.word	0x0000128b
 14c:	0000128b 	.word	0x0000128b
 150:	0000128b 	.word	0x0000128b
 154:	0000128b 	.word	0x0000128b
 158:	0000128b 	.word	0x0000128b
 15c:	0000128b 	.word	0x0000128b
 160:	0000128b 	.word	0x0000128b
 164:	0000128b 	.word	0x0000128b
 168:	0000128b 	.word	0x0000128b
 16c:	0000128b 	.word	0x0000128b
 170:	0000128b 	.word	0x0000128b
 174:	0000128b 	.word	0x0000128b
 178:	0000128b 	.word	0x0000128b
 17c:	0000128b 	.word	0x0000128b
 180:	0000128b 	.word	0x0000128b
 184:	0000128b 	.word	0x0000128b
 188:	0000128b 	.word	0x0000128b
 18c:	0000128b 	.word	0x0000128b
 190:	0000128b 	.word	0x0000128b
 194:	0000128b 	.word	0x0000128b
 198:	0000128b 	.word	0x0000128b
 19c:	0000128b 	.word	0x0000128b
 1a0:	0000128b 	.word	0x0000128b
 1a4:	0000128b 	.word	0x0000128b
 1a8:	0000128b 	.word	0x0000128b
 1ac:	0000128b 	.word	0x0000128b
 1b0:	0000128b 	.word	0x0000128b
 1b4:	0000128b 	.word	0x0000128b
 1b8:	0000128b 	.word	0x0000128b
 1bc:	0000128b 	.word	0x0000128b
 1c0:	0000128b 	.word	0x0000128b
 1c4:	0000128b 	.word	0x0000128b
 1c8:	0000128b 	.word	0x0000128b
 1cc:	0000128b 	.word	0x0000128b
 1d0:	0000128b 	.word	0x0000128b
 1d4:	0000128b 	.word	0x0000128b
 1d8:	0000128b 	.word	0x0000128b
 1dc:	0000128b 	.word	0x0000128b
 1e0:	0000128b 	.word	0x0000128b
 1e4:	0000128b 	.word	0x0000128b
 1e8:	0000128b 	.word	0x0000128b
 1ec:	0000128b 	.word	0x0000128b
 1f0:	0000128b 	.word	0x0000128b
 1f4:	0000128b 	.word	0x0000128b
 1f8:	0000128b 	.word	0x0000128b
 1fc:	0000128b 	.word	0x0000128b
 200:	0000128b 	.word	0x0000128b
 204:	0000128b 	.word	0x0000128b
 208:	0000128b 	.word	0x0000128b
 20c:	0000128b 	.word	0x0000128b
 210:	0000128b 	.word	0x0000128b
 214:	0000128b 	.word	0x0000128b
 218:	0000128b 	.word	0x0000128b
 21c:	0000128b 	.word	0x0000128b
 220:	0000128b 	.word	0x0000128b
 224:	0000128b 	.word	0x0000128b
 228:	0000128b 	.word	0x0000128b
 22c:	0000128b 	.word	0x0000128b
 230:	0000128b 	.word	0x0000128b
 234:	0000128b 	.word	0x0000128b
 238:	0000128b 	.word	0x0000128b
 23c:	0000128b 	.word	0x0000128b
 240:	0000128b 	.word	0x0000128b
 244:	0000128b 	.word	0x0000128b
 248:	0000128b 	.word	0x0000128b
 24c:	0000128b 	.word	0x0000128b
 250:	0000128b 	.word	0x0000128b
 254:	0000128b 	.word	0x0000128b
 258:	0000128b 	.word	0x0000128b
 25c:	0000128b 	.word	0x0000128b
 260:	0000128b 	.word	0x0000128b
 264:	0000128b 	.word	0x0000128b
 268:	0000128b 	.word	0x0000128b
 26c:	0000128b 	.word	0x0000128b
 270:	0000128b 	.word	0x0000128b
 274:	0000128b 	.word	0x0000128b
 278:	0000128b 	.word	0x0000128b
 27c:	0000128b 	.word	0x0000128b
 280:	0000128b 	.word	0x0000128b
 284:	0000128b 	.word	0x0000128b
 288:	0000128b 	.word	0x0000128b
 28c:	0000128b 	.word	0x0000128b
 290:	0000128b 	.word	0x0000128b
 294:	0000128b 	.word	0x0000128b
 298:	0000128b 	.word	0x0000128b
 29c:	0000128b 	.word	0x0000128b
 2a0:	0000128b 	.word	0x0000128b
 2a4:	0000128b 	.word	0x0000128b
 2a8:	0000128b 	.word	0x0000128b
 2ac:	0000128b 	.word	0x0000128b
 2b0:	0000128b 	.word	0x0000128b
 2b4:	0000128b 	.word	0x0000128b
 2b8:	0000128b 	.word	0x0000128b
 2bc:	0000128b 	.word	0x0000128b
 2c0:	0000128b 	.word	0x0000128b
 2c4:	0000128b 	.word	0x0000128b
 2c8:	0000128b 	.word	0x0000128b
 2cc:	0000128b 	.word	0x0000128b
 2d0:	0000128b 	.word	0x0000128b
 2d4:	0000128b 	.word	0x0000128b
 2d8:	0000128b 	.word	0x0000128b
 2dc:	0000128b 	.word	0x0000128b
 2e0:	0000128b 	.word	0x0000128b
 2e4:	0000128b 	.word	0x0000128b
 2e8:	0000128b 	.word	0x0000128b
 2ec:	0000128b 	.word	0x0000128b
 2f0:	0000128b 	.word	0x0000128b
 2f4:	0000128b 	.word	0x0000128b
 2f8:	0000128b 	.word	0x0000128b
 2fc:	0000128b 	.word	0x0000128b
 300:	0000128b 	.word	0x0000128b
 304:	0000128b 	.word	0x0000128b
 308:	0000128b 	.word	0x0000128b
 30c:	0000128b 	.word	0x0000128b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fe31 	bl	10e8 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fef0 	bl	1270 <startup_go_to_user_mode>
     490:	f000 fd14 	bl	ebc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91f0 	.word	0x1fff91f0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fe3b 	bl	1214 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_dmul>:
     5a4:	b570      	push	{r4, r5, r6, lr}
     5a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
     5aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     5ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     5b2:	bf1d      	ittte	ne
     5b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     5b8:	ea94 0f0c 	teqne	r4, ip
     5bc:	ea95 0f0c 	teqne	r5, ip
     5c0:	f000 f8de 	bleq	780 <__aeabi_dmul+0x1dc>
     5c4:	442c      	add	r4, r5
     5c6:	ea81 0603 	eor.w	r6, r1, r3
     5ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     5ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     5d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     5d6:	bf18      	it	ne
     5d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     5dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     5e4:	d038      	beq.n	658 <__aeabi_dmul+0xb4>
     5e6:	fba0 ce02 	umull	ip, lr, r0, r2
     5ea:	f04f 0500 	mov.w	r5, #0
     5ee:	fbe1 e502 	umlal	lr, r5, r1, r2
     5f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     5f6:	fbe0 e503 	umlal	lr, r5, r0, r3
     5fa:	f04f 0600 	mov.w	r6, #0
     5fe:	fbe1 5603 	umlal	r5, r6, r1, r3
     602:	f09c 0f00 	teq	ip, #0
     606:	bf18      	it	ne
     608:	f04e 0e01 	orrne.w	lr, lr, #1
     60c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     618:	d204      	bcs.n	624 <__aeabi_dmul+0x80>
     61a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     61e:	416d      	adcs	r5, r5
     620:	eb46 0606 	adc.w	r6, r6, r6
     624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     62c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     63c:	bf88      	it	hi
     63e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     642:	d81e      	bhi.n	682 <__aeabi_dmul+0xde>
     644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     648:	bf08      	it	eq
     64a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     64e:	f150 0000 	adcs.w	r0, r0, #0
     652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     656:	bd70      	pop	{r4, r5, r6, pc}
     658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     65c:	ea46 0101 	orr.w	r1, r6, r1
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	ea81 0103 	eor.w	r1, r1, r3
     668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     66c:	bfc2      	ittt	gt
     66e:	ebd4 050c 	rsbsgt	r5, r4, ip
     672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     676:	bd70      	popgt	{r4, r5, r6, pc}
     678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     67c:	f04f 0e00 	mov.w	lr, #0
     680:	3c01      	subs	r4, #1
     682:	f300 80ab 	bgt.w	7dc <__aeabi_dmul+0x238>
     686:	f114 0f36 	cmn.w	r4, #54	; 0x36
     68a:	bfde      	ittt	le
     68c:	2000      	movle	r0, #0
     68e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     692:	bd70      	pople	{r4, r5, r6, pc}
     694:	f1c4 0400 	rsb	r4, r4, #0
     698:	3c20      	subs	r4, #32
     69a:	da35      	bge.n	708 <__aeabi_dmul+0x164>
     69c:	340c      	adds	r4, #12
     69e:	dc1b      	bgt.n	6d8 <__aeabi_dmul+0x134>
     6a0:	f104 0414 	add.w	r4, r4, #20
     6a4:	f1c4 0520 	rsb	r5, r4, #32
     6a8:	fa00 f305 	lsl.w	r3, r0, r5
     6ac:	fa20 f004 	lsr.w	r0, r0, r4
     6b0:	fa01 f205 	lsl.w	r2, r1, r5
     6b4:	ea40 0002 	orr.w	r0, r0, r2
     6b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     6bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     6c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     6c4:	fa21 f604 	lsr.w	r6, r1, r4
     6c8:	eb42 0106 	adc.w	r1, r2, r6
     6cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6d0:	bf08      	it	eq
     6d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6d6:	bd70      	pop	{r4, r5, r6, pc}
     6d8:	f1c4 040c 	rsb	r4, r4, #12
     6dc:	f1c4 0520 	rsb	r5, r4, #32
     6e0:	fa00 f304 	lsl.w	r3, r0, r4
     6e4:	fa20 f005 	lsr.w	r0, r0, r5
     6e8:	fa01 f204 	lsl.w	r2, r1, r4
     6ec:	ea40 0002 	orr.w	r0, r0, r2
     6f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     6f8:	f141 0100 	adc.w	r1, r1, #0
     6fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     700:	bf08      	it	eq
     702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     706:	bd70      	pop	{r4, r5, r6, pc}
     708:	f1c4 0520 	rsb	r5, r4, #32
     70c:	fa00 f205 	lsl.w	r2, r0, r5
     710:	ea4e 0e02 	orr.w	lr, lr, r2
     714:	fa20 f304 	lsr.w	r3, r0, r4
     718:	fa01 f205 	lsl.w	r2, r1, r5
     71c:	ea43 0302 	orr.w	r3, r3, r2
     720:	fa21 f004 	lsr.w	r0, r1, r4
     724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     728:	fa21 f204 	lsr.w	r2, r1, r4
     72c:	ea20 0002 	bic.w	r0, r0, r2
     730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     738:	bf08      	it	eq
     73a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     73e:	bd70      	pop	{r4, r5, r6, pc}
     740:	f094 0f00 	teq	r4, #0
     744:	d10f      	bne.n	766 <__aeabi_dmul+0x1c2>
     746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     74a:	0040      	lsls	r0, r0, #1
     74c:	eb41 0101 	adc.w	r1, r1, r1
     750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     754:	bf08      	it	eq
     756:	3c01      	subeq	r4, #1
     758:	d0f7      	beq.n	74a <__aeabi_dmul+0x1a6>
     75a:	ea41 0106 	orr.w	r1, r1, r6
     75e:	f095 0f00 	teq	r5, #0
     762:	bf18      	it	ne
     764:	4770      	bxne	lr
     766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     76a:	0052      	lsls	r2, r2, #1
     76c:	eb43 0303 	adc.w	r3, r3, r3
     770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     774:	bf08      	it	eq
     776:	3d01      	subeq	r5, #1
     778:	d0f7      	beq.n	76a <__aeabi_dmul+0x1c6>
     77a:	ea43 0306 	orr.w	r3, r3, r6
     77e:	4770      	bx	lr
     780:	ea94 0f0c 	teq	r4, ip
     784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     788:	bf18      	it	ne
     78a:	ea95 0f0c 	teqne	r5, ip
     78e:	d00c      	beq.n	7aa <__aeabi_dmul+0x206>
     790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     794:	bf18      	it	ne
     796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     79a:	d1d1      	bne.n	740 <__aeabi_dmul+0x19c>
     79c:	ea81 0103 	eor.w	r1, r1, r3
     7a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7a4:	f04f 0000 	mov.w	r0, #0
     7a8:	bd70      	pop	{r4, r5, r6, pc}
     7aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7ae:	bf06      	itte	eq
     7b0:	4610      	moveq	r0, r2
     7b2:	4619      	moveq	r1, r3
     7b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7b8:	d019      	beq.n	7ee <__aeabi_dmul+0x24a>
     7ba:	ea94 0f0c 	teq	r4, ip
     7be:	d102      	bne.n	7c6 <__aeabi_dmul+0x222>
     7c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     7c4:	d113      	bne.n	7ee <__aeabi_dmul+0x24a>
     7c6:	ea95 0f0c 	teq	r5, ip
     7ca:	d105      	bne.n	7d8 <__aeabi_dmul+0x234>
     7cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     7d0:	bf1c      	itt	ne
     7d2:	4610      	movne	r0, r2
     7d4:	4619      	movne	r1, r3
     7d6:	d10a      	bne.n	7ee <__aeabi_dmul+0x24a>
     7d8:	ea81 0103 	eor.w	r1, r1, r3
     7dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     7e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     7e8:	f04f 0000 	mov.w	r0, #0
     7ec:	bd70      	pop	{r4, r5, r6, pc}
     7ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     7f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     7f6:	bd70      	pop	{r4, r5, r6, pc}

000007f8 <__aeabi_drsub>:
     7f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7fc:	e002      	b.n	804 <__adddf3>
     7fe:	bf00      	nop

00000800 <__aeabi_dsub>:
     800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000804 <__adddf3>:
     804:	b530      	push	{r4, r5, lr}
     806:	ea4f 0441 	mov.w	r4, r1, lsl #1
     80a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     80e:	ea94 0f05 	teq	r4, r5
     812:	bf08      	it	eq
     814:	ea90 0f02 	teqeq	r0, r2
     818:	bf1f      	itttt	ne
     81a:	ea54 0c00 	orrsne.w	ip, r4, r0
     81e:	ea55 0c02 	orrsne.w	ip, r5, r2
     822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     82a:	f000 80e2 	beq.w	9f2 <__adddf3+0x1ee>
     82e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     836:	bfb8      	it	lt
     838:	426d      	neglt	r5, r5
     83a:	dd0c      	ble.n	856 <__adddf3+0x52>
     83c:	442c      	add	r4, r5
     83e:	ea80 0202 	eor.w	r2, r0, r2
     842:	ea81 0303 	eor.w	r3, r1, r3
     846:	ea82 0000 	eor.w	r0, r2, r0
     84a:	ea83 0101 	eor.w	r1, r3, r1
     84e:	ea80 0202 	eor.w	r2, r0, r2
     852:	ea81 0303 	eor.w	r3, r1, r3
     856:	2d36      	cmp	r5, #54	; 0x36
     858:	bf88      	it	hi
     85a:	bd30      	pophi	{r4, r5, pc}
     85c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     860:	ea4f 3101 	mov.w	r1, r1, lsl #12
     864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     86c:	d002      	beq.n	874 <__adddf3+0x70>
     86e:	4240      	negs	r0, r0
     870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     878:	ea4f 3303 	mov.w	r3, r3, lsl #12
     87c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     880:	d002      	beq.n	888 <__adddf3+0x84>
     882:	4252      	negs	r2, r2
     884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     888:	ea94 0f05 	teq	r4, r5
     88c:	f000 80a7 	beq.w	9de <__adddf3+0x1da>
     890:	f1a4 0401 	sub.w	r4, r4, #1
     894:	f1d5 0e20 	rsbs	lr, r5, #32
     898:	db0d      	blt.n	8b6 <__adddf3+0xb2>
     89a:	fa02 fc0e 	lsl.w	ip, r2, lr
     89e:	fa22 f205 	lsr.w	r2, r2, r5
     8a2:	1880      	adds	r0, r0, r2
     8a4:	f141 0100 	adc.w	r1, r1, #0
     8a8:	fa03 f20e 	lsl.w	r2, r3, lr
     8ac:	1880      	adds	r0, r0, r2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	4159      	adcs	r1, r3
     8b4:	e00e      	b.n	8d4 <__adddf3+0xd0>
     8b6:	f1a5 0520 	sub.w	r5, r5, #32
     8ba:	f10e 0e20 	add.w	lr, lr, #32
     8be:	2a01      	cmp	r2, #1
     8c0:	fa03 fc0e 	lsl.w	ip, r3, lr
     8c4:	bf28      	it	cs
     8c6:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ca:	fa43 f305 	asr.w	r3, r3, r5
     8ce:	18c0      	adds	r0, r0, r3
     8d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8d8:	d507      	bpl.n	8ea <__adddf3+0xe6>
     8da:	f04f 0e00 	mov.w	lr, #0
     8de:	f1dc 0c00 	rsbs	ip, ip, #0
     8e2:	eb7e 0000 	sbcs.w	r0, lr, r0
     8e6:	eb6e 0101 	sbc.w	r1, lr, r1
     8ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8ee:	d31b      	bcc.n	928 <__adddf3+0x124>
     8f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8f4:	d30c      	bcc.n	910 <__adddf3+0x10c>
     8f6:	0849      	lsrs	r1, r1, #1
     8f8:	ea5f 0030 	movs.w	r0, r0, rrx
     8fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
     900:	f104 0401 	add.w	r4, r4, #1
     904:	ea4f 5244 	mov.w	r2, r4, lsl #21
     908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     90c:	f080 809a 	bcs.w	a44 <__adddf3+0x240>
     910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     914:	bf08      	it	eq
     916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     91a:	f150 0000 	adcs.w	r0, r0, #0
     91e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     922:	ea41 0105 	orr.w	r1, r1, r5
     926:	bd30      	pop	{r4, r5, pc}
     928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     92c:	4140      	adcs	r0, r0
     92e:	eb41 0101 	adc.w	r1, r1, r1
     932:	3c01      	subs	r4, #1
     934:	bf28      	it	cs
     936:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     93a:	d2e9      	bcs.n	910 <__adddf3+0x10c>
     93c:	f091 0f00 	teq	r1, #0
     940:	bf04      	itt	eq
     942:	4601      	moveq	r1, r0
     944:	2000      	moveq	r0, #0
     946:	fab1 f381 	clz	r3, r1
     94a:	bf08      	it	eq
     94c:	3320      	addeq	r3, #32
     94e:	f1a3 030b 	sub.w	r3, r3, #11
     952:	f1b3 0220 	subs.w	r2, r3, #32
     956:	da0c      	bge.n	972 <__adddf3+0x16e>
     958:	320c      	adds	r2, #12
     95a:	dd08      	ble.n	96e <__adddf3+0x16a>
     95c:	f102 0c14 	add.w	ip, r2, #20
     960:	f1c2 020c 	rsb	r2, r2, #12
     964:	fa01 f00c 	lsl.w	r0, r1, ip
     968:	fa21 f102 	lsr.w	r1, r1, r2
     96c:	e00c      	b.n	988 <__adddf3+0x184>
     96e:	f102 0214 	add.w	r2, r2, #20
     972:	bfd8      	it	le
     974:	f1c2 0c20 	rsble	ip, r2, #32
     978:	fa01 f102 	lsl.w	r1, r1, r2
     97c:	fa20 fc0c 	lsr.w	ip, r0, ip
     980:	bfdc      	itt	le
     982:	ea41 010c 	orrle.w	r1, r1, ip
     986:	4090      	lslle	r0, r2
     988:	1ae4      	subs	r4, r4, r3
     98a:	bfa2      	ittt	ge
     98c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     990:	4329      	orrge	r1, r5
     992:	bd30      	popge	{r4, r5, pc}
     994:	ea6f 0404 	mvn.w	r4, r4
     998:	3c1f      	subs	r4, #31
     99a:	da1c      	bge.n	9d6 <__adddf3+0x1d2>
     99c:	340c      	adds	r4, #12
     99e:	dc0e      	bgt.n	9be <__adddf3+0x1ba>
     9a0:	f104 0414 	add.w	r4, r4, #20
     9a4:	f1c4 0220 	rsb	r2, r4, #32
     9a8:	fa20 f004 	lsr.w	r0, r0, r4
     9ac:	fa01 f302 	lsl.w	r3, r1, r2
     9b0:	ea40 0003 	orr.w	r0, r0, r3
     9b4:	fa21 f304 	lsr.w	r3, r1, r4
     9b8:	ea45 0103 	orr.w	r1, r5, r3
     9bc:	bd30      	pop	{r4, r5, pc}
     9be:	f1c4 040c 	rsb	r4, r4, #12
     9c2:	f1c4 0220 	rsb	r2, r4, #32
     9c6:	fa20 f002 	lsr.w	r0, r0, r2
     9ca:	fa01 f304 	lsl.w	r3, r1, r4
     9ce:	ea40 0003 	orr.w	r0, r0, r3
     9d2:	4629      	mov	r1, r5
     9d4:	bd30      	pop	{r4, r5, pc}
     9d6:	fa21 f004 	lsr.w	r0, r1, r4
     9da:	4629      	mov	r1, r5
     9dc:	bd30      	pop	{r4, r5, pc}
     9de:	f094 0f00 	teq	r4, #0
     9e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9e6:	bf06      	itte	eq
     9e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9ec:	3401      	addeq	r4, #1
     9ee:	3d01      	subne	r5, #1
     9f0:	e74e      	b.n	890 <__adddf3+0x8c>
     9f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9f6:	bf18      	it	ne
     9f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9fc:	d029      	beq.n	a52 <__adddf3+0x24e>
     9fe:	ea94 0f05 	teq	r4, r5
     a02:	bf08      	it	eq
     a04:	ea90 0f02 	teqeq	r0, r2
     a08:	d005      	beq.n	a16 <__adddf3+0x212>
     a0a:	ea54 0c00 	orrs.w	ip, r4, r0
     a0e:	bf04      	itt	eq
     a10:	4619      	moveq	r1, r3
     a12:	4610      	moveq	r0, r2
     a14:	bd30      	pop	{r4, r5, pc}
     a16:	ea91 0f03 	teq	r1, r3
     a1a:	bf1e      	ittt	ne
     a1c:	2100      	movne	r1, #0
     a1e:	2000      	movne	r0, #0
     a20:	bd30      	popne	{r4, r5, pc}
     a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a26:	d105      	bne.n	a34 <__adddf3+0x230>
     a28:	0040      	lsls	r0, r0, #1
     a2a:	4149      	adcs	r1, r1
     a2c:	bf28      	it	cs
     a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a32:	bd30      	pop	{r4, r5, pc}
     a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a38:	bf3c      	itt	cc
     a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a3e:	bd30      	popcc	{r4, r5, pc}
     a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	bd30      	pop	{r4, r5, pc}
     a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a56:	bf1a      	itte	ne
     a58:	4619      	movne	r1, r3
     a5a:	4610      	movne	r0, r2
     a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a60:	bf1c      	itt	ne
     a62:	460b      	movne	r3, r1
     a64:	4602      	movne	r2, r0
     a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a6a:	bf06      	itte	eq
     a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a70:	ea91 0f03 	teqeq	r1, r3
     a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a78:	bd30      	pop	{r4, r5, pc}
     a7a:	bf00      	nop

00000a7c <__aeabi_ui2d>:
     a7c:	f090 0f00 	teq	r0, #0
     a80:	bf04      	itt	eq
     a82:	2100      	moveq	r1, #0
     a84:	4770      	bxeq	lr
     a86:	b530      	push	{r4, r5, lr}
     a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a90:	f04f 0500 	mov.w	r5, #0
     a94:	f04f 0100 	mov.w	r1, #0
     a98:	e750      	b.n	93c <__adddf3+0x138>
     a9a:	bf00      	nop

00000a9c <__aeabi_i2d>:
     a9c:	f090 0f00 	teq	r0, #0
     aa0:	bf04      	itt	eq
     aa2:	2100      	moveq	r1, #0
     aa4:	4770      	bxeq	lr
     aa6:	b530      	push	{r4, r5, lr}
     aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
     ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     ab4:	bf48      	it	mi
     ab6:	4240      	negmi	r0, r0
     ab8:	f04f 0100 	mov.w	r1, #0
     abc:	e73e      	b.n	93c <__adddf3+0x138>
     abe:	bf00      	nop

00000ac0 <__aeabi_f2d>:
     ac0:	0042      	lsls	r2, r0, #1
     ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
     ac6:	ea4f 0131 	mov.w	r1, r1, rrx
     aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ace:	bf1f      	itttt	ne
     ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     adc:	4770      	bxne	lr
     ade:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     ae2:	bf08      	it	eq
     ae4:	4770      	bxeq	lr
     ae6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     aea:	bf04      	itt	eq
     aec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     af0:	4770      	bxeq	lr
     af2:	b530      	push	{r4, r5, lr}
     af4:	f44f 7460 	mov.w	r4, #896	; 0x380
     af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     b00:	e71c      	b.n	93c <__adddf3+0x138>
     b02:	bf00      	nop

00000b04 <__aeabi_ul2d>:
     b04:	ea50 0201 	orrs.w	r2, r0, r1
     b08:	bf08      	it	eq
     b0a:	4770      	bxeq	lr
     b0c:	b530      	push	{r4, r5, lr}
     b0e:	f04f 0500 	mov.w	r5, #0
     b12:	e00a      	b.n	b2a <__aeabi_l2d+0x16>

00000b14 <__aeabi_l2d>:
     b14:	ea50 0201 	orrs.w	r2, r0, r1
     b18:	bf08      	it	eq
     b1a:	4770      	bxeq	lr
     b1c:	b530      	push	{r4, r5, lr}
     b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     b22:	d502      	bpl.n	b2a <__aeabi_l2d+0x16>
     b24:	4240      	negs	r0, r0
     b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b36:	f43f aed8 	beq.w	8ea <__adddf3+0xe6>
     b3a:	f04f 0203 	mov.w	r2, #3
     b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b42:	bf18      	it	ne
     b44:	3203      	addne	r2, #3
     b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b4a:	bf18      	it	ne
     b4c:	3203      	addne	r2, #3
     b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b52:	f1c2 0320 	rsb	r3, r2, #32
     b56:	fa00 fc03 	lsl.w	ip, r0, r3
     b5a:	fa20 f002 	lsr.w	r0, r0, r2
     b5e:	fa01 fe03 	lsl.w	lr, r1, r3
     b62:	ea40 000e 	orr.w	r0, r0, lr
     b66:	fa21 f102 	lsr.w	r1, r1, r2
     b6a:	4414      	add	r4, r2
     b6c:	e6bd      	b.n	8ea <__adddf3+0xe6>
     b6e:	bf00      	nop

00000b70 <__aeabi_d2uiz>:
     b70:	004a      	lsls	r2, r1, #1
     b72:	d211      	bcs.n	b98 <__BSS_SRAM_SIZE+0x18>
     b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b78:	d211      	bcs.n	b9e <__BSS_SRAM_SIZE+0x1e>
     b7a:	d50d      	bpl.n	b98 <__BSS_SRAM_SIZE+0x18>
     b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b84:	d40e      	bmi.n	ba4 <__BSS_SRAM_SIZE+0x24>
     b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b92:	fa23 f002 	lsr.w	r0, r3, r2
     b96:	4770      	bx	lr
     b98:	f04f 0000 	mov.w	r0, #0
     b9c:	4770      	bx	lr
     b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     ba2:	d102      	bne.n	baa <__BSS_SRAM_SIZE+0x2a>
     ba4:	f04f 30ff 	mov.w	r0, #4294967295
     ba8:	4770      	bx	lr
     baa:	f04f 0000 	mov.w	r0, #0
     bae:	4770      	bx	lr

00000bb0 <__aeabi_uldivmod>:
     bb0:	b953      	cbnz	r3, bc8 <__aeabi_uldivmod+0x18>
     bb2:	b94a      	cbnz	r2, bc8 <__aeabi_uldivmod+0x18>
     bb4:	2900      	cmp	r1, #0
     bb6:	bf08      	it	eq
     bb8:	2800      	cmpeq	r0, #0
     bba:	bf1c      	itt	ne
     bbc:	f04f 31ff 	movne.w	r1, #4294967295
     bc0:	f04f 30ff 	movne.w	r0, #4294967295
     bc4:	f000 b978 	b.w	eb8 <__aeabi_idiv0>
     bc8:	f1ad 0c08 	sub.w	ip, sp, #8
     bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     bd0:	f000 f806 	bl	be0 <__udivmoddi4>
     bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
     bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bdc:	b004      	add	sp, #16
     bde:	4770      	bx	lr

00000be0 <__udivmoddi4>:
     be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     be4:	9d08      	ldr	r5, [sp, #32]
     be6:	460e      	mov	r6, r1
     be8:	4604      	mov	r4, r0
     bea:	468e      	mov	lr, r1
     bec:	2b00      	cmp	r3, #0
     bee:	d14c      	bne.n	c8a <__udivmoddi4+0xaa>
     bf0:	428a      	cmp	r2, r1
     bf2:	4694      	mov	ip, r2
     bf4:	d967      	bls.n	cc6 <__udivmoddi4+0xe6>
     bf6:	fab2 f282 	clz	r2, r2
     bfa:	b152      	cbz	r2, c12 <__udivmoddi4+0x32>
     bfc:	fa01 f302 	lsl.w	r3, r1, r2
     c00:	f1c2 0120 	rsb	r1, r2, #32
     c04:	fa20 f101 	lsr.w	r1, r0, r1
     c08:	fa0c fc02 	lsl.w	ip, ip, r2
     c0c:	ea41 0e03 	orr.w	lr, r1, r3
     c10:	4094      	lsls	r4, r2
     c12:	ea4f 481c 	mov.w	r8, ip, lsr #16
     c16:	0c21      	lsrs	r1, r4, #16
     c18:	fbbe f6f8 	udiv	r6, lr, r8
     c1c:	fa1f f78c 	uxth.w	r7, ip
     c20:	fb08 e316 	mls	r3, r8, r6, lr
     c24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     c28:	fb06 f107 	mul.w	r1, r6, r7
     c2c:	4299      	cmp	r1, r3
     c2e:	d90a      	bls.n	c46 <__udivmoddi4+0x66>
     c30:	eb1c 0303 	adds.w	r3, ip, r3
     c34:	f106 30ff 	add.w	r0, r6, #4294967295
     c38:	f080 811e 	bcs.w	e78 <__udivmoddi4+0x298>
     c3c:	4299      	cmp	r1, r3
     c3e:	f240 811b 	bls.w	e78 <__udivmoddi4+0x298>
     c42:	3e02      	subs	r6, #2
     c44:	4463      	add	r3, ip
     c46:	1a5b      	subs	r3, r3, r1
     c48:	b2a4      	uxth	r4, r4
     c4a:	fbb3 f0f8 	udiv	r0, r3, r8
     c4e:	fb08 3310 	mls	r3, r8, r0, r3
     c52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c56:	fb00 f707 	mul.w	r7, r0, r7
     c5a:	42a7      	cmp	r7, r4
     c5c:	d90a      	bls.n	c74 <__udivmoddi4+0x94>
     c5e:	eb1c 0404 	adds.w	r4, ip, r4
     c62:	f100 33ff 	add.w	r3, r0, #4294967295
     c66:	f080 8109 	bcs.w	e7c <__udivmoddi4+0x29c>
     c6a:	42a7      	cmp	r7, r4
     c6c:	f240 8106 	bls.w	e7c <__udivmoddi4+0x29c>
     c70:	4464      	add	r4, ip
     c72:	3802      	subs	r0, #2
     c74:	1be4      	subs	r4, r4, r7
     c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     c7a:	2100      	movs	r1, #0
     c7c:	b11d      	cbz	r5, c86 <__udivmoddi4+0xa6>
     c7e:	40d4      	lsrs	r4, r2
     c80:	2300      	movs	r3, #0
     c82:	e9c5 4300 	strd	r4, r3, [r5]
     c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c8a:	428b      	cmp	r3, r1
     c8c:	d908      	bls.n	ca0 <__udivmoddi4+0xc0>
     c8e:	2d00      	cmp	r5, #0
     c90:	f000 80ef 	beq.w	e72 <__udivmoddi4+0x292>
     c94:	2100      	movs	r1, #0
     c96:	e9c5 0600 	strd	r0, r6, [r5]
     c9a:	4608      	mov	r0, r1
     c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca0:	fab3 f183 	clz	r1, r3
     ca4:	2900      	cmp	r1, #0
     ca6:	d149      	bne.n	d3c <__udivmoddi4+0x15c>
     ca8:	42b3      	cmp	r3, r6
     caa:	d302      	bcc.n	cb2 <__udivmoddi4+0xd2>
     cac:	4282      	cmp	r2, r0
     cae:	f200 80ff 	bhi.w	eb0 <__udivmoddi4+0x2d0>
     cb2:	1a84      	subs	r4, r0, r2
     cb4:	eb66 0303 	sbc.w	r3, r6, r3
     cb8:	2001      	movs	r0, #1
     cba:	469e      	mov	lr, r3
     cbc:	2d00      	cmp	r5, #0
     cbe:	d0e2      	beq.n	c86 <__udivmoddi4+0xa6>
     cc0:	e9c5 4e00 	strd	r4, lr, [r5]
     cc4:	e7df      	b.n	c86 <__udivmoddi4+0xa6>
     cc6:	b902      	cbnz	r2, cca <__udivmoddi4+0xea>
     cc8:	deff      	udf	#255	; 0xff
     cca:	fab2 f282 	clz	r2, r2
     cce:	2a00      	cmp	r2, #0
     cd0:	f040 808e 	bne.w	df0 <__udivmoddi4+0x210>
     cd4:	eba1 060c 	sub.w	r6, r1, ip
     cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     cdc:	fa1f f38c 	uxth.w	r3, ip
     ce0:	2101      	movs	r1, #1
     ce2:	fbb6 fef7 	udiv	lr, r6, r7
     ce6:	fb07 601e 	mls	r0, r7, lr, r6
     cea:	0c26      	lsrs	r6, r4, #16
     cec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     cf0:	fb03 f00e 	mul.w	r0, r3, lr
     cf4:	42b0      	cmp	r0, r6
     cf6:	d908      	bls.n	d0a <__udivmoddi4+0x12a>
     cf8:	eb1c 0606 	adds.w	r6, ip, r6
     cfc:	f10e 38ff 	add.w	r8, lr, #4294967295
     d00:	d202      	bcs.n	d08 <__udivmoddi4+0x128>
     d02:	42b0      	cmp	r0, r6
     d04:	f200 80d0 	bhi.w	ea8 <__udivmoddi4+0x2c8>
     d08:	46c6      	mov	lr, r8
     d0a:	1a36      	subs	r6, r6, r0
     d0c:	b2a4      	uxth	r4, r4
     d0e:	fbb6 f0f7 	udiv	r0, r6, r7
     d12:	fb07 6610 	mls	r6, r7, r0, r6
     d16:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     d1a:	fb00 f303 	mul.w	r3, r0, r3
     d1e:	42a3      	cmp	r3, r4
     d20:	d908      	bls.n	d34 <__udivmoddi4+0x154>
     d22:	eb1c 0404 	adds.w	r4, ip, r4
     d26:	f100 36ff 	add.w	r6, r0, #4294967295
     d2a:	d202      	bcs.n	d32 <__udivmoddi4+0x152>
     d2c:	42a3      	cmp	r3, r4
     d2e:	f200 80b8 	bhi.w	ea2 <__udivmoddi4+0x2c2>
     d32:	4630      	mov	r0, r6
     d34:	1ae4      	subs	r4, r4, r3
     d36:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     d3a:	e79f      	b.n	c7c <__udivmoddi4+0x9c>
     d3c:	f1c1 0720 	rsb	r7, r1, #32
     d40:	fa22 f407 	lsr.w	r4, r2, r7
     d44:	408b      	lsls	r3, r1
     d46:	4323      	orrs	r3, r4
     d48:	fa06 fc01 	lsl.w	ip, r6, r1
     d4c:	fa26 f407 	lsr.w	r4, r6, r7
     d50:	fa20 f607 	lsr.w	r6, r0, r7
     d54:	ea46 060c 	orr.w	r6, r6, ip
     d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
     d5c:	fa00 f801 	lsl.w	r8, r0, r1
     d60:	fbb4 fef9 	udiv	lr, r4, r9
     d64:	0c30      	lsrs	r0, r6, #16
     d66:	fa1f fc83 	uxth.w	ip, r3
     d6a:	fb09 441e 	mls	r4, r9, lr, r4
     d6e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     d72:	fb0e f00c 	mul.w	r0, lr, ip
     d76:	42a0      	cmp	r0, r4
     d78:	fa02 f201 	lsl.w	r2, r2, r1
     d7c:	d90a      	bls.n	d94 <__udivmoddi4+0x1b4>
     d7e:	191c      	adds	r4, r3, r4
     d80:	f10e 3aff 	add.w	sl, lr, #4294967295
     d84:	f080 808b 	bcs.w	e9e <__udivmoddi4+0x2be>
     d88:	42a0      	cmp	r0, r4
     d8a:	f240 8088 	bls.w	e9e <__udivmoddi4+0x2be>
     d8e:	f1ae 0e02 	sub.w	lr, lr, #2
     d92:	441c      	add	r4, r3
     d94:	1a24      	subs	r4, r4, r0
     d96:	b2b6      	uxth	r6, r6
     d98:	fbb4 f0f9 	udiv	r0, r4, r9
     d9c:	fb09 4410 	mls	r4, r9, r0, r4
     da0:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     da4:	fb00 fc0c 	mul.w	ip, r0, ip
     da8:	45a4      	cmp	ip, r4
     daa:	d907      	bls.n	dbc <__udivmoddi4+0x1dc>
     dac:	191c      	adds	r4, r3, r4
     dae:	f100 36ff 	add.w	r6, r0, #4294967295
     db2:	d270      	bcs.n	e96 <__udivmoddi4+0x2b6>
     db4:	45a4      	cmp	ip, r4
     db6:	d96e      	bls.n	e96 <__udivmoddi4+0x2b6>
     db8:	3802      	subs	r0, #2
     dba:	441c      	add	r4, r3
     dbc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     dc0:	fba0 e602 	umull	lr, r6, r0, r2
     dc4:	eba4 040c 	sub.w	r4, r4, ip
     dc8:	42b4      	cmp	r4, r6
     dca:	46f4      	mov	ip, lr
     dcc:	46b1      	mov	r9, r6
     dce:	d359      	bcc.n	e84 <__udivmoddi4+0x2a4>
     dd0:	d056      	beq.n	e80 <__udivmoddi4+0x2a0>
     dd2:	2d00      	cmp	r5, #0
     dd4:	d06e      	beq.n	eb4 <__udivmoddi4+0x2d4>
     dd6:	ebb8 030c 	subs.w	r3, r8, ip
     dda:	eb64 0409 	sbc.w	r4, r4, r9
     dde:	40cb      	lsrs	r3, r1
     de0:	fa04 f707 	lsl.w	r7, r4, r7
     de4:	431f      	orrs	r7, r3
     de6:	40cc      	lsrs	r4, r1
     de8:	e9c5 7400 	strd	r7, r4, [r5]
     dec:	2100      	movs	r1, #0
     dee:	e74a      	b.n	c86 <__udivmoddi4+0xa6>
     df0:	f1c2 0020 	rsb	r0, r2, #32
     df4:	fa24 f100 	lsr.w	r1, r4, r0
     df8:	fa0c fc02 	lsl.w	ip, ip, r2
     dfc:	fa06 f302 	lsl.w	r3, r6, r2
     e00:	fa26 f000 	lsr.w	r0, r6, r0
     e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
     e08:	ea41 0603 	orr.w	r6, r1, r3
     e0c:	fbb0 f1f7 	udiv	r1, r0, r7
     e10:	fa1f f38c 	uxth.w	r3, ip
     e14:	fb07 0e11 	mls	lr, r7, r1, r0
     e18:	0c30      	lsrs	r0, r6, #16
     e1a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     e1e:	fb01 fe03 	mul.w	lr, r1, r3
     e22:	4586      	cmp	lr, r0
     e24:	fa04 f402 	lsl.w	r4, r4, r2
     e28:	d908      	bls.n	e3c <__udivmoddi4+0x25c>
     e2a:	eb1c 0000 	adds.w	r0, ip, r0
     e2e:	f101 38ff 	add.w	r8, r1, #4294967295
     e32:	d232      	bcs.n	e9a <__udivmoddi4+0x2ba>
     e34:	4586      	cmp	lr, r0
     e36:	d930      	bls.n	e9a <__udivmoddi4+0x2ba>
     e38:	3902      	subs	r1, #2
     e3a:	4460      	add	r0, ip
     e3c:	eba0 000e 	sub.w	r0, r0, lr
     e40:	b2b6      	uxth	r6, r6
     e42:	fbb0 fef7 	udiv	lr, r0, r7
     e46:	fb07 001e 	mls	r0, r7, lr, r0
     e4a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     e4e:	fb0e f003 	mul.w	r0, lr, r3
     e52:	42b0      	cmp	r0, r6
     e54:	d909      	bls.n	e6a <__udivmoddi4+0x28a>
     e56:	eb1c 0606 	adds.w	r6, ip, r6
     e5a:	f10e 38ff 	add.w	r8, lr, #4294967295
     e5e:	d218      	bcs.n	e92 <__udivmoddi4+0x2b2>
     e60:	42b0      	cmp	r0, r6
     e62:	d916      	bls.n	e92 <__udivmoddi4+0x2b2>
     e64:	f1ae 0e02 	sub.w	lr, lr, #2
     e68:	4466      	add	r6, ip
     e6a:	1a36      	subs	r6, r6, r0
     e6c:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     e70:	e737      	b.n	ce2 <__udivmoddi4+0x102>
     e72:	4629      	mov	r1, r5
     e74:	4628      	mov	r0, r5
     e76:	e706      	b.n	c86 <__udivmoddi4+0xa6>
     e78:	4606      	mov	r6, r0
     e7a:	e6e4      	b.n	c46 <__udivmoddi4+0x66>
     e7c:	4618      	mov	r0, r3
     e7e:	e6f9      	b.n	c74 <__udivmoddi4+0x94>
     e80:	45f0      	cmp	r8, lr
     e82:	d2a6      	bcs.n	dd2 <__udivmoddi4+0x1f2>
     e84:	ebbe 0c02 	subs.w	ip, lr, r2
     e88:	eb66 0303 	sbc.w	r3, r6, r3
     e8c:	3801      	subs	r0, #1
     e8e:	4699      	mov	r9, r3
     e90:	e79f      	b.n	dd2 <__udivmoddi4+0x1f2>
     e92:	46c6      	mov	lr, r8
     e94:	e7e9      	b.n	e6a <__udivmoddi4+0x28a>
     e96:	4630      	mov	r0, r6
     e98:	e790      	b.n	dbc <__udivmoddi4+0x1dc>
     e9a:	4641      	mov	r1, r8
     e9c:	e7ce      	b.n	e3c <__udivmoddi4+0x25c>
     e9e:	46d6      	mov	lr, sl
     ea0:	e778      	b.n	d94 <__udivmoddi4+0x1b4>
     ea2:	4464      	add	r4, ip
     ea4:	3802      	subs	r0, #2
     ea6:	e745      	b.n	d34 <__udivmoddi4+0x154>
     ea8:	f1ae 0e02 	sub.w	lr, lr, #2
     eac:	4466      	add	r6, ip
     eae:	e72c      	b.n	d0a <__udivmoddi4+0x12a>
     eb0:	4608      	mov	r0, r1
     eb2:	e703      	b.n	cbc <__udivmoddi4+0xdc>
     eb4:	4629      	mov	r1, r5
     eb6:	e6e6      	b.n	c86 <__udivmoddi4+0xa6>

00000eb8 <__aeabi_idiv0>:
     eb8:	4770      	bx	lr
     eba:	bf00      	nop

00000ebc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     ebc:	b500      	push	{lr}
     ebe:	b087      	sub	sp, #28

    uint16 adcValuePot1, adcValuePot2;
    uint16 voltagePot1, voltagePot2;
    uint16 resistancePot1, resistancePot2;

    EcuM_Init();
     ec0:	f000 f86a 	bl	f98 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     ec4:	f000 fb74 	bl	15b0 <SEGGER_RTT_Init>

    /* By default ADC0-CH8 is not connected to B13, but with this function
    it will, this is called Interleave, read RM page 1194*/
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     ec8:	2208      	movs	r2, #8
     eca:	210d      	movs	r1, #13
     ecc:	482f      	ldr	r0, [pc, #188]	; (f8c <main+0xd0>)
     ece:	f005 fcf3 	bl	68b8 <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     ed2:	ab04      	add	r3, sp, #16
     ed4:	4619      	mov	r1, r3
     ed6:	2000      	movs	r0, #0
     ed8:	f007 f9fc 	bl	82d4 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     edc:	ab02      	add	r3, sp, #8
     ede:	4619      	mov	r1, r3
     ee0:	2000      	movs	r0, #0
     ee2:	f006 ff99 	bl	7e18 <Adc_SetupResultBuffer>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     ee6:	2000      	movs	r0, #0
     ee8:	f007 f830 	bl	7f4c <Adc_StartGroupConversion>
        /* Wait until the conversion is done */
        while( Adc_GetGroupStatus( AdcGroup_0 ) == ADC_BUSY );
     eec:	bf00      	nop
     eee:	2000      	movs	r0, #0
     ef0:	f007 f909 	bl	8106 <Adc_GetGroupStatus>
     ef4:	4603      	mov	r3, r0
     ef6:	2b01      	cmp	r3, #1
     ef8:	d0f9      	beq.n	eee <main+0x32>
        /* Read ready conversion */
        Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );
     efa:	ab03      	add	r3, sp, #12
     efc:	4619      	mov	r1, r3
     efe:	2000      	movs	r0, #0
     f00:	f007 f8bc 	bl	807c <Adc_ReadGroup>

        // ADC raw values for the two potentiometers
        adcValuePot1 = AdcReadGroupBuffer[AdcChannel_0];
     f04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
     f08:	f8ad 3016 	strh.w	r3, [sp, #22]
        adcValuePot2 = AdcReadGroupBuffer[AdcChannel_1];
     f0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     f10:	f8ad 3014 	strh.w	r3, [sp, #20]

        // Convert ADC values to voltage and resistance
        ConvertAdcValue(adcValuePot1, &voltagePot1, &resistancePot1);
     f14:	f10d 0202 	add.w	r2, sp, #2
     f18:	f10d 0106 	add.w	r1, sp, #6
     f1c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
     f20:	4618      	mov	r0, r3
     f22:	f000 f87d 	bl	1020 <ConvertAdcValue>
        ConvertAdcValue(adcValuePot2, &voltagePot2, &resistancePot2);
     f26:	466a      	mov	r2, sp
     f28:	a901      	add	r1, sp, #4
     f2a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     f2e:	4618      	mov	r0, r3
     f30:	f000 f876 	bl	1020 <ConvertAdcValue>

        if(resistancePot1 > 10000)
     f34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
     f38:	f242 7210 	movw	r2, #10000	; 0x2710
     f3c:	4293      	cmp	r3, r2
     f3e:	d903      	bls.n	f48 <main+0x8c>
        {
            resistancePot1 = 10000;
     f40:	f242 7310 	movw	r3, #10000	; 0x2710
     f44:	f8ad 3002 	strh.w	r3, [sp, #2]
        }
        if(resistancePot2 > 10000)
     f48:	f8bd 3000 	ldrh.w	r3, [sp]
     f4c:	f242 7210 	movw	r2, #10000	; 0x2710
     f50:	4293      	cmp	r3, r2
     f52:	d903      	bls.n	f5c <main+0xa0>
        {
            resistancePot2 = 10000;
     f54:	f242 7310 	movw	r3, #10000	; 0x2710
     f58:	f8ad 3000 	strh.w	r3, [sp]
        }

        /* Adaptation for display to simulate the floating-point */
        SEGGER_RTT_printf( 0, "Pot1: Voltage = %d V, Resistance = %d Ohms\n", 
     f5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     f60:	461a      	mov	r2, r3
     f62:	f8bd 3002 	ldrh.w	r3, [sp, #2]
     f66:	490a      	ldr	r1, [pc, #40]	; (f90 <main+0xd4>)
     f68:	2000      	movs	r0, #0
     f6a:	f000 fe89 	bl	1c80 <SEGGER_RTT_printf>
            (voltagePot1), (resistancePot1) );   
        SEGGER_RTT_printf( 0, "Pot2: Voltage = %d V, Resistance = %d Ohms\n", 
     f6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     f72:	461a      	mov	r2, r3
     f74:	f8bd 3000 	ldrh.w	r3, [sp]
     f78:	4906      	ldr	r1, [pc, #24]	; (f94 <main+0xd8>)
     f7a:	2000      	movs	r0, #0
     f7c:	f000 fe80 	bl	1c80 <SEGGER_RTT_printf>
            (voltagePot2), (resistancePot2) );   

        Delay( 800u );
     f80:	f44f 7048 	mov.w	r0, #800	; 0x320
     f84:	f000 f826 	bl	fd4 <Delay>
        Adc_StartGroupConversion( AdcGroup_0 );
     f88:	e7ad      	b.n	ee6 <main+0x2a>
     f8a:	bf00      	nop
     f8c:	4004a000 	.word	0x4004a000
     f90:	000106b4 	.word	0x000106b4
     f94:	000106e0 	.word	0x000106e0

00000f98 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     f98:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     f9a:	480b      	ldr	r0, [pc, #44]	; (fc8 <EcuM_Init+0x30>)
     f9c:	f004 feb6 	bl	5d0c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     fa0:	2000      	movs	r0, #0
     fa2:	f004 ff07 	bl	5db4 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     fa6:	2000      	movs	r0, #0
     fa8:	f004 ff28 	bl	5dfc <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     fac:	2000      	movs	r0, #0
     fae:	f001 f918 	bl	21e2 <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     fb2:	2000      	movs	r0, #0
     fb4:	f001 f812 	bl	1fdc <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5 (B1) and ADC0-SE8 (B13) */
    Port_Init( &Port_Config );
     fb8:	4804      	ldr	r0, [pc, #16]	; (fcc <EcuM_Init+0x34>)
     fba:	f005 faa9 	bl	6510 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     fbe:	4804      	ldr	r0, [pc, #16]	; (fd0 <EcuM_Init+0x38>)
     fc0:	f006 fedc 	bl	7d7c <Adc_Init>
}
     fc4:	bf00      	nop
     fc6:	bd08      	pop	{r3, pc}
     fc8:	000113d4 	.word	0x000113d4
     fcc:	00011560 	.word	0x00011560
     fd0:	00010fac 	.word	0x00010fac

00000fd4 <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     fd4:	b500      	push	{lr}
     fd6:	b087      	sub	sp, #28
     fd8:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     fda:	9b01      	ldr	r3, [sp, #4]
     fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     fe0:	fb02 f303 	mul.w	r3, r2, r3
     fe4:	2101      	movs	r1, #1
     fe6:	4618      	mov	r0, r3
     fe8:	f001 f950 	bl	228c <OsIf_MicrosToTicks>
     fec:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     fee:	2001      	movs	r0, #1
     ff0:	f001 f900 	bl	21f4 <OsIf_GetCounter>
     ff4:	4603      	mov	r3, r0
     ff6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     ff8:	2300      	movs	r3, #0
     ffa:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     ffc:	ab03      	add	r3, sp, #12
     ffe:	2101      	movs	r1, #1
    1000:	4618      	mov	r0, r3
    1002:	f001 f910 	bl	2226 <OsIf_GetElapsed>
    1006:	4602      	mov	r2, r0
    1008:	9b05      	ldr	r3, [sp, #20]
    100a:	4413      	add	r3, r2
    100c:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
    100e:	9a05      	ldr	r2, [sp, #20]
    1010:	9b04      	ldr	r3, [sp, #16]
    1012:	429a      	cmp	r2, r3
    1014:	d3f2      	bcc.n	ffc <Delay+0x28>
}
    1016:	bf00      	nop
    1018:	bf00      	nop
    101a:	b007      	add	sp, #28
    101c:	f85d fb04 	ldr.w	pc, [sp], #4

00001020 <ConvertAdcValue>:

void ConvertAdcValue(uint16 adcValue, uint16* voltage, uint16* resistance) 
{
    1020:	b500      	push	{lr}
    1022:	b085      	sub	sp, #20
    1024:	4603      	mov	r3, r0
    1026:	9102      	str	r1, [sp, #8]
    1028:	9201      	str	r2, [sp, #4]
    102a:	f8ad 300e 	strh.w	r3, [sp, #14]
    *voltage = ((( float )adcValue) / ADC_MAX_VALUE_RESOLUTION) * (ADC_REF_VOLTAGE);
    102e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1032:	ee07 3a90 	vmov	s15, r3
    1036:	eef8 7a67 	vcvt.f32.u32	s15, s15
    103a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 10a8 <ConvertAdcValue+0x88>
    103e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    1042:	ee16 0a90 	vmov	r0, s13
    1046:	f7ff fd3b 	bl	ac0 <__aeabi_f2d>
    104a:	a315      	add	r3, pc, #84	; (adr r3, 10a0 <ConvertAdcValue+0x80>)
    104c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1050:	f7ff faa8 	bl	5a4 <__aeabi_dmul>
    1054:	4602      	mov	r2, r0
    1056:	460b      	mov	r3, r1
    1058:	4610      	mov	r0, r2
    105a:	4619      	mov	r1, r3
    105c:	f7ff fd88 	bl	b70 <__aeabi_d2uiz>
    1060:	4603      	mov	r3, r0
    1062:	b29a      	uxth	r2, r3
    1064:	9b02      	ldr	r3, [sp, #8]
    1066:	801a      	strh	r2, [r3, #0]
    *resistance = ((( float )adcValue) / ADC_MAX_VALUE_RESOLUTION) * ADC_REF_RESISTANCE;
    1068:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    106c:	ee07 3a90 	vmov	s15, r3
    1070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1074:	eddf 6a0c 	vldr	s13, [pc, #48]	; 10a8 <ConvertAdcValue+0x88>
    1078:	eec7 7a26 	vdiv.f32	s15, s14, s13
    107c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 10ac <ConvertAdcValue+0x8c>
    1080:	ee67 7a87 	vmul.f32	s15, s15, s14
    1084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1088:	ee17 3a90 	vmov	r3, s15
    108c:	b29a      	uxth	r2, r3
    108e:	9b01      	ldr	r3, [sp, #4]
    1090:	801a      	strh	r2, [r3, #0]

}
    1092:	bf00      	nop
    1094:	b005      	add	sp, #20
    1096:	f85d fb04 	ldr.w	pc, [sp], #4
    109a:	bf00      	nop
    109c:	f3af 8000 	nop.w
    10a0:	66666666 	.word	0x66666666
    10a4:	400a6666 	.word	0x400a6666
    10a8:	4528f000 	.word	0x4528f000
    10ac:	461c4000 	.word	0x461c4000

000010b0 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
    10b0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
    10b2:	f3ef 8310 	mrs	r3, PRIMASK
    10b6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
    10b8:	4623      	mov	r3, r4
}
    10ba:	4618      	mov	r0, r3
    10bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    10c0:	4770      	bx	lr

000010c2 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
    10c2:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
    10c4:	f3ef 8310 	mrs	r3, PRIMASK
    10c8:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
    10ca:	4623      	mov	r3, r4
}
    10cc:	4618      	mov	r0, r3
    10ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    10d2:	4770      	bx	lr

000010d4 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
    10d4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
    10d6:	f3ef 8310 	mrs	r3, PRIMASK
    10da:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
    10dc:	4623      	mov	r3, r4
}
    10de:	4618      	mov	r0, r3
    10e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    10e4:	4770      	bx	lr
	...

000010e8 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    10e8:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    10ea:	2300      	movs	r3, #0
    10ec:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    10ee:	2300      	movs	r3, #0
    10f0:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    10f2:	2300      	movs	r3, #0
    10f4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    10f6:	2300      	movs	r3, #0
    10f8:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    10fa:	4b44      	ldr	r3, [pc, #272]	; (120c <init_data_bss+0x124>)
    10fc:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    10fe:	4b44      	ldr	r3, [pc, #272]	; (1210 <init_data_bss+0x128>)
    1100:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    1102:	9b05      	ldr	r3, [sp, #20]
    1104:	681b      	ldr	r3, [r3, #0]
    1106:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1108:	9b05      	ldr	r3, [sp, #20]
    110a:	3304      	adds	r3, #4
    110c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    110e:	9b05      	ldr	r3, [sp, #20]
    1110:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    1112:	2300      	movs	r3, #0
    1114:	9309      	str	r3, [sp, #36]	; 0x24
    1116:	e03d      	b.n	1194 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1118:	9a09      	ldr	r2, [sp, #36]	; 0x24
    111a:	4613      	mov	r3, r2
    111c:	005b      	lsls	r3, r3, #1
    111e:	4413      	add	r3, r2
    1120:	009b      	lsls	r3, r3, #2
    1122:	461a      	mov	r2, r3
    1124:	9b03      	ldr	r3, [sp, #12]
    1126:	4413      	add	r3, r2
    1128:	685b      	ldr	r3, [r3, #4]
    112a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    112c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    112e:	4613      	mov	r3, r2
    1130:	005b      	lsls	r3, r3, #1
    1132:	4413      	add	r3, r2
    1134:	009b      	lsls	r3, r3, #2
    1136:	461a      	mov	r2, r3
    1138:	9b03      	ldr	r3, [sp, #12]
    113a:	4413      	add	r3, r2
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1140:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1142:	4613      	mov	r3, r2
    1144:	005b      	lsls	r3, r3, #1
    1146:	4413      	add	r3, r2
    1148:	009b      	lsls	r3, r3, #2
    114a:	461a      	mov	r2, r3
    114c:	9b03      	ldr	r3, [sp, #12]
    114e:	4413      	add	r3, r2
    1150:	689b      	ldr	r3, [r3, #8]
    1152:	4619      	mov	r1, r3
    1154:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1156:	4613      	mov	r3, r2
    1158:	005b      	lsls	r3, r3, #1
    115a:	4413      	add	r3, r2
    115c:	009b      	lsls	r3, r3, #2
    115e:	461a      	mov	r2, r3
    1160:	9b03      	ldr	r3, [sp, #12]
    1162:	4413      	add	r3, r2
    1164:	685b      	ldr	r3, [r3, #4]
    1166:	1acb      	subs	r3, r1, r3
    1168:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    116a:	2300      	movs	r3, #0
    116c:	9308      	str	r3, [sp, #32]
    116e:	e00a      	b.n	1186 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1170:	9a00      	ldr	r2, [sp, #0]
    1172:	9b08      	ldr	r3, [sp, #32]
    1174:	441a      	add	r2, r3
    1176:	9901      	ldr	r1, [sp, #4]
    1178:	9b08      	ldr	r3, [sp, #32]
    117a:	440b      	add	r3, r1
    117c:	7812      	ldrb	r2, [r2, #0]
    117e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1180:	9b08      	ldr	r3, [sp, #32]
    1182:	3301      	adds	r3, #1
    1184:	9308      	str	r3, [sp, #32]
    1186:	9a08      	ldr	r2, [sp, #32]
    1188:	9b06      	ldr	r3, [sp, #24]
    118a:	429a      	cmp	r2, r3
    118c:	d3f0      	bcc.n	1170 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    118e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1190:	3301      	adds	r3, #1
    1192:	9309      	str	r3, [sp, #36]	; 0x24
    1194:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1196:	9b07      	ldr	r3, [sp, #28]
    1198:	429a      	cmp	r2, r3
    119a:	d3bd      	bcc.n	1118 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    119c:	9b04      	ldr	r3, [sp, #16]
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    11a2:	9b04      	ldr	r3, [sp, #16]
    11a4:	3304      	adds	r3, #4
    11a6:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    11a8:	9b04      	ldr	r3, [sp, #16]
    11aa:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    11ac:	2300      	movs	r3, #0
    11ae:	9309      	str	r3, [sp, #36]	; 0x24
    11b0:	e024      	b.n	11fc <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    11b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11b4:	00db      	lsls	r3, r3, #3
    11b6:	9a02      	ldr	r2, [sp, #8]
    11b8:	4413      	add	r3, r2
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    11be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11c0:	00db      	lsls	r3, r3, #3
    11c2:	9a02      	ldr	r2, [sp, #8]
    11c4:	4413      	add	r3, r2
    11c6:	685b      	ldr	r3, [r3, #4]
    11c8:	4619      	mov	r1, r3
    11ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11cc:	00db      	lsls	r3, r3, #3
    11ce:	9a02      	ldr	r2, [sp, #8]
    11d0:	4413      	add	r3, r2
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	1acb      	subs	r3, r1, r3
    11d6:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    11d8:	2300      	movs	r3, #0
    11da:	9308      	str	r3, [sp, #32]
    11dc:	e007      	b.n	11ee <init_data_bss+0x106>
        {
            ram[j] = 0U;
    11de:	9a01      	ldr	r2, [sp, #4]
    11e0:	9b08      	ldr	r3, [sp, #32]
    11e2:	4413      	add	r3, r2
    11e4:	2200      	movs	r2, #0
    11e6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    11e8:	9b08      	ldr	r3, [sp, #32]
    11ea:	3301      	adds	r3, #1
    11ec:	9308      	str	r3, [sp, #32]
    11ee:	9a08      	ldr	r2, [sp, #32]
    11f0:	9b06      	ldr	r3, [sp, #24]
    11f2:	429a      	cmp	r2, r3
    11f4:	d3f3      	bcc.n	11de <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    11f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11f8:	3301      	adds	r3, #1
    11fa:	9309      	str	r3, [sp, #36]	; 0x24
    11fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11fe:	9b07      	ldr	r3, [sp, #28]
    1200:	429a      	cmp	r2, r3
    1202:	d3d6      	bcc.n	11b2 <init_data_bss+0xca>
        }
    }
}
    1204:	bf00      	nop
    1206:	bf00      	nop
    1208:	b00a      	add	sp, #40	; 0x28
    120a:	4770      	bx	lr
    120c:	000115d0 	.word	0x000115d0
    1210:	000115ec 	.word	0x000115ec

00001214 <sys_m4_cache_init>:
{
    1214:	b084      	sub	sp, #16
    1216:	4603      	mov	r3, r0
    1218:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    121c:	2300      	movs	r3, #0
    121e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    1222:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1226:	2b00      	cmp	r3, #0
    1228:	d118      	bne.n	125c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    122a:	4b10      	ldr	r3, [pc, #64]	; (126c <sys_m4_cache_init+0x58>)
    122c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1230:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1232:	4b0e      	ldr	r3, [pc, #56]	; (126c <sys_m4_cache_init+0x58>)
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	4a0d      	ldr	r2, [pc, #52]	; (126c <sys_m4_cache_init+0x58>)
    1238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    123c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    123e:	bf00      	nop
    1240:	4b0a      	ldr	r3, [pc, #40]	; (126c <sys_m4_cache_init+0x58>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    124c:	d0f8      	beq.n	1240 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    124e:	4b07      	ldr	r3, [pc, #28]	; (126c <sys_m4_cache_init+0x58>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	4a06      	ldr	r2, [pc, #24]	; (126c <sys_m4_cache_init+0x58>)
    1254:	f043 0301 	orr.w	r3, r3, #1
    1258:	6013      	str	r3, [r2, #0]
    125a:	e002      	b.n	1262 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    125c:	2301      	movs	r3, #1
    125e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1262:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1266:	4618      	mov	r0, r3
    1268:	b004      	add	sp, #16
    126a:	4770      	bx	lr
    126c:	e0082000 	.word	0xe0082000

00001270 <startup_go_to_user_mode>:
}
    1270:	bf00      	nop
    1272:	4770      	bx	lr

00001274 <Sys_GetCoreID>:
    return 0U;
    1274:	2300      	movs	r3, #0
}
    1276:	4618      	mov	r0, r3
    1278:	4770      	bx	lr

0000127a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    127a:	e7fe      	b.n	127a <HardFault_Handler>

0000127c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    127c:	e7fe      	b.n	127c <MemManage_Handler>

0000127e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    127e:	e7fe      	b.n	127e <BusFault_Handler>

00001280 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1280:	e7fe      	b.n	1280 <UsageFault_Handler>

00001282 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1282:	e7fe      	b.n	1282 <SVC_Handler>

00001284 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1284:	e7fe      	b.n	1284 <DebugMon_Handler>

00001286 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1286:	e7fe      	b.n	1286 <PendSV_Handler>

00001288 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1288:	e7fe      	b.n	1288 <SysTick_Handler>

0000128a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    128a:	e7fe      	b.n	128a <undefined_handler>

0000128c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    128c:	b500      	push	{lr}
    128e:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1290:	4b26      	ldr	r3, [pc, #152]	; (132c <_DoInit+0xa0>)
    1292:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1294:	22a8      	movs	r2, #168	; 0xa8
    1296:	2100      	movs	r1, #0
    1298:	9800      	ldr	r0, [sp, #0]
    129a:	f000 fd13 	bl	1cc4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    129e:	9b00      	ldr	r3, [sp, #0]
    12a0:	2203      	movs	r2, #3
    12a2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    12a4:	9b00      	ldr	r3, [sp, #0]
    12a6:	2203      	movs	r2, #3
    12a8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    12aa:	9b00      	ldr	r3, [sp, #0]
    12ac:	4a20      	ldr	r2, [pc, #128]	; (1330 <_DoInit+0xa4>)
    12ae:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    12b0:	9b00      	ldr	r3, [sp, #0]
    12b2:	4a20      	ldr	r2, [pc, #128]	; (1334 <_DoInit+0xa8>)
    12b4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    12b6:	9b00      	ldr	r3, [sp, #0]
    12b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    12bc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    12be:	9b00      	ldr	r3, [sp, #0]
    12c0:	2200      	movs	r2, #0
    12c2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    12c4:	9b00      	ldr	r3, [sp, #0]
    12c6:	2200      	movs	r2, #0
    12c8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12ca:	9b00      	ldr	r3, [sp, #0]
    12cc:	2200      	movs	r2, #0
    12ce:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    12d0:	9b00      	ldr	r3, [sp, #0]
    12d2:	4a17      	ldr	r2, [pc, #92]	; (1330 <_DoInit+0xa4>)
    12d4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    12d6:	9b00      	ldr	r3, [sp, #0]
    12d8:	4a17      	ldr	r2, [pc, #92]	; (1338 <_DoInit+0xac>)
    12da:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    12dc:	9b00      	ldr	r3, [sp, #0]
    12de:	2210      	movs	r2, #16
    12e0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    12e2:	9b00      	ldr	r3, [sp, #0]
    12e4:	2200      	movs	r2, #0
    12e6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    12e8:	9b00      	ldr	r3, [sp, #0]
    12ea:	2200      	movs	r2, #0
    12ec:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12ee:	9b00      	ldr	r3, [sp, #0]
    12f0:	2200      	movs	r2, #0
    12f2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    12f4:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    12f8:	2300      	movs	r3, #0
    12fa:	9301      	str	r3, [sp, #4]
    12fc:	e00c      	b.n	1318 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    12fe:	9b01      	ldr	r3, [sp, #4]
    1300:	f1c3 030f 	rsb	r3, r3, #15
    1304:	4a0d      	ldr	r2, [pc, #52]	; (133c <_DoInit+0xb0>)
    1306:	5cd1      	ldrb	r1, [r2, r3]
    1308:	9a00      	ldr	r2, [sp, #0]
    130a:	9b01      	ldr	r3, [sp, #4]
    130c:	4413      	add	r3, r2
    130e:	460a      	mov	r2, r1
    1310:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1312:	9b01      	ldr	r3, [sp, #4]
    1314:	3301      	adds	r3, #1
    1316:	9301      	str	r3, [sp, #4]
    1318:	9b01      	ldr	r3, [sp, #4]
    131a:	2b0f      	cmp	r3, #15
    131c:	d9ef      	bls.n	12fe <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    131e:	f3bf 8f5f 	dmb	sy
}
    1322:	bf00      	nop
    1324:	b003      	add	sp, #12
    1326:	f85d fb04 	ldr.w	pc, [sp], #4
    132a:	bf00      	nop
    132c:	1fff91f4 	.word	0x1fff91f4
    1330:	0001070c 	.word	0x0001070c
    1334:	1fff929c 	.word	0x1fff929c
    1338:	1fff969c 	.word	0x1fff969c
    133c:	000115ac 	.word	0x000115ac

00001340 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1340:	b500      	push	{lr}
    1342:	b08b      	sub	sp, #44	; 0x2c
    1344:	9003      	str	r0, [sp, #12]
    1346:	9102      	str	r1, [sp, #8]
    1348:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    134a:	2300      	movs	r3, #0
    134c:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    134e:	9b03      	ldr	r3, [sp, #12]
    1350:	68db      	ldr	r3, [r3, #12]
    1352:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1354:	9b03      	ldr	r3, [sp, #12]
    1356:	691b      	ldr	r3, [r3, #16]
    1358:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    135a:	9a06      	ldr	r2, [sp, #24]
    135c:	9b07      	ldr	r3, [sp, #28]
    135e:	429a      	cmp	r2, r3
    1360:	d905      	bls.n	136e <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1362:	9a06      	ldr	r2, [sp, #24]
    1364:	9b07      	ldr	r3, [sp, #28]
    1366:	1ad3      	subs	r3, r2, r3
    1368:	3b01      	subs	r3, #1
    136a:	9309      	str	r3, [sp, #36]	; 0x24
    136c:	e007      	b.n	137e <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    136e:	9b03      	ldr	r3, [sp, #12]
    1370:	689a      	ldr	r2, [r3, #8]
    1372:	9906      	ldr	r1, [sp, #24]
    1374:	9b07      	ldr	r3, [sp, #28]
    1376:	1acb      	subs	r3, r1, r3
    1378:	4413      	add	r3, r2
    137a:	3b01      	subs	r3, #1
    137c:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    137e:	9b03      	ldr	r3, [sp, #12]
    1380:	689a      	ldr	r2, [r3, #8]
    1382:	9b07      	ldr	r3, [sp, #28]
    1384:	1ad3      	subs	r3, r2, r3
    1386:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1388:	4293      	cmp	r3, r2
    138a:	bf28      	it	cs
    138c:	4613      	movcs	r3, r2
    138e:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1390:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1392:	9b01      	ldr	r3, [sp, #4]
    1394:	4293      	cmp	r3, r2
    1396:	bf28      	it	cs
    1398:	4613      	movcs	r3, r2
    139a:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    139c:	9b03      	ldr	r3, [sp, #12]
    139e:	685a      	ldr	r2, [r3, #4]
    13a0:	9b07      	ldr	r3, [sp, #28]
    13a2:	4413      	add	r3, r2
    13a4:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    13a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13a8:	9902      	ldr	r1, [sp, #8]
    13aa:	9805      	ldr	r0, [sp, #20]
    13ac:	f000 fc7c 	bl	1ca8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    13b0:	9a08      	ldr	r2, [sp, #32]
    13b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13b4:	4413      	add	r3, r2
    13b6:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    13b8:	9a02      	ldr	r2, [sp, #8]
    13ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13bc:	4413      	add	r3, r2
    13be:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    13c0:	9a01      	ldr	r2, [sp, #4]
    13c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13c4:	1ad3      	subs	r3, r2, r3
    13c6:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    13c8:	9a07      	ldr	r2, [sp, #28]
    13ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13cc:	4413      	add	r3, r2
    13ce:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    13d0:	9b03      	ldr	r3, [sp, #12]
    13d2:	689b      	ldr	r3, [r3, #8]
    13d4:	9a07      	ldr	r2, [sp, #28]
    13d6:	429a      	cmp	r2, r3
    13d8:	d101      	bne.n	13de <_WriteBlocking+0x9e>
      WrOff = 0u;
    13da:	2300      	movs	r3, #0
    13dc:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    13de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    13e2:	9b03      	ldr	r3, [sp, #12]
    13e4:	9a07      	ldr	r2, [sp, #28]
    13e6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    13e8:	9b01      	ldr	r3, [sp, #4]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d1b2      	bne.n	1354 <_WriteBlocking+0x14>
  return NumBytesWritten;
    13ee:	9b08      	ldr	r3, [sp, #32]
}
    13f0:	4618      	mov	r0, r3
    13f2:	b00b      	add	sp, #44	; 0x2c
    13f4:	f85d fb04 	ldr.w	pc, [sp], #4

000013f8 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13f8:	b500      	push	{lr}
    13fa:	b089      	sub	sp, #36	; 0x24
    13fc:	9003      	str	r0, [sp, #12]
    13fe:	9102      	str	r1, [sp, #8]
    1400:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    1402:	9b03      	ldr	r3, [sp, #12]
    1404:	68db      	ldr	r3, [r3, #12]
    1406:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1408:	9b03      	ldr	r3, [sp, #12]
    140a:	689a      	ldr	r2, [r3, #8]
    140c:	9b07      	ldr	r3, [sp, #28]
    140e:	1ad3      	subs	r3, r2, r3
    1410:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1412:	9a06      	ldr	r2, [sp, #24]
    1414:	9b01      	ldr	r3, [sp, #4]
    1416:	429a      	cmp	r2, r3
    1418:	d911      	bls.n	143e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    141a:	9b03      	ldr	r3, [sp, #12]
    141c:	685a      	ldr	r2, [r3, #4]
    141e:	9b07      	ldr	r3, [sp, #28]
    1420:	4413      	add	r3, r2
    1422:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1424:	9a01      	ldr	r2, [sp, #4]
    1426:	9902      	ldr	r1, [sp, #8]
    1428:	9804      	ldr	r0, [sp, #16]
    142a:	f000 fc3d 	bl	1ca8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    142e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1432:	9a07      	ldr	r2, [sp, #28]
    1434:	9b01      	ldr	r3, [sp, #4]
    1436:	441a      	add	r2, r3
    1438:	9b03      	ldr	r3, [sp, #12]
    143a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    143c:	e01f      	b.n	147e <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    143e:	9b06      	ldr	r3, [sp, #24]
    1440:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1442:	9b03      	ldr	r3, [sp, #12]
    1444:	685a      	ldr	r2, [r3, #4]
    1446:	9b07      	ldr	r3, [sp, #28]
    1448:	4413      	add	r3, r2
    144a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    144c:	9a05      	ldr	r2, [sp, #20]
    144e:	9902      	ldr	r1, [sp, #8]
    1450:	9804      	ldr	r0, [sp, #16]
    1452:	f000 fc29 	bl	1ca8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1456:	9a01      	ldr	r2, [sp, #4]
    1458:	9b06      	ldr	r3, [sp, #24]
    145a:	1ad3      	subs	r3, r2, r3
    145c:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    145e:	9b03      	ldr	r3, [sp, #12]
    1460:	685b      	ldr	r3, [r3, #4]
    1462:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1464:	9a02      	ldr	r2, [sp, #8]
    1466:	9b06      	ldr	r3, [sp, #24]
    1468:	4413      	add	r3, r2
    146a:	9a05      	ldr	r2, [sp, #20]
    146c:	4619      	mov	r1, r3
    146e:	9804      	ldr	r0, [sp, #16]
    1470:	f000 fc1a 	bl	1ca8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1474:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1478:	9b03      	ldr	r3, [sp, #12]
    147a:	9a05      	ldr	r2, [sp, #20]
    147c:	60da      	str	r2, [r3, #12]
}
    147e:	bf00      	nop
    1480:	b009      	add	sp, #36	; 0x24
    1482:	f85d fb04 	ldr.w	pc, [sp], #4

00001486 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1486:	b086      	sub	sp, #24
    1488:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    148a:	9b01      	ldr	r3, [sp, #4]
    148c:	691b      	ldr	r3, [r3, #16]
    148e:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1490:	9b01      	ldr	r3, [sp, #4]
    1492:	68db      	ldr	r3, [r3, #12]
    1494:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1496:	9a04      	ldr	r2, [sp, #16]
    1498:	9b03      	ldr	r3, [sp, #12]
    149a:	429a      	cmp	r2, r3
    149c:	d808      	bhi.n	14b0 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    149e:	9b01      	ldr	r3, [sp, #4]
    14a0:	689a      	ldr	r2, [r3, #8]
    14a2:	9b03      	ldr	r3, [sp, #12]
    14a4:	1ad2      	subs	r2, r2, r3
    14a6:	9b04      	ldr	r3, [sp, #16]
    14a8:	4413      	add	r3, r2
    14aa:	3b01      	subs	r3, #1
    14ac:	9305      	str	r3, [sp, #20]
    14ae:	e004      	b.n	14ba <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    14b0:	9a04      	ldr	r2, [sp, #16]
    14b2:	9b03      	ldr	r3, [sp, #12]
    14b4:	1ad3      	subs	r3, r2, r3
    14b6:	3b01      	subs	r3, #1
    14b8:	9305      	str	r3, [sp, #20]
  }
  return r;
    14ba:	9b05      	ldr	r3, [sp, #20]
}
    14bc:	4618      	mov	r0, r3
    14be:	b006      	add	sp, #24
    14c0:	4770      	bx	lr
	...

000014c4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    14c4:	b500      	push	{lr}
    14c6:	b089      	sub	sp, #36	; 0x24
    14c8:	9003      	str	r0, [sp, #12]
    14ca:	9102      	str	r1, [sp, #8]
    14cc:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    14ce:	9b02      	ldr	r3, [sp, #8]
    14d0:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    14d2:	9b03      	ldr	r3, [sp, #12]
    14d4:	1c5a      	adds	r2, r3, #1
    14d6:	4613      	mov	r3, r2
    14d8:	005b      	lsls	r3, r3, #1
    14da:	4413      	add	r3, r2
    14dc:	00db      	lsls	r3, r3, #3
    14de:	4a20      	ldr	r2, [pc, #128]	; (1560 <SEGGER_RTT_WriteNoLock+0x9c>)
    14e0:	4413      	add	r3, r2
    14e2:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    14e4:	9b05      	ldr	r3, [sp, #20]
    14e6:	695b      	ldr	r3, [r3, #20]
    14e8:	2b02      	cmp	r3, #2
    14ea:	d029      	beq.n	1540 <SEGGER_RTT_WriteNoLock+0x7c>
    14ec:	2b02      	cmp	r3, #2
    14ee:	d82e      	bhi.n	154e <SEGGER_RTT_WriteNoLock+0x8a>
    14f0:	2b00      	cmp	r3, #0
    14f2:	d002      	beq.n	14fa <SEGGER_RTT_WriteNoLock+0x36>
    14f4:	2b01      	cmp	r3, #1
    14f6:	d013      	beq.n	1520 <SEGGER_RTT_WriteNoLock+0x5c>
    14f8:	e029      	b.n	154e <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    14fa:	9805      	ldr	r0, [sp, #20]
    14fc:	f7ff ffc3 	bl	1486 <_GetAvailWriteSpace>
    1500:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1502:	9a04      	ldr	r2, [sp, #16]
    1504:	9b01      	ldr	r3, [sp, #4]
    1506:	429a      	cmp	r2, r3
    1508:	d202      	bcs.n	1510 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    150a:	2300      	movs	r3, #0
    150c:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    150e:	e021      	b.n	1554 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1510:	9b01      	ldr	r3, [sp, #4]
    1512:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1514:	9a01      	ldr	r2, [sp, #4]
    1516:	9906      	ldr	r1, [sp, #24]
    1518:	9805      	ldr	r0, [sp, #20]
    151a:	f7ff ff6d 	bl	13f8 <_WriteNoCheck>
    break;
    151e:	e019      	b.n	1554 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1520:	9805      	ldr	r0, [sp, #20]
    1522:	f7ff ffb0 	bl	1486 <_GetAvailWriteSpace>
    1526:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1528:	9a01      	ldr	r2, [sp, #4]
    152a:	9b04      	ldr	r3, [sp, #16]
    152c:	4293      	cmp	r3, r2
    152e:	bf28      	it	cs
    1530:	4613      	movcs	r3, r2
    1532:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1534:	9a07      	ldr	r2, [sp, #28]
    1536:	9906      	ldr	r1, [sp, #24]
    1538:	9805      	ldr	r0, [sp, #20]
    153a:	f7ff ff5d 	bl	13f8 <_WriteNoCheck>
    break;
    153e:	e009      	b.n	1554 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1540:	9a01      	ldr	r2, [sp, #4]
    1542:	9906      	ldr	r1, [sp, #24]
    1544:	9805      	ldr	r0, [sp, #20]
    1546:	f7ff fefb 	bl	1340 <_WriteBlocking>
    154a:	9007      	str	r0, [sp, #28]
    break;
    154c:	e002      	b.n	1554 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    154e:	2300      	movs	r3, #0
    1550:	9307      	str	r3, [sp, #28]
    break;
    1552:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1554:	9b07      	ldr	r3, [sp, #28]
}
    1556:	4618      	mov	r0, r3
    1558:	b009      	add	sp, #36	; 0x24
    155a:	f85d fb04 	ldr.w	pc, [sp], #4
    155e:	bf00      	nop
    1560:	1fff91f4 	.word	0x1fff91f4

00001564 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1564:	b500      	push	{lr}
    1566:	b089      	sub	sp, #36	; 0x24
    1568:	9003      	str	r0, [sp, #12]
    156a:	9102      	str	r1, [sp, #8]
    156c:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    156e:	4b0f      	ldr	r3, [pc, #60]	; (15ac <SEGGER_RTT_Write+0x48>)
    1570:	9307      	str	r3, [sp, #28]
    1572:	9b07      	ldr	r3, [sp, #28]
    1574:	781b      	ldrb	r3, [r3, #0]
    1576:	b2db      	uxtb	r3, r3
    1578:	2b53      	cmp	r3, #83	; 0x53
    157a:	d001      	beq.n	1580 <SEGGER_RTT_Write+0x1c>
    157c:	f7ff fe86 	bl	128c <_DoInit>
  SEGGER_RTT_LOCK();
    1580:	f3ef 8311 	mrs	r3, BASEPRI
    1584:	f04f 0120 	mov.w	r1, #32
    1588:	f381 8811 	msr	BASEPRI, r1
    158c:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    158e:	9a01      	ldr	r2, [sp, #4]
    1590:	9902      	ldr	r1, [sp, #8]
    1592:	9803      	ldr	r0, [sp, #12]
    1594:	f7ff ff96 	bl	14c4 <SEGGER_RTT_WriteNoLock>
    1598:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    159a:	9b06      	ldr	r3, [sp, #24]
    159c:	f383 8811 	msr	BASEPRI, r3
  return Status;
    15a0:	9b05      	ldr	r3, [sp, #20]
}
    15a2:	4618      	mov	r0, r3
    15a4:	b009      	add	sp, #36	; 0x24
    15a6:	f85d fb04 	ldr.w	pc, [sp], #4
    15aa:	bf00      	nop
    15ac:	1fff91f4 	.word	0x1fff91f4

000015b0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    15b0:	b508      	push	{r3, lr}
  _DoInit();
    15b2:	f7ff fe6b 	bl	128c <_DoInit>
}
    15b6:	bf00      	nop
    15b8:	bd08      	pop	{r3, pc}

000015ba <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    15ba:	b500      	push	{lr}
    15bc:	b085      	sub	sp, #20
    15be:	9001      	str	r0, [sp, #4]
    15c0:	460b      	mov	r3, r1
    15c2:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    15c6:	9b01      	ldr	r3, [sp, #4]
    15c8:	689b      	ldr	r3, [r3, #8]
    15ca:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    15cc:	9b03      	ldr	r3, [sp, #12]
    15ce:	1c5a      	adds	r2, r3, #1
    15d0:	9b01      	ldr	r3, [sp, #4]
    15d2:	685b      	ldr	r3, [r3, #4]
    15d4:	429a      	cmp	r2, r3
    15d6:	d80f      	bhi.n	15f8 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	681a      	ldr	r2, [r3, #0]
    15dc:	9b03      	ldr	r3, [sp, #12]
    15de:	4413      	add	r3, r2
    15e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    15e4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    15e6:	9b03      	ldr	r3, [sp, #12]
    15e8:	1c5a      	adds	r2, r3, #1
    15ea:	9b01      	ldr	r3, [sp, #4]
    15ec:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    15ee:	9b01      	ldr	r3, [sp, #4]
    15f0:	68db      	ldr	r3, [r3, #12]
    15f2:	1c5a      	adds	r2, r3, #1
    15f4:	9b01      	ldr	r3, [sp, #4]
    15f6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    15f8:	9b01      	ldr	r3, [sp, #4]
    15fa:	689a      	ldr	r2, [r3, #8]
    15fc:	9b01      	ldr	r3, [sp, #4]
    15fe:	685b      	ldr	r3, [r3, #4]
    1600:	429a      	cmp	r2, r3
    1602:	d115      	bne.n	1630 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1604:	9b01      	ldr	r3, [sp, #4]
    1606:	6918      	ldr	r0, [r3, #16]
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	6819      	ldr	r1, [r3, #0]
    160c:	9b01      	ldr	r3, [sp, #4]
    160e:	689b      	ldr	r3, [r3, #8]
    1610:	461a      	mov	r2, r3
    1612:	f7ff ffa7 	bl	1564 <SEGGER_RTT_Write>
    1616:	4602      	mov	r2, r0
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	689b      	ldr	r3, [r3, #8]
    161c:	429a      	cmp	r2, r3
    161e:	d004      	beq.n	162a <_StoreChar+0x70>
      p->ReturnValue = -1;
    1620:	9b01      	ldr	r3, [sp, #4]
    1622:	f04f 32ff 	mov.w	r2, #4294967295
    1626:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1628:	e002      	b.n	1630 <_StoreChar+0x76>
      p->Cnt = 0u;
    162a:	9b01      	ldr	r3, [sp, #4]
    162c:	2200      	movs	r2, #0
    162e:	609a      	str	r2, [r3, #8]
}
    1630:	bf00      	nop
    1632:	b005      	add	sp, #20
    1634:	f85d fb04 	ldr.w	pc, [sp], #4

00001638 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1638:	b500      	push	{lr}
    163a:	b08b      	sub	sp, #44	; 0x2c
    163c:	9003      	str	r0, [sp, #12]
    163e:	9102      	str	r1, [sp, #8]
    1640:	9201      	str	r2, [sp, #4]
    1642:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1644:	9b02      	ldr	r3, [sp, #8]
    1646:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1648:	2301      	movs	r3, #1
    164a:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    164c:	2301      	movs	r3, #1
    164e:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1650:	e007      	b.n	1662 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1652:	9a08      	ldr	r2, [sp, #32]
    1654:	9b01      	ldr	r3, [sp, #4]
    1656:	fbb2 f3f3 	udiv	r3, r2, r3
    165a:	9308      	str	r3, [sp, #32]
    Width++;
    165c:	9b07      	ldr	r3, [sp, #28]
    165e:	3301      	adds	r3, #1
    1660:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1662:	9a08      	ldr	r2, [sp, #32]
    1664:	9b01      	ldr	r3, [sp, #4]
    1666:	429a      	cmp	r2, r3
    1668:	d2f3      	bcs.n	1652 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    166a:	9a00      	ldr	r2, [sp, #0]
    166c:	9b07      	ldr	r3, [sp, #28]
    166e:	429a      	cmp	r2, r3
    1670:	d901      	bls.n	1676 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1672:	9b00      	ldr	r3, [sp, #0]
    1674:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1678:	f003 0301 	and.w	r3, r3, #1
    167c:	2b00      	cmp	r3, #0
    167e:	d128      	bne.n	16d2 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1682:	2b00      	cmp	r3, #0
    1684:	d025      	beq.n	16d2 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1688:	f003 0302 	and.w	r3, r3, #2
    168c:	2b00      	cmp	r3, #0
    168e:	d006      	beq.n	169e <_PrintUnsigned+0x66>
    1690:	9b00      	ldr	r3, [sp, #0]
    1692:	2b00      	cmp	r3, #0
    1694:	d103      	bne.n	169e <_PrintUnsigned+0x66>
        c = '0';
    1696:	2330      	movs	r3, #48	; 0x30
    1698:	f88d 301b 	strb.w	r3, [sp, #27]
    169c:	e002      	b.n	16a4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    169e:	2320      	movs	r3, #32
    16a0:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16a4:	e00c      	b.n	16c0 <_PrintUnsigned+0x88>
        FieldWidth--;
    16a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16a8:	3b01      	subs	r3, #1
    16aa:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    16ac:	f89d 301b 	ldrb.w	r3, [sp, #27]
    16b0:	4619      	mov	r1, r3
    16b2:	9803      	ldr	r0, [sp, #12]
    16b4:	f7ff ff81 	bl	15ba <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    16b8:	9b03      	ldr	r3, [sp, #12]
    16ba:	68db      	ldr	r3, [r3, #12]
    16bc:	2b00      	cmp	r3, #0
    16be:	db07      	blt.n	16d0 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16c2:	2b00      	cmp	r3, #0
    16c4:	d005      	beq.n	16d2 <_PrintUnsigned+0x9a>
    16c6:	9a07      	ldr	r2, [sp, #28]
    16c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16ca:	429a      	cmp	r2, r3
    16cc:	d3eb      	bcc.n	16a6 <_PrintUnsigned+0x6e>
    16ce:	e000      	b.n	16d2 <_PrintUnsigned+0x9a>
          break;
    16d0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    16d2:	9b03      	ldr	r3, [sp, #12]
    16d4:	68db      	ldr	r3, [r3, #12]
    16d6:	2b00      	cmp	r3, #0
    16d8:	db55      	blt.n	1786 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    16da:	9b00      	ldr	r3, [sp, #0]
    16dc:	2b01      	cmp	r3, #1
    16de:	d903      	bls.n	16e8 <_PrintUnsigned+0xb0>
        NumDigits--;
    16e0:	9b00      	ldr	r3, [sp, #0]
    16e2:	3b01      	subs	r3, #1
    16e4:	9300      	str	r3, [sp, #0]
    16e6:	e009      	b.n	16fc <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    16e8:	9a02      	ldr	r2, [sp, #8]
    16ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16ec:	fbb2 f3f3 	udiv	r3, r2, r3
    16f0:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    16f2:	9a05      	ldr	r2, [sp, #20]
    16f4:	9b01      	ldr	r3, [sp, #4]
    16f6:	429a      	cmp	r2, r3
    16f8:	d200      	bcs.n	16fc <_PrintUnsigned+0xc4>
          break;
    16fa:	e005      	b.n	1708 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    16fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16fe:	9a01      	ldr	r2, [sp, #4]
    1700:	fb02 f303 	mul.w	r3, r2, r3
    1704:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1706:	e7e8      	b.n	16da <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1708:	9a02      	ldr	r2, [sp, #8]
    170a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    170c:	fbb2 f3f3 	udiv	r3, r2, r3
    1710:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1712:	9b05      	ldr	r3, [sp, #20]
    1714:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1716:	fb02 f303 	mul.w	r3, r2, r3
    171a:	9a02      	ldr	r2, [sp, #8]
    171c:	1ad3      	subs	r3, r2, r3
    171e:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1720:	4a1b      	ldr	r2, [pc, #108]	; (1790 <_PrintUnsigned+0x158>)
    1722:	9b05      	ldr	r3, [sp, #20]
    1724:	4413      	add	r3, r2
    1726:	781b      	ldrb	r3, [r3, #0]
    1728:	4619      	mov	r1, r3
    172a:	9803      	ldr	r0, [sp, #12]
    172c:	f7ff ff45 	bl	15ba <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1730:	9b03      	ldr	r3, [sp, #12]
    1732:	68db      	ldr	r3, [r3, #12]
    1734:	2b00      	cmp	r3, #0
    1736:	db08      	blt.n	174a <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1738:	9a09      	ldr	r2, [sp, #36]	; 0x24
    173a:	9b01      	ldr	r3, [sp, #4]
    173c:	fbb2 f3f3 	udiv	r3, r2, r3
    1740:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1742:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1744:	2b00      	cmp	r3, #0
    1746:	d1df      	bne.n	1708 <_PrintUnsigned+0xd0>
    1748:	e000      	b.n	174c <_PrintUnsigned+0x114>
        break;
    174a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    174c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    174e:	f003 0301 	and.w	r3, r3, #1
    1752:	2b00      	cmp	r3, #0
    1754:	d017      	beq.n	1786 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1758:	2b00      	cmp	r3, #0
    175a:	d014      	beq.n	1786 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    175c:	e00a      	b.n	1774 <_PrintUnsigned+0x13c>
          FieldWidth--;
    175e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1760:	3b01      	subs	r3, #1
    1762:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1764:	2120      	movs	r1, #32
    1766:	9803      	ldr	r0, [sp, #12]
    1768:	f7ff ff27 	bl	15ba <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    176c:	9b03      	ldr	r3, [sp, #12]
    176e:	68db      	ldr	r3, [r3, #12]
    1770:	2b00      	cmp	r3, #0
    1772:	db07      	blt.n	1784 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1776:	2b00      	cmp	r3, #0
    1778:	d005      	beq.n	1786 <_PrintUnsigned+0x14e>
    177a:	9a07      	ldr	r2, [sp, #28]
    177c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    177e:	429a      	cmp	r2, r3
    1780:	d3ed      	bcc.n	175e <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1782:	e000      	b.n	1786 <_PrintUnsigned+0x14e>
            break;
    1784:	bf00      	nop
}
    1786:	bf00      	nop
    1788:	b00b      	add	sp, #44	; 0x2c
    178a:	f85d fb04 	ldr.w	pc, [sp], #4
    178e:	bf00      	nop
    1790:	000115c0 	.word	0x000115c0

00001794 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1794:	b500      	push	{lr}
    1796:	b089      	sub	sp, #36	; 0x24
    1798:	9005      	str	r0, [sp, #20]
    179a:	9104      	str	r1, [sp, #16]
    179c:	9203      	str	r2, [sp, #12]
    179e:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    17a0:	9b04      	ldr	r3, [sp, #16]
    17a2:	2b00      	cmp	r3, #0
    17a4:	bfb8      	it	lt
    17a6:	425b      	neglt	r3, r3
    17a8:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    17aa:	2301      	movs	r3, #1
    17ac:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    17ae:	e007      	b.n	17c0 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    17b0:	9b03      	ldr	r3, [sp, #12]
    17b2:	9a06      	ldr	r2, [sp, #24]
    17b4:	fb92 f3f3 	sdiv	r3, r2, r3
    17b8:	9306      	str	r3, [sp, #24]
    Width++;
    17ba:	9b07      	ldr	r3, [sp, #28]
    17bc:	3301      	adds	r3, #1
    17be:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    17c0:	9b03      	ldr	r3, [sp, #12]
    17c2:	9a06      	ldr	r2, [sp, #24]
    17c4:	429a      	cmp	r2, r3
    17c6:	daf3      	bge.n	17b0 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    17c8:	9a02      	ldr	r2, [sp, #8]
    17ca:	9b07      	ldr	r3, [sp, #28]
    17cc:	429a      	cmp	r2, r3
    17ce:	d901      	bls.n	17d4 <_PrintInt+0x40>
    Width = NumDigits;
    17d0:	9b02      	ldr	r3, [sp, #8]
    17d2:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    17d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17d6:	2b00      	cmp	r3, #0
    17d8:	d00a      	beq.n	17f0 <_PrintInt+0x5c>
    17da:	9b04      	ldr	r3, [sp, #16]
    17dc:	2b00      	cmp	r3, #0
    17de:	db04      	blt.n	17ea <_PrintInt+0x56>
    17e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17e2:	f003 0304 	and.w	r3, r3, #4
    17e6:	2b00      	cmp	r3, #0
    17e8:	d002      	beq.n	17f0 <_PrintInt+0x5c>
    FieldWidth--;
    17ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17ec:	3b01      	subs	r3, #1
    17ee:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    17f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17f2:	f003 0302 	and.w	r3, r3, #2
    17f6:	2b00      	cmp	r3, #0
    17f8:	d002      	beq.n	1800 <_PrintInt+0x6c>
    17fa:	9b02      	ldr	r3, [sp, #8]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d01c      	beq.n	183a <_PrintInt+0xa6>
    1800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1802:	f003 0301 	and.w	r3, r3, #1
    1806:	2b00      	cmp	r3, #0
    1808:	d117      	bne.n	183a <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    180a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    180c:	2b00      	cmp	r3, #0
    180e:	d014      	beq.n	183a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1810:	e00a      	b.n	1828 <_PrintInt+0x94>
        FieldWidth--;
    1812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1814:	3b01      	subs	r3, #1
    1816:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1818:	2120      	movs	r1, #32
    181a:	9805      	ldr	r0, [sp, #20]
    181c:	f7ff fecd 	bl	15ba <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1820:	9b05      	ldr	r3, [sp, #20]
    1822:	68db      	ldr	r3, [r3, #12]
    1824:	2b00      	cmp	r3, #0
    1826:	db07      	blt.n	1838 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    182a:	2b00      	cmp	r3, #0
    182c:	d005      	beq.n	183a <_PrintInt+0xa6>
    182e:	9a07      	ldr	r2, [sp, #28]
    1830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1832:	429a      	cmp	r2, r3
    1834:	d3ed      	bcc.n	1812 <_PrintInt+0x7e>
    1836:	e000      	b.n	183a <_PrintInt+0xa6>
          break;
    1838:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    183a:	9b05      	ldr	r3, [sp, #20]
    183c:	68db      	ldr	r3, [r3, #12]
    183e:	2b00      	cmp	r3, #0
    1840:	db4a      	blt.n	18d8 <_PrintInt+0x144>
    if (v < 0) {
    1842:	9b04      	ldr	r3, [sp, #16]
    1844:	2b00      	cmp	r3, #0
    1846:	da07      	bge.n	1858 <_PrintInt+0xc4>
      v = -v;
    1848:	9b04      	ldr	r3, [sp, #16]
    184a:	425b      	negs	r3, r3
    184c:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    184e:	212d      	movs	r1, #45	; 0x2d
    1850:	9805      	ldr	r0, [sp, #20]
    1852:	f7ff feb2 	bl	15ba <_StoreChar>
    1856:	e008      	b.n	186a <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    185a:	f003 0304 	and.w	r3, r3, #4
    185e:	2b00      	cmp	r3, #0
    1860:	d003      	beq.n	186a <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1862:	212b      	movs	r1, #43	; 0x2b
    1864:	9805      	ldr	r0, [sp, #20]
    1866:	f7ff fea8 	bl	15ba <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    186a:	9b05      	ldr	r3, [sp, #20]
    186c:	68db      	ldr	r3, [r3, #12]
    186e:	2b00      	cmp	r3, #0
    1870:	db32      	blt.n	18d8 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1874:	f003 0302 	and.w	r3, r3, #2
    1878:	2b00      	cmp	r3, #0
    187a:	d01f      	beq.n	18bc <_PrintInt+0x128>
    187c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    187e:	f003 0301 	and.w	r3, r3, #1
    1882:	2b00      	cmp	r3, #0
    1884:	d11a      	bne.n	18bc <_PrintInt+0x128>
    1886:	9b02      	ldr	r3, [sp, #8]
    1888:	2b00      	cmp	r3, #0
    188a:	d117      	bne.n	18bc <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    188c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    188e:	2b00      	cmp	r3, #0
    1890:	d014      	beq.n	18bc <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1892:	e00a      	b.n	18aa <_PrintInt+0x116>
            FieldWidth--;
    1894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1896:	3b01      	subs	r3, #1
    1898:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    189a:	2130      	movs	r1, #48	; 0x30
    189c:	9805      	ldr	r0, [sp, #20]
    189e:	f7ff fe8c 	bl	15ba <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    18a2:	9b05      	ldr	r3, [sp, #20]
    18a4:	68db      	ldr	r3, [r3, #12]
    18a6:	2b00      	cmp	r3, #0
    18a8:	db07      	blt.n	18ba <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    18aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18ac:	2b00      	cmp	r3, #0
    18ae:	d005      	beq.n	18bc <_PrintInt+0x128>
    18b0:	9a07      	ldr	r2, [sp, #28]
    18b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18b4:	429a      	cmp	r2, r3
    18b6:	d3ed      	bcc.n	1894 <_PrintInt+0x100>
    18b8:	e000      	b.n	18bc <_PrintInt+0x128>
              break;
    18ba:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    18bc:	9b05      	ldr	r3, [sp, #20]
    18be:	68db      	ldr	r3, [r3, #12]
    18c0:	2b00      	cmp	r3, #0
    18c2:	db09      	blt.n	18d8 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    18c4:	9904      	ldr	r1, [sp, #16]
    18c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18c8:	9301      	str	r3, [sp, #4]
    18ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	9b02      	ldr	r3, [sp, #8]
    18d0:	9a03      	ldr	r2, [sp, #12]
    18d2:	9805      	ldr	r0, [sp, #20]
    18d4:	f7ff feb0 	bl	1638 <_PrintUnsigned>
      }
    }
  }
}
    18d8:	bf00      	nop
    18da:	b009      	add	sp, #36	; 0x24
    18dc:	f85d fb04 	ldr.w	pc, [sp], #4

000018e0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    18e0:	b500      	push	{lr}
    18e2:	b0a3      	sub	sp, #140	; 0x8c
    18e4:	9005      	str	r0, [sp, #20]
    18e6:	9104      	str	r1, [sp, #16]
    18e8:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    18ea:	ab06      	add	r3, sp, #24
    18ec:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    18ee:	2340      	movs	r3, #64	; 0x40
    18f0:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    18f2:	2300      	movs	r3, #0
    18f4:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    18f6:	9b05      	ldr	r3, [sp, #20]
    18f8:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    18fa:	2300      	movs	r3, #0
    18fc:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    18fe:	9b04      	ldr	r3, [sp, #16]
    1900:	781b      	ldrb	r3, [r3, #0]
    1902:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1906:	9b04      	ldr	r3, [sp, #16]
    1908:	3301      	adds	r3, #1
    190a:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    190c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1910:	2b00      	cmp	r3, #0
    1912:	f000 819c 	beq.w	1c4e <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1916:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    191a:	2b25      	cmp	r3, #37	; 0x25
    191c:	f040 818b 	bne.w	1c36 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1920:	2300      	movs	r3, #0
    1922:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1924:	2301      	movs	r3, #1
    1926:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1928:	9b04      	ldr	r3, [sp, #16]
    192a:	781b      	ldrb	r3, [r3, #0]
    192c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1930:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1934:	3b23      	subs	r3, #35	; 0x23
    1936:	2b0d      	cmp	r3, #13
    1938:	d83e      	bhi.n	19b8 <SEGGER_RTT_vprintf+0xd8>
    193a:	a201      	add	r2, pc, #4	; (adr r2, 1940 <SEGGER_RTT_vprintf+0x60>)
    193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1940:	000019a9 	.word	0x000019a9
    1944:	000019b9 	.word	0x000019b9
    1948:	000019b9 	.word	0x000019b9
    194c:	000019b9 	.word	0x000019b9
    1950:	000019b9 	.word	0x000019b9
    1954:	000019b9 	.word	0x000019b9
    1958:	000019b9 	.word	0x000019b9
    195c:	000019b9 	.word	0x000019b9
    1960:	00001999 	.word	0x00001999
    1964:	000019b9 	.word	0x000019b9
    1968:	00001979 	.word	0x00001979
    196c:	000019b9 	.word	0x000019b9
    1970:	000019b9 	.word	0x000019b9
    1974:	00001989 	.word	0x00001989
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1978:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    197a:	f043 0301 	orr.w	r3, r3, #1
    197e:	931e      	str	r3, [sp, #120]	; 0x78
    1980:	9b04      	ldr	r3, [sp, #16]
    1982:	3301      	adds	r3, #1
    1984:	9304      	str	r3, [sp, #16]
    1986:	e01a      	b.n	19be <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1988:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    198a:	f043 0302 	orr.w	r3, r3, #2
    198e:	931e      	str	r3, [sp, #120]	; 0x78
    1990:	9b04      	ldr	r3, [sp, #16]
    1992:	3301      	adds	r3, #1
    1994:	9304      	str	r3, [sp, #16]
    1996:	e012      	b.n	19be <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1998:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    199a:	f043 0304 	orr.w	r3, r3, #4
    199e:	931e      	str	r3, [sp, #120]	; 0x78
    19a0:	9b04      	ldr	r3, [sp, #16]
    19a2:	3301      	adds	r3, #1
    19a4:	9304      	str	r3, [sp, #16]
    19a6:	e00a      	b.n	19be <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    19a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    19aa:	f043 0308 	orr.w	r3, r3, #8
    19ae:	931e      	str	r3, [sp, #120]	; 0x78
    19b0:	9b04      	ldr	r3, [sp, #16]
    19b2:	3301      	adds	r3, #1
    19b4:	9304      	str	r3, [sp, #16]
    19b6:	e002      	b.n	19be <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    19b8:	2300      	movs	r3, #0
    19ba:	9320      	str	r3, [sp, #128]	; 0x80
    19bc:	bf00      	nop
        }
      } while (v);
    19be:	9b20      	ldr	r3, [sp, #128]	; 0x80
    19c0:	2b00      	cmp	r3, #0
    19c2:	d1b1      	bne.n	1928 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    19c4:	2300      	movs	r3, #0
    19c6:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    19c8:	9b04      	ldr	r3, [sp, #16]
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    19d0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19d4:	2b2f      	cmp	r3, #47	; 0x2f
    19d6:	d912      	bls.n	19fe <SEGGER_RTT_vprintf+0x11e>
    19d8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19dc:	2b39      	cmp	r3, #57	; 0x39
    19de:	d80e      	bhi.n	19fe <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    19e0:	9b04      	ldr	r3, [sp, #16]
    19e2:	3301      	adds	r3, #1
    19e4:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    19e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    19e8:	4613      	mov	r3, r2
    19ea:	009b      	lsls	r3, r3, #2
    19ec:	4413      	add	r3, r2
    19ee:	005b      	lsls	r3, r3, #1
    19f0:	461a      	mov	r2, r3
    19f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19f6:	4413      	add	r3, r2
    19f8:	3b30      	subs	r3, #48	; 0x30
    19fa:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    19fc:	e7e4      	b.n	19c8 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    19fe:	2300      	movs	r3, #0
    1a00:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1a02:	9b04      	ldr	r3, [sp, #16]
    1a04:	781b      	ldrb	r3, [r3, #0]
    1a06:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1a0a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a0e:	2b2e      	cmp	r3, #46	; 0x2e
    1a10:	d11d      	bne.n	1a4e <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1a12:	9b04      	ldr	r3, [sp, #16]
    1a14:	3301      	adds	r3, #1
    1a16:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1a18:	9b04      	ldr	r3, [sp, #16]
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1a20:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a24:	2b2f      	cmp	r3, #47	; 0x2f
    1a26:	d912      	bls.n	1a4e <SEGGER_RTT_vprintf+0x16e>
    1a28:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a2c:	2b39      	cmp	r3, #57	; 0x39
    1a2e:	d80e      	bhi.n	1a4e <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1a30:	9b04      	ldr	r3, [sp, #16]
    1a32:	3301      	adds	r3, #1
    1a34:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1a36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1a38:	4613      	mov	r3, r2
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	4413      	add	r3, r2
    1a3e:	005b      	lsls	r3, r3, #1
    1a40:	461a      	mov	r2, r3
    1a42:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a46:	4413      	add	r3, r2
    1a48:	3b30      	subs	r3, #48	; 0x30
    1a4a:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1a4c:	e7e4      	b.n	1a18 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1a4e:	9b04      	ldr	r3, [sp, #16]
    1a50:	781b      	ldrb	r3, [r3, #0]
    1a52:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1a56:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a5a:	2b6c      	cmp	r3, #108	; 0x6c
    1a5c:	d003      	beq.n	1a66 <SEGGER_RTT_vprintf+0x186>
    1a5e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a62:	2b68      	cmp	r3, #104	; 0x68
    1a64:	d107      	bne.n	1a76 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1a66:	9b04      	ldr	r3, [sp, #16]
    1a68:	3301      	adds	r3, #1
    1a6a:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1a6c:	9b04      	ldr	r3, [sp, #16]
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1a74:	e7ef      	b.n	1a56 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1a76:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a7a:	2b25      	cmp	r3, #37	; 0x25
    1a7c:	f000 80d0 	beq.w	1c20 <SEGGER_RTT_vprintf+0x340>
    1a80:	2b25      	cmp	r3, #37	; 0x25
    1a82:	f2c0 80d3 	blt.w	1c2c <SEGGER_RTT_vprintf+0x34c>
    1a86:	2b78      	cmp	r3, #120	; 0x78
    1a88:	f300 80d0 	bgt.w	1c2c <SEGGER_RTT_vprintf+0x34c>
    1a8c:	2b58      	cmp	r3, #88	; 0x58
    1a8e:	f2c0 80cd 	blt.w	1c2c <SEGGER_RTT_vprintf+0x34c>
    1a92:	3b58      	subs	r3, #88	; 0x58
    1a94:	2b20      	cmp	r3, #32
    1a96:	f200 80c9 	bhi.w	1c2c <SEGGER_RTT_vprintf+0x34c>
    1a9a:	a201      	add	r2, pc, #4	; (adr r2, 1aa0 <SEGGER_RTT_vprintf+0x1c0>)
    1a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1aa0:	00001b91 	.word	0x00001b91
    1aa4:	00001c2d 	.word	0x00001c2d
    1aa8:	00001c2d 	.word	0x00001c2d
    1aac:	00001c2d 	.word	0x00001c2d
    1ab0:	00001c2d 	.word	0x00001c2d
    1ab4:	00001c2d 	.word	0x00001c2d
    1ab8:	00001c2d 	.word	0x00001c2d
    1abc:	00001c2d 	.word	0x00001c2d
    1ac0:	00001c2d 	.word	0x00001c2d
    1ac4:	00001c2d 	.word	0x00001c2d
    1ac8:	00001c2d 	.word	0x00001c2d
    1acc:	00001b25 	.word	0x00001b25
    1ad0:	00001b49 	.word	0x00001b49
    1ad4:	00001c2d 	.word	0x00001c2d
    1ad8:	00001c2d 	.word	0x00001c2d
    1adc:	00001c2d 	.word	0x00001c2d
    1ae0:	00001c2d 	.word	0x00001c2d
    1ae4:	00001c2d 	.word	0x00001c2d
    1ae8:	00001c2d 	.word	0x00001c2d
    1aec:	00001c2d 	.word	0x00001c2d
    1af0:	00001c2d 	.word	0x00001c2d
    1af4:	00001c2d 	.word	0x00001c2d
    1af8:	00001c2d 	.word	0x00001c2d
    1afc:	00001c2d 	.word	0x00001c2d
    1b00:	00001bfd 	.word	0x00001bfd
    1b04:	00001c2d 	.word	0x00001c2d
    1b08:	00001c2d 	.word	0x00001c2d
    1b0c:	00001bb5 	.word	0x00001bb5
    1b10:	00001c2d 	.word	0x00001c2d
    1b14:	00001b6d 	.word	0x00001b6d
    1b18:	00001c2d 	.word	0x00001c2d
    1b1c:	00001c2d 	.word	0x00001c2d
    1b20:	00001b91 	.word	0x00001b91
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1b24:	9b03      	ldr	r3, [sp, #12]
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	1d19      	adds	r1, r3, #4
    1b2a:	9a03      	ldr	r2, [sp, #12]
    1b2c:	6011      	str	r1, [r2, #0]
    1b2e:	681b      	ldr	r3, [r3, #0]
    1b30:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1b32:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1b34:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1b38:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1b3c:	ab16      	add	r3, sp, #88	; 0x58
    1b3e:	4611      	mov	r1, r2
    1b40:	4618      	mov	r0, r3
    1b42:	f7ff fd3a 	bl	15ba <_StoreChar>
        break;
    1b46:	e072      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1b48:	9b03      	ldr	r3, [sp, #12]
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	1d19      	adds	r1, r3, #4
    1b4e:	9a03      	ldr	r2, [sp, #12]
    1b50:	6011      	str	r1, [r2, #0]
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1b56:	a816      	add	r0, sp, #88	; 0x58
    1b58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b5a:	9301      	str	r3, [sp, #4]
    1b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b5e:	9300      	str	r3, [sp, #0]
    1b60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b62:	220a      	movs	r2, #10
    1b64:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b66:	f7ff fe15 	bl	1794 <_PrintInt>
        break;
    1b6a:	e060      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1b6c:	9b03      	ldr	r3, [sp, #12]
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	1d19      	adds	r1, r3, #4
    1b72:	9a03      	ldr	r2, [sp, #12]
    1b74:	6011      	str	r1, [r2, #0]
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1b7a:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b7c:	a816      	add	r0, sp, #88	; 0x58
    1b7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b80:	9301      	str	r3, [sp, #4]
    1b82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b84:	9300      	str	r3, [sp, #0]
    1b86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b88:	220a      	movs	r2, #10
    1b8a:	f7ff fd55 	bl	1638 <_PrintUnsigned>
        break;
    1b8e:	e04e      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1b90:	9b03      	ldr	r3, [sp, #12]
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	1d19      	adds	r1, r3, #4
    1b96:	9a03      	ldr	r2, [sp, #12]
    1b98:	6011      	str	r1, [r2, #0]
    1b9a:	681b      	ldr	r3, [r3, #0]
    1b9c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1b9e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1ba0:	a816      	add	r0, sp, #88	; 0x58
    1ba2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ba4:	9301      	str	r3, [sp, #4]
    1ba6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1ba8:	9300      	str	r3, [sp, #0]
    1baa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1bac:	2210      	movs	r2, #16
    1bae:	f7ff fd43 	bl	1638 <_PrintUnsigned>
        break;
    1bb2:	e03c      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1bb4:	9b03      	ldr	r3, [sp, #12]
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	1d19      	adds	r1, r3, #4
    1bba:	9a03      	ldr	r2, [sp, #12]
    1bbc:	6011      	str	r1, [r2, #0]
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1bc2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d101      	bne.n	1bcc <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1bc8:	4b2c      	ldr	r3, [pc, #176]	; (1c7c <SEGGER_RTT_vprintf+0x39c>)
    1bca:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1bcc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1bce:	781b      	ldrb	r3, [r3, #0]
    1bd0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1bd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1bd6:	3301      	adds	r3, #1
    1bd8:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1bda:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1bde:	2b00      	cmp	r3, #0
    1be0:	d00a      	beq.n	1bf8 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1be2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1be6:	ab16      	add	r3, sp, #88	; 0x58
    1be8:	4611      	mov	r1, r2
    1bea:	4618      	mov	r0, r3
    1bec:	f7ff fce5 	bl	15ba <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1bf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	daea      	bge.n	1bcc <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1bf6:	e01a      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
              break;
    1bf8:	bf00      	nop
        break;
    1bfa:	e018      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1bfc:	9b03      	ldr	r3, [sp, #12]
    1bfe:	681b      	ldr	r3, [r3, #0]
    1c00:	1d19      	adds	r1, r3, #4
    1c02:	9a03      	ldr	r2, [sp, #12]
    1c04:	6011      	str	r1, [r2, #0]
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1c0a:	9920      	ldr	r1, [sp, #128]	; 0x80
    1c0c:	a816      	add	r0, sp, #88	; 0x58
    1c0e:	2300      	movs	r3, #0
    1c10:	9301      	str	r3, [sp, #4]
    1c12:	2308      	movs	r3, #8
    1c14:	9300      	str	r3, [sp, #0]
    1c16:	2308      	movs	r3, #8
    1c18:	2210      	movs	r2, #16
    1c1a:	f7ff fd0d 	bl	1638 <_PrintUnsigned>
        break;
    1c1e:	e006      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1c20:	ab16      	add	r3, sp, #88	; 0x58
    1c22:	2125      	movs	r1, #37	; 0x25
    1c24:	4618      	mov	r0, r3
    1c26:	f7ff fcc8 	bl	15ba <_StoreChar>
        break;
    1c2a:	e000      	b.n	1c2e <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1c2c:	bf00      	nop
      }
      sFormat++;
    1c2e:	9b04      	ldr	r3, [sp, #16]
    1c30:	3301      	adds	r3, #1
    1c32:	9304      	str	r3, [sp, #16]
    1c34:	e006      	b.n	1c44 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1c36:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1c3a:	ab16      	add	r3, sp, #88	; 0x58
    1c3c:	4611      	mov	r1, r2
    1c3e:	4618      	mov	r0, r3
    1c40:	f7ff fcbb 	bl	15ba <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1c44:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c46:	2b00      	cmp	r3, #0
    1c48:	f6bf ae59 	bge.w	18fe <SEGGER_RTT_vprintf+0x1e>
    1c4c:	e000      	b.n	1c50 <SEGGER_RTT_vprintf+0x370>
      break;
    1c4e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c52:	2b00      	cmp	r3, #0
    1c54:	dd0c      	ble.n	1c70 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1c56:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d005      	beq.n	1c68 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1c5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c5e:	ab06      	add	r3, sp, #24
    1c60:	4619      	mov	r1, r3
    1c62:	9805      	ldr	r0, [sp, #20]
    1c64:	f7ff fc7e 	bl	1564 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1c68:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c6c:	4413      	add	r3, r2
    1c6e:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1c72:	4618      	mov	r0, r3
    1c74:	b023      	add	sp, #140	; 0x8c
    1c76:	f85d fb04 	ldr.w	pc, [sp], #4
    1c7a:	bf00      	nop
    1c7c:	00010718 	.word	0x00010718

00001c80 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1c80:	b40e      	push	{r1, r2, r3}
    1c82:	b500      	push	{lr}
    1c84:	b084      	sub	sp, #16
    1c86:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1c88:	ab06      	add	r3, sp, #24
    1c8a:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1c8c:	ab02      	add	r3, sp, #8
    1c8e:	461a      	mov	r2, r3
    1c90:	9905      	ldr	r1, [sp, #20]
    1c92:	9801      	ldr	r0, [sp, #4]
    1c94:	f7ff fe24 	bl	18e0 <SEGGER_RTT_vprintf>
    1c98:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1c9a:	9b03      	ldr	r3, [sp, #12]
}
    1c9c:	4618      	mov	r0, r3
    1c9e:	b004      	add	sp, #16
    1ca0:	f85d eb04 	ldr.w	lr, [sp], #4
    1ca4:	b003      	add	sp, #12
    1ca6:	4770      	bx	lr

00001ca8 <memcpy>:
    1ca8:	440a      	add	r2, r1
    1caa:	4291      	cmp	r1, r2
    1cac:	f100 33ff 	add.w	r3, r0, #4294967295
    1cb0:	d100      	bne.n	1cb4 <memcpy+0xc>
    1cb2:	4770      	bx	lr
    1cb4:	b510      	push	{r4, lr}
    1cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
    1cba:	f803 4f01 	strb.w	r4, [r3, #1]!
    1cbe:	4291      	cmp	r1, r2
    1cc0:	d1f9      	bne.n	1cb6 <memcpy+0xe>
    1cc2:	bd10      	pop	{r4, pc}

00001cc4 <memset>:
    1cc4:	4402      	add	r2, r0
    1cc6:	4603      	mov	r3, r0
    1cc8:	4293      	cmp	r3, r2
    1cca:	d100      	bne.n	1cce <memset+0xa>
    1ccc:	4770      	bx	lr
    1cce:	f803 1b01 	strb.w	r1, [r3], #1
    1cd2:	e7f9      	b.n	1cc8 <memset+0x4>

00001cd4 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1cd4:	b086      	sub	sp, #24
    1cd6:	9003      	str	r0, [sp, #12]
    1cd8:	9102      	str	r1, [sp, #8]
    1cda:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1cdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1ce0:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1ce4:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1ce6:	9b01      	ldr	r3, [sp, #4]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d007      	beq.n	1cfc <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1cec:	9b03      	ldr	r3, [sp, #12]
    1cee:	3310      	adds	r3, #16
    1cf0:	009b      	lsls	r3, r3, #2
    1cf2:	9a05      	ldr	r2, [sp, #20]
    1cf4:	4413      	add	r3, r2
    1cf6:	681a      	ldr	r2, [r3, #0]
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1cfc:	9b03      	ldr	r3, [sp, #12]
    1cfe:	3310      	adds	r3, #16
    1d00:	009b      	lsls	r3, r3, #2
    1d02:	9a05      	ldr	r2, [sp, #20]
    1d04:	4413      	add	r3, r2
    1d06:	9a02      	ldr	r2, [sp, #8]
    1d08:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1d0a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1d0e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1d12:	bf00      	nop
    1d14:	b006      	add	sp, #24
    1d16:	4770      	bx	lr

00001d18 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1d18:	b082      	sub	sp, #8
    1d1a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1d1c:	9b01      	ldr	r3, [sp, #4]
    1d1e:	f003 021f 	and.w	r2, r3, #31
    1d22:	4905      	ldr	r1, [pc, #20]	; (1d38 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1d24:	9b01      	ldr	r3, [sp, #4]
    1d26:	095b      	lsrs	r3, r3, #5
    1d28:	2001      	movs	r0, #1
    1d2a:	fa00 f202 	lsl.w	r2, r0, r2
    1d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1d32:	bf00      	nop
    1d34:	b002      	add	sp, #8
    1d36:	4770      	bx	lr
    1d38:	e000e100 	.word	0xe000e100

00001d3c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1d3c:	b082      	sub	sp, #8
    1d3e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1d40:	9b01      	ldr	r3, [sp, #4]
    1d42:	f003 021f 	and.w	r2, r3, #31
    1d46:	4906      	ldr	r1, [pc, #24]	; (1d60 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1d48:	9b01      	ldr	r3, [sp, #4]
    1d4a:	095b      	lsrs	r3, r3, #5
    1d4c:	2001      	movs	r0, #1
    1d4e:	fa00 f202 	lsl.w	r2, r0, r2
    1d52:	3320      	adds	r3, #32
    1d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1d58:	bf00      	nop
    1d5a:	b002      	add	sp, #8
    1d5c:	4770      	bx	lr
    1d5e:	bf00      	nop
    1d60:	e000e100 	.word	0xe000e100

00001d64 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1d64:	b084      	sub	sp, #16
    1d66:	9001      	str	r0, [sp, #4]
    1d68:	460b      	mov	r3, r1
    1d6a:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1d6e:	2304      	movs	r3, #4
    1d70:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1d74:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1d78:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d7c:	fa02 f103 	lsl.w	r1, r2, r3
    1d80:	4a04      	ldr	r2, [pc, #16]	; (1d94 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1d82:	9b01      	ldr	r3, [sp, #4]
    1d84:	b2c9      	uxtb	r1, r1
    1d86:	4413      	add	r3, r2
    1d88:	460a      	mov	r2, r1
    1d8a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1d8e:	bf00      	nop
    1d90:	b004      	add	sp, #16
    1d92:	4770      	bx	lr
    1d94:	e000e100 	.word	0xe000e100

00001d98 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1d98:	b084      	sub	sp, #16
    1d9a:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1d9c:	2304      	movs	r3, #4
    1d9e:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1da2:	4a09      	ldr	r2, [pc, #36]	; (1dc8 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1da4:	9b01      	ldr	r3, [sp, #4]
    1da6:	4413      	add	r3, r2
    1da8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1dac:	b2db      	uxtb	r3, r3
    1dae:	461a      	mov	r2, r3
    1db0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1db4:	fa42 f303 	asr.w	r3, r2, r3
    1db8:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1dbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1dc0:	4618      	mov	r0, r3
    1dc2:	b004      	add	sp, #16
    1dc4:	4770      	bx	lr
    1dc6:	bf00      	nop
    1dc8:	e000e100 	.word	0xe000e100

00001dcc <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1dcc:	b082      	sub	sp, #8
    1dce:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1dd0:	9b01      	ldr	r3, [sp, #4]
    1dd2:	f003 021f 	and.w	r2, r3, #31
    1dd6:	4906      	ldr	r1, [pc, #24]	; (1df0 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1dd8:	9b01      	ldr	r3, [sp, #4]
    1dda:	095b      	lsrs	r3, r3, #5
    1ddc:	2001      	movs	r0, #1
    1dde:	fa00 f202 	lsl.w	r2, r0, r2
    1de2:	3360      	adds	r3, #96	; 0x60
    1de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1de8:	bf00      	nop
    1dea:	b002      	add	sp, #8
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop
    1df0:	e000e100 	.word	0xe000e100

00001df4 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1df4:	b500      	push	{lr}
    1df6:	b085      	sub	sp, #20
    1df8:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1dfa:	2300      	movs	r3, #0
    1dfc:	9303      	str	r3, [sp, #12]
    1dfe:	e05d      	b.n	1ebc <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	6859      	ldr	r1, [r3, #4]
    1e04:	9a03      	ldr	r2, [sp, #12]
    1e06:	4613      	mov	r3, r2
    1e08:	005b      	lsls	r3, r3, #1
    1e0a:	4413      	add	r3, r2
    1e0c:	009b      	lsls	r3, r3, #2
    1e0e:	440b      	add	r3, r1
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	4618      	mov	r0, r3
    1e14:	f000 f899 	bl	1f4a <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e18:	9b01      	ldr	r3, [sp, #4]
    1e1a:	6859      	ldr	r1, [r3, #4]
    1e1c:	9a03      	ldr	r2, [sp, #12]
    1e1e:	4613      	mov	r3, r2
    1e20:	005b      	lsls	r3, r3, #1
    1e22:	4413      	add	r3, r2
    1e24:	009b      	lsls	r3, r3, #2
    1e26:	440b      	add	r3, r1
    1e28:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1e2a:	9b01      	ldr	r3, [sp, #4]
    1e2c:	6859      	ldr	r1, [r3, #4]
    1e2e:	9a03      	ldr	r2, [sp, #12]
    1e30:	4613      	mov	r3, r2
    1e32:	005b      	lsls	r3, r3, #1
    1e34:	4413      	add	r3, r2
    1e36:	009b      	lsls	r3, r3, #2
    1e38:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e3a:	795b      	ldrb	r3, [r3, #5]
    1e3c:	4619      	mov	r1, r3
    1e3e:	f000 f869 	bl	1f14 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e42:	9b01      	ldr	r3, [sp, #4]
    1e44:	6859      	ldr	r1, [r3, #4]
    1e46:	9a03      	ldr	r2, [sp, #12]
    1e48:	4613      	mov	r3, r2
    1e4a:	005b      	lsls	r3, r3, #1
    1e4c:	4413      	add	r3, r2
    1e4e:	009b      	lsls	r3, r3, #2
    1e50:	440b      	add	r3, r1
    1e52:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1e54:	9b01      	ldr	r3, [sp, #4]
    1e56:	6859      	ldr	r1, [r3, #4]
    1e58:	9a03      	ldr	r2, [sp, #12]
    1e5a:	4613      	mov	r3, r2
    1e5c:	005b      	lsls	r3, r3, #1
    1e5e:	4413      	add	r3, r2
    1e60:	009b      	lsls	r3, r3, #2
    1e62:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e64:	689b      	ldr	r3, [r3, #8]
    1e66:	2200      	movs	r2, #0
    1e68:	4619      	mov	r1, r3
    1e6a:	f000 f831 	bl	1ed0 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1e6e:	9b01      	ldr	r3, [sp, #4]
    1e70:	6859      	ldr	r1, [r3, #4]
    1e72:	9a03      	ldr	r2, [sp, #12]
    1e74:	4613      	mov	r3, r2
    1e76:	005b      	lsls	r3, r3, #1
    1e78:	4413      	add	r3, r2
    1e7a:	009b      	lsls	r3, r3, #2
    1e7c:	440b      	add	r3, r1
    1e7e:	791b      	ldrb	r3, [r3, #4]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d00c      	beq.n	1e9e <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e84:	9b01      	ldr	r3, [sp, #4]
    1e86:	6859      	ldr	r1, [r3, #4]
    1e88:	9a03      	ldr	r2, [sp, #12]
    1e8a:	4613      	mov	r3, r2
    1e8c:	005b      	lsls	r3, r3, #1
    1e8e:	4413      	add	r3, r2
    1e90:	009b      	lsls	r3, r3, #2
    1e92:	440b      	add	r3, r1
    1e94:	681b      	ldr	r3, [r3, #0]
    1e96:	4618      	mov	r0, r3
    1e98:	f000 f828 	bl	1eec <IntCtrl_Ip_EnableIrq>
    1e9c:	e00b      	b.n	1eb6 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e9e:	9b01      	ldr	r3, [sp, #4]
    1ea0:	6859      	ldr	r1, [r3, #4]
    1ea2:	9a03      	ldr	r2, [sp, #12]
    1ea4:	4613      	mov	r3, r2
    1ea6:	005b      	lsls	r3, r3, #1
    1ea8:	4413      	add	r3, r2
    1eaa:	009b      	lsls	r3, r3, #2
    1eac:	440b      	add	r3, r1
    1eae:	681b      	ldr	r3, [r3, #0]
    1eb0:	4618      	mov	r0, r3
    1eb2:	f000 f825 	bl	1f00 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1eb6:	9b03      	ldr	r3, [sp, #12]
    1eb8:	3301      	adds	r3, #1
    1eba:	9303      	str	r3, [sp, #12]
    1ebc:	9b01      	ldr	r3, [sp, #4]
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	9a03      	ldr	r2, [sp, #12]
    1ec2:	429a      	cmp	r2, r3
    1ec4:	d39c      	bcc.n	1e00 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1ec6:	2300      	movs	r3, #0
}
    1ec8:	4618      	mov	r0, r3
    1eca:	b005      	add	sp, #20
    1ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed0 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1ed0:	b500      	push	{lr}
    1ed2:	b085      	sub	sp, #20
    1ed4:	9003      	str	r0, [sp, #12]
    1ed6:	9102      	str	r1, [sp, #8]
    1ed8:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1eda:	9a01      	ldr	r2, [sp, #4]
    1edc:	9902      	ldr	r1, [sp, #8]
    1ede:	9803      	ldr	r0, [sp, #12]
    1ee0:	f7ff fef8 	bl	1cd4 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1ee4:	bf00      	nop
    1ee6:	b005      	add	sp, #20
    1ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00001eec <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1eec:	b500      	push	{lr}
    1eee:	b083      	sub	sp, #12
    1ef0:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1ef2:	9801      	ldr	r0, [sp, #4]
    1ef4:	f7ff ff10 	bl	1d18 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1ef8:	bf00      	nop
    1efa:	b003      	add	sp, #12
    1efc:	f85d fb04 	ldr.w	pc, [sp], #4

00001f00 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1f00:	b500      	push	{lr}
    1f02:	b083      	sub	sp, #12
    1f04:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1f06:	9801      	ldr	r0, [sp, #4]
    1f08:	f7ff ff18 	bl	1d3c <IntCtrl_Ip_DisableIrqPrivileged>
}
    1f0c:	bf00      	nop
    1f0e:	b003      	add	sp, #12
    1f10:	f85d fb04 	ldr.w	pc, [sp], #4

00001f14 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1f14:	b500      	push	{lr}
    1f16:	b083      	sub	sp, #12
    1f18:	9001      	str	r0, [sp, #4]
    1f1a:	460b      	mov	r3, r1
    1f1c:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f24:	4619      	mov	r1, r3
    1f26:	9801      	ldr	r0, [sp, #4]
    1f28:	f7ff ff1c 	bl	1d64 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1f2c:	bf00      	nop
    1f2e:	b003      	add	sp, #12
    1f30:	f85d fb04 	ldr.w	pc, [sp], #4

00001f34 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1f34:	b500      	push	{lr}
    1f36:	b083      	sub	sp, #12
    1f38:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1f3a:	9801      	ldr	r0, [sp, #4]
    1f3c:	f7ff ff2c 	bl	1d98 <IntCtrl_Ip_GetPriorityPrivileged>
    1f40:	4603      	mov	r3, r0
}
    1f42:	4618      	mov	r0, r3
    1f44:	b003      	add	sp, #12
    1f46:	f85d fb04 	ldr.w	pc, [sp], #4

00001f4a <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1f4a:	b500      	push	{lr}
    1f4c:	b083      	sub	sp, #12
    1f4e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1f50:	9801      	ldr	r0, [sp, #4]
    1f52:	f7ff ff3b 	bl	1dcc <IntCtrl_Ip_ClearPendingPrivileged>
}
    1f56:	bf00      	nop
    1f58:	b003      	add	sp, #12
    1f5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1f5e:	bf00      	nop

00001f60 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1f60:	b500      	push	{lr}
    1f62:	b083      	sub	sp, #12
    1f64:	9001      	str	r0, [sp, #4]
    1f66:	460b      	mov	r3, r1
    1f68:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1f6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f70:	2b00      	cmp	r3, #0
    1f72:	d003      	beq.n	1f7c <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1f74:	9801      	ldr	r0, [sp, #4]
    1f76:	f7ff ffb9 	bl	1eec <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1f7a:	e002      	b.n	1f82 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1f7c:	9801      	ldr	r0, [sp, #4]
    1f7e:	f7ff ffbf 	bl	1f00 <IntCtrl_Ip_DisableIrq>
}
    1f82:	bf00      	nop
    1f84:	b003      	add	sp, #12
    1f86:	f85d fb04 	ldr.w	pc, [sp], #4

00001f8a <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1f8a:	b500      	push	{lr}
    1f8c:	b083      	sub	sp, #12
    1f8e:	9001      	str	r0, [sp, #4]
    1f90:	460b      	mov	r3, r1
    1f92:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1f96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f9a:	4619      	mov	r1, r3
    1f9c:	9801      	ldr	r0, [sp, #4]
    1f9e:	f7ff ffb9 	bl	1f14 <IntCtrl_Ip_SetPriority>
}
    1fa2:	bf00      	nop
    1fa4:	b003      	add	sp, #12
    1fa6:	f85d fb04 	ldr.w	pc, [sp], #4

00001faa <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1faa:	b500      	push	{lr}
    1fac:	b083      	sub	sp, #12
    1fae:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1fb0:	9801      	ldr	r0, [sp, #4]
    1fb2:	f7ff ffbf 	bl	1f34 <IntCtrl_Ip_GetPriority>
    1fb6:	4603      	mov	r3, r0
}
    1fb8:	4618      	mov	r0, r3
    1fba:	b003      	add	sp, #12
    1fbc:	f85d fb04 	ldr.w	pc, [sp], #4

00001fc0 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1fc0:	b500      	push	{lr}
    1fc2:	b085      	sub	sp, #20
    1fc4:	9003      	str	r0, [sp, #12]
    1fc6:	9102      	str	r1, [sp, #8]
    1fc8:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1fca:	9a01      	ldr	r2, [sp, #4]
    1fcc:	9902      	ldr	r1, [sp, #8]
    1fce:	9803      	ldr	r0, [sp, #12]
    1fd0:	f7ff ff7e 	bl	1ed0 <IntCtrl_Ip_InstallHandler>
}
    1fd4:	bf00      	nop
    1fd6:	b005      	add	sp, #20
    1fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00001fdc <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1fdc:	b500      	push	{lr}
    1fde:	b085      	sub	sp, #20
    1fe0:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1fe2:	2300      	movs	r3, #0
    1fe4:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1fe8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1fec:	4a05      	ldr	r2, [pc, #20]	; (2004 <Platform_Init+0x28>)
    1fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	4618      	mov	r0, r3
    1ff6:	f000 f8c7 	bl	2188 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1ffa:	bf00      	nop
    1ffc:	b005      	add	sp, #20
    1ffe:	f85d fb04 	ldr.w	pc, [sp], #4
    2002:	bf00      	nop
    2004:	00011420 	.word	0x00011420

00002008 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2008:	b500      	push	{lr}
    200a:	b085      	sub	sp, #20
    200c:	9001      	str	r0, [sp, #4]
    200e:	460b      	mov	r3, r1
    2010:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2014:	2300      	movs	r3, #0
    2016:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    201a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    201e:	4619      	mov	r1, r3
    2020:	9801      	ldr	r0, [sp, #4]
    2022:	f7ff ff9d 	bl	1f60 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    2026:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    202a:	4618      	mov	r0, r3
    202c:	b005      	add	sp, #20
    202e:	f85d fb04 	ldr.w	pc, [sp], #4

00002032 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2032:	b500      	push	{lr}
    2034:	b085      	sub	sp, #20
    2036:	9001      	str	r0, [sp, #4]
    2038:	460b      	mov	r3, r1
    203a:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    203e:	2300      	movs	r3, #0
    2040:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    2044:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2048:	4619      	mov	r1, r3
    204a:	9801      	ldr	r0, [sp, #4]
    204c:	f7ff ff9d 	bl	1f8a <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2050:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2054:	4618      	mov	r0, r3
    2056:	b005      	add	sp, #20
    2058:	f85d fb04 	ldr.w	pc, [sp], #4

0000205c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    205c:	b500      	push	{lr}
    205e:	b085      	sub	sp, #20
    2060:	9001      	str	r0, [sp, #4]
    2062:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2064:	2300      	movs	r3, #0
    2066:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    206a:	9801      	ldr	r0, [sp, #4]
    206c:	f7ff ff9d 	bl	1faa <Platform_Ipw_GetIrqPriority>
    2070:	4603      	mov	r3, r0
    2072:	461a      	mov	r2, r3
    2074:	9b00      	ldr	r3, [sp, #0]
    2076:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2078:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    207c:	4618      	mov	r0, r3
    207e:	b005      	add	sp, #20
    2080:	f85d fb04 	ldr.w	pc, [sp], #4

00002084 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2084:	b500      	push	{lr}
    2086:	b087      	sub	sp, #28
    2088:	9003      	str	r0, [sp, #12]
    208a:	9102      	str	r1, [sp, #8]
    208c:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    208e:	2300      	movs	r3, #0
    2090:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2094:	9a01      	ldr	r2, [sp, #4]
    2096:	9902      	ldr	r1, [sp, #8]
    2098:	9803      	ldr	r0, [sp, #12]
    209a:	f7ff ff91 	bl	1fc0 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    209e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    20a2:	4618      	mov	r0, r3
    20a4:	b007      	add	sp, #28
    20a6:	f85d fb04 	ldr.w	pc, [sp], #4
    20aa:	bf00      	nop

000020ac <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    20ac:	b500      	push	{lr}
    20ae:	b085      	sub	sp, #20
    20b0:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    20b2:	2300      	movs	r3, #0
    20b4:	9303      	str	r3, [sp, #12]
    20b6:	e05d      	b.n	2174 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    20b8:	9b01      	ldr	r3, [sp, #4]
    20ba:	6859      	ldr	r1, [r3, #4]
    20bc:	9a03      	ldr	r2, [sp, #12]
    20be:	4613      	mov	r3, r2
    20c0:	005b      	lsls	r3, r3, #1
    20c2:	4413      	add	r3, r2
    20c4:	009b      	lsls	r3, r3, #2
    20c6:	440b      	add	r3, r1
    20c8:	681b      	ldr	r3, [r3, #0]
    20ca:	4618      	mov	r0, r3
    20cc:	f7ff ff3d 	bl	1f4a <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20d0:	9b01      	ldr	r3, [sp, #4]
    20d2:	6859      	ldr	r1, [r3, #4]
    20d4:	9a03      	ldr	r2, [sp, #12]
    20d6:	4613      	mov	r3, r2
    20d8:	005b      	lsls	r3, r3, #1
    20da:	4413      	add	r3, r2
    20dc:	009b      	lsls	r3, r3, #2
    20de:	440b      	add	r3, r1
    20e0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    20e2:	9b01      	ldr	r3, [sp, #4]
    20e4:	6859      	ldr	r1, [r3, #4]
    20e6:	9a03      	ldr	r2, [sp, #12]
    20e8:	4613      	mov	r3, r2
    20ea:	005b      	lsls	r3, r3, #1
    20ec:	4413      	add	r3, r2
    20ee:	009b      	lsls	r3, r3, #2
    20f0:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20f2:	795b      	ldrb	r3, [r3, #5]
    20f4:	4619      	mov	r1, r3
    20f6:	f7ff ff0d 	bl	1f14 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20fa:	9b01      	ldr	r3, [sp, #4]
    20fc:	6859      	ldr	r1, [r3, #4]
    20fe:	9a03      	ldr	r2, [sp, #12]
    2100:	4613      	mov	r3, r2
    2102:	005b      	lsls	r3, r3, #1
    2104:	4413      	add	r3, r2
    2106:	009b      	lsls	r3, r3, #2
    2108:	440b      	add	r3, r1
    210a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    210c:	9b01      	ldr	r3, [sp, #4]
    210e:	6859      	ldr	r1, [r3, #4]
    2110:	9a03      	ldr	r2, [sp, #12]
    2112:	4613      	mov	r3, r2
    2114:	005b      	lsls	r3, r3, #1
    2116:	4413      	add	r3, r2
    2118:	009b      	lsls	r3, r3, #2
    211a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    211c:	689b      	ldr	r3, [r3, #8]
    211e:	2200      	movs	r2, #0
    2120:	4619      	mov	r1, r3
    2122:	f7ff fed5 	bl	1ed0 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2126:	9b01      	ldr	r3, [sp, #4]
    2128:	6859      	ldr	r1, [r3, #4]
    212a:	9a03      	ldr	r2, [sp, #12]
    212c:	4613      	mov	r3, r2
    212e:	005b      	lsls	r3, r3, #1
    2130:	4413      	add	r3, r2
    2132:	009b      	lsls	r3, r3, #2
    2134:	440b      	add	r3, r1
    2136:	791b      	ldrb	r3, [r3, #4]
    2138:	2b00      	cmp	r3, #0
    213a:	d00c      	beq.n	2156 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    213c:	9b01      	ldr	r3, [sp, #4]
    213e:	6859      	ldr	r1, [r3, #4]
    2140:	9a03      	ldr	r2, [sp, #12]
    2142:	4613      	mov	r3, r2
    2144:	005b      	lsls	r3, r3, #1
    2146:	4413      	add	r3, r2
    2148:	009b      	lsls	r3, r3, #2
    214a:	440b      	add	r3, r1
    214c:	681b      	ldr	r3, [r3, #0]
    214e:	4618      	mov	r0, r3
    2150:	f7ff fecc 	bl	1eec <IntCtrl_Ip_EnableIrq>
    2154:	e00b      	b.n	216e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	6859      	ldr	r1, [r3, #4]
    215a:	9a03      	ldr	r2, [sp, #12]
    215c:	4613      	mov	r3, r2
    215e:	005b      	lsls	r3, r3, #1
    2160:	4413      	add	r3, r2
    2162:	009b      	lsls	r3, r3, #2
    2164:	440b      	add	r3, r1
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	4618      	mov	r0, r3
    216a:	f7ff fec9 	bl	1f00 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    216e:	9b03      	ldr	r3, [sp, #12]
    2170:	3301      	adds	r3, #1
    2172:	9303      	str	r3, [sp, #12]
    2174:	9b01      	ldr	r3, [sp, #4]
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	9a03      	ldr	r2, [sp, #12]
    217a:	429a      	cmp	r2, r3
    217c:	d39c      	bcc.n	20b8 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    217e:	2300      	movs	r3, #0
}
    2180:	4618      	mov	r0, r3
    2182:	b005      	add	sp, #20
    2184:	f85d fb04 	ldr.w	pc, [sp], #4

00002188 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2188:	b500      	push	{lr}
    218a:	b085      	sub	sp, #20
    218c:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    218e:	2300      	movs	r3, #0
    2190:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2194:	9b01      	ldr	r3, [sp, #4]
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	2b00      	cmp	r3, #0
    219a:	d007      	beq.n	21ac <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    219c:	9b01      	ldr	r3, [sp, #4]
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	4618      	mov	r0, r3
    21a2:	f7ff ff83 	bl	20ac <Platform_Ipw_InitIntCtrl>
    21a6:	4603      	mov	r3, r0
    21a8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    21ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    21b0:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    21b2:	bf00      	nop
    21b4:	b005      	add	sp, #20
    21b6:	f85d fb04 	ldr.w	pc, [sp], #4

000021ba <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    21ba:	2300      	movs	r3, #0
}
    21bc:	4618      	mov	r0, r3
    21be:	4770      	bx	lr

000021c0 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    21c0:	b082      	sub	sp, #8
    21c2:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    21c4:	2301      	movs	r3, #1
}
    21c6:	4618      	mov	r0, r3
    21c8:	b002      	add	sp, #8
    21ca:	4770      	bx	lr

000021cc <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    21cc:	b082      	sub	sp, #8
    21ce:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    21d0:	bf00      	nop
    21d2:	b002      	add	sp, #8
    21d4:	4770      	bx	lr

000021d6 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    21d6:	b082      	sub	sp, #8
    21d8:	9001      	str	r0, [sp, #4]
    return Micros;
    21da:	9b01      	ldr	r3, [sp, #4]
}
    21dc:	4618      	mov	r0, r3
    21de:	b002      	add	sp, #8
    21e0:	4770      	bx	lr

000021e2 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    21e2:	b500      	push	{lr}
    21e4:	b083      	sub	sp, #12
    21e6:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    21e8:	f000 f86c 	bl	22c4 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    21ec:	bf00      	nop
    21ee:	b003      	add	sp, #12
    21f0:	f85d fb04 	ldr.w	pc, [sp], #4

000021f4 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    21f4:	b500      	push	{lr}
    21f6:	b085      	sub	sp, #20
    21f8:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    21fa:	2300      	movs	r3, #0
    21fc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    21fe:	9b01      	ldr	r3, [sp, #4]
    2200:	2b00      	cmp	r3, #0
    2202:	d003      	beq.n	220c <OsIf_GetCounter+0x18>
    2204:	9b01      	ldr	r3, [sp, #4]
    2206:	2b01      	cmp	r3, #1
    2208:	d004      	beq.n	2214 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    220a:	e007      	b.n	221c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    220c:	f7ff ffd5 	bl	21ba <OsIf_Timer_Dummy_GetCounter>
    2210:	9003      	str	r0, [sp, #12]
            break;
    2212:	e003      	b.n	221c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    2214:	f000 f872 	bl	22fc <OsIf_Timer_System_GetCounter>
    2218:	9003      	str	r0, [sp, #12]
            break;
    221a:	bf00      	nop
    }

    return Value;
    221c:	9b03      	ldr	r3, [sp, #12]
}
    221e:	4618      	mov	r0, r3
    2220:	b005      	add	sp, #20
    2222:	f85d fb04 	ldr.w	pc, [sp], #4

00002226 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    2226:	b500      	push	{lr}
    2228:	b085      	sub	sp, #20
    222a:	9001      	str	r0, [sp, #4]
    222c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    222e:	2300      	movs	r3, #0
    2230:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2232:	9b00      	ldr	r3, [sp, #0]
    2234:	2b00      	cmp	r3, #0
    2236:	d003      	beq.n	2240 <OsIf_GetElapsed+0x1a>
    2238:	9b00      	ldr	r3, [sp, #0]
    223a:	2b01      	cmp	r3, #1
    223c:	d005      	beq.n	224a <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    223e:	e009      	b.n	2254 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2240:	9801      	ldr	r0, [sp, #4]
    2242:	f7ff ffbd 	bl	21c0 <OsIf_Timer_Dummy_GetElapsed>
    2246:	9003      	str	r0, [sp, #12]
            break;
    2248:	e004      	b.n	2254 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    224a:	9801      	ldr	r0, [sp, #4]
    224c:	f000 f864 	bl	2318 <OsIf_Timer_System_GetElapsed>
    2250:	9003      	str	r0, [sp, #12]
            break;
    2252:	bf00      	nop
    }

    return Value;
    2254:	9b03      	ldr	r3, [sp, #12]
}
    2256:	4618      	mov	r0, r3
    2258:	b005      	add	sp, #20
    225a:	f85d fb04 	ldr.w	pc, [sp], #4

0000225e <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    225e:	b500      	push	{lr}
    2260:	b083      	sub	sp, #12
    2262:	9001      	str	r0, [sp, #4]
    2264:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    2266:	9b00      	ldr	r3, [sp, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d003      	beq.n	2274 <OsIf_SetTimerFrequency+0x16>
    226c:	9b00      	ldr	r3, [sp, #0]
    226e:	2b01      	cmp	r3, #1
    2270:	d004      	beq.n	227c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2272:	e007      	b.n	2284 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2274:	9801      	ldr	r0, [sp, #4]
    2276:	f7ff ffa9 	bl	21cc <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    227a:	e003      	b.n	2284 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    227c:	9801      	ldr	r0, [sp, #4]
    227e:	f000 f85b 	bl	2338 <OsIf_Timer_System_SetTimerFrequency>
            break;
    2282:	bf00      	nop
    }
}
    2284:	bf00      	nop
    2286:	b003      	add	sp, #12
    2288:	f85d fb04 	ldr.w	pc, [sp], #4

0000228c <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    228c:	b500      	push	{lr}
    228e:	b085      	sub	sp, #20
    2290:	9001      	str	r0, [sp, #4]
    2292:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2294:	2300      	movs	r3, #0
    2296:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2298:	9b00      	ldr	r3, [sp, #0]
    229a:	2b00      	cmp	r3, #0
    229c:	d003      	beq.n	22a6 <OsIf_MicrosToTicks+0x1a>
    229e:	9b00      	ldr	r3, [sp, #0]
    22a0:	2b01      	cmp	r3, #1
    22a2:	d005      	beq.n	22b0 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    22a4:	e009      	b.n	22ba <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    22a6:	9801      	ldr	r0, [sp, #4]
    22a8:	f7ff ff95 	bl	21d6 <OsIf_Timer_Dummy_MicrosToTicks>
    22ac:	9003      	str	r0, [sp, #12]
            break;
    22ae:	e004      	b.n	22ba <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    22b0:	9801      	ldr	r0, [sp, #4]
    22b2:	f000 f84f 	bl	2354 <OsIf_Timer_System_MicrosToTicks>
    22b6:	9003      	str	r0, [sp, #12]
            break;
    22b8:	bf00      	nop
    }

    return Value;
    22ba:	9b03      	ldr	r3, [sp, #12]
}
    22bc:	4618      	mov	r0, r3
    22be:	b005      	add	sp, #20
    22c0:	f85d fb04 	ldr.w	pc, [sp], #4

000022c4 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    22c4:	b500      	push	{lr}
    22c6:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    22c8:	2300      	movs	r3, #0
    22ca:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    22cc:	4a09      	ldr	r2, [pc, #36]	; (22f4 <OsIf_Timer_System_Init+0x30>)
    22ce:	9b01      	ldr	r3, [sp, #4]
    22d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22d4:	685a      	ldr	r2, [r3, #4]
    22d6:	4908      	ldr	r1, [pc, #32]	; (22f8 <OsIf_Timer_System_Init+0x34>)
    22d8:	9b01      	ldr	r3, [sp, #4]
    22da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    22de:	4a06      	ldr	r2, [pc, #24]	; (22f8 <OsIf_Timer_System_Init+0x34>)
    22e0:	9b01      	ldr	r3, [sp, #4]
    22e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22e6:	4618      	mov	r0, r3
    22e8:	f000 f868 	bl	23bc <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    22ec:	bf00      	nop
    22ee:	b003      	add	sp, #12
    22f0:	f85d fb04 	ldr.w	pc, [sp], #4
    22f4:	000113f8 	.word	0x000113f8
    22f8:	1fff8b30 	.word	0x1fff8b30

000022fc <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    22fc:	b500      	push	{lr}
    22fe:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2300:	2300      	movs	r3, #0
    2302:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2304:	2300      	movs	r3, #0
    2306:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2308:	f000 f86c 	bl	23e4 <OsIf_Timer_System_Internal_GetCounter>
    230c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    230e:	9b01      	ldr	r3, [sp, #4]
}
    2310:	4618      	mov	r0, r3
    2312:	b003      	add	sp, #12
    2314:	f85d fb04 	ldr.w	pc, [sp], #4

00002318 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2318:	b500      	push	{lr}
    231a:	b085      	sub	sp, #20
    231c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    231e:	2300      	movs	r3, #0
    2320:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    2322:	2300      	movs	r3, #0
    2324:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    2326:	9801      	ldr	r0, [sp, #4]
    2328:	f000 f864 	bl	23f4 <OsIf_Timer_System_Internal_GetElapsed>
    232c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    232e:	9b03      	ldr	r3, [sp, #12]
}
    2330:	4618      	mov	r0, r3
    2332:	b005      	add	sp, #20
    2334:	f85d fb04 	ldr.w	pc, [sp], #4

00002338 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2338:	b084      	sub	sp, #16
    233a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    233c:	2300      	movs	r3, #0
    233e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2340:	4903      	ldr	r1, [pc, #12]	; (2350 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	9a01      	ldr	r2, [sp, #4]
    2346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    234a:	bf00      	nop
    234c:	b004      	add	sp, #16
    234e:	4770      	bx	lr
    2350:	1fff8b30 	.word	0x1fff8b30

00002354 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2354:	b5f0      	push	{r4, r5, r6, r7, lr}
    2356:	b087      	sub	sp, #28
    2358:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    235a:	2100      	movs	r1, #0
    235c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    235e:	2100      	movs	r1, #0
    2360:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2362:	9901      	ldr	r1, [sp, #4]
    2364:	2000      	movs	r0, #0
    2366:	460e      	mov	r6, r1
    2368:	4607      	mov	r7, r0
    236a:	4812      	ldr	r0, [pc, #72]	; (23b4 <OsIf_Timer_System_MicrosToTicks+0x60>)
    236c:	9904      	ldr	r1, [sp, #16]
    236e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2372:	2000      	movs	r0, #0
    2374:	460c      	mov	r4, r1
    2376:	4605      	mov	r5, r0
    2378:	fb04 f007 	mul.w	r0, r4, r7
    237c:	fb06 f105 	mul.w	r1, r6, r5
    2380:	4401      	add	r1, r0
    2382:	fba6 2304 	umull	r2, r3, r6, r4
    2386:	4419      	add	r1, r3
    2388:	460b      	mov	r3, r1
    238a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    238e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2396:	4a08      	ldr	r2, [pc, #32]	; (23b8 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2398:	f04f 0300 	mov.w	r3, #0
    239c:	f7fe fc08 	bl	bb0 <__aeabi_uldivmod>
    23a0:	4602      	mov	r2, r0
    23a2:	460b      	mov	r3, r1
    23a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    23a8:	9b02      	ldr	r3, [sp, #8]
    23aa:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    23ac:	9b05      	ldr	r3, [sp, #20]
}
    23ae:	4618      	mov	r0, r3
    23b0:	b007      	add	sp, #28
    23b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23b4:	1fff8b30 	.word	0x1fff8b30
    23b8:	000f4240 	.word	0x000f4240

000023bc <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    23bc:	b082      	sub	sp, #8
    23be:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    23c0:	4b07      	ldr	r3, [pc, #28]	; (23e0 <OsIf_Timer_System_Internal_Init+0x24>)
    23c2:	2200      	movs	r2, #0
    23c4:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    23c6:	4b06      	ldr	r3, [pc, #24]	; (23e0 <OsIf_Timer_System_Internal_Init+0x24>)
    23c8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    23cc:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    23ce:	4b04      	ldr	r3, [pc, #16]	; (23e0 <OsIf_Timer_System_Internal_Init+0x24>)
    23d0:	2200      	movs	r2, #0
    23d2:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    23d4:	4b02      	ldr	r3, [pc, #8]	; (23e0 <OsIf_Timer_System_Internal_Init+0x24>)
    23d6:	2205      	movs	r2, #5
    23d8:	601a      	str	r2, [r3, #0]
}
    23da:	bf00      	nop
    23dc:	b002      	add	sp, #8
    23de:	4770      	bx	lr
    23e0:	e000e010 	.word	0xe000e010

000023e4 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    23e4:	4b02      	ldr	r3, [pc, #8]	; (23f0 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    23e6:	689b      	ldr	r3, [r3, #8]
    23e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    23ec:	4618      	mov	r0, r3
    23ee:	4770      	bx	lr
    23f0:	e000e010 	.word	0xe000e010

000023f4 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    23f4:	b084      	sub	sp, #16
    23f6:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    23f8:	4b10      	ldr	r3, [pc, #64]	; (243c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    23fa:	689b      	ldr	r3, [r3, #8]
    23fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2400:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    2402:	2300      	movs	r3, #0
    2404:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2406:	9b01      	ldr	r3, [sp, #4]
    2408:	681b      	ldr	r3, [r3, #0]
    240a:	9a02      	ldr	r2, [sp, #8]
    240c:	429a      	cmp	r2, r3
    240e:	d909      	bls.n	2424 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2410:	9b01      	ldr	r3, [sp, #4]
    2412:	681a      	ldr	r2, [r3, #0]
    2414:	9b02      	ldr	r3, [sp, #8]
    2416:	1ad3      	subs	r3, r2, r3
    2418:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    241c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2420:	9303      	str	r3, [sp, #12]
    2422:	e004      	b.n	242e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2424:	9b01      	ldr	r3, [sp, #4]
    2426:	681a      	ldr	r2, [r3, #0]
    2428:	9b02      	ldr	r3, [sp, #8]
    242a:	1ad3      	subs	r3, r2, r3
    242c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    242e:	9b01      	ldr	r3, [sp, #4]
    2430:	9a02      	ldr	r2, [sp, #8]
    2432:	601a      	str	r2, [r3, #0]

    return dif;
    2434:	9b03      	ldr	r3, [sp, #12]
}
    2436:	4618      	mov	r0, r3
    2438:	b004      	add	sp, #16
    243a:	4770      	bx	lr
    243c:	e000e010 	.word	0xe000e010

00002440 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2440:	b082      	sub	sp, #8
    2442:	9001      	str	r0, [sp, #4]
    2444:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2446:	bf00      	nop
    2448:	b002      	add	sp, #8
    244a:	4770      	bx	lr

0000244c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    244c:	b500      	push	{lr}
    244e:	b085      	sub	sp, #20
    2450:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2452:	4b24      	ldr	r3, [pc, #144]	; (24e4 <Clock_Ip_UpdateDriverContext+0x98>)
    2454:	2201      	movs	r2, #1
    2456:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2458:	4b23      	ldr	r3, [pc, #140]	; (24e8 <Clock_Ip_UpdateDriverContext+0x9c>)
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	2102      	movs	r1, #2
    245e:	4618      	mov	r0, r3
    2460:	f003 fc32 	bl	5cc8 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2464:	2300      	movs	r3, #0
    2466:	f88d 300f 	strb.w	r3, [sp, #15]
    246a:	e015      	b.n	2498 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    246c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2470:	9a01      	ldr	r2, [sp, #4]
    2472:	334a      	adds	r3, #74	; 0x4a
    2474:	00db      	lsls	r3, r3, #3
    2476:	4413      	add	r3, r2
    2478:	6858      	ldr	r0, [r3, #4]
    247a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    247e:	9a01      	ldr	r2, [sp, #4]
    2480:	334a      	adds	r3, #74	; 0x4a
    2482:	00db      	lsls	r3, r3, #3
    2484:	4413      	add	r3, r2
    2486:	689b      	ldr	r3, [r3, #8]
    2488:	4619      	mov	r1, r3
    248a:	f001 fadc 	bl	3a46 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    248e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2492:	3301      	adds	r3, #1
    2494:	f88d 300f 	strb.w	r3, [sp, #15]
    2498:	9b01      	ldr	r3, [sp, #4]
    249a:	7bdb      	ldrb	r3, [r3, #15]
    249c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    24a0:	429a      	cmp	r2, r3
    24a2:	d3e3      	bcc.n	246c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    24a4:	f000 f824 	bl	24f0 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    24a8:	2301      	movs	r3, #1
    24aa:	f88d 300f 	strb.w	r3, [sp, #15]
    24ae:	e00e      	b.n	24ce <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    24b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	327e      	adds	r2, #126	; 0x7e
    24b8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    24bc:	490b      	ldr	r1, [pc, #44]	; (24ec <Clock_Ip_UpdateDriverContext+0xa0>)
    24be:	f89d 200f 	ldrb.w	r2, [sp, #15]
    24c2:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    24c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    24c8:	3301      	adds	r3, #1
    24ca:	f88d 300f 	strb.w	r3, [sp, #15]
    24ce:	9b01      	ldr	r3, [sp, #4]
    24d0:	7cdb      	ldrb	r3, [r3, #19]
    24d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    24d6:	429a      	cmp	r2, r3
    24d8:	d3ea      	bcc.n	24b0 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    24da:	bf00      	nop
    24dc:	bf00      	nop
    24de:	b005      	add	sp, #20
    24e0:	f85d fb04 	ldr.w	pc, [sp], #4
    24e4:	1fff8b10 	.word	0x1fff8b10
    24e8:	1fff8b34 	.word	0x1fff8b34
    24ec:	1fff8b40 	.word	0x1fff8b40

000024f0 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    24f0:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    24f2:	4b23      	ldr	r3, [pc, #140]	; (2580 <Clock_Ip_CallEmptyCallbacks+0x90>)
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	f083 0301 	eor.w	r3, r3, #1
    24fa:	b2db      	uxtb	r3, r3
    24fc:	2b00      	cmp	r3, #0
    24fe:	d03d      	beq.n	257c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2500:	4b1f      	ldr	r3, [pc, #124]	; (2580 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2502:	2201      	movs	r2, #1
    2504:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2506:	4b1f      	ldr	r3, [pc, #124]	; (2584 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2508:	685b      	ldr	r3, [r3, #4]
    250a:	2100      	movs	r1, #0
    250c:	2000      	movs	r0, #0
    250e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2510:	4b1c      	ldr	r3, [pc, #112]	; (2584 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2512:	689b      	ldr	r3, [r3, #8]
    2514:	2057      	movs	r0, #87	; 0x57
    2516:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2518:	4b1b      	ldr	r3, [pc, #108]	; (2588 <Clock_Ip_CallEmptyCallbacks+0x98>)
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	2000      	movs	r0, #0
    251e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2520:	4b1a      	ldr	r3, [pc, #104]	; (258c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	2000      	movs	r0, #0
    2526:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2528:	4b19      	ldr	r3, [pc, #100]	; (2590 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    252a:	681b      	ldr	r3, [r3, #0]
    252c:	2000      	movs	r0, #0
    252e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2530:	4b18      	ldr	r3, [pc, #96]	; (2594 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2532:	685b      	ldr	r3, [r3, #4]
    2534:	2000      	movs	r0, #0
    2536:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2538:	4b16      	ldr	r3, [pc, #88]	; (2594 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    253a:	689b      	ldr	r3, [r3, #8]
    253c:	2057      	movs	r0, #87	; 0x57
    253e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2540:	4b15      	ldr	r3, [pc, #84]	; (2598 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2542:	681b      	ldr	r3, [r3, #0]
    2544:	2000      	movs	r0, #0
    2546:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2548:	4b13      	ldr	r3, [pc, #76]	; (2598 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    254a:	685b      	ldr	r3, [r3, #4]
    254c:	2100      	movs	r1, #0
    254e:	2057      	movs	r0, #87	; 0x57
    2550:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2552:	4b12      	ldr	r3, [pc, #72]	; (259c <Clock_Ip_CallEmptyCallbacks+0xac>)
    2554:	681b      	ldr	r3, [r3, #0]
    2556:	2000      	movs	r0, #0
    2558:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    255a:	4b11      	ldr	r3, [pc, #68]	; (25a0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    255c:	685b      	ldr	r3, [r3, #4]
    255e:	2000      	movs	r0, #0
    2560:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2562:	4b0f      	ldr	r3, [pc, #60]	; (25a0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2564:	689b      	ldr	r3, [r3, #8]
    2566:	2057      	movs	r0, #87	; 0x57
    2568:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    256a:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    256c:	685b      	ldr	r3, [r3, #4]
    256e:	2000      	movs	r0, #0
    2570:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2572:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	2100      	movs	r1, #0
    2578:	2000      	movs	r0, #0
    257a:	4798      	blx	r3
    }
}
    257c:	bf00      	nop
    257e:	bd08      	pop	{r3, pc}
    2580:	1fff8b38 	.word	0x1fff8b38
    2584:	00010dbc 	.word	0x00010dbc
    2588:	00010cd0 	.word	0x00010cd0
    258c:	00010d0c 	.word	0x00010d0c
    2590:	00010d14 	.word	0x00010d14
    2594:	00010d3c 	.word	0x00010d3c
    2598:	00010d48 	.word	0x00010d48
    259c:	00010d80 	.word	0x00010d80
    25a0:	00010dcc 	.word	0x00010dcc
    25a4:	00010df8 	.word	0x00010df8
    25a8:	00010df4 	.word	0x00010df4

000025ac <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    25ac:	b500      	push	{lr}
    25ae:	b085      	sub	sp, #20
    25b0:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    25b2:	9b01      	ldr	r3, [sp, #4]
    25b4:	7adb      	ldrb	r3, [r3, #11]
    25b6:	9303      	str	r3, [sp, #12]
    25b8:	e01f      	b.n	25fa <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	1e5a      	subs	r2, r3, #1
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	320d      	adds	r2, #13
    25c2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    25c6:	495a      	ldr	r1, [pc, #360]	; (2730 <Clock_Ip_ResetClockConfiguration+0x184>)
    25c8:	4613      	mov	r3, r2
    25ca:	00db      	lsls	r3, r3, #3
    25cc:	4413      	add	r3, r2
    25ce:	440b      	add	r3, r1
    25d0:	3301      	adds	r3, #1
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	461a      	mov	r2, r3
    25d6:	4b57      	ldr	r3, [pc, #348]	; (2734 <Clock_Ip_ResetClockConfiguration+0x188>)
    25d8:	5c9b      	ldrb	r3, [r3, r2]
    25da:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    25dc:	4a56      	ldr	r2, [pc, #344]	; (2738 <Clock_Ip_ResetClockConfiguration+0x18c>)
    25de:	9b02      	ldr	r3, [sp, #8]
    25e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25e4:	9a03      	ldr	r2, [sp, #12]
    25e6:	3a01      	subs	r2, #1
    25e8:	320d      	adds	r2, #13
    25ea:	00d2      	lsls	r2, r2, #3
    25ec:	9901      	ldr	r1, [sp, #4]
    25ee:	440a      	add	r2, r1
    25f0:	4610      	mov	r0, r2
    25f2:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    25f4:	9b03      	ldr	r3, [sp, #12]
    25f6:	3b01      	subs	r3, #1
    25f8:	9303      	str	r3, [sp, #12]
    25fa:	9b03      	ldr	r3, [sp, #12]
    25fc:	2b00      	cmp	r3, #0
    25fe:	d1dc      	bne.n	25ba <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2600:	9b01      	ldr	r3, [sp, #4]
    2602:	7b9b      	ldrb	r3, [r3, #14]
    2604:	9303      	str	r3, [sp, #12]
    2606:	e026      	b.n	2656 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2608:	9b03      	ldr	r3, [sp, #12]
    260a:	3b01      	subs	r3, #1
    260c:	9a01      	ldr	r2, [sp, #4]
    260e:	3324      	adds	r3, #36	; 0x24
    2610:	011b      	lsls	r3, r3, #4
    2612:	4413      	add	r3, r2
    2614:	3304      	adds	r3, #4
    2616:	681a      	ldr	r2, [r3, #0]
    2618:	4945      	ldr	r1, [pc, #276]	; (2730 <Clock_Ip_ResetClockConfiguration+0x184>)
    261a:	4613      	mov	r3, r2
    261c:	00db      	lsls	r3, r3, #3
    261e:	4413      	add	r3, r2
    2620:	440b      	add	r3, r1
    2622:	3301      	adds	r3, #1
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	461a      	mov	r2, r3
    2628:	4b44      	ldr	r3, [pc, #272]	; (273c <Clock_Ip_ResetClockConfiguration+0x190>)
    262a:	5c9b      	ldrb	r3, [r3, r2]
    262c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    262e:	4944      	ldr	r1, [pc, #272]	; (2740 <Clock_Ip_ResetClockConfiguration+0x194>)
    2630:	9a02      	ldr	r2, [sp, #8]
    2632:	4613      	mov	r3, r2
    2634:	005b      	lsls	r3, r3, #1
    2636:	4413      	add	r3, r2
    2638:	009b      	lsls	r3, r3, #2
    263a:	440b      	add	r3, r1
    263c:	681b      	ldr	r3, [r3, #0]
    263e:	9a03      	ldr	r2, [sp, #12]
    2640:	3a01      	subs	r2, #1
    2642:	3224      	adds	r2, #36	; 0x24
    2644:	0112      	lsls	r2, r2, #4
    2646:	9901      	ldr	r1, [sp, #4]
    2648:	440a      	add	r2, r1
    264a:	3204      	adds	r2, #4
    264c:	4610      	mov	r0, r2
    264e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2650:	9b03      	ldr	r3, [sp, #12]
    2652:	3b01      	subs	r3, #1
    2654:	9303      	str	r3, [sp, #12]
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	2b00      	cmp	r3, #0
    265a:	d1d5      	bne.n	2608 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	7a9b      	ldrb	r3, [r3, #10]
    2660:	9303      	str	r3, [sp, #12]
    2662:	e02a      	b.n	26ba <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2664:	9b03      	ldr	r3, [sp, #12]
    2666:	1e5a      	subs	r2, r3, #1
    2668:	9901      	ldr	r1, [sp, #4]
    266a:	4613      	mov	r3, r2
    266c:	009b      	lsls	r3, r3, #2
    266e:	4413      	add	r3, r2
    2670:	00db      	lsls	r3, r3, #3
    2672:	440b      	add	r3, r1
    2674:	3340      	adds	r3, #64	; 0x40
    2676:	681a      	ldr	r2, [r3, #0]
    2678:	492d      	ldr	r1, [pc, #180]	; (2730 <Clock_Ip_ResetClockConfiguration+0x184>)
    267a:	4613      	mov	r3, r2
    267c:	00db      	lsls	r3, r3, #3
    267e:	4413      	add	r3, r2
    2680:	440b      	add	r3, r1
    2682:	3301      	adds	r3, #1
    2684:	781b      	ldrb	r3, [r3, #0]
    2686:	461a      	mov	r2, r3
    2688:	4b2e      	ldr	r3, [pc, #184]	; (2744 <Clock_Ip_ResetClockConfiguration+0x198>)
    268a:	5c9b      	ldrb	r3, [r3, r2]
    268c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    268e:	492e      	ldr	r1, [pc, #184]	; (2748 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2690:	9a02      	ldr	r2, [sp, #8]
    2692:	4613      	mov	r3, r2
    2694:	009b      	lsls	r3, r3, #2
    2696:	4413      	add	r3, r2
    2698:	009b      	lsls	r3, r3, #2
    269a:	440b      	add	r3, r1
    269c:	6819      	ldr	r1, [r3, #0]
    269e:	9b03      	ldr	r3, [sp, #12]
    26a0:	1e5a      	subs	r2, r3, #1
    26a2:	4613      	mov	r3, r2
    26a4:	009b      	lsls	r3, r3, #2
    26a6:	4413      	add	r3, r2
    26a8:	00db      	lsls	r3, r3, #3
    26aa:	3340      	adds	r3, #64	; 0x40
    26ac:	9a01      	ldr	r2, [sp, #4]
    26ae:	4413      	add	r3, r2
    26b0:	4618      	mov	r0, r3
    26b2:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    26b4:	9b03      	ldr	r3, [sp, #12]
    26b6:	3b01      	subs	r3, #1
    26b8:	9303      	str	r3, [sp, #12]
    26ba:	9b03      	ldr	r3, [sp, #12]
    26bc:	2b00      	cmp	r3, #0
    26be:	d1d1      	bne.n	2664 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    26c0:	9b01      	ldr	r3, [sp, #4]
    26c2:	7a5b      	ldrb	r3, [r3, #9]
    26c4:	9303      	str	r3, [sp, #12]
    26c6:	e02b      	b.n	2720 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    26c8:	9b03      	ldr	r3, [sp, #12]
    26ca:	1e5a      	subs	r2, r3, #1
    26cc:	9901      	ldr	r1, [sp, #4]
    26ce:	4613      	mov	r3, r2
    26d0:	009b      	lsls	r3, r3, #2
    26d2:	4413      	add	r3, r2
    26d4:	009b      	lsls	r3, r3, #2
    26d6:	440b      	add	r3, r1
    26d8:	332c      	adds	r3, #44	; 0x2c
    26da:	681a      	ldr	r2, [r3, #0]
    26dc:	4914      	ldr	r1, [pc, #80]	; (2730 <Clock_Ip_ResetClockConfiguration+0x184>)
    26de:	4613      	mov	r3, r2
    26e0:	00db      	lsls	r3, r3, #3
    26e2:	4413      	add	r3, r2
    26e4:	440b      	add	r3, r1
    26e6:	3301      	adds	r3, #1
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	461a      	mov	r2, r3
    26ec:	4b17      	ldr	r3, [pc, #92]	; (274c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    26ee:	5c9b      	ldrb	r3, [r3, r2]
    26f0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    26f2:	4917      	ldr	r1, [pc, #92]	; (2750 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    26f4:	9a02      	ldr	r2, [sp, #8]
    26f6:	4613      	mov	r3, r2
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	4413      	add	r3, r2
    26fc:	009b      	lsls	r3, r3, #2
    26fe:	440b      	add	r3, r1
    2700:	6819      	ldr	r1, [r3, #0]
    2702:	9b03      	ldr	r3, [sp, #12]
    2704:	1e5a      	subs	r2, r3, #1
    2706:	4613      	mov	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	4413      	add	r3, r2
    270c:	009b      	lsls	r3, r3, #2
    270e:	3328      	adds	r3, #40	; 0x28
    2710:	9a01      	ldr	r2, [sp, #4]
    2712:	4413      	add	r3, r2
    2714:	3304      	adds	r3, #4
    2716:	4618      	mov	r0, r3
    2718:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    271a:	9b03      	ldr	r3, [sp, #12]
    271c:	3b01      	subs	r3, #1
    271e:	9303      	str	r3, [sp, #12]
    2720:	9b03      	ldr	r3, [sp, #12]
    2722:	2b00      	cmp	r3, #0
    2724:	d1d0      	bne.n	26c8 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2726:	bf00      	nop
    2728:	bf00      	nop
    272a:	b005      	add	sp, #20
    272c:	f85d fb04 	ldr.w	pc, [sp], #4
    2730:	000107c0 	.word	0x000107c0
    2734:	00010790 	.word	0x00010790
    2738:	00010df8 	.word	0x00010df8
    273c:	00010770 	.word	0x00010770
    2740:	00010d3c 	.word	0x00010d3c
    2744:	00010780 	.word	0x00010780
    2748:	00010dcc 	.word	0x00010dcc
    274c:	00010740 	.word	0x00010740
    2750:	00010d14 	.word	0x00010d14

00002754 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2754:	b500      	push	{lr}
    2756:	b085      	sub	sp, #20
    2758:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    275a:	2301      	movs	r3, #1
    275c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    275e:	9801      	ldr	r0, [sp, #4]
    2760:	f000 f818 	bl	2794 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2764:	4b0a      	ldr	r3, [pc, #40]	; (2790 <Clock_Ip_Init+0x3c>)
    2766:	781b      	ldrb	r3, [r3, #0]
    2768:	2b00      	cmp	r3, #0
    276a:	d00a      	beq.n	2782 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    276c:	f000 fb74 	bl	2e58 <Clock_Ip_GetPllStatus>
    2770:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2772:	9b02      	ldr	r3, [sp, #8]
    2774:	2b00      	cmp	r3, #0
    2776:	d106      	bne.n	2786 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2778:	f000 fbf2 	bl	2f60 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    277c:	2300      	movs	r3, #0
    277e:	9303      	str	r3, [sp, #12]
    2780:	e001      	b.n	2786 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2782:	2300      	movs	r3, #0
    2784:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2786:	9b03      	ldr	r3, [sp, #12]
}
    2788:	4618      	mov	r0, r3
    278a:	b005      	add	sp, #20
    278c:	f85d fb04 	ldr.w	pc, [sp], #4
    2790:	1fff8b3c 	.word	0x1fff8b3c

00002794 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2794:	b510      	push	{r4, lr}
    2796:	b084      	sub	sp, #16
    2798:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    279a:	4a9f      	ldr	r2, [pc, #636]	; (2a18 <Clock_Ip_InitClock+0x284>)
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    27a0:	2101      	movs	r1, #1
    27a2:	9801      	ldr	r0, [sp, #4]
    27a4:	f003 fa90 	bl	5cc8 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    27a8:	4b9b      	ldr	r3, [pc, #620]	; (2a18 <Clock_Ip_InitClock+0x284>)
    27aa:	681b      	ldr	r3, [r3, #0]
    27ac:	2b00      	cmp	r3, #0
    27ae:	d030      	beq.n	2812 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    27b0:	2300      	movs	r3, #0
    27b2:	9303      	str	r3, [sp, #12]
    27b4:	e027      	b.n	2806 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    27b6:	9901      	ldr	r1, [sp, #4]
    27b8:	9a03      	ldr	r2, [sp, #12]
    27ba:	4613      	mov	r3, r2
    27bc:	009b      	lsls	r3, r3, #2
    27be:	4413      	add	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	440b      	add	r3, r1
    27c4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27c8:	681a      	ldr	r2, [r3, #0]
    27ca:	4994      	ldr	r1, [pc, #592]	; (2a1c <Clock_Ip_InitClock+0x288>)
    27cc:	4613      	mov	r3, r2
    27ce:	00db      	lsls	r3, r3, #3
    27d0:	4413      	add	r3, r2
    27d2:	440b      	add	r3, r1
    27d4:	3301      	adds	r3, #1
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	461a      	mov	r2, r3
    27da:	4b91      	ldr	r3, [pc, #580]	; (2a20 <Clock_Ip_InitClock+0x28c>)
    27dc:	5c9b      	ldrb	r3, [r3, r2]
    27de:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    27e0:	4a90      	ldr	r2, [pc, #576]	; (2a24 <Clock_Ip_InitClock+0x290>)
    27e2:	9b02      	ldr	r3, [sp, #8]
    27e4:	011b      	lsls	r3, r3, #4
    27e6:	4413      	add	r3, r2
    27e8:	6819      	ldr	r1, [r3, #0]
    27ea:	9a03      	ldr	r2, [sp, #12]
    27ec:	4613      	mov	r3, r2
    27ee:	009b      	lsls	r3, r3, #2
    27f0:	4413      	add	r3, r2
    27f2:	009b      	lsls	r3, r3, #2
    27f4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27f8:	9a01      	ldr	r2, [sp, #4]
    27fa:	4413      	add	r3, r2
    27fc:	4618      	mov	r0, r3
    27fe:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2800:	9b03      	ldr	r3, [sp, #12]
    2802:	3301      	adds	r3, #1
    2804:	9303      	str	r3, [sp, #12]
    2806:	9b01      	ldr	r3, [sp, #4]
    2808:	7c9b      	ldrb	r3, [r3, #18]
    280a:	461a      	mov	r2, r3
    280c:	9b03      	ldr	r3, [sp, #12]
    280e:	4293      	cmp	r3, r2
    2810:	d3d1      	bcc.n	27b6 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2812:	9801      	ldr	r0, [sp, #4]
    2814:	f7ff feca 	bl	25ac <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2818:	2300      	movs	r3, #0
    281a:	9303      	str	r3, [sp, #12]
    281c:	e029      	b.n	2872 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    281e:	9901      	ldr	r1, [sp, #4]
    2820:	9a03      	ldr	r2, [sp, #12]
    2822:	4613      	mov	r3, r2
    2824:	005b      	lsls	r3, r3, #1
    2826:	4413      	add	r3, r2
    2828:	009b      	lsls	r3, r3, #2
    282a:	440b      	add	r3, r1
    282c:	3314      	adds	r3, #20
    282e:	681a      	ldr	r2, [r3, #0]
    2830:	497a      	ldr	r1, [pc, #488]	; (2a1c <Clock_Ip_InitClock+0x288>)
    2832:	4613      	mov	r3, r2
    2834:	00db      	lsls	r3, r3, #3
    2836:	4413      	add	r3, r2
    2838:	440b      	add	r3, r1
    283a:	3301      	adds	r3, #1
    283c:	781b      	ldrb	r3, [r3, #0]
    283e:	461a      	mov	r2, r3
    2840:	4b79      	ldr	r3, [pc, #484]	; (2a28 <Clock_Ip_InitClock+0x294>)
    2842:	5c9b      	ldrb	r3, [r3, r2]
    2844:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2846:	4979      	ldr	r1, [pc, #484]	; (2a2c <Clock_Ip_InitClock+0x298>)
    2848:	9a02      	ldr	r2, [sp, #8]
    284a:	4613      	mov	r3, r2
    284c:	005b      	lsls	r3, r3, #1
    284e:	4413      	add	r3, r2
    2850:	009b      	lsls	r3, r3, #2
    2852:	440b      	add	r3, r1
    2854:	6819      	ldr	r1, [r3, #0]
    2856:	9a03      	ldr	r2, [sp, #12]
    2858:	4613      	mov	r3, r2
    285a:	005b      	lsls	r3, r3, #1
    285c:	4413      	add	r3, r2
    285e:	009b      	lsls	r3, r3, #2
    2860:	3310      	adds	r3, #16
    2862:	9a01      	ldr	r2, [sp, #4]
    2864:	4413      	add	r3, r2
    2866:	3304      	adds	r3, #4
    2868:	4618      	mov	r0, r3
    286a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    286c:	9b03      	ldr	r3, [sp, #12]
    286e:	3301      	adds	r3, #1
    2870:	9303      	str	r3, [sp, #12]
    2872:	9b01      	ldr	r3, [sp, #4]
    2874:	7a1b      	ldrb	r3, [r3, #8]
    2876:	461a      	mov	r2, r3
    2878:	9b03      	ldr	r3, [sp, #12]
    287a:	4293      	cmp	r3, r2
    287c:	d3cf      	bcc.n	281e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    287e:	2300      	movs	r3, #0
    2880:	9303      	str	r3, [sp, #12]
    2882:	e02a      	b.n	28da <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2884:	9901      	ldr	r1, [sp, #4]
    2886:	9a03      	ldr	r2, [sp, #12]
    2888:	4613      	mov	r3, r2
    288a:	009b      	lsls	r3, r3, #2
    288c:	4413      	add	r3, r2
    288e:	009b      	lsls	r3, r3, #2
    2890:	440b      	add	r3, r1
    2892:	332c      	adds	r3, #44	; 0x2c
    2894:	681a      	ldr	r2, [r3, #0]
    2896:	4961      	ldr	r1, [pc, #388]	; (2a1c <Clock_Ip_InitClock+0x288>)
    2898:	4613      	mov	r3, r2
    289a:	00db      	lsls	r3, r3, #3
    289c:	4413      	add	r3, r2
    289e:	440b      	add	r3, r1
    28a0:	3301      	adds	r3, #1
    28a2:	781b      	ldrb	r3, [r3, #0]
    28a4:	461a      	mov	r2, r3
    28a6:	4b62      	ldr	r3, [pc, #392]	; (2a30 <Clock_Ip_InitClock+0x29c>)
    28a8:	5c9b      	ldrb	r3, [r3, r2]
    28aa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    28ac:	4961      	ldr	r1, [pc, #388]	; (2a34 <Clock_Ip_InitClock+0x2a0>)
    28ae:	9a02      	ldr	r2, [sp, #8]
    28b0:	4613      	mov	r3, r2
    28b2:	009b      	lsls	r3, r3, #2
    28b4:	4413      	add	r3, r2
    28b6:	009b      	lsls	r3, r3, #2
    28b8:	440b      	add	r3, r1
    28ba:	3304      	adds	r3, #4
    28bc:	6819      	ldr	r1, [r3, #0]
    28be:	9a03      	ldr	r2, [sp, #12]
    28c0:	4613      	mov	r3, r2
    28c2:	009b      	lsls	r3, r3, #2
    28c4:	4413      	add	r3, r2
    28c6:	009b      	lsls	r3, r3, #2
    28c8:	3328      	adds	r3, #40	; 0x28
    28ca:	9a01      	ldr	r2, [sp, #4]
    28cc:	4413      	add	r3, r2
    28ce:	3304      	adds	r3, #4
    28d0:	4618      	mov	r0, r3
    28d2:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    28d4:	9b03      	ldr	r3, [sp, #12]
    28d6:	3301      	adds	r3, #1
    28d8:	9303      	str	r3, [sp, #12]
    28da:	9b01      	ldr	r3, [sp, #4]
    28dc:	7a5b      	ldrb	r3, [r3, #9]
    28de:	461a      	mov	r2, r3
    28e0:	9b03      	ldr	r3, [sp, #12]
    28e2:	4293      	cmp	r3, r2
    28e4:	d3ce      	bcc.n	2884 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    28e6:	9801      	ldr	r0, [sp, #4]
    28e8:	f7ff fdb0 	bl	244c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    28ec:	2300      	movs	r3, #0
    28ee:	9303      	str	r3, [sp, #12]
    28f0:	e028      	b.n	2944 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    28f2:	9901      	ldr	r1, [sp, #4]
    28f4:	9a03      	ldr	r2, [sp, #12]
    28f6:	4613      	mov	r3, r2
    28f8:	009b      	lsls	r3, r3, #2
    28fa:	4413      	add	r3, r2
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	440b      	add	r3, r1
    2900:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2904:	681a      	ldr	r2, [r3, #0]
    2906:	4945      	ldr	r1, [pc, #276]	; (2a1c <Clock_Ip_InitClock+0x288>)
    2908:	4613      	mov	r3, r2
    290a:	00db      	lsls	r3, r3, #3
    290c:	4413      	add	r3, r2
    290e:	440b      	add	r3, r1
    2910:	3301      	adds	r3, #1
    2912:	781b      	ldrb	r3, [r3, #0]
    2914:	461a      	mov	r2, r3
    2916:	4b48      	ldr	r3, [pc, #288]	; (2a38 <Clock_Ip_InitClock+0x2a4>)
    2918:	5c9b      	ldrb	r3, [r3, r2]
    291a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    291c:	4a47      	ldr	r2, [pc, #284]	; (2a3c <Clock_Ip_InitClock+0x2a8>)
    291e:	9b02      	ldr	r3, [sp, #8]
    2920:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2924:	9a03      	ldr	r2, [sp, #12]
    2926:	4613      	mov	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	4413      	add	r3, r2
    292c:	009b      	lsls	r3, r3, #2
    292e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2932:	9a01      	ldr	r2, [sp, #4]
    2934:	4413      	add	r3, r2
    2936:	3304      	adds	r3, #4
    2938:	9903      	ldr	r1, [sp, #12]
    293a:	4618      	mov	r0, r3
    293c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    293e:	9b03      	ldr	r3, [sp, #12]
    2940:	3301      	adds	r3, #1
    2942:	9303      	str	r3, [sp, #12]
    2944:	9b01      	ldr	r3, [sp, #4]
    2946:	7c5b      	ldrb	r3, [r3, #17]
    2948:	461a      	mov	r2, r3
    294a:	9b03      	ldr	r3, [sp, #12]
    294c:	4293      	cmp	r3, r2
    294e:	d3d0      	bcc.n	28f2 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2950:	2300      	movs	r3, #0
    2952:	9303      	str	r3, [sp, #12]
    2954:	e026      	b.n	29a4 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2956:	9901      	ldr	r1, [sp, #4]
    2958:	9a03      	ldr	r2, [sp, #12]
    295a:	4613      	mov	r3, r2
    295c:	005b      	lsls	r3, r3, #1
    295e:	4413      	add	r3, r2
    2960:	009b      	lsls	r3, r3, #2
    2962:	440b      	add	r3, r1
    2964:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2968:	681a      	ldr	r2, [r3, #0]
    296a:	492c      	ldr	r1, [pc, #176]	; (2a1c <Clock_Ip_InitClock+0x288>)
    296c:	4613      	mov	r3, r2
    296e:	00db      	lsls	r3, r3, #3
    2970:	4413      	add	r3, r2
    2972:	440b      	add	r3, r1
    2974:	3301      	adds	r3, #1
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	461a      	mov	r2, r3
    297a:	4b31      	ldr	r3, [pc, #196]	; (2a40 <Clock_Ip_InitClock+0x2ac>)
    297c:	5c9b      	ldrb	r3, [r3, r2]
    297e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2980:	4a30      	ldr	r2, [pc, #192]	; (2a44 <Clock_Ip_InitClock+0x2b0>)
    2982:	9b02      	ldr	r3, [sp, #8]
    2984:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2988:	9a03      	ldr	r2, [sp, #12]
    298a:	4613      	mov	r3, r2
    298c:	005b      	lsls	r3, r3, #1
    298e:	4413      	add	r3, r2
    2990:	009b      	lsls	r3, r3, #2
    2992:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2996:	9a01      	ldr	r2, [sp, #4]
    2998:	4413      	add	r3, r2
    299a:	4618      	mov	r0, r3
    299c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    299e:	9b03      	ldr	r3, [sp, #12]
    29a0:	3301      	adds	r3, #1
    29a2:	9303      	str	r3, [sp, #12]
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	7b5b      	ldrb	r3, [r3, #13]
    29a8:	461a      	mov	r2, r3
    29aa:	9b03      	ldr	r3, [sp, #12]
    29ac:	4293      	cmp	r3, r2
    29ae:	d3d2      	bcc.n	2956 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    29b0:	2300      	movs	r3, #0
    29b2:	9303      	str	r3, [sp, #12]
    29b4:	e026      	b.n	2a04 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    29b6:	9901      	ldr	r1, [sp, #4]
    29b8:	9a03      	ldr	r2, [sp, #12]
    29ba:	4613      	mov	r3, r2
    29bc:	005b      	lsls	r3, r3, #1
    29be:	4413      	add	r3, r2
    29c0:	009b      	lsls	r3, r3, #2
    29c2:	440b      	add	r3, r1
    29c4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    29c8:	681a      	ldr	r2, [r3, #0]
    29ca:	4914      	ldr	r1, [pc, #80]	; (2a1c <Clock_Ip_InitClock+0x288>)
    29cc:	4613      	mov	r3, r2
    29ce:	00db      	lsls	r3, r3, #3
    29d0:	4413      	add	r3, r2
    29d2:	440b      	add	r3, r1
    29d4:	3301      	adds	r3, #1
    29d6:	781b      	ldrb	r3, [r3, #0]
    29d8:	461a      	mov	r2, r3
    29da:	4b1b      	ldr	r3, [pc, #108]	; (2a48 <Clock_Ip_InitClock+0x2b4>)
    29dc:	5c9b      	ldrb	r3, [r3, r2]
    29de:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    29e0:	4a1a      	ldr	r2, [pc, #104]	; (2a4c <Clock_Ip_InitClock+0x2b8>)
    29e2:	9b02      	ldr	r3, [sp, #8]
    29e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    29e8:	9a03      	ldr	r2, [sp, #12]
    29ea:	4613      	mov	r3, r2
    29ec:	005b      	lsls	r3, r3, #1
    29ee:	4413      	add	r3, r2
    29f0:	009b      	lsls	r3, r3, #2
    29f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    29f6:	9a01      	ldr	r2, [sp, #4]
    29f8:	4413      	add	r3, r2
    29fa:	4618      	mov	r0, r3
    29fc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    29fe:	9b03      	ldr	r3, [sp, #12]
    2a00:	3301      	adds	r3, #1
    2a02:	9303      	str	r3, [sp, #12]
    2a04:	9b01      	ldr	r3, [sp, #4]
    2a06:	7b1b      	ldrb	r3, [r3, #12]
    2a08:	461a      	mov	r2, r3
    2a0a:	9b03      	ldr	r3, [sp, #12]
    2a0c:	4293      	cmp	r3, r2
    2a0e:	d3d2      	bcc.n	29b6 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2a10:	2300      	movs	r3, #0
    2a12:	9303      	str	r3, [sp, #12]
    2a14:	e044      	b.n	2aa0 <Clock_Ip_InitClock+0x30c>
    2a16:	bf00      	nop
    2a18:	1fff8b34 	.word	0x1fff8b34
    2a1c:	000107c0 	.word	0x000107c0
    2a20:	000107b0 	.word	0x000107b0
    2a24:	00010dbc 	.word	0x00010dbc
    2a28:	00010750 	.word	0x00010750
    2a2c:	00010d80 	.word	0x00010d80
    2a30:	00010740 	.word	0x00010740
    2a34:	00010d14 	.word	0x00010d14
    2a38:	000107a0 	.word	0x000107a0
    2a3c:	00010df4 	.word	0x00010df4
    2a40:	00010730 	.word	0x00010730
    2a44:	00010d0c 	.word	0x00010d0c
    2a48:	00010720 	.word	0x00010720
    2a4c:	00010cd0 	.word	0x00010cd0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2a50:	9901      	ldr	r1, [sp, #4]
    2a52:	9a03      	ldr	r2, [sp, #12]
    2a54:	4613      	mov	r3, r2
    2a56:	005b      	lsls	r3, r3, #1
    2a58:	4413      	add	r3, r2
    2a5a:	009b      	lsls	r3, r3, #2
    2a5c:	440b      	add	r3, r1
    2a5e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2a62:	681a      	ldr	r2, [r3, #0]
    2a64:	49ac      	ldr	r1, [pc, #688]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2a66:	4613      	mov	r3, r2
    2a68:	00db      	lsls	r3, r3, #3
    2a6a:	4413      	add	r3, r2
    2a6c:	440b      	add	r3, r1
    2a6e:	3301      	adds	r3, #1
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	461a      	mov	r2, r3
    2a74:	4ba9      	ldr	r3, [pc, #676]	; (2d1c <Clock_Ip_InitClock+0x588>)
    2a76:	5c9b      	ldrb	r3, [r3, r2]
    2a78:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2a7a:	4aa9      	ldr	r2, [pc, #676]	; (2d20 <Clock_Ip_InitClock+0x58c>)
    2a7c:	9b02      	ldr	r3, [sp, #8]
    2a7e:	00db      	lsls	r3, r3, #3
    2a80:	4413      	add	r3, r2
    2a82:	6859      	ldr	r1, [r3, #4]
    2a84:	9a03      	ldr	r2, [sp, #12]
    2a86:	4613      	mov	r3, r2
    2a88:	005b      	lsls	r3, r3, #1
    2a8a:	4413      	add	r3, r2
    2a8c:	009b      	lsls	r3, r3, #2
    2a8e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2a92:	9a01      	ldr	r2, [sp, #4]
    2a94:	4413      	add	r3, r2
    2a96:	4618      	mov	r0, r3
    2a98:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2a9a:	9b03      	ldr	r3, [sp, #12]
    2a9c:	3301      	adds	r3, #1
    2a9e:	9303      	str	r3, [sp, #12]
    2aa0:	9b01      	ldr	r3, [sp, #4]
    2aa2:	7b5b      	ldrb	r3, [r3, #13]
    2aa4:	461a      	mov	r2, r3
    2aa6:	9b03      	ldr	r3, [sp, #12]
    2aa8:	4293      	cmp	r3, r2
    2aaa:	d3d1      	bcc.n	2a50 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2aac:	2300      	movs	r3, #0
    2aae:	9303      	str	r3, [sp, #12]
    2ab0:	e029      	b.n	2b06 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2ab2:	9901      	ldr	r1, [sp, #4]
    2ab4:	9a03      	ldr	r2, [sp, #12]
    2ab6:	4613      	mov	r3, r2
    2ab8:	009b      	lsls	r3, r3, #2
    2aba:	4413      	add	r3, r2
    2abc:	00db      	lsls	r3, r3, #3
    2abe:	440b      	add	r3, r1
    2ac0:	3340      	adds	r3, #64	; 0x40
    2ac2:	681a      	ldr	r2, [r3, #0]
    2ac4:	4994      	ldr	r1, [pc, #592]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2ac6:	4613      	mov	r3, r2
    2ac8:	00db      	lsls	r3, r3, #3
    2aca:	4413      	add	r3, r2
    2acc:	440b      	add	r3, r1
    2ace:	3301      	adds	r3, #1
    2ad0:	781b      	ldrb	r3, [r3, #0]
    2ad2:	461a      	mov	r2, r3
    2ad4:	4b93      	ldr	r3, [pc, #588]	; (2d24 <Clock_Ip_InitClock+0x590>)
    2ad6:	5c9b      	ldrb	r3, [r3, r2]
    2ad8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2ada:	4993      	ldr	r1, [pc, #588]	; (2d28 <Clock_Ip_InitClock+0x594>)
    2adc:	9a02      	ldr	r2, [sp, #8]
    2ade:	4613      	mov	r3, r2
    2ae0:	009b      	lsls	r3, r3, #2
    2ae2:	4413      	add	r3, r2
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	440b      	add	r3, r1
    2ae8:	3304      	adds	r3, #4
    2aea:	6819      	ldr	r1, [r3, #0]
    2aec:	9a03      	ldr	r2, [sp, #12]
    2aee:	4613      	mov	r3, r2
    2af0:	009b      	lsls	r3, r3, #2
    2af2:	4413      	add	r3, r2
    2af4:	00db      	lsls	r3, r3, #3
    2af6:	3340      	adds	r3, #64	; 0x40
    2af8:	9a01      	ldr	r2, [sp, #4]
    2afa:	4413      	add	r3, r2
    2afc:	4618      	mov	r0, r3
    2afe:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2b00:	9b03      	ldr	r3, [sp, #12]
    2b02:	3301      	adds	r3, #1
    2b04:	9303      	str	r3, [sp, #12]
    2b06:	9b01      	ldr	r3, [sp, #4]
    2b08:	7a9b      	ldrb	r3, [r3, #10]
    2b0a:	461a      	mov	r2, r3
    2b0c:	9b03      	ldr	r3, [sp, #12]
    2b0e:	4293      	cmp	r3, r2
    2b10:	d3cf      	bcc.n	2ab2 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2b12:	2300      	movs	r3, #0
    2b14:	9303      	str	r3, [sp, #12]
    2b16:	e029      	b.n	2b6c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2b18:	9901      	ldr	r1, [sp, #4]
    2b1a:	9a03      	ldr	r2, [sp, #12]
    2b1c:	4613      	mov	r3, r2
    2b1e:	009b      	lsls	r3, r3, #2
    2b20:	4413      	add	r3, r2
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	440b      	add	r3, r1
    2b26:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b2a:	681a      	ldr	r2, [r3, #0]
    2b2c:	497a      	ldr	r1, [pc, #488]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2b2e:	4613      	mov	r3, r2
    2b30:	00db      	lsls	r3, r3, #3
    2b32:	4413      	add	r3, r2
    2b34:	440b      	add	r3, r1
    2b36:	3301      	adds	r3, #1
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	461a      	mov	r2, r3
    2b3c:	4b7b      	ldr	r3, [pc, #492]	; (2d2c <Clock_Ip_InitClock+0x598>)
    2b3e:	5c9b      	ldrb	r3, [r3, r2]
    2b40:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2b42:	4a7b      	ldr	r2, [pc, #492]	; (2d30 <Clock_Ip_InitClock+0x59c>)
    2b44:	9b02      	ldr	r3, [sp, #8]
    2b46:	011b      	lsls	r3, r3, #4
    2b48:	4413      	add	r3, r2
    2b4a:	3304      	adds	r3, #4
    2b4c:	681c      	ldr	r4, [r3, #0]
    2b4e:	9a03      	ldr	r2, [sp, #12]
    2b50:	4613      	mov	r3, r2
    2b52:	009b      	lsls	r3, r3, #2
    2b54:	4413      	add	r3, r2
    2b56:	009b      	lsls	r3, r3, #2
    2b58:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b5c:	9a01      	ldr	r2, [sp, #4]
    2b5e:	4413      	add	r3, r2
    2b60:	9903      	ldr	r1, [sp, #12]
    2b62:	4618      	mov	r0, r3
    2b64:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2b66:	9b03      	ldr	r3, [sp, #12]
    2b68:	3301      	adds	r3, #1
    2b6a:	9303      	str	r3, [sp, #12]
    2b6c:	9b01      	ldr	r3, [sp, #4]
    2b6e:	7c9b      	ldrb	r3, [r3, #18]
    2b70:	461a      	mov	r2, r3
    2b72:	9b03      	ldr	r3, [sp, #12]
    2b74:	4293      	cmp	r3, r2
    2b76:	d3cf      	bcc.n	2b18 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2b78:	2300      	movs	r3, #0
    2b7a:	9303      	str	r3, [sp, #12]
    2b7c:	e02a      	b.n	2bd4 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2b7e:	9901      	ldr	r1, [sp, #4]
    2b80:	9a03      	ldr	r2, [sp, #12]
    2b82:	4613      	mov	r3, r2
    2b84:	009b      	lsls	r3, r3, #2
    2b86:	4413      	add	r3, r2
    2b88:	009b      	lsls	r3, r3, #2
    2b8a:	440b      	add	r3, r1
    2b8c:	332c      	adds	r3, #44	; 0x2c
    2b8e:	681a      	ldr	r2, [r3, #0]
    2b90:	4961      	ldr	r1, [pc, #388]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2b92:	4613      	mov	r3, r2
    2b94:	00db      	lsls	r3, r3, #3
    2b96:	4413      	add	r3, r2
    2b98:	440b      	add	r3, r1
    2b9a:	3301      	adds	r3, #1
    2b9c:	781b      	ldrb	r3, [r3, #0]
    2b9e:	461a      	mov	r2, r3
    2ba0:	4b64      	ldr	r3, [pc, #400]	; (2d34 <Clock_Ip_InitClock+0x5a0>)
    2ba2:	5c9b      	ldrb	r3, [r3, r2]
    2ba4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2ba6:	4964      	ldr	r1, [pc, #400]	; (2d38 <Clock_Ip_InitClock+0x5a4>)
    2ba8:	9a02      	ldr	r2, [sp, #8]
    2baa:	4613      	mov	r3, r2
    2bac:	009b      	lsls	r3, r3, #2
    2bae:	4413      	add	r3, r2
    2bb0:	009b      	lsls	r3, r3, #2
    2bb2:	440b      	add	r3, r1
    2bb4:	3308      	adds	r3, #8
    2bb6:	6819      	ldr	r1, [r3, #0]
    2bb8:	9a03      	ldr	r2, [sp, #12]
    2bba:	4613      	mov	r3, r2
    2bbc:	009b      	lsls	r3, r3, #2
    2bbe:	4413      	add	r3, r2
    2bc0:	009b      	lsls	r3, r3, #2
    2bc2:	3328      	adds	r3, #40	; 0x28
    2bc4:	9a01      	ldr	r2, [sp, #4]
    2bc6:	4413      	add	r3, r2
    2bc8:	3304      	adds	r3, #4
    2bca:	4618      	mov	r0, r3
    2bcc:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2bce:	9b03      	ldr	r3, [sp, #12]
    2bd0:	3301      	adds	r3, #1
    2bd2:	9303      	str	r3, [sp, #12]
    2bd4:	9b01      	ldr	r3, [sp, #4]
    2bd6:	7a5b      	ldrb	r3, [r3, #9]
    2bd8:	461a      	mov	r2, r3
    2bda:	9b03      	ldr	r3, [sp, #12]
    2bdc:	4293      	cmp	r3, r2
    2bde:	d3ce      	bcc.n	2b7e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2be0:	2300      	movs	r3, #0
    2be2:	9303      	str	r3, [sp, #12]
    2be4:	e029      	b.n	2c3a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2be6:	9901      	ldr	r1, [sp, #4]
    2be8:	9a03      	ldr	r2, [sp, #12]
    2bea:	4613      	mov	r3, r2
    2bec:	009b      	lsls	r3, r3, #2
    2bee:	4413      	add	r3, r2
    2bf0:	00db      	lsls	r3, r3, #3
    2bf2:	440b      	add	r3, r1
    2bf4:	3340      	adds	r3, #64	; 0x40
    2bf6:	681a      	ldr	r2, [r3, #0]
    2bf8:	4947      	ldr	r1, [pc, #284]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2bfa:	4613      	mov	r3, r2
    2bfc:	00db      	lsls	r3, r3, #3
    2bfe:	4413      	add	r3, r2
    2c00:	440b      	add	r3, r1
    2c02:	3301      	adds	r3, #1
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	461a      	mov	r2, r3
    2c08:	4b46      	ldr	r3, [pc, #280]	; (2d24 <Clock_Ip_InitClock+0x590>)
    2c0a:	5c9b      	ldrb	r3, [r3, r2]
    2c0c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2c0e:	4946      	ldr	r1, [pc, #280]	; (2d28 <Clock_Ip_InitClock+0x594>)
    2c10:	9a02      	ldr	r2, [sp, #8]
    2c12:	4613      	mov	r3, r2
    2c14:	009b      	lsls	r3, r3, #2
    2c16:	4413      	add	r3, r2
    2c18:	009b      	lsls	r3, r3, #2
    2c1a:	440b      	add	r3, r1
    2c1c:	330c      	adds	r3, #12
    2c1e:	6819      	ldr	r1, [r3, #0]
    2c20:	9a03      	ldr	r2, [sp, #12]
    2c22:	4613      	mov	r3, r2
    2c24:	009b      	lsls	r3, r3, #2
    2c26:	4413      	add	r3, r2
    2c28:	00db      	lsls	r3, r3, #3
    2c2a:	3340      	adds	r3, #64	; 0x40
    2c2c:	9a01      	ldr	r2, [sp, #4]
    2c2e:	4413      	add	r3, r2
    2c30:	4618      	mov	r0, r3
    2c32:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2c34:	9b03      	ldr	r3, [sp, #12]
    2c36:	3301      	adds	r3, #1
    2c38:	9303      	str	r3, [sp, #12]
    2c3a:	9b01      	ldr	r3, [sp, #4]
    2c3c:	7a9b      	ldrb	r3, [r3, #10]
    2c3e:	461a      	mov	r2, r3
    2c40:	9b03      	ldr	r3, [sp, #12]
    2c42:	4293      	cmp	r3, r2
    2c44:	d3cf      	bcc.n	2be6 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2c46:	2300      	movs	r3, #0
    2c48:	9303      	str	r3, [sp, #12]
    2c4a:	e025      	b.n	2c98 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2c4c:	9a01      	ldr	r2, [sp, #4]
    2c4e:	9b03      	ldr	r3, [sp, #12]
    2c50:	3324      	adds	r3, #36	; 0x24
    2c52:	011b      	lsls	r3, r3, #4
    2c54:	4413      	add	r3, r2
    2c56:	3304      	adds	r3, #4
    2c58:	681a      	ldr	r2, [r3, #0]
    2c5a:	492f      	ldr	r1, [pc, #188]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2c5c:	4613      	mov	r3, r2
    2c5e:	00db      	lsls	r3, r3, #3
    2c60:	4413      	add	r3, r2
    2c62:	440b      	add	r3, r1
    2c64:	3301      	adds	r3, #1
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	461a      	mov	r2, r3
    2c6a:	4b34      	ldr	r3, [pc, #208]	; (2d3c <Clock_Ip_InitClock+0x5a8>)
    2c6c:	5c9b      	ldrb	r3, [r3, r2]
    2c6e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2c70:	4933      	ldr	r1, [pc, #204]	; (2d40 <Clock_Ip_InitClock+0x5ac>)
    2c72:	9a02      	ldr	r2, [sp, #8]
    2c74:	4613      	mov	r3, r2
    2c76:	005b      	lsls	r3, r3, #1
    2c78:	4413      	add	r3, r2
    2c7a:	009b      	lsls	r3, r3, #2
    2c7c:	440b      	add	r3, r1
    2c7e:	3304      	adds	r3, #4
    2c80:	681b      	ldr	r3, [r3, #0]
    2c82:	9a03      	ldr	r2, [sp, #12]
    2c84:	3224      	adds	r2, #36	; 0x24
    2c86:	0112      	lsls	r2, r2, #4
    2c88:	9901      	ldr	r1, [sp, #4]
    2c8a:	440a      	add	r2, r1
    2c8c:	3204      	adds	r2, #4
    2c8e:	4610      	mov	r0, r2
    2c90:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2c92:	9b03      	ldr	r3, [sp, #12]
    2c94:	3301      	adds	r3, #1
    2c96:	9303      	str	r3, [sp, #12]
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	7b9b      	ldrb	r3, [r3, #14]
    2c9c:	461a      	mov	r2, r3
    2c9e:	9b03      	ldr	r3, [sp, #12]
    2ca0:	4293      	cmp	r3, r2
    2ca2:	d3d3      	bcc.n	2c4c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2ca4:	4b27      	ldr	r3, [pc, #156]	; (2d44 <Clock_Ip_InitClock+0x5b0>)
    2ca6:	2200      	movs	r2, #0
    2ca8:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2caa:	4b26      	ldr	r3, [pc, #152]	; (2d44 <Clock_Ip_InitClock+0x5b0>)
    2cac:	2200      	movs	r2, #0
    2cae:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2cb0:	4b24      	ldr	r3, [pc, #144]	; (2d44 <Clock_Ip_InitClock+0x5b0>)
    2cb2:	2201      	movs	r2, #1
    2cb4:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2cb6:	4b23      	ldr	r3, [pc, #140]	; (2d44 <Clock_Ip_InitClock+0x5b0>)
    2cb8:	2200      	movs	r2, #0
    2cba:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2cbc:	f000 fa9c 	bl	31f8 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2cc0:	2300      	movs	r3, #0
    2cc2:	9303      	str	r3, [sp, #12]
    2cc4:	e04c      	b.n	2d60 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2cc6:	9a01      	ldr	r2, [sp, #4]
    2cc8:	9b03      	ldr	r3, [sp, #12]
    2cca:	330d      	adds	r3, #13
    2ccc:	00db      	lsls	r3, r3, #3
    2cce:	4413      	add	r3, r2
    2cd0:	685b      	ldr	r3, [r3, #4]
    2cd2:	4a1d      	ldr	r2, [pc, #116]	; (2d48 <Clock_Ip_InitClock+0x5b4>)
    2cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cd8:	2b03      	cmp	r3, #3
    2cda:	d03b      	beq.n	2d54 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2cdc:	9b01      	ldr	r3, [sp, #4]
    2cde:	9a03      	ldr	r2, [sp, #12]
    2ce0:	320d      	adds	r2, #13
    2ce2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2ce6:	490c      	ldr	r1, [pc, #48]	; (2d18 <Clock_Ip_InitClock+0x584>)
    2ce8:	4613      	mov	r3, r2
    2cea:	00db      	lsls	r3, r3, #3
    2cec:	4413      	add	r3, r2
    2cee:	440b      	add	r3, r1
    2cf0:	3301      	adds	r3, #1
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	461a      	mov	r2, r3
    2cf6:	4b15      	ldr	r3, [pc, #84]	; (2d4c <Clock_Ip_InitClock+0x5b8>)
    2cf8:	5c9b      	ldrb	r3, [r3, r2]
    2cfa:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2cfc:	4a14      	ldr	r2, [pc, #80]	; (2d50 <Clock_Ip_InitClock+0x5bc>)
    2cfe:	9b02      	ldr	r3, [sp, #8]
    2d00:	00db      	lsls	r3, r3, #3
    2d02:	4413      	add	r3, r2
    2d04:	685b      	ldr	r3, [r3, #4]
    2d06:	9a03      	ldr	r2, [sp, #12]
    2d08:	320d      	adds	r2, #13
    2d0a:	00d2      	lsls	r2, r2, #3
    2d0c:	9901      	ldr	r1, [sp, #4]
    2d0e:	440a      	add	r2, r1
    2d10:	4610      	mov	r0, r2
    2d12:	4798      	blx	r3
    2d14:	e021      	b.n	2d5a <Clock_Ip_InitClock+0x5c6>
    2d16:	bf00      	nop
    2d18:	000107c0 	.word	0x000107c0
    2d1c:	00010730 	.word	0x00010730
    2d20:	00010d0c 	.word	0x00010d0c
    2d24:	00010780 	.word	0x00010780
    2d28:	00010dcc 	.word	0x00010dcc
    2d2c:	000107b0 	.word	0x000107b0
    2d30:	00010dbc 	.word	0x00010dbc
    2d34:	00010740 	.word	0x00010740
    2d38:	00010d14 	.word	0x00010d14
    2d3c:	00010770 	.word	0x00010770
    2d40:	00010d3c 	.word	0x00010d3c
    2d44:	1fff8b3c 	.word	0x1fff8b3c
    2d48:	00010c0c 	.word	0x00010c0c
    2d4c:	00010790 	.word	0x00010790
    2d50:	00010df8 	.word	0x00010df8
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2d54:	4b3a      	ldr	r3, [pc, #232]	; (2e40 <Clock_Ip_InitClock+0x6ac>)
    2d56:	2201      	movs	r2, #1
    2d58:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2d5a:	9b03      	ldr	r3, [sp, #12]
    2d5c:	3301      	adds	r3, #1
    2d5e:	9303      	str	r3, [sp, #12]
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	7adb      	ldrb	r3, [r3, #11]
    2d64:	461a      	mov	r2, r3
    2d66:	9b03      	ldr	r3, [sp, #12]
    2d68:	4293      	cmp	r3, r2
    2d6a:	d3ac      	bcc.n	2cc6 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2d6c:	4b34      	ldr	r3, [pc, #208]	; (2e40 <Clock_Ip_InitClock+0x6ac>)
    2d6e:	781b      	ldrb	r3, [r3, #0]
    2d70:	f083 0301 	eor.w	r3, r3, #1
    2d74:	b2db      	uxtb	r3, r3
    2d76:	2b00      	cmp	r3, #0
    2d78:	d05e      	beq.n	2e38 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d7a:	2300      	movs	r3, #0
    2d7c:	9303      	str	r3, [sp, #12]
    2d7e:	e01f      	b.n	2dc0 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2d80:	9a01      	ldr	r2, [sp, #4]
    2d82:	9b03      	ldr	r3, [sp, #12]
    2d84:	334e      	adds	r3, #78	; 0x4e
    2d86:	00db      	lsls	r3, r3, #3
    2d88:	4413      	add	r3, r2
    2d8a:	685a      	ldr	r2, [r3, #4]
    2d8c:	492d      	ldr	r1, [pc, #180]	; (2e44 <Clock_Ip_InitClock+0x6b0>)
    2d8e:	4613      	mov	r3, r2
    2d90:	00db      	lsls	r3, r3, #3
    2d92:	4413      	add	r3, r2
    2d94:	440b      	add	r3, r1
    2d96:	3301      	adds	r3, #1
    2d98:	781b      	ldrb	r3, [r3, #0]
    2d9a:	461a      	mov	r2, r3
    2d9c:	4b2a      	ldr	r3, [pc, #168]	; (2e48 <Clock_Ip_InitClock+0x6b4>)
    2d9e:	5c9b      	ldrb	r3, [r3, r2]
    2da0:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2da2:	4a2a      	ldr	r2, [pc, #168]	; (2e4c <Clock_Ip_InitClock+0x6b8>)
    2da4:	9b02      	ldr	r3, [sp, #8]
    2da6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2daa:	9a03      	ldr	r2, [sp, #12]
    2dac:	324e      	adds	r2, #78	; 0x4e
    2dae:	00d2      	lsls	r2, r2, #3
    2db0:	9901      	ldr	r1, [sp, #4]
    2db2:	440a      	add	r2, r1
    2db4:	3204      	adds	r2, #4
    2db6:	4610      	mov	r0, r2
    2db8:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2dba:	9b03      	ldr	r3, [sp, #12]
    2dbc:	3301      	adds	r3, #1
    2dbe:	9303      	str	r3, [sp, #12]
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	7c1b      	ldrb	r3, [r3, #16]
    2dc4:	461a      	mov	r2, r3
    2dc6:	9b03      	ldr	r3, [sp, #12]
    2dc8:	4293      	cmp	r3, r2
    2dca:	d3d9      	bcc.n	2d80 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2dcc:	2300      	movs	r3, #0
    2dce:	9303      	str	r3, [sp, #12]
    2dd0:	e028      	b.n	2e24 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2dd2:	9901      	ldr	r1, [sp, #4]
    2dd4:	9a03      	ldr	r2, [sp, #12]
    2dd6:	4613      	mov	r3, r2
    2dd8:	009b      	lsls	r3, r3, #2
    2dda:	4413      	add	r3, r2
    2ddc:	009b      	lsls	r3, r3, #2
    2dde:	440b      	add	r3, r1
    2de0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2de4:	681a      	ldr	r2, [r3, #0]
    2de6:	4917      	ldr	r1, [pc, #92]	; (2e44 <Clock_Ip_InitClock+0x6b0>)
    2de8:	4613      	mov	r3, r2
    2dea:	00db      	lsls	r3, r3, #3
    2dec:	4413      	add	r3, r2
    2dee:	440b      	add	r3, r1
    2df0:	3301      	adds	r3, #1
    2df2:	781b      	ldrb	r3, [r3, #0]
    2df4:	461a      	mov	r2, r3
    2df6:	4b16      	ldr	r3, [pc, #88]	; (2e50 <Clock_Ip_InitClock+0x6bc>)
    2df8:	5c9b      	ldrb	r3, [r3, r2]
    2dfa:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2dfc:	4a15      	ldr	r2, [pc, #84]	; (2e54 <Clock_Ip_InitClock+0x6c0>)
    2dfe:	9b02      	ldr	r3, [sp, #8]
    2e00:	011b      	lsls	r3, r3, #4
    2e02:	4413      	add	r3, r2
    2e04:	330c      	adds	r3, #12
    2e06:	6819      	ldr	r1, [r3, #0]
    2e08:	9a03      	ldr	r2, [sp, #12]
    2e0a:	4613      	mov	r3, r2
    2e0c:	009b      	lsls	r3, r3, #2
    2e0e:	4413      	add	r3, r2
    2e10:	009b      	lsls	r3, r3, #2
    2e12:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2e16:	9a01      	ldr	r2, [sp, #4]
    2e18:	4413      	add	r3, r2
    2e1a:	4618      	mov	r0, r3
    2e1c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2e1e:	9b03      	ldr	r3, [sp, #12]
    2e20:	3301      	adds	r3, #1
    2e22:	9303      	str	r3, [sp, #12]
    2e24:	9b01      	ldr	r3, [sp, #4]
    2e26:	7c9b      	ldrb	r3, [r3, #18]
    2e28:	461a      	mov	r2, r3
    2e2a:	9b03      	ldr	r3, [sp, #12]
    2e2c:	4293      	cmp	r3, r2
    2e2e:	d3d0      	bcc.n	2dd2 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2e30:	2104      	movs	r1, #4
    2e32:	9801      	ldr	r0, [sp, #4]
    2e34:	f002 ff48 	bl	5cc8 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2e38:	bf00      	nop
    2e3a:	b004      	add	sp, #16
    2e3c:	bd10      	pop	{r4, pc}
    2e3e:	bf00      	nop
    2e40:	1fff8b3c 	.word	0x1fff8b3c
    2e44:	000107c0 	.word	0x000107c0
    2e48:	00010760 	.word	0x00010760
    2e4c:	00010d48 	.word	0x00010d48
    2e50:	000107b0 	.word	0x000107b0
    2e54:	00010dbc 	.word	0x00010dbc

00002e58 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2e58:	b500      	push	{lr}
    2e5a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2e5c:	2302      	movs	r3, #2
    2e5e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2e60:	2300      	movs	r3, #0
    2e62:	9304      	str	r3, [sp, #16]
    2e64:	e02c      	b.n	2ec0 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2e66:	4a36      	ldr	r2, [pc, #216]	; (2f40 <Clock_Ip_GetPllStatus+0xe8>)
    2e68:	9b04      	ldr	r3, [sp, #16]
    2e6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2e6e:	4935      	ldr	r1, [pc, #212]	; (2f44 <Clock_Ip_GetPllStatus+0xec>)
    2e70:	4613      	mov	r3, r2
    2e72:	00db      	lsls	r3, r3, #3
    2e74:	4413      	add	r3, r2
    2e76:	440b      	add	r3, r1
    2e78:	3301      	adds	r3, #1
    2e7a:	781b      	ldrb	r3, [r3, #0]
    2e7c:	461a      	mov	r2, r3
    2e7e:	4b32      	ldr	r3, [pc, #200]	; (2f48 <Clock_Ip_GetPllStatus+0xf0>)
    2e80:	5c9b      	ldrb	r3, [r3, r2]
    2e82:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2e84:	4931      	ldr	r1, [pc, #196]	; (2f4c <Clock_Ip_GetPllStatus+0xf4>)
    2e86:	9a03      	ldr	r2, [sp, #12]
    2e88:	4613      	mov	r3, r2
    2e8a:	009b      	lsls	r3, r3, #2
    2e8c:	4413      	add	r3, r2
    2e8e:	009b      	lsls	r3, r3, #2
    2e90:	440b      	add	r3, r1
    2e92:	3308      	adds	r3, #8
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	492a      	ldr	r1, [pc, #168]	; (2f40 <Clock_Ip_GetPllStatus+0xe8>)
    2e98:	9a04      	ldr	r2, [sp, #16]
    2e9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2e9e:	4610      	mov	r0, r2
    2ea0:	4798      	blx	r3
    2ea2:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2ea4:	9b02      	ldr	r3, [sp, #8]
    2ea6:	2b01      	cmp	r3, #1
    2ea8:	d102      	bne.n	2eb0 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2eaa:	2301      	movs	r3, #1
    2eac:	9305      	str	r3, [sp, #20]
            break;
    2eae:	e00d      	b.n	2ecc <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2eb0:	9b02      	ldr	r3, [sp, #8]
    2eb2:	2b02      	cmp	r3, #2
    2eb4:	d101      	bne.n	2eba <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2eb6:	2300      	movs	r3, #0
    2eb8:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2eba:	9b04      	ldr	r3, [sp, #16]
    2ebc:	3301      	adds	r3, #1
    2ebe:	9304      	str	r3, [sp, #16]
    2ec0:	4b23      	ldr	r3, [pc, #140]	; (2f50 <Clock_Ip_GetPllStatus+0xf8>)
    2ec2:	789b      	ldrb	r3, [r3, #2]
    2ec4:	461a      	mov	r2, r3
    2ec6:	9b04      	ldr	r3, [sp, #16]
    2ec8:	4293      	cmp	r3, r2
    2eca:	d3cc      	bcc.n	2e66 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2ecc:	9b05      	ldr	r3, [sp, #20]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d130      	bne.n	2f34 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2ed2:	2300      	movs	r3, #0
    2ed4:	9304      	str	r3, [sp, #16]
    2ed6:	e027      	b.n	2f28 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2ed8:	4a1e      	ldr	r2, [pc, #120]	; (2f54 <Clock_Ip_GetPllStatus+0xfc>)
    2eda:	9b04      	ldr	r3, [sp, #16]
    2edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2ee0:	4918      	ldr	r1, [pc, #96]	; (2f44 <Clock_Ip_GetPllStatus+0xec>)
    2ee2:	4613      	mov	r3, r2
    2ee4:	00db      	lsls	r3, r3, #3
    2ee6:	4413      	add	r3, r2
    2ee8:	440b      	add	r3, r1
    2eea:	3301      	adds	r3, #1
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	461a      	mov	r2, r3
    2ef0:	4b19      	ldr	r3, [pc, #100]	; (2f58 <Clock_Ip_GetPllStatus+0x100>)
    2ef2:	5c9b      	ldrb	r3, [r3, r2]
    2ef4:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2ef6:	4919      	ldr	r1, [pc, #100]	; (2f5c <Clock_Ip_GetPllStatus+0x104>)
    2ef8:	9a03      	ldr	r2, [sp, #12]
    2efa:	4613      	mov	r3, r2
    2efc:	005b      	lsls	r3, r3, #1
    2efe:	4413      	add	r3, r2
    2f00:	009b      	lsls	r3, r3, #2
    2f02:	440b      	add	r3, r1
    2f04:	3308      	adds	r3, #8
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	4912      	ldr	r1, [pc, #72]	; (2f54 <Clock_Ip_GetPllStatus+0xfc>)
    2f0a:	9a04      	ldr	r2, [sp, #16]
    2f0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2f10:	4610      	mov	r0, r2
    2f12:	4798      	blx	r3
    2f14:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2f16:	9b01      	ldr	r3, [sp, #4]
    2f18:	2b01      	cmp	r3, #1
    2f1a:	d102      	bne.n	2f22 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2f1c:	2301      	movs	r3, #1
    2f1e:	9305      	str	r3, [sp, #20]
                break;
    2f20:	e008      	b.n	2f34 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2f22:	9b04      	ldr	r3, [sp, #16]
    2f24:	3301      	adds	r3, #1
    2f26:	9304      	str	r3, [sp, #16]
    2f28:	4b09      	ldr	r3, [pc, #36]	; (2f50 <Clock_Ip_GetPllStatus+0xf8>)
    2f2a:	78db      	ldrb	r3, [r3, #3]
    2f2c:	461a      	mov	r2, r3
    2f2e:	9b04      	ldr	r3, [sp, #16]
    2f30:	4293      	cmp	r3, r2
    2f32:	d3d1      	bcc.n	2ed8 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2f34:	9b05      	ldr	r3, [sp, #20]
}
    2f36:	4618      	mov	r0, r3
    2f38:	b007      	add	sp, #28
    2f3a:	f85d fb04 	ldr.w	pc, [sp], #4
    2f3e:	bf00      	nop
    2f40:	00010cc8 	.word	0x00010cc8
    2f44:	000107c0 	.word	0x000107c0
    2f48:	00010780 	.word	0x00010780
    2f4c:	00010dcc 	.word	0x00010dcc
    2f50:	1fff8b3c 	.word	0x1fff8b3c
    2f54:	00010ccc 	.word	0x00010ccc
    2f58:	00010770 	.word	0x00010770
    2f5c:	00010d3c 	.word	0x00010d3c

00002f60 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2f60:	b500      	push	{lr}
    2f62:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2f64:	4b55      	ldr	r3, [pc, #340]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    2f66:	681b      	ldr	r3, [r3, #0]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	f000 80a2 	beq.w	30b2 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2f6e:	2300      	movs	r3, #0
    2f70:	9301      	str	r3, [sp, #4]
    2f72:	e02c      	b.n	2fce <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2f74:	4b51      	ldr	r3, [pc, #324]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    2f76:	681a      	ldr	r2, [r3, #0]
    2f78:	9b01      	ldr	r3, [sp, #4]
    2f7a:	330d      	adds	r3, #13
    2f7c:	00db      	lsls	r3, r3, #3
    2f7e:	4413      	add	r3, r2
    2f80:	685b      	ldr	r3, [r3, #4]
    2f82:	4a4f      	ldr	r2, [pc, #316]	; (30c0 <Clock_Ip_DistributePll+0x160>)
    2f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2f88:	2b03      	cmp	r3, #3
    2f8a:	d11d      	bne.n	2fc8 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2f8c:	4b4b      	ldr	r3, [pc, #300]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	9a01      	ldr	r2, [sp, #4]
    2f92:	320d      	adds	r2, #13
    2f94:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2f98:	494a      	ldr	r1, [pc, #296]	; (30c4 <Clock_Ip_DistributePll+0x164>)
    2f9a:	4613      	mov	r3, r2
    2f9c:	00db      	lsls	r3, r3, #3
    2f9e:	4413      	add	r3, r2
    2fa0:	440b      	add	r3, r1
    2fa2:	3301      	adds	r3, #1
    2fa4:	781b      	ldrb	r3, [r3, #0]
    2fa6:	461a      	mov	r2, r3
    2fa8:	4b47      	ldr	r3, [pc, #284]	; (30c8 <Clock_Ip_DistributePll+0x168>)
    2faa:	5c9b      	ldrb	r3, [r3, r2]
    2fac:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2fae:	4a47      	ldr	r2, [pc, #284]	; (30cc <Clock_Ip_DistributePll+0x16c>)
    2fb0:	9b00      	ldr	r3, [sp, #0]
    2fb2:	00db      	lsls	r3, r3, #3
    2fb4:	4413      	add	r3, r2
    2fb6:	685b      	ldr	r3, [r3, #4]
    2fb8:	4a40      	ldr	r2, [pc, #256]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    2fba:	6811      	ldr	r1, [r2, #0]
    2fbc:	9a01      	ldr	r2, [sp, #4]
    2fbe:	320d      	adds	r2, #13
    2fc0:	00d2      	lsls	r2, r2, #3
    2fc2:	440a      	add	r2, r1
    2fc4:	4610      	mov	r0, r2
    2fc6:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2fc8:	9b01      	ldr	r3, [sp, #4]
    2fca:	3301      	adds	r3, #1
    2fcc:	9301      	str	r3, [sp, #4]
    2fce:	4b3b      	ldr	r3, [pc, #236]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	7adb      	ldrb	r3, [r3, #11]
    2fd4:	461a      	mov	r2, r3
    2fd6:	9b01      	ldr	r3, [sp, #4]
    2fd8:	4293      	cmp	r3, r2
    2fda:	d3cb      	bcc.n	2f74 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2fdc:	4b3c      	ldr	r3, [pc, #240]	; (30d0 <Clock_Ip_DistributePll+0x170>)
    2fde:	781b      	ldrb	r3, [r3, #0]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d066      	beq.n	30b2 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2fe4:	2300      	movs	r3, #0
    2fe6:	9301      	str	r3, [sp, #4]
    2fe8:	e021      	b.n	302e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2fea:	4b34      	ldr	r3, [pc, #208]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    2fec:	681a      	ldr	r2, [r3, #0]
    2fee:	9b01      	ldr	r3, [sp, #4]
    2ff0:	334e      	adds	r3, #78	; 0x4e
    2ff2:	00db      	lsls	r3, r3, #3
    2ff4:	4413      	add	r3, r2
    2ff6:	685a      	ldr	r2, [r3, #4]
    2ff8:	4932      	ldr	r1, [pc, #200]	; (30c4 <Clock_Ip_DistributePll+0x164>)
    2ffa:	4613      	mov	r3, r2
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	4413      	add	r3, r2
    3000:	440b      	add	r3, r1
    3002:	3301      	adds	r3, #1
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	461a      	mov	r2, r3
    3008:	4b32      	ldr	r3, [pc, #200]	; (30d4 <Clock_Ip_DistributePll+0x174>)
    300a:	5c9b      	ldrb	r3, [r3, r2]
    300c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    300e:	4a32      	ldr	r2, [pc, #200]	; (30d8 <Clock_Ip_DistributePll+0x178>)
    3010:	9b00      	ldr	r3, [sp, #0]
    3012:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3016:	4a29      	ldr	r2, [pc, #164]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    3018:	6811      	ldr	r1, [r2, #0]
    301a:	9a01      	ldr	r2, [sp, #4]
    301c:	324e      	adds	r2, #78	; 0x4e
    301e:	00d2      	lsls	r2, r2, #3
    3020:	440a      	add	r2, r1
    3022:	3204      	adds	r2, #4
    3024:	4610      	mov	r0, r2
    3026:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3028:	9b01      	ldr	r3, [sp, #4]
    302a:	3301      	adds	r3, #1
    302c:	9301      	str	r3, [sp, #4]
    302e:	4b23      	ldr	r3, [pc, #140]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	7c1b      	ldrb	r3, [r3, #16]
    3034:	461a      	mov	r2, r3
    3036:	9b01      	ldr	r3, [sp, #4]
    3038:	4293      	cmp	r3, r2
    303a:	d3d6      	bcc.n	2fea <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    303c:	2300      	movs	r3, #0
    303e:	9301      	str	r3, [sp, #4]
    3040:	e02a      	b.n	3098 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3042:	4b1e      	ldr	r3, [pc, #120]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    3044:	6819      	ldr	r1, [r3, #0]
    3046:	9a01      	ldr	r2, [sp, #4]
    3048:	4613      	mov	r3, r2
    304a:	009b      	lsls	r3, r3, #2
    304c:	4413      	add	r3, r2
    304e:	009b      	lsls	r3, r3, #2
    3050:	440b      	add	r3, r1
    3052:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3056:	681a      	ldr	r2, [r3, #0]
    3058:	491a      	ldr	r1, [pc, #104]	; (30c4 <Clock_Ip_DistributePll+0x164>)
    305a:	4613      	mov	r3, r2
    305c:	00db      	lsls	r3, r3, #3
    305e:	4413      	add	r3, r2
    3060:	440b      	add	r3, r1
    3062:	3301      	adds	r3, #1
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	461a      	mov	r2, r3
    3068:	4b1c      	ldr	r3, [pc, #112]	; (30dc <Clock_Ip_DistributePll+0x17c>)
    306a:	5c9b      	ldrb	r3, [r3, r2]
    306c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    306e:	4a1c      	ldr	r2, [pc, #112]	; (30e0 <Clock_Ip_DistributePll+0x180>)
    3070:	9b00      	ldr	r3, [sp, #0]
    3072:	011b      	lsls	r3, r3, #4
    3074:	4413      	add	r3, r2
    3076:	330c      	adds	r3, #12
    3078:	6819      	ldr	r1, [r3, #0]
    307a:	4b10      	ldr	r3, [pc, #64]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    307c:	6818      	ldr	r0, [r3, #0]
    307e:	9a01      	ldr	r2, [sp, #4]
    3080:	4613      	mov	r3, r2
    3082:	009b      	lsls	r3, r3, #2
    3084:	4413      	add	r3, r2
    3086:	009b      	lsls	r3, r3, #2
    3088:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    308c:	4403      	add	r3, r0
    308e:	4618      	mov	r0, r3
    3090:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3092:	9b01      	ldr	r3, [sp, #4]
    3094:	3301      	adds	r3, #1
    3096:	9301      	str	r3, [sp, #4]
    3098:	4b08      	ldr	r3, [pc, #32]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    309a:	681b      	ldr	r3, [r3, #0]
    309c:	7c9b      	ldrb	r3, [r3, #18]
    309e:	461a      	mov	r2, r3
    30a0:	9b01      	ldr	r3, [sp, #4]
    30a2:	4293      	cmp	r3, r2
    30a4:	d3cd      	bcc.n	3042 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    30a6:	4b05      	ldr	r3, [pc, #20]	; (30bc <Clock_Ip_DistributePll+0x15c>)
    30a8:	681b      	ldr	r3, [r3, #0]
    30aa:	2104      	movs	r1, #4
    30ac:	4618      	mov	r0, r3
    30ae:	f002 fe0b 	bl	5cc8 <Clock_Ip_Command>
        }
    }
}
    30b2:	bf00      	nop
    30b4:	b003      	add	sp, #12
    30b6:	f85d fb04 	ldr.w	pc, [sp], #4
    30ba:	bf00      	nop
    30bc:	1fff8b34 	.word	0x1fff8b34
    30c0:	00010c0c 	.word	0x00010c0c
    30c4:	000107c0 	.word	0x000107c0
    30c8:	00010790 	.word	0x00010790
    30cc:	00010df8 	.word	0x00010df8
    30d0:	1fff8b3c 	.word	0x1fff8b3c
    30d4:	00010760 	.word	0x00010760
    30d8:	00010d48 	.word	0x00010d48
    30dc:	000107b0 	.word	0x000107b0
    30e0:	00010dbc 	.word	0x00010dbc

000030e4 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    30e4:	b500      	push	{lr}
    30e6:	b085      	sub	sp, #20
    30e8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    30ea:	490c      	ldr	r1, [pc, #48]	; (311c <Clock_Ip_DisableClockMonitor+0x38>)
    30ec:	9a01      	ldr	r2, [sp, #4]
    30ee:	4613      	mov	r3, r2
    30f0:	00db      	lsls	r3, r3, #3
    30f2:	4413      	add	r3, r2
    30f4:	440b      	add	r3, r1
    30f6:	3301      	adds	r3, #1
    30f8:	781b      	ldrb	r3, [r3, #0]
    30fa:	461a      	mov	r2, r3
    30fc:	4b08      	ldr	r3, [pc, #32]	; (3120 <Clock_Ip_DisableClockMonitor+0x3c>)
    30fe:	5c9b      	ldrb	r3, [r3, r2]
    3100:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    3102:	4a08      	ldr	r2, [pc, #32]	; (3124 <Clock_Ip_DisableClockMonitor+0x40>)
    3104:	9b03      	ldr	r3, [sp, #12]
    3106:	011b      	lsls	r3, r3, #4
    3108:	4413      	add	r3, r2
    310a:	3308      	adds	r3, #8
    310c:	681b      	ldr	r3, [r3, #0]
    310e:	9801      	ldr	r0, [sp, #4]
    3110:	4798      	blx	r3
}
    3112:	bf00      	nop
    3114:	b005      	add	sp, #20
    3116:	f85d fb04 	ldr.w	pc, [sp], #4
    311a:	bf00      	nop
    311c:	000107c0 	.word	0x000107c0
    3120:	000107b0 	.word	0x000107b0
    3124:	00010dbc 	.word	0x00010dbc

00003128 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    3128:	b082      	sub	sp, #8
    312a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    312c:	4a02      	ldr	r2, [pc, #8]	; (3138 <Clock_Ip_InstallNotificationsCallback+0x10>)
    312e:	9b01      	ldr	r3, [sp, #4]
    3130:	6013      	str	r3, [r2, #0]
}
    3132:	bf00      	nop
    3134:	b002      	add	sp, #8
    3136:	4770      	bx	lr
    3138:	1fff8b14 	.word	0x1fff8b14

0000313c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    313c:	b500      	push	{lr}
    313e:	b085      	sub	sp, #20
    3140:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3142:	490c      	ldr	r1, [pc, #48]	; (3174 <Clock_Ip_DisableModuleClock+0x38>)
    3144:	9a01      	ldr	r2, [sp, #4]
    3146:	4613      	mov	r3, r2
    3148:	00db      	lsls	r3, r3, #3
    314a:	4413      	add	r3, r2
    314c:	440b      	add	r3, r1
    314e:	3301      	adds	r3, #1
    3150:	781b      	ldrb	r3, [r3, #0]
    3152:	461a      	mov	r2, r3
    3154:	4b08      	ldr	r3, [pc, #32]	; (3178 <Clock_Ip_DisableModuleClock+0x3c>)
    3156:	5c9b      	ldrb	r3, [r3, r2]
    3158:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    315a:	4a08      	ldr	r2, [pc, #32]	; (317c <Clock_Ip_DisableModuleClock+0x40>)
    315c:	9b03      	ldr	r3, [sp, #12]
    315e:	00db      	lsls	r3, r3, #3
    3160:	4413      	add	r3, r2
    3162:	685b      	ldr	r3, [r3, #4]
    3164:	2101      	movs	r1, #1
    3166:	9801      	ldr	r0, [sp, #4]
    3168:	4798      	blx	r3
}
    316a:	bf00      	nop
    316c:	b005      	add	sp, #20
    316e:	f85d fb04 	ldr.w	pc, [sp], #4
    3172:	bf00      	nop
    3174:	000107c0 	.word	0x000107c0
    3178:	00010760 	.word	0x00010760
    317c:	00010d48 	.word	0x00010d48

00003180 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3180:	b500      	push	{lr}
    3182:	b085      	sub	sp, #20
    3184:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3186:	490c      	ldr	r1, [pc, #48]	; (31b8 <Clock_Ip_EnableModuleClock+0x38>)
    3188:	9a01      	ldr	r2, [sp, #4]
    318a:	4613      	mov	r3, r2
    318c:	00db      	lsls	r3, r3, #3
    318e:	4413      	add	r3, r2
    3190:	440b      	add	r3, r1
    3192:	3301      	adds	r3, #1
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	461a      	mov	r2, r3
    3198:	4b08      	ldr	r3, [pc, #32]	; (31bc <Clock_Ip_EnableModuleClock+0x3c>)
    319a:	5c9b      	ldrb	r3, [r3, r2]
    319c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    319e:	4a08      	ldr	r2, [pc, #32]	; (31c0 <Clock_Ip_EnableModuleClock+0x40>)
    31a0:	9b03      	ldr	r3, [sp, #12]
    31a2:	00db      	lsls	r3, r3, #3
    31a4:	4413      	add	r3, r2
    31a6:	685b      	ldr	r3, [r3, #4]
    31a8:	2100      	movs	r1, #0
    31aa:	9801      	ldr	r0, [sp, #4]
    31ac:	4798      	blx	r3
}
    31ae:	bf00      	nop
    31b0:	b005      	add	sp, #20
    31b2:	f85d fb04 	ldr.w	pc, [sp], #4
    31b6:	bf00      	nop
    31b8:	000107c0 	.word	0x000107c0
    31bc:	00010760 	.word	0x00010760
    31c0:	00010d48 	.word	0x00010d48

000031c4 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    31c4:	b500      	push	{lr}
    31c6:	b083      	sub	sp, #12
    31c8:	9001      	str	r0, [sp, #4]
    31ca:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    31cc:	4b08      	ldr	r3, [pc, #32]	; (31f0 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    31ce:	2200      	movs	r2, #0
    31d0:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    31d2:	4b08      	ldr	r3, [pc, #32]	; (31f4 <Clock_Ip_PowerModeChangeNotification+0x30>)
    31d4:	681b      	ldr	r3, [r3, #0]
    31d6:	2102      	movs	r1, #2
    31d8:	4618      	mov	r0, r3
    31da:	f002 fd75 	bl	5cc8 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    31de:	9900      	ldr	r1, [sp, #0]
    31e0:	9801      	ldr	r0, [sp, #4]
    31e2:	f002 fc51 	bl	5a88 <Clock_Ip_ClockPowerModeChangeNotification>
}
    31e6:	bf00      	nop
    31e8:	b003      	add	sp, #12
    31ea:	f85d fb04 	ldr.w	pc, [sp], #4
    31ee:	bf00      	nop
    31f0:	1fff8b10 	.word	0x1fff8b10
    31f4:	1fff8b34 	.word	0x1fff8b34

000031f8 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    31f8:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    31fa:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    31fe:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    3200:	4b06      	ldr	r3, [pc, #24]	; (321c <Clock_Ip_SetWaitStates+0x24>)
    3202:	785b      	ldrb	r3, [r3, #1]
    3204:	2b00      	cmp	r3, #0
    3206:	d005      	beq.n	3214 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    3208:	9b01      	ldr	r3, [sp, #4]
    320a:	3b01      	subs	r3, #1
    320c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    320e:	9b01      	ldr	r3, [sp, #4]
    3210:	2b00      	cmp	r3, #0
    3212:	d1f9      	bne.n	3208 <Clock_Ip_SetWaitStates+0x10>
    }
}
    3214:	bf00      	nop
    3216:	b002      	add	sp, #8
    3218:	4770      	bx	lr
    321a:	bf00      	nop
    321c:	1fff8b3c 	.word	0x1fff8b3c

00003220 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    3220:	b500      	push	{lr}
    3222:	b083      	sub	sp, #12
    3224:	9001      	str	r0, [sp, #4]
    3226:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    3228:	4b04      	ldr	r3, [pc, #16]	; (323c <Clock_Ip_ReportClockErrors+0x1c>)
    322a:	681b      	ldr	r3, [r3, #0]
    322c:	9900      	ldr	r1, [sp, #0]
    322e:	9801      	ldr	r0, [sp, #4]
    3230:	4798      	blx	r3
}
    3232:	bf00      	nop
    3234:	b003      	add	sp, #12
    3236:	f85d fb04 	ldr.w	pc, [sp], #4
    323a:	bf00      	nop
    323c:	1fff8b14 	.word	0x1fff8b14

00003240 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3240:	b500      	push	{lr}
    3242:	b085      	sub	sp, #20
    3244:	9003      	str	r0, [sp, #12]
    3246:	9102      	str	r1, [sp, #8]
    3248:	9201      	str	r2, [sp, #4]
    324a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    324c:	2000      	movs	r0, #0
    324e:	f7fe ffd1 	bl	21f4 <OsIf_GetCounter>
    3252:	4602      	mov	r2, r0
    3254:	9b03      	ldr	r3, [sp, #12]
    3256:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3258:	9b02      	ldr	r3, [sp, #8]
    325a:	2200      	movs	r2, #0
    325c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    325e:	2100      	movs	r1, #0
    3260:	9800      	ldr	r0, [sp, #0]
    3262:	f7ff f813 	bl	228c <OsIf_MicrosToTicks>
    3266:	4602      	mov	r2, r0
    3268:	9b01      	ldr	r3, [sp, #4]
    326a:	601a      	str	r2, [r3, #0]
}
    326c:	bf00      	nop
    326e:	b005      	add	sp, #20
    3270:	f85d fb04 	ldr.w	pc, [sp], #4

00003274 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3274:	b500      	push	{lr}
    3276:	b087      	sub	sp, #28
    3278:	9003      	str	r0, [sp, #12]
    327a:	9102      	str	r1, [sp, #8]
    327c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    327e:	2300      	movs	r3, #0
    3280:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3284:	2100      	movs	r1, #0
    3286:	9803      	ldr	r0, [sp, #12]
    3288:	f7fe ffcd 	bl	2226 <OsIf_GetElapsed>
    328c:	4602      	mov	r2, r0
    328e:	9b02      	ldr	r3, [sp, #8]
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	441a      	add	r2, r3
    3294:	9b02      	ldr	r3, [sp, #8]
    3296:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3298:	9b02      	ldr	r3, [sp, #8]
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	9a01      	ldr	r2, [sp, #4]
    329e:	429a      	cmp	r2, r3
    32a0:	d802      	bhi.n	32a8 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    32a2:	2301      	movs	r3, #1
    32a4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    32a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    32ac:	4618      	mov	r0, r3
    32ae:	b007      	add	sp, #28
    32b0:	f85d fb04 	ldr.w	pc, [sp], #4

000032b4 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    32b4:	b082      	sub	sp, #8
    32b6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    32b8:	bf00      	nop
    32ba:	b002      	add	sp, #8
    32bc:	4770      	bx	lr

000032be <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    32be:	b500      	push	{lr}
    32c0:	b083      	sub	sp, #12
    32c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32c4:	9b01      	ldr	r3, [sp, #4]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d002      	beq.n	32d0 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    32ca:	9801      	ldr	r0, [sp, #4]
    32cc:	f000 f8ad 	bl	342a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d0:	bf00      	nop
    32d2:	b003      	add	sp, #12
    32d4:	f85d fb04 	ldr.w	pc, [sp], #4

000032d8 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    32d8:	b500      	push	{lr}
    32da:	b083      	sub	sp, #12
    32dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32de:	9b01      	ldr	r3, [sp, #4]
    32e0:	2b00      	cmp	r3, #0
    32e2:	d002      	beq.n	32ea <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    32e4:	9801      	ldr	r0, [sp, #4]
    32e6:	f000 f8cd 	bl	3484 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32ea:	bf00      	nop
    32ec:	b003      	add	sp, #12
    32ee:	f85d fb04 	ldr.w	pc, [sp], #4

000032f2 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    32f2:	b500      	push	{lr}
    32f4:	b083      	sub	sp, #12
    32f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32f8:	9b01      	ldr	r3, [sp, #4]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d002      	beq.n	3304 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    32fe:	9801      	ldr	r0, [sp, #4]
    3300:	f000 f8ee 	bl	34e0 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3304:	bf00      	nop
    3306:	b003      	add	sp, #12
    3308:	f85d fb04 	ldr.w	pc, [sp], #4

0000330c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    330c:	b500      	push	{lr}
    330e:	b083      	sub	sp, #12
    3310:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3312:	9b01      	ldr	r3, [sp, #4]
    3314:	2b00      	cmp	r3, #0
    3316:	d002      	beq.n	331e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3318:	9801      	ldr	r0, [sp, #4]
    331a:	f000 f8f9 	bl	3510 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    331e:	bf00      	nop
    3320:	b003      	add	sp, #12
    3322:	f85d fb04 	ldr.w	pc, [sp], #4

00003326 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3326:	b500      	push	{lr}
    3328:	b083      	sub	sp, #12
    332a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    332c:	9b01      	ldr	r3, [sp, #4]
    332e:	2b00      	cmp	r3, #0
    3330:	d002      	beq.n	3338 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3332:	9801      	ldr	r0, [sp, #4]
    3334:	f000 f904 	bl	3540 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3338:	bf00      	nop
    333a:	b003      	add	sp, #12
    333c:	f85d fb04 	ldr.w	pc, [sp], #4

00003340 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3340:	b500      	push	{lr}
    3342:	b083      	sub	sp, #12
    3344:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3346:	9b01      	ldr	r3, [sp, #4]
    3348:	2b00      	cmp	r3, #0
    334a:	d002      	beq.n	3352 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    334c:	9801      	ldr	r0, [sp, #4]
    334e:	f000 f90f 	bl	3570 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3352:	bf00      	nop
    3354:	b003      	add	sp, #12
    3356:	f85d fb04 	ldr.w	pc, [sp], #4

0000335a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    335a:	b500      	push	{lr}
    335c:	b083      	sub	sp, #12
    335e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3360:	9b01      	ldr	r3, [sp, #4]
    3362:	2b00      	cmp	r3, #0
    3364:	d002      	beq.n	336c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3366:	9801      	ldr	r0, [sp, #4]
    3368:	f000 f91a 	bl	35a0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    336c:	bf00      	nop
    336e:	b003      	add	sp, #12
    3370:	f85d fb04 	ldr.w	pc, [sp], #4

00003374 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3374:	b500      	push	{lr}
    3376:	b083      	sub	sp, #12
    3378:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    337a:	9b01      	ldr	r3, [sp, #4]
    337c:	2b00      	cmp	r3, #0
    337e:	d002      	beq.n	3386 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3380:	9801      	ldr	r0, [sp, #4]
    3382:	f000 f925 	bl	35d0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3386:	bf00      	nop
    3388:	b003      	add	sp, #12
    338a:	f85d fb04 	ldr.w	pc, [sp], #4

0000338e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    338e:	b500      	push	{lr}
    3390:	b083      	sub	sp, #12
    3392:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	2b00      	cmp	r3, #0
    3398:	d002      	beq.n	33a0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    339a:	9801      	ldr	r0, [sp, #4]
    339c:	f000 f930 	bl	3600 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33a0:	bf00      	nop
    33a2:	b003      	add	sp, #12
    33a4:	f85d fb04 	ldr.w	pc, [sp], #4

000033a8 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    33a8:	b500      	push	{lr}
    33aa:	b083      	sub	sp, #12
    33ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33ae:	9b01      	ldr	r3, [sp, #4]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d002      	beq.n	33ba <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    33b4:	9801      	ldr	r0, [sp, #4]
    33b6:	f000 f93b 	bl	3630 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33ba:	bf00      	nop
    33bc:	b003      	add	sp, #12
    33be:	f85d fb04 	ldr.w	pc, [sp], #4

000033c2 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    33c2:	b500      	push	{lr}
    33c4:	b083      	sub	sp, #12
    33c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33c8:	9b01      	ldr	r3, [sp, #4]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d002      	beq.n	33d4 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    33ce:	9801      	ldr	r0, [sp, #4]
    33d0:	f000 f946 	bl	3660 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33d4:	bf00      	nop
    33d6:	b003      	add	sp, #12
    33d8:	f85d fb04 	ldr.w	pc, [sp], #4

000033dc <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    33dc:	b500      	push	{lr}
    33de:	b083      	sub	sp, #12
    33e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33e2:	9b01      	ldr	r3, [sp, #4]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d002      	beq.n	33ee <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    33e8:	9801      	ldr	r0, [sp, #4]
    33ea:	f000 f951 	bl	3690 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33ee:	bf00      	nop
    33f0:	b003      	add	sp, #12
    33f2:	f85d fb04 	ldr.w	pc, [sp], #4

000033f6 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    33f6:	b500      	push	{lr}
    33f8:	b083      	sub	sp, #12
    33fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33fc:	9b01      	ldr	r3, [sp, #4]
    33fe:	2b00      	cmp	r3, #0
    3400:	d002      	beq.n	3408 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    3402:	9801      	ldr	r0, [sp, #4]
    3404:	f000 f95e 	bl	36c4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3408:	bf00      	nop
    340a:	b003      	add	sp, #12
    340c:	f85d fb04 	ldr.w	pc, [sp], #4

00003410 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3410:	b500      	push	{lr}
    3412:	b083      	sub	sp, #12
    3414:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3416:	9b01      	ldr	r3, [sp, #4]
    3418:	2b00      	cmp	r3, #0
    341a:	d002      	beq.n	3422 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    341c:	9801      	ldr	r0, [sp, #4]
    341e:	f000 f98b 	bl	3738 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3422:	bf00      	nop
    3424:	b003      	add	sp, #12
    3426:	f85d fb04 	ldr.w	pc, [sp], #4

0000342a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    342a:	b086      	sub	sp, #24
    342c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    342e:	9b01      	ldr	r3, [sp, #4]
    3430:	681a      	ldr	r2, [r3, #0]
    3432:	4911      	ldr	r1, [pc, #68]	; (3478 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3434:	4613      	mov	r3, r2
    3436:	00db      	lsls	r3, r3, #3
    3438:	4413      	add	r3, r2
    343a:	440b      	add	r3, r1
    343c:	781b      	ldrb	r3, [r3, #0]
    343e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3440:	9b01      	ldr	r3, [sp, #4]
    3442:	685b      	ldr	r3, [r3, #4]
    3444:	4a0d      	ldr	r2, [pc, #52]	; (347c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3446:	5cd3      	ldrb	r3, [r2, r3]
    3448:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    344a:	4a0d      	ldr	r2, [pc, #52]	; (3480 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    344c:	9b05      	ldr	r3, [sp, #20]
    344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3452:	681b      	ldr	r3, [r3, #0]
    3454:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3456:	9b03      	ldr	r3, [sp, #12]
    3458:	f023 0307 	bic.w	r3, r3, #7
    345c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    345e:	9a03      	ldr	r2, [sp, #12]
    3460:	9b04      	ldr	r3, [sp, #16]
    3462:	4313      	orrs	r3, r2
    3464:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3466:	4a06      	ldr	r2, [pc, #24]	; (3480 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3468:	9b05      	ldr	r3, [sp, #20]
    346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    346e:	9a03      	ldr	r2, [sp, #12]
    3470:	601a      	str	r2, [r3, #0]
}
    3472:	bf00      	nop
    3474:	b006      	add	sp, #24
    3476:	4770      	bx	lr
    3478:	000107c0 	.word	0x000107c0
    347c:	00010bb8 	.word	0x00010bb8
    3480:	00010bfc 	.word	0x00010bfc

00003484 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3484:	b086      	sub	sp, #24
    3486:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3488:	9b01      	ldr	r3, [sp, #4]
    348a:	681a      	ldr	r2, [r3, #0]
    348c:	4911      	ldr	r1, [pc, #68]	; (34d4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    348e:	4613      	mov	r3, r2
    3490:	00db      	lsls	r3, r3, #3
    3492:	4413      	add	r3, r2
    3494:	440b      	add	r3, r1
    3496:	781b      	ldrb	r3, [r3, #0]
    3498:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    349a:	9b01      	ldr	r3, [sp, #4]
    349c:	685b      	ldr	r3, [r3, #4]
    349e:	4a0e      	ldr	r2, [pc, #56]	; (34d8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    34a0:	5cd3      	ldrb	r3, [r2, r3]
    34a2:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    34a4:	4a0d      	ldr	r2, [pc, #52]	; (34dc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    34a6:	9b05      	ldr	r3, [sp, #20]
    34a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    34ac:	681b      	ldr	r3, [r3, #0]
    34ae:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    34b0:	9b03      	ldr	r3, [sp, #12]
    34b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    34b6:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    34b8:	9b04      	ldr	r3, [sp, #16]
    34ba:	021b      	lsls	r3, r3, #8
    34bc:	9a03      	ldr	r2, [sp, #12]
    34be:	4313      	orrs	r3, r2
    34c0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    34c2:	4a06      	ldr	r2, [pc, #24]	; (34dc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    34c4:	9b05      	ldr	r3, [sp, #20]
    34c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    34ca:	9a03      	ldr	r2, [sp, #12]
    34cc:	601a      	str	r2, [r3, #0]
}
    34ce:	bf00      	nop
    34d0:	b006      	add	sp, #24
    34d2:	4770      	bx	lr
    34d4:	000107c0 	.word	0x000107c0
    34d8:	00010bb8 	.word	0x00010bb8
    34dc:	00010bfc 	.word	0x00010bfc

000034e0 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    34e0:	b084      	sub	sp, #16
    34e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    34e4:	4b09      	ldr	r3, [pc, #36]	; (350c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    34e6:	695b      	ldr	r3, [r3, #20]
    34e8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    34ea:	9b03      	ldr	r3, [sp, #12]
    34ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    34f0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    34f2:	9b01      	ldr	r3, [sp, #4]
    34f4:	685b      	ldr	r3, [r3, #4]
    34f6:	3b01      	subs	r3, #1
    34f8:	041b      	lsls	r3, r3, #16
    34fa:	9a03      	ldr	r2, [sp, #12]
    34fc:	4313      	orrs	r3, r2
    34fe:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3500:	4a02      	ldr	r2, [pc, #8]	; (350c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3502:	9b03      	ldr	r3, [sp, #12]
    3504:	6153      	str	r3, [r2, #20]
}
    3506:	bf00      	nop
    3508:	b004      	add	sp, #16
    350a:	4770      	bx	lr
    350c:	40064000 	.word	0x40064000

00003510 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3510:	b084      	sub	sp, #16
    3512:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3514:	4b09      	ldr	r3, [pc, #36]	; (353c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3516:	695b      	ldr	r3, [r3, #20]
    3518:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    351a:	9b03      	ldr	r3, [sp, #12]
    351c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3520:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3522:	9b01      	ldr	r3, [sp, #4]
    3524:	685b      	ldr	r3, [r3, #4]
    3526:	3b01      	subs	r3, #1
    3528:	011b      	lsls	r3, r3, #4
    352a:	9a03      	ldr	r2, [sp, #12]
    352c:	4313      	orrs	r3, r2
    352e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3530:	4a02      	ldr	r2, [pc, #8]	; (353c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3532:	9b03      	ldr	r3, [sp, #12]
    3534:	6153      	str	r3, [r2, #20]
}
    3536:	bf00      	nop
    3538:	b004      	add	sp, #16
    353a:	4770      	bx	lr
    353c:	40064000 	.word	0x40064000

00003540 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3540:	b084      	sub	sp, #16
    3542:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3544:	4b09      	ldr	r3, [pc, #36]	; (356c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3546:	695b      	ldr	r3, [r3, #20]
    3548:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    354a:	9b03      	ldr	r3, [sp, #12]
    354c:	f023 030f 	bic.w	r3, r3, #15
    3550:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3552:	9b01      	ldr	r3, [sp, #4]
    3554:	685b      	ldr	r3, [r3, #4]
    3556:	3b01      	subs	r3, #1
    3558:	9a03      	ldr	r2, [sp, #12]
    355a:	4313      	orrs	r3, r2
    355c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    355e:	4a03      	ldr	r2, [pc, #12]	; (356c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3560:	9b03      	ldr	r3, [sp, #12]
    3562:	6153      	str	r3, [r2, #20]
}
    3564:	bf00      	nop
    3566:	b004      	add	sp, #16
    3568:	4770      	bx	lr
    356a:	bf00      	nop
    356c:	40064000 	.word	0x40064000

00003570 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3570:	b084      	sub	sp, #16
    3572:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3574:	4b09      	ldr	r3, [pc, #36]	; (359c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3576:	699b      	ldr	r3, [r3, #24]
    3578:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    357a:	9b03      	ldr	r3, [sp, #12]
    357c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3580:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	685b      	ldr	r3, [r3, #4]
    3586:	3b01      	subs	r3, #1
    3588:	041b      	lsls	r3, r3, #16
    358a:	9a03      	ldr	r2, [sp, #12]
    358c:	4313      	orrs	r3, r2
    358e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3590:	4a02      	ldr	r2, [pc, #8]	; (359c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3592:	9b03      	ldr	r3, [sp, #12]
    3594:	6193      	str	r3, [r2, #24]
}
    3596:	bf00      	nop
    3598:	b004      	add	sp, #16
    359a:	4770      	bx	lr
    359c:	40064000 	.word	0x40064000

000035a0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    35a0:	b084      	sub	sp, #16
    35a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    35a4:	4b09      	ldr	r3, [pc, #36]	; (35cc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    35a6:	699b      	ldr	r3, [r3, #24]
    35a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    35aa:	9b03      	ldr	r3, [sp, #12]
    35ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    35b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    35b2:	9b01      	ldr	r3, [sp, #4]
    35b4:	685b      	ldr	r3, [r3, #4]
    35b6:	3b01      	subs	r3, #1
    35b8:	011b      	lsls	r3, r3, #4
    35ba:	9a03      	ldr	r2, [sp, #12]
    35bc:	4313      	orrs	r3, r2
    35be:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    35c0:	4a02      	ldr	r2, [pc, #8]	; (35cc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    35c2:	9b03      	ldr	r3, [sp, #12]
    35c4:	6193      	str	r3, [r2, #24]
}
    35c6:	bf00      	nop
    35c8:	b004      	add	sp, #16
    35ca:	4770      	bx	lr
    35cc:	40064000 	.word	0x40064000

000035d0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    35d0:	b084      	sub	sp, #16
    35d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    35d4:	4b09      	ldr	r3, [pc, #36]	; (35fc <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    35d6:	699b      	ldr	r3, [r3, #24]
    35d8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    35da:	9b03      	ldr	r3, [sp, #12]
    35dc:	f023 030f 	bic.w	r3, r3, #15
    35e0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    35e2:	9b01      	ldr	r3, [sp, #4]
    35e4:	685b      	ldr	r3, [r3, #4]
    35e6:	3b01      	subs	r3, #1
    35e8:	9a03      	ldr	r2, [sp, #12]
    35ea:	4313      	orrs	r3, r2
    35ec:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    35ee:	4a03      	ldr	r2, [pc, #12]	; (35fc <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    35f0:	9b03      	ldr	r3, [sp, #12]
    35f2:	6193      	str	r3, [r2, #24]
}
    35f4:	bf00      	nop
    35f6:	b004      	add	sp, #16
    35f8:	4770      	bx	lr
    35fa:	bf00      	nop
    35fc:	40064000 	.word	0x40064000

00003600 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3600:	b084      	sub	sp, #16
    3602:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3604:	4b09      	ldr	r3, [pc, #36]	; (362c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3606:	69db      	ldr	r3, [r3, #28]
    3608:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    360a:	9b03      	ldr	r3, [sp, #12]
    360c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3610:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3612:	9b01      	ldr	r3, [sp, #4]
    3614:	685b      	ldr	r3, [r3, #4]
    3616:	3b01      	subs	r3, #1
    3618:	041b      	lsls	r3, r3, #16
    361a:	9a03      	ldr	r2, [sp, #12]
    361c:	4313      	orrs	r3, r2
    361e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3620:	4a02      	ldr	r2, [pc, #8]	; (362c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3622:	9b03      	ldr	r3, [sp, #12]
    3624:	61d3      	str	r3, [r2, #28]
}
    3626:	bf00      	nop
    3628:	b004      	add	sp, #16
    362a:	4770      	bx	lr
    362c:	40064000 	.word	0x40064000

00003630 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3630:	b084      	sub	sp, #16
    3632:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3634:	4b09      	ldr	r3, [pc, #36]	; (365c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3636:	69db      	ldr	r3, [r3, #28]
    3638:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    363a:	9b03      	ldr	r3, [sp, #12]
    363c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3640:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3642:	9b01      	ldr	r3, [sp, #4]
    3644:	685b      	ldr	r3, [r3, #4]
    3646:	3b01      	subs	r3, #1
    3648:	011b      	lsls	r3, r3, #4
    364a:	9a03      	ldr	r2, [sp, #12]
    364c:	4313      	orrs	r3, r2
    364e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3650:	4a02      	ldr	r2, [pc, #8]	; (365c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3652:	9b03      	ldr	r3, [sp, #12]
    3654:	61d3      	str	r3, [r2, #28]
}
    3656:	bf00      	nop
    3658:	b004      	add	sp, #16
    365a:	4770      	bx	lr
    365c:	40064000 	.word	0x40064000

00003660 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3660:	b084      	sub	sp, #16
    3662:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3664:	4b09      	ldr	r3, [pc, #36]	; (368c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3666:	69db      	ldr	r3, [r3, #28]
    3668:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    366a:	9b03      	ldr	r3, [sp, #12]
    366c:	f023 030f 	bic.w	r3, r3, #15
    3670:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3672:	9b01      	ldr	r3, [sp, #4]
    3674:	685b      	ldr	r3, [r3, #4]
    3676:	3b01      	subs	r3, #1
    3678:	9a03      	ldr	r2, [sp, #12]
    367a:	4313      	orrs	r3, r2
    367c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    367e:	4a03      	ldr	r2, [pc, #12]	; (368c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3680:	9b03      	ldr	r3, [sp, #12]
    3682:	61d3      	str	r3, [r2, #28]
}
    3684:	bf00      	nop
    3686:	b004      	add	sp, #16
    3688:	4770      	bx	lr
    368a:	bf00      	nop
    368c:	40064000 	.word	0x40064000

00003690 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3690:	b084      	sub	sp, #16
    3692:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3694:	4b0a      	ldr	r3, [pc, #40]	; (36c0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3696:	685b      	ldr	r3, [r3, #4]
    3698:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    369a:	9b03      	ldr	r3, [sp, #12]
    369c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    36a0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	685b      	ldr	r3, [r3, #4]
    36a6:	3b01      	subs	r3, #1
    36a8:	021b      	lsls	r3, r3, #8
    36aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    36ae:	9a03      	ldr	r2, [sp, #12]
    36b0:	4313      	orrs	r3, r2
    36b2:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    36b4:	4a02      	ldr	r2, [pc, #8]	; (36c0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    36b6:	9b03      	ldr	r3, [sp, #12]
    36b8:	6053      	str	r3, [r2, #4]
}
    36ba:	bf00      	nop
    36bc:	b004      	add	sp, #16
    36be:	4770      	bx	lr
    36c0:	40048000 	.word	0x40048000

000036c4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    36c4:	b084      	sub	sp, #16
    36c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    36c8:	4919      	ldr	r1, [pc, #100]	; (3730 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    36ca:	9b01      	ldr	r3, [sp, #4]
    36cc:	681a      	ldr	r2, [r3, #0]
    36ce:	4819      	ldr	r0, [pc, #100]	; (3734 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    36d0:	4613      	mov	r3, r2
    36d2:	00db      	lsls	r3, r3, #3
    36d4:	4413      	add	r3, r2
    36d6:	4403      	add	r3, r0
    36d8:	3305      	adds	r3, #5
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    36e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    36e2:	9b03      	ldr	r3, [sp, #12]
    36e4:	f023 030f 	bic.w	r3, r3, #15
    36e8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    36ea:	9b01      	ldr	r3, [sp, #4]
    36ec:	685b      	ldr	r3, [r3, #4]
    36ee:	3b01      	subs	r3, #1
    36f0:	f003 0307 	and.w	r3, r3, #7
    36f4:	9a03      	ldr	r2, [sp, #12]
    36f6:	4313      	orrs	r3, r2
    36f8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    36fa:	9b01      	ldr	r3, [sp, #4]
    36fc:	7a1b      	ldrb	r3, [r3, #8]
    36fe:	3b01      	subs	r3, #1
    3700:	00db      	lsls	r3, r3, #3
    3702:	f003 0308 	and.w	r3, r3, #8
    3706:	9a03      	ldr	r2, [sp, #12]
    3708:	4313      	orrs	r3, r2
    370a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    370c:	4908      	ldr	r1, [pc, #32]	; (3730 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    370e:	9b01      	ldr	r3, [sp, #4]
    3710:	681a      	ldr	r2, [r3, #0]
    3712:	4808      	ldr	r0, [pc, #32]	; (3734 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3714:	4613      	mov	r3, r2
    3716:	00db      	lsls	r3, r3, #3
    3718:	4413      	add	r3, r2
    371a:	4403      	add	r3, r0
    371c:	3305      	adds	r3, #5
    371e:	781b      	ldrb	r3, [r3, #0]
    3720:	461a      	mov	r2, r3
    3722:	9b03      	ldr	r3, [sp, #12]
    3724:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3728:	bf00      	nop
    372a:	b004      	add	sp, #16
    372c:	4770      	bx	lr
    372e:	bf00      	nop
    3730:	40065000 	.word	0x40065000
    3734:	000107c0 	.word	0x000107c0

00003738 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3738:	b084      	sub	sp, #16
    373a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    373c:	4b10      	ldr	r3, [pc, #64]	; (3780 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    373e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3740:	4a0f      	ldr	r2, [pc, #60]	; (3780 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3746:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3748:	4b0d      	ldr	r3, [pc, #52]	; (3780 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    374a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    374c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    374e:	9b03      	ldr	r3, [sp, #12]
    3750:	f023 030f 	bic.w	r3, r3, #15
    3754:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3756:	9b01      	ldr	r3, [sp, #4]
    3758:	685b      	ldr	r3, [r3, #4]
    375a:	3b01      	subs	r3, #1
    375c:	005b      	lsls	r3, r3, #1
    375e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	7a1b      	ldrb	r3, [r3, #8]
    3766:	3b01      	subs	r3, #1
    3768:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    376c:	4313      	orrs	r3, r2
    376e:	9a03      	ldr	r2, [sp, #12]
    3770:	4313      	orrs	r3, r2
    3772:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3774:	4a02      	ldr	r2, [pc, #8]	; (3780 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3776:	9b03      	ldr	r3, [sp, #12]
    3778:	6693      	str	r3, [r2, #104]	; 0x68
}
    377a:	bf00      	nop
    377c:	b004      	add	sp, #16
    377e:	4770      	bx	lr
    3780:	40048000 	.word	0x40048000

00003784 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3784:	b082      	sub	sp, #8
    3786:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3788:	bf00      	nop
    378a:	b002      	add	sp, #8
    378c:	4770      	bx	lr
	...

00003790 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3790:	b082      	sub	sp, #8
    3792:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3794:	bf00      	nop
    3796:	b002      	add	sp, #8
    3798:	4770      	bx	lr

0000379a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    379a:	b082      	sub	sp, #8
    379c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    379e:	bf00      	nop
    37a0:	b002      	add	sp, #8
    37a2:	4770      	bx	lr

000037a4 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    37a4:	b500      	push	{lr}
    37a6:	b083      	sub	sp, #12
    37a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d002      	beq.n	37b6 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    37b0:	9801      	ldr	r0, [sp, #4]
    37b2:	f000 f86a 	bl	388a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37b6:	bf00      	nop
    37b8:	b003      	add	sp, #12
    37ba:	f85d fb04 	ldr.w	pc, [sp], #4

000037be <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    37be:	b500      	push	{lr}
    37c0:	b083      	sub	sp, #12
    37c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c4:	9b01      	ldr	r3, [sp, #4]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d002      	beq.n	37d0 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    37ca:	9801      	ldr	r0, [sp, #4]
    37cc:	f000 f884 	bl	38d8 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    37d0:	bf00      	nop
    37d2:	b003      	add	sp, #12
    37d4:	f85d fb04 	ldr.w	pc, [sp], #4

000037d8 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    37d8:	b500      	push	{lr}
    37da:	b089      	sub	sp, #36	; 0x24
    37dc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    37de:	2300      	movs	r3, #0
    37e0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    37e4:	9b01      	ldr	r3, [sp, #4]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d031      	beq.n	384e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    37ea:	4b1b      	ldr	r3, [pc, #108]	; (3858 <Clock_Ip_CompleteSOSC+0x80>)
    37ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    37f0:	f003 0301 	and.w	r3, r3, #1
    37f4:	2b00      	cmp	r3, #0
    37f6:	d02a      	beq.n	384e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37f8:	aa03      	add	r2, sp, #12
    37fa:	a904      	add	r1, sp, #16
    37fc:	a805      	add	r0, sp, #20
    37fe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3802:	f7ff fd1d 	bl	3240 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3806:	4b14      	ldr	r3, [pc, #80]	; (3858 <Clock_Ip_CompleteSOSC+0x80>)
    3808:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    380c:	0e1b      	lsrs	r3, r3, #24
    380e:	f003 0301 	and.w	r3, r3, #1
    3812:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3814:	9a03      	ldr	r2, [sp, #12]
    3816:	a904      	add	r1, sp, #16
    3818:	ab05      	add	r3, sp, #20
    381a:	4618      	mov	r0, r3
    381c:	f7ff fd2a 	bl	3274 <Clock_Ip_TimeoutExpired>
    3820:	4603      	mov	r3, r0
    3822:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3826:	9b06      	ldr	r3, [sp, #24]
    3828:	2b00      	cmp	r3, #0
    382a:	d106      	bne.n	383a <Clock_Ip_CompleteSOSC+0x62>
    382c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3830:	f083 0301 	eor.w	r3, r3, #1
    3834:	b2db      	uxtb	r3, r3
    3836:	2b00      	cmp	r3, #0
    3838:	d1e5      	bne.n	3806 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    383a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    383e:	2b00      	cmp	r3, #0
    3840:	d005      	beq.n	384e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3842:	9b01      	ldr	r3, [sp, #4]
    3844:	681b      	ldr	r3, [r3, #0]
    3846:	4619      	mov	r1, r3
    3848:	2001      	movs	r0, #1
    384a:	f7ff fce9 	bl	3220 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    384e:	bf00      	nop
    3850:	b009      	add	sp, #36	; 0x24
    3852:	f85d fb04 	ldr.w	pc, [sp], #4
    3856:	bf00      	nop
    3858:	40064000 	.word	0x40064000

0000385c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    385c:	b500      	push	{lr}
    385e:	b083      	sub	sp, #12
    3860:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3862:	9801      	ldr	r0, [sp, #4]
    3864:	f000 f8c0 	bl	39e8 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3868:	bf00      	nop
    386a:	b003      	add	sp, #12
    386c:	f85d fb04 	ldr.w	pc, [sp], #4

00003870 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3870:	b500      	push	{lr}
    3872:	b083      	sub	sp, #12
    3874:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3876:	9b01      	ldr	r3, [sp, #4]
    3878:	2b00      	cmp	r3, #0
    387a:	d002      	beq.n	3882 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    387c:	9801      	ldr	r0, [sp, #4]
    387e:	f000 f8c3 	bl	3a08 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3882:	bf00      	nop
    3884:	b003      	add	sp, #12
    3886:	f85d fb04 	ldr.w	pc, [sp], #4

0000388a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    388a:	b082      	sub	sp, #8
    388c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    388e:	4b11      	ldr	r3, [pc, #68]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3890:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3894:	4a0f      	ldr	r2, [pc, #60]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3896:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    389a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    389e:	4b0d      	ldr	r3, [pc, #52]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    38a4:	4a0b      	ldr	r2, [pc, #44]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    38aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    38ae:	4b09      	ldr	r3, [pc, #36]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    38b4:	4a07      	ldr	r2, [pc, #28]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    38ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    38be:	4b05      	ldr	r3, [pc, #20]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    38c4:	4a03      	ldr	r2, [pc, #12]	; (38d4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38c6:	f023 0301 	bic.w	r3, r3, #1
    38ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    38ce:	bf00      	nop
    38d0:	b002      	add	sp, #8
    38d2:	4770      	bx	lr
    38d4:	40064000 	.word	0x40064000

000038d8 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    38d8:	b082      	sub	sp, #8
    38da:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    38dc:	9b01      	ldr	r3, [sp, #4]
    38de:	891b      	ldrh	r3, [r3, #8]
    38e0:	2b01      	cmp	r3, #1
    38e2:	d174      	bne.n	39ce <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    38e4:	9b01      	ldr	r3, [sp, #4]
    38e6:	7bdb      	ldrb	r3, [r3, #15]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d002      	beq.n	38f2 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    38ec:	2b01      	cmp	r3, #1
    38ee:	d009      	beq.n	3904 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    38f0:	e011      	b.n	3916 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    38f2:	4b39      	ldr	r3, [pc, #228]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38f8:	4a37      	ldr	r2, [pc, #220]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38fa:	f023 0308 	bic.w	r3, r3, #8
    38fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3902:	e008      	b.n	3916 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3904:	4b34      	ldr	r3, [pc, #208]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    390a:	4a33      	ldr	r2, [pc, #204]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    390c:	f043 0308 	orr.w	r3, r3, #8
    3910:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3914:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3916:	4b30      	ldr	r3, [pc, #192]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3918:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    391c:	4a2e      	ldr	r2, [pc, #184]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    391e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3922:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3926:	9b01      	ldr	r3, [sp, #4]
    3928:	685b      	ldr	r3, [r3, #4]
    392a:	4a2c      	ldr	r2, [pc, #176]	; (39dc <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    392c:	4293      	cmp	r3, r2
    392e:	d90d      	bls.n	394c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3930:	9b01      	ldr	r3, [sp, #4]
    3932:	685b      	ldr	r3, [r3, #4]
    3934:	4a2a      	ldr	r2, [pc, #168]	; (39e0 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3936:	4293      	cmp	r3, r2
    3938:	d208      	bcs.n	394c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    393a:	4b27      	ldr	r3, [pc, #156]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    393c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3940:	4a25      	ldr	r2, [pc, #148]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3942:	f043 0320 	orr.w	r3, r3, #32
    3946:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    394a:	e007      	b.n	395c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    394c:	4b22      	ldr	r3, [pc, #136]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    394e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3952:	4a21      	ldr	r2, [pc, #132]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3954:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3958:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	7b1b      	ldrb	r3, [r3, #12]
    3960:	2b00      	cmp	r3, #0
    3962:	d108      	bne.n	3976 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3964:	4b1c      	ldr	r3, [pc, #112]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3966:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    396a:	4a1b      	ldr	r2, [pc, #108]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    396c:	f043 0304 	orr.w	r3, r3, #4
    3970:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3974:	e007      	b.n	3986 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3976:	4b18      	ldr	r3, [pc, #96]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3978:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    397c:	4a16      	ldr	r2, [pc, #88]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    397e:	f023 0304 	bic.w	r3, r3, #4
    3982:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3986:	9b01      	ldr	r3, [sp, #4]
    3988:	7c1b      	ldrb	r3, [r3, #16]
    398a:	2b02      	cmp	r3, #2
    398c:	d011      	beq.n	39b2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    398e:	2b02      	cmp	r3, #2
    3990:	dc14      	bgt.n	39bc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3992:	2b00      	cmp	r3, #0
    3994:	d002      	beq.n	399c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3996:	2b01      	cmp	r3, #1
    3998:	d005      	beq.n	39a6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    399a:	e00f      	b.n	39bc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    399c:	4b0e      	ldr	r3, [pc, #56]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    399e:	2201      	movs	r2, #1
    39a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    39a4:	e014      	b.n	39d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    39a6:	4b0c      	ldr	r3, [pc, #48]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    39a8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    39ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    39b0:	e00e      	b.n	39d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    39b2:	4b09      	ldr	r3, [pc, #36]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    39b4:	4a0b      	ldr	r2, [pc, #44]	; (39e4 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    39b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    39ba:	e009      	b.n	39d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    39bc:	4b06      	ldr	r3, [pc, #24]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    39be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    39c2:	4a05      	ldr	r2, [pc, #20]	; (39d8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    39c4:	f043 0301 	orr.w	r3, r3, #1
    39c8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    39cc:	e000      	b.n	39d0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    39ce:	bf00      	nop
}
    39d0:	bf00      	nop
    39d2:	b002      	add	sp, #8
    39d4:	4770      	bx	lr
    39d6:	bf00      	nop
    39d8:	40064000 	.word	0x40064000
    39dc:	003d08ff 	.word	0x003d08ff
    39e0:	007a1200 	.word	0x007a1200
    39e4:	00030001 	.word	0x00030001

000039e8 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    39e8:	b082      	sub	sp, #8
    39ea:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    39ec:	4b05      	ldr	r3, [pc, #20]	; (3a04 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    39ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    39f2:	4a04      	ldr	r2, [pc, #16]	; (3a04 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    39f4:	f023 0301 	bic.w	r3, r3, #1
    39f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    39fc:	bf00      	nop
    39fe:	b002      	add	sp, #8
    3a00:	4770      	bx	lr
    3a02:	bf00      	nop
    3a04:	40064000 	.word	0x40064000

00003a08 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3a08:	b082      	sub	sp, #8
    3a0a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3a0c:	9b01      	ldr	r3, [sp, #4]
    3a0e:	891b      	ldrh	r3, [r3, #8]
    3a10:	2b01      	cmp	r3, #1
    3a12:	d107      	bne.n	3a24 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3a14:	4b05      	ldr	r3, [pc, #20]	; (3a2c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3a16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3a1a:	4a04      	ldr	r2, [pc, #16]	; (3a2c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3a1c:	f043 0301 	orr.w	r3, r3, #1
    3a20:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3a24:	bf00      	nop
    3a26:	b002      	add	sp, #8
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop
    3a2c:	40064000 	.word	0x40064000

00003a30 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3a30:	b082      	sub	sp, #8
    3a32:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a34:	bf00      	nop
    3a36:	b002      	add	sp, #8
    3a38:	4770      	bx	lr

00003a3a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3a3a:	b082      	sub	sp, #8
    3a3c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3a3e:	2300      	movs	r3, #0
}
    3a40:	4618      	mov	r0, r3
    3a42:	b002      	add	sp, #8
    3a44:	4770      	bx	lr

00003a46 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3a46:	b082      	sub	sp, #8
    3a48:	9001      	str	r0, [sp, #4]
    3a4a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3a4c:	bf00      	nop
    3a4e:	b002      	add	sp, #8
    3a50:	4770      	bx	lr
	...

00003a54 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3a54:	b082      	sub	sp, #8
    3a56:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a58:	bf00      	nop
    3a5a:	b002      	add	sp, #8
    3a5c:	4770      	bx	lr

00003a5e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a5e:	b082      	sub	sp, #8
    3a60:	9001      	str	r0, [sp, #4]
    3a62:	460b      	mov	r3, r1
    3a64:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3a68:	bf00      	nop
    3a6a:	b002      	add	sp, #8
    3a6c:	4770      	bx	lr

00003a6e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3a6e:	b500      	push	{lr}
    3a70:	b083      	sub	sp, #12
    3a72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a74:	9b01      	ldr	r3, [sp, #4]
    3a76:	2b00      	cmp	r3, #0
    3a78:	d002      	beq.n	3a80 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3a7a:	9801      	ldr	r0, [sp, #4]
    3a7c:	f000 f8e7 	bl	3c4e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a80:	bf00      	nop
    3a82:	b003      	add	sp, #12
    3a84:	f85d fb04 	ldr.w	pc, [sp], #4

00003a88 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a88:	b500      	push	{lr}
    3a8a:	b085      	sub	sp, #20
    3a8c:	9001      	str	r0, [sp, #4]
    3a8e:	460b      	mov	r3, r1
    3a90:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3a94:	9b01      	ldr	r3, [sp, #4]
    3a96:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3a98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d003      	beq.n	3aa8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3aa0:	2300      	movs	r3, #0
    3aa2:	f8ad 300c 	strh.w	r3, [sp, #12]
    3aa6:	e002      	b.n	3aae <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3aa8:	2301      	movs	r3, #1
    3aaa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3aae:	ab02      	add	r3, sp, #8
    3ab0:	4618      	mov	r0, r3
    3ab2:	f7ff ffdc 	bl	3a6e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3ab6:	bf00      	nop
    3ab8:	b005      	add	sp, #20
    3aba:	f85d fb04 	ldr.w	pc, [sp], #4

00003abe <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3abe:	b500      	push	{lr}
    3ac0:	b083      	sub	sp, #12
    3ac2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ac4:	9b01      	ldr	r3, [sp, #4]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d002      	beq.n	3ad0 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3aca:	9801      	ldr	r0, [sp, #4]
    3acc:	f000 f8d6 	bl	3c7c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ad0:	bf00      	nop
    3ad2:	b003      	add	sp, #12
    3ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ad8 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ad8:	b500      	push	{lr}
    3ada:	b085      	sub	sp, #20
    3adc:	9001      	str	r0, [sp, #4]
    3ade:	460b      	mov	r3, r1
    3ae0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3ae4:	9b01      	ldr	r3, [sp, #4]
    3ae6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3aec:	2b00      	cmp	r3, #0
    3aee:	d003      	beq.n	3af8 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3af0:	2300      	movs	r3, #0
    3af2:	f8ad 300c 	strh.w	r3, [sp, #12]
    3af6:	e002      	b.n	3afe <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3af8:	2301      	movs	r3, #1
    3afa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3afe:	ab02      	add	r3, sp, #8
    3b00:	4618      	mov	r0, r3
    3b02:	f7ff ffdc 	bl	3abe <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3b06:	bf00      	nop
    3b08:	b005      	add	sp, #20
    3b0a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b0e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3b0e:	b500      	push	{lr}
    3b10:	b083      	sub	sp, #12
    3b12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b14:	9b01      	ldr	r3, [sp, #4]
    3b16:	2b00      	cmp	r3, #0
    3b18:	d002      	beq.n	3b20 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3b1a:	9801      	ldr	r0, [sp, #4]
    3b1c:	f000 f8c6 	bl	3cac <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b20:	bf00      	nop
    3b22:	b003      	add	sp, #12
    3b24:	f85d fb04 	ldr.w	pc, [sp], #4

00003b28 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3b28:	b500      	push	{lr}
    3b2a:	b085      	sub	sp, #20
    3b2c:	9001      	str	r0, [sp, #4]
    3b2e:	460b      	mov	r3, r1
    3b30:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3b34:	9b01      	ldr	r3, [sp, #4]
    3b36:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3b38:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d003      	beq.n	3b48 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3b40:	2300      	movs	r3, #0
    3b42:	f8ad 300c 	strh.w	r3, [sp, #12]
    3b46:	e002      	b.n	3b4e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3b48:	2301      	movs	r3, #1
    3b4a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3b4e:	ab02      	add	r3, sp, #8
    3b50:	4618      	mov	r0, r3
    3b52:	f7ff ffdc 	bl	3b0e <Clock_Ip_ClockSetSimClkoutEnable>
}
    3b56:	bf00      	nop
    3b58:	b005      	add	sp, #20
    3b5a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b5e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3b5e:	b500      	push	{lr}
    3b60:	b083      	sub	sp, #12
    3b62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b64:	9b01      	ldr	r3, [sp, #4]
    3b66:	2b00      	cmp	r3, #0
    3b68:	d002      	beq.n	3b70 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3b6a:	9801      	ldr	r0, [sp, #4]
    3b6c:	f000 f8b6 	bl	3cdc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b70:	bf00      	nop
    3b72:	b003      	add	sp, #12
    3b74:	f85d fb04 	ldr.w	pc, [sp], #4

00003b78 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3b78:	b500      	push	{lr}
    3b7a:	b085      	sub	sp, #20
    3b7c:	9001      	str	r0, [sp, #4]
    3b7e:	460b      	mov	r3, r1
    3b80:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3b84:	9b01      	ldr	r3, [sp, #4]
    3b86:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3b88:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d003      	beq.n	3b98 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3b90:	2300      	movs	r3, #0
    3b92:	f8ad 300c 	strh.w	r3, [sp, #12]
    3b96:	e002      	b.n	3b9e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3b98:	2301      	movs	r3, #1
    3b9a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3b9e:	ab02      	add	r3, sp, #8
    3ba0:	4618      	mov	r0, r3
    3ba2:	f7ff ffdc 	bl	3b5e <Clock_Ip_ClockSetPccCgcEnable>
}
    3ba6:	bf00      	nop
    3ba8:	b005      	add	sp, #20
    3baa:	f85d fb04 	ldr.w	pc, [sp], #4

00003bae <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3bae:	b500      	push	{lr}
    3bb0:	b083      	sub	sp, #12
    3bb2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bb4:	9b01      	ldr	r3, [sp, #4]
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d002      	beq.n	3bc0 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3bba:	9801      	ldr	r0, [sp, #4]
    3bbc:	f000 f8bc 	bl	3d38 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bc0:	bf00      	nop
    3bc2:	b003      	add	sp, #12
    3bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00003bc8 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3bc8:	b500      	push	{lr}
    3bca:	b085      	sub	sp, #20
    3bcc:	9001      	str	r0, [sp, #4]
    3bce:	460b      	mov	r3, r1
    3bd0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3bd4:	9b01      	ldr	r3, [sp, #4]
    3bd6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3bd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d003      	beq.n	3be8 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3be0:	2300      	movs	r3, #0
    3be2:	f8ad 300c 	strh.w	r3, [sp, #12]
    3be6:	e002      	b.n	3bee <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3be8:	2301      	movs	r3, #1
    3bea:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3bee:	ab02      	add	r3, sp, #8
    3bf0:	4618      	mov	r0, r3
    3bf2:	f7ff ffdc 	bl	3bae <Clock_Ip_ClockSetSimGate>
}
    3bf6:	bf00      	nop
    3bf8:	b005      	add	sp, #20
    3bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00003bfe <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3bfe:	b500      	push	{lr}
    3c00:	b083      	sub	sp, #12
    3c02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c04:	9b01      	ldr	r3, [sp, #4]
    3c06:	2b00      	cmp	r3, #0
    3c08:	d002      	beq.n	3c10 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3c0a:	9801      	ldr	r0, [sp, #4]
    3c0c:	f000 f8c0 	bl	3d90 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c10:	bf00      	nop
    3c12:	b003      	add	sp, #12
    3c14:	f85d fb04 	ldr.w	pc, [sp], #4

00003c18 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3c18:	b500      	push	{lr}
    3c1a:	b085      	sub	sp, #20
    3c1c:	9001      	str	r0, [sp, #4]
    3c1e:	460b      	mov	r3, r1
    3c20:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3c24:	9b01      	ldr	r3, [sp, #4]
    3c26:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3c28:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d003      	beq.n	3c38 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3c30:	2300      	movs	r3, #0
    3c32:	f8ad 300c 	strh.w	r3, [sp, #12]
    3c36:	e002      	b.n	3c3e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3c38:	2301      	movs	r3, #1
    3c3a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3c3e:	ab02      	add	r3, sp, #8
    3c40:	4618      	mov	r0, r3
    3c42:	f7ff ffdc 	bl	3bfe <Clock_Ip_ClockSetSimTraceEnable>
}
    3c46:	bf00      	nop
    3c48:	b005      	add	sp, #20
    3c4a:	f85d fb04 	ldr.w	pc, [sp], #4

00003c4e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c4e:	b084      	sub	sp, #16
    3c50:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3c52:	4b09      	ldr	r3, [pc, #36]	; (3c78 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3c54:	691b      	ldr	r3, [r3, #16]
    3c56:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3c58:	9b03      	ldr	r3, [sp, #12]
    3c5a:	f023 0301 	bic.w	r3, r3, #1
    3c5e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3c60:	9b01      	ldr	r3, [sp, #4]
    3c62:	889b      	ldrh	r3, [r3, #4]
    3c64:	461a      	mov	r2, r3
    3c66:	9b03      	ldr	r3, [sp, #12]
    3c68:	4313      	orrs	r3, r2
    3c6a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3c6c:	4a02      	ldr	r2, [pc, #8]	; (3c78 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3c6e:	9b03      	ldr	r3, [sp, #12]
    3c70:	6113      	str	r3, [r2, #16]
}
    3c72:	bf00      	nop
    3c74:	b004      	add	sp, #16
    3c76:	4770      	bx	lr
    3c78:	40048000 	.word	0x40048000

00003c7c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c7c:	b084      	sub	sp, #16
    3c7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3c80:	4b09      	ldr	r3, [pc, #36]	; (3ca8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3c82:	691b      	ldr	r3, [r3, #16]
    3c84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3c86:	9b03      	ldr	r3, [sp, #12]
    3c88:	f023 0302 	bic.w	r3, r3, #2
    3c8c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3c8e:	9b01      	ldr	r3, [sp, #4]
    3c90:	889b      	ldrh	r3, [r3, #4]
    3c92:	005b      	lsls	r3, r3, #1
    3c94:	9a03      	ldr	r2, [sp, #12]
    3c96:	4313      	orrs	r3, r2
    3c98:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3c9a:	4a03      	ldr	r2, [pc, #12]	; (3ca8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3c9c:	9b03      	ldr	r3, [sp, #12]
    3c9e:	6113      	str	r3, [r2, #16]
}
    3ca0:	bf00      	nop
    3ca2:	b004      	add	sp, #16
    3ca4:	4770      	bx	lr
    3ca6:	bf00      	nop
    3ca8:	40048000 	.word	0x40048000

00003cac <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3cac:	b084      	sub	sp, #16
    3cae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3cb0:	4b09      	ldr	r3, [pc, #36]	; (3cd8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3cb2:	685b      	ldr	r3, [r3, #4]
    3cb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3cb6:	9b03      	ldr	r3, [sp, #12]
    3cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3cbc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	889b      	ldrh	r3, [r3, #4]
    3cc2:	02db      	lsls	r3, r3, #11
    3cc4:	9a03      	ldr	r2, [sp, #12]
    3cc6:	4313      	orrs	r3, r2
    3cc8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3cca:	4a03      	ldr	r2, [pc, #12]	; (3cd8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3ccc:	9b03      	ldr	r3, [sp, #12]
    3cce:	6053      	str	r3, [r2, #4]
}
    3cd0:	bf00      	nop
    3cd2:	b004      	add	sp, #16
    3cd4:	4770      	bx	lr
    3cd6:	bf00      	nop
    3cd8:	40048000 	.word	0x40048000

00003cdc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3cdc:	b084      	sub	sp, #16
    3cde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3ce0:	4913      	ldr	r1, [pc, #76]	; (3d30 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	681a      	ldr	r2, [r3, #0]
    3ce6:	4813      	ldr	r0, [pc, #76]	; (3d34 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3ce8:	4613      	mov	r3, r2
    3cea:	00db      	lsls	r3, r3, #3
    3cec:	4413      	add	r3, r2
    3cee:	4403      	add	r3, r0
    3cf0:	3306      	adds	r3, #6
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3cf8:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3cfa:	9b03      	ldr	r3, [sp, #12]
    3cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3d00:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	889b      	ldrh	r3, [r3, #4]
    3d06:	079b      	lsls	r3, r3, #30
    3d08:	9a03      	ldr	r2, [sp, #12]
    3d0a:	4313      	orrs	r3, r2
    3d0c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3d0e:	4908      	ldr	r1, [pc, #32]	; (3d30 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	681a      	ldr	r2, [r3, #0]
    3d14:	4807      	ldr	r0, [pc, #28]	; (3d34 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3d16:	4613      	mov	r3, r2
    3d18:	00db      	lsls	r3, r3, #3
    3d1a:	4413      	add	r3, r2
    3d1c:	4403      	add	r3, r0
    3d1e:	3306      	adds	r3, #6
    3d20:	781b      	ldrb	r3, [r3, #0]
    3d22:	461a      	mov	r2, r3
    3d24:	9b03      	ldr	r3, [sp, #12]
    3d26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3d2a:	bf00      	nop
    3d2c:	b004      	add	sp, #16
    3d2e:	4770      	bx	lr
    3d30:	40065000 	.word	0x40065000
    3d34:	000107c0 	.word	0x000107c0

00003d38 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3d38:	b086      	sub	sp, #24
    3d3a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3d3c:	9b01      	ldr	r3, [sp, #4]
    3d3e:	889b      	ldrh	r3, [r3, #4]
    3d40:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3d42:	9b01      	ldr	r3, [sp, #4]
    3d44:	681a      	ldr	r2, [r3, #0]
    3d46:	4910      	ldr	r1, [pc, #64]	; (3d88 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3d48:	4613      	mov	r3, r2
    3d4a:	00db      	lsls	r3, r3, #3
    3d4c:	4413      	add	r3, r2
    3d4e:	440b      	add	r3, r1
    3d50:	3306      	adds	r3, #6
    3d52:	781b      	ldrb	r3, [r3, #0]
    3d54:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3d56:	4b0d      	ldr	r3, [pc, #52]	; (3d8c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d5a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3d5c:	2201      	movs	r2, #1
    3d5e:	9b04      	ldr	r3, [sp, #16]
    3d60:	fa02 f303 	lsl.w	r3, r2, r3
    3d64:	43db      	mvns	r3, r3
    3d66:	9a03      	ldr	r2, [sp, #12]
    3d68:	4013      	ands	r3, r2
    3d6a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3d6c:	9a05      	ldr	r2, [sp, #20]
    3d6e:	9b04      	ldr	r3, [sp, #16]
    3d70:	fa02 f303 	lsl.w	r3, r2, r3
    3d74:	9a03      	ldr	r2, [sp, #12]
    3d76:	4313      	orrs	r3, r2
    3d78:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3d7a:	4a04      	ldr	r2, [pc, #16]	; (3d8c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3d7c:	9b03      	ldr	r3, [sp, #12]
    3d7e:	6413      	str	r3, [r2, #64]	; 0x40
}
    3d80:	bf00      	nop
    3d82:	b006      	add	sp, #24
    3d84:	4770      	bx	lr
    3d86:	bf00      	nop
    3d88:	000107c0 	.word	0x000107c0
    3d8c:	40048000 	.word	0x40048000

00003d90 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3d90:	b084      	sub	sp, #16
    3d92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3d94:	4b0a      	ldr	r3, [pc, #40]	; (3dc0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d98:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3d9a:	9b01      	ldr	r3, [sp, #4]
    3d9c:	889b      	ldrh	r3, [r3, #4]
    3d9e:	2b01      	cmp	r3, #1
    3da0:	d104      	bne.n	3dac <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3da2:	9b03      	ldr	r3, [sp, #12]
    3da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3da8:	9303      	str	r3, [sp, #12]
    3daa:	e003      	b.n	3db4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3dac:	9b03      	ldr	r3, [sp, #12]
    3dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3db2:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3db4:	4a02      	ldr	r2, [pc, #8]	; (3dc0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3db6:	9b03      	ldr	r3, [sp, #12]
    3db8:	6693      	str	r3, [r2, #104]	; 0x68
}
    3dba:	bf00      	nop
    3dbc:	b004      	add	sp, #16
    3dbe:	4770      	bx	lr
    3dc0:	40048000 	.word	0x40048000

00003dc4 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3dc4:	b082      	sub	sp, #8
    3dc6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3dc8:	bf00      	nop
    3dca:	b002      	add	sp, #8
    3dcc:	4770      	bx	lr

00003dce <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3dce:	b082      	sub	sp, #8
    3dd0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3dd2:	bf00      	nop
    3dd4:	b002      	add	sp, #8
    3dd6:	4770      	bx	lr

00003dd8 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3dd8:	b500      	push	{lr}
    3dda:	b083      	sub	sp, #12
    3ddc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dde:	9b01      	ldr	r3, [sp, #4]
    3de0:	2b00      	cmp	r3, #0
    3de2:	d002      	beq.n	3dea <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3de4:	9801      	ldr	r0, [sp, #4]
    3de6:	f000 f8d1 	bl	3f8c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dea:	bf00      	nop
    3dec:	b003      	add	sp, #12
    3dee:	f85d fb04 	ldr.w	pc, [sp], #4

00003df2 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3df2:	b500      	push	{lr}
    3df4:	b083      	sub	sp, #12
    3df6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3df8:	9b01      	ldr	r3, [sp, #4]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d002      	beq.n	3e04 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3dfe:	9801      	ldr	r0, [sp, #4]
    3e00:	f000 f950 	bl	40a4 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e04:	bf00      	nop
    3e06:	b003      	add	sp, #12
    3e08:	f85d fb04 	ldr.w	pc, [sp], #4

00003e0c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3e0c:	b500      	push	{lr}
    3e0e:	b083      	sub	sp, #12
    3e10:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3e12:	9801      	ldr	r0, [sp, #4]
    3e14:	f000 f98e 	bl	4134 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e18:	bf00      	nop
    3e1a:	b003      	add	sp, #12
    3e1c:	f85d fb04 	ldr.w	pc, [sp], #4

00003e20 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3e20:	b500      	push	{lr}
    3e22:	b083      	sub	sp, #12
    3e24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e26:	9b01      	ldr	r3, [sp, #4]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d002      	beq.n	3e32 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3e2c:	9801      	ldr	r0, [sp, #4]
    3e2e:	f000 f999 	bl	4164 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e32:	bf00      	nop
    3e34:	b003      	add	sp, #12
    3e36:	f85d fb04 	ldr.w	pc, [sp], #4

00003e3a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3e3a:	b500      	push	{lr}
    3e3c:	b083      	sub	sp, #12
    3e3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e40:	9b01      	ldr	r3, [sp, #4]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d002      	beq.n	3e4c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3e46:	9801      	ldr	r0, [sp, #4]
    3e48:	f000 f9b0 	bl	41ac <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e4c:	bf00      	nop
    3e4e:	b003      	add	sp, #12
    3e50:	f85d fb04 	ldr.w	pc, [sp], #4

00003e54 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3e54:	b500      	push	{lr}
    3e56:	b083      	sub	sp, #12
    3e58:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3e5a:	9801      	ldr	r0, [sp, #4]
    3e5c:	f000 f9ba 	bl	41d4 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e60:	bf00      	nop
    3e62:	b003      	add	sp, #12
    3e64:	f85d fb04 	ldr.w	pc, [sp], #4

00003e68 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3e68:	b500      	push	{lr}
    3e6a:	b083      	sub	sp, #12
    3e6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e6e:	9b01      	ldr	r3, [sp, #4]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d002      	beq.n	3e7a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3e74:	9801      	ldr	r0, [sp, #4]
    3e76:	f000 f9bd 	bl	41f4 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e7a:	bf00      	nop
    3e7c:	b003      	add	sp, #12
    3e7e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e82 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3e82:	b500      	push	{lr}
    3e84:	b083      	sub	sp, #12
    3e86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e88:	9b01      	ldr	r3, [sp, #4]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d002      	beq.n	3e94 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3e8e:	9801      	ldr	r0, [sp, #4]
    3e90:	f000 f9d4 	bl	423c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e94:	bf00      	nop
    3e96:	b003      	add	sp, #12
    3e98:	f85d fb04 	ldr.w	pc, [sp], #4

00003e9c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3e9c:	b500      	push	{lr}
    3e9e:	b083      	sub	sp, #12
    3ea0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3ea2:	9801      	ldr	r0, [sp, #4]
    3ea4:	f000 f9de 	bl	4264 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3ea8:	bf00      	nop
    3eaa:	b003      	add	sp, #12
    3eac:	f85d fb04 	ldr.w	pc, [sp], #4

00003eb0 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3eb0:	b500      	push	{lr}
    3eb2:	b089      	sub	sp, #36	; 0x24
    3eb4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3eb6:	2300      	movs	r3, #0
    3eb8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3ebc:	4b20      	ldr	r3, [pc, #128]	; (3f40 <SetInputSouceSytemClock+0x90>)
    3ebe:	695b      	ldr	r3, [r3, #20]
    3ec0:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3ec2:	9b06      	ldr	r3, [sp, #24]
    3ec4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ec8:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3eca:	9b01      	ldr	r3, [sp, #4]
    3ecc:	061b      	lsls	r3, r3, #24
    3ece:	9a06      	ldr	r2, [sp, #24]
    3ed0:	4313      	orrs	r3, r2
    3ed2:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3ed4:	4a1a      	ldr	r2, [pc, #104]	; (3f40 <SetInputSouceSytemClock+0x90>)
    3ed6:	9b06      	ldr	r3, [sp, #24]
    3ed8:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3eda:	aa02      	add	r2, sp, #8
    3edc:	a903      	add	r1, sp, #12
    3ede:	a804      	add	r0, sp, #16
    3ee0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ee4:	f7ff f9ac 	bl	3240 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3ee8:	4b15      	ldr	r3, [pc, #84]	; (3f40 <SetInputSouceSytemClock+0x90>)
    3eea:	691b      	ldr	r3, [r3, #16]
    3eec:	0e1b      	lsrs	r3, r3, #24
    3eee:	f003 030f 	and.w	r3, r3, #15
    3ef2:	9a01      	ldr	r2, [sp, #4]
    3ef4:	429a      	cmp	r2, r3
    3ef6:	bf0c      	ite	eq
    3ef8:	2301      	moveq	r3, #1
    3efa:	2300      	movne	r3, #0
    3efc:	b2db      	uxtb	r3, r3
    3efe:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f00:	9a02      	ldr	r2, [sp, #8]
    3f02:	a903      	add	r1, sp, #12
    3f04:	ab04      	add	r3, sp, #16
    3f06:	4618      	mov	r0, r3
    3f08:	f7ff f9b4 	bl	3274 <Clock_Ip_TimeoutExpired>
    3f0c:	4603      	mov	r3, r0
    3f0e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3f12:	9b05      	ldr	r3, [sp, #20]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d106      	bne.n	3f26 <SetInputSouceSytemClock+0x76>
    3f18:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f1c:	f083 0301 	eor.w	r3, r3, #1
    3f20:	b2db      	uxtb	r3, r3
    3f22:	2b00      	cmp	r3, #0
    3f24:	d1e0      	bne.n	3ee8 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3f26:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d003      	beq.n	3f36 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3f2e:	2105      	movs	r1, #5
    3f30:	2001      	movs	r0, #1
    3f32:	f7ff f975 	bl	3220 <Clock_Ip_ReportClockErrors>
    }
}
    3f36:	bf00      	nop
    3f38:	b009      	add	sp, #36	; 0x24
    3f3a:	f85d fb04 	ldr.w	pc, [sp], #4
    3f3e:	bf00      	nop
    3f40:	40064000 	.word	0x40064000

00003f44 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3f44:	b500      	push	{lr}
    3f46:	b083      	sub	sp, #12
    3f48:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f4a:	9b01      	ldr	r3, [sp, #4]
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d002      	beq.n	3f56 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3f50:	9801      	ldr	r0, [sp, #4]
    3f52:	f000 f997 	bl	4284 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f56:	bf00      	nop
    3f58:	b003      	add	sp, #12
    3f5a:	f85d fb04 	ldr.w	pc, [sp], #4

00003f5e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3f5e:	b500      	push	{lr}
    3f60:	b083      	sub	sp, #12
    3f62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f64:	9b01      	ldr	r3, [sp, #4]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d002      	beq.n	3f70 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3f6a:	9801      	ldr	r0, [sp, #4]
    3f6c:	f000 fa7e 	bl	446c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f70:	bf00      	nop
    3f72:	b003      	add	sp, #12
    3f74:	f85d fb04 	ldr.w	pc, [sp], #4

00003f78 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3f78:	b500      	push	{lr}
    3f7a:	b083      	sub	sp, #12
    3f7c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3f7e:	9801      	ldr	r0, [sp, #4]
    3f80:	f000 fab8 	bl	44f4 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f84:	bf00      	nop
    3f86:	b003      	add	sp, #12
    3f88:	f85d fb04 	ldr.w	pc, [sp], #4

00003f8c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f8c:	b500      	push	{lr}
    3f8e:	b08b      	sub	sp, #44	; 0x2c
    3f90:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3f92:	2300      	movs	r3, #0
    3f94:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3f98:	9b01      	ldr	r3, [sp, #4]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d10b      	bne.n	3fb6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3f9e:	2305      	movs	r3, #5
    3fa0:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3fa2:	2301      	movs	r3, #1
    3fa4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3fa8:	2301      	movs	r3, #1
    3faa:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3fae:	2301      	movs	r3, #1
    3fb0:	f88d 3010 	strb.w	r3, [sp, #16]
    3fb4:	e00e      	b.n	3fd4 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3fb6:	9b01      	ldr	r3, [sp, #4]
    3fb8:	681b      	ldr	r3, [r3, #0]
    3fba:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3fbc:	9b01      	ldr	r3, [sp, #4]
    3fbe:	79db      	ldrb	r3, [r3, #7]
    3fc0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	889b      	ldrh	r3, [r3, #4]
    3fc8:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3fcc:	9b01      	ldr	r3, [sp, #4]
    3fce:	7a1b      	ldrb	r3, [r3, #8]
    3fd0:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3fd4:	4b32      	ldr	r3, [pc, #200]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fda:	4a31      	ldr	r2, [pc, #196]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fe0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3fe4:	4b2e      	ldr	r3, [pc, #184]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fea:	4a2d      	ldr	r2, [pc, #180]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fec:	f023 0301 	bic.w	r3, r3, #1
    3ff0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ff4:	4b2a      	ldr	r3, [pc, #168]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ffa:	4a29      	ldr	r2, [pc, #164]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ffc:	f023 0304 	bic.w	r3, r3, #4
    4000:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    4004:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4008:	2b01      	cmp	r3, #1
    400a:	d144      	bne.n	4096 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    400c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4010:	4a23      	ldr	r2, [pc, #140]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4012:	f003 0301 	and.w	r3, r3, #1
    4016:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    401a:	4b21      	ldr	r3, [pc, #132]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    401c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4020:	4a1f      	ldr	r2, [pc, #124]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4022:	f043 0301 	orr.w	r3, r3, #1
    4026:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    402a:	4b1d      	ldr	r3, [pc, #116]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    402c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4030:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4034:	009b      	lsls	r3, r3, #2
    4036:	f003 0304 	and.w	r3, r3, #4
    403a:	4919      	ldr	r1, [pc, #100]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    403c:	4313      	orrs	r3, r2
    403e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4042:	aa05      	add	r2, sp, #20
    4044:	a906      	add	r1, sp, #24
    4046:	a807      	add	r0, sp, #28
    4048:	f24c 3350 	movw	r3, #50000	; 0xc350
    404c:	f7ff f8f8 	bl	3240 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4050:	4b13      	ldr	r3, [pc, #76]	; (40a0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4052:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4056:	0e1b      	lsrs	r3, r3, #24
    4058:	f003 0301 	and.w	r3, r3, #1
    405c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    405e:	9a05      	ldr	r2, [sp, #20]
    4060:	a906      	add	r1, sp, #24
    4062:	ab07      	add	r3, sp, #28
    4064:	4618      	mov	r0, r3
    4066:	f7ff f905 	bl	3274 <Clock_Ip_TimeoutExpired>
    406a:	4603      	mov	r3, r0
    406c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4070:	9b08      	ldr	r3, [sp, #32]
    4072:	2b00      	cmp	r3, #0
    4074:	d106      	bne.n	4084 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    4076:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    407a:	f083 0301 	eor.w	r3, r3, #1
    407e:	b2db      	uxtb	r3, r3
    4080:	2b00      	cmp	r3, #0
    4082:	d1e5      	bne.n	4050 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4084:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4088:	2b00      	cmp	r3, #0
    408a:	d004      	beq.n	4096 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    408c:	9b02      	ldr	r3, [sp, #8]
    408e:	4619      	mov	r1, r3
    4090:	2001      	movs	r0, #1
    4092:	f7ff f8c5 	bl	3220 <Clock_Ip_ReportClockErrors>
        }
    }
}
    4096:	bf00      	nop
    4098:	b00b      	add	sp, #44	; 0x2c
    409a:	f85d fb04 	ldr.w	pc, [sp], #4
    409e:	bf00      	nop
    40a0:	40064000 	.word	0x40064000

000040a4 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    40a4:	b500      	push	{lr}
    40a6:	b089      	sub	sp, #36	; 0x24
    40a8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    40aa:	2300      	movs	r3, #0
    40ac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    40b0:	4b1f      	ldr	r3, [pc, #124]	; (4130 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40b6:	4a1e      	ldr	r2, [pc, #120]	; (4130 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40b8:	f043 0301 	orr.w	r3, r3, #1
    40bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    40c0:	4b1b      	ldr	r3, [pc, #108]	; (4130 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40c6:	4a1a      	ldr	r2, [pc, #104]	; (4130 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40c8:	f043 0304 	orr.w	r3, r3, #4
    40cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40d0:	aa03      	add	r2, sp, #12
    40d2:	a904      	add	r1, sp, #16
    40d4:	a805      	add	r0, sp, #20
    40d6:	f24c 3350 	movw	r3, #50000	; 0xc350
    40da:	f7ff f8b1 	bl	3240 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    40de:	4b14      	ldr	r3, [pc, #80]	; (4130 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40e4:	0e1b      	lsrs	r3, r3, #24
    40e6:	f003 0301 	and.w	r3, r3, #1
    40ea:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40ec:	9a03      	ldr	r2, [sp, #12]
    40ee:	a904      	add	r1, sp, #16
    40f0:	ab05      	add	r3, sp, #20
    40f2:	4618      	mov	r0, r3
    40f4:	f7ff f8be 	bl	3274 <Clock_Ip_TimeoutExpired>
    40f8:	4603      	mov	r3, r0
    40fa:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40fe:	9b06      	ldr	r3, [sp, #24]
    4100:	2b00      	cmp	r3, #0
    4102:	d106      	bne.n	4112 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    4104:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4108:	f083 0301 	eor.w	r3, r3, #1
    410c:	b2db      	uxtb	r3, r3
    410e:	2b00      	cmp	r3, #0
    4110:	d1e5      	bne.n	40de <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    4112:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4116:	2b00      	cmp	r3, #0
    4118:	d005      	beq.n	4126 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    411a:	9b01      	ldr	r3, [sp, #4]
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	4619      	mov	r1, r3
    4120:	2001      	movs	r0, #1
    4122:	f7ff f87d 	bl	3220 <Clock_Ip_ReportClockErrors>
    }
}
    4126:	bf00      	nop
    4128:	b009      	add	sp, #36	; 0x24
    412a:	f85d fb04 	ldr.w	pc, [sp], #4
    412e:	bf00      	nop
    4130:	40064000 	.word	0x40064000

00004134 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    4134:	b082      	sub	sp, #8
    4136:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    4138:	4b09      	ldr	r3, [pc, #36]	; (4160 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    413a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    413e:	4a08      	ldr	r2, [pc, #32]	; (4160 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4140:	f023 0301 	bic.w	r3, r3, #1
    4144:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4148:	4b05      	ldr	r3, [pc, #20]	; (4160 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    414a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    414e:	4a04      	ldr	r2, [pc, #16]	; (4160 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4150:	f023 0304 	bic.w	r3, r3, #4
    4154:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4158:	bf00      	nop
    415a:	b002      	add	sp, #8
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	40064000 	.word	0x40064000

00004164 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4164:	b082      	sub	sp, #8
    4166:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4168:	4b0f      	ldr	r3, [pc, #60]	; (41a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    416a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    416e:	4a0e      	ldr	r2, [pc, #56]	; (41a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4170:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4174:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4178:	4b0b      	ldr	r3, [pc, #44]	; (41a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    417a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    417e:	4a0a      	ldr	r2, [pc, #40]	; (41a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4180:	f023 0304 	bic.w	r3, r3, #4
    4184:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4188:	4b07      	ldr	r3, [pc, #28]	; (41a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    418a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    418e:	9b01      	ldr	r3, [sp, #4]
    4190:	7a1b      	ldrb	r3, [r3, #8]
    4192:	009b      	lsls	r3, r3, #2
    4194:	f003 0304 	and.w	r3, r3, #4
    4198:	4903      	ldr	r1, [pc, #12]	; (41a8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    419a:	4313      	orrs	r3, r2
    419c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    41a0:	bf00      	nop
    41a2:	b002      	add	sp, #8
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop
    41a8:	40064000 	.word	0x40064000

000041ac <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    41ac:	b082      	sub	sp, #8
    41ae:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    41b0:	9b01      	ldr	r3, [sp, #4]
    41b2:	889b      	ldrh	r3, [r3, #4]
    41b4:	2b01      	cmp	r3, #1
    41b6:	d107      	bne.n	41c8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    41b8:	4b05      	ldr	r3, [pc, #20]	; (41d0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    41ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41be:	4a04      	ldr	r2, [pc, #16]	; (41d0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    41c0:	f043 0304 	orr.w	r3, r3, #4
    41c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    41c8:	bf00      	nop
    41ca:	b002      	add	sp, #8
    41cc:	4770      	bx	lr
    41ce:	bf00      	nop
    41d0:	40064000 	.word	0x40064000

000041d4 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    41d4:	b082      	sub	sp, #8
    41d6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    41d8:	4b05      	ldr	r3, [pc, #20]	; (41f0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    41da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41de:	4a04      	ldr	r2, [pc, #16]	; (41f0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    41e0:	f023 0304 	bic.w	r3, r3, #4
    41e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    41e8:	bf00      	nop
    41ea:	b002      	add	sp, #8
    41ec:	4770      	bx	lr
    41ee:	bf00      	nop
    41f0:	40064000 	.word	0x40064000

000041f4 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    41f4:	b082      	sub	sp, #8
    41f6:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    41f8:	4b0f      	ldr	r3, [pc, #60]	; (4238 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41fe:	4a0e      	ldr	r2, [pc, #56]	; (4238 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4200:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4204:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4208:	4b0b      	ldr	r3, [pc, #44]	; (4238 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    420a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    420e:	4a0a      	ldr	r2, [pc, #40]	; (4238 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4210:	f023 0302 	bic.w	r3, r3, #2
    4214:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4218:	4b07      	ldr	r3, [pc, #28]	; (4238 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    421a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	7a5b      	ldrb	r3, [r3, #9]
    4222:	005b      	lsls	r3, r3, #1
    4224:	f003 0302 	and.w	r3, r3, #2
    4228:	4903      	ldr	r1, [pc, #12]	; (4238 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    422a:	4313      	orrs	r3, r2
    422c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4230:	bf00      	nop
    4232:	b002      	add	sp, #8
    4234:	4770      	bx	lr
    4236:	bf00      	nop
    4238:	40064000 	.word	0x40064000

0000423c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    423c:	b082      	sub	sp, #8
    423e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4240:	9b01      	ldr	r3, [sp, #4]
    4242:	889b      	ldrh	r3, [r3, #4]
    4244:	2b01      	cmp	r3, #1
    4246:	d107      	bne.n	4258 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4248:	4b05      	ldr	r3, [pc, #20]	; (4260 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    424a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    424e:	4a04      	ldr	r2, [pc, #16]	; (4260 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4250:	f043 0302 	orr.w	r3, r3, #2
    4254:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4258:	bf00      	nop
    425a:	b002      	add	sp, #8
    425c:	4770      	bx	lr
    425e:	bf00      	nop
    4260:	40064000 	.word	0x40064000

00004264 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4264:	b082      	sub	sp, #8
    4266:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4268:	4b05      	ldr	r3, [pc, #20]	; (4280 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    426a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    426e:	4a04      	ldr	r2, [pc, #16]	; (4280 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4270:	f023 0302 	bic.w	r3, r3, #2
    4274:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4278:	bf00      	nop
    427a:	b002      	add	sp, #8
    427c:	4770      	bx	lr
    427e:	bf00      	nop
    4280:	40064000 	.word	0x40064000

00004284 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4284:	b500      	push	{lr}
    4286:	b08b      	sub	sp, #44	; 0x2c
    4288:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    428a:	9b01      	ldr	r3, [sp, #4]
    428c:	681a      	ldr	r2, [r3, #0]
    428e:	4975      	ldr	r1, [pc, #468]	; (4464 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4290:	4613      	mov	r3, r2
    4292:	00db      	lsls	r3, r3, #3
    4294:	4413      	add	r3, r2
    4296:	440b      	add	r3, r1
    4298:	781b      	ldrb	r3, [r3, #0]
    429a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    429c:	2300      	movs	r3, #0
    429e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    42a2:	2300      	movs	r3, #0
    42a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    42a8:	4b6f      	ldr	r3, [pc, #444]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    42ae:	4a6e      	ldr	r2, [pc, #440]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    42b4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    42b8:	4b6b      	ldr	r3, [pc, #428]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    42be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    42c2:	2b00      	cmp	r3, #0
    42c4:	d07d      	beq.n	43c2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    42c6:	9b01      	ldr	r3, [sp, #4]
    42c8:	79db      	ldrb	r3, [r3, #7]
    42ca:	461a      	mov	r2, r3
    42cc:	4b66      	ldr	r3, [pc, #408]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42ce:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    42d2:	f003 0303 	and.w	r3, r3, #3
    42d6:	429a      	cmp	r2, r3
    42d8:	d10b      	bne.n	42f2 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	799b      	ldrb	r3, [r3, #6]
    42de:	461a      	mov	r2, r3
    42e0:	4b61      	ldr	r3, [pc, #388]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    42e6:	08db      	lsrs	r3, r3, #3
    42e8:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    42ec:	429a      	cmp	r2, r3
    42ee:	f000 80b4 	beq.w	445a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    42f2:	4b5d      	ldr	r3, [pc, #372]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    42f8:	f003 0301 	and.w	r3, r3, #1
    42fc:	2b00      	cmp	r3, #0
    42fe:	d105      	bne.n	430c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4300:	2301      	movs	r3, #1
    4302:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4306:	2000      	movs	r0, #0
    4308:	f7ff fd66 	bl	3dd8 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    430c:	2002      	movs	r0, #2
    430e:	f7ff fdcf 	bl	3eb0 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4312:	4b55      	ldr	r3, [pc, #340]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4314:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4318:	4a53      	ldr	r2, [pc, #332]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    431a:	f023 0301 	bic.w	r3, r3, #1
    431e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	889b      	ldrh	r3, [r3, #4]
    4326:	2b01      	cmp	r3, #1
    4328:	f040 8097 	bne.w	445a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    432c:	9b01      	ldr	r3, [sp, #4]
    432e:	79db      	ldrb	r3, [r3, #7]
    4330:	4a4d      	ldr	r2, [pc, #308]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4332:	f003 0303 	and.w	r3, r3, #3
    4336:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    433a:	4b4b      	ldr	r3, [pc, #300]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    433c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4340:	9b01      	ldr	r3, [sp, #4]
    4342:	799b      	ldrb	r3, [r3, #6]
    4344:	00db      	lsls	r3, r3, #3
    4346:	f003 0308 	and.w	r3, r3, #8
    434a:	4313      	orrs	r3, r2
    434c:	4a46      	ldr	r2, [pc, #280]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    434e:	f043 0301 	orr.w	r3, r3, #1
    4352:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4356:	aa03      	add	r2, sp, #12
    4358:	a904      	add	r1, sp, #16
    435a:	a805      	add	r0, sp, #20
    435c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4360:	f7fe ff6e 	bl	3240 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4364:	4b40      	ldr	r3, [pc, #256]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4366:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    436a:	0e1b      	lsrs	r3, r3, #24
    436c:	f003 0301 	and.w	r3, r3, #1
    4370:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4372:	9a03      	ldr	r2, [sp, #12]
    4374:	a904      	add	r1, sp, #16
    4376:	ab05      	add	r3, sp, #20
    4378:	4618      	mov	r0, r3
    437a:	f7fe ff7b 	bl	3274 <Clock_Ip_TimeoutExpired>
    437e:	4603      	mov	r3, r0
    4380:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4384:	9b06      	ldr	r3, [sp, #24]
    4386:	2b00      	cmp	r3, #0
    4388:	d106      	bne.n	4398 <Clock_Ip_SetFirc_TrustedCall+0x114>
    438a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    438e:	f083 0301 	eor.w	r3, r3, #1
    4392:	b2db      	uxtb	r3, r3
    4394:	2b00      	cmp	r3, #0
    4396:	d1e5      	bne.n	4364 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4398:	f89d 301f 	ldrb.w	r3, [sp, #31]
    439c:	2b00      	cmp	r3, #0
    439e:	d005      	beq.n	43ac <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    43a0:	9b01      	ldr	r3, [sp, #4]
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	4619      	mov	r1, r3
    43a6:	2001      	movs	r0, #1
    43a8:	f7fe ff3a 	bl	3220 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    43ac:	2003      	movs	r0, #3
    43ae:	f7ff fd7f 	bl	3eb0 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    43b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    43b6:	2b00      	cmp	r3, #0
    43b8:	d04f      	beq.n	445a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    43ba:	2002      	movs	r0, #2
    43bc:	f7ff fd26 	bl	3e0c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    43c0:	e04b      	b.n	445a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    43c2:	4b29      	ldr	r3, [pc, #164]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43c4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    43c8:	4a27      	ldr	r2, [pc, #156]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43ca:	f023 0301 	bic.w	r3, r3, #1
    43ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    43d2:	9b01      	ldr	r3, [sp, #4]
    43d4:	889b      	ldrh	r3, [r3, #4]
    43d6:	2b01      	cmp	r3, #1
    43d8:	d13f      	bne.n	445a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    43da:	9b01      	ldr	r3, [sp, #4]
    43dc:	79db      	ldrb	r3, [r3, #7]
    43de:	4a22      	ldr	r2, [pc, #136]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43e0:	f003 0303 	and.w	r3, r3, #3
    43e4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    43e8:	4b1f      	ldr	r3, [pc, #124]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43ea:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    43ee:	9b01      	ldr	r3, [sp, #4]
    43f0:	799b      	ldrb	r3, [r3, #6]
    43f2:	00db      	lsls	r3, r3, #3
    43f4:	f003 0308 	and.w	r3, r3, #8
    43f8:	4313      	orrs	r3, r2
    43fa:	4a1b      	ldr	r2, [pc, #108]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43fc:	f043 0301 	orr.w	r3, r3, #1
    4400:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4404:	aa03      	add	r2, sp, #12
    4406:	a904      	add	r1, sp, #16
    4408:	a805      	add	r0, sp, #20
    440a:	f24c 3350 	movw	r3, #50000	; 0xc350
    440e:	f7fe ff17 	bl	3240 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4412:	4b15      	ldr	r3, [pc, #84]	; (4468 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4414:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4418:	0e1b      	lsrs	r3, r3, #24
    441a:	f003 0301 	and.w	r3, r3, #1
    441e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4420:	9a03      	ldr	r2, [sp, #12]
    4422:	a904      	add	r1, sp, #16
    4424:	ab05      	add	r3, sp, #20
    4426:	4618      	mov	r0, r3
    4428:	f7fe ff24 	bl	3274 <Clock_Ip_TimeoutExpired>
    442c:	4603      	mov	r3, r0
    442e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4432:	9b06      	ldr	r3, [sp, #24]
    4434:	2b00      	cmp	r3, #0
    4436:	d106      	bne.n	4446 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4438:	f89d 301f 	ldrb.w	r3, [sp, #31]
    443c:	f083 0301 	eor.w	r3, r3, #1
    4440:	b2db      	uxtb	r3, r3
    4442:	2b00      	cmp	r3, #0
    4444:	d1e5      	bne.n	4412 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4446:	f89d 301f 	ldrb.w	r3, [sp, #31]
    444a:	2b00      	cmp	r3, #0
    444c:	d005      	beq.n	445a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    444e:	9b01      	ldr	r3, [sp, #4]
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	4619      	mov	r1, r3
    4454:	2001      	movs	r0, #1
    4456:	f7fe fee3 	bl	3220 <Clock_Ip_ReportClockErrors>
}
    445a:	bf00      	nop
    445c:	b00b      	add	sp, #44	; 0x2c
    445e:	f85d fb04 	ldr.w	pc, [sp], #4
    4462:	bf00      	nop
    4464:	000107c0 	.word	0x000107c0
    4468:	40064000 	.word	0x40064000

0000446c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    446c:	b500      	push	{lr}
    446e:	b089      	sub	sp, #36	; 0x24
    4470:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4472:	2300      	movs	r3, #0
    4474:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4478:	9b01      	ldr	r3, [sp, #4]
    447a:	889b      	ldrh	r3, [r3, #4]
    447c:	2b01      	cmp	r3, #1
    447e:	d132      	bne.n	44e6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4480:	4b1b      	ldr	r3, [pc, #108]	; (44f0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4482:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4486:	4a1a      	ldr	r2, [pc, #104]	; (44f0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4488:	f043 0301 	orr.w	r3, r3, #1
    448c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4490:	aa03      	add	r2, sp, #12
    4492:	a904      	add	r1, sp, #16
    4494:	a805      	add	r0, sp, #20
    4496:	f24c 3350 	movw	r3, #50000	; 0xc350
    449a:	f7fe fed1 	bl	3240 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    449e:	4b14      	ldr	r3, [pc, #80]	; (44f0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    44a0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    44a4:	0e1b      	lsrs	r3, r3, #24
    44a6:	f003 0301 	and.w	r3, r3, #1
    44aa:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    44ac:	9a03      	ldr	r2, [sp, #12]
    44ae:	a904      	add	r1, sp, #16
    44b0:	ab05      	add	r3, sp, #20
    44b2:	4618      	mov	r0, r3
    44b4:	f7fe fede 	bl	3274 <Clock_Ip_TimeoutExpired>
    44b8:	4603      	mov	r3, r0
    44ba:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    44be:	9b06      	ldr	r3, [sp, #24]
    44c0:	2b00      	cmp	r3, #0
    44c2:	d106      	bne.n	44d2 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    44c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44c8:	f083 0301 	eor.w	r3, r3, #1
    44cc:	b2db      	uxtb	r3, r3
    44ce:	2b00      	cmp	r3, #0
    44d0:	d1e5      	bne.n	449e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    44d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44d6:	2b00      	cmp	r3, #0
    44d8:	d005      	beq.n	44e6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    44da:	9b01      	ldr	r3, [sp, #4]
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	4619      	mov	r1, r3
    44e0:	2001      	movs	r0, #1
    44e2:	f7fe fe9d 	bl	3220 <Clock_Ip_ReportClockErrors>
        }
    }
}
    44e6:	bf00      	nop
    44e8:	b009      	add	sp, #36	; 0x24
    44ea:	f85d fb04 	ldr.w	pc, [sp], #4
    44ee:	bf00      	nop
    44f0:	40064000 	.word	0x40064000

000044f4 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    44f4:	b082      	sub	sp, #8
    44f6:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    44f8:	4b05      	ldr	r3, [pc, #20]	; (4510 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    44fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    44fe:	4a04      	ldr	r2, [pc, #16]	; (4510 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4500:	f023 0301 	bic.w	r3, r3, #1
    4504:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4508:	bf00      	nop
    450a:	b002      	add	sp, #8
    450c:	4770      	bx	lr
    450e:	bf00      	nop
    4510:	40064000 	.word	0x40064000

00004514 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4514:	b082      	sub	sp, #8
    4516:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4518:	bf00      	nop
    451a:	b002      	add	sp, #8
    451c:	4770      	bx	lr

0000451e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    451e:	b082      	sub	sp, #8
    4520:	9001      	str	r0, [sp, #4]
    4522:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4524:	bf00      	nop
    4526:	b002      	add	sp, #8
    4528:	4770      	bx	lr

0000452a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    452a:	b082      	sub	sp, #8
    452c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    452e:	bf00      	nop
    4530:	b002      	add	sp, #8
    4532:	4770      	bx	lr

00004534 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4534:	b082      	sub	sp, #8
    4536:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4538:	bf00      	nop
    453a:	b002      	add	sp, #8
    453c:	4770      	bx	lr

0000453e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    453e:	b082      	sub	sp, #8
    4540:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4542:	2302      	movs	r3, #2
}
    4544:	4618      	mov	r0, r3
    4546:	b002      	add	sp, #8
    4548:	4770      	bx	lr

0000454a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    454a:	b082      	sub	sp, #8
    454c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    454e:	bf00      	nop
    4550:	b002      	add	sp, #8
    4552:	4770      	bx	lr

00004554 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4554:	b500      	push	{lr}
    4556:	b083      	sub	sp, #12
    4558:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    455a:	9b01      	ldr	r3, [sp, #4]
    455c:	2b00      	cmp	r3, #0
    455e:	d002      	beq.n	4566 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4560:	9801      	ldr	r0, [sp, #4]
    4562:	f000 f870 	bl	4646 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4566:	bf00      	nop
    4568:	b003      	add	sp, #12
    456a:	f85d fb04 	ldr.w	pc, [sp], #4

0000456e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    456e:	b500      	push	{lr}
    4570:	b083      	sub	sp, #12
    4572:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4574:	9b01      	ldr	r3, [sp, #4]
    4576:	2b00      	cmp	r3, #0
    4578:	d002      	beq.n	4580 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    457a:	9801      	ldr	r0, [sp, #4]
    457c:	f000 f89a 	bl	46b4 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4580:	bf00      	nop
    4582:	b003      	add	sp, #12
    4584:	f85d fb04 	ldr.w	pc, [sp], #4

00004588 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4588:	b500      	push	{lr}
    458a:	b089      	sub	sp, #36	; 0x24
    458c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    458e:	2301      	movs	r3, #1
    4590:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4592:	2300      	movs	r3, #0
    4594:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4598:	4b1e      	ldr	r3, [pc, #120]	; (4614 <Clock_Ip_CompleteSpll+0x8c>)
    459a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    459e:	f003 0301 	and.w	r3, r3, #1
    45a2:	2b00      	cmp	r3, #0
    45a4:	d02f      	beq.n	4606 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    45a6:	aa02      	add	r2, sp, #8
    45a8:	a903      	add	r1, sp, #12
    45aa:	a804      	add	r0, sp, #16
    45ac:	f24c 3350 	movw	r3, #50000	; 0xc350
    45b0:	f7fe fe46 	bl	3240 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    45b4:	4b17      	ldr	r3, [pc, #92]	; (4614 <Clock_Ip_CompleteSpll+0x8c>)
    45b6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    45ba:	0e1b      	lsrs	r3, r3, #24
    45bc:	f003 0301 	and.w	r3, r3, #1
    45c0:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    45c2:	9a02      	ldr	r2, [sp, #8]
    45c4:	a903      	add	r1, sp, #12
    45c6:	ab04      	add	r3, sp, #16
    45c8:	4618      	mov	r0, r3
    45ca:	f7fe fe53 	bl	3274 <Clock_Ip_TimeoutExpired>
    45ce:	4603      	mov	r3, r0
    45d0:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    45d4:	9b05      	ldr	r3, [sp, #20]
    45d6:	2b00      	cmp	r3, #0
    45d8:	d106      	bne.n	45e8 <Clock_Ip_CompleteSpll+0x60>
    45da:	f89d 301b 	ldrb.w	r3, [sp, #27]
    45de:	f083 0301 	eor.w	r3, r3, #1
    45e2:	b2db      	uxtb	r3, r3
    45e4:	2b00      	cmp	r3, #0
    45e6:	d1e5      	bne.n	45b4 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    45e8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    45ec:	f083 0301 	eor.w	r3, r3, #1
    45f0:	b2db      	uxtb	r3, r3
    45f2:	2b00      	cmp	r3, #0
    45f4:	d002      	beq.n	45fc <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    45f6:	2302      	movs	r3, #2
    45f8:	9307      	str	r3, [sp, #28]
    45fa:	e006      	b.n	460a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    45fc:	9901      	ldr	r1, [sp, #4]
    45fe:	2001      	movs	r0, #1
    4600:	f7fe fe0e 	bl	3220 <Clock_Ip_ReportClockErrors>
    4604:	e001      	b.n	460a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4606:	2300      	movs	r3, #0
    4608:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    460a:	9b07      	ldr	r3, [sp, #28]
}
    460c:	4618      	mov	r0, r3
    460e:	b009      	add	sp, #36	; 0x24
    4610:	f85d fb04 	ldr.w	pc, [sp], #4
    4614:	40064000 	.word	0x40064000

00004618 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4618:	b500      	push	{lr}
    461a:	b083      	sub	sp, #12
    461c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    461e:	9801      	ldr	r0, [sp, #4]
    4620:	f000 f886 	bl	4730 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4624:	bf00      	nop
    4626:	b003      	add	sp, #12
    4628:	f85d fb04 	ldr.w	pc, [sp], #4

0000462c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    462c:	b500      	push	{lr}
    462e:	b083      	sub	sp, #12
    4630:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4632:	9b01      	ldr	r3, [sp, #4]
    4634:	2b00      	cmp	r3, #0
    4636:	d002      	beq.n	463e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4638:	9801      	ldr	r0, [sp, #4]
    463a:	f000 f891 	bl	4760 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    463e:	bf00      	nop
    4640:	b003      	add	sp, #12
    4642:	f85d fb04 	ldr.w	pc, [sp], #4

00004646 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4646:	b082      	sub	sp, #8
    4648:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    464a:	4b19      	ldr	r3, [pc, #100]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    464c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4650:	4a17      	ldr	r2, [pc, #92]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4652:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4656:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    465a:	4b15      	ldr	r3, [pc, #84]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    465c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4660:	4a13      	ldr	r2, [pc, #76]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4666:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    466a:	4b11      	ldr	r3, [pc, #68]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    466c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4670:	4a0f      	ldr	r2, [pc, #60]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4672:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4676:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    467a:	4b0d      	ldr	r3, [pc, #52]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    467c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4680:	4a0b      	ldr	r2, [pc, #44]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4682:	f023 0301 	bic.w	r3, r3, #1
    4686:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    468a:	4b09      	ldr	r3, [pc, #36]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    468c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4690:	4a07      	ldr	r2, [pc, #28]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4692:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4696:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    469a:	4b05      	ldr	r3, [pc, #20]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    469c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    46a0:	4a03      	ldr	r2, [pc, #12]	; (46b0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    46a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    46a6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    46aa:	bf00      	nop
    46ac:	b002      	add	sp, #8
    46ae:	4770      	bx	lr
    46b0:	40064000 	.word	0x40064000

000046b4 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    46b4:	b082      	sub	sp, #8
    46b6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    46b8:	9b01      	ldr	r3, [sp, #4]
    46ba:	889b      	ldrh	r3, [r3, #4]
    46bc:	2b01      	cmp	r3, #1
    46be:	d12f      	bne.n	4720 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    46c0:	4b1a      	ldr	r3, [pc, #104]	; (472c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46c2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    46c6:	9b01      	ldr	r3, [sp, #4]
    46c8:	7b5b      	ldrb	r3, [r3, #13]
    46ca:	3b01      	subs	r3, #1
    46cc:	021b      	lsls	r3, r3, #8
    46ce:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    46d2:	9b01      	ldr	r3, [sp, #4]
    46d4:	7d1b      	ldrb	r3, [r3, #20]
    46d6:	3b10      	subs	r3, #16
    46d8:	041b      	lsls	r3, r3, #16
    46da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    46de:	430b      	orrs	r3, r1
    46e0:	4912      	ldr	r1, [pc, #72]	; (472c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46e2:	4313      	orrs	r3, r2
    46e4:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    46e8:	9b01      	ldr	r3, [sp, #4]
    46ea:	7fdb      	ldrb	r3, [r3, #31]
    46ec:	2b02      	cmp	r3, #2
    46ee:	d011      	beq.n	4714 <Clock_Ip_SetSpll_TrustedCall+0x60>
    46f0:	2b02      	cmp	r3, #2
    46f2:	dc17      	bgt.n	4724 <Clock_Ip_SetSpll_TrustedCall+0x70>
    46f4:	2b00      	cmp	r3, #0
    46f6:	d002      	beq.n	46fe <Clock_Ip_SetSpll_TrustedCall+0x4a>
    46f8:	2b01      	cmp	r3, #1
    46fa:	d005      	beq.n	4708 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    46fc:	e012      	b.n	4724 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    46fe:	4b0b      	ldr	r3, [pc, #44]	; (472c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4700:	2200      	movs	r2, #0
    4702:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4706:	e00e      	b.n	4726 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4708:	4b08      	ldr	r3, [pc, #32]	; (472c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    470a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    470e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4712:	e008      	b.n	4726 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4714:	4b05      	ldr	r3, [pc, #20]	; (472c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4716:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    471a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    471e:	e002      	b.n	4726 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4720:	bf00      	nop
    4722:	e000      	b.n	4726 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4724:	bf00      	nop
}
    4726:	bf00      	nop
    4728:	b002      	add	sp, #8
    472a:	4770      	bx	lr
    472c:	40064000 	.word	0x40064000

00004730 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4730:	b082      	sub	sp, #8
    4732:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4734:	4b09      	ldr	r3, [pc, #36]	; (475c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4736:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    473a:	4a08      	ldr	r2, [pc, #32]	; (475c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    473c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4740:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4744:	4b05      	ldr	r3, [pc, #20]	; (475c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4746:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    474a:	4a04      	ldr	r2, [pc, #16]	; (475c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    474c:	f023 0301 	bic.w	r3, r3, #1
    4750:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4754:	bf00      	nop
    4756:	b002      	add	sp, #8
    4758:	4770      	bx	lr
    475a:	bf00      	nop
    475c:	40064000 	.word	0x40064000

00004760 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4760:	b082      	sub	sp, #8
    4762:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4764:	9b01      	ldr	r3, [sp, #4]
    4766:	889b      	ldrh	r3, [r3, #4]
    4768:	2b01      	cmp	r3, #1
    476a:	d107      	bne.n	477c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    476c:	4b05      	ldr	r3, [pc, #20]	; (4784 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    476e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4772:	4a04      	ldr	r2, [pc, #16]	; (4784 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4774:	f043 0301 	orr.w	r3, r3, #1
    4778:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    477c:	bf00      	nop
    477e:	b002      	add	sp, #8
    4780:	4770      	bx	lr
    4782:	bf00      	nop
    4784:	40064000 	.word	0x40064000

00004788 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4788:	b082      	sub	sp, #8
    478a:	9001      	str	r0, [sp, #4]
    478c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    478e:	bf00      	nop
    4790:	b002      	add	sp, #8
    4792:	4770      	bx	lr

00004794 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4794:	b082      	sub	sp, #8
    4796:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4798:	bf00      	nop
    479a:	b002      	add	sp, #8
    479c:	4770      	bx	lr

0000479e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    479e:	b500      	push	{lr}
    47a0:	b083      	sub	sp, #12
    47a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d002      	beq.n	47b0 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    47aa:	9801      	ldr	r0, [sp, #4]
    47ac:	f000 f8ee 	bl	498c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47b0:	bf00      	nop
    47b2:	b003      	add	sp, #12
    47b4:	f85d fb04 	ldr.w	pc, [sp], #4

000047b8 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47b8:	b500      	push	{lr}
    47ba:	b083      	sub	sp, #12
    47bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47be:	9b01      	ldr	r3, [sp, #4]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d002      	beq.n	47ca <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    47c4:	9801      	ldr	r0, [sp, #4]
    47c6:	f000 f8ff 	bl	49c8 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47ca:	bf00      	nop
    47cc:	b003      	add	sp, #12
    47ce:	f85d fb04 	ldr.w	pc, [sp], #4

000047d2 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    47d2:	b500      	push	{lr}
    47d4:	b083      	sub	sp, #12
    47d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47d8:	9b01      	ldr	r3, [sp, #4]
    47da:	2b00      	cmp	r3, #0
    47dc:	d002      	beq.n	47e4 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    47de:	9801      	ldr	r0, [sp, #4]
    47e0:	f000 f912 	bl	4a08 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47e4:	bf00      	nop
    47e6:	b003      	add	sp, #12
    47e8:	f85d fb04 	ldr.w	pc, [sp], #4

000047ec <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47ec:	b500      	push	{lr}
    47ee:	b083      	sub	sp, #12
    47f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47f2:	9b01      	ldr	r3, [sp, #4]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d002      	beq.n	47fe <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    47f8:	9801      	ldr	r0, [sp, #4]
    47fa:	f000 f925 	bl	4a48 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47fe:	bf00      	nop
    4800:	b003      	add	sp, #12
    4802:	f85d fb04 	ldr.w	pc, [sp], #4

00004806 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4806:	b500      	push	{lr}
    4808:	b083      	sub	sp, #12
    480a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    480c:	9b01      	ldr	r3, [sp, #4]
    480e:	2b00      	cmp	r3, #0
    4810:	d002      	beq.n	4818 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4812:	9801      	ldr	r0, [sp, #4]
    4814:	f000 f936 	bl	4a84 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4818:	bf00      	nop
    481a:	b003      	add	sp, #12
    481c:	f85d fb04 	ldr.w	pc, [sp], #4

00004820 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4820:	b500      	push	{lr}
    4822:	b083      	sub	sp, #12
    4824:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4826:	9b01      	ldr	r3, [sp, #4]
    4828:	2b00      	cmp	r3, #0
    482a:	d002      	beq.n	4832 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    482c:	9801      	ldr	r0, [sp, #4]
    482e:	f000 f949 	bl	4ac4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4832:	bf00      	nop
    4834:	b003      	add	sp, #12
    4836:	f85d fb04 	ldr.w	pc, [sp], #4

0000483a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    483a:	b500      	push	{lr}
    483c:	b083      	sub	sp, #12
    483e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4840:	9b01      	ldr	r3, [sp, #4]
    4842:	2b00      	cmp	r3, #0
    4844:	d002      	beq.n	484c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4846:	9801      	ldr	r0, [sp, #4]
    4848:	f000 f958 	bl	4afc <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    484c:	bf00      	nop
    484e:	b003      	add	sp, #12
    4850:	f85d fb04 	ldr.w	pc, [sp], #4

00004854 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4854:	b500      	push	{lr}
    4856:	b083      	sub	sp, #12
    4858:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    485a:	9b01      	ldr	r3, [sp, #4]
    485c:	2b00      	cmp	r3, #0
    485e:	d002      	beq.n	4866 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4860:	9801      	ldr	r0, [sp, #4]
    4862:	f000 f969 	bl	4b38 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4866:	bf00      	nop
    4868:	b003      	add	sp, #12
    486a:	f85d fb04 	ldr.w	pc, [sp], #4

0000486e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    486e:	b500      	push	{lr}
    4870:	b083      	sub	sp, #12
    4872:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4874:	9b01      	ldr	r3, [sp, #4]
    4876:	2b00      	cmp	r3, #0
    4878:	d002      	beq.n	4880 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    487a:	9801      	ldr	r0, [sp, #4]
    487c:	f000 f978 	bl	4b70 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4880:	bf00      	nop
    4882:	b003      	add	sp, #12
    4884:	f85d fb04 	ldr.w	pc, [sp], #4

00004888 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4888:	b500      	push	{lr}
    488a:	b083      	sub	sp, #12
    488c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    488e:	9b01      	ldr	r3, [sp, #4]
    4890:	2b00      	cmp	r3, #0
    4892:	d002      	beq.n	489a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4894:	9801      	ldr	r0, [sp, #4]
    4896:	f000 f989 	bl	4bac <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    489a:	bf00      	nop
    489c:	b003      	add	sp, #12
    489e:	f85d fb04 	ldr.w	pc, [sp], #4

000048a2 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    48a2:	b500      	push	{lr}
    48a4:	b083      	sub	sp, #12
    48a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48a8:	9b01      	ldr	r3, [sp, #4]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d002      	beq.n	48b4 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    48ae:	9801      	ldr	r0, [sp, #4]
    48b0:	f000 f998 	bl	4be4 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48b4:	bf00      	nop
    48b6:	b003      	add	sp, #12
    48b8:	f85d fb04 	ldr.w	pc, [sp], #4

000048bc <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    48bc:	b500      	push	{lr}
    48be:	b083      	sub	sp, #12
    48c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48c2:	9b01      	ldr	r3, [sp, #4]
    48c4:	2b00      	cmp	r3, #0
    48c6:	d002      	beq.n	48ce <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    48c8:	9801      	ldr	r0, [sp, #4]
    48ca:	f000 f9a9 	bl	4c20 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48ce:	bf00      	nop
    48d0:	b003      	add	sp, #12
    48d2:	f85d fb04 	ldr.w	pc, [sp], #4

000048d6 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    48d6:	b500      	push	{lr}
    48d8:	b083      	sub	sp, #12
    48da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48dc:	9b01      	ldr	r3, [sp, #4]
    48de:	2b00      	cmp	r3, #0
    48e0:	d002      	beq.n	48e8 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    48e2:	9801      	ldr	r0, [sp, #4]
    48e4:	f000 f9e6 	bl	4cb4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48e8:	bf00      	nop
    48ea:	b003      	add	sp, #12
    48ec:	f85d fb04 	ldr.w	pc, [sp], #4

000048f0 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    48f0:	b500      	push	{lr}
    48f2:	b083      	sub	sp, #12
    48f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	2b00      	cmp	r3, #0
    48fa:	d002      	beq.n	4902 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    48fc:	9801      	ldr	r0, [sp, #4]
    48fe:	f000 fa25 	bl	4d4c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4902:	bf00      	nop
    4904:	b003      	add	sp, #12
    4906:	f85d fb04 	ldr.w	pc, [sp], #4

0000490a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    490a:	b500      	push	{lr}
    490c:	b083      	sub	sp, #12
    490e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4910:	9b01      	ldr	r3, [sp, #4]
    4912:	2b00      	cmp	r3, #0
    4914:	d002      	beq.n	491c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4916:	9801      	ldr	r0, [sp, #4]
    4918:	f000 fa2a 	bl	4d70 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    491c:	bf00      	nop
    491e:	b003      	add	sp, #12
    4920:	f85d fb04 	ldr.w	pc, [sp], #4

00004924 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4924:	b500      	push	{lr}
    4926:	b083      	sub	sp, #12
    4928:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    492a:	9b01      	ldr	r3, [sp, #4]
    492c:	2b00      	cmp	r3, #0
    492e:	d002      	beq.n	4936 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4930:	9801      	ldr	r0, [sp, #4]
    4932:	f000 fa3b 	bl	4dac <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4936:	bf00      	nop
    4938:	b003      	add	sp, #12
    493a:	f85d fb04 	ldr.w	pc, [sp], #4

0000493e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    493e:	b500      	push	{lr}
    4940:	b083      	sub	sp, #12
    4942:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4944:	9b01      	ldr	r3, [sp, #4]
    4946:	2b00      	cmp	r3, #0
    4948:	d002      	beq.n	4950 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    494a:	9801      	ldr	r0, [sp, #4]
    494c:	f000 fa56 	bl	4dfc <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4950:	bf00      	nop
    4952:	b003      	add	sp, #12
    4954:	f85d fb04 	ldr.w	pc, [sp], #4

00004958 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4958:	b500      	push	{lr}
    495a:	b083      	sub	sp, #12
    495c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    495e:	9b01      	ldr	r3, [sp, #4]
    4960:	2b00      	cmp	r3, #0
    4962:	d002      	beq.n	496a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4964:	9801      	ldr	r0, [sp, #4]
    4966:	f000 fa79 	bl	4e5c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    496a:	bf00      	nop
    496c:	b003      	add	sp, #12
    496e:	f85d fb04 	ldr.w	pc, [sp], #4

00004972 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4972:	b500      	push	{lr}
    4974:	b083      	sub	sp, #12
    4976:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4978:	9b01      	ldr	r3, [sp, #4]
    497a:	2b00      	cmp	r3, #0
    497c:	d002      	beq.n	4984 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    497e:	9801      	ldr	r0, [sp, #4]
    4980:	f000 fa8a 	bl	4e98 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4984:	bf00      	nop
    4986:	b003      	add	sp, #12
    4988:	f85d fb04 	ldr.w	pc, [sp], #4

0000498c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    498c:	b084      	sub	sp, #16
    498e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4990:	4b0b      	ldr	r3, [pc, #44]	; (49c0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4992:	795b      	ldrb	r3, [r3, #5]
    4994:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4996:	4b0b      	ldr	r3, [pc, #44]	; (49c4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4998:	695b      	ldr	r3, [r3, #20]
    499a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    499c:	9b02      	ldr	r3, [sp, #8]
    499e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    49a2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    49a4:	9b03      	ldr	r3, [sp, #12]
    49a6:	061b      	lsls	r3, r3, #24
    49a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    49ac:	9a02      	ldr	r2, [sp, #8]
    49ae:	4313      	orrs	r3, r2
    49b0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    49b2:	4a04      	ldr	r2, [pc, #16]	; (49c4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    49b4:	9b02      	ldr	r3, [sp, #8]
    49b6:	6153      	str	r3, [r2, #20]
}
    49b8:	bf00      	nop
    49ba:	b004      	add	sp, #16
    49bc:	4770      	bx	lr
    49be:	bf00      	nop
    49c0:	00010b28 	.word	0x00010b28
    49c4:	40064000 	.word	0x40064000

000049c8 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49c8:	b084      	sub	sp, #16
    49ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49cc:	9b01      	ldr	r3, [sp, #4]
    49ce:	685b      	ldr	r3, [r3, #4]
    49d0:	4a0b      	ldr	r2, [pc, #44]	; (4a00 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    49d2:	5cd3      	ldrb	r3, [r2, r3]
    49d4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    49d6:	4b0b      	ldr	r3, [pc, #44]	; (4a04 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    49d8:	695b      	ldr	r3, [r3, #20]
    49da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    49dc:	9b02      	ldr	r3, [sp, #8]
    49de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    49e2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    49e4:	9b03      	ldr	r3, [sp, #12]
    49e6:	061b      	lsls	r3, r3, #24
    49e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    49ec:	9a02      	ldr	r2, [sp, #8]
    49ee:	4313      	orrs	r3, r2
    49f0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    49f2:	4a04      	ldr	r2, [pc, #16]	; (4a04 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    49f4:	9b02      	ldr	r3, [sp, #8]
    49f6:	6153      	str	r3, [r2, #20]
}
    49f8:	bf00      	nop
    49fa:	b004      	add	sp, #16
    49fc:	4770      	bx	lr
    49fe:	bf00      	nop
    4a00:	00010b28 	.word	0x00010b28
    4a04:	40064000 	.word	0x40064000

00004a08 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a08:	b084      	sub	sp, #16
    4a0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a0c:	9b01      	ldr	r3, [sp, #4]
    4a0e:	685b      	ldr	r3, [r3, #4]
    4a10:	4a0b      	ldr	r2, [pc, #44]	; (4a40 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4a12:	5cd3      	ldrb	r3, [r2, r3]
    4a14:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4a16:	4b0b      	ldr	r3, [pc, #44]	; (4a44 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4a18:	699b      	ldr	r3, [r3, #24]
    4a1a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4a1c:	9b02      	ldr	r3, [sp, #8]
    4a1e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a22:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4a24:	9b03      	ldr	r3, [sp, #12]
    4a26:	061b      	lsls	r3, r3, #24
    4a28:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a2c:	9a02      	ldr	r2, [sp, #8]
    4a2e:	4313      	orrs	r3, r2
    4a30:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4a32:	4a04      	ldr	r2, [pc, #16]	; (4a44 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4a34:	9b02      	ldr	r3, [sp, #8]
    4a36:	6193      	str	r3, [r2, #24]
}
    4a38:	bf00      	nop
    4a3a:	b004      	add	sp, #16
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop
    4a40:	00010b28 	.word	0x00010b28
    4a44:	40064000 	.word	0x40064000

00004a48 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a48:	b084      	sub	sp, #16
    4a4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a4c:	4b0b      	ldr	r3, [pc, #44]	; (4a7c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4a4e:	795b      	ldrb	r3, [r3, #5]
    4a50:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4a52:	4b0b      	ldr	r3, [pc, #44]	; (4a80 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4a54:	69db      	ldr	r3, [r3, #28]
    4a56:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4a58:	9b02      	ldr	r3, [sp, #8]
    4a5a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a5e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4a60:	9b03      	ldr	r3, [sp, #12]
    4a62:	061b      	lsls	r3, r3, #24
    4a64:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a68:	9a02      	ldr	r2, [sp, #8]
    4a6a:	4313      	orrs	r3, r2
    4a6c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4a6e:	4a04      	ldr	r2, [pc, #16]	; (4a80 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4a70:	9b02      	ldr	r3, [sp, #8]
    4a72:	61d3      	str	r3, [r2, #28]
}
    4a74:	bf00      	nop
    4a76:	b004      	add	sp, #16
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop
    4a7c:	00010b28 	.word	0x00010b28
    4a80:	40064000 	.word	0x40064000

00004a84 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a84:	b084      	sub	sp, #16
    4a86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a88:	9b01      	ldr	r3, [sp, #4]
    4a8a:	685b      	ldr	r3, [r3, #4]
    4a8c:	4a0b      	ldr	r2, [pc, #44]	; (4abc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4a8e:	5cd3      	ldrb	r3, [r2, r3]
    4a90:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4a92:	4b0b      	ldr	r3, [pc, #44]	; (4ac0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4a94:	69db      	ldr	r3, [r3, #28]
    4a96:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4a98:	9b02      	ldr	r3, [sp, #8]
    4a9a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a9e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4aa0:	9b03      	ldr	r3, [sp, #12]
    4aa2:	061b      	lsls	r3, r3, #24
    4aa4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4aa8:	9a02      	ldr	r2, [sp, #8]
    4aaa:	4313      	orrs	r3, r2
    4aac:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4aae:	4a04      	ldr	r2, [pc, #16]	; (4ac0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4ab0:	9b02      	ldr	r3, [sp, #8]
    4ab2:	61d3      	str	r3, [r2, #28]
}
    4ab4:	bf00      	nop
    4ab6:	b004      	add	sp, #16
    4ab8:	4770      	bx	lr
    4aba:	bf00      	nop
    4abc:	00010b28 	.word	0x00010b28
    4ac0:	40064000 	.word	0x40064000

00004ac4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ac4:	b084      	sub	sp, #16
    4ac6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ac8:	4b0a      	ldr	r3, [pc, #40]	; (4af4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4aca:	7b9b      	ldrb	r3, [r3, #14]
    4acc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4ace:	4b0a      	ldr	r3, [pc, #40]	; (4af8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4ad0:	691b      	ldr	r3, [r3, #16]
    4ad2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4ad4:	9b02      	ldr	r3, [sp, #8]
    4ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4ada:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4adc:	9b03      	ldr	r3, [sp, #12]
    4ade:	011b      	lsls	r3, r3, #4
    4ae0:	9a02      	ldr	r2, [sp, #8]
    4ae2:	4313      	orrs	r3, r2
    4ae4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4ae6:	4a04      	ldr	r2, [pc, #16]	; (4af8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4ae8:	9b02      	ldr	r3, [sp, #8]
    4aea:	6113      	str	r3, [r2, #16]
}
    4aec:	bf00      	nop
    4aee:	b004      	add	sp, #16
    4af0:	4770      	bx	lr
    4af2:	bf00      	nop
    4af4:	00010ad0 	.word	0x00010ad0
    4af8:	40048000 	.word	0x40048000

00004afc <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4afc:	b084      	sub	sp, #16
    4afe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b00:	9b01      	ldr	r3, [sp, #4]
    4b02:	685b      	ldr	r3, [r3, #4]
    4b04:	4a0a      	ldr	r2, [pc, #40]	; (4b30 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4b06:	5cd3      	ldrb	r3, [r2, r3]
    4b08:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4b0a:	4b0a      	ldr	r3, [pc, #40]	; (4b34 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4b0c:	691b      	ldr	r3, [r3, #16]
    4b0e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4b10:	9b02      	ldr	r3, [sp, #8]
    4b12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4b16:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4b18:	9b03      	ldr	r3, [sp, #12]
    4b1a:	011b      	lsls	r3, r3, #4
    4b1c:	9a02      	ldr	r2, [sp, #8]
    4b1e:	4313      	orrs	r3, r2
    4b20:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b22:	4a04      	ldr	r2, [pc, #16]	; (4b34 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4b24:	9b02      	ldr	r3, [sp, #8]
    4b26:	6113      	str	r3, [r2, #16]
}
    4b28:	bf00      	nop
    4b2a:	b004      	add	sp, #16
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop
    4b30:	00010ad0 	.word	0x00010ad0
    4b34:	40048000 	.word	0x40048000

00004b38 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b38:	b084      	sub	sp, #16
    4b3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b3c:	4b0a      	ldr	r3, [pc, #40]	; (4b68 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4b3e:	785b      	ldrb	r3, [r3, #1]
    4b40:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4b42:	4b0a      	ldr	r3, [pc, #40]	; (4b6c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4b44:	691b      	ldr	r3, [r3, #16]
    4b46:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4b48:	9b02      	ldr	r3, [sp, #8]
    4b4a:	f023 030c 	bic.w	r3, r3, #12
    4b4e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b50:	9b03      	ldr	r3, [sp, #12]
    4b52:	009b      	lsls	r3, r3, #2
    4b54:	9a02      	ldr	r2, [sp, #8]
    4b56:	4313      	orrs	r3, r2
    4b58:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b5a:	4a04      	ldr	r2, [pc, #16]	; (4b6c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4b5c:	9b02      	ldr	r3, [sp, #8]
    4b5e:	6113      	str	r3, [r2, #16]
}
    4b60:	bf00      	nop
    4b62:	b004      	add	sp, #16
    4b64:	4770      	bx	lr
    4b66:	bf00      	nop
    4b68:	00010b88 	.word	0x00010b88
    4b6c:	40048000 	.word	0x40048000

00004b70 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b70:	b084      	sub	sp, #16
    4b72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b74:	9b01      	ldr	r3, [sp, #4]
    4b76:	685b      	ldr	r3, [r3, #4]
    4b78:	4a0a      	ldr	r2, [pc, #40]	; (4ba4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4b7a:	5cd3      	ldrb	r3, [r2, r3]
    4b7c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4b7e:	4b0a      	ldr	r3, [pc, #40]	; (4ba8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4b80:	691b      	ldr	r3, [r3, #16]
    4b82:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4b84:	9b02      	ldr	r3, [sp, #8]
    4b86:	f023 030c 	bic.w	r3, r3, #12
    4b8a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b8c:	9b03      	ldr	r3, [sp, #12]
    4b8e:	009b      	lsls	r3, r3, #2
    4b90:	9a02      	ldr	r2, [sp, #8]
    4b92:	4313      	orrs	r3, r2
    4b94:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b96:	4a04      	ldr	r2, [pc, #16]	; (4ba8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4b98:	9b02      	ldr	r3, [sp, #8]
    4b9a:	6113      	str	r3, [r2, #16]
}
    4b9c:	bf00      	nop
    4b9e:	b004      	add	sp, #16
    4ba0:	4770      	bx	lr
    4ba2:	bf00      	nop
    4ba4:	00010b88 	.word	0x00010b88
    4ba8:	40048000 	.word	0x40048000

00004bac <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4bac:	b084      	sub	sp, #16
    4bae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4bb0:	4b0a      	ldr	r3, [pc, #40]	; (4bdc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4bb2:	795b      	ldrb	r3, [r3, #5]
    4bb4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4bb6:	4b0a      	ldr	r3, [pc, #40]	; (4be0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4bb8:	6a1b      	ldr	r3, [r3, #32]
    4bba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4bbc:	9b02      	ldr	r3, [sp, #8]
    4bbe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4bc2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4bc4:	9b03      	ldr	r3, [sp, #12]
    4bc6:	061b      	lsls	r3, r3, #24
    4bc8:	9a02      	ldr	r2, [sp, #8]
    4bca:	4313      	orrs	r3, r2
    4bcc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4bce:	4a04      	ldr	r2, [pc, #16]	; (4be0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4bd0:	9b02      	ldr	r3, [sp, #8]
    4bd2:	6213      	str	r3, [r2, #32]
}
    4bd4:	bf00      	nop
    4bd6:	b004      	add	sp, #16
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	00010b28 	.word	0x00010b28
    4be0:	40064000 	.word	0x40064000

00004be4 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4be4:	b084      	sub	sp, #16
    4be6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4be8:	9b01      	ldr	r3, [sp, #4]
    4bea:	685b      	ldr	r3, [r3, #4]
    4bec:	4a0a      	ldr	r2, [pc, #40]	; (4c18 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4bee:	5cd3      	ldrb	r3, [r2, r3]
    4bf0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4bf2:	4b0a      	ldr	r3, [pc, #40]	; (4c1c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4bf4:	6a1b      	ldr	r3, [r3, #32]
    4bf6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4bf8:	9b02      	ldr	r3, [sp, #8]
    4bfa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4bfe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4c00:	9b03      	ldr	r3, [sp, #12]
    4c02:	061b      	lsls	r3, r3, #24
    4c04:	9a02      	ldr	r2, [sp, #8]
    4c06:	4313      	orrs	r3, r2
    4c08:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4c0a:	4a04      	ldr	r2, [pc, #16]	; (4c1c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4c0c:	9b02      	ldr	r3, [sp, #8]
    4c0e:	6213      	str	r3, [r2, #32]
}
    4c10:	bf00      	nop
    4c12:	b004      	add	sp, #16
    4c14:	4770      	bx	lr
    4c16:	bf00      	nop
    4c18:	00010b28 	.word	0x00010b28
    4c1c:	40064000 	.word	0x40064000

00004c20 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4c20:	b086      	sub	sp, #24
    4c22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4c24:	4b20      	ldr	r3, [pc, #128]	; (4ca8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4c26:	795b      	ldrb	r3, [r3, #5]
    4c28:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4c2a:	9b01      	ldr	r3, [sp, #4]
    4c2c:	681a      	ldr	r2, [r3, #0]
    4c2e:	491f      	ldr	r1, [pc, #124]	; (4cac <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4c30:	4613      	mov	r3, r2
    4c32:	00db      	lsls	r3, r3, #3
    4c34:	4413      	add	r3, r2
    4c36:	440b      	add	r3, r1
    4c38:	781b      	ldrb	r3, [r3, #0]
    4c3a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4c3c:	4b1c      	ldr	r3, [pc, #112]	; (4cb0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4c3e:	68db      	ldr	r3, [r3, #12]
    4c40:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4c42:	9b03      	ldr	r3, [sp, #12]
    4c44:	2b03      	cmp	r3, #3
    4c46:	d813      	bhi.n	4c70 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4c48:	9b03      	ldr	r3, [sp, #12]
    4c4a:	005b      	lsls	r3, r3, #1
    4c4c:	3318      	adds	r3, #24
    4c4e:	2203      	movs	r2, #3
    4c50:	fa02 f303 	lsl.w	r3, r2, r3
    4c54:	43db      	mvns	r3, r3
    4c56:	9a05      	ldr	r2, [sp, #20]
    4c58:	4013      	ands	r3, r2
    4c5a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4c5c:	9b03      	ldr	r3, [sp, #12]
    4c5e:	005b      	lsls	r3, r3, #1
    4c60:	3318      	adds	r3, #24
    4c62:	9a04      	ldr	r2, [sp, #16]
    4c64:	fa02 f303 	lsl.w	r3, r2, r3
    4c68:	9a05      	ldr	r2, [sp, #20]
    4c6a:	4313      	orrs	r3, r2
    4c6c:	9305      	str	r3, [sp, #20]
    4c6e:	e014      	b.n	4c9a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4c70:	9b03      	ldr	r3, [sp, #12]
    4c72:	3b04      	subs	r3, #4
    4c74:	005b      	lsls	r3, r3, #1
    4c76:	3310      	adds	r3, #16
    4c78:	2203      	movs	r2, #3
    4c7a:	fa02 f303 	lsl.w	r3, r2, r3
    4c7e:	43db      	mvns	r3, r3
    4c80:	9a05      	ldr	r2, [sp, #20]
    4c82:	4013      	ands	r3, r2
    4c84:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4c86:	9b03      	ldr	r3, [sp, #12]
    4c88:	3b04      	subs	r3, #4
    4c8a:	005b      	lsls	r3, r3, #1
    4c8c:	3310      	adds	r3, #16
    4c8e:	9a04      	ldr	r2, [sp, #16]
    4c90:	fa02 f303 	lsl.w	r3, r2, r3
    4c94:	9a05      	ldr	r2, [sp, #20]
    4c96:	4313      	orrs	r3, r2
    4c98:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4c9a:	4a05      	ldr	r2, [pc, #20]	; (4cb0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4c9c:	9b05      	ldr	r3, [sp, #20]
    4c9e:	60d3      	str	r3, [r2, #12]
}
    4ca0:	bf00      	nop
    4ca2:	b006      	add	sp, #24
    4ca4:	4770      	bx	lr
    4ca6:	bf00      	nop
    4ca8:	00010ad0 	.word	0x00010ad0
    4cac:	000107c0 	.word	0x000107c0
    4cb0:	40048000 	.word	0x40048000

00004cb4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4cb4:	b086      	sub	sp, #24
    4cb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4cb8:	9b01      	ldr	r3, [sp, #4]
    4cba:	685b      	ldr	r3, [r3, #4]
    4cbc:	4a20      	ldr	r2, [pc, #128]	; (4d40 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4cbe:	5cd3      	ldrb	r3, [r2, r3]
    4cc0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4cc2:	9b01      	ldr	r3, [sp, #4]
    4cc4:	681a      	ldr	r2, [r3, #0]
    4cc6:	491f      	ldr	r1, [pc, #124]	; (4d44 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4cc8:	4613      	mov	r3, r2
    4cca:	00db      	lsls	r3, r3, #3
    4ccc:	4413      	add	r3, r2
    4cce:	440b      	add	r3, r1
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4cd4:	4b1c      	ldr	r3, [pc, #112]	; (4d48 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4cd6:	68db      	ldr	r3, [r3, #12]
    4cd8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4cda:	9b03      	ldr	r3, [sp, #12]
    4cdc:	2b03      	cmp	r3, #3
    4cde:	d813      	bhi.n	4d08 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4ce0:	9b03      	ldr	r3, [sp, #12]
    4ce2:	005b      	lsls	r3, r3, #1
    4ce4:	3318      	adds	r3, #24
    4ce6:	2203      	movs	r2, #3
    4ce8:	fa02 f303 	lsl.w	r3, r2, r3
    4cec:	43db      	mvns	r3, r3
    4cee:	9a05      	ldr	r2, [sp, #20]
    4cf0:	4013      	ands	r3, r2
    4cf2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4cf4:	9b03      	ldr	r3, [sp, #12]
    4cf6:	005b      	lsls	r3, r3, #1
    4cf8:	3318      	adds	r3, #24
    4cfa:	9a04      	ldr	r2, [sp, #16]
    4cfc:	fa02 f303 	lsl.w	r3, r2, r3
    4d00:	9a05      	ldr	r2, [sp, #20]
    4d02:	4313      	orrs	r3, r2
    4d04:	9305      	str	r3, [sp, #20]
    4d06:	e014      	b.n	4d32 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4d08:	9b03      	ldr	r3, [sp, #12]
    4d0a:	3b04      	subs	r3, #4
    4d0c:	005b      	lsls	r3, r3, #1
    4d0e:	3310      	adds	r3, #16
    4d10:	2203      	movs	r2, #3
    4d12:	fa02 f303 	lsl.w	r3, r2, r3
    4d16:	43db      	mvns	r3, r3
    4d18:	9a05      	ldr	r2, [sp, #20]
    4d1a:	4013      	ands	r3, r2
    4d1c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4d1e:	9b03      	ldr	r3, [sp, #12]
    4d20:	3b04      	subs	r3, #4
    4d22:	005b      	lsls	r3, r3, #1
    4d24:	3310      	adds	r3, #16
    4d26:	9a04      	ldr	r2, [sp, #16]
    4d28:	fa02 f303 	lsl.w	r3, r2, r3
    4d2c:	9a05      	ldr	r2, [sp, #20]
    4d2e:	4313      	orrs	r3, r2
    4d30:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4d32:	4a05      	ldr	r2, [pc, #20]	; (4d48 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4d34:	9b05      	ldr	r3, [sp, #20]
    4d36:	60d3      	str	r3, [r2, #12]
}
    4d38:	bf00      	nop
    4d3a:	b006      	add	sp, #24
    4d3c:	4770      	bx	lr
    4d3e:	bf00      	nop
    4d40:	00010ad0 	.word	0x00010ad0
    4d44:	000107c0 	.word	0x000107c0
    4d48:	40048000 	.word	0x40048000

00004d4c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d4c:	b084      	sub	sp, #16
    4d4e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4d50:	4b06      	ldr	r3, [pc, #24]	; (4d6c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4d52:	685b      	ldr	r3, [r3, #4]
    4d54:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4d56:	9b03      	ldr	r3, [sp, #12]
    4d58:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4d5c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4d5e:	4a03      	ldr	r2, [pc, #12]	; (4d6c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4d60:	9b03      	ldr	r3, [sp, #12]
    4d62:	6053      	str	r3, [r2, #4]
}
    4d64:	bf00      	nop
    4d66:	b004      	add	sp, #16
    4d68:	4770      	bx	lr
    4d6a:	bf00      	nop
    4d6c:	40048000 	.word	0x40048000

00004d70 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d70:	b084      	sub	sp, #16
    4d72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4d74:	9b01      	ldr	r3, [sp, #4]
    4d76:	685b      	ldr	r3, [r3, #4]
    4d78:	4a0a      	ldr	r2, [pc, #40]	; (4da4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4d7a:	5cd3      	ldrb	r3, [r2, r3]
    4d7c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4d7e:	4b0a      	ldr	r3, [pc, #40]	; (4da8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4d80:	685b      	ldr	r3, [r3, #4]
    4d82:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4d84:	9b02      	ldr	r3, [sp, #8]
    4d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4d8a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4d8c:	9b03      	ldr	r3, [sp, #12]
    4d8e:	011b      	lsls	r3, r3, #4
    4d90:	9a02      	ldr	r2, [sp, #8]
    4d92:	4313      	orrs	r3, r2
    4d94:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4d96:	4a04      	ldr	r2, [pc, #16]	; (4da8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4d98:	9b02      	ldr	r3, [sp, #8]
    4d9a:	6053      	str	r3, [r2, #4]
}
    4d9c:	bf00      	nop
    4d9e:	b004      	add	sp, #16
    4da0:	4770      	bx	lr
    4da2:	bf00      	nop
    4da4:	00010ad0 	.word	0x00010ad0
    4da8:	40048000 	.word	0x40048000

00004dac <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4dac:	b084      	sub	sp, #16
    4dae:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4db0:	9b01      	ldr	r3, [sp, #4]
    4db2:	681a      	ldr	r2, [r3, #0]
    4db4:	490f      	ldr	r1, [pc, #60]	; (4df4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4db6:	4613      	mov	r3, r2
    4db8:	00db      	lsls	r3, r3, #3
    4dba:	4413      	add	r3, r2
    4dbc:	440b      	add	r3, r1
    4dbe:	3304      	adds	r3, #4
    4dc0:	781b      	ldrb	r3, [r3, #0]
    4dc2:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4dc4:	4a0c      	ldr	r2, [pc, #48]	; (4df8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4dc6:	9b03      	ldr	r3, [sp, #12]
    4dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4dcc:	490a      	ldr	r1, [pc, #40]	; (4df8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4dce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4dd2:	9b03      	ldr	r3, [sp, #12]
    4dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4dd8:	4a07      	ldr	r2, [pc, #28]	; (4df8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4dda:	9b03      	ldr	r3, [sp, #12]
    4ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4de0:	4905      	ldr	r1, [pc, #20]	; (4df8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4de2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4de6:	9b03      	ldr	r3, [sp, #12]
    4de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4dec:	bf00      	nop
    4dee:	b004      	add	sp, #16
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	000107c0 	.word	0x000107c0
    4df8:	40065000 	.word	0x40065000

00004dfc <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4dfc:	b086      	sub	sp, #24
    4dfe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4e00:	9b01      	ldr	r3, [sp, #4]
    4e02:	681a      	ldr	r2, [r3, #0]
    4e04:	4912      	ldr	r1, [pc, #72]	; (4e50 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4e06:	4613      	mov	r3, r2
    4e08:	00db      	lsls	r3, r3, #3
    4e0a:	4413      	add	r3, r2
    4e0c:	440b      	add	r3, r1
    4e0e:	3304      	adds	r3, #4
    4e10:	781b      	ldrb	r3, [r3, #0]
    4e12:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e14:	9b01      	ldr	r3, [sp, #4]
    4e16:	685b      	ldr	r3, [r3, #4]
    4e18:	4a0e      	ldr	r2, [pc, #56]	; (4e54 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4e1a:	5cd3      	ldrb	r3, [r2, r3]
    4e1c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4e1e:	4a0e      	ldr	r2, [pc, #56]	; (4e58 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4e20:	9b05      	ldr	r3, [sp, #20]
    4e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e26:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4e28:	9b03      	ldr	r3, [sp, #12]
    4e2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4e2e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4e30:	9b04      	ldr	r3, [sp, #16]
    4e32:	061b      	lsls	r3, r3, #24
    4e34:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4e38:	9a03      	ldr	r2, [sp, #12]
    4e3a:	4313      	orrs	r3, r2
    4e3c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4e3e:	4906      	ldr	r1, [pc, #24]	; (4e58 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4e40:	9b05      	ldr	r3, [sp, #20]
    4e42:	9a03      	ldr	r2, [sp, #12]
    4e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4e48:	bf00      	nop
    4e4a:	b006      	add	sp, #24
    4e4c:	4770      	bx	lr
    4e4e:	bf00      	nop
    4e50:	000107c0 	.word	0x000107c0
    4e54:	00010b58 	.word	0x00010b58
    4e58:	40065000 	.word	0x40065000

00004e5c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e5c:	b084      	sub	sp, #16
    4e5e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e60:	4b0b      	ldr	r3, [pc, #44]	; (4e90 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4e62:	7f1b      	ldrb	r3, [r3, #28]
    4e64:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4e66:	4b0b      	ldr	r3, [pc, #44]	; (4e94 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4e68:	685b      	ldr	r3, [r3, #4]
    4e6a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4e6c:	9b02      	ldr	r3, [sp, #8]
    4e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e72:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4e74:	9b03      	ldr	r3, [sp, #12]
    4e76:	031b      	lsls	r3, r3, #12
    4e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4e7c:	9a02      	ldr	r2, [sp, #8]
    4e7e:	4313      	orrs	r3, r2
    4e80:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4e82:	4a04      	ldr	r2, [pc, #16]	; (4e94 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4e84:	9b02      	ldr	r3, [sp, #8]
    4e86:	6053      	str	r3, [r2, #4]
}
    4e88:	bf00      	nop
    4e8a:	b004      	add	sp, #16
    4e8c:	4770      	bx	lr
    4e8e:	bf00      	nop
    4e90:	00010ad0 	.word	0x00010ad0
    4e94:	40048000 	.word	0x40048000

00004e98 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e98:	b084      	sub	sp, #16
    4e9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e9c:	9b01      	ldr	r3, [sp, #4]
    4e9e:	685b      	ldr	r3, [r3, #4]
    4ea0:	4a0b      	ldr	r2, [pc, #44]	; (4ed0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4ea2:	5cd3      	ldrb	r3, [r2, r3]
    4ea4:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4ea6:	4b0b      	ldr	r3, [pc, #44]	; (4ed4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4ea8:	685b      	ldr	r3, [r3, #4]
    4eaa:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4eac:	9b02      	ldr	r3, [sp, #8]
    4eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4eb2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4eb4:	9b03      	ldr	r3, [sp, #12]
    4eb6:	031b      	lsls	r3, r3, #12
    4eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4ebc:	9a02      	ldr	r2, [sp, #8]
    4ebe:	4313      	orrs	r3, r2
    4ec0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4ec2:	4a04      	ldr	r2, [pc, #16]	; (4ed4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4ec4:	9b02      	ldr	r3, [sp, #8]
    4ec6:	6053      	str	r3, [r2, #4]
}
    4ec8:	bf00      	nop
    4eca:	b004      	add	sp, #16
    4ecc:	4770      	bx	lr
    4ece:	bf00      	nop
    4ed0:	00010ad0 	.word	0x00010ad0
    4ed4:	40048000 	.word	0x40048000

00004ed8 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4ed8:	b500      	push	{lr}
    4eda:	b085      	sub	sp, #20
    4edc:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4ede:	2300      	movs	r3, #0
    4ee0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4ee4:	9b01      	ldr	r3, [sp, #4]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d037      	beq.n	4f5a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4eea:	2300      	movs	r3, #0
    4eec:	9303      	str	r3, [sp, #12]
    4eee:	e02b      	b.n	4f48 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4ef0:	4b29      	ldr	r3, [pc, #164]	; (4f98 <DisableSafeClock+0xc0>)
    4ef2:	6819      	ldr	r1, [r3, #0]
    4ef4:	9a03      	ldr	r2, [sp, #12]
    4ef6:	4613      	mov	r3, r2
    4ef8:	005b      	lsls	r3, r3, #1
    4efa:	4413      	add	r3, r2
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	440b      	add	r3, r1
    4f00:	3314      	adds	r3, #20
    4f02:	681b      	ldr	r3, [r3, #0]
    4f04:	2b05      	cmp	r3, #5
    4f06:	d11c      	bne.n	4f42 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4f08:	2301      	movs	r3, #1
    4f0a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4f0e:	4b22      	ldr	r3, [pc, #136]	; (4f98 <DisableSafeClock+0xc0>)
    4f10:	6819      	ldr	r1, [r3, #0]
    4f12:	9a03      	ldr	r2, [sp, #12]
    4f14:	4613      	mov	r3, r2
    4f16:	005b      	lsls	r3, r3, #1
    4f18:	4413      	add	r3, r2
    4f1a:	009b      	lsls	r3, r3, #2
    4f1c:	440b      	add	r3, r1
    4f1e:	3318      	adds	r3, #24
    4f20:	881b      	ldrh	r3, [r3, #0]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d118      	bne.n	4f58 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4f26:	4b1d      	ldr	r3, [pc, #116]	; (4f9c <DisableSafeClock+0xc4>)
    4f28:	791b      	ldrb	r3, [r3, #4]
    4f2a:	4619      	mov	r1, r3
    4f2c:	4a1c      	ldr	r2, [pc, #112]	; (4fa0 <DisableSafeClock+0xc8>)
    4f2e:	460b      	mov	r3, r1
    4f30:	005b      	lsls	r3, r3, #1
    4f32:	440b      	add	r3, r1
    4f34:	009b      	lsls	r3, r3, #2
    4f36:	4413      	add	r3, r2
    4f38:	3308      	adds	r3, #8
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	2005      	movs	r0, #5
    4f3e:	4798      	blx	r3
                }
                break;
    4f40:	e00a      	b.n	4f58 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4f42:	9b03      	ldr	r3, [sp, #12]
    4f44:	3301      	adds	r3, #1
    4f46:	9303      	str	r3, [sp, #12]
    4f48:	4b13      	ldr	r3, [pc, #76]	; (4f98 <DisableSafeClock+0xc0>)
    4f4a:	681b      	ldr	r3, [r3, #0]
    4f4c:	7a1b      	ldrb	r3, [r3, #8]
    4f4e:	461a      	mov	r2, r3
    4f50:	9b03      	ldr	r3, [sp, #12]
    4f52:	4293      	cmp	r3, r2
    4f54:	d3cc      	bcc.n	4ef0 <DisableSafeClock+0x18>
    4f56:	e000      	b.n	4f5a <DisableSafeClock+0x82>
                break;
    4f58:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4f5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4f5e:	f083 0301 	eor.w	r3, r3, #1
    4f62:	b2db      	uxtb	r3, r3
    4f64:	2b00      	cmp	r3, #0
    4f66:	d013      	beq.n	4f90 <DisableSafeClock+0xb8>
    4f68:	4b0e      	ldr	r3, [pc, #56]	; (4fa4 <DisableSafeClock+0xcc>)
    4f6a:	781b      	ldrb	r3, [r3, #0]
    4f6c:	f083 0301 	eor.w	r3, r3, #1
    4f70:	b2db      	uxtb	r3, r3
    4f72:	2b00      	cmp	r3, #0
    4f74:	d00c      	beq.n	4f90 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4f76:	4b09      	ldr	r3, [pc, #36]	; (4f9c <DisableSafeClock+0xc4>)
    4f78:	791b      	ldrb	r3, [r3, #4]
    4f7a:	4619      	mov	r1, r3
    4f7c:	4a08      	ldr	r2, [pc, #32]	; (4fa0 <DisableSafeClock+0xc8>)
    4f7e:	460b      	mov	r3, r1
    4f80:	005b      	lsls	r3, r3, #1
    4f82:	440b      	add	r3, r1
    4f84:	009b      	lsls	r3, r3, #2
    4f86:	4413      	add	r3, r2
    4f88:	3308      	adds	r3, #8
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	2005      	movs	r0, #5
    4f8e:	4798      	blx	r3
    }
}
    4f90:	bf00      	nop
    4f92:	b005      	add	sp, #20
    4f94:	f85d fb04 	ldr.w	pc, [sp], #4
    4f98:	1fff8b98 	.word	0x1fff8b98
    4f9c:	00010750 	.word	0x00010750
    4fa0:	00010d80 	.word	0x00010d80
    4fa4:	1fff8b18 	.word	0x1fff8b18

00004fa8 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <SetFircToResetValue_TrustedCall+0x1c>)
    4faa:	2200      	movs	r2, #0
    4fac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4fb0:	4b04      	ldr	r3, [pc, #16]	; (4fc4 <SetFircToResetValue_TrustedCall+0x1c>)
    4fb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4fb6:	4a03      	ldr	r2, [pc, #12]	; (4fc4 <SetFircToResetValue_TrustedCall+0x1c>)
    4fb8:	f043 0301 	orr.w	r3, r3, #1
    4fbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4fc0:	bf00      	nop
    4fc2:	4770      	bx	lr
    4fc4:	40064000 	.word	0x40064000

00004fc8 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4fc8:	b084      	sub	sp, #16
    4fca:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4fcc:	2303      	movs	r3, #3
    4fce:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4fd0:	2300      	movs	r3, #0
    4fd2:	9302      	str	r3, [sp, #8]
    4fd4:	e028      	b.n	5028 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4fd6:	9b01      	ldr	r3, [sp, #4]
    4fd8:	9a02      	ldr	r2, [sp, #8]
    4fda:	320d      	adds	r2, #13
    4fdc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4fe0:	2b28      	cmp	r3, #40	; 0x28
    4fe2:	d10b      	bne.n	4ffc <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4fe4:	9a01      	ldr	r2, [sp, #4]
    4fe6:	9b02      	ldr	r3, [sp, #8]
    4fe8:	330d      	adds	r3, #13
    4fea:	00db      	lsls	r3, r3, #3
    4fec:	4413      	add	r3, r2
    4fee:	685b      	ldr	r3, [r3, #4]
    4ff0:	4a2b      	ldr	r2, [pc, #172]	; (50a0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4ff2:	5cd3      	ldrb	r3, [r2, r3]
    4ff4:	011b      	lsls	r3, r3, #4
    4ff6:	9a03      	ldr	r2, [sp, #12]
    4ff8:	4313      	orrs	r3, r2
    4ffa:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	9a02      	ldr	r2, [sp, #8]
    5000:	320d      	adds	r2, #13
    5002:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5006:	2b29      	cmp	r3, #41	; 0x29
    5008:	d10b      	bne.n	5022 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    500a:	9a01      	ldr	r2, [sp, #4]
    500c:	9b02      	ldr	r3, [sp, #8]
    500e:	330d      	adds	r3, #13
    5010:	00db      	lsls	r3, r3, #3
    5012:	4413      	add	r3, r2
    5014:	685b      	ldr	r3, [r3, #4]
    5016:	4a23      	ldr	r2, [pc, #140]	; (50a4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    5018:	5cd3      	ldrb	r3, [r2, r3]
    501a:	009b      	lsls	r3, r3, #2
    501c:	9a03      	ldr	r2, [sp, #12]
    501e:	4313      	orrs	r3, r2
    5020:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    5022:	9b02      	ldr	r3, [sp, #8]
    5024:	3301      	adds	r3, #1
    5026:	9302      	str	r3, [sp, #8]
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	7adb      	ldrb	r3, [r3, #11]
    502c:	461a      	mov	r2, r3
    502e:	9b02      	ldr	r3, [sp, #8]
    5030:	4293      	cmp	r3, r2
    5032:	d3d0      	bcc.n	4fd6 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5034:	2300      	movs	r3, #0
    5036:	9302      	str	r3, [sp, #8]
    5038:	e026      	b.n	5088 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    503a:	9a01      	ldr	r2, [sp, #4]
    503c:	9b02      	ldr	r3, [sp, #8]
    503e:	334e      	adds	r3, #78	; 0x4e
    5040:	00db      	lsls	r3, r3, #3
    5042:	4413      	add	r3, r2
    5044:	685b      	ldr	r3, [r3, #4]
    5046:	2b12      	cmp	r3, #18
    5048:	d109      	bne.n	505e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    504a:	9a01      	ldr	r2, [sp, #4]
    504c:	9b02      	ldr	r3, [sp, #8]
    504e:	334e      	adds	r3, #78	; 0x4e
    5050:	00db      	lsls	r3, r3, #3
    5052:	4413      	add	r3, r2
    5054:	891b      	ldrh	r3, [r3, #8]
    5056:	005b      	lsls	r3, r3, #1
    5058:	9a03      	ldr	r2, [sp, #12]
    505a:	4313      	orrs	r3, r2
    505c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    505e:	9a01      	ldr	r2, [sp, #4]
    5060:	9b02      	ldr	r3, [sp, #8]
    5062:	334e      	adds	r3, #78	; 0x4e
    5064:	00db      	lsls	r3, r3, #3
    5066:	4413      	add	r3, r2
    5068:	685b      	ldr	r3, [r3, #4]
    506a:	2b13      	cmp	r3, #19
    506c:	d109      	bne.n	5082 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    506e:	9a01      	ldr	r2, [sp, #4]
    5070:	9b02      	ldr	r3, [sp, #8]
    5072:	334e      	adds	r3, #78	; 0x4e
    5074:	00db      	lsls	r3, r3, #3
    5076:	4413      	add	r3, r2
    5078:	891b      	ldrh	r3, [r3, #8]
    507a:	461a      	mov	r2, r3
    507c:	9b03      	ldr	r3, [sp, #12]
    507e:	4313      	orrs	r3, r2
    5080:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5082:	9b02      	ldr	r3, [sp, #8]
    5084:	3301      	adds	r3, #1
    5086:	9302      	str	r3, [sp, #8]
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	7c1b      	ldrb	r3, [r3, #16]
    508c:	461a      	mov	r2, r3
    508e:	9b02      	ldr	r3, [sp, #8]
    5090:	4293      	cmp	r3, r2
    5092:	d3d2      	bcc.n	503a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5094:	4a04      	ldr	r2, [pc, #16]	; (50a8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5096:	9b03      	ldr	r3, [sp, #12]
    5098:	6113      	str	r3, [r2, #16]
}
    509a:	bf00      	nop
    509c:	b004      	add	sp, #16
    509e:	4770      	bx	lr
    50a0:	00010ad0 	.word	0x00010ad0
    50a4:	00010b88 	.word	0x00010b88
    50a8:	40048000 	.word	0x40048000

000050ac <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    50ac:	b500      	push	{lr}
    50ae:	b089      	sub	sp, #36	; 0x24
    50b0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    50b2:	2300      	movs	r3, #0
    50b4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    50b8:	4a21      	ldr	r2, [pc, #132]	; (5140 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    50be:	4b21      	ldr	r3, [pc, #132]	; (5144 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    50c0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    50c4:	f003 0301 	and.w	r3, r3, #1
    50c8:	2b00      	cmp	r3, #0
    50ca:	d12e      	bne.n	512a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    50cc:	4b1e      	ldr	r3, [pc, #120]	; (5148 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    50ce:	2200      	movs	r2, #0
    50d0:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    50d2:	f7ff ff69 	bl	4fa8 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    50d6:	aa03      	add	r2, sp, #12
    50d8:	a904      	add	r1, sp, #16
    50da:	a805      	add	r0, sp, #20
    50dc:	f24c 3350 	movw	r3, #50000	; 0xc350
    50e0:	f7fe f8ae 	bl	3240 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    50e4:	4b17      	ldr	r3, [pc, #92]	; (5144 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    50e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    50ea:	0e1b      	lsrs	r3, r3, #24
    50ec:	f003 0301 	and.w	r3, r3, #1
    50f0:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    50f2:	9a03      	ldr	r2, [sp, #12]
    50f4:	a904      	add	r1, sp, #16
    50f6:	ab05      	add	r3, sp, #20
    50f8:	4618      	mov	r0, r3
    50fa:	f7fe f8bb 	bl	3274 <Clock_Ip_TimeoutExpired>
    50fe:	4603      	mov	r3, r0
    5100:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    5104:	9b06      	ldr	r3, [sp, #24]
    5106:	2b00      	cmp	r3, #0
    5108:	d106      	bne.n	5118 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    510a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    510e:	f083 0301 	eor.w	r3, r3, #1
    5112:	b2db      	uxtb	r3, r3
    5114:	2b00      	cmp	r3, #0
    5116:	d1e5      	bne.n	50e4 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    5118:	f89d 301f 	ldrb.w	r3, [sp, #31]
    511c:	2b00      	cmp	r3, #0
    511e:	d007      	beq.n	5130 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    5120:	2105      	movs	r1, #5
    5122:	2001      	movs	r0, #1
    5124:	f7fe f87c 	bl	3220 <Clock_Ip_ReportClockErrors>
    5128:	e002      	b.n	5130 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    512a:	4b07      	ldr	r3, [pc, #28]	; (5148 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    512c:	2201      	movs	r2, #1
    512e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    5130:	9801      	ldr	r0, [sp, #4]
    5132:	f7ff ff49 	bl	4fc8 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    5136:	bf00      	nop
    5138:	b009      	add	sp, #36	; 0x24
    513a:	f85d fb04 	ldr.w	pc, [sp], #4
    513e:	bf00      	nop
    5140:	1fff8b98 	.word	0x1fff8b98
    5144:	40064000 	.word	0x40064000
    5148:	1fff8b18 	.word	0x1fff8b18

0000514c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    514c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    514e:	2300      	movs	r3, #0
    5150:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5152:	4b29      	ldr	r3, [pc, #164]	; (51f8 <getFircConfig+0xac>)
    5154:	681b      	ldr	r3, [r3, #0]
    5156:	2b00      	cmp	r3, #0
    5158:	d024      	beq.n	51a4 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    515a:	2300      	movs	r3, #0
    515c:	9301      	str	r3, [sp, #4]
    515e:	e01a      	b.n	5196 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5160:	4b25      	ldr	r3, [pc, #148]	; (51f8 <getFircConfig+0xac>)
    5162:	6819      	ldr	r1, [r3, #0]
    5164:	9a01      	ldr	r2, [sp, #4]
    5166:	4613      	mov	r3, r2
    5168:	005b      	lsls	r3, r3, #1
    516a:	4413      	add	r3, r2
    516c:	009b      	lsls	r3, r3, #2
    516e:	440b      	add	r3, r1
    5170:	3314      	adds	r3, #20
    5172:	681b      	ldr	r3, [r3, #0]
    5174:	2b05      	cmp	r3, #5
    5176:	d10b      	bne.n	5190 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5178:	4b1f      	ldr	r3, [pc, #124]	; (51f8 <getFircConfig+0xac>)
    517a:	6819      	ldr	r1, [r3, #0]
    517c:	9a01      	ldr	r2, [sp, #4]
    517e:	4613      	mov	r3, r2
    5180:	005b      	lsls	r3, r3, #1
    5182:	4413      	add	r3, r2
    5184:	009b      	lsls	r3, r3, #2
    5186:	3310      	adds	r3, #16
    5188:	440b      	add	r3, r1
    518a:	3304      	adds	r3, #4
    518c:	9300      	str	r3, [sp, #0]
                break;
    518e:	e009      	b.n	51a4 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5190:	9b01      	ldr	r3, [sp, #4]
    5192:	3301      	adds	r3, #1
    5194:	9301      	str	r3, [sp, #4]
    5196:	4b18      	ldr	r3, [pc, #96]	; (51f8 <getFircConfig+0xac>)
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	7a1b      	ldrb	r3, [r3, #8]
    519c:	461a      	mov	r2, r3
    519e:	9b01      	ldr	r3, [sp, #4]
    51a0:	4293      	cmp	r3, r2
    51a2:	d3dd      	bcc.n	5160 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    51a4:	9b00      	ldr	r3, [sp, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	d121      	bne.n	51ee <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    51aa:	4b14      	ldr	r3, [pc, #80]	; (51fc <getFircConfig+0xb0>)
    51ac:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    51ae:	4b13      	ldr	r3, [pc, #76]	; (51fc <getFircConfig+0xb0>)
    51b0:	2205      	movs	r2, #5
    51b2:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    51b4:	4b12      	ldr	r3, [pc, #72]	; (5200 <getFircConfig+0xb4>)
    51b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    51ba:	b29b      	uxth	r3, r3
    51bc:	f003 0301 	and.w	r3, r3, #1
    51c0:	b29a      	uxth	r2, r3
    51c2:	4b0e      	ldr	r3, [pc, #56]	; (51fc <getFircConfig+0xb0>)
    51c4:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    51c6:	4b0e      	ldr	r3, [pc, #56]	; (5200 <getFircConfig+0xb4>)
    51c8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    51cc:	b2db      	uxtb	r3, r3
    51ce:	f003 0303 	and.w	r3, r3, #3
    51d2:	b2da      	uxtb	r2, r3
    51d4:	4b09      	ldr	r3, [pc, #36]	; (51fc <getFircConfig+0xb0>)
    51d6:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    51d8:	4b09      	ldr	r3, [pc, #36]	; (5200 <getFircConfig+0xb4>)
    51da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    51de:	b2db      	uxtb	r3, r3
    51e0:	10db      	asrs	r3, r3, #3
    51e2:	b2db      	uxtb	r3, r3
    51e4:	f003 0301 	and.w	r3, r3, #1
    51e8:	b2da      	uxtb	r2, r3
    51ea:	4b04      	ldr	r3, [pc, #16]	; (51fc <getFircConfig+0xb0>)
    51ec:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    51ee:	9b00      	ldr	r3, [sp, #0]
}
    51f0:	4618      	mov	r0, r3
    51f2:	b002      	add	sp, #8
    51f4:	4770      	bx	lr
    51f6:	bf00      	nop
    51f8:	1fff8b98 	.word	0x1fff8b98
    51fc:	1fff8c04 	.word	0x1fff8c04
    5200:	40064000 	.word	0x40064000

00005204 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    5204:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    5206:	2300      	movs	r3, #0
    5208:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    520a:	4b20      	ldr	r3, [pc, #128]	; (528c <getSoscConfig+0x88>)
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	2b00      	cmp	r3, #0
    5210:	d024      	beq.n	525c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5212:	2300      	movs	r3, #0
    5214:	9301      	str	r3, [sp, #4]
    5216:	e01a      	b.n	524e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5218:	4b1c      	ldr	r3, [pc, #112]	; (528c <getSoscConfig+0x88>)
    521a:	6819      	ldr	r1, [r3, #0]
    521c:	9a01      	ldr	r2, [sp, #4]
    521e:	4613      	mov	r3, r2
    5220:	009b      	lsls	r3, r3, #2
    5222:	4413      	add	r3, r2
    5224:	009b      	lsls	r3, r3, #2
    5226:	440b      	add	r3, r1
    5228:	332c      	adds	r3, #44	; 0x2c
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	2b08      	cmp	r3, #8
    522e:	d10b      	bne.n	5248 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5230:	4b16      	ldr	r3, [pc, #88]	; (528c <getSoscConfig+0x88>)
    5232:	6819      	ldr	r1, [r3, #0]
    5234:	9a01      	ldr	r2, [sp, #4]
    5236:	4613      	mov	r3, r2
    5238:	009b      	lsls	r3, r3, #2
    523a:	4413      	add	r3, r2
    523c:	009b      	lsls	r3, r3, #2
    523e:	3328      	adds	r3, #40	; 0x28
    5240:	440b      	add	r3, r1
    5242:	3304      	adds	r3, #4
    5244:	9300      	str	r3, [sp, #0]
                break;
    5246:	e009      	b.n	525c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5248:	9b01      	ldr	r3, [sp, #4]
    524a:	3301      	adds	r3, #1
    524c:	9301      	str	r3, [sp, #4]
    524e:	4b0f      	ldr	r3, [pc, #60]	; (528c <getSoscConfig+0x88>)
    5250:	681b      	ldr	r3, [r3, #0]
    5252:	7a5b      	ldrb	r3, [r3, #9]
    5254:	461a      	mov	r2, r3
    5256:	9b01      	ldr	r3, [sp, #4]
    5258:	4293      	cmp	r3, r2
    525a:	d3dd      	bcc.n	5218 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    525c:	9b00      	ldr	r3, [sp, #0]
    525e:	2b00      	cmp	r3, #0
    5260:	d110      	bne.n	5284 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    5262:	4b0b      	ldr	r3, [pc, #44]	; (5290 <getSoscConfig+0x8c>)
    5264:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    5266:	4b0a      	ldr	r3, [pc, #40]	; (5290 <getSoscConfig+0x8c>)
    5268:	2208      	movs	r2, #8
    526a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    526c:	4b09      	ldr	r3, [pc, #36]	; (5294 <getSoscConfig+0x90>)
    526e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5272:	b29b      	uxth	r3, r3
    5274:	f003 0301 	and.w	r3, r3, #1
    5278:	b29a      	uxth	r2, r3
    527a:	4b05      	ldr	r3, [pc, #20]	; (5290 <getSoscConfig+0x8c>)
    527c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    527e:	4b04      	ldr	r3, [pc, #16]	; (5290 <getSoscConfig+0x8c>)
    5280:	4a05      	ldr	r2, [pc, #20]	; (5298 <getSoscConfig+0x94>)
    5282:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5284:	9b00      	ldr	r3, [sp, #0]
}
    5286:	4618      	mov	r0, r3
    5288:	b002      	add	sp, #8
    528a:	4770      	bx	lr
    528c:	1fff8b98 	.word	0x1fff8b98
    5290:	1fff8c10 	.word	0x1fff8c10
    5294:	40064000 	.word	0x40064000
    5298:	02625a00 	.word	0x02625a00

0000529c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    529c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    529e:	2300      	movs	r3, #0
    52a0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    52a2:	4b28      	ldr	r3, [pc, #160]	; (5344 <getSpllConfig+0xa8>)
    52a4:	681b      	ldr	r3, [r3, #0]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d023      	beq.n	52f2 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    52aa:	2300      	movs	r3, #0
    52ac:	9301      	str	r3, [sp, #4]
    52ae:	e019      	b.n	52e4 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    52b0:	4b24      	ldr	r3, [pc, #144]	; (5344 <getSpllConfig+0xa8>)
    52b2:	6819      	ldr	r1, [r3, #0]
    52b4:	9a01      	ldr	r2, [sp, #4]
    52b6:	4613      	mov	r3, r2
    52b8:	009b      	lsls	r3, r3, #2
    52ba:	4413      	add	r3, r2
    52bc:	00db      	lsls	r3, r3, #3
    52be:	440b      	add	r3, r1
    52c0:	3340      	adds	r3, #64	; 0x40
    52c2:	681b      	ldr	r3, [r3, #0]
    52c4:	2b09      	cmp	r3, #9
    52c6:	d10a      	bne.n	52de <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    52c8:	4b1e      	ldr	r3, [pc, #120]	; (5344 <getSpllConfig+0xa8>)
    52ca:	6819      	ldr	r1, [r3, #0]
    52cc:	9a01      	ldr	r2, [sp, #4]
    52ce:	4613      	mov	r3, r2
    52d0:	009b      	lsls	r3, r3, #2
    52d2:	4413      	add	r3, r2
    52d4:	00db      	lsls	r3, r3, #3
    52d6:	3340      	adds	r3, #64	; 0x40
    52d8:	440b      	add	r3, r1
    52da:	9300      	str	r3, [sp, #0]
                break;
    52dc:	e009      	b.n	52f2 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    52de:	9b01      	ldr	r3, [sp, #4]
    52e0:	3301      	adds	r3, #1
    52e2:	9301      	str	r3, [sp, #4]
    52e4:	4b17      	ldr	r3, [pc, #92]	; (5344 <getSpllConfig+0xa8>)
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	7a9b      	ldrb	r3, [r3, #10]
    52ea:	461a      	mov	r2, r3
    52ec:	9b01      	ldr	r3, [sp, #4]
    52ee:	4293      	cmp	r3, r2
    52f0:	d3de      	bcc.n	52b0 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    52f2:	9b00      	ldr	r3, [sp, #0]
    52f4:	2b00      	cmp	r3, #0
    52f6:	d121      	bne.n	533c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    52f8:	4b13      	ldr	r3, [pc, #76]	; (5348 <getSpllConfig+0xac>)
    52fa:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    52fc:	4b12      	ldr	r3, [pc, #72]	; (5348 <getSpllConfig+0xac>)
    52fe:	2209      	movs	r2, #9
    5300:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    5302:	4b12      	ldr	r3, [pc, #72]	; (534c <getSpllConfig+0xb0>)
    5304:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5308:	b29b      	uxth	r3, r3
    530a:	f003 0301 	and.w	r3, r3, #1
    530e:	b29a      	uxth	r2, r3
    5310:	4b0d      	ldr	r3, [pc, #52]	; (5348 <getSpllConfig+0xac>)
    5312:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5314:	4b0d      	ldr	r3, [pc, #52]	; (534c <getSpllConfig+0xb0>)
    5316:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    531a:	0a1b      	lsrs	r3, r3, #8
    531c:	b2db      	uxtb	r3, r3
    531e:	f003 0307 	and.w	r3, r3, #7
    5322:	b2da      	uxtb	r2, r3
    5324:	4b08      	ldr	r3, [pc, #32]	; (5348 <getSpllConfig+0xac>)
    5326:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5328:	4b08      	ldr	r3, [pc, #32]	; (534c <getSpllConfig+0xb0>)
    532a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    532e:	0c1b      	lsrs	r3, r3, #16
    5330:	b2db      	uxtb	r3, r3
    5332:	f003 031f 	and.w	r3, r3, #31
    5336:	b2da      	uxtb	r2, r3
    5338:	4b03      	ldr	r3, [pc, #12]	; (5348 <getSpllConfig+0xac>)
    533a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    533c:	9b00      	ldr	r3, [sp, #0]
}
    533e:	4618      	mov	r0, r3
    5340:	b002      	add	sp, #8
    5342:	4770      	bx	lr
    5344:	1fff8b98 	.word	0x1fff8b98
    5348:	1fff8c24 	.word	0x1fff8c24
    534c:	40064000 	.word	0x40064000

00005350 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5350:	b086      	sub	sp, #24
    5352:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5354:	2300      	movs	r3, #0
    5356:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5358:	9b01      	ldr	r3, [sp, #4]
    535a:	2b1b      	cmp	r3, #27
    535c:	d00f      	beq.n	537e <getSelectorConfig+0x2e>
    535e:	9b01      	ldr	r3, [sp, #4]
    5360:	2b1b      	cmp	r3, #27
    5362:	d80f      	bhi.n	5384 <getSelectorConfig+0x34>
    5364:	9b01      	ldr	r3, [sp, #4]
    5366:	2b19      	cmp	r3, #25
    5368:	d003      	beq.n	5372 <getSelectorConfig+0x22>
    536a:	9b01      	ldr	r3, [sp, #4]
    536c:	2b1a      	cmp	r3, #26
    536e:	d003      	beq.n	5378 <getSelectorConfig+0x28>
    5370:	e008      	b.n	5384 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5372:	2300      	movs	r3, #0
    5374:	9304      	str	r3, [sp, #16]
            break;
    5376:	e008      	b.n	538a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5378:	2301      	movs	r3, #1
    537a:	9304      	str	r3, [sp, #16]
            break;
    537c:	e005      	b.n	538a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    537e:	2302      	movs	r3, #2
    5380:	9304      	str	r3, [sp, #16]
            break;
    5382:	e002      	b.n	538a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5384:	2300      	movs	r3, #0
    5386:	9304      	str	r3, [sp, #16]
            break;
    5388:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    538a:	4b36      	ldr	r3, [pc, #216]	; (5464 <getSelectorConfig+0x114>)
    538c:	681b      	ldr	r3, [r3, #0]
    538e:	2b00      	cmp	r3, #0
    5390:	d01d      	beq.n	53ce <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5392:	2300      	movs	r3, #0
    5394:	9303      	str	r3, [sp, #12]
    5396:	e013      	b.n	53c0 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5398:	4b32      	ldr	r3, [pc, #200]	; (5464 <getSelectorConfig+0x114>)
    539a:	681b      	ldr	r3, [r3, #0]
    539c:	9a03      	ldr	r2, [sp, #12]
    539e:	320d      	adds	r2, #13
    53a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    53a4:	9a01      	ldr	r2, [sp, #4]
    53a6:	429a      	cmp	r2, r3
    53a8:	d107      	bne.n	53ba <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    53aa:	4b2e      	ldr	r3, [pc, #184]	; (5464 <getSelectorConfig+0x114>)
    53ac:	681a      	ldr	r2, [r3, #0]
    53ae:	9b03      	ldr	r3, [sp, #12]
    53b0:	330d      	adds	r3, #13
    53b2:	00db      	lsls	r3, r3, #3
    53b4:	4413      	add	r3, r2
    53b6:	9305      	str	r3, [sp, #20]
                break;
    53b8:	e009      	b.n	53ce <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    53ba:	9b03      	ldr	r3, [sp, #12]
    53bc:	3301      	adds	r3, #1
    53be:	9303      	str	r3, [sp, #12]
    53c0:	4b28      	ldr	r3, [pc, #160]	; (5464 <getSelectorConfig+0x114>)
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	7adb      	ldrb	r3, [r3, #11]
    53c6:	461a      	mov	r2, r3
    53c8:	9b03      	ldr	r3, [sp, #12]
    53ca:	4293      	cmp	r3, r2
    53cc:	d3e4      	bcc.n	5398 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    53ce:	9b05      	ldr	r3, [sp, #20]
    53d0:	2b00      	cmp	r3, #0
    53d2:	d140      	bne.n	5456 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    53d4:	9b04      	ldr	r3, [sp, #16]
    53d6:	00db      	lsls	r3, r3, #3
    53d8:	4a23      	ldr	r2, [pc, #140]	; (5468 <getSelectorConfig+0x118>)
    53da:	4413      	add	r3, r2
    53dc:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    53de:	4922      	ldr	r1, [pc, #136]	; (5468 <getSelectorConfig+0x118>)
    53e0:	9b04      	ldr	r3, [sp, #16]
    53e2:	9a01      	ldr	r2, [sp, #4]
    53e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    53e8:	9b01      	ldr	r3, [sp, #4]
    53ea:	2b1b      	cmp	r3, #27
    53ec:	d025      	beq.n	543a <getSelectorConfig+0xea>
    53ee:	9b01      	ldr	r3, [sp, #4]
    53f0:	2b1b      	cmp	r3, #27
    53f2:	d832      	bhi.n	545a <getSelectorConfig+0x10a>
    53f4:	9b01      	ldr	r3, [sp, #4]
    53f6:	2b19      	cmp	r3, #25
    53f8:	d003      	beq.n	5402 <getSelectorConfig+0xb2>
    53fa:	9b01      	ldr	r3, [sp, #4]
    53fc:	2b1a      	cmp	r3, #26
    53fe:	d00e      	beq.n	541e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5400:	e02b      	b.n	545a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    5402:	4b1a      	ldr	r3, [pc, #104]	; (546c <getSelectorConfig+0x11c>)
    5404:	695b      	ldr	r3, [r3, #20]
    5406:	0e1b      	lsrs	r3, r3, #24
    5408:	f003 030f 	and.w	r3, r3, #15
    540c:	4a18      	ldr	r2, [pc, #96]	; (5470 <getSelectorConfig+0x120>)
    540e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5412:	4915      	ldr	r1, [pc, #84]	; (5468 <getSelectorConfig+0x118>)
    5414:	9b04      	ldr	r3, [sp, #16]
    5416:	00db      	lsls	r3, r3, #3
    5418:	440b      	add	r3, r1
    541a:	605a      	str	r2, [r3, #4]
                break;
    541c:	e01e      	b.n	545c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    541e:	4b13      	ldr	r3, [pc, #76]	; (546c <getSelectorConfig+0x11c>)
    5420:	699b      	ldr	r3, [r3, #24]
    5422:	0e1b      	lsrs	r3, r3, #24
    5424:	f003 030f 	and.w	r3, r3, #15
    5428:	4a11      	ldr	r2, [pc, #68]	; (5470 <getSelectorConfig+0x120>)
    542a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    542e:	490e      	ldr	r1, [pc, #56]	; (5468 <getSelectorConfig+0x118>)
    5430:	9b04      	ldr	r3, [sp, #16]
    5432:	00db      	lsls	r3, r3, #3
    5434:	440b      	add	r3, r1
    5436:	605a      	str	r2, [r3, #4]
                break;
    5438:	e010      	b.n	545c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    543a:	4b0c      	ldr	r3, [pc, #48]	; (546c <getSelectorConfig+0x11c>)
    543c:	69db      	ldr	r3, [r3, #28]
    543e:	0e1b      	lsrs	r3, r3, #24
    5440:	f003 030f 	and.w	r3, r3, #15
    5444:	4a0a      	ldr	r2, [pc, #40]	; (5470 <getSelectorConfig+0x120>)
    5446:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    544a:	4907      	ldr	r1, [pc, #28]	; (5468 <getSelectorConfig+0x118>)
    544c:	9b04      	ldr	r3, [sp, #16]
    544e:	00db      	lsls	r3, r3, #3
    5450:	440b      	add	r3, r1
    5452:	605a      	str	r2, [r3, #4]
                break;
    5454:	e002      	b.n	545c <getSelectorConfig+0x10c>
        }
    }
    5456:	bf00      	nop
    5458:	e000      	b.n	545c <getSelectorConfig+0x10c>
                break;
    545a:	bf00      	nop

    return ReturnValue;
    545c:	9b05      	ldr	r3, [sp, #20]
}
    545e:	4618      	mov	r0, r3
    5460:	b006      	add	sp, #24
    5462:	4770      	bx	lr
    5464:	1fff8b98 	.word	0x1fff8b98
    5468:	1fff8c4c 	.word	0x1fff8c4c
    546c:	40064000 	.word	0x40064000
    5470:	00010e50 	.word	0x00010e50

00005474 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5474:	b086      	sub	sp, #24
    5476:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5478:	2300      	movs	r3, #0
    547a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    547c:	2300      	movs	r3, #0
    547e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5480:	9b01      	ldr	r3, [sp, #4]
    5482:	2b1f      	cmp	r3, #31
    5484:	d00f      	beq.n	54a6 <getCoreDividerConfig+0x32>
    5486:	9b01      	ldr	r3, [sp, #4]
    5488:	2b1f      	cmp	r3, #31
    548a:	d80f      	bhi.n	54ac <getCoreDividerConfig+0x38>
    548c:	9b01      	ldr	r3, [sp, #4]
    548e:	2b1d      	cmp	r3, #29
    5490:	d003      	beq.n	549a <getCoreDividerConfig+0x26>
    5492:	9b01      	ldr	r3, [sp, #4]
    5494:	2b1e      	cmp	r3, #30
    5496:	d003      	beq.n	54a0 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5498:	e008      	b.n	54ac <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    549a:	2300      	movs	r3, #0
    549c:	9304      	str	r3, [sp, #16]
            break;
    549e:	e006      	b.n	54ae <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    54a0:	2301      	movs	r3, #1
    54a2:	9304      	str	r3, [sp, #16]
            break;
    54a4:	e003      	b.n	54ae <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    54a6:	2302      	movs	r3, #2
    54a8:	9304      	str	r3, [sp, #16]
            break;
    54aa:	e000      	b.n	54ae <getCoreDividerConfig+0x3a>
                break;
    54ac:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    54ae:	4b41      	ldr	r3, [pc, #260]	; (55b4 <getCoreDividerConfig+0x140>)
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	2b00      	cmp	r3, #0
    54b4:	d026      	beq.n	5504 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    54b6:	2300      	movs	r3, #0
    54b8:	9303      	str	r3, [sp, #12]
    54ba:	e01c      	b.n	54f6 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    54bc:	4b3d      	ldr	r3, [pc, #244]	; (55b4 <getCoreDividerConfig+0x140>)
    54be:	6819      	ldr	r1, [r3, #0]
    54c0:	9a03      	ldr	r2, [sp, #12]
    54c2:	4613      	mov	r3, r2
    54c4:	005b      	lsls	r3, r3, #1
    54c6:	4413      	add	r3, r2
    54c8:	009b      	lsls	r3, r3, #2
    54ca:	440b      	add	r3, r1
    54cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	9a01      	ldr	r2, [sp, #4]
    54d4:	429a      	cmp	r2, r3
    54d6:	d10b      	bne.n	54f0 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    54d8:	4b36      	ldr	r3, [pc, #216]	; (55b4 <getCoreDividerConfig+0x140>)
    54da:	6819      	ldr	r1, [r3, #0]
    54dc:	9a03      	ldr	r2, [sp, #12]
    54de:	4613      	mov	r3, r2
    54e0:	005b      	lsls	r3, r3, #1
    54e2:	4413      	add	r3, r2
    54e4:	009b      	lsls	r3, r3, #2
    54e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    54ea:	440b      	add	r3, r1
    54ec:	9305      	str	r3, [sp, #20]
                break;
    54ee:	e009      	b.n	5504 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    54f0:	9b03      	ldr	r3, [sp, #12]
    54f2:	3301      	adds	r3, #1
    54f4:	9303      	str	r3, [sp, #12]
    54f6:	4b2f      	ldr	r3, [pc, #188]	; (55b4 <getCoreDividerConfig+0x140>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	7b1b      	ldrb	r3, [r3, #12]
    54fc:	461a      	mov	r2, r3
    54fe:	9b03      	ldr	r3, [sp, #12]
    5500:	4293      	cmp	r3, r2
    5502:	d3db      	bcc.n	54bc <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5504:	9b05      	ldr	r3, [sp, #20]
    5506:	2b00      	cmp	r3, #0
    5508:	d14d      	bne.n	55a6 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    550a:	9a04      	ldr	r2, [sp, #16]
    550c:	4613      	mov	r3, r2
    550e:	005b      	lsls	r3, r3, #1
    5510:	4413      	add	r3, r2
    5512:	009b      	lsls	r3, r3, #2
    5514:	4a28      	ldr	r2, [pc, #160]	; (55b8 <getCoreDividerConfig+0x144>)
    5516:	4413      	add	r3, r2
    5518:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    551a:	4927      	ldr	r1, [pc, #156]	; (55b8 <getCoreDividerConfig+0x144>)
    551c:	9a04      	ldr	r2, [sp, #16]
    551e:	4613      	mov	r3, r2
    5520:	005b      	lsls	r3, r3, #1
    5522:	4413      	add	r3, r2
    5524:	009b      	lsls	r3, r3, #2
    5526:	440b      	add	r3, r1
    5528:	9a01      	ldr	r2, [sp, #4]
    552a:	601a      	str	r2, [r3, #0]
        switch(Name)
    552c:	9b01      	ldr	r3, [sp, #4]
    552e:	2b1f      	cmp	r3, #31
    5530:	d029      	beq.n	5586 <getCoreDividerConfig+0x112>
    5532:	9b01      	ldr	r3, [sp, #4]
    5534:	2b1f      	cmp	r3, #31
    5536:	d838      	bhi.n	55aa <getCoreDividerConfig+0x136>
    5538:	9b01      	ldr	r3, [sp, #4]
    553a:	2b1d      	cmp	r3, #29
    553c:	d003      	beq.n	5546 <getCoreDividerConfig+0xd2>
    553e:	9b01      	ldr	r3, [sp, #4]
    5540:	2b1e      	cmp	r3, #30
    5542:	d010      	beq.n	5566 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5544:	e031      	b.n	55aa <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5546:	4b1d      	ldr	r3, [pc, #116]	; (55bc <getCoreDividerConfig+0x148>)
    5548:	695b      	ldr	r3, [r3, #20]
    554a:	0c1b      	lsrs	r3, r3, #16
    554c:	f003 030f 	and.w	r3, r3, #15
    5550:	1c59      	adds	r1, r3, #1
    5552:	4819      	ldr	r0, [pc, #100]	; (55b8 <getCoreDividerConfig+0x144>)
    5554:	9a04      	ldr	r2, [sp, #16]
    5556:	4613      	mov	r3, r2
    5558:	005b      	lsls	r3, r3, #1
    555a:	4413      	add	r3, r2
    555c:	009b      	lsls	r3, r3, #2
    555e:	4403      	add	r3, r0
    5560:	3304      	adds	r3, #4
    5562:	6019      	str	r1, [r3, #0]
                break;
    5564:	e022      	b.n	55ac <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5566:	4b15      	ldr	r3, [pc, #84]	; (55bc <getCoreDividerConfig+0x148>)
    5568:	699b      	ldr	r3, [r3, #24]
    556a:	0c1b      	lsrs	r3, r3, #16
    556c:	f003 030f 	and.w	r3, r3, #15
    5570:	1c59      	adds	r1, r3, #1
    5572:	4811      	ldr	r0, [pc, #68]	; (55b8 <getCoreDividerConfig+0x144>)
    5574:	9a04      	ldr	r2, [sp, #16]
    5576:	4613      	mov	r3, r2
    5578:	005b      	lsls	r3, r3, #1
    557a:	4413      	add	r3, r2
    557c:	009b      	lsls	r3, r3, #2
    557e:	4403      	add	r3, r0
    5580:	3304      	adds	r3, #4
    5582:	6019      	str	r1, [r3, #0]
                break;
    5584:	e012      	b.n	55ac <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5586:	4b0d      	ldr	r3, [pc, #52]	; (55bc <getCoreDividerConfig+0x148>)
    5588:	69db      	ldr	r3, [r3, #28]
    558a:	0c1b      	lsrs	r3, r3, #16
    558c:	f003 030f 	and.w	r3, r3, #15
    5590:	1c59      	adds	r1, r3, #1
    5592:	4809      	ldr	r0, [pc, #36]	; (55b8 <getCoreDividerConfig+0x144>)
    5594:	9a04      	ldr	r2, [sp, #16]
    5596:	4613      	mov	r3, r2
    5598:	005b      	lsls	r3, r3, #1
    559a:	4413      	add	r3, r2
    559c:	009b      	lsls	r3, r3, #2
    559e:	4403      	add	r3, r0
    55a0:	3304      	adds	r3, #4
    55a2:	6019      	str	r1, [r3, #0]
                break;
    55a4:	e002      	b.n	55ac <getCoreDividerConfig+0x138>
        }
    }
    55a6:	bf00      	nop
    55a8:	e000      	b.n	55ac <getCoreDividerConfig+0x138>
                break;
    55aa:	bf00      	nop

    return ReturnValue;
    55ac:	9b05      	ldr	r3, [sp, #20]
}
    55ae:	4618      	mov	r0, r3
    55b0:	b006      	add	sp, #24
    55b2:	4770      	bx	lr
    55b4:	1fff8b98 	.word	0x1fff8b98
    55b8:	1fff8c64 	.word	0x1fff8c64
    55bc:	40064000 	.word	0x40064000

000055c0 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    55c0:	b086      	sub	sp, #24
    55c2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    55c4:	2300      	movs	r3, #0
    55c6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    55c8:	2300      	movs	r3, #0
    55ca:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    55cc:	9b01      	ldr	r3, [sp, #4]
    55ce:	2b23      	cmp	r3, #35	; 0x23
    55d0:	d00f      	beq.n	55f2 <getBusDividerConfig+0x32>
    55d2:	9b01      	ldr	r3, [sp, #4]
    55d4:	2b23      	cmp	r3, #35	; 0x23
    55d6:	d80f      	bhi.n	55f8 <getBusDividerConfig+0x38>
    55d8:	9b01      	ldr	r3, [sp, #4]
    55da:	2b21      	cmp	r3, #33	; 0x21
    55dc:	d003      	beq.n	55e6 <getBusDividerConfig+0x26>
    55de:	9b01      	ldr	r3, [sp, #4]
    55e0:	2b22      	cmp	r3, #34	; 0x22
    55e2:	d003      	beq.n	55ec <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    55e4:	e008      	b.n	55f8 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    55e6:	2300      	movs	r3, #0
    55e8:	9304      	str	r3, [sp, #16]
            break;
    55ea:	e006      	b.n	55fa <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    55ec:	2301      	movs	r3, #1
    55ee:	9304      	str	r3, [sp, #16]
            break;
    55f0:	e003      	b.n	55fa <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    55f2:	2302      	movs	r3, #2
    55f4:	9304      	str	r3, [sp, #16]
            break;
    55f6:	e000      	b.n	55fa <getBusDividerConfig+0x3a>
                break;
    55f8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    55fa:	4b41      	ldr	r3, [pc, #260]	; (5700 <getBusDividerConfig+0x140>)
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	2b00      	cmp	r3, #0
    5600:	d026      	beq.n	5650 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5602:	2300      	movs	r3, #0
    5604:	9303      	str	r3, [sp, #12]
    5606:	e01c      	b.n	5642 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5608:	4b3d      	ldr	r3, [pc, #244]	; (5700 <getBusDividerConfig+0x140>)
    560a:	6819      	ldr	r1, [r3, #0]
    560c:	9a03      	ldr	r2, [sp, #12]
    560e:	4613      	mov	r3, r2
    5610:	005b      	lsls	r3, r3, #1
    5612:	4413      	add	r3, r2
    5614:	009b      	lsls	r3, r3, #2
    5616:	440b      	add	r3, r1
    5618:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	9a01      	ldr	r2, [sp, #4]
    5620:	429a      	cmp	r2, r3
    5622:	d10b      	bne.n	563c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5624:	4b36      	ldr	r3, [pc, #216]	; (5700 <getBusDividerConfig+0x140>)
    5626:	6819      	ldr	r1, [r3, #0]
    5628:	9a03      	ldr	r2, [sp, #12]
    562a:	4613      	mov	r3, r2
    562c:	005b      	lsls	r3, r3, #1
    562e:	4413      	add	r3, r2
    5630:	009b      	lsls	r3, r3, #2
    5632:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5636:	440b      	add	r3, r1
    5638:	9305      	str	r3, [sp, #20]
                break;
    563a:	e009      	b.n	5650 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    563c:	9b03      	ldr	r3, [sp, #12]
    563e:	3301      	adds	r3, #1
    5640:	9303      	str	r3, [sp, #12]
    5642:	4b2f      	ldr	r3, [pc, #188]	; (5700 <getBusDividerConfig+0x140>)
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	7b1b      	ldrb	r3, [r3, #12]
    5648:	461a      	mov	r2, r3
    564a:	9b03      	ldr	r3, [sp, #12]
    564c:	4293      	cmp	r3, r2
    564e:	d3db      	bcc.n	5608 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5650:	9b05      	ldr	r3, [sp, #20]
    5652:	2b00      	cmp	r3, #0
    5654:	d14d      	bne.n	56f2 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5656:	9a04      	ldr	r2, [sp, #16]
    5658:	4613      	mov	r3, r2
    565a:	005b      	lsls	r3, r3, #1
    565c:	4413      	add	r3, r2
    565e:	009b      	lsls	r3, r3, #2
    5660:	4a28      	ldr	r2, [pc, #160]	; (5704 <getBusDividerConfig+0x144>)
    5662:	4413      	add	r3, r2
    5664:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5666:	4927      	ldr	r1, [pc, #156]	; (5704 <getBusDividerConfig+0x144>)
    5668:	9a04      	ldr	r2, [sp, #16]
    566a:	4613      	mov	r3, r2
    566c:	005b      	lsls	r3, r3, #1
    566e:	4413      	add	r3, r2
    5670:	009b      	lsls	r3, r3, #2
    5672:	440b      	add	r3, r1
    5674:	9a01      	ldr	r2, [sp, #4]
    5676:	601a      	str	r2, [r3, #0]
        switch(Name)
    5678:	9b01      	ldr	r3, [sp, #4]
    567a:	2b23      	cmp	r3, #35	; 0x23
    567c:	d029      	beq.n	56d2 <getBusDividerConfig+0x112>
    567e:	9b01      	ldr	r3, [sp, #4]
    5680:	2b23      	cmp	r3, #35	; 0x23
    5682:	d838      	bhi.n	56f6 <getBusDividerConfig+0x136>
    5684:	9b01      	ldr	r3, [sp, #4]
    5686:	2b21      	cmp	r3, #33	; 0x21
    5688:	d003      	beq.n	5692 <getBusDividerConfig+0xd2>
    568a:	9b01      	ldr	r3, [sp, #4]
    568c:	2b22      	cmp	r3, #34	; 0x22
    568e:	d010      	beq.n	56b2 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5690:	e031      	b.n	56f6 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5692:	4b1d      	ldr	r3, [pc, #116]	; (5708 <getBusDividerConfig+0x148>)
    5694:	695b      	ldr	r3, [r3, #20]
    5696:	091b      	lsrs	r3, r3, #4
    5698:	f003 030f 	and.w	r3, r3, #15
    569c:	1c59      	adds	r1, r3, #1
    569e:	4819      	ldr	r0, [pc, #100]	; (5704 <getBusDividerConfig+0x144>)
    56a0:	9a04      	ldr	r2, [sp, #16]
    56a2:	4613      	mov	r3, r2
    56a4:	005b      	lsls	r3, r3, #1
    56a6:	4413      	add	r3, r2
    56a8:	009b      	lsls	r3, r3, #2
    56aa:	4403      	add	r3, r0
    56ac:	3304      	adds	r3, #4
    56ae:	6019      	str	r1, [r3, #0]
                break;
    56b0:	e022      	b.n	56f8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    56b2:	4b15      	ldr	r3, [pc, #84]	; (5708 <getBusDividerConfig+0x148>)
    56b4:	699b      	ldr	r3, [r3, #24]
    56b6:	091b      	lsrs	r3, r3, #4
    56b8:	f003 030f 	and.w	r3, r3, #15
    56bc:	1c59      	adds	r1, r3, #1
    56be:	4811      	ldr	r0, [pc, #68]	; (5704 <getBusDividerConfig+0x144>)
    56c0:	9a04      	ldr	r2, [sp, #16]
    56c2:	4613      	mov	r3, r2
    56c4:	005b      	lsls	r3, r3, #1
    56c6:	4413      	add	r3, r2
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	4403      	add	r3, r0
    56cc:	3304      	adds	r3, #4
    56ce:	6019      	str	r1, [r3, #0]
                break;
    56d0:	e012      	b.n	56f8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    56d2:	4b0d      	ldr	r3, [pc, #52]	; (5708 <getBusDividerConfig+0x148>)
    56d4:	69db      	ldr	r3, [r3, #28]
    56d6:	091b      	lsrs	r3, r3, #4
    56d8:	f003 030f 	and.w	r3, r3, #15
    56dc:	1c59      	adds	r1, r3, #1
    56de:	4809      	ldr	r0, [pc, #36]	; (5704 <getBusDividerConfig+0x144>)
    56e0:	9a04      	ldr	r2, [sp, #16]
    56e2:	4613      	mov	r3, r2
    56e4:	005b      	lsls	r3, r3, #1
    56e6:	4413      	add	r3, r2
    56e8:	009b      	lsls	r3, r3, #2
    56ea:	4403      	add	r3, r0
    56ec:	3304      	adds	r3, #4
    56ee:	6019      	str	r1, [r3, #0]
                break;
    56f0:	e002      	b.n	56f8 <getBusDividerConfig+0x138>
        }
    }
    56f2:	bf00      	nop
    56f4:	e000      	b.n	56f8 <getBusDividerConfig+0x138>
                break;
    56f6:	bf00      	nop

    return ReturnValue;
    56f8:	9b05      	ldr	r3, [sp, #20]
}
    56fa:	4618      	mov	r0, r3
    56fc:	b006      	add	sp, #24
    56fe:	4770      	bx	lr
    5700:	1fff8b98 	.word	0x1fff8b98
    5704:	1fff8c88 	.word	0x1fff8c88
    5708:	40064000 	.word	0x40064000

0000570c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    570c:	b086      	sub	sp, #24
    570e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5710:	2300      	movs	r3, #0
    5712:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5714:	2300      	movs	r3, #0
    5716:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5718:	9b01      	ldr	r3, [sp, #4]
    571a:	2b27      	cmp	r3, #39	; 0x27
    571c:	d00f      	beq.n	573e <getSlowDividerConfig+0x32>
    571e:	9b01      	ldr	r3, [sp, #4]
    5720:	2b27      	cmp	r3, #39	; 0x27
    5722:	d80f      	bhi.n	5744 <getSlowDividerConfig+0x38>
    5724:	9b01      	ldr	r3, [sp, #4]
    5726:	2b25      	cmp	r3, #37	; 0x25
    5728:	d003      	beq.n	5732 <getSlowDividerConfig+0x26>
    572a:	9b01      	ldr	r3, [sp, #4]
    572c:	2b26      	cmp	r3, #38	; 0x26
    572e:	d003      	beq.n	5738 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5730:	e008      	b.n	5744 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5732:	2300      	movs	r3, #0
    5734:	9304      	str	r3, [sp, #16]
            break;
    5736:	e006      	b.n	5746 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5738:	2301      	movs	r3, #1
    573a:	9304      	str	r3, [sp, #16]
            break;
    573c:	e003      	b.n	5746 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    573e:	2302      	movs	r3, #2
    5740:	9304      	str	r3, [sp, #16]
            break;
    5742:	e000      	b.n	5746 <getSlowDividerConfig+0x3a>
                break;
    5744:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5746:	4b40      	ldr	r3, [pc, #256]	; (5848 <getSlowDividerConfig+0x13c>)
    5748:	681b      	ldr	r3, [r3, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d026      	beq.n	579c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    574e:	2300      	movs	r3, #0
    5750:	9303      	str	r3, [sp, #12]
    5752:	e01c      	b.n	578e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5754:	4b3c      	ldr	r3, [pc, #240]	; (5848 <getSlowDividerConfig+0x13c>)
    5756:	6819      	ldr	r1, [r3, #0]
    5758:	9a03      	ldr	r2, [sp, #12]
    575a:	4613      	mov	r3, r2
    575c:	005b      	lsls	r3, r3, #1
    575e:	4413      	add	r3, r2
    5760:	009b      	lsls	r3, r3, #2
    5762:	440b      	add	r3, r1
    5764:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	9a01      	ldr	r2, [sp, #4]
    576c:	429a      	cmp	r2, r3
    576e:	d10b      	bne.n	5788 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5770:	4b35      	ldr	r3, [pc, #212]	; (5848 <getSlowDividerConfig+0x13c>)
    5772:	6819      	ldr	r1, [r3, #0]
    5774:	9a03      	ldr	r2, [sp, #12]
    5776:	4613      	mov	r3, r2
    5778:	005b      	lsls	r3, r3, #1
    577a:	4413      	add	r3, r2
    577c:	009b      	lsls	r3, r3, #2
    577e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5782:	440b      	add	r3, r1
    5784:	9305      	str	r3, [sp, #20]
                break;
    5786:	e009      	b.n	579c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5788:	9b03      	ldr	r3, [sp, #12]
    578a:	3301      	adds	r3, #1
    578c:	9303      	str	r3, [sp, #12]
    578e:	4b2e      	ldr	r3, [pc, #184]	; (5848 <getSlowDividerConfig+0x13c>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	7b1b      	ldrb	r3, [r3, #12]
    5794:	461a      	mov	r2, r3
    5796:	9b03      	ldr	r3, [sp, #12]
    5798:	4293      	cmp	r3, r2
    579a:	d3db      	bcc.n	5754 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    579c:	9b05      	ldr	r3, [sp, #20]
    579e:	2b00      	cmp	r3, #0
    57a0:	d14a      	bne.n	5838 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    57a2:	9a04      	ldr	r2, [sp, #16]
    57a4:	4613      	mov	r3, r2
    57a6:	005b      	lsls	r3, r3, #1
    57a8:	4413      	add	r3, r2
    57aa:	009b      	lsls	r3, r3, #2
    57ac:	4a27      	ldr	r2, [pc, #156]	; (584c <getSlowDividerConfig+0x140>)
    57ae:	4413      	add	r3, r2
    57b0:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    57b2:	4926      	ldr	r1, [pc, #152]	; (584c <getSlowDividerConfig+0x140>)
    57b4:	9a04      	ldr	r2, [sp, #16]
    57b6:	4613      	mov	r3, r2
    57b8:	005b      	lsls	r3, r3, #1
    57ba:	4413      	add	r3, r2
    57bc:	009b      	lsls	r3, r3, #2
    57be:	440b      	add	r3, r1
    57c0:	9a01      	ldr	r2, [sp, #4]
    57c2:	601a      	str	r2, [r3, #0]
        switch(Name)
    57c4:	9b01      	ldr	r3, [sp, #4]
    57c6:	2b27      	cmp	r3, #39	; 0x27
    57c8:	d027      	beq.n	581a <getSlowDividerConfig+0x10e>
    57ca:	9b01      	ldr	r3, [sp, #4]
    57cc:	2b27      	cmp	r3, #39	; 0x27
    57ce:	d835      	bhi.n	583c <getSlowDividerConfig+0x130>
    57d0:	9b01      	ldr	r3, [sp, #4]
    57d2:	2b25      	cmp	r3, #37	; 0x25
    57d4:	d003      	beq.n	57de <getSlowDividerConfig+0xd2>
    57d6:	9b01      	ldr	r3, [sp, #4]
    57d8:	2b26      	cmp	r3, #38	; 0x26
    57da:	d00f      	beq.n	57fc <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    57dc:	e02e      	b.n	583c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    57de:	4b1c      	ldr	r3, [pc, #112]	; (5850 <getSlowDividerConfig+0x144>)
    57e0:	695b      	ldr	r3, [r3, #20]
    57e2:	f003 030f 	and.w	r3, r3, #15
    57e6:	1c59      	adds	r1, r3, #1
    57e8:	4818      	ldr	r0, [pc, #96]	; (584c <getSlowDividerConfig+0x140>)
    57ea:	9a04      	ldr	r2, [sp, #16]
    57ec:	4613      	mov	r3, r2
    57ee:	005b      	lsls	r3, r3, #1
    57f0:	4413      	add	r3, r2
    57f2:	009b      	lsls	r3, r3, #2
    57f4:	4403      	add	r3, r0
    57f6:	3304      	adds	r3, #4
    57f8:	6019      	str	r1, [r3, #0]
                break;
    57fa:	e020      	b.n	583e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    57fc:	4b14      	ldr	r3, [pc, #80]	; (5850 <getSlowDividerConfig+0x144>)
    57fe:	699b      	ldr	r3, [r3, #24]
    5800:	f003 030f 	and.w	r3, r3, #15
    5804:	1c59      	adds	r1, r3, #1
    5806:	4811      	ldr	r0, [pc, #68]	; (584c <getSlowDividerConfig+0x140>)
    5808:	9a04      	ldr	r2, [sp, #16]
    580a:	4613      	mov	r3, r2
    580c:	005b      	lsls	r3, r3, #1
    580e:	4413      	add	r3, r2
    5810:	009b      	lsls	r3, r3, #2
    5812:	4403      	add	r3, r0
    5814:	3304      	adds	r3, #4
    5816:	6019      	str	r1, [r3, #0]
                break;
    5818:	e011      	b.n	583e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    581a:	4b0d      	ldr	r3, [pc, #52]	; (5850 <getSlowDividerConfig+0x144>)
    581c:	69db      	ldr	r3, [r3, #28]
    581e:	f003 030f 	and.w	r3, r3, #15
    5822:	1c59      	adds	r1, r3, #1
    5824:	4809      	ldr	r0, [pc, #36]	; (584c <getSlowDividerConfig+0x140>)
    5826:	9a04      	ldr	r2, [sp, #16]
    5828:	4613      	mov	r3, r2
    582a:	005b      	lsls	r3, r3, #1
    582c:	4413      	add	r3, r2
    582e:	009b      	lsls	r3, r3, #2
    5830:	4403      	add	r3, r0
    5832:	3304      	adds	r3, #4
    5834:	6019      	str	r1, [r3, #0]
                break;
    5836:	e002      	b.n	583e <getSlowDividerConfig+0x132>
        }
    }
    5838:	bf00      	nop
    583a:	e000      	b.n	583e <getSlowDividerConfig+0x132>
                break;
    583c:	bf00      	nop

    return ReturnValue;
    583e:	9b05      	ldr	r3, [sp, #20]
}
    5840:	4618      	mov	r0, r3
    5842:	b006      	add	sp, #24
    5844:	4770      	bx	lr
    5846:	bf00      	nop
    5848:	1fff8b98 	.word	0x1fff8b98
    584c:	1fff8cac 	.word	0x1fff8cac
    5850:	40064000 	.word	0x40064000

00005854 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5854:	b500      	push	{lr}
    5856:	b083      	sub	sp, #12
    5858:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    585a:	4b64      	ldr	r3, [pc, #400]	; (59ec <Clock_Ip_ClockInitializeObjects+0x198>)
    585c:	781b      	ldrb	r3, [r3, #0]
    585e:	f083 0301 	eor.w	r3, r3, #1
    5862:	b2db      	uxtb	r3, r3
    5864:	2b00      	cmp	r3, #0
    5866:	d05b      	beq.n	5920 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5868:	4b60      	ldr	r3, [pc, #384]	; (59ec <Clock_Ip_ClockInitializeObjects+0x198>)
    586a:	2201      	movs	r2, #1
    586c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    586e:	4b60      	ldr	r3, [pc, #384]	; (59f0 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5870:	785b      	ldrb	r3, [r3, #1]
    5872:	461a      	mov	r2, r3
    5874:	4613      	mov	r3, r2
    5876:	009b      	lsls	r3, r3, #2
    5878:	4413      	add	r3, r2
    587a:	009b      	lsls	r3, r3, #2
    587c:	4a5d      	ldr	r2, [pc, #372]	; (59f4 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    587e:	4413      	add	r3, r2
    5880:	4a5d      	ldr	r2, [pc, #372]	; (59f8 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5882:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5884:	4b5d      	ldr	r3, [pc, #372]	; (59fc <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5886:	785b      	ldrb	r3, [r3, #1]
    5888:	461a      	mov	r2, r3
    588a:	4613      	mov	r3, r2
    588c:	009b      	lsls	r3, r3, #2
    588e:	4413      	add	r3, r2
    5890:	009b      	lsls	r3, r3, #2
    5892:	4a5b      	ldr	r2, [pc, #364]	; (5a00 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5894:	4413      	add	r3, r2
    5896:	4a5b      	ldr	r2, [pc, #364]	; (5a04 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5898:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    589a:	4b5b      	ldr	r3, [pc, #364]	; (5a08 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    589c:	791b      	ldrb	r3, [r3, #4]
    589e:	461a      	mov	r2, r3
    58a0:	4613      	mov	r3, r2
    58a2:	005b      	lsls	r3, r3, #1
    58a4:	4413      	add	r3, r2
    58a6:	009b      	lsls	r3, r3, #2
    58a8:	4a58      	ldr	r2, [pc, #352]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    58aa:	4413      	add	r3, r2
    58ac:	4a58      	ldr	r2, [pc, #352]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    58ae:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    58b0:	4b58      	ldr	r3, [pc, #352]	; (5a14 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    58b2:	795b      	ldrb	r3, [r3, #5]
    58b4:	00db      	lsls	r3, r3, #3
    58b6:	4a58      	ldr	r2, [pc, #352]	; (5a18 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    58b8:	4413      	add	r3, r2
    58ba:	4a58      	ldr	r2, [pc, #352]	; (5a1c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    58bc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    58be:	4b55      	ldr	r3, [pc, #340]	; (5a14 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    58c0:	79db      	ldrb	r3, [r3, #7]
    58c2:	00db      	lsls	r3, r3, #3
    58c4:	4a54      	ldr	r2, [pc, #336]	; (5a18 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    58c6:	4413      	add	r3, r2
    58c8:	4a55      	ldr	r2, [pc, #340]	; (5a20 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    58ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    58cc:	4b55      	ldr	r3, [pc, #340]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58ce:	799b      	ldrb	r3, [r3, #6]
    58d0:	009b      	lsls	r3, r3, #2
    58d2:	4a55      	ldr	r2, [pc, #340]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58d4:	4413      	add	r3, r2
    58d6:	4a55      	ldr	r2, [pc, #340]	; (5a2c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    58d8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    58da:	4b52      	ldr	r3, [pc, #328]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58dc:	7a1b      	ldrb	r3, [r3, #8]
    58de:	009b      	lsls	r3, r3, #2
    58e0:	4a51      	ldr	r2, [pc, #324]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58e2:	4413      	add	r3, r2
    58e4:	4a52      	ldr	r2, [pc, #328]	; (5a30 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    58e6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    58e8:	4b4e      	ldr	r3, [pc, #312]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58ea:	7a5b      	ldrb	r3, [r3, #9]
    58ec:	009b      	lsls	r3, r3, #2
    58ee:	4a4e      	ldr	r2, [pc, #312]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58f0:	4413      	add	r3, r2
    58f2:	4a50      	ldr	r2, [pc, #320]	; (5a34 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    58f4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    58f6:	4b4b      	ldr	r3, [pc, #300]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58f8:	7adb      	ldrb	r3, [r3, #11]
    58fa:	009b      	lsls	r3, r3, #2
    58fc:	4a4a      	ldr	r2, [pc, #296]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58fe:	4413      	add	r3, r2
    5900:	4a4d      	ldr	r2, [pc, #308]	; (5a38 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5902:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5904:	4b47      	ldr	r3, [pc, #284]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5906:	7b1b      	ldrb	r3, [r3, #12]
    5908:	009b      	lsls	r3, r3, #2
    590a:	4a47      	ldr	r2, [pc, #284]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    590c:	4413      	add	r3, r2
    590e:	4a4b      	ldr	r2, [pc, #300]	; (5a3c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5910:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5912:	4b44      	ldr	r3, [pc, #272]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5914:	7b9b      	ldrb	r3, [r3, #14]
    5916:	009b      	lsls	r3, r3, #2
    5918:	4a43      	ldr	r2, [pc, #268]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    591a:	4413      	add	r3, r2
    591c:	4a48      	ldr	r2, [pc, #288]	; (5a40 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    591e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5920:	4b48      	ldr	r3, [pc, #288]	; (5a44 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	2b00      	cmp	r3, #0
    5926:	d002      	beq.n	592e <Clock_Ip_ClockInitializeObjects+0xda>
    5928:	9b01      	ldr	r3, [sp, #4]
    592a:	2b00      	cmp	r3, #0
    592c:	d003      	beq.n	5936 <Clock_Ip_ClockInitializeObjects+0xe2>
    592e:	4b46      	ldr	r3, [pc, #280]	; (5a48 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	2b00      	cmp	r3, #0
    5934:	d056      	beq.n	59e4 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5936:	f7ff fc09 	bl	514c <getFircConfig>
    593a:	4603      	mov	r3, r0
    593c:	4a43      	ldr	r2, [pc, #268]	; (5a4c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    593e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5940:	f7ff fc60 	bl	5204 <getSoscConfig>
    5944:	4603      	mov	r3, r0
    5946:	4a42      	ldr	r2, [pc, #264]	; (5a50 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5948:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    594a:	f7ff fca7 	bl	529c <getSpllConfig>
    594e:	4603      	mov	r3, r0
    5950:	4a40      	ldr	r2, [pc, #256]	; (5a54 <Clock_Ip_ClockInitializeObjects+0x200>)
    5952:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5954:	2019      	movs	r0, #25
    5956:	f7ff fcfb 	bl	5350 <getSelectorConfig>
    595a:	4603      	mov	r3, r0
    595c:	4a3e      	ldr	r2, [pc, #248]	; (5a58 <Clock_Ip_ClockInitializeObjects+0x204>)
    595e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5960:	201a      	movs	r0, #26
    5962:	f7ff fcf5 	bl	5350 <getSelectorConfig>
    5966:	4603      	mov	r3, r0
    5968:	4a3c      	ldr	r2, [pc, #240]	; (5a5c <Clock_Ip_ClockInitializeObjects+0x208>)
    596a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    596c:	201b      	movs	r0, #27
    596e:	f7ff fcef 	bl	5350 <getSelectorConfig>
    5972:	4603      	mov	r3, r0
    5974:	4a3a      	ldr	r2, [pc, #232]	; (5a60 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5976:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5978:	201d      	movs	r0, #29
    597a:	f7ff fd7b 	bl	5474 <getCoreDividerConfig>
    597e:	4603      	mov	r3, r0
    5980:	4a38      	ldr	r2, [pc, #224]	; (5a64 <Clock_Ip_ClockInitializeObjects+0x210>)
    5982:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5984:	201e      	movs	r0, #30
    5986:	f7ff fd75 	bl	5474 <getCoreDividerConfig>
    598a:	4603      	mov	r3, r0
    598c:	4a36      	ldr	r2, [pc, #216]	; (5a68 <Clock_Ip_ClockInitializeObjects+0x214>)
    598e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5990:	201f      	movs	r0, #31
    5992:	f7ff fd6f 	bl	5474 <getCoreDividerConfig>
    5996:	4603      	mov	r3, r0
    5998:	4a34      	ldr	r2, [pc, #208]	; (5a6c <Clock_Ip_ClockInitializeObjects+0x218>)
    599a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    599c:	2021      	movs	r0, #33	; 0x21
    599e:	f7ff fe0f 	bl	55c0 <getBusDividerConfig>
    59a2:	4603      	mov	r3, r0
    59a4:	4a32      	ldr	r2, [pc, #200]	; (5a70 <Clock_Ip_ClockInitializeObjects+0x21c>)
    59a6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    59a8:	2022      	movs	r0, #34	; 0x22
    59aa:	f7ff fe09 	bl	55c0 <getBusDividerConfig>
    59ae:	4603      	mov	r3, r0
    59b0:	4a30      	ldr	r2, [pc, #192]	; (5a74 <Clock_Ip_ClockInitializeObjects+0x220>)
    59b2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    59b4:	2023      	movs	r0, #35	; 0x23
    59b6:	f7ff fe03 	bl	55c0 <getBusDividerConfig>
    59ba:	4603      	mov	r3, r0
    59bc:	4a2e      	ldr	r2, [pc, #184]	; (5a78 <Clock_Ip_ClockInitializeObjects+0x224>)
    59be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    59c0:	2025      	movs	r0, #37	; 0x25
    59c2:	f7ff fea3 	bl	570c <getSlowDividerConfig>
    59c6:	4603      	mov	r3, r0
    59c8:	4a2c      	ldr	r2, [pc, #176]	; (5a7c <Clock_Ip_ClockInitializeObjects+0x228>)
    59ca:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    59cc:	2026      	movs	r0, #38	; 0x26
    59ce:	f7ff fe9d 	bl	570c <getSlowDividerConfig>
    59d2:	4603      	mov	r3, r0
    59d4:	4a2a      	ldr	r2, [pc, #168]	; (5a80 <Clock_Ip_ClockInitializeObjects+0x22c>)
    59d6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    59d8:	2027      	movs	r0, #39	; 0x27
    59da:	f7ff fe97 	bl	570c <getSlowDividerConfig>
    59de:	4603      	mov	r3, r0
    59e0:	4a28      	ldr	r2, [pc, #160]	; (5a84 <Clock_Ip_ClockInitializeObjects+0x230>)
    59e2:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    59e4:	bf00      	nop
    59e6:	b003      	add	sp, #12
    59e8:	f85d fb04 	ldr.w	pc, [sp], #4
    59ec:	1fff8cd0 	.word	0x1fff8cd0
    59f0:	00010780 	.word	0x00010780
    59f4:	00010dcc 	.word	0x00010dcc
    59f8:	1fff8b9c 	.word	0x1fff8b9c
    59fc:	00010740 	.word	0x00010740
    5a00:	00010d14 	.word	0x00010d14
    5a04:	1fff8ba0 	.word	0x1fff8ba0
    5a08:	00010750 	.word	0x00010750
    5a0c:	00010d80 	.word	0x00010d80
    5a10:	1fff8ba4 	.word	0x1fff8ba4
    5a14:	00010790 	.word	0x00010790
    5a18:	00010df8 	.word	0x00010df8
    5a1c:	1fff8ba8 	.word	0x1fff8ba8
    5a20:	1fff8be4 	.word	0x1fff8be4
    5a24:	00010720 	.word	0x00010720
    5a28:	00010cd0 	.word	0x00010cd0
    5a2c:	1fff8bac 	.word	0x1fff8bac
    5a30:	1fff8be8 	.word	0x1fff8be8
    5a34:	1fff8bb0 	.word	0x1fff8bb0
    5a38:	1fff8bec 	.word	0x1fff8bec
    5a3c:	1fff8bb4 	.word	0x1fff8bb4
    5a40:	1fff8bf0 	.word	0x1fff8bf0
    5a44:	1fff8b19 	.word	0x1fff8b19
    5a48:	1fff8b10 	.word	0x1fff8b10
    5a4c:	1fff8bb8 	.word	0x1fff8bb8
    5a50:	1fff8bbc 	.word	0x1fff8bbc
    5a54:	1fff8bc0 	.word	0x1fff8bc0
    5a58:	1fff8bc4 	.word	0x1fff8bc4
    5a5c:	1fff8bc8 	.word	0x1fff8bc8
    5a60:	1fff8bf4 	.word	0x1fff8bf4
    5a64:	1fff8bcc 	.word	0x1fff8bcc
    5a68:	1fff8bd0 	.word	0x1fff8bd0
    5a6c:	1fff8bf8 	.word	0x1fff8bf8
    5a70:	1fff8bd4 	.word	0x1fff8bd4
    5a74:	1fff8bd8 	.word	0x1fff8bd8
    5a78:	1fff8bfc 	.word	0x1fff8bfc
    5a7c:	1fff8bdc 	.word	0x1fff8bdc
    5a80:	1fff8be0 	.word	0x1fff8be0
    5a84:	1fff8c00 	.word	0x1fff8c00

00005a88 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5a88:	b500      	push	{lr}
    5a8a:	b083      	sub	sp, #12
    5a8c:	9001      	str	r0, [sp, #4]
    5a8e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5a90:	9b01      	ldr	r3, [sp, #4]
    5a92:	2b03      	cmp	r3, #3
    5a94:	f000 8090 	beq.w	5bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5a98:	9b01      	ldr	r3, [sp, #4]
    5a9a:	2b03      	cmp	r3, #3
    5a9c:	f200 80d3 	bhi.w	5c46 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d040      	beq.n	5b28 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5aa6:	9b01      	ldr	r3, [sp, #4]
    5aa8:	3b01      	subs	r3, #1
    5aaa:	2b01      	cmp	r3, #1
    5aac:	f200 80cb 	bhi.w	5c46 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5ab0:	9b00      	ldr	r3, [sp, #0]
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	f040 80c9 	bne.w	5c4a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5ab8:	4b68      	ldr	r3, [pc, #416]	; (5c5c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5aba:	2200      	movs	r2, #0
    5abc:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5abe:	4b68      	ldr	r3, [pc, #416]	; (5c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	685b      	ldr	r3, [r3, #4]
    5ac4:	4a67      	ldr	r2, [pc, #412]	; (5c64 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5ac6:	6812      	ldr	r2, [r2, #0]
    5ac8:	4610      	mov	r0, r2
    5aca:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5acc:	4b66      	ldr	r3, [pc, #408]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5ace:	681b      	ldr	r3, [r3, #0]
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	4a66      	ldr	r2, [pc, #408]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5ad4:	6812      	ldr	r2, [r2, #0]
    5ad6:	4610      	mov	r0, r2
    5ad8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5ada:	4b65      	ldr	r3, [pc, #404]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	4a64      	ldr	r2, [pc, #400]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5ae2:	6812      	ldr	r2, [r2, #0]
    5ae4:	4610      	mov	r0, r2
    5ae6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5ae8:	4b63      	ldr	r3, [pc, #396]	; (5c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5aea:	681b      	ldr	r3, [r3, #0]
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	4a63      	ldr	r2, [pc, #396]	; (5c7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5af0:	6812      	ldr	r2, [r2, #0]
    5af2:	4610      	mov	r0, r2
    5af4:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5af6:	4b62      	ldr	r3, [pc, #392]	; (5c80 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5af8:	681b      	ldr	r3, [r3, #0]
    5afa:	691b      	ldr	r3, [r3, #16]
    5afc:	4a61      	ldr	r2, [pc, #388]	; (5c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5afe:	6812      	ldr	r2, [r2, #0]
    5b00:	6812      	ldr	r2, [r2, #0]
    5b02:	4610      	mov	r0, r2
    5b04:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5b06:	4b60      	ldr	r3, [pc, #384]	; (5c88 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b08:	681b      	ldr	r3, [r3, #0]
    5b0a:	68db      	ldr	r3, [r3, #12]
    5b0c:	4a5f      	ldr	r2, [pc, #380]	; (5c8c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b0e:	6812      	ldr	r2, [r2, #0]
    5b10:	6812      	ldr	r2, [r2, #0]
    5b12:	4610      	mov	r0, r2
    5b14:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5b16:	4b5e      	ldr	r3, [pc, #376]	; (5c90 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	689b      	ldr	r3, [r3, #8]
    5b1c:	4a5d      	ldr	r2, [pc, #372]	; (5c94 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5b1e:	6812      	ldr	r2, [r2, #0]
    5b20:	6812      	ldr	r2, [r2, #0]
    5b22:	4610      	mov	r0, r2
    5b24:	4798      	blx	r3
            }
        }
        break;
    5b26:	e090      	b.n	5c4a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5b28:	9b00      	ldr	r3, [sp, #0]
    5b2a:	2b02      	cmp	r3, #2
    5b2c:	f040 808f 	bne.w	5c4e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5b30:	4b4a      	ldr	r3, [pc, #296]	; (5c5c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5b32:	2201      	movs	r2, #1
    5b34:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5b36:	4b56      	ldr	r3, [pc, #344]	; (5c90 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	685b      	ldr	r3, [r3, #4]
    5b3c:	4a55      	ldr	r2, [pc, #340]	; (5c94 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5b3e:	6812      	ldr	r2, [r2, #0]
    5b40:	4610      	mov	r0, r2
    5b42:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5b44:	4b50      	ldr	r3, [pc, #320]	; (5c88 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	691b      	ldr	r3, [r3, #16]
    5b4a:	4a50      	ldr	r2, [pc, #320]	; (5c8c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b4c:	6812      	ldr	r2, [r2, #0]
    5b4e:	4610      	mov	r0, r2
    5b50:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5b52:	4b4d      	ldr	r3, [pc, #308]	; (5c88 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	689b      	ldr	r3, [r3, #8]
    5b58:	4a4c      	ldr	r2, [pc, #304]	; (5c8c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b5a:	6812      	ldr	r2, [r2, #0]
    5b5c:	4610      	mov	r0, r2
    5b5e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5b60:	4b47      	ldr	r3, [pc, #284]	; (5c80 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	68db      	ldr	r3, [r3, #12]
    5b66:	4a47      	ldr	r2, [pc, #284]	; (5c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5b68:	6812      	ldr	r2, [r2, #0]
    5b6a:	4610      	mov	r0, r2
    5b6c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5b6e:	4b44      	ldr	r3, [pc, #272]	; (5c80 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	689b      	ldr	r3, [r3, #8]
    5b74:	4a43      	ldr	r2, [pc, #268]	; (5c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5b76:	6812      	ldr	r2, [r2, #0]
    5b78:	6812      	ldr	r2, [r2, #0]
    5b7a:	4610      	mov	r0, r2
    5b7c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5b7e:	4b38      	ldr	r3, [pc, #224]	; (5c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5b80:	681b      	ldr	r3, [r3, #0]
    5b82:	685b      	ldr	r3, [r3, #4]
    5b84:	4a44      	ldr	r2, [pc, #272]	; (5c98 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5b86:	6812      	ldr	r2, [r2, #0]
    5b88:	4610      	mov	r0, r2
    5b8a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5b8c:	4b36      	ldr	r3, [pc, #216]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5b8e:	681b      	ldr	r3, [r3, #0]
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	4a42      	ldr	r2, [pc, #264]	; (5c9c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5b94:	6812      	ldr	r2, [r2, #0]
    5b96:	4610      	mov	r0, r2
    5b98:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5b9a:	4b35      	ldr	r3, [pc, #212]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	4a3f      	ldr	r2, [pc, #252]	; (5ca0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5ba2:	6812      	ldr	r2, [r2, #0]
    5ba4:	4610      	mov	r0, r2
    5ba6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5ba8:	4b33      	ldr	r3, [pc, #204]	; (5c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	4a3d      	ldr	r2, [pc, #244]	; (5ca4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5bb0:	6812      	ldr	r2, [r2, #0]
    5bb2:	4610      	mov	r0, r2
    5bb4:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5bb6:	e04a      	b.n	5c4e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5bb8:	9b00      	ldr	r3, [sp, #0]
    5bba:	2b02      	cmp	r3, #2
    5bbc:	d149      	bne.n	5c52 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5bbe:	4b27      	ldr	r3, [pc, #156]	; (5c5c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5bc0:	2201      	movs	r2, #1
    5bc2:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5bc4:	4b32      	ldr	r3, [pc, #200]	; (5c90 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	685b      	ldr	r3, [r3, #4]
    5bca:	4a32      	ldr	r2, [pc, #200]	; (5c94 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5bcc:	6812      	ldr	r2, [r2, #0]
    5bce:	4610      	mov	r0, r2
    5bd0:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5bd2:	4b2d      	ldr	r3, [pc, #180]	; (5c88 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5bd4:	681b      	ldr	r3, [r3, #0]
    5bd6:	691b      	ldr	r3, [r3, #16]
    5bd8:	4a2c      	ldr	r2, [pc, #176]	; (5c8c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5bda:	6812      	ldr	r2, [r2, #0]
    5bdc:	4610      	mov	r0, r2
    5bde:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5be0:	4b29      	ldr	r3, [pc, #164]	; (5c88 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	689b      	ldr	r3, [r3, #8]
    5be6:	4a29      	ldr	r2, [pc, #164]	; (5c8c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5be8:	6812      	ldr	r2, [r2, #0]
    5bea:	4610      	mov	r0, r2
    5bec:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5bee:	4b24      	ldr	r3, [pc, #144]	; (5c80 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	68db      	ldr	r3, [r3, #12]
    5bf4:	4a23      	ldr	r2, [pc, #140]	; (5c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5bf6:	6812      	ldr	r2, [r2, #0]
    5bf8:	4610      	mov	r0, r2
    5bfa:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5bfc:	4b20      	ldr	r3, [pc, #128]	; (5c80 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5bfe:	681b      	ldr	r3, [r3, #0]
    5c00:	689b      	ldr	r3, [r3, #8]
    5c02:	4a20      	ldr	r2, [pc, #128]	; (5c84 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5c04:	6812      	ldr	r2, [r2, #0]
    5c06:	6812      	ldr	r2, [r2, #0]
    5c08:	4610      	mov	r0, r2
    5c0a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5c0c:	4b26      	ldr	r3, [pc, #152]	; (5ca8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5c0e:	681b      	ldr	r3, [r3, #0]
    5c10:	685b      	ldr	r3, [r3, #4]
    5c12:	4a26      	ldr	r2, [pc, #152]	; (5cac <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5c14:	6812      	ldr	r2, [r2, #0]
    5c16:	4610      	mov	r0, r2
    5c18:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5c1a:	4b25      	ldr	r3, [pc, #148]	; (5cb0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	681b      	ldr	r3, [r3, #0]
    5c20:	4a24      	ldr	r2, [pc, #144]	; (5cb4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5c22:	6812      	ldr	r2, [r2, #0]
    5c24:	4610      	mov	r0, r2
    5c26:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5c28:	4b23      	ldr	r3, [pc, #140]	; (5cb8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5c2a:	681b      	ldr	r3, [r3, #0]
    5c2c:	681b      	ldr	r3, [r3, #0]
    5c2e:	4a23      	ldr	r2, [pc, #140]	; (5cbc <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5c30:	6812      	ldr	r2, [r2, #0]
    5c32:	4610      	mov	r0, r2
    5c34:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5c36:	4b22      	ldr	r3, [pc, #136]	; (5cc0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5c38:	681b      	ldr	r3, [r3, #0]
    5c3a:	681b      	ldr	r3, [r3, #0]
    5c3c:	4a21      	ldr	r2, [pc, #132]	; (5cc4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5c3e:	6812      	ldr	r2, [r2, #0]
    5c40:	4610      	mov	r0, r2
    5c42:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5c44:	e005      	b.n	5c52 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5c46:	bf00      	nop
    5c48:	e004      	b.n	5c54 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c4a:	bf00      	nop
    5c4c:	e002      	b.n	5c54 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c4e:	bf00      	nop
    5c50:	e000      	b.n	5c54 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c52:	bf00      	nop
    }

}
    5c54:	bf00      	nop
    5c56:	b003      	add	sp, #12
    5c58:	f85d fb04 	ldr.w	pc, [sp], #4
    5c5c:	1fff8b19 	.word	0x1fff8b19
    5c60:	1fff8ba8 	.word	0x1fff8ba8
    5c64:	1fff8bc8 	.word	0x1fff8bc8
    5c68:	1fff8bac 	.word	0x1fff8bac
    5c6c:	1fff8bd0 	.word	0x1fff8bd0
    5c70:	1fff8bb0 	.word	0x1fff8bb0
    5c74:	1fff8bd8 	.word	0x1fff8bd8
    5c78:	1fff8bb4 	.word	0x1fff8bb4
    5c7c:	1fff8be0 	.word	0x1fff8be0
    5c80:	1fff8b9c 	.word	0x1fff8b9c
    5c84:	1fff8bc0 	.word	0x1fff8bc0
    5c88:	1fff8ba0 	.word	0x1fff8ba0
    5c8c:	1fff8bbc 	.word	0x1fff8bbc
    5c90:	1fff8ba4 	.word	0x1fff8ba4
    5c94:	1fff8bb8 	.word	0x1fff8bb8
    5c98:	1fff8bc4 	.word	0x1fff8bc4
    5c9c:	1fff8bcc 	.word	0x1fff8bcc
    5ca0:	1fff8bd4 	.word	0x1fff8bd4
    5ca4:	1fff8bdc 	.word	0x1fff8bdc
    5ca8:	1fff8be4 	.word	0x1fff8be4
    5cac:	1fff8bf4 	.word	0x1fff8bf4
    5cb0:	1fff8be8 	.word	0x1fff8be8
    5cb4:	1fff8bf8 	.word	0x1fff8bf8
    5cb8:	1fff8bec 	.word	0x1fff8bec
    5cbc:	1fff8bfc 	.word	0x1fff8bfc
    5cc0:	1fff8bf0 	.word	0x1fff8bf0
    5cc4:	1fff8c00 	.word	0x1fff8c00

00005cc8 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5cc8:	b500      	push	{lr}
    5cca:	b083      	sub	sp, #12
    5ccc:	9001      	str	r0, [sp, #4]
    5cce:	9100      	str	r1, [sp, #0]
    switch(Command)
    5cd0:	9b00      	ldr	r3, [sp, #0]
    5cd2:	2b04      	cmp	r3, #4
    5cd4:	d010      	beq.n	5cf8 <Clock_Ip_Command+0x30>
    5cd6:	9b00      	ldr	r3, [sp, #0]
    5cd8:	2b04      	cmp	r3, #4
    5cda:	d811      	bhi.n	5d00 <Clock_Ip_Command+0x38>
    5cdc:	9b00      	ldr	r3, [sp, #0]
    5cde:	2b01      	cmp	r3, #1
    5ce0:	d006      	beq.n	5cf0 <Clock_Ip_Command+0x28>
    5ce2:	9b00      	ldr	r3, [sp, #0]
    5ce4:	2b02      	cmp	r3, #2
    5ce6:	d10b      	bne.n	5d00 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5ce8:	9801      	ldr	r0, [sp, #4]
    5cea:	f7ff fdb3 	bl	5854 <Clock_Ip_ClockInitializeObjects>
            break;
    5cee:	e008      	b.n	5d02 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5cf0:	9801      	ldr	r0, [sp, #4]
    5cf2:	f7ff f9db 	bl	50ac <Clock_Ip_SpecificPlatformInitClock>
            break;
    5cf6:	e004      	b.n	5d02 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5cf8:	9801      	ldr	r0, [sp, #4]
    5cfa:	f7ff f8ed 	bl	4ed8 <DisableSafeClock>
            break;
    5cfe:	e000      	b.n	5d02 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5d00:	bf00      	nop
    }
}
    5d02:	bf00      	nop
    5d04:	b003      	add	sp, #12
    5d06:	f85d fb04 	ldr.w	pc, [sp], #4
    5d0a:	bf00      	nop

00005d0c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5d0c:	b500      	push	{lr}
    5d0e:	b085      	sub	sp, #20
    5d10:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5d12:	4a20      	ldr	r2, [pc, #128]	; (5d94 <Mcu_Init+0x88>)
    5d14:	9b01      	ldr	r3, [sp, #4]
    5d16:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5d18:	2300      	movs	r3, #0
    5d1a:	9303      	str	r3, [sp, #12]
    5d1c:	e010      	b.n	5d40 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5d1e:	4b1d      	ldr	r3, [pc, #116]	; (5d94 <Mcu_Init+0x88>)
    5d20:	681b      	ldr	r3, [r3, #0]
    5d22:	6919      	ldr	r1, [r3, #16]
    5d24:	9a03      	ldr	r2, [sp, #12]
    5d26:	4613      	mov	r3, r2
    5d28:	005b      	lsls	r3, r3, #1
    5d2a:	4413      	add	r3, r2
    5d2c:	009b      	lsls	r3, r3, #2
    5d2e:	440b      	add	r3, r1
    5d30:	681b      	ldr	r3, [r3, #0]
    5d32:	9a03      	ldr	r2, [sp, #12]
    5d34:	b2d1      	uxtb	r1, r2
    5d36:	4a18      	ldr	r2, [pc, #96]	; (5d98 <Mcu_Init+0x8c>)
    5d38:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5d3a:	9b03      	ldr	r3, [sp, #12]
    5d3c:	3301      	adds	r3, #1
    5d3e:	9303      	str	r3, [sp, #12]
    5d40:	4b14      	ldr	r3, [pc, #80]	; (5d94 <Mcu_Init+0x88>)
    5d42:	681b      	ldr	r3, [r3, #0]
    5d44:	689b      	ldr	r3, [r3, #8]
    5d46:	9a03      	ldr	r2, [sp, #12]
    5d48:	429a      	cmp	r2, r3
    5d4a:	d3e8      	bcc.n	5d1e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5d4c:	2300      	movs	r3, #0
    5d4e:	9303      	str	r3, [sp, #12]
    5d50:	e010      	b.n	5d74 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5d52:	4b10      	ldr	r3, [pc, #64]	; (5d94 <Mcu_Init+0x88>)
    5d54:	681b      	ldr	r3, [r3, #0]
    5d56:	6959      	ldr	r1, [r3, #20]
    5d58:	9a03      	ldr	r2, [sp, #12]
    5d5a:	4613      	mov	r3, r2
    5d5c:	01db      	lsls	r3, r3, #7
    5d5e:	1a9b      	subs	r3, r3, r2
    5d60:	00db      	lsls	r3, r3, #3
    5d62:	440b      	add	r3, r1
    5d64:	681b      	ldr	r3, [r3, #0]
    5d66:	9a03      	ldr	r2, [sp, #12]
    5d68:	b2d1      	uxtb	r1, r2
    5d6a:	4a0c      	ldr	r2, [pc, #48]	; (5d9c <Mcu_Init+0x90>)
    5d6c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5d6e:	9b03      	ldr	r3, [sp, #12]
    5d70:	3301      	adds	r3, #1
    5d72:	9303      	str	r3, [sp, #12]
    5d74:	4b07      	ldr	r3, [pc, #28]	; (5d94 <Mcu_Init+0x88>)
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	68db      	ldr	r3, [r3, #12]
    5d7a:	9a03      	ldr	r2, [sp, #12]
    5d7c:	429a      	cmp	r2, r3
    5d7e:	d3e8      	bcc.n	5d52 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5d80:	4b04      	ldr	r3, [pc, #16]	; (5d94 <Mcu_Init+0x88>)
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	699b      	ldr	r3, [r3, #24]
    5d86:	4618      	mov	r0, r3
    5d88:	f000 f88a 	bl	5ea0 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5d8c:	bf00      	nop
    5d8e:	b005      	add	sp, #20
    5d90:	f85d fb04 	ldr.w	pc, [sp], #4
    5d94:	1fff8cdc 	.word	0x1fff8cdc
    5d98:	1fff8cd8 	.word	0x1fff8cd8
    5d9c:	1fff8cd4 	.word	0x1fff8cd4

00005da0 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5da0:	b084      	sub	sp, #16
    5da2:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5da4:	2301      	movs	r3, #1
    5da6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5daa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5dae:	4618      	mov	r0, r3
    5db0:	b004      	add	sp, #16
    5db2:	4770      	bx	lr

00005db4 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5db4:	b500      	push	{lr}
    5db6:	b085      	sub	sp, #20
    5db8:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5dba:	4a0e      	ldr	r2, [pc, #56]	; (5df4 <Mcu_InitClock+0x40>)
    5dbc:	9b01      	ldr	r3, [sp, #4]
    5dbe:	4413      	add	r3, r2
    5dc0:	781b      	ldrb	r3, [r3, #0]
    5dc2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5dc6:	4b0c      	ldr	r3, [pc, #48]	; (5df8 <Mcu_InitClock+0x44>)
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	6959      	ldr	r1, [r3, #20]
    5dcc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5dd0:	4613      	mov	r3, r2
    5dd2:	01db      	lsls	r3, r3, #7
    5dd4:	1a9b      	subs	r3, r3, r2
    5dd6:	00db      	lsls	r3, r3, #3
    5dd8:	440b      	add	r3, r1
    5dda:	4618      	mov	r0, r3
    5ddc:	f000 f86a 	bl	5eb4 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5de0:	2300      	movs	r3, #0
    5de2:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5de6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5dea:	4618      	mov	r0, r3
    5dec:	b005      	add	sp, #20
    5dee:	f85d fb04 	ldr.w	pc, [sp], #4
    5df2:	bf00      	nop
    5df4:	1fff8cd4 	.word	0x1fff8cd4
    5df8:	1fff8cdc 	.word	0x1fff8cdc

00005dfc <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5dfc:	b500      	push	{lr}
    5dfe:	b085      	sub	sp, #20
    5e00:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5e02:	4a0d      	ldr	r2, [pc, #52]	; (5e38 <Mcu_SetMode+0x3c>)
    5e04:	9b01      	ldr	r3, [sp, #4]
    5e06:	4413      	add	r3, r2
    5e08:	781b      	ldrb	r3, [r3, #0]
    5e0a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5e0e:	f009 f9b1 	bl	f174 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5e12:	4b0a      	ldr	r3, [pc, #40]	; (5e3c <Mcu_SetMode+0x40>)
    5e14:	681b      	ldr	r3, [r3, #0]
    5e16:	6919      	ldr	r1, [r3, #16]
    5e18:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5e1c:	4613      	mov	r3, r2
    5e1e:	005b      	lsls	r3, r3, #1
    5e20:	4413      	add	r3, r2
    5e22:	009b      	lsls	r3, r3, #2
    5e24:	440b      	add	r3, r1
    5e26:	4618      	mov	r0, r3
    5e28:	f000 f84e 	bl	5ec8 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5e2c:	f009 f9ce 	bl	f1cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5e30:	bf00      	nop
    5e32:	b005      	add	sp, #20
    5e34:	f85d fb04 	ldr.w	pc, [sp], #4
    5e38:	1fff8cd8 	.word	0x1fff8cd8
    5e3c:	1fff8cdc 	.word	0x1fff8cdc

00005e40 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5e40:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5e42:	2302      	movs	r3, #2
    5e44:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5e46:	9b01      	ldr	r3, [sp, #4]
}
    5e48:	4618      	mov	r0, r3
    5e4a:	b002      	add	sp, #8
    5e4c:	4770      	bx	lr

00005e4e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5e4e:	b500      	push	{lr}
    5e50:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5e52:	f000 f843 	bl	5edc <Mcu_Ipw_GetResetReason>
    5e56:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5e58:	9b01      	ldr	r3, [sp, #4]
}
    5e5a:	4618      	mov	r0, r3
    5e5c:	b003      	add	sp, #12
    5e5e:	f85d fb04 	ldr.w	pc, [sp], #4

00005e62 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5e62:	b500      	push	{lr}
    5e64:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5e66:	f000 f83f 	bl	5ee8 <Mcu_Ipw_GetResetRawValue>
    5e6a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5e6c:	9b01      	ldr	r3, [sp, #4]
}
    5e6e:	4618      	mov	r0, r3
    5e70:	b003      	add	sp, #12
    5e72:	f85d fb04 	ldr.w	pc, [sp], #4

00005e76 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e76:	b500      	push	{lr}
    5e78:	b083      	sub	sp, #12
    5e7a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5e7c:	9801      	ldr	r0, [sp, #4]
    5e7e:	f000 f839 	bl	5ef4 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5e82:	bf00      	nop
    5e84:	b003      	add	sp, #12
    5e86:	f85d fb04 	ldr.w	pc, [sp], #4

00005e8a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5e8a:	b082      	sub	sp, #8
    5e8c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5e8e:	4b03      	ldr	r3, [pc, #12]	; (5e9c <Mcu_ClkSrcFailureNotification+0x12>)
    5e90:	681b      	ldr	r3, [r3, #0]
    5e92:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5e94:	bf00      	nop
    5e96:	b002      	add	sp, #8
    5e98:	4770      	bx	lr
    5e9a:	bf00      	nop
    5e9c:	1fff8cdc 	.word	0x1fff8cdc

00005ea0 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5ea0:	b500      	push	{lr}
    5ea2:	b083      	sub	sp, #12
    5ea4:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5ea6:	9801      	ldr	r0, [sp, #4]
    5ea8:	f000 f882 	bl	5fb0 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5eac:	bf00      	nop
    5eae:	b003      	add	sp, #12
    5eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00005eb4 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5eb4:	b500      	push	{lr}
    5eb6:	b083      	sub	sp, #12
    5eb8:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5eba:	9801      	ldr	r0, [sp, #4]
    5ebc:	f7fc fc6a 	bl	2794 <Clock_Ip_InitClock>
}
    5ec0:	bf00      	nop
    5ec2:	b003      	add	sp, #12
    5ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ec8 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5ec8:	b500      	push	{lr}
    5eca:	b083      	sub	sp, #12
    5ecc:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5ece:	9801      	ldr	r0, [sp, #4]
    5ed0:	f000 f820 	bl	5f14 <Power_Ip_SetMode>
}
    5ed4:	bf00      	nop
    5ed6:	b003      	add	sp, #12
    5ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00005edc <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5edc:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5ede:	f000 f84f 	bl	5f80 <Power_Ip_GetResetReason>
    5ee2:	4603      	mov	r3, r0
}
    5ee4:	4618      	mov	r0, r3
    5ee6:	bd08      	pop	{r3, pc}

00005ee8 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5ee8:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5eea:	f000 f857 	bl	5f9c <Power_Ip_GetResetRawValue>
    5eee:	4603      	mov	r3, r0
}
    5ef0:	4618      	mov	r0, r3
    5ef2:	bd08      	pop	{r3, pc}

00005ef4 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5ef4:	b500      	push	{lr}
    5ef6:	b083      	sub	sp, #12
    5ef8:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5efa:	9b01      	ldr	r3, [sp, #4]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d102      	bne.n	5f06 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5f00:	f000 f86c 	bl	5fdc <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5f04:	e001      	b.n	5f0a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5f06:	f000 f86e 	bl	5fe6 <Power_Ip_EnableSleepOnExit>
}
    5f0a:	bf00      	nop
    5f0c:	b003      	add	sp, #12
    5f0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005f14 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5f14:	b500      	push	{lr}
    5f16:	b085      	sub	sp, #20
    5f18:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5f1a:	9b01      	ldr	r3, [sp, #4]
    5f1c:	685b      	ldr	r3, [r3, #4]
    5f1e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5f20:	9802      	ldr	r0, [sp, #8]
    5f22:	f000 f9f5 	bl	6310 <Power_Ip_SMC_ModeCheckEntry>
    5f26:	4603      	mov	r3, r0
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d002      	beq.n	5f32 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5f2c:	2301      	movs	r3, #1
    5f2e:	9303      	str	r3, [sp, #12]
    5f30:	e003      	b.n	5f3a <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5f32:	9801      	ldr	r0, [sp, #4]
    5f34:	f000 fa1e 	bl	6374 <Power_Ip_SMC_ModeConfig>
    5f38:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5f3a:	9b03      	ldr	r3, [sp, #12]
    5f3c:	2b01      	cmp	r3, #1
    5f3e:	d103      	bne.n	5f48 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5f40:	21ff      	movs	r1, #255	; 0xff
    5f42:	2003      	movs	r0, #3
    5f44:	f000 f8f4 	bl	6130 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5f48:	bf00      	nop
    5f4a:	b005      	add	sp, #20
    5f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f50 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5f50:	b084      	sub	sp, #16
    5f52:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5f54:	230c      	movs	r3, #12
    5f56:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5f58:	4a08      	ldr	r2, [pc, #32]	; (5f7c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f5a:	9b01      	ldr	r3, [sp, #4]
    5f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f60:	2b0e      	cmp	r3, #14
    5f62:	d805      	bhi.n	5f70 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5f64:	4a05      	ldr	r2, [pc, #20]	; (5f7c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f66:	9b01      	ldr	r3, [sp, #4]
    5f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f6c:	9303      	str	r3, [sp, #12]
    5f6e:	e001      	b.n	5f74 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5f70:	230c      	movs	r3, #12
    5f72:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5f74:	9b03      	ldr	r3, [sp, #12]
}
    5f76:	4618      	mov	r0, r3
    5f78:	b004      	add	sp, #16
    5f7a:	4770      	bx	lr
    5f7c:	00010e6c 	.word	0x00010e6c

00005f80 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5f80:	b500      	push	{lr}
    5f82:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5f84:	f000 f940 	bl	6208 <Power_Ip_RCM_GetResetReason>
    5f88:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5f8a:	9801      	ldr	r0, [sp, #4]
    5f8c:	f7ff ffe0 	bl	5f50 <Power_Ip_ConvertIntergeToResetType>
    5f90:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5f92:	9b00      	ldr	r3, [sp, #0]
}
    5f94:	4618      	mov	r0, r3
    5f96:	b003      	add	sp, #12
    5f98:	f85d fb04 	ldr.w	pc, [sp], #4

00005f9c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5f9c:	b500      	push	{lr}
    5f9e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5fa0:	f000 f98a 	bl	62b8 <Power_Ip_RCM_GetResetRawValue>
    5fa4:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5fa6:	9b01      	ldr	r3, [sp, #4]
}
    5fa8:	4618      	mov	r0, r3
    5faa:	b003      	add	sp, #12
    5fac:	f85d fb04 	ldr.w	pc, [sp], #4

00005fb0 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5fb0:	b500      	push	{lr}
    5fb2:	b083      	sub	sp, #12
    5fb4:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5fb6:	9b01      	ldr	r3, [sp, #4]
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	4618      	mov	r0, r3
    5fbc:	f000 f90e 	bl	61dc <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	685b      	ldr	r3, [r3, #4]
    5fc4:	4618      	mov	r0, r3
    5fc6:	f000 f86d 	bl	60a4 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	689b      	ldr	r3, [r3, #8]
    5fce:	4618      	mov	r0, r3
    5fd0:	f000 f990 	bl	62f4 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5fd4:	bf00      	nop
    5fd6:	b003      	add	sp, #12
    5fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00005fdc <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5fdc:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5fde:	f000 f811 	bl	6004 <Power_Ip_CM4_DisableSleepOnExit>
}
    5fe2:	bf00      	nop
    5fe4:	bd08      	pop	{r3, pc}

00005fe6 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5fe6:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5fe8:	f000 f820 	bl	602c <Power_Ip_CM4_EnableSleepOnExit>
}
    5fec:	bf00      	nop
    5fee:	bd08      	pop	{r3, pc}

00005ff0 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5ff0:	b082      	sub	sp, #8
    5ff2:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5ff4:	4a02      	ldr	r2, [pc, #8]	; (6000 <Power_Ip_InstallNotificationsCallback+0x10>)
    5ff6:	9b01      	ldr	r3, [sp, #4]
    5ff8:	6013      	str	r3, [r2, #0]
}
    5ffa:	bf00      	nop
    5ffc:	b002      	add	sp, #8
    5ffe:	4770      	bx	lr
    6000:	1fff8b1c 	.word	0x1fff8b1c

00006004 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6004:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6006:	2300      	movs	r3, #0
    6008:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    600a:	4b07      	ldr	r3, [pc, #28]	; (6028 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    600c:	681b      	ldr	r3, [r3, #0]
    600e:	685b      	ldr	r3, [r3, #4]
    6010:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    6012:	9b01      	ldr	r3, [sp, #4]
    6014:	f023 0302 	bic.w	r3, r3, #2
    6018:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    601a:	4b03      	ldr	r3, [pc, #12]	; (6028 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    601c:	681b      	ldr	r3, [r3, #0]
    601e:	9a01      	ldr	r2, [sp, #4]
    6020:	605a      	str	r2, [r3, #4]
}
    6022:	bf00      	nop
    6024:	b002      	add	sp, #8
    6026:	4770      	bx	lr
    6028:	1fff8b20 	.word	0x1fff8b20

0000602c <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    602c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    602e:	2300      	movs	r3, #0
    6030:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6032:	4b07      	ldr	r3, [pc, #28]	; (6050 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	685b      	ldr	r3, [r3, #4]
    6038:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    603a:	9b01      	ldr	r3, [sp, #4]
    603c:	f043 0302 	orr.w	r3, r3, #2
    6040:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6042:	4b03      	ldr	r3, [pc, #12]	; (6050 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6044:	681b      	ldr	r3, [r3, #0]
    6046:	9a01      	ldr	r2, [sp, #4]
    6048:	605a      	str	r2, [r3, #4]
}
    604a:	bf00      	nop
    604c:	b002      	add	sp, #8
    604e:	4770      	bx	lr
    6050:	1fff8b20 	.word	0x1fff8b20

00006054 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    6054:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6056:	2300      	movs	r3, #0
    6058:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    605a:	4b07      	ldr	r3, [pc, #28]	; (6078 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    605c:	681b      	ldr	r3, [r3, #0]
    605e:	685b      	ldr	r3, [r3, #4]
    6060:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6062:	9b01      	ldr	r3, [sp, #4]
    6064:	f043 0304 	orr.w	r3, r3, #4
    6068:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    606a:	4b03      	ldr	r3, [pc, #12]	; (6078 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	9a01      	ldr	r2, [sp, #4]
    6070:	605a      	str	r2, [r3, #4]
}
    6072:	bf00      	nop
    6074:	b002      	add	sp, #8
    6076:	4770      	bx	lr
    6078:	1fff8b20 	.word	0x1fff8b20

0000607c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    607c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    607e:	2300      	movs	r3, #0
    6080:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6082:	4b07      	ldr	r3, [pc, #28]	; (60a0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6084:	681b      	ldr	r3, [r3, #0]
    6086:	685b      	ldr	r3, [r3, #4]
    6088:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	f023 0304 	bic.w	r3, r3, #4
    6090:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6092:	4b03      	ldr	r3, [pc, #12]	; (60a0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	9a01      	ldr	r2, [sp, #4]
    6098:	605a      	str	r2, [r3, #4]
}
    609a:	bf00      	nop
    609c:	b002      	add	sp, #8
    609e:	4770      	bx	lr
    60a0:	1fff8b20 	.word	0x1fff8b20

000060a4 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    60a4:	b084      	sub	sp, #16
    60a6:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    60a8:	4b20      	ldr	r3, [pc, #128]	; (612c <Power_Ip_PMC_PowerInit+0x88>)
    60aa:	781b      	ldrb	r3, [r3, #0]
    60ac:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    60b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60b4:	f003 030f 	and.w	r3, r3, #15
    60b8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	781a      	ldrb	r2, [r3, #0]
    60c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60c4:	4313      	orrs	r3, r2
    60c6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    60ca:	4a18      	ldr	r2, [pc, #96]	; (612c <Power_Ip_PMC_PowerInit+0x88>)
    60cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60d0:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    60d2:	4b16      	ldr	r3, [pc, #88]	; (612c <Power_Ip_PMC_PowerInit+0x88>)
    60d4:	785b      	ldrb	r3, [r3, #1]
    60d6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    60da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60de:	f003 031f 	and.w	r3, r3, #31
    60e2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    60e6:	9b01      	ldr	r3, [sp, #4]
    60e8:	785a      	ldrb	r2, [r3, #1]
    60ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60ee:	4313      	orrs	r3, r2
    60f0:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    60f4:	4a0d      	ldr	r2, [pc, #52]	; (612c <Power_Ip_PMC_PowerInit+0x88>)
    60f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60fa:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    60fc:	4b0b      	ldr	r3, [pc, #44]	; (612c <Power_Ip_PMC_PowerInit+0x88>)
    60fe:	789b      	ldrb	r3, [r3, #2]
    6100:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6104:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6108:	f003 0338 	and.w	r3, r3, #56	; 0x38
    610c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6110:	9b01      	ldr	r3, [sp, #4]
    6112:	789a      	ldrb	r2, [r3, #2]
    6114:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6118:	4313      	orrs	r3, r2
    611a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    611e:	4a03      	ldr	r2, [pc, #12]	; (612c <Power_Ip_PMC_PowerInit+0x88>)
    6120:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6124:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    6126:	bf00      	nop
    6128:	b004      	add	sp, #16
    612a:	4770      	bx	lr
    612c:	4007d000 	.word	0x4007d000

00006130 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6130:	b500      	push	{lr}
    6132:	b083      	sub	sp, #12
    6134:	9001      	str	r0, [sp, #4]
    6136:	460b      	mov	r3, r1
    6138:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    613c:	4b05      	ldr	r3, [pc, #20]	; (6154 <Power_Ip_ReportPowerErrors+0x24>)
    613e:	681b      	ldr	r3, [r3, #0]
    6140:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6144:	4611      	mov	r1, r2
    6146:	9801      	ldr	r0, [sp, #4]
    6148:	4798      	blx	r3
}
    614a:	bf00      	nop
    614c:	b003      	add	sp, #12
    614e:	f85d fb04 	ldr.w	pc, [sp], #4
    6152:	bf00      	nop
    6154:	1fff8b1c 	.word	0x1fff8b1c

00006158 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6158:	b082      	sub	sp, #8
    615a:	9001      	str	r0, [sp, #4]
    615c:	460b      	mov	r3, r1
    615e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6162:	bf00      	nop
    6164:	b002      	add	sp, #8
    6166:	4770      	bx	lr

00006168 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6168:	b500      	push	{lr}
    616a:	b085      	sub	sp, #20
    616c:	9003      	str	r0, [sp, #12]
    616e:	9102      	str	r1, [sp, #8]
    6170:	9201      	str	r2, [sp, #4]
    6172:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6174:	2000      	movs	r0, #0
    6176:	f7fc f83d 	bl	21f4 <OsIf_GetCounter>
    617a:	4602      	mov	r2, r0
    617c:	9b03      	ldr	r3, [sp, #12]
    617e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6180:	9b02      	ldr	r3, [sp, #8]
    6182:	2200      	movs	r2, #0
    6184:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6186:	2100      	movs	r1, #0
    6188:	9800      	ldr	r0, [sp, #0]
    618a:	f7fc f87f 	bl	228c <OsIf_MicrosToTicks>
    618e:	4602      	mov	r2, r0
    6190:	9b01      	ldr	r3, [sp, #4]
    6192:	601a      	str	r2, [r3, #0]
}
    6194:	bf00      	nop
    6196:	b005      	add	sp, #20
    6198:	f85d fb04 	ldr.w	pc, [sp], #4

0000619c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    619c:	b500      	push	{lr}
    619e:	b087      	sub	sp, #28
    61a0:	9003      	str	r0, [sp, #12]
    61a2:	9102      	str	r1, [sp, #8]
    61a4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    61a6:	2300      	movs	r3, #0
    61a8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    61ac:	2100      	movs	r1, #0
    61ae:	9803      	ldr	r0, [sp, #12]
    61b0:	f7fc f839 	bl	2226 <OsIf_GetElapsed>
    61b4:	4602      	mov	r2, r0
    61b6:	9b02      	ldr	r3, [sp, #8]
    61b8:	681b      	ldr	r3, [r3, #0]
    61ba:	441a      	add	r2, r3
    61bc:	9b02      	ldr	r3, [sp, #8]
    61be:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    61c0:	9b02      	ldr	r3, [sp, #8]
    61c2:	681b      	ldr	r3, [r3, #0]
    61c4:	9a01      	ldr	r2, [sp, #4]
    61c6:	429a      	cmp	r2, r3
    61c8:	d802      	bhi.n	61d0 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    61ca:	2301      	movs	r3, #1
    61cc:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    61d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    61d4:	4618      	mov	r0, r3
    61d6:	b007      	add	sp, #28
    61d8:	f85d fb04 	ldr.w	pc, [sp], #4

000061dc <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    61dc:	b082      	sub	sp, #8
    61de:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    61e0:	9b01      	ldr	r3, [sp, #4]
    61e2:	681a      	ldr	r2, [r3, #0]
    61e4:	4907      	ldr	r1, [pc, #28]	; (6204 <Power_Ip_RCM_ResetInit+0x28>)
    61e6:	f641 7307 	movw	r3, #7943	; 0x1f07
    61ea:	4013      	ands	r3, r2
    61ec:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    61ee:	9b01      	ldr	r3, [sp, #4]
    61f0:	685a      	ldr	r2, [r3, #4]
    61f2:	4904      	ldr	r1, [pc, #16]	; (6204 <Power_Ip_RCM_ResetInit+0x28>)
    61f4:	f642 73ff 	movw	r3, #12287	; 0x2fff
    61f8:	4013      	ands	r3, r2
    61fa:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    61fc:	bf00      	nop
    61fe:	b002      	add	sp, #8
    6200:	4770      	bx	lr
    6202:	bf00      	nop
    6204:	4007f000 	.word	0x4007f000

00006208 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6208:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    620a:	230c      	movs	r3, #12
    620c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    620e:	2300      	movs	r3, #0
    6210:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    6212:	2300      	movs	r3, #0
    6214:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6216:	2300      	movs	r3, #0
    6218:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    621a:	4b25      	ldr	r3, [pc, #148]	; (62b0 <Power_Ip_RCM_GetResetReason+0xa8>)
    621c:	699a      	ldr	r2, [r3, #24]
    621e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6222:	4013      	ands	r3, r2
    6224:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6226:	9b03      	ldr	r3, [sp, #12]
    6228:	2b00      	cmp	r3, #0
    622a:	d008      	beq.n	623e <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    622c:	4920      	ldr	r1, [pc, #128]	; (62b0 <Power_Ip_RCM_GetResetReason+0xa8>)
    622e:	9a03      	ldr	r2, [sp, #12]
    6230:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6234:	4013      	ands	r3, r2
    6236:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6238:	4a1e      	ldr	r2, [pc, #120]	; (62b4 <Power_Ip_RCM_GetResetReason+0xac>)
    623a:	9b03      	ldr	r3, [sp, #12]
    623c:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    623e:	4b1d      	ldr	r3, [pc, #116]	; (62b4 <Power_Ip_RCM_GetResetReason+0xac>)
    6240:	681b      	ldr	r3, [r3, #0]
    6242:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    6244:	9a02      	ldr	r2, [sp, #8]
    6246:	f642 73ee 	movw	r3, #12270	; 0x2fee
    624a:	4013      	ands	r3, r2
    624c:	2b82      	cmp	r3, #130	; 0x82
    624e:	d102      	bne.n	6256 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6250:	2305      	movs	r3, #5
    6252:	9307      	str	r3, [sp, #28]
    6254:	e027      	b.n	62a6 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    6256:	2300      	movs	r3, #0
    6258:	9306      	str	r3, [sp, #24]
    625a:	e021      	b.n	62a0 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    625c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6260:	9b06      	ldr	r3, [sp, #24]
    6262:	fa22 f303 	lsr.w	r3, r2, r3
    6266:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6268:	9a01      	ldr	r2, [sp, #4]
    626a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    626e:	4013      	ands	r3, r2
    6270:	2b00      	cmp	r3, #0
    6272:	d012      	beq.n	629a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6274:	9a01      	ldr	r2, [sp, #4]
    6276:	9b02      	ldr	r3, [sp, #8]
    6278:	4013      	ands	r3, r2
    627a:	2b00      	cmp	r3, #0
    627c:	d00a      	beq.n	6294 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    627e:	9b05      	ldr	r3, [sp, #20]
    6280:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6282:	9b04      	ldr	r3, [sp, #16]
    6284:	3301      	adds	r3, #1
    6286:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6288:	9b04      	ldr	r3, [sp, #16]
    628a:	2b01      	cmp	r3, #1
    628c:	d902      	bls.n	6294 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    628e:	230d      	movs	r3, #13
    6290:	9307      	str	r3, [sp, #28]
                        break;
    6292:	e008      	b.n	62a6 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6294:	9b05      	ldr	r3, [sp, #20]
    6296:	3301      	adds	r3, #1
    6298:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    629a:	9b06      	ldr	r3, [sp, #24]
    629c:	3301      	adds	r3, #1
    629e:	9306      	str	r3, [sp, #24]
    62a0:	9b06      	ldr	r3, [sp, #24]
    62a2:	2b1f      	cmp	r3, #31
    62a4:	d9da      	bls.n	625c <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    62a6:	9b07      	ldr	r3, [sp, #28]
}
    62a8:	4618      	mov	r0, r3
    62aa:	b008      	add	sp, #32
    62ac:	4770      	bx	lr
    62ae:	bf00      	nop
    62b0:	4007f000 	.word	0x4007f000
    62b4:	1fff8ce0 	.word	0x1fff8ce0

000062b8 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    62b8:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    62ba:	4b0c      	ldr	r3, [pc, #48]	; (62ec <Power_Ip_RCM_GetResetRawValue+0x34>)
    62bc:	699a      	ldr	r2, [r3, #24]
    62be:	f642 73ee 	movw	r3, #12270	; 0x2fee
    62c2:	4013      	ands	r3, r2
    62c4:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    62c6:	9b01      	ldr	r3, [sp, #4]
    62c8:	2b00      	cmp	r3, #0
    62ca:	d008      	beq.n	62de <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    62cc:	4907      	ldr	r1, [pc, #28]	; (62ec <Power_Ip_RCM_GetResetRawValue+0x34>)
    62ce:	9a01      	ldr	r2, [sp, #4]
    62d0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    62d4:	4013      	ands	r3, r2
    62d6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    62d8:	4a05      	ldr	r2, [pc, #20]	; (62f0 <Power_Ip_RCM_GetResetRawValue+0x38>)
    62da:	9b01      	ldr	r3, [sp, #4]
    62dc:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    62de:	4b04      	ldr	r3, [pc, #16]	; (62f0 <Power_Ip_RCM_GetResetRawValue+0x38>)
    62e0:	681b      	ldr	r3, [r3, #0]
    62e2:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    62e4:	9b00      	ldr	r3, [sp, #0]
}
    62e6:	4618      	mov	r0, r3
    62e8:	b002      	add	sp, #8
    62ea:	4770      	bx	lr
    62ec:	4007f000 	.word	0x4007f000
    62f0:	1fff8ce0 	.word	0x1fff8ce0

000062f4 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    62f4:	b082      	sub	sp, #8
    62f6:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    62f8:	9b01      	ldr	r3, [sp, #4]
    62fa:	681b      	ldr	r3, [r3, #0]
    62fc:	4a03      	ldr	r2, [pc, #12]	; (630c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    62fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6302:	6093      	str	r3, [r2, #8]
}
    6304:	bf00      	nop
    6306:	b002      	add	sp, #8
    6308:	4770      	bx	lr
    630a:	bf00      	nop
    630c:	4007e000 	.word	0x4007e000

00006310 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6310:	b084      	sub	sp, #16
    6312:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6314:	2301      	movs	r3, #1
    6316:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6318:	4b15      	ldr	r3, [pc, #84]	; (6370 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    631a:	695b      	ldr	r3, [r3, #20]
    631c:	b2db      	uxtb	r3, r3
    631e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6320:	9b01      	ldr	r3, [sp, #4]
    6322:	2b02      	cmp	r3, #2
    6324:	d012      	beq.n	634c <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	2b02      	cmp	r3, #2
    632a:	d818      	bhi.n	635e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    632c:	9b01      	ldr	r3, [sp, #4]
    632e:	2b00      	cmp	r3, #0
    6330:	d003      	beq.n	633a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    6332:	9b01      	ldr	r3, [sp, #4]
    6334:	2b01      	cmp	r3, #1
    6336:	d003      	beq.n	6340 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6338:	e011      	b.n	635e <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    633a:	2300      	movs	r3, #0
    633c:	9303      	str	r3, [sp, #12]
            break;
    633e:	e013      	b.n	6368 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6340:	9b02      	ldr	r3, [sp, #8]
    6342:	2b01      	cmp	r3, #1
    6344:	d10d      	bne.n	6362 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    6346:	2300      	movs	r3, #0
    6348:	9303      	str	r3, [sp, #12]
            break;
    634a:	e00a      	b.n	6362 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    634c:	9b02      	ldr	r3, [sp, #8]
    634e:	2b01      	cmp	r3, #1
    6350:	d002      	beq.n	6358 <Power_Ip_SMC_ModeCheckEntry+0x48>
    6352:	9b02      	ldr	r3, [sp, #8]
    6354:	2b10      	cmp	r3, #16
    6356:	d106      	bne.n	6366 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6358:	2300      	movs	r3, #0
    635a:	9303      	str	r3, [sp, #12]
            break;
    635c:	e003      	b.n	6366 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    635e:	bf00      	nop
    6360:	e002      	b.n	6368 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6362:	bf00      	nop
    6364:	e000      	b.n	6368 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6366:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6368:	9b03      	ldr	r3, [sp, #12]
}
    636a:	4618      	mov	r0, r3
    636c:	b004      	add	sp, #16
    636e:	4770      	bx	lr
    6370:	4007e000 	.word	0x4007e000

00006374 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6374:	b500      	push	{lr}
    6376:	b08b      	sub	sp, #44	; 0x2c
    6378:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    637a:	2300      	movs	r3, #0
    637c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    637e:	2300      	movs	r3, #0
    6380:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6382:	2300      	movs	r3, #0
    6384:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6388:	9b01      	ldr	r3, [sp, #4]
    638a:	685b      	ldr	r3, [r3, #4]
    638c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    638e:	9b08      	ldr	r3, [sp, #32]
    6390:	2b02      	cmp	r3, #2
    6392:	d076      	beq.n	6482 <Power_Ip_SMC_ModeConfig+0x10e>
    6394:	9b08      	ldr	r3, [sp, #32]
    6396:	2b02      	cmp	r3, #2
    6398:	f200 80ab 	bhi.w	64f2 <Power_Ip_SMC_ModeConfig+0x17e>
    639c:	9b08      	ldr	r3, [sp, #32]
    639e:	2b00      	cmp	r3, #0
    63a0:	d003      	beq.n	63aa <Power_Ip_SMC_ModeConfig+0x36>
    63a2:	9b08      	ldr	r3, [sp, #32]
    63a4:	2b01      	cmp	r3, #1
    63a6:	d034      	beq.n	6412 <Power_Ip_SMC_ModeConfig+0x9e>
    63a8:	e0a3      	b.n	64f2 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    63aa:	4b58      	ldr	r3, [pc, #352]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    63ac:	68db      	ldr	r3, [r3, #12]
    63ae:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    63b0:	9b06      	ldr	r3, [sp, #24]
    63b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    63b6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    63b8:	4a54      	ldr	r2, [pc, #336]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    63ba:	9b06      	ldr	r3, [sp, #24]
    63bc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    63be:	aa02      	add	r2, sp, #8
    63c0:	a903      	add	r1, sp, #12
    63c2:	a804      	add	r0, sp, #16
    63c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    63c8:	f7ff fece 	bl	6168 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    63cc:	9a02      	ldr	r2, [sp, #8]
    63ce:	a903      	add	r1, sp, #12
    63d0:	ab04      	add	r3, sp, #16
    63d2:	4618      	mov	r0, r3
    63d4:	f7ff fee2 	bl	619c <Power_Ip_TimeoutExpired>
    63d8:	4603      	mov	r3, r0
    63da:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    63de:	4b4b      	ldr	r3, [pc, #300]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    63e0:	695b      	ldr	r3, [r3, #20]
    63e2:	f003 0301 	and.w	r3, r3, #1
    63e6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63e8:	9b05      	ldr	r3, [sp, #20]
    63ea:	2b01      	cmp	r3, #1
    63ec:	d006      	beq.n	63fc <Power_Ip_SMC_ModeConfig+0x88>
    63ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63f2:	f083 0301 	eor.w	r3, r3, #1
    63f6:	b2db      	uxtb	r3, r3
    63f8:	2b00      	cmp	r3, #0
    63fa:	d1e7      	bne.n	63cc <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    63fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6400:	2b00      	cmp	r3, #0
    6402:	d079      	beq.n	64f8 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6404:	2301      	movs	r3, #1
    6406:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6408:	21ff      	movs	r1, #255	; 0xff
    640a:	2000      	movs	r0, #0
    640c:	f7ff fe90 	bl	6130 <Power_Ip_ReportPowerErrors>
            }

            break;
    6410:	e072      	b.n	64f8 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    6412:	4b3e      	ldr	r3, [pc, #248]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    6414:	68db      	ldr	r3, [r3, #12]
    6416:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6418:	9b06      	ldr	r3, [sp, #24]
    641a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    641e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6420:	9b06      	ldr	r3, [sp, #24]
    6422:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6426:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6428:	4a38      	ldr	r2, [pc, #224]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    642a:	9b06      	ldr	r3, [sp, #24]
    642c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    642e:	aa02      	add	r2, sp, #8
    6430:	a903      	add	r1, sp, #12
    6432:	a804      	add	r0, sp, #16
    6434:	f24c 3350 	movw	r3, #50000	; 0xc350
    6438:	f7ff fe96 	bl	6168 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    643c:	9a02      	ldr	r2, [sp, #8]
    643e:	a903      	add	r1, sp, #12
    6440:	ab04      	add	r3, sp, #16
    6442:	4618      	mov	r0, r3
    6444:	f7ff feaa 	bl	619c <Power_Ip_TimeoutExpired>
    6448:	4603      	mov	r3, r0
    644a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    644e:	4b2f      	ldr	r3, [pc, #188]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    6450:	695b      	ldr	r3, [r3, #20]
    6452:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6456:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6458:	9b05      	ldr	r3, [sp, #20]
    645a:	2b80      	cmp	r3, #128	; 0x80
    645c:	d006      	beq.n	646c <Power_Ip_SMC_ModeConfig+0xf8>
    645e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6462:	f083 0301 	eor.w	r3, r3, #1
    6466:	b2db      	uxtb	r3, r3
    6468:	2b00      	cmp	r3, #0
    646a:	d1e7      	bne.n	643c <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    646c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6470:	2b00      	cmp	r3, #0
    6472:	d043      	beq.n	64fc <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6474:	2301      	movs	r3, #1
    6476:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6478:	21ff      	movs	r1, #255	; 0xff
    647a:	2000      	movs	r0, #0
    647c:	f7ff fe58 	bl	6130 <Power_Ip_ReportPowerErrors>
            }

            break;
    6480:	e03c      	b.n	64fc <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6482:	4b22      	ldr	r3, [pc, #136]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    6484:	68db      	ldr	r3, [r3, #12]
    6486:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6488:	9b06      	ldr	r3, [sp, #24]
    648a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    648e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6490:	9b06      	ldr	r3, [sp, #24]
    6492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6496:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6498:	4a1c      	ldr	r2, [pc, #112]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    649a:	9b06      	ldr	r3, [sp, #24]
    649c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    649e:	aa02      	add	r2, sp, #8
    64a0:	a903      	add	r1, sp, #12
    64a2:	a804      	add	r0, sp, #16
    64a4:	f24c 3350 	movw	r3, #50000	; 0xc350
    64a8:	f7ff fe5e 	bl	6168 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    64ac:	9a02      	ldr	r2, [sp, #8]
    64ae:	a903      	add	r1, sp, #12
    64b0:	ab04      	add	r3, sp, #16
    64b2:	4618      	mov	r0, r3
    64b4:	f7ff fe72 	bl	619c <Power_Ip_TimeoutExpired>
    64b8:	4603      	mov	r3, r0
    64ba:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    64be:	4b13      	ldr	r3, [pc, #76]	; (650c <Power_Ip_SMC_ModeConfig+0x198>)
    64c0:	695b      	ldr	r3, [r3, #20]
    64c2:	f003 0304 	and.w	r3, r3, #4
    64c6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    64c8:	9b05      	ldr	r3, [sp, #20]
    64ca:	2b04      	cmp	r3, #4
    64cc:	d006      	beq.n	64dc <Power_Ip_SMC_ModeConfig+0x168>
    64ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    64d2:	f083 0301 	eor.w	r3, r3, #1
    64d6:	b2db      	uxtb	r3, r3
    64d8:	2b00      	cmp	r3, #0
    64da:	d1e7      	bne.n	64ac <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    64dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    64e0:	2b00      	cmp	r3, #0
    64e2:	d00d      	beq.n	6500 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64e4:	2301      	movs	r3, #1
    64e6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    64e8:	21ff      	movs	r1, #255	; 0xff
    64ea:	2000      	movs	r0, #0
    64ec:	f7ff fe20 	bl	6130 <Power_Ip_ReportPowerErrors>
            }

            break;
    64f0:	e006      	b.n	6500 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64f2:	2301      	movs	r3, #1
    64f4:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    64f6:	e004      	b.n	6502 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64f8:	bf00      	nop
    64fa:	e002      	b.n	6502 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64fc:	bf00      	nop
    64fe:	e000      	b.n	6502 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6500:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6502:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6504:	4618      	mov	r0, r3
    6506:	b00b      	add	sp, #44	; 0x2c
    6508:	f85d fb04 	ldr.w	pc, [sp], #4
    650c:	4007e000 	.word	0x4007e000

00006510 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6510:	b500      	push	{lr}
    6512:	b085      	sub	sp, #20
    6514:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    651a:	9803      	ldr	r0, [sp, #12]
    651c:	f000 fbc8 	bl	6cb0 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    6520:	4a03      	ldr	r2, [pc, #12]	; (6530 <Port_Init+0x20>)
    6522:	9b03      	ldr	r3, [sp, #12]
    6524:	6013      	str	r3, [r2, #0]
        }
    }
}
    6526:	bf00      	nop
    6528:	b005      	add	sp, #20
    652a:	f85d fb04 	ldr.w	pc, [sp], #4
    652e:	bf00      	nop
    6530:	1fff8ce4 	.word	0x1fff8ce4

00006534 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6534:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6536:	4b03      	ldr	r3, [pc, #12]	; (6544 <Port_RefreshPortDirection+0x10>)
    6538:	681b      	ldr	r3, [r3, #0]
    653a:	4618      	mov	r0, r3
    653c:	f000 fc10 	bl	6d60 <Port_Ipw_RefreshPortDirection>
    }
}
    6540:	bf00      	nop
    6542:	bd08      	pop	{r3, pc}
    6544:	1fff8ce4 	.word	0x1fff8ce4

00006548 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6548:	b086      	sub	sp, #24
    654a:	9003      	str	r0, [sp, #12]
    654c:	9102      	str	r1, [sp, #8]
    654e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6550:	23ff      	movs	r3, #255	; 0xff
    6552:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6554:	9b03      	ldr	r3, [sp, #12]
    6556:	4a39      	ldr	r2, [pc, #228]	; (663c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6558:	4293      	cmp	r3, r2
    655a:	d151      	bne.n	6600 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    655c:	9b02      	ldr	r3, [sp, #8]
    655e:	2b10      	cmp	r3, #16
    6560:	d867      	bhi.n	6632 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6562:	a201      	add	r2, pc, #4	; (adr r2, 6568 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6568:	000065ad 	.word	0x000065ad
    656c:	000065bb 	.word	0x000065bb
    6570:	00006633 	.word	0x00006633
    6574:	00006633 	.word	0x00006633
    6578:	00006633 	.word	0x00006633
    657c:	00006633 	.word	0x00006633
    6580:	00006633 	.word	0x00006633
    6584:	00006633 	.word	0x00006633
    6588:	00006633 	.word	0x00006633
    658c:	00006633 	.word	0x00006633
    6590:	00006633 	.word	0x00006633
    6594:	00006633 	.word	0x00006633
    6598:	00006633 	.word	0x00006633
    659c:	000065c9 	.word	0x000065c9
    65a0:	000065d7 	.word	0x000065d7
    65a4:	000065e5 	.word	0x000065e5
    65a8:	000065f3 	.word	0x000065f3
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    65ac:	2301      	movs	r3, #1
    65ae:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65b0:	9a05      	ldr	r2, [sp, #20]
    65b2:	9b01      	ldr	r3, [sp, #4]
    65b4:	4313      	orrs	r3, r2
    65b6:	9305      	str	r3, [sp, #20]
                break;
    65b8:	e03c      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    65ba:	2302      	movs	r3, #2
    65bc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65be:	9a05      	ldr	r2, [sp, #20]
    65c0:	9b01      	ldr	r3, [sp, #4]
    65c2:	4313      	orrs	r3, r2
    65c4:	9305      	str	r3, [sp, #20]
                break;
    65c6:	e035      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    65c8:	2304      	movs	r3, #4
    65ca:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65cc:	9a05      	ldr	r2, [sp, #20]
    65ce:	9b01      	ldr	r3, [sp, #4]
    65d0:	4313      	orrs	r3, r2
    65d2:	9305      	str	r3, [sp, #20]
                break;
    65d4:	e02e      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    65d6:	2308      	movs	r3, #8
    65d8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65da:	9a05      	ldr	r2, [sp, #20]
    65dc:	9b01      	ldr	r3, [sp, #4]
    65de:	4313      	orrs	r3, r2
    65e0:	9305      	str	r3, [sp, #20]
                break;
    65e2:	e027      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    65e4:	230e      	movs	r3, #14
    65e6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65e8:	9a05      	ldr	r2, [sp, #20]
    65ea:	9b01      	ldr	r3, [sp, #4]
    65ec:	4013      	ands	r3, r2
    65ee:	9305      	str	r3, [sp, #20]
                break;
    65f0:	e020      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    65f2:	230d      	movs	r3, #13
    65f4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65f6:	9a05      	ldr	r2, [sp, #20]
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	4013      	ands	r3, r2
    65fc:	9305      	str	r3, [sp, #20]
                break;
    65fe:	e019      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6600:	9b03      	ldr	r3, [sp, #12]
    6602:	4a0f      	ldr	r2, [pc, #60]	; (6640 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6604:	4293      	cmp	r3, r2
    6606:	d115      	bne.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6608:	9b02      	ldr	r3, [sp, #8]
    660a:	2b00      	cmp	r3, #0
    660c:	d003      	beq.n	6616 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    660e:	9b02      	ldr	r3, [sp, #8]
    6610:	2b01      	cmp	r3, #1
    6612:	d007      	beq.n	6624 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6614:	e00e      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6616:	230b      	movs	r3, #11
    6618:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    661a:	9a05      	ldr	r2, [sp, #20]
    661c:	9b01      	ldr	r3, [sp, #4]
    661e:	4013      	ands	r3, r2
    6620:	9305      	str	r3, [sp, #20]
                break;
    6622:	e007      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6624:	2307      	movs	r3, #7
    6626:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6628:	9a05      	ldr	r2, [sp, #20]
    662a:	9b01      	ldr	r3, [sp, #4]
    662c:	4013      	ands	r3, r2
    662e:	9305      	str	r3, [sp, #20]
                break;
    6630:	e000      	b.n	6634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6632:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6634:	9b05      	ldr	r3, [sp, #20]
}
    6636:	4618      	mov	r0, r3
    6638:	b006      	add	sp, #24
    663a:	4770      	bx	lr
    663c:	4004a000 	.word	0x4004a000
    6640:	4004b000 	.word	0x4004b000

00006644 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6644:	b500      	push	{lr}
    6646:	b089      	sub	sp, #36	; 0x24
    6648:	9003      	str	r0, [sp, #12]
    664a:	9102      	str	r1, [sp, #8]
    664c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    664e:	9b01      	ldr	r3, [sp, #4]
    6650:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6652:	9b01      	ldr	r3, [sp, #4]
    6654:	2b08      	cmp	r3, #8
    6656:	d121      	bne.n	669c <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6658:	4b13      	ldr	r3, [pc, #76]	; (66a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    665a:	685b      	ldr	r3, [r3, #4]
    665c:	f003 030f 	and.w	r3, r3, #15
    6660:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6662:	9a06      	ldr	r2, [sp, #24]
    6664:	9902      	ldr	r1, [sp, #8]
    6666:	9803      	ldr	r0, [sp, #12]
    6668:	f7ff ff6e 	bl	6548 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    666c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    666e:	9b05      	ldr	r3, [sp, #20]
    6670:	2bff      	cmp	r3, #255	; 0xff
    6672:	d011      	beq.n	6698 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6674:	f009 f80e 	bl	f694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6678:	4b0b      	ldr	r3, [pc, #44]	; (66a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    667a:	685b      	ldr	r3, [r3, #4]
    667c:	4a0a      	ldr	r2, [pc, #40]	; (66a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    667e:	f023 030f 	bic.w	r3, r3, #15
    6682:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6684:	4b08      	ldr	r3, [pc, #32]	; (66a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6686:	685a      	ldr	r2, [r3, #4]
    6688:	9b05      	ldr	r3, [sp, #20]
    668a:	f003 030f 	and.w	r3, r3, #15
    668e:	4906      	ldr	r1, [pc, #24]	; (66a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6690:	4313      	orrs	r3, r2
    6692:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6694:	f009 f82a 	bl	f6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6698:	2300      	movs	r3, #0
    669a:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    669c:	9b07      	ldr	r3, [sp, #28]
}
    669e:	4618      	mov	r0, r3
    66a0:	b009      	add	sp, #36	; 0x24
    66a2:	f85d fb04 	ldr.w	pc, [sp], #4
    66a6:	bf00      	nop
    66a8:	40048000 	.word	0x40048000

000066ac <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    66ac:	b500      	push	{lr}
    66ae:	b087      	sub	sp, #28
    66b0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    66b2:	2300      	movs	r3, #0
    66b4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    66b6:	2300      	movs	r3, #0
    66b8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    66ba:	2300      	movs	r3, #0
    66bc:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    66be:	9b01      	ldr	r3, [sp, #4]
    66c0:	68db      	ldr	r3, [r3, #12]
    66c2:	2b02      	cmp	r3, #2
    66c4:	d00a      	beq.n	66dc <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    66c6:	9b05      	ldr	r3, [sp, #20]
    66c8:	f043 0302 	orr.w	r3, r3, #2
    66cc:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    66ce:	9b01      	ldr	r3, [sp, #4]
    66d0:	68db      	ldr	r3, [r3, #12]
    66d2:	f003 0301 	and.w	r3, r3, #1
    66d6:	9a05      	ldr	r2, [sp, #20]
    66d8:	4313      	orrs	r3, r2
    66da:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    66dc:	9b01      	ldr	r3, [sp, #4]
    66de:	699b      	ldr	r3, [r3, #24]
    66e0:	019b      	lsls	r3, r3, #6
    66e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    66e6:	9a05      	ldr	r2, [sp, #20]
    66e8:	4313      	orrs	r3, r2
    66ea:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    66ec:	9b01      	ldr	r3, [sp, #4]
    66ee:	6a1b      	ldr	r3, [r3, #32]
    66f0:	03db      	lsls	r3, r3, #15
    66f2:	b29b      	uxth	r3, r3
    66f4:	9a05      	ldr	r2, [sp, #20]
    66f6:	4313      	orrs	r3, r2
    66f8:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    66fa:	9b01      	ldr	r3, [sp, #4]
    66fc:	7f1b      	ldrb	r3, [r3, #28]
    66fe:	2b00      	cmp	r3, #0
    6700:	d001      	beq.n	6706 <Port_Ci_Port_Ip_PinInit+0x5a>
    6702:	2310      	movs	r3, #16
    6704:	e000      	b.n	6708 <Port_Ci_Port_Ip_PinInit+0x5c>
    6706:	2300      	movs	r3, #0
    6708:	9a05      	ldr	r2, [sp, #20]
    670a:	4313      	orrs	r3, r2
    670c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    670e:	9b01      	ldr	r3, [sp, #4]
    6710:	691b      	ldr	r3, [r3, #16]
    6712:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6714:	9b01      	ldr	r3, [sp, #4]
    6716:	6818      	ldr	r0, [r3, #0]
    6718:	9b01      	ldr	r3, [sp, #4]
    671a:	689b      	ldr	r3, [r3, #8]
    671c:	9a04      	ldr	r2, [sp, #16]
    671e:	4619      	mov	r1, r3
    6720:	f7ff ff90 	bl	6644 <Port_Ci_Port_Ip_ConfigureInterleave>
    6724:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6726:	9b03      	ldr	r3, [sp, #12]
    6728:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    672a:	9b04      	ldr	r3, [sp, #16]
    672c:	021b      	lsls	r3, r3, #8
    672e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6732:	9a05      	ldr	r2, [sp, #20]
    6734:	4313      	orrs	r3, r2
    6736:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6738:	f008 fe12 	bl	f360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    673c:	9b01      	ldr	r3, [sp, #4]
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6744:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6746:	9b01      	ldr	r3, [sp, #4]
    6748:	689b      	ldr	r3, [r3, #8]
    674a:	2201      	movs	r2, #1
    674c:	fa02 f303 	lsl.w	r3, r2, r3
    6750:	43db      	mvns	r3, r3
    6752:	9a02      	ldr	r2, [sp, #8]
    6754:	4013      	ands	r3, r2
    6756:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6758:	9b01      	ldr	r3, [sp, #4]
    675a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    675e:	2b00      	cmp	r3, #0
    6760:	d001      	beq.n	6766 <Port_Ci_Port_Ip_PinInit+0xba>
    6762:	2201      	movs	r2, #1
    6764:	e000      	b.n	6768 <Port_Ci_Port_Ip_PinInit+0xbc>
    6766:	2200      	movs	r2, #0
    6768:	9b01      	ldr	r3, [sp, #4]
    676a:	689b      	ldr	r3, [r3, #8]
    676c:	fa02 f303 	lsl.w	r3, r2, r3
    6770:	9a02      	ldr	r2, [sp, #8]
    6772:	4313      	orrs	r3, r2
    6774:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6776:	9b01      	ldr	r3, [sp, #4]
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	9a02      	ldr	r2, [sp, #8]
    677c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6780:	f008 fe1a 	bl	f3b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6784:	9b04      	ldr	r3, [sp, #16]
    6786:	2b01      	cmp	r3, #1
    6788:	d16d      	bne.n	6866 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    678a:	9b01      	ldr	r3, [sp, #4]
    678c:	695b      	ldr	r3, [r3, #20]
    678e:	2b02      	cmp	r3, #2
    6790:	d138      	bne.n	6804 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6792:	9b01      	ldr	r3, [sp, #4]
    6794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6798:	2b01      	cmp	r3, #1
    679a:	d10f      	bne.n	67bc <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    679c:	f008 fe32 	bl	f404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    67a0:	9b01      	ldr	r3, [sp, #4]
    67a2:	685b      	ldr	r3, [r3, #4]
    67a4:	6859      	ldr	r1, [r3, #4]
    67a6:	9b01      	ldr	r3, [sp, #4]
    67a8:	689b      	ldr	r3, [r3, #8]
    67aa:	2201      	movs	r2, #1
    67ac:	409a      	lsls	r2, r3
    67ae:	9b01      	ldr	r3, [sp, #4]
    67b0:	685b      	ldr	r3, [r3, #4]
    67b2:	430a      	orrs	r2, r1
    67b4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    67b6:	f008 fe51 	bl	f45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    67ba:	e013      	b.n	67e4 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    67bc:	9b01      	ldr	r3, [sp, #4]
    67be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    67c2:	2b00      	cmp	r3, #0
    67c4:	d10e      	bne.n	67e4 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    67c6:	f008 fe6f 	bl	f4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    67ca:	9b01      	ldr	r3, [sp, #4]
    67cc:	685b      	ldr	r3, [r3, #4]
    67ce:	6899      	ldr	r1, [r3, #8]
    67d0:	9b01      	ldr	r3, [sp, #4]
    67d2:	689b      	ldr	r3, [r3, #8]
    67d4:	2201      	movs	r2, #1
    67d6:	409a      	lsls	r2, r3
    67d8:	9b01      	ldr	r3, [sp, #4]
    67da:	685b      	ldr	r3, [r3, #4]
    67dc:	430a      	orrs	r2, r1
    67de:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    67e0:	f008 fe8e 	bl	f500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    67e4:	f008 feb2 	bl	f54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    67e8:	9b01      	ldr	r3, [sp, #4]
    67ea:	685b      	ldr	r3, [r3, #4]
    67ec:	6959      	ldr	r1, [r3, #20]
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	689b      	ldr	r3, [r3, #8]
    67f2:	2201      	movs	r2, #1
    67f4:	409a      	lsls	r2, r3
    67f6:	9b01      	ldr	r3, [sp, #4]
    67f8:	685b      	ldr	r3, [r3, #4]
    67fa:	430a      	orrs	r2, r1
    67fc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    67fe:	f008 fed1 	bl	f5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6802:	e030      	b.n	6866 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6804:	f008 fea2 	bl	f54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6808:	9b01      	ldr	r3, [sp, #4]
    680a:	685b      	ldr	r3, [r3, #4]
    680c:	6959      	ldr	r1, [r3, #20]
    680e:	9b01      	ldr	r3, [sp, #4]
    6810:	689b      	ldr	r3, [r3, #8]
    6812:	2201      	movs	r2, #1
    6814:	fa02 f303 	lsl.w	r3, r2, r3
    6818:	43da      	mvns	r2, r3
    681a:	9b01      	ldr	r3, [sp, #4]
    681c:	685b      	ldr	r3, [r3, #4]
    681e:	400a      	ands	r2, r1
    6820:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6822:	f008 febf 	bl	f5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6826:	f008 fee3 	bl	f5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    682a:	9b01      	ldr	r3, [sp, #4]
    682c:	685b      	ldr	r3, [r3, #4]
    682e:	6999      	ldr	r1, [r3, #24]
    6830:	9b01      	ldr	r3, [sp, #4]
    6832:	689b      	ldr	r3, [r3, #8]
    6834:	2201      	movs	r2, #1
    6836:	fa02 f303 	lsl.w	r3, r2, r3
    683a:	43da      	mvns	r2, r3
    683c:	9b01      	ldr	r3, [sp, #4]
    683e:	685b      	ldr	r3, [r3, #4]
    6840:	400a      	ands	r2, r1
    6842:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6844:	9b01      	ldr	r3, [sp, #4]
    6846:	695b      	ldr	r3, [r3, #20]
    6848:	2b03      	cmp	r3, #3
    684a:	d10a      	bne.n	6862 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    684c:	9b01      	ldr	r3, [sp, #4]
    684e:	685b      	ldr	r3, [r3, #4]
    6850:	6999      	ldr	r1, [r3, #24]
    6852:	9b01      	ldr	r3, [sp, #4]
    6854:	689b      	ldr	r3, [r3, #8]
    6856:	2201      	movs	r2, #1
    6858:	409a      	lsls	r2, r3
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	685b      	ldr	r3, [r3, #4]
    685e:	430a      	orrs	r2, r1
    6860:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6862:	f008 fef1 	bl	f648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6866:	9b01      	ldr	r3, [sp, #4]
    6868:	681b      	ldr	r3, [r3, #0]
    686a:	9a01      	ldr	r2, [sp, #4]
    686c:	6892      	ldr	r2, [r2, #8]
    686e:	9905      	ldr	r1, [sp, #20]
    6870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6874:	bf00      	nop
    6876:	b007      	add	sp, #28
    6878:	f85d fb04 	ldr.w	pc, [sp], #4

0000687c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    687c:	b500      	push	{lr}
    687e:	b085      	sub	sp, #20
    6880:	9001      	str	r0, [sp, #4]
    6882:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6884:	2300      	movs	r3, #0
    6886:	9303      	str	r3, [sp, #12]
    6888:	e00d      	b.n	68a6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    688a:	9a03      	ldr	r2, [sp, #12]
    688c:	4613      	mov	r3, r2
    688e:	009b      	lsls	r3, r3, #2
    6890:	4413      	add	r3, r2
    6892:	00db      	lsls	r3, r3, #3
    6894:	461a      	mov	r2, r3
    6896:	9b00      	ldr	r3, [sp, #0]
    6898:	4413      	add	r3, r2
    689a:	4618      	mov	r0, r3
    689c:	f7ff ff06 	bl	66ac <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    68a0:	9b03      	ldr	r3, [sp, #12]
    68a2:	3301      	adds	r3, #1
    68a4:	9303      	str	r3, [sp, #12]
    68a6:	9a03      	ldr	r2, [sp, #12]
    68a8:	9b01      	ldr	r3, [sp, #4]
    68aa:	429a      	cmp	r2, r3
    68ac:	d3ed      	bcc.n	688a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    68ae:	2300      	movs	r3, #0
}
    68b0:	4618      	mov	r0, r3
    68b2:	b005      	add	sp, #20
    68b4:	f85d fb04 	ldr.w	pc, [sp], #4

000068b8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    68b8:	b500      	push	{lr}
    68ba:	b087      	sub	sp, #28
    68bc:	9003      	str	r0, [sp, #12]
    68be:	9102      	str	r1, [sp, #8]
    68c0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    68c2:	9a01      	ldr	r2, [sp, #4]
    68c4:	9902      	ldr	r1, [sp, #8]
    68c6:	9803      	ldr	r0, [sp, #12]
    68c8:	f7ff febc 	bl	6644 <Port_Ci_Port_Ip_ConfigureInterleave>
    68cc:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    68ce:	f008 ff33 	bl	f738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    68d2:	9b03      	ldr	r3, [sp, #12]
    68d4:	9a02      	ldr	r2, [sp, #8]
    68d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68da:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    68dc:	9b04      	ldr	r3, [sp, #16]
    68de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    68e2:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    68e4:	9b05      	ldr	r3, [sp, #20]
    68e6:	021b      	lsls	r3, r3, #8
    68e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    68ec:	9a04      	ldr	r2, [sp, #16]
    68ee:	4313      	orrs	r3, r2
    68f0:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    68f2:	9b03      	ldr	r3, [sp, #12]
    68f4:	9a02      	ldr	r2, [sp, #8]
    68f6:	9904      	ldr	r1, [sp, #16]
    68f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    68fc:	f008 ff48 	bl	f790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6900:	bf00      	nop
    6902:	b007      	add	sp, #28
    6904:	f85d fb04 	ldr.w	pc, [sp], #4

00006908 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6908:	b500      	push	{lr}
    690a:	b083      	sub	sp, #12
    690c:	9001      	str	r0, [sp, #4]
    690e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6910:	f008 ff64 	bl	f7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6914:	9b01      	ldr	r3, [sp, #4]
    6916:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    691a:	2101      	movs	r1, #1
    691c:	9b00      	ldr	r3, [sp, #0]
    691e:	fa01 f303 	lsl.w	r3, r1, r3
    6922:	431a      	orrs	r2, r3
    6924:	9b01      	ldr	r3, [sp, #4]
    6926:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    692a:	f008 ff83 	bl	f834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    692e:	bf00      	nop
    6930:	b003      	add	sp, #12
    6932:	f85d fb04 	ldr.w	pc, [sp], #4

00006936 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6936:	b500      	push	{lr}
    6938:	b083      	sub	sp, #12
    693a:	9001      	str	r0, [sp, #4]
    693c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    693e:	f008 ff9f 	bl	f880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6942:	9b01      	ldr	r3, [sp, #4]
    6944:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6948:	2101      	movs	r1, #1
    694a:	9b00      	ldr	r3, [sp, #0]
    694c:	fa01 f303 	lsl.w	r3, r1, r3
    6950:	43db      	mvns	r3, r3
    6952:	401a      	ands	r2, r3
    6954:	9b01      	ldr	r3, [sp, #4]
    6956:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    695a:	f008 ffbd 	bl	f8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    695e:	bf00      	nop
    6960:	b003      	add	sp, #12
    6962:	f85d fb04 	ldr.w	pc, [sp], #4

00006966 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6966:	b082      	sub	sp, #8
    6968:	9001      	str	r0, [sp, #4]
    696a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    696c:	9b00      	ldr	r3, [sp, #0]
    696e:	785b      	ldrb	r3, [r3, #1]
    6970:	f003 0201 	and.w	r2, r3, #1
    6974:	9b01      	ldr	r3, [sp, #4]
    6976:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    697a:	9b00      	ldr	r3, [sp, #0]
    697c:	789b      	ldrb	r3, [r3, #2]
    697e:	f003 021f 	and.w	r2, r3, #31
    6982:	9b01      	ldr	r3, [sp, #4]
    6984:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6988:	bf00      	nop
    698a:	b002      	add	sp, #8
    698c:	4770      	bx	lr

0000698e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    698e:	b086      	sub	sp, #24
    6990:	9003      	str	r0, [sp, #12]
    6992:	9301      	str	r3, [sp, #4]
    6994:	460b      	mov	r3, r1
    6996:	f8ad 300a 	strh.w	r3, [sp, #10]
    699a:	4613      	mov	r3, r2
    699c:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    69a0:	2300      	movs	r3, #0
    69a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    69a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69aa:	f043 0301 	orr.w	r3, r3, #1
    69ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    69b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69b6:	f043 0302 	orr.w	r3, r3, #2
    69ba:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    69be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69c2:	f043 0310 	orr.w	r3, r3, #16
    69c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    69ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    69d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    69d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    69de:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    69e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    69ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    69ee:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    69f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    69fa:	4013      	ands	r3, r2
    69fc:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6a00:	9b01      	ldr	r3, [sp, #4]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d003      	beq.n	6a0e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6a06:	9b01      	ldr	r3, [sp, #4]
    6a08:	2b01      	cmp	r3, #1
    6a0a:	d00a      	beq.n	6a22 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6a0c:	e013      	b.n	6a36 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6a0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a12:	041a      	lsls	r2, r3, #16
    6a14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a18:	431a      	orrs	r2, r3
    6a1a:	9b03      	ldr	r3, [sp, #12]
    6a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6a20:	e009      	b.n	6a36 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6a22:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a26:	041a      	lsls	r2, r3, #16
    6a28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a2c:	431a      	orrs	r2, r3
    6a2e:	9b03      	ldr	r3, [sp, #12]
    6a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6a34:	bf00      	nop
    }
}
    6a36:	bf00      	nop
    6a38:	b006      	add	sp, #24
    6a3a:	4770      	bx	lr

00006a3c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6a3c:	b500      	push	{lr}
    6a3e:	b087      	sub	sp, #28
    6a40:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6a42:	9b01      	ldr	r3, [sp, #4]
    6a44:	885b      	ldrh	r3, [r3, #2]
    6a46:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6a4a:	9b01      	ldr	r3, [sp, #4]
    6a4c:	689b      	ldr	r3, [r3, #8]
    6a4e:	7a1b      	ldrb	r3, [r3, #8]
    6a50:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	689b      	ldr	r3, [r3, #8]
    6a58:	681b      	ldr	r3, [r3, #0]
    6a5a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6a5c:	9b01      	ldr	r3, [sp, #4]
    6a5e:	689b      	ldr	r3, [r3, #8]
    6a60:	685b      	ldr	r3, [r3, #4]
    6a62:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6a64:	2300      	movs	r3, #0
    6a66:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a6a:	e111      	b.n	6c90 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6a6c:	9b02      	ldr	r3, [sp, #8]
    6a6e:	2b02      	cmp	r3, #2
    6a70:	d169      	bne.n	6b46 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6a72:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a76:	2b01      	cmp	r3, #1
    6a78:	d11a      	bne.n	6ab0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	685a      	ldr	r2, [r3, #4]
    6a7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a82:	005b      	lsls	r3, r3, #1
    6a84:	4413      	add	r3, r2
    6a86:	881b      	ldrh	r3, [r3, #0]
    6a88:	f003 021f 	and.w	r2, r3, #31
    6a8c:	9b01      	ldr	r3, [sp, #4]
    6a8e:	6859      	ldr	r1, [r3, #4]
    6a90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a94:	005b      	lsls	r3, r3, #1
    6a96:	440b      	add	r3, r1
    6a98:	881b      	ldrh	r3, [r3, #0]
    6a9a:	095b      	lsrs	r3, r3, #5
    6a9c:	b29b      	uxth	r3, r3
    6a9e:	4619      	mov	r1, r3
    6aa0:	4b81      	ldr	r3, [pc, #516]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6aa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6aa6:	2101      	movs	r1, #1
    6aa8:	fa01 f202 	lsl.w	r2, r1, r2
    6aac:	605a      	str	r2, [r3, #4]
    6aae:	e01d      	b.n	6aec <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6ab0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d119      	bne.n	6aec <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6ab8:	9b01      	ldr	r3, [sp, #4]
    6aba:	685a      	ldr	r2, [r3, #4]
    6abc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ac0:	005b      	lsls	r3, r3, #1
    6ac2:	4413      	add	r3, r2
    6ac4:	881b      	ldrh	r3, [r3, #0]
    6ac6:	f003 021f 	and.w	r2, r3, #31
    6aca:	9b01      	ldr	r3, [sp, #4]
    6acc:	6859      	ldr	r1, [r3, #4]
    6ace:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ad2:	005b      	lsls	r3, r3, #1
    6ad4:	440b      	add	r3, r1
    6ad6:	881b      	ldrh	r3, [r3, #0]
    6ad8:	095b      	lsrs	r3, r3, #5
    6ada:	b29b      	uxth	r3, r3
    6adc:	4619      	mov	r1, r3
    6ade:	4b72      	ldr	r3, [pc, #456]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ae0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6ae4:	2101      	movs	r1, #1
    6ae6:	fa01 f202 	lsl.w	r2, r1, r2
    6aea:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6aec:	f008 ff1a 	bl	f924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	685a      	ldr	r2, [r3, #4]
    6af4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6af8:	005b      	lsls	r3, r3, #1
    6afa:	4413      	add	r3, r2
    6afc:	881b      	ldrh	r3, [r3, #0]
    6afe:	095b      	lsrs	r3, r3, #5
    6b00:	b29b      	uxth	r3, r3
    6b02:	461a      	mov	r2, r3
    6b04:	4b68      	ldr	r3, [pc, #416]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b0a:	6959      	ldr	r1, [r3, #20]
    6b0c:	9b01      	ldr	r3, [sp, #4]
    6b0e:	685a      	ldr	r2, [r3, #4]
    6b10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b14:	005b      	lsls	r3, r3, #1
    6b16:	4413      	add	r3, r2
    6b18:	881b      	ldrh	r3, [r3, #0]
    6b1a:	f003 031f 	and.w	r3, r3, #31
    6b1e:	2201      	movs	r2, #1
    6b20:	409a      	lsls	r2, r3
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	6858      	ldr	r0, [r3, #4]
    6b26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b2a:	005b      	lsls	r3, r3, #1
    6b2c:	4403      	add	r3, r0
    6b2e:	881b      	ldrh	r3, [r3, #0]
    6b30:	095b      	lsrs	r3, r3, #5
    6b32:	b29b      	uxth	r3, r3
    6b34:	4618      	mov	r0, r3
    6b36:	4b5c      	ldr	r3, [pc, #368]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b3c:	430a      	orrs	r2, r1
    6b3e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b40:	f008 ff1c 	bl	f97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6b44:	e086      	b.n	6c54 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b46:	f008 feed 	bl	f924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6b4a:	9b01      	ldr	r3, [sp, #4]
    6b4c:	685a      	ldr	r2, [r3, #4]
    6b4e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b52:	005b      	lsls	r3, r3, #1
    6b54:	4413      	add	r3, r2
    6b56:	881b      	ldrh	r3, [r3, #0]
    6b58:	095b      	lsrs	r3, r3, #5
    6b5a:	b29b      	uxth	r3, r3
    6b5c:	461a      	mov	r2, r3
    6b5e:	4b52      	ldr	r3, [pc, #328]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b64:	6959      	ldr	r1, [r3, #20]
    6b66:	9b01      	ldr	r3, [sp, #4]
    6b68:	685a      	ldr	r2, [r3, #4]
    6b6a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b6e:	005b      	lsls	r3, r3, #1
    6b70:	4413      	add	r3, r2
    6b72:	881b      	ldrh	r3, [r3, #0]
    6b74:	f003 031f 	and.w	r3, r3, #31
    6b78:	2201      	movs	r2, #1
    6b7a:	fa02 f303 	lsl.w	r3, r2, r3
    6b7e:	43da      	mvns	r2, r3
    6b80:	9b01      	ldr	r3, [sp, #4]
    6b82:	6858      	ldr	r0, [r3, #4]
    6b84:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b88:	005b      	lsls	r3, r3, #1
    6b8a:	4403      	add	r3, r0
    6b8c:	881b      	ldrh	r3, [r3, #0]
    6b8e:	095b      	lsrs	r3, r3, #5
    6b90:	b29b      	uxth	r3, r3
    6b92:	4618      	mov	r0, r3
    6b94:	4b44      	ldr	r3, [pc, #272]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b9a:	400a      	ands	r2, r1
    6b9c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b9e:	f008 feed 	bl	f97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6ba2:	f008 ff11 	bl	f9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6ba6:	9b01      	ldr	r3, [sp, #4]
    6ba8:	685a      	ldr	r2, [r3, #4]
    6baa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bae:	005b      	lsls	r3, r3, #1
    6bb0:	4413      	add	r3, r2
    6bb2:	881b      	ldrh	r3, [r3, #0]
    6bb4:	095b      	lsrs	r3, r3, #5
    6bb6:	b29b      	uxth	r3, r3
    6bb8:	461a      	mov	r2, r3
    6bba:	4b3b      	ldr	r3, [pc, #236]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bc0:	6999      	ldr	r1, [r3, #24]
    6bc2:	9b01      	ldr	r3, [sp, #4]
    6bc4:	685a      	ldr	r2, [r3, #4]
    6bc6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bca:	005b      	lsls	r3, r3, #1
    6bcc:	4413      	add	r3, r2
    6bce:	881b      	ldrh	r3, [r3, #0]
    6bd0:	f003 031f 	and.w	r3, r3, #31
    6bd4:	2201      	movs	r2, #1
    6bd6:	fa02 f303 	lsl.w	r3, r2, r3
    6bda:	43da      	mvns	r2, r3
    6bdc:	9b01      	ldr	r3, [sp, #4]
    6bde:	6858      	ldr	r0, [r3, #4]
    6be0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6be4:	005b      	lsls	r3, r3, #1
    6be6:	4403      	add	r3, r0
    6be8:	881b      	ldrh	r3, [r3, #0]
    6bea:	095b      	lsrs	r3, r3, #5
    6bec:	b29b      	uxth	r3, r3
    6bee:	4618      	mov	r0, r3
    6bf0:	4b2d      	ldr	r3, [pc, #180]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bf2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bf6:	400a      	ands	r2, r1
    6bf8:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6bfa:	9b02      	ldr	r3, [sp, #8]
    6bfc:	2b03      	cmp	r3, #3
    6bfe:	d127      	bne.n	6c50 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c00:	9b01      	ldr	r3, [sp, #4]
    6c02:	685a      	ldr	r2, [r3, #4]
    6c04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c08:	005b      	lsls	r3, r3, #1
    6c0a:	4413      	add	r3, r2
    6c0c:	881b      	ldrh	r3, [r3, #0]
    6c0e:	095b      	lsrs	r3, r3, #5
    6c10:	b29b      	uxth	r3, r3
    6c12:	461a      	mov	r2, r3
    6c14:	4b24      	ldr	r3, [pc, #144]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c1a:	6999      	ldr	r1, [r3, #24]
    6c1c:	9b01      	ldr	r3, [sp, #4]
    6c1e:	685a      	ldr	r2, [r3, #4]
    6c20:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c24:	005b      	lsls	r3, r3, #1
    6c26:	4413      	add	r3, r2
    6c28:	881b      	ldrh	r3, [r3, #0]
    6c2a:	f003 031f 	and.w	r3, r3, #31
    6c2e:	2201      	movs	r2, #1
    6c30:	409a      	lsls	r2, r3
    6c32:	9b01      	ldr	r3, [sp, #4]
    6c34:	6858      	ldr	r0, [r3, #4]
    6c36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c3a:	005b      	lsls	r3, r3, #1
    6c3c:	4403      	add	r3, r0
    6c3e:	881b      	ldrh	r3, [r3, #0]
    6c40:	095b      	lsrs	r3, r3, #5
    6c42:	b29b      	uxth	r3, r3
    6c44:	4618      	mov	r0, r3
    6c46:	4b18      	ldr	r3, [pc, #96]	; (6ca8 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c4c:	430a      	orrs	r2, r1
    6c4e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6c50:	f008 fee6 	bl	fa20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6c54:	9b01      	ldr	r3, [sp, #4]
    6c56:	685a      	ldr	r2, [r3, #4]
    6c58:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c5c:	005b      	lsls	r3, r3, #1
    6c5e:	4413      	add	r3, r2
    6c60:	881b      	ldrh	r3, [r3, #0]
    6c62:	095b      	lsrs	r3, r3, #5
    6c64:	b29b      	uxth	r3, r3
    6c66:	461a      	mov	r2, r3
    6c68:	4b10      	ldr	r3, [pc, #64]	; (6cac <Port_Ipw_Init_UnusedPins+0x270>)
    6c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c6e:	9a01      	ldr	r2, [sp, #4]
    6c70:	6851      	ldr	r1, [r2, #4]
    6c72:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c76:	0052      	lsls	r2, r2, #1
    6c78:	440a      	add	r2, r1
    6c7a:	8812      	ldrh	r2, [r2, #0]
    6c7c:	f002 021f 	and.w	r2, r2, #31
    6c80:	9903      	ldr	r1, [sp, #12]
    6c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6c86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c8a:	3301      	adds	r3, #1
    6c8c:	f8ad 3016 	strh.w	r3, [sp, #22]
    6c90:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c94:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6c98:	429a      	cmp	r2, r3
    6c9a:	f4ff aee7 	bcc.w	6a6c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6c9e:	bf00      	nop
    6ca0:	bf00      	nop
    6ca2:	b007      	add	sp, #28
    6ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ca8:	00010ebc 	.word	0x00010ebc
    6cac:	00010ea8 	.word	0x00010ea8

00006cb0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6cb0:	b500      	push	{lr}
    6cb2:	b085      	sub	sp, #20
    6cb4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6cb6:	9b01      	ldr	r3, [sp, #4]
    6cb8:	7c1b      	ldrb	r3, [r3, #16]
    6cba:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6cbe:	2300      	movs	r3, #0
    6cc0:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cc4:	e035      	b.n	6d32 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6cc6:	9b01      	ldr	r3, [sp, #4]
    6cc8:	695a      	ldr	r2, [r3, #20]
    6cca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cce:	00db      	lsls	r3, r3, #3
    6cd0:	4413      	add	r3, r2
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6cd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cdc:	4a1f      	ldr	r2, [pc, #124]	; (6d5c <Port_Ipw_Init+0xac>)
    6cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6ce2:	9b01      	ldr	r3, [sp, #4]
    6ce4:	695a      	ldr	r2, [r3, #20]
    6ce6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cea:	00db      	lsls	r3, r3, #3
    6cec:	4413      	add	r3, r2
    6cee:	4619      	mov	r1, r3
    6cf0:	f7ff fe39 	bl	6966 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6cf4:	f009 f802 	bl	fcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6cf8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cfc:	4a17      	ldr	r2, [pc, #92]	; (6d5c <Port_Ipw_Init+0xac>)
    6cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6d06:	9b01      	ldr	r3, [sp, #4]
    6d08:	695a      	ldr	r2, [r3, #20]
    6d0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d0e:	00db      	lsls	r3, r3, #3
    6d10:	4413      	add	r3, r2
    6d12:	685a      	ldr	r2, [r3, #4]
    6d14:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d18:	4810      	ldr	r0, [pc, #64]	; (6d5c <Port_Ipw_Init+0xac>)
    6d1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6d1e:	430a      	orrs	r2, r1
    6d20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6d24:	f009 f816 	bl	fd54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d2c:	3301      	adds	r3, #1
    6d2e:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d32:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d36:	b29b      	uxth	r3, r3
    6d38:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d3c:	429a      	cmp	r2, r3
    6d3e:	d3c2      	bcc.n	6cc6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6d40:	9b01      	ldr	r3, [sp, #4]
    6d42:	6a1b      	ldr	r3, [r3, #32]
    6d44:	4619      	mov	r1, r3
    6d46:	2002      	movs	r0, #2
    6d48:	f7ff fd98 	bl	687c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6d4c:	9801      	ldr	r0, [sp, #4]
    6d4e:	f7ff fe75 	bl	6a3c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6d52:	bf00      	nop
    6d54:	b005      	add	sp, #20
    6d56:	f85d fb04 	ldr.w	pc, [sp], #4
    6d5a:	bf00      	nop
    6d5c:	00010ea8 	.word	0x00010ea8

00006d60 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6d60:	b500      	push	{lr}
    6d62:	b085      	sub	sp, #20
    6d64:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6d66:	9b01      	ldr	r3, [sp, #4]
    6d68:	881b      	ldrh	r3, [r3, #0]
    6d6a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6d6e:	2300      	movs	r3, #0
    6d70:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d74:	e0d2      	b.n	6f1c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6d76:	9b01      	ldr	r3, [sp, #4]
    6d78:	68d9      	ldr	r1, [r3, #12]
    6d7a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d7e:	4613      	mov	r3, r2
    6d80:	009b      	lsls	r3, r3, #2
    6d82:	4413      	add	r3, r2
    6d84:	009b      	lsls	r3, r3, #2
    6d86:	440b      	add	r3, r1
    6d88:	7c5b      	ldrb	r3, [r3, #17]
    6d8a:	f083 0301 	eor.w	r3, r3, #1
    6d8e:	b2db      	uxtb	r3, r3
    6d90:	2b00      	cmp	r3, #0
    6d92:	f000 80be 	beq.w	6f12 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6d96:	9b01      	ldr	r3, [sp, #4]
    6d98:	68d9      	ldr	r1, [r3, #12]
    6d9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d9e:	4613      	mov	r3, r2
    6da0:	009b      	lsls	r3, r3, #2
    6da2:	4413      	add	r3, r2
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	440b      	add	r3, r1
    6da8:	7c1b      	ldrb	r3, [r3, #16]
    6daa:	2b00      	cmp	r3, #0
    6dac:	f000 80b1 	beq.w	6f12 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6db0:	9b01      	ldr	r3, [sp, #4]
    6db2:	68d9      	ldr	r1, [r3, #12]
    6db4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6db8:	4613      	mov	r3, r2
    6dba:	009b      	lsls	r3, r3, #2
    6dbc:	4413      	add	r3, r2
    6dbe:	009b      	lsls	r3, r3, #2
    6dc0:	440b      	add	r3, r1
    6dc2:	881b      	ldrh	r3, [r3, #0]
    6dc4:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6dc8:	9b01      	ldr	r3, [sp, #4]
    6dca:	68d9      	ldr	r1, [r3, #12]
    6dcc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6dd0:	4613      	mov	r3, r2
    6dd2:	009b      	lsls	r3, r3, #2
    6dd4:	4413      	add	r3, r2
    6dd6:	009b      	lsls	r3, r3, #2
    6dd8:	440b      	add	r3, r1
    6dda:	68db      	ldr	r3, [r3, #12]
    6ddc:	2b02      	cmp	r3, #2
    6dde:	d11d      	bne.n	6e1c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6de0:	f009 f8d4 	bl	ff8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6de4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6de8:	095b      	lsrs	r3, r3, #5
    6dea:	b29b      	uxth	r3, r3
    6dec:	461a      	mov	r2, r3
    6dee:	4b51      	ldr	r3, [pc, #324]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6df4:	6959      	ldr	r1, [r3, #20]
    6df6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6dfa:	f003 031f 	and.w	r3, r3, #31
    6dfe:	2201      	movs	r2, #1
    6e00:	409a      	lsls	r2, r3
    6e02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e06:	095b      	lsrs	r3, r3, #5
    6e08:	b29b      	uxth	r3, r3
    6e0a:	4618      	mov	r0, r3
    6e0c:	4b49      	ldr	r3, [pc, #292]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6e12:	430a      	orrs	r2, r1
    6e14:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6e16:	f009 f8e5 	bl	ffe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6e1a:	e07a      	b.n	6f12 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6e1c:	9b01      	ldr	r3, [sp, #4]
    6e1e:	68d9      	ldr	r1, [r3, #12]
    6e20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e24:	4613      	mov	r3, r2
    6e26:	009b      	lsls	r3, r3, #2
    6e28:	4413      	add	r3, r2
    6e2a:	009b      	lsls	r3, r3, #2
    6e2c:	440b      	add	r3, r1
    6e2e:	68db      	ldr	r3, [r3, #12]
    6e30:	2b01      	cmp	r3, #1
    6e32:	d00b      	beq.n	6e4c <Port_Ipw_RefreshPortDirection+0xec>
    6e34:	9b01      	ldr	r3, [sp, #4]
    6e36:	68d9      	ldr	r1, [r3, #12]
    6e38:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e3c:	4613      	mov	r3, r2
    6e3e:	009b      	lsls	r3, r3, #2
    6e40:	4413      	add	r3, r2
    6e42:	009b      	lsls	r3, r3, #2
    6e44:	440b      	add	r3, r1
    6e46:	68db      	ldr	r3, [r3, #12]
    6e48:	2b03      	cmp	r3, #3
    6e4a:	d162      	bne.n	6f12 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6e4c:	f009 f89e 	bl	ff8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e54:	095b      	lsrs	r3, r3, #5
    6e56:	b29b      	uxth	r3, r3
    6e58:	461a      	mov	r2, r3
    6e5a:	4b36      	ldr	r3, [pc, #216]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e60:	6959      	ldr	r1, [r3, #20]
    6e62:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e66:	f003 031f 	and.w	r3, r3, #31
    6e6a:	2201      	movs	r2, #1
    6e6c:	fa02 f303 	lsl.w	r3, r2, r3
    6e70:	43da      	mvns	r2, r3
    6e72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e76:	095b      	lsrs	r3, r3, #5
    6e78:	b29b      	uxth	r3, r3
    6e7a:	4618      	mov	r0, r3
    6e7c:	4b2d      	ldr	r3, [pc, #180]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6e82:	400a      	ands	r2, r1
    6e84:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6e86:	f009 f8ad 	bl	ffe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6e8a:	f009 f8d1 	bl	10030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e92:	095b      	lsrs	r3, r3, #5
    6e94:	b29b      	uxth	r3, r3
    6e96:	461a      	mov	r2, r3
    6e98:	4b26      	ldr	r3, [pc, #152]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e9e:	6999      	ldr	r1, [r3, #24]
    6ea0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ea4:	f003 031f 	and.w	r3, r3, #31
    6ea8:	2201      	movs	r2, #1
    6eaa:	fa02 f303 	lsl.w	r3, r2, r3
    6eae:	43da      	mvns	r2, r3
    6eb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6eb4:	095b      	lsrs	r3, r3, #5
    6eb6:	b29b      	uxth	r3, r3
    6eb8:	4618      	mov	r0, r3
    6eba:	4b1e      	ldr	r3, [pc, #120]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ebc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ec0:	400a      	ands	r2, r1
    6ec2:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6ec4:	9b01      	ldr	r3, [sp, #4]
    6ec6:	68d9      	ldr	r1, [r3, #12]
    6ec8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6ecc:	4613      	mov	r3, r2
    6ece:	009b      	lsls	r3, r3, #2
    6ed0:	4413      	add	r3, r2
    6ed2:	009b      	lsls	r3, r3, #2
    6ed4:	440b      	add	r3, r1
    6ed6:	68db      	ldr	r3, [r3, #12]
    6ed8:	2b03      	cmp	r3, #3
    6eda:	d118      	bne.n	6f0e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6edc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ee0:	095b      	lsrs	r3, r3, #5
    6ee2:	b29b      	uxth	r3, r3
    6ee4:	461a      	mov	r2, r3
    6ee6:	4b13      	ldr	r3, [pc, #76]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6eec:	6999      	ldr	r1, [r3, #24]
    6eee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ef2:	f003 031f 	and.w	r3, r3, #31
    6ef6:	2201      	movs	r2, #1
    6ef8:	409a      	lsls	r2, r3
    6efa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6efe:	095b      	lsrs	r3, r3, #5
    6f00:	b29b      	uxth	r3, r3
    6f02:	4618      	mov	r0, r3
    6f04:	4b0b      	ldr	r3, [pc, #44]	; (6f34 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6f06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f0a:	430a      	orrs	r2, r1
    6f0c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6f0e:	f009 f8bb 	bl	10088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6f12:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6f16:	3301      	adds	r3, #1
    6f18:	f8ad 300e 	strh.w	r3, [sp, #14]
    6f1c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6f20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6f24:	429a      	cmp	r2, r3
    6f26:	f4ff af26 	bcc.w	6d76 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6f2a:	bf00      	nop
    6f2c:	bf00      	nop
    6f2e:	b005      	add	sp, #20
    6f30:	f85d fb04 	ldr.w	pc, [sp], #4
    6f34:	00010ebc 	.word	0x00010ebc

00006f38 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    6f38:	b500      	push	{lr}
    6f3a:	b083      	sub	sp, #12
    6f3c:	4603      	mov	r3, r0
    6f3e:	460a      	mov	r2, r1
    6f40:	f88d 3007 	strb.w	r3, [sp, #7]
    6f44:	4613      	mov	r3, r2
    6f46:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    6f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f52:	2100      	movs	r1, #0
    6f54:	207b      	movs	r0, #123	; 0x7b
    6f56:	f009 fb37 	bl	105c8 <Det_ReportRuntimeError>
}
    6f5a:	bf00      	nop
    6f5c:	b003      	add	sp, #12
    6f5e:	f85d fb04 	ldr.w	pc, [sp], #4

00006f62 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6f62:	b500      	push	{lr}
    6f64:	b085      	sub	sp, #20
    6f66:	4603      	mov	r3, r0
    6f68:	460a      	mov	r2, r1
    6f6a:	f88d 3007 	strb.w	r3, [sp, #7]
    6f6e:	4613      	mov	r3, r2
    6f70:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6f74:	2300      	movs	r3, #0
    6f76:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f7e:	4a0c      	ldr	r2, [pc, #48]	; (6fb0 <Adc_ValidateNotBusyNoQueue+0x4e>)
    6f80:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6f84:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6f88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d008      	beq.n	6fa2 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6f90:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f94:	210b      	movs	r1, #11
    6f96:	4618      	mov	r0, r3
    6f98:	f7ff ffce 	bl	6f38 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6f9c:	2301      	movs	r3, #1
    6f9e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6fa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6fa6:	4618      	mov	r0, r3
    6fa8:	b005      	add	sp, #20
    6faa:	f85d fb04 	ldr.w	pc, [sp], #4
    6fae:	bf00      	nop
    6fb0:	1fff8d00 	.word	0x1fff8d00

00006fb4 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    6fb4:	b500      	push	{lr}
    6fb6:	b085      	sub	sp, #20
    6fb8:	4603      	mov	r3, r0
    6fba:	f8ad 3006 	strh.w	r3, [sp, #6]
    6fbe:	460b      	mov	r3, r1
    6fc0:	f88d 3005 	strb.w	r3, [sp, #5]
    6fc4:	4613      	mov	r3, r2
    6fc6:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6fca:	2301      	movs	r3, #1
    6fcc:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    6fd0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6fd4:	4917      	ldr	r1, [pc, #92]	; (7034 <Adc_ValidateNotBusyNoPrio+0x80>)
    6fd6:	4613      	mov	r3, r2
    6fd8:	009b      	lsls	r3, r3, #2
    6fda:	4413      	add	r3, r2
    6fdc:	009b      	lsls	r3, r3, #2
    6fde:	440b      	add	r3, r1
    6fe0:	681b      	ldr	r3, [r3, #0]
    6fe2:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    6fe4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fe8:	f083 0301 	eor.w	r3, r3, #1
    6fec:	b2db      	uxtb	r3, r3
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d007      	beq.n	7002 <Adc_ValidateNotBusyNoPrio+0x4e>
    6ff2:	9b02      	ldr	r3, [sp, #8]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d004      	beq.n	7002 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6ff8:	210b      	movs	r1, #11
    6ffa:	2002      	movs	r0, #2
    6ffc:	f7ff ff9c 	bl	6f38 <Adc_ReportDetRuntimeError>
    7000:	e011      	b.n	7026 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    7002:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7006:	2b00      	cmp	r3, #0
    7008:	d00a      	beq.n	7020 <Adc_ValidateNotBusyNoPrio+0x6c>
    700a:	9b02      	ldr	r3, [sp, #8]
    700c:	2b00      	cmp	r3, #0
    700e:	d007      	beq.n	7020 <Adc_ValidateNotBusyNoPrio+0x6c>
    7010:	9b02      	ldr	r3, [sp, #8]
    7012:	2b03      	cmp	r3, #3
    7014:	d004      	beq.n	7020 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7016:	210b      	movs	r1, #11
    7018:	2002      	movs	r0, #2
    701a:	f7ff ff8d 	bl	6f38 <Adc_ReportDetRuntimeError>
    701e:	e002      	b.n	7026 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7020:	2300      	movs	r3, #0
    7022:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    7026:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    702a:	4618      	mov	r0, r3
    702c:	b005      	add	sp, #20
    702e:	f85d fb04 	ldr.w	pc, [sp], #4
    7032:	bf00      	nop
    7034:	1fff8cec 	.word	0x1fff8cec

00007038 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    7038:	b500      	push	{lr}
    703a:	b087      	sub	sp, #28
    703c:	4603      	mov	r3, r0
    703e:	460a      	mov	r2, r1
    7040:	f88d 3007 	strb.w	r3, [sp, #7]
    7044:	4613      	mov	r3, r2
    7046:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    704a:	2300      	movs	r3, #0
    704c:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7050:	2300      	movs	r3, #0
    7052:	f8ad 3016 	strh.w	r3, [sp, #22]
    7056:	e02c      	b.n	70b2 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    7058:	f89d 3006 	ldrb.w	r3, [sp, #6]
    705c:	4a1d      	ldr	r2, [pc, #116]	; (70d4 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    705e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7062:	685a      	ldr	r2, [r3, #4]
    7064:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7068:	2134      	movs	r1, #52	; 0x34
    706a:	fb01 f303 	mul.w	r3, r1, r3
    706e:	4413      	add	r3, r2
    7070:	881b      	ldrh	r3, [r3, #0]
    7072:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    7076:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    707a:	4917      	ldr	r1, [pc, #92]	; (70d8 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    707c:	4613      	mov	r3, r2
    707e:	009b      	lsls	r3, r3, #2
    7080:	4413      	add	r3, r2
    7082:	009b      	lsls	r3, r3, #2
    7084:	440b      	add	r3, r1
    7086:	681b      	ldr	r3, [r3, #0]
    7088:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    708a:	9b03      	ldr	r3, [sp, #12]
    708c:	2b00      	cmp	r3, #0
    708e:	d00b      	beq.n	70a8 <Adc_ValidateCheckGroupNotConversion+0x70>
    7090:	9b03      	ldr	r3, [sp, #12]
    7092:	2b03      	cmp	r3, #3
    7094:	d008      	beq.n	70a8 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7096:	f89d 3007 	ldrb.w	r3, [sp, #7]
    709a:	210b      	movs	r1, #11
    709c:	4618      	mov	r0, r3
    709e:	f7ff ff4b 	bl	6f38 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    70a2:	2301      	movs	r3, #1
    70a4:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    70a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70ac:	3301      	adds	r3, #1
    70ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    70b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    70b6:	4a07      	ldr	r2, [pc, #28]	; (70d4 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    70b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70bc:	891b      	ldrh	r3, [r3, #8]
    70be:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    70c2:	429a      	cmp	r2, r3
    70c4:	d3c8      	bcc.n	7058 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    70c6:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    70ca:	4618      	mov	r0, r3
    70cc:	b007      	add	sp, #28
    70ce:	f85d fb04 	ldr.w	pc, [sp], #4
    70d2:	bf00      	nop
    70d4:	1fff8ce8 	.word	0x1fff8ce8
    70d8:	1fff8cec 	.word	0x1fff8cec

000070dc <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    70dc:	b500      	push	{lr}
    70de:	b085      	sub	sp, #20
    70e0:	4603      	mov	r3, r0
    70e2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    70e6:	2300      	movs	r3, #0
    70e8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    70ec:	2301      	movs	r3, #1
    70ee:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    70f2:	2300      	movs	r3, #0
    70f4:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    70f8:	2300      	movs	r3, #0
    70fa:	f88d 300d 	strb.w	r3, [sp, #13]
    70fe:	e01d      	b.n	713c <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7100:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7104:	4a1b      	ldr	r2, [pc, #108]	; (7174 <Adc_ValidateDeInitNotBusy+0x98>)
    7106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710a:	681a      	ldr	r2, [r3, #0]
    710c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7110:	4413      	add	r3, r2
    7112:	7f9b      	ldrb	r3, [r3, #30]
    7114:	2b01      	cmp	r3, #1
    7116:	d10c      	bne.n	7132 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    7118:	f89d 300d 	ldrb.w	r3, [sp, #13]
    711c:	2101      	movs	r1, #1
    711e:	4618      	mov	r0, r3
    7120:	f7ff ff1f 	bl	6f62 <Adc_ValidateNotBusyNoQueue>
    7124:	4603      	mov	r3, r0
    7126:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    712a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    712e:	2b01      	cmp	r3, #1
    7130:	d009      	beq.n	7146 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7132:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7136:	3301      	adds	r3, #1
    7138:	f88d 300d 	strb.w	r3, [sp, #13]
    713c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7140:	2b01      	cmp	r3, #1
    7142:	d9dd      	bls.n	7100 <Adc_ValidateDeInitNotBusy+0x24>
    7144:	e000      	b.n	7148 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    7146:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    7148:	f89d 300f 	ldrb.w	r3, [sp, #15]
    714c:	2b00      	cmp	r3, #0
    714e:	d10b      	bne.n	7168 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    7150:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7154:	4619      	mov	r1, r3
    7156:	2001      	movs	r0, #1
    7158:	f7ff ff6e 	bl	7038 <Adc_ValidateCheckGroupNotConversion>
    715c:	4603      	mov	r3, r0
    715e:	2b00      	cmp	r3, #0
    7160:	d102      	bne.n	7168 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    7162:	2300      	movs	r3, #0
    7164:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    7168:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    716c:	4618      	mov	r0, r3
    716e:	b005      	add	sp, #20
    7170:	f85d fb04 	ldr.w	pc, [sp], #4
    7174:	1fff8ce8 	.word	0x1fff8ce8

00007178 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    7178:	b500      	push	{lr}
    717a:	b085      	sub	sp, #20
    717c:	4603      	mov	r3, r0
    717e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7182:	2301      	movs	r3, #1
    7184:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    7188:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    718c:	490b      	ldr	r1, [pc, #44]	; (71bc <Adc_ValidateSetupBufferNotBusy+0x44>)
    718e:	4613      	mov	r3, r2
    7190:	009b      	lsls	r3, r3, #2
    7192:	4413      	add	r3, r2
    7194:	009b      	lsls	r3, r3, #2
    7196:	440b      	add	r3, r1
    7198:	681b      	ldr	r3, [r3, #0]
    719a:	2b00      	cmp	r3, #0
    719c:	d004      	beq.n	71a8 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    719e:	210b      	movs	r1, #11
    71a0:	200c      	movs	r0, #12
    71a2:	f7ff fec9 	bl	6f38 <Adc_ReportDetRuntimeError>
    71a6:	e002      	b.n	71ae <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    71a8:	2300      	movs	r3, #0
    71aa:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    71ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    71b2:	4618      	mov	r0, r3
    71b4:	b005      	add	sp, #20
    71b6:	f85d fb04 	ldr.w	pc, [sp], #4
    71ba:	bf00      	nop
    71bc:	1fff8cec 	.word	0x1fff8cec

000071c0 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    71c0:	b500      	push	{lr}
    71c2:	b085      	sub	sp, #20
    71c4:	4603      	mov	r3, r0
    71c6:	460a      	mov	r2, r1
    71c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    71cc:	4613      	mov	r3, r2
    71ce:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    71d2:	2300      	movs	r3, #0
    71d4:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    71d8:	2300      	movs	r3, #0
    71da:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    71de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    71e2:	4a32      	ldr	r2, [pc, #200]	; (72ac <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    71e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e8:	68da      	ldr	r2, [r3, #12]
    71ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71ee:	005b      	lsls	r3, r3, #1
    71f0:	4413      	add	r3, r2
    71f2:	881b      	ldrh	r3, [r3, #0]
    71f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    71f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    71fc:	4a2b      	ldr	r2, [pc, #172]	; (72ac <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    71fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7202:	685a      	ldr	r2, [r3, #4]
    7204:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7208:	2134      	movs	r1, #52	; 0x34
    720a:	fb01 f303 	mul.w	r3, r1, r3
    720e:	4413      	add	r3, r2
    7210:	689b      	ldr	r3, [r3, #8]
    7212:	2b00      	cmp	r3, #0
    7214:	d02c      	beq.n	7270 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7216:	f89d 3005 	ldrb.w	r3, [sp, #5]
    721a:	4a24      	ldr	r2, [pc, #144]	; (72ac <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    721c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7220:	685a      	ldr	r2, [r3, #4]
    7222:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7226:	2134      	movs	r1, #52	; 0x34
    7228:	fb01 f303 	mul.w	r3, r1, r3
    722c:	4413      	add	r3, r2
    722e:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7230:	2b01      	cmp	r3, #1
    7232:	d120      	bne.n	7276 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7234:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7238:	4a1c      	ldr	r2, [pc, #112]	; (72ac <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    723a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    723e:	685a      	ldr	r2, [r3, #4]
    7240:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7244:	2134      	movs	r1, #52	; 0x34
    7246:	fb01 f303 	mul.w	r3, r1, r3
    724a:	4413      	add	r3, r2
    724c:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    724e:	2b01      	cmp	r3, #1
    7250:	d111      	bne.n	7276 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    7252:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7256:	4a15      	ldr	r2, [pc, #84]	; (72ac <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    725c:	685a      	ldr	r2, [r3, #4]
    725e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7262:	2134      	movs	r1, #52	; 0x34
    7264:	fb01 f303 	mul.w	r3, r1, r3
    7268:	4413      	add	r3, r2
    726a:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    726c:	2b00      	cmp	r3, #0
    726e:	d102      	bne.n	7276 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    7270:	2301      	movs	r3, #1
    7272:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    7276:	f89d 300f 	ldrb.w	r3, [sp, #15]
    727a:	2b01      	cmp	r3, #1
    727c:	d104      	bne.n	7288 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    727e:	210b      	movs	r1, #11
    7280:	2002      	movs	r0, #2
    7282:	f7ff fe59 	bl	6f38 <Adc_ReportDetRuntimeError>
    7286:	e00b      	b.n	72a0 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    7288:	f89d 2005 	ldrb.w	r2, [sp, #5]
    728c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7290:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7294:	4618      	mov	r0, r3
    7296:	f7ff fe8d 	bl	6fb4 <Adc_ValidateNotBusyNoPrio>
    729a:	4603      	mov	r3, r0
    729c:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    72a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    72a4:	4618      	mov	r0, r3
    72a6:	b005      	add	sp, #20
    72a8:	f85d fb04 	ldr.w	pc, [sp], #4
    72ac:	1fff8ce8 	.word	0x1fff8ce8

000072b0 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    72b0:	b500      	push	{lr}
    72b2:	b085      	sub	sp, #20
    72b4:	4603      	mov	r3, r0
    72b6:	f88d 3007 	strb.w	r3, [sp, #7]
    72ba:	460b      	mov	r3, r1
    72bc:	f8ad 3004 	strh.w	r3, [sp, #4]
    72c0:	4613      	mov	r3, r2
    72c2:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    72c6:	2300      	movs	r3, #0
    72c8:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    72cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72d0:	2b0b      	cmp	r3, #11
    72d2:	d03b      	beq.n	734c <Adc_ValidateStateNotIdle+0x9c>
    72d4:	2b0b      	cmp	r3, #11
    72d6:	dc4e      	bgt.n	7376 <Adc_ValidateStateNotIdle+0xc6>
    72d8:	2b03      	cmp	r3, #3
    72da:	d022      	beq.n	7322 <Adc_ValidateStateNotIdle+0x72>
    72dc:	2b04      	cmp	r3, #4
    72de:	d14a      	bne.n	7376 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    72e0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    72e4:	492a      	ldr	r1, [pc, #168]	; (7390 <Adc_ValidateStateNotIdle+0xe0>)
    72e6:	4613      	mov	r3, r2
    72e8:	009b      	lsls	r3, r3, #2
    72ea:	4413      	add	r3, r2
    72ec:	009b      	lsls	r3, r3, #2
    72ee:	440b      	add	r3, r1
    72f0:	681b      	ldr	r3, [r3, #0]
    72f2:	2b00      	cmp	r3, #0
    72f4:	d141      	bne.n	737a <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    72f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    72fa:	4925      	ldr	r1, [pc, #148]	; (7390 <Adc_ValidateStateNotIdle+0xe0>)
    72fc:	4613      	mov	r3, r2
    72fe:	009b      	lsls	r3, r3, #2
    7300:	4413      	add	r3, r2
    7302:	009b      	lsls	r3, r3, #2
    7304:	440b      	add	r3, r1
    7306:	3304      	adds	r3, #4
    7308:	681b      	ldr	r3, [r3, #0]
    730a:	2b00      	cmp	r3, #0
    730c:	d135      	bne.n	737a <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    730e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7312:	210c      	movs	r1, #12
    7314:	4618      	mov	r0, r3
    7316:	f7ff fe0f 	bl	6f38 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    731a:	2301      	movs	r3, #1
    731c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    7320:	e02b      	b.n	737a <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7322:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7326:	491a      	ldr	r1, [pc, #104]	; (7390 <Adc_ValidateStateNotIdle+0xe0>)
    7328:	4613      	mov	r3, r2
    732a:	009b      	lsls	r3, r3, #2
    732c:	4413      	add	r3, r2
    732e:	009b      	lsls	r3, r3, #2
    7330:	440b      	add	r3, r1
    7332:	681b      	ldr	r3, [r3, #0]
    7334:	2b00      	cmp	r3, #0
    7336:	d122      	bne.n	737e <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7338:	f89d 3007 	ldrb.w	r3, [sp, #7]
    733c:	210c      	movs	r1, #12
    733e:	4618      	mov	r0, r3
    7340:	f7ff fdfa 	bl	6f38 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    7344:	2301      	movs	r3, #1
    7346:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    734a:	e018      	b.n	737e <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    734c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7350:	490f      	ldr	r1, [pc, #60]	; (7390 <Adc_ValidateStateNotIdle+0xe0>)
    7352:	4613      	mov	r3, r2
    7354:	009b      	lsls	r3, r3, #2
    7356:	4413      	add	r3, r2
    7358:	009b      	lsls	r3, r3, #2
    735a:	440b      	add	r3, r1
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	2b00      	cmp	r3, #0
    7360:	d10f      	bne.n	7382 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7362:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7366:	210c      	movs	r1, #12
    7368:	4618      	mov	r0, r3
    736a:	f7ff fde5 	bl	6f38 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    736e:	2301      	movs	r3, #1
    7370:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    7374:	e005      	b.n	7382 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    7376:	bf00      	nop
    7378:	e004      	b.n	7384 <Adc_ValidateStateNotIdle+0xd4>
            break;
    737a:	bf00      	nop
    737c:	e002      	b.n	7384 <Adc_ValidateStateNotIdle+0xd4>
            break;
    737e:	bf00      	nop
    7380:	e000      	b.n	7384 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7382:	bf00      	nop
        }
    }

    return ValidState;
    7384:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7388:	4618      	mov	r0, r3
    738a:	b005      	add	sp, #20
    738c:	f85d fb04 	ldr.w	pc, [sp], #4
    7390:	1fff8cec 	.word	0x1fff8cec

00007394 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7394:	b084      	sub	sp, #16
    7396:	4603      	mov	r3, r0
    7398:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    739c:	2300      	movs	r3, #0
    739e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    73a2:	2300      	movs	r3, #0
    73a4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    73a8:	2300      	movs	r3, #0
    73aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    73ae:	e049      	b.n	7444 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    73b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73b4:	4a2a      	ldr	r2, [pc, #168]	; (7460 <Adc_InitGroupsStatus+0xcc>)
    73b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ba:	685a      	ldr	r2, [r3, #4]
    73bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    73c0:	2134      	movs	r1, #52	; 0x34
    73c2:	fb01 f303 	mul.w	r3, r1, r3
    73c6:	4413      	add	r3, r2
    73c8:	881b      	ldrh	r3, [r3, #0]
    73ca:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    73ce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    73d2:	4924      	ldr	r1, [pc, #144]	; (7464 <Adc_InitGroupsStatus+0xd0>)
    73d4:	4613      	mov	r3, r2
    73d6:	009b      	lsls	r3, r3, #2
    73d8:	4413      	add	r3, r2
    73da:	009b      	lsls	r3, r3, #2
    73dc:	440b      	add	r3, r1
    73de:	2200      	movs	r2, #0
    73e0:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    73e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    73e6:	491f      	ldr	r1, [pc, #124]	; (7464 <Adc_InitGroupsStatus+0xd0>)
    73e8:	4613      	mov	r3, r2
    73ea:	009b      	lsls	r3, r3, #2
    73ec:	4413      	add	r3, r2
    73ee:	009b      	lsls	r3, r3, #2
    73f0:	440b      	add	r3, r1
    73f2:	3304      	adds	r3, #4
    73f4:	2200      	movs	r2, #0
    73f6:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    73f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    73fc:	4919      	ldr	r1, [pc, #100]	; (7464 <Adc_InitGroupsStatus+0xd0>)
    73fe:	4613      	mov	r3, r2
    7400:	009b      	lsls	r3, r3, #2
    7402:	4413      	add	r3, r2
    7404:	009b      	lsls	r3, r3, #2
    7406:	440b      	add	r3, r1
    7408:	3308      	adds	r3, #8
    740a:	2200      	movs	r2, #0
    740c:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    740e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7412:	4914      	ldr	r1, [pc, #80]	; (7464 <Adc_InitGroupsStatus+0xd0>)
    7414:	4613      	mov	r3, r2
    7416:	009b      	lsls	r3, r3, #2
    7418:	4413      	add	r3, r2
    741a:	009b      	lsls	r3, r3, #2
    741c:	440b      	add	r3, r1
    741e:	330c      	adds	r3, #12
    7420:	2200      	movs	r2, #0
    7422:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7424:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7428:	490e      	ldr	r1, [pc, #56]	; (7464 <Adc_InitGroupsStatus+0xd0>)
    742a:	4613      	mov	r3, r2
    742c:	009b      	lsls	r3, r3, #2
    742e:	4413      	add	r3, r2
    7430:	009b      	lsls	r3, r3, #2
    7432:	440b      	add	r3, r1
    7434:	3310      	adds	r3, #16
    7436:	2200      	movs	r2, #0
    7438:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    743a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    743e:	3301      	adds	r3, #1
    7440:	f8ad 300e 	strh.w	r3, [sp, #14]
    7444:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7448:	4a05      	ldr	r2, [pc, #20]	; (7460 <Adc_InitGroupsStatus+0xcc>)
    744a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    744e:	891b      	ldrh	r3, [r3, #8]
    7450:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7454:	429a      	cmp	r2, r3
    7456:	d3ab      	bcc.n	73b0 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7458:	bf00      	nop
    745a:	bf00      	nop
    745c:	b004      	add	sp, #16
    745e:	4770      	bx	lr
    7460:	1fff8ce8 	.word	0x1fff8ce8
    7464:	1fff8cec 	.word	0x1fff8cec

00007468 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7468:	b084      	sub	sp, #16
    746a:	4603      	mov	r3, r0
    746c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7470:	2300      	movs	r3, #0
    7472:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7476:	2300      	movs	r3, #0
    7478:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    747c:	2300      	movs	r3, #0
    747e:	f88d 300f 	strb.w	r3, [sp, #15]
    7482:	e035      	b.n	74f0 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7488:	4a1d      	ldr	r2, [pc, #116]	; (7500 <Adc_InitUnitStatus+0x98>)
    748a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    748e:	681a      	ldr	r2, [r3, #0]
    7490:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7494:	4413      	add	r3, r2
    7496:	7f9b      	ldrb	r3, [r3, #30]
    7498:	2b01      	cmp	r3, #1
    749a:	d124      	bne.n	74e6 <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    749c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74a0:	4a18      	ldr	r2, [pc, #96]	; (7504 <Adc_InitUnitStatus+0x9c>)
    74a2:	2100      	movs	r1, #0
    74a4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    74a8:	2300      	movs	r3, #0
    74aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    74ae:	e00f      	b.n	74d0 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    74b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    74b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74b8:	4912      	ldr	r1, [pc, #72]	; (7504 <Adc_InitUnitStatus+0x9c>)
    74ba:	0092      	lsls	r2, r2, #2
    74bc:	4413      	add	r3, r2
    74be:	005b      	lsls	r3, r3, #1
    74c0:	440b      	add	r3, r1
    74c2:	2200      	movs	r2, #0
    74c4:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    74c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74ca:	3301      	adds	r3, #1
    74cc:	f8ad 300c 	strh.w	r3, [sp, #12]
    74d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74d4:	2b01      	cmp	r3, #1
    74d6:	d9eb      	bls.n	74b0 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    74d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74dc:	4a09      	ldr	r2, [pc, #36]	; (7504 <Adc_InitUnitStatus+0x9c>)
    74de:	00db      	lsls	r3, r3, #3
    74e0:	4413      	add	r3, r2
    74e2:	2200      	movs	r2, #0
    74e4:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    74e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74ea:	3301      	adds	r3, #1
    74ec:	f88d 300f 	strb.w	r3, [sp, #15]
    74f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74f4:	2b01      	cmp	r3, #1
    74f6:	d9c5      	bls.n	7484 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    74f8:	bf00      	nop
    74fa:	bf00      	nop
    74fc:	b004      	add	sp, #16
    74fe:	4770      	bx	lr
    7500:	1fff8ce8 	.word	0x1fff8ce8
    7504:	1fff8d00 	.word	0x1fff8d00

00007508 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7508:	b084      	sub	sp, #16
    750a:	9001      	str	r0, [sp, #4]
    750c:	460b      	mov	r3, r1
    750e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7512:	2300      	movs	r3, #0
    7514:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7518:	2301      	movs	r3, #1
    751a:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    751e:	9b01      	ldr	r3, [sp, #4]
    7520:	7c1b      	ldrb	r3, [r3, #16]
    7522:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7526:	429a      	cmp	r2, r3
    7528:	d11c      	bne.n	7564 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    752a:	2300      	movs	r3, #0
    752c:	f88d 300f 	strb.w	r3, [sp, #15]
    7530:	e012      	b.n	7558 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7532:	9b01      	ldr	r3, [sp, #4]
    7534:	695a      	ldr	r2, [r3, #20]
    7536:	f89d 300f 	ldrb.w	r3, [sp, #15]
    753a:	4413      	add	r3, r2
    753c:	781b      	ldrb	r3, [r3, #0]
    753e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7542:	429a      	cmp	r2, r3
    7544:	d103      	bne.n	754e <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7546:	2300      	movs	r3, #0
    7548:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    754c:	e00a      	b.n	7564 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    754e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7552:	3301      	adds	r3, #1
    7554:	f88d 300f 	strb.w	r3, [sp, #15]
    7558:	9b01      	ldr	r3, [sp, #4]
    755a:	7e1b      	ldrb	r3, [r3, #24]
    755c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7560:	429a      	cmp	r2, r3
    7562:	d3e6      	bcc.n	7532 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7564:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7568:	4618      	mov	r0, r3
    756a:	b004      	add	sp, #16
    756c:	4770      	bx	lr

0000756e <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    756e:	b500      	push	{lr}
    7570:	b085      	sub	sp, #20
    7572:	4603      	mov	r3, r0
    7574:	f8ad 3006 	strh.w	r3, [sp, #6]
    7578:	460b      	mov	r3, r1
    757a:	f88d 3005 	strb.w	r3, [sp, #5]
    757e:	4613      	mov	r3, r2
    7580:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7584:	2300      	movs	r3, #0
    7586:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    758a:	2300      	movs	r3, #0
    758c:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7590:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7594:	493e      	ldr	r1, [pc, #248]	; (7690 <Adc_UpdateStatusStartConversion+0x122>)
    7596:	4613      	mov	r3, r2
    7598:	009b      	lsls	r3, r3, #2
    759a:	4413      	add	r3, r2
    759c:	009b      	lsls	r3, r3, #2
    759e:	440b      	add	r3, r1
    75a0:	2201      	movs	r2, #1
    75a2:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    75a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75a8:	4939      	ldr	r1, [pc, #228]	; (7690 <Adc_UpdateStatusStartConversion+0x122>)
    75aa:	4613      	mov	r3, r2
    75ac:	009b      	lsls	r3, r3, #2
    75ae:	4413      	add	r3, r2
    75b0:	009b      	lsls	r3, r3, #2
    75b2:	440b      	add	r3, r1
    75b4:	3308      	adds	r3, #8
    75b6:	2200      	movs	r2, #0
    75b8:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    75ba:	f003 fec9 	bl	b350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    75be:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75c2:	4a34      	ldr	r2, [pc, #208]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    75c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    75c8:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    75cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d016      	beq.n	7602 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    75d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    75d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75dc:	492d      	ldr	r1, [pc, #180]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    75de:	0092      	lsls	r2, r2, #2
    75e0:	4413      	add	r3, r2
    75e2:	005b      	lsls	r3, r3, #1
    75e4:	440b      	add	r3, r1
    75e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75ea:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    75ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75f0:	4a28      	ldr	r2, [pc, #160]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    75f2:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    75f6:	b292      	uxth	r2, r2
    75f8:	3201      	adds	r2, #1
    75fa:	b291      	uxth	r1, r2
    75fc:	4a25      	ldr	r2, [pc, #148]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    75fe:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7602:	f003 fed1 	bl	b3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7606:	f003 fea3 	bl	b350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    760a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    760e:	4a21      	ldr	r2, [pc, #132]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    7610:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7614:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7618:	f89d 3005 	ldrb.w	r3, [sp, #5]
    761c:	4a1d      	ldr	r2, [pc, #116]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    761e:	00db      	lsls	r3, r3, #3
    7620:	4413      	add	r3, r2
    7622:	885b      	ldrh	r3, [r3, #2]
    7624:	b29b      	uxth	r3, r3
    7626:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    762a:	429a      	cmp	r2, r3
    762c:	d003      	beq.n	7636 <Adc_UpdateStatusStartConversion+0xc8>
    762e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7632:	2b00      	cmp	r3, #0
    7634:	d125      	bne.n	7682 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7636:	f89d 3005 	ldrb.w	r3, [sp, #5]
    763a:	4a16      	ldr	r2, [pc, #88]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    763c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7640:	b29b      	uxth	r3, r3
    7642:	2b00      	cmp	r3, #0
    7644:	d112      	bne.n	766c <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7646:	f89d 3005 	ldrb.w	r3, [sp, #5]
    764a:	4a12      	ldr	r2, [pc, #72]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    764c:	00db      	lsls	r3, r3, #3
    764e:	4413      	add	r3, r2
    7650:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7654:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7656:	f89d 3005 	ldrb.w	r3, [sp, #5]
    765a:	4a0e      	ldr	r2, [pc, #56]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    765c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7660:	b292      	uxth	r2, r2
    7662:	3201      	adds	r2, #1
    7664:	b291      	uxth	r1, r2
    7666:	4a0b      	ldr	r2, [pc, #44]	; (7694 <Adc_UpdateStatusStartConversion+0x126>)
    7668:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    766c:	f003 fe9c 	bl	b3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7670:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7674:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7678:	4611      	mov	r1, r2
    767a:	4618      	mov	r0, r3
    767c:	f002 fbf2 	bl	9e64 <Adc_Ipw_StartNormalConversion>
    7680:	e002      	b.n	7688 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7682:	f003 fe91 	bl	b3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    7686:	bf00      	nop
    7688:	bf00      	nop
    768a:	b005      	add	sp, #20
    768c:	f85d fb04 	ldr.w	pc, [sp], #4
    7690:	1fff8cec 	.word	0x1fff8cec
    7694:	1fff8d00 	.word	0x1fff8d00

00007698 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    7698:	b500      	push	{lr}
    769a:	b085      	sub	sp, #20
    769c:	9001      	str	r0, [sp, #4]
    769e:	4608      	mov	r0, r1
    76a0:	4611      	mov	r1, r2
    76a2:	461a      	mov	r2, r3
    76a4:	4603      	mov	r3, r0
    76a6:	f8ad 3002 	strh.w	r3, [sp, #2]
    76aa:	460b      	mov	r3, r1
    76ac:	f88d 3001 	strb.w	r3, [sp, #1]
    76b0:	4613      	mov	r3, r2
    76b2:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    76b6:	2300      	movs	r3, #0
    76b8:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    76bc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    76c0:	4a26      	ldr	r2, [pc, #152]	; (775c <Adc_StopSwGroupConversion+0xc4>)
    76c2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    76c6:	b29a      	uxth	r2, r3
    76c8:	9b01      	ldr	r3, [sp, #4]
    76ca:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    76cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    76d0:	4a22      	ldr	r2, [pc, #136]	; (775c <Adc_StopSwGroupConversion+0xc4>)
    76d2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    76d6:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    76da:	2300      	movs	r3, #0
    76dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    76e0:	e02f      	b.n	7742 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    76e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
    76e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    76ea:	491c      	ldr	r1, [pc, #112]	; (775c <Adc_StopSwGroupConversion+0xc4>)
    76ec:	0092      	lsls	r2, r2, #2
    76ee:	4413      	add	r3, r2
    76f0:	005b      	lsls	r3, r3, #1
    76f2:	440b      	add	r3, r1
    76f4:	885b      	ldrh	r3, [r3, #2]
    76f6:	b29b      	uxth	r3, r3
    76f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    76fc:	429a      	cmp	r2, r3
    76fe:	d11b      	bne.n	7738 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    7700:	9b01      	ldr	r3, [sp, #4]
    7702:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7706:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    7708:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    770c:	2b00      	cmp	r3, #0
    770e:	d10b      	bne.n	7728 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7710:	f89d 2000 	ldrb.w	r2, [sp]
    7714:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7718:	f89d 3001 	ldrb.w	r3, [sp, #1]
    771c:	4618      	mov	r0, r3
    771e:	f002 fc4b 	bl	9fb8 <Adc_Ipw_StopCurrentConversion>
    7722:	4603      	mov	r3, r0
    7724:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    7728:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    772c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7730:	4611      	mov	r1, r2
    7732:	4618      	mov	r0, r3
    7734:	f001 fd88 	bl	9248 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7738:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    773c:	3301      	adds	r3, #1
    773e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7742:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7746:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    774a:	429a      	cmp	r2, r3
    774c:	d3c9      	bcc.n	76e2 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    774e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7752:	4618      	mov	r0, r3
    7754:	b005      	add	sp, #20
    7756:	f85d fb04 	ldr.w	pc, [sp], #4
    775a:	bf00      	nop
    775c:	1fff8d00 	.word	0x1fff8d00

00007760 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7760:	b500      	push	{lr}
    7762:	b089      	sub	sp, #36	; 0x24
    7764:	4603      	mov	r3, r0
    7766:	f8ad 3006 	strh.w	r3, [sp, #6]
    776a:	460b      	mov	r3, r1
    776c:	f88d 3005 	strb.w	r3, [sp, #5]
    7770:	4613      	mov	r3, r2
    7772:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7776:	f89d 3004 	ldrb.w	r3, [sp, #4]
    777a:	4a4f      	ldr	r2, [pc, #316]	; (78b8 <Adc_UpdateStatusStopConversion+0x158>)
    777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7780:	68da      	ldr	r2, [r3, #12]
    7782:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7786:	005b      	lsls	r3, r3, #1
    7788:	4413      	add	r3, r2
    778a:	881b      	ldrh	r3, [r3, #0]
    778c:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7790:	2300      	movs	r3, #0
    7792:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7796:	2300      	movs	r3, #0
    7798:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    779c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    77a0:	4a45      	ldr	r2, [pc, #276]	; (78b8 <Adc_UpdateStatusStopConversion+0x158>)
    77a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a6:	685a      	ldr	r2, [r3, #4]
    77a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77ac:	2134      	movs	r1, #52	; 0x34
    77ae:	fb01 f303 	mul.w	r3, r1, r3
    77b2:	4413      	add	r3, r2
    77b4:	689b      	ldr	r3, [r3, #8]
    77b6:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    77b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    77bc:	4a3e      	ldr	r2, [pc, #248]	; (78b8 <Adc_UpdateStatusStopConversion+0x158>)
    77be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c2:	685a      	ldr	r2, [r3, #4]
    77c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77c8:	2134      	movs	r1, #52	; 0x34
    77ca:	fb01 f303 	mul.w	r3, r1, r3
    77ce:	4413      	add	r3, r2
    77d0:	685b      	ldr	r3, [r3, #4]
    77d2:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    77d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    77d8:	4a37      	ldr	r2, [pc, #220]	; (78b8 <Adc_UpdateStatusStopConversion+0x158>)
    77da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77de:	685a      	ldr	r2, [r3, #4]
    77e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77e4:	2134      	movs	r1, #52	; 0x34
    77e6:	fb01 f303 	mul.w	r3, r1, r3
    77ea:	4413      	add	r3, r2
    77ec:	699b      	ldr	r3, [r3, #24]
    77ee:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    77f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77f4:	4931      	ldr	r1, [pc, #196]	; (78bc <Adc_UpdateStatusStopConversion+0x15c>)
    77f6:	4613      	mov	r3, r2
    77f8:	009b      	lsls	r3, r3, #2
    77fa:	4413      	add	r3, r2
    77fc:	009b      	lsls	r3, r3, #2
    77fe:	440b      	add	r3, r1
    7800:	681b      	ldr	r3, [r3, #0]
    7802:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    7804:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7808:	492c      	ldr	r1, [pc, #176]	; (78bc <Adc_UpdateStatusStopConversion+0x15c>)
    780a:	4613      	mov	r3, r2
    780c:	009b      	lsls	r3, r3, #2
    780e:	4413      	add	r3, r2
    7810:	009b      	lsls	r3, r3, #2
    7812:	440b      	add	r3, r1
    7814:	3308      	adds	r3, #8
    7816:	2200      	movs	r2, #0
    7818:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    781a:	9b06      	ldr	r3, [sp, #24]
    781c:	2b00      	cmp	r3, #0
    781e:	d005      	beq.n	782c <Adc_UpdateStatusStopConversion+0xcc>
    7820:	9b05      	ldr	r3, [sp, #20]
    7822:	2b01      	cmp	r3, #1
    7824:	d110      	bne.n	7848 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    7826:	9b04      	ldr	r3, [sp, #16]
    7828:	2b00      	cmp	r3, #0
    782a:	d10d      	bne.n	7848 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    782c:	9b03      	ldr	r3, [sp, #12]
    782e:	2b03      	cmp	r3, #3
    7830:	d10a      	bne.n	7848 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7832:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7836:	4921      	ldr	r1, [pc, #132]	; (78bc <Adc_UpdateStatusStopConversion+0x15c>)
    7838:	4613      	mov	r3, r2
    783a:	009b      	lsls	r3, r3, #2
    783c:	4413      	add	r3, r2
    783e:	009b      	lsls	r3, r3, #2
    7840:	440b      	add	r3, r1
    7842:	2200      	movs	r2, #0
    7844:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    7846:	e032      	b.n	78ae <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    7848:	f89d 3004 	ldrb.w	r3, [sp, #4]
    784c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7850:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7854:	f10d 000a 	add.w	r0, sp, #10
    7858:	f7ff ff1e 	bl	7698 <Adc_StopSwGroupConversion>
    785c:	4603      	mov	r3, r0
    785e:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7862:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7866:	4915      	ldr	r1, [pc, #84]	; (78bc <Adc_UpdateStatusStopConversion+0x15c>)
    7868:	4613      	mov	r3, r2
    786a:	009b      	lsls	r3, r3, #2
    786c:	4413      	add	r3, r2
    786e:	009b      	lsls	r3, r3, #2
    7870:	440b      	add	r3, r1
    7872:	2200      	movs	r2, #0
    7874:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    7876:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    787a:	2b00      	cmp	r3, #0
    787c:	d10f      	bne.n	789e <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    787e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7882:	4a0f      	ldr	r2, [pc, #60]	; (78c0 <Adc_UpdateStatusStopConversion+0x160>)
    7884:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7888:	b29b      	uxth	r3, r3
    788a:	2b00      	cmp	r3, #0
    788c:	d007      	beq.n	789e <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    788e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7892:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7896:	4611      	mov	r1, r2
    7898:	4618      	mov	r0, r3
    789a:	f002 fae3 	bl	9e64 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    789e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    78a2:	2b01      	cmp	r3, #1
    78a4:	d103      	bne.n	78ae <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    78a6:	212b      	movs	r1, #43	; 0x2b
    78a8:	2003      	movs	r0, #3
    78aa:	f7ff fb45 	bl	6f38 <Adc_ReportDetRuntimeError>
}
    78ae:	bf00      	nop
    78b0:	b009      	add	sp, #36	; 0x24
    78b2:	f85d fb04 	ldr.w	pc, [sp], #4
    78b6:	bf00      	nop
    78b8:	1fff8ce8 	.word	0x1fff8ce8
    78bc:	1fff8cec 	.word	0x1fff8cec
    78c0:	1fff8d00 	.word	0x1fff8d00

000078c4 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    78c4:	b500      	push	{lr}
    78c6:	b085      	sub	sp, #20
    78c8:	4603      	mov	r3, r0
    78ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    78ce:	460b      	mov	r3, r1
    78d0:	f88d 3005 	strb.w	r3, [sp, #5]
    78d4:	4613      	mov	r3, r2
    78d6:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    78da:	f89d 3004 	ldrb.w	r3, [sp, #4]
    78de:	4a18      	ldr	r2, [pc, #96]	; (7940 <Adc_UpdateStatusReadGroup+0x7c>)
    78e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e4:	68da      	ldr	r2, [r3, #12]
    78e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78ea:	005b      	lsls	r3, r3, #1
    78ec:	4413      	add	r3, r2
    78ee:	881b      	ldrh	r3, [r3, #0]
    78f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    78f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    78f8:	4a11      	ldr	r2, [pc, #68]	; (7940 <Adc_UpdateStatusReadGroup+0x7c>)
    78fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78fe:	685a      	ldr	r2, [r3, #4]
    7900:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7904:	2134      	movs	r1, #52	; 0x34
    7906:	fb01 f303 	mul.w	r3, r1, r3
    790a:	4413      	add	r3, r2
    790c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    7910:	2b01      	cmp	r3, #1
    7912:	d109      	bne.n	7928 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    7914:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7918:	f89d 1005 	ldrb.w	r1, [sp, #5]
    791c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7920:	4618      	mov	r0, r3
    7922:	f000 f80f 	bl	7944 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    7926:	e007      	b.n	7938 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    7928:	f89d 2004 	ldrb.w	r2, [sp, #4]
    792c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7930:	4611      	mov	r1, r2
    7932:	4618      	mov	r0, r3
    7934:	f000 f8e8 	bl	7b08 <Adc_UpdateStatusReadGroupInt>
}
    7938:	bf00      	nop
    793a:	b005      	add	sp, #20
    793c:	f85d fb04 	ldr.w	pc, [sp], #4
    7940:	1fff8ce8 	.word	0x1fff8ce8

00007944 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    7944:	b500      	push	{lr}
    7946:	b085      	sub	sp, #20
    7948:	4603      	mov	r3, r0
    794a:	f8ad 3006 	strh.w	r3, [sp, #6]
    794e:	460b      	mov	r3, r1
    7950:	f88d 3005 	strb.w	r3, [sp, #5]
    7954:	4613      	mov	r3, r2
    7956:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    795a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    795e:	4a2c      	ldr	r2, [pc, #176]	; (7a10 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7964:	68da      	ldr	r2, [r3, #12]
    7966:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    796a:	005b      	lsls	r3, r3, #1
    796c:	4413      	add	r3, r2
    796e:	881b      	ldrh	r3, [r3, #0]
    7970:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7974:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7978:	4926      	ldr	r1, [pc, #152]	; (7a14 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    797a:	4613      	mov	r3, r2
    797c:	009b      	lsls	r3, r3, #2
    797e:	4413      	add	r3, r2
    7980:	009b      	lsls	r3, r3, #2
    7982:	440b      	add	r3, r1
    7984:	3304      	adds	r3, #4
    7986:	2201      	movs	r2, #1
    7988:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    798a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    798e:	2b00      	cmp	r3, #0
    7990:	d03a      	beq.n	7a08 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    7992:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7996:	4a1e      	ldr	r2, [pc, #120]	; (7a10 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799c:	685a      	ldr	r2, [r3, #4]
    799e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    79a2:	2134      	movs	r1, #52	; 0x34
    79a4:	fb01 f303 	mul.w	r3, r1, r3
    79a8:	4413      	add	r3, r2
    79aa:	689b      	ldr	r3, [r3, #8]
    79ac:	2b01      	cmp	r3, #1
    79ae:	d10a      	bne.n	79c6 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    79b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    79b4:	4917      	ldr	r1, [pc, #92]	; (7a14 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    79b6:	4613      	mov	r3, r2
    79b8:	009b      	lsls	r3, r3, #2
    79ba:	4413      	add	r3, r2
    79bc:	009b      	lsls	r3, r3, #2
    79be:	440b      	add	r3, r1
    79c0:	2201      	movs	r2, #1
    79c2:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    79c4:	e020      	b.n	7a08 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    79c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    79ca:	4a11      	ldr	r2, [pc, #68]	; (7a10 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    79cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d0:	685a      	ldr	r2, [r3, #4]
    79d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    79d6:	2134      	movs	r1, #52	; 0x34
    79d8:	fb01 f303 	mul.w	r3, r1, r3
    79dc:	4413      	add	r3, r2
    79de:	695b      	ldr	r3, [r3, #20]
    79e0:	2b00      	cmp	r3, #0
    79e2:	d111      	bne.n	7a08 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    79e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    79e8:	490a      	ldr	r1, [pc, #40]	; (7a14 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    79ea:	4613      	mov	r3, r2
    79ec:	009b      	lsls	r3, r3, #2
    79ee:	4413      	add	r3, r2
    79f0:	009b      	lsls	r3, r3, #2
    79f2:	440b      	add	r3, r1
    79f4:	2200      	movs	r2, #0
    79f6:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    79f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    79fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a00:	4611      	mov	r1, r2
    7a02:	4618      	mov	r0, r3
    7a04:	f000 f808 	bl	7a18 <Adc_UpdateSwQueueIndexNoInt>
}
    7a08:	bf00      	nop
    7a0a:	b005      	add	sp, #20
    7a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    7a10:	1fff8ce8 	.word	0x1fff8ce8
    7a14:	1fff8cec 	.word	0x1fff8cec

00007a18 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    7a18:	b500      	push	{lr}
    7a1a:	b085      	sub	sp, #20
    7a1c:	4603      	mov	r3, r0
    7a1e:	460a      	mov	r2, r1
    7a20:	f8ad 3006 	strh.w	r3, [sp, #6]
    7a24:	4613      	mov	r3, r2
    7a26:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7a2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a2e:	4a34      	ldr	r2, [pc, #208]	; (7b00 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    7a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a34:	68da      	ldr	r2, [r3, #12]
    7a36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a3a:	005b      	lsls	r3, r3, #1
    7a3c:	4413      	add	r3, r2
    7a3e:	881b      	ldrh	r3, [r3, #0]
    7a40:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    7a44:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a48:	4a2d      	ldr	r2, [pc, #180]	; (7b00 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    7a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a4e:	685a      	ldr	r2, [r3, #4]
    7a50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7a54:	2134      	movs	r1, #52	; 0x34
    7a56:	fb01 f303 	mul.w	r3, r1, r3
    7a5a:	4413      	add	r3, r2
    7a5c:	789b      	ldrb	r3, [r3, #2]
    7a5e:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7a62:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a66:	4a27      	ldr	r2, [pc, #156]	; (7b04 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7a68:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7a6c:	b29b      	uxth	r3, r3
    7a6e:	2b00      	cmp	r3, #0
    7a70:	d041      	beq.n	7af6 <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7a72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a76:	4a23      	ldr	r2, [pc, #140]	; (7b04 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7a78:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7a7c:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7a80:	2300      	movs	r3, #0
    7a82:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a86:	e01c      	b.n	7ac2 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    7a88:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7a8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7a90:	491c      	ldr	r1, [pc, #112]	; (7b04 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7a92:	0092      	lsls	r2, r2, #2
    7a94:	4413      	add	r3, r2
    7a96:	005b      	lsls	r3, r3, #1
    7a98:	440b      	add	r3, r1
    7a9a:	885b      	ldrh	r3, [r3, #2]
    7a9c:	b29b      	uxth	r3, r3
    7a9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7aa2:	429a      	cmp	r2, r3
    7aa4:	d108      	bne.n	7ab8 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    7aa6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7aaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7aae:	4611      	mov	r1, r2
    7ab0:	4618      	mov	r0, r3
    7ab2:	f001 fbc9 	bl	9248 <Adc_Ipw_RemoveFromQueue>
                    break;
    7ab6:	e00a      	b.n	7ace <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7ab8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7abc:	3301      	adds	r3, #1
    7abe:	f8ad 300e 	strh.w	r3, [sp, #14]
    7ac2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ac6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7aca:	429a      	cmp	r2, r3
    7acc:	d3dc      	bcc.n	7a88 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    7ace:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d10f      	bne.n	7af6 <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    7ad6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ada:	4a0a      	ldr	r2, [pc, #40]	; (7b04 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7adc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7ae0:	b29b      	uxth	r3, r3
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d007      	beq.n	7af6 <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    7ae6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7aea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7aee:	4611      	mov	r1, r2
    7af0:	4618      	mov	r0, r3
    7af2:	f002 f9b7 	bl	9e64 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    7af6:	bf00      	nop
    7af8:	b005      	add	sp, #20
    7afa:	f85d fb04 	ldr.w	pc, [sp], #4
    7afe:	bf00      	nop
    7b00:	1fff8ce8 	.word	0x1fff8ce8
    7b04:	1fff8d00 	.word	0x1fff8d00

00007b08 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    7b08:	b084      	sub	sp, #16
    7b0a:	4603      	mov	r3, r0
    7b0c:	460a      	mov	r2, r1
    7b0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7b12:	4613      	mov	r3, r2
    7b14:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b18:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b1c:	4a47      	ldr	r2, [pc, #284]	; (7c3c <Adc_UpdateStatusReadGroupInt+0x134>)
    7b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b22:	68da      	ldr	r2, [r3, #12]
    7b24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b28:	005b      	lsls	r3, r3, #1
    7b2a:	4413      	add	r3, r2
    7b2c:	881b      	ldrh	r3, [r3, #0]
    7b2e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7b32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b36:	4942      	ldr	r1, [pc, #264]	; (7c40 <Adc_UpdateStatusReadGroupInt+0x138>)
    7b38:	4613      	mov	r3, r2
    7b3a:	009b      	lsls	r3, r3, #2
    7b3c:	4413      	add	r3, r2
    7b3e:	009b      	lsls	r3, r3, #2
    7b40:	440b      	add	r3, r1
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	2b02      	cmp	r3, #2
    7b46:	d10a      	bne.n	7b5e <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7b48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b4c:	493c      	ldr	r1, [pc, #240]	; (7c40 <Adc_UpdateStatusReadGroupInt+0x138>)
    7b4e:	4613      	mov	r3, r2
    7b50:	009b      	lsls	r3, r3, #2
    7b52:	4413      	add	r3, r2
    7b54:	009b      	lsls	r3, r3, #2
    7b56:	440b      	add	r3, r1
    7b58:	2201      	movs	r2, #1
    7b5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    7b5c:	e06a      	b.n	7c34 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7b5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b62:	4937      	ldr	r1, [pc, #220]	; (7c40 <Adc_UpdateStatusReadGroupInt+0x138>)
    7b64:	4613      	mov	r3, r2
    7b66:	009b      	lsls	r3, r3, #2
    7b68:	4413      	add	r3, r2
    7b6a:	009b      	lsls	r3, r3, #2
    7b6c:	440b      	add	r3, r1
    7b6e:	681b      	ldr	r3, [r3, #0]
    7b70:	2b03      	cmp	r3, #3
    7b72:	d15f      	bne.n	7c34 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7b74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b78:	4a30      	ldr	r2, [pc, #192]	; (7c3c <Adc_UpdateStatusReadGroupInt+0x134>)
    7b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7e:	685a      	ldr	r2, [r3, #4]
    7b80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b84:	2134      	movs	r1, #52	; 0x34
    7b86:	fb01 f303 	mul.w	r3, r1, r3
    7b8a:	4413      	add	r3, r2
    7b8c:	695b      	ldr	r3, [r3, #20]
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d150      	bne.n	7c34 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7b92:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b96:	4a29      	ldr	r2, [pc, #164]	; (7c3c <Adc_UpdateStatusReadGroupInt+0x134>)
    7b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9c:	685a      	ldr	r2, [r3, #4]
    7b9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7ba2:	2134      	movs	r1, #52	; 0x34
    7ba4:	fb01 f303 	mul.w	r3, r1, r3
    7ba8:	4413      	add	r3, r2
    7baa:	689b      	ldr	r3, [r3, #8]
    7bac:	2b00      	cmp	r3, #0
    7bae:	d02c      	beq.n	7c0a <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7bb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bb4:	4a21      	ldr	r2, [pc, #132]	; (7c3c <Adc_UpdateStatusReadGroupInt+0x134>)
    7bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bba:	685a      	ldr	r2, [r3, #4]
    7bbc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bc0:	2134      	movs	r1, #52	; 0x34
    7bc2:	fb01 f303 	mul.w	r3, r1, r3
    7bc6:	4413      	add	r3, r2
    7bc8:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7bca:	2b01      	cmp	r3, #1
    7bcc:	d128      	bne.n	7c20 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7bce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bd2:	4a1a      	ldr	r2, [pc, #104]	; (7c3c <Adc_UpdateStatusReadGroupInt+0x134>)
    7bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd8:	685a      	ldr	r2, [r3, #4]
    7bda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bde:	2134      	movs	r1, #52	; 0x34
    7be0:	fb01 f303 	mul.w	r3, r1, r3
    7be4:	4413      	add	r3, r2
    7be6:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7be8:	2b01      	cmp	r3, #1
    7bea:	d119      	bne.n	7c20 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7bec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bf0:	4a12      	ldr	r2, [pc, #72]	; (7c3c <Adc_UpdateStatusReadGroupInt+0x134>)
    7bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bf6:	685a      	ldr	r2, [r3, #4]
    7bf8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bfc:	2134      	movs	r1, #52	; 0x34
    7bfe:	fb01 f303 	mul.w	r3, r1, r3
    7c02:	4413      	add	r3, r2
    7c04:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7c06:	2b00      	cmp	r3, #0
    7c08:	d10a      	bne.n	7c20 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7c0a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c0e:	490c      	ldr	r1, [pc, #48]	; (7c40 <Adc_UpdateStatusReadGroupInt+0x138>)
    7c10:	4613      	mov	r3, r2
    7c12:	009b      	lsls	r3, r3, #2
    7c14:	4413      	add	r3, r2
    7c16:	009b      	lsls	r3, r3, #2
    7c18:	440b      	add	r3, r1
    7c1a:	2200      	movs	r2, #0
    7c1c:	601a      	str	r2, [r3, #0]
}
    7c1e:	e009      	b.n	7c34 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7c20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c24:	4906      	ldr	r1, [pc, #24]	; (7c40 <Adc_UpdateStatusReadGroupInt+0x138>)
    7c26:	4613      	mov	r3, r2
    7c28:	009b      	lsls	r3, r3, #2
    7c2a:	4413      	add	r3, r2
    7c2c:	009b      	lsls	r3, r3, #2
    7c2e:	440b      	add	r3, r1
    7c30:	2201      	movs	r2, #1
    7c32:	601a      	str	r2, [r3, #0]
}
    7c34:	bf00      	nop
    7c36:	b004      	add	sp, #16
    7c38:	4770      	bx	lr
    7c3a:	bf00      	nop
    7c3c:	1fff8ce8 	.word	0x1fff8ce8
    7c40:	1fff8cec 	.word	0x1fff8cec

00007c44 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    7c44:	b084      	sub	sp, #16
    7c46:	4603      	mov	r3, r0
    7c48:	460a      	mov	r2, r1
    7c4a:	f8ad 3006 	strh.w	r3, [sp, #6]
    7c4e:	4613      	mov	r3, r2
    7c50:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7c54:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7c58:	4a46      	ldr	r2, [pc, #280]	; (7d74 <Adc_UpdateStatusAfterGetStream+0x130>)
    7c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c5e:	68da      	ldr	r2, [r3, #12]
    7c60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c64:	005b      	lsls	r3, r3, #1
    7c66:	4413      	add	r3, r2
    7c68:	881b      	ldrh	r3, [r3, #0]
    7c6a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7c6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c72:	4941      	ldr	r1, [pc, #260]	; (7d78 <Adc_UpdateStatusAfterGetStream+0x134>)
    7c74:	4613      	mov	r3, r2
    7c76:	009b      	lsls	r3, r3, #2
    7c78:	4413      	add	r3, r2
    7c7a:	009b      	lsls	r3, r3, #2
    7c7c:	440b      	add	r3, r1
    7c7e:	681b      	ldr	r3, [r3, #0]
    7c80:	2b02      	cmp	r3, #2
    7c82:	d109      	bne.n	7c98 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7c84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c88:	493b      	ldr	r1, [pc, #236]	; (7d78 <Adc_UpdateStatusAfterGetStream+0x134>)
    7c8a:	4613      	mov	r3, r2
    7c8c:	009b      	lsls	r3, r3, #2
    7c8e:	4413      	add	r3, r2
    7c90:	009b      	lsls	r3, r3, #2
    7c92:	440b      	add	r3, r1
    7c94:	2201      	movs	r2, #1
    7c96:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7c98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c9c:	4936      	ldr	r1, [pc, #216]	; (7d78 <Adc_UpdateStatusAfterGetStream+0x134>)
    7c9e:	4613      	mov	r3, r2
    7ca0:	009b      	lsls	r3, r3, #2
    7ca2:	4413      	add	r3, r2
    7ca4:	009b      	lsls	r3, r3, #2
    7ca6:	440b      	add	r3, r1
    7ca8:	681b      	ldr	r3, [r3, #0]
    7caa:	2b03      	cmp	r3, #3
    7cac:	d15f      	bne.n	7d6e <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7cae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7cb2:	4a30      	ldr	r2, [pc, #192]	; (7d74 <Adc_UpdateStatusAfterGetStream+0x130>)
    7cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cb8:	685a      	ldr	r2, [r3, #4]
    7cba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7cbe:	2134      	movs	r1, #52	; 0x34
    7cc0:	fb01 f303 	mul.w	r3, r1, r3
    7cc4:	4413      	add	r3, r2
    7cc6:	695b      	ldr	r3, [r3, #20]
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d150      	bne.n	7d6e <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7ccc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7cd0:	4a28      	ldr	r2, [pc, #160]	; (7d74 <Adc_UpdateStatusAfterGetStream+0x130>)
    7cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cd6:	685a      	ldr	r2, [r3, #4]
    7cd8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7cdc:	2134      	movs	r1, #52	; 0x34
    7cde:	fb01 f303 	mul.w	r3, r1, r3
    7ce2:	4413      	add	r3, r2
    7ce4:	689b      	ldr	r3, [r3, #8]
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d02c      	beq.n	7d44 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7cea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7cee:	4a21      	ldr	r2, [pc, #132]	; (7d74 <Adc_UpdateStatusAfterGetStream+0x130>)
    7cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cf4:	685a      	ldr	r2, [r3, #4]
    7cf6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7cfa:	2134      	movs	r1, #52	; 0x34
    7cfc:	fb01 f303 	mul.w	r3, r1, r3
    7d00:	4413      	add	r3, r2
    7d02:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7d04:	2b01      	cmp	r3, #1
    7d06:	d128      	bne.n	7d5a <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7d08:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d0c:	4a19      	ldr	r2, [pc, #100]	; (7d74 <Adc_UpdateStatusAfterGetStream+0x130>)
    7d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d12:	685a      	ldr	r2, [r3, #4]
    7d14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d18:	2134      	movs	r1, #52	; 0x34
    7d1a:	fb01 f303 	mul.w	r3, r1, r3
    7d1e:	4413      	add	r3, r2
    7d20:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7d22:	2b01      	cmp	r3, #1
    7d24:	d119      	bne.n	7d5a <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7d26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d2a:	4a12      	ldr	r2, [pc, #72]	; (7d74 <Adc_UpdateStatusAfterGetStream+0x130>)
    7d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d30:	685a      	ldr	r2, [r3, #4]
    7d32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d36:	2134      	movs	r1, #52	; 0x34
    7d38:	fb01 f303 	mul.w	r3, r1, r3
    7d3c:	4413      	add	r3, r2
    7d3e:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7d40:	2b00      	cmp	r3, #0
    7d42:	d10a      	bne.n	7d5a <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7d44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d48:	490b      	ldr	r1, [pc, #44]	; (7d78 <Adc_UpdateStatusAfterGetStream+0x134>)
    7d4a:	4613      	mov	r3, r2
    7d4c:	009b      	lsls	r3, r3, #2
    7d4e:	4413      	add	r3, r2
    7d50:	009b      	lsls	r3, r3, #2
    7d52:	440b      	add	r3, r1
    7d54:	2200      	movs	r2, #0
    7d56:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    7d58:	e009      	b.n	7d6e <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7d5a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7d5e:	4906      	ldr	r1, [pc, #24]	; (7d78 <Adc_UpdateStatusAfterGetStream+0x134>)
    7d60:	4613      	mov	r3, r2
    7d62:	009b      	lsls	r3, r3, #2
    7d64:	4413      	add	r3, r2
    7d66:	009b      	lsls	r3, r3, #2
    7d68:	440b      	add	r3, r1
    7d6a:	2201      	movs	r2, #1
    7d6c:	601a      	str	r2, [r3, #0]
}
    7d6e:	bf00      	nop
    7d70:	b004      	add	sp, #16
    7d72:	4770      	bx	lr
    7d74:	1fff8ce8 	.word	0x1fff8ce8
    7d78:	1fff8cec 	.word	0x1fff8cec

00007d7c <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    7d7c:	b500      	push	{lr}
    7d7e:	b085      	sub	sp, #20
    7d80:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7d82:	f002 fa5b 	bl	a23c <Adc_GetCoreID>
    7d86:	4603      	mov	r3, r0
    7d88:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7d8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7d90:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7d94:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7d98:	b2db      	uxtb	r3, r3
    7d9a:	4619      	mov	r1, r3
    7d9c:	9801      	ldr	r0, [sp, #4]
    7d9e:	f7ff fbb3 	bl	7508 <Adc_CheckCurrentCoreId>
    7da2:	4603      	mov	r3, r0
    7da4:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    7da8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7dac:	2b00      	cmp	r3, #0
    7dae:	d12c      	bne.n	7e0a <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    7db0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7db4:	b2db      	uxtb	r3, r3
    7db6:	4619      	mov	r1, r3
    7db8:	4a16      	ldr	r2, [pc, #88]	; (7e14 <Adc_Init+0x98>)
    7dba:	9b01      	ldr	r3, [sp, #4]
    7dbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7dc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7dc4:	b2db      	uxtb	r3, r3
    7dc6:	4618      	mov	r0, r3
    7dc8:	f7ff fb4e 	bl	7468 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    7dcc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7dd0:	b2db      	uxtb	r3, r3
    7dd2:	4618      	mov	r0, r3
    7dd4:	f7ff fade 	bl	7394 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    7dd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7ddc:	b2db      	uxtb	r3, r3
    7dde:	461a      	mov	r2, r3
    7de0:	4b0c      	ldr	r3, [pc, #48]	; (7e14 <Adc_Init+0x98>)
    7de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7de6:	681b      	ldr	r3, [r3, #0]
    7de8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7dec:	4611      	mov	r1, r2
    7dee:	4618      	mov	r0, r3
    7df0:	f001 ff78 	bl	9ce4 <Adc_Ipw_Init>
    7df4:	4603      	mov	r3, r0
    7df6:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7dfa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7dfe:	2b01      	cmp	r3, #1
    7e00:	d103      	bne.n	7e0a <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    7e02:	212b      	movs	r1, #43	; 0x2b
    7e04:	2000      	movs	r0, #0
    7e06:	f7ff f897 	bl	6f38 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    7e0a:	bf00      	nop
    7e0c:	b005      	add	sp, #20
    7e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    7e12:	bf00      	nop
    7e14:	1fff8ce8 	.word	0x1fff8ce8

00007e18 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    7e18:	b500      	push	{lr}
    7e1a:	b085      	sub	sp, #20
    7e1c:	4603      	mov	r3, r0
    7e1e:	9100      	str	r1, [sp, #0]
    7e20:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    7e24:	2301      	movs	r3, #1
    7e26:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    7e2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e2e:	4618      	mov	r0, r3
    7e30:	f7ff f9a2 	bl	7178 <Adc_ValidateSetupBufferNotBusy>
    7e34:	4603      	mov	r3, r0
    7e36:	2b00      	cmp	r3, #0
    7e38:	d10d      	bne.n	7e56 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    7e3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7e3e:	4909      	ldr	r1, [pc, #36]	; (7e64 <Adc_SetupResultBuffer+0x4c>)
    7e40:	4613      	mov	r3, r2
    7e42:	009b      	lsls	r3, r3, #2
    7e44:	4413      	add	r3, r2
    7e46:	009b      	lsls	r3, r3, #2
    7e48:	440b      	add	r3, r1
    7e4a:	330c      	adds	r3, #12
    7e4c:	9a00      	ldr	r2, [sp, #0]
    7e4e:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7e50:	2300      	movs	r3, #0
    7e52:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    7e56:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7e5a:	4618      	mov	r0, r3
    7e5c:	b005      	add	sp, #20
    7e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    7e62:	bf00      	nop
    7e64:	1fff8cec 	.word	0x1fff8cec

00007e68 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    7e68:	b500      	push	{lr}
    7e6a:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7e6c:	2300      	movs	r3, #0
    7e6e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7e72:	f002 f9e3 	bl	a23c <Adc_GetCoreID>
    7e76:	4603      	mov	r3, r0
    7e78:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7e7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7e80:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7e84:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7e88:	b2db      	uxtb	r3, r3
    7e8a:	461a      	mov	r2, r3
    7e8c:	4b2d      	ldr	r3, [pc, #180]	; (7f44 <Adc_DeInit+0xdc>)
    7e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e92:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7e96:	4611      	mov	r1, r2
    7e98:	4618      	mov	r0, r3
    7e9a:	f7ff fb35 	bl	7508 <Adc_CheckCurrentCoreId>
    7e9e:	4603      	mov	r3, r0
    7ea0:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7ea4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d147      	bne.n	7f3c <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    7eac:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7eb0:	b2db      	uxtb	r3, r3
    7eb2:	4618      	mov	r0, r3
    7eb4:	f7ff f912 	bl	70dc <Adc_ValidateDeInitNotBusy>
    7eb8:	4603      	mov	r3, r0
    7eba:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    7ebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d13a      	bne.n	7f3c <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    7ec6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7eca:	b2db      	uxtb	r3, r3
    7ecc:	4618      	mov	r0, r3
    7ece:	f001 ff4e 	bl	9d6e <Adc_Ipw_DeInit>
    7ed2:	4603      	mov	r3, r0
    7ed4:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    7ed8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7edc:	2b01      	cmp	r3, #1
    7ede:	d103      	bne.n	7ee8 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7ee0:	212b      	movs	r1, #43	; 0x2b
    7ee2:	2001      	movs	r0, #1
    7ee4:	f7ff f828 	bl	6f38 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7ee8:	2300      	movs	r3, #0
    7eea:	f88d 3007 	strb.w	r3, [sp, #7]
    7eee:	e019      	b.n	7f24 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7ef0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7ef4:	b2db      	uxtb	r3, r3
    7ef6:	461a      	mov	r2, r3
    7ef8:	4b12      	ldr	r3, [pc, #72]	; (7f44 <Adc_DeInit+0xdc>)
    7efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7efe:	681a      	ldr	r2, [r3, #0]
    7f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f04:	4413      	add	r3, r2
    7f06:	7f9b      	ldrb	r3, [r3, #30]
    7f08:	2b01      	cmp	r3, #1
    7f0a:	d106      	bne.n	7f1a <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f10:	4a0d      	ldr	r2, [pc, #52]	; (7f48 <Adc_DeInit+0xe0>)
    7f12:	00db      	lsls	r3, r3, #3
    7f14:	4413      	add	r3, r2
    7f16:	2200      	movs	r2, #0
    7f18:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f1e:	3301      	adds	r3, #1
    7f20:	f88d 3007 	strb.w	r3, [sp, #7]
    7f24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f28:	2b01      	cmp	r3, #1
    7f2a:	d9e1      	bls.n	7ef0 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    7f2c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7f30:	b2db      	uxtb	r3, r3
    7f32:	4619      	mov	r1, r3
    7f34:	4b03      	ldr	r3, [pc, #12]	; (7f44 <Adc_DeInit+0xdc>)
    7f36:	2200      	movs	r2, #0
    7f38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    7f3c:	bf00      	nop
    7f3e:	b003      	add	sp, #12
    7f40:	f85d fb04 	ldr.w	pc, [sp], #4
    7f44:	1fff8ce8 	.word	0x1fff8ce8
    7f48:	1fff8d00 	.word	0x1fff8d00

00007f4c <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    7f4c:	b500      	push	{lr}
    7f4e:	b085      	sub	sp, #20
    7f50:	4603      	mov	r3, r0
    7f52:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7f56:	2300      	movs	r3, #0
    7f58:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7f5c:	2300      	movs	r3, #0
    7f5e:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7f62:	f002 f96b 	bl	a23c <Adc_GetCoreID>
    7f66:	4603      	mov	r3, r0
    7f68:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7f6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7f70:	b2db      	uxtb	r3, r3
    7f72:	461a      	mov	r2, r3
    7f74:	4b1a      	ldr	r3, [pc, #104]	; (7fe0 <Adc_StartGroupConversion+0x94>)
    7f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f7a:	68da      	ldr	r2, [r3, #12]
    7f7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7f80:	005b      	lsls	r3, r3, #1
    7f82:	4413      	add	r3, r2
    7f84:	881b      	ldrh	r3, [r3, #0]
    7f86:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    7f8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7f8e:	b2da      	uxtb	r2, r3
    7f90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7f94:	4611      	mov	r1, r2
    7f96:	4618      	mov	r0, r3
    7f98:	f7ff f912 	bl	71c0 <Adc_ValidateStateStartGroupConvNotBusy>
    7f9c:	4603      	mov	r3, r0
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d11a      	bne.n	7fd8 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7fa2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7fa6:	b2db      	uxtb	r3, r3
    7fa8:	461a      	mov	r2, r3
    7faa:	4b0d      	ldr	r3, [pc, #52]	; (7fe0 <Adc_StartGroupConversion+0x94>)
    7fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fb0:	685a      	ldr	r2, [r3, #4]
    7fb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fb6:	2134      	movs	r1, #52	; 0x34
    7fb8:	fb01 f303 	mul.w	r3, r1, r3
    7fbc:	4413      	add	r3, r2
    7fbe:	789b      	ldrb	r3, [r3, #2]
    7fc0:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7fc4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7fc8:	b2da      	uxtb	r2, r3
    7fca:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7fce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7fd2:	4618      	mov	r0, r3
    7fd4:	f7ff facb 	bl	756e <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7fd8:	bf00      	nop
    7fda:	b005      	add	sp, #20
    7fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    7fe0:	1fff8ce8 	.word	0x1fff8ce8

00007fe4 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7fe4:	b500      	push	{lr}
    7fe6:	b085      	sub	sp, #20
    7fe8:	4603      	mov	r3, r0
    7fea:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7fee:	2300      	movs	r3, #0
    7ff0:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7ff4:	2300      	movs	r3, #0
    7ff6:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    7ffa:	f002 f91f 	bl	a23c <Adc_GetCoreID>
    7ffe:	4603      	mov	r3, r0
    8000:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    8004:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8008:	b2da      	uxtb	r2, r3
    800a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    800e:	4619      	mov	r1, r3
    8010:	2003      	movs	r0, #3
    8012:	f7ff f94d 	bl	72b0 <Adc_ValidateStateNotIdle>
    8016:	4603      	mov	r3, r0
    8018:	2b00      	cmp	r3, #0
    801a:	d129      	bne.n	8070 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    801c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8020:	b2db      	uxtb	r3, r3
    8022:	461a      	mov	r2, r3
    8024:	4b14      	ldr	r3, [pc, #80]	; (8078 <Adc_StopGroupConversion+0x94>)
    8026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    802a:	68da      	ldr	r2, [r3, #12]
    802c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8030:	005b      	lsls	r3, r3, #1
    8032:	4413      	add	r3, r2
    8034:	881b      	ldrh	r3, [r3, #0]
    8036:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    803a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    803e:	b2db      	uxtb	r3, r3
    8040:	461a      	mov	r2, r3
    8042:	4b0d      	ldr	r3, [pc, #52]	; (8078 <Adc_StopGroupConversion+0x94>)
    8044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8048:	685a      	ldr	r2, [r3, #4]
    804a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    804e:	2134      	movs	r1, #52	; 0x34
    8050:	fb01 f303 	mul.w	r3, r1, r3
    8054:	4413      	add	r3, r2
    8056:	789b      	ldrb	r3, [r3, #2]
    8058:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    805c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8060:	b2da      	uxtb	r2, r3
    8062:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8066:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    806a:	4618      	mov	r0, r3
    806c:	f7ff fb78 	bl	7760 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    8070:	bf00      	nop
    8072:	b005      	add	sp, #20
    8074:	f85d fb04 	ldr.w	pc, [sp], #4
    8078:	1fff8ce8 	.word	0x1fff8ce8

0000807c <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    807c:	b500      	push	{lr}
    807e:	b085      	sub	sp, #20
    8080:	4603      	mov	r3, r0
    8082:	9100      	str	r1, [sp, #0]
    8084:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    8088:	2301      	movs	r3, #1
    808a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    808e:	2301      	movs	r3, #1
    8090:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    8094:	f002 f8d2 	bl	a23c <Adc_GetCoreID>
    8098:	4603      	mov	r3, r0
    809a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    809e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    80a2:	b2da      	uxtb	r2, r3
    80a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80a8:	4619      	mov	r1, r3
    80aa:	2004      	movs	r0, #4
    80ac:	f7ff f900 	bl	72b0 <Adc_ValidateStateNotIdle>
    80b0:	4603      	mov	r3, r0
    80b2:	2b00      	cmp	r3, #0
    80b4:	d121      	bne.n	80fa <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    80b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    80ba:	b2db      	uxtb	r3, r3
    80bc:	f10d 020d 	add.w	r2, sp, #13
    80c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    80c4:	9900      	ldr	r1, [sp, #0]
    80c6:	f002 f812 	bl	a0ee <Adc_Ipw_ReadGroup>
    80ca:	4603      	mov	r3, r0
    80cc:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    80d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    80d4:	2b00      	cmp	r3, #0
    80d6:	d006      	beq.n	80e6 <Adc_ReadGroup+0x6a>
    80d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    80dc:	f083 0301 	eor.w	r3, r3, #1
    80e0:	b2db      	uxtb	r3, r3
    80e2:	2b00      	cmp	r3, #0
    80e4:	d009      	beq.n	80fa <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    80e6:	f89d 100d 	ldrb.w	r1, [sp, #13]
    80ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    80ee:	b2da      	uxtb	r2, r3
    80f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80f4:	4618      	mov	r0, r3
    80f6:	f7ff fbe5 	bl	78c4 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    80fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    80fe:	4618      	mov	r0, r3
    8100:	b005      	add	sp, #20
    8102:	f85d fb04 	ldr.w	pc, [sp], #4

00008106 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    8106:	b084      	sub	sp, #16
    8108:	4603      	mov	r3, r0
    810a:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    810e:	2300      	movs	r3, #0
    8110:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    8112:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8116:	4906      	ldr	r1, [pc, #24]	; (8130 <Adc_GetGroupStatus+0x2a>)
    8118:	4613      	mov	r3, r2
    811a:	009b      	lsls	r3, r3, #2
    811c:	4413      	add	r3, r2
    811e:	009b      	lsls	r3, r3, #2
    8120:	440b      	add	r3, r1
    8122:	681b      	ldr	r3, [r3, #0]
    8124:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    8126:	9b03      	ldr	r3, [sp, #12]
}
    8128:	4618      	mov	r0, r3
    812a:	b004      	add	sp, #16
    812c:	4770      	bx	lr
    812e:	bf00      	nop
    8130:	1fff8cec 	.word	0x1fff8cec

00008134 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    8134:	b500      	push	{lr}
    8136:	b085      	sub	sp, #20
    8138:	4603      	mov	r3, r0
    813a:	9100      	str	r1, [sp, #0]
    813c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    8140:	f002 f87c 	bl	a23c <Adc_GetCoreID>
    8144:	4603      	mov	r3, r0
    8146:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    814a:	2300      	movs	r3, #0
    814c:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    8150:	2300      	movs	r3, #0
    8152:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8156:	2300      	movs	r3, #0
    8158:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    815c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8160:	b2da      	uxtb	r2, r3
    8162:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8166:	4619      	mov	r1, r3
    8168:	200b      	movs	r0, #11
    816a:	f7ff f8a1 	bl	72b0 <Adc_ValidateStateNotIdle>
    816e:	4603      	mov	r3, r0
    8170:	2b00      	cmp	r3, #0
    8172:	f040 808e 	bne.w	8292 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    8176:	9b00      	ldr	r3, [sp, #0]
    8178:	2200      	movs	r2, #0
    817a:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    817c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8180:	4948      	ldr	r1, [pc, #288]	; (82a4 <Adc_GetStreamLastPointer+0x170>)
    8182:	4613      	mov	r3, r2
    8184:	009b      	lsls	r3, r3, #2
    8186:	4413      	add	r3, r2
    8188:	009b      	lsls	r3, r3, #2
    818a:	440b      	add	r3, r1
    818c:	681b      	ldr	r3, [r3, #0]
    818e:	2b00      	cmp	r3, #0
    8190:	f000 8082 	beq.w	8298 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    8194:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8198:	4942      	ldr	r1, [pc, #264]	; (82a4 <Adc_GetStreamLastPointer+0x170>)
    819a:	4613      	mov	r3, r2
    819c:	009b      	lsls	r3, r3, #2
    819e:	4413      	add	r3, r2
    81a0:	009b      	lsls	r3, r3, #2
    81a2:	440b      	add	r3, r1
    81a4:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    81a6:	2b01      	cmp	r3, #1
    81a8:	d076      	beq.n	8298 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    81aa:	f89d 3009 	ldrb.w	r3, [sp, #9]
    81ae:	b2db      	uxtb	r3, r3
    81b0:	461a      	mov	r2, r3
    81b2:	4b3d      	ldr	r3, [pc, #244]	; (82a8 <Adc_GetStreamLastPointer+0x174>)
    81b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81b8:	68da      	ldr	r2, [r3, #12]
    81ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    81be:	005b      	lsls	r3, r3, #1
    81c0:	4413      	add	r3, r2
    81c2:	881b      	ldrh	r3, [r3, #0]
    81c4:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    81c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81cc:	4935      	ldr	r1, [pc, #212]	; (82a4 <Adc_GetStreamLastPointer+0x170>)
    81ce:	4613      	mov	r3, r2
    81d0:	009b      	lsls	r3, r3, #2
    81d2:	4413      	add	r3, r2
    81d4:	009b      	lsls	r3, r3, #2
    81d6:	440b      	add	r3, r1
    81d8:	3308      	adds	r3, #8
    81da:	881b      	ldrh	r3, [r3, #0]
    81dc:	b29b      	uxth	r3, r3
    81de:	2b00      	cmp	r3, #0
    81e0:	d123      	bne.n	822a <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    81e2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    81e6:	b2db      	uxtb	r3, r3
    81e8:	461a      	mov	r2, r3
    81ea:	4b2f      	ldr	r3, [pc, #188]	; (82a8 <Adc_GetStreamLastPointer+0x174>)
    81ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81f0:	685a      	ldr	r2, [r3, #4]
    81f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81f6:	2134      	movs	r1, #52	; 0x34
    81f8:	fb01 f303 	mul.w	r3, r1, r3
    81fc:	4413      	add	r3, r2
    81fe:	8b9b      	ldrh	r3, [r3, #28]
    8200:	3b01      	subs	r3, #1
    8202:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8206:	f89d 3009 	ldrb.w	r3, [sp, #9]
    820a:	b2db      	uxtb	r3, r3
    820c:	461a      	mov	r2, r3
    820e:	4b26      	ldr	r3, [pc, #152]	; (82a8 <Adc_GetStreamLastPointer+0x174>)
    8210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8214:	685a      	ldr	r2, [r3, #4]
    8216:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    821a:	2134      	movs	r1, #52	; 0x34
    821c:	fb01 f303 	mul.w	r3, r1, r3
    8220:	4413      	add	r3, r2
    8222:	8b9b      	ldrh	r3, [r3, #28]
    8224:	f8ad 300e 	strh.w	r3, [sp, #14]
    8228:	e019      	b.n	825e <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    822a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    822e:	491d      	ldr	r1, [pc, #116]	; (82a4 <Adc_GetStreamLastPointer+0x170>)
    8230:	4613      	mov	r3, r2
    8232:	009b      	lsls	r3, r3, #2
    8234:	4413      	add	r3, r2
    8236:	009b      	lsls	r3, r3, #2
    8238:	440b      	add	r3, r1
    823a:	3308      	adds	r3, #8
    823c:	881b      	ldrh	r3, [r3, #0]
    823e:	b29b      	uxth	r3, r3
    8240:	3b01      	subs	r3, #1
    8242:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    8246:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    824a:	4916      	ldr	r1, [pc, #88]	; (82a4 <Adc_GetStreamLastPointer+0x170>)
    824c:	4613      	mov	r3, r2
    824e:	009b      	lsls	r3, r3, #2
    8250:	4413      	add	r3, r2
    8252:	009b      	lsls	r3, r3, #2
    8254:	440b      	add	r3, r1
    8256:	3308      	adds	r3, #8
    8258:	881b      	ldrh	r3, [r3, #0]
    825a:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    825e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8262:	4910      	ldr	r1, [pc, #64]	; (82a4 <Adc_GetStreamLastPointer+0x170>)
    8264:	4613      	mov	r3, r2
    8266:	009b      	lsls	r3, r3, #2
    8268:	4413      	add	r3, r2
    826a:	009b      	lsls	r3, r3, #2
    826c:	440b      	add	r3, r1
    826e:	330c      	adds	r3, #12
    8270:	681a      	ldr	r2, [r3, #0]
    8272:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8276:	005b      	lsls	r3, r3, #1
    8278:	441a      	add	r2, r3
    827a:	9b00      	ldr	r3, [sp, #0]
    827c:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    827e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8282:	b2da      	uxtb	r2, r3
    8284:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8288:	4611      	mov	r1, r2
    828a:	4618      	mov	r0, r3
    828c:	f7ff fcda 	bl	7c44 <Adc_UpdateStatusAfterGetStream>
    8290:	e002      	b.n	8298 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    8292:	9b00      	ldr	r3, [sp, #0]
    8294:	2200      	movs	r2, #0
    8296:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    8298:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    829c:	4618      	mov	r0, r3
    829e:	b005      	add	sp, #20
    82a0:	f85d fb04 	ldr.w	pc, [sp], #4
    82a4:	1fff8cec 	.word	0x1fff8cec
    82a8:	1fff8ce8 	.word	0x1fff8ce8

000082ac <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    82ac:	b082      	sub	sp, #8
    82ae:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    82b0:	9b01      	ldr	r3, [sp, #4]
    82b2:	222b      	movs	r2, #43	; 0x2b
    82b4:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    82b6:	9b01      	ldr	r3, [sp, #4]
    82b8:	227b      	movs	r2, #123	; 0x7b
    82ba:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    82bc:	9b01      	ldr	r3, [sp, #4]
    82be:	2202      	movs	r2, #2
    82c0:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    82c2:	9b01      	ldr	r3, [sp, #4]
    82c4:	2200      	movs	r2, #0
    82c6:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    82c8:	9b01      	ldr	r3, [sp, #4]
    82ca:	2200      	movs	r2, #0
    82cc:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    82ce:	bf00      	nop
    82d0:	b002      	add	sp, #8
    82d2:	4770      	bx	lr

000082d4 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    82d4:	b500      	push	{lr}
    82d6:	b085      	sub	sp, #20
    82d8:	4603      	mov	r3, r0
    82da:	9100      	str	r1, [sp, #0]
    82dc:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    82e0:	2300      	movs	r3, #0
    82e2:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    82e6:	f001 ffa9 	bl	a23c <Adc_GetCoreID>
    82ea:	4603      	mov	r3, r0
    82ec:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    82f0:	9b00      	ldr	r3, [sp, #0]
    82f2:	2201      	movs	r2, #1
    82f4:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    82f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82fa:	2129      	movs	r1, #41	; 0x29
    82fc:	4618      	mov	r0, r3
    82fe:	f7fe fe30 	bl	6f62 <Adc_ValidateNotBusyNoQueue>
    8302:	4603      	mov	r3, r0
    8304:	2b00      	cmp	r3, #0
    8306:	d115      	bne.n	8334 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8308:	f89d 300e 	ldrb.w	r3, [sp, #14]
    830c:	b2db      	uxtb	r3, r3
    830e:	4619      	mov	r1, r3
    8310:	2029      	movs	r0, #41	; 0x29
    8312:	f7fe fe91 	bl	7038 <Adc_ValidateCheckGroupNotConversion>
    8316:	4603      	mov	r3, r0
    8318:	2b00      	cmp	r3, #0
    831a:	d10b      	bne.n	8334 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    831c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8320:	b2da      	uxtb	r2, r3
    8322:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8326:	9900      	ldr	r1, [sp, #0]
    8328:	4618      	mov	r0, r3
    832a:	f001 ff5d 	bl	a1e8 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    832e:	2301      	movs	r3, #1
    8330:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8334:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8338:	2b00      	cmp	r3, #0
    833a:	d007      	beq.n	834c <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    833c:	9b00      	ldr	r3, [sp, #0]
    833e:	781b      	ldrb	r3, [r3, #0]
    8340:	2b01      	cmp	r3, #1
    8342:	d103      	bne.n	834c <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8344:	212b      	movs	r1, #43	; 0x2b
    8346:	2029      	movs	r0, #41	; 0x29
    8348:	f7fe fdf6 	bl	6f38 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    834c:	bf00      	nop
    834e:	b005      	add	sp, #20
    8350:	f85d fb04 	ldr.w	pc, [sp], #4

00008354 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    8354:	b086      	sub	sp, #24
    8356:	9003      	str	r0, [sp, #12]
    8358:	9102      	str	r1, [sp, #8]
    835a:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    835c:	9b03      	ldr	r3, [sp, #12]
    835e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8362:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    8364:	9b02      	ldr	r3, [sp, #8]
    8366:	43db      	mvns	r3, r3
    8368:	9a05      	ldr	r2, [sp, #20]
    836a:	4013      	ands	r3, r2
    836c:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    836e:	9a05      	ldr	r2, [sp, #20]
    8370:	9b01      	ldr	r3, [sp, #4]
    8372:	4313      	orrs	r3, r2
    8374:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    8376:	9b03      	ldr	r3, [sp, #12]
    8378:	9a05      	ldr	r2, [sp, #20]
    837a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    837e:	bf00      	nop
    8380:	b006      	add	sp, #24
    8382:	4770      	bx	lr

00008384 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    8384:	b086      	sub	sp, #24
    8386:	9003      	str	r0, [sp, #12]
    8388:	9102      	str	r1, [sp, #8]
    838a:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    838c:	9b03      	ldr	r3, [sp, #12]
    838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8390:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    8392:	9b05      	ldr	r3, [sp, #20]
    8394:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    8398:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    839a:	9b02      	ldr	r3, [sp, #8]
    839c:	015b      	lsls	r3, r3, #5
    839e:	f003 0360 	and.w	r3, r3, #96	; 0x60
    83a2:	9a05      	ldr	r2, [sp, #20]
    83a4:	4313      	orrs	r3, r2
    83a6:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    83a8:	9b01      	ldr	r3, [sp, #4]
    83aa:	f003 0303 	and.w	r3, r3, #3
    83ae:	9a05      	ldr	r2, [sp, #20]
    83b0:	4313      	orrs	r3, r2
    83b2:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    83b4:	9b03      	ldr	r3, [sp, #12]
    83b6:	9a05      	ldr	r2, [sp, #20]
    83b8:	641a      	str	r2, [r3, #64]	; 0x40
}
    83ba:	bf00      	nop
    83bc:	b006      	add	sp, #24
    83be:	4770      	bx	lr

000083c0 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    83c0:	b084      	sub	sp, #16
    83c2:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    83c4:	2300      	movs	r3, #0
    83c6:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    83c8:	9b01      	ldr	r3, [sp, #4]
    83ca:	095b      	lsrs	r3, r3, #5
    83cc:	f003 0303 	and.w	r3, r3, #3
    83d0:	2b03      	cmp	r3, #3
    83d2:	d00c      	beq.n	83ee <Adc_HwAcc_GetClockDivide+0x2e>
    83d4:	2b03      	cmp	r3, #3
    83d6:	d80d      	bhi.n	83f4 <Adc_HwAcc_GetClockDivide+0x34>
    83d8:	2b01      	cmp	r3, #1
    83da:	d002      	beq.n	83e2 <Adc_HwAcc_GetClockDivide+0x22>
    83dc:	2b02      	cmp	r3, #2
    83de:	d003      	beq.n	83e8 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    83e0:	e008      	b.n	83f4 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    83e2:	2301      	movs	r3, #1
    83e4:	9303      	str	r3, [sp, #12]
            break;
    83e6:	e006      	b.n	83f6 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    83e8:	2302      	movs	r3, #2
    83ea:	9303      	str	r3, [sp, #12]
            break;
    83ec:	e003      	b.n	83f6 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    83ee:	2303      	movs	r3, #3
    83f0:	9303      	str	r3, [sp, #12]
            break;
    83f2:	e000      	b.n	83f6 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    83f4:	bf00      	nop
    }
    return ReturnValue;
    83f6:	9b03      	ldr	r3, [sp, #12]
}
    83f8:	4618      	mov	r0, r3
    83fa:	b004      	add	sp, #16
    83fc:	4770      	bx	lr

000083fe <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    83fe:	b084      	sub	sp, #16
    8400:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8402:	2300      	movs	r3, #0
    8404:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8406:	9b01      	ldr	r3, [sp, #4]
    8408:	f003 0303 	and.w	r3, r3, #3
    840c:	2b03      	cmp	r3, #3
    840e:	d00c      	beq.n	842a <Adc_HwAcc_GetInputClock+0x2c>
    8410:	2b03      	cmp	r3, #3
    8412:	d80d      	bhi.n	8430 <Adc_HwAcc_GetInputClock+0x32>
    8414:	2b01      	cmp	r3, #1
    8416:	d002      	beq.n	841e <Adc_HwAcc_GetInputClock+0x20>
    8418:	2b02      	cmp	r3, #2
    841a:	d003      	beq.n	8424 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    841c:	e008      	b.n	8430 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    841e:	2301      	movs	r3, #1
    8420:	9303      	str	r3, [sp, #12]
            break;
    8422:	e006      	b.n	8432 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8424:	2302      	movs	r3, #2
    8426:	9303      	str	r3, [sp, #12]
            break;
    8428:	e003      	b.n	8432 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    842a:	2303      	movs	r3, #3
    842c:	9303      	str	r3, [sp, #12]
            break;
    842e:	e000      	b.n	8432 <Adc_HwAcc_GetInputClock+0x34>
            break;
    8430:	bf00      	nop
    }
    return ReturnValue;
    8432:	9b03      	ldr	r3, [sp, #12]
}
    8434:	4618      	mov	r0, r3
    8436:	b004      	add	sp, #16
    8438:	4770      	bx	lr

0000843a <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    843a:	b084      	sub	sp, #16
    843c:	9001      	str	r0, [sp, #4]
    843e:	460b      	mov	r3, r1
    8440:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8444:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8448:	2b00      	cmp	r3, #0
    844a:	d002      	beq.n	8452 <Adc_HwAcc_SetSampleTime+0x18>
    844c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8450:	e000      	b.n	8454 <Adc_HwAcc_SetSampleTime+0x1a>
    8452:	2301      	movs	r3, #1
    8454:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8458:	9b01      	ldr	r3, [sp, #4]
    845a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    845c:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    845e:	9b02      	ldr	r3, [sp, #8]
    8460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8464:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    846a:	9a02      	ldr	r2, [sp, #8]
    846c:	4313      	orrs	r3, r2
    846e:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8470:	9b01      	ldr	r3, [sp, #4]
    8472:	9a02      	ldr	r2, [sp, #8]
    8474:	645a      	str	r2, [r3, #68]	; 0x44
}
    8476:	bf00      	nop
    8478:	b004      	add	sp, #16
    847a:	4770      	bx	lr

0000847c <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    847c:	b086      	sub	sp, #24
    847e:	9003      	str	r0, [sp, #12]
    8480:	460b      	mov	r3, r1
    8482:	9201      	str	r2, [sp, #4]
    8484:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8488:	9b03      	ldr	r3, [sp, #12]
    848a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    848e:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    8490:	9b05      	ldr	r3, [sp, #20]
    8492:	f023 0307 	bic.w	r3, r3, #7
    8496:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    8498:	f89d 300b 	ldrb.w	r3, [sp, #11]
    849c:	2b00      	cmp	r3, #0
    849e:	d001      	beq.n	84a4 <Adc_HwAcc_SetAveraging+0x28>
    84a0:	2304      	movs	r3, #4
    84a2:	e000      	b.n	84a6 <Adc_HwAcc_SetAveraging+0x2a>
    84a4:	2300      	movs	r3, #0
    84a6:	9a05      	ldr	r2, [sp, #20]
    84a8:	4313      	orrs	r3, r2
    84aa:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    84ac:	9b01      	ldr	r3, [sp, #4]
    84ae:	f003 0303 	and.w	r3, r3, #3
    84b2:	9a05      	ldr	r2, [sp, #20]
    84b4:	4313      	orrs	r3, r2
    84b6:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    84b8:	9b03      	ldr	r3, [sp, #12]
    84ba:	9a05      	ldr	r2, [sp, #20]
    84bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    84c0:	bf00      	nop
    84c2:	b006      	add	sp, #24
    84c4:	4770      	bx	lr

000084c6 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    84c6:	b084      	sub	sp, #16
    84c8:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    84ca:	2300      	movs	r3, #0
    84cc:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    84ce:	9b01      	ldr	r3, [sp, #4]
    84d0:	f003 0303 	and.w	r3, r3, #3
    84d4:	2b03      	cmp	r3, #3
    84d6:	d00c      	beq.n	84f2 <Adc_HwAcc_GetAverageSelect+0x2c>
    84d8:	2b03      	cmp	r3, #3
    84da:	d80d      	bhi.n	84f8 <Adc_HwAcc_GetAverageSelect+0x32>
    84dc:	2b01      	cmp	r3, #1
    84de:	d002      	beq.n	84e6 <Adc_HwAcc_GetAverageSelect+0x20>
    84e0:	2b02      	cmp	r3, #2
    84e2:	d003      	beq.n	84ec <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    84e4:	e008      	b.n	84f8 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    84e6:	2301      	movs	r3, #1
    84e8:	9303      	str	r3, [sp, #12]
            break;
    84ea:	e006      	b.n	84fa <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    84ec:	2302      	movs	r3, #2
    84ee:	9303      	str	r3, [sp, #12]
            break;
    84f0:	e003      	b.n	84fa <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    84f2:	2303      	movs	r3, #3
    84f4:	9303      	str	r3, [sp, #12]
            break;
    84f6:	e000      	b.n	84fa <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    84f8:	bf00      	nop
    }
    return ReturnValue;
    84fa:	9b03      	ldr	r3, [sp, #12]
}
    84fc:	4618      	mov	r0, r3
    84fe:	b004      	add	sp, #16
    8500:	4770      	bx	lr

00008502 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8502:	b084      	sub	sp, #16
    8504:	9001      	str	r0, [sp, #4]
    8506:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8508:	9b01      	ldr	r3, [sp, #4]
    850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    850e:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8510:	9b03      	ldr	r3, [sp, #12]
    8512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8516:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8518:	9b00      	ldr	r3, [sp, #0]
    851a:	019b      	lsls	r3, r3, #6
    851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8520:	9a03      	ldr	r2, [sp, #12]
    8522:	4313      	orrs	r3, r2
    8524:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8526:	9b01      	ldr	r3, [sp, #4]
    8528:	9a03      	ldr	r2, [sp, #12]
    852a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    852e:	bf00      	nop
    8530:	b004      	add	sp, #16
    8532:	4770      	bx	lr

00008534 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8534:	b084      	sub	sp, #16
    8536:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8538:	2300      	movs	r3, #0
    853a:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    853c:	9b01      	ldr	r3, [sp, #4]
    853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8542:	2b00      	cmp	r3, #0
    8544:	d001      	beq.n	854a <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8546:	2301      	movs	r3, #1
    8548:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    854a:	9b03      	ldr	r3, [sp, #12]
}
    854c:	4618      	mov	r0, r3
    854e:	b004      	add	sp, #16
    8550:	4770      	bx	lr

00008552 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8552:	b086      	sub	sp, #24
    8554:	9003      	str	r0, [sp, #12]
    8556:	9201      	str	r2, [sp, #4]
    8558:	461a      	mov	r2, r3
    855a:	460b      	mov	r3, r1
    855c:	f88d 300b 	strb.w	r3, [sp, #11]
    8560:	4613      	mov	r3, r2
    8562:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8566:	f89d 200b 	ldrb.w	r2, [sp, #11]
    856a:	9b03      	ldr	r3, [sp, #12]
    856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8570:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8572:	9b05      	ldr	r3, [sp, #20]
    8574:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8578:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    857a:	9b01      	ldr	r3, [sp, #4]
    857c:	f003 031f 	and.w	r3, r3, #31
    8580:	9a05      	ldr	r2, [sp, #20]
    8582:	4313      	orrs	r3, r2
    8584:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8586:	f89d 300a 	ldrb.w	r3, [sp, #10]
    858a:	2b00      	cmp	r3, #0
    858c:	d001      	beq.n	8592 <Adc_HwAcc_SetChannel+0x40>
    858e:	2340      	movs	r3, #64	; 0x40
    8590:	e000      	b.n	8594 <Adc_HwAcc_SetChannel+0x42>
    8592:	2300      	movs	r3, #0
    8594:	9a05      	ldr	r2, [sp, #20]
    8596:	4313      	orrs	r3, r2
    8598:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    859a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    859e:	9b03      	ldr	r3, [sp, #12]
    85a0:	9905      	ldr	r1, [sp, #20]
    85a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    85a6:	bf00      	nop
    85a8:	b006      	add	sp, #24
    85aa:	4770      	bx	lr

000085ac <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    85ac:	b082      	sub	sp, #8
    85ae:	9001      	str	r0, [sp, #4]
    85b0:	460b      	mov	r3, r1
    85b2:	f8ad 3002 	strh.w	r3, [sp, #2]
    85b6:	4613      	mov	r3, r2
    85b8:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    85bc:	f8bd 3000 	ldrh.w	r3, [sp]
    85c0:	b2da      	uxtb	r2, r3
    85c2:	9b01      	ldr	r3, [sp, #4]
    85c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    85c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    85cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    85d0:	9b01      	ldr	r3, [sp, #4]
    85d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    85d6:	bf00      	nop
    85d8:	b002      	add	sp, #8
    85da:	4770      	bx	lr

000085dc <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    85dc:	b082      	sub	sp, #8
    85de:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    85e0:	9b01      	ldr	r3, [sp, #4]
    85e2:	099b      	lsrs	r3, r3, #6
    85e4:	f003 0301 	and.w	r3, r3, #1
    85e8:	2b00      	cmp	r3, #0
    85ea:	bf14      	ite	ne
    85ec:	2301      	movne	r3, #1
    85ee:	2300      	moveq	r3, #0
    85f0:	b2db      	uxtb	r3, r3
}
    85f2:	4618      	mov	r0, r3
    85f4:	b002      	add	sp, #8
    85f6:	4770      	bx	lr

000085f8 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    85f8:	b082      	sub	sp, #8
    85fa:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    85fc:	9b01      	ldr	r3, [sp, #4]
    85fe:	09db      	lsrs	r3, r3, #7
    8600:	f003 0301 	and.w	r3, r3, #1
    8604:	2b00      	cmp	r3, #0
    8606:	bf14      	ite	ne
    8608:	2301      	movne	r3, #1
    860a:	2300      	moveq	r3, #0
    860c:	b2db      	uxtb	r3, r3
}
    860e:	4618      	mov	r0, r3
    8610:	b002      	add	sp, #8
    8612:	4770      	bx	lr

00008614 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8614:	b084      	sub	sp, #16
    8616:	9001      	str	r0, [sp, #4]
    8618:	460b      	mov	r3, r1
    861a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    861e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8622:	9b01      	ldr	r3, [sp, #4]
    8624:	3212      	adds	r2, #18
    8626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    862a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    862e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8632:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8636:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    863a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    863e:	4618      	mov	r0, r3
    8640:	b004      	add	sp, #16
    8642:	4770      	bx	lr

00008644 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8644:	b500      	push	{lr}
    8646:	b085      	sub	sp, #20
    8648:	9003      	str	r0, [sp, #12]
    864a:	9102      	str	r1, [sp, #8]
    864c:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    864e:	f003 ff77 	bl	c540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8652:	9b02      	ldr	r3, [sp, #8]
    8654:	7a59      	ldrb	r1, [r3, #9]
    8656:	9b02      	ldr	r3, [sp, #8]
    8658:	68db      	ldr	r3, [r3, #12]
    865a:	461a      	mov	r2, r3
    865c:	9803      	ldr	r0, [sp, #12]
    865e:	f7ff ff0d 	bl	847c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8662:	f003 ff99 	bl	c598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8666:	f003 fdd1 	bl	c20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    866a:	9901      	ldr	r1, [sp, #4]
    866c:	9803      	ldr	r0, [sp, #12]
    866e:	f7ff ff48 	bl	8502 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8672:	f003 fdf7 	bl	c264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8676:	f003 fae7 	bl	bc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    867a:	9b02      	ldr	r3, [sp, #8]
    867c:	7a1b      	ldrb	r3, [r3, #8]
    867e:	4619      	mov	r1, r3
    8680:	9803      	ldr	r0, [sp, #12]
    8682:	f7ff feda 	bl	843a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    8686:	f003 fb0b 	bl	bca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    868a:	f003 fa39 	bl	bb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    868e:	9b02      	ldr	r3, [sp, #8]
    8690:	6819      	ldr	r1, [r3, #0]
    8692:	9b02      	ldr	r3, [sp, #8]
    8694:	685b      	ldr	r3, [r3, #4]
    8696:	461a      	mov	r2, r3
    8698:	9803      	ldr	r0, [sp, #12]
    869a:	f7ff fe73 	bl	8384 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    869e:	f003 fa5b 	bl	bb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    86a2:	bf00      	nop
    86a4:	b005      	add	sp, #20
    86a6:	f85d fb04 	ldr.w	pc, [sp], #4

000086aa <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    86aa:	b500      	push	{lr}
    86ac:	b087      	sub	sp, #28
    86ae:	9001      	str	r0, [sp, #4]
    86b0:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    86b2:	4a67      	ldr	r2, [pc, #412]	; (8850 <Adc_Ip_Init+0x1a6>)
    86b4:	9b01      	ldr	r3, [sp, #4]
    86b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ba:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    86bc:	2300      	movs	r3, #0
    86be:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    86c0:	2300      	movs	r3, #0
    86c2:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    86c4:	9b00      	ldr	r3, [sp, #0]
    86c6:	6819      	ldr	r1, [r3, #0]
    86c8:	9b00      	ldr	r3, [sp, #0]
    86ca:	689b      	ldr	r3, [r3, #8]
    86cc:	461a      	mov	r2, r3
    86ce:	9802      	ldr	r0, [sp, #8]
    86d0:	f7ff fe58 	bl	8384 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    86d4:	9b00      	ldr	r3, [sp, #0]
    86d6:	7b1b      	ldrb	r3, [r3, #12]
    86d8:	4619      	mov	r1, r3
    86da:	9802      	ldr	r0, [sp, #8]
    86dc:	f7ff fead 	bl	843a <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    86e0:	9b00      	ldr	r3, [sp, #0]
    86e2:	7b59      	ldrb	r1, [r3, #13]
    86e4:	9b00      	ldr	r3, [sp, #0]
    86e6:	691b      	ldr	r3, [r3, #16]
    86e8:	461a      	mov	r2, r3
    86ea:	9802      	ldr	r0, [sp, #8]
    86ec:	f7ff fec6 	bl	847c <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    86f0:	9b00      	ldr	r3, [sp, #0]
    86f2:	695b      	ldr	r3, [r3, #20]
    86f4:	4619      	mov	r1, r3
    86f6:	9801      	ldr	r0, [sp, #4]
    86f8:	f000 f9ea 	bl	8ad0 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    86fc:	9b04      	ldr	r3, [sp, #16]
    86fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8702:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    8704:	9b00      	ldr	r3, [sp, #0]
    8706:	699b      	ldr	r3, [r3, #24]
    8708:	019b      	lsls	r3, r3, #6
    870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    870e:	9a05      	ldr	r2, [sp, #20]
    8710:	4313      	orrs	r3, r2
    8712:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8714:	9b00      	ldr	r3, [sp, #0]
    8716:	7f1b      	ldrb	r3, [r3, #28]
    8718:	2b00      	cmp	r3, #0
    871a:	d004      	beq.n	8726 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    871c:	9b05      	ldr	r3, [sp, #20]
    871e:	f043 0304 	orr.w	r3, r3, #4
    8722:	9305      	str	r3, [sp, #20]
    8724:	e003      	b.n	872e <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    8726:	9b04      	ldr	r3, [sp, #16]
    8728:	f043 0304 	orr.w	r3, r3, #4
    872c:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    872e:	9b04      	ldr	r3, [sp, #16]
    8730:	f043 0303 	orr.w	r3, r3, #3
    8734:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    8736:	9b00      	ldr	r3, [sp, #0]
    8738:	6a1b      	ldr	r3, [r3, #32]
    873a:	f003 0303 	and.w	r3, r3, #3
    873e:	9a05      	ldr	r2, [sp, #20]
    8740:	4313      	orrs	r3, r2
    8742:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8744:	9b04      	ldr	r3, [sp, #16]
    8746:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    874a:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    874c:	9b00      	ldr	r3, [sp, #0]
    874e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8752:	2b00      	cmp	r3, #0
    8754:	d001      	beq.n	875a <Adc_Ip_Init+0xb0>
    8756:	2320      	movs	r3, #32
    8758:	e000      	b.n	875c <Adc_Ip_Init+0xb2>
    875a:	2300      	movs	r3, #0
    875c:	9a05      	ldr	r2, [sp, #20]
    875e:	4313      	orrs	r3, r2
    8760:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8762:	9b00      	ldr	r3, [sp, #0]
    8764:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    8768:	2b00      	cmp	r3, #0
    876a:	d001      	beq.n	8770 <Adc_Ip_Init+0xc6>
    876c:	2310      	movs	r3, #16
    876e:	e000      	b.n	8772 <Adc_Ip_Init+0xc8>
    8770:	2300      	movs	r3, #0
    8772:	9a05      	ldr	r2, [sp, #20]
    8774:	4313      	orrs	r3, r2
    8776:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    8778:	9b00      	ldr	r3, [sp, #0]
    877a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    877e:	2b00      	cmp	r3, #0
    8780:	d001      	beq.n	8786 <Adc_Ip_Init+0xdc>
    8782:	2308      	movs	r3, #8
    8784:	e000      	b.n	8788 <Adc_Ip_Init+0xde>
    8786:	2300      	movs	r3, #0
    8788:	9a05      	ldr	r2, [sp, #20]
    878a:	4313      	orrs	r3, r2
    878c:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    878e:	9b00      	ldr	r3, [sp, #0]
    8790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8792:	461a      	mov	r2, r3
    8794:	9b02      	ldr	r3, [sp, #8]
    8796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    879a:	9b00      	ldr	r3, [sp, #0]
    879c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    879e:	461a      	mov	r2, r3
    87a0:	9b02      	ldr	r3, [sp, #8]
    87a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    87a6:	9a05      	ldr	r2, [sp, #20]
    87a8:	9904      	ldr	r1, [sp, #16]
    87aa:	9802      	ldr	r0, [sp, #8]
    87ac:	f7ff fdd2 	bl	8354 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    87b0:	9b00      	ldr	r3, [sp, #0]
    87b2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    87b4:	9b00      	ldr	r3, [sp, #0]
    87b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    87b8:	461a      	mov	r2, r3
    87ba:	9802      	ldr	r0, [sp, #8]
    87bc:	f7ff fef6 	bl	85ac <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    87c0:	9b00      	ldr	r3, [sp, #0]
    87c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    87c6:	4619      	mov	r1, r3
    87c8:	9801      	ldr	r0, [sp, #4]
    87ca:	f000 f955 	bl	8a78 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    87ce:	9b00      	ldr	r3, [sp, #0]
    87d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    87d2:	2b00      	cmp	r3, #0
    87d4:	d01c      	beq.n	8810 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    87d6:	2300      	movs	r3, #0
    87d8:	f88d 300f 	strb.w	r3, [sp, #15]
    87dc:	e011      	b.n	8802 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    87de:	9b00      	ldr	r3, [sp, #0]
    87e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    87e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    87e6:	4613      	mov	r3, r2
    87e8:	005b      	lsls	r3, r3, #1
    87ea:	4413      	add	r3, r2
    87ec:	009b      	lsls	r3, r3, #2
    87ee:	440b      	add	r3, r1
    87f0:	4619      	mov	r1, r3
    87f2:	9801      	ldr	r0, [sp, #4]
    87f4:	f000 f9c2 	bl	8b7c <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    87f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87fc:	3301      	adds	r3, #1
    87fe:	f88d 300f 	strb.w	r3, [sp, #15]
    8802:	9b00      	ldr	r3, [sp, #0]
    8804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8808:	f89d 200f 	ldrb.w	r2, [sp, #15]
    880c:	429a      	cmp	r2, r3
    880e:	d3e6      	bcc.n	87de <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8810:	9b00      	ldr	r3, [sp, #0]
    8812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8814:	490f      	ldr	r1, [pc, #60]	; (8854 <Adc_Ip_Init+0x1aa>)
    8816:	9b01      	ldr	r3, [sp, #4]
    8818:	204c      	movs	r0, #76	; 0x4c
    881a:	fb00 f303 	mul.w	r3, r0, r3
    881e:	440b      	add	r3, r1
    8820:	3308      	adds	r3, #8
    8822:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8824:	9b00      	ldr	r3, [sp, #0]
    8826:	685a      	ldr	r2, [r3, #4]
    8828:	490a      	ldr	r1, [pc, #40]	; (8854 <Adc_Ip_Init+0x1aa>)
    882a:	9b01      	ldr	r3, [sp, #4]
    882c:	204c      	movs	r0, #76	; 0x4c
    882e:	fb00 f303 	mul.w	r3, r0, r3
    8832:	440b      	add	r3, r1
    8834:	3304      	adds	r3, #4
    8836:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    8838:	4a06      	ldr	r2, [pc, #24]	; (8854 <Adc_Ip_Init+0x1aa>)
    883a:	9b01      	ldr	r3, [sp, #4]
    883c:	214c      	movs	r1, #76	; 0x4c
    883e:	fb01 f303 	mul.w	r3, r1, r3
    8842:	4413      	add	r3, r2
    8844:	2201      	movs	r2, #1
    8846:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8848:	bf00      	nop
    884a:	b007      	add	sp, #28
    884c:	f85d fb04 	ldr.w	pc, [sp], #4
    8850:	00010ed0 	.word	0x00010ed0
    8854:	1fff8d10 	.word	0x1fff8d10

00008858 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    8858:	b500      	push	{lr}
    885a:	b0c3      	sub	sp, #268	; 0x10c
    885c:	ab42      	add	r3, sp, #264	; 0x108
    885e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8862:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8864:	2300      	movs	r3, #0
    8866:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    8868:	2303      	movs	r3, #3
    886a:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    886c:	2300      	movs	r3, #0
    886e:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8870:	230c      	movs	r3, #12
    8872:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    8876:	2300      	movs	r3, #0
    8878:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    887c:	2300      	movs	r3, #0
    887e:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8880:	2300      	movs	r3, #0
    8882:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8884:	2300      	movs	r3, #0
    8886:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    8888:	2300      	movs	r3, #0
    888a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    888e:	2300      	movs	r3, #0
    8890:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    8892:	2300      	movs	r3, #0
    8894:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    8898:	2300      	movs	r3, #0
    889a:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    889e:	2300      	movs	r3, #0
    88a0:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    88a4:	2300      	movs	r3, #0
    88a6:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    88aa:	2300      	movs	r3, #0
    88ac:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    88b0:	2300      	movs	r3, #0
    88b2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    88b6:	2304      	movs	r3, #4
    88b8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    88bc:	2300      	movs	r3, #0
    88be:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    88c2:	2310      	movs	r3, #16
    88c4:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    88c8:	2300      	movs	r3, #0
    88ca:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    88ce:	e02b      	b.n	8928 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    88d0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    88d4:	ab42      	add	r3, sp, #264	; 0x108
    88d6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    88da:	4613      	mov	r3, r2
    88dc:	005b      	lsls	r3, r3, #1
    88de:	4413      	add	r3, r2
    88e0:	009b      	lsls	r3, r3, #2
    88e2:	440b      	add	r3, r1
    88e4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    88e8:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    88ea:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    88ee:	ab42      	add	r3, sp, #264	; 0x108
    88f0:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    88f4:	4613      	mov	r3, r2
    88f6:	005b      	lsls	r3, r3, #1
    88f8:	4413      	add	r3, r2
    88fa:	009b      	lsls	r3, r3, #2
    88fc:	440b      	add	r3, r1
    88fe:	3304      	adds	r3, #4
    8900:	221f      	movs	r2, #31
    8902:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    8904:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8908:	ab42      	add	r3, sp, #264	; 0x108
    890a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    890e:	4613      	mov	r3, r2
    8910:	005b      	lsls	r3, r3, #1
    8912:	4413      	add	r3, r2
    8914:	009b      	lsls	r3, r3, #2
    8916:	440b      	add	r3, r1
    8918:	3308      	adds	r3, #8
    891a:	2200      	movs	r2, #0
    891c:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    891e:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8922:	3301      	adds	r3, #1
    8924:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    8928:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    892c:	2b0f      	cmp	r3, #15
    892e:	d9cf      	bls.n	88d0 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    8930:	ab02      	add	r3, sp, #8
    8932:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8934:	2300      	movs	r3, #0
    8936:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    8938:	aa32      	add	r2, sp, #200	; 0xc8
    893a:	ab42      	add	r3, sp, #264	; 0x108
    893c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8940:	4611      	mov	r1, r2
    8942:	6818      	ldr	r0, [r3, #0]
    8944:	f7ff feb1 	bl	86aa <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    8948:	4a07      	ldr	r2, [pc, #28]	; (8968 <Adc_Ip_DeInit+0x110>)
    894a:	ab42      	add	r3, sp, #264	; 0x108
    894c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8950:	681b      	ldr	r3, [r3, #0]
    8952:	214c      	movs	r1, #76	; 0x4c
    8954:	fb01 f303 	mul.w	r3, r1, r3
    8958:	4413      	add	r3, r2
    895a:	2200      	movs	r2, #0
    895c:	701a      	strb	r2, [r3, #0]
}
    895e:	bf00      	nop
    8960:	b043      	add	sp, #268	; 0x10c
    8962:	f85d fb04 	ldr.w	pc, [sp], #4
    8966:	bf00      	nop
    8968:	1fff8d10 	.word	0x1fff8d10

0000896c <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    896c:	b500      	push	{lr}
    896e:	b087      	sub	sp, #28
    8970:	9003      	str	r0, [sp, #12]
    8972:	460b      	mov	r3, r1
    8974:	9201      	str	r2, [sp, #4]
    8976:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    897a:	4a0a      	ldr	r2, [pc, #40]	; (89a4 <Adc_Ip_SetAveraging+0x38>)
    897c:	9b03      	ldr	r3, [sp, #12]
    897e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8982:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8984:	f003 fd38 	bl	c3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    8988:	f89d 300b 	ldrb.w	r3, [sp, #11]
    898c:	9a01      	ldr	r2, [sp, #4]
    898e:	4619      	mov	r1, r3
    8990:	9805      	ldr	r0, [sp, #20]
    8992:	f7ff fd73 	bl	847c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    8996:	f003 fd5b 	bl	c450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    899a:	bf00      	nop
    899c:	b007      	add	sp, #28
    899e:	f85d fb04 	ldr.w	pc, [sp], #4
    89a2:	bf00      	nop
    89a4:	00010ed0 	.word	0x00010ed0

000089a8 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    89a8:	b500      	push	{lr}
    89aa:	b085      	sub	sp, #20
    89ac:	9001      	str	r0, [sp, #4]
    89ae:	460b      	mov	r3, r1
    89b0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89b4:	4a09      	ldr	r2, [pc, #36]	; (89dc <Adc_Ip_SetSampleTime+0x34>)
    89b6:	9b01      	ldr	r3, [sp, #4]
    89b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89bc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    89be:	f003 f995 	bl	bcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    89c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    89c6:	4619      	mov	r1, r3
    89c8:	9803      	ldr	r0, [sp, #12]
    89ca:	f7ff fd36 	bl	843a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    89ce:	f003 f9b9 	bl	bd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    89d2:	bf00      	nop
    89d4:	b005      	add	sp, #20
    89d6:	f85d fb04 	ldr.w	pc, [sp], #4
    89da:	bf00      	nop
    89dc:	00010ed0 	.word	0x00010ed0

000089e0 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    89e0:	b500      	push	{lr}
    89e2:	b085      	sub	sp, #20
    89e4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89e6:	4a0a      	ldr	r2, [pc, #40]	; (8a10 <Adc_Ip_EnableDma+0x30>)
    89e8:	9b01      	ldr	r3, [sp, #4]
    89ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ee:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    89f0:	f003 fcb0 	bl	c354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    89f4:	9b03      	ldr	r3, [sp, #12]
    89f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    89fa:	f043 0204 	orr.w	r2, r3, #4
    89fe:	9b03      	ldr	r3, [sp, #12]
    8a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    8a04:	f003 fcd2 	bl	c3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    8a08:	bf00      	nop
    8a0a:	b005      	add	sp, #20
    8a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    8a10:	00010ed0 	.word	0x00010ed0

00008a14 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8a14:	b500      	push	{lr}
    8a16:	b085      	sub	sp, #20
    8a18:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a1a:	4a0a      	ldr	r2, [pc, #40]	; (8a44 <Adc_Ip_DisableDma+0x30>)
    8a1c:	9b01      	ldr	r3, [sp, #4]
    8a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a22:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8a24:	f003 fb4e 	bl	c0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    8a28:	9b03      	ldr	r3, [sp, #12]
    8a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a2e:	f023 0204 	bic.w	r2, r3, #4
    8a32:	9b03      	ldr	r3, [sp, #12]
    8a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    8a38:	f003 fb70 	bl	c11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    8a3c:	bf00      	nop
    8a3e:	b005      	add	sp, #20
    8a40:	f85d fb04 	ldr.w	pc, [sp], #4
    8a44:	00010ed0 	.word	0x00010ed0

00008a48 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    8a48:	b500      	push	{lr}
    8a4a:	b085      	sub	sp, #20
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a50:	4a08      	ldr	r2, [pc, #32]	; (8a74 <Adc_Ip_SetTriggerMode+0x2c>)
    8a52:	9b01      	ldr	r3, [sp, #4]
    8a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a58:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    8a5a:	f003 fb85 	bl	c168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8a5e:	9900      	ldr	r1, [sp, #0]
    8a60:	9803      	ldr	r0, [sp, #12]
    8a62:	f7ff fd4e 	bl	8502 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    8a66:	f003 fbab 	bl	c1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    8a6a:	bf00      	nop
    8a6c:	b005      	add	sp, #20
    8a6e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a72:	bf00      	nop
    8a74:	00010ed0 	.word	0x00010ed0

00008a78 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    8a78:	b500      	push	{lr}
    8a7a:	b085      	sub	sp, #20
    8a7c:	9001      	str	r0, [sp, #4]
    8a7e:	460b      	mov	r3, r1
    8a80:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a84:	4a11      	ldr	r2, [pc, #68]	; (8acc <Adc_Ip_SetContinuousMode+0x54>)
    8a86:	9b01      	ldr	r3, [sp, #4]
    8a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a8c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    8a8e:	f003 fda9 	bl	c5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    8a92:	9b03      	ldr	r3, [sp, #12]
    8a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8a98:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    8a9a:	9b02      	ldr	r3, [sp, #8]
    8a9c:	f023 0308 	bic.w	r3, r3, #8
    8aa0:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    8aa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d001      	beq.n	8aae <Adc_Ip_SetContinuousMode+0x36>
    8aaa:	2308      	movs	r3, #8
    8aac:	e000      	b.n	8ab0 <Adc_Ip_SetContinuousMode+0x38>
    8aae:	2300      	movs	r3, #0
    8ab0:	9a02      	ldr	r2, [sp, #8]
    8ab2:	4313      	orrs	r3, r2
    8ab4:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    8ab6:	9b03      	ldr	r3, [sp, #12]
    8ab8:	9a02      	ldr	r2, [sp, #8]
    8aba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    8abe:	f003 fdbd 	bl	c63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    8ac2:	bf00      	nop
    8ac4:	b005      	add	sp, #20
    8ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    8aca:	bf00      	nop
    8acc:	00010ed0 	.word	0x00010ed0

00008ad0 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    8ad0:	b500      	push	{lr}
    8ad2:	b085      	sub	sp, #20
    8ad4:	9001      	str	r0, [sp, #4]
    8ad6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8ad8:	4a0e      	ldr	r2, [pc, #56]	; (8b14 <Adc_Ip_SetResolution+0x44>)
    8ada:	9b01      	ldr	r3, [sp, #4]
    8adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ae0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    8ae2:	f002 fdcf 	bl	b684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    8ae6:	9b03      	ldr	r3, [sp, #12]
    8ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8aea:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    8aec:	9b02      	ldr	r3, [sp, #8]
    8aee:	f023 030c 	bic.w	r3, r3, #12
    8af2:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8af4:	9b00      	ldr	r3, [sp, #0]
    8af6:	009b      	lsls	r3, r3, #2
    8af8:	f003 030c 	and.w	r3, r3, #12
    8afc:	9a02      	ldr	r2, [sp, #8]
    8afe:	4313      	orrs	r3, r2
    8b00:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    8b02:	9b03      	ldr	r3, [sp, #12]
    8b04:	9a02      	ldr	r2, [sp, #8]
    8b06:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    8b08:	f002 fde8 	bl	b6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    8b0c:	bf00      	nop
    8b0e:	b005      	add	sp, #20
    8b10:	f85d fb04 	ldr.w	pc, [sp], #4
    8b14:	00010ed0 	.word	0x00010ed0

00008b18 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    8b18:	b500      	push	{lr}
    8b1a:	b085      	sub	sp, #20
    8b1c:	9001      	str	r0, [sp, #4]
    8b1e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8b20:	4a15      	ldr	r2, [pc, #84]	; (8b78 <Adc_Ip_SetClockMode+0x60>)
    8b22:	9b01      	ldr	r3, [sp, #4]
    8b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b28:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    8b2a:	f002 ff45 	bl	b9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8b2e:	9b00      	ldr	r3, [sp, #0]
    8b30:	6819      	ldr	r1, [r3, #0]
    8b32:	9b00      	ldr	r3, [sp, #0]
    8b34:	685b      	ldr	r3, [r3, #4]
    8b36:	461a      	mov	r2, r3
    8b38:	9803      	ldr	r0, [sp, #12]
    8b3a:	f7ff fc23 	bl	8384 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    8b3e:	f002 ff67 	bl	ba10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    8b42:	f003 f82f 	bl	bba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8b46:	9b00      	ldr	r3, [sp, #0]
    8b48:	7a1b      	ldrb	r3, [r3, #8]
    8b4a:	4619      	mov	r1, r3
    8b4c:	9803      	ldr	r0, [sp, #12]
    8b4e:	f7ff fc74 	bl	843a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    8b52:	f003 f853 	bl	bbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    8b56:	f003 fca1 	bl	c49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8b5a:	9b00      	ldr	r3, [sp, #0]
    8b5c:	7a59      	ldrb	r1, [r3, #9]
    8b5e:	9b00      	ldr	r3, [sp, #0]
    8b60:	68db      	ldr	r3, [r3, #12]
    8b62:	461a      	mov	r2, r3
    8b64:	9803      	ldr	r0, [sp, #12]
    8b66:	f7ff fc89 	bl	847c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    8b6a:	f003 fcc3 	bl	c4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    8b6e:	bf00      	nop
    8b70:	b005      	add	sp, #20
    8b72:	f85d fb04 	ldr.w	pc, [sp], #4
    8b76:	bf00      	nop
    8b78:	00010ed0 	.word	0x00010ed0

00008b7c <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    8b7c:	b510      	push	{r4, lr}
    8b7e:	b084      	sub	sp, #16
    8b80:	9001      	str	r0, [sp, #4]
    8b82:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8b84:	4a13      	ldr	r2, [pc, #76]	; (8bd4 <Adc_Ip_ConfigChannel+0x58>)
    8b86:	9b01      	ldr	r3, [sp, #4]
    8b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b8c:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    8b8e:	9b00      	ldr	r3, [sp, #0]
    8b90:	685b      	ldr	r3, [r3, #4]
    8b92:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    8b94:	f003 fa44 	bl	c020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    8b98:	9b00      	ldr	r3, [sp, #0]
    8b9a:	7819      	ldrb	r1, [r3, #0]
    8b9c:	9b00      	ldr	r3, [sp, #0]
    8b9e:	7a1b      	ldrb	r3, [r3, #8]
    8ba0:	9a02      	ldr	r2, [sp, #8]
    8ba2:	9803      	ldr	r0, [sp, #12]
    8ba4:	f7ff fcd5 	bl	8552 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    8ba8:	f003 fa66 	bl	c078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    8bac:	9b00      	ldr	r3, [sp, #0]
    8bae:	781b      	ldrb	r3, [r3, #0]
    8bb0:	461c      	mov	r4, r3
    8bb2:	9b00      	ldr	r3, [sp, #0]
    8bb4:	6859      	ldr	r1, [r3, #4]
    8bb6:	4808      	ldr	r0, [pc, #32]	; (8bd8 <Adc_Ip_ConfigChannel+0x5c>)
    8bb8:	9a01      	ldr	r2, [sp, #4]
    8bba:	4613      	mov	r3, r2
    8bbc:	00db      	lsls	r3, r3, #3
    8bbe:	4413      	add	r3, r2
    8bc0:	005b      	lsls	r3, r3, #1
    8bc2:	4413      	add	r3, r2
    8bc4:	4423      	add	r3, r4
    8bc6:	3302      	adds	r3, #2
    8bc8:	009b      	lsls	r3, r3, #2
    8bca:	4403      	add	r3, r0
    8bcc:	6059      	str	r1, [r3, #4]
}
    8bce:	bf00      	nop
    8bd0:	b004      	add	sp, #16
    8bd2:	bd10      	pop	{r4, pc}
    8bd4:	00010ed0 	.word	0x00010ed0
    8bd8:	1fff8d10 	.word	0x1fff8d10

00008bdc <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    8bdc:	b500      	push	{lr}
    8bde:	b089      	sub	sp, #36	; 0x24
    8be0:	9001      	str	r0, [sp, #4]
    8be2:	460b      	mov	r3, r1
    8be4:	f88d 3003 	strb.w	r3, [sp, #3]
    8be8:	4613      	mov	r3, r2
    8bea:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8bee:	4a24      	ldr	r2, [pc, #144]	; (8c80 <Adc_Ip_SetDisabledChannel+0xa4>)
    8bf0:	9b01      	ldr	r3, [sp, #4]
    8bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bf6:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8bf8:	2300      	movs	r3, #0
    8bfa:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8bfc:	2100      	movs	r1, #0
    8bfe:	4821      	ldr	r0, [pc, #132]	; (8c84 <Adc_Ip_SetDisabledChannel+0xa8>)
    8c00:	f7f9 fb44 	bl	228c <OsIf_MicrosToTicks>
    8c04:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8c06:	2000      	movs	r0, #0
    8c08:	f7f9 faf4 	bl	21f4 <OsIf_GetCounter>
    8c0c:	4603      	mov	r3, r0
    8c0e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8c10:	2300      	movs	r3, #0
    8c12:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8c14:	f003 f8bc 	bl	bd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    8c18:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c1c:	9b05      	ldr	r3, [sp, #20]
    8c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c22:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c26:	f043 011f 	orr.w	r1, r3, #31
    8c2a:	9b05      	ldr	r3, [sp, #20]
    8c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8c30:	f003 f8da 	bl	bde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8c34:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d01c      	beq.n	8c76 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8c3c:	e008      	b.n	8c50 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8c3e:	ab03      	add	r3, sp, #12
    8c40:	2100      	movs	r1, #0
    8c42:	4618      	mov	r0, r3
    8c44:	f7f9 faef 	bl	2226 <OsIf_GetElapsed>
    8c48:	4602      	mov	r2, r0
    8c4a:	9b06      	ldr	r3, [sp, #24]
    8c4c:	4413      	add	r3, r2
    8c4e:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8c50:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8c54:	9b05      	ldr	r3, [sp, #20]
    8c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c5a:	f003 031f 	and.w	r3, r3, #31
    8c5e:	2b1f      	cmp	r3, #31
    8c60:	d003      	beq.n	8c6a <Adc_Ip_SetDisabledChannel+0x8e>
    8c62:	9a06      	ldr	r2, [sp, #24]
    8c64:	9b04      	ldr	r3, [sp, #16]
    8c66:	429a      	cmp	r2, r3
    8c68:	d3e9      	bcc.n	8c3e <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    8c6a:	9a06      	ldr	r2, [sp, #24]
    8c6c:	9b04      	ldr	r3, [sp, #16]
    8c6e:	429a      	cmp	r2, r3
    8c70:	d301      	bcc.n	8c76 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8c72:	2302      	movs	r3, #2
    8c74:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    8c76:	9b07      	ldr	r3, [sp, #28]
}
    8c78:	4618      	mov	r0, r3
    8c7a:	b009      	add	sp, #36	; 0x24
    8c7c:	f85d fb04 	ldr.w	pc, [sp], #4
    8c80:	00010ed0 	.word	0x00010ed0
    8c84:	000186a0 	.word	0x000186a0

00008c88 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    8c88:	b500      	push	{lr}
    8c8a:	b087      	sub	sp, #28
    8c8c:	9003      	str	r0, [sp, #12]
    8c8e:	9102      	str	r1, [sp, #8]
    8c90:	4613      	mov	r3, r2
    8c92:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8c96:	4a0a      	ldr	r2, [pc, #40]	; (8cc0 <Adc_Ip_StartConversion+0x38>)
    8c98:	9b03      	ldr	r3, [sp, #12]
    8c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c9e:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    8ca0:	f003 f8c8 	bl	be34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ca8:	9a02      	ldr	r2, [sp, #8]
    8caa:	2100      	movs	r1, #0
    8cac:	9805      	ldr	r0, [sp, #20]
    8cae:	f7ff fc50 	bl	8552 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    8cb2:	f003 f8eb 	bl	be8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    8cb6:	bf00      	nop
    8cb8:	b007      	add	sp, #28
    8cba:	f85d fb04 	ldr.w	pc, [sp], #4
    8cbe:	bf00      	nop
    8cc0:	00010ed0 	.word	0x00010ed0

00008cc4 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    8cc4:	b084      	sub	sp, #16
    8cc6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8cc8:	4a0b      	ldr	r2, [pc, #44]	; (8cf8 <Adc_Ip_GetConvActiveFlag+0x34>)
    8cca:	9b01      	ldr	r3, [sp, #4]
    8ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd0:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    8cd2:	9b03      	ldr	r3, [sp, #12]
    8cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8cd8:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    8cda:	9b02      	ldr	r3, [sp, #8]
    8cdc:	09db      	lsrs	r3, r3, #7
    8cde:	f003 0301 	and.w	r3, r3, #1
    8ce2:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    8ce4:	9b02      	ldr	r3, [sp, #8]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	bf14      	ite	ne
    8cea:	2301      	movne	r3, #1
    8cec:	2300      	moveq	r3, #0
    8cee:	b2db      	uxtb	r3, r3
}
    8cf0:	4618      	mov	r0, r3
    8cf2:	b004      	add	sp, #16
    8cf4:	4770      	bx	lr
    8cf6:	bf00      	nop
    8cf8:	00010ed0 	.word	0x00010ed0

00008cfc <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    8cfc:	b500      	push	{lr}
    8cfe:	b085      	sub	sp, #20
    8d00:	9001      	str	r0, [sp, #4]
    8d02:	460b      	mov	r3, r1
    8d04:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8d08:	4a08      	ldr	r2, [pc, #32]	; (8d2c <Adc_Ip_GetChanInterrupt+0x30>)
    8d0a:	9b01      	ldr	r3, [sp, #4]
    8d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d10:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d18:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    8d1a:	9803      	ldr	r0, [sp, #12]
    8d1c:	f7ff fc5e 	bl	85dc <Adc_HwAcc_GetAIEN>
    8d20:	4603      	mov	r3, r0
}
    8d22:	4618      	mov	r0, r3
    8d24:	b005      	add	sp, #20
    8d26:	f85d fb04 	ldr.w	pc, [sp], #4
    8d2a:	bf00      	nop
    8d2c:	00010ed0 	.word	0x00010ed0

00008d30 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8d30:	b500      	push	{lr}
    8d32:	b085      	sub	sp, #20
    8d34:	9001      	str	r0, [sp, #4]
    8d36:	460b      	mov	r3, r1
    8d38:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8d3c:	4a08      	ldr	r2, [pc, #32]	; (8d60 <Adc_Ip_GetConvCompleteFlag+0x30>)
    8d3e:	9b01      	ldr	r3, [sp, #4]
    8d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d44:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d4c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    8d4e:	9803      	ldr	r0, [sp, #12]
    8d50:	f7ff fc52 	bl	85f8 <Adc_HwAcc_GetCOCO>
    8d54:	4603      	mov	r3, r0
}
    8d56:	4618      	mov	r0, r3
    8d58:	b005      	add	sp, #20
    8d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d5e:	bf00      	nop
    8d60:	00010ed0 	.word	0x00010ed0

00008d64 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8d64:	b500      	push	{lr}
    8d66:	b085      	sub	sp, #20
    8d68:	9001      	str	r0, [sp, #4]
    8d6a:	460b      	mov	r3, r1
    8d6c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8d70:	4a07      	ldr	r2, [pc, #28]	; (8d90 <Adc_Ip_GetConvData+0x2c>)
    8d72:	9b01      	ldr	r3, [sp, #4]
    8d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d78:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    8d7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d7e:	4619      	mov	r1, r3
    8d80:	9803      	ldr	r0, [sp, #12]
    8d82:	f7ff fc47 	bl	8614 <Adc_HwAcc_GetData>
    8d86:	4603      	mov	r3, r0
}
    8d88:	4618      	mov	r0, r3
    8d8a:	b005      	add	sp, #20
    8d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d90:	00010ed0 	.word	0x00010ed0

00008d94 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8d94:	b500      	push	{lr}
    8d96:	b093      	sub	sp, #76	; 0x4c
    8d98:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8d9a:	4a59      	ldr	r2, [pc, #356]	; (8f00 <Adc_Ip_DoCalibration+0x16c>)
    8d9c:	9b01      	ldr	r3, [sp, #4]
    8d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da2:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8da4:	2300      	movs	r3, #0
    8da6:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8da8:	2100      	movs	r1, #0
    8daa:	4856      	ldr	r0, [pc, #344]	; (8f04 <Adc_Ip_DoCalibration+0x170>)
    8dac:	f7f9 fa6e 	bl	228c <OsIf_MicrosToTicks>
    8db0:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8db2:	2000      	movs	r0, #0
    8db4:	f7f9 fa1e 	bl	21f4 <OsIf_GetCounter>
    8db8:	4603      	mov	r3, r0
    8dba:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    8dbc:	2300      	movs	r3, #0
    8dbe:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    8dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8dc6:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    8dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8dca:	089b      	lsrs	r3, r3, #2
    8dcc:	f003 0301 	and.w	r3, r3, #1
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	bf14      	ite	ne
    8dd4:	2301      	movne	r3, #1
    8dd6:	2300      	moveq	r3, #0
    8dd8:	b2db      	uxtb	r3, r3
    8dda:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    8dde:	980d      	ldr	r0, [sp, #52]	; 0x34
    8de0:	f7ff fb71 	bl	84c6 <Adc_HwAcc_GetAverageSelect>
    8de4:	4603      	mov	r3, r0
    8de6:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    8de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8dec:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    8dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8df0:	b2db      	uxtb	r3, r3
    8df2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8dfc:	4618      	mov	r0, r3
    8dfe:	f7ff fb99 	bl	8534 <Adc_HwAcc_GetTriggerMode>
    8e02:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    8e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8e08:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    8e0a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8e0c:	f7ff fad8 	bl	83c0 <Adc_HwAcc_GetClockDivide>
    8e10:	4603      	mov	r3, r0
    8e12:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8e14:	980d      	ldr	r0, [sp, #52]	; 0x34
    8e16:	f7ff faf2 	bl	83fe <Adc_HwAcc_GetInputClock>
    8e1a:	4603      	mov	r3, r0
    8e1c:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    8e1e:	2301      	movs	r3, #1
    8e20:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8e24:	2303      	movs	r3, #3
    8e26:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8e28:	230c      	movs	r3, #12
    8e2a:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    8e2e:	4a36      	ldr	r2, [pc, #216]	; (8f08 <Adc_Ip_DoCalibration+0x174>)
    8e30:	9b01      	ldr	r3, [sp, #4]
    8e32:	214c      	movs	r1, #76	; 0x4c
    8e34:	fb01 f303 	mul.w	r3, r1, r3
    8e38:	4413      	add	r3, r2
    8e3a:	3304      	adds	r3, #4
    8e3c:	681b      	ldr	r3, [r3, #0]
    8e3e:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8e40:	9b08      	ldr	r3, [sp, #32]
    8e42:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8e44:	ab03      	add	r3, sp, #12
    8e46:	2200      	movs	r2, #0
    8e48:	4619      	mov	r1, r3
    8e4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8e4c:	f7ff fbfa 	bl	8644 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e52:	2200      	movs	r2, #0
    8e54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e5a:	2200      	movs	r2, #0
    8e5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e62:	2200      	movs	r2, #0
    8e64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e6a:	2200      	movs	r2, #0
    8e6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e72:	2200      	movs	r2, #0
    8e74:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e7a:	2200      	movs	r2, #0
    8e7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e82:	2200      	movs	r2, #0
    8e84:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8e88:	f003 fb5a 	bl	c540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8e92:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8e9a:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8ea2:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ea8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8eac:	f003 fb74 	bl	c598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8eb0:	e008      	b.n	8ec4 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8eb2:	ab0b      	add	r3, sp, #44	; 0x2c
    8eb4:	2100      	movs	r1, #0
    8eb6:	4618      	mov	r0, r3
    8eb8:	f7f9 f9b5 	bl	2226 <OsIf_GetElapsed>
    8ebc:	4602      	mov	r2, r0
    8ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ec0:	4413      	add	r3, r2
    8ec2:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d003      	beq.n	8eda <Adc_Ip_DoCalibration+0x146>
    8ed2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ed6:	429a      	cmp	r2, r3
    8ed8:	d3eb      	bcc.n	8eb2 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8eda:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ede:	429a      	cmp	r2, r3
    8ee0:	d301      	bcc.n	8ee6 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8ee2:	2302      	movs	r3, #2
    8ee4:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    8ee6:	ab07      	add	r3, sp, #28
    8ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8eea:	4619      	mov	r1, r3
    8eec:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8eee:	f7ff fba9 	bl	8644 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8ef8:	4618      	mov	r0, r3
    8efa:	b013      	add	sp, #76	; 0x4c
    8efc:	f85d fb04 	ldr.w	pc, [sp], #4
    8f00:	00010ed0 	.word	0x00010ed0
    8f04:	000186a0 	.word	0x000186a0
    8f08:	1fff8d10 	.word	0x1fff8d10

00008f0c <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8f0c:	b500      	push	{lr}
    8f0e:	b089      	sub	sp, #36	; 0x24
    8f10:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8f12:	4a1e      	ldr	r2, [pc, #120]	; (8f8c <Adc_Ip_ClearLatchedTriggers+0x80>)
    8f14:	9b01      	ldr	r3, [sp, #4]
    8f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f1a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8f1c:	2300      	movs	r3, #0
    8f1e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8f20:	2100      	movs	r1, #0
    8f22:	481b      	ldr	r0, [pc, #108]	; (8f90 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8f24:	f7f9 f9b2 	bl	228c <OsIf_MicrosToTicks>
    8f28:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8f2a:	2000      	movs	r0, #0
    8f2c:	f7f9 f962 	bl	21f4 <OsIf_GetCounter>
    8f30:	4603      	mov	r3, r0
    8f32:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8f34:	2300      	movs	r3, #0
    8f36:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8f38:	f002 fd90 	bl	ba5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8f3c:	9b05      	ldr	r3, [sp, #20]
    8f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8f44:	9b05      	ldr	r3, [sp, #20]
    8f46:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8f48:	f002 fdb4 	bl	bab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8f4c:	e008      	b.n	8f60 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8f4e:	ab03      	add	r3, sp, #12
    8f50:	2100      	movs	r1, #0
    8f52:	4618      	mov	r0, r3
    8f54:	f7f9 f967 	bl	2226 <OsIf_GetElapsed>
    8f58:	4602      	mov	r2, r0
    8f5a:	9b06      	ldr	r3, [sp, #24]
    8f5c:	4413      	add	r3, r2
    8f5e:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8f60:	9b05      	ldr	r3, [sp, #20]
    8f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8f66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d003      	beq.n	8f76 <Adc_Ip_ClearLatchedTriggers+0x6a>
    8f6e:	9a06      	ldr	r2, [sp, #24]
    8f70:	9b04      	ldr	r3, [sp, #16]
    8f72:	429a      	cmp	r2, r3
    8f74:	d3eb      	bcc.n	8f4e <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8f76:	9a06      	ldr	r2, [sp, #24]
    8f78:	9b04      	ldr	r3, [sp, #16]
    8f7a:	429a      	cmp	r2, r3
    8f7c:	d301      	bcc.n	8f82 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8f7e:	2302      	movs	r3, #2
    8f80:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8f82:	9b07      	ldr	r3, [sp, #28]
}
    8f84:	4618      	mov	r0, r3
    8f86:	b009      	add	sp, #36	; 0x24
    8f88:	f85d fb04 	ldr.w	pc, [sp], #4
    8f8c:	00010ed0 	.word	0x00010ed0
    8f90:	000186a0 	.word	0x000186a0

00008f94 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8f94:	b500      	push	{lr}
    8f96:	b085      	sub	sp, #20
    8f98:	9001      	str	r0, [sp, #4]
    8f9a:	460b      	mov	r3, r1
    8f9c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8fa0:	4a0c      	ldr	r2, [pc, #48]	; (8fd4 <Adc_Ip_EnableChannelNotification+0x40>)
    8fa2:	9b01      	ldr	r3, [sp, #4]
    8fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fa8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8faa:	f002 ff95 	bl	bed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8fae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8fb2:	9b03      	ldr	r3, [sp, #12]
    8fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8fb8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8fbc:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8fc0:	9b03      	ldr	r3, [sp, #12]
    8fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    8fc6:	f002 ffb3 	bl	bf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    8fca:	bf00      	nop
    8fcc:	b005      	add	sp, #20
    8fce:	f85d fb04 	ldr.w	pc, [sp], #4
    8fd2:	bf00      	nop
    8fd4:	00010ed0 	.word	0x00010ed0

00008fd8 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    8fd8:	b500      	push	{lr}
    8fda:	b085      	sub	sp, #20
    8fdc:	9001      	str	r0, [sp, #4]
    8fde:	460b      	mov	r3, r1
    8fe0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8fe4:	4a0c      	ldr	r2, [pc, #48]	; (9018 <Adc_Ip_DisableChannelNotification+0x40>)
    8fe6:	9b01      	ldr	r3, [sp, #4]
    8fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fec:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8fee:	f002 ffc5 	bl	bf7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8ff2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8ff6:	9b03      	ldr	r3, [sp, #12]
    8ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ffc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9000:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    9004:	9b03      	ldr	r3, [sp, #12]
    9006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    900a:	f002 ffe3 	bl	bfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    900e:	bf00      	nop
    9010:	b005      	add	sp, #20
    9012:	f85d fb04 	ldr.w	pc, [sp], #4
    9016:	bf00      	nop
    9018:	00010ed0 	.word	0x00010ed0

0000901c <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    901c:	b500      	push	{lr}
    901e:	b085      	sub	sp, #20
    9020:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9022:	4a0a      	ldr	r2, [pc, #40]	; (904c <Adc_Ip_ClearTrigErrReg+0x30>)
    9024:	9b01      	ldr	r3, [sp, #4]
    9026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    902a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    902c:	f003 f940 	bl	c2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    9030:	9b03      	ldr	r3, [sp, #12]
    9032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9036:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    903a:	9b03      	ldr	r3, [sp, #12]
    903c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    9040:	f003 f962 	bl	c308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    9044:	bf00      	nop
    9046:	b005      	add	sp, #20
    9048:	f85d fb04 	ldr.w	pc, [sp], #4
    904c:	00010ed0 	.word	0x00010ed0

00009050 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    9050:	b084      	sub	sp, #16
    9052:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9054:	4a06      	ldr	r2, [pc, #24]	; (9070 <Adc_Ip_GetTrigErrReg+0x20>)
    9056:	9b01      	ldr	r3, [sp, #4]
    9058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    905c:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    905e:	9b03      	ldr	r3, [sp, #12]
    9060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9064:	0e1b      	lsrs	r3, r3, #24
    9066:	f003 030f 	and.w	r3, r3, #15
}
    906a:	4618      	mov	r0, r3
    906c:	b004      	add	sp, #16
    906e:	4770      	bx	lr
    9070:	00010ed0 	.word	0x00010ed0

00009074 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    9074:	b082      	sub	sp, #8
    9076:	9001      	str	r0, [sp, #4]
    9078:	460b      	mov	r3, r1
    907a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    907e:	4a06      	ldr	r2, [pc, #24]	; (9098 <Adc_Ip_GetDataAddress+0x24>)
    9080:	9b01      	ldr	r3, [sp, #4]
    9082:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9086:	f89d 3003 	ldrb.w	r3, [sp, #3]
    908a:	3312      	adds	r3, #18
    908c:	009b      	lsls	r3, r3, #2
    908e:	4413      	add	r3, r2
}
    9090:	4618      	mov	r0, r3
    9092:	b002      	add	sp, #8
    9094:	4770      	bx	lr
    9096:	bf00      	nop
    9098:	00010ed0 	.word	0x00010ed0

0000909c <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    909c:	b088      	sub	sp, #32
    909e:	9003      	str	r0, [sp, #12]
    90a0:	9102      	str	r1, [sp, #8]
    90a2:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    90a4:	4a25      	ldr	r2, [pc, #148]	; (913c <Adc_Ip_GetChanData+0xa0>)
    90a6:	9b03      	ldr	r3, [sp, #12]
    90a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ac:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    90ae:	2300      	movs	r3, #0
    90b0:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    90b2:	2300      	movs	r3, #0
    90b4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    90b8:	2300      	movs	r3, #0
    90ba:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    90be:	2300      	movs	r3, #0
    90c0:	f88d 3019 	strb.w	r3, [sp, #25]
    90c4:	e019      	b.n	90fa <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    90c6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    90ca:	481d      	ldr	r0, [pc, #116]	; (9140 <Adc_Ip_GetChanData+0xa4>)
    90cc:	9a03      	ldr	r2, [sp, #12]
    90ce:	4613      	mov	r3, r2
    90d0:	00db      	lsls	r3, r3, #3
    90d2:	4413      	add	r3, r2
    90d4:	005b      	lsls	r3, r3, #1
    90d6:	4413      	add	r3, r2
    90d8:	440b      	add	r3, r1
    90da:	3302      	adds	r3, #2
    90dc:	009b      	lsls	r3, r3, #2
    90de:	4403      	add	r3, r0
    90e0:	685b      	ldr	r3, [r3, #4]
    90e2:	9a02      	ldr	r2, [sp, #8]
    90e4:	429a      	cmp	r2, r3
    90e6:	d103      	bne.n	90f0 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    90e8:	2301      	movs	r3, #1
    90ea:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    90ee:	e008      	b.n	9102 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    90f0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    90f4:	3301      	adds	r3, #1
    90f6:	f88d 3019 	strb.w	r3, [sp, #25]
    90fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
    90fe:	2b0f      	cmp	r3, #15
    9100:	d9e1      	bls.n	90c6 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    9102:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9106:	2b00      	cmp	r3, #0
    9108:	d00e      	beq.n	9128 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    910a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    910e:	9b05      	ldr	r3, [sp, #20]
    9110:	3212      	adds	r2, #18
    9112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9116:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    911a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    911e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9122:	f8ad 301a 	strh.w	r3, [sp, #26]
    9126:	e001      	b.n	912c <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    9128:	2301      	movs	r3, #1
    912a:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    912c:	9b01      	ldr	r3, [sp, #4]
    912e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9132:	801a      	strh	r2, [r3, #0]

    return Status;
    9134:	9b07      	ldr	r3, [sp, #28]
}
    9136:	4618      	mov	r0, r3
    9138:	b008      	add	sp, #32
    913a:	4770      	bx	lr
    913c:	00010ed0 	.word	0x00010ed0
    9140:	1fff8d10 	.word	0x1fff8d10

00009144 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    9144:	b500      	push	{lr}
    9146:	b085      	sub	sp, #20
    9148:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    914a:	2300      	movs	r3, #0
    914c:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    9150:	2300      	movs	r3, #0
    9152:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    9156:	4a32      	ldr	r2, [pc, #200]	; (9220 <Adc_Ip_IRQHandler+0xdc>)
    9158:	9b01      	ldr	r3, [sp, #4]
    915a:	214c      	movs	r1, #76	; 0x4c
    915c:	fb01 f303 	mul.w	r3, r1, r3
    9160:	4413      	add	r3, r2
    9162:	781b      	ldrb	r3, [r3, #0]
    9164:	2b00      	cmp	r3, #0
    9166:	d040      	beq.n	91ea <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    9168:	4a2d      	ldr	r2, [pc, #180]	; (9220 <Adc_Ip_IRQHandler+0xdc>)
    916a:	9b01      	ldr	r3, [sp, #4]
    916c:	214c      	movs	r1, #76	; 0x4c
    916e:	fb01 f303 	mul.w	r3, r1, r3
    9172:	4413      	add	r3, r2
    9174:	3308      	adds	r3, #8
    9176:	681b      	ldr	r3, [r3, #0]
    9178:	2b00      	cmp	r3, #0
    917a:	d04d      	beq.n	9218 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    917c:	2300      	movs	r3, #0
    917e:	f88d 300f 	strb.w	r3, [sp, #15]
    9182:	e02d      	b.n	91e0 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9184:	4a27      	ldr	r2, [pc, #156]	; (9224 <Adc_Ip_IRQHandler+0xe0>)
    9186:	9b01      	ldr	r3, [sp, #4]
    9188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    918c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9194:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    9196:	9802      	ldr	r0, [sp, #8]
    9198:	f7ff fa20 	bl	85dc <Adc_HwAcc_GetAIEN>
    919c:	4603      	mov	r3, r0
    919e:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    91a2:	9802      	ldr	r0, [sp, #8]
    91a4:	f7ff fa28 	bl	85f8 <Adc_HwAcc_GetCOCO>
    91a8:	4603      	mov	r3, r0
    91aa:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    91ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d00f      	beq.n	91d6 <Adc_Ip_IRQHandler+0x92>
    91b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    91ba:	2b00      	cmp	r3, #0
    91bc:	d00b      	beq.n	91d6 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    91be:	4a18      	ldr	r2, [pc, #96]	; (9220 <Adc_Ip_IRQHandler+0xdc>)
    91c0:	9b01      	ldr	r3, [sp, #4]
    91c2:	214c      	movs	r1, #76	; 0x4c
    91c4:	fb01 f303 	mul.w	r3, r1, r3
    91c8:	4413      	add	r3, r2
    91ca:	3308      	adds	r3, #8
    91cc:	681b      	ldr	r3, [r3, #0]
    91ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    91d2:	4610      	mov	r0, r2
    91d4:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    91d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91da:	3301      	adds	r3, #1
    91dc:	f88d 300f 	strb.w	r3, [sp, #15]
    91e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91e4:	2b0f      	cmp	r3, #15
    91e6:	d9cd      	bls.n	9184 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    91e8:	e016      	b.n	9218 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    91ea:	2300      	movs	r3, #0
    91ec:	f88d 300f 	strb.w	r3, [sp, #15]
    91f0:	e00e      	b.n	9210 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    91f2:	4a0c      	ldr	r2, [pc, #48]	; (9224 <Adc_Ip_IRQHandler+0xe0>)
    91f4:	9b01      	ldr	r3, [sp, #4]
    91f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    91fe:	4611      	mov	r1, r2
    9200:	4618      	mov	r0, r3
    9202:	f7ff fa07 	bl	8614 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9206:	f89d 300f 	ldrb.w	r3, [sp, #15]
    920a:	3301      	adds	r3, #1
    920c:	f88d 300f 	strb.w	r3, [sp, #15]
    9210:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9214:	2b0f      	cmp	r3, #15
    9216:	d9ec      	bls.n	91f2 <Adc_Ip_IRQHandler+0xae>
}
    9218:	bf00      	nop
    921a:	b005      	add	sp, #20
    921c:	f85d fb04 	ldr.w	pc, [sp], #4
    9220:	1fff8d10 	.word	0x1fff8d10
    9224:	00010ed0 	.word	0x00010ed0

00009228 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9228:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    922a:	2000      	movs	r0, #0
    922c:	f7ff ff8a 	bl	9144 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9230:	f3bf 8f4f 	dsb	sy
}
    9234:	bf00      	nop
    9236:	bd08      	pop	{r3, pc}

00009238 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9238:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    923a:	2001      	movs	r0, #1
    923c:	f7ff ff82 	bl	9144 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9240:	f3bf 8f4f 	dsb	sy
}
    9244:	bf00      	nop
    9246:	bd08      	pop	{r3, pc}

00009248 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    9248:	b510      	push	{r4, lr}
    924a:	b084      	sub	sp, #16
    924c:	4603      	mov	r3, r0
    924e:	460a      	mov	r2, r1
    9250:	f88d 3007 	strb.w	r3, [sp, #7]
    9254:	4613      	mov	r3, r2
    9256:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    925a:	2300      	movs	r3, #0
    925c:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    9260:	2300      	movs	r3, #0
    9262:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    9266:	f002 f821 	bl	b2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    926a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    926e:	4a24      	ldr	r2, [pc, #144]	; (9300 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9270:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9274:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    9278:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    927c:	2b01      	cmp	r3, #1
    927e:	d806      	bhi.n	928e <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    9280:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9284:	4a1e      	ldr	r2, [pc, #120]	; (9300 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9286:	2100      	movs	r1, #0
    9288:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    928c:	e032      	b.n	92f4 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    928e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9292:	3301      	adds	r3, #1
    9294:	f8ad 300e 	strh.w	r3, [sp, #14]
    9298:	e01b      	b.n	92d2 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    929a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    929e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    92a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    92a6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    92aa:	3a01      	subs	r2, #1
    92ac:	4c14      	ldr	r4, [pc, #80]	; (9300 <Adc_Ipw_RemoveFromQueue+0xb8>)
    92ae:	0080      	lsls	r0, r0, #2
    92b0:	4403      	add	r3, r0
    92b2:	005b      	lsls	r3, r3, #1
    92b4:	4423      	add	r3, r4
    92b6:	885b      	ldrh	r3, [r3, #2]
    92b8:	b29c      	uxth	r4, r3
    92ba:	4811      	ldr	r0, [pc, #68]	; (9300 <Adc_Ipw_RemoveFromQueue+0xb8>)
    92bc:	008b      	lsls	r3, r1, #2
    92be:	4413      	add	r3, r2
    92c0:	005b      	lsls	r3, r3, #1
    92c2:	4403      	add	r3, r0
    92c4:	4622      	mov	r2, r4
    92c6:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    92c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    92cc:	3301      	adds	r3, #1
    92ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    92d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    92d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    92da:	429a      	cmp	r2, r3
    92dc:	d3dd      	bcc.n	929a <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    92de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92e2:	4a07      	ldr	r2, [pc, #28]	; (9300 <Adc_Ipw_RemoveFromQueue+0xb8>)
    92e4:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    92e8:	b292      	uxth	r2, r2
    92ea:	3a01      	subs	r2, #1
    92ec:	b291      	uxth	r1, r2
    92ee:	4a04      	ldr	r2, [pc, #16]	; (9300 <Adc_Ipw_RemoveFromQueue+0xb8>)
    92f0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    92f4:	f002 f806 	bl	b304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    92f8:	bf00      	nop
    92fa:	b004      	add	sp, #16
    92fc:	bd10      	pop	{r4, pc}
    92fe:	bf00      	nop
    9300:	1fff8d00 	.word	0x1fff8d00

00009304 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9304:	b500      	push	{lr}
    9306:	b087      	sub	sp, #28
    9308:	9003      	str	r0, [sp, #12]
    930a:	9102      	str	r1, [sp, #8]
    930c:	9201      	str	r2, [sp, #4]
    930e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9312:	2300      	movs	r3, #0
    9314:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9318:	9b03      	ldr	r3, [sp, #12]
    931a:	789b      	ldrb	r3, [r3, #2]
    931c:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9320:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9324:	4a29      	ldr	r2, [pc, #164]	; (93cc <Adc_Ipw_ReadGroupConvData+0xc8>)
    9326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    932a:	681a      	ldr	r2, [r3, #0]
    932c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9330:	4413      	add	r3, r2
    9332:	7c1b      	ldrb	r3, [r3, #16]
    9334:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    9338:	f89d 3003 	ldrb.w	r3, [sp, #3]
    933c:	4a23      	ldr	r2, [pc, #140]	; (93cc <Adc_Ipw_ReadGroupConvData+0xc8>)
    933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9342:	681b      	ldr	r3, [r3, #0]
    9344:	f89d 2015 	ldrb.w	r2, [sp, #21]
    9348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    934c:	695b      	ldr	r3, [r3, #20]
    934e:	4618      	mov	r0, r3
    9350:	f000 fbce 	bl	9af0 <Adc_Ipw_CalculateNumsBitShift>
    9354:	4603      	mov	r3, r0
    9356:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    935a:	9b03      	ldr	r3, [sp, #12]
    935c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9360:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9364:	2300      	movs	r3, #0
    9366:	f88d 3017 	strb.w	r3, [sp, #23]
    936a:	e022      	b.n	93b2 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    936c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9370:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9374:	4611      	mov	r1, r2
    9376:	4618      	mov	r0, r3
    9378:	f7ff fcf4 	bl	8d64 <Adc_Ip_GetConvData>
    937c:	4603      	mov	r3, r0
    937e:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    9382:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9386:	f89d 3013 	ldrb.w	r3, [sp, #19]
    938a:	fa02 f303 	lsl.w	r3, r2, r3
    938e:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9392:	9b01      	ldr	r3, [sp, #4]
    9394:	2201      	movs	r2, #1
    9396:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    9398:	f89d 3017 	ldrb.w	r3, [sp, #23]
    939c:	005b      	lsls	r3, r3, #1
    939e:	9a02      	ldr	r2, [sp, #8]
    93a0:	4413      	add	r3, r2
    93a2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    93a6:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    93a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    93ac:	3301      	adds	r3, #1
    93ae:	f88d 3017 	strb.w	r3, [sp, #23]
    93b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    93b6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    93ba:	429a      	cmp	r2, r3
    93bc:	d3d6      	bcc.n	936c <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    93be:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    93c2:	4618      	mov	r0, r3
    93c4:	b007      	add	sp, #28
    93c6:	f85d fb04 	ldr.w	pc, [sp], #4
    93ca:	bf00      	nop
    93cc:	1fff8ce8 	.word	0x1fff8ce8

000093d0 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    93d0:	b500      	push	{lr}
    93d2:	b087      	sub	sp, #28
    93d4:	9003      	str	r0, [sp, #12]
    93d6:	9102      	str	r1, [sp, #8]
    93d8:	9201      	str	r2, [sp, #4]
    93da:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    93de:	2301      	movs	r3, #1
    93e0:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    93e4:	2300      	movs	r3, #0
    93e6:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    93ea:	9b03      	ldr	r3, [sp, #12]
    93ec:	789b      	ldrb	r3, [r3, #2]
    93ee:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    93f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    93f6:	4a19      	ldr	r2, [pc, #100]	; (945c <Adc_Ipw_ReadGroupNoInt+0x8c>)
    93f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fc:	681a      	ldr	r2, [r3, #0]
    93fe:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9402:	4413      	add	r3, r2
    9404:	7c1b      	ldrb	r3, [r3, #16]
    9406:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    940a:	9b03      	ldr	r3, [sp, #12]
    940c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9410:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9414:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9418:	f89d 3014 	ldrb.w	r3, [sp, #20]
    941c:	2100      	movs	r1, #0
    941e:	4618      	mov	r0, r3
    9420:	f000 fe2a 	bl	a078 <Adc_Ipw_CheckValidConversion>
    9424:	4603      	mov	r3, r0
    9426:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    942a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    942e:	2b00      	cmp	r3, #0
    9430:	d00a      	beq.n	9448 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9432:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9436:	9a01      	ldr	r2, [sp, #4]
    9438:	9902      	ldr	r1, [sp, #8]
    943a:	9803      	ldr	r0, [sp, #12]
    943c:	f7ff ff62 	bl	9304 <Adc_Ipw_ReadGroupConvData>
    9440:	4603      	mov	r3, r0
    9442:	f88d 3017 	strb.w	r3, [sp, #23]
    9446:	e002      	b.n	944e <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9448:	2301      	movs	r3, #1
    944a:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    944e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9452:	4618      	mov	r0, r3
    9454:	b007      	add	sp, #28
    9456:	f85d fb04 	ldr.w	pc, [sp], #4
    945a:	bf00      	nop
    945c:	1fff8ce8 	.word	0x1fff8ce8

00009460 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9460:	b088      	sub	sp, #32
    9462:	4603      	mov	r3, r0
    9464:	9100      	str	r1, [sp, #0]
    9466:	f8ad 3006 	strh.w	r3, [sp, #6]
    946a:	4613      	mov	r3, r2
    946c:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9470:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9474:	4a3a      	ldr	r2, [pc, #232]	; (9560 <Adc_Ipw_WriteDataBuffer+0x100>)
    9476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    947a:	68da      	ldr	r2, [r3, #12]
    947c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9480:	005b      	lsls	r3, r3, #1
    9482:	4413      	add	r3, r2
    9484:	881b      	ldrh	r3, [r3, #0]
    9486:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    948a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    948e:	4a34      	ldr	r2, [pc, #208]	; (9560 <Adc_Ipw_WriteDataBuffer+0x100>)
    9490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9494:	685a      	ldr	r2, [r3, #4]
    9496:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    949a:	2134      	movs	r1, #52	; 0x34
    949c:	fb01 f303 	mul.w	r3, r1, r3
    94a0:	4413      	add	r3, r2
    94a2:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    94a4:	9b04      	ldr	r3, [sp, #16]
    94a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    94aa:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    94ae:	2300      	movs	r3, #0
    94b0:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    94b2:	2300      	movs	r3, #0
    94b4:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    94b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    94bc:	4929      	ldr	r1, [pc, #164]	; (9564 <Adc_Ipw_WriteDataBuffer+0x104>)
    94be:	4613      	mov	r3, r2
    94c0:	009b      	lsls	r3, r3, #2
    94c2:	4413      	add	r3, r2
    94c4:	009b      	lsls	r3, r3, #2
    94c6:	440b      	add	r3, r1
    94c8:	3308      	adds	r3, #8
    94ca:	881b      	ldrh	r3, [r3, #0]
    94cc:	b29b      	uxth	r3, r3
    94ce:	3b01      	subs	r3, #1
    94d0:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    94d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    94d8:	4922      	ldr	r1, [pc, #136]	; (9564 <Adc_Ipw_WriteDataBuffer+0x104>)
    94da:	4613      	mov	r3, r2
    94dc:	009b      	lsls	r3, r3, #2
    94de:	4413      	add	r3, r2
    94e0:	009b      	lsls	r3, r3, #2
    94e2:	440b      	add	r3, r1
    94e4:	3308      	adds	r3, #8
    94e6:	881b      	ldrh	r3, [r3, #0]
    94e8:	b29b      	uxth	r3, r3
    94ea:	2b00      	cmp	r3, #0
    94ec:	d104      	bne.n	94f8 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    94ee:	9b04      	ldr	r3, [sp, #16]
    94f0:	8b9b      	ldrh	r3, [r3, #28]
    94f2:	3b01      	subs	r3, #1
    94f4:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    94f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    94fc:	4919      	ldr	r1, [pc, #100]	; (9564 <Adc_Ipw_WriteDataBuffer+0x104>)
    94fe:	4613      	mov	r3, r2
    9500:	009b      	lsls	r3, r3, #2
    9502:	4413      	add	r3, r2
    9504:	009b      	lsls	r3, r3, #2
    9506:	440b      	add	r3, r1
    9508:	330c      	adds	r3, #12
    950a:	681a      	ldr	r2, [r3, #0]
    950c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9510:	005b      	lsls	r3, r3, #1
    9512:	4413      	add	r3, r2
    9514:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9516:	9b04      	ldr	r3, [sp, #16]
    9518:	8b9b      	ldrh	r3, [r3, #28]
    951a:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    951e:	2300      	movs	r3, #0
    9520:	f88d 301f 	strb.w	r3, [sp, #31]
    9524:	e012      	b.n	954c <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9526:	f89d 301f 	ldrb.w	r3, [sp, #31]
    952a:	005b      	lsls	r3, r3, #1
    952c:	9a00      	ldr	r2, [sp, #0]
    952e:	4413      	add	r3, r2
    9530:	9a06      	ldr	r2, [sp, #24]
    9532:	8812      	ldrh	r2, [r2, #0]
    9534:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9536:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    953a:	005b      	lsls	r3, r3, #1
    953c:	9a06      	ldr	r2, [sp, #24]
    953e:	4413      	add	r3, r2
    9540:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9542:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9546:	3301      	adds	r3, #1
    9548:	f88d 301f 	strb.w	r3, [sp, #31]
    954c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9550:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9554:	429a      	cmp	r2, r3
    9556:	d3e6      	bcc.n	9526 <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9558:	bf00      	nop
    955a:	bf00      	nop
    955c:	b008      	add	sp, #32
    955e:	4770      	bx	lr
    9560:	1fff8ce8 	.word	0x1fff8ce8
    9564:	1fff8cec 	.word	0x1fff8cec

00009568 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9568:	b500      	push	{lr}
    956a:	b089      	sub	sp, #36	; 0x24
    956c:	9200      	str	r2, [sp, #0]
    956e:	461a      	mov	r2, r3
    9570:	4603      	mov	r3, r0
    9572:	f88d 3007 	strb.w	r3, [sp, #7]
    9576:	460b      	mov	r3, r1
    9578:	f8ad 3004 	strh.w	r3, [sp, #4]
    957c:	4613      	mov	r3, r2
    957e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9582:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9586:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    958a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    958e:	f003 0307 	and.w	r3, r3, #7
    9592:	b2db      	uxtb	r3, r3
    9594:	2b00      	cmp	r3, #0
    9596:	d006      	beq.n	95a6 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9598:	f89d 3006 	ldrb.w	r3, [sp, #6]
    959c:	08db      	lsrs	r3, r3, #3
    959e:	b2db      	uxtb	r3, r3
    95a0:	3301      	adds	r3, #1
    95a2:	b2db      	uxtb	r3, r3
    95a4:	e003      	b.n	95ae <Adc_Ipw_ConfigurePdbChannels+0x46>
    95a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95aa:	08db      	lsrs	r3, r3, #3
    95ac:	b2db      	uxtb	r3, r3
    95ae:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    95b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    95b6:	4987      	ldr	r1, [pc, #540]	; (97d4 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    95b8:	4613      	mov	r3, r2
    95ba:	009b      	lsls	r3, r3, #2
    95bc:	4413      	add	r3, r2
    95be:	009b      	lsls	r3, r3, #2
    95c0:	440b      	add	r3, r1
    95c2:	3310      	adds	r3, #16
    95c4:	781b      	ldrb	r3, [r3, #0]
    95c6:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    95ca:	4b83      	ldr	r3, [pc, #524]	; (97d8 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    95cc:	681b      	ldr	r3, [r3, #0]
    95ce:	681a      	ldr	r2, [r3, #0]
    95d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    95d4:	4413      	add	r3, r2
    95d6:	7c1b      	ldrb	r3, [r3, #16]
    95d8:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    95dc:	9b00      	ldr	r3, [sp, #0]
    95de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    95e0:	691b      	ldr	r3, [r3, #16]
    95e2:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    95e4:	2300      	movs	r3, #0
    95e6:	f88d 301f 	strb.w	r3, [sp, #31]
    95ea:	e0e6      	b.n	97ba <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    95ec:	f89d 301d 	ldrb.w	r3, [sp, #29]
    95f0:	08db      	lsrs	r3, r3, #3
    95f2:	b2db      	uxtb	r3, r3
    95f4:	2b00      	cmp	r3, #0
    95f6:	d102      	bne.n	95fe <Adc_Ipw_ConfigurePdbChannels+0x96>
    95f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    95fc:	e000      	b.n	9600 <Adc_Ipw_ConfigurePdbChannels+0x98>
    95fe:	2308      	movs	r3, #8
    9600:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9604:	9b00      	ldr	r3, [sp, #0]
    9606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9608:	7bdb      	ldrb	r3, [r3, #15]
    960a:	2b00      	cmp	r3, #0
    960c:	d05e      	beq.n	96cc <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    960e:	9b00      	ldr	r3, [sp, #0]
    9610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9612:	7b9b      	ldrb	r3, [r3, #14]
    9614:	f083 0301 	eor.w	r3, r3, #1
    9618:	b2db      	uxtb	r3, r3
    961a:	2b00      	cmp	r3, #0
    961c:	d02a      	beq.n	9674 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    961e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9622:	f1c3 0308 	rsb	r3, r3, #8
    9626:	22ff      	movs	r2, #255	; 0xff
    9628:	fa22 f303 	lsr.w	r3, r2, r3
    962c:	b2db      	uxtb	r3, r3
    962e:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9632:	2300      	movs	r3, #0
    9634:	f88d 301e 	strb.w	r3, [sp, #30]
    9638:	e015      	b.n	9666 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    963a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    963e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9642:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9646:	4413      	add	r3, r2
    9648:	005b      	lsls	r3, r3, #1
    964a:	9a05      	ldr	r2, [sp, #20]
    964c:	4413      	add	r3, r2
    964e:	881b      	ldrh	r3, [r3, #0]
    9650:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9654:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9658:	f001 fd06 	bl	b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    965c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9660:	3301      	adds	r3, #1
    9662:	f88d 301e 	strb.w	r3, [sp, #30]
    9666:	f89d 201e 	ldrb.w	r2, [sp, #30]
    966a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    966e:	429a      	cmp	r2, r3
    9670:	d3e3      	bcc.n	963a <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9672:	e051      	b.n	9718 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9674:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9678:	2b00      	cmp	r3, #0
    967a:	d110      	bne.n	969e <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    967c:	2301      	movs	r3, #1
    967e:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9682:	9b05      	ldr	r3, [sp, #20]
    9684:	881b      	ldrh	r3, [r3, #0]
    9686:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    968a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    968e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9692:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9696:	2200      	movs	r2, #0
    9698:	f001 fce6 	bl	b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    969c:	e03c      	b.n	9718 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    969e:	2301      	movs	r3, #1
    96a0:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    96a4:	9b00      	ldr	r3, [sp, #0]
    96a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96a8:	899a      	ldrh	r2, [r3, #12]
    96aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    96ae:	b29b      	uxth	r3, r3
    96b0:	fb12 f303 	smulbb	r3, r2, r3
    96b4:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    96b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    96bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    96c0:	f89d 101f 	ldrb.w	r1, [sp, #31]
    96c4:	2200      	movs	r2, #0
    96c6:	f001 fccf 	bl	b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    96ca:	e025      	b.n	9718 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    96cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    96d0:	2b00      	cmp	r3, #0
    96d2:	d10b      	bne.n	96ec <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    96d4:	2301      	movs	r3, #1
    96d6:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    96da:	f89d 0018 	ldrb.w	r0, [sp, #24]
    96de:	f89d 101f 	ldrb.w	r1, [sp, #31]
    96e2:	2300      	movs	r3, #0
    96e4:	2200      	movs	r2, #0
    96e6:	f001 fcbf 	bl	b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    96ea:	e015      	b.n	9718 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    96ec:	2301      	movs	r3, #1
    96ee:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    96f2:	9b00      	ldr	r3, [sp, #0]
    96f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96f6:	899a      	ldrh	r2, [r3, #12]
    96f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    96fc:	b29b      	uxth	r3, r3
    96fe:	fb12 f303 	smulbb	r3, r2, r3
    9702:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9706:	f89d 0018 	ldrb.w	r0, [sp, #24]
    970a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    970e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9712:	2200      	movs	r2, #0
    9714:	f001 fca8 	bl	b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9718:	f89d 3018 	ldrb.w	r3, [sp, #24]
    971c:	4618      	mov	r0, r3
    971e:	f001 fb77 	bl	ae10 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    9722:	f89d 201d 	ldrb.w	r2, [sp, #29]
    9726:	f89d 3013 	ldrb.w	r3, [sp, #19]
    972a:	1ad3      	subs	r3, r2, r3
    972c:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9730:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9734:	b29a      	uxth	r2, r3
    9736:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    973a:	4413      	add	r3, r2
    973c:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9740:	9b00      	ldr	r3, [sp, #0]
    9742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9744:	7b9b      	ldrb	r3, [r3, #14]
    9746:	2b00      	cmp	r3, #0
    9748:	d01d      	beq.n	9786 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    974a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    974e:	2b00      	cmp	r3, #0
    9750:	d10c      	bne.n	976c <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9752:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9756:	f1c3 0308 	rsb	r3, r3, #8
    975a:	22ff      	movs	r2, #255	; 0xff
    975c:	fa22 f303 	lsr.w	r3, r2, r3
    9760:	b2db      	uxtb	r3, r3
    9762:	3b01      	subs	r3, #1
    9764:	b2db      	uxtb	r3, r3
    9766:	f88d 300e 	strb.w	r3, [sp, #14]
    976a:	e00f      	b.n	978c <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    976c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9770:	f1c3 0308 	rsb	r3, r3, #8
    9774:	22ff      	movs	r2, #255	; 0xff
    9776:	fa22 f303 	lsr.w	r3, r2, r3
    977a:	b2db      	uxtb	r3, r3
    977c:	3b01      	subs	r3, #1
    977e:	b2db      	uxtb	r3, r3
    9780:	f88d 300e 	strb.w	r3, [sp, #14]
    9784:	e002      	b.n	978c <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9786:	2300      	movs	r3, #0
    9788:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    978c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9790:	f1c3 0308 	rsb	r3, r3, #8
    9794:	22ff      	movs	r2, #255	; 0xff
    9796:	fa22 f303 	lsr.w	r3, r2, r3
    979a:	b2db      	uxtb	r3, r3
    979c:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    97a0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    97a4:	aa03      	add	r2, sp, #12
    97a6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    97aa:	4618      	mov	r0, r3
    97ac:	f001 fb6c 	bl	ae88 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    97b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    97b4:	3301      	adds	r3, #1
    97b6:	f88d 301f 	strb.w	r3, [sp, #31]
    97ba:	f89d 201f 	ldrb.w	r2, [sp, #31]
    97be:	f89d 3019 	ldrb.w	r3, [sp, #25]
    97c2:	429a      	cmp	r2, r3
    97c4:	f4ff af12 	bcc.w	95ec <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    97c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    97cc:	4618      	mov	r0, r3
    97ce:	b009      	add	sp, #36	; 0x24
    97d0:	f85d fb04 	ldr.w	pc, [sp], #4
    97d4:	1fff8cec 	.word	0x1fff8cec
    97d8:	1fff8ce8 	.word	0x1fff8ce8

000097dc <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    97dc:	b500      	push	{lr}
    97de:	b089      	sub	sp, #36	; 0x24
    97e0:	9202      	str	r2, [sp, #8]
    97e2:	9301      	str	r3, [sp, #4]
    97e4:	4603      	mov	r3, r0
    97e6:	f88d 300f 	strb.w	r3, [sp, #15]
    97ea:	460b      	mov	r3, r1
    97ec:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    97f0:	2300      	movs	r3, #0
    97f2:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    97f6:	4b62      	ldr	r3, [pc, #392]	; (9980 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    97f8:	681b      	ldr	r3, [r3, #0]
    97fa:	681a      	ldr	r2, [r3, #0]
    97fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9800:	4413      	add	r3, r2
    9802:	7c1b      	ldrb	r3, [r3, #16]
    9804:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9808:	9b02      	ldr	r3, [sp, #8]
    980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    980c:	691b      	ldr	r3, [r3, #16]
    980e:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9810:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9814:	f003 0307 	and.w	r3, r3, #7
    9818:	b2db      	uxtb	r3, r3
    981a:	2b00      	cmp	r3, #0
    981c:	d006      	beq.n	982c <Adc_Ipw_ConfigurePdbConversion+0x50>
    981e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9822:	08db      	lsrs	r3, r3, #3
    9824:	b2db      	uxtb	r3, r3
    9826:	3301      	adds	r3, #1
    9828:	b2db      	uxtb	r3, r3
    982a:	e003      	b.n	9834 <Adc_Ipw_ConfigurePdbConversion+0x58>
    982c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9830:	08db      	lsrs	r3, r3, #3
    9832:	b2db      	uxtb	r3, r3
    9834:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9838:	f89d 301b 	ldrb.w	r3, [sp, #27]
    983c:	4618      	mov	r0, r3
    983e:	f001 fa51 	bl	ace4 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    9842:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9846:	9901      	ldr	r1, [sp, #4]
    9848:	4618      	mov	r0, r3
    984a:	f001 fa79 	bl	ad40 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    984e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9852:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9856:	f89d 000f 	ldrb.w	r0, [sp, #15]
    985a:	9a02      	ldr	r2, [sp, #8]
    985c:	f7ff fe84 	bl	9568 <Adc_Ipw_ConfigurePdbChannels>
    9860:	4603      	mov	r3, r0
    9862:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9866:	9b02      	ldr	r3, [sp, #8]
    9868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    986a:	7bdb      	ldrb	r3, [r3, #15]
    986c:	2b00      	cmp	r3, #0
    986e:	d02f      	beq.n	98d0 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9870:	9b02      	ldr	r3, [sp, #8]
    9872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9874:	7b9b      	ldrb	r3, [r3, #14]
    9876:	f083 0301 	eor.w	r3, r3, #1
    987a:	b2db      	uxtb	r3, r3
    987c:	2b00      	cmp	r3, #0
    987e:	d017      	beq.n	98b0 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9880:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9884:	493f      	ldr	r1, [pc, #252]	; (9984 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9886:	4613      	mov	r3, r2
    9888:	009b      	lsls	r3, r3, #2
    988a:	4413      	add	r3, r2
    988c:	009b      	lsls	r3, r3, #2
    988e:	440b      	add	r3, r1
    9890:	3310      	adds	r3, #16
    9892:	781b      	ldrb	r3, [r3, #0]
    9894:	461a      	mov	r2, r3
    9896:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    989a:	4413      	add	r3, r2
    989c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    98a0:	3b01      	subs	r3, #1
    98a2:	005b      	lsls	r3, r3, #1
    98a4:	9a05      	ldr	r2, [sp, #20]
    98a6:	4413      	add	r3, r2
    98a8:	881b      	ldrh	r3, [r3, #0]
    98aa:	f8ad 301c 	strh.w	r3, [sp, #28]
    98ae:	e01a      	b.n	98e6 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    98b0:	9b05      	ldr	r3, [sp, #20]
    98b2:	881a      	ldrh	r2, [r3, #0]
    98b4:	9b02      	ldr	r3, [sp, #8]
    98b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    98b8:	8999      	ldrh	r1, [r3, #12]
    98ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    98be:	3b01      	subs	r3, #1
    98c0:	b29b      	uxth	r3, r3
    98c2:	fb11 f303 	smulbb	r3, r1, r3
    98c6:	b29b      	uxth	r3, r3
    98c8:	4413      	add	r3, r2
    98ca:	f8ad 301c 	strh.w	r3, [sp, #28]
    98ce:	e00a      	b.n	98e6 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    98d0:	9b02      	ldr	r3, [sp, #8]
    98d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    98d4:	899a      	ldrh	r2, [r3, #12]
    98d6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    98da:	3b01      	subs	r3, #1
    98dc:	b29b      	uxth	r3, r3
    98de:	fb12 f303 	smulbb	r3, r2, r3
    98e2:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    98e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    98ea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    98ee:	4611      	mov	r1, r2
    98f0:	4618      	mov	r0, r3
    98f2:	f001 faa5 	bl	ae40 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    98f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    98fa:	4618      	mov	r0, r3
    98fc:	f001 fa88 	bl	ae10 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    9900:	2300      	movs	r3, #0
    9902:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    9906:	2300      	movs	r3, #0
    9908:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    990c:	2300      	movs	r3, #0
    990e:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9912:	e00c      	b.n	992e <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9914:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9918:	aa04      	add	r2, sp, #16
    991a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    991e:	4618      	mov	r0, r3
    9920:	f001 fab2 	bl	ae88 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    9924:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9928:	3301      	adds	r3, #1
    992a:	f88d 301f 	strb.w	r3, [sp, #31]
    992e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9932:	2b01      	cmp	r3, #1
    9934:	d9ee      	bls.n	9914 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    9936:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    993a:	4912      	ldr	r1, [pc, #72]	; (9984 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    993c:	4613      	mov	r3, r2
    993e:	009b      	lsls	r3, r3, #2
    9940:	4413      	add	r3, r2
    9942:	009b      	lsls	r3, r3, #2
    9944:	440b      	add	r3, r1
    9946:	3310      	adds	r3, #16
    9948:	7819      	ldrb	r1, [r3, #0]
    994a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    994e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9952:	440b      	add	r3, r1
    9954:	b2d8      	uxtb	r0, r3
    9956:	490b      	ldr	r1, [pc, #44]	; (9984 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9958:	4613      	mov	r3, r2
    995a:	009b      	lsls	r3, r3, #2
    995c:	4413      	add	r3, r2
    995e:	009b      	lsls	r3, r3, #2
    9960:	440b      	add	r3, r1
    9962:	3310      	adds	r3, #16
    9964:	4602      	mov	r2, r0
    9966:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    9968:	9b01      	ldr	r3, [sp, #4]
    996a:	2b0f      	cmp	r3, #15
    996c:	d104      	bne.n	9978 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    996e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9972:	4618      	mov	r0, r3
    9974:	f001 fa24 	bl	adc0 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    9978:	bf00      	nop
    997a:	b009      	add	sp, #36	; 0x24
    997c:	f85d fb04 	ldr.w	pc, [sp], #4
    9980:	1fff8ce8 	.word	0x1fff8ce8
    9984:	1fff8cec 	.word	0x1fff8cec

00009988 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    9988:	b500      	push	{lr}
    998a:	b087      	sub	sp, #28
    998c:	4603      	mov	r3, r0
    998e:	f88d 3007 	strb.w	r3, [sp, #7]
    9992:	460b      	mov	r3, r1
    9994:	f8ad 3004 	strh.w	r3, [sp, #4]
    9998:	4613      	mov	r3, r2
    999a:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    999e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99a2:	4a36      	ldr	r2, [pc, #216]	; (9a7c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    99a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a8:	68da      	ldr	r2, [r3, #12]
    99aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    99ae:	005b      	lsls	r3, r3, #1
    99b0:	4413      	add	r3, r2
    99b2:	881b      	ldrh	r3, [r3, #0]
    99b4:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    99b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99bc:	4a2f      	ldr	r2, [pc, #188]	; (9a7c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    99be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c2:	681a      	ldr	r2, [r3, #0]
    99c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99c8:	4413      	add	r3, r2
    99ca:	7c1b      	ldrb	r3, [r3, #16]
    99cc:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    99d0:	2300      	movs	r3, #0
    99d2:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    99d6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    99da:	4618      	mov	r0, r3
    99dc:	f001 fb6e 	bl	b0bc <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    99e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99e4:	4a25      	ldr	r2, [pc, #148]	; (9a7c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    99e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ea:	685a      	ldr	r2, [r3, #4]
    99ec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    99f0:	2134      	movs	r1, #52	; 0x34
    99f2:	fb01 f303 	mul.w	r3, r1, r3
    99f6:	4413      	add	r3, r2
    99f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    99fc:	2b01      	cmp	r3, #1
    99fe:	d114      	bne.n	9a2a <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    9a00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a04:	4a1d      	ldr	r2, [pc, #116]	; (9a7c <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a0a:	685a      	ldr	r2, [r3, #4]
    9a0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9a10:	2134      	movs	r1, #52	; 0x34
    9a12:	fb01 f303 	mul.w	r3, r1, r3
    9a16:	4413      	add	r3, r2
    9a18:	689b      	ldr	r3, [r3, #8]
    9a1a:	2b01      	cmp	r3, #1
    9a1c:	d105      	bne.n	9a2a <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    9a1e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9a22:	2100      	movs	r1, #0
    9a24:	4618      	mov	r0, r3
    9a26:	f7ff f827 	bl	8a78 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9a2a:	2300      	movs	r3, #0
    9a2c:	f88d 3016 	strb.w	r3, [sp, #22]
    9a30:	e013      	b.n	9a5a <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    9a32:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9a36:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9a3a:	2201      	movs	r2, #1
    9a3c:	4618      	mov	r0, r3
    9a3e:	f7ff f8cd 	bl	8bdc <Adc_Ip_SetDisabledChannel>
    9a42:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    9a44:	9b03      	ldr	r3, [sp, #12]
    9a46:	2b02      	cmp	r3, #2
    9a48:	d102      	bne.n	9a50 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    9a4a:	2301      	movs	r3, #1
    9a4c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9a50:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9a54:	3301      	adds	r3, #1
    9a56:	f88d 3016 	strb.w	r3, [sp, #22]
    9a5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a5e:	4a08      	ldr	r2, [pc, #32]	; (9a80 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    9a60:	00db      	lsls	r3, r3, #3
    9a62:	4413      	add	r3, r2
    9a64:	799b      	ldrb	r3, [r3, #6]
    9a66:	f89d 2016 	ldrb.w	r2, [sp, #22]
    9a6a:	429a      	cmp	r2, r3
    9a6c:	d3e1      	bcc.n	9a32 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    9a6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9a72:	4618      	mov	r0, r3
    9a74:	b007      	add	sp, #28
    9a76:	f85d fb04 	ldr.w	pc, [sp], #4
    9a7a:	bf00      	nop
    9a7c:	1fff8ce8 	.word	0x1fff8ce8
    9a80:	1fff8d00 	.word	0x1fff8d00

00009a84 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9a84:	b500      	push	{lr}
    9a86:	b085      	sub	sp, #20
    9a88:	4603      	mov	r3, r0
    9a8a:	9100      	str	r1, [sp, #0]
    9a8c:	f88d 3007 	strb.w	r3, [sp, #7]
    9a90:	4613      	mov	r3, r2
    9a92:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9a96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a9a:	4a14      	ldr	r2, [pc, #80]	; (9aec <Adc_Ipw_PrepareGroupStart+0x68>)
    9a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa0:	681a      	ldr	r2, [r3, #0]
    9aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aa6:	4413      	add	r3, r2
    9aa8:	7c1b      	ldrb	r3, [r3, #16]
    9aaa:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    9aae:	9b00      	ldr	r3, [sp, #0]
    9ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9ab2:	781b      	ldrb	r3, [r3, #0]
    9ab4:	2b01      	cmp	r3, #1
    9ab6:	d108      	bne.n	9aca <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    9ab8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9abc:	9b00      	ldr	r3, [sp, #0]
    9abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9ac0:	685b      	ldr	r3, [r3, #4]
    9ac2:	461a      	mov	r2, r3
    9ac4:	2101      	movs	r1, #1
    9ac6:	f7fe ff51 	bl	896c <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    9aca:	9b00      	ldr	r3, [sp, #0]
    9acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9ace:	7a1b      	ldrb	r3, [r3, #8]
    9ad0:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9ad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ad8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9adc:	4611      	mov	r1, r2
    9ade:	4618      	mov	r0, r3
    9ae0:	f7fe ff62 	bl	89a8 <Adc_Ip_SetSampleTime>
}
    9ae4:	bf00      	nop
    9ae6:	b005      	add	sp, #20
    9ae8:	f85d fb04 	ldr.w	pc, [sp], #4
    9aec:	1fff8ce8 	.word	0x1fff8ce8

00009af0 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9af0:	b084      	sub	sp, #16
    9af2:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9af4:	2300      	movs	r3, #0
    9af6:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    9afa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9afe:	4618      	mov	r0, r3
    9b00:	b004      	add	sp, #16
    9b02:	4770      	bx	lr

00009b04 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    9b04:	b500      	push	{lr}
    9b06:	b08f      	sub	sp, #60	; 0x3c
    9b08:	9202      	str	r2, [sp, #8]
    9b0a:	461a      	mov	r2, r3
    9b0c:	4603      	mov	r3, r0
    9b0e:	f88d 300f 	strb.w	r3, [sp, #15]
    9b12:	460b      	mov	r3, r1
    9b14:	f8ad 300c 	strh.w	r3, [sp, #12]
    9b18:	4613      	mov	r3, r2
    9b1a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9b1e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9b22:	4a6d      	ldr	r2, [pc, #436]	; (9cd8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b28:	68da      	ldr	r2, [r3, #12]
    9b2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9b2e:	005b      	lsls	r3, r3, #1
    9b30:	4413      	add	r3, r2
    9b32:	881b      	ldrh	r3, [r3, #0]
    9b34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9b38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9b3c:	4a66      	ldr	r2, [pc, #408]	; (9cd8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b42:	685a      	ldr	r2, [r3, #4]
    9b44:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    9b48:	2134      	movs	r1, #52	; 0x34
    9b4a:	fb01 f303 	mul.w	r3, r1, r3
    9b4e:	4413      	add	r3, r2
    9b50:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9b52:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9b56:	4a60      	ldr	r2, [pc, #384]	; (9cd8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b5c:	681a      	ldr	r2, [r3, #0]
    9b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b62:	4413      	add	r3, r2
    9b64:	7c1b      	ldrb	r3, [r3, #16]
    9b66:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    9b6a:	2300      	movs	r3, #0
    9b6c:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9b6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9b72:	495a      	ldr	r1, [pc, #360]	; (9cdc <Adc_Ipw_ConfigureConversion+0x1d8>)
    9b74:	4613      	mov	r3, r2
    9b76:	009b      	lsls	r3, r3, #2
    9b78:	4413      	add	r3, r2
    9b7a:	009b      	lsls	r3, r3, #2
    9b7c:	440b      	add	r3, r1
    9b7e:	3310      	adds	r3, #16
    9b80:	781b      	ldrb	r3, [r3, #0]
    9b82:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    9b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9b88:	6a1b      	ldr	r3, [r3, #32]
    9b8a:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9b8c:	2300      	movs	r3, #0
    9b8e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9b92:	e030      	b.n	9bf6 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9b94:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9b98:	4a4f      	ldr	r2, [pc, #316]	; (9cd8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b9e:	681b      	ldr	r3, [r3, #0]
    9ba0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9baa:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9bae:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9bb2:	440b      	add	r3, r1
    9bb4:	005b      	lsls	r3, r3, #1
    9bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    9bb8:	440b      	add	r3, r1
    9bba:	881b      	ldrh	r3, [r3, #0]
    9bbc:	4619      	mov	r1, r3
    9bbe:	460b      	mov	r3, r1
    9bc0:	005b      	lsls	r3, r3, #1
    9bc2:	440b      	add	r3, r1
    9bc4:	009b      	lsls	r3, r3, #2
    9bc6:	4413      	add	r3, r2
    9bc8:	685b      	ldr	r3, [r3, #4]
    9bca:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    9bcc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9bd0:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9bd4:	9b08      	ldr	r3, [sp, #32]
    9bd6:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    9bd8:	2300      	movs	r3, #0
    9bda:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9bde:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9be2:	aa05      	add	r2, sp, #20
    9be4:	4611      	mov	r1, r2
    9be6:	4618      	mov	r0, r3
    9be8:	f7fe ffc8 	bl	8b7c <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9bec:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9bf0:	3301      	adds	r3, #1
    9bf2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9bf6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    9bfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9bfe:	3b01      	subs	r3, #1
    9c00:	429a      	cmp	r2, r3
    9c02:	d3c7      	bcc.n	9b94 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9c04:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9c08:	4a33      	ldr	r2, [pc, #204]	; (9cd8 <Adc_Ipw_ConfigureConversion+0x1d4>)
    9c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c0e:	681b      	ldr	r3, [r3, #0]
    9c10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9c1a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9c1e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9c22:	440b      	add	r3, r1
    9c24:	005b      	lsls	r3, r3, #1
    9c26:	990a      	ldr	r1, [sp, #40]	; 0x28
    9c28:	440b      	add	r3, r1
    9c2a:	881b      	ldrh	r3, [r3, #0]
    9c2c:	4619      	mov	r1, r3
    9c2e:	460b      	mov	r3, r1
    9c30:	005b      	lsls	r3, r3, #1
    9c32:	440b      	add	r3, r1
    9c34:	009b      	lsls	r3, r3, #2
    9c36:	4413      	add	r3, r2
    9c38:	685b      	ldr	r3, [r3, #4]
    9c3a:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    9c3c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9c40:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9c44:	9b08      	ldr	r3, [sp, #32]
    9c46:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d103      	bne.n	9c5a <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9c52:	2301      	movs	r3, #1
    9c54:	f88d 301c 	strb.w	r3, [sp, #28]
    9c58:	e002      	b.n	9c60 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    9c5a:	2300      	movs	r3, #0
    9c5c:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9c60:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9c64:	aa05      	add	r2, sp, #20
    9c66:	4611      	mov	r1, r2
    9c68:	4618      	mov	r0, r3
    9c6a:	f7fe ff87 	bl	8b7c <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9c6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c72:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9c76:	e014      	b.n	9ca2 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    9c78:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9c7c:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9c80:	231f      	movs	r3, #31
    9c82:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9c84:	2300      	movs	r3, #0
    9c86:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9c8a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9c8e:	aa05      	add	r2, sp, #20
    9c90:	4611      	mov	r1, r2
    9c92:	4618      	mov	r0, r3
    9c94:	f7fe ff72 	bl	8b7c <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9c98:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9c9c:	3301      	adds	r3, #1
    9c9e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9ca2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9ca6:	2b0f      	cmp	r3, #15
    9ca8:	d9e6      	bls.n	9c78 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9caa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9cae:	4a0c      	ldr	r2, [pc, #48]	; (9ce0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    9cb0:	00db      	lsls	r3, r3, #3
    9cb2:	4413      	add	r3, r2
    9cb4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9cb8:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    9cba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9cbe:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9cc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cc6:	9300      	str	r3, [sp, #0]
    9cc8:	9b02      	ldr	r3, [sp, #8]
    9cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9ccc:	f7ff fd86 	bl	97dc <Adc_Ipw_ConfigurePdbConversion>
}
    9cd0:	bf00      	nop
    9cd2:	b00f      	add	sp, #60	; 0x3c
    9cd4:	f85d fb04 	ldr.w	pc, [sp], #4
    9cd8:	1fff8ce8 	.word	0x1fff8ce8
    9cdc:	1fff8cec 	.word	0x1fff8cec
    9ce0:	1fff8d00 	.word	0x1fff8d00

00009ce4 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    9ce4:	b500      	push	{lr}
    9ce6:	b085      	sub	sp, #20
    9ce8:	9001      	str	r0, [sp, #4]
    9cea:	460b      	mov	r3, r1
    9cec:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9cf0:	2300      	movs	r3, #0
    9cf2:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9cf6:	2300      	movs	r3, #0
    9cf8:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    9cfc:	2300      	movs	r3, #0
    9cfe:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9d02:	2300      	movs	r3, #0
    9d04:	f88d 300f 	strb.w	r3, [sp, #15]
    9d08:	e027      	b.n	9d5a <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    9d0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d0e:	9a01      	ldr	r2, [sp, #4]
    9d10:	4413      	add	r3, r2
    9d12:	7f9b      	ldrb	r3, [r3, #30]
    9d14:	2b01      	cmp	r3, #1
    9d16:	d11b      	bne.n	9d50 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9d18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d1c:	9a01      	ldr	r2, [sp, #4]
    9d1e:	4413      	add	r3, r2
    9d20:	7c1b      	ldrb	r3, [r3, #16]
    9d22:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    9d26:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9d2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9d2e:	9b01      	ldr	r3, [sp, #4]
    9d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d34:	4619      	mov	r1, r3
    9d36:	f7fe fcb8 	bl	86aa <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    9d3a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9d3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9d42:	9b01      	ldr	r3, [sp, #4]
    9d44:	3202      	adds	r2, #2
    9d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d4a:	4619      	mov	r1, r3
    9d4c:	f000 fe9d 	bl	aa8a <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9d50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d54:	3301      	adds	r3, #1
    9d56:	f88d 300f 	strb.w	r3, [sp, #15]
    9d5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d0d3      	beq.n	9d0a <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    9d62:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    9d66:	4618      	mov	r0, r3
    9d68:	b005      	add	sp, #20
    9d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00009d6e <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    9d6e:	b500      	push	{lr}
    9d70:	b087      	sub	sp, #28
    9d72:	4603      	mov	r3, r0
    9d74:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9d78:	2300      	movs	r3, #0
    9d7a:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9d7e:	2300      	movs	r3, #0
    9d80:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    9d84:	2300      	movs	r3, #0
    9d86:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    9d8a:	2300      	movs	r3, #0
    9d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    9d90:	2300      	movs	r3, #0
    9d92:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9d96:	2300      	movs	r3, #0
    9d98:	f88d 3017 	strb.w	r3, [sp, #23]
    9d9c:	e026      	b.n	9dec <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9da2:	4a2e      	ldr	r2, [pc, #184]	; (9e5c <Adc_Ipw_DeInit+0xee>)
    9da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da8:	681a      	ldr	r2, [r3, #0]
    9daa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9dae:	4413      	add	r3, r2
    9db0:	7f9b      	ldrb	r3, [r3, #30]
    9db2:	2b01      	cmp	r3, #1
    9db4:	d115      	bne.n	9de2 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9db6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dba:	4a28      	ldr	r2, [pc, #160]	; (9e5c <Adc_Ipw_DeInit+0xee>)
    9dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc0:	681a      	ldr	r2, [r3, #0]
    9dc2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9dc6:	4413      	add	r3, r2
    9dc8:	7c1b      	ldrb	r3, [r3, #16]
    9dca:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    9dce:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9dd2:	4618      	mov	r0, r3
    9dd4:	f7fe fd40 	bl	8858 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    9dd8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9ddc:	4618      	mov	r0, r3
    9dde:	f000 fefd 	bl	abdc <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9de2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9de6:	3301      	adds	r3, #1
    9de8:	f88d 3017 	strb.w	r3, [sp, #23]
    9dec:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9df0:	2b00      	cmp	r3, #0
    9df2:	d0d4      	beq.n	9d9e <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9df4:	2300      	movs	r3, #0
    9df6:	f8ad 3014 	strh.w	r3, [sp, #20]
    9dfa:	e01e      	b.n	9e3a <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e00:	4a16      	ldr	r2, [pc, #88]	; (9e5c <Adc_Ipw_DeInit+0xee>)
    9e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e06:	685a      	ldr	r2, [r3, #4]
    9e08:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9e0c:	2134      	movs	r1, #52	; 0x34
    9e0e:	fb01 f303 	mul.w	r3, r1, r3
    9e12:	4413      	add	r3, r2
    9e14:	881b      	ldrh	r3, [r3, #0]
    9e16:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9e1a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9e1e:	4910      	ldr	r1, [pc, #64]	; (9e60 <Adc_Ipw_DeInit+0xf2>)
    9e20:	4613      	mov	r3, r2
    9e22:	009b      	lsls	r3, r3, #2
    9e24:	4413      	add	r3, r2
    9e26:	009b      	lsls	r3, r3, #2
    9e28:	440b      	add	r3, r1
    9e2a:	330c      	adds	r3, #12
    9e2c:	2200      	movs	r2, #0
    9e2e:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9e30:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9e34:	3301      	adds	r3, #1
    9e36:	f8ad 3014 	strh.w	r3, [sp, #20]
    9e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e3e:	4a07      	ldr	r2, [pc, #28]	; (9e5c <Adc_Ipw_DeInit+0xee>)
    9e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e44:	891b      	ldrh	r3, [r3, #8]
    9e46:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9e4a:	429a      	cmp	r2, r3
    9e4c:	d3d6      	bcc.n	9dfc <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    9e4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9e52:	4618      	mov	r0, r3
    9e54:	b007      	add	sp, #28
    9e56:	f85d fb04 	ldr.w	pc, [sp], #4
    9e5a:	bf00      	nop
    9e5c:	1fff8ce8 	.word	0x1fff8ce8
    9e60:	1fff8cec 	.word	0x1fff8cec

00009e64 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9e64:	b500      	push	{lr}
    9e66:	b089      	sub	sp, #36	; 0x24
    9e68:	4603      	mov	r3, r0
    9e6a:	460a      	mov	r2, r1
    9e6c:	f88d 300f 	strb.w	r3, [sp, #15]
    9e70:	4613      	mov	r3, r2
    9e72:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    9e76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e7a:	4a4c      	ldr	r2, [pc, #304]	; (9fac <Adc_Ipw_StartNormalConversion+0x148>)
    9e7c:	00db      	lsls	r3, r3, #3
    9e7e:	4413      	add	r3, r2
    9e80:	885b      	ldrh	r3, [r3, #2]
    9e82:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    9e86:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e8a:	4a49      	ldr	r2, [pc, #292]	; (9fb0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e90:	68da      	ldr	r2, [r3, #12]
    9e92:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9e96:	005b      	lsls	r3, r3, #1
    9e98:	4413      	add	r3, r2
    9e9a:	881b      	ldrh	r3, [r3, #0]
    9e9c:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9ea0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ea4:	4a42      	ldr	r2, [pc, #264]	; (9fb0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eaa:	685a      	ldr	r2, [r3, #4]
    9eac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9eb0:	2134      	movs	r1, #52	; 0x34
    9eb2:	fb01 f303 	mul.w	r3, r1, r3
    9eb6:	4413      	add	r3, r2
    9eb8:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9eba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ebe:	4a3c      	ldr	r2, [pc, #240]	; (9fb0 <Adc_Ipw_StartNormalConversion+0x14c>)
    9ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec4:	681a      	ldr	r2, [r3, #0]
    9ec6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9eca:	4413      	add	r3, r2
    9ecc:	7c1b      	ldrb	r3, [r3, #16]
    9ece:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9ed2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ed6:	4a35      	ldr	r2, [pc, #212]	; (9fac <Adc_Ipw_StartNormalConversion+0x148>)
    9ed8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9edc:	b29b      	uxth	r3, r3
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d05f      	beq.n	9fa2 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9ee2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9ee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9eea:	9905      	ldr	r1, [sp, #20]
    9eec:	4618      	mov	r0, r3
    9eee:	f7ff fdc9 	bl	9a84 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9ef2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9ef6:	492f      	ldr	r1, [pc, #188]	; (9fb4 <Adc_Ipw_StartNormalConversion+0x150>)
    9ef8:	4613      	mov	r3, r2
    9efa:	009b      	lsls	r3, r3, #2
    9efc:	4413      	add	r3, r2
    9efe:	009b      	lsls	r3, r3, #2
    9f00:	440b      	add	r3, r1
    9f02:	3310      	adds	r3, #16
    9f04:	2200      	movs	r2, #0
    9f06:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    9f08:	9b05      	ldr	r3, [sp, #20]
    9f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9f0e:	2b0f      	cmp	r3, #15
    9f10:	d806      	bhi.n	9f20 <Adc_Ipw_StartNormalConversion+0xbc>
    9f12:	9b05      	ldr	r3, [sp, #20]
    9f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9f18:	f003 030f 	and.w	r3, r3, #15
    9f1c:	b2db      	uxtb	r3, r3
    9f1e:	e000      	b.n	9f22 <Adc_Ipw_StartNormalConversion+0xbe>
    9f20:	2310      	movs	r3, #16
    9f22:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    9f26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f2a:	4a20      	ldr	r2, [pc, #128]	; (9fac <Adc_Ipw_StartNormalConversion+0x148>)
    9f2c:	00db      	lsls	r3, r3, #3
    9f2e:	4413      	add	r3, r2
    9f30:	799b      	ldrb	r3, [r3, #6]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d107      	bne.n	9f46 <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9f36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f3a:	4a1c      	ldr	r2, [pc, #112]	; (9fac <Adc_Ipw_StartNormalConversion+0x148>)
    9f3c:	00db      	lsls	r3, r3, #3
    9f3e:	4413      	add	r3, r2
    9f40:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9f44:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9f46:	2300      	movs	r3, #0
    9f48:	f88d 301f 	strb.w	r3, [sp, #31]
    9f4c:	e00c      	b.n	9f68 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9f4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f52:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f56:	4611      	mov	r1, r2
    9f58:	4618      	mov	r0, r3
    9f5a:	f7fe ff03 	bl	8d64 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9f5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f62:	3301      	adds	r3, #1
    9f64:	f88d 301f 	strb.w	r3, [sp, #31]
    9f68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f6c:	4a0f      	ldr	r2, [pc, #60]	; (9fac <Adc_Ipw_StartNormalConversion+0x148>)
    9f6e:	00db      	lsls	r3, r3, #3
    9f70:	4413      	add	r3, r2
    9f72:	799b      	ldrb	r3, [r3, #6]
    9f74:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f78:	429a      	cmp	r2, r3
    9f7a:	d3e8      	bcc.n	9f4e <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    9f7c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f80:	2101      	movs	r1, #1
    9f82:	4618      	mov	r0, r3
    9f84:	f7fe fd60 	bl	8a48 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9f88:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9f8c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9f90:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9f94:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f98:	9300      	str	r3, [sp, #0]
    9f9a:	4613      	mov	r3, r2
    9f9c:	220f      	movs	r2, #15
    9f9e:	f7ff fdb1 	bl	9b04 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9fa2:	bf00      	nop
    9fa4:	b009      	add	sp, #36	; 0x24
    9fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    9faa:	bf00      	nop
    9fac:	1fff8d00 	.word	0x1fff8d00
    9fb0:	1fff8ce8 	.word	0x1fff8ce8
    9fb4:	1fff8cec 	.word	0x1fff8cec

00009fb8 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9fb8:	b500      	push	{lr}
    9fba:	b085      	sub	sp, #20
    9fbc:	4603      	mov	r3, r0
    9fbe:	f88d 3007 	strb.w	r3, [sp, #7]
    9fc2:	460b      	mov	r3, r1
    9fc4:	f8ad 3004 	strh.w	r3, [sp, #4]
    9fc8:	4613      	mov	r3, r2
    9fca:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9fce:	2300      	movs	r3, #0
    9fd0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9fd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fd8:	4a24      	ldr	r2, [pc, #144]	; (a06c <Adc_Ipw_StopCurrentConversion+0xb4>)
    9fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fde:	681a      	ldr	r2, [r3, #0]
    9fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fe4:	4413      	add	r3, r2
    9fe6:	7c1b      	ldrb	r3, [r3, #16]
    9fe8:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9fec:	2300      	movs	r3, #0
    9fee:	f88d 300f 	strb.w	r3, [sp, #15]
    9ff2:	e014      	b.n	a01e <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9ff4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ff8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9ffc:	2200      	movs	r2, #0
    9ffe:	4618      	mov	r0, r3
    a000:	f7fe fdec 	bl	8bdc <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a004:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a008:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a00c:	4611      	mov	r1, r2
    a00e:	4618      	mov	r0, r3
    a010:	f7fe fea8 	bl	8d64 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a014:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a018:	3301      	adds	r3, #1
    a01a:	f88d 300f 	strb.w	r3, [sp, #15]
    a01e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a022:	4a13      	ldr	r2, [pc, #76]	; (a070 <Adc_Ipw_StopCurrentConversion+0xb8>)
    a024:	00db      	lsls	r3, r3, #3
    a026:	4413      	add	r3, r2
    a028:	799b      	ldrb	r3, [r3, #6]
    a02a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a02e:	429a      	cmp	r2, r3
    a030:	d3e0      	bcc.n	9ff4 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a032:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a036:	490f      	ldr	r1, [pc, #60]	; (a074 <Adc_Ipw_StopCurrentConversion+0xbc>)
    a038:	4613      	mov	r3, r2
    a03a:	009b      	lsls	r3, r3, #2
    a03c:	4413      	add	r3, r2
    a03e:	009b      	lsls	r3, r3, #2
    a040:	440b      	add	r3, r1
    a042:	3310      	adds	r3, #16
    a044:	2200      	movs	r2, #0
    a046:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    a048:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a04c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a050:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a054:	4618      	mov	r0, r3
    a056:	f7ff fc97 	bl	9988 <Adc_Ipw_StopConversionCheckTimeout>
    a05a:	4603      	mov	r3, r0
    a05c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    a060:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    a064:	4618      	mov	r0, r3
    a066:	b005      	add	sp, #20
    a068:	f85d fb04 	ldr.w	pc, [sp], #4
    a06c:	1fff8ce8 	.word	0x1fff8ce8
    a070:	1fff8d00 	.word	0x1fff8d00
    a074:	1fff8cec 	.word	0x1fff8cec

0000a078 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    a078:	b500      	push	{lr}
    a07a:	b085      	sub	sp, #20
    a07c:	4603      	mov	r3, r0
    a07e:	f88d 3007 	strb.w	r3, [sp, #7]
    a082:	460b      	mov	r3, r1
    a084:	f88d 3006 	strb.w	r3, [sp, #6]
    a088:	4613      	mov	r3, r2
    a08a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    a08e:	2301      	movs	r3, #1
    a090:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    a094:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a098:	f88d 300f 	strb.w	r3, [sp, #15]
    a09c:	e019      	b.n	a0d2 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    a09e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a0a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a0a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0aa:	1ad3      	subs	r3, r2, r3
    a0ac:	b2db      	uxtb	r3, r3
    a0ae:	4619      	mov	r1, r3
    a0b0:	f7fe fe3e 	bl	8d30 <Adc_Ip_GetConvCompleteFlag>
    a0b4:	4603      	mov	r3, r0
    a0b6:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    a0ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0be:	f083 0301 	eor.w	r3, r3, #1
    a0c2:	b2db      	uxtb	r3, r3
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d10b      	bne.n	a0e0 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    a0c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0cc:	3301      	adds	r3, #1
    a0ce:	f88d 300f 	strb.w	r3, [sp, #15]
    a0d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a0d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a0da:	429a      	cmp	r2, r3
    a0dc:	d3df      	bcc.n	a09e <Adc_Ipw_CheckValidConversion+0x26>
    a0de:	e000      	b.n	a0e2 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    a0e0:	bf00      	nop
        }
    }

    return ValidConversion;
    a0e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    a0e6:	4618      	mov	r0, r3
    a0e8:	b005      	add	sp, #20
    a0ea:	f85d fb04 	ldr.w	pc, [sp], #4

0000a0ee <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    a0ee:	b500      	push	{lr}
    a0f0:	b089      	sub	sp, #36	; 0x24
    a0f2:	9102      	str	r1, [sp, #8]
    a0f4:	9201      	str	r2, [sp, #4]
    a0f6:	461a      	mov	r2, r3
    a0f8:	4603      	mov	r3, r0
    a0fa:	f8ad 300e 	strh.w	r3, [sp, #14]
    a0fe:	4613      	mov	r3, r2
    a100:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    a104:	2300      	movs	r3, #0
    a106:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a10a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a10e:	4a33      	ldr	r2, [pc, #204]	; (a1dc <Adc_Ipw_ReadGroup+0xee>)
    a110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a114:	68da      	ldr	r2, [r3, #12]
    a116:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a11a:	005b      	lsls	r3, r3, #1
    a11c:	4413      	add	r3, r2
    a11e:	881b      	ldrh	r3, [r3, #0]
    a120:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a124:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a128:	4a2c      	ldr	r2, [pc, #176]	; (a1dc <Adc_Ipw_ReadGroup+0xee>)
    a12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a12e:	685a      	ldr	r2, [r3, #4]
    a130:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a134:	2134      	movs	r1, #52	; 0x34
    a136:	fb01 f303 	mul.w	r3, r1, r3
    a13a:	4413      	add	r3, r2
    a13c:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    a13e:	9b06      	ldr	r3, [sp, #24]
    a140:	789b      	ldrb	r3, [r3, #2]
    a142:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    a146:	9b06      	ldr	r3, [sp, #24]
    a148:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a14c:	2b01      	cmp	r3, #1
    a14e:	d124      	bne.n	a19a <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    a150:	9b06      	ldr	r3, [sp, #24]
    a152:	68db      	ldr	r3, [r3, #12]
    a154:	2b00      	cmp	r3, #0
    a156:	d111      	bne.n	a17c <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    a158:	9b06      	ldr	r3, [sp, #24]
    a15a:	695b      	ldr	r3, [r3, #20]
    a15c:	2b00      	cmp	r3, #0
    a15e:	d10d      	bne.n	a17c <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    a160:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a164:	4a1e      	ldr	r2, [pc, #120]	; (a1e0 <Adc_Ipw_ReadGroup+0xf2>)
    a166:	00db      	lsls	r3, r3, #3
    a168:	4413      	add	r3, r2
    a16a:	885b      	ldrh	r3, [r3, #2]
    a16c:	b29b      	uxth	r3, r3
    a16e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a172:	429a      	cmp	r2, r3
    a174:	d002      	beq.n	a17c <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    a176:	2301      	movs	r3, #1
    a178:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    a17c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a180:	2b00      	cmp	r3, #0
    a182:	d124      	bne.n	a1ce <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    a184:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a188:	9a01      	ldr	r2, [sp, #4]
    a18a:	9902      	ldr	r1, [sp, #8]
    a18c:	9806      	ldr	r0, [sp, #24]
    a18e:	f7ff f91f 	bl	93d0 <Adc_Ipw_ReadGroupNoInt>
    a192:	4603      	mov	r3, r0
    a194:	f88d 301f 	strb.w	r3, [sp, #31]
    a198:	e019      	b.n	a1ce <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a19a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a19e:	4911      	ldr	r1, [pc, #68]	; (a1e4 <Adc_Ipw_ReadGroup+0xf6>)
    a1a0:	4613      	mov	r3, r2
    a1a2:	009b      	lsls	r3, r3, #2
    a1a4:	4413      	add	r3, r2
    a1a6:	009b      	lsls	r3, r3, #2
    a1a8:	440b      	add	r3, r1
    a1aa:	681b      	ldr	r3, [r3, #0]
    a1ac:	2b01      	cmp	r3, #1
    a1ae:	d102      	bne.n	a1b6 <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    a1b0:	2301      	movs	r3, #1
    a1b2:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    a1b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d107      	bne.n	a1ce <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    a1be:	f89d 200d 	ldrb.w	r2, [sp, #13]
    a1c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a1c6:	9902      	ldr	r1, [sp, #8]
    a1c8:	4618      	mov	r0, r3
    a1ca:	f7ff f949 	bl	9460 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    a1ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a1d2:	4618      	mov	r0, r3
    a1d4:	b009      	add	sp, #36	; 0x24
    a1d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a1da:	bf00      	nop
    a1dc:	1fff8ce8 	.word	0x1fff8ce8
    a1e0:	1fff8d00 	.word	0x1fff8d00
    a1e4:	1fff8cec 	.word	0x1fff8cec

0000a1e8 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    a1e8:	b500      	push	{lr}
    a1ea:	b085      	sub	sp, #20
    a1ec:	4603      	mov	r3, r0
    a1ee:	9100      	str	r1, [sp, #0]
    a1f0:	f88d 3007 	strb.w	r3, [sp, #7]
    a1f4:	4613      	mov	r3, r2
    a1f6:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a1fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a1fe:	4a0e      	ldr	r2, [pc, #56]	; (a238 <Adc_Ipw_Calibrate+0x50>)
    a200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a204:	681a      	ldr	r2, [r3, #0]
    a206:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a20a:	4413      	add	r3, r2
    a20c:	7c1b      	ldrb	r3, [r3, #16]
    a20e:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    a212:	9b00      	ldr	r3, [sp, #0]
    a214:	2200      	movs	r2, #0
    a216:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    a218:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a21c:	4618      	mov	r0, r3
    a21e:	f7fe fdb9 	bl	8d94 <Adc_Ip_DoCalibration>
    a222:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    a224:	9b02      	ldr	r3, [sp, #8]
    a226:	2b00      	cmp	r3, #0
    a228:	d002      	beq.n	a230 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    a22a:	9b00      	ldr	r3, [sp, #0]
    a22c:	2201      	movs	r2, #1
    a22e:	701a      	strb	r2, [r3, #0]
    }
}
    a230:	bf00      	nop
    a232:	b005      	add	sp, #20
    a234:	f85d fb04 	ldr.w	pc, [sp], #4
    a238:	1fff8ce8 	.word	0x1fff8ce8

0000a23c <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    a23c:	2300      	movs	r3, #0
}
    a23e:	4618      	mov	r0, r3
    a240:	4770      	bx	lr
    a242:	bf00      	nop

0000a244 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    a244:	b500      	push	{lr}
    a246:	b083      	sub	sp, #12
    a248:	4603      	mov	r3, r0
    a24a:	460a      	mov	r2, r1
    a24c:	f88d 3007 	strb.w	r3, [sp, #7]
    a250:	4613      	mov	r3, r2
    a252:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    a256:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a25a:	2100      	movs	r1, #0
    a25c:	4618      	mov	r0, r3
    a25e:	f7fe fff3 	bl	9248 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a262:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a266:	4a09      	ldr	r2, [pc, #36]	; (a28c <Adc_Ipw_UpdateQueue+0x48>)
    a268:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a26c:	b29b      	uxth	r3, r3
    a26e:	2b00      	cmp	r3, #0
    a270:	d007      	beq.n	a282 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    a272:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a276:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a27a:	4611      	mov	r1, r2
    a27c:	4618      	mov	r0, r3
    a27e:	f7ff fdf1 	bl	9e64 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    a282:	bf00      	nop
    a284:	b003      	add	sp, #12
    a286:	f85d fb04 	ldr.w	pc, [sp], #4
    a28a:	bf00      	nop
    a28c:	1fff8d00 	.word	0x1fff8d00

0000a290 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    a290:	b510      	push	{r4, lr}
    a292:	b08a      	sub	sp, #40	; 0x28
    a294:	4604      	mov	r4, r0
    a296:	4608      	mov	r0, r1
    a298:	4611      	mov	r1, r2
    a29a:	461a      	mov	r2, r3
    a29c:	4623      	mov	r3, r4
    a29e:	f88d 300f 	strb.w	r3, [sp, #15]
    a2a2:	4603      	mov	r3, r0
    a2a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    a2a8:	460b      	mov	r3, r1
    a2aa:	f8ad 300a 	strh.w	r3, [sp, #10]
    a2ae:	4613      	mov	r3, r2
    a2b0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a2b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a2b8:	4a68      	ldr	r2, [pc, #416]	; (a45c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    a2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2be:	68da      	ldr	r2, [r3, #12]
    a2c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a2c4:	005b      	lsls	r3, r3, #1
    a2c6:	4413      	add	r3, r2
    a2c8:	881b      	ldrh	r3, [r3, #0]
    a2ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a2ce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2d2:	4963      	ldr	r1, [pc, #396]	; (a460 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a2d4:	4613      	mov	r3, r2
    a2d6:	009b      	lsls	r3, r3, #2
    a2d8:	4413      	add	r3, r2
    a2da:	009b      	lsls	r3, r3, #2
    a2dc:	440b      	add	r3, r1
    a2de:	3310      	adds	r3, #16
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    a2e6:	2300      	movs	r3, #0
    a2e8:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a2ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a2ee:	4a5b      	ldr	r2, [pc, #364]	; (a45c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    a2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f4:	681a      	ldr	r2, [r3, #0]
    a2f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2fa:	4413      	add	r3, r2
    a2fc:	7c1b      	ldrb	r3, [r3, #16]
    a2fe:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a302:	2300      	movs	r3, #0
    a304:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    a308:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a30c:	4a53      	ldr	r2, [pc, #332]	; (a45c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    a30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a312:	681b      	ldr	r3, [r3, #0]
    a314:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a31c:	695b      	ldr	r3, [r3, #20]
    a31e:	4618      	mov	r0, r3
    a320:	f7ff fbe6 	bl	9af0 <Adc_Ipw_CalculateNumsBitShift>
    a324:	4603      	mov	r3, r0
    a326:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    a32a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a32e:	4a4b      	ldr	r2, [pc, #300]	; (a45c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    a330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a334:	685a      	ldr	r2, [r3, #4]
    a336:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    a33a:	2134      	movs	r1, #52	; 0x34
    a33c:	fb01 f303 	mul.w	r3, r1, r3
    a340:	4413      	add	r3, r2
    a342:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a346:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a34a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a34e:	4a43      	ldr	r2, [pc, #268]	; (a45c <Adc_Ipw_CheckConversionChannels+0x1cc>)
    a350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a354:	685a      	ldr	r2, [r3, #4]
    a356:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    a35a:	2134      	movs	r1, #52	; 0x34
    a35c:	fb01 f303 	mul.w	r3, r1, r3
    a360:	4413      	add	r3, r2
    a362:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    a364:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a368:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a36c:	429a      	cmp	r2, r3
    a36e:	d870      	bhi.n	a452 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    a370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a374:	f003 030f 	and.w	r3, r3, #15
    a378:	b2db      	uxtb	r3, r3
    a37a:	2b00      	cmp	r3, #0
    a37c:	d104      	bne.n	a388 <Adc_Ipw_CheckConversionChannels+0xf8>
    a37e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a382:	3b10      	subs	r3, #16
    a384:	b2db      	uxtb	r3, r3
    a386:	e004      	b.n	a392 <Adc_Ipw_CheckConversionChannels+0x102>
    a388:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a38c:	f023 030f 	bic.w	r3, r3, #15
    a390:	b2db      	uxtb	r3, r3
    a392:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    a396:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a39a:	4931      	ldr	r1, [pc, #196]	; (a460 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a39c:	4613      	mov	r3, r2
    a39e:	009b      	lsls	r3, r3, #2
    a3a0:	4413      	add	r3, r2
    a3a2:	009b      	lsls	r3, r3, #2
    a3a4:	440b      	add	r3, r1
    a3a6:	330c      	adds	r3, #12
    a3a8:	6819      	ldr	r1, [r3, #0]
    a3aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a3ae:	482c      	ldr	r0, [pc, #176]	; (a460 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    a3b0:	4613      	mov	r3, r2
    a3b2:	009b      	lsls	r3, r3, #2
    a3b4:	4413      	add	r3, r2
    a3b6:	009b      	lsls	r3, r3, #2
    a3b8:	4403      	add	r3, r0
    a3ba:	3308      	adds	r3, #8
    a3bc:	881b      	ldrh	r3, [r3, #0]
    a3be:	b29b      	uxth	r3, r3
    a3c0:	005b      	lsls	r3, r3, #1
    a3c2:	440b      	add	r3, r1
    a3c4:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    a3c6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a3ca:	f89d 1013 	ldrb.w	r1, [sp, #19]
    a3ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a3d2:	4618      	mov	r0, r3
    a3d4:	f7ff fe50 	bl	a078 <Adc_Ipw_CheckValidConversion>
    a3d8:	4603      	mov	r3, r0
    a3da:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    a3de:	f89d 3012 	ldrb.w	r3, [sp, #18]
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	d032      	beq.n	a44c <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    a3e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3ea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a3ee:	e026      	b.n	a43e <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    a3f0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    a3f4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a3f8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3fc:	1ad3      	subs	r3, r2, r3
    a3fe:	b2db      	uxtb	r3, r3
    a400:	4619      	mov	r1, r3
    a402:	f7fe fcaf 	bl	8d64 <Adc_Ip_GetConvData>
    a406:	4603      	mov	r3, r0
    a408:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    a40c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a410:	f89d 301a 	ldrb.w	r3, [sp, #26]
    a414:	fa02 f303 	lsl.w	r3, r2, r3
    a418:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    a41c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a420:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    a424:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a428:	9300      	str	r3, [sp, #0]
    a42a:	460b      	mov	r3, r1
    a42c:	9907      	ldr	r1, [sp, #28]
    a42e:	9805      	ldr	r0, [sp, #20]
    a430:	f000 fa02 	bl	a838 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    a434:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a438:	3301      	adds	r3, #1
    a43a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    a43e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a442:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a446:	429a      	cmp	r2, r3
    a448:	d3d2      	bcc.n	a3f0 <Adc_Ipw_CheckConversionChannels+0x160>
    a44a:	e002      	b.n	a452 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    a44c:	2301      	movs	r3, #1
    a44e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    a452:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    a456:	4618      	mov	r0, r3
    a458:	b00a      	add	sp, #40	; 0x28
    a45a:	bd10      	pop	{r4, pc}
    a45c:	1fff8ce8 	.word	0x1fff8ce8
    a460:	1fff8cec 	.word	0x1fff8cec

0000a464 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a464:	b500      	push	{lr}
    a466:	b087      	sub	sp, #28
    a468:	4603      	mov	r3, r0
    a46a:	f88d 300f 	strb.w	r3, [sp, #15]
    a46e:	460b      	mov	r3, r1
    a470:	f8ad 300c 	strh.w	r3, [sp, #12]
    a474:	4613      	mov	r3, r2
    a476:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a47a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a47e:	4a33      	ldr	r2, [pc, #204]	; (a54c <Adc_Ipw_RestartConversion+0xe8>)
    a480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a484:	68da      	ldr	r2, [r3, #12]
    a486:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a48a:	005b      	lsls	r3, r3, #1
    a48c:	4413      	add	r3, r2
    a48e:	881b      	ldrh	r3, [r3, #0]
    a490:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a494:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a498:	4a2c      	ldr	r2, [pc, #176]	; (a54c <Adc_Ipw_RestartConversion+0xe8>)
    a49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a49e:	681a      	ldr	r2, [r3, #0]
    a4a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4a4:	4413      	add	r3, r2
    a4a6:	7c1b      	ldrb	r3, [r3, #16]
    a4a8:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    a4ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a4b0:	4a26      	ldr	r2, [pc, #152]	; (a54c <Adc_Ipw_RestartConversion+0xe8>)
    a4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b6:	685a      	ldr	r2, [r3, #4]
    a4b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a4bc:	2134      	movs	r1, #52	; 0x34
    a4be:	fb01 f303 	mul.w	r3, r1, r3
    a4c2:	4413      	add	r3, r2
    a4c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a4c8:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    a4cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a4d0:	2b0f      	cmp	r3, #15
    a4d2:	d805      	bhi.n	a4e0 <Adc_Ipw_RestartConversion+0x7c>
    a4d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a4d8:	f003 030f 	and.w	r3, r3, #15
    a4dc:	b2db      	uxtb	r3, r3
    a4de:	e000      	b.n	a4e2 <Adc_Ipw_RestartConversion+0x7e>
    a4e0:	2310      	movs	r3, #16
    a4e2:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    a4e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a4ea:	2b10      	cmp	r3, #16
    a4ec:	d811      	bhi.n	a512 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    a4ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a4f2:	4917      	ldr	r1, [pc, #92]	; (a550 <Adc_Ipw_RestartConversion+0xec>)
    a4f4:	4613      	mov	r3, r2
    a4f6:	009b      	lsls	r3, r3, #2
    a4f8:	4413      	add	r3, r2
    a4fa:	009b      	lsls	r3, r3, #2
    a4fc:	440b      	add	r3, r1
    a4fe:	3310      	adds	r3, #16
    a500:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a504:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a506:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a50a:	4618      	mov	r0, r3
    a50c:	f000 fc58 	bl	adc0 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    a510:	e017      	b.n	a542 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a512:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a516:	490e      	ldr	r1, [pc, #56]	; (a550 <Adc_Ipw_RestartConversion+0xec>)
    a518:	4613      	mov	r3, r2
    a51a:	009b      	lsls	r3, r3, #2
    a51c:	4413      	add	r3, r2
    a51e:	009b      	lsls	r3, r3, #2
    a520:	440b      	add	r3, r1
    a522:	3310      	adds	r3, #16
    a524:	2200      	movs	r2, #0
    a526:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a528:	f89d 2013 	ldrb.w	r2, [sp, #19]
    a52c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a530:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a534:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a538:	9300      	str	r3, [sp, #0]
    a53a:	4613      	mov	r3, r2
    a53c:	220f      	movs	r2, #15
    a53e:	f7ff fae1 	bl	9b04 <Adc_Ipw_ConfigureConversion>
}
    a542:	bf00      	nop
    a544:	b007      	add	sp, #28
    a546:	f85d fb04 	ldr.w	pc, [sp], #4
    a54a:	bf00      	nop
    a54c:	1fff8ce8 	.word	0x1fff8ce8
    a550:	1fff8cec 	.word	0x1fff8cec

0000a554 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    a554:	b084      	sub	sp, #16
    a556:	4603      	mov	r3, r0
    a558:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    a55c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a560:	4907      	ldr	r1, [pc, #28]	; (a580 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    a562:	4613      	mov	r3, r2
    a564:	009b      	lsls	r3, r3, #2
    a566:	4413      	add	r3, r2
    a568:	009b      	lsls	r3, r3, #2
    a56a:	440b      	add	r3, r1
    a56c:	3308      	adds	r3, #8
    a56e:	881b      	ldrh	r3, [r3, #0]
    a570:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    a574:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a578:	4618      	mov	r0, r3
    a57a:	b004      	add	sp, #16
    a57c:	4770      	bx	lr
    a57e:	bf00      	nop
    a580:	1fff8cec 	.word	0x1fff8cec

0000a584 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    a584:	b510      	push	{r4, lr}
    a586:	b084      	sub	sp, #16
    a588:	4604      	mov	r4, r0
    a58a:	4608      	mov	r0, r1
    a58c:	4611      	mov	r1, r2
    a58e:	461a      	mov	r2, r3
    a590:	4623      	mov	r3, r4
    a592:	f88d 3007 	strb.w	r3, [sp, #7]
    a596:	4603      	mov	r3, r0
    a598:	f8ad 3004 	strh.w	r3, [sp, #4]
    a59c:	460b      	mov	r3, r1
    a59e:	f8ad 3002 	strh.w	r3, [sp, #2]
    a5a2:	4613      	mov	r3, r2
    a5a4:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a5a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5ac:	4a4f      	ldr	r2, [pc, #316]	; (a6ec <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b2:	68da      	ldr	r2, [r3, #12]
    a5b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a5b8:	005b      	lsls	r3, r3, #1
    a5ba:	4413      	add	r3, r2
    a5bc:	881b      	ldrh	r3, [r3, #0]
    a5be:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    a5c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a5c6:	494a      	ldr	r1, [pc, #296]	; (a6f0 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a5c8:	4613      	mov	r3, r2
    a5ca:	009b      	lsls	r3, r3, #2
    a5cc:	4413      	add	r3, r2
    a5ce:	009b      	lsls	r3, r3, #2
    a5d0:	440b      	add	r3, r1
    a5d2:	3304      	adds	r3, #4
    a5d4:	2201      	movs	r2, #1
    a5d6:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a5d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a5dc:	4944      	ldr	r1, [pc, #272]	; (a6f0 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a5de:	4613      	mov	r3, r2
    a5e0:	009b      	lsls	r3, r3, #2
    a5e2:	4413      	add	r3, r2
    a5e4:	009b      	lsls	r3, r3, #2
    a5e6:	440b      	add	r3, r1
    a5e8:	681b      	ldr	r3, [r3, #0]
    a5ea:	2b01      	cmp	r3, #1
    a5ec:	d109      	bne.n	a602 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    a5ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a5f2:	493f      	ldr	r1, [pc, #252]	; (a6f0 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a5f4:	4613      	mov	r3, r2
    a5f6:	009b      	lsls	r3, r3, #2
    a5f8:	4413      	add	r3, r2
    a5fa:	009b      	lsls	r3, r3, #2
    a5fc:	440b      	add	r3, r1
    a5fe:	2202      	movs	r2, #2
    a600:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    a602:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a606:	4618      	mov	r0, r3
    a608:	f7ff ffa4 	bl	a554 <Adc_Ipw_GetCurrentSampleCount>
    a60c:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    a60e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a612:	9a02      	ldr	r2, [sp, #8]
    a614:	429a      	cmp	r2, r3
    a616:	d35d      	bcc.n	a6d4 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    a618:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a61c:	4934      	ldr	r1, [pc, #208]	; (a6f0 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a61e:	4613      	mov	r3, r2
    a620:	009b      	lsls	r3, r3, #2
    a622:	4413      	add	r3, r2
    a624:	009b      	lsls	r3, r3, #2
    a626:	440b      	add	r3, r1
    a628:	2203      	movs	r2, #3
    a62a:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a62c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a630:	4a2e      	ldr	r2, [pc, #184]	; (a6ec <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a636:	685a      	ldr	r2, [r3, #4]
    a638:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a63c:	2134      	movs	r1, #52	; 0x34
    a63e:	fb01 f303 	mul.w	r3, r1, r3
    a642:	4413      	add	r3, r2
    a644:	699b      	ldr	r3, [r3, #24]
    a646:	2b00      	cmp	r3, #0
    a648:	d117      	bne.n	a67a <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    a64a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a64e:	4a27      	ldr	r2, [pc, #156]	; (a6ec <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a654:	685a      	ldr	r2, [r3, #4]
    a656:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a65a:	2134      	movs	r1, #52	; 0x34
    a65c:	fb01 f303 	mul.w	r3, r1, r3
    a660:	4413      	add	r3, r2
    a662:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a664:	2b01      	cmp	r3, #1
    a666:	d108      	bne.n	a67a <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a668:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a66c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a670:	4611      	mov	r1, r2
    a672:	4618      	mov	r0, r3
    a674:	f7ff fde6 	bl	a244 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a678:	e035      	b.n	a6e6 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a67a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a67e:	4a1b      	ldr	r2, [pc, #108]	; (a6ec <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a684:	685a      	ldr	r2, [r3, #4]
    a686:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a68a:	2134      	movs	r1, #52	; 0x34
    a68c:	fb01 f303 	mul.w	r3, r1, r3
    a690:	4413      	add	r3, r2
    a692:	689b      	ldr	r3, [r3, #8]
    a694:	2b01      	cmp	r3, #1
    a696:	d114      	bne.n	a6c2 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a698:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a69c:	4914      	ldr	r1, [pc, #80]	; (a6f0 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a69e:	4613      	mov	r3, r2
    a6a0:	009b      	lsls	r3, r3, #2
    a6a2:	4413      	add	r3, r2
    a6a4:	009b      	lsls	r3, r3, #2
    a6a6:	440b      	add	r3, r1
    a6a8:	3308      	adds	r3, #8
    a6aa:	2200      	movs	r2, #0
    a6ac:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a6ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a6b2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a6b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6ba:	4618      	mov	r0, r3
    a6bc:	f7ff fed2 	bl	a464 <Adc_Ipw_RestartConversion>
}
    a6c0:	e011      	b.n	a6e6 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a6c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a6c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6ca:	4611      	mov	r1, r2
    a6cc:	4618      	mov	r0, r3
    a6ce:	f7ff fdb9 	bl	a244 <Adc_Ipw_UpdateQueue>
}
    a6d2:	e008      	b.n	a6e6 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a6d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a6d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a6dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6e0:	4618      	mov	r0, r3
    a6e2:	f7ff febf 	bl	a464 <Adc_Ipw_RestartConversion>
}
    a6e6:	bf00      	nop
    a6e8:	b004      	add	sp, #16
    a6ea:	bd10      	pop	{r4, pc}
    a6ec:	1fff8ce8 	.word	0x1fff8ce8
    a6f0:	1fff8cec 	.word	0x1fff8cec

0000a6f4 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a6f4:	b510      	push	{r4, lr}
    a6f6:	b088      	sub	sp, #32
    a6f8:	4604      	mov	r4, r0
    a6fa:	4608      	mov	r0, r1
    a6fc:	4611      	mov	r1, r2
    a6fe:	461a      	mov	r2, r3
    a700:	4623      	mov	r3, r4
    a702:	f88d 300f 	strb.w	r3, [sp, #15]
    a706:	4603      	mov	r3, r0
    a708:	f8ad 300c 	strh.w	r3, [sp, #12]
    a70c:	460b      	mov	r3, r1
    a70e:	f88d 300e 	strb.w	r3, [sp, #14]
    a712:	4613      	mov	r3, r2
    a714:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a718:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a71c:	4a44      	ldr	r2, [pc, #272]	; (a830 <Adc_Ipw_EndConversion+0x13c>)
    a71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a722:	68da      	ldr	r2, [r3, #12]
    a724:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a728:	005b      	lsls	r3, r3, #1
    a72a:	4413      	add	r3, r2
    a72c:	881b      	ldrh	r3, [r3, #0]
    a72e:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a732:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a736:	4a3e      	ldr	r2, [pc, #248]	; (a830 <Adc_Ipw_EndConversion+0x13c>)
    a738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a73c:	685a      	ldr	r2, [r3, #4]
    a73e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a742:	2134      	movs	r1, #52	; 0x34
    a744:	fb01 f303 	mul.w	r3, r1, r3
    a748:	4413      	add	r3, r2
    a74a:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a74c:	9b06      	ldr	r3, [sp, #24]
    a74e:	8b9a      	ldrh	r2, [r3, #28]
    a750:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a754:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a758:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a75c:	f7ff fd98 	bl	a290 <Adc_Ipw_CheckConversionChannels>
    a760:	4603      	mov	r3, r0
    a762:	2b00      	cmp	r3, #0
    a764:	d160      	bne.n	a828 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a766:	9b06      	ldr	r3, [sp, #24]
    a768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a76c:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a770:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a774:	492f      	ldr	r1, [pc, #188]	; (a834 <Adc_Ipw_EndConversion+0x140>)
    a776:	4613      	mov	r3, r2
    a778:	009b      	lsls	r3, r3, #2
    a77a:	4413      	add	r3, r2
    a77c:	009b      	lsls	r3, r3, #2
    a77e:	440b      	add	r3, r1
    a780:	3310      	adds	r3, #16
    a782:	781b      	ldrb	r3, [r3, #0]
    a784:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a788:	429a      	cmp	r2, r3
    a78a:	d929      	bls.n	a7e0 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a78c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a790:	4928      	ldr	r1, [pc, #160]	; (a834 <Adc_Ipw_EndConversion+0x140>)
    a792:	4613      	mov	r3, r2
    a794:	009b      	lsls	r3, r3, #2
    a796:	4413      	add	r3, r2
    a798:	009b      	lsls	r3, r3, #2
    a79a:	440b      	add	r3, r1
    a79c:	3310      	adds	r3, #16
    a79e:	781b      	ldrb	r3, [r3, #0]
    a7a0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a7a4:	1ad3      	subs	r3, r2, r3
    a7a6:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a7aa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7ae:	2b0f      	cmp	r3, #15
    a7b0:	d805      	bhi.n	a7be <Adc_Ipw_EndConversion+0xca>
    a7b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a7b6:	f003 030f 	and.w	r3, r3, #15
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	e000      	b.n	a7c0 <Adc_Ipw_EndConversion+0xcc>
    a7be:	2310      	movs	r3, #16
    a7c0:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a7c4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a7c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a7cc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a7d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7d4:	9300      	str	r3, [sp, #0]
    a7d6:	4613      	mov	r3, r2
    a7d8:	220f      	movs	r2, #15
    a7da:	f7ff f993 	bl	9b04 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a7de:	e023      	b.n	a828 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a7e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a7e4:	4913      	ldr	r1, [pc, #76]	; (a834 <Adc_Ipw_EndConversion+0x140>)
    a7e6:	4613      	mov	r3, r2
    a7e8:	009b      	lsls	r3, r3, #2
    a7ea:	4413      	add	r3, r2
    a7ec:	009b      	lsls	r3, r3, #2
    a7ee:	440b      	add	r3, r1
    a7f0:	3308      	adds	r3, #8
    a7f2:	881b      	ldrh	r3, [r3, #0]
    a7f4:	b29b      	uxth	r3, r3
    a7f6:	3301      	adds	r3, #1
    a7f8:	b298      	uxth	r0, r3
    a7fa:	490e      	ldr	r1, [pc, #56]	; (a834 <Adc_Ipw_EndConversion+0x140>)
    a7fc:	4613      	mov	r3, r2
    a7fe:	009b      	lsls	r3, r3, #2
    a800:	4413      	add	r3, r2
    a802:	009b      	lsls	r3, r3, #2
    a804:	440b      	add	r3, r1
    a806:	3308      	adds	r3, #8
    a808:	4602      	mov	r2, r0
    a80a:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a80c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a810:	2b00      	cmp	r3, #0
    a812:	d009      	beq.n	a828 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a814:	9b06      	ldr	r3, [sp, #24]
    a816:	8b9a      	ldrh	r2, [r3, #28]
    a818:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a81c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a820:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a824:	f7ff feae 	bl	a584 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a828:	bf00      	nop
    a82a:	b008      	add	sp, #32
    a82c:	bd10      	pop	{r4, pc}
    a82e:	bf00      	nop
    a830:	1fff8ce8 	.word	0x1fff8ce8
    a834:	1fff8cec 	.word	0x1fff8cec

0000a838 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a838:	b084      	sub	sp, #16
    a83a:	9003      	str	r0, [sp, #12]
    a83c:	9102      	str	r1, [sp, #8]
    a83e:	4611      	mov	r1, r2
    a840:	461a      	mov	r2, r3
    a842:	460b      	mov	r3, r1
    a844:	f8ad 3006 	strh.w	r3, [sp, #6]
    a848:	4613      	mov	r3, r2
    a84a:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a84e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a852:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a856:	fb02 f303 	mul.w	r3, r2, r3
    a85a:	005b      	lsls	r3, r3, #1
    a85c:	9a02      	ldr	r2, [sp, #8]
    a85e:	4413      	add	r3, r2
    a860:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a864:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a866:	bf00      	nop
    a868:	b004      	add	sp, #16
    a86a:	4770      	bx	lr

0000a86c <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a86c:	b500      	push	{lr}
    a86e:	b085      	sub	sp, #20
    a870:	4603      	mov	r3, r0
    a872:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a876:	f7ff fce1 	bl	a23c <Adc_GetCoreID>
    a87a:	4603      	mov	r3, r0
    a87c:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a880:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a884:	b2db      	uxtb	r3, r3
    a886:	461a      	mov	r2, r3
    a888:	4b14      	ldr	r3, [pc, #80]	; (a8dc <Adc_Ipw_EndConversionNotification+0x70>)
    a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a88e:	681a      	ldr	r2, [r3, #0]
    a890:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a894:	4413      	add	r3, r2
    a896:	f893 3020 	ldrb.w	r3, [r3, #32]
    a89a:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a89e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8a2:	4a0f      	ldr	r2, [pc, #60]	; (a8e0 <Adc_Ipw_EndConversionNotification+0x74>)
    a8a4:	00db      	lsls	r3, r3, #3
    a8a6:	4413      	add	r3, r2
    a8a8:	885b      	ldrh	r3, [r3, #2]
    a8aa:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a8ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8b2:	4a0b      	ldr	r2, [pc, #44]	; (a8e0 <Adc_Ipw_EndConversionNotification+0x74>)
    a8b4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a8b8:	b29b      	uxth	r3, r3
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d009      	beq.n	a8d2 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a8be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a8c2:	b2db      	uxtb	r3, r3
    a8c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a8c8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a8cc:	2201      	movs	r2, #1
    a8ce:	f7ff ff11 	bl	a6f4 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a8d2:	bf00      	nop
    a8d4:	b005      	add	sp, #20
    a8d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a8da:	bf00      	nop
    a8dc:	1fff8ce8 	.word	0x1fff8ce8
    a8e0:	1fff8d00 	.word	0x1fff8d00

0000a8e4 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a8e4:	b500      	push	{lr}
    a8e6:	b085      	sub	sp, #20
    a8e8:	4603      	mov	r3, r0
    a8ea:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a8ee:	2300      	movs	r3, #0
    a8f0:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a8f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8f8:	4618      	mov	r0, r3
    a8fa:	f7ff ffb7 	bl	a86c <Adc_Ipw_EndConversionNotification>
}
    a8fe:	bf00      	nop
    a900:	b005      	add	sp, #20
    a902:	f85d fb04 	ldr.w	pc, [sp], #4
    a906:	bf00      	nop

0000a908 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a908:	b084      	sub	sp, #16
    a90a:	9003      	str	r0, [sp, #12]
    a90c:	9201      	str	r2, [sp, #4]
    a90e:	461a      	mov	r2, r3
    a910:	460b      	mov	r3, r1
    a912:	f88d 300b 	strb.w	r3, [sp, #11]
    a916:	4613      	mov	r3, r2
    a918:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a91c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a920:	2b00      	cmp	r3, #0
    a922:	d016      	beq.n	a952 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a924:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a928:	9903      	ldr	r1, [sp, #12]
    a92a:	4613      	mov	r3, r2
    a92c:	009b      	lsls	r3, r3, #2
    a92e:	4413      	add	r3, r2
    a930:	00db      	lsls	r3, r3, #3
    a932:	440b      	add	r3, r1
    a934:	3310      	adds	r3, #16
    a936:	6819      	ldr	r1, [r3, #0]
    a938:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a93c:	9b01      	ldr	r3, [sp, #4]
    a93e:	4319      	orrs	r1, r3
    a940:	9803      	ldr	r0, [sp, #12]
    a942:	4613      	mov	r3, r2
    a944:	009b      	lsls	r3, r3, #2
    a946:	4413      	add	r3, r2
    a948:	00db      	lsls	r3, r3, #3
    a94a:	4403      	add	r3, r0
    a94c:	3310      	adds	r3, #16
    a94e:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a950:	e016      	b.n	a980 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a952:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a956:	9903      	ldr	r1, [sp, #12]
    a958:	4613      	mov	r3, r2
    a95a:	009b      	lsls	r3, r3, #2
    a95c:	4413      	add	r3, r2
    a95e:	00db      	lsls	r3, r3, #3
    a960:	440b      	add	r3, r1
    a962:	3310      	adds	r3, #16
    a964:	6819      	ldr	r1, [r3, #0]
    a966:	9b01      	ldr	r3, [sp, #4]
    a968:	43db      	mvns	r3, r3
    a96a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a96e:	4019      	ands	r1, r3
    a970:	9803      	ldr	r0, [sp, #12]
    a972:	4613      	mov	r3, r2
    a974:	009b      	lsls	r3, r3, #2
    a976:	4413      	add	r3, r2
    a978:	00db      	lsls	r3, r3, #3
    a97a:	4403      	add	r3, r0
    a97c:	3310      	adds	r3, #16
    a97e:	6019      	str	r1, [r3, #0]
}
    a980:	bf00      	nop
    a982:	b004      	add	sp, #16
    a984:	4770      	bx	lr

0000a986 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a986:	b082      	sub	sp, #8
    a988:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a98a:	9b01      	ldr	r3, [sp, #4]
    a98c:	681b      	ldr	r3, [r3, #0]
    a98e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a992:	9b01      	ldr	r3, [sp, #4]
    a994:	601a      	str	r2, [r3, #0]
}
    a996:	bf00      	nop
    a998:	b002      	add	sp, #8
    a99a:	4770      	bx	lr

0000a99c <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a99c:	b082      	sub	sp, #8
    a99e:	9001      	str	r0, [sp, #4]
    a9a0:	460b      	mov	r3, r1
    a9a2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a9a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	d006      	beq.n	a9bc <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a9ae:	9b01      	ldr	r3, [sp, #4]
    a9b0:	681b      	ldr	r3, [r3, #0]
    a9b2:	f043 0202 	orr.w	r2, r3, #2
    a9b6:	9b01      	ldr	r3, [sp, #4]
    a9b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a9ba:	e005      	b.n	a9c8 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a9bc:	9b01      	ldr	r3, [sp, #4]
    a9be:	681b      	ldr	r3, [r3, #0]
    a9c0:	f023 0202 	bic.w	r2, r3, #2
    a9c4:	9b01      	ldr	r3, [sp, #4]
    a9c6:	601a      	str	r2, [r3, #0]
}
    a9c8:	bf00      	nop
    a9ca:	b002      	add	sp, #8
    a9cc:	4770      	bx	lr

0000a9ce <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a9ce:	b086      	sub	sp, #24
    a9d0:	9003      	str	r0, [sp, #12]
    a9d2:	460b      	mov	r3, r1
    a9d4:	9201      	str	r2, [sp, #4]
    a9d6:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a9da:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a9de:	9903      	ldr	r1, [sp, #12]
    a9e0:	4613      	mov	r3, r2
    a9e2:	009b      	lsls	r3, r3, #2
    a9e4:	4413      	add	r3, r2
    a9e6:	00db      	lsls	r3, r3, #3
    a9e8:	440b      	add	r3, r1
    a9ea:	3310      	adds	r3, #16
    a9ec:	681b      	ldr	r3, [r3, #0]
    a9ee:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a9f0:	9b05      	ldr	r3, [sp, #20]
    a9f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a9f6:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a9f8:	9b01      	ldr	r3, [sp, #4]
    a9fa:	781b      	ldrb	r3, [r3, #0]
    a9fc:	461a      	mov	r2, r3
    a9fe:	9b05      	ldr	r3, [sp, #20]
    aa00:	4313      	orrs	r3, r2
    aa02:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    aa04:	9b01      	ldr	r3, [sp, #4]
    aa06:	785b      	ldrb	r3, [r3, #1]
    aa08:	021b      	lsls	r3, r3, #8
    aa0a:	b29b      	uxth	r3, r3
    aa0c:	9a05      	ldr	r2, [sp, #20]
    aa0e:	4313      	orrs	r3, r2
    aa10:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    aa12:	9b01      	ldr	r3, [sp, #4]
    aa14:	789b      	ldrb	r3, [r3, #2]
    aa16:	041b      	lsls	r3, r3, #16
    aa18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    aa1c:	9a05      	ldr	r2, [sp, #20]
    aa1e:	4313      	orrs	r3, r2
    aa20:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    aa22:	f89d 200b 	ldrb.w	r2, [sp, #11]
    aa26:	9903      	ldr	r1, [sp, #12]
    aa28:	4613      	mov	r3, r2
    aa2a:	009b      	lsls	r3, r3, #2
    aa2c:	4413      	add	r3, r2
    aa2e:	00db      	lsls	r3, r3, #3
    aa30:	440b      	add	r3, r1
    aa32:	3310      	adds	r3, #16
    aa34:	9a05      	ldr	r2, [sp, #20]
    aa36:	601a      	str	r2, [r3, #0]
}
    aa38:	bf00      	nop
    aa3a:	b006      	add	sp, #24
    aa3c:	4770      	bx	lr

0000aa3e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    aa3e:	b082      	sub	sp, #8
    aa40:	9001      	str	r0, [sp, #4]
    aa42:	460b      	mov	r3, r1
    aa44:	f88d 3003 	strb.w	r3, [sp, #3]
    aa48:	4613      	mov	r3, r2
    aa4a:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    aa4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa52:	9901      	ldr	r1, [sp, #4]
    aa54:	4613      	mov	r3, r2
    aa56:	009b      	lsls	r3, r3, #2
    aa58:	4413      	add	r3, r2
    aa5a:	00db      	lsls	r3, r3, #3
    aa5c:	440b      	add	r3, r1
    aa5e:	3314      	adds	r3, #20
    aa60:	6819      	ldr	r1, [r3, #0]
    aa62:	f8bd 3000 	ldrh.w	r3, [sp]
    aa66:	041b      	lsls	r3, r3, #16
    aa68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    aa6c:	43db      	mvns	r3, r3
    aa6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa72:	4019      	ands	r1, r3
    aa74:	9801      	ldr	r0, [sp, #4]
    aa76:	4613      	mov	r3, r2
    aa78:	009b      	lsls	r3, r3, #2
    aa7a:	4413      	add	r3, r2
    aa7c:	00db      	lsls	r3, r3, #3
    aa7e:	4403      	add	r3, r0
    aa80:	3314      	adds	r3, #20
    aa82:	6019      	str	r1, [r3, #0]
}
    aa84:	bf00      	nop
    aa86:	b002      	add	sp, #8
    aa88:	4770      	bx	lr

0000aa8a <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    aa8a:	b500      	push	{lr}
    aa8c:	b087      	sub	sp, #28
    aa8e:	9001      	str	r0, [sp, #4]
    aa90:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa92:	4a50      	ldr	r2, [pc, #320]	; (abd4 <Pdb_Adc_Ip_Init+0x14a>)
    aa94:	9b01      	ldr	r3, [sp, #4]
    aa96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa9a:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    aa9c:	2300      	movs	r3, #0
    aa9e:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    aaa0:	9b00      	ldr	r3, [sp, #0]
    aaa2:	681b      	ldr	r3, [r3, #0]
    aaa4:	049b      	lsls	r3, r3, #18
    aaa6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    aaaa:	9a04      	ldr	r2, [sp, #16]
    aaac:	4313      	orrs	r3, r2
    aaae:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    aab0:	9b00      	ldr	r3, [sp, #0]
    aab2:	685b      	ldr	r3, [r3, #4]
    aab4:	031b      	lsls	r3, r3, #12
    aab6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    aaba:	9a04      	ldr	r2, [sp, #16]
    aabc:	4313      	orrs	r3, r2
    aabe:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    aac0:	9b00      	ldr	r3, [sp, #0]
    aac2:	689b      	ldr	r3, [r3, #8]
    aac4:	009b      	lsls	r3, r3, #2
    aac6:	f003 030c 	and.w	r3, r3, #12
    aaca:	9a04      	ldr	r2, [sp, #16]
    aacc:	4313      	orrs	r3, r2
    aace:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    aad0:	9b00      	ldr	r3, [sp, #0]
    aad2:	68db      	ldr	r3, [r3, #12]
    aad4:	021b      	lsls	r3, r3, #8
    aad6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    aada:	9a04      	ldr	r2, [sp, #16]
    aadc:	4313      	orrs	r3, r2
    aade:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    aae0:	9b00      	ldr	r3, [sp, #0]
    aae2:	7c1b      	ldrb	r3, [r3, #16]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d003      	beq.n	aaf0 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    aae8:	9b04      	ldr	r3, [sp, #16]
    aaea:	f043 0302 	orr.w	r3, r3, #2
    aaee:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    aaf0:	9b00      	ldr	r3, [sp, #0]
    aaf2:	7c5b      	ldrb	r3, [r3, #17]
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d003      	beq.n	ab00 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    aaf8:	9b04      	ldr	r3, [sp, #16]
    aafa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    aafe:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    ab00:	9b00      	ldr	r3, [sp, #0]
    ab02:	69db      	ldr	r3, [r3, #28]
    ab04:	2b00      	cmp	r3, #0
    ab06:	d003      	beq.n	ab10 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    ab08:	9b04      	ldr	r3, [sp, #16]
    ab0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ab0e:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    ab10:	9b03      	ldr	r3, [sp, #12]
    ab12:	9a04      	ldr	r2, [sp, #16]
    ab14:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    ab16:	9b00      	ldr	r3, [sp, #0]
    ab18:	8a5b      	ldrh	r3, [r3, #18]
    ab1a:	4619      	mov	r1, r3
    ab1c:	9801      	ldr	r0, [sp, #4]
    ab1e:	f000 f98f 	bl	ae40 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    ab22:	9b00      	ldr	r3, [sp, #0]
    ab24:	7d1b      	ldrb	r3, [r3, #20]
    ab26:	2b00      	cmp	r3, #0
    ab28:	d03e      	beq.n	aba8 <Pdb_Adc_Ip_Init+0x11e>
    ab2a:	9b00      	ldr	r3, [sp, #0]
    ab2c:	699b      	ldr	r3, [r3, #24]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d03a      	beq.n	aba8 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    ab32:	2300      	movs	r3, #0
    ab34:	f88d 3017 	strb.w	r3, [sp, #23]
    ab38:	e030      	b.n	ab9c <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    ab3a:	9b00      	ldr	r3, [sp, #0]
    ab3c:	6999      	ldr	r1, [r3, #24]
    ab3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab42:	4613      	mov	r3, r2
    ab44:	009b      	lsls	r3, r3, #2
    ab46:	4413      	add	r3, r2
    ab48:	009b      	lsls	r3, r3, #2
    ab4a:	440b      	add	r3, r1
    ab4c:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    ab4e:	9b02      	ldr	r3, [sp, #8]
    ab50:	7819      	ldrb	r1, [r3, #0]
    ab52:	9b02      	ldr	r3, [sp, #8]
    ab54:	3301      	adds	r3, #1
    ab56:	461a      	mov	r2, r3
    ab58:	9803      	ldr	r0, [sp, #12]
    ab5a:	f7ff ff38 	bl	a9ce <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ab5e:	2300      	movs	r3, #0
    ab60:	f88d 3016 	strb.w	r3, [sp, #22]
    ab64:	e011      	b.n	ab8a <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    ab66:	9b02      	ldr	r3, [sp, #8]
    ab68:	7819      	ldrb	r1, [r3, #0]
    ab6a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab6e:	9a02      	ldr	r2, [sp, #8]
    ab70:	005b      	lsls	r3, r3, #1
    ab72:	4413      	add	r3, r2
    ab74:	889b      	ldrh	r3, [r3, #4]
    ab76:	f89d 2016 	ldrb.w	r2, [sp, #22]
    ab7a:	9801      	ldr	r0, [sp, #4]
    ab7c:	f000 fa74 	bl	b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ab80:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab84:	3301      	adds	r3, #1
    ab86:	f88d 3016 	strb.w	r3, [sp, #22]
    ab8a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab8e:	2b07      	cmp	r3, #7
    ab90:	d9e9      	bls.n	ab66 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    ab92:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab96:	3301      	adds	r3, #1
    ab98:	f88d 3017 	strb.w	r3, [sp, #23]
    ab9c:	9b00      	ldr	r3, [sp, #0]
    ab9e:	7d1b      	ldrb	r3, [r3, #20]
    aba0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aba4:	429a      	cmp	r2, r3
    aba6:	d3c8      	bcc.n	ab3a <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    aba8:	9801      	ldr	r0, [sp, #4]
    abaa:	f000 f89b 	bl	ace4 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    abae:	9801      	ldr	r0, [sp, #4]
    abb0:	f000 f92e 	bl	ae10 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    abb4:	9b00      	ldr	r3, [sp, #0]
    abb6:	69da      	ldr	r2, [r3, #28]
    abb8:	4907      	ldr	r1, [pc, #28]	; (abd8 <Pdb_Adc_Ip_Init+0x14e>)
    abba:	9b01      	ldr	r3, [sp, #4]
    abbc:	00db      	lsls	r3, r3, #3
    abbe:	440b      	add	r3, r1
    abc0:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    abc2:	4a05      	ldr	r2, [pc, #20]	; (abd8 <Pdb_Adc_Ip_Init+0x14e>)
    abc4:	9b01      	ldr	r3, [sp, #4]
    abc6:	2101      	movs	r1, #1
    abc8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    abcc:	bf00      	nop
    abce:	b007      	add	sp, #28
    abd0:	f85d fb04 	ldr.w	pc, [sp], #4
    abd4:	00010ed8 	.word	0x00010ed8
    abd8:	1fff8da8 	.word	0x1fff8da8

0000abdc <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    abdc:	b500      	push	{lr}
    abde:	b097      	sub	sp, #92	; 0x5c
    abe0:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    abe2:	2300      	movs	r3, #0
    abe4:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    abe6:	2300      	movs	r3, #0
    abe8:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    abea:	2300      	movs	r3, #0
    abec:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    abee:	2300      	movs	r3, #0
    abf0:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    abf2:	2300      	movs	r3, #0
    abf4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    abf8:	2300      	movs	r3, #0
    abfa:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    abfe:	2300      	movs	r3, #0
    ac00:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    ac04:	2302      	movs	r3, #2
    ac06:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    ac0a:	2300      	movs	r3, #0
    ac0c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    ac10:	e04d      	b.n	acae <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    ac12:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac16:	4613      	mov	r3, r2
    ac18:	009b      	lsls	r3, r3, #2
    ac1a:	4413      	add	r3, r2
    ac1c:	009b      	lsls	r3, r3, #2
    ac1e:	aa16      	add	r2, sp, #88	; 0x58
    ac20:	4413      	add	r3, r2
    ac22:	3b4c      	subs	r3, #76	; 0x4c
    ac24:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac28:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    ac2a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac2e:	4613      	mov	r3, r2
    ac30:	009b      	lsls	r3, r3, #2
    ac32:	4413      	add	r3, r2
    ac34:	009b      	lsls	r3, r3, #2
    ac36:	aa16      	add	r2, sp, #88	; 0x58
    ac38:	4413      	add	r3, r2
    ac3a:	3b4b      	subs	r3, #75	; 0x4b
    ac3c:	2200      	movs	r2, #0
    ac3e:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    ac40:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac44:	4613      	mov	r3, r2
    ac46:	009b      	lsls	r3, r3, #2
    ac48:	4413      	add	r3, r2
    ac4a:	009b      	lsls	r3, r3, #2
    ac4c:	aa16      	add	r2, sp, #88	; 0x58
    ac4e:	4413      	add	r3, r2
    ac50:	3b4a      	subs	r3, #74	; 0x4a
    ac52:	2200      	movs	r2, #0
    ac54:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    ac56:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac5a:	4613      	mov	r3, r2
    ac5c:	009b      	lsls	r3, r3, #2
    ac5e:	4413      	add	r3, r2
    ac60:	009b      	lsls	r3, r3, #2
    ac62:	aa16      	add	r2, sp, #88	; 0x58
    ac64:	4413      	add	r3, r2
    ac66:	3b49      	subs	r3, #73	; 0x49
    ac68:	2200      	movs	r2, #0
    ac6a:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ac6c:	2300      	movs	r3, #0
    ac6e:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    ac72:	e013      	b.n	ac9c <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    ac74:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ac78:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    ac7c:	4613      	mov	r3, r2
    ac7e:	009b      	lsls	r3, r3, #2
    ac80:	4413      	add	r3, r2
    ac82:	005b      	lsls	r3, r3, #1
    ac84:	440b      	add	r3, r1
    ac86:	005b      	lsls	r3, r3, #1
    ac88:	aa16      	add	r2, sp, #88	; 0x58
    ac8a:	4413      	add	r3, r2
    ac8c:	2200      	movs	r2, #0
    ac8e:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ac92:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    ac96:	3301      	adds	r3, #1
    ac98:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    ac9c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    aca0:	2b07      	cmp	r3, #7
    aca2:	d9e7      	bls.n	ac74 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    aca4:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    aca8:	3301      	adds	r3, #1
    acaa:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    acae:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    acb2:	2b01      	cmp	r3, #1
    acb4:	d9ad      	bls.n	ac12 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    acb6:	ab03      	add	r3, sp, #12
    acb8:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    acba:	2300      	movs	r3, #0
    acbc:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    acbe:	ab0d      	add	r3, sp, #52	; 0x34
    acc0:	4619      	mov	r1, r3
    acc2:	9801      	ldr	r0, [sp, #4]
    acc4:	f7ff fee1 	bl	aa8a <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    acc8:	9801      	ldr	r0, [sp, #4]
    acca:	f000 f823 	bl	ad14 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    acce:	4a04      	ldr	r2, [pc, #16]	; (ace0 <Pdb_Adc_Ip_DeInit+0x104>)
    acd0:	9b01      	ldr	r3, [sp, #4]
    acd2:	2100      	movs	r1, #0
    acd4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    acd8:	bf00      	nop
    acda:	b017      	add	sp, #92	; 0x5c
    acdc:	f85d fb04 	ldr.w	pc, [sp], #4
    ace0:	1fff8da8 	.word	0x1fff8da8

0000ace4 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    ace4:	b500      	push	{lr}
    ace6:	b085      	sub	sp, #20
    ace8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    acea:	4a09      	ldr	r2, [pc, #36]	; (ad10 <Pdb_Adc_Ip_Enable+0x2c>)
    acec:	9b01      	ldr	r3, [sp, #4]
    acee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acf2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    acf4:	f001 fdbe 	bl	c874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    acf8:	9b03      	ldr	r3, [sp, #12]
    acfa:	681b      	ldr	r3, [r3, #0]
    acfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    ad00:	9b03      	ldr	r3, [sp, #12]
    ad02:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    ad04:	f001 fde2 	bl	c8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    ad08:	bf00      	nop
    ad0a:	b005      	add	sp, #20
    ad0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ad10:	00010ed8 	.word	0x00010ed8

0000ad14 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    ad14:	b500      	push	{lr}
    ad16:	b085      	sub	sp, #20
    ad18:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad1a:	4a08      	ldr	r2, [pc, #32]	; (ad3c <Pdb_Adc_Ip_Disable+0x28>)
    ad1c:	9b01      	ldr	r3, [sp, #4]
    ad1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad22:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    ad24:	f001 fdf8 	bl	c918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ad28:	9803      	ldr	r0, [sp, #12]
    ad2a:	f7ff fe2c 	bl	a986 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    ad2e:	f001 fe1f 	bl	c970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    ad32:	bf00      	nop
    ad34:	b005      	add	sp, #20
    ad36:	f85d fb04 	ldr.w	pc, [sp], #4
    ad3a:	bf00      	nop
    ad3c:	00010ed8 	.word	0x00010ed8

0000ad40 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    ad40:	b500      	push	{lr}
    ad42:	b085      	sub	sp, #20
    ad44:	9001      	str	r0, [sp, #4]
    ad46:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad48:	4a0e      	ldr	r2, [pc, #56]	; (ad84 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    ad4a:	9b01      	ldr	r3, [sp, #4]
    ad4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad50:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    ad52:	f001 fe33 	bl	c9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    ad56:	9b03      	ldr	r3, [sp, #12]
    ad58:	681b      	ldr	r3, [r3, #0]
    ad5a:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    ad5c:	9b02      	ldr	r3, [sp, #8]
    ad5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    ad62:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    ad64:	9b00      	ldr	r3, [sp, #0]
    ad66:	021b      	lsls	r3, r3, #8
    ad68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ad6c:	9a02      	ldr	r2, [sp, #8]
    ad6e:	4313      	orrs	r3, r2
    ad70:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    ad72:	9b03      	ldr	r3, [sp, #12]
    ad74:	9a02      	ldr	r2, [sp, #8]
    ad76:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    ad78:	f001 fe4c 	bl	ca14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    ad7c:	bf00      	nop
    ad7e:	b005      	add	sp, #20
    ad80:	f85d fb04 	ldr.w	pc, [sp], #4
    ad84:	00010ed8 	.word	0x00010ed8

0000ad88 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    ad88:	b500      	push	{lr}
    ad8a:	b085      	sub	sp, #20
    ad8c:	9001      	str	r0, [sp, #4]
    ad8e:	460b      	mov	r3, r1
    ad90:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ad94:	4a09      	ldr	r2, [pc, #36]	; (adbc <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    ad96:	9b01      	ldr	r3, [sp, #4]
    ad98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad9c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    ad9e:	f001 fe5f 	bl	ca60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    ada2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ada6:	4619      	mov	r1, r3
    ada8:	9803      	ldr	r0, [sp, #12]
    adaa:	f7ff fdf7 	bl	a99c <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    adae:	f001 fe83 	bl	cab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    adb2:	bf00      	nop
    adb4:	b005      	add	sp, #20
    adb6:	f85d fb04 	ldr.w	pc, [sp], #4
    adba:	bf00      	nop
    adbc:	00010ed8 	.word	0x00010ed8

0000adc0 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    adc0:	b500      	push	{lr}
    adc2:	b085      	sub	sp, #20
    adc4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    adc6:	4a09      	ldr	r2, [pc, #36]	; (adec <Pdb_Adc_Ip_SwTrigger+0x2c>)
    adc8:	9b01      	ldr	r3, [sp, #4]
    adca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adce:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    add0:	f001 fe98 	bl	cb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    add4:	9b03      	ldr	r3, [sp, #12]
    add6:	681b      	ldr	r3, [r3, #0]
    add8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    addc:	9b03      	ldr	r3, [sp, #12]
    adde:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    ade0:	f001 febc 	bl	cb5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    ade4:	bf00      	nop
    ade6:	b005      	add	sp, #20
    ade8:	f85d fb04 	ldr.w	pc, [sp], #4
    adec:	00010ed8 	.word	0x00010ed8

0000adf0 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    adf0:	b084      	sub	sp, #16
    adf2:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    adf4:	4a05      	ldr	r2, [pc, #20]	; (ae0c <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    adf6:	9b01      	ldr	r3, [sp, #4]
    adf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfc:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    adfe:	9b03      	ldr	r3, [sp, #12]
    ae00:	689b      	ldr	r3, [r3, #8]
    ae02:	b29b      	uxth	r3, r3
}
    ae04:	4618      	mov	r0, r3
    ae06:	b004      	add	sp, #16
    ae08:	4770      	bx	lr
    ae0a:	bf00      	nop
    ae0c:	00010ed8 	.word	0x00010ed8

0000ae10 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    ae10:	b500      	push	{lr}
    ae12:	b085      	sub	sp, #20
    ae14:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ae16:	4a09      	ldr	r2, [pc, #36]	; (ae3c <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    ae18:	9b01      	ldr	r3, [sp, #4]
    ae1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1e:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    ae20:	f001 fec2 	bl	cba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    ae24:	9b03      	ldr	r3, [sp, #12]
    ae26:	681b      	ldr	r3, [r3, #0]
    ae28:	f043 0201 	orr.w	r2, r3, #1
    ae2c:	9b03      	ldr	r3, [sp, #12]
    ae2e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    ae30:	f001 fee6 	bl	cc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    ae34:	bf00      	nop
    ae36:	b005      	add	sp, #20
    ae38:	f85d fb04 	ldr.w	pc, [sp], #4
    ae3c:	00010ed8 	.word	0x00010ed8

0000ae40 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    ae40:	b500      	push	{lr}
    ae42:	b085      	sub	sp, #20
    ae44:	9001      	str	r0, [sp, #4]
    ae46:	460b      	mov	r3, r1
    ae48:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ae4c:	4a0d      	ldr	r2, [pc, #52]	; (ae84 <Pdb_Adc_Ip_SetModulus+0x44>)
    ae4e:	9b01      	ldr	r3, [sp, #4]
    ae50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae54:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    ae56:	f002 f989 	bl	d16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    ae5a:	9b03      	ldr	r3, [sp, #12]
    ae5c:	685b      	ldr	r3, [r3, #4]
    ae5e:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    ae60:	9b02      	ldr	r3, [sp, #8]
    ae62:	0c1b      	lsrs	r3, r3, #16
    ae64:	041b      	lsls	r3, r3, #16
    ae66:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    ae68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ae6c:	9a02      	ldr	r2, [sp, #8]
    ae6e:	4313      	orrs	r3, r2
    ae70:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    ae72:	9b03      	ldr	r3, [sp, #12]
    ae74:	9a02      	ldr	r2, [sp, #8]
    ae76:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    ae78:	f002 f9a4 	bl	d1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    ae7c:	bf00      	nop
    ae7e:	b005      	add	sp, #20
    ae80:	f85d fb04 	ldr.w	pc, [sp], #4
    ae84:	00010ed8 	.word	0x00010ed8

0000ae88 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    ae88:	b500      	push	{lr}
    ae8a:	b087      	sub	sp, #28
    ae8c:	9003      	str	r0, [sp, #12]
    ae8e:	460b      	mov	r3, r1
    ae90:	9201      	str	r2, [sp, #4]
    ae92:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ae96:	4a0a      	ldr	r2, [pc, #40]	; (aec0 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    ae98:	9b03      	ldr	r3, [sp, #12]
    ae9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae9e:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    aea0:	f001 ff26 	bl	ccf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    aea4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aea8:	9a01      	ldr	r2, [sp, #4]
    aeaa:	4619      	mov	r1, r3
    aeac:	9805      	ldr	r0, [sp, #20]
    aeae:	f7ff fd8e 	bl	a9ce <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    aeb2:	f001 ff49 	bl	cd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    aeb6:	bf00      	nop
    aeb8:	b007      	add	sp, #28
    aeba:	f85d fb04 	ldr.w	pc, [sp], #4
    aebe:	bf00      	nop
    aec0:	00010ed8 	.word	0x00010ed8

0000aec4 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    aec4:	b084      	sub	sp, #16
    aec6:	9001      	str	r0, [sp, #4]
    aec8:	460b      	mov	r3, r1
    aeca:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aece:	4a0c      	ldr	r2, [pc, #48]	; (af00 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    aed0:	9b01      	ldr	r3, [sp, #4]
    aed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aed6:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    aed8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aedc:	9903      	ldr	r1, [sp, #12]
    aede:	4613      	mov	r3, r2
    aee0:	009b      	lsls	r3, r3, #2
    aee2:	4413      	add	r3, r2
    aee4:	00db      	lsls	r3, r3, #3
    aee6:	440b      	add	r3, r1
    aee8:	3314      	adds	r3, #20
    aeea:	681b      	ldr	r3, [r3, #0]
    aeec:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    aeee:	9b02      	ldr	r3, [sp, #8]
    aef0:	0c1b      	lsrs	r3, r3, #16
    aef2:	b2db      	uxtb	r3, r3
    aef4:	9302      	str	r3, [sp, #8]

    return Result;
    aef6:	9b02      	ldr	r3, [sp, #8]
}
    aef8:	4618      	mov	r0, r3
    aefa:	b004      	add	sp, #16
    aefc:	4770      	bx	lr
    aefe:	bf00      	nop
    af00:	00010ed8 	.word	0x00010ed8

0000af04 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    af04:	b500      	push	{lr}
    af06:	b085      	sub	sp, #20
    af08:	9001      	str	r0, [sp, #4]
    af0a:	460b      	mov	r3, r1
    af0c:	f88d 3003 	strb.w	r3, [sp, #3]
    af10:	4613      	mov	r3, r2
    af12:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    af16:	4a0a      	ldr	r2, [pc, #40]	; (af40 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    af18:	9b01      	ldr	r3, [sp, #4]
    af1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af1e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    af20:	f002 f880 	bl	d024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    af24:	f8bd 2000 	ldrh.w	r2, [sp]
    af28:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af2c:	4619      	mov	r1, r3
    af2e:	9803      	ldr	r0, [sp, #12]
    af30:	f7ff fd85 	bl	aa3e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    af34:	f002 f8a2 	bl	d07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    af38:	bf00      	nop
    af3a:	b005      	add	sp, #20
    af3c:	f85d fb04 	ldr.w	pc, [sp], #4
    af40:	00010ed8 	.word	0x00010ed8

0000af44 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    af44:	b500      	push	{lr}
    af46:	b085      	sub	sp, #20
    af48:	9001      	str	r0, [sp, #4]
    af4a:	4608      	mov	r0, r1
    af4c:	4611      	mov	r1, r2
    af4e:	461a      	mov	r2, r3
    af50:	4603      	mov	r3, r0
    af52:	f88d 3003 	strb.w	r3, [sp, #3]
    af56:	460b      	mov	r3, r1
    af58:	f88d 3002 	strb.w	r3, [sp, #2]
    af5c:	4613      	mov	r3, r2
    af5e:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    af62:	4a10      	ldr	r2, [pc, #64]	; (afa4 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    af64:	9b01      	ldr	r3, [sp, #4]
    af66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6a:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    af6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    af70:	2201      	movs	r2, #1
    af72:	fa02 f303 	lsl.w	r3, r2, r3
    af76:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    af78:	9b02      	ldr	r3, [sp, #8]
    af7a:	041b      	lsls	r3, r3, #16
    af7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    af80:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    af82:	f001 ff07 	bl	cd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    af86:	f89d 3001 	ldrb.w	r3, [sp, #1]
    af8a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    af8e:	9a02      	ldr	r2, [sp, #8]
    af90:	9803      	ldr	r0, [sp, #12]
    af92:	f7ff fcb9 	bl	a908 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    af96:	f001 ff29 	bl	cdec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    af9a:	bf00      	nop
    af9c:	b005      	add	sp, #20
    af9e:	f85d fb04 	ldr.w	pc, [sp], #4
    afa2:	bf00      	nop
    afa4:	00010ed8 	.word	0x00010ed8

0000afa8 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    afa8:	b500      	push	{lr}
    afaa:	b085      	sub	sp, #20
    afac:	9001      	str	r0, [sp, #4]
    afae:	4608      	mov	r0, r1
    afb0:	4611      	mov	r1, r2
    afb2:	461a      	mov	r2, r3
    afb4:	4603      	mov	r3, r0
    afb6:	f88d 3003 	strb.w	r3, [sp, #3]
    afba:	460b      	mov	r3, r1
    afbc:	f88d 3002 	strb.w	r3, [sp, #2]
    afc0:	4613      	mov	r3, r2
    afc2:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    afc6:	4a0f      	ldr	r2, [pc, #60]	; (b004 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    afc8:	9b01      	ldr	r3, [sp, #4]
    afca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afce:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    afd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    afd4:	2201      	movs	r2, #1
    afd6:	fa02 f303 	lsl.w	r3, r2, r3
    afda:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    afdc:	9b02      	ldr	r3, [sp, #8]
    afde:	b2db      	uxtb	r3, r3
    afe0:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    afe2:	f001 ff29 	bl	ce38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    afe6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    afea:	f89d 1003 	ldrb.w	r1, [sp, #3]
    afee:	9a02      	ldr	r2, [sp, #8]
    aff0:	9803      	ldr	r0, [sp, #12]
    aff2:	f7ff fc89 	bl	a908 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    aff6:	f001 ff4b 	bl	ce90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    affa:	bf00      	nop
    affc:	b005      	add	sp, #20
    affe:	f85d fb04 	ldr.w	pc, [sp], #4
    b002:	bf00      	nop
    b004:	00010ed8 	.word	0x00010ed8

0000b008 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    b008:	b500      	push	{lr}
    b00a:	b085      	sub	sp, #20
    b00c:	9001      	str	r0, [sp, #4]
    b00e:	4608      	mov	r0, r1
    b010:	4611      	mov	r1, r2
    b012:	461a      	mov	r2, r3
    b014:	4603      	mov	r3, r0
    b016:	f88d 3003 	strb.w	r3, [sp, #3]
    b01a:	460b      	mov	r3, r1
    b01c:	f88d 3002 	strb.w	r3, [sp, #2]
    b020:	4613      	mov	r3, r2
    b022:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b026:	4a0f      	ldr	r2, [pc, #60]	; (b064 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    b028:	9b01      	ldr	r3, [sp, #4]
    b02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b02e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b030:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b034:	2201      	movs	r2, #1
    b036:	fa02 f303 	lsl.w	r3, r2, r3
    b03a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    b03c:	9b02      	ldr	r3, [sp, #8]
    b03e:	021b      	lsls	r3, r3, #8
    b040:	b29b      	uxth	r3, r3
    b042:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    b044:	f001 ff4a 	bl	cedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b048:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b04c:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b050:	9a02      	ldr	r2, [sp, #8]
    b052:	9803      	ldr	r0, [sp, #12]
    b054:	f7ff fc58 	bl	a908 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    b058:	f001 ff6c 	bl	cf34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    b05c:	bf00      	nop
    b05e:	b005      	add	sp, #20
    b060:	f85d fb04 	ldr.w	pc, [sp], #4
    b064:	00010ed8 	.word	0x00010ed8

0000b068 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    b068:	b410      	push	{r4}
    b06a:	b085      	sub	sp, #20
    b06c:	9001      	str	r0, [sp, #4]
    b06e:	4608      	mov	r0, r1
    b070:	4611      	mov	r1, r2
    b072:	461a      	mov	r2, r3
    b074:	4603      	mov	r3, r0
    b076:	f88d 3003 	strb.w	r3, [sp, #3]
    b07a:	460b      	mov	r3, r1
    b07c:	f88d 3002 	strb.w	r3, [sp, #2]
    b080:	4613      	mov	r3, r2
    b082:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b086:	4a0c      	ldr	r2, [pc, #48]	; (b0b8 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    b088:	9b01      	ldr	r3, [sp, #4]
    b08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b08e:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    b090:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b094:	f89d 4002 	ldrb.w	r4, [sp, #2]
    b098:	f8bd 0000 	ldrh.w	r0, [sp]
    b09c:	9903      	ldr	r1, [sp, #12]
    b09e:	4613      	mov	r3, r2
    b0a0:	009b      	lsls	r3, r3, #2
    b0a2:	4413      	add	r3, r2
    b0a4:	005b      	lsls	r3, r3, #1
    b0a6:	4423      	add	r3, r4
    b0a8:	3306      	adds	r3, #6
    b0aa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    b0ae:	bf00      	nop
    b0b0:	b005      	add	sp, #20
    b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    b0b6:	4770      	bx	lr
    b0b8:	00010ed8 	.word	0x00010ed8

0000b0bc <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    b0bc:	b500      	push	{lr}
    b0be:	b087      	sub	sp, #28
    b0c0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b0c2:	4a19      	ldr	r2, [pc, #100]	; (b128 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    b0c4:	9b01      	ldr	r3, [sp, #4]
    b0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ca:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    b0cc:	2300      	movs	r3, #0
    b0ce:	f88d 300c 	strb.w	r3, [sp, #12]
    b0d2:	2300      	movs	r3, #0
    b0d4:	f88d 300d 	strb.w	r3, [sp, #13]
    b0d8:	2300      	movs	r3, #0
    b0da:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    b0de:	f001 fdb5 	bl	cc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b0e2:	9804      	ldr	r0, [sp, #16]
    b0e4:	f7ff fc4f 	bl	a986 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    b0e8:	2100      	movs	r1, #0
    b0ea:	9804      	ldr	r0, [sp, #16]
    b0ec:	f7ff fc56 	bl	a99c <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    b0f0:	f001 fdd8 	bl	cca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b0f4:	2300      	movs	r3, #0
    b0f6:	f88d 3017 	strb.w	r3, [sp, #23]
    b0fa:	e00b      	b.n	b114 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    b0fc:	aa03      	add	r2, sp, #12
    b0fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b102:	4619      	mov	r1, r3
    b104:	9804      	ldr	r0, [sp, #16]
    b106:	f000 f899 	bl	b23c <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b10a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b10e:	3301      	adds	r3, #1
    b110:	f88d 3017 	strb.w	r3, [sp, #23]
    b114:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b118:	2b01      	cmp	r3, #1
    b11a:	d9ef      	bls.n	b0fc <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    b11c:	bf00      	nop
    b11e:	bf00      	nop
    b120:	b007      	add	sp, #28
    b122:	f85d fb04 	ldr.w	pc, [sp], #4
    b126:	bf00      	nop
    b128:	00010ed8 	.word	0x00010ed8

0000b12c <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    b12c:	b500      	push	{lr}
    b12e:	b087      	sub	sp, #28
    b130:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b132:	4a40      	ldr	r2, [pc, #256]	; (b234 <Pdb_Adc_Ip_IRQHandler+0x108>)
    b134:	9b01      	ldr	r3, [sp, #4]
    b136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b13a:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    b13c:	4a3e      	ldr	r2, [pc, #248]	; (b238 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b13e:	9b01      	ldr	r3, [sp, #4]
    b140:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    b144:	2b00      	cmp	r3, #0
    b146:	d04d      	beq.n	b1e4 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    b148:	9b04      	ldr	r3, [sp, #16]
    b14a:	681b      	ldr	r3, [r3, #0]
    b14c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    b150:	2b00      	cmp	r3, #0
    b152:	d06a      	beq.n	b22a <Pdb_Adc_Ip_IRQHandler+0xfe>
    b154:	4a38      	ldr	r2, [pc, #224]	; (b238 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b156:	9b01      	ldr	r3, [sp, #4]
    b158:	00db      	lsls	r3, r3, #3
    b15a:	4413      	add	r3, r2
    b15c:	685b      	ldr	r3, [r3, #4]
    b15e:	2b00      	cmp	r3, #0
    b160:	d063      	beq.n	b22a <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b162:	2300      	movs	r3, #0
    b164:	f88d 3017 	strb.w	r3, [sp, #23]
    b168:	e037      	b.n	b1da <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    b16a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b16e:	9904      	ldr	r1, [sp, #16]
    b170:	4613      	mov	r3, r2
    b172:	009b      	lsls	r3, r3, #2
    b174:	4413      	add	r3, r2
    b176:	00db      	lsls	r3, r3, #3
    b178:	440b      	add	r3, r1
    b17a:	3314      	adds	r3, #20
    b17c:	681b      	ldr	r3, [r3, #0]
    b17e:	b29b      	uxth	r3, r3
    b180:	b2db      	uxtb	r3, r3
    b182:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    b186:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b18a:	2b00      	cmp	r3, #0
    b18c:	d020      	beq.n	b1d0 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b18e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b192:	9904      	ldr	r1, [sp, #16]
    b194:	4613      	mov	r3, r2
    b196:	009b      	lsls	r3, r3, #2
    b198:	4413      	add	r3, r2
    b19a:	00db      	lsls	r3, r3, #3
    b19c:	440b      	add	r3, r1
    b19e:	3314      	adds	r3, #20
    b1a0:	681b      	ldr	r3, [r3, #0]
    b1a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b1a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b1aa:	9804      	ldr	r0, [sp, #16]
    b1ac:	4613      	mov	r3, r2
    b1ae:	009b      	lsls	r3, r3, #2
    b1b0:	4413      	add	r3, r2
    b1b2:	00db      	lsls	r3, r3, #3
    b1b4:	4403      	add	r3, r0
    b1b6:	3314      	adds	r3, #20
    b1b8:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    b1ba:	4a1f      	ldr	r2, [pc, #124]	; (b238 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    b1bc:	9b01      	ldr	r3, [sp, #4]
    b1be:	00db      	lsls	r3, r3, #3
    b1c0:	4413      	add	r3, r2
    b1c2:	685b      	ldr	r3, [r3, #4]
    b1c4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b1c8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b1cc:	4610      	mov	r0, r2
    b1ce:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b1d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b1d4:	3301      	adds	r3, #1
    b1d6:	f88d 3017 	strb.w	r3, [sp, #23]
    b1da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b1de:	2b01      	cmp	r3, #1
    b1e0:	d9c3      	bls.n	b16a <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    b1e2:	e022      	b.n	b22a <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b1e4:	2300      	movs	r3, #0
    b1e6:	f88d 3017 	strb.w	r3, [sp, #23]
    b1ea:	e01a      	b.n	b222 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b1ec:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b1f0:	9904      	ldr	r1, [sp, #16]
    b1f2:	4613      	mov	r3, r2
    b1f4:	009b      	lsls	r3, r3, #2
    b1f6:	4413      	add	r3, r2
    b1f8:	00db      	lsls	r3, r3, #3
    b1fa:	440b      	add	r3, r1
    b1fc:	3314      	adds	r3, #20
    b1fe:	681b      	ldr	r3, [r3, #0]
    b200:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b204:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b208:	9804      	ldr	r0, [sp, #16]
    b20a:	4613      	mov	r3, r2
    b20c:	009b      	lsls	r3, r3, #2
    b20e:	4413      	add	r3, r2
    b210:	00db      	lsls	r3, r3, #3
    b212:	4403      	add	r3, r0
    b214:	3314      	adds	r3, #20
    b216:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    b218:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b21c:	3301      	adds	r3, #1
    b21e:	f88d 3017 	strb.w	r3, [sp, #23]
    b222:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b226:	2b01      	cmp	r3, #1
    b228:	d9e0      	bls.n	b1ec <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    b22a:	bf00      	nop
    b22c:	b007      	add	sp, #28
    b22e:	f85d fb04 	ldr.w	pc, [sp], #4
    b232:	bf00      	nop
    b234:	00010ed8 	.word	0x00010ed8
    b238:	1fff8da8 	.word	0x1fff8da8

0000b23c <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    b23c:	b500      	push	{lr}
    b23e:	b085      	sub	sp, #20
    b240:	9003      	str	r0, [sp, #12]
    b242:	460b      	mov	r3, r1
    b244:	9201      	str	r2, [sp, #4]
    b246:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    b24a:	f001 fe99 	bl	cf80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    b24e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b252:	9a01      	ldr	r2, [sp, #4]
    b254:	4619      	mov	r1, r3
    b256:	9803      	ldr	r0, [sp, #12]
    b258:	f7ff fbb9 	bl	a9ce <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    b25c:	f001 febc 	bl	cfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    b260:	f001 ff32 	bl	d0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    b264:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b268:	22ff      	movs	r2, #255	; 0xff
    b26a:	4619      	mov	r1, r3
    b26c:	9803      	ldr	r0, [sp, #12]
    b26e:	f7ff fbe6 	bl	aa3e <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    b272:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b276:	9903      	ldr	r1, [sp, #12]
    b278:	4613      	mov	r3, r2
    b27a:	009b      	lsls	r3, r3, #2
    b27c:	4413      	add	r3, r2
    b27e:	00db      	lsls	r3, r3, #3
    b280:	440b      	add	r3, r1
    b282:	3314      	adds	r3, #20
    b284:	681b      	ldr	r3, [r3, #0]
    b286:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b28a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    b28e:	9803      	ldr	r0, [sp, #12]
    b290:	4613      	mov	r3, r2
    b292:	009b      	lsls	r3, r3, #2
    b294:	4413      	add	r3, r2
    b296:	00db      	lsls	r3, r3, #3
    b298:	4403      	add	r3, r0
    b29a:	3314      	adds	r3, #20
    b29c:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    b29e:	f001 ff3f 	bl	d120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    b2a2:	bf00      	nop
    b2a4:	b005      	add	sp, #20
    b2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2aa:	bf00      	nop

0000b2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    b2ac:	b500      	push	{lr}
    b2ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2b0:	f7f5 ffe0 	bl	1274 <Sys_GetCoreID>
    b2b4:	4603      	mov	r3, r0
    b2b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    b2b8:	4a10      	ldr	r2, [pc, #64]	; (b2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    b2ba:	9b01      	ldr	r3, [sp, #4]
    b2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d10d      	bne.n	b2e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2c4:	f7f5 fef4 	bl	10b0 <Adc_schm_read_msr>
    b2c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2ca:	9b00      	ldr	r3, [sp, #0]
    b2cc:	f003 0301 	and.w	r3, r3, #1
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d100      	bne.n	b2d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    b2d6:	490a      	ldr	r1, [pc, #40]	; (b300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    b2d8:	9b01      	ldr	r3, [sp, #4]
    b2da:	9a00      	ldr	r2, [sp, #0]
    b2dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    b2e0:	4a06      	ldr	r2, [pc, #24]	; (b2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    b2e2:	9b01      	ldr	r3, [sp, #4]
    b2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e8:	1c5a      	adds	r2, r3, #1
    b2ea:	4904      	ldr	r1, [pc, #16]	; (b2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2f2:	bf00      	nop
    b2f4:	b003      	add	sp, #12
    b2f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2fa:	bf00      	nop
    b2fc:	1fff8dbc 	.word	0x1fff8dbc
    b300:	1fff8db8 	.word	0x1fff8db8

0000b304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    b304:	b500      	push	{lr}
    b306:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b308:	f7f5 ffb4 	bl	1274 <Sys_GetCoreID>
    b30c:	4603      	mov	r3, r0
    b30e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    b310:	4a0d      	ldr	r2, [pc, #52]	; (b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    b312:	9b01      	ldr	r3, [sp, #4]
    b314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b318:	1e5a      	subs	r2, r3, #1
    b31a:	490b      	ldr	r1, [pc, #44]	; (b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    b31c:	9b01      	ldr	r3, [sp, #4]
    b31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    b322:	4a0a      	ldr	r2, [pc, #40]	; (b34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b32a:	f003 0301 	and.w	r3, r3, #1
    b32e:	2b00      	cmp	r3, #0
    b330:	d106      	bne.n	b340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    b332:	4a05      	ldr	r2, [pc, #20]	; (b348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    b334:	9b01      	ldr	r3, [sp, #4]
    b336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b33a:	2b00      	cmp	r3, #0
    b33c:	d100      	bne.n	b340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b33e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b340:	bf00      	nop
    b342:	b003      	add	sp, #12
    b344:	f85d fb04 	ldr.w	pc, [sp], #4
    b348:	1fff8dbc 	.word	0x1fff8dbc
    b34c:	1fff8db8 	.word	0x1fff8db8

0000b350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    b350:	b500      	push	{lr}
    b352:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b354:	f7f5 ff8e 	bl	1274 <Sys_GetCoreID>
    b358:	4603      	mov	r3, r0
    b35a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    b35c:	4a10      	ldr	r2, [pc, #64]	; (b3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    b35e:	9b01      	ldr	r3, [sp, #4]
    b360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b364:	2b00      	cmp	r3, #0
    b366:	d10d      	bne.n	b384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b368:	f7f5 fea2 	bl	10b0 <Adc_schm_read_msr>
    b36c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b36e:	9b00      	ldr	r3, [sp, #0]
    b370:	f003 0301 	and.w	r3, r3, #1
    b374:	2b00      	cmp	r3, #0
    b376:	d100      	bne.n	b37a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b378:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    b37a:	490a      	ldr	r1, [pc, #40]	; (b3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    b37c:	9b01      	ldr	r3, [sp, #4]
    b37e:	9a00      	ldr	r2, [sp, #0]
    b380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    b384:	4a06      	ldr	r2, [pc, #24]	; (b3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    b386:	9b01      	ldr	r3, [sp, #4]
    b388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38c:	1c5a      	adds	r2, r3, #1
    b38e:	4904      	ldr	r1, [pc, #16]	; (b3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b396:	bf00      	nop
    b398:	b003      	add	sp, #12
    b39a:	f85d fb04 	ldr.w	pc, [sp], #4
    b39e:	bf00      	nop
    b3a0:	1fff8dc4 	.word	0x1fff8dc4
    b3a4:	1fff8dc0 	.word	0x1fff8dc0

0000b3a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    b3a8:	b500      	push	{lr}
    b3aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3ac:	f7f5 ff62 	bl	1274 <Sys_GetCoreID>
    b3b0:	4603      	mov	r3, r0
    b3b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    b3b4:	4a0d      	ldr	r2, [pc, #52]	; (b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b3b6:	9b01      	ldr	r3, [sp, #4]
    b3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3bc:	1e5a      	subs	r2, r3, #1
    b3be:	490b      	ldr	r1, [pc, #44]	; (b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b3c0:	9b01      	ldr	r3, [sp, #4]
    b3c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    b3c6:	4a0a      	ldr	r2, [pc, #40]	; (b3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ce:	f003 0301 	and.w	r3, r3, #1
    b3d2:	2b00      	cmp	r3, #0
    b3d4:	d106      	bne.n	b3e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    b3d6:	4a05      	ldr	r2, [pc, #20]	; (b3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    b3d8:	9b01      	ldr	r3, [sp, #4]
    b3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3de:	2b00      	cmp	r3, #0
    b3e0:	d100      	bne.n	b3e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3e4:	bf00      	nop
    b3e6:	b003      	add	sp, #12
    b3e8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ec:	1fff8dc4 	.word	0x1fff8dc4
    b3f0:	1fff8dc0 	.word	0x1fff8dc0

0000b3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    b3f4:	b500      	push	{lr}
    b3f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3f8:	f7f5 ff3c 	bl	1274 <Sys_GetCoreID>
    b3fc:	4603      	mov	r3, r0
    b3fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    b400:	4a10      	ldr	r2, [pc, #64]	; (b444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b402:	9b01      	ldr	r3, [sp, #4]
    b404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b408:	2b00      	cmp	r3, #0
    b40a:	d10d      	bne.n	b428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b40c:	f7f5 fe50 	bl	10b0 <Adc_schm_read_msr>
    b410:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b412:	9b00      	ldr	r3, [sp, #0]
    b414:	f003 0301 	and.w	r3, r3, #1
    b418:	2b00      	cmp	r3, #0
    b41a:	d100      	bne.n	b41e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b41c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    b41e:	490a      	ldr	r1, [pc, #40]	; (b448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    b420:	9b01      	ldr	r3, [sp, #4]
    b422:	9a00      	ldr	r2, [sp, #0]
    b424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    b428:	4a06      	ldr	r2, [pc, #24]	; (b444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b42a:	9b01      	ldr	r3, [sp, #4]
    b42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b430:	1c5a      	adds	r2, r3, #1
    b432:	4904      	ldr	r1, [pc, #16]	; (b444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    b434:	9b01      	ldr	r3, [sp, #4]
    b436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b43a:	bf00      	nop
    b43c:	b003      	add	sp, #12
    b43e:	f85d fb04 	ldr.w	pc, [sp], #4
    b442:	bf00      	nop
    b444:	1fff8dcc 	.word	0x1fff8dcc
    b448:	1fff8dc8 	.word	0x1fff8dc8

0000b44c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    b44c:	b500      	push	{lr}
    b44e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b450:	f7f5 ff10 	bl	1274 <Sys_GetCoreID>
    b454:	4603      	mov	r3, r0
    b456:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    b458:	4a0d      	ldr	r2, [pc, #52]	; (b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b460:	1e5a      	subs	r2, r3, #1
    b462:	490b      	ldr	r1, [pc, #44]	; (b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b464:	9b01      	ldr	r3, [sp, #4]
    b466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    b46a:	4a0a      	ldr	r2, [pc, #40]	; (b494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b472:	f003 0301 	and.w	r3, r3, #1
    b476:	2b00      	cmp	r3, #0
    b478:	d106      	bne.n	b488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    b47a:	4a05      	ldr	r2, [pc, #20]	; (b490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    b47c:	9b01      	ldr	r3, [sp, #4]
    b47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b482:	2b00      	cmp	r3, #0
    b484:	d100      	bne.n	b488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b486:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b488:	bf00      	nop
    b48a:	b003      	add	sp, #12
    b48c:	f85d fb04 	ldr.w	pc, [sp], #4
    b490:	1fff8dcc 	.word	0x1fff8dcc
    b494:	1fff8dc8 	.word	0x1fff8dc8

0000b498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b498:	b500      	push	{lr}
    b49a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b49c:	f7f5 feea 	bl	1274 <Sys_GetCoreID>
    b4a0:	4603      	mov	r3, r0
    b4a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    b4a4:	4a10      	ldr	r2, [pc, #64]	; (b4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b4a6:	9b01      	ldr	r3, [sp, #4]
    b4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d10d      	bne.n	b4cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4b0:	f7f5 fdfe 	bl	10b0 <Adc_schm_read_msr>
    b4b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4b6:	9b00      	ldr	r3, [sp, #0]
    b4b8:	f003 0301 	and.w	r3, r3, #1
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d100      	bne.n	b4c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    b4c2:	490a      	ldr	r1, [pc, #40]	; (b4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    b4c4:	9b01      	ldr	r3, [sp, #4]
    b4c6:	9a00      	ldr	r2, [sp, #0]
    b4c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    b4cc:	4a06      	ldr	r2, [pc, #24]	; (b4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b4ce:	9b01      	ldr	r3, [sp, #4]
    b4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4d4:	1c5a      	adds	r2, r3, #1
    b4d6:	4904      	ldr	r1, [pc, #16]	; (b4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    b4d8:	9b01      	ldr	r3, [sp, #4]
    b4da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4de:	bf00      	nop
    b4e0:	b003      	add	sp, #12
    b4e2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4e6:	bf00      	nop
    b4e8:	1fff8dd4 	.word	0x1fff8dd4
    b4ec:	1fff8dd0 	.word	0x1fff8dd0

0000b4f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    b4f0:	b500      	push	{lr}
    b4f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4f4:	f7f5 febe 	bl	1274 <Sys_GetCoreID>
    b4f8:	4603      	mov	r3, r0
    b4fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    b4fc:	4a0d      	ldr	r2, [pc, #52]	; (b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b4fe:	9b01      	ldr	r3, [sp, #4]
    b500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b504:	1e5a      	subs	r2, r3, #1
    b506:	490b      	ldr	r1, [pc, #44]	; (b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b508:	9b01      	ldr	r3, [sp, #4]
    b50a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    b50e:	4a0a      	ldr	r2, [pc, #40]	; (b538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    b510:	9b01      	ldr	r3, [sp, #4]
    b512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b516:	f003 0301 	and.w	r3, r3, #1
    b51a:	2b00      	cmp	r3, #0
    b51c:	d106      	bne.n	b52c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    b51e:	4a05      	ldr	r2, [pc, #20]	; (b534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    b520:	9b01      	ldr	r3, [sp, #4]
    b522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b526:	2b00      	cmp	r3, #0
    b528:	d100      	bne.n	b52c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b52a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b52c:	bf00      	nop
    b52e:	b003      	add	sp, #12
    b530:	f85d fb04 	ldr.w	pc, [sp], #4
    b534:	1fff8dd4 	.word	0x1fff8dd4
    b538:	1fff8dd0 	.word	0x1fff8dd0

0000b53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b53c:	b500      	push	{lr}
    b53e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b540:	f7f5 fe98 	bl	1274 <Sys_GetCoreID>
    b544:	4603      	mov	r3, r0
    b546:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    b548:	4a10      	ldr	r2, [pc, #64]	; (b58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b54a:	9b01      	ldr	r3, [sp, #4]
    b54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b550:	2b00      	cmp	r3, #0
    b552:	d10d      	bne.n	b570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b554:	f7f5 fdac 	bl	10b0 <Adc_schm_read_msr>
    b558:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b55a:	9b00      	ldr	r3, [sp, #0]
    b55c:	f003 0301 	and.w	r3, r3, #1
    b560:	2b00      	cmp	r3, #0
    b562:	d100      	bne.n	b566 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b564:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    b566:	490a      	ldr	r1, [pc, #40]	; (b590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    b568:	9b01      	ldr	r3, [sp, #4]
    b56a:	9a00      	ldr	r2, [sp, #0]
    b56c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    b570:	4a06      	ldr	r2, [pc, #24]	; (b58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b572:	9b01      	ldr	r3, [sp, #4]
    b574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b578:	1c5a      	adds	r2, r3, #1
    b57a:	4904      	ldr	r1, [pc, #16]	; (b58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    b57c:	9b01      	ldr	r3, [sp, #4]
    b57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b582:	bf00      	nop
    b584:	b003      	add	sp, #12
    b586:	f85d fb04 	ldr.w	pc, [sp], #4
    b58a:	bf00      	nop
    b58c:	1fff8ddc 	.word	0x1fff8ddc
    b590:	1fff8dd8 	.word	0x1fff8dd8

0000b594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    b594:	b500      	push	{lr}
    b596:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b598:	f7f5 fe6c 	bl	1274 <Sys_GetCoreID>
    b59c:	4603      	mov	r3, r0
    b59e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    b5a0:	4a0d      	ldr	r2, [pc, #52]	; (b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b5a2:	9b01      	ldr	r3, [sp, #4]
    b5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5a8:	1e5a      	subs	r2, r3, #1
    b5aa:	490b      	ldr	r1, [pc, #44]	; (b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b5ac:	9b01      	ldr	r3, [sp, #4]
    b5ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    b5b2:	4a0a      	ldr	r2, [pc, #40]	; (b5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    b5b4:	9b01      	ldr	r3, [sp, #4]
    b5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ba:	f003 0301 	and.w	r3, r3, #1
    b5be:	2b00      	cmp	r3, #0
    b5c0:	d106      	bne.n	b5d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    b5c2:	4a05      	ldr	r2, [pc, #20]	; (b5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b5c4:	9b01      	ldr	r3, [sp, #4]
    b5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d100      	bne.n	b5d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5d0:	bf00      	nop
    b5d2:	b003      	add	sp, #12
    b5d4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5d8:	1fff8ddc 	.word	0x1fff8ddc
    b5dc:	1fff8dd8 	.word	0x1fff8dd8

0000b5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b5e0:	b500      	push	{lr}
    b5e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5e4:	f7f5 fe46 	bl	1274 <Sys_GetCoreID>
    b5e8:	4603      	mov	r3, r0
    b5ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    b5ec:	4a10      	ldr	r2, [pc, #64]	; (b630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b5ee:	9b01      	ldr	r3, [sp, #4]
    b5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5f4:	2b00      	cmp	r3, #0
    b5f6:	d10d      	bne.n	b614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5f8:	f7f5 fd5a 	bl	10b0 <Adc_schm_read_msr>
    b5fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5fe:	9b00      	ldr	r3, [sp, #0]
    b600:	f003 0301 	and.w	r3, r3, #1
    b604:	2b00      	cmp	r3, #0
    b606:	d100      	bne.n	b60a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b608:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    b60a:	490a      	ldr	r1, [pc, #40]	; (b634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    b60c:	9b01      	ldr	r3, [sp, #4]
    b60e:	9a00      	ldr	r2, [sp, #0]
    b610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    b614:	4a06      	ldr	r2, [pc, #24]	; (b630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b616:	9b01      	ldr	r3, [sp, #4]
    b618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b61c:	1c5a      	adds	r2, r3, #1
    b61e:	4904      	ldr	r1, [pc, #16]	; (b630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b620:	9b01      	ldr	r3, [sp, #4]
    b622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b626:	bf00      	nop
    b628:	b003      	add	sp, #12
    b62a:	f85d fb04 	ldr.w	pc, [sp], #4
    b62e:	bf00      	nop
    b630:	1fff8de4 	.word	0x1fff8de4
    b634:	1fff8de0 	.word	0x1fff8de0

0000b638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b638:	b500      	push	{lr}
    b63a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b63c:	f7f5 fe1a 	bl	1274 <Sys_GetCoreID>
    b640:	4603      	mov	r3, r0
    b642:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    b644:	4a0d      	ldr	r2, [pc, #52]	; (b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b646:	9b01      	ldr	r3, [sp, #4]
    b648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b64c:	1e5a      	subs	r2, r3, #1
    b64e:	490b      	ldr	r1, [pc, #44]	; (b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b650:	9b01      	ldr	r3, [sp, #4]
    b652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    b656:	4a0a      	ldr	r2, [pc, #40]	; (b680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b65e:	f003 0301 	and.w	r3, r3, #1
    b662:	2b00      	cmp	r3, #0
    b664:	d106      	bne.n	b674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b666:	4a05      	ldr	r2, [pc, #20]	; (b67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b668:	9b01      	ldr	r3, [sp, #4]
    b66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b66e:	2b00      	cmp	r3, #0
    b670:	d100      	bne.n	b674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b672:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b674:	bf00      	nop
    b676:	b003      	add	sp, #12
    b678:	f85d fb04 	ldr.w	pc, [sp], #4
    b67c:	1fff8de4 	.word	0x1fff8de4
    b680:	1fff8de0 	.word	0x1fff8de0

0000b684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b684:	b500      	push	{lr}
    b686:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b688:	f7f5 fdf4 	bl	1274 <Sys_GetCoreID>
    b68c:	4603      	mov	r3, r0
    b68e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b690:	4a10      	ldr	r2, [pc, #64]	; (b6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b692:	9b01      	ldr	r3, [sp, #4]
    b694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b698:	2b00      	cmp	r3, #0
    b69a:	d10d      	bne.n	b6b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b69c:	f7f5 fd08 	bl	10b0 <Adc_schm_read_msr>
    b6a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6a2:	9b00      	ldr	r3, [sp, #0]
    b6a4:	f003 0301 	and.w	r3, r3, #1
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d100      	bne.n	b6ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b6ae:	490a      	ldr	r1, [pc, #40]	; (b6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b6b0:	9b01      	ldr	r3, [sp, #4]
    b6b2:	9a00      	ldr	r2, [sp, #0]
    b6b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b6b8:	4a06      	ldr	r2, [pc, #24]	; (b6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b6ba:	9b01      	ldr	r3, [sp, #4]
    b6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c0:	1c5a      	adds	r2, r3, #1
    b6c2:	4904      	ldr	r1, [pc, #16]	; (b6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b6c4:	9b01      	ldr	r3, [sp, #4]
    b6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6ca:	bf00      	nop
    b6cc:	b003      	add	sp, #12
    b6ce:	f85d fb04 	ldr.w	pc, [sp], #4
    b6d2:	bf00      	nop
    b6d4:	1fff8dec 	.word	0x1fff8dec
    b6d8:	1fff8de8 	.word	0x1fff8de8

0000b6dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b6dc:	b500      	push	{lr}
    b6de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6e0:	f7f5 fdc8 	bl	1274 <Sys_GetCoreID>
    b6e4:	4603      	mov	r3, r0
    b6e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b6e8:	4a0d      	ldr	r2, [pc, #52]	; (b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b6ea:	9b01      	ldr	r3, [sp, #4]
    b6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f0:	1e5a      	subs	r2, r3, #1
    b6f2:	490b      	ldr	r1, [pc, #44]	; (b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b6f4:	9b01      	ldr	r3, [sp, #4]
    b6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b6fa:	4a0a      	ldr	r2, [pc, #40]	; (b724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b702:	f003 0301 	and.w	r3, r3, #1
    b706:	2b00      	cmp	r3, #0
    b708:	d106      	bne.n	b718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b70a:	4a05      	ldr	r2, [pc, #20]	; (b720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b70c:	9b01      	ldr	r3, [sp, #4]
    b70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b712:	2b00      	cmp	r3, #0
    b714:	d100      	bne.n	b718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b716:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b718:	bf00      	nop
    b71a:	b003      	add	sp, #12
    b71c:	f85d fb04 	ldr.w	pc, [sp], #4
    b720:	1fff8dec 	.word	0x1fff8dec
    b724:	1fff8de8 	.word	0x1fff8de8

0000b728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b728:	b500      	push	{lr}
    b72a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b72c:	f7f5 fda2 	bl	1274 <Sys_GetCoreID>
    b730:	4603      	mov	r3, r0
    b732:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b734:	4a10      	ldr	r2, [pc, #64]	; (b778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b736:	9b01      	ldr	r3, [sp, #4]
    b738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b73c:	2b00      	cmp	r3, #0
    b73e:	d10d      	bne.n	b75c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b740:	f7f5 fcb6 	bl	10b0 <Adc_schm_read_msr>
    b744:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b746:	9b00      	ldr	r3, [sp, #0]
    b748:	f003 0301 	and.w	r3, r3, #1
    b74c:	2b00      	cmp	r3, #0
    b74e:	d100      	bne.n	b752 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b750:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b752:	490a      	ldr	r1, [pc, #40]	; (b77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b754:	9b01      	ldr	r3, [sp, #4]
    b756:	9a00      	ldr	r2, [sp, #0]
    b758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b75c:	4a06      	ldr	r2, [pc, #24]	; (b778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b75e:	9b01      	ldr	r3, [sp, #4]
    b760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b764:	1c5a      	adds	r2, r3, #1
    b766:	4904      	ldr	r1, [pc, #16]	; (b778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b768:	9b01      	ldr	r3, [sp, #4]
    b76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b76e:	bf00      	nop
    b770:	b003      	add	sp, #12
    b772:	f85d fb04 	ldr.w	pc, [sp], #4
    b776:	bf00      	nop
    b778:	1fff8df4 	.word	0x1fff8df4
    b77c:	1fff8df0 	.word	0x1fff8df0

0000b780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b780:	b500      	push	{lr}
    b782:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b784:	f7f5 fd76 	bl	1274 <Sys_GetCoreID>
    b788:	4603      	mov	r3, r0
    b78a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b78c:	4a0d      	ldr	r2, [pc, #52]	; (b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b78e:	9b01      	ldr	r3, [sp, #4]
    b790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b794:	1e5a      	subs	r2, r3, #1
    b796:	490b      	ldr	r1, [pc, #44]	; (b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b798:	9b01      	ldr	r3, [sp, #4]
    b79a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b79e:	4a0a      	ldr	r2, [pc, #40]	; (b7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7a6:	f003 0301 	and.w	r3, r3, #1
    b7aa:	2b00      	cmp	r3, #0
    b7ac:	d106      	bne.n	b7bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b7ae:	4a05      	ldr	r2, [pc, #20]	; (b7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b7b0:	9b01      	ldr	r3, [sp, #4]
    b7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d100      	bne.n	b7bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7bc:	bf00      	nop
    b7be:	b003      	add	sp, #12
    b7c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c4:	1fff8df4 	.word	0x1fff8df4
    b7c8:	1fff8df0 	.word	0x1fff8df0

0000b7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b7cc:	b500      	push	{lr}
    b7ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7d0:	f7f5 fd50 	bl	1274 <Sys_GetCoreID>
    b7d4:	4603      	mov	r3, r0
    b7d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b7d8:	4a10      	ldr	r2, [pc, #64]	; (b81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b7da:	9b01      	ldr	r3, [sp, #4]
    b7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d10d      	bne.n	b800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7e4:	f7f5 fc64 	bl	10b0 <Adc_schm_read_msr>
    b7e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7ea:	9b00      	ldr	r3, [sp, #0]
    b7ec:	f003 0301 	and.w	r3, r3, #1
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d100      	bne.n	b7f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b7f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b7f6:	490a      	ldr	r1, [pc, #40]	; (b820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b7f8:	9b01      	ldr	r3, [sp, #4]
    b7fa:	9a00      	ldr	r2, [sp, #0]
    b7fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b800:	4a06      	ldr	r2, [pc, #24]	; (b81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b802:	9b01      	ldr	r3, [sp, #4]
    b804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b808:	1c5a      	adds	r2, r3, #1
    b80a:	4904      	ldr	r1, [pc, #16]	; (b81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b80c:	9b01      	ldr	r3, [sp, #4]
    b80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b812:	bf00      	nop
    b814:	b003      	add	sp, #12
    b816:	f85d fb04 	ldr.w	pc, [sp], #4
    b81a:	bf00      	nop
    b81c:	1fff8dfc 	.word	0x1fff8dfc
    b820:	1fff8df8 	.word	0x1fff8df8

0000b824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b824:	b500      	push	{lr}
    b826:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b828:	f7f5 fd24 	bl	1274 <Sys_GetCoreID>
    b82c:	4603      	mov	r3, r0
    b82e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b830:	4a0d      	ldr	r2, [pc, #52]	; (b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b832:	9b01      	ldr	r3, [sp, #4]
    b834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b838:	1e5a      	subs	r2, r3, #1
    b83a:	490b      	ldr	r1, [pc, #44]	; (b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b83c:	9b01      	ldr	r3, [sp, #4]
    b83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b842:	4a0a      	ldr	r2, [pc, #40]	; (b86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b844:	9b01      	ldr	r3, [sp, #4]
    b846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b84a:	f003 0301 	and.w	r3, r3, #1
    b84e:	2b00      	cmp	r3, #0
    b850:	d106      	bne.n	b860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b852:	4a05      	ldr	r2, [pc, #20]	; (b868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b854:	9b01      	ldr	r3, [sp, #4]
    b856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d100      	bne.n	b860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b85e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b860:	bf00      	nop
    b862:	b003      	add	sp, #12
    b864:	f85d fb04 	ldr.w	pc, [sp], #4
    b868:	1fff8dfc 	.word	0x1fff8dfc
    b86c:	1fff8df8 	.word	0x1fff8df8

0000b870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b870:	b500      	push	{lr}
    b872:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b874:	f7f5 fcfe 	bl	1274 <Sys_GetCoreID>
    b878:	4603      	mov	r3, r0
    b87a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b87c:	4a10      	ldr	r2, [pc, #64]	; (b8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b884:	2b00      	cmp	r3, #0
    b886:	d10d      	bne.n	b8a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b888:	f7f5 fc12 	bl	10b0 <Adc_schm_read_msr>
    b88c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b88e:	9b00      	ldr	r3, [sp, #0]
    b890:	f003 0301 	and.w	r3, r3, #1
    b894:	2b00      	cmp	r3, #0
    b896:	d100      	bne.n	b89a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b898:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b89a:	490a      	ldr	r1, [pc, #40]	; (b8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b89c:	9b01      	ldr	r3, [sp, #4]
    b89e:	9a00      	ldr	r2, [sp, #0]
    b8a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b8a4:	4a06      	ldr	r2, [pc, #24]	; (b8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b8a6:	9b01      	ldr	r3, [sp, #4]
    b8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ac:	1c5a      	adds	r2, r3, #1
    b8ae:	4904      	ldr	r1, [pc, #16]	; (b8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b8b0:	9b01      	ldr	r3, [sp, #4]
    b8b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8b6:	bf00      	nop
    b8b8:	b003      	add	sp, #12
    b8ba:	f85d fb04 	ldr.w	pc, [sp], #4
    b8be:	bf00      	nop
    b8c0:	1fff8e04 	.word	0x1fff8e04
    b8c4:	1fff8e00 	.word	0x1fff8e00

0000b8c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b8c8:	b500      	push	{lr}
    b8ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8cc:	f7f5 fcd2 	bl	1274 <Sys_GetCoreID>
    b8d0:	4603      	mov	r3, r0
    b8d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b8d4:	4a0d      	ldr	r2, [pc, #52]	; (b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b8d6:	9b01      	ldr	r3, [sp, #4]
    b8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8dc:	1e5a      	subs	r2, r3, #1
    b8de:	490b      	ldr	r1, [pc, #44]	; (b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b8e0:	9b01      	ldr	r3, [sp, #4]
    b8e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b8e6:	4a0a      	ldr	r2, [pc, #40]	; (b910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b8e8:	9b01      	ldr	r3, [sp, #4]
    b8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ee:	f003 0301 	and.w	r3, r3, #1
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	d106      	bne.n	b904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b8f6:	4a05      	ldr	r2, [pc, #20]	; (b90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b8f8:	9b01      	ldr	r3, [sp, #4]
    b8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8fe:	2b00      	cmp	r3, #0
    b900:	d100      	bne.n	b904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b902:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b904:	bf00      	nop
    b906:	b003      	add	sp, #12
    b908:	f85d fb04 	ldr.w	pc, [sp], #4
    b90c:	1fff8e04 	.word	0x1fff8e04
    b910:	1fff8e00 	.word	0x1fff8e00

0000b914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b914:	b500      	push	{lr}
    b916:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b918:	f7f5 fcac 	bl	1274 <Sys_GetCoreID>
    b91c:	4603      	mov	r3, r0
    b91e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b920:	4a10      	ldr	r2, [pc, #64]	; (b964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b922:	9b01      	ldr	r3, [sp, #4]
    b924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b928:	2b00      	cmp	r3, #0
    b92a:	d10d      	bne.n	b948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b92c:	f7f5 fbc0 	bl	10b0 <Adc_schm_read_msr>
    b930:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b932:	9b00      	ldr	r3, [sp, #0]
    b934:	f003 0301 	and.w	r3, r3, #1
    b938:	2b00      	cmp	r3, #0
    b93a:	d100      	bne.n	b93e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b93c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b93e:	490a      	ldr	r1, [pc, #40]	; (b968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b940:	9b01      	ldr	r3, [sp, #4]
    b942:	9a00      	ldr	r2, [sp, #0]
    b944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b948:	4a06      	ldr	r2, [pc, #24]	; (b964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b94a:	9b01      	ldr	r3, [sp, #4]
    b94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b950:	1c5a      	adds	r2, r3, #1
    b952:	4904      	ldr	r1, [pc, #16]	; (b964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b954:	9b01      	ldr	r3, [sp, #4]
    b956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b95a:	bf00      	nop
    b95c:	b003      	add	sp, #12
    b95e:	f85d fb04 	ldr.w	pc, [sp], #4
    b962:	bf00      	nop
    b964:	1fff8e0c 	.word	0x1fff8e0c
    b968:	1fff8e08 	.word	0x1fff8e08

0000b96c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b96c:	b500      	push	{lr}
    b96e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b970:	f7f5 fc80 	bl	1274 <Sys_GetCoreID>
    b974:	4603      	mov	r3, r0
    b976:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b978:	4a0d      	ldr	r2, [pc, #52]	; (b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b97a:	9b01      	ldr	r3, [sp, #4]
    b97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b980:	1e5a      	subs	r2, r3, #1
    b982:	490b      	ldr	r1, [pc, #44]	; (b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b984:	9b01      	ldr	r3, [sp, #4]
    b986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b98a:	4a0a      	ldr	r2, [pc, #40]	; (b9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b98c:	9b01      	ldr	r3, [sp, #4]
    b98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b992:	f003 0301 	and.w	r3, r3, #1
    b996:	2b00      	cmp	r3, #0
    b998:	d106      	bne.n	b9a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b99a:	4a05      	ldr	r2, [pc, #20]	; (b9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b99c:	9b01      	ldr	r3, [sp, #4]
    b99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d100      	bne.n	b9a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9a8:	bf00      	nop
    b9aa:	b003      	add	sp, #12
    b9ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b9b0:	1fff8e0c 	.word	0x1fff8e0c
    b9b4:	1fff8e08 	.word	0x1fff8e08

0000b9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b9b8:	b500      	push	{lr}
    b9ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9bc:	f7f5 fc5a 	bl	1274 <Sys_GetCoreID>
    b9c0:	4603      	mov	r3, r0
    b9c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b9c4:	4a10      	ldr	r2, [pc, #64]	; (ba08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b9c6:	9b01      	ldr	r3, [sp, #4]
    b9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d10d      	bne.n	b9ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9d0:	f7f5 fb6e 	bl	10b0 <Adc_schm_read_msr>
    b9d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9d6:	9b00      	ldr	r3, [sp, #0]
    b9d8:	f003 0301 	and.w	r3, r3, #1
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d100      	bne.n	b9e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b9e2:	490a      	ldr	r1, [pc, #40]	; (ba0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b9e4:	9b01      	ldr	r3, [sp, #4]
    b9e6:	9a00      	ldr	r2, [sp, #0]
    b9e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b9ec:	4a06      	ldr	r2, [pc, #24]	; (ba08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b9ee:	9b01      	ldr	r3, [sp, #4]
    b9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9f4:	1c5a      	adds	r2, r3, #1
    b9f6:	4904      	ldr	r1, [pc, #16]	; (ba08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b9f8:	9b01      	ldr	r3, [sp, #4]
    b9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b9fe:	bf00      	nop
    ba00:	b003      	add	sp, #12
    ba02:	f85d fb04 	ldr.w	pc, [sp], #4
    ba06:	bf00      	nop
    ba08:	1fff8e14 	.word	0x1fff8e14
    ba0c:	1fff8e10 	.word	0x1fff8e10

0000ba10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    ba10:	b500      	push	{lr}
    ba12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba14:	f7f5 fc2e 	bl	1274 <Sys_GetCoreID>
    ba18:	4603      	mov	r3, r0
    ba1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    ba1c:	4a0d      	ldr	r2, [pc, #52]	; (ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    ba1e:	9b01      	ldr	r3, [sp, #4]
    ba20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba24:	1e5a      	subs	r2, r3, #1
    ba26:	490b      	ldr	r1, [pc, #44]	; (ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    ba28:	9b01      	ldr	r3, [sp, #4]
    ba2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ba2e:	4a0a      	ldr	r2, [pc, #40]	; (ba58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    ba30:	9b01      	ldr	r3, [sp, #4]
    ba32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba36:	f003 0301 	and.w	r3, r3, #1
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d106      	bne.n	ba4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    ba3e:	4a05      	ldr	r2, [pc, #20]	; (ba54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    ba40:	9b01      	ldr	r3, [sp, #4]
    ba42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d100      	bne.n	ba4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba4c:	bf00      	nop
    ba4e:	b003      	add	sp, #12
    ba50:	f85d fb04 	ldr.w	pc, [sp], #4
    ba54:	1fff8e14 	.word	0x1fff8e14
    ba58:	1fff8e10 	.word	0x1fff8e10

0000ba5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    ba5c:	b500      	push	{lr}
    ba5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba60:	f7f5 fc08 	bl	1274 <Sys_GetCoreID>
    ba64:	4603      	mov	r3, r0
    ba66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    ba68:	4a10      	ldr	r2, [pc, #64]	; (baac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    ba6a:	9b01      	ldr	r3, [sp, #4]
    ba6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba70:	2b00      	cmp	r3, #0
    ba72:	d10d      	bne.n	ba90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba74:	f7f5 fb1c 	bl	10b0 <Adc_schm_read_msr>
    ba78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba7a:	9b00      	ldr	r3, [sp, #0]
    ba7c:	f003 0301 	and.w	r3, r3, #1
    ba80:	2b00      	cmp	r3, #0
    ba82:	d100      	bne.n	ba86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    ba86:	490a      	ldr	r1, [pc, #40]	; (bab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    ba88:	9b01      	ldr	r3, [sp, #4]
    ba8a:	9a00      	ldr	r2, [sp, #0]
    ba8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    ba90:	4a06      	ldr	r2, [pc, #24]	; (baac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    ba92:	9b01      	ldr	r3, [sp, #4]
    ba94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba98:	1c5a      	adds	r2, r3, #1
    ba9a:	4904      	ldr	r1, [pc, #16]	; (baac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    ba9c:	9b01      	ldr	r3, [sp, #4]
    ba9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    baa2:	bf00      	nop
    baa4:	b003      	add	sp, #12
    baa6:	f85d fb04 	ldr.w	pc, [sp], #4
    baaa:	bf00      	nop
    baac:	1fff8e1c 	.word	0x1fff8e1c
    bab0:	1fff8e18 	.word	0x1fff8e18

0000bab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    bab4:	b500      	push	{lr}
    bab6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bab8:	f7f5 fbdc 	bl	1274 <Sys_GetCoreID>
    babc:	4603      	mov	r3, r0
    babe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    bac0:	4a0d      	ldr	r2, [pc, #52]	; (baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    bac2:	9b01      	ldr	r3, [sp, #4]
    bac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bac8:	1e5a      	subs	r2, r3, #1
    baca:	490b      	ldr	r1, [pc, #44]	; (baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    bacc:	9b01      	ldr	r3, [sp, #4]
    bace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    bad2:	4a0a      	ldr	r2, [pc, #40]	; (bafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    bad4:	9b01      	ldr	r3, [sp, #4]
    bad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bada:	f003 0301 	and.w	r3, r3, #1
    bade:	2b00      	cmp	r3, #0
    bae0:	d106      	bne.n	baf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    bae2:	4a05      	ldr	r2, [pc, #20]	; (baf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    bae4:	9b01      	ldr	r3, [sp, #4]
    bae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baea:	2b00      	cmp	r3, #0
    baec:	d100      	bne.n	baf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    baee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    baf0:	bf00      	nop
    baf2:	b003      	add	sp, #12
    baf4:	f85d fb04 	ldr.w	pc, [sp], #4
    baf8:	1fff8e1c 	.word	0x1fff8e1c
    bafc:	1fff8e18 	.word	0x1fff8e18

0000bb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    bb00:	b500      	push	{lr}
    bb02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb04:	f7f5 fbb6 	bl	1274 <Sys_GetCoreID>
    bb08:	4603      	mov	r3, r0
    bb0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    bb0c:	4a10      	ldr	r2, [pc, #64]	; (bb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    bb0e:	9b01      	ldr	r3, [sp, #4]
    bb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb14:	2b00      	cmp	r3, #0
    bb16:	d10d      	bne.n	bb34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb18:	f7f5 faca 	bl	10b0 <Adc_schm_read_msr>
    bb1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb1e:	9b00      	ldr	r3, [sp, #0]
    bb20:	f003 0301 	and.w	r3, r3, #1
    bb24:	2b00      	cmp	r3, #0
    bb26:	d100      	bne.n	bb2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    bb2a:	490a      	ldr	r1, [pc, #40]	; (bb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    bb2c:	9b01      	ldr	r3, [sp, #4]
    bb2e:	9a00      	ldr	r2, [sp, #0]
    bb30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    bb34:	4a06      	ldr	r2, [pc, #24]	; (bb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    bb36:	9b01      	ldr	r3, [sp, #4]
    bb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb3c:	1c5a      	adds	r2, r3, #1
    bb3e:	4904      	ldr	r1, [pc, #16]	; (bb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    bb40:	9b01      	ldr	r3, [sp, #4]
    bb42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb46:	bf00      	nop
    bb48:	b003      	add	sp, #12
    bb4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb4e:	bf00      	nop
    bb50:	1fff8e24 	.word	0x1fff8e24
    bb54:	1fff8e20 	.word	0x1fff8e20

0000bb58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    bb58:	b500      	push	{lr}
    bb5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb5c:	f7f5 fb8a 	bl	1274 <Sys_GetCoreID>
    bb60:	4603      	mov	r3, r0
    bb62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    bb64:	4a0d      	ldr	r2, [pc, #52]	; (bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    bb66:	9b01      	ldr	r3, [sp, #4]
    bb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb6c:	1e5a      	subs	r2, r3, #1
    bb6e:	490b      	ldr	r1, [pc, #44]	; (bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    bb70:	9b01      	ldr	r3, [sp, #4]
    bb72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    bb76:	4a0a      	ldr	r2, [pc, #40]	; (bba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    bb78:	9b01      	ldr	r3, [sp, #4]
    bb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb7e:	f003 0301 	and.w	r3, r3, #1
    bb82:	2b00      	cmp	r3, #0
    bb84:	d106      	bne.n	bb94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    bb86:	4a05      	ldr	r2, [pc, #20]	; (bb9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    bb88:	9b01      	ldr	r3, [sp, #4]
    bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d100      	bne.n	bb94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb94:	bf00      	nop
    bb96:	b003      	add	sp, #12
    bb98:	f85d fb04 	ldr.w	pc, [sp], #4
    bb9c:	1fff8e24 	.word	0x1fff8e24
    bba0:	1fff8e20 	.word	0x1fff8e20

0000bba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    bba4:	b500      	push	{lr}
    bba6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bba8:	f7f5 fb64 	bl	1274 <Sys_GetCoreID>
    bbac:	4603      	mov	r3, r0
    bbae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    bbb0:	4a10      	ldr	r2, [pc, #64]	; (bbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    bbb2:	9b01      	ldr	r3, [sp, #4]
    bbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d10d      	bne.n	bbd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbbc:	f7f5 fa78 	bl	10b0 <Adc_schm_read_msr>
    bbc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbc2:	9b00      	ldr	r3, [sp, #0]
    bbc4:	f003 0301 	and.w	r3, r3, #1
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d100      	bne.n	bbce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    bbce:	490a      	ldr	r1, [pc, #40]	; (bbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    bbd0:	9b01      	ldr	r3, [sp, #4]
    bbd2:	9a00      	ldr	r2, [sp, #0]
    bbd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    bbd8:	4a06      	ldr	r2, [pc, #24]	; (bbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    bbda:	9b01      	ldr	r3, [sp, #4]
    bbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbe0:	1c5a      	adds	r2, r3, #1
    bbe2:	4904      	ldr	r1, [pc, #16]	; (bbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbea:	bf00      	nop
    bbec:	b003      	add	sp, #12
    bbee:	f85d fb04 	ldr.w	pc, [sp], #4
    bbf2:	bf00      	nop
    bbf4:	1fff8e2c 	.word	0x1fff8e2c
    bbf8:	1fff8e28 	.word	0x1fff8e28

0000bbfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    bbfc:	b500      	push	{lr}
    bbfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc00:	f7f5 fb38 	bl	1274 <Sys_GetCoreID>
    bc04:	4603      	mov	r3, r0
    bc06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    bc08:	4a0d      	ldr	r2, [pc, #52]	; (bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    bc0a:	9b01      	ldr	r3, [sp, #4]
    bc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc10:	1e5a      	subs	r2, r3, #1
    bc12:	490b      	ldr	r1, [pc, #44]	; (bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    bc14:	9b01      	ldr	r3, [sp, #4]
    bc16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    bc1a:	4a0a      	ldr	r2, [pc, #40]	; (bc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    bc1c:	9b01      	ldr	r3, [sp, #4]
    bc1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc22:	f003 0301 	and.w	r3, r3, #1
    bc26:	2b00      	cmp	r3, #0
    bc28:	d106      	bne.n	bc38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    bc2a:	4a05      	ldr	r2, [pc, #20]	; (bc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    bc2c:	9b01      	ldr	r3, [sp, #4]
    bc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc32:	2b00      	cmp	r3, #0
    bc34:	d100      	bne.n	bc38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc38:	bf00      	nop
    bc3a:	b003      	add	sp, #12
    bc3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bc40:	1fff8e2c 	.word	0x1fff8e2c
    bc44:	1fff8e28 	.word	0x1fff8e28

0000bc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    bc48:	b500      	push	{lr}
    bc4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc4c:	f7f5 fb12 	bl	1274 <Sys_GetCoreID>
    bc50:	4603      	mov	r3, r0
    bc52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    bc54:	4a10      	ldr	r2, [pc, #64]	; (bc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    bc56:	9b01      	ldr	r3, [sp, #4]
    bc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d10d      	bne.n	bc7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc60:	f7f5 fa26 	bl	10b0 <Adc_schm_read_msr>
    bc64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc66:	9b00      	ldr	r3, [sp, #0]
    bc68:	f003 0301 	and.w	r3, r3, #1
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d100      	bne.n	bc72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    bc72:	490a      	ldr	r1, [pc, #40]	; (bc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    bc74:	9b01      	ldr	r3, [sp, #4]
    bc76:	9a00      	ldr	r2, [sp, #0]
    bc78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    bc7c:	4a06      	ldr	r2, [pc, #24]	; (bc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    bc7e:	9b01      	ldr	r3, [sp, #4]
    bc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc84:	1c5a      	adds	r2, r3, #1
    bc86:	4904      	ldr	r1, [pc, #16]	; (bc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    bc88:	9b01      	ldr	r3, [sp, #4]
    bc8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc8e:	bf00      	nop
    bc90:	b003      	add	sp, #12
    bc92:	f85d fb04 	ldr.w	pc, [sp], #4
    bc96:	bf00      	nop
    bc98:	1fff8e34 	.word	0x1fff8e34
    bc9c:	1fff8e30 	.word	0x1fff8e30

0000bca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    bca0:	b500      	push	{lr}
    bca2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bca4:	f7f5 fae6 	bl	1274 <Sys_GetCoreID>
    bca8:	4603      	mov	r3, r0
    bcaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    bcac:	4a0d      	ldr	r2, [pc, #52]	; (bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcb4:	1e5a      	subs	r2, r3, #1
    bcb6:	490b      	ldr	r1, [pc, #44]	; (bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    bcb8:	9b01      	ldr	r3, [sp, #4]
    bcba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    bcbe:	4a0a      	ldr	r2, [pc, #40]	; (bce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    bcc0:	9b01      	ldr	r3, [sp, #4]
    bcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcc6:	f003 0301 	and.w	r3, r3, #1
    bcca:	2b00      	cmp	r3, #0
    bccc:	d106      	bne.n	bcdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    bcce:	4a05      	ldr	r2, [pc, #20]	; (bce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	d100      	bne.n	bcdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bcda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bcdc:	bf00      	nop
    bcde:	b003      	add	sp, #12
    bce0:	f85d fb04 	ldr.w	pc, [sp], #4
    bce4:	1fff8e34 	.word	0x1fff8e34
    bce8:	1fff8e30 	.word	0x1fff8e30

0000bcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    bcec:	b500      	push	{lr}
    bcee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcf0:	f7f5 fac0 	bl	1274 <Sys_GetCoreID>
    bcf4:	4603      	mov	r3, r0
    bcf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    bcf8:	4a10      	ldr	r2, [pc, #64]	; (bd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    bcfa:	9b01      	ldr	r3, [sp, #4]
    bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd00:	2b00      	cmp	r3, #0
    bd02:	d10d      	bne.n	bd20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd04:	f7f5 f9d4 	bl	10b0 <Adc_schm_read_msr>
    bd08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd0a:	9b00      	ldr	r3, [sp, #0]
    bd0c:	f003 0301 	and.w	r3, r3, #1
    bd10:	2b00      	cmp	r3, #0
    bd12:	d100      	bne.n	bd16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    bd16:	490a      	ldr	r1, [pc, #40]	; (bd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    bd18:	9b01      	ldr	r3, [sp, #4]
    bd1a:	9a00      	ldr	r2, [sp, #0]
    bd1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    bd20:	4a06      	ldr	r2, [pc, #24]	; (bd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    bd22:	9b01      	ldr	r3, [sp, #4]
    bd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd28:	1c5a      	adds	r2, r3, #1
    bd2a:	4904      	ldr	r1, [pc, #16]	; (bd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    bd2c:	9b01      	ldr	r3, [sp, #4]
    bd2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd32:	bf00      	nop
    bd34:	b003      	add	sp, #12
    bd36:	f85d fb04 	ldr.w	pc, [sp], #4
    bd3a:	bf00      	nop
    bd3c:	1fff8e3c 	.word	0x1fff8e3c
    bd40:	1fff8e38 	.word	0x1fff8e38

0000bd44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    bd44:	b500      	push	{lr}
    bd46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd48:	f7f5 fa94 	bl	1274 <Sys_GetCoreID>
    bd4c:	4603      	mov	r3, r0
    bd4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    bd50:	4a0d      	ldr	r2, [pc, #52]	; (bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd58:	1e5a      	subs	r2, r3, #1
    bd5a:	490b      	ldr	r1, [pc, #44]	; (bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    bd5c:	9b01      	ldr	r3, [sp, #4]
    bd5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    bd62:	4a0a      	ldr	r2, [pc, #40]	; (bd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd6a:	f003 0301 	and.w	r3, r3, #1
    bd6e:	2b00      	cmp	r3, #0
    bd70:	d106      	bne.n	bd80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    bd72:	4a05      	ldr	r2, [pc, #20]	; (bd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    bd74:	9b01      	ldr	r3, [sp, #4]
    bd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd7a:	2b00      	cmp	r3, #0
    bd7c:	d100      	bne.n	bd80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd80:	bf00      	nop
    bd82:	b003      	add	sp, #12
    bd84:	f85d fb04 	ldr.w	pc, [sp], #4
    bd88:	1fff8e3c 	.word	0x1fff8e3c
    bd8c:	1fff8e38 	.word	0x1fff8e38

0000bd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    bd90:	b500      	push	{lr}
    bd92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd94:	f7f5 fa6e 	bl	1274 <Sys_GetCoreID>
    bd98:	4603      	mov	r3, r0
    bd9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    bd9c:	4a10      	ldr	r2, [pc, #64]	; (bde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    bd9e:	9b01      	ldr	r3, [sp, #4]
    bda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bda4:	2b00      	cmp	r3, #0
    bda6:	d10d      	bne.n	bdc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bda8:	f7f5 f982 	bl	10b0 <Adc_schm_read_msr>
    bdac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdae:	9b00      	ldr	r3, [sp, #0]
    bdb0:	f003 0301 	and.w	r3, r3, #1
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	d100      	bne.n	bdba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    bdba:	490a      	ldr	r1, [pc, #40]	; (bde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    bdbc:	9b01      	ldr	r3, [sp, #4]
    bdbe:	9a00      	ldr	r2, [sp, #0]
    bdc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    bdc4:	4a06      	ldr	r2, [pc, #24]	; (bde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    bdc6:	9b01      	ldr	r3, [sp, #4]
    bdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdcc:	1c5a      	adds	r2, r3, #1
    bdce:	4904      	ldr	r1, [pc, #16]	; (bde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdd6:	bf00      	nop
    bdd8:	b003      	add	sp, #12
    bdda:	f85d fb04 	ldr.w	pc, [sp], #4
    bdde:	bf00      	nop
    bde0:	1fff8e44 	.word	0x1fff8e44
    bde4:	1fff8e40 	.word	0x1fff8e40

0000bde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    bde8:	b500      	push	{lr}
    bdea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdec:	f7f5 fa42 	bl	1274 <Sys_GetCoreID>
    bdf0:	4603      	mov	r3, r0
    bdf2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    bdf4:	4a0d      	ldr	r2, [pc, #52]	; (be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    bdf6:	9b01      	ldr	r3, [sp, #4]
    bdf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdfc:	1e5a      	subs	r2, r3, #1
    bdfe:	490b      	ldr	r1, [pc, #44]	; (be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    be00:	9b01      	ldr	r3, [sp, #4]
    be02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    be06:	4a0a      	ldr	r2, [pc, #40]	; (be30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be0e:	f003 0301 	and.w	r3, r3, #1
    be12:	2b00      	cmp	r3, #0
    be14:	d106      	bne.n	be24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    be16:	4a05      	ldr	r2, [pc, #20]	; (be2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be1e:	2b00      	cmp	r3, #0
    be20:	d100      	bne.n	be24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be24:	bf00      	nop
    be26:	b003      	add	sp, #12
    be28:	f85d fb04 	ldr.w	pc, [sp], #4
    be2c:	1fff8e44 	.word	0x1fff8e44
    be30:	1fff8e40 	.word	0x1fff8e40

0000be34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    be34:	b500      	push	{lr}
    be36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be38:	f7f5 fa1c 	bl	1274 <Sys_GetCoreID>
    be3c:	4603      	mov	r3, r0
    be3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    be40:	4a10      	ldr	r2, [pc, #64]	; (be84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    be42:	9b01      	ldr	r3, [sp, #4]
    be44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be48:	2b00      	cmp	r3, #0
    be4a:	d10d      	bne.n	be68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be4c:	f7f5 f930 	bl	10b0 <Adc_schm_read_msr>
    be50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be52:	9b00      	ldr	r3, [sp, #0]
    be54:	f003 0301 	and.w	r3, r3, #1
    be58:	2b00      	cmp	r3, #0
    be5a:	d100      	bne.n	be5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    be5e:	490a      	ldr	r1, [pc, #40]	; (be88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    be60:	9b01      	ldr	r3, [sp, #4]
    be62:	9a00      	ldr	r2, [sp, #0]
    be64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    be68:	4a06      	ldr	r2, [pc, #24]	; (be84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    be6a:	9b01      	ldr	r3, [sp, #4]
    be6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be70:	1c5a      	adds	r2, r3, #1
    be72:	4904      	ldr	r1, [pc, #16]	; (be84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    be74:	9b01      	ldr	r3, [sp, #4]
    be76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be7a:	bf00      	nop
    be7c:	b003      	add	sp, #12
    be7e:	f85d fb04 	ldr.w	pc, [sp], #4
    be82:	bf00      	nop
    be84:	1fff8e4c 	.word	0x1fff8e4c
    be88:	1fff8e48 	.word	0x1fff8e48

0000be8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    be8c:	b500      	push	{lr}
    be8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be90:	f7f5 f9f0 	bl	1274 <Sys_GetCoreID>
    be94:	4603      	mov	r3, r0
    be96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    be98:	4a0d      	ldr	r2, [pc, #52]	; (bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    be9a:	9b01      	ldr	r3, [sp, #4]
    be9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea0:	1e5a      	subs	r2, r3, #1
    bea2:	490b      	ldr	r1, [pc, #44]	; (bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    beaa:	4a0a      	ldr	r2, [pc, #40]	; (bed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    beac:	9b01      	ldr	r3, [sp, #4]
    beae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beb2:	f003 0301 	and.w	r3, r3, #1
    beb6:	2b00      	cmp	r3, #0
    beb8:	d106      	bne.n	bec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    beba:	4a05      	ldr	r2, [pc, #20]	; (bed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bec2:	2b00      	cmp	r3, #0
    bec4:	d100      	bne.n	bec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bec6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bec8:	bf00      	nop
    beca:	b003      	add	sp, #12
    becc:	f85d fb04 	ldr.w	pc, [sp], #4
    bed0:	1fff8e4c 	.word	0x1fff8e4c
    bed4:	1fff8e48 	.word	0x1fff8e48

0000bed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    bed8:	b500      	push	{lr}
    beda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bedc:	f7f5 f9ca 	bl	1274 <Sys_GetCoreID>
    bee0:	4603      	mov	r3, r0
    bee2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    bee4:	4a10      	ldr	r2, [pc, #64]	; (bf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bee6:	9b01      	ldr	r3, [sp, #4]
    bee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beec:	2b00      	cmp	r3, #0
    beee:	d10d      	bne.n	bf0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bef0:	f7f5 f8de 	bl	10b0 <Adc_schm_read_msr>
    bef4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bef6:	9b00      	ldr	r3, [sp, #0]
    bef8:	f003 0301 	and.w	r3, r3, #1
    befc:	2b00      	cmp	r3, #0
    befe:	d100      	bne.n	bf02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    bf02:	490a      	ldr	r1, [pc, #40]	; (bf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    bf04:	9b01      	ldr	r3, [sp, #4]
    bf06:	9a00      	ldr	r2, [sp, #0]
    bf08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    bf0c:	4a06      	ldr	r2, [pc, #24]	; (bf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bf0e:	9b01      	ldr	r3, [sp, #4]
    bf10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf14:	1c5a      	adds	r2, r3, #1
    bf16:	4904      	ldr	r1, [pc, #16]	; (bf28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    bf18:	9b01      	ldr	r3, [sp, #4]
    bf1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf1e:	bf00      	nop
    bf20:	b003      	add	sp, #12
    bf22:	f85d fb04 	ldr.w	pc, [sp], #4
    bf26:	bf00      	nop
    bf28:	1fff8e54 	.word	0x1fff8e54
    bf2c:	1fff8e50 	.word	0x1fff8e50

0000bf30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    bf30:	b500      	push	{lr}
    bf32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf34:	f7f5 f99e 	bl	1274 <Sys_GetCoreID>
    bf38:	4603      	mov	r3, r0
    bf3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    bf3c:	4a0d      	ldr	r2, [pc, #52]	; (bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bf3e:	9b01      	ldr	r3, [sp, #4]
    bf40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf44:	1e5a      	subs	r2, r3, #1
    bf46:	490b      	ldr	r1, [pc, #44]	; (bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bf48:	9b01      	ldr	r3, [sp, #4]
    bf4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    bf4e:	4a0a      	ldr	r2, [pc, #40]	; (bf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    bf50:	9b01      	ldr	r3, [sp, #4]
    bf52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf56:	f003 0301 	and.w	r3, r3, #1
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d106      	bne.n	bf6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    bf5e:	4a05      	ldr	r2, [pc, #20]	; (bf74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf66:	2b00      	cmp	r3, #0
    bf68:	d100      	bne.n	bf6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf6c:	bf00      	nop
    bf6e:	b003      	add	sp, #12
    bf70:	f85d fb04 	ldr.w	pc, [sp], #4
    bf74:	1fff8e54 	.word	0x1fff8e54
    bf78:	1fff8e50 	.word	0x1fff8e50

0000bf7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bf7c:	b500      	push	{lr}
    bf7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf80:	f7f5 f978 	bl	1274 <Sys_GetCoreID>
    bf84:	4603      	mov	r3, r0
    bf86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    bf88:	4a10      	ldr	r2, [pc, #64]	; (bfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bf8a:	9b01      	ldr	r3, [sp, #4]
    bf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf90:	2b00      	cmp	r3, #0
    bf92:	d10d      	bne.n	bfb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf94:	f7f5 f88c 	bl	10b0 <Adc_schm_read_msr>
    bf98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf9a:	9b00      	ldr	r3, [sp, #0]
    bf9c:	f003 0301 	and.w	r3, r3, #1
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	d100      	bne.n	bfa6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    bfa6:	490a      	ldr	r1, [pc, #40]	; (bfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    bfa8:	9b01      	ldr	r3, [sp, #4]
    bfaa:	9a00      	ldr	r2, [sp, #0]
    bfac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    bfb0:	4a06      	ldr	r2, [pc, #24]	; (bfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bfb2:	9b01      	ldr	r3, [sp, #4]
    bfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb8:	1c5a      	adds	r2, r3, #1
    bfba:	4904      	ldr	r1, [pc, #16]	; (bfcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    bfbc:	9b01      	ldr	r3, [sp, #4]
    bfbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfc2:	bf00      	nop
    bfc4:	b003      	add	sp, #12
    bfc6:	f85d fb04 	ldr.w	pc, [sp], #4
    bfca:	bf00      	nop
    bfcc:	1fff8e5c 	.word	0x1fff8e5c
    bfd0:	1fff8e58 	.word	0x1fff8e58

0000bfd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    bfd4:	b500      	push	{lr}
    bfd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfd8:	f7f5 f94c 	bl	1274 <Sys_GetCoreID>
    bfdc:	4603      	mov	r3, r0
    bfde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    bfe0:	4a0d      	ldr	r2, [pc, #52]	; (c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bfe2:	9b01      	ldr	r3, [sp, #4]
    bfe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfe8:	1e5a      	subs	r2, r3, #1
    bfea:	490b      	ldr	r1, [pc, #44]	; (c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    bfec:	9b01      	ldr	r3, [sp, #4]
    bfee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    bff2:	4a0a      	ldr	r2, [pc, #40]	; (c01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    bff4:	9b01      	ldr	r3, [sp, #4]
    bff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bffa:	f003 0301 	and.w	r3, r3, #1
    bffe:	2b00      	cmp	r3, #0
    c000:	d106      	bne.n	c010 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    c002:	4a05      	ldr	r2, [pc, #20]	; (c018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    c004:	9b01      	ldr	r3, [sp, #4]
    c006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c00a:	2b00      	cmp	r3, #0
    c00c:	d100      	bne.n	c010 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c00e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c010:	bf00      	nop
    c012:	b003      	add	sp, #12
    c014:	f85d fb04 	ldr.w	pc, [sp], #4
    c018:	1fff8e5c 	.word	0x1fff8e5c
    c01c:	1fff8e58 	.word	0x1fff8e58

0000c020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    c020:	b500      	push	{lr}
    c022:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c024:	f7f5 f926 	bl	1274 <Sys_GetCoreID>
    c028:	4603      	mov	r3, r0
    c02a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    c02c:	4a10      	ldr	r2, [pc, #64]	; (c070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    c02e:	9b01      	ldr	r3, [sp, #4]
    c030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c034:	2b00      	cmp	r3, #0
    c036:	d10d      	bne.n	c054 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c038:	f7f5 f83a 	bl	10b0 <Adc_schm_read_msr>
    c03c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c03e:	9b00      	ldr	r3, [sp, #0]
    c040:	f003 0301 	and.w	r3, r3, #1
    c044:	2b00      	cmp	r3, #0
    c046:	d100      	bne.n	c04a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c048:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    c04a:	490a      	ldr	r1, [pc, #40]	; (c074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    c04c:	9b01      	ldr	r3, [sp, #4]
    c04e:	9a00      	ldr	r2, [sp, #0]
    c050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    c054:	4a06      	ldr	r2, [pc, #24]	; (c070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    c056:	9b01      	ldr	r3, [sp, #4]
    c058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c05c:	1c5a      	adds	r2, r3, #1
    c05e:	4904      	ldr	r1, [pc, #16]	; (c070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c066:	bf00      	nop
    c068:	b003      	add	sp, #12
    c06a:	f85d fb04 	ldr.w	pc, [sp], #4
    c06e:	bf00      	nop
    c070:	1fff8e64 	.word	0x1fff8e64
    c074:	1fff8e60 	.word	0x1fff8e60

0000c078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    c078:	b500      	push	{lr}
    c07a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c07c:	f7f5 f8fa 	bl	1274 <Sys_GetCoreID>
    c080:	4603      	mov	r3, r0
    c082:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    c084:	4a0d      	ldr	r2, [pc, #52]	; (c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    c086:	9b01      	ldr	r3, [sp, #4]
    c088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c08c:	1e5a      	subs	r2, r3, #1
    c08e:	490b      	ldr	r1, [pc, #44]	; (c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    c090:	9b01      	ldr	r3, [sp, #4]
    c092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    c096:	4a0a      	ldr	r2, [pc, #40]	; (c0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    c098:	9b01      	ldr	r3, [sp, #4]
    c09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c09e:	f003 0301 	and.w	r3, r3, #1
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d106      	bne.n	c0b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    c0a6:	4a05      	ldr	r2, [pc, #20]	; (c0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d100      	bne.n	c0b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0b4:	bf00      	nop
    c0b6:	b003      	add	sp, #12
    c0b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c0bc:	1fff8e64 	.word	0x1fff8e64
    c0c0:	1fff8e60 	.word	0x1fff8e60

0000c0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    c0c4:	b500      	push	{lr}
    c0c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0c8:	f7f5 f8d4 	bl	1274 <Sys_GetCoreID>
    c0cc:	4603      	mov	r3, r0
    c0ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    c0d0:	4a10      	ldr	r2, [pc, #64]	; (c114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    c0d2:	9b01      	ldr	r3, [sp, #4]
    c0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d10d      	bne.n	c0f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0dc:	f7f4 ffe8 	bl	10b0 <Adc_schm_read_msr>
    c0e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0e2:	9b00      	ldr	r3, [sp, #0]
    c0e4:	f003 0301 	and.w	r3, r3, #1
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d100      	bne.n	c0ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    c0ee:	490a      	ldr	r1, [pc, #40]	; (c118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    c0f0:	9b01      	ldr	r3, [sp, #4]
    c0f2:	9a00      	ldr	r2, [sp, #0]
    c0f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    c0f8:	4a06      	ldr	r2, [pc, #24]	; (c114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    c0fa:	9b01      	ldr	r3, [sp, #4]
    c0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c100:	1c5a      	adds	r2, r3, #1
    c102:	4904      	ldr	r1, [pc, #16]	; (c114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    c104:	9b01      	ldr	r3, [sp, #4]
    c106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c10a:	bf00      	nop
    c10c:	b003      	add	sp, #12
    c10e:	f85d fb04 	ldr.w	pc, [sp], #4
    c112:	bf00      	nop
    c114:	1fff8e6c 	.word	0x1fff8e6c
    c118:	1fff8e68 	.word	0x1fff8e68

0000c11c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    c11c:	b500      	push	{lr}
    c11e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c120:	f7f5 f8a8 	bl	1274 <Sys_GetCoreID>
    c124:	4603      	mov	r3, r0
    c126:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    c128:	4a0d      	ldr	r2, [pc, #52]	; (c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    c12a:	9b01      	ldr	r3, [sp, #4]
    c12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c130:	1e5a      	subs	r2, r3, #1
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    c134:	9b01      	ldr	r3, [sp, #4]
    c136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    c13a:	4a0a      	ldr	r2, [pc, #40]	; (c164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    c13c:	9b01      	ldr	r3, [sp, #4]
    c13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c142:	f003 0301 	and.w	r3, r3, #1
    c146:	2b00      	cmp	r3, #0
    c148:	d106      	bne.n	c158 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    c14a:	4a05      	ldr	r2, [pc, #20]	; (c160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c152:	2b00      	cmp	r3, #0
    c154:	d100      	bne.n	c158 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c156:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c158:	bf00      	nop
    c15a:	b003      	add	sp, #12
    c15c:	f85d fb04 	ldr.w	pc, [sp], #4
    c160:	1fff8e6c 	.word	0x1fff8e6c
    c164:	1fff8e68 	.word	0x1fff8e68

0000c168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    c168:	b500      	push	{lr}
    c16a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c16c:	f7f5 f882 	bl	1274 <Sys_GetCoreID>
    c170:	4603      	mov	r3, r0
    c172:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    c174:	4a10      	ldr	r2, [pc, #64]	; (c1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    c176:	9b01      	ldr	r3, [sp, #4]
    c178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c17c:	2b00      	cmp	r3, #0
    c17e:	d10d      	bne.n	c19c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c180:	f7f4 ff96 	bl	10b0 <Adc_schm_read_msr>
    c184:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c186:	9b00      	ldr	r3, [sp, #0]
    c188:	f003 0301 	and.w	r3, r3, #1
    c18c:	2b00      	cmp	r3, #0
    c18e:	d100      	bne.n	c192 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c190:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    c192:	490a      	ldr	r1, [pc, #40]	; (c1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    c194:	9b01      	ldr	r3, [sp, #4]
    c196:	9a00      	ldr	r2, [sp, #0]
    c198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    c19c:	4a06      	ldr	r2, [pc, #24]	; (c1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    c19e:	9b01      	ldr	r3, [sp, #4]
    c1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1a4:	1c5a      	adds	r2, r3, #1
    c1a6:	4904      	ldr	r1, [pc, #16]	; (c1b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    c1a8:	9b01      	ldr	r3, [sp, #4]
    c1aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1ae:	bf00      	nop
    c1b0:	b003      	add	sp, #12
    c1b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c1b6:	bf00      	nop
    c1b8:	1fff8e74 	.word	0x1fff8e74
    c1bc:	1fff8e70 	.word	0x1fff8e70

0000c1c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    c1c0:	b500      	push	{lr}
    c1c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1c4:	f7f5 f856 	bl	1274 <Sys_GetCoreID>
    c1c8:	4603      	mov	r3, r0
    c1ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    c1cc:	4a0d      	ldr	r2, [pc, #52]	; (c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    c1ce:	9b01      	ldr	r3, [sp, #4]
    c1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1d4:	1e5a      	subs	r2, r3, #1
    c1d6:	490b      	ldr	r1, [pc, #44]	; (c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    c1d8:	9b01      	ldr	r3, [sp, #4]
    c1da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    c1de:	4a0a      	ldr	r2, [pc, #40]	; (c208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    c1e0:	9b01      	ldr	r3, [sp, #4]
    c1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1e6:	f003 0301 	and.w	r3, r3, #1
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	d106      	bne.n	c1fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    c1ee:	4a05      	ldr	r2, [pc, #20]	; (c204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    c1f0:	9b01      	ldr	r3, [sp, #4]
    c1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	d100      	bne.n	c1fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c1fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c1fc:	bf00      	nop
    c1fe:	b003      	add	sp, #12
    c200:	f85d fb04 	ldr.w	pc, [sp], #4
    c204:	1fff8e74 	.word	0x1fff8e74
    c208:	1fff8e70 	.word	0x1fff8e70

0000c20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    c20c:	b500      	push	{lr}
    c20e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c210:	f7f5 f830 	bl	1274 <Sys_GetCoreID>
    c214:	4603      	mov	r3, r0
    c216:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    c218:	4a10      	ldr	r2, [pc, #64]	; (c25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    c21a:	9b01      	ldr	r3, [sp, #4]
    c21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c220:	2b00      	cmp	r3, #0
    c222:	d10d      	bne.n	c240 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c224:	f7f4 ff44 	bl	10b0 <Adc_schm_read_msr>
    c228:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c22a:	9b00      	ldr	r3, [sp, #0]
    c22c:	f003 0301 	and.w	r3, r3, #1
    c230:	2b00      	cmp	r3, #0
    c232:	d100      	bne.n	c236 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c234:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    c236:	490a      	ldr	r1, [pc, #40]	; (c260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    c238:	9b01      	ldr	r3, [sp, #4]
    c23a:	9a00      	ldr	r2, [sp, #0]
    c23c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    c240:	4a06      	ldr	r2, [pc, #24]	; (c25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    c242:	9b01      	ldr	r3, [sp, #4]
    c244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c248:	1c5a      	adds	r2, r3, #1
    c24a:	4904      	ldr	r1, [pc, #16]	; (c25c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    c24c:	9b01      	ldr	r3, [sp, #4]
    c24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c252:	bf00      	nop
    c254:	b003      	add	sp, #12
    c256:	f85d fb04 	ldr.w	pc, [sp], #4
    c25a:	bf00      	nop
    c25c:	1fff8e7c 	.word	0x1fff8e7c
    c260:	1fff8e78 	.word	0x1fff8e78

0000c264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    c264:	b500      	push	{lr}
    c266:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c268:	f7f5 f804 	bl	1274 <Sys_GetCoreID>
    c26c:	4603      	mov	r3, r0
    c26e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    c270:	4a0d      	ldr	r2, [pc, #52]	; (c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c278:	1e5a      	subs	r2, r3, #1
    c27a:	490b      	ldr	r1, [pc, #44]	; (c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    c27c:	9b01      	ldr	r3, [sp, #4]
    c27e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    c282:	4a0a      	ldr	r2, [pc, #40]	; (c2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c28a:	f003 0301 	and.w	r3, r3, #1
    c28e:	2b00      	cmp	r3, #0
    c290:	d106      	bne.n	c2a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    c292:	4a05      	ldr	r2, [pc, #20]	; (c2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c29a:	2b00      	cmp	r3, #0
    c29c:	d100      	bne.n	c2a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c29e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2a0:	bf00      	nop
    c2a2:	b003      	add	sp, #12
    c2a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a8:	1fff8e7c 	.word	0x1fff8e7c
    c2ac:	1fff8e78 	.word	0x1fff8e78

0000c2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    c2b0:	b500      	push	{lr}
    c2b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2b4:	f7f4 ffde 	bl	1274 <Sys_GetCoreID>
    c2b8:	4603      	mov	r3, r0
    c2ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    c2bc:	4a10      	ldr	r2, [pc, #64]	; (c300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    c2be:	9b01      	ldr	r3, [sp, #4]
    c2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d10d      	bne.n	c2e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2c8:	f7f4 fef2 	bl	10b0 <Adc_schm_read_msr>
    c2cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2ce:	9b00      	ldr	r3, [sp, #0]
    c2d0:	f003 0301 	and.w	r3, r3, #1
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d100      	bne.n	c2da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    c2da:	490a      	ldr	r1, [pc, #40]	; (c304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    c2dc:	9b01      	ldr	r3, [sp, #4]
    c2de:	9a00      	ldr	r2, [sp, #0]
    c2e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    c2e4:	4a06      	ldr	r2, [pc, #24]	; (c300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    c2e6:	9b01      	ldr	r3, [sp, #4]
    c2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2ec:	1c5a      	adds	r2, r3, #1
    c2ee:	4904      	ldr	r1, [pc, #16]	; (c300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2f6:	bf00      	nop
    c2f8:	b003      	add	sp, #12
    c2fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c2fe:	bf00      	nop
    c300:	1fff8e84 	.word	0x1fff8e84
    c304:	1fff8e80 	.word	0x1fff8e80

0000c308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    c308:	b500      	push	{lr}
    c30a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c30c:	f7f4 ffb2 	bl	1274 <Sys_GetCoreID>
    c310:	4603      	mov	r3, r0
    c312:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    c314:	4a0d      	ldr	r2, [pc, #52]	; (c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    c316:	9b01      	ldr	r3, [sp, #4]
    c318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c31c:	1e5a      	subs	r2, r3, #1
    c31e:	490b      	ldr	r1, [pc, #44]	; (c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    c320:	9b01      	ldr	r3, [sp, #4]
    c322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    c326:	4a0a      	ldr	r2, [pc, #40]	; (c350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    c328:	9b01      	ldr	r3, [sp, #4]
    c32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c32e:	f003 0301 	and.w	r3, r3, #1
    c332:	2b00      	cmp	r3, #0
    c334:	d106      	bne.n	c344 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    c336:	4a05      	ldr	r2, [pc, #20]	; (c34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    c338:	9b01      	ldr	r3, [sp, #4]
    c33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33e:	2b00      	cmp	r3, #0
    c340:	d100      	bne.n	c344 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c342:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c344:	bf00      	nop
    c346:	b003      	add	sp, #12
    c348:	f85d fb04 	ldr.w	pc, [sp], #4
    c34c:	1fff8e84 	.word	0x1fff8e84
    c350:	1fff8e80 	.word	0x1fff8e80

0000c354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    c354:	b500      	push	{lr}
    c356:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c358:	f7f4 ff8c 	bl	1274 <Sys_GetCoreID>
    c35c:	4603      	mov	r3, r0
    c35e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    c360:	4a10      	ldr	r2, [pc, #64]	; (c3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    c362:	9b01      	ldr	r3, [sp, #4]
    c364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c368:	2b00      	cmp	r3, #0
    c36a:	d10d      	bne.n	c388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c36c:	f7f4 fea0 	bl	10b0 <Adc_schm_read_msr>
    c370:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c372:	9b00      	ldr	r3, [sp, #0]
    c374:	f003 0301 	and.w	r3, r3, #1
    c378:	2b00      	cmp	r3, #0
    c37a:	d100      	bne.n	c37e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c37c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    c37e:	490a      	ldr	r1, [pc, #40]	; (c3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    c380:	9b01      	ldr	r3, [sp, #4]
    c382:	9a00      	ldr	r2, [sp, #0]
    c384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    c388:	4a06      	ldr	r2, [pc, #24]	; (c3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    c38a:	9b01      	ldr	r3, [sp, #4]
    c38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c390:	1c5a      	adds	r2, r3, #1
    c392:	4904      	ldr	r1, [pc, #16]	; (c3a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c39a:	bf00      	nop
    c39c:	b003      	add	sp, #12
    c39e:	f85d fb04 	ldr.w	pc, [sp], #4
    c3a2:	bf00      	nop
    c3a4:	1fff8e8c 	.word	0x1fff8e8c
    c3a8:	1fff8e88 	.word	0x1fff8e88

0000c3ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    c3ac:	b500      	push	{lr}
    c3ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3b0:	f7f4 ff60 	bl	1274 <Sys_GetCoreID>
    c3b4:	4603      	mov	r3, r0
    c3b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    c3b8:	4a0d      	ldr	r2, [pc, #52]	; (c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c3ba:	9b01      	ldr	r3, [sp, #4]
    c3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3c0:	1e5a      	subs	r2, r3, #1
    c3c2:	490b      	ldr	r1, [pc, #44]	; (c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c3c4:	9b01      	ldr	r3, [sp, #4]
    c3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    c3ca:	4a0a      	ldr	r2, [pc, #40]	; (c3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d2:	f003 0301 	and.w	r3, r3, #1
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d106      	bne.n	c3e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    c3da:	4a05      	ldr	r2, [pc, #20]	; (c3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    c3dc:	9b01      	ldr	r3, [sp, #4]
    c3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d100      	bne.n	c3e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3e8:	bf00      	nop
    c3ea:	b003      	add	sp, #12
    c3ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c3f0:	1fff8e8c 	.word	0x1fff8e8c
    c3f4:	1fff8e88 	.word	0x1fff8e88

0000c3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    c3f8:	b500      	push	{lr}
    c3fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3fc:	f7f4 ff3a 	bl	1274 <Sys_GetCoreID>
    c400:	4603      	mov	r3, r0
    c402:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    c404:	4a10      	ldr	r2, [pc, #64]	; (c448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c406:	9b01      	ldr	r3, [sp, #4]
    c408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c40c:	2b00      	cmp	r3, #0
    c40e:	d10d      	bne.n	c42c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c410:	f7f4 fe4e 	bl	10b0 <Adc_schm_read_msr>
    c414:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c416:	9b00      	ldr	r3, [sp, #0]
    c418:	f003 0301 	and.w	r3, r3, #1
    c41c:	2b00      	cmp	r3, #0
    c41e:	d100      	bne.n	c422 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c420:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    c422:	490a      	ldr	r1, [pc, #40]	; (c44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    c424:	9b01      	ldr	r3, [sp, #4]
    c426:	9a00      	ldr	r2, [sp, #0]
    c428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    c42c:	4a06      	ldr	r2, [pc, #24]	; (c448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c42e:	9b01      	ldr	r3, [sp, #4]
    c430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c434:	1c5a      	adds	r2, r3, #1
    c436:	4904      	ldr	r1, [pc, #16]	; (c448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c43e:	bf00      	nop
    c440:	b003      	add	sp, #12
    c442:	f85d fb04 	ldr.w	pc, [sp], #4
    c446:	bf00      	nop
    c448:	1fff8e94 	.word	0x1fff8e94
    c44c:	1fff8e90 	.word	0x1fff8e90

0000c450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    c450:	b500      	push	{lr}
    c452:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c454:	f7f4 ff0e 	bl	1274 <Sys_GetCoreID>
    c458:	4603      	mov	r3, r0
    c45a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    c45c:	4a0d      	ldr	r2, [pc, #52]	; (c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c45e:	9b01      	ldr	r3, [sp, #4]
    c460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c464:	1e5a      	subs	r2, r3, #1
    c466:	490b      	ldr	r1, [pc, #44]	; (c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c468:	9b01      	ldr	r3, [sp, #4]
    c46a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    c46e:	4a0a      	ldr	r2, [pc, #40]	; (c498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c476:	f003 0301 	and.w	r3, r3, #1
    c47a:	2b00      	cmp	r3, #0
    c47c:	d106      	bne.n	c48c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    c47e:	4a05      	ldr	r2, [pc, #20]	; (c494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    c480:	9b01      	ldr	r3, [sp, #4]
    c482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c486:	2b00      	cmp	r3, #0
    c488:	d100      	bne.n	c48c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c48a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c48c:	bf00      	nop
    c48e:	b003      	add	sp, #12
    c490:	f85d fb04 	ldr.w	pc, [sp], #4
    c494:	1fff8e94 	.word	0x1fff8e94
    c498:	1fff8e90 	.word	0x1fff8e90

0000c49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c49c:	b500      	push	{lr}
    c49e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4a0:	f7f4 fee8 	bl	1274 <Sys_GetCoreID>
    c4a4:	4603      	mov	r3, r0
    c4a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    c4a8:	4a10      	ldr	r2, [pc, #64]	; (c4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c4aa:	9b01      	ldr	r3, [sp, #4]
    c4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d10d      	bne.n	c4d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4b4:	f7f4 fdfc 	bl	10b0 <Adc_schm_read_msr>
    c4b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4ba:	9b00      	ldr	r3, [sp, #0]
    c4bc:	f003 0301 	and.w	r3, r3, #1
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d100      	bne.n	c4c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    c4c6:	490a      	ldr	r1, [pc, #40]	; (c4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    c4c8:	9b01      	ldr	r3, [sp, #4]
    c4ca:	9a00      	ldr	r2, [sp, #0]
    c4cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    c4d0:	4a06      	ldr	r2, [pc, #24]	; (c4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c4d2:	9b01      	ldr	r3, [sp, #4]
    c4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d8:	1c5a      	adds	r2, r3, #1
    c4da:	4904      	ldr	r1, [pc, #16]	; (c4ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    c4dc:	9b01      	ldr	r3, [sp, #4]
    c4de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4e2:	bf00      	nop
    c4e4:	b003      	add	sp, #12
    c4e6:	f85d fb04 	ldr.w	pc, [sp], #4
    c4ea:	bf00      	nop
    c4ec:	1fff8e9c 	.word	0x1fff8e9c
    c4f0:	1fff8e98 	.word	0x1fff8e98

0000c4f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    c4f4:	b500      	push	{lr}
    c4f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4f8:	f7f4 febc 	bl	1274 <Sys_GetCoreID>
    c4fc:	4603      	mov	r3, r0
    c4fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    c500:	4a0d      	ldr	r2, [pc, #52]	; (c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c502:	9b01      	ldr	r3, [sp, #4]
    c504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c508:	1e5a      	subs	r2, r3, #1
    c50a:	490b      	ldr	r1, [pc, #44]	; (c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c50c:	9b01      	ldr	r3, [sp, #4]
    c50e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    c512:	4a0a      	ldr	r2, [pc, #40]	; (c53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    c514:	9b01      	ldr	r3, [sp, #4]
    c516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c51a:	f003 0301 	and.w	r3, r3, #1
    c51e:	2b00      	cmp	r3, #0
    c520:	d106      	bne.n	c530 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    c522:	4a05      	ldr	r2, [pc, #20]	; (c538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    c524:	9b01      	ldr	r3, [sp, #4]
    c526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c52a:	2b00      	cmp	r3, #0
    c52c:	d100      	bne.n	c530 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c52e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c530:	bf00      	nop
    c532:	b003      	add	sp, #12
    c534:	f85d fb04 	ldr.w	pc, [sp], #4
    c538:	1fff8e9c 	.word	0x1fff8e9c
    c53c:	1fff8e98 	.word	0x1fff8e98

0000c540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c540:	b500      	push	{lr}
    c542:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c544:	f7f4 fe96 	bl	1274 <Sys_GetCoreID>
    c548:	4603      	mov	r3, r0
    c54a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    c54c:	4a10      	ldr	r2, [pc, #64]	; (c590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c54e:	9b01      	ldr	r3, [sp, #4]
    c550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c554:	2b00      	cmp	r3, #0
    c556:	d10d      	bne.n	c574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c558:	f7f4 fdaa 	bl	10b0 <Adc_schm_read_msr>
    c55c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c55e:	9b00      	ldr	r3, [sp, #0]
    c560:	f003 0301 	and.w	r3, r3, #1
    c564:	2b00      	cmp	r3, #0
    c566:	d100      	bne.n	c56a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c568:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    c56a:	490a      	ldr	r1, [pc, #40]	; (c594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    c56c:	9b01      	ldr	r3, [sp, #4]
    c56e:	9a00      	ldr	r2, [sp, #0]
    c570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    c574:	4a06      	ldr	r2, [pc, #24]	; (c590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c576:	9b01      	ldr	r3, [sp, #4]
    c578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c57c:	1c5a      	adds	r2, r3, #1
    c57e:	4904      	ldr	r1, [pc, #16]	; (c590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c586:	bf00      	nop
    c588:	b003      	add	sp, #12
    c58a:	f85d fb04 	ldr.w	pc, [sp], #4
    c58e:	bf00      	nop
    c590:	1fff8ea4 	.word	0x1fff8ea4
    c594:	1fff8ea0 	.word	0x1fff8ea0

0000c598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    c598:	b500      	push	{lr}
    c59a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c59c:	f7f4 fe6a 	bl	1274 <Sys_GetCoreID>
    c5a0:	4603      	mov	r3, r0
    c5a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    c5a4:	4a0d      	ldr	r2, [pc, #52]	; (c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c5a6:	9b01      	ldr	r3, [sp, #4]
    c5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ac:	1e5a      	subs	r2, r3, #1
    c5ae:	490b      	ldr	r1, [pc, #44]	; (c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c5b0:	9b01      	ldr	r3, [sp, #4]
    c5b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    c5b6:	4a0a      	ldr	r2, [pc, #40]	; (c5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    c5b8:	9b01      	ldr	r3, [sp, #4]
    c5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5be:	f003 0301 	and.w	r3, r3, #1
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d106      	bne.n	c5d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    c5c6:	4a05      	ldr	r2, [pc, #20]	; (c5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c5c8:	9b01      	ldr	r3, [sp, #4]
    c5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	d100      	bne.n	c5d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5d4:	bf00      	nop
    c5d6:	b003      	add	sp, #12
    c5d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c5dc:	1fff8ea4 	.word	0x1fff8ea4
    c5e0:	1fff8ea0 	.word	0x1fff8ea0

0000c5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c5e4:	b500      	push	{lr}
    c5e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5e8:	f7f4 fe44 	bl	1274 <Sys_GetCoreID>
    c5ec:	4603      	mov	r3, r0
    c5ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    c5f0:	4a10      	ldr	r2, [pc, #64]	; (c634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c5f2:	9b01      	ldr	r3, [sp, #4]
    c5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d10d      	bne.n	c618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c5fc:	f7f4 fd58 	bl	10b0 <Adc_schm_read_msr>
    c600:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c602:	9b00      	ldr	r3, [sp, #0]
    c604:	f003 0301 	and.w	r3, r3, #1
    c608:	2b00      	cmp	r3, #0
    c60a:	d100      	bne.n	c60e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c60c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    c60e:	490a      	ldr	r1, [pc, #40]	; (c638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	9a00      	ldr	r2, [sp, #0]
    c614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    c618:	4a06      	ldr	r2, [pc, #24]	; (c634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c61a:	9b01      	ldr	r3, [sp, #4]
    c61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c620:	1c5a      	adds	r2, r3, #1
    c622:	4904      	ldr	r1, [pc, #16]	; (c634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c624:	9b01      	ldr	r3, [sp, #4]
    c626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c62a:	bf00      	nop
    c62c:	b003      	add	sp, #12
    c62e:	f85d fb04 	ldr.w	pc, [sp], #4
    c632:	bf00      	nop
    c634:	1fff8eac 	.word	0x1fff8eac
    c638:	1fff8ea8 	.word	0x1fff8ea8

0000c63c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c63c:	b500      	push	{lr}
    c63e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c640:	f7f4 fe18 	bl	1274 <Sys_GetCoreID>
    c644:	4603      	mov	r3, r0
    c646:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    c648:	4a0d      	ldr	r2, [pc, #52]	; (c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c64a:	9b01      	ldr	r3, [sp, #4]
    c64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c650:	1e5a      	subs	r2, r3, #1
    c652:	490b      	ldr	r1, [pc, #44]	; (c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c654:	9b01      	ldr	r3, [sp, #4]
    c656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    c65a:	4a0a      	ldr	r2, [pc, #40]	; (c684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c662:	f003 0301 	and.w	r3, r3, #1
    c666:	2b00      	cmp	r3, #0
    c668:	d106      	bne.n	c678 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c66a:	4a05      	ldr	r2, [pc, #20]	; (c680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c66c:	9b01      	ldr	r3, [sp, #4]
    c66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c672:	2b00      	cmp	r3, #0
    c674:	d100      	bne.n	c678 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c676:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c678:	bf00      	nop
    c67a:	b003      	add	sp, #12
    c67c:	f85d fb04 	ldr.w	pc, [sp], #4
    c680:	1fff8eac 	.word	0x1fff8eac
    c684:	1fff8ea8 	.word	0x1fff8ea8

0000c688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c688:	b500      	push	{lr}
    c68a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c68c:	f7f4 fdf2 	bl	1274 <Sys_GetCoreID>
    c690:	4603      	mov	r3, r0
    c692:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c694:	4a10      	ldr	r2, [pc, #64]	; (c6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c696:	9b01      	ldr	r3, [sp, #4]
    c698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c69c:	2b00      	cmp	r3, #0
    c69e:	d10d      	bne.n	c6bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6a0:	f7f4 fd06 	bl	10b0 <Adc_schm_read_msr>
    c6a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6a6:	9b00      	ldr	r3, [sp, #0]
    c6a8:	f003 0301 	and.w	r3, r3, #1
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d100      	bne.n	c6b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c6b2:	490a      	ldr	r1, [pc, #40]	; (c6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c6b4:	9b01      	ldr	r3, [sp, #4]
    c6b6:	9a00      	ldr	r2, [sp, #0]
    c6b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c6bc:	4a06      	ldr	r2, [pc, #24]	; (c6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c6be:	9b01      	ldr	r3, [sp, #4]
    c6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6c4:	1c5a      	adds	r2, r3, #1
    c6c6:	4904      	ldr	r1, [pc, #16]	; (c6d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6ce:	bf00      	nop
    c6d0:	b003      	add	sp, #12
    c6d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c6d6:	bf00      	nop
    c6d8:	1fff8eb4 	.word	0x1fff8eb4
    c6dc:	1fff8eb0 	.word	0x1fff8eb0

0000c6e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c6e0:	b500      	push	{lr}
    c6e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6e4:	f7f4 fdc6 	bl	1274 <Sys_GetCoreID>
    c6e8:	4603      	mov	r3, r0
    c6ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c6ec:	4a0d      	ldr	r2, [pc, #52]	; (c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c6ee:	9b01      	ldr	r3, [sp, #4]
    c6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6f4:	1e5a      	subs	r2, r3, #1
    c6f6:	490b      	ldr	r1, [pc, #44]	; (c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c6f8:	9b01      	ldr	r3, [sp, #4]
    c6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c6fe:	4a0a      	ldr	r2, [pc, #40]	; (c728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c700:	9b01      	ldr	r3, [sp, #4]
    c702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c706:	f003 0301 	and.w	r3, r3, #1
    c70a:	2b00      	cmp	r3, #0
    c70c:	d106      	bne.n	c71c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c70e:	4a05      	ldr	r2, [pc, #20]	; (c724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c716:	2b00      	cmp	r3, #0
    c718:	d100      	bne.n	c71c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c71a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c71c:	bf00      	nop
    c71e:	b003      	add	sp, #12
    c720:	f85d fb04 	ldr.w	pc, [sp], #4
    c724:	1fff8eb4 	.word	0x1fff8eb4
    c728:	1fff8eb0 	.word	0x1fff8eb0

0000c72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c72c:	b500      	push	{lr}
    c72e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c730:	f7f4 fda0 	bl	1274 <Sys_GetCoreID>
    c734:	4603      	mov	r3, r0
    c736:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c738:	4a10      	ldr	r2, [pc, #64]	; (c77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c73a:	9b01      	ldr	r3, [sp, #4]
    c73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c740:	2b00      	cmp	r3, #0
    c742:	d10d      	bne.n	c760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c744:	f7f4 fcb4 	bl	10b0 <Adc_schm_read_msr>
    c748:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c74a:	9b00      	ldr	r3, [sp, #0]
    c74c:	f003 0301 	and.w	r3, r3, #1
    c750:	2b00      	cmp	r3, #0
    c752:	d100      	bne.n	c756 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c754:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c756:	490a      	ldr	r1, [pc, #40]	; (c780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c758:	9b01      	ldr	r3, [sp, #4]
    c75a:	9a00      	ldr	r2, [sp, #0]
    c75c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c760:	4a06      	ldr	r2, [pc, #24]	; (c77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c768:	1c5a      	adds	r2, r3, #1
    c76a:	4904      	ldr	r1, [pc, #16]	; (c77c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c772:	bf00      	nop
    c774:	b003      	add	sp, #12
    c776:	f85d fb04 	ldr.w	pc, [sp], #4
    c77a:	bf00      	nop
    c77c:	1fff8ebc 	.word	0x1fff8ebc
    c780:	1fff8eb8 	.word	0x1fff8eb8

0000c784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c784:	b500      	push	{lr}
    c786:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c788:	f7f4 fd74 	bl	1274 <Sys_GetCoreID>
    c78c:	4603      	mov	r3, r0
    c78e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c790:	4a0d      	ldr	r2, [pc, #52]	; (c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c792:	9b01      	ldr	r3, [sp, #4]
    c794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c798:	1e5a      	subs	r2, r3, #1
    c79a:	490b      	ldr	r1, [pc, #44]	; (c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c79c:	9b01      	ldr	r3, [sp, #4]
    c79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c7a2:	4a0a      	ldr	r2, [pc, #40]	; (c7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c7a4:	9b01      	ldr	r3, [sp, #4]
    c7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7aa:	f003 0301 	and.w	r3, r3, #1
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	d106      	bne.n	c7c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c7b2:	4a05      	ldr	r2, [pc, #20]	; (c7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d100      	bne.n	c7c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7c0:	bf00      	nop
    c7c2:	b003      	add	sp, #12
    c7c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c7c8:	1fff8ebc 	.word	0x1fff8ebc
    c7cc:	1fff8eb8 	.word	0x1fff8eb8

0000c7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c7d0:	b500      	push	{lr}
    c7d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7d4:	f7f4 fd4e 	bl	1274 <Sys_GetCoreID>
    c7d8:	4603      	mov	r3, r0
    c7da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c7dc:	4a10      	ldr	r2, [pc, #64]	; (c820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c7de:	9b01      	ldr	r3, [sp, #4]
    c7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d10d      	bne.n	c804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7e8:	f7f4 fc62 	bl	10b0 <Adc_schm_read_msr>
    c7ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7ee:	9b00      	ldr	r3, [sp, #0]
    c7f0:	f003 0301 	and.w	r3, r3, #1
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d100      	bne.n	c7fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c7f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c7fa:	490a      	ldr	r1, [pc, #40]	; (c824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c7fc:	9b01      	ldr	r3, [sp, #4]
    c7fe:	9a00      	ldr	r2, [sp, #0]
    c800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c804:	4a06      	ldr	r2, [pc, #24]	; (c820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c806:	9b01      	ldr	r3, [sp, #4]
    c808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c80c:	1c5a      	adds	r2, r3, #1
    c80e:	4904      	ldr	r1, [pc, #16]	; (c820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c816:	bf00      	nop
    c818:	b003      	add	sp, #12
    c81a:	f85d fb04 	ldr.w	pc, [sp], #4
    c81e:	bf00      	nop
    c820:	1fff8ec4 	.word	0x1fff8ec4
    c824:	1fff8ec0 	.word	0x1fff8ec0

0000c828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c828:	b500      	push	{lr}
    c82a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c82c:	f7f4 fd22 	bl	1274 <Sys_GetCoreID>
    c830:	4603      	mov	r3, r0
    c832:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c834:	4a0d      	ldr	r2, [pc, #52]	; (c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c836:	9b01      	ldr	r3, [sp, #4]
    c838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c83c:	1e5a      	subs	r2, r3, #1
    c83e:	490b      	ldr	r1, [pc, #44]	; (c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c840:	9b01      	ldr	r3, [sp, #4]
    c842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c846:	4a0a      	ldr	r2, [pc, #40]	; (c870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c848:	9b01      	ldr	r3, [sp, #4]
    c84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c84e:	f003 0301 	and.w	r3, r3, #1
    c852:	2b00      	cmp	r3, #0
    c854:	d106      	bne.n	c864 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c856:	4a05      	ldr	r2, [pc, #20]	; (c86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c858:	9b01      	ldr	r3, [sp, #4]
    c85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c85e:	2b00      	cmp	r3, #0
    c860:	d100      	bne.n	c864 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c862:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c864:	bf00      	nop
    c866:	b003      	add	sp, #12
    c868:	f85d fb04 	ldr.w	pc, [sp], #4
    c86c:	1fff8ec4 	.word	0x1fff8ec4
    c870:	1fff8ec0 	.word	0x1fff8ec0

0000c874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c874:	b500      	push	{lr}
    c876:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c878:	f7f4 fcfc 	bl	1274 <Sys_GetCoreID>
    c87c:	4603      	mov	r3, r0
    c87e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c880:	4a10      	ldr	r2, [pc, #64]	; (c8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c882:	9b01      	ldr	r3, [sp, #4]
    c884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c888:	2b00      	cmp	r3, #0
    c88a:	d10d      	bne.n	c8a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c88c:	f7f4 fc10 	bl	10b0 <Adc_schm_read_msr>
    c890:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c892:	9b00      	ldr	r3, [sp, #0]
    c894:	f003 0301 	and.w	r3, r3, #1
    c898:	2b00      	cmp	r3, #0
    c89a:	d100      	bne.n	c89e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c89c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c89e:	490a      	ldr	r1, [pc, #40]	; (c8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c8a0:	9b01      	ldr	r3, [sp, #4]
    c8a2:	9a00      	ldr	r2, [sp, #0]
    c8a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c8a8:	4a06      	ldr	r2, [pc, #24]	; (c8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c8aa:	9b01      	ldr	r3, [sp, #4]
    c8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8b0:	1c5a      	adds	r2, r3, #1
    c8b2:	4904      	ldr	r1, [pc, #16]	; (c8c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c8b4:	9b01      	ldr	r3, [sp, #4]
    c8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8ba:	bf00      	nop
    c8bc:	b003      	add	sp, #12
    c8be:	f85d fb04 	ldr.w	pc, [sp], #4
    c8c2:	bf00      	nop
    c8c4:	1fff8ecc 	.word	0x1fff8ecc
    c8c8:	1fff8ec8 	.word	0x1fff8ec8

0000c8cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c8cc:	b500      	push	{lr}
    c8ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8d0:	f7f4 fcd0 	bl	1274 <Sys_GetCoreID>
    c8d4:	4603      	mov	r3, r0
    c8d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c8d8:	4a0d      	ldr	r2, [pc, #52]	; (c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c8da:	9b01      	ldr	r3, [sp, #4]
    c8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e0:	1e5a      	subs	r2, r3, #1
    c8e2:	490b      	ldr	r1, [pc, #44]	; (c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c8e4:	9b01      	ldr	r3, [sp, #4]
    c8e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c8ea:	4a0a      	ldr	r2, [pc, #40]	; (c914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c8ec:	9b01      	ldr	r3, [sp, #4]
    c8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8f2:	f003 0301 	and.w	r3, r3, #1
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d106      	bne.n	c908 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c8fa:	4a05      	ldr	r2, [pc, #20]	; (c910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c902:	2b00      	cmp	r3, #0
    c904:	d100      	bne.n	c908 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c906:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c908:	bf00      	nop
    c90a:	b003      	add	sp, #12
    c90c:	f85d fb04 	ldr.w	pc, [sp], #4
    c910:	1fff8ecc 	.word	0x1fff8ecc
    c914:	1fff8ec8 	.word	0x1fff8ec8

0000c918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c918:	b500      	push	{lr}
    c91a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c91c:	f7f4 fcaa 	bl	1274 <Sys_GetCoreID>
    c920:	4603      	mov	r3, r0
    c922:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c924:	4a10      	ldr	r2, [pc, #64]	; (c968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c926:	9b01      	ldr	r3, [sp, #4]
    c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c92c:	2b00      	cmp	r3, #0
    c92e:	d10d      	bne.n	c94c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c930:	f7f4 fbbe 	bl	10b0 <Adc_schm_read_msr>
    c934:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c936:	9b00      	ldr	r3, [sp, #0]
    c938:	f003 0301 	and.w	r3, r3, #1
    c93c:	2b00      	cmp	r3, #0
    c93e:	d100      	bne.n	c942 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c940:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c942:	490a      	ldr	r1, [pc, #40]	; (c96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c944:	9b01      	ldr	r3, [sp, #4]
    c946:	9a00      	ldr	r2, [sp, #0]
    c948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c94c:	4a06      	ldr	r2, [pc, #24]	; (c968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c94e:	9b01      	ldr	r3, [sp, #4]
    c950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c954:	1c5a      	adds	r2, r3, #1
    c956:	4904      	ldr	r1, [pc, #16]	; (c968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c95e:	bf00      	nop
    c960:	b003      	add	sp, #12
    c962:	f85d fb04 	ldr.w	pc, [sp], #4
    c966:	bf00      	nop
    c968:	1fff8ed4 	.word	0x1fff8ed4
    c96c:	1fff8ed0 	.word	0x1fff8ed0

0000c970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c970:	b500      	push	{lr}
    c972:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c974:	f7f4 fc7e 	bl	1274 <Sys_GetCoreID>
    c978:	4603      	mov	r3, r0
    c97a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c97c:	4a0d      	ldr	r2, [pc, #52]	; (c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c97e:	9b01      	ldr	r3, [sp, #4]
    c980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c984:	1e5a      	subs	r2, r3, #1
    c986:	490b      	ldr	r1, [pc, #44]	; (c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c988:	9b01      	ldr	r3, [sp, #4]
    c98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c98e:	4a0a      	ldr	r2, [pc, #40]	; (c9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c990:	9b01      	ldr	r3, [sp, #4]
    c992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c996:	f003 0301 	and.w	r3, r3, #1
    c99a:	2b00      	cmp	r3, #0
    c99c:	d106      	bne.n	c9ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c99e:	4a05      	ldr	r2, [pc, #20]	; (c9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d100      	bne.n	c9ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9ac:	bf00      	nop
    c9ae:	b003      	add	sp, #12
    c9b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c9b4:	1fff8ed4 	.word	0x1fff8ed4
    c9b8:	1fff8ed0 	.word	0x1fff8ed0

0000c9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c9bc:	b500      	push	{lr}
    c9be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9c0:	f7f4 fc58 	bl	1274 <Sys_GetCoreID>
    c9c4:	4603      	mov	r3, r0
    c9c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c9c8:	4a10      	ldr	r2, [pc, #64]	; (ca0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c9ca:	9b01      	ldr	r3, [sp, #4]
    c9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d10d      	bne.n	c9f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9d4:	f7f4 fb6c 	bl	10b0 <Adc_schm_read_msr>
    c9d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9da:	9b00      	ldr	r3, [sp, #0]
    c9dc:	f003 0301 	and.w	r3, r3, #1
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d100      	bne.n	c9e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c9e6:	490a      	ldr	r1, [pc, #40]	; (ca10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c9e8:	9b01      	ldr	r3, [sp, #4]
    c9ea:	9a00      	ldr	r2, [sp, #0]
    c9ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c9f0:	4a06      	ldr	r2, [pc, #24]	; (ca0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c9f2:	9b01      	ldr	r3, [sp, #4]
    c9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f8:	1c5a      	adds	r2, r3, #1
    c9fa:	4904      	ldr	r1, [pc, #16]	; (ca0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca02:	bf00      	nop
    ca04:	b003      	add	sp, #12
    ca06:	f85d fb04 	ldr.w	pc, [sp], #4
    ca0a:	bf00      	nop
    ca0c:	1fff8edc 	.word	0x1fff8edc
    ca10:	1fff8ed8 	.word	0x1fff8ed8

0000ca14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    ca14:	b500      	push	{lr}
    ca16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca18:	f7f4 fc2c 	bl	1274 <Sys_GetCoreID>
    ca1c:	4603      	mov	r3, r0
    ca1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    ca20:	4a0d      	ldr	r2, [pc, #52]	; (ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca28:	1e5a      	subs	r2, r3, #1
    ca2a:	490b      	ldr	r1, [pc, #44]	; (ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    ca2c:	9b01      	ldr	r3, [sp, #4]
    ca2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    ca32:	4a0a      	ldr	r2, [pc, #40]	; (ca5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca3a:	f003 0301 	and.w	r3, r3, #1
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d106      	bne.n	ca50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    ca42:	4a05      	ldr	r2, [pc, #20]	; (ca58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    ca44:	9b01      	ldr	r3, [sp, #4]
    ca46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d100      	bne.n	ca50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca50:	bf00      	nop
    ca52:	b003      	add	sp, #12
    ca54:	f85d fb04 	ldr.w	pc, [sp], #4
    ca58:	1fff8edc 	.word	0x1fff8edc
    ca5c:	1fff8ed8 	.word	0x1fff8ed8

0000ca60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    ca60:	b500      	push	{lr}
    ca62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca64:	f7f4 fc06 	bl	1274 <Sys_GetCoreID>
    ca68:	4603      	mov	r3, r0
    ca6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    ca6c:	4a10      	ldr	r2, [pc, #64]	; (cab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    ca6e:	9b01      	ldr	r3, [sp, #4]
    ca70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca74:	2b00      	cmp	r3, #0
    ca76:	d10d      	bne.n	ca94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca78:	f7f4 fb1a 	bl	10b0 <Adc_schm_read_msr>
    ca7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca7e:	9b00      	ldr	r3, [sp, #0]
    ca80:	f003 0301 	and.w	r3, r3, #1
    ca84:	2b00      	cmp	r3, #0
    ca86:	d100      	bne.n	ca8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    ca8a:	490a      	ldr	r1, [pc, #40]	; (cab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    ca8c:	9b01      	ldr	r3, [sp, #4]
    ca8e:	9a00      	ldr	r2, [sp, #0]
    ca90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    ca94:	4a06      	ldr	r2, [pc, #24]	; (cab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    ca96:	9b01      	ldr	r3, [sp, #4]
    ca98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca9c:	1c5a      	adds	r2, r3, #1
    ca9e:	4904      	ldr	r1, [pc, #16]	; (cab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    caa6:	bf00      	nop
    caa8:	b003      	add	sp, #12
    caaa:	f85d fb04 	ldr.w	pc, [sp], #4
    caae:	bf00      	nop
    cab0:	1fff8ee4 	.word	0x1fff8ee4
    cab4:	1fff8ee0 	.word	0x1fff8ee0

0000cab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    cab8:	b500      	push	{lr}
    caba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cabc:	f7f4 fbda 	bl	1274 <Sys_GetCoreID>
    cac0:	4603      	mov	r3, r0
    cac2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    cac4:	4a0d      	ldr	r2, [pc, #52]	; (cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    cac6:	9b01      	ldr	r3, [sp, #4]
    cac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cacc:	1e5a      	subs	r2, r3, #1
    cace:	490b      	ldr	r1, [pc, #44]	; (cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    cad0:	9b01      	ldr	r3, [sp, #4]
    cad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    cad6:	4a0a      	ldr	r2, [pc, #40]	; (cb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cade:	f003 0301 	and.w	r3, r3, #1
    cae2:	2b00      	cmp	r3, #0
    cae4:	d106      	bne.n	caf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    cae6:	4a05      	ldr	r2, [pc, #20]	; (cafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    cae8:	9b01      	ldr	r3, [sp, #4]
    caea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caee:	2b00      	cmp	r3, #0
    caf0:	d100      	bne.n	caf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    caf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    caf4:	bf00      	nop
    caf6:	b003      	add	sp, #12
    caf8:	f85d fb04 	ldr.w	pc, [sp], #4
    cafc:	1fff8ee4 	.word	0x1fff8ee4
    cb00:	1fff8ee0 	.word	0x1fff8ee0

0000cb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    cb04:	b500      	push	{lr}
    cb06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb08:	f7f4 fbb4 	bl	1274 <Sys_GetCoreID>
    cb0c:	4603      	mov	r3, r0
    cb0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    cb10:	4a10      	ldr	r2, [pc, #64]	; (cb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    cb12:	9b01      	ldr	r3, [sp, #4]
    cb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d10d      	bne.n	cb38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb1c:	f7f4 fac8 	bl	10b0 <Adc_schm_read_msr>
    cb20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb22:	9b00      	ldr	r3, [sp, #0]
    cb24:	f003 0301 	and.w	r3, r3, #1
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d100      	bne.n	cb2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    cb2e:	490a      	ldr	r1, [pc, #40]	; (cb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    cb30:	9b01      	ldr	r3, [sp, #4]
    cb32:	9a00      	ldr	r2, [sp, #0]
    cb34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    cb38:	4a06      	ldr	r2, [pc, #24]	; (cb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    cb3a:	9b01      	ldr	r3, [sp, #4]
    cb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb40:	1c5a      	adds	r2, r3, #1
    cb42:	4904      	ldr	r1, [pc, #16]	; (cb54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    cb44:	9b01      	ldr	r3, [sp, #4]
    cb46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb4a:	bf00      	nop
    cb4c:	b003      	add	sp, #12
    cb4e:	f85d fb04 	ldr.w	pc, [sp], #4
    cb52:	bf00      	nop
    cb54:	1fff8eec 	.word	0x1fff8eec
    cb58:	1fff8ee8 	.word	0x1fff8ee8

0000cb5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    cb5c:	b500      	push	{lr}
    cb5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb60:	f7f4 fb88 	bl	1274 <Sys_GetCoreID>
    cb64:	4603      	mov	r3, r0
    cb66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    cb68:	4a0d      	ldr	r2, [pc, #52]	; (cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    cb6a:	9b01      	ldr	r3, [sp, #4]
    cb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb70:	1e5a      	subs	r2, r3, #1
    cb72:	490b      	ldr	r1, [pc, #44]	; (cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    cb74:	9b01      	ldr	r3, [sp, #4]
    cb76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    cb7a:	4a0a      	ldr	r2, [pc, #40]	; (cba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    cb7c:	9b01      	ldr	r3, [sp, #4]
    cb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb82:	f003 0301 	and.w	r3, r3, #1
    cb86:	2b00      	cmp	r3, #0
    cb88:	d106      	bne.n	cb98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    cb8a:	4a05      	ldr	r2, [pc, #20]	; (cba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb92:	2b00      	cmp	r3, #0
    cb94:	d100      	bne.n	cb98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb98:	bf00      	nop
    cb9a:	b003      	add	sp, #12
    cb9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cba0:	1fff8eec 	.word	0x1fff8eec
    cba4:	1fff8ee8 	.word	0x1fff8ee8

0000cba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    cba8:	b500      	push	{lr}
    cbaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbac:	f7f4 fb62 	bl	1274 <Sys_GetCoreID>
    cbb0:	4603      	mov	r3, r0
    cbb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    cbb4:	4a10      	ldr	r2, [pc, #64]	; (cbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    cbb6:	9b01      	ldr	r3, [sp, #4]
    cbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d10d      	bne.n	cbdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbc0:	f7f4 fa76 	bl	10b0 <Adc_schm_read_msr>
    cbc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbc6:	9b00      	ldr	r3, [sp, #0]
    cbc8:	f003 0301 	and.w	r3, r3, #1
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d100      	bne.n	cbd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    cbd2:	490a      	ldr	r1, [pc, #40]	; (cbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    cbd4:	9b01      	ldr	r3, [sp, #4]
    cbd6:	9a00      	ldr	r2, [sp, #0]
    cbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    cbdc:	4a06      	ldr	r2, [pc, #24]	; (cbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    cbde:	9b01      	ldr	r3, [sp, #4]
    cbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbe4:	1c5a      	adds	r2, r3, #1
    cbe6:	4904      	ldr	r1, [pc, #16]	; (cbf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    cbe8:	9b01      	ldr	r3, [sp, #4]
    cbea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbee:	bf00      	nop
    cbf0:	b003      	add	sp, #12
    cbf2:	f85d fb04 	ldr.w	pc, [sp], #4
    cbf6:	bf00      	nop
    cbf8:	1fff8ef4 	.word	0x1fff8ef4
    cbfc:	1fff8ef0 	.word	0x1fff8ef0

0000cc00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    cc00:	b500      	push	{lr}
    cc02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc04:	f7f4 fb36 	bl	1274 <Sys_GetCoreID>
    cc08:	4603      	mov	r3, r0
    cc0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    cc0c:	4a0d      	ldr	r2, [pc, #52]	; (cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc14:	1e5a      	subs	r2, r3, #1
    cc16:	490b      	ldr	r1, [pc, #44]	; (cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    cc18:	9b01      	ldr	r3, [sp, #4]
    cc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    cc1e:	4a0a      	ldr	r2, [pc, #40]	; (cc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    cc20:	9b01      	ldr	r3, [sp, #4]
    cc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc26:	f003 0301 	and.w	r3, r3, #1
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	d106      	bne.n	cc3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    cc2e:	4a05      	ldr	r2, [pc, #20]	; (cc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    cc30:	9b01      	ldr	r3, [sp, #4]
    cc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc36:	2b00      	cmp	r3, #0
    cc38:	d100      	bne.n	cc3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc3c:	bf00      	nop
    cc3e:	b003      	add	sp, #12
    cc40:	f85d fb04 	ldr.w	pc, [sp], #4
    cc44:	1fff8ef4 	.word	0x1fff8ef4
    cc48:	1fff8ef0 	.word	0x1fff8ef0

0000cc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    cc4c:	b500      	push	{lr}
    cc4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc50:	f7f4 fb10 	bl	1274 <Sys_GetCoreID>
    cc54:	4603      	mov	r3, r0
    cc56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    cc58:	4a10      	ldr	r2, [pc, #64]	; (cc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    cc5a:	9b01      	ldr	r3, [sp, #4]
    cc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d10d      	bne.n	cc80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc64:	f7f4 fa24 	bl	10b0 <Adc_schm_read_msr>
    cc68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc6a:	9b00      	ldr	r3, [sp, #0]
    cc6c:	f003 0301 	and.w	r3, r3, #1
    cc70:	2b00      	cmp	r3, #0
    cc72:	d100      	bne.n	cc76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    cc76:	490a      	ldr	r1, [pc, #40]	; (cca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    cc78:	9b01      	ldr	r3, [sp, #4]
    cc7a:	9a00      	ldr	r2, [sp, #0]
    cc7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    cc80:	4a06      	ldr	r2, [pc, #24]	; (cc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    cc82:	9b01      	ldr	r3, [sp, #4]
    cc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc88:	1c5a      	adds	r2, r3, #1
    cc8a:	4904      	ldr	r1, [pc, #16]	; (cc9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    cc8c:	9b01      	ldr	r3, [sp, #4]
    cc8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc92:	bf00      	nop
    cc94:	b003      	add	sp, #12
    cc96:	f85d fb04 	ldr.w	pc, [sp], #4
    cc9a:	bf00      	nop
    cc9c:	1fff8efc 	.word	0x1fff8efc
    cca0:	1fff8ef8 	.word	0x1fff8ef8

0000cca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    cca4:	b500      	push	{lr}
    cca6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cca8:	f7f4 fae4 	bl	1274 <Sys_GetCoreID>
    ccac:	4603      	mov	r3, r0
    ccae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    ccb0:	4a0d      	ldr	r2, [pc, #52]	; (cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    ccb2:	9b01      	ldr	r3, [sp, #4]
    ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccb8:	1e5a      	subs	r2, r3, #1
    ccba:	490b      	ldr	r1, [pc, #44]	; (cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    ccbc:	9b01      	ldr	r3, [sp, #4]
    ccbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    ccc2:	4a0a      	ldr	r2, [pc, #40]	; (ccec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccca:	f003 0301 	and.w	r3, r3, #1
    ccce:	2b00      	cmp	r3, #0
    ccd0:	d106      	bne.n	cce0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    ccd2:	4a05      	ldr	r2, [pc, #20]	; (cce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d100      	bne.n	cce0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cce0:	bf00      	nop
    cce2:	b003      	add	sp, #12
    cce4:	f85d fb04 	ldr.w	pc, [sp], #4
    cce8:	1fff8efc 	.word	0x1fff8efc
    ccec:	1fff8ef8 	.word	0x1fff8ef8

0000ccf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    ccf0:	b500      	push	{lr}
    ccf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccf4:	f7f4 fabe 	bl	1274 <Sys_GetCoreID>
    ccf8:	4603      	mov	r3, r0
    ccfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    ccfc:	4a10      	ldr	r2, [pc, #64]	; (cd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    ccfe:	9b01      	ldr	r3, [sp, #4]
    cd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd04:	2b00      	cmp	r3, #0
    cd06:	d10d      	bne.n	cd24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd08:	f7f4 f9d2 	bl	10b0 <Adc_schm_read_msr>
    cd0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd0e:	9b00      	ldr	r3, [sp, #0]
    cd10:	f003 0301 	and.w	r3, r3, #1
    cd14:	2b00      	cmp	r3, #0
    cd16:	d100      	bne.n	cd1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    cd1a:	490a      	ldr	r1, [pc, #40]	; (cd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    cd1c:	9b01      	ldr	r3, [sp, #4]
    cd1e:	9a00      	ldr	r2, [sp, #0]
    cd20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    cd24:	4a06      	ldr	r2, [pc, #24]	; (cd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    cd26:	9b01      	ldr	r3, [sp, #4]
    cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd2c:	1c5a      	adds	r2, r3, #1
    cd2e:	4904      	ldr	r1, [pc, #16]	; (cd40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd36:	bf00      	nop
    cd38:	b003      	add	sp, #12
    cd3a:	f85d fb04 	ldr.w	pc, [sp], #4
    cd3e:	bf00      	nop
    cd40:	1fff8f04 	.word	0x1fff8f04
    cd44:	1fff8f00 	.word	0x1fff8f00

0000cd48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    cd48:	b500      	push	{lr}
    cd4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd4c:	f7f4 fa92 	bl	1274 <Sys_GetCoreID>
    cd50:	4603      	mov	r3, r0
    cd52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    cd54:	4a0d      	ldr	r2, [pc, #52]	; (cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    cd56:	9b01      	ldr	r3, [sp, #4]
    cd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd5c:	1e5a      	subs	r2, r3, #1
    cd5e:	490b      	ldr	r1, [pc, #44]	; (cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    cd60:	9b01      	ldr	r3, [sp, #4]
    cd62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    cd66:	4a0a      	ldr	r2, [pc, #40]	; (cd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd6e:	f003 0301 	and.w	r3, r3, #1
    cd72:	2b00      	cmp	r3, #0
    cd74:	d106      	bne.n	cd84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    cd76:	4a05      	ldr	r2, [pc, #20]	; (cd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    cd78:	9b01      	ldr	r3, [sp, #4]
    cd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d100      	bne.n	cd84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd84:	bf00      	nop
    cd86:	b003      	add	sp, #12
    cd88:	f85d fb04 	ldr.w	pc, [sp], #4
    cd8c:	1fff8f04 	.word	0x1fff8f04
    cd90:	1fff8f00 	.word	0x1fff8f00

0000cd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    cd94:	b500      	push	{lr}
    cd96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd98:	f7f4 fa6c 	bl	1274 <Sys_GetCoreID>
    cd9c:	4603      	mov	r3, r0
    cd9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    cda0:	4a10      	ldr	r2, [pc, #64]	; (cde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    cda2:	9b01      	ldr	r3, [sp, #4]
    cda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cda8:	2b00      	cmp	r3, #0
    cdaa:	d10d      	bne.n	cdc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdac:	f7f4 f980 	bl	10b0 <Adc_schm_read_msr>
    cdb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdb2:	9b00      	ldr	r3, [sp, #0]
    cdb4:	f003 0301 	and.w	r3, r3, #1
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d100      	bne.n	cdbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    cdbe:	490a      	ldr	r1, [pc, #40]	; (cde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    cdc0:	9b01      	ldr	r3, [sp, #4]
    cdc2:	9a00      	ldr	r2, [sp, #0]
    cdc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    cdc8:	4a06      	ldr	r2, [pc, #24]	; (cde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    cdca:	9b01      	ldr	r3, [sp, #4]
    cdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd0:	1c5a      	adds	r2, r3, #1
    cdd2:	4904      	ldr	r1, [pc, #16]	; (cde4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cdda:	bf00      	nop
    cddc:	b003      	add	sp, #12
    cdde:	f85d fb04 	ldr.w	pc, [sp], #4
    cde2:	bf00      	nop
    cde4:	1fff8f0c 	.word	0x1fff8f0c
    cde8:	1fff8f08 	.word	0x1fff8f08

0000cdec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    cdec:	b500      	push	{lr}
    cdee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdf0:	f7f4 fa40 	bl	1274 <Sys_GetCoreID>
    cdf4:	4603      	mov	r3, r0
    cdf6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    cdf8:	4a0d      	ldr	r2, [pc, #52]	; (ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    cdfa:	9b01      	ldr	r3, [sp, #4]
    cdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce00:	1e5a      	subs	r2, r3, #1
    ce02:	490b      	ldr	r1, [pc, #44]	; (ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    ce04:	9b01      	ldr	r3, [sp, #4]
    ce06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    ce0a:	4a0a      	ldr	r2, [pc, #40]	; (ce34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    ce0c:	9b01      	ldr	r3, [sp, #4]
    ce0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce12:	f003 0301 	and.w	r3, r3, #1
    ce16:	2b00      	cmp	r3, #0
    ce18:	d106      	bne.n	ce28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    ce1a:	4a05      	ldr	r2, [pc, #20]	; (ce30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    ce1c:	9b01      	ldr	r3, [sp, #4]
    ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce22:	2b00      	cmp	r3, #0
    ce24:	d100      	bne.n	ce28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce28:	bf00      	nop
    ce2a:	b003      	add	sp, #12
    ce2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ce30:	1fff8f0c 	.word	0x1fff8f0c
    ce34:	1fff8f08 	.word	0x1fff8f08

0000ce38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    ce38:	b500      	push	{lr}
    ce3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce3c:	f7f4 fa1a 	bl	1274 <Sys_GetCoreID>
    ce40:	4603      	mov	r3, r0
    ce42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    ce44:	4a10      	ldr	r2, [pc, #64]	; (ce88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ce46:	9b01      	ldr	r3, [sp, #4]
    ce48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d10d      	bne.n	ce6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce50:	f7f4 f92e 	bl	10b0 <Adc_schm_read_msr>
    ce54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce56:	9b00      	ldr	r3, [sp, #0]
    ce58:	f003 0301 	and.w	r3, r3, #1
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d100      	bne.n	ce62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    ce62:	490a      	ldr	r1, [pc, #40]	; (ce8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    ce64:	9b01      	ldr	r3, [sp, #4]
    ce66:	9a00      	ldr	r2, [sp, #0]
    ce68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    ce6c:	4a06      	ldr	r2, [pc, #24]	; (ce88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ce6e:	9b01      	ldr	r3, [sp, #4]
    ce70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce74:	1c5a      	adds	r2, r3, #1
    ce76:	4904      	ldr	r1, [pc, #16]	; (ce88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    ce78:	9b01      	ldr	r3, [sp, #4]
    ce7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce7e:	bf00      	nop
    ce80:	b003      	add	sp, #12
    ce82:	f85d fb04 	ldr.w	pc, [sp], #4
    ce86:	bf00      	nop
    ce88:	1fff8f14 	.word	0x1fff8f14
    ce8c:	1fff8f10 	.word	0x1fff8f10

0000ce90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    ce90:	b500      	push	{lr}
    ce92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce94:	f7f4 f9ee 	bl	1274 <Sys_GetCoreID>
    ce98:	4603      	mov	r3, r0
    ce9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    ce9c:	4a0d      	ldr	r2, [pc, #52]	; (ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    ce9e:	9b01      	ldr	r3, [sp, #4]
    cea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea4:	1e5a      	subs	r2, r3, #1
    cea6:	490b      	ldr	r1, [pc, #44]	; (ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    cea8:	9b01      	ldr	r3, [sp, #4]
    ceaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    ceae:	4a0a      	ldr	r2, [pc, #40]	; (ced8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb6:	f003 0301 	and.w	r3, r3, #1
    ceba:	2b00      	cmp	r3, #0
    cebc:	d106      	bne.n	cecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    cebe:	4a05      	ldr	r2, [pc, #20]	; (ced4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec6:	2b00      	cmp	r3, #0
    cec8:	d100      	bne.n	cecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ceca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cecc:	bf00      	nop
    cece:	b003      	add	sp, #12
    ced0:	f85d fb04 	ldr.w	pc, [sp], #4
    ced4:	1fff8f14 	.word	0x1fff8f14
    ced8:	1fff8f10 	.word	0x1fff8f10

0000cedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    cedc:	b500      	push	{lr}
    cede:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cee0:	f7f4 f9c8 	bl	1274 <Sys_GetCoreID>
    cee4:	4603      	mov	r3, r0
    cee6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    cee8:	4a10      	ldr	r2, [pc, #64]	; (cf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    ceea:	9b01      	ldr	r3, [sp, #4]
    ceec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d10d      	bne.n	cf10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cef4:	f7f4 f8dc 	bl	10b0 <Adc_schm_read_msr>
    cef8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cefa:	9b00      	ldr	r3, [sp, #0]
    cefc:	f003 0301 	and.w	r3, r3, #1
    cf00:	2b00      	cmp	r3, #0
    cf02:	d100      	bne.n	cf06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    cf06:	490a      	ldr	r1, [pc, #40]	; (cf30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    cf08:	9b01      	ldr	r3, [sp, #4]
    cf0a:	9a00      	ldr	r2, [sp, #0]
    cf0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    cf10:	4a06      	ldr	r2, [pc, #24]	; (cf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    cf12:	9b01      	ldr	r3, [sp, #4]
    cf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf18:	1c5a      	adds	r2, r3, #1
    cf1a:	4904      	ldr	r1, [pc, #16]	; (cf2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf22:	bf00      	nop
    cf24:	b003      	add	sp, #12
    cf26:	f85d fb04 	ldr.w	pc, [sp], #4
    cf2a:	bf00      	nop
    cf2c:	1fff8f1c 	.word	0x1fff8f1c
    cf30:	1fff8f18 	.word	0x1fff8f18

0000cf34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    cf34:	b500      	push	{lr}
    cf36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf38:	f7f4 f99c 	bl	1274 <Sys_GetCoreID>
    cf3c:	4603      	mov	r3, r0
    cf3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    cf40:	4a0d      	ldr	r2, [pc, #52]	; (cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cf42:	9b01      	ldr	r3, [sp, #4]
    cf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf48:	1e5a      	subs	r2, r3, #1
    cf4a:	490b      	ldr	r1, [pc, #44]	; (cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cf4c:	9b01      	ldr	r3, [sp, #4]
    cf4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    cf52:	4a0a      	ldr	r2, [pc, #40]	; (cf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    cf54:	9b01      	ldr	r3, [sp, #4]
    cf56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf5a:	f003 0301 	and.w	r3, r3, #1
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d106      	bne.n	cf70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    cf62:	4a05      	ldr	r2, [pc, #20]	; (cf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    cf64:	9b01      	ldr	r3, [sp, #4]
    cf66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d100      	bne.n	cf70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf70:	bf00      	nop
    cf72:	b003      	add	sp, #12
    cf74:	f85d fb04 	ldr.w	pc, [sp], #4
    cf78:	1fff8f1c 	.word	0x1fff8f1c
    cf7c:	1fff8f18 	.word	0x1fff8f18

0000cf80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cf80:	b500      	push	{lr}
    cf82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf84:	f7f4 f976 	bl	1274 <Sys_GetCoreID>
    cf88:	4603      	mov	r3, r0
    cf8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    cf8c:	4a10      	ldr	r2, [pc, #64]	; (cfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cf8e:	9b01      	ldr	r3, [sp, #4]
    cf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d10d      	bne.n	cfb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf98:	f7f4 f88a 	bl	10b0 <Adc_schm_read_msr>
    cf9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf9e:	9b00      	ldr	r3, [sp, #0]
    cfa0:	f003 0301 	and.w	r3, r3, #1
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d100      	bne.n	cfaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    cfaa:	490a      	ldr	r1, [pc, #40]	; (cfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    cfac:	9b01      	ldr	r3, [sp, #4]
    cfae:	9a00      	ldr	r2, [sp, #0]
    cfb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    cfb4:	4a06      	ldr	r2, [pc, #24]	; (cfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cfb6:	9b01      	ldr	r3, [sp, #4]
    cfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfbc:	1c5a      	adds	r2, r3, #1
    cfbe:	4904      	ldr	r1, [pc, #16]	; (cfd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    cfc0:	9b01      	ldr	r3, [sp, #4]
    cfc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfc6:	bf00      	nop
    cfc8:	b003      	add	sp, #12
    cfca:	f85d fb04 	ldr.w	pc, [sp], #4
    cfce:	bf00      	nop
    cfd0:	1fff8f24 	.word	0x1fff8f24
    cfd4:	1fff8f20 	.word	0x1fff8f20

0000cfd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    cfd8:	b500      	push	{lr}
    cfda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfdc:	f7f4 f94a 	bl	1274 <Sys_GetCoreID>
    cfe0:	4603      	mov	r3, r0
    cfe2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    cfe4:	4a0d      	ldr	r2, [pc, #52]	; (d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cfe6:	9b01      	ldr	r3, [sp, #4]
    cfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfec:	1e5a      	subs	r2, r3, #1
    cfee:	490b      	ldr	r1, [pc, #44]	; (d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    cff0:	9b01      	ldr	r3, [sp, #4]
    cff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    cff6:	4a0a      	ldr	r2, [pc, #40]	; (d020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    cff8:	9b01      	ldr	r3, [sp, #4]
    cffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cffe:	f003 0301 	and.w	r3, r3, #1
    d002:	2b00      	cmp	r3, #0
    d004:	d106      	bne.n	d014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    d006:	4a05      	ldr	r2, [pc, #20]	; (d01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    d008:	9b01      	ldr	r3, [sp, #4]
    d00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d00e:	2b00      	cmp	r3, #0
    d010:	d100      	bne.n	d014 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d012:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d014:	bf00      	nop
    d016:	b003      	add	sp, #12
    d018:	f85d fb04 	ldr.w	pc, [sp], #4
    d01c:	1fff8f24 	.word	0x1fff8f24
    d020:	1fff8f20 	.word	0x1fff8f20

0000d024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    d024:	b500      	push	{lr}
    d026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d028:	f7f4 f924 	bl	1274 <Sys_GetCoreID>
    d02c:	4603      	mov	r3, r0
    d02e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    d030:	4a10      	ldr	r2, [pc, #64]	; (d074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    d032:	9b01      	ldr	r3, [sp, #4]
    d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d038:	2b00      	cmp	r3, #0
    d03a:	d10d      	bne.n	d058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d03c:	f7f4 f838 	bl	10b0 <Adc_schm_read_msr>
    d040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d042:	9b00      	ldr	r3, [sp, #0]
    d044:	f003 0301 	and.w	r3, r3, #1
    d048:	2b00      	cmp	r3, #0
    d04a:	d100      	bne.n	d04e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d04c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    d04e:	490a      	ldr	r1, [pc, #40]	; (d078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    d050:	9b01      	ldr	r3, [sp, #4]
    d052:	9a00      	ldr	r2, [sp, #0]
    d054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    d058:	4a06      	ldr	r2, [pc, #24]	; (d074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    d05a:	9b01      	ldr	r3, [sp, #4]
    d05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d060:	1c5a      	adds	r2, r3, #1
    d062:	4904      	ldr	r1, [pc, #16]	; (d074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d06a:	bf00      	nop
    d06c:	b003      	add	sp, #12
    d06e:	f85d fb04 	ldr.w	pc, [sp], #4
    d072:	bf00      	nop
    d074:	1fff8f2c 	.word	0x1fff8f2c
    d078:	1fff8f28 	.word	0x1fff8f28

0000d07c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    d07c:	b500      	push	{lr}
    d07e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d080:	f7f4 f8f8 	bl	1274 <Sys_GetCoreID>
    d084:	4603      	mov	r3, r0
    d086:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    d088:	4a0d      	ldr	r2, [pc, #52]	; (d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    d08a:	9b01      	ldr	r3, [sp, #4]
    d08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d090:	1e5a      	subs	r2, r3, #1
    d092:	490b      	ldr	r1, [pc, #44]	; (d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    d094:	9b01      	ldr	r3, [sp, #4]
    d096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    d09a:	4a0a      	ldr	r2, [pc, #40]	; (d0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a2:	f003 0301 	and.w	r3, r3, #1
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	d106      	bne.n	d0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    d0aa:	4a05      	ldr	r2, [pc, #20]	; (d0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    d0ac:	9b01      	ldr	r3, [sp, #4]
    d0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d100      	bne.n	d0b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0b8:	bf00      	nop
    d0ba:	b003      	add	sp, #12
    d0bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c0:	1fff8f2c 	.word	0x1fff8f2c
    d0c4:	1fff8f28 	.word	0x1fff8f28

0000d0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    d0c8:	b500      	push	{lr}
    d0ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0cc:	f7f4 f8d2 	bl	1274 <Sys_GetCoreID>
    d0d0:	4603      	mov	r3, r0
    d0d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    d0d4:	4a10      	ldr	r2, [pc, #64]	; (d118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    d0d6:	9b01      	ldr	r3, [sp, #4]
    d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d10d      	bne.n	d0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0e0:	f7f3 ffe6 	bl	10b0 <Adc_schm_read_msr>
    d0e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0e6:	9b00      	ldr	r3, [sp, #0]
    d0e8:	f003 0301 	and.w	r3, r3, #1
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d100      	bne.n	d0f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    d0f2:	490a      	ldr	r1, [pc, #40]	; (d11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    d0f4:	9b01      	ldr	r3, [sp, #4]
    d0f6:	9a00      	ldr	r2, [sp, #0]
    d0f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    d0fc:	4a06      	ldr	r2, [pc, #24]	; (d118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    d0fe:	9b01      	ldr	r3, [sp, #4]
    d100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d104:	1c5a      	adds	r2, r3, #1
    d106:	4904      	ldr	r1, [pc, #16]	; (d118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    d108:	9b01      	ldr	r3, [sp, #4]
    d10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d10e:	bf00      	nop
    d110:	b003      	add	sp, #12
    d112:	f85d fb04 	ldr.w	pc, [sp], #4
    d116:	bf00      	nop
    d118:	1fff8f34 	.word	0x1fff8f34
    d11c:	1fff8f30 	.word	0x1fff8f30

0000d120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    d120:	b500      	push	{lr}
    d122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d124:	f7f4 f8a6 	bl	1274 <Sys_GetCoreID>
    d128:	4603      	mov	r3, r0
    d12a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    d12c:	4a0d      	ldr	r2, [pc, #52]	; (d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    d12e:	9b01      	ldr	r3, [sp, #4]
    d130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d134:	1e5a      	subs	r2, r3, #1
    d136:	490b      	ldr	r1, [pc, #44]	; (d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    d138:	9b01      	ldr	r3, [sp, #4]
    d13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    d13e:	4a0a      	ldr	r2, [pc, #40]	; (d168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    d140:	9b01      	ldr	r3, [sp, #4]
    d142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d146:	f003 0301 	and.w	r3, r3, #1
    d14a:	2b00      	cmp	r3, #0
    d14c:	d106      	bne.n	d15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    d14e:	4a05      	ldr	r2, [pc, #20]	; (d164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    d150:	9b01      	ldr	r3, [sp, #4]
    d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d156:	2b00      	cmp	r3, #0
    d158:	d100      	bne.n	d15c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d15a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d15c:	bf00      	nop
    d15e:	b003      	add	sp, #12
    d160:	f85d fb04 	ldr.w	pc, [sp], #4
    d164:	1fff8f34 	.word	0x1fff8f34
    d168:	1fff8f30 	.word	0x1fff8f30

0000d16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    d16c:	b500      	push	{lr}
    d16e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d170:	f7f4 f880 	bl	1274 <Sys_GetCoreID>
    d174:	4603      	mov	r3, r0
    d176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    d178:	4a10      	ldr	r2, [pc, #64]	; (d1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    d17a:	9b01      	ldr	r3, [sp, #4]
    d17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d180:	2b00      	cmp	r3, #0
    d182:	d10d      	bne.n	d1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d184:	f7f3 ff94 	bl	10b0 <Adc_schm_read_msr>
    d188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d18a:	9b00      	ldr	r3, [sp, #0]
    d18c:	f003 0301 	and.w	r3, r3, #1
    d190:	2b00      	cmp	r3, #0
    d192:	d100      	bne.n	d196 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    d196:	490a      	ldr	r1, [pc, #40]	; (d1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    d198:	9b01      	ldr	r3, [sp, #4]
    d19a:	9a00      	ldr	r2, [sp, #0]
    d19c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    d1a0:	4a06      	ldr	r2, [pc, #24]	; (d1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    d1a2:	9b01      	ldr	r3, [sp, #4]
    d1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a8:	1c5a      	adds	r2, r3, #1
    d1aa:	4904      	ldr	r1, [pc, #16]	; (d1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    d1ac:	9b01      	ldr	r3, [sp, #4]
    d1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1b2:	bf00      	nop
    d1b4:	b003      	add	sp, #12
    d1b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ba:	bf00      	nop
    d1bc:	1fff8f3c 	.word	0x1fff8f3c
    d1c0:	1fff8f38 	.word	0x1fff8f38

0000d1c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    d1c4:	b500      	push	{lr}
    d1c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1c8:	f7f4 f854 	bl	1274 <Sys_GetCoreID>
    d1cc:	4603      	mov	r3, r0
    d1ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    d1d0:	4a0d      	ldr	r2, [pc, #52]	; (d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1d8:	1e5a      	subs	r2, r3, #1
    d1da:	490b      	ldr	r1, [pc, #44]	; (d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    d1dc:	9b01      	ldr	r3, [sp, #4]
    d1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    d1e2:	4a0a      	ldr	r2, [pc, #40]	; (d20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1ea:	f003 0301 	and.w	r3, r3, #1
    d1ee:	2b00      	cmp	r3, #0
    d1f0:	d106      	bne.n	d200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    d1f2:	4a05      	ldr	r2, [pc, #20]	; (d208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d100      	bne.n	d200 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d200:	bf00      	nop
    d202:	b003      	add	sp, #12
    d204:	f85d fb04 	ldr.w	pc, [sp], #4
    d208:	1fff8f3c 	.word	0x1fff8f3c
    d20c:	1fff8f38 	.word	0x1fff8f38

0000d210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    d210:	b500      	push	{lr}
    d212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d214:	f7f4 f82e 	bl	1274 <Sys_GetCoreID>
    d218:	4603      	mov	r3, r0
    d21a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    d21c:	4a10      	ldr	r2, [pc, #64]	; (d260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    d21e:	9b01      	ldr	r3, [sp, #4]
    d220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d224:	2b00      	cmp	r3, #0
    d226:	d10d      	bne.n	d244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d228:	f7f3 ff42 	bl	10b0 <Adc_schm_read_msr>
    d22c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d22e:	9b00      	ldr	r3, [sp, #0]
    d230:	f003 0301 	and.w	r3, r3, #1
    d234:	2b00      	cmp	r3, #0
    d236:	d100      	bne.n	d23a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    d23a:	490a      	ldr	r1, [pc, #40]	; (d264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    d23c:	9b01      	ldr	r3, [sp, #4]
    d23e:	9a00      	ldr	r2, [sp, #0]
    d240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    d244:	4a06      	ldr	r2, [pc, #24]	; (d260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    d246:	9b01      	ldr	r3, [sp, #4]
    d248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d24c:	1c5a      	adds	r2, r3, #1
    d24e:	4904      	ldr	r1, [pc, #16]	; (d260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    d250:	9b01      	ldr	r3, [sp, #4]
    d252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d256:	bf00      	nop
    d258:	b003      	add	sp, #12
    d25a:	f85d fb04 	ldr.w	pc, [sp], #4
    d25e:	bf00      	nop
    d260:	1fff8f44 	.word	0x1fff8f44
    d264:	1fff8f40 	.word	0x1fff8f40

0000d268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    d268:	b500      	push	{lr}
    d26a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d26c:	f7f4 f802 	bl	1274 <Sys_GetCoreID>
    d270:	4603      	mov	r3, r0
    d272:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    d274:	4a0d      	ldr	r2, [pc, #52]	; (d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    d276:	9b01      	ldr	r3, [sp, #4]
    d278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d27c:	1e5a      	subs	r2, r3, #1
    d27e:	490b      	ldr	r1, [pc, #44]	; (d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    d280:	9b01      	ldr	r3, [sp, #4]
    d282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    d286:	4a0a      	ldr	r2, [pc, #40]	; (d2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    d288:	9b01      	ldr	r3, [sp, #4]
    d28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d28e:	f003 0301 	and.w	r3, r3, #1
    d292:	2b00      	cmp	r3, #0
    d294:	d106      	bne.n	d2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    d296:	4a05      	ldr	r2, [pc, #20]	; (d2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    d298:	9b01      	ldr	r3, [sp, #4]
    d29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d100      	bne.n	d2a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2a4:	bf00      	nop
    d2a6:	b003      	add	sp, #12
    d2a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ac:	1fff8f44 	.word	0x1fff8f44
    d2b0:	1fff8f40 	.word	0x1fff8f40

0000d2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    d2b4:	b500      	push	{lr}
    d2b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2b8:	f7f3 ffdc 	bl	1274 <Sys_GetCoreID>
    d2bc:	4603      	mov	r3, r0
    d2be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    d2c0:	4a10      	ldr	r2, [pc, #64]	; (d304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    d2c2:	9b01      	ldr	r3, [sp, #4]
    d2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d10d      	bne.n	d2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2cc:	f7f3 fef0 	bl	10b0 <Adc_schm_read_msr>
    d2d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2d2:	9b00      	ldr	r3, [sp, #0]
    d2d4:	f003 0301 	and.w	r3, r3, #1
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d100      	bne.n	d2de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    d2de:	490a      	ldr	r1, [pc, #40]	; (d308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    d2e0:	9b01      	ldr	r3, [sp, #4]
    d2e2:	9a00      	ldr	r2, [sp, #0]
    d2e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    d2e8:	4a06      	ldr	r2, [pc, #24]	; (d304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    d2ea:	9b01      	ldr	r3, [sp, #4]
    d2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f0:	1c5a      	adds	r2, r3, #1
    d2f2:	4904      	ldr	r1, [pc, #16]	; (d304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    d2f4:	9b01      	ldr	r3, [sp, #4]
    d2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2fa:	bf00      	nop
    d2fc:	b003      	add	sp, #12
    d2fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d302:	bf00      	nop
    d304:	1fff8f4c 	.word	0x1fff8f4c
    d308:	1fff8f48 	.word	0x1fff8f48

0000d30c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    d30c:	b500      	push	{lr}
    d30e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d310:	f7f3 ffb0 	bl	1274 <Sys_GetCoreID>
    d314:	4603      	mov	r3, r0
    d316:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    d318:	4a0d      	ldr	r2, [pc, #52]	; (d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    d31a:	9b01      	ldr	r3, [sp, #4]
    d31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d320:	1e5a      	subs	r2, r3, #1
    d322:	490b      	ldr	r1, [pc, #44]	; (d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    d324:	9b01      	ldr	r3, [sp, #4]
    d326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    d32a:	4a0a      	ldr	r2, [pc, #40]	; (d354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    d32c:	9b01      	ldr	r3, [sp, #4]
    d32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d332:	f003 0301 	and.w	r3, r3, #1
    d336:	2b00      	cmp	r3, #0
    d338:	d106      	bne.n	d348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    d33a:	4a05      	ldr	r2, [pc, #20]	; (d350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d342:	2b00      	cmp	r3, #0
    d344:	d100      	bne.n	d348 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d348:	bf00      	nop
    d34a:	b003      	add	sp, #12
    d34c:	f85d fb04 	ldr.w	pc, [sp], #4
    d350:	1fff8f4c 	.word	0x1fff8f4c
    d354:	1fff8f48 	.word	0x1fff8f48

0000d358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    d358:	b500      	push	{lr}
    d35a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d35c:	f7f3 ff8a 	bl	1274 <Sys_GetCoreID>
    d360:	4603      	mov	r3, r0
    d362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    d364:	4a10      	ldr	r2, [pc, #64]	; (d3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    d366:	9b01      	ldr	r3, [sp, #4]
    d368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d36c:	2b00      	cmp	r3, #0
    d36e:	d10d      	bne.n	d38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d370:	f7f3 fe9e 	bl	10b0 <Adc_schm_read_msr>
    d374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d376:	9b00      	ldr	r3, [sp, #0]
    d378:	f003 0301 	and.w	r3, r3, #1
    d37c:	2b00      	cmp	r3, #0
    d37e:	d100      	bne.n	d382 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    d382:	490a      	ldr	r1, [pc, #40]	; (d3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    d384:	9b01      	ldr	r3, [sp, #4]
    d386:	9a00      	ldr	r2, [sp, #0]
    d388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    d38c:	4a06      	ldr	r2, [pc, #24]	; (d3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    d38e:	9b01      	ldr	r3, [sp, #4]
    d390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d394:	1c5a      	adds	r2, r3, #1
    d396:	4904      	ldr	r1, [pc, #16]	; (d3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    d398:	9b01      	ldr	r3, [sp, #4]
    d39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d39e:	bf00      	nop
    d3a0:	b003      	add	sp, #12
    d3a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3a6:	bf00      	nop
    d3a8:	1fff8f54 	.word	0x1fff8f54
    d3ac:	1fff8f50 	.word	0x1fff8f50

0000d3b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    d3b0:	b500      	push	{lr}
    d3b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3b4:	f7f3 ff5e 	bl	1274 <Sys_GetCoreID>
    d3b8:	4603      	mov	r3, r0
    d3ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    d3bc:	4a0d      	ldr	r2, [pc, #52]	; (d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d3be:	9b01      	ldr	r3, [sp, #4]
    d3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c4:	1e5a      	subs	r2, r3, #1
    d3c6:	490b      	ldr	r1, [pc, #44]	; (d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d3c8:	9b01      	ldr	r3, [sp, #4]
    d3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    d3ce:	4a0a      	ldr	r2, [pc, #40]	; (d3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    d3d0:	9b01      	ldr	r3, [sp, #4]
    d3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d6:	f003 0301 	and.w	r3, r3, #1
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d106      	bne.n	d3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    d3de:	4a05      	ldr	r2, [pc, #20]	; (d3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d100      	bne.n	d3ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3ec:	bf00      	nop
    d3ee:	b003      	add	sp, #12
    d3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d3f4:	1fff8f54 	.word	0x1fff8f54
    d3f8:	1fff8f50 	.word	0x1fff8f50

0000d3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    d3fc:	b500      	push	{lr}
    d3fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d400:	f7f3 ff38 	bl	1274 <Sys_GetCoreID>
    d404:	4603      	mov	r3, r0
    d406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    d408:	4a10      	ldr	r2, [pc, #64]	; (d44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d40a:	9b01      	ldr	r3, [sp, #4]
    d40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d410:	2b00      	cmp	r3, #0
    d412:	d10d      	bne.n	d430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d414:	f7f3 fe4c 	bl	10b0 <Adc_schm_read_msr>
    d418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d41a:	9b00      	ldr	r3, [sp, #0]
    d41c:	f003 0301 	and.w	r3, r3, #1
    d420:	2b00      	cmp	r3, #0
    d422:	d100      	bne.n	d426 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    d426:	490a      	ldr	r1, [pc, #40]	; (d450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    d428:	9b01      	ldr	r3, [sp, #4]
    d42a:	9a00      	ldr	r2, [sp, #0]
    d42c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    d430:	4a06      	ldr	r2, [pc, #24]	; (d44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d432:	9b01      	ldr	r3, [sp, #4]
    d434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d438:	1c5a      	adds	r2, r3, #1
    d43a:	4904      	ldr	r1, [pc, #16]	; (d44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d442:	bf00      	nop
    d444:	b003      	add	sp, #12
    d446:	f85d fb04 	ldr.w	pc, [sp], #4
    d44a:	bf00      	nop
    d44c:	1fff8f5c 	.word	0x1fff8f5c
    d450:	1fff8f58 	.word	0x1fff8f58

0000d454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    d454:	b500      	push	{lr}
    d456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d458:	f7f3 ff0c 	bl	1274 <Sys_GetCoreID>
    d45c:	4603      	mov	r3, r0
    d45e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    d460:	4a0d      	ldr	r2, [pc, #52]	; (d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d462:	9b01      	ldr	r3, [sp, #4]
    d464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d468:	1e5a      	subs	r2, r3, #1
    d46a:	490b      	ldr	r1, [pc, #44]	; (d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d46c:	9b01      	ldr	r3, [sp, #4]
    d46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    d472:	4a0a      	ldr	r2, [pc, #40]	; (d49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    d474:	9b01      	ldr	r3, [sp, #4]
    d476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d47a:	f003 0301 	and.w	r3, r3, #1
    d47e:	2b00      	cmp	r3, #0
    d480:	d106      	bne.n	d490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    d482:	4a05      	ldr	r2, [pc, #20]	; (d498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d48a:	2b00      	cmp	r3, #0
    d48c:	d100      	bne.n	d490 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d48e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d490:	bf00      	nop
    d492:	b003      	add	sp, #12
    d494:	f85d fb04 	ldr.w	pc, [sp], #4
    d498:	1fff8f5c 	.word	0x1fff8f5c
    d49c:	1fff8f58 	.word	0x1fff8f58

0000d4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d4a0:	b500      	push	{lr}
    d4a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4a4:	f7f3 fee6 	bl	1274 <Sys_GetCoreID>
    d4a8:	4603      	mov	r3, r0
    d4aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    d4ac:	4a10      	ldr	r2, [pc, #64]	; (d4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d4ae:	9b01      	ldr	r3, [sp, #4]
    d4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d10d      	bne.n	d4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4b8:	f7f3 fdfa 	bl	10b0 <Adc_schm_read_msr>
    d4bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4be:	9b00      	ldr	r3, [sp, #0]
    d4c0:	f003 0301 	and.w	r3, r3, #1
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d100      	bne.n	d4ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    d4ca:	490a      	ldr	r1, [pc, #40]	; (d4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    d4cc:	9b01      	ldr	r3, [sp, #4]
    d4ce:	9a00      	ldr	r2, [sp, #0]
    d4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    d4d4:	4a06      	ldr	r2, [pc, #24]	; (d4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d4d6:	9b01      	ldr	r3, [sp, #4]
    d4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4dc:	1c5a      	adds	r2, r3, #1
    d4de:	4904      	ldr	r1, [pc, #16]	; (d4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4e6:	bf00      	nop
    d4e8:	b003      	add	sp, #12
    d4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d4ee:	bf00      	nop
    d4f0:	1fff8f64 	.word	0x1fff8f64
    d4f4:	1fff8f60 	.word	0x1fff8f60

0000d4f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    d4f8:	b500      	push	{lr}
    d4fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4fc:	f7f3 feba 	bl	1274 <Sys_GetCoreID>
    d500:	4603      	mov	r3, r0
    d502:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    d504:	4a0d      	ldr	r2, [pc, #52]	; (d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d506:	9b01      	ldr	r3, [sp, #4]
    d508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d50c:	1e5a      	subs	r2, r3, #1
    d50e:	490b      	ldr	r1, [pc, #44]	; (d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d510:	9b01      	ldr	r3, [sp, #4]
    d512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    d516:	4a0a      	ldr	r2, [pc, #40]	; (d540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    d518:	9b01      	ldr	r3, [sp, #4]
    d51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d51e:	f003 0301 	and.w	r3, r3, #1
    d522:	2b00      	cmp	r3, #0
    d524:	d106      	bne.n	d534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    d526:	4a05      	ldr	r2, [pc, #20]	; (d53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d52e:	2b00      	cmp	r3, #0
    d530:	d100      	bne.n	d534 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d534:	bf00      	nop
    d536:	b003      	add	sp, #12
    d538:	f85d fb04 	ldr.w	pc, [sp], #4
    d53c:	1fff8f64 	.word	0x1fff8f64
    d540:	1fff8f60 	.word	0x1fff8f60

0000d544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d544:	b500      	push	{lr}
    d546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d548:	f7f3 fe94 	bl	1274 <Sys_GetCoreID>
    d54c:	4603      	mov	r3, r0
    d54e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    d550:	4a10      	ldr	r2, [pc, #64]	; (d594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d552:	9b01      	ldr	r3, [sp, #4]
    d554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d558:	2b00      	cmp	r3, #0
    d55a:	d10d      	bne.n	d578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d55c:	f7f3 fda8 	bl	10b0 <Adc_schm_read_msr>
    d560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d562:	9b00      	ldr	r3, [sp, #0]
    d564:	f003 0301 	and.w	r3, r3, #1
    d568:	2b00      	cmp	r3, #0
    d56a:	d100      	bne.n	d56e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d56c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    d56e:	490a      	ldr	r1, [pc, #40]	; (d598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    d570:	9b01      	ldr	r3, [sp, #4]
    d572:	9a00      	ldr	r2, [sp, #0]
    d574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    d578:	4a06      	ldr	r2, [pc, #24]	; (d594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d57a:	9b01      	ldr	r3, [sp, #4]
    d57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d580:	1c5a      	adds	r2, r3, #1
    d582:	4904      	ldr	r1, [pc, #16]	; (d594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d58a:	bf00      	nop
    d58c:	b003      	add	sp, #12
    d58e:	f85d fb04 	ldr.w	pc, [sp], #4
    d592:	bf00      	nop
    d594:	1fff8f6c 	.word	0x1fff8f6c
    d598:	1fff8f68 	.word	0x1fff8f68

0000d59c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    d59c:	b500      	push	{lr}
    d59e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a0:	f7f3 fe68 	bl	1274 <Sys_GetCoreID>
    d5a4:	4603      	mov	r3, r0
    d5a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    d5a8:	4a0d      	ldr	r2, [pc, #52]	; (d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d5aa:	9b01      	ldr	r3, [sp, #4]
    d5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b0:	1e5a      	subs	r2, r3, #1
    d5b2:	490b      	ldr	r1, [pc, #44]	; (d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d5b4:	9b01      	ldr	r3, [sp, #4]
    d5b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    d5ba:	4a0a      	ldr	r2, [pc, #40]	; (d5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c2:	f003 0301 	and.w	r3, r3, #1
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d106      	bne.n	d5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    d5ca:	4a05      	ldr	r2, [pc, #20]	; (d5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d100      	bne.n	d5d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5d8:	bf00      	nop
    d5da:	b003      	add	sp, #12
    d5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e0:	1fff8f6c 	.word	0x1fff8f6c
    d5e4:	1fff8f68 	.word	0x1fff8f68

0000d5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d5e8:	b500      	push	{lr}
    d5ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5ec:	f7f3 fe42 	bl	1274 <Sys_GetCoreID>
    d5f0:	4603      	mov	r3, r0
    d5f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    d5f4:	4a10      	ldr	r2, [pc, #64]	; (d638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d5f6:	9b01      	ldr	r3, [sp, #4]
    d5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d10d      	bne.n	d61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d600:	f7f3 fd56 	bl	10b0 <Adc_schm_read_msr>
    d604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d606:	9b00      	ldr	r3, [sp, #0]
    d608:	f003 0301 	and.w	r3, r3, #1
    d60c:	2b00      	cmp	r3, #0
    d60e:	d100      	bne.n	d612 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    d612:	490a      	ldr	r1, [pc, #40]	; (d63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    d614:	9b01      	ldr	r3, [sp, #4]
    d616:	9a00      	ldr	r2, [sp, #0]
    d618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    d61c:	4a06      	ldr	r2, [pc, #24]	; (d638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d61e:	9b01      	ldr	r3, [sp, #4]
    d620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d624:	1c5a      	adds	r2, r3, #1
    d626:	4904      	ldr	r1, [pc, #16]	; (d638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d62e:	bf00      	nop
    d630:	b003      	add	sp, #12
    d632:	f85d fb04 	ldr.w	pc, [sp], #4
    d636:	bf00      	nop
    d638:	1fff8f74 	.word	0x1fff8f74
    d63c:	1fff8f70 	.word	0x1fff8f70

0000d640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d640:	b500      	push	{lr}
    d642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d644:	f7f3 fe16 	bl	1274 <Sys_GetCoreID>
    d648:	4603      	mov	r3, r0
    d64a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    d64c:	4a0d      	ldr	r2, [pc, #52]	; (d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d64e:	9b01      	ldr	r3, [sp, #4]
    d650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d654:	1e5a      	subs	r2, r3, #1
    d656:	490b      	ldr	r1, [pc, #44]	; (d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d658:	9b01      	ldr	r3, [sp, #4]
    d65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    d65e:	4a0a      	ldr	r2, [pc, #40]	; (d688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d660:	9b01      	ldr	r3, [sp, #4]
    d662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d666:	f003 0301 	and.w	r3, r3, #1
    d66a:	2b00      	cmp	r3, #0
    d66c:	d106      	bne.n	d67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d66e:	4a05      	ldr	r2, [pc, #20]	; (d684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d676:	2b00      	cmp	r3, #0
    d678:	d100      	bne.n	d67c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d67a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d67c:	bf00      	nop
    d67e:	b003      	add	sp, #12
    d680:	f85d fb04 	ldr.w	pc, [sp], #4
    d684:	1fff8f74 	.word	0x1fff8f74
    d688:	1fff8f70 	.word	0x1fff8f70

0000d68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d68c:	b500      	push	{lr}
    d68e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d690:	f7f3 fdf0 	bl	1274 <Sys_GetCoreID>
    d694:	4603      	mov	r3, r0
    d696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d698:	4a10      	ldr	r2, [pc, #64]	; (d6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d69a:	9b01      	ldr	r3, [sp, #4]
    d69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a0:	2b00      	cmp	r3, #0
    d6a2:	d10d      	bne.n	d6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6a4:	f7f3 fd04 	bl	10b0 <Adc_schm_read_msr>
    d6a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6aa:	9b00      	ldr	r3, [sp, #0]
    d6ac:	f003 0301 	and.w	r3, r3, #1
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d100      	bne.n	d6b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d6b6:	490a      	ldr	r1, [pc, #40]	; (d6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d6b8:	9b01      	ldr	r3, [sp, #4]
    d6ba:	9a00      	ldr	r2, [sp, #0]
    d6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d6c0:	4a06      	ldr	r2, [pc, #24]	; (d6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d6c2:	9b01      	ldr	r3, [sp, #4]
    d6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c8:	1c5a      	adds	r2, r3, #1
    d6ca:	4904      	ldr	r1, [pc, #16]	; (d6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6d2:	bf00      	nop
    d6d4:	b003      	add	sp, #12
    d6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d6da:	bf00      	nop
    d6dc:	1fff8f7c 	.word	0x1fff8f7c
    d6e0:	1fff8f78 	.word	0x1fff8f78

0000d6e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d6e4:	b500      	push	{lr}
    d6e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6e8:	f7f3 fdc4 	bl	1274 <Sys_GetCoreID>
    d6ec:	4603      	mov	r3, r0
    d6ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d6f0:	4a0d      	ldr	r2, [pc, #52]	; (d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d6f2:	9b01      	ldr	r3, [sp, #4]
    d6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6f8:	1e5a      	subs	r2, r3, #1
    d6fa:	490b      	ldr	r1, [pc, #44]	; (d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d6fc:	9b01      	ldr	r3, [sp, #4]
    d6fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d702:	4a0a      	ldr	r2, [pc, #40]	; (d72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d704:	9b01      	ldr	r3, [sp, #4]
    d706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d70a:	f003 0301 	and.w	r3, r3, #1
    d70e:	2b00      	cmp	r3, #0
    d710:	d106      	bne.n	d720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d712:	4a05      	ldr	r2, [pc, #20]	; (d728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d71a:	2b00      	cmp	r3, #0
    d71c:	d100      	bne.n	d720 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d71e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d720:	bf00      	nop
    d722:	b003      	add	sp, #12
    d724:	f85d fb04 	ldr.w	pc, [sp], #4
    d728:	1fff8f7c 	.word	0x1fff8f7c
    d72c:	1fff8f78 	.word	0x1fff8f78

0000d730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d730:	b500      	push	{lr}
    d732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d734:	f7f3 fd9e 	bl	1274 <Sys_GetCoreID>
    d738:	4603      	mov	r3, r0
    d73a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d73c:	4a10      	ldr	r2, [pc, #64]	; (d780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d73e:	9b01      	ldr	r3, [sp, #4]
    d740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d744:	2b00      	cmp	r3, #0
    d746:	d10d      	bne.n	d764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d748:	f7f3 fcb2 	bl	10b0 <Adc_schm_read_msr>
    d74c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d74e:	9b00      	ldr	r3, [sp, #0]
    d750:	f003 0301 	and.w	r3, r3, #1
    d754:	2b00      	cmp	r3, #0
    d756:	d100      	bne.n	d75a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d75a:	490a      	ldr	r1, [pc, #40]	; (d784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d75c:	9b01      	ldr	r3, [sp, #4]
    d75e:	9a00      	ldr	r2, [sp, #0]
    d760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d764:	4a06      	ldr	r2, [pc, #24]	; (d780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d766:	9b01      	ldr	r3, [sp, #4]
    d768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d76c:	1c5a      	adds	r2, r3, #1
    d76e:	4904      	ldr	r1, [pc, #16]	; (d780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d776:	bf00      	nop
    d778:	b003      	add	sp, #12
    d77a:	f85d fb04 	ldr.w	pc, [sp], #4
    d77e:	bf00      	nop
    d780:	1fff8f84 	.word	0x1fff8f84
    d784:	1fff8f80 	.word	0x1fff8f80

0000d788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d788:	b500      	push	{lr}
    d78a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d78c:	f7f3 fd72 	bl	1274 <Sys_GetCoreID>
    d790:	4603      	mov	r3, r0
    d792:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d794:	4a0d      	ldr	r2, [pc, #52]	; (d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d796:	9b01      	ldr	r3, [sp, #4]
    d798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d79c:	1e5a      	subs	r2, r3, #1
    d79e:	490b      	ldr	r1, [pc, #44]	; (d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d7a0:	9b01      	ldr	r3, [sp, #4]
    d7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d7a6:	4a0a      	ldr	r2, [pc, #40]	; (d7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d7a8:	9b01      	ldr	r3, [sp, #4]
    d7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ae:	f003 0301 	and.w	r3, r3, #1
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d106      	bne.n	d7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d7b6:	4a05      	ldr	r2, [pc, #20]	; (d7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d100      	bne.n	d7c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7c4:	bf00      	nop
    d7c6:	b003      	add	sp, #12
    d7c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d7cc:	1fff8f84 	.word	0x1fff8f84
    d7d0:	1fff8f80 	.word	0x1fff8f80

0000d7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d7d4:	b500      	push	{lr}
    d7d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7d8:	f7f3 fd4c 	bl	1274 <Sys_GetCoreID>
    d7dc:	4603      	mov	r3, r0
    d7de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d7e0:	4a10      	ldr	r2, [pc, #64]	; (d824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d7e2:	9b01      	ldr	r3, [sp, #4]
    d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	d10d      	bne.n	d808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7ec:	f7f3 fc60 	bl	10b0 <Adc_schm_read_msr>
    d7f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7f2:	9b00      	ldr	r3, [sp, #0]
    d7f4:	f003 0301 	and.w	r3, r3, #1
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	d100      	bne.n	d7fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d7fe:	490a      	ldr	r1, [pc, #40]	; (d828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d800:	9b01      	ldr	r3, [sp, #4]
    d802:	9a00      	ldr	r2, [sp, #0]
    d804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d808:	4a06      	ldr	r2, [pc, #24]	; (d824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d80a:	9b01      	ldr	r3, [sp, #4]
    d80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d810:	1c5a      	adds	r2, r3, #1
    d812:	4904      	ldr	r1, [pc, #16]	; (d824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d81a:	bf00      	nop
    d81c:	b003      	add	sp, #12
    d81e:	f85d fb04 	ldr.w	pc, [sp], #4
    d822:	bf00      	nop
    d824:	1fff8f8c 	.word	0x1fff8f8c
    d828:	1fff8f88 	.word	0x1fff8f88

0000d82c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d82c:	b500      	push	{lr}
    d82e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d830:	f7f3 fd20 	bl	1274 <Sys_GetCoreID>
    d834:	4603      	mov	r3, r0
    d836:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d838:	4a0d      	ldr	r2, [pc, #52]	; (d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d83a:	9b01      	ldr	r3, [sp, #4]
    d83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d840:	1e5a      	subs	r2, r3, #1
    d842:	490b      	ldr	r1, [pc, #44]	; (d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d844:	9b01      	ldr	r3, [sp, #4]
    d846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d84a:	4a0a      	ldr	r2, [pc, #40]	; (d874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d84c:	9b01      	ldr	r3, [sp, #4]
    d84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d852:	f003 0301 	and.w	r3, r3, #1
    d856:	2b00      	cmp	r3, #0
    d858:	d106      	bne.n	d868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d85a:	4a05      	ldr	r2, [pc, #20]	; (d870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d862:	2b00      	cmp	r3, #0
    d864:	d100      	bne.n	d868 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d868:	bf00      	nop
    d86a:	b003      	add	sp, #12
    d86c:	f85d fb04 	ldr.w	pc, [sp], #4
    d870:	1fff8f8c 	.word	0x1fff8f8c
    d874:	1fff8f88 	.word	0x1fff8f88

0000d878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d878:	b500      	push	{lr}
    d87a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d87c:	f7f3 fcfa 	bl	1274 <Sys_GetCoreID>
    d880:	4603      	mov	r3, r0
    d882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d884:	4a10      	ldr	r2, [pc, #64]	; (d8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d886:	9b01      	ldr	r3, [sp, #4]
    d888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d10d      	bne.n	d8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d890:	f7f3 fc0e 	bl	10b0 <Adc_schm_read_msr>
    d894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d896:	9b00      	ldr	r3, [sp, #0]
    d898:	f003 0301 	and.w	r3, r3, #1
    d89c:	2b00      	cmp	r3, #0
    d89e:	d100      	bne.n	d8a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d8a2:	490a      	ldr	r1, [pc, #40]	; (d8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d8a4:	9b01      	ldr	r3, [sp, #4]
    d8a6:	9a00      	ldr	r2, [sp, #0]
    d8a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d8ac:	4a06      	ldr	r2, [pc, #24]	; (d8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d8ae:	9b01      	ldr	r3, [sp, #4]
    d8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8b4:	1c5a      	adds	r2, r3, #1
    d8b6:	4904      	ldr	r1, [pc, #16]	; (d8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8be:	bf00      	nop
    d8c0:	b003      	add	sp, #12
    d8c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d8c6:	bf00      	nop
    d8c8:	1fff8f94 	.word	0x1fff8f94
    d8cc:	1fff8f90 	.word	0x1fff8f90

0000d8d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d8d0:	b500      	push	{lr}
    d8d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8d4:	f7f3 fcce 	bl	1274 <Sys_GetCoreID>
    d8d8:	4603      	mov	r3, r0
    d8da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d8dc:	4a0d      	ldr	r2, [pc, #52]	; (d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d8de:	9b01      	ldr	r3, [sp, #4]
    d8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e4:	1e5a      	subs	r2, r3, #1
    d8e6:	490b      	ldr	r1, [pc, #44]	; (d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d8e8:	9b01      	ldr	r3, [sp, #4]
    d8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d8ee:	4a0a      	ldr	r2, [pc, #40]	; (d918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d8f0:	9b01      	ldr	r3, [sp, #4]
    d8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f6:	f003 0301 	and.w	r3, r3, #1
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d106      	bne.n	d90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d8fe:	4a05      	ldr	r2, [pc, #20]	; (d914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d906:	2b00      	cmp	r3, #0
    d908:	d100      	bne.n	d90c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d90a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d90c:	bf00      	nop
    d90e:	b003      	add	sp, #12
    d910:	f85d fb04 	ldr.w	pc, [sp], #4
    d914:	1fff8f94 	.word	0x1fff8f94
    d918:	1fff8f90 	.word	0x1fff8f90

0000d91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d91c:	b500      	push	{lr}
    d91e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d920:	f7f3 fca8 	bl	1274 <Sys_GetCoreID>
    d924:	4603      	mov	r3, r0
    d926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d928:	4a10      	ldr	r2, [pc, #64]	; (d96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d92a:	9b01      	ldr	r3, [sp, #4]
    d92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d930:	2b00      	cmp	r3, #0
    d932:	d10d      	bne.n	d950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d934:	f7f3 fbbc 	bl	10b0 <Adc_schm_read_msr>
    d938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d93a:	9b00      	ldr	r3, [sp, #0]
    d93c:	f003 0301 	and.w	r3, r3, #1
    d940:	2b00      	cmp	r3, #0
    d942:	d100      	bne.n	d946 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d946:	490a      	ldr	r1, [pc, #40]	; (d970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d948:	9b01      	ldr	r3, [sp, #4]
    d94a:	9a00      	ldr	r2, [sp, #0]
    d94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d950:	4a06      	ldr	r2, [pc, #24]	; (d96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d952:	9b01      	ldr	r3, [sp, #4]
    d954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d958:	1c5a      	adds	r2, r3, #1
    d95a:	4904      	ldr	r1, [pc, #16]	; (d96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d962:	bf00      	nop
    d964:	b003      	add	sp, #12
    d966:	f85d fb04 	ldr.w	pc, [sp], #4
    d96a:	bf00      	nop
    d96c:	1fff8f9c 	.word	0x1fff8f9c
    d970:	1fff8f98 	.word	0x1fff8f98

0000d974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d974:	b500      	push	{lr}
    d976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d978:	f7f3 fc7c 	bl	1274 <Sys_GetCoreID>
    d97c:	4603      	mov	r3, r0
    d97e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d980:	4a0d      	ldr	r2, [pc, #52]	; (d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d982:	9b01      	ldr	r3, [sp, #4]
    d984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d988:	1e5a      	subs	r2, r3, #1
    d98a:	490b      	ldr	r1, [pc, #44]	; (d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d98c:	9b01      	ldr	r3, [sp, #4]
    d98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d992:	4a0a      	ldr	r2, [pc, #40]	; (d9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d994:	9b01      	ldr	r3, [sp, #4]
    d996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d99a:	f003 0301 	and.w	r3, r3, #1
    d99e:	2b00      	cmp	r3, #0
    d9a0:	d106      	bne.n	d9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d9a2:	4a05      	ldr	r2, [pc, #20]	; (d9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d100      	bne.n	d9b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9b0:	bf00      	nop
    d9b2:	b003      	add	sp, #12
    d9b4:	f85d fb04 	ldr.w	pc, [sp], #4
    d9b8:	1fff8f9c 	.word	0x1fff8f9c
    d9bc:	1fff8f98 	.word	0x1fff8f98

0000d9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d9c0:	b500      	push	{lr}
    d9c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9c4:	f7f3 fc56 	bl	1274 <Sys_GetCoreID>
    d9c8:	4603      	mov	r3, r0
    d9ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d9cc:	4a10      	ldr	r2, [pc, #64]	; (da10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d9ce:	9b01      	ldr	r3, [sp, #4]
    d9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9d4:	2b00      	cmp	r3, #0
    d9d6:	d10d      	bne.n	d9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9d8:	f7f3 fb6a 	bl	10b0 <Adc_schm_read_msr>
    d9dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9de:	9b00      	ldr	r3, [sp, #0]
    d9e0:	f003 0301 	and.w	r3, r3, #1
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	d100      	bne.n	d9ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d9ea:	490a      	ldr	r1, [pc, #40]	; (da14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d9ec:	9b01      	ldr	r3, [sp, #4]
    d9ee:	9a00      	ldr	r2, [sp, #0]
    d9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d9f4:	4a06      	ldr	r2, [pc, #24]	; (da10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d9f6:	9b01      	ldr	r3, [sp, #4]
    d9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9fc:	1c5a      	adds	r2, r3, #1
    d9fe:	4904      	ldr	r1, [pc, #16]	; (da10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da06:	bf00      	nop
    da08:	b003      	add	sp, #12
    da0a:	f85d fb04 	ldr.w	pc, [sp], #4
    da0e:	bf00      	nop
    da10:	1fff8fa4 	.word	0x1fff8fa4
    da14:	1fff8fa0 	.word	0x1fff8fa0

0000da18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    da18:	b500      	push	{lr}
    da1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da1c:	f7f3 fc2a 	bl	1274 <Sys_GetCoreID>
    da20:	4603      	mov	r3, r0
    da22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    da24:	4a0d      	ldr	r2, [pc, #52]	; (da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    da26:	9b01      	ldr	r3, [sp, #4]
    da28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da2c:	1e5a      	subs	r2, r3, #1
    da2e:	490b      	ldr	r1, [pc, #44]	; (da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    da30:	9b01      	ldr	r3, [sp, #4]
    da32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    da36:	4a0a      	ldr	r2, [pc, #40]	; (da60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da3e:	f003 0301 	and.w	r3, r3, #1
    da42:	2b00      	cmp	r3, #0
    da44:	d106      	bne.n	da54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    da46:	4a05      	ldr	r2, [pc, #20]	; (da5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da4e:	2b00      	cmp	r3, #0
    da50:	d100      	bne.n	da54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da54:	bf00      	nop
    da56:	b003      	add	sp, #12
    da58:	f85d fb04 	ldr.w	pc, [sp], #4
    da5c:	1fff8fa4 	.word	0x1fff8fa4
    da60:	1fff8fa0 	.word	0x1fff8fa0

0000da64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    da64:	b500      	push	{lr}
    da66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da68:	f7f3 fc04 	bl	1274 <Sys_GetCoreID>
    da6c:	4603      	mov	r3, r0
    da6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    da70:	4a10      	ldr	r2, [pc, #64]	; (dab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    da72:	9b01      	ldr	r3, [sp, #4]
    da74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da78:	2b00      	cmp	r3, #0
    da7a:	d10d      	bne.n	da98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da7c:	f7f3 fb18 	bl	10b0 <Adc_schm_read_msr>
    da80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da82:	9b00      	ldr	r3, [sp, #0]
    da84:	f003 0301 	and.w	r3, r3, #1
    da88:	2b00      	cmp	r3, #0
    da8a:	d100      	bne.n	da8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    da8e:	490a      	ldr	r1, [pc, #40]	; (dab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    da90:	9b01      	ldr	r3, [sp, #4]
    da92:	9a00      	ldr	r2, [sp, #0]
    da94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    da98:	4a06      	ldr	r2, [pc, #24]	; (dab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    da9a:	9b01      	ldr	r3, [sp, #4]
    da9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa0:	1c5a      	adds	r2, r3, #1
    daa2:	4904      	ldr	r1, [pc, #16]	; (dab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    daaa:	bf00      	nop
    daac:	b003      	add	sp, #12
    daae:	f85d fb04 	ldr.w	pc, [sp], #4
    dab2:	bf00      	nop
    dab4:	1fff8fac 	.word	0x1fff8fac
    dab8:	1fff8fa8 	.word	0x1fff8fa8

0000dabc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    dabc:	b500      	push	{lr}
    dabe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac0:	f7f3 fbd8 	bl	1274 <Sys_GetCoreID>
    dac4:	4603      	mov	r3, r0
    dac6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    dac8:	4a0d      	ldr	r2, [pc, #52]	; (db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    daca:	9b01      	ldr	r3, [sp, #4]
    dacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad0:	1e5a      	subs	r2, r3, #1
    dad2:	490b      	ldr	r1, [pc, #44]	; (db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    dad4:	9b01      	ldr	r3, [sp, #4]
    dad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    dada:	4a0a      	ldr	r2, [pc, #40]	; (db04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    dadc:	9b01      	ldr	r3, [sp, #4]
    dade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae2:	f003 0301 	and.w	r3, r3, #1
    dae6:	2b00      	cmp	r3, #0
    dae8:	d106      	bne.n	daf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    daea:	4a05      	ldr	r2, [pc, #20]	; (db00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daf2:	2b00      	cmp	r3, #0
    daf4:	d100      	bne.n	daf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    daf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    daf8:	bf00      	nop
    dafa:	b003      	add	sp, #12
    dafc:	f85d fb04 	ldr.w	pc, [sp], #4
    db00:	1fff8fac 	.word	0x1fff8fac
    db04:	1fff8fa8 	.word	0x1fff8fa8

0000db08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    db08:	b500      	push	{lr}
    db0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db0c:	f7f3 fbb2 	bl	1274 <Sys_GetCoreID>
    db10:	4603      	mov	r3, r0
    db12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    db14:	4a10      	ldr	r2, [pc, #64]	; (db58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    db16:	9b01      	ldr	r3, [sp, #4]
    db18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d10d      	bne.n	db3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db20:	f7f3 fac6 	bl	10b0 <Adc_schm_read_msr>
    db24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db26:	9b00      	ldr	r3, [sp, #0]
    db28:	f003 0301 	and.w	r3, r3, #1
    db2c:	2b00      	cmp	r3, #0
    db2e:	d100      	bne.n	db32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    db32:	490a      	ldr	r1, [pc, #40]	; (db5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    db34:	9b01      	ldr	r3, [sp, #4]
    db36:	9a00      	ldr	r2, [sp, #0]
    db38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    db3c:	4a06      	ldr	r2, [pc, #24]	; (db58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    db3e:	9b01      	ldr	r3, [sp, #4]
    db40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db44:	1c5a      	adds	r2, r3, #1
    db46:	4904      	ldr	r1, [pc, #16]	; (db58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db4e:	bf00      	nop
    db50:	b003      	add	sp, #12
    db52:	f85d fb04 	ldr.w	pc, [sp], #4
    db56:	bf00      	nop
    db58:	1fff8fb4 	.word	0x1fff8fb4
    db5c:	1fff8fb0 	.word	0x1fff8fb0

0000db60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    db60:	b500      	push	{lr}
    db62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db64:	f7f3 fb86 	bl	1274 <Sys_GetCoreID>
    db68:	4603      	mov	r3, r0
    db6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    db6c:	4a0d      	ldr	r2, [pc, #52]	; (dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    db6e:	9b01      	ldr	r3, [sp, #4]
    db70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db74:	1e5a      	subs	r2, r3, #1
    db76:	490b      	ldr	r1, [pc, #44]	; (dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    db78:	9b01      	ldr	r3, [sp, #4]
    db7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    db7e:	4a0a      	ldr	r2, [pc, #40]	; (dba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    db80:	9b01      	ldr	r3, [sp, #4]
    db82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db86:	f003 0301 	and.w	r3, r3, #1
    db8a:	2b00      	cmp	r3, #0
    db8c:	d106      	bne.n	db9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    db8e:	4a05      	ldr	r2, [pc, #20]	; (dba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db96:	2b00      	cmp	r3, #0
    db98:	d100      	bne.n	db9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db9c:	bf00      	nop
    db9e:	b003      	add	sp, #12
    dba0:	f85d fb04 	ldr.w	pc, [sp], #4
    dba4:	1fff8fb4 	.word	0x1fff8fb4
    dba8:	1fff8fb0 	.word	0x1fff8fb0

0000dbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    dbac:	b500      	push	{lr}
    dbae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbb0:	f7f3 fb60 	bl	1274 <Sys_GetCoreID>
    dbb4:	4603      	mov	r3, r0
    dbb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    dbb8:	4a10      	ldr	r2, [pc, #64]	; (dbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    dbba:	9b01      	ldr	r3, [sp, #4]
    dbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc0:	2b00      	cmp	r3, #0
    dbc2:	d10d      	bne.n	dbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbc4:	f7f3 fa74 	bl	10b0 <Adc_schm_read_msr>
    dbc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbca:	9b00      	ldr	r3, [sp, #0]
    dbcc:	f003 0301 	and.w	r3, r3, #1
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d100      	bne.n	dbd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    dbd6:	490a      	ldr	r1, [pc, #40]	; (dc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    dbd8:	9b01      	ldr	r3, [sp, #4]
    dbda:	9a00      	ldr	r2, [sp, #0]
    dbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    dbe0:	4a06      	ldr	r2, [pc, #24]	; (dbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    dbe2:	9b01      	ldr	r3, [sp, #4]
    dbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe8:	1c5a      	adds	r2, r3, #1
    dbea:	4904      	ldr	r1, [pc, #16]	; (dbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbf2:	bf00      	nop
    dbf4:	b003      	add	sp, #12
    dbf6:	f85d fb04 	ldr.w	pc, [sp], #4
    dbfa:	bf00      	nop
    dbfc:	1fff8fbc 	.word	0x1fff8fbc
    dc00:	1fff8fb8 	.word	0x1fff8fb8

0000dc04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    dc04:	b500      	push	{lr}
    dc06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc08:	f7f3 fb34 	bl	1274 <Sys_GetCoreID>
    dc0c:	4603      	mov	r3, r0
    dc0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    dc10:	4a0d      	ldr	r2, [pc, #52]	; (dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    dc12:	9b01      	ldr	r3, [sp, #4]
    dc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc18:	1e5a      	subs	r2, r3, #1
    dc1a:	490b      	ldr	r1, [pc, #44]	; (dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    dc1c:	9b01      	ldr	r3, [sp, #4]
    dc1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    dc22:	4a0a      	ldr	r2, [pc, #40]	; (dc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc2a:	f003 0301 	and.w	r3, r3, #1
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d106      	bne.n	dc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    dc32:	4a05      	ldr	r2, [pc, #20]	; (dc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d100      	bne.n	dc40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc40:	bf00      	nop
    dc42:	b003      	add	sp, #12
    dc44:	f85d fb04 	ldr.w	pc, [sp], #4
    dc48:	1fff8fbc 	.word	0x1fff8fbc
    dc4c:	1fff8fb8 	.word	0x1fff8fb8

0000dc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    dc50:	b500      	push	{lr}
    dc52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc54:	f7f3 fb0e 	bl	1274 <Sys_GetCoreID>
    dc58:	4603      	mov	r3, r0
    dc5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    dc5c:	4a10      	ldr	r2, [pc, #64]	; (dca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    dc5e:	9b01      	ldr	r3, [sp, #4]
    dc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc64:	2b00      	cmp	r3, #0
    dc66:	d10d      	bne.n	dc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc68:	f7f3 fa22 	bl	10b0 <Adc_schm_read_msr>
    dc6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc6e:	9b00      	ldr	r3, [sp, #0]
    dc70:	f003 0301 	and.w	r3, r3, #1
    dc74:	2b00      	cmp	r3, #0
    dc76:	d100      	bne.n	dc7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    dc7a:	490a      	ldr	r1, [pc, #40]	; (dca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    dc7c:	9b01      	ldr	r3, [sp, #4]
    dc7e:	9a00      	ldr	r2, [sp, #0]
    dc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    dc84:	4a06      	ldr	r2, [pc, #24]	; (dca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    dc86:	9b01      	ldr	r3, [sp, #4]
    dc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc8c:	1c5a      	adds	r2, r3, #1
    dc8e:	4904      	ldr	r1, [pc, #16]	; (dca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc96:	bf00      	nop
    dc98:	b003      	add	sp, #12
    dc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    dc9e:	bf00      	nop
    dca0:	1fff8fc4 	.word	0x1fff8fc4
    dca4:	1fff8fc0 	.word	0x1fff8fc0

0000dca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    dca8:	b500      	push	{lr}
    dcaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcac:	f7f3 fae2 	bl	1274 <Sys_GetCoreID>
    dcb0:	4603      	mov	r3, r0
    dcb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    dcb4:	4a0d      	ldr	r2, [pc, #52]	; (dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    dcb6:	9b01      	ldr	r3, [sp, #4]
    dcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcbc:	1e5a      	subs	r2, r3, #1
    dcbe:	490b      	ldr	r1, [pc, #44]	; (dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    dcc0:	9b01      	ldr	r3, [sp, #4]
    dcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    dcc6:	4a0a      	ldr	r2, [pc, #40]	; (dcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcce:	f003 0301 	and.w	r3, r3, #1
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d106      	bne.n	dce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    dcd6:	4a05      	ldr	r2, [pc, #20]	; (dcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcde:	2b00      	cmp	r3, #0
    dce0:	d100      	bne.n	dce4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dce4:	bf00      	nop
    dce6:	b003      	add	sp, #12
    dce8:	f85d fb04 	ldr.w	pc, [sp], #4
    dcec:	1fff8fc4 	.word	0x1fff8fc4
    dcf0:	1fff8fc0 	.word	0x1fff8fc0

0000dcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    dcf4:	b500      	push	{lr}
    dcf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcf8:	f7f3 fabc 	bl	1274 <Sys_GetCoreID>
    dcfc:	4603      	mov	r3, r0
    dcfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    dd00:	4a10      	ldr	r2, [pc, #64]	; (dd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d10d      	bne.n	dd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd0c:	f7f3 f9d0 	bl	10b0 <Adc_schm_read_msr>
    dd10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd12:	9b00      	ldr	r3, [sp, #0]
    dd14:	f003 0301 	and.w	r3, r3, #1
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d100      	bne.n	dd1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    dd1e:	490a      	ldr	r1, [pc, #40]	; (dd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    dd20:	9b01      	ldr	r3, [sp, #4]
    dd22:	9a00      	ldr	r2, [sp, #0]
    dd24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    dd28:	4a06      	ldr	r2, [pc, #24]	; (dd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    dd2a:	9b01      	ldr	r3, [sp, #4]
    dd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd30:	1c5a      	adds	r2, r3, #1
    dd32:	4904      	ldr	r1, [pc, #16]	; (dd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd3a:	bf00      	nop
    dd3c:	b003      	add	sp, #12
    dd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    dd42:	bf00      	nop
    dd44:	1fff8fcc 	.word	0x1fff8fcc
    dd48:	1fff8fc8 	.word	0x1fff8fc8

0000dd4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    dd4c:	b500      	push	{lr}
    dd4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd50:	f7f3 fa90 	bl	1274 <Sys_GetCoreID>
    dd54:	4603      	mov	r3, r0
    dd56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    dd58:	4a0d      	ldr	r2, [pc, #52]	; (dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    dd5a:	9b01      	ldr	r3, [sp, #4]
    dd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd60:	1e5a      	subs	r2, r3, #1
    dd62:	490b      	ldr	r1, [pc, #44]	; (dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    dd64:	9b01      	ldr	r3, [sp, #4]
    dd66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    dd6a:	4a0a      	ldr	r2, [pc, #40]	; (dd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    dd6c:	9b01      	ldr	r3, [sp, #4]
    dd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd72:	f003 0301 	and.w	r3, r3, #1
    dd76:	2b00      	cmp	r3, #0
    dd78:	d106      	bne.n	dd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    dd7a:	4a05      	ldr	r2, [pc, #20]	; (dd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    dd7c:	9b01      	ldr	r3, [sp, #4]
    dd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd82:	2b00      	cmp	r3, #0
    dd84:	d100      	bne.n	dd88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd88:	bf00      	nop
    dd8a:	b003      	add	sp, #12
    dd8c:	f85d fb04 	ldr.w	pc, [sp], #4
    dd90:	1fff8fcc 	.word	0x1fff8fcc
    dd94:	1fff8fc8 	.word	0x1fff8fc8

0000dd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    dd98:	b500      	push	{lr}
    dd9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd9c:	f7f3 fa6a 	bl	1274 <Sys_GetCoreID>
    dda0:	4603      	mov	r3, r0
    dda2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    dda4:	4a10      	ldr	r2, [pc, #64]	; (dde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    dda6:	9b01      	ldr	r3, [sp, #4]
    dda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddac:	2b00      	cmp	r3, #0
    ddae:	d10d      	bne.n	ddcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddb0:	f7f3 f97e 	bl	10b0 <Adc_schm_read_msr>
    ddb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddb6:	9b00      	ldr	r3, [sp, #0]
    ddb8:	f003 0301 	and.w	r3, r3, #1
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d100      	bne.n	ddc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    ddc2:	490a      	ldr	r1, [pc, #40]	; (ddec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    ddc4:	9b01      	ldr	r3, [sp, #4]
    ddc6:	9a00      	ldr	r2, [sp, #0]
    ddc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    ddcc:	4a06      	ldr	r2, [pc, #24]	; (dde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    ddce:	9b01      	ldr	r3, [sp, #4]
    ddd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddd4:	1c5a      	adds	r2, r3, #1
    ddd6:	4904      	ldr	r1, [pc, #16]	; (dde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddde:	bf00      	nop
    dde0:	b003      	add	sp, #12
    dde2:	f85d fb04 	ldr.w	pc, [sp], #4
    dde6:	bf00      	nop
    dde8:	1fff8fd4 	.word	0x1fff8fd4
    ddec:	1fff8fd0 	.word	0x1fff8fd0

0000ddf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    ddf0:	b500      	push	{lr}
    ddf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddf4:	f7f3 fa3e 	bl	1274 <Sys_GetCoreID>
    ddf8:	4603      	mov	r3, r0
    ddfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    ddfc:	4a0d      	ldr	r2, [pc, #52]	; (de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    ddfe:	9b01      	ldr	r3, [sp, #4]
    de00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de04:	1e5a      	subs	r2, r3, #1
    de06:	490b      	ldr	r1, [pc, #44]	; (de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    de08:	9b01      	ldr	r3, [sp, #4]
    de0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    de0e:	4a0a      	ldr	r2, [pc, #40]	; (de38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    de10:	9b01      	ldr	r3, [sp, #4]
    de12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de16:	f003 0301 	and.w	r3, r3, #1
    de1a:	2b00      	cmp	r3, #0
    de1c:	d106      	bne.n	de2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    de1e:	4a05      	ldr	r2, [pc, #20]	; (de34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de26:	2b00      	cmp	r3, #0
    de28:	d100      	bne.n	de2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de2c:	bf00      	nop
    de2e:	b003      	add	sp, #12
    de30:	f85d fb04 	ldr.w	pc, [sp], #4
    de34:	1fff8fd4 	.word	0x1fff8fd4
    de38:	1fff8fd0 	.word	0x1fff8fd0

0000de3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    de3c:	b500      	push	{lr}
    de3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de40:	f7f3 fa18 	bl	1274 <Sys_GetCoreID>
    de44:	4603      	mov	r3, r0
    de46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    de48:	4a10      	ldr	r2, [pc, #64]	; (de8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    de4a:	9b01      	ldr	r3, [sp, #4]
    de4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de50:	2b00      	cmp	r3, #0
    de52:	d10d      	bne.n	de70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de54:	f7f3 f92c 	bl	10b0 <Adc_schm_read_msr>
    de58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de5a:	9b00      	ldr	r3, [sp, #0]
    de5c:	f003 0301 	and.w	r3, r3, #1
    de60:	2b00      	cmp	r3, #0
    de62:	d100      	bne.n	de66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    de66:	490a      	ldr	r1, [pc, #40]	; (de90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    de68:	9b01      	ldr	r3, [sp, #4]
    de6a:	9a00      	ldr	r2, [sp, #0]
    de6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    de70:	4a06      	ldr	r2, [pc, #24]	; (de8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    de72:	9b01      	ldr	r3, [sp, #4]
    de74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de78:	1c5a      	adds	r2, r3, #1
    de7a:	4904      	ldr	r1, [pc, #16]	; (de8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    de7c:	9b01      	ldr	r3, [sp, #4]
    de7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de82:	bf00      	nop
    de84:	b003      	add	sp, #12
    de86:	f85d fb04 	ldr.w	pc, [sp], #4
    de8a:	bf00      	nop
    de8c:	1fff8fdc 	.word	0x1fff8fdc
    de90:	1fff8fd8 	.word	0x1fff8fd8

0000de94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    de94:	b500      	push	{lr}
    de96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de98:	f7f3 f9ec 	bl	1274 <Sys_GetCoreID>
    de9c:	4603      	mov	r3, r0
    de9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    dea0:	4a0d      	ldr	r2, [pc, #52]	; (ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    dea2:	9b01      	ldr	r3, [sp, #4]
    dea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dea8:	1e5a      	subs	r2, r3, #1
    deaa:	490b      	ldr	r1, [pc, #44]	; (ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    deac:	9b01      	ldr	r3, [sp, #4]
    deae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    deb2:	4a0a      	ldr	r2, [pc, #40]	; (dedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deba:	f003 0301 	and.w	r3, r3, #1
    debe:	2b00      	cmp	r3, #0
    dec0:	d106      	bne.n	ded0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    dec2:	4a05      	ldr	r2, [pc, #20]	; (ded8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    dec4:	9b01      	ldr	r3, [sp, #4]
    dec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deca:	2b00      	cmp	r3, #0
    decc:	d100      	bne.n	ded0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ded0:	bf00      	nop
    ded2:	b003      	add	sp, #12
    ded4:	f85d fb04 	ldr.w	pc, [sp], #4
    ded8:	1fff8fdc 	.word	0x1fff8fdc
    dedc:	1fff8fd8 	.word	0x1fff8fd8

0000dee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    dee0:	b500      	push	{lr}
    dee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dee4:	f7f3 f9c6 	bl	1274 <Sys_GetCoreID>
    dee8:	4603      	mov	r3, r0
    deea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    deec:	4a10      	ldr	r2, [pc, #64]	; (df30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    deee:	9b01      	ldr	r3, [sp, #4]
    def0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    def4:	2b00      	cmp	r3, #0
    def6:	d10d      	bne.n	df14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    def8:	f7f3 f8da 	bl	10b0 <Adc_schm_read_msr>
    defc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    defe:	9b00      	ldr	r3, [sp, #0]
    df00:	f003 0301 	and.w	r3, r3, #1
    df04:	2b00      	cmp	r3, #0
    df06:	d100      	bne.n	df0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    df0a:	490a      	ldr	r1, [pc, #40]	; (df34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    df0c:	9b01      	ldr	r3, [sp, #4]
    df0e:	9a00      	ldr	r2, [sp, #0]
    df10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    df14:	4a06      	ldr	r2, [pc, #24]	; (df30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    df16:	9b01      	ldr	r3, [sp, #4]
    df18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df1c:	1c5a      	adds	r2, r3, #1
    df1e:	4904      	ldr	r1, [pc, #16]	; (df30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    df20:	9b01      	ldr	r3, [sp, #4]
    df22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df26:	bf00      	nop
    df28:	b003      	add	sp, #12
    df2a:	f85d fb04 	ldr.w	pc, [sp], #4
    df2e:	bf00      	nop
    df30:	1fff8fe4 	.word	0x1fff8fe4
    df34:	1fff8fe0 	.word	0x1fff8fe0

0000df38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    df38:	b500      	push	{lr}
    df3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df3c:	f7f3 f99a 	bl	1274 <Sys_GetCoreID>
    df40:	4603      	mov	r3, r0
    df42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    df44:	4a0d      	ldr	r2, [pc, #52]	; (df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    df46:	9b01      	ldr	r3, [sp, #4]
    df48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df4c:	1e5a      	subs	r2, r3, #1
    df4e:	490b      	ldr	r1, [pc, #44]	; (df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    df50:	9b01      	ldr	r3, [sp, #4]
    df52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    df56:	4a0a      	ldr	r2, [pc, #40]	; (df80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    df58:	9b01      	ldr	r3, [sp, #4]
    df5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df5e:	f003 0301 	and.w	r3, r3, #1
    df62:	2b00      	cmp	r3, #0
    df64:	d106      	bne.n	df74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    df66:	4a05      	ldr	r2, [pc, #20]	; (df7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    df68:	9b01      	ldr	r3, [sp, #4]
    df6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df6e:	2b00      	cmp	r3, #0
    df70:	d100      	bne.n	df74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df74:	bf00      	nop
    df76:	b003      	add	sp, #12
    df78:	f85d fb04 	ldr.w	pc, [sp], #4
    df7c:	1fff8fe4 	.word	0x1fff8fe4
    df80:	1fff8fe0 	.word	0x1fff8fe0

0000df84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    df84:	b500      	push	{lr}
    df86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df88:	f7f3 f974 	bl	1274 <Sys_GetCoreID>
    df8c:	4603      	mov	r3, r0
    df8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    df90:	4a10      	ldr	r2, [pc, #64]	; (dfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    df92:	9b01      	ldr	r3, [sp, #4]
    df94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df98:	2b00      	cmp	r3, #0
    df9a:	d10d      	bne.n	dfb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df9c:	f7f3 f888 	bl	10b0 <Adc_schm_read_msr>
    dfa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfa2:	9b00      	ldr	r3, [sp, #0]
    dfa4:	f003 0301 	and.w	r3, r3, #1
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d100      	bne.n	dfae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    dfae:	490a      	ldr	r1, [pc, #40]	; (dfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    dfb0:	9b01      	ldr	r3, [sp, #4]
    dfb2:	9a00      	ldr	r2, [sp, #0]
    dfb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    dfb8:	4a06      	ldr	r2, [pc, #24]	; (dfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    dfba:	9b01      	ldr	r3, [sp, #4]
    dfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfc0:	1c5a      	adds	r2, r3, #1
    dfc2:	4904      	ldr	r1, [pc, #16]	; (dfd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    dfc4:	9b01      	ldr	r3, [sp, #4]
    dfc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfca:	bf00      	nop
    dfcc:	b003      	add	sp, #12
    dfce:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd2:	bf00      	nop
    dfd4:	1fff8fec 	.word	0x1fff8fec
    dfd8:	1fff8fe8 	.word	0x1fff8fe8

0000dfdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    dfdc:	b500      	push	{lr}
    dfde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe0:	f7f3 f948 	bl	1274 <Sys_GetCoreID>
    dfe4:	4603      	mov	r3, r0
    dfe6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    dfe8:	4a0d      	ldr	r2, [pc, #52]	; (e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    dfea:	9b01      	ldr	r3, [sp, #4]
    dfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff0:	1e5a      	subs	r2, r3, #1
    dff2:	490b      	ldr	r1, [pc, #44]	; (e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    dff4:	9b01      	ldr	r3, [sp, #4]
    dff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    dffa:	4a0a      	ldr	r2, [pc, #40]	; (e024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e002:	f003 0301 	and.w	r3, r3, #1
    e006:	2b00      	cmp	r3, #0
    e008:	d106      	bne.n	e018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    e00a:	4a05      	ldr	r2, [pc, #20]	; (e020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e012:	2b00      	cmp	r3, #0
    e014:	d100      	bne.n	e018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e018:	bf00      	nop
    e01a:	b003      	add	sp, #12
    e01c:	f85d fb04 	ldr.w	pc, [sp], #4
    e020:	1fff8fec 	.word	0x1fff8fec
    e024:	1fff8fe8 	.word	0x1fff8fe8

0000e028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    e028:	b500      	push	{lr}
    e02a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e02c:	f7f3 f922 	bl	1274 <Sys_GetCoreID>
    e030:	4603      	mov	r3, r0
    e032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    e034:	4a10      	ldr	r2, [pc, #64]	; (e078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    e036:	9b01      	ldr	r3, [sp, #4]
    e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e03c:	2b00      	cmp	r3, #0
    e03e:	d10d      	bne.n	e05c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e040:	f7f3 f836 	bl	10b0 <Adc_schm_read_msr>
    e044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e046:	9b00      	ldr	r3, [sp, #0]
    e048:	f003 0301 	and.w	r3, r3, #1
    e04c:	2b00      	cmp	r3, #0
    e04e:	d100      	bne.n	e052 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    e052:	490a      	ldr	r1, [pc, #40]	; (e07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    e054:	9b01      	ldr	r3, [sp, #4]
    e056:	9a00      	ldr	r2, [sp, #0]
    e058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    e05c:	4a06      	ldr	r2, [pc, #24]	; (e078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    e05e:	9b01      	ldr	r3, [sp, #4]
    e060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e064:	1c5a      	adds	r2, r3, #1
    e066:	4904      	ldr	r1, [pc, #16]	; (e078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    e068:	9b01      	ldr	r3, [sp, #4]
    e06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e06e:	bf00      	nop
    e070:	b003      	add	sp, #12
    e072:	f85d fb04 	ldr.w	pc, [sp], #4
    e076:	bf00      	nop
    e078:	1fff8ff4 	.word	0x1fff8ff4
    e07c:	1fff8ff0 	.word	0x1fff8ff0

0000e080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    e080:	b500      	push	{lr}
    e082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e084:	f7f3 f8f6 	bl	1274 <Sys_GetCoreID>
    e088:	4603      	mov	r3, r0
    e08a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    e08c:	4a0d      	ldr	r2, [pc, #52]	; (e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    e08e:	9b01      	ldr	r3, [sp, #4]
    e090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e094:	1e5a      	subs	r2, r3, #1
    e096:	490b      	ldr	r1, [pc, #44]	; (e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    e098:	9b01      	ldr	r3, [sp, #4]
    e09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    e09e:	4a0a      	ldr	r2, [pc, #40]	; (e0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a6:	f003 0301 	and.w	r3, r3, #1
    e0aa:	2b00      	cmp	r3, #0
    e0ac:	d106      	bne.n	e0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    e0ae:	4a05      	ldr	r2, [pc, #20]	; (e0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d100      	bne.n	e0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0bc:	bf00      	nop
    e0be:	b003      	add	sp, #12
    e0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e0c4:	1fff8ff4 	.word	0x1fff8ff4
    e0c8:	1fff8ff0 	.word	0x1fff8ff0

0000e0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    e0cc:	b500      	push	{lr}
    e0ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0d0:	f7f3 f8d0 	bl	1274 <Sys_GetCoreID>
    e0d4:	4603      	mov	r3, r0
    e0d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    e0d8:	4a10      	ldr	r2, [pc, #64]	; (e11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    e0da:	9b01      	ldr	r3, [sp, #4]
    e0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d10d      	bne.n	e100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0e4:	f7f2 ffe4 	bl	10b0 <Adc_schm_read_msr>
    e0e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0ea:	9b00      	ldr	r3, [sp, #0]
    e0ec:	f003 0301 	and.w	r3, r3, #1
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d100      	bne.n	e0f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    e0f6:	490a      	ldr	r1, [pc, #40]	; (e120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    e0f8:	9b01      	ldr	r3, [sp, #4]
    e0fa:	9a00      	ldr	r2, [sp, #0]
    e0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    e100:	4a06      	ldr	r2, [pc, #24]	; (e11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    e102:	9b01      	ldr	r3, [sp, #4]
    e104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e108:	1c5a      	adds	r2, r3, #1
    e10a:	4904      	ldr	r1, [pc, #16]	; (e11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    e10c:	9b01      	ldr	r3, [sp, #4]
    e10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e112:	bf00      	nop
    e114:	b003      	add	sp, #12
    e116:	f85d fb04 	ldr.w	pc, [sp], #4
    e11a:	bf00      	nop
    e11c:	1fff8ffc 	.word	0x1fff8ffc
    e120:	1fff8ff8 	.word	0x1fff8ff8

0000e124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    e124:	b500      	push	{lr}
    e126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e128:	f7f3 f8a4 	bl	1274 <Sys_GetCoreID>
    e12c:	4603      	mov	r3, r0
    e12e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    e130:	4a0d      	ldr	r2, [pc, #52]	; (e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    e132:	9b01      	ldr	r3, [sp, #4]
    e134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e138:	1e5a      	subs	r2, r3, #1
    e13a:	490b      	ldr	r1, [pc, #44]	; (e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    e13c:	9b01      	ldr	r3, [sp, #4]
    e13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    e142:	4a0a      	ldr	r2, [pc, #40]	; (e16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    e144:	9b01      	ldr	r3, [sp, #4]
    e146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e14a:	f003 0301 	and.w	r3, r3, #1
    e14e:	2b00      	cmp	r3, #0
    e150:	d106      	bne.n	e160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    e152:	4a05      	ldr	r2, [pc, #20]	; (e168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e15a:	2b00      	cmp	r3, #0
    e15c:	d100      	bne.n	e160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e15e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e160:	bf00      	nop
    e162:	b003      	add	sp, #12
    e164:	f85d fb04 	ldr.w	pc, [sp], #4
    e168:	1fff8ffc 	.word	0x1fff8ffc
    e16c:	1fff8ff8 	.word	0x1fff8ff8

0000e170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    e170:	b500      	push	{lr}
    e172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e174:	f7f3 f87e 	bl	1274 <Sys_GetCoreID>
    e178:	4603      	mov	r3, r0
    e17a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    e17c:	4a10      	ldr	r2, [pc, #64]	; (e1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    e17e:	9b01      	ldr	r3, [sp, #4]
    e180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e184:	2b00      	cmp	r3, #0
    e186:	d10d      	bne.n	e1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e188:	f7f2 ff92 	bl	10b0 <Adc_schm_read_msr>
    e18c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e18e:	9b00      	ldr	r3, [sp, #0]
    e190:	f003 0301 	and.w	r3, r3, #1
    e194:	2b00      	cmp	r3, #0
    e196:	d100      	bne.n	e19a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    e19a:	490a      	ldr	r1, [pc, #40]	; (e1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    e19c:	9b01      	ldr	r3, [sp, #4]
    e19e:	9a00      	ldr	r2, [sp, #0]
    e1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    e1a4:	4a06      	ldr	r2, [pc, #24]	; (e1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    e1a6:	9b01      	ldr	r3, [sp, #4]
    e1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ac:	1c5a      	adds	r2, r3, #1
    e1ae:	4904      	ldr	r1, [pc, #16]	; (e1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1b6:	bf00      	nop
    e1b8:	b003      	add	sp, #12
    e1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e1be:	bf00      	nop
    e1c0:	1fff9004 	.word	0x1fff9004
    e1c4:	1fff9000 	.word	0x1fff9000

0000e1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    e1c8:	b500      	push	{lr}
    e1ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1cc:	f7f3 f852 	bl	1274 <Sys_GetCoreID>
    e1d0:	4603      	mov	r3, r0
    e1d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    e1d4:	4a0d      	ldr	r2, [pc, #52]	; (e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    e1d6:	9b01      	ldr	r3, [sp, #4]
    e1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1dc:	1e5a      	subs	r2, r3, #1
    e1de:	490b      	ldr	r1, [pc, #44]	; (e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    e1e0:	9b01      	ldr	r3, [sp, #4]
    e1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    e1e6:	4a0a      	ldr	r2, [pc, #40]	; (e210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ee:	f003 0301 	and.w	r3, r3, #1
    e1f2:	2b00      	cmp	r3, #0
    e1f4:	d106      	bne.n	e204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    e1f6:	4a05      	ldr	r2, [pc, #20]	; (e20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1fe:	2b00      	cmp	r3, #0
    e200:	d100      	bne.n	e204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e204:	bf00      	nop
    e206:	b003      	add	sp, #12
    e208:	f85d fb04 	ldr.w	pc, [sp], #4
    e20c:	1fff9004 	.word	0x1fff9004
    e210:	1fff9000 	.word	0x1fff9000

0000e214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    e214:	b500      	push	{lr}
    e216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e218:	f7f3 f82c 	bl	1274 <Sys_GetCoreID>
    e21c:	4603      	mov	r3, r0
    e21e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    e220:	4a10      	ldr	r2, [pc, #64]	; (e264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    e222:	9b01      	ldr	r3, [sp, #4]
    e224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e228:	2b00      	cmp	r3, #0
    e22a:	d10d      	bne.n	e248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e22c:	f7f2 ff40 	bl	10b0 <Adc_schm_read_msr>
    e230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e232:	9b00      	ldr	r3, [sp, #0]
    e234:	f003 0301 	and.w	r3, r3, #1
    e238:	2b00      	cmp	r3, #0
    e23a:	d100      	bne.n	e23e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e23c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    e23e:	490a      	ldr	r1, [pc, #40]	; (e268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    e240:	9b01      	ldr	r3, [sp, #4]
    e242:	9a00      	ldr	r2, [sp, #0]
    e244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    e248:	4a06      	ldr	r2, [pc, #24]	; (e264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    e24a:	9b01      	ldr	r3, [sp, #4]
    e24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e250:	1c5a      	adds	r2, r3, #1
    e252:	4904      	ldr	r1, [pc, #16]	; (e264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e25a:	bf00      	nop
    e25c:	b003      	add	sp, #12
    e25e:	f85d fb04 	ldr.w	pc, [sp], #4
    e262:	bf00      	nop
    e264:	1fff900c 	.word	0x1fff900c
    e268:	1fff9008 	.word	0x1fff9008

0000e26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    e26c:	b500      	push	{lr}
    e26e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e270:	f7f3 f800 	bl	1274 <Sys_GetCoreID>
    e274:	4603      	mov	r3, r0
    e276:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    e278:	4a0d      	ldr	r2, [pc, #52]	; (e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    e27a:	9b01      	ldr	r3, [sp, #4]
    e27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e280:	1e5a      	subs	r2, r3, #1
    e282:	490b      	ldr	r1, [pc, #44]	; (e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    e284:	9b01      	ldr	r3, [sp, #4]
    e286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    e28a:	4a0a      	ldr	r2, [pc, #40]	; (e2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    e28c:	9b01      	ldr	r3, [sp, #4]
    e28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e292:	f003 0301 	and.w	r3, r3, #1
    e296:	2b00      	cmp	r3, #0
    e298:	d106      	bne.n	e2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    e29a:	4a05      	ldr	r2, [pc, #20]	; (e2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d100      	bne.n	e2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2a8:	bf00      	nop
    e2aa:	b003      	add	sp, #12
    e2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e2b0:	1fff900c 	.word	0x1fff900c
    e2b4:	1fff9008 	.word	0x1fff9008

0000e2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    e2b8:	b500      	push	{lr}
    e2ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2bc:	f7f2 ffda 	bl	1274 <Sys_GetCoreID>
    e2c0:	4603      	mov	r3, r0
    e2c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    e2c4:	4a10      	ldr	r2, [pc, #64]	; (e308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    e2c6:	9b01      	ldr	r3, [sp, #4]
    e2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d10d      	bne.n	e2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2d0:	f7f2 feee 	bl	10b0 <Adc_schm_read_msr>
    e2d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2d6:	9b00      	ldr	r3, [sp, #0]
    e2d8:	f003 0301 	and.w	r3, r3, #1
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d100      	bne.n	e2e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    e2e2:	490a      	ldr	r1, [pc, #40]	; (e30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    e2e4:	9b01      	ldr	r3, [sp, #4]
    e2e6:	9a00      	ldr	r2, [sp, #0]
    e2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    e2ec:	4a06      	ldr	r2, [pc, #24]	; (e308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    e2ee:	9b01      	ldr	r3, [sp, #4]
    e2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2f4:	1c5a      	adds	r2, r3, #1
    e2f6:	4904      	ldr	r1, [pc, #16]	; (e308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    e2f8:	9b01      	ldr	r3, [sp, #4]
    e2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2fe:	bf00      	nop
    e300:	b003      	add	sp, #12
    e302:	f85d fb04 	ldr.w	pc, [sp], #4
    e306:	bf00      	nop
    e308:	1fff9014 	.word	0x1fff9014
    e30c:	1fff9010 	.word	0x1fff9010

0000e310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    e310:	b500      	push	{lr}
    e312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e314:	f7f2 ffae 	bl	1274 <Sys_GetCoreID>
    e318:	4603      	mov	r3, r0
    e31a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    e31c:	4a0d      	ldr	r2, [pc, #52]	; (e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    e31e:	9b01      	ldr	r3, [sp, #4]
    e320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e324:	1e5a      	subs	r2, r3, #1
    e326:	490b      	ldr	r1, [pc, #44]	; (e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    e328:	9b01      	ldr	r3, [sp, #4]
    e32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    e32e:	4a0a      	ldr	r2, [pc, #40]	; (e358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    e330:	9b01      	ldr	r3, [sp, #4]
    e332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e336:	f003 0301 	and.w	r3, r3, #1
    e33a:	2b00      	cmp	r3, #0
    e33c:	d106      	bne.n	e34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    e33e:	4a05      	ldr	r2, [pc, #20]	; (e354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    e340:	9b01      	ldr	r3, [sp, #4]
    e342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e346:	2b00      	cmp	r3, #0
    e348:	d100      	bne.n	e34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e34a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e34c:	bf00      	nop
    e34e:	b003      	add	sp, #12
    e350:	f85d fb04 	ldr.w	pc, [sp], #4
    e354:	1fff9014 	.word	0x1fff9014
    e358:	1fff9010 	.word	0x1fff9010

0000e35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    e35c:	b500      	push	{lr}
    e35e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e360:	f7f2 ff88 	bl	1274 <Sys_GetCoreID>
    e364:	4603      	mov	r3, r0
    e366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    e368:	4a10      	ldr	r2, [pc, #64]	; (e3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    e36a:	9b01      	ldr	r3, [sp, #4]
    e36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e370:	2b00      	cmp	r3, #0
    e372:	d10d      	bne.n	e390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e374:	f7f2 fe9c 	bl	10b0 <Adc_schm_read_msr>
    e378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e37a:	9b00      	ldr	r3, [sp, #0]
    e37c:	f003 0301 	and.w	r3, r3, #1
    e380:	2b00      	cmp	r3, #0
    e382:	d100      	bne.n	e386 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    e386:	490a      	ldr	r1, [pc, #40]	; (e3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    e388:	9b01      	ldr	r3, [sp, #4]
    e38a:	9a00      	ldr	r2, [sp, #0]
    e38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    e390:	4a06      	ldr	r2, [pc, #24]	; (e3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    e392:	9b01      	ldr	r3, [sp, #4]
    e394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e398:	1c5a      	adds	r2, r3, #1
    e39a:	4904      	ldr	r1, [pc, #16]	; (e3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    e39c:	9b01      	ldr	r3, [sp, #4]
    e39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3a2:	bf00      	nop
    e3a4:	b003      	add	sp, #12
    e3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e3aa:	bf00      	nop
    e3ac:	1fff901c 	.word	0x1fff901c
    e3b0:	1fff9018 	.word	0x1fff9018

0000e3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    e3b4:	b500      	push	{lr}
    e3b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3b8:	f7f2 ff5c 	bl	1274 <Sys_GetCoreID>
    e3bc:	4603      	mov	r3, r0
    e3be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    e3c0:	4a0d      	ldr	r2, [pc, #52]	; (e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e3c2:	9b01      	ldr	r3, [sp, #4]
    e3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3c8:	1e5a      	subs	r2, r3, #1
    e3ca:	490b      	ldr	r1, [pc, #44]	; (e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e3cc:	9b01      	ldr	r3, [sp, #4]
    e3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    e3d2:	4a0a      	ldr	r2, [pc, #40]	; (e3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    e3d4:	9b01      	ldr	r3, [sp, #4]
    e3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3da:	f003 0301 	and.w	r3, r3, #1
    e3de:	2b00      	cmp	r3, #0
    e3e0:	d106      	bne.n	e3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    e3e2:	4a05      	ldr	r2, [pc, #20]	; (e3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    e3e4:	9b01      	ldr	r3, [sp, #4]
    e3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d100      	bne.n	e3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3f0:	bf00      	nop
    e3f2:	b003      	add	sp, #12
    e3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e3f8:	1fff901c 	.word	0x1fff901c
    e3fc:	1fff9018 	.word	0x1fff9018

0000e400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    e400:	b500      	push	{lr}
    e402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e404:	f7f2 ff36 	bl	1274 <Sys_GetCoreID>
    e408:	4603      	mov	r3, r0
    e40a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    e40c:	4a10      	ldr	r2, [pc, #64]	; (e450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e40e:	9b01      	ldr	r3, [sp, #4]
    e410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e414:	2b00      	cmp	r3, #0
    e416:	d10d      	bne.n	e434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e418:	f7f2 fe4a 	bl	10b0 <Adc_schm_read_msr>
    e41c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e41e:	9b00      	ldr	r3, [sp, #0]
    e420:	f003 0301 	and.w	r3, r3, #1
    e424:	2b00      	cmp	r3, #0
    e426:	d100      	bne.n	e42a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    e42a:	490a      	ldr	r1, [pc, #40]	; (e454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    e42c:	9b01      	ldr	r3, [sp, #4]
    e42e:	9a00      	ldr	r2, [sp, #0]
    e430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    e434:	4a06      	ldr	r2, [pc, #24]	; (e450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e436:	9b01      	ldr	r3, [sp, #4]
    e438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e43c:	1c5a      	adds	r2, r3, #1
    e43e:	4904      	ldr	r1, [pc, #16]	; (e450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    e440:	9b01      	ldr	r3, [sp, #4]
    e442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e446:	bf00      	nop
    e448:	b003      	add	sp, #12
    e44a:	f85d fb04 	ldr.w	pc, [sp], #4
    e44e:	bf00      	nop
    e450:	1fff9024 	.word	0x1fff9024
    e454:	1fff9020 	.word	0x1fff9020

0000e458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    e458:	b500      	push	{lr}
    e45a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e45c:	f7f2 ff0a 	bl	1274 <Sys_GetCoreID>
    e460:	4603      	mov	r3, r0
    e462:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    e464:	4a0d      	ldr	r2, [pc, #52]	; (e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e466:	9b01      	ldr	r3, [sp, #4]
    e468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e46c:	1e5a      	subs	r2, r3, #1
    e46e:	490b      	ldr	r1, [pc, #44]	; (e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e470:	9b01      	ldr	r3, [sp, #4]
    e472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    e476:	4a0a      	ldr	r2, [pc, #40]	; (e4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    e478:	9b01      	ldr	r3, [sp, #4]
    e47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e47e:	f003 0301 	and.w	r3, r3, #1
    e482:	2b00      	cmp	r3, #0
    e484:	d106      	bne.n	e494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    e486:	4a05      	ldr	r2, [pc, #20]	; (e49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48e:	2b00      	cmp	r3, #0
    e490:	d100      	bne.n	e494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e494:	bf00      	nop
    e496:	b003      	add	sp, #12
    e498:	f85d fb04 	ldr.w	pc, [sp], #4
    e49c:	1fff9024 	.word	0x1fff9024
    e4a0:	1fff9020 	.word	0x1fff9020

0000e4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e4a4:	b500      	push	{lr}
    e4a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4a8:	f7f2 fee4 	bl	1274 <Sys_GetCoreID>
    e4ac:	4603      	mov	r3, r0
    e4ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    e4b0:	4a10      	ldr	r2, [pc, #64]	; (e4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e4b2:	9b01      	ldr	r3, [sp, #4]
    e4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4b8:	2b00      	cmp	r3, #0
    e4ba:	d10d      	bne.n	e4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4bc:	f7f2 fdf8 	bl	10b0 <Adc_schm_read_msr>
    e4c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4c2:	9b00      	ldr	r3, [sp, #0]
    e4c4:	f003 0301 	and.w	r3, r3, #1
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d100      	bne.n	e4ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    e4ce:	490a      	ldr	r1, [pc, #40]	; (e4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    e4d0:	9b01      	ldr	r3, [sp, #4]
    e4d2:	9a00      	ldr	r2, [sp, #0]
    e4d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    e4d8:	4a06      	ldr	r2, [pc, #24]	; (e4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e4da:	9b01      	ldr	r3, [sp, #4]
    e4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e0:	1c5a      	adds	r2, r3, #1
    e4e2:	4904      	ldr	r1, [pc, #16]	; (e4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    e4e4:	9b01      	ldr	r3, [sp, #4]
    e4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4ea:	bf00      	nop
    e4ec:	b003      	add	sp, #12
    e4ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e4f2:	bf00      	nop
    e4f4:	1fff902c 	.word	0x1fff902c
    e4f8:	1fff9028 	.word	0x1fff9028

0000e4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    e4fc:	b500      	push	{lr}
    e4fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e500:	f7f2 feb8 	bl	1274 <Sys_GetCoreID>
    e504:	4603      	mov	r3, r0
    e506:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    e508:	4a0d      	ldr	r2, [pc, #52]	; (e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e50a:	9b01      	ldr	r3, [sp, #4]
    e50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e510:	1e5a      	subs	r2, r3, #1
    e512:	490b      	ldr	r1, [pc, #44]	; (e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e514:	9b01      	ldr	r3, [sp, #4]
    e516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    e51a:	4a0a      	ldr	r2, [pc, #40]	; (e544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e522:	f003 0301 	and.w	r3, r3, #1
    e526:	2b00      	cmp	r3, #0
    e528:	d106      	bne.n	e538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    e52a:	4a05      	ldr	r2, [pc, #20]	; (e540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e532:	2b00      	cmp	r3, #0
    e534:	d100      	bne.n	e538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e538:	bf00      	nop
    e53a:	b003      	add	sp, #12
    e53c:	f85d fb04 	ldr.w	pc, [sp], #4
    e540:	1fff902c 	.word	0x1fff902c
    e544:	1fff9028 	.word	0x1fff9028

0000e548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e548:	b500      	push	{lr}
    e54a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e54c:	f7f2 fe92 	bl	1274 <Sys_GetCoreID>
    e550:	4603      	mov	r3, r0
    e552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    e554:	4a10      	ldr	r2, [pc, #64]	; (e598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e556:	9b01      	ldr	r3, [sp, #4]
    e558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e55c:	2b00      	cmp	r3, #0
    e55e:	d10d      	bne.n	e57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e560:	f7f2 fda6 	bl	10b0 <Adc_schm_read_msr>
    e564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e566:	9b00      	ldr	r3, [sp, #0]
    e568:	f003 0301 	and.w	r3, r3, #1
    e56c:	2b00      	cmp	r3, #0
    e56e:	d100      	bne.n	e572 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    e572:	490a      	ldr	r1, [pc, #40]	; (e59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    e574:	9b01      	ldr	r3, [sp, #4]
    e576:	9a00      	ldr	r2, [sp, #0]
    e578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    e57c:	4a06      	ldr	r2, [pc, #24]	; (e598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e57e:	9b01      	ldr	r3, [sp, #4]
    e580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e584:	1c5a      	adds	r2, r3, #1
    e586:	4904      	ldr	r1, [pc, #16]	; (e598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    e588:	9b01      	ldr	r3, [sp, #4]
    e58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e58e:	bf00      	nop
    e590:	b003      	add	sp, #12
    e592:	f85d fb04 	ldr.w	pc, [sp], #4
    e596:	bf00      	nop
    e598:	1fff9034 	.word	0x1fff9034
    e59c:	1fff9030 	.word	0x1fff9030

0000e5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    e5a0:	b500      	push	{lr}
    e5a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5a4:	f7f2 fe66 	bl	1274 <Sys_GetCoreID>
    e5a8:	4603      	mov	r3, r0
    e5aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    e5ac:	4a0d      	ldr	r2, [pc, #52]	; (e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e5ae:	9b01      	ldr	r3, [sp, #4]
    e5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5b4:	1e5a      	subs	r2, r3, #1
    e5b6:	490b      	ldr	r1, [pc, #44]	; (e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e5b8:	9b01      	ldr	r3, [sp, #4]
    e5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    e5be:	4a0a      	ldr	r2, [pc, #40]	; (e5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5c6:	f003 0301 	and.w	r3, r3, #1
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	d106      	bne.n	e5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    e5ce:	4a05      	ldr	r2, [pc, #20]	; (e5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e5d0:	9b01      	ldr	r3, [sp, #4]
    e5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d100      	bne.n	e5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5dc:	bf00      	nop
    e5de:	b003      	add	sp, #12
    e5e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e5e4:	1fff9034 	.word	0x1fff9034
    e5e8:	1fff9030 	.word	0x1fff9030

0000e5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e5ec:	b500      	push	{lr}
    e5ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5f0:	f7f2 fe40 	bl	1274 <Sys_GetCoreID>
    e5f4:	4603      	mov	r3, r0
    e5f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    e5f8:	4a10      	ldr	r2, [pc, #64]	; (e63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e5fa:	9b01      	ldr	r3, [sp, #4]
    e5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e600:	2b00      	cmp	r3, #0
    e602:	d10d      	bne.n	e620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e604:	f7f2 fd54 	bl	10b0 <Adc_schm_read_msr>
    e608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e60a:	9b00      	ldr	r3, [sp, #0]
    e60c:	f003 0301 	and.w	r3, r3, #1
    e610:	2b00      	cmp	r3, #0
    e612:	d100      	bne.n	e616 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    e616:	490a      	ldr	r1, [pc, #40]	; (e640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    e618:	9b01      	ldr	r3, [sp, #4]
    e61a:	9a00      	ldr	r2, [sp, #0]
    e61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    e620:	4a06      	ldr	r2, [pc, #24]	; (e63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e622:	9b01      	ldr	r3, [sp, #4]
    e624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e628:	1c5a      	adds	r2, r3, #1
    e62a:	4904      	ldr	r1, [pc, #16]	; (e63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e62c:	9b01      	ldr	r3, [sp, #4]
    e62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e632:	bf00      	nop
    e634:	b003      	add	sp, #12
    e636:	f85d fb04 	ldr.w	pc, [sp], #4
    e63a:	bf00      	nop
    e63c:	1fff903c 	.word	0x1fff903c
    e640:	1fff9038 	.word	0x1fff9038

0000e644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e644:	b500      	push	{lr}
    e646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e648:	f7f2 fe14 	bl	1274 <Sys_GetCoreID>
    e64c:	4603      	mov	r3, r0
    e64e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    e650:	4a0d      	ldr	r2, [pc, #52]	; (e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e652:	9b01      	ldr	r3, [sp, #4]
    e654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e658:	1e5a      	subs	r2, r3, #1
    e65a:	490b      	ldr	r1, [pc, #44]	; (e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e65c:	9b01      	ldr	r3, [sp, #4]
    e65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e662:	4a0a      	ldr	r2, [pc, #40]	; (e68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e66a:	f003 0301 	and.w	r3, r3, #1
    e66e:	2b00      	cmp	r3, #0
    e670:	d106      	bne.n	e680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e672:	4a05      	ldr	r2, [pc, #20]	; (e688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e67a:	2b00      	cmp	r3, #0
    e67c:	d100      	bne.n	e680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e67e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e680:	bf00      	nop
    e682:	b003      	add	sp, #12
    e684:	f85d fb04 	ldr.w	pc, [sp], #4
    e688:	1fff903c 	.word	0x1fff903c
    e68c:	1fff9038 	.word	0x1fff9038

0000e690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e690:	b500      	push	{lr}
    e692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e694:	f7f2 fdee 	bl	1274 <Sys_GetCoreID>
    e698:	4603      	mov	r3, r0
    e69a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e69c:	4a10      	ldr	r2, [pc, #64]	; (e6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e69e:	9b01      	ldr	r3, [sp, #4]
    e6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6a4:	2b00      	cmp	r3, #0
    e6a6:	d10d      	bne.n	e6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6a8:	f7f2 fd02 	bl	10b0 <Adc_schm_read_msr>
    e6ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6ae:	9b00      	ldr	r3, [sp, #0]
    e6b0:	f003 0301 	and.w	r3, r3, #1
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	d100      	bne.n	e6ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e6ba:	490a      	ldr	r1, [pc, #40]	; (e6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e6bc:	9b01      	ldr	r3, [sp, #4]
    e6be:	9a00      	ldr	r2, [sp, #0]
    e6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e6c4:	4a06      	ldr	r2, [pc, #24]	; (e6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e6c6:	9b01      	ldr	r3, [sp, #4]
    e6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6cc:	1c5a      	adds	r2, r3, #1
    e6ce:	4904      	ldr	r1, [pc, #16]	; (e6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e6d0:	9b01      	ldr	r3, [sp, #4]
    e6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6d6:	bf00      	nop
    e6d8:	b003      	add	sp, #12
    e6da:	f85d fb04 	ldr.w	pc, [sp], #4
    e6de:	bf00      	nop
    e6e0:	1fff9044 	.word	0x1fff9044
    e6e4:	1fff9040 	.word	0x1fff9040

0000e6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e6e8:	b500      	push	{lr}
    e6ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6ec:	f7f2 fdc2 	bl	1274 <Sys_GetCoreID>
    e6f0:	4603      	mov	r3, r0
    e6f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e6f4:	4a0d      	ldr	r2, [pc, #52]	; (e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e6f6:	9b01      	ldr	r3, [sp, #4]
    e6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6fc:	1e5a      	subs	r2, r3, #1
    e6fe:	490b      	ldr	r1, [pc, #44]	; (e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e700:	9b01      	ldr	r3, [sp, #4]
    e702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e706:	4a0a      	ldr	r2, [pc, #40]	; (e730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e70e:	f003 0301 	and.w	r3, r3, #1
    e712:	2b00      	cmp	r3, #0
    e714:	d106      	bne.n	e724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e716:	4a05      	ldr	r2, [pc, #20]	; (e72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e718:	9b01      	ldr	r3, [sp, #4]
    e71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e71e:	2b00      	cmp	r3, #0
    e720:	d100      	bne.n	e724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e724:	bf00      	nop
    e726:	b003      	add	sp, #12
    e728:	f85d fb04 	ldr.w	pc, [sp], #4
    e72c:	1fff9044 	.word	0x1fff9044
    e730:	1fff9040 	.word	0x1fff9040

0000e734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e734:	b500      	push	{lr}
    e736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e738:	f7f2 fd9c 	bl	1274 <Sys_GetCoreID>
    e73c:	4603      	mov	r3, r0
    e73e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e740:	4a10      	ldr	r2, [pc, #64]	; (e784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e748:	2b00      	cmp	r3, #0
    e74a:	d10d      	bne.n	e768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e74c:	f7f2 fcb0 	bl	10b0 <Adc_schm_read_msr>
    e750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e752:	9b00      	ldr	r3, [sp, #0]
    e754:	f003 0301 	and.w	r3, r3, #1
    e758:	2b00      	cmp	r3, #0
    e75a:	d100      	bne.n	e75e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e75c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e75e:	490a      	ldr	r1, [pc, #40]	; (e788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e760:	9b01      	ldr	r3, [sp, #4]
    e762:	9a00      	ldr	r2, [sp, #0]
    e764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e768:	4a06      	ldr	r2, [pc, #24]	; (e784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e770:	1c5a      	adds	r2, r3, #1
    e772:	4904      	ldr	r1, [pc, #16]	; (e784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e774:	9b01      	ldr	r3, [sp, #4]
    e776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e77a:	bf00      	nop
    e77c:	b003      	add	sp, #12
    e77e:	f85d fb04 	ldr.w	pc, [sp], #4
    e782:	bf00      	nop
    e784:	1fff904c 	.word	0x1fff904c
    e788:	1fff9048 	.word	0x1fff9048

0000e78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e78c:	b500      	push	{lr}
    e78e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e790:	f7f2 fd70 	bl	1274 <Sys_GetCoreID>
    e794:	4603      	mov	r3, r0
    e796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e798:	4a0d      	ldr	r2, [pc, #52]	; (e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e79a:	9b01      	ldr	r3, [sp, #4]
    e79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a0:	1e5a      	subs	r2, r3, #1
    e7a2:	490b      	ldr	r1, [pc, #44]	; (e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e7a4:	9b01      	ldr	r3, [sp, #4]
    e7a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e7aa:	4a0a      	ldr	r2, [pc, #40]	; (e7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e7ac:	9b01      	ldr	r3, [sp, #4]
    e7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b2:	f003 0301 	and.w	r3, r3, #1
    e7b6:	2b00      	cmp	r3, #0
    e7b8:	d106      	bne.n	e7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e7ba:	4a05      	ldr	r2, [pc, #20]	; (e7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e7bc:	9b01      	ldr	r3, [sp, #4]
    e7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d100      	bne.n	e7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7c8:	bf00      	nop
    e7ca:	b003      	add	sp, #12
    e7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e7d0:	1fff904c 	.word	0x1fff904c
    e7d4:	1fff9048 	.word	0x1fff9048

0000e7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e7d8:	b500      	push	{lr}
    e7da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7dc:	f7f2 fd4a 	bl	1274 <Sys_GetCoreID>
    e7e0:	4603      	mov	r3, r0
    e7e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e7e4:	4a10      	ldr	r2, [pc, #64]	; (e828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e7e6:	9b01      	ldr	r3, [sp, #4]
    e7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d10d      	bne.n	e80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7f0:	f7f2 fc5e 	bl	10b0 <Adc_schm_read_msr>
    e7f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7f6:	9b00      	ldr	r3, [sp, #0]
    e7f8:	f003 0301 	and.w	r3, r3, #1
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	d100      	bne.n	e802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e802:	490a      	ldr	r1, [pc, #40]	; (e82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e804:	9b01      	ldr	r3, [sp, #4]
    e806:	9a00      	ldr	r2, [sp, #0]
    e808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e80c:	4a06      	ldr	r2, [pc, #24]	; (e828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e80e:	9b01      	ldr	r3, [sp, #4]
    e810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e814:	1c5a      	adds	r2, r3, #1
    e816:	4904      	ldr	r1, [pc, #16]	; (e828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e818:	9b01      	ldr	r3, [sp, #4]
    e81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e81e:	bf00      	nop
    e820:	b003      	add	sp, #12
    e822:	f85d fb04 	ldr.w	pc, [sp], #4
    e826:	bf00      	nop
    e828:	1fff9054 	.word	0x1fff9054
    e82c:	1fff9050 	.word	0x1fff9050

0000e830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e830:	b500      	push	{lr}
    e832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e834:	f7f2 fd1e 	bl	1274 <Sys_GetCoreID>
    e838:	4603      	mov	r3, r0
    e83a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e83c:	4a0d      	ldr	r2, [pc, #52]	; (e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e83e:	9b01      	ldr	r3, [sp, #4]
    e840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e844:	1e5a      	subs	r2, r3, #1
    e846:	490b      	ldr	r1, [pc, #44]	; (e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e848:	9b01      	ldr	r3, [sp, #4]
    e84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e84e:	4a0a      	ldr	r2, [pc, #40]	; (e878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e850:	9b01      	ldr	r3, [sp, #4]
    e852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e856:	f003 0301 	and.w	r3, r3, #1
    e85a:	2b00      	cmp	r3, #0
    e85c:	d106      	bne.n	e86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e85e:	4a05      	ldr	r2, [pc, #20]	; (e874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e860:	9b01      	ldr	r3, [sp, #4]
    e862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e866:	2b00      	cmp	r3, #0
    e868:	d100      	bne.n	e86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e86a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e86c:	bf00      	nop
    e86e:	b003      	add	sp, #12
    e870:	f85d fb04 	ldr.w	pc, [sp], #4
    e874:	1fff9054 	.word	0x1fff9054
    e878:	1fff9050 	.word	0x1fff9050

0000e87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e87c:	b500      	push	{lr}
    e87e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e880:	f7f2 fcf8 	bl	1274 <Sys_GetCoreID>
    e884:	4603      	mov	r3, r0
    e886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e888:	4a10      	ldr	r2, [pc, #64]	; (e8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e88a:	9b01      	ldr	r3, [sp, #4]
    e88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e890:	2b00      	cmp	r3, #0
    e892:	d10d      	bne.n	e8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e894:	f7f2 fc0c 	bl	10b0 <Adc_schm_read_msr>
    e898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e89a:	9b00      	ldr	r3, [sp, #0]
    e89c:	f003 0301 	and.w	r3, r3, #1
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d100      	bne.n	e8a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e8a6:	490a      	ldr	r1, [pc, #40]	; (e8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e8a8:	9b01      	ldr	r3, [sp, #4]
    e8aa:	9a00      	ldr	r2, [sp, #0]
    e8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e8b0:	4a06      	ldr	r2, [pc, #24]	; (e8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e8b2:	9b01      	ldr	r3, [sp, #4]
    e8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b8:	1c5a      	adds	r2, r3, #1
    e8ba:	4904      	ldr	r1, [pc, #16]	; (e8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e8bc:	9b01      	ldr	r3, [sp, #4]
    e8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8c2:	bf00      	nop
    e8c4:	b003      	add	sp, #12
    e8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e8ca:	bf00      	nop
    e8cc:	1fff905c 	.word	0x1fff905c
    e8d0:	1fff9058 	.word	0x1fff9058

0000e8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e8d4:	b500      	push	{lr}
    e8d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8d8:	f7f2 fccc 	bl	1274 <Sys_GetCoreID>
    e8dc:	4603      	mov	r3, r0
    e8de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e8e0:	4a0d      	ldr	r2, [pc, #52]	; (e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e8e2:	9b01      	ldr	r3, [sp, #4]
    e8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8e8:	1e5a      	subs	r2, r3, #1
    e8ea:	490b      	ldr	r1, [pc, #44]	; (e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e8ec:	9b01      	ldr	r3, [sp, #4]
    e8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e8f2:	4a0a      	ldr	r2, [pc, #40]	; (e91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e8f4:	9b01      	ldr	r3, [sp, #4]
    e8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8fa:	f003 0301 	and.w	r3, r3, #1
    e8fe:	2b00      	cmp	r3, #0
    e900:	d106      	bne.n	e910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e902:	4a05      	ldr	r2, [pc, #20]	; (e918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e90a:	2b00      	cmp	r3, #0
    e90c:	d100      	bne.n	e910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e90e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e910:	bf00      	nop
    e912:	b003      	add	sp, #12
    e914:	f85d fb04 	ldr.w	pc, [sp], #4
    e918:	1fff905c 	.word	0x1fff905c
    e91c:	1fff9058 	.word	0x1fff9058

0000e920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e920:	b500      	push	{lr}
    e922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e924:	f7f2 fca6 	bl	1274 <Sys_GetCoreID>
    e928:	4603      	mov	r3, r0
    e92a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e92c:	4a10      	ldr	r2, [pc, #64]	; (e970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e92e:	9b01      	ldr	r3, [sp, #4]
    e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e934:	2b00      	cmp	r3, #0
    e936:	d10d      	bne.n	e954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e938:	f7f2 fbba 	bl	10b0 <Adc_schm_read_msr>
    e93c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e93e:	9b00      	ldr	r3, [sp, #0]
    e940:	f003 0301 	and.w	r3, r3, #1
    e944:	2b00      	cmp	r3, #0
    e946:	d100      	bne.n	e94a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e94a:	490a      	ldr	r1, [pc, #40]	; (e974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e94c:	9b01      	ldr	r3, [sp, #4]
    e94e:	9a00      	ldr	r2, [sp, #0]
    e950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e954:	4a06      	ldr	r2, [pc, #24]	; (e970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e956:	9b01      	ldr	r3, [sp, #4]
    e958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e95c:	1c5a      	adds	r2, r3, #1
    e95e:	4904      	ldr	r1, [pc, #16]	; (e970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e960:	9b01      	ldr	r3, [sp, #4]
    e962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e966:	bf00      	nop
    e968:	b003      	add	sp, #12
    e96a:	f85d fb04 	ldr.w	pc, [sp], #4
    e96e:	bf00      	nop
    e970:	1fff9064 	.word	0x1fff9064
    e974:	1fff9060 	.word	0x1fff9060

0000e978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e978:	b500      	push	{lr}
    e97a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e97c:	f7f2 fc7a 	bl	1274 <Sys_GetCoreID>
    e980:	4603      	mov	r3, r0
    e982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e984:	4a0d      	ldr	r2, [pc, #52]	; (e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e986:	9b01      	ldr	r3, [sp, #4]
    e988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e98c:	1e5a      	subs	r2, r3, #1
    e98e:	490b      	ldr	r1, [pc, #44]	; (e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e990:	9b01      	ldr	r3, [sp, #4]
    e992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e996:	4a0a      	ldr	r2, [pc, #40]	; (e9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e99e:	f003 0301 	and.w	r3, r3, #1
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d106      	bne.n	e9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e9a6:	4a05      	ldr	r2, [pc, #20]	; (e9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d100      	bne.n	e9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9b4:	bf00      	nop
    e9b6:	b003      	add	sp, #12
    e9b8:	f85d fb04 	ldr.w	pc, [sp], #4
    e9bc:	1fff9064 	.word	0x1fff9064
    e9c0:	1fff9060 	.word	0x1fff9060

0000e9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e9c4:	b500      	push	{lr}
    e9c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9c8:	f7f2 fc54 	bl	1274 <Sys_GetCoreID>
    e9cc:	4603      	mov	r3, r0
    e9ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e9d0:	4a10      	ldr	r2, [pc, #64]	; (ea14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e9d2:	9b01      	ldr	r3, [sp, #4]
    e9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9d8:	2b00      	cmp	r3, #0
    e9da:	d10d      	bne.n	e9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9dc:	f7f2 fb68 	bl	10b0 <Adc_schm_read_msr>
    e9e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9e2:	9b00      	ldr	r3, [sp, #0]
    e9e4:	f003 0301 	and.w	r3, r3, #1
    e9e8:	2b00      	cmp	r3, #0
    e9ea:	d100      	bne.n	e9ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e9ee:	490a      	ldr	r1, [pc, #40]	; (ea18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e9f0:	9b01      	ldr	r3, [sp, #4]
    e9f2:	9a00      	ldr	r2, [sp, #0]
    e9f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e9f8:	4a06      	ldr	r2, [pc, #24]	; (ea14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e9fa:	9b01      	ldr	r3, [sp, #4]
    e9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea00:	1c5a      	adds	r2, r3, #1
    ea02:	4904      	ldr	r1, [pc, #16]	; (ea14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    ea04:	9b01      	ldr	r3, [sp, #4]
    ea06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea0a:	bf00      	nop
    ea0c:	b003      	add	sp, #12
    ea0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea12:	bf00      	nop
    ea14:	1fff906c 	.word	0x1fff906c
    ea18:	1fff9068 	.word	0x1fff9068

0000ea1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    ea1c:	b500      	push	{lr}
    ea1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea20:	f7f2 fc28 	bl	1274 <Sys_GetCoreID>
    ea24:	4603      	mov	r3, r0
    ea26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    ea28:	4a0d      	ldr	r2, [pc, #52]	; (ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    ea2a:	9b01      	ldr	r3, [sp, #4]
    ea2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea30:	1e5a      	subs	r2, r3, #1
    ea32:	490b      	ldr	r1, [pc, #44]	; (ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    ea34:	9b01      	ldr	r3, [sp, #4]
    ea36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    ea3a:	4a0a      	ldr	r2, [pc, #40]	; (ea64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea42:	f003 0301 	and.w	r3, r3, #1
    ea46:	2b00      	cmp	r3, #0
    ea48:	d106      	bne.n	ea58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    ea4a:	4a05      	ldr	r2, [pc, #20]	; (ea60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d100      	bne.n	ea58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea58:	bf00      	nop
    ea5a:	b003      	add	sp, #12
    ea5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ea60:	1fff906c 	.word	0x1fff906c
    ea64:	1fff9068 	.word	0x1fff9068

0000ea68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    ea68:	b500      	push	{lr}
    ea6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea6c:	f7f2 fc02 	bl	1274 <Sys_GetCoreID>
    ea70:	4603      	mov	r3, r0
    ea72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    ea74:	4a10      	ldr	r2, [pc, #64]	; (eab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    ea76:	9b01      	ldr	r3, [sp, #4]
    ea78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea7c:	2b00      	cmp	r3, #0
    ea7e:	d10d      	bne.n	ea9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea80:	f7f2 fb16 	bl	10b0 <Adc_schm_read_msr>
    ea84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea86:	9b00      	ldr	r3, [sp, #0]
    ea88:	f003 0301 	and.w	r3, r3, #1
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d100      	bne.n	ea92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    ea92:	490a      	ldr	r1, [pc, #40]	; (eabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    ea94:	9b01      	ldr	r3, [sp, #4]
    ea96:	9a00      	ldr	r2, [sp, #0]
    ea98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    ea9c:	4a06      	ldr	r2, [pc, #24]	; (eab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    ea9e:	9b01      	ldr	r3, [sp, #4]
    eaa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaa4:	1c5a      	adds	r2, r3, #1
    eaa6:	4904      	ldr	r1, [pc, #16]	; (eab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    eaa8:	9b01      	ldr	r3, [sp, #4]
    eaaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eaae:	bf00      	nop
    eab0:	b003      	add	sp, #12
    eab2:	f85d fb04 	ldr.w	pc, [sp], #4
    eab6:	bf00      	nop
    eab8:	1fff9074 	.word	0x1fff9074
    eabc:	1fff9070 	.word	0x1fff9070

0000eac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    eac0:	b500      	push	{lr}
    eac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eac4:	f7f2 fbd6 	bl	1274 <Sys_GetCoreID>
    eac8:	4603      	mov	r3, r0
    eaca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    eacc:	4a0d      	ldr	r2, [pc, #52]	; (eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    eace:	9b01      	ldr	r3, [sp, #4]
    ead0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ead4:	1e5a      	subs	r2, r3, #1
    ead6:	490b      	ldr	r1, [pc, #44]	; (eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    ead8:	9b01      	ldr	r3, [sp, #4]
    eada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    eade:	4a0a      	ldr	r2, [pc, #40]	; (eb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eae6:	f003 0301 	and.w	r3, r3, #1
    eaea:	2b00      	cmp	r3, #0
    eaec:	d106      	bne.n	eafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    eaee:	4a05      	ldr	r2, [pc, #20]	; (eb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    eaf0:	9b01      	ldr	r3, [sp, #4]
    eaf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d100      	bne.n	eafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eafa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eafc:	bf00      	nop
    eafe:	b003      	add	sp, #12
    eb00:	f85d fb04 	ldr.w	pc, [sp], #4
    eb04:	1fff9074 	.word	0x1fff9074
    eb08:	1fff9070 	.word	0x1fff9070

0000eb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    eb0c:	b500      	push	{lr}
    eb0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb10:	f7f2 fbb0 	bl	1274 <Sys_GetCoreID>
    eb14:	4603      	mov	r3, r0
    eb16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    eb18:	4a10      	ldr	r2, [pc, #64]	; (eb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    eb1a:	9b01      	ldr	r3, [sp, #4]
    eb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb20:	2b00      	cmp	r3, #0
    eb22:	d10d      	bne.n	eb40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb24:	f7f2 fac4 	bl	10b0 <Adc_schm_read_msr>
    eb28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb2a:	9b00      	ldr	r3, [sp, #0]
    eb2c:	f003 0301 	and.w	r3, r3, #1
    eb30:	2b00      	cmp	r3, #0
    eb32:	d100      	bne.n	eb36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    eb36:	490a      	ldr	r1, [pc, #40]	; (eb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    eb38:	9b01      	ldr	r3, [sp, #4]
    eb3a:	9a00      	ldr	r2, [sp, #0]
    eb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    eb40:	4a06      	ldr	r2, [pc, #24]	; (eb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    eb42:	9b01      	ldr	r3, [sp, #4]
    eb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb48:	1c5a      	adds	r2, r3, #1
    eb4a:	4904      	ldr	r1, [pc, #16]	; (eb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb52:	bf00      	nop
    eb54:	b003      	add	sp, #12
    eb56:	f85d fb04 	ldr.w	pc, [sp], #4
    eb5a:	bf00      	nop
    eb5c:	1fff907c 	.word	0x1fff907c
    eb60:	1fff9078 	.word	0x1fff9078

0000eb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    eb64:	b500      	push	{lr}
    eb66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb68:	f7f2 fb84 	bl	1274 <Sys_GetCoreID>
    eb6c:	4603      	mov	r3, r0
    eb6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    eb70:	4a0d      	ldr	r2, [pc, #52]	; (eba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    eb72:	9b01      	ldr	r3, [sp, #4]
    eb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb78:	1e5a      	subs	r2, r3, #1
    eb7a:	490b      	ldr	r1, [pc, #44]	; (eba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    eb7c:	9b01      	ldr	r3, [sp, #4]
    eb7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    eb82:	4a0a      	ldr	r2, [pc, #40]	; (ebac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb8a:	f003 0301 	and.w	r3, r3, #1
    eb8e:	2b00      	cmp	r3, #0
    eb90:	d106      	bne.n	eba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    eb92:	4a05      	ldr	r2, [pc, #20]	; (eba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    eb94:	9b01      	ldr	r3, [sp, #4]
    eb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	d100      	bne.n	eba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eba0:	bf00      	nop
    eba2:	b003      	add	sp, #12
    eba4:	f85d fb04 	ldr.w	pc, [sp], #4
    eba8:	1fff907c 	.word	0x1fff907c
    ebac:	1fff9078 	.word	0x1fff9078

0000ebb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    ebb0:	b500      	push	{lr}
    ebb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebb4:	f7f2 fb5e 	bl	1274 <Sys_GetCoreID>
    ebb8:	4603      	mov	r3, r0
    ebba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    ebbc:	4a10      	ldr	r2, [pc, #64]	; (ec00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    ebbe:	9b01      	ldr	r3, [sp, #4]
    ebc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	d10d      	bne.n	ebe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebc8:	f7f2 fa72 	bl	10b0 <Adc_schm_read_msr>
    ebcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebce:	9b00      	ldr	r3, [sp, #0]
    ebd0:	f003 0301 	and.w	r3, r3, #1
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d100      	bne.n	ebda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    ebda:	490a      	ldr	r1, [pc, #40]	; (ec04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    ebdc:	9b01      	ldr	r3, [sp, #4]
    ebde:	9a00      	ldr	r2, [sp, #0]
    ebe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    ebe4:	4a06      	ldr	r2, [pc, #24]	; (ec00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    ebe6:	9b01      	ldr	r3, [sp, #4]
    ebe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebec:	1c5a      	adds	r2, r3, #1
    ebee:	4904      	ldr	r1, [pc, #16]	; (ec00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    ebf0:	9b01      	ldr	r3, [sp, #4]
    ebf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebf6:	bf00      	nop
    ebf8:	b003      	add	sp, #12
    ebfa:	f85d fb04 	ldr.w	pc, [sp], #4
    ebfe:	bf00      	nop
    ec00:	1fff9084 	.word	0x1fff9084
    ec04:	1fff9080 	.word	0x1fff9080

0000ec08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    ec08:	b500      	push	{lr}
    ec0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec0c:	f7f2 fb32 	bl	1274 <Sys_GetCoreID>
    ec10:	4603      	mov	r3, r0
    ec12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    ec14:	4a0d      	ldr	r2, [pc, #52]	; (ec4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    ec16:	9b01      	ldr	r3, [sp, #4]
    ec18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec1c:	1e5a      	subs	r2, r3, #1
    ec1e:	490b      	ldr	r1, [pc, #44]	; (ec4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    ec20:	9b01      	ldr	r3, [sp, #4]
    ec22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    ec26:	4a0a      	ldr	r2, [pc, #40]	; (ec50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    ec28:	9b01      	ldr	r3, [sp, #4]
    ec2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec2e:	f003 0301 	and.w	r3, r3, #1
    ec32:	2b00      	cmp	r3, #0
    ec34:	d106      	bne.n	ec44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    ec36:	4a05      	ldr	r2, [pc, #20]	; (ec4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec3e:	2b00      	cmp	r3, #0
    ec40:	d100      	bne.n	ec44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec44:	bf00      	nop
    ec46:	b003      	add	sp, #12
    ec48:	f85d fb04 	ldr.w	pc, [sp], #4
    ec4c:	1fff9084 	.word	0x1fff9084
    ec50:	1fff9080 	.word	0x1fff9080

0000ec54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    ec54:	b500      	push	{lr}
    ec56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec58:	f7f2 fb0c 	bl	1274 <Sys_GetCoreID>
    ec5c:	4603      	mov	r3, r0
    ec5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    ec60:	4a10      	ldr	r2, [pc, #64]	; (eca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    ec62:	9b01      	ldr	r3, [sp, #4]
    ec64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec68:	2b00      	cmp	r3, #0
    ec6a:	d10d      	bne.n	ec88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec6c:	f7f2 fa20 	bl	10b0 <Adc_schm_read_msr>
    ec70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec72:	9b00      	ldr	r3, [sp, #0]
    ec74:	f003 0301 	and.w	r3, r3, #1
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d100      	bne.n	ec7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    ec7e:	490a      	ldr	r1, [pc, #40]	; (eca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    ec80:	9b01      	ldr	r3, [sp, #4]
    ec82:	9a00      	ldr	r2, [sp, #0]
    ec84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    ec88:	4a06      	ldr	r2, [pc, #24]	; (eca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    ec8a:	9b01      	ldr	r3, [sp, #4]
    ec8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec90:	1c5a      	adds	r2, r3, #1
    ec92:	4904      	ldr	r1, [pc, #16]	; (eca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    ec94:	9b01      	ldr	r3, [sp, #4]
    ec96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec9a:	bf00      	nop
    ec9c:	b003      	add	sp, #12
    ec9e:	f85d fb04 	ldr.w	pc, [sp], #4
    eca2:	bf00      	nop
    eca4:	1fff908c 	.word	0x1fff908c
    eca8:	1fff9088 	.word	0x1fff9088

0000ecac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    ecac:	b500      	push	{lr}
    ecae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb0:	f7f2 fae0 	bl	1274 <Sys_GetCoreID>
    ecb4:	4603      	mov	r3, r0
    ecb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    ecb8:	4a0d      	ldr	r2, [pc, #52]	; (ecf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    ecba:	9b01      	ldr	r3, [sp, #4]
    ecbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc0:	1e5a      	subs	r2, r3, #1
    ecc2:	490b      	ldr	r1, [pc, #44]	; (ecf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    ecc4:	9b01      	ldr	r3, [sp, #4]
    ecc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    ecca:	4a0a      	ldr	r2, [pc, #40]	; (ecf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecd2:	f003 0301 	and.w	r3, r3, #1
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d106      	bne.n	ece8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    ecda:	4a05      	ldr	r2, [pc, #20]	; (ecf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    ecdc:	9b01      	ldr	r3, [sp, #4]
    ecde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ece2:	2b00      	cmp	r3, #0
    ece4:	d100      	bne.n	ece8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ece6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ece8:	bf00      	nop
    ecea:	b003      	add	sp, #12
    ecec:	f85d fb04 	ldr.w	pc, [sp], #4
    ecf0:	1fff908c 	.word	0x1fff908c
    ecf4:	1fff9088 	.word	0x1fff9088

0000ecf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    ecf8:	b500      	push	{lr}
    ecfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecfc:	f7f2 faba 	bl	1274 <Sys_GetCoreID>
    ed00:	4603      	mov	r3, r0
    ed02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    ed04:	4a10      	ldr	r2, [pc, #64]	; (ed48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    ed06:	9b01      	ldr	r3, [sp, #4]
    ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed0c:	2b00      	cmp	r3, #0
    ed0e:	d10d      	bne.n	ed2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed10:	f7f2 f9ce 	bl	10b0 <Adc_schm_read_msr>
    ed14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed16:	9b00      	ldr	r3, [sp, #0]
    ed18:	f003 0301 	and.w	r3, r3, #1
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d100      	bne.n	ed22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    ed22:	490a      	ldr	r1, [pc, #40]	; (ed4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    ed24:	9b01      	ldr	r3, [sp, #4]
    ed26:	9a00      	ldr	r2, [sp, #0]
    ed28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    ed2c:	4a06      	ldr	r2, [pc, #24]	; (ed48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    ed2e:	9b01      	ldr	r3, [sp, #4]
    ed30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed34:	1c5a      	adds	r2, r3, #1
    ed36:	4904      	ldr	r1, [pc, #16]	; (ed48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    ed38:	9b01      	ldr	r3, [sp, #4]
    ed3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed3e:	bf00      	nop
    ed40:	b003      	add	sp, #12
    ed42:	f85d fb04 	ldr.w	pc, [sp], #4
    ed46:	bf00      	nop
    ed48:	1fff9094 	.word	0x1fff9094
    ed4c:	1fff9090 	.word	0x1fff9090

0000ed50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    ed50:	b500      	push	{lr}
    ed52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed54:	f7f2 fa8e 	bl	1274 <Sys_GetCoreID>
    ed58:	4603      	mov	r3, r0
    ed5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    ed5c:	4a0d      	ldr	r2, [pc, #52]	; (ed94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    ed5e:	9b01      	ldr	r3, [sp, #4]
    ed60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed64:	1e5a      	subs	r2, r3, #1
    ed66:	490b      	ldr	r1, [pc, #44]	; (ed94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    ed68:	9b01      	ldr	r3, [sp, #4]
    ed6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    ed6e:	4a0a      	ldr	r2, [pc, #40]	; (ed98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed76:	f003 0301 	and.w	r3, r3, #1
    ed7a:	2b00      	cmp	r3, #0
    ed7c:	d106      	bne.n	ed8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    ed7e:	4a05      	ldr	r2, [pc, #20]	; (ed94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    ed80:	9b01      	ldr	r3, [sp, #4]
    ed82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed86:	2b00      	cmp	r3, #0
    ed88:	d100      	bne.n	ed8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed8c:	bf00      	nop
    ed8e:	b003      	add	sp, #12
    ed90:	f85d fb04 	ldr.w	pc, [sp], #4
    ed94:	1fff9094 	.word	0x1fff9094
    ed98:	1fff9090 	.word	0x1fff9090

0000ed9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    ed9c:	b500      	push	{lr}
    ed9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eda0:	f7f2 fa68 	bl	1274 <Sys_GetCoreID>
    eda4:	4603      	mov	r3, r0
    eda6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    eda8:	4a10      	ldr	r2, [pc, #64]	; (edec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    edaa:	9b01      	ldr	r3, [sp, #4]
    edac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d10d      	bne.n	edd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edb4:	f7f2 f97c 	bl	10b0 <Adc_schm_read_msr>
    edb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edba:	9b00      	ldr	r3, [sp, #0]
    edbc:	f003 0301 	and.w	r3, r3, #1
    edc0:	2b00      	cmp	r3, #0
    edc2:	d100      	bne.n	edc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    edc6:	490a      	ldr	r1, [pc, #40]	; (edf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    edc8:	9b01      	ldr	r3, [sp, #4]
    edca:	9a00      	ldr	r2, [sp, #0]
    edcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    edd0:	4a06      	ldr	r2, [pc, #24]	; (edec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    edd2:	9b01      	ldr	r3, [sp, #4]
    edd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd8:	1c5a      	adds	r2, r3, #1
    edda:	4904      	ldr	r1, [pc, #16]	; (edec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    eddc:	9b01      	ldr	r3, [sp, #4]
    edde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ede2:	bf00      	nop
    ede4:	b003      	add	sp, #12
    ede6:	f85d fb04 	ldr.w	pc, [sp], #4
    edea:	bf00      	nop
    edec:	1fff909c 	.word	0x1fff909c
    edf0:	1fff9098 	.word	0x1fff9098

0000edf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    edf4:	b500      	push	{lr}
    edf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edf8:	f7f2 fa3c 	bl	1274 <Sys_GetCoreID>
    edfc:	4603      	mov	r3, r0
    edfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    ee00:	4a0d      	ldr	r2, [pc, #52]	; (ee38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    ee02:	9b01      	ldr	r3, [sp, #4]
    ee04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee08:	1e5a      	subs	r2, r3, #1
    ee0a:	490b      	ldr	r1, [pc, #44]	; (ee38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    ee0c:	9b01      	ldr	r3, [sp, #4]
    ee0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    ee12:	4a0a      	ldr	r2, [pc, #40]	; (ee3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    ee14:	9b01      	ldr	r3, [sp, #4]
    ee16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee1a:	f003 0301 	and.w	r3, r3, #1
    ee1e:	2b00      	cmp	r3, #0
    ee20:	d106      	bne.n	ee30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    ee22:	4a05      	ldr	r2, [pc, #20]	; (ee38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d100      	bne.n	ee30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee30:	bf00      	nop
    ee32:	b003      	add	sp, #12
    ee34:	f85d fb04 	ldr.w	pc, [sp], #4
    ee38:	1fff909c 	.word	0x1fff909c
    ee3c:	1fff9098 	.word	0x1fff9098

0000ee40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    ee40:	b500      	push	{lr}
    ee42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee44:	f7f2 fa16 	bl	1274 <Sys_GetCoreID>
    ee48:	4603      	mov	r3, r0
    ee4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    ee4c:	4a10      	ldr	r2, [pc, #64]	; (ee90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    ee4e:	9b01      	ldr	r3, [sp, #4]
    ee50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee54:	2b00      	cmp	r3, #0
    ee56:	d10d      	bne.n	ee74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee58:	f7f2 f92a 	bl	10b0 <Adc_schm_read_msr>
    ee5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee5e:	9b00      	ldr	r3, [sp, #0]
    ee60:	f003 0301 	and.w	r3, r3, #1
    ee64:	2b00      	cmp	r3, #0
    ee66:	d100      	bne.n	ee6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    ee6a:	490a      	ldr	r1, [pc, #40]	; (ee94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    ee6c:	9b01      	ldr	r3, [sp, #4]
    ee6e:	9a00      	ldr	r2, [sp, #0]
    ee70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    ee74:	4a06      	ldr	r2, [pc, #24]	; (ee90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    ee76:	9b01      	ldr	r3, [sp, #4]
    ee78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee7c:	1c5a      	adds	r2, r3, #1
    ee7e:	4904      	ldr	r1, [pc, #16]	; (ee90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee86:	bf00      	nop
    ee88:	b003      	add	sp, #12
    ee8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ee8e:	bf00      	nop
    ee90:	1fff90a4 	.word	0x1fff90a4
    ee94:	1fff90a0 	.word	0x1fff90a0

0000ee98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    ee98:	b500      	push	{lr}
    ee9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee9c:	f7f2 f9ea 	bl	1274 <Sys_GetCoreID>
    eea0:	4603      	mov	r3, r0
    eea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    eea4:	4a0d      	ldr	r2, [pc, #52]	; (eedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    eea6:	9b01      	ldr	r3, [sp, #4]
    eea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeac:	1e5a      	subs	r2, r3, #1
    eeae:	490b      	ldr	r1, [pc, #44]	; (eedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    eeb0:	9b01      	ldr	r3, [sp, #4]
    eeb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    eeb6:	4a0a      	ldr	r2, [pc, #40]	; (eee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    eeb8:	9b01      	ldr	r3, [sp, #4]
    eeba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eebe:	f003 0301 	and.w	r3, r3, #1
    eec2:	2b00      	cmp	r3, #0
    eec4:	d106      	bne.n	eed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    eec6:	4a05      	ldr	r2, [pc, #20]	; (eedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    eec8:	9b01      	ldr	r3, [sp, #4]
    eeca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eece:	2b00      	cmp	r3, #0
    eed0:	d100      	bne.n	eed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eed4:	bf00      	nop
    eed6:	b003      	add	sp, #12
    eed8:	f85d fb04 	ldr.w	pc, [sp], #4
    eedc:	1fff90a4 	.word	0x1fff90a4
    eee0:	1fff90a0 	.word	0x1fff90a0

0000eee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    eee4:	b500      	push	{lr}
    eee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eee8:	f7f2 f9c4 	bl	1274 <Sys_GetCoreID>
    eeec:	4603      	mov	r3, r0
    eeee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    eef0:	4a10      	ldr	r2, [pc, #64]	; (ef34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    eef2:	9b01      	ldr	r3, [sp, #4]
    eef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eef8:	2b00      	cmp	r3, #0
    eefa:	d10d      	bne.n	ef18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eefc:	f7f2 f8d8 	bl	10b0 <Adc_schm_read_msr>
    ef00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef02:	9b00      	ldr	r3, [sp, #0]
    ef04:	f003 0301 	and.w	r3, r3, #1
    ef08:	2b00      	cmp	r3, #0
    ef0a:	d100      	bne.n	ef0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    ef0e:	490a      	ldr	r1, [pc, #40]	; (ef38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    ef10:	9b01      	ldr	r3, [sp, #4]
    ef12:	9a00      	ldr	r2, [sp, #0]
    ef14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    ef18:	4a06      	ldr	r2, [pc, #24]	; (ef34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    ef1a:	9b01      	ldr	r3, [sp, #4]
    ef1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef20:	1c5a      	adds	r2, r3, #1
    ef22:	4904      	ldr	r1, [pc, #16]	; (ef34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef2a:	bf00      	nop
    ef2c:	b003      	add	sp, #12
    ef2e:	f85d fb04 	ldr.w	pc, [sp], #4
    ef32:	bf00      	nop
    ef34:	1fff90ac 	.word	0x1fff90ac
    ef38:	1fff90a8 	.word	0x1fff90a8

0000ef3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    ef3c:	b500      	push	{lr}
    ef3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef40:	f7f2 f998 	bl	1274 <Sys_GetCoreID>
    ef44:	4603      	mov	r3, r0
    ef46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    ef48:	4a0d      	ldr	r2, [pc, #52]	; (ef80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    ef4a:	9b01      	ldr	r3, [sp, #4]
    ef4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef50:	1e5a      	subs	r2, r3, #1
    ef52:	490b      	ldr	r1, [pc, #44]	; (ef80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    ef54:	9b01      	ldr	r3, [sp, #4]
    ef56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    ef5a:	4a0a      	ldr	r2, [pc, #40]	; (ef84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    ef5c:	9b01      	ldr	r3, [sp, #4]
    ef5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef62:	f003 0301 	and.w	r3, r3, #1
    ef66:	2b00      	cmp	r3, #0
    ef68:	d106      	bne.n	ef78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    ef6a:	4a05      	ldr	r2, [pc, #20]	; (ef80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    ef6c:	9b01      	ldr	r3, [sp, #4]
    ef6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef72:	2b00      	cmp	r3, #0
    ef74:	d100      	bne.n	ef78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef78:	bf00      	nop
    ef7a:	b003      	add	sp, #12
    ef7c:	f85d fb04 	ldr.w	pc, [sp], #4
    ef80:	1fff90ac 	.word	0x1fff90ac
    ef84:	1fff90a8 	.word	0x1fff90a8

0000ef88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ef88:	b500      	push	{lr}
    ef8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef8c:	f7f2 f972 	bl	1274 <Sys_GetCoreID>
    ef90:	4603      	mov	r3, r0
    ef92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    ef94:	4a10      	ldr	r2, [pc, #64]	; (efd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ef96:	9b01      	ldr	r3, [sp, #4]
    ef98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d10d      	bne.n	efbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efa0:	f7f2 f886 	bl	10b0 <Adc_schm_read_msr>
    efa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efa6:	9b00      	ldr	r3, [sp, #0]
    efa8:	f003 0301 	and.w	r3, r3, #1
    efac:	2b00      	cmp	r3, #0
    efae:	d100      	bne.n	efb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    efb2:	490a      	ldr	r1, [pc, #40]	; (efdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    efb4:	9b01      	ldr	r3, [sp, #4]
    efb6:	9a00      	ldr	r2, [sp, #0]
    efb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    efbc:	4a06      	ldr	r2, [pc, #24]	; (efd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    efbe:	9b01      	ldr	r3, [sp, #4]
    efc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efc4:	1c5a      	adds	r2, r3, #1
    efc6:	4904      	ldr	r1, [pc, #16]	; (efd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efce:	bf00      	nop
    efd0:	b003      	add	sp, #12
    efd2:	f85d fb04 	ldr.w	pc, [sp], #4
    efd6:	bf00      	nop
    efd8:	1fff90b4 	.word	0x1fff90b4
    efdc:	1fff90b0 	.word	0x1fff90b0

0000efe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    efe0:	b500      	push	{lr}
    efe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efe4:	f7f2 f946 	bl	1274 <Sys_GetCoreID>
    efe8:	4603      	mov	r3, r0
    efea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    efec:	4a0d      	ldr	r2, [pc, #52]	; (f024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    efee:	9b01      	ldr	r3, [sp, #4]
    eff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff4:	1e5a      	subs	r2, r3, #1
    eff6:	490b      	ldr	r1, [pc, #44]	; (f024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    eff8:	9b01      	ldr	r3, [sp, #4]
    effa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    effe:	4a0a      	ldr	r2, [pc, #40]	; (f028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f006:	f003 0301 	and.w	r3, r3, #1
    f00a:	2b00      	cmp	r3, #0
    f00c:	d106      	bne.n	f01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    f00e:	4a05      	ldr	r2, [pc, #20]	; (f024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    f010:	9b01      	ldr	r3, [sp, #4]
    f012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f016:	2b00      	cmp	r3, #0
    f018:	d100      	bne.n	f01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f01c:	bf00      	nop
    f01e:	b003      	add	sp, #12
    f020:	f85d fb04 	ldr.w	pc, [sp], #4
    f024:	1fff90b4 	.word	0x1fff90b4
    f028:	1fff90b0 	.word	0x1fff90b0

0000f02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    f02c:	b500      	push	{lr}
    f02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f030:	f7f2 f920 	bl	1274 <Sys_GetCoreID>
    f034:	4603      	mov	r3, r0
    f036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    f038:	4a10      	ldr	r2, [pc, #64]	; (f07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    f03a:	9b01      	ldr	r3, [sp, #4]
    f03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f040:	2b00      	cmp	r3, #0
    f042:	d10d      	bne.n	f060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f044:	f7f2 f834 	bl	10b0 <Adc_schm_read_msr>
    f048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f04a:	9b00      	ldr	r3, [sp, #0]
    f04c:	f003 0301 	and.w	r3, r3, #1
    f050:	2b00      	cmp	r3, #0
    f052:	d100      	bne.n	f056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    f056:	490a      	ldr	r1, [pc, #40]	; (f080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    f058:	9b01      	ldr	r3, [sp, #4]
    f05a:	9a00      	ldr	r2, [sp, #0]
    f05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    f060:	4a06      	ldr	r2, [pc, #24]	; (f07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    f062:	9b01      	ldr	r3, [sp, #4]
    f064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f068:	1c5a      	adds	r2, r3, #1
    f06a:	4904      	ldr	r1, [pc, #16]	; (f07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    f06c:	9b01      	ldr	r3, [sp, #4]
    f06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f072:	bf00      	nop
    f074:	b003      	add	sp, #12
    f076:	f85d fb04 	ldr.w	pc, [sp], #4
    f07a:	bf00      	nop
    f07c:	1fff90bc 	.word	0x1fff90bc
    f080:	1fff90b8 	.word	0x1fff90b8

0000f084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    f084:	b500      	push	{lr}
    f086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f088:	f7f2 f8f4 	bl	1274 <Sys_GetCoreID>
    f08c:	4603      	mov	r3, r0
    f08e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    f090:	4a0d      	ldr	r2, [pc, #52]	; (f0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    f092:	9b01      	ldr	r3, [sp, #4]
    f094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f098:	1e5a      	subs	r2, r3, #1
    f09a:	490b      	ldr	r1, [pc, #44]	; (f0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    f09c:	9b01      	ldr	r3, [sp, #4]
    f09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    f0a2:	4a0a      	ldr	r2, [pc, #40]	; (f0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    f0a4:	9b01      	ldr	r3, [sp, #4]
    f0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0aa:	f003 0301 	and.w	r3, r3, #1
    f0ae:	2b00      	cmp	r3, #0
    f0b0:	d106      	bne.n	f0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    f0b2:	4a05      	ldr	r2, [pc, #20]	; (f0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    f0b4:	9b01      	ldr	r3, [sp, #4]
    f0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d100      	bne.n	f0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0c0:	bf00      	nop
    f0c2:	b003      	add	sp, #12
    f0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f0c8:	1fff90bc 	.word	0x1fff90bc
    f0cc:	1fff90b8 	.word	0x1fff90b8

0000f0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    f0d0:	b500      	push	{lr}
    f0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0d4:	f7f2 f8ce 	bl	1274 <Sys_GetCoreID>
    f0d8:	4603      	mov	r3, r0
    f0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    f0dc:	4a10      	ldr	r2, [pc, #64]	; (f120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    f0de:	9b01      	ldr	r3, [sp, #4]
    f0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e4:	2b00      	cmp	r3, #0
    f0e6:	d10d      	bne.n	f104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0e8:	f7f1 ffe2 	bl	10b0 <Adc_schm_read_msr>
    f0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0ee:	9b00      	ldr	r3, [sp, #0]
    f0f0:	f003 0301 	and.w	r3, r3, #1
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d100      	bne.n	f0fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    f0fa:	490a      	ldr	r1, [pc, #40]	; (f124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    f0fc:	9b01      	ldr	r3, [sp, #4]
    f0fe:	9a00      	ldr	r2, [sp, #0]
    f100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    f104:	4a06      	ldr	r2, [pc, #24]	; (f120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    f106:	9b01      	ldr	r3, [sp, #4]
    f108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f10c:	1c5a      	adds	r2, r3, #1
    f10e:	4904      	ldr	r1, [pc, #16]	; (f120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f116:	bf00      	nop
    f118:	b003      	add	sp, #12
    f11a:	f85d fb04 	ldr.w	pc, [sp], #4
    f11e:	bf00      	nop
    f120:	1fff90c4 	.word	0x1fff90c4
    f124:	1fff90c0 	.word	0x1fff90c0

0000f128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    f128:	b500      	push	{lr}
    f12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f12c:	f7f2 f8a2 	bl	1274 <Sys_GetCoreID>
    f130:	4603      	mov	r3, r0
    f132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    f134:	4a0d      	ldr	r2, [pc, #52]	; (f16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    f136:	9b01      	ldr	r3, [sp, #4]
    f138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f13c:	1e5a      	subs	r2, r3, #1
    f13e:	490b      	ldr	r1, [pc, #44]	; (f16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    f140:	9b01      	ldr	r3, [sp, #4]
    f142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    f146:	4a0a      	ldr	r2, [pc, #40]	; (f170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f14e:	f003 0301 	and.w	r3, r3, #1
    f152:	2b00      	cmp	r3, #0
    f154:	d106      	bne.n	f164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    f156:	4a05      	ldr	r2, [pc, #20]	; (f16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f15e:	2b00      	cmp	r3, #0
    f160:	d100      	bne.n	f164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f164:	bf00      	nop
    f166:	b003      	add	sp, #12
    f168:	f85d fb04 	ldr.w	pc, [sp], #4
    f16c:	1fff90c4 	.word	0x1fff90c4
    f170:	1fff90c0 	.word	0x1fff90c0

0000f174 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    f174:	b500      	push	{lr}
    f176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f178:	f7f2 f87c 	bl	1274 <Sys_GetCoreID>
    f17c:	4603      	mov	r3, r0
    f17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    f180:	4a10      	ldr	r2, [pc, #64]	; (f1c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    f182:	9b01      	ldr	r3, [sp, #4]
    f184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f188:	2b00      	cmp	r3, #0
    f18a:	d10d      	bne.n	f1a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f18c:	f7f1 ff99 	bl	10c2 <Mcu_schm_read_msr>
    f190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f192:	9b00      	ldr	r3, [sp, #0]
    f194:	f003 0301 	and.w	r3, r3, #1
    f198:	2b00      	cmp	r3, #0
    f19a:	d100      	bne.n	f19e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f19e:	490a      	ldr	r1, [pc, #40]	; (f1c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    f1a0:	9b01      	ldr	r3, [sp, #4]
    f1a2:	9a00      	ldr	r2, [sp, #0]
    f1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    f1a8:	4a06      	ldr	r2, [pc, #24]	; (f1c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    f1aa:	9b01      	ldr	r3, [sp, #4]
    f1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1b0:	1c5a      	adds	r2, r3, #1
    f1b2:	4904      	ldr	r1, [pc, #16]	; (f1c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1ba:	bf00      	nop
    f1bc:	b003      	add	sp, #12
    f1be:	f85d fb04 	ldr.w	pc, [sp], #4
    f1c2:	bf00      	nop
    f1c4:	1fff90cc 	.word	0x1fff90cc
    f1c8:	1fff90c8 	.word	0x1fff90c8

0000f1cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    f1cc:	b500      	push	{lr}
    f1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d0:	f7f2 f850 	bl	1274 <Sys_GetCoreID>
    f1d4:	4603      	mov	r3, r0
    f1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    f1d8:	4a0d      	ldr	r2, [pc, #52]	; (f210 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    f1da:	9b01      	ldr	r3, [sp, #4]
    f1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e0:	1e5a      	subs	r2, r3, #1
    f1e2:	490b      	ldr	r1, [pc, #44]	; (f210 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    f1e4:	9b01      	ldr	r3, [sp, #4]
    f1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f1ea:	4a0a      	ldr	r2, [pc, #40]	; (f214 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    f1ec:	9b01      	ldr	r3, [sp, #4]
    f1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f2:	f003 0301 	and.w	r3, r3, #1
    f1f6:	2b00      	cmp	r3, #0
    f1f8:	d106      	bne.n	f208 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    f1fa:	4a05      	ldr	r2, [pc, #20]	; (f210 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    f1fc:	9b01      	ldr	r3, [sp, #4]
    f1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f202:	2b00      	cmp	r3, #0
    f204:	d100      	bne.n	f208 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f208:	bf00      	nop
    f20a:	b003      	add	sp, #12
    f20c:	f85d fb04 	ldr.w	pc, [sp], #4
    f210:	1fff90cc 	.word	0x1fff90cc
    f214:	1fff90c8 	.word	0x1fff90c8

0000f218 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    f218:	b500      	push	{lr}
    f21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f21c:	f7f2 f82a 	bl	1274 <Sys_GetCoreID>
    f220:	4603      	mov	r3, r0
    f222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    f224:	4a10      	ldr	r2, [pc, #64]	; (f268 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    f226:	9b01      	ldr	r3, [sp, #4]
    f228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f22c:	2b00      	cmp	r3, #0
    f22e:	d10d      	bne.n	f24c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f230:	f7f1 ff47 	bl	10c2 <Mcu_schm_read_msr>
    f234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f236:	9b00      	ldr	r3, [sp, #0]
    f238:	f003 0301 	and.w	r3, r3, #1
    f23c:	2b00      	cmp	r3, #0
    f23e:	d100      	bne.n	f242 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f242:	490a      	ldr	r1, [pc, #40]	; (f26c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    f244:	9b01      	ldr	r3, [sp, #4]
    f246:	9a00      	ldr	r2, [sp, #0]
    f248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    f24c:	4a06      	ldr	r2, [pc, #24]	; (f268 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    f24e:	9b01      	ldr	r3, [sp, #4]
    f250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f254:	1c5a      	adds	r2, r3, #1
    f256:	4904      	ldr	r1, [pc, #16]	; (f268 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    f258:	9b01      	ldr	r3, [sp, #4]
    f25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f25e:	bf00      	nop
    f260:	b003      	add	sp, #12
    f262:	f85d fb04 	ldr.w	pc, [sp], #4
    f266:	bf00      	nop
    f268:	1fff90d4 	.word	0x1fff90d4
    f26c:	1fff90d0 	.word	0x1fff90d0

0000f270 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    f270:	b500      	push	{lr}
    f272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f274:	f7f1 fffe 	bl	1274 <Sys_GetCoreID>
    f278:	4603      	mov	r3, r0
    f27a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    f27c:	4a0d      	ldr	r2, [pc, #52]	; (f2b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f27e:	9b01      	ldr	r3, [sp, #4]
    f280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f284:	1e5a      	subs	r2, r3, #1
    f286:	490b      	ldr	r1, [pc, #44]	; (f2b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f288:	9b01      	ldr	r3, [sp, #4]
    f28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f28e:	4a0a      	ldr	r2, [pc, #40]	; (f2b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f296:	f003 0301 	and.w	r3, r3, #1
    f29a:	2b00      	cmp	r3, #0
    f29c:	d106      	bne.n	f2ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    f29e:	4a05      	ldr	r2, [pc, #20]	; (f2b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d100      	bne.n	f2ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2ac:	bf00      	nop
    f2ae:	b003      	add	sp, #12
    f2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f2b4:	1fff90d4 	.word	0x1fff90d4
    f2b8:	1fff90d0 	.word	0x1fff90d0

0000f2bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    f2bc:	b500      	push	{lr}
    f2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2c0:	f7f1 ffd8 	bl	1274 <Sys_GetCoreID>
    f2c4:	4603      	mov	r3, r0
    f2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    f2c8:	4a10      	ldr	r2, [pc, #64]	; (f30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f2ca:	9b01      	ldr	r3, [sp, #4]
    f2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d10d      	bne.n	f2f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2d4:	f7f1 fef5 	bl	10c2 <Mcu_schm_read_msr>
    f2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2da:	9b00      	ldr	r3, [sp, #0]
    f2dc:	f003 0301 	and.w	r3, r3, #1
    f2e0:	2b00      	cmp	r3, #0
    f2e2:	d100      	bne.n	f2e6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f2e6:	490a      	ldr	r1, [pc, #40]	; (f310 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    f2e8:	9b01      	ldr	r3, [sp, #4]
    f2ea:	9a00      	ldr	r2, [sp, #0]
    f2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    f2f0:	4a06      	ldr	r2, [pc, #24]	; (f30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f2f2:	9b01      	ldr	r3, [sp, #4]
    f2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f8:	1c5a      	adds	r2, r3, #1
    f2fa:	4904      	ldr	r1, [pc, #16]	; (f30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    f2fc:	9b01      	ldr	r3, [sp, #4]
    f2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f302:	bf00      	nop
    f304:	b003      	add	sp, #12
    f306:	f85d fb04 	ldr.w	pc, [sp], #4
    f30a:	bf00      	nop
    f30c:	1fff90dc 	.word	0x1fff90dc
    f310:	1fff90d8 	.word	0x1fff90d8

0000f314 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    f314:	b500      	push	{lr}
    f316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f318:	f7f1 ffac 	bl	1274 <Sys_GetCoreID>
    f31c:	4603      	mov	r3, r0
    f31e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    f320:	4a0d      	ldr	r2, [pc, #52]	; (f358 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f322:	9b01      	ldr	r3, [sp, #4]
    f324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f328:	1e5a      	subs	r2, r3, #1
    f32a:	490b      	ldr	r1, [pc, #44]	; (f358 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f32c:	9b01      	ldr	r3, [sp, #4]
    f32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f332:	4a0a      	ldr	r2, [pc, #40]	; (f35c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    f334:	9b01      	ldr	r3, [sp, #4]
    f336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f33a:	f003 0301 	and.w	r3, r3, #1
    f33e:	2b00      	cmp	r3, #0
    f340:	d106      	bne.n	f350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    f342:	4a05      	ldr	r2, [pc, #20]	; (f358 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    f344:	9b01      	ldr	r3, [sp, #4]
    f346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d100      	bne.n	f350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f350:	bf00      	nop
    f352:	b003      	add	sp, #12
    f354:	f85d fb04 	ldr.w	pc, [sp], #4
    f358:	1fff90dc 	.word	0x1fff90dc
    f35c:	1fff90d8 	.word	0x1fff90d8

0000f360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    f360:	b500      	push	{lr}
    f362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f364:	f7f1 ff86 	bl	1274 <Sys_GetCoreID>
    f368:	4603      	mov	r3, r0
    f36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    f36c:	4a10      	ldr	r2, [pc, #64]	; (f3b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f36e:	9b01      	ldr	r3, [sp, #4]
    f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f374:	2b00      	cmp	r3, #0
    f376:	d10d      	bne.n	f394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f378:	f7f1 feac 	bl	10d4 <Port_schm_read_msr>
    f37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f37e:	9b00      	ldr	r3, [sp, #0]
    f380:	f003 0301 	and.w	r3, r3, #1
    f384:	2b00      	cmp	r3, #0
    f386:	d100      	bne.n	f38a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f38a:	490a      	ldr	r1, [pc, #40]	; (f3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    f38c:	9b01      	ldr	r3, [sp, #4]
    f38e:	9a00      	ldr	r2, [sp, #0]
    f390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    f394:	4a06      	ldr	r2, [pc, #24]	; (f3b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f396:	9b01      	ldr	r3, [sp, #4]
    f398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f39c:	1c5a      	adds	r2, r3, #1
    f39e:	4904      	ldr	r1, [pc, #16]	; (f3b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    f3a0:	9b01      	ldr	r3, [sp, #4]
    f3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3a6:	bf00      	nop
    f3a8:	b003      	add	sp, #12
    f3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f3ae:	bf00      	nop
    f3b0:	1fff90e4 	.word	0x1fff90e4
    f3b4:	1fff90e0 	.word	0x1fff90e0

0000f3b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    f3b8:	b500      	push	{lr}
    f3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3bc:	f7f1 ff5a 	bl	1274 <Sys_GetCoreID>
    f3c0:	4603      	mov	r3, r0
    f3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    f3c4:	4a0d      	ldr	r2, [pc, #52]	; (f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f3c6:	9b01      	ldr	r3, [sp, #4]
    f3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3cc:	1e5a      	subs	r2, r3, #1
    f3ce:	490b      	ldr	r1, [pc, #44]	; (f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f3d0:	9b01      	ldr	r3, [sp, #4]
    f3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f3d6:	4a0a      	ldr	r2, [pc, #40]	; (f400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    f3d8:	9b01      	ldr	r3, [sp, #4]
    f3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3de:	f003 0301 	and.w	r3, r3, #1
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	d106      	bne.n	f3f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    f3e6:	4a05      	ldr	r2, [pc, #20]	; (f3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    f3e8:	9b01      	ldr	r3, [sp, #4]
    f3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d100      	bne.n	f3f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3f4:	bf00      	nop
    f3f6:	b003      	add	sp, #12
    f3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f3fc:	1fff90e4 	.word	0x1fff90e4
    f400:	1fff90e0 	.word	0x1fff90e0

0000f404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    f404:	b500      	push	{lr}
    f406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f408:	f7f1 ff34 	bl	1274 <Sys_GetCoreID>
    f40c:	4603      	mov	r3, r0
    f40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    f410:	4a10      	ldr	r2, [pc, #64]	; (f454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f412:	9b01      	ldr	r3, [sp, #4]
    f414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f418:	2b00      	cmp	r3, #0
    f41a:	d10d      	bne.n	f438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f41c:	f7f1 fe5a 	bl	10d4 <Port_schm_read_msr>
    f420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f422:	9b00      	ldr	r3, [sp, #0]
    f424:	f003 0301 	and.w	r3, r3, #1
    f428:	2b00      	cmp	r3, #0
    f42a:	d100      	bne.n	f42e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f42e:	490a      	ldr	r1, [pc, #40]	; (f458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    f430:	9b01      	ldr	r3, [sp, #4]
    f432:	9a00      	ldr	r2, [sp, #0]
    f434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    f438:	4a06      	ldr	r2, [pc, #24]	; (f454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f43a:	9b01      	ldr	r3, [sp, #4]
    f43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f440:	1c5a      	adds	r2, r3, #1
    f442:	4904      	ldr	r1, [pc, #16]	; (f454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    f444:	9b01      	ldr	r3, [sp, #4]
    f446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f44a:	bf00      	nop
    f44c:	b003      	add	sp, #12
    f44e:	f85d fb04 	ldr.w	pc, [sp], #4
    f452:	bf00      	nop
    f454:	1fff90ec 	.word	0x1fff90ec
    f458:	1fff90e8 	.word	0x1fff90e8

0000f45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    f45c:	b500      	push	{lr}
    f45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f460:	f7f1 ff08 	bl	1274 <Sys_GetCoreID>
    f464:	4603      	mov	r3, r0
    f466:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    f468:	4a0d      	ldr	r2, [pc, #52]	; (f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f46a:	9b01      	ldr	r3, [sp, #4]
    f46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f470:	1e5a      	subs	r2, r3, #1
    f472:	490b      	ldr	r1, [pc, #44]	; (f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f474:	9b01      	ldr	r3, [sp, #4]
    f476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f47a:	4a0a      	ldr	r2, [pc, #40]	; (f4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    f47c:	9b01      	ldr	r3, [sp, #4]
    f47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f482:	f003 0301 	and.w	r3, r3, #1
    f486:	2b00      	cmp	r3, #0
    f488:	d106      	bne.n	f498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    f48a:	4a05      	ldr	r2, [pc, #20]	; (f4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f492:	2b00      	cmp	r3, #0
    f494:	d100      	bne.n	f498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f498:	bf00      	nop
    f49a:	b003      	add	sp, #12
    f49c:	f85d fb04 	ldr.w	pc, [sp], #4
    f4a0:	1fff90ec 	.word	0x1fff90ec
    f4a4:	1fff90e8 	.word	0x1fff90e8

0000f4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f4a8:	b500      	push	{lr}
    f4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4ac:	f7f1 fee2 	bl	1274 <Sys_GetCoreID>
    f4b0:	4603      	mov	r3, r0
    f4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    f4b4:	4a10      	ldr	r2, [pc, #64]	; (f4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f4b6:	9b01      	ldr	r3, [sp, #4]
    f4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4bc:	2b00      	cmp	r3, #0
    f4be:	d10d      	bne.n	f4dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4c0:	f7f1 fe08 	bl	10d4 <Port_schm_read_msr>
    f4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4c6:	9b00      	ldr	r3, [sp, #0]
    f4c8:	f003 0301 	and.w	r3, r3, #1
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d100      	bne.n	f4d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f4d2:	490a      	ldr	r1, [pc, #40]	; (f4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    f4d4:	9b01      	ldr	r3, [sp, #4]
    f4d6:	9a00      	ldr	r2, [sp, #0]
    f4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    f4dc:	4a06      	ldr	r2, [pc, #24]	; (f4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f4de:	9b01      	ldr	r3, [sp, #4]
    f4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4e4:	1c5a      	adds	r2, r3, #1
    f4e6:	4904      	ldr	r1, [pc, #16]	; (f4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4ee:	bf00      	nop
    f4f0:	b003      	add	sp, #12
    f4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f4f6:	bf00      	nop
    f4f8:	1fff90f4 	.word	0x1fff90f4
    f4fc:	1fff90f0 	.word	0x1fff90f0

0000f500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    f500:	b500      	push	{lr}
    f502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f504:	f7f1 feb6 	bl	1274 <Sys_GetCoreID>
    f508:	4603      	mov	r3, r0
    f50a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    f50c:	4a0d      	ldr	r2, [pc, #52]	; (f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f50e:	9b01      	ldr	r3, [sp, #4]
    f510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f514:	1e5a      	subs	r2, r3, #1
    f516:	490b      	ldr	r1, [pc, #44]	; (f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f518:	9b01      	ldr	r3, [sp, #4]
    f51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f51e:	4a0a      	ldr	r2, [pc, #40]	; (f548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    f520:	9b01      	ldr	r3, [sp, #4]
    f522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f526:	f003 0301 	and.w	r3, r3, #1
    f52a:	2b00      	cmp	r3, #0
    f52c:	d106      	bne.n	f53c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    f52e:	4a05      	ldr	r2, [pc, #20]	; (f544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    f530:	9b01      	ldr	r3, [sp, #4]
    f532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f536:	2b00      	cmp	r3, #0
    f538:	d100      	bne.n	f53c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f53c:	bf00      	nop
    f53e:	b003      	add	sp, #12
    f540:	f85d fb04 	ldr.w	pc, [sp], #4
    f544:	1fff90f4 	.word	0x1fff90f4
    f548:	1fff90f0 	.word	0x1fff90f0

0000f54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f54c:	b500      	push	{lr}
    f54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f550:	f7f1 fe90 	bl	1274 <Sys_GetCoreID>
    f554:	4603      	mov	r3, r0
    f556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    f558:	4a10      	ldr	r2, [pc, #64]	; (f59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f55a:	9b01      	ldr	r3, [sp, #4]
    f55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f560:	2b00      	cmp	r3, #0
    f562:	d10d      	bne.n	f580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f564:	f7f1 fdb6 	bl	10d4 <Port_schm_read_msr>
    f568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f56a:	9b00      	ldr	r3, [sp, #0]
    f56c:	f003 0301 	and.w	r3, r3, #1
    f570:	2b00      	cmp	r3, #0
    f572:	d100      	bne.n	f576 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f576:	490a      	ldr	r1, [pc, #40]	; (f5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    f578:	9b01      	ldr	r3, [sp, #4]
    f57a:	9a00      	ldr	r2, [sp, #0]
    f57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    f580:	4a06      	ldr	r2, [pc, #24]	; (f59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f582:	9b01      	ldr	r3, [sp, #4]
    f584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f588:	1c5a      	adds	r2, r3, #1
    f58a:	4904      	ldr	r1, [pc, #16]	; (f59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    f58c:	9b01      	ldr	r3, [sp, #4]
    f58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f592:	bf00      	nop
    f594:	b003      	add	sp, #12
    f596:	f85d fb04 	ldr.w	pc, [sp], #4
    f59a:	bf00      	nop
    f59c:	1fff90fc 	.word	0x1fff90fc
    f5a0:	1fff90f8 	.word	0x1fff90f8

0000f5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    f5a4:	b500      	push	{lr}
    f5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5a8:	f7f1 fe64 	bl	1274 <Sys_GetCoreID>
    f5ac:	4603      	mov	r3, r0
    f5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    f5b0:	4a0d      	ldr	r2, [pc, #52]	; (f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f5b2:	9b01      	ldr	r3, [sp, #4]
    f5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5b8:	1e5a      	subs	r2, r3, #1
    f5ba:	490b      	ldr	r1, [pc, #44]	; (f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f5bc:	9b01      	ldr	r3, [sp, #4]
    f5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f5c2:	4a0a      	ldr	r2, [pc, #40]	; (f5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    f5c4:	9b01      	ldr	r3, [sp, #4]
    f5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5ca:	f003 0301 	and.w	r3, r3, #1
    f5ce:	2b00      	cmp	r3, #0
    f5d0:	d106      	bne.n	f5e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    f5d2:	4a05      	ldr	r2, [pc, #20]	; (f5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f5d4:	9b01      	ldr	r3, [sp, #4]
    f5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d100      	bne.n	f5e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5e0:	bf00      	nop
    f5e2:	b003      	add	sp, #12
    f5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f5e8:	1fff90fc 	.word	0x1fff90fc
    f5ec:	1fff90f8 	.word	0x1fff90f8

0000f5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f5f0:	b500      	push	{lr}
    f5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5f4:	f7f1 fe3e 	bl	1274 <Sys_GetCoreID>
    f5f8:	4603      	mov	r3, r0
    f5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    f5fc:	4a10      	ldr	r2, [pc, #64]	; (f640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f5fe:	9b01      	ldr	r3, [sp, #4]
    f600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f604:	2b00      	cmp	r3, #0
    f606:	d10d      	bne.n	f624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f608:	f7f1 fd64 	bl	10d4 <Port_schm_read_msr>
    f60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f60e:	9b00      	ldr	r3, [sp, #0]
    f610:	f003 0301 	and.w	r3, r3, #1
    f614:	2b00      	cmp	r3, #0
    f616:	d100      	bne.n	f61a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f61a:	490a      	ldr	r1, [pc, #40]	; (f644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    f61c:	9b01      	ldr	r3, [sp, #4]
    f61e:	9a00      	ldr	r2, [sp, #0]
    f620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    f624:	4a06      	ldr	r2, [pc, #24]	; (f640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f626:	9b01      	ldr	r3, [sp, #4]
    f628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f62c:	1c5a      	adds	r2, r3, #1
    f62e:	4904      	ldr	r1, [pc, #16]	; (f640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f630:	9b01      	ldr	r3, [sp, #4]
    f632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f636:	bf00      	nop
    f638:	b003      	add	sp, #12
    f63a:	f85d fb04 	ldr.w	pc, [sp], #4
    f63e:	bf00      	nop
    f640:	1fff9104 	.word	0x1fff9104
    f644:	1fff9100 	.word	0x1fff9100

0000f648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f648:	b500      	push	{lr}
    f64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f64c:	f7f1 fe12 	bl	1274 <Sys_GetCoreID>
    f650:	4603      	mov	r3, r0
    f652:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    f654:	4a0d      	ldr	r2, [pc, #52]	; (f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f656:	9b01      	ldr	r3, [sp, #4]
    f658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f65c:	1e5a      	subs	r2, r3, #1
    f65e:	490b      	ldr	r1, [pc, #44]	; (f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f660:	9b01      	ldr	r3, [sp, #4]
    f662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f666:	4a0a      	ldr	r2, [pc, #40]	; (f690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f668:	9b01      	ldr	r3, [sp, #4]
    f66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f66e:	f003 0301 	and.w	r3, r3, #1
    f672:	2b00      	cmp	r3, #0
    f674:	d106      	bne.n	f684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f676:	4a05      	ldr	r2, [pc, #20]	; (f68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f67e:	2b00      	cmp	r3, #0
    f680:	d100      	bne.n	f684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f684:	bf00      	nop
    f686:	b003      	add	sp, #12
    f688:	f85d fb04 	ldr.w	pc, [sp], #4
    f68c:	1fff9104 	.word	0x1fff9104
    f690:	1fff9100 	.word	0x1fff9100

0000f694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f694:	b500      	push	{lr}
    f696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f698:	f7f1 fdec 	bl	1274 <Sys_GetCoreID>
    f69c:	4603      	mov	r3, r0
    f69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f6a0:	4a10      	ldr	r2, [pc, #64]	; (f6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f6a2:	9b01      	ldr	r3, [sp, #4]
    f6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d10d      	bne.n	f6c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6ac:	f7f1 fd12 	bl	10d4 <Port_schm_read_msr>
    f6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6b2:	9b00      	ldr	r3, [sp, #0]
    f6b4:	f003 0301 	and.w	r3, r3, #1
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	d100      	bne.n	f6be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f6be:	490a      	ldr	r1, [pc, #40]	; (f6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f6c0:	9b01      	ldr	r3, [sp, #4]
    f6c2:	9a00      	ldr	r2, [sp, #0]
    f6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f6c8:	4a06      	ldr	r2, [pc, #24]	; (f6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f6ca:	9b01      	ldr	r3, [sp, #4]
    f6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6d0:	1c5a      	adds	r2, r3, #1
    f6d2:	4904      	ldr	r1, [pc, #16]	; (f6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f6d4:	9b01      	ldr	r3, [sp, #4]
    f6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6da:	bf00      	nop
    f6dc:	b003      	add	sp, #12
    f6de:	f85d fb04 	ldr.w	pc, [sp], #4
    f6e2:	bf00      	nop
    f6e4:	1fff910c 	.word	0x1fff910c
    f6e8:	1fff9108 	.word	0x1fff9108

0000f6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f6ec:	b500      	push	{lr}
    f6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6f0:	f7f1 fdc0 	bl	1274 <Sys_GetCoreID>
    f6f4:	4603      	mov	r3, r0
    f6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f6f8:	4a0d      	ldr	r2, [pc, #52]	; (f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f6fa:	9b01      	ldr	r3, [sp, #4]
    f6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f700:	1e5a      	subs	r2, r3, #1
    f702:	490b      	ldr	r1, [pc, #44]	; (f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f704:	9b01      	ldr	r3, [sp, #4]
    f706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f70a:	4a0a      	ldr	r2, [pc, #40]	; (f734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f70c:	9b01      	ldr	r3, [sp, #4]
    f70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f712:	f003 0301 	and.w	r3, r3, #1
    f716:	2b00      	cmp	r3, #0
    f718:	d106      	bne.n	f728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f71a:	4a05      	ldr	r2, [pc, #20]	; (f730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f71c:	9b01      	ldr	r3, [sp, #4]
    f71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f722:	2b00      	cmp	r3, #0
    f724:	d100      	bne.n	f728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f728:	bf00      	nop
    f72a:	b003      	add	sp, #12
    f72c:	f85d fb04 	ldr.w	pc, [sp], #4
    f730:	1fff910c 	.word	0x1fff910c
    f734:	1fff9108 	.word	0x1fff9108

0000f738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f738:	b500      	push	{lr}
    f73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f73c:	f7f1 fd9a 	bl	1274 <Sys_GetCoreID>
    f740:	4603      	mov	r3, r0
    f742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f744:	4a10      	ldr	r2, [pc, #64]	; (f788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f746:	9b01      	ldr	r3, [sp, #4]
    f748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f74c:	2b00      	cmp	r3, #0
    f74e:	d10d      	bne.n	f76c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f750:	f7f1 fcc0 	bl	10d4 <Port_schm_read_msr>
    f754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f756:	9b00      	ldr	r3, [sp, #0]
    f758:	f003 0301 	and.w	r3, r3, #1
    f75c:	2b00      	cmp	r3, #0
    f75e:	d100      	bne.n	f762 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f762:	490a      	ldr	r1, [pc, #40]	; (f78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f764:	9b01      	ldr	r3, [sp, #4]
    f766:	9a00      	ldr	r2, [sp, #0]
    f768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f76c:	4a06      	ldr	r2, [pc, #24]	; (f788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f76e:	9b01      	ldr	r3, [sp, #4]
    f770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f774:	1c5a      	adds	r2, r3, #1
    f776:	4904      	ldr	r1, [pc, #16]	; (f788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f778:	9b01      	ldr	r3, [sp, #4]
    f77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f77e:	bf00      	nop
    f780:	b003      	add	sp, #12
    f782:	f85d fb04 	ldr.w	pc, [sp], #4
    f786:	bf00      	nop
    f788:	1fff9114 	.word	0x1fff9114
    f78c:	1fff9110 	.word	0x1fff9110

0000f790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f790:	b500      	push	{lr}
    f792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f794:	f7f1 fd6e 	bl	1274 <Sys_GetCoreID>
    f798:	4603      	mov	r3, r0
    f79a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f79c:	4a0d      	ldr	r2, [pc, #52]	; (f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f79e:	9b01      	ldr	r3, [sp, #4]
    f7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7a4:	1e5a      	subs	r2, r3, #1
    f7a6:	490b      	ldr	r1, [pc, #44]	; (f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f7a8:	9b01      	ldr	r3, [sp, #4]
    f7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f7ae:	4a0a      	ldr	r2, [pc, #40]	; (f7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f7b0:	9b01      	ldr	r3, [sp, #4]
    f7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7b6:	f003 0301 	and.w	r3, r3, #1
    f7ba:	2b00      	cmp	r3, #0
    f7bc:	d106      	bne.n	f7cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f7be:	4a05      	ldr	r2, [pc, #20]	; (f7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f7c0:	9b01      	ldr	r3, [sp, #4]
    f7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	d100      	bne.n	f7cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7cc:	bf00      	nop
    f7ce:	b003      	add	sp, #12
    f7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f7d4:	1fff9114 	.word	0x1fff9114
    f7d8:	1fff9110 	.word	0x1fff9110

0000f7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f7dc:	b500      	push	{lr}
    f7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7e0:	f7f1 fd48 	bl	1274 <Sys_GetCoreID>
    f7e4:	4603      	mov	r3, r0
    f7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f7e8:	4a10      	ldr	r2, [pc, #64]	; (f82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f7ea:	9b01      	ldr	r3, [sp, #4]
    f7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f0:	2b00      	cmp	r3, #0
    f7f2:	d10d      	bne.n	f810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7f4:	f7f1 fc6e 	bl	10d4 <Port_schm_read_msr>
    f7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7fa:	9b00      	ldr	r3, [sp, #0]
    f7fc:	f003 0301 	and.w	r3, r3, #1
    f800:	2b00      	cmp	r3, #0
    f802:	d100      	bne.n	f806 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f806:	490a      	ldr	r1, [pc, #40]	; (f830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f808:	9b01      	ldr	r3, [sp, #4]
    f80a:	9a00      	ldr	r2, [sp, #0]
    f80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f810:	4a06      	ldr	r2, [pc, #24]	; (f82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f812:	9b01      	ldr	r3, [sp, #4]
    f814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f818:	1c5a      	adds	r2, r3, #1
    f81a:	4904      	ldr	r1, [pc, #16]	; (f82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f81c:	9b01      	ldr	r3, [sp, #4]
    f81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f822:	bf00      	nop
    f824:	b003      	add	sp, #12
    f826:	f85d fb04 	ldr.w	pc, [sp], #4
    f82a:	bf00      	nop
    f82c:	1fff911c 	.word	0x1fff911c
    f830:	1fff9118 	.word	0x1fff9118

0000f834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f834:	b500      	push	{lr}
    f836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f838:	f7f1 fd1c 	bl	1274 <Sys_GetCoreID>
    f83c:	4603      	mov	r3, r0
    f83e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f840:	4a0d      	ldr	r2, [pc, #52]	; (f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f842:	9b01      	ldr	r3, [sp, #4]
    f844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f848:	1e5a      	subs	r2, r3, #1
    f84a:	490b      	ldr	r1, [pc, #44]	; (f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f84c:	9b01      	ldr	r3, [sp, #4]
    f84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f852:	4a0a      	ldr	r2, [pc, #40]	; (f87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f854:	9b01      	ldr	r3, [sp, #4]
    f856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f85a:	f003 0301 	and.w	r3, r3, #1
    f85e:	2b00      	cmp	r3, #0
    f860:	d106      	bne.n	f870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f862:	4a05      	ldr	r2, [pc, #20]	; (f878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f86a:	2b00      	cmp	r3, #0
    f86c:	d100      	bne.n	f870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f870:	bf00      	nop
    f872:	b003      	add	sp, #12
    f874:	f85d fb04 	ldr.w	pc, [sp], #4
    f878:	1fff911c 	.word	0x1fff911c
    f87c:	1fff9118 	.word	0x1fff9118

0000f880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f880:	b500      	push	{lr}
    f882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f884:	f7f1 fcf6 	bl	1274 <Sys_GetCoreID>
    f888:	4603      	mov	r3, r0
    f88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f88c:	4a10      	ldr	r2, [pc, #64]	; (f8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f88e:	9b01      	ldr	r3, [sp, #4]
    f890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f894:	2b00      	cmp	r3, #0
    f896:	d10d      	bne.n	f8b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f898:	f7f1 fc1c 	bl	10d4 <Port_schm_read_msr>
    f89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f89e:	9b00      	ldr	r3, [sp, #0]
    f8a0:	f003 0301 	and.w	r3, r3, #1
    f8a4:	2b00      	cmp	r3, #0
    f8a6:	d100      	bne.n	f8aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f8aa:	490a      	ldr	r1, [pc, #40]	; (f8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f8ac:	9b01      	ldr	r3, [sp, #4]
    f8ae:	9a00      	ldr	r2, [sp, #0]
    f8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f8b4:	4a06      	ldr	r2, [pc, #24]	; (f8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f8b6:	9b01      	ldr	r3, [sp, #4]
    f8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8bc:	1c5a      	adds	r2, r3, #1
    f8be:	4904      	ldr	r1, [pc, #16]	; (f8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f8c0:	9b01      	ldr	r3, [sp, #4]
    f8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8c6:	bf00      	nop
    f8c8:	b003      	add	sp, #12
    f8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f8ce:	bf00      	nop
    f8d0:	1fff9124 	.word	0x1fff9124
    f8d4:	1fff9120 	.word	0x1fff9120

0000f8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f8d8:	b500      	push	{lr}
    f8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8dc:	f7f1 fcca 	bl	1274 <Sys_GetCoreID>
    f8e0:	4603      	mov	r3, r0
    f8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f8e4:	4a0d      	ldr	r2, [pc, #52]	; (f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f8e6:	9b01      	ldr	r3, [sp, #4]
    f8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8ec:	1e5a      	subs	r2, r3, #1
    f8ee:	490b      	ldr	r1, [pc, #44]	; (f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f8f0:	9b01      	ldr	r3, [sp, #4]
    f8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f8f6:	4a0a      	ldr	r2, [pc, #40]	; (f920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f8f8:	9b01      	ldr	r3, [sp, #4]
    f8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8fe:	f003 0301 	and.w	r3, r3, #1
    f902:	2b00      	cmp	r3, #0
    f904:	d106      	bne.n	f914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f906:	4a05      	ldr	r2, [pc, #20]	; (f91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f908:	9b01      	ldr	r3, [sp, #4]
    f90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f90e:	2b00      	cmp	r3, #0
    f910:	d100      	bne.n	f914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f914:	bf00      	nop
    f916:	b003      	add	sp, #12
    f918:	f85d fb04 	ldr.w	pc, [sp], #4
    f91c:	1fff9124 	.word	0x1fff9124
    f920:	1fff9120 	.word	0x1fff9120

0000f924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f924:	b500      	push	{lr}
    f926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f928:	f7f1 fca4 	bl	1274 <Sys_GetCoreID>
    f92c:	4603      	mov	r3, r0
    f92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f930:	4a10      	ldr	r2, [pc, #64]	; (f974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f932:	9b01      	ldr	r3, [sp, #4]
    f934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f938:	2b00      	cmp	r3, #0
    f93a:	d10d      	bne.n	f958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f93c:	f7f1 fbca 	bl	10d4 <Port_schm_read_msr>
    f940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f942:	9b00      	ldr	r3, [sp, #0]
    f944:	f003 0301 	and.w	r3, r3, #1
    f948:	2b00      	cmp	r3, #0
    f94a:	d100      	bne.n	f94e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f94e:	490a      	ldr	r1, [pc, #40]	; (f978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f950:	9b01      	ldr	r3, [sp, #4]
    f952:	9a00      	ldr	r2, [sp, #0]
    f954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f958:	4a06      	ldr	r2, [pc, #24]	; (f974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f95a:	9b01      	ldr	r3, [sp, #4]
    f95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f960:	1c5a      	adds	r2, r3, #1
    f962:	4904      	ldr	r1, [pc, #16]	; (f974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f964:	9b01      	ldr	r3, [sp, #4]
    f966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f96a:	bf00      	nop
    f96c:	b003      	add	sp, #12
    f96e:	f85d fb04 	ldr.w	pc, [sp], #4
    f972:	bf00      	nop
    f974:	1fff912c 	.word	0x1fff912c
    f978:	1fff9128 	.word	0x1fff9128

0000f97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f97c:	b500      	push	{lr}
    f97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f980:	f7f1 fc78 	bl	1274 <Sys_GetCoreID>
    f984:	4603      	mov	r3, r0
    f986:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f988:	4a0d      	ldr	r2, [pc, #52]	; (f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f98a:	9b01      	ldr	r3, [sp, #4]
    f98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f990:	1e5a      	subs	r2, r3, #1
    f992:	490b      	ldr	r1, [pc, #44]	; (f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f994:	9b01      	ldr	r3, [sp, #4]
    f996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f99a:	4a0a      	ldr	r2, [pc, #40]	; (f9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f99c:	9b01      	ldr	r3, [sp, #4]
    f99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a2:	f003 0301 	and.w	r3, r3, #1
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	d106      	bne.n	f9b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f9aa:	4a05      	ldr	r2, [pc, #20]	; (f9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f9ac:	9b01      	ldr	r3, [sp, #4]
    f9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d100      	bne.n	f9b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9b8:	bf00      	nop
    f9ba:	b003      	add	sp, #12
    f9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f9c0:	1fff912c 	.word	0x1fff912c
    f9c4:	1fff9128 	.word	0x1fff9128

0000f9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f9c8:	b500      	push	{lr}
    f9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9cc:	f7f1 fc52 	bl	1274 <Sys_GetCoreID>
    f9d0:	4603      	mov	r3, r0
    f9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f9d4:	4a10      	ldr	r2, [pc, #64]	; (fa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f9d6:	9b01      	ldr	r3, [sp, #4]
    f9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9dc:	2b00      	cmp	r3, #0
    f9de:	d10d      	bne.n	f9fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9e0:	f7f1 fb78 	bl	10d4 <Port_schm_read_msr>
    f9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9e6:	9b00      	ldr	r3, [sp, #0]
    f9e8:	f003 0301 	and.w	r3, r3, #1
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d100      	bne.n	f9f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f9f2:	490a      	ldr	r1, [pc, #40]	; (fa1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f9f4:	9b01      	ldr	r3, [sp, #4]
    f9f6:	9a00      	ldr	r2, [sp, #0]
    f9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f9fc:	4a06      	ldr	r2, [pc, #24]	; (fa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f9fe:	9b01      	ldr	r3, [sp, #4]
    fa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa04:	1c5a      	adds	r2, r3, #1
    fa06:	4904      	ldr	r1, [pc, #16]	; (fa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    fa08:	9b01      	ldr	r3, [sp, #4]
    fa0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa0e:	bf00      	nop
    fa10:	b003      	add	sp, #12
    fa12:	f85d fb04 	ldr.w	pc, [sp], #4
    fa16:	bf00      	nop
    fa18:	1fff9134 	.word	0x1fff9134
    fa1c:	1fff9130 	.word	0x1fff9130

0000fa20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    fa20:	b500      	push	{lr}
    fa22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa24:	f7f1 fc26 	bl	1274 <Sys_GetCoreID>
    fa28:	4603      	mov	r3, r0
    fa2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    fa2c:	4a0d      	ldr	r2, [pc, #52]	; (fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    fa2e:	9b01      	ldr	r3, [sp, #4]
    fa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa34:	1e5a      	subs	r2, r3, #1
    fa36:	490b      	ldr	r1, [pc, #44]	; (fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    fa38:	9b01      	ldr	r3, [sp, #4]
    fa3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    fa3e:	4a0a      	ldr	r2, [pc, #40]	; (fa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    fa40:	9b01      	ldr	r3, [sp, #4]
    fa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa46:	f003 0301 	and.w	r3, r3, #1
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d106      	bne.n	fa5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    fa4e:	4a05      	ldr	r2, [pc, #20]	; (fa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    fa50:	9b01      	ldr	r3, [sp, #4]
    fa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa56:	2b00      	cmp	r3, #0
    fa58:	d100      	bne.n	fa5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa5c:	bf00      	nop
    fa5e:	b003      	add	sp, #12
    fa60:	f85d fb04 	ldr.w	pc, [sp], #4
    fa64:	1fff9134 	.word	0x1fff9134
    fa68:	1fff9130 	.word	0x1fff9130

0000fa6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    fa6c:	b500      	push	{lr}
    fa6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa70:	f7f1 fc00 	bl	1274 <Sys_GetCoreID>
    fa74:	4603      	mov	r3, r0
    fa76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    fa78:	4a10      	ldr	r2, [pc, #64]	; (fabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    fa7a:	9b01      	ldr	r3, [sp, #4]
    fa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa80:	2b00      	cmp	r3, #0
    fa82:	d10d      	bne.n	faa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa84:	f7f1 fb26 	bl	10d4 <Port_schm_read_msr>
    fa88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa8a:	9b00      	ldr	r3, [sp, #0]
    fa8c:	f003 0301 	and.w	r3, r3, #1
    fa90:	2b00      	cmp	r3, #0
    fa92:	d100      	bne.n	fa96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    fa96:	490a      	ldr	r1, [pc, #40]	; (fac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    fa98:	9b01      	ldr	r3, [sp, #4]
    fa9a:	9a00      	ldr	r2, [sp, #0]
    fa9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    faa0:	4a06      	ldr	r2, [pc, #24]	; (fabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    faa2:	9b01      	ldr	r3, [sp, #4]
    faa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faa8:	1c5a      	adds	r2, r3, #1
    faaa:	4904      	ldr	r1, [pc, #16]	; (fabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    faac:	9b01      	ldr	r3, [sp, #4]
    faae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fab2:	bf00      	nop
    fab4:	b003      	add	sp, #12
    fab6:	f85d fb04 	ldr.w	pc, [sp], #4
    faba:	bf00      	nop
    fabc:	1fff913c 	.word	0x1fff913c
    fac0:	1fff9138 	.word	0x1fff9138

0000fac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    fac4:	b500      	push	{lr}
    fac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fac8:	f7f1 fbd4 	bl	1274 <Sys_GetCoreID>
    facc:	4603      	mov	r3, r0
    face:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    fad0:	4a0d      	ldr	r2, [pc, #52]	; (fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    fad2:	9b01      	ldr	r3, [sp, #4]
    fad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fad8:	1e5a      	subs	r2, r3, #1
    fada:	490b      	ldr	r1, [pc, #44]	; (fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    fadc:	9b01      	ldr	r3, [sp, #4]
    fade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    fae2:	4a0a      	ldr	r2, [pc, #40]	; (fb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    fae4:	9b01      	ldr	r3, [sp, #4]
    fae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faea:	f003 0301 	and.w	r3, r3, #1
    faee:	2b00      	cmp	r3, #0
    faf0:	d106      	bne.n	fb00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    faf2:	4a05      	ldr	r2, [pc, #20]	; (fb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    faf4:	9b01      	ldr	r3, [sp, #4]
    faf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fafa:	2b00      	cmp	r3, #0
    fafc:	d100      	bne.n	fb00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb00:	bf00      	nop
    fb02:	b003      	add	sp, #12
    fb04:	f85d fb04 	ldr.w	pc, [sp], #4
    fb08:	1fff913c 	.word	0x1fff913c
    fb0c:	1fff9138 	.word	0x1fff9138

0000fb10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    fb10:	b500      	push	{lr}
    fb12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb14:	f7f1 fbae 	bl	1274 <Sys_GetCoreID>
    fb18:	4603      	mov	r3, r0
    fb1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    fb1c:	4a10      	ldr	r2, [pc, #64]	; (fb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    fb1e:	9b01      	ldr	r3, [sp, #4]
    fb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb24:	2b00      	cmp	r3, #0
    fb26:	d10d      	bne.n	fb44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb28:	f7f1 fad4 	bl	10d4 <Port_schm_read_msr>
    fb2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb2e:	9b00      	ldr	r3, [sp, #0]
    fb30:	f003 0301 	and.w	r3, r3, #1
    fb34:	2b00      	cmp	r3, #0
    fb36:	d100      	bne.n	fb3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    fb3a:	490a      	ldr	r1, [pc, #40]	; (fb64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    fb3c:	9b01      	ldr	r3, [sp, #4]
    fb3e:	9a00      	ldr	r2, [sp, #0]
    fb40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    fb44:	4a06      	ldr	r2, [pc, #24]	; (fb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    fb46:	9b01      	ldr	r3, [sp, #4]
    fb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb4c:	1c5a      	adds	r2, r3, #1
    fb4e:	4904      	ldr	r1, [pc, #16]	; (fb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    fb50:	9b01      	ldr	r3, [sp, #4]
    fb52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb56:	bf00      	nop
    fb58:	b003      	add	sp, #12
    fb5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fb5e:	bf00      	nop
    fb60:	1fff9144 	.word	0x1fff9144
    fb64:	1fff9140 	.word	0x1fff9140

0000fb68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    fb68:	b500      	push	{lr}
    fb6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb6c:	f7f1 fb82 	bl	1274 <Sys_GetCoreID>
    fb70:	4603      	mov	r3, r0
    fb72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    fb74:	4a0d      	ldr	r2, [pc, #52]	; (fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    fb76:	9b01      	ldr	r3, [sp, #4]
    fb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb7c:	1e5a      	subs	r2, r3, #1
    fb7e:	490b      	ldr	r1, [pc, #44]	; (fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    fb80:	9b01      	ldr	r3, [sp, #4]
    fb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    fb86:	4a0a      	ldr	r2, [pc, #40]	; (fbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    fb88:	9b01      	ldr	r3, [sp, #4]
    fb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb8e:	f003 0301 	and.w	r3, r3, #1
    fb92:	2b00      	cmp	r3, #0
    fb94:	d106      	bne.n	fba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    fb96:	4a05      	ldr	r2, [pc, #20]	; (fbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    fb98:	9b01      	ldr	r3, [sp, #4]
    fb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb9e:	2b00      	cmp	r3, #0
    fba0:	d100      	bne.n	fba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fba4:	bf00      	nop
    fba6:	b003      	add	sp, #12
    fba8:	f85d fb04 	ldr.w	pc, [sp], #4
    fbac:	1fff9144 	.word	0x1fff9144
    fbb0:	1fff9140 	.word	0x1fff9140

0000fbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    fbb4:	b500      	push	{lr}
    fbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbb8:	f7f1 fb5c 	bl	1274 <Sys_GetCoreID>
    fbbc:	4603      	mov	r3, r0
    fbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    fbc0:	4a10      	ldr	r2, [pc, #64]	; (fc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    fbc2:	9b01      	ldr	r3, [sp, #4]
    fbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbc8:	2b00      	cmp	r3, #0
    fbca:	d10d      	bne.n	fbe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbcc:	f7f1 fa82 	bl	10d4 <Port_schm_read_msr>
    fbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbd2:	9b00      	ldr	r3, [sp, #0]
    fbd4:	f003 0301 	and.w	r3, r3, #1
    fbd8:	2b00      	cmp	r3, #0
    fbda:	d100      	bne.n	fbde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    fbde:	490a      	ldr	r1, [pc, #40]	; (fc08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    fbe0:	9b01      	ldr	r3, [sp, #4]
    fbe2:	9a00      	ldr	r2, [sp, #0]
    fbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    fbe8:	4a06      	ldr	r2, [pc, #24]	; (fc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    fbea:	9b01      	ldr	r3, [sp, #4]
    fbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbf0:	1c5a      	adds	r2, r3, #1
    fbf2:	4904      	ldr	r1, [pc, #16]	; (fc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    fbf4:	9b01      	ldr	r3, [sp, #4]
    fbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbfa:	bf00      	nop
    fbfc:	b003      	add	sp, #12
    fbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    fc02:	bf00      	nop
    fc04:	1fff914c 	.word	0x1fff914c
    fc08:	1fff9148 	.word	0x1fff9148

0000fc0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    fc0c:	b500      	push	{lr}
    fc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc10:	f7f1 fb30 	bl	1274 <Sys_GetCoreID>
    fc14:	4603      	mov	r3, r0
    fc16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    fc18:	4a0d      	ldr	r2, [pc, #52]	; (fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    fc1a:	9b01      	ldr	r3, [sp, #4]
    fc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc20:	1e5a      	subs	r2, r3, #1
    fc22:	490b      	ldr	r1, [pc, #44]	; (fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    fc24:	9b01      	ldr	r3, [sp, #4]
    fc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    fc2a:	4a0a      	ldr	r2, [pc, #40]	; (fc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    fc2c:	9b01      	ldr	r3, [sp, #4]
    fc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc32:	f003 0301 	and.w	r3, r3, #1
    fc36:	2b00      	cmp	r3, #0
    fc38:	d106      	bne.n	fc48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    fc3a:	4a05      	ldr	r2, [pc, #20]	; (fc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    fc3c:	9b01      	ldr	r3, [sp, #4]
    fc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc42:	2b00      	cmp	r3, #0
    fc44:	d100      	bne.n	fc48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc48:	bf00      	nop
    fc4a:	b003      	add	sp, #12
    fc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    fc50:	1fff914c 	.word	0x1fff914c
    fc54:	1fff9148 	.word	0x1fff9148

0000fc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    fc58:	b500      	push	{lr}
    fc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc5c:	f7f1 fb0a 	bl	1274 <Sys_GetCoreID>
    fc60:	4603      	mov	r3, r0
    fc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    fc64:	4a10      	ldr	r2, [pc, #64]	; (fca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fc66:	9b01      	ldr	r3, [sp, #4]
    fc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d10d      	bne.n	fc8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc70:	f7f1 fa30 	bl	10d4 <Port_schm_read_msr>
    fc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc76:	9b00      	ldr	r3, [sp, #0]
    fc78:	f003 0301 	and.w	r3, r3, #1
    fc7c:	2b00      	cmp	r3, #0
    fc7e:	d100      	bne.n	fc82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    fc82:	490a      	ldr	r1, [pc, #40]	; (fcac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    fc84:	9b01      	ldr	r3, [sp, #4]
    fc86:	9a00      	ldr	r2, [sp, #0]
    fc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    fc8c:	4a06      	ldr	r2, [pc, #24]	; (fca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fc8e:	9b01      	ldr	r3, [sp, #4]
    fc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc94:	1c5a      	adds	r2, r3, #1
    fc96:	4904      	ldr	r1, [pc, #16]	; (fca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    fc98:	9b01      	ldr	r3, [sp, #4]
    fc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc9e:	bf00      	nop
    fca0:	b003      	add	sp, #12
    fca2:	f85d fb04 	ldr.w	pc, [sp], #4
    fca6:	bf00      	nop
    fca8:	1fff9154 	.word	0x1fff9154
    fcac:	1fff9150 	.word	0x1fff9150

0000fcb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    fcb0:	b500      	push	{lr}
    fcb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcb4:	f7f1 fade 	bl	1274 <Sys_GetCoreID>
    fcb8:	4603      	mov	r3, r0
    fcba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    fcbc:	4a0d      	ldr	r2, [pc, #52]	; (fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fcbe:	9b01      	ldr	r3, [sp, #4]
    fcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcc4:	1e5a      	subs	r2, r3, #1
    fcc6:	490b      	ldr	r1, [pc, #44]	; (fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fcc8:	9b01      	ldr	r3, [sp, #4]
    fcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    fcce:	4a0a      	ldr	r2, [pc, #40]	; (fcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    fcd0:	9b01      	ldr	r3, [sp, #4]
    fcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcd6:	f003 0301 	and.w	r3, r3, #1
    fcda:	2b00      	cmp	r3, #0
    fcdc:	d106      	bne.n	fcec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    fcde:	4a05      	ldr	r2, [pc, #20]	; (fcf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    fce0:	9b01      	ldr	r3, [sp, #4]
    fce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fce6:	2b00      	cmp	r3, #0
    fce8:	d100      	bne.n	fcec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcec:	bf00      	nop
    fcee:	b003      	add	sp, #12
    fcf0:	f85d fb04 	ldr.w	pc, [sp], #4
    fcf4:	1fff9154 	.word	0x1fff9154
    fcf8:	1fff9150 	.word	0x1fff9150

0000fcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    fcfc:	b500      	push	{lr}
    fcfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd00:	f7f1 fab8 	bl	1274 <Sys_GetCoreID>
    fd04:	4603      	mov	r3, r0
    fd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    fd08:	4a10      	ldr	r2, [pc, #64]	; (fd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fd0a:	9b01      	ldr	r3, [sp, #4]
    fd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd10:	2b00      	cmp	r3, #0
    fd12:	d10d      	bne.n	fd30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd14:	f7f1 f9de 	bl	10d4 <Port_schm_read_msr>
    fd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd1a:	9b00      	ldr	r3, [sp, #0]
    fd1c:	f003 0301 	and.w	r3, r3, #1
    fd20:	2b00      	cmp	r3, #0
    fd22:	d100      	bne.n	fd26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    fd26:	490a      	ldr	r1, [pc, #40]	; (fd50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    fd28:	9b01      	ldr	r3, [sp, #4]
    fd2a:	9a00      	ldr	r2, [sp, #0]
    fd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    fd30:	4a06      	ldr	r2, [pc, #24]	; (fd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fd32:	9b01      	ldr	r3, [sp, #4]
    fd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd38:	1c5a      	adds	r2, r3, #1
    fd3a:	4904      	ldr	r1, [pc, #16]	; (fd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    fd3c:	9b01      	ldr	r3, [sp, #4]
    fd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd42:	bf00      	nop
    fd44:	b003      	add	sp, #12
    fd46:	f85d fb04 	ldr.w	pc, [sp], #4
    fd4a:	bf00      	nop
    fd4c:	1fff915c 	.word	0x1fff915c
    fd50:	1fff9158 	.word	0x1fff9158

0000fd54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    fd54:	b500      	push	{lr}
    fd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd58:	f7f1 fa8c 	bl	1274 <Sys_GetCoreID>
    fd5c:	4603      	mov	r3, r0
    fd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    fd60:	4a0d      	ldr	r2, [pc, #52]	; (fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fd62:	9b01      	ldr	r3, [sp, #4]
    fd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd68:	1e5a      	subs	r2, r3, #1
    fd6a:	490b      	ldr	r1, [pc, #44]	; (fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fd6c:	9b01      	ldr	r3, [sp, #4]
    fd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    fd72:	4a0a      	ldr	r2, [pc, #40]	; (fd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd7a:	f003 0301 	and.w	r3, r3, #1
    fd7e:	2b00      	cmp	r3, #0
    fd80:	d106      	bne.n	fd90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    fd82:	4a05      	ldr	r2, [pc, #20]	; (fd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    fd84:	9b01      	ldr	r3, [sp, #4]
    fd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d100      	bne.n	fd90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd90:	bf00      	nop
    fd92:	b003      	add	sp, #12
    fd94:	f85d fb04 	ldr.w	pc, [sp], #4
    fd98:	1fff915c 	.word	0x1fff915c
    fd9c:	1fff9158 	.word	0x1fff9158

0000fda0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    fda0:	b500      	push	{lr}
    fda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fda4:	f7f1 fa66 	bl	1274 <Sys_GetCoreID>
    fda8:	4603      	mov	r3, r0
    fdaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    fdac:	4a10      	ldr	r2, [pc, #64]	; (fdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fdae:	9b01      	ldr	r3, [sp, #4]
    fdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb4:	2b00      	cmp	r3, #0
    fdb6:	d10d      	bne.n	fdd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdb8:	f7f1 f98c 	bl	10d4 <Port_schm_read_msr>
    fdbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdbe:	9b00      	ldr	r3, [sp, #0]
    fdc0:	f003 0301 	and.w	r3, r3, #1
    fdc4:	2b00      	cmp	r3, #0
    fdc6:	d100      	bne.n	fdca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    fdca:	490a      	ldr	r1, [pc, #40]	; (fdf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    fdcc:	9b01      	ldr	r3, [sp, #4]
    fdce:	9a00      	ldr	r2, [sp, #0]
    fdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    fdd4:	4a06      	ldr	r2, [pc, #24]	; (fdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fdd6:	9b01      	ldr	r3, [sp, #4]
    fdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fddc:	1c5a      	adds	r2, r3, #1
    fdde:	4904      	ldr	r1, [pc, #16]	; (fdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    fde0:	9b01      	ldr	r3, [sp, #4]
    fde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fde6:	bf00      	nop
    fde8:	b003      	add	sp, #12
    fdea:	f85d fb04 	ldr.w	pc, [sp], #4
    fdee:	bf00      	nop
    fdf0:	1fff9164 	.word	0x1fff9164
    fdf4:	1fff9160 	.word	0x1fff9160

0000fdf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    fdf8:	b500      	push	{lr}
    fdfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdfc:	f7f1 fa3a 	bl	1274 <Sys_GetCoreID>
    fe00:	4603      	mov	r3, r0
    fe02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    fe04:	4a0d      	ldr	r2, [pc, #52]	; (fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fe06:	9b01      	ldr	r3, [sp, #4]
    fe08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe0c:	1e5a      	subs	r2, r3, #1
    fe0e:	490b      	ldr	r1, [pc, #44]	; (fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fe10:	9b01      	ldr	r3, [sp, #4]
    fe12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    fe16:	4a0a      	ldr	r2, [pc, #40]	; (fe40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    fe18:	9b01      	ldr	r3, [sp, #4]
    fe1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe1e:	f003 0301 	and.w	r3, r3, #1
    fe22:	2b00      	cmp	r3, #0
    fe24:	d106      	bne.n	fe34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    fe26:	4a05      	ldr	r2, [pc, #20]	; (fe3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d100      	bne.n	fe34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe34:	bf00      	nop
    fe36:	b003      	add	sp, #12
    fe38:	f85d fb04 	ldr.w	pc, [sp], #4
    fe3c:	1fff9164 	.word	0x1fff9164
    fe40:	1fff9160 	.word	0x1fff9160

0000fe44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    fe44:	b500      	push	{lr}
    fe46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe48:	f7f1 fa14 	bl	1274 <Sys_GetCoreID>
    fe4c:	4603      	mov	r3, r0
    fe4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    fe50:	4a10      	ldr	r2, [pc, #64]	; (fe94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    fe52:	9b01      	ldr	r3, [sp, #4]
    fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe58:	2b00      	cmp	r3, #0
    fe5a:	d10d      	bne.n	fe78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe5c:	f7f1 f93a 	bl	10d4 <Port_schm_read_msr>
    fe60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe62:	9b00      	ldr	r3, [sp, #0]
    fe64:	f003 0301 	and.w	r3, r3, #1
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d100      	bne.n	fe6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    fe6e:	490a      	ldr	r1, [pc, #40]	; (fe98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    fe70:	9b01      	ldr	r3, [sp, #4]
    fe72:	9a00      	ldr	r2, [sp, #0]
    fe74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    fe78:	4a06      	ldr	r2, [pc, #24]	; (fe94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    fe7a:	9b01      	ldr	r3, [sp, #4]
    fe7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe80:	1c5a      	adds	r2, r3, #1
    fe82:	4904      	ldr	r1, [pc, #16]	; (fe94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    fe84:	9b01      	ldr	r3, [sp, #4]
    fe86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe8a:	bf00      	nop
    fe8c:	b003      	add	sp, #12
    fe8e:	f85d fb04 	ldr.w	pc, [sp], #4
    fe92:	bf00      	nop
    fe94:	1fff916c 	.word	0x1fff916c
    fe98:	1fff9168 	.word	0x1fff9168

0000fe9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    fe9c:	b500      	push	{lr}
    fe9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fea0:	f7f1 f9e8 	bl	1274 <Sys_GetCoreID>
    fea4:	4603      	mov	r3, r0
    fea6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    fea8:	4a0d      	ldr	r2, [pc, #52]	; (fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    feaa:	9b01      	ldr	r3, [sp, #4]
    feac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feb0:	1e5a      	subs	r2, r3, #1
    feb2:	490b      	ldr	r1, [pc, #44]	; (fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    feb4:	9b01      	ldr	r3, [sp, #4]
    feb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    feba:	4a0a      	ldr	r2, [pc, #40]	; (fee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    febc:	9b01      	ldr	r3, [sp, #4]
    febe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec2:	f003 0301 	and.w	r3, r3, #1
    fec6:	2b00      	cmp	r3, #0
    fec8:	d106      	bne.n	fed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    feca:	4a05      	ldr	r2, [pc, #20]	; (fee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    fecc:	9b01      	ldr	r3, [sp, #4]
    fece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fed2:	2b00      	cmp	r3, #0
    fed4:	d100      	bne.n	fed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fed8:	bf00      	nop
    feda:	b003      	add	sp, #12
    fedc:	f85d fb04 	ldr.w	pc, [sp], #4
    fee0:	1fff916c 	.word	0x1fff916c
    fee4:	1fff9168 	.word	0x1fff9168

0000fee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    fee8:	b500      	push	{lr}
    feea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feec:	f7f1 f9c2 	bl	1274 <Sys_GetCoreID>
    fef0:	4603      	mov	r3, r0
    fef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    fef4:	4a10      	ldr	r2, [pc, #64]	; (ff38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    fef6:	9b01      	ldr	r3, [sp, #4]
    fef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fefc:	2b00      	cmp	r3, #0
    fefe:	d10d      	bne.n	ff1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff00:	f7f1 f8e8 	bl	10d4 <Port_schm_read_msr>
    ff04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff06:	9b00      	ldr	r3, [sp, #0]
    ff08:	f003 0301 	and.w	r3, r3, #1
    ff0c:	2b00      	cmp	r3, #0
    ff0e:	d100      	bne.n	ff12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    ff12:	490a      	ldr	r1, [pc, #40]	; (ff3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    ff14:	9b01      	ldr	r3, [sp, #4]
    ff16:	9a00      	ldr	r2, [sp, #0]
    ff18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    ff1c:	4a06      	ldr	r2, [pc, #24]	; (ff38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ff1e:	9b01      	ldr	r3, [sp, #4]
    ff20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff24:	1c5a      	adds	r2, r3, #1
    ff26:	4904      	ldr	r1, [pc, #16]	; (ff38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    ff28:	9b01      	ldr	r3, [sp, #4]
    ff2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff2e:	bf00      	nop
    ff30:	b003      	add	sp, #12
    ff32:	f85d fb04 	ldr.w	pc, [sp], #4
    ff36:	bf00      	nop
    ff38:	1fff9174 	.word	0x1fff9174
    ff3c:	1fff9170 	.word	0x1fff9170

0000ff40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    ff40:	b500      	push	{lr}
    ff42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff44:	f7f1 f996 	bl	1274 <Sys_GetCoreID>
    ff48:	4603      	mov	r3, r0
    ff4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    ff4c:	4a0d      	ldr	r2, [pc, #52]	; (ff84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ff4e:	9b01      	ldr	r3, [sp, #4]
    ff50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff54:	1e5a      	subs	r2, r3, #1
    ff56:	490b      	ldr	r1, [pc, #44]	; (ff84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ff58:	9b01      	ldr	r3, [sp, #4]
    ff5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    ff5e:	4a0a      	ldr	r2, [pc, #40]	; (ff88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    ff60:	9b01      	ldr	r3, [sp, #4]
    ff62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff66:	f003 0301 	and.w	r3, r3, #1
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	d106      	bne.n	ff7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    ff6e:	4a05      	ldr	r2, [pc, #20]	; (ff84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    ff70:	9b01      	ldr	r3, [sp, #4]
    ff72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff76:	2b00      	cmp	r3, #0
    ff78:	d100      	bne.n	ff7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff7c:	bf00      	nop
    ff7e:	b003      	add	sp, #12
    ff80:	f85d fb04 	ldr.w	pc, [sp], #4
    ff84:	1fff9174 	.word	0x1fff9174
    ff88:	1fff9170 	.word	0x1fff9170

0000ff8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    ff8c:	b500      	push	{lr}
    ff8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff90:	f7f1 f970 	bl	1274 <Sys_GetCoreID>
    ff94:	4603      	mov	r3, r0
    ff96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    ff98:	4a10      	ldr	r2, [pc, #64]	; (ffdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ff9a:	9b01      	ldr	r3, [sp, #4]
    ff9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa0:	2b00      	cmp	r3, #0
    ffa2:	d10d      	bne.n	ffc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffa4:	f7f1 f896 	bl	10d4 <Port_schm_read_msr>
    ffa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffaa:	9b00      	ldr	r3, [sp, #0]
    ffac:	f003 0301 	and.w	r3, r3, #1
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d100      	bne.n	ffb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ffb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    ffb6:	490a      	ldr	r1, [pc, #40]	; (ffe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    ffb8:	9b01      	ldr	r3, [sp, #4]
    ffba:	9a00      	ldr	r2, [sp, #0]
    ffbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    ffc0:	4a06      	ldr	r2, [pc, #24]	; (ffdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ffc2:	9b01      	ldr	r3, [sp, #4]
    ffc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc8:	1c5a      	adds	r2, r3, #1
    ffca:	4904      	ldr	r1, [pc, #16]	; (ffdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    ffcc:	9b01      	ldr	r3, [sp, #4]
    ffce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffd2:	bf00      	nop
    ffd4:	b003      	add	sp, #12
    ffd6:	f85d fb04 	ldr.w	pc, [sp], #4
    ffda:	bf00      	nop
    ffdc:	1fff917c 	.word	0x1fff917c
    ffe0:	1fff9178 	.word	0x1fff9178

0000ffe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    ffe4:	b500      	push	{lr}
    ffe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffe8:	f7f1 f944 	bl	1274 <Sys_GetCoreID>
    ffec:	4603      	mov	r3, r0
    ffee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    fff0:	4a0d      	ldr	r2, [pc, #52]	; (10028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fff2:	9b01      	ldr	r3, [sp, #4]
    fff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fff8:	1e5a      	subs	r2, r3, #1
    fffa:	490b      	ldr	r1, [pc, #44]	; (10028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fffc:	9b01      	ldr	r3, [sp, #4]
    fffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10002:	4a0a      	ldr	r2, [pc, #40]	; (1002c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   10004:	9b01      	ldr	r3, [sp, #4]
   10006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1000a:	f003 0301 	and.w	r3, r3, #1
   1000e:	2b00      	cmp	r3, #0
   10010:	d106      	bne.n	10020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   10012:	4a05      	ldr	r2, [pc, #20]	; (10028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   10014:	9b01      	ldr	r3, [sp, #4]
   10016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1001a:	2b00      	cmp	r3, #0
   1001c:	d100      	bne.n	10020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1001e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10020:	bf00      	nop
   10022:	b003      	add	sp, #12
   10024:	f85d fb04 	ldr.w	pc, [sp], #4
   10028:	1fff917c 	.word	0x1fff917c
   1002c:	1fff9178 	.word	0x1fff9178

00010030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   10030:	b500      	push	{lr}
   10032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10034:	f7f1 f91e 	bl	1274 <Sys_GetCoreID>
   10038:	4603      	mov	r3, r0
   1003a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1003c:	4a10      	ldr	r2, [pc, #64]	; (10080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1003e:	9b01      	ldr	r3, [sp, #4]
   10040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10044:	2b00      	cmp	r3, #0
   10046:	d10d      	bne.n	10064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10048:	f7f1 f844 	bl	10d4 <Port_schm_read_msr>
   1004c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1004e:	9b00      	ldr	r3, [sp, #0]
   10050:	f003 0301 	and.w	r3, r3, #1
   10054:	2b00      	cmp	r3, #0
   10056:	d100      	bne.n	1005a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1005a:	490a      	ldr	r1, [pc, #40]	; (10084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   1005c:	9b01      	ldr	r3, [sp, #4]
   1005e:	9a00      	ldr	r2, [sp, #0]
   10060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   10064:	4a06      	ldr	r2, [pc, #24]	; (10080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10066:	9b01      	ldr	r3, [sp, #4]
   10068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1006c:	1c5a      	adds	r2, r3, #1
   1006e:	4904      	ldr	r1, [pc, #16]	; (10080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   10070:	9b01      	ldr	r3, [sp, #4]
   10072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10076:	bf00      	nop
   10078:	b003      	add	sp, #12
   1007a:	f85d fb04 	ldr.w	pc, [sp], #4
   1007e:	bf00      	nop
   10080:	1fff9184 	.word	0x1fff9184
   10084:	1fff9180 	.word	0x1fff9180

00010088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   10088:	b500      	push	{lr}
   1008a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1008c:	f7f1 f8f2 	bl	1274 <Sys_GetCoreID>
   10090:	4603      	mov	r3, r0
   10092:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   10094:	4a0d      	ldr	r2, [pc, #52]	; (100cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   10096:	9b01      	ldr	r3, [sp, #4]
   10098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1009c:	1e5a      	subs	r2, r3, #1
   1009e:	490b      	ldr	r1, [pc, #44]	; (100cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   100a0:	9b01      	ldr	r3, [sp, #4]
   100a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   100a6:	4a0a      	ldr	r2, [pc, #40]	; (100d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   100a8:	9b01      	ldr	r3, [sp, #4]
   100aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ae:	f003 0301 	and.w	r3, r3, #1
   100b2:	2b00      	cmp	r3, #0
   100b4:	d106      	bne.n	100c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   100b6:	4a05      	ldr	r2, [pc, #20]	; (100cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   100b8:	9b01      	ldr	r3, [sp, #4]
   100ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100be:	2b00      	cmp	r3, #0
   100c0:	d100      	bne.n	100c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   100c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100c4:	bf00      	nop
   100c6:	b003      	add	sp, #12
   100c8:	f85d fb04 	ldr.w	pc, [sp], #4
   100cc:	1fff9184 	.word	0x1fff9184
   100d0:	1fff9180 	.word	0x1fff9180

000100d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   100d4:	b500      	push	{lr}
   100d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100d8:	f7f1 f8cc 	bl	1274 <Sys_GetCoreID>
   100dc:	4603      	mov	r3, r0
   100de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   100e0:	4a10      	ldr	r2, [pc, #64]	; (10124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   100e2:	9b01      	ldr	r3, [sp, #4]
   100e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100e8:	2b00      	cmp	r3, #0
   100ea:	d10d      	bne.n	10108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100ec:	f7f0 fff2 	bl	10d4 <Port_schm_read_msr>
   100f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100f2:	9b00      	ldr	r3, [sp, #0]
   100f4:	f003 0301 	and.w	r3, r3, #1
   100f8:	2b00      	cmp	r3, #0
   100fa:	d100      	bne.n	100fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   100fe:	490a      	ldr	r1, [pc, #40]	; (10128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   10100:	9b01      	ldr	r3, [sp, #4]
   10102:	9a00      	ldr	r2, [sp, #0]
   10104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   10108:	4a06      	ldr	r2, [pc, #24]	; (10124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1010a:	9b01      	ldr	r3, [sp, #4]
   1010c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10110:	1c5a      	adds	r2, r3, #1
   10112:	4904      	ldr	r1, [pc, #16]	; (10124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   10114:	9b01      	ldr	r3, [sp, #4]
   10116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1011a:	bf00      	nop
   1011c:	b003      	add	sp, #12
   1011e:	f85d fb04 	ldr.w	pc, [sp], #4
   10122:	bf00      	nop
   10124:	1fff918c 	.word	0x1fff918c
   10128:	1fff9188 	.word	0x1fff9188

0001012c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1012c:	b500      	push	{lr}
   1012e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10130:	f7f1 f8a0 	bl	1274 <Sys_GetCoreID>
   10134:	4603      	mov	r3, r0
   10136:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   10138:	4a0d      	ldr	r2, [pc, #52]	; (10170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1013a:	9b01      	ldr	r3, [sp, #4]
   1013c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10140:	1e5a      	subs	r2, r3, #1
   10142:	490b      	ldr	r1, [pc, #44]	; (10170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   10144:	9b01      	ldr	r3, [sp, #4]
   10146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1014a:	4a0a      	ldr	r2, [pc, #40]	; (10174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   1014c:	9b01      	ldr	r3, [sp, #4]
   1014e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10152:	f003 0301 	and.w	r3, r3, #1
   10156:	2b00      	cmp	r3, #0
   10158:	d106      	bne.n	10168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1015a:	4a05      	ldr	r2, [pc, #20]	; (10170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1015c:	9b01      	ldr	r3, [sp, #4]
   1015e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10162:	2b00      	cmp	r3, #0
   10164:	d100      	bne.n	10168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10168:	bf00      	nop
   1016a:	b003      	add	sp, #12
   1016c:	f85d fb04 	ldr.w	pc, [sp], #4
   10170:	1fff918c 	.word	0x1fff918c
   10174:	1fff9188 	.word	0x1fff9188

00010178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   10178:	b500      	push	{lr}
   1017a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1017c:	f7f1 f87a 	bl	1274 <Sys_GetCoreID>
   10180:	4603      	mov	r3, r0
   10182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   10184:	4a10      	ldr	r2, [pc, #64]	; (101c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   10186:	9b01      	ldr	r3, [sp, #4]
   10188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1018c:	2b00      	cmp	r3, #0
   1018e:	d10d      	bne.n	101ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10190:	f7f0 ffa0 	bl	10d4 <Port_schm_read_msr>
   10194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10196:	9b00      	ldr	r3, [sp, #0]
   10198:	f003 0301 	and.w	r3, r3, #1
   1019c:	2b00      	cmp	r3, #0
   1019e:	d100      	bne.n	101a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   101a2:	490a      	ldr	r1, [pc, #40]	; (101cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   101a4:	9b01      	ldr	r3, [sp, #4]
   101a6:	9a00      	ldr	r2, [sp, #0]
   101a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   101ac:	4a06      	ldr	r2, [pc, #24]	; (101c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   101ae:	9b01      	ldr	r3, [sp, #4]
   101b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101b4:	1c5a      	adds	r2, r3, #1
   101b6:	4904      	ldr	r1, [pc, #16]	; (101c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   101b8:	9b01      	ldr	r3, [sp, #4]
   101ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101be:	bf00      	nop
   101c0:	b003      	add	sp, #12
   101c2:	f85d fb04 	ldr.w	pc, [sp], #4
   101c6:	bf00      	nop
   101c8:	1fff9194 	.word	0x1fff9194
   101cc:	1fff9190 	.word	0x1fff9190

000101d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   101d0:	b500      	push	{lr}
   101d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101d4:	f7f1 f84e 	bl	1274 <Sys_GetCoreID>
   101d8:	4603      	mov	r3, r0
   101da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   101dc:	4a0d      	ldr	r2, [pc, #52]	; (10214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   101de:	9b01      	ldr	r3, [sp, #4]
   101e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101e4:	1e5a      	subs	r2, r3, #1
   101e6:	490b      	ldr	r1, [pc, #44]	; (10214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   101e8:	9b01      	ldr	r3, [sp, #4]
   101ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   101ee:	4a0a      	ldr	r2, [pc, #40]	; (10218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   101f0:	9b01      	ldr	r3, [sp, #4]
   101f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f6:	f003 0301 	and.w	r3, r3, #1
   101fa:	2b00      	cmp	r3, #0
   101fc:	d106      	bne.n	1020c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   101fe:	4a05      	ldr	r2, [pc, #20]	; (10214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   10200:	9b01      	ldr	r3, [sp, #4]
   10202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10206:	2b00      	cmp	r3, #0
   10208:	d100      	bne.n	1020c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1020a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1020c:	bf00      	nop
   1020e:	b003      	add	sp, #12
   10210:	f85d fb04 	ldr.w	pc, [sp], #4
   10214:	1fff9194 	.word	0x1fff9194
   10218:	1fff9190 	.word	0x1fff9190

0001021c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   1021c:	b500      	push	{lr}
   1021e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10220:	f7f1 f828 	bl	1274 <Sys_GetCoreID>
   10224:	4603      	mov	r3, r0
   10226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   10228:	4a10      	ldr	r2, [pc, #64]	; (1026c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1022a:	9b01      	ldr	r3, [sp, #4]
   1022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10230:	2b00      	cmp	r3, #0
   10232:	d10d      	bne.n	10250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10234:	f7f0 ff4e 	bl	10d4 <Port_schm_read_msr>
   10238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1023a:	9b00      	ldr	r3, [sp, #0]
   1023c:	f003 0301 	and.w	r3, r3, #1
   10240:	2b00      	cmp	r3, #0
   10242:	d100      	bne.n	10246 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10246:	490a      	ldr	r1, [pc, #40]	; (10270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   10248:	9b01      	ldr	r3, [sp, #4]
   1024a:	9a00      	ldr	r2, [sp, #0]
   1024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   10250:	4a06      	ldr	r2, [pc, #24]	; (1026c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   10252:	9b01      	ldr	r3, [sp, #4]
   10254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10258:	1c5a      	adds	r2, r3, #1
   1025a:	4904      	ldr	r1, [pc, #16]	; (1026c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1025c:	9b01      	ldr	r3, [sp, #4]
   1025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10262:	bf00      	nop
   10264:	b003      	add	sp, #12
   10266:	f85d fb04 	ldr.w	pc, [sp], #4
   1026a:	bf00      	nop
   1026c:	1fff919c 	.word	0x1fff919c
   10270:	1fff9198 	.word	0x1fff9198

00010274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   10274:	b500      	push	{lr}
   10276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10278:	f7f0 fffc 	bl	1274 <Sys_GetCoreID>
   1027c:	4603      	mov	r3, r0
   1027e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   10280:	4a0d      	ldr	r2, [pc, #52]	; (102b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   10282:	9b01      	ldr	r3, [sp, #4]
   10284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10288:	1e5a      	subs	r2, r3, #1
   1028a:	490b      	ldr	r1, [pc, #44]	; (102b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   1028c:	9b01      	ldr	r3, [sp, #4]
   1028e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10292:	4a0a      	ldr	r2, [pc, #40]	; (102bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   10294:	9b01      	ldr	r3, [sp, #4]
   10296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1029a:	f003 0301 	and.w	r3, r3, #1
   1029e:	2b00      	cmp	r3, #0
   102a0:	d106      	bne.n	102b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   102a2:	4a05      	ldr	r2, [pc, #20]	; (102b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   102a4:	9b01      	ldr	r3, [sp, #4]
   102a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102aa:	2b00      	cmp	r3, #0
   102ac:	d100      	bne.n	102b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102b0:	bf00      	nop
   102b2:	b003      	add	sp, #12
   102b4:	f85d fb04 	ldr.w	pc, [sp], #4
   102b8:	1fff919c 	.word	0x1fff919c
   102bc:	1fff9198 	.word	0x1fff9198

000102c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   102c0:	b500      	push	{lr}
   102c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102c4:	f7f0 ffd6 	bl	1274 <Sys_GetCoreID>
   102c8:	4603      	mov	r3, r0
   102ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   102cc:	4a10      	ldr	r2, [pc, #64]	; (10310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   102ce:	9b01      	ldr	r3, [sp, #4]
   102d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102d4:	2b00      	cmp	r3, #0
   102d6:	d10d      	bne.n	102f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102d8:	f7f0 fefc 	bl	10d4 <Port_schm_read_msr>
   102dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102de:	9b00      	ldr	r3, [sp, #0]
   102e0:	f003 0301 	and.w	r3, r3, #1
   102e4:	2b00      	cmp	r3, #0
   102e6:	d100      	bne.n	102ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   102ea:	490a      	ldr	r1, [pc, #40]	; (10314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   102ec:	9b01      	ldr	r3, [sp, #4]
   102ee:	9a00      	ldr	r2, [sp, #0]
   102f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   102f4:	4a06      	ldr	r2, [pc, #24]	; (10310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   102f6:	9b01      	ldr	r3, [sp, #4]
   102f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102fc:	1c5a      	adds	r2, r3, #1
   102fe:	4904      	ldr	r1, [pc, #16]	; (10310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   10300:	9b01      	ldr	r3, [sp, #4]
   10302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10306:	bf00      	nop
   10308:	b003      	add	sp, #12
   1030a:	f85d fb04 	ldr.w	pc, [sp], #4
   1030e:	bf00      	nop
   10310:	1fff91a4 	.word	0x1fff91a4
   10314:	1fff91a0 	.word	0x1fff91a0

00010318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   10318:	b500      	push	{lr}
   1031a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1031c:	f7f0 ffaa 	bl	1274 <Sys_GetCoreID>
   10320:	4603      	mov	r3, r0
   10322:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   10324:	4a0d      	ldr	r2, [pc, #52]	; (1035c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10326:	9b01      	ldr	r3, [sp, #4]
   10328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1032c:	1e5a      	subs	r2, r3, #1
   1032e:	490b      	ldr	r1, [pc, #44]	; (1035c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10330:	9b01      	ldr	r3, [sp, #4]
   10332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10336:	4a0a      	ldr	r2, [pc, #40]	; (10360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   10338:	9b01      	ldr	r3, [sp, #4]
   1033a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1033e:	f003 0301 	and.w	r3, r3, #1
   10342:	2b00      	cmp	r3, #0
   10344:	d106      	bne.n	10354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   10346:	4a05      	ldr	r2, [pc, #20]	; (1035c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   10348:	9b01      	ldr	r3, [sp, #4]
   1034a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1034e:	2b00      	cmp	r3, #0
   10350:	d100      	bne.n	10354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10354:	bf00      	nop
   10356:	b003      	add	sp, #12
   10358:	f85d fb04 	ldr.w	pc, [sp], #4
   1035c:	1fff91a4 	.word	0x1fff91a4
   10360:	1fff91a0 	.word	0x1fff91a0

00010364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   10364:	b500      	push	{lr}
   10366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10368:	f7f0 ff84 	bl	1274 <Sys_GetCoreID>
   1036c:	4603      	mov	r3, r0
   1036e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   10370:	4a10      	ldr	r2, [pc, #64]	; (103b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   10372:	9b01      	ldr	r3, [sp, #4]
   10374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10378:	2b00      	cmp	r3, #0
   1037a:	d10d      	bne.n	10398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1037c:	f7f0 feaa 	bl	10d4 <Port_schm_read_msr>
   10380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10382:	9b00      	ldr	r3, [sp, #0]
   10384:	f003 0301 	and.w	r3, r3, #1
   10388:	2b00      	cmp	r3, #0
   1038a:	d100      	bne.n	1038e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1038c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1038e:	490a      	ldr	r1, [pc, #40]	; (103b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   10390:	9b01      	ldr	r3, [sp, #4]
   10392:	9a00      	ldr	r2, [sp, #0]
   10394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   10398:	4a06      	ldr	r2, [pc, #24]	; (103b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1039a:	9b01      	ldr	r3, [sp, #4]
   1039c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103a0:	1c5a      	adds	r2, r3, #1
   103a2:	4904      	ldr	r1, [pc, #16]	; (103b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103aa:	bf00      	nop
   103ac:	b003      	add	sp, #12
   103ae:	f85d fb04 	ldr.w	pc, [sp], #4
   103b2:	bf00      	nop
   103b4:	1fff91ac 	.word	0x1fff91ac
   103b8:	1fff91a8 	.word	0x1fff91a8

000103bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   103bc:	b500      	push	{lr}
   103be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103c0:	f7f0 ff58 	bl	1274 <Sys_GetCoreID>
   103c4:	4603      	mov	r3, r0
   103c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   103c8:	4a0d      	ldr	r2, [pc, #52]	; (10400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   103ca:	9b01      	ldr	r3, [sp, #4]
   103cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103d0:	1e5a      	subs	r2, r3, #1
   103d2:	490b      	ldr	r1, [pc, #44]	; (10400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   103d4:	9b01      	ldr	r3, [sp, #4]
   103d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   103da:	4a0a      	ldr	r2, [pc, #40]	; (10404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   103dc:	9b01      	ldr	r3, [sp, #4]
   103de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e2:	f003 0301 	and.w	r3, r3, #1
   103e6:	2b00      	cmp	r3, #0
   103e8:	d106      	bne.n	103f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   103ea:	4a05      	ldr	r2, [pc, #20]	; (10400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   103ec:	9b01      	ldr	r3, [sp, #4]
   103ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103f2:	2b00      	cmp	r3, #0
   103f4:	d100      	bne.n	103f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103f8:	bf00      	nop
   103fa:	b003      	add	sp, #12
   103fc:	f85d fb04 	ldr.w	pc, [sp], #4
   10400:	1fff91ac 	.word	0x1fff91ac
   10404:	1fff91a8 	.word	0x1fff91a8

00010408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   10408:	b500      	push	{lr}
   1040a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1040c:	f7f0 ff32 	bl	1274 <Sys_GetCoreID>
   10410:	4603      	mov	r3, r0
   10412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   10414:	4a10      	ldr	r2, [pc, #64]	; (10458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10416:	9b01      	ldr	r3, [sp, #4]
   10418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1041c:	2b00      	cmp	r3, #0
   1041e:	d10d      	bne.n	1043c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10420:	f7f0 fe58 	bl	10d4 <Port_schm_read_msr>
   10424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10426:	9b00      	ldr	r3, [sp, #0]
   10428:	f003 0301 	and.w	r3, r3, #1
   1042c:	2b00      	cmp	r3, #0
   1042e:	d100      	bne.n	10432 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10432:	490a      	ldr	r1, [pc, #40]	; (1045c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   10434:	9b01      	ldr	r3, [sp, #4]
   10436:	9a00      	ldr	r2, [sp, #0]
   10438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   1043c:	4a06      	ldr	r2, [pc, #24]	; (10458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1043e:	9b01      	ldr	r3, [sp, #4]
   10440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10444:	1c5a      	adds	r2, r3, #1
   10446:	4904      	ldr	r1, [pc, #16]	; (10458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   10448:	9b01      	ldr	r3, [sp, #4]
   1044a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1044e:	bf00      	nop
   10450:	b003      	add	sp, #12
   10452:	f85d fb04 	ldr.w	pc, [sp], #4
   10456:	bf00      	nop
   10458:	1fff91b4 	.word	0x1fff91b4
   1045c:	1fff91b0 	.word	0x1fff91b0

00010460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   10460:	b500      	push	{lr}
   10462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10464:	f7f0 ff06 	bl	1274 <Sys_GetCoreID>
   10468:	4603      	mov	r3, r0
   1046a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   1046c:	4a0d      	ldr	r2, [pc, #52]	; (104a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1046e:	9b01      	ldr	r3, [sp, #4]
   10470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10474:	1e5a      	subs	r2, r3, #1
   10476:	490b      	ldr	r1, [pc, #44]	; (104a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10478:	9b01      	ldr	r3, [sp, #4]
   1047a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1047e:	4a0a      	ldr	r2, [pc, #40]	; (104a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   10480:	9b01      	ldr	r3, [sp, #4]
   10482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10486:	f003 0301 	and.w	r3, r3, #1
   1048a:	2b00      	cmp	r3, #0
   1048c:	d106      	bne.n	1049c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   1048e:	4a05      	ldr	r2, [pc, #20]	; (104a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   10490:	9b01      	ldr	r3, [sp, #4]
   10492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10496:	2b00      	cmp	r3, #0
   10498:	d100      	bne.n	1049c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1049a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1049c:	bf00      	nop
   1049e:	b003      	add	sp, #12
   104a0:	f85d fb04 	ldr.w	pc, [sp], #4
   104a4:	1fff91b4 	.word	0x1fff91b4
   104a8:	1fff91b0 	.word	0x1fff91b0

000104ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   104ac:	b500      	push	{lr}
   104ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104b0:	f7f0 fee0 	bl	1274 <Sys_GetCoreID>
   104b4:	4603      	mov	r3, r0
   104b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   104b8:	4a10      	ldr	r2, [pc, #64]	; (104fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   104ba:	9b01      	ldr	r3, [sp, #4]
   104bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c0:	2b00      	cmp	r3, #0
   104c2:	d10d      	bne.n	104e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104c4:	f7f0 fe06 	bl	10d4 <Port_schm_read_msr>
   104c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104ca:	9b00      	ldr	r3, [sp, #0]
   104cc:	f003 0301 	and.w	r3, r3, #1
   104d0:	2b00      	cmp	r3, #0
   104d2:	d100      	bne.n	104d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   104d6:	490a      	ldr	r1, [pc, #40]	; (10500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   104d8:	9b01      	ldr	r3, [sp, #4]
   104da:	9a00      	ldr	r2, [sp, #0]
   104dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   104e0:	4a06      	ldr	r2, [pc, #24]	; (104fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   104e2:	9b01      	ldr	r3, [sp, #4]
   104e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104e8:	1c5a      	adds	r2, r3, #1
   104ea:	4904      	ldr	r1, [pc, #16]	; (104fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   104ec:	9b01      	ldr	r3, [sp, #4]
   104ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104f2:	bf00      	nop
   104f4:	b003      	add	sp, #12
   104f6:	f85d fb04 	ldr.w	pc, [sp], #4
   104fa:	bf00      	nop
   104fc:	1fff91bc 	.word	0x1fff91bc
   10500:	1fff91b8 	.word	0x1fff91b8

00010504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   10504:	b500      	push	{lr}
   10506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10508:	f7f0 feb4 	bl	1274 <Sys_GetCoreID>
   1050c:	4603      	mov	r3, r0
   1050e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   10510:	4a0d      	ldr	r2, [pc, #52]	; (10548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10518:	1e5a      	subs	r2, r3, #1
   1051a:	490b      	ldr	r1, [pc, #44]	; (10548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1051c:	9b01      	ldr	r3, [sp, #4]
   1051e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10522:	4a0a      	ldr	r2, [pc, #40]	; (1054c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   10524:	9b01      	ldr	r3, [sp, #4]
   10526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1052a:	f003 0301 	and.w	r3, r3, #1
   1052e:	2b00      	cmp	r3, #0
   10530:	d106      	bne.n	10540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   10532:	4a05      	ldr	r2, [pc, #20]	; (10548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   10534:	9b01      	ldr	r3, [sp, #4]
   10536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1053a:	2b00      	cmp	r3, #0
   1053c:	d100      	bne.n	10540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1053e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10540:	bf00      	nop
   10542:	b003      	add	sp, #12
   10544:	f85d fb04 	ldr.w	pc, [sp], #4
   10548:	1fff91bc 	.word	0x1fff91bc
   1054c:	1fff91b8 	.word	0x1fff91b8

00010550 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   10550:	bf00      	nop
   10552:	4770      	bx	lr

00010554 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   10554:	b510      	push	{r4, lr}
   10556:	b084      	sub	sp, #16
   10558:	4604      	mov	r4, r0
   1055a:	4608      	mov	r0, r1
   1055c:	4611      	mov	r1, r2
   1055e:	461a      	mov	r2, r3
   10560:	4623      	mov	r3, r4
   10562:	f8ad 3006 	strh.w	r3, [sp, #6]
   10566:	4603      	mov	r3, r0
   10568:	f88d 3005 	strb.w	r3, [sp, #5]
   1056c:	460b      	mov	r3, r1
   1056e:	f88d 3004 	strb.w	r3, [sp, #4]
   10572:	4613      	mov	r3, r2
   10574:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10578:	f7f0 fe7c 	bl	1274 <Sys_GetCoreID>
   1057c:	4603      	mov	r3, r0
   1057e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   10580:	490d      	ldr	r1, [pc, #52]	; (105b8 <Det_ReportError+0x64>)
   10582:	9b03      	ldr	r3, [sp, #12]
   10584:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10588:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   1058c:	4a0b      	ldr	r2, [pc, #44]	; (105bc <Det_ReportError+0x68>)
   1058e:	9b03      	ldr	r3, [sp, #12]
   10590:	4413      	add	r3, r2
   10592:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10596:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   10598:	4a09      	ldr	r2, [pc, #36]	; (105c0 <Det_ReportError+0x6c>)
   1059a:	9b03      	ldr	r3, [sp, #12]
   1059c:	4413      	add	r3, r2
   1059e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   105a2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   105a4:	4a07      	ldr	r2, [pc, #28]	; (105c4 <Det_ReportError+0x70>)
   105a6:	9b03      	ldr	r3, [sp, #12]
   105a8:	4413      	add	r3, r2
   105aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   105ae:	701a      	strb	r2, [r3, #0]

    return E_OK;
   105b0:	2300      	movs	r3, #0
}
   105b2:	4618      	mov	r0, r3
   105b4:	b004      	add	sp, #16
   105b6:	bd10      	pop	{r4, pc}
   105b8:	1fff91e8 	.word	0x1fff91e8
   105bc:	1fff91c0 	.word	0x1fff91c0
   105c0:	1fff91c4 	.word	0x1fff91c4
   105c4:	1fff91c8 	.word	0x1fff91c8

000105c8 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   105c8:	b510      	push	{r4, lr}
   105ca:	b084      	sub	sp, #16
   105cc:	4604      	mov	r4, r0
   105ce:	4608      	mov	r0, r1
   105d0:	4611      	mov	r1, r2
   105d2:	461a      	mov	r2, r3
   105d4:	4623      	mov	r3, r4
   105d6:	f8ad 3006 	strh.w	r3, [sp, #6]
   105da:	4603      	mov	r3, r0
   105dc:	f88d 3005 	strb.w	r3, [sp, #5]
   105e0:	460b      	mov	r3, r1
   105e2:	f88d 3004 	strb.w	r3, [sp, #4]
   105e6:	4613      	mov	r3, r2
   105e8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105ec:	f7f0 fe42 	bl	1274 <Sys_GetCoreID>
   105f0:	4603      	mov	r3, r0
   105f2:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   105f4:	490d      	ldr	r1, [pc, #52]	; (1062c <Det_ReportRuntimeError+0x64>)
   105f6:	9b03      	ldr	r3, [sp, #12]
   105f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   105fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   10600:	4a0b      	ldr	r2, [pc, #44]	; (10630 <Det_ReportRuntimeError+0x68>)
   10602:	9b03      	ldr	r3, [sp, #12]
   10604:	4413      	add	r3, r2
   10606:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1060a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   1060c:	4a09      	ldr	r2, [pc, #36]	; (10634 <Det_ReportRuntimeError+0x6c>)
   1060e:	9b03      	ldr	r3, [sp, #12]
   10610:	4413      	add	r3, r2
   10612:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10616:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   10618:	4a07      	ldr	r2, [pc, #28]	; (10638 <Det_ReportRuntimeError+0x70>)
   1061a:	9b03      	ldr	r3, [sp, #12]
   1061c:	4413      	add	r3, r2
   1061e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10622:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10624:	2300      	movs	r3, #0
}
   10626:	4618      	mov	r0, r3
   10628:	b004      	add	sp, #16
   1062a:	bd10      	pop	{r4, pc}
   1062c:	1fff91ec 	.word	0x1fff91ec
   10630:	1fff91cc 	.word	0x1fff91cc
   10634:	1fff91d0 	.word	0x1fff91d0
   10638:	1fff91d4 	.word	0x1fff91d4

0001063c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   1063c:	b510      	push	{r4, lr}
   1063e:	b084      	sub	sp, #16
   10640:	4604      	mov	r4, r0
   10642:	4608      	mov	r0, r1
   10644:	4611      	mov	r1, r2
   10646:	461a      	mov	r2, r3
   10648:	4623      	mov	r3, r4
   1064a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1064e:	4603      	mov	r3, r0
   10650:	f88d 3005 	strb.w	r3, [sp, #5]
   10654:	460b      	mov	r3, r1
   10656:	f88d 3004 	strb.w	r3, [sp, #4]
   1065a:	4613      	mov	r3, r2
   1065c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10660:	f7f0 fe08 	bl	1274 <Sys_GetCoreID>
   10664:	4603      	mov	r3, r0
   10666:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   10668:	490d      	ldr	r1, [pc, #52]	; (106a0 <Det_ReportTransientFault+0x64>)
   1066a:	9b03      	ldr	r3, [sp, #12]
   1066c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10670:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   10674:	4a0b      	ldr	r2, [pc, #44]	; (106a4 <Det_ReportTransientFault+0x68>)
   10676:	9b03      	ldr	r3, [sp, #12]
   10678:	4413      	add	r3, r2
   1067a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1067e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   10680:	4a09      	ldr	r2, [pc, #36]	; (106a8 <Det_ReportTransientFault+0x6c>)
   10682:	9b03      	ldr	r3, [sp, #12]
   10684:	4413      	add	r3, r2
   10686:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1068a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   1068c:	4a07      	ldr	r2, [pc, #28]	; (106ac <Det_ReportTransientFault+0x70>)
   1068e:	9b03      	ldr	r3, [sp, #12]
   10690:	4413      	add	r3, r2
   10692:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10696:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10698:	2300      	movs	r3, #0
}
   1069a:	4618      	mov	r0, r3
   1069c:	b004      	add	sp, #16
   1069e:	bd10      	pop	{r4, pc}
   106a0:	1fff91e4 	.word	0x1fff91e4
   106a4:	1fff91d8 	.word	0x1fff91d8
   106a8:	1fff91dc 	.word	0x1fff91dc
   106ac:	1fff91e0 	.word	0x1fff91e0

000106b0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   106b0:	bf00      	nop
   106b2:	4770      	bx	lr

000106b4 <Fls_ACEraseRomEnd>:
   106b4:	31746f50 	.word	0x31746f50
   106b8:	6f56203a 	.word	0x6f56203a
   106bc:	6761746c 	.word	0x6761746c
   106c0:	203d2065 	.word	0x203d2065
   106c4:	56206425 	.word	0x56206425
   106c8:	6552202c 	.word	0x6552202c
   106cc:	74736973 	.word	0x74736973
   106d0:	65636e61 	.word	0x65636e61
   106d4:	25203d20 	.word	0x25203d20
   106d8:	684f2064 	.word	0x684f2064
   106dc:	000a736d 	.word	0x000a736d
   106e0:	32746f50 	.word	0x32746f50
   106e4:	6f56203a 	.word	0x6f56203a
   106e8:	6761746c 	.word	0x6761746c
   106ec:	203d2065 	.word	0x203d2065
   106f0:	56206425 	.word	0x56206425
   106f4:	6552202c 	.word	0x6552202c
   106f8:	74736973 	.word	0x74736973
   106fc:	65636e61 	.word	0x65636e61
   10700:	25203d20 	.word	0x25203d20
   10704:	684f2064 	.word	0x684f2064
   10708:	000a736d 	.word	0x000a736d
   1070c:	6d726554 	.word	0x6d726554
   10710:	6c616e69 	.word	0x6c616e69
   10714:	00000000 	.word	0x00000000
   10718:	4c554e28 	.word	0x4c554e28
   1071c:	0000294c 	.word	0x0000294c

00010720 <Clock_Ip_au8DividerCallbackIndex>:
   10720:	0e0d0c00 06030201 0a070409 000b0805     ................

00010730 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00010740 <Clock_Ip_au8XoscCallbackIndex>:
   10740:	00000100 00000000 00000000 00000000     ................

00010750 <Clock_Ip_au8IrcoscCallbackIndex>:
   10750:	03020100 00000004 00000000 00000000     ................

00010760 <Clock_Ip_au8GateCallbackIndex>:
   10760:	06010200 01040301 00000500 00000000     ................

00010770 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00010780 <Clock_Ip_au8PllCallbackIndex>:
   10780:	00000100 00000000 00000000 00000000     ................

00010790 <Clock_Ip_au8SelectorCallbackIndex>:
   10790:	0a090800 03020109 07060504 00000000     ................

000107a0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000107b0 <Clock_Ip_au8CmuCallbackIndex>:
	...

000107c0 <Clock_Ip_au8ClockFeatures>:
	...
   107d0:	01000000 00000000 00000000 00000002     ................
   107e0:	00000000 00000300 00000000 00040000     ................
   107f0:	00000000 05000000 00000000 00000000     ................
   10800:	00000006 00000000 00000100 00000000     ................
   10810:	00010000 00000000 04000000 00000000     ................
   10820:	00000000 00000005 00000001 00000401     ................
   10830:	00000200 00050100 00030000 04020000     ................
   10840:	04000000 02000000 00000005 00000005     ................
   10850:	00000403 00000600 00050300 00070000     ................
   10860:	05000000 00000000 00000000 00000006     ................
	...
   108a0:	00050000 00000000 06000000 00000100     ................
   108b0:	00000000 00030007 00000000 00000000     ................
   108c0:	00000000 00060000 00000000 07000000     ................
   108d0:	00000100 00000000 00030008 00000000     ................
	...
   108e8:	00090000 00000000 0a000000 00000100     ................
   108f8:	00000000 0003000b 00000000 00000000     ................
   10908:	00000000 000c0000 00000000 0d000000     ................
   10918:	00000100 00000000 0003000e 00000000     ................
   10928:	00000800 00000000 00090000 00000000     ................
   10938:	0a000000 00000000 00000000 0000000b     ................
   10948:	00000000 00000b01 00000000 000b0200     ................
   10958:	00000000 0b030000 00000000 00000000     ................
	...
   10970:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   10980:	01000000 00000000 00000000 00000007     ................
   10990:	00007300 00000700 00320000 00090000     .s........2.....
   109a0:	02000000 07000000 00000000 00000021     ............!...
   109b0:	00000009 00000400 00000900 00030000     ................
   109c0:	00070000 61000000 07000000 00000000     .......a........
   109d0:	00000024 00000007 00002500 00000700     $........%......
   109e0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   109f0:	00000000 00000020 38000004 00003800     .... ......8.8..
   10a00:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   10a10:	04000000 00260000 00000026 66000004     ......&.&......f
   10a20:	00006600 00000400 00370037 00040000     .f......7.7.....
   10a30:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   10a40:	2e000004 00002e00 00000200 00404040     ............@@@.
   10a50:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   10a60:	0000006b 6c000004 00006c00 00000900     k......l.l......
   10a70:	00010000 00090000 00000000 07000000     ................
   10a80:	00000000 00000036 00000007 00003100     ....6........1..
   10a90:	00000700 00490000 00070000 4a000000     ......I........J
   10aa0:	07000000 00000000 0000004b 00000007     ........K.......
   10ab0:	00004c00 00000700 004d0000 00070000     .L........M.....
   10ac0:	3d000000 03000000 00000000 00000000     ...=............

00010ad0 <Clock_Ip_au16SelectorEntryHardwareValue>:
   10ad0:	01010a03 01010001 04040002 02000603     ................
   10ae0:	00010810 02020100 00000000 00000007     ................
   10af0:	00000009 00000000 00000c0e 00000000     ................
	...

00010b28 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   10b28:	00020000 00000300 00000601 00000000     ................
	...

00010b58 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   10b58:	00000700 00000000 02020000 01010303     ................
   10b68:	03020606 00000000 00000000 00000000     ................
	...

00010b88 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   10b88:	00000001 00000000 02020000 01010303     ................
   10b98:	03020606 00000000 00000000 00000000     ................
	...

00010bb8 <Clock_Ip_au8DividerValueHardwareValue>:
   10bb8:	00020100 00000003 00000004 00000000     ................
   10bc8:	00000005 00000000 00000000 00000000     ................
   10bd8:	00000006 00000000 00000000 00000000     ................
	...
   10bf8:	00000007                                ....

00010bfc <Clock_Ip_apxScgPeriphAsyncDivs>:
   10bfc:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00010c0c <Clock_Ip_aeSourceTypeClockName>:
   10c0c:	00000000 00000001 00000001 00000001     ................
   10c1c:	00000001 00000001 00000001 00000001     ................
   10c2c:	00000002 00000003 00000001 00000001     ................
   10c3c:	00000001 00000001 00000002 00000002     ................
   10c4c:	00000003 00000003 00000001 00000001     ................
   10c5c:	00000004 00000004 00000004 00000004     ................
	...

00010cc8 <Clock_Ip_aeHwPllName>:
   10cc8:	00000009                                ....

00010ccc <Clock_Ip_aeHwDfsName>:
   10ccc:	00000057                                W...

00010cd0 <Clock_Ip_axDividerCallbacks>:
   10cd0:	000032b5 000032bf 000032d9 000032f3     .2...2...2...2..
   10ce0:	0000330d 00003327 00003341 0000335b     .3..'3..A3..[3..
   10cf0:	00003375 0000338f 000033a9 000033c3     u3...3...3...3..
   10d00:	000033dd 000033f7 00003411              .3...3...4..

00010d0c <Clock_Ip_axDividerTriggerCallbacks>:
   10d0c:	00003785 00003785                       .7...7..

00010d14 <Clock_Ip_axExtOscCallbacks>:
   10d14:	00003791 00003791 00003791 0000379b     .7...7...7...7..
   10d24:	00003791 000037a5 000037bf 000037d9     .7...7...7...7..
   10d34:	0000385d 00003871                       ]8..q8..

00010d3c <Clock_Ip_axFracDivCallbacks>:
   10d3c:	00003a31 00003a31 00003a3b              1:..1:..;:..

00010d48 <Clock_Ip_axGateCallbacks>:
   10d48:	00003a55 00003a5f 00003b5f 00003b79     U:.._:.._;..y;..
   10d58:	00003b0f 00003b29 00003abf 00003ad9     .;..);...:...:..
   10d68:	00003a6f 00003a89 00003baf 00003bc9     o:...:...;...;..
   10d78:	00003bff 00003c19                       .;...<..

00010d80 <Clock_Ip_axIntOscCallbacks>:
   10d80:	00003dc5 00003dc5 00003dcf 00003dd9     .=...=...=...=..
   10d90:	00003df3 00003e0d 00003e21 00003e3b     .=...>..!>..;>..
   10da0:	00003e55 00003e69 00003e83 00003e9d     U>..i>...>...>..
   10db0:	00003f45 00003f5f 00003f79              E?.._?..y?..

00010dbc <Clock_Ip_axCmuCallbacks>:
   10dbc:	00004515 0000451f 0000452b 00004515     .E...E..+E...E..

00010dcc <Clock_Ip_axPllCallbacks>:
   10dcc:	00004535 00004535 0000453f 00004535     5E..5E..?E..5E..
   10ddc:	0000454b 00004555 0000456f 00004589     KE..UE..oE...E..
   10dec:	0000462d 00004619                       -F...F..

00010df4 <Clock_Ip_axPcfsCallbacks>:
   10df4:	00004789                                .G..

00010df8 <Clock_Ip_axSelectorCallbacks>:
   10df8:	00004795 00004795 0000479f 000047b9     .G...G...G...G..
   10e08:	00004795 000047d3 000047ed 00004807     .G...G...G...H..
   10e18:	00004821 0000483b 00004855 0000486f     !H..;H..UH..oH..
   10e28:	00004889 000048a3 000048bd 000048d7     .H...H...H...H..
   10e38:	000048f1 0000490b 00004925 0000493f     .H...I..%I..?I..
   10e48:	00004959 00004973                       YI..sI..

00010e50 <ClockSource>:
   10e50:	00000000 00000008 00000002 00000005     ................
	...
   10e68:	00000009                                ....

00010e6c <ResetReasonArray>:
   10e6c:	00000000 00000001 00000002 00000003     ................
   10e7c:	00000004 00000005 00000006 00000007     ................
   10e8c:	00000008 00000009 0000000a 0000000b     ................
   10e9c:	0000000c 0000000d 0000000e              ............

00010ea8 <Port_au32PortCiPortBaseAddr>:
   10ea8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   10eb8:	4004d000                                ...@

00010ebc <Port_au32PortCiGpioBaseAddr>:
   10ebc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10ecc:	400ff100                                ...@

00010ed0 <Adc_Ip_apxBase>:
   10ed0:	4003b000 40027000                       ...@.p.@

00010ed8 <Pdb_Adc_Ip_apxBase>:
   10ed8:	40036000 40031000                       .`.@...@

00010ee0 <AdcIpChansConfig_0>:
   10ee0:	00000000 00000005 00000000 00000001     ................
   10ef0:	00000008 00000000                       ........

00010ef8 <AdcIpConfig_0>:
   10ef8:	00000000 00000003 00000000 0000000c     ................
   10f08:	00000000 00000001 00000001 00000000     ................
	...
   10f20:	00ff0000 00000000 00000000 00010ee0     ................
   10f30:	0000a8e5                                ....

00010f34 <AdcIpwCfg>:
   10f34:	00010ef8 00000000 000113fc 00000000     ................
   10f44:	ff01ff00 00000001 00000002 0001ffff     ................
   10f54:	0000ff00                                ....

00010f58 <AdcIpwGroupConfig_0>:
	...
   10f60:	000000c8 00010000 00000000              ............

00010f6c <Adc_Group0_Assignment_0>:
   10f6c:	00010000                                ....

00010f70 <Adc_GroupsCfg>:
	...
   10f8c:	00000001 00010f6c 00080002 00000005     ....l...........
   10f9c:	00000000 00010f58                       ....X...

00010fa4 <Adc_au16GroupIdToIndexMap>:
   10fa4:	00000000                                ....

00010fa8 <Adc_Partition_Assignment>:
   10fa8:	00000000                                ....

00010fac <Adc_Config>:
   10fac:	00010f34 00010f70 00000001 00010fa4     4...p...........
   10fbc:	00000000 00010fa8 00000001              ............

00010fc8 <Mcu_aClockConfigPB>:
	...
   10fd0:	1c000101 04000010 01000029 00000005     ........).......
   10fe0:	00000001 00000000 00000057 00000000     ........W.......
   10ff0:	00000000 00000008 007a1200 00000001     ..........z.....
   11000:	00000001 00000000 00000057 00000000     ........W.......
   11010:	00000057 00000000 00000000 00000000     W...............
	...
   11030:	00000019 00000005 0000001a 00000002     ................
   11040:	0000001b 00000005 0000002a 00000005     ........*.......
   11050:	00000028 0000000e 00000029 00000001     (.......).......
   11060:	00000056 0000001c 00000032 0000002a     V.......2...*...
   11070:	0000002b 00000014 0000002c 00000014     +.......,.......
   11080:	0000002d 00000014 0000002e 00000014     -...............
   11090:	0000003f 00000000 00000040 00000000     ?.......@.......
   110a0:	00000041 00000000 00000042 00000000     A.......B.......
   110b0:	00000031 00000000 00000045 00000000     1.......E.......
   110c0:	00000046 00000000 00000047 00000000     F.......G.......
   110d0:	00000044 00000000 00000030 0000000d     D.......0.......
   110e0:	0000003d 00000000 00000043 00000000     =.......C.......
   110f0:	00000049 00000000 0000004a 00000000     I.......J.......
   11100:	0000004b 00000000 00000048 00000000     K.......H.......
   11110:	0000000c 00000001 00000000 0000000d     ................
   11120:	00000002 00000000 0000000e 00000001     ................
   11130:	00000000 0000000f 00000001 00000000     ................
   11140:	0000001d 00000001 00000000 0000001e     ................
   11150:	00000008 00000000 0000001f 00000001     ................
   11160:	00000000 00000021 00000001 00000000     ....!...........
   11170:	00000022 00000002 00000000 00000023     "...........#...
   11180:	00000001 00000000 00000025 00000003     ........%.......
   11190:	00000000 00000026 00000004 00000000     ....&...........
   111a0:	00000027 00000002 00000000 00000032     '...........2...
   111b0:	00000001 00000000 00000048 00000001     ........H.......
   111c0:	00000001 00000056 00000001 00000001     ....V...........
   111d0:	00000057 00000000 00000000 00000057     W...........W...
	...
   111e8:	00000057 00000000 00000000 00000057     W...........W...
	...
   11200:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   1121c:	00000014 00007d00 00000015 00007d00     .....}.......}..
   1122c:	00000016 00007d00 00000017 00008000     .....}..........
   1123c:	00000012 00000001 00000013 00000001     ................
   1124c:	00000030 00000001 00000031 00000000     0.......1.......
   1125c:	00000032 00000000 00000033 00000000     2.......3.......
   1126c:	00000034 00000000 00000035 00000001     4.......5.......
   1127c:	00000036 00000000 00000037 00000001     6.......7.......
   1128c:	00000038 00000001 00000039 00000000     8.......9.......
   1129c:	0000003a 00000000 0000003b 00000000     :.......;.......
   112ac:	0000003c 00000000 0000003d 00000000     <.......=.......
   112bc:	0000003e 00000000 0000003f 00000000     >.......?.......
   112cc:	00000040 00000000 00000041 00000000     @.......A.......
   112dc:	00000042 00000000 00000043 00000000     B.......C.......
   112ec:	00000044 00000000 00000045 00000000     D.......E.......
   112fc:	00000046 00000000 00000047 00000000     F.......G.......
   1130c:	00000048 00000000 00000049 00000000     H.......I.......
   1131c:	0000004a 00000000 0000004b 00000000     J.......K.......
   1132c:	0000004c 00000001 0000004d 00000001     L.......M.......
   1133c:	0000004e 00000001 0000004f 00000000     N.......O.......
   1134c:	00000050 00000001 00000051 00000001     P.......Q.......
   1135c:	00000052 00000001 00000053 00000001     R.......S.......
   1136c:	00000054 00000001 00000055 00000000     T.......U.......
   1137c:	00000056 00000001 00000057 00000000     V.......W.......
   1138c:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000113c0 <aIrqConfiguration>:
   113c0:	00000027 00000f01 00009229              '.......)...

000113cc <intCtrlConfig>:
   113cc:	00000001 000113c0                       ........

000113d4 <Mcu_Config>:
   113d4:	0000005a 00000000 00000001 00000001     Z...............
   113e4:	00011594 00010fc8 000115a0              ............

000113f0 <OsIf_xPredefinedConfig>:
   113f0:	00000000 02dc6c00                       .....l..

000113f8 <OsIf_apxPredefinedConfig>:
   113f8:	000113f0                                ....

000113fc <PdbAdcIpConfig_0>:
	...
   11408:	0000000f ffff0000 00000000 00000000     ................
   11418:	00000000                                ....

0001141c <Platform_uConfiguration>:
   1141c:	00011424                                $...

00011420 <Platform_Config>:
   11420:	0001141c                                ....

00011424 <ipwConfig>:
   11424:	000113cc 00000000                       ........

0001142c <g_pin_mux_InitConfigArr>:
   1142c:	4004a000 00000000 00000001 00000002     ...@............
   1143c:	00000000 00000002 00000000 00000000     ................
	...
   11454:	4004a000 00000000 0000000d 00000002     ...@............
   11464:	00000000 00000002 00000000 00000000     ................
	...

0001147c <au8Port_PartitionList>:
   1147c:	00000001                                ....

00011480 <au32Port_PinToPartitionMap>:
   11480:	00000001 00000001                       ........

00011488 <Port_au16NoUnUsedPadsArrayDefault>:
   11488:	00010000 00030002 00070006 00090008     ................
   11498:	000c000b 000e000d 0010000f 00200011     .............. .
   114a8:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   114b8:	002b002a 002e002c 0030002f 00400031     *.+.,.../.0.1.@.
   114c8:	00420041 00460043 00480047 004a0049     A.B.C.F.G.H.I.J.
   114d8:	004c004b 004e004d 0050004f 00600051     K.L.M.N.O.P.Q.`.
   114e8:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   114f8:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   11508:	00800071 00820081 00840083 00860085     q...............
   11518:	00880087 008a0089 008c008b 008e008d     ................
   11528:	0090008f                                ....

0001152c <Port_UnUsedPin>:
   1152c:	00000100 00000001 00000000              ............

00011538 <Port_aPinConfigDefault>:
   11538:	00000021 00000000 00000002 00000000     !...............
   11548:	00010000 0000002d 00000000 00000002     ....-...........
   11558:	00000000 00010000                       ........

00011560 <Port_Config>:
   11560:	00520002 00011488 0001152c 00011538     ..R.....,...8...
	...
   11578:	00011480 0001147c 0001142c              ....|...,...

00011584 <Power_Ip_RCM_ConfigPB>:
	...

0001158c <Power_Ip_PMC_ConfigPB>:
   1158c:	00000000                                ....

00011590 <Power_Ip_SMC_ConfigPB>:
   11590:	00000000                                ....

00011594 <Power_Ip_aModeConfigPB>:
	...

000115a0 <Power_Ip_HwIPsConfigPB>:
   115a0:	00011584 0001158c 00011590              ............

000115ac <_aInitStr.0>:
   115ac:	00000000 54540000 45522052 53454747     ......TTR REGGES
   115bc:	00000000                                ....

000115c0 <_aV2C.0>:
   115c0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000115d0 <__INIT_TABLE>:
   115d0:	00000002 	.word	0x00000002
   115d4:	1fff8b10 	.word	0x1fff8b10
   115d8:	000115f8 	.word	0x000115f8
   115dc:	0001160c 	.word	0x0001160c
   115e0:	1fff8800 	.word	0x1fff8800
   115e4:	00000000 	.word	0x00000000
   115e8:	00000310 	.word	0x00000310

000115ec <__ZERO_TABLE>:
   115ec:	00000001 	.word	0x00000001
   115f0:	1fff8b30 	.word	0x1fff8b30
   115f4:	1fff96b0 	.word	0x1fff96b0
