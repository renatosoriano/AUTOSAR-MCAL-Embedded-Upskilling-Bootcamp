
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b83 	.word	0x00000b83
  10:	00000b85 	.word	0x00000b85
  14:	00000b87 	.word	0x00000b87
  18:	00000b89 	.word	0x00000b89
	...
  2c:	00000b8b 	.word	0x00000b8b
  30:	00000b8d 	.word	0x00000b8d
  34:	00000000 	.word	0x00000000
  38:	00000b8f 	.word	0x00000b8f
  3c:	00000b91 	.word	0x00000b91
  40:	00000b93 	.word	0x00000b93
  44:	00000b93 	.word	0x00000b93
  48:	00000b93 	.word	0x00000b93
  4c:	00000b93 	.word	0x00000b93
  50:	00000b93 	.word	0x00000b93
  54:	00000b93 	.word	0x00000b93
  58:	00000b93 	.word	0x00000b93
  5c:	00000b93 	.word	0x00000b93
  60:	00000b93 	.word	0x00000b93
  64:	00000b93 	.word	0x00000b93
  68:	00000b93 	.word	0x00000b93
  6c:	00000b93 	.word	0x00000b93
  70:	00000b93 	.word	0x00000b93
  74:	00000b93 	.word	0x00000b93
  78:	00000b93 	.word	0x00000b93
  7c:	00000b93 	.word	0x00000b93
  80:	00000b93 	.word	0x00000b93
  84:	00000b93 	.word	0x00000b93
  88:	00000b93 	.word	0x00000b93
  8c:	00000b93 	.word	0x00000b93
  90:	00000b93 	.word	0x00000b93
  94:	00000b93 	.word	0x00000b93
  98:	00000b93 	.word	0x00000b93
  9c:	00000b93 	.word	0x00000b93
  a0:	00000b93 	.word	0x00000b93
  a4:	00000b93 	.word	0x00000b93
  a8:	00000b93 	.word	0x00000b93
  ac:	00000b93 	.word	0x00000b93
  b0:	00000b93 	.word	0x00000b93
  b4:	00000b93 	.word	0x00000b93
  b8:	00000b93 	.word	0x00000b93
  bc:	00000b93 	.word	0x00000b93
  c0:	00000b93 	.word	0x00000b93
  c4:	00000b93 	.word	0x00000b93
  c8:	00000b93 	.word	0x00000b93
  cc:	00000b93 	.word	0x00000b93
  d0:	00000b93 	.word	0x00000b93
  d4:	00000b93 	.word	0x00000b93
  d8:	00000b93 	.word	0x00000b93
  dc:	00000b93 	.word	0x00000b93
  e0:	00000b93 	.word	0x00000b93
  e4:	00000b93 	.word	0x00000b93
  e8:	00000b93 	.word	0x00000b93
  ec:	00000b93 	.word	0x00000b93
  f0:	00000b93 	.word	0x00000b93
  f4:	00000b93 	.word	0x00000b93
  f8:	00000b93 	.word	0x00000b93
  fc:	00000b93 	.word	0x00000b93
 100:	00000b93 	.word	0x00000b93
 104:	00000b93 	.word	0x00000b93
 108:	00000b93 	.word	0x00000b93
 10c:	00000b93 	.word	0x00000b93
 110:	00000b93 	.word	0x00000b93
 114:	00000b93 	.word	0x00000b93
 118:	00000b93 	.word	0x00000b93
 11c:	00000b93 	.word	0x00000b93
 120:	00000b93 	.word	0x00000b93
 124:	00000b93 	.word	0x00000b93
 128:	00000b93 	.word	0x00000b93
 12c:	00000b93 	.word	0x00000b93
 130:	00000b93 	.word	0x00000b93
 134:	00000b93 	.word	0x00000b93
 138:	00000b93 	.word	0x00000b93
 13c:	00000b93 	.word	0x00000b93
 140:	00000b93 	.word	0x00000b93
 144:	00000b93 	.word	0x00000b93
 148:	00000b93 	.word	0x00000b93
 14c:	00000b93 	.word	0x00000b93
 150:	00000b93 	.word	0x00000b93
 154:	00000b93 	.word	0x00000b93
 158:	00000b93 	.word	0x00000b93
 15c:	00000b93 	.word	0x00000b93
 160:	00000b93 	.word	0x00000b93
 164:	00000b93 	.word	0x00000b93
 168:	00000b93 	.word	0x00000b93
 16c:	00000b93 	.word	0x00000b93
 170:	00000b93 	.word	0x00000b93
 174:	00000b93 	.word	0x00000b93
 178:	00000b93 	.word	0x00000b93
 17c:	00000b93 	.word	0x00000b93
 180:	00000b93 	.word	0x00000b93
 184:	00000b93 	.word	0x00000b93
 188:	00000b93 	.word	0x00000b93
 18c:	00000b93 	.word	0x00000b93
 190:	00000b93 	.word	0x00000b93
 194:	00000b93 	.word	0x00000b93
 198:	00000b93 	.word	0x00000b93
 19c:	00000b93 	.word	0x00000b93
 1a0:	00000b93 	.word	0x00000b93
 1a4:	00000b93 	.word	0x00000b93
 1a8:	00000b93 	.word	0x00000b93
 1ac:	00000b93 	.word	0x00000b93
 1b0:	00000b93 	.word	0x00000b93
 1b4:	00000b93 	.word	0x00000b93
 1b8:	00000b93 	.word	0x00000b93
 1bc:	00000b93 	.word	0x00000b93
 1c0:	00000b93 	.word	0x00000b93
 1c4:	00000b93 	.word	0x00000b93
 1c8:	00000b93 	.word	0x00000b93
 1cc:	00000b93 	.word	0x00000b93
 1d0:	00000b93 	.word	0x00000b93
 1d4:	00000b93 	.word	0x00000b93
 1d8:	00000b93 	.word	0x00000b93
 1dc:	00000b93 	.word	0x00000b93
 1e0:	00000b93 	.word	0x00000b93
 1e4:	00000b93 	.word	0x00000b93
 1e8:	00000b93 	.word	0x00000b93
 1ec:	00000b93 	.word	0x00000b93
 1f0:	00000b93 	.word	0x00000b93
 1f4:	00000b93 	.word	0x00000b93
 1f8:	00000b93 	.word	0x00000b93
 1fc:	00000b93 	.word	0x00000b93
 200:	00000b93 	.word	0x00000b93
 204:	00000b93 	.word	0x00000b93
 208:	00000b93 	.word	0x00000b93
 20c:	00000b93 	.word	0x00000b93
 210:	00000b93 	.word	0x00000b93
 214:	00000b93 	.word	0x00000b93
 218:	00000b93 	.word	0x00000b93
 21c:	00000b93 	.word	0x00000b93
 220:	00000b93 	.word	0x00000b93
 224:	00000b93 	.word	0x00000b93
 228:	00000b93 	.word	0x00000b93
 22c:	00000b93 	.word	0x00000b93
 230:	00000b93 	.word	0x00000b93
 234:	00000b93 	.word	0x00000b93
 238:	00000b93 	.word	0x00000b93
 23c:	00000b93 	.word	0x00000b93
 240:	00000b93 	.word	0x00000b93
 244:	00000b93 	.word	0x00000b93
 248:	00000b93 	.word	0x00000b93
 24c:	00000b93 	.word	0x00000b93
 250:	00000b93 	.word	0x00000b93
 254:	00000b93 	.word	0x00000b93
 258:	00000b93 	.word	0x00000b93
 25c:	00000b93 	.word	0x00000b93
 260:	00000b93 	.word	0x00000b93
 264:	00000b93 	.word	0x00000b93
 268:	00000b93 	.word	0x00000b93
 26c:	00000b93 	.word	0x00000b93
 270:	00000b93 	.word	0x00000b93
 274:	00000b93 	.word	0x00000b93
 278:	00000b93 	.word	0x00000b93
 27c:	00000b93 	.word	0x00000b93
 280:	00000b93 	.word	0x00000b93
 284:	00000b93 	.word	0x00000b93
 288:	00000b93 	.word	0x00000b93
 28c:	00000b93 	.word	0x00000b93
 290:	00000b93 	.word	0x00000b93
 294:	00000b93 	.word	0x00000b93
 298:	00000b93 	.word	0x00000b93
 29c:	00000b93 	.word	0x00000b93
 2a0:	00000b93 	.word	0x00000b93
 2a4:	00000b93 	.word	0x00000b93
 2a8:	00000b93 	.word	0x00000b93
 2ac:	00000b93 	.word	0x00000b93
 2b0:	00000b93 	.word	0x00000b93
 2b4:	00000b93 	.word	0x00000b93
 2b8:	00000b93 	.word	0x00000b93
 2bc:	00000b93 	.word	0x00000b93
 2c0:	00000b93 	.word	0x00000b93
 2c4:	00000b93 	.word	0x00000b93
 2c8:	00000b93 	.word	0x00000b93
 2cc:	00000b93 	.word	0x00000b93
 2d0:	00000b93 	.word	0x00000b93
 2d4:	00000b93 	.word	0x00000b93
 2d8:	00000b93 	.word	0x00000b93
 2dc:	00000b93 	.word	0x00000b93
 2e0:	00000b93 	.word	0x00000b93
 2e4:	00000b93 	.word	0x00000b93
 2e8:	00000b93 	.word	0x00000b93
 2ec:	00000b93 	.word	0x00000b93
 2f0:	00000b93 	.word	0x00000b93
 2f4:	00000b93 	.word	0x00000b93
 2f8:	00000b93 	.word	0x00000b93
 2fc:	00000b93 	.word	0x00000b93
 300:	00000b93 	.word	0x00000b93
 304:	00000b93 	.word	0x00000b93
 308:	00000b93 	.word	0x00000b93
 30c:	00000b93 	.word	0x00000b93

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fab5 	bl	9f0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb74 	bl	b78 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91f8 	.word	0x1fff91f8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fabf 	bl	b1c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b089      	sub	sp, #36	; 0x24
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    AdcReadGroupBuffer[4];
    Adc_ValueGroupType    ResultBuffer[4];

    EcuM_Init();
     8b4:	f000 f83c 	bl	930 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b8:	f000 fafe 	bl	eb8 <SEGGER_RTT_Init>
    • ADC1_SE9 and ADC0_SE9 channels are interleaved on PTB14 pin
    */
   
    /* By default ADC0-CH8 is not connected to B13, but with this function
    it will, this is called Interleave, read RM page 1194*/
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     8bc:	2208      	movs	r2, #8
     8be:	210d      	movs	r1, #13
     8c0:	4819      	ldr	r0, [pc, #100]	; (928 <main+0x78>)
     8c2:	f005 fc7d 	bl	61c0 <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8c6:	ab07      	add	r3, sp, #28
     8c8:	4619      	mov	r1, r3
     8ca:	2000      	movs	r0, #0
     8cc:	f007 f9e0 	bl	7c90 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     8d0:	ab03      	add	r3, sp, #12
     8d2:	4619      	mov	r1, r3
     8d4:	2000      	movs	r0, #0
     8d6:	f006 ff79 	bl	77cc <Adc_SetupResultBuffer>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     8da:	2000      	movs	r0, #0
     8dc:	f007 f814 	bl	7908 <Adc_StartGroupConversion>
        /* Wait until the conversion is done */
        while( Adc_GetGroupStatus( AdcGroup_0 ) == ADC_BUSY );
     8e0:	bf00      	nop
     8e2:	2000      	movs	r0, #0
     8e4:	f007 f8ed 	bl	7ac2 <Adc_GetGroupStatus>
     8e8:	4603      	mov	r3, r0
     8ea:	2b01      	cmp	r3, #1
     8ec:	d0f9      	beq.n	8e2 <main+0x32>
        /* Read ready conversion */
        Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );
     8ee:	ab05      	add	r3, sp, #20
     8f0:	4619      	mov	r1, r3
     8f2:	2000      	movs	r0, #0
     8f4:	f007 f8a0 	bl	7a38 <Adc_ReadGroup>
        /* Display value */
        SEGGER_RTT_printf( 0, "Pot1 CH5 value: %d, Pot1 CH4 value: %d, Pot2 CH8 value: %d, Pot2 CH9 value: %d \n", 
            AdcReadGroupBuffer[AdcChannel_0], AdcReadGroupBuffer[AdcChannel_2], AdcReadGroupBuffer[AdcChannel_1], AdcReadGroupBuffer[AdcChannel_3] );
     8f8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        SEGGER_RTT_printf( 0, "Pot1 CH5 value: %d, Pot1 CH4 value: %d, Pot2 CH8 value: %d, Pot2 CH9 value: %d \n", 
     8fc:	4619      	mov	r1, r3
            AdcReadGroupBuffer[AdcChannel_0], AdcReadGroupBuffer[AdcChannel_2], AdcReadGroupBuffer[AdcChannel_1], AdcReadGroupBuffer[AdcChannel_3] );
     8fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        SEGGER_RTT_printf( 0, "Pot1 CH5 value: %d, Pot1 CH4 value: %d, Pot2 CH8 value: %d, Pot2 CH9 value: %d \n", 
     902:	4618      	mov	r0, r3
            AdcReadGroupBuffer[AdcChannel_0], AdcReadGroupBuffer[AdcChannel_2], AdcReadGroupBuffer[AdcChannel_1], AdcReadGroupBuffer[AdcChannel_3] );
     904:	f8bd 3016 	ldrh.w	r3, [sp, #22]
     908:	f8bd 201a 	ldrh.w	r2, [sp, #26]
        SEGGER_RTT_printf( 0, "Pot1 CH5 value: %d, Pot1 CH4 value: %d, Pot2 CH8 value: %d, Pot2 CH9 value: %d \n", 
     90c:	9201      	str	r2, [sp, #4]
     90e:	9300      	str	r3, [sp, #0]
     910:	4603      	mov	r3, r0
     912:	460a      	mov	r2, r1
     914:	4905      	ldr	r1, [pc, #20]	; (92c <main+0x7c>)
     916:	2000      	movs	r0, #0
     918:	f000 fe36 	bl	1588 <SEGGER_RTT_printf>
        Delay( 1000u );
     91c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     920:	f000 f824 	bl	96c <Delay>
    {
     924:	e7d9      	b.n	8da <main+0x2a>
     926:	bf00      	nop
     928:	4004a000 	.word	0x4004a000
     92c:	000100fc 	.word	0x000100fc

00000930 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     930:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     932:	480b      	ldr	r0, [pc, #44]	; (960 <EcuM_Init+0x30>)
     934:	f004 fe6e 	bl	5614 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     938:	2000      	movs	r0, #0
     93a:	f004 febf 	bl	56bc <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     93e:	2000      	movs	r0, #0
     940:	f004 fee0 	bl	5704 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     944:	2000      	movs	r0, #0
     946:	f001 f8d0 	bl	1aea <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     94a:	2000      	movs	r0, #0
     94c:	f000 ffca 	bl	18e4 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5 (B1) and ADC0-SE8 (B13) */
    Port_Init( &Port_Config );
     950:	4804      	ldr	r0, [pc, #16]	; (964 <EcuM_Init+0x34>)
     952:	f005 fa61 	bl	5e18 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     956:	4804      	ldr	r0, [pc, #16]	; (968 <EcuM_Init+0x38>)
     958:	f006 feea 	bl	7730 <Adc_Init>
}
     95c:	bf00      	nop
     95e:	bd08      	pop	{r3, pc}
     960:	00010e34 	.word	0x00010e34
     964:	0001103c 	.word	0x0001103c
     968:	00010a0c 	.word	0x00010a0c

0000096c <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     96c:	b500      	push	{lr}
     96e:	b087      	sub	sp, #28
     970:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     972:	9b01      	ldr	r3, [sp, #4]
     974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     978:	fb02 f303 	mul.w	r3, r2, r3
     97c:	2101      	movs	r1, #1
     97e:	4618      	mov	r0, r3
     980:	f001 f908 	bl	1b94 <OsIf_MicrosToTicks>
     984:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     986:	2001      	movs	r0, #1
     988:	f001 f8b8 	bl	1afc <OsIf_GetCounter>
     98c:	4603      	mov	r3, r0
     98e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     990:	2300      	movs	r3, #0
     992:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     994:	ab03      	add	r3, sp, #12
     996:	2101      	movs	r1, #1
     998:	4618      	mov	r0, r3
     99a:	f001 f8c8 	bl	1b2e <OsIf_GetElapsed>
     99e:	4602      	mov	r2, r0
     9a0:	9b05      	ldr	r3, [sp, #20]
     9a2:	4413      	add	r3, r2
     9a4:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     9a6:	9a05      	ldr	r2, [sp, #20]
     9a8:	9b04      	ldr	r3, [sp, #16]
     9aa:	429a      	cmp	r2, r3
     9ac:	d3f2      	bcc.n	994 <Delay+0x28>
     9ae:	bf00      	nop
     9b0:	bf00      	nop
     9b2:	b007      	add	sp, #28
     9b4:	f85d fb04 	ldr.w	pc, [sp], #4

000009b8 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     9b8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ba:	f3ef 8310 	mrs	r3, PRIMASK
     9be:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c0:	4623      	mov	r3, r4
}
     9c2:	4618      	mov	r0, r3
     9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9c8:	4770      	bx	lr

000009ca <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9ca:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9cc:	f3ef 8310 	mrs	r3, PRIMASK
     9d0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9d2:	4623      	mov	r3, r4
}
     9d4:	4618      	mov	r0, r3
     9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
     9da:	4770      	bx	lr

000009dc <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9dc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9de:	f3ef 8310 	mrs	r3, PRIMASK
     9e2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9e4:	4623      	mov	r3, r4
}
     9e6:	4618      	mov	r0, r3
     9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ec:	4770      	bx	lr
	...

000009f0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     9f0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     9f2:	2300      	movs	r3, #0
     9f4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     9f6:	2300      	movs	r3, #0
     9f8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     9fa:	2300      	movs	r3, #0
     9fc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9fe:	2300      	movs	r3, #0
     a00:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a02:	4b44      	ldr	r3, [pc, #272]	; (b14 <init_data_bss+0x124>)
     a04:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a06:	4b44      	ldr	r3, [pc, #272]	; (b18 <init_data_bss+0x128>)
     a08:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a0a:	9b05      	ldr	r3, [sp, #20]
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a10:	9b05      	ldr	r3, [sp, #20]
     a12:	3304      	adds	r3, #4
     a14:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a16:	9b05      	ldr	r3, [sp, #20]
     a18:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a1a:	2300      	movs	r3, #0
     a1c:	9309      	str	r3, [sp, #36]	; 0x24
     a1e:	e03d      	b.n	a9c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a22:	4613      	mov	r3, r2
     a24:	005b      	lsls	r3, r3, #1
     a26:	4413      	add	r3, r2
     a28:	009b      	lsls	r3, r3, #2
     a2a:	461a      	mov	r2, r3
     a2c:	9b03      	ldr	r3, [sp, #12]
     a2e:	4413      	add	r3, r2
     a30:	685b      	ldr	r3, [r3, #4]
     a32:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a36:	4613      	mov	r3, r2
     a38:	005b      	lsls	r3, r3, #1
     a3a:	4413      	add	r3, r2
     a3c:	009b      	lsls	r3, r3, #2
     a3e:	461a      	mov	r2, r3
     a40:	9b03      	ldr	r3, [sp, #12]
     a42:	4413      	add	r3, r2
     a44:	681b      	ldr	r3, [r3, #0]
     a46:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a4a:	4613      	mov	r3, r2
     a4c:	005b      	lsls	r3, r3, #1
     a4e:	4413      	add	r3, r2
     a50:	009b      	lsls	r3, r3, #2
     a52:	461a      	mov	r2, r3
     a54:	9b03      	ldr	r3, [sp, #12]
     a56:	4413      	add	r3, r2
     a58:	689b      	ldr	r3, [r3, #8]
     a5a:	4619      	mov	r1, r3
     a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a5e:	4613      	mov	r3, r2
     a60:	005b      	lsls	r3, r3, #1
     a62:	4413      	add	r3, r2
     a64:	009b      	lsls	r3, r3, #2
     a66:	461a      	mov	r2, r3
     a68:	9b03      	ldr	r3, [sp, #12]
     a6a:	4413      	add	r3, r2
     a6c:	685b      	ldr	r3, [r3, #4]
     a6e:	1acb      	subs	r3, r1, r3
     a70:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a72:	2300      	movs	r3, #0
     a74:	9308      	str	r3, [sp, #32]
     a76:	e00a      	b.n	a8e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a78:	9a00      	ldr	r2, [sp, #0]
     a7a:	9b08      	ldr	r3, [sp, #32]
     a7c:	441a      	add	r2, r3
     a7e:	9901      	ldr	r1, [sp, #4]
     a80:	9b08      	ldr	r3, [sp, #32]
     a82:	440b      	add	r3, r1
     a84:	7812      	ldrb	r2, [r2, #0]
     a86:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a88:	9b08      	ldr	r3, [sp, #32]
     a8a:	3301      	adds	r3, #1
     a8c:	9308      	str	r3, [sp, #32]
     a8e:	9a08      	ldr	r2, [sp, #32]
     a90:	9b06      	ldr	r3, [sp, #24]
     a92:	429a      	cmp	r2, r3
     a94:	d3f0      	bcc.n	a78 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a98:	3301      	adds	r3, #1
     a9a:	9309      	str	r3, [sp, #36]	; 0x24
     a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a9e:	9b07      	ldr	r3, [sp, #28]
     aa0:	429a      	cmp	r2, r3
     aa2:	d3bd      	bcc.n	a20 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     aa4:	9b04      	ldr	r3, [sp, #16]
     aa6:	681b      	ldr	r3, [r3, #0]
     aa8:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     aaa:	9b04      	ldr	r3, [sp, #16]
     aac:	3304      	adds	r3, #4
     aae:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     ab0:	9b04      	ldr	r3, [sp, #16]
     ab2:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     ab4:	2300      	movs	r3, #0
     ab6:	9309      	str	r3, [sp, #36]	; 0x24
     ab8:	e024      	b.n	b04 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
     abc:	00db      	lsls	r3, r3, #3
     abe:	9a02      	ldr	r2, [sp, #8]
     ac0:	4413      	add	r3, r2
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ac8:	00db      	lsls	r3, r3, #3
     aca:	9a02      	ldr	r2, [sp, #8]
     acc:	4413      	add	r3, r2
     ace:	685b      	ldr	r3, [r3, #4]
     ad0:	4619      	mov	r1, r3
     ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ad4:	00db      	lsls	r3, r3, #3
     ad6:	9a02      	ldr	r2, [sp, #8]
     ad8:	4413      	add	r3, r2
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	1acb      	subs	r3, r1, r3
     ade:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ae0:	2300      	movs	r3, #0
     ae2:	9308      	str	r3, [sp, #32]
     ae4:	e007      	b.n	af6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     ae6:	9a01      	ldr	r2, [sp, #4]
     ae8:	9b08      	ldr	r3, [sp, #32]
     aea:	4413      	add	r3, r2
     aec:	2200      	movs	r2, #0
     aee:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     af0:	9b08      	ldr	r3, [sp, #32]
     af2:	3301      	adds	r3, #1
     af4:	9308      	str	r3, [sp, #32]
     af6:	9a08      	ldr	r2, [sp, #32]
     af8:	9b06      	ldr	r3, [sp, #24]
     afa:	429a      	cmp	r2, r3
     afc:	d3f3      	bcc.n	ae6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b00:	3301      	adds	r3, #1
     b02:	9309      	str	r3, [sp, #36]	; 0x24
     b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b06:	9b07      	ldr	r3, [sp, #28]
     b08:	429a      	cmp	r2, r3
     b0a:	d3d6      	bcc.n	aba <init_data_bss+0xca>
        }
    }
}
     b0c:	bf00      	nop
     b0e:	bf00      	nop
     b10:	b00a      	add	sp, #40	; 0x28
     b12:	4770      	bx	lr
     b14:	000110ac 	.word	0x000110ac
     b18:	000110c8 	.word	0x000110c8

00000b1c <sys_m4_cache_init>:
{
     b1c:	b084      	sub	sp, #16
     b1e:	4603      	mov	r3, r0
     b20:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b24:	2300      	movs	r3, #0
     b26:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b2e:	2b00      	cmp	r3, #0
     b30:	d118      	bne.n	b64 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b32:	4b10      	ldr	r3, [pc, #64]	; (b74 <sys_m4_cache_init+0x58>)
     b34:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b38:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b3a:	4b0e      	ldr	r3, [pc, #56]	; (b74 <sys_m4_cache_init+0x58>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	4a0d      	ldr	r2, [pc, #52]	; (b74 <sys_m4_cache_init+0x58>)
     b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b44:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b46:	bf00      	nop
     b48:	4b0a      	ldr	r3, [pc, #40]	; (b74 <sys_m4_cache_init+0x58>)
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b54:	d0f8      	beq.n	b48 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <sys_m4_cache_init+0x58>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	4a06      	ldr	r2, [pc, #24]	; (b74 <sys_m4_cache_init+0x58>)
     b5c:	f043 0301 	orr.w	r3, r3, #1
     b60:	6013      	str	r3, [r2, #0]
     b62:	e002      	b.n	b6a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b64:	2301      	movs	r3, #1
     b66:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b6e:	4618      	mov	r0, r3
     b70:	b004      	add	sp, #16
     b72:	4770      	bx	lr
     b74:	e0082000 	.word	0xe0082000

00000b78 <startup_go_to_user_mode>:
}
     b78:	bf00      	nop
     b7a:	4770      	bx	lr

00000b7c <Sys_GetCoreID>:
    return 0U;
     b7c:	2300      	movs	r3, #0
}
     b7e:	4618      	mov	r0, r3
     b80:	4770      	bx	lr

00000b82 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b82:	e7fe      	b.n	b82 <HardFault_Handler>

00000b84 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b84:	e7fe      	b.n	b84 <MemManage_Handler>

00000b86 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b86:	e7fe      	b.n	b86 <BusFault_Handler>

00000b88 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b88:	e7fe      	b.n	b88 <UsageFault_Handler>

00000b8a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b8a:	e7fe      	b.n	b8a <SVC_Handler>

00000b8c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b8c:	e7fe      	b.n	b8c <DebugMon_Handler>

00000b8e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b8e:	e7fe      	b.n	b8e <PendSV_Handler>

00000b90 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b90:	e7fe      	b.n	b90 <SysTick_Handler>

00000b92 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b92:	e7fe      	b.n	b92 <undefined_handler>

00000b94 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     b94:	b500      	push	{lr}
     b96:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     b98:	4b26      	ldr	r3, [pc, #152]	; (c34 <_DoInit+0xa0>)
     b9a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     b9c:	22a8      	movs	r2, #168	; 0xa8
     b9e:	2100      	movs	r1, #0
     ba0:	9800      	ldr	r0, [sp, #0]
     ba2:	f000 fd13 	bl	15cc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     ba6:	9b00      	ldr	r3, [sp, #0]
     ba8:	2203      	movs	r2, #3
     baa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     bac:	9b00      	ldr	r3, [sp, #0]
     bae:	2203      	movs	r2, #3
     bb0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     bb2:	9b00      	ldr	r3, [sp, #0]
     bb4:	4a20      	ldr	r2, [pc, #128]	; (c38 <_DoInit+0xa4>)
     bb6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     bb8:	9b00      	ldr	r3, [sp, #0]
     bba:	4a20      	ldr	r2, [pc, #128]	; (c3c <_DoInit+0xa8>)
     bbc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     bbe:	9b00      	ldr	r3, [sp, #0]
     bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     bc4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     bc6:	9b00      	ldr	r3, [sp, #0]
     bc8:	2200      	movs	r2, #0
     bca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     bcc:	9b00      	ldr	r3, [sp, #0]
     bce:	2200      	movs	r2, #0
     bd0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bd2:	9b00      	ldr	r3, [sp, #0]
     bd4:	2200      	movs	r2, #0
     bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     bd8:	9b00      	ldr	r3, [sp, #0]
     bda:	4a17      	ldr	r2, [pc, #92]	; (c38 <_DoInit+0xa4>)
     bdc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     bde:	9b00      	ldr	r3, [sp, #0]
     be0:	4a17      	ldr	r2, [pc, #92]	; (c40 <_DoInit+0xac>)
     be2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     be4:	9b00      	ldr	r3, [sp, #0]
     be6:	2210      	movs	r2, #16
     be8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     bea:	9b00      	ldr	r3, [sp, #0]
     bec:	2200      	movs	r2, #0
     bee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     bf0:	9b00      	ldr	r3, [sp, #0]
     bf2:	2200      	movs	r2, #0
     bf4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bf6:	9b00      	ldr	r3, [sp, #0]
     bf8:	2200      	movs	r2, #0
     bfa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     bfc:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c00:	2300      	movs	r3, #0
     c02:	9301      	str	r3, [sp, #4]
     c04:	e00c      	b.n	c20 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c06:	9b01      	ldr	r3, [sp, #4]
     c08:	f1c3 030f 	rsb	r3, r3, #15
     c0c:	4a0d      	ldr	r2, [pc, #52]	; (c44 <_DoInit+0xb0>)
     c0e:	5cd1      	ldrb	r1, [r2, r3]
     c10:	9a00      	ldr	r2, [sp, #0]
     c12:	9b01      	ldr	r3, [sp, #4]
     c14:	4413      	add	r3, r2
     c16:	460a      	mov	r2, r1
     c18:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c1a:	9b01      	ldr	r3, [sp, #4]
     c1c:	3301      	adds	r3, #1
     c1e:	9301      	str	r3, [sp, #4]
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	2b0f      	cmp	r3, #15
     c24:	d9ef      	bls.n	c06 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c26:	f3bf 8f5f 	dmb	sy
}
     c2a:	bf00      	nop
     c2c:	b003      	add	sp, #12
     c2e:	f85d fb04 	ldr.w	pc, [sp], #4
     c32:	bf00      	nop
     c34:	1fff91fc 	.word	0x1fff91fc
     c38:	00010150 	.word	0x00010150
     c3c:	1fff92a4 	.word	0x1fff92a4
     c40:	1fff96a4 	.word	0x1fff96a4
     c44:	00011088 	.word	0x00011088

00000c48 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     c48:	b500      	push	{lr}
     c4a:	b08b      	sub	sp, #44	; 0x2c
     c4c:	9003      	str	r0, [sp, #12]
     c4e:	9102      	str	r1, [sp, #8]
     c50:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     c52:	2300      	movs	r3, #0
     c54:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     c56:	9b03      	ldr	r3, [sp, #12]
     c58:	68db      	ldr	r3, [r3, #12]
     c5a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     c5c:	9b03      	ldr	r3, [sp, #12]
     c5e:	691b      	ldr	r3, [r3, #16]
     c60:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     c62:	9a06      	ldr	r2, [sp, #24]
     c64:	9b07      	ldr	r3, [sp, #28]
     c66:	429a      	cmp	r2, r3
     c68:	d905      	bls.n	c76 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     c6a:	9a06      	ldr	r2, [sp, #24]
     c6c:	9b07      	ldr	r3, [sp, #28]
     c6e:	1ad3      	subs	r3, r2, r3
     c70:	3b01      	subs	r3, #1
     c72:	9309      	str	r3, [sp, #36]	; 0x24
     c74:	e007      	b.n	c86 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     c76:	9b03      	ldr	r3, [sp, #12]
     c78:	689a      	ldr	r2, [r3, #8]
     c7a:	9906      	ldr	r1, [sp, #24]
     c7c:	9b07      	ldr	r3, [sp, #28]
     c7e:	1acb      	subs	r3, r1, r3
     c80:	4413      	add	r3, r2
     c82:	3b01      	subs	r3, #1
     c84:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     c86:	9b03      	ldr	r3, [sp, #12]
     c88:	689a      	ldr	r2, [r3, #8]
     c8a:	9b07      	ldr	r3, [sp, #28]
     c8c:	1ad3      	subs	r3, r2, r3
     c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c90:	4293      	cmp	r3, r2
     c92:	bf28      	it	cs
     c94:	4613      	movcs	r3, r2
     c96:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c9a:	9b01      	ldr	r3, [sp, #4]
     c9c:	4293      	cmp	r3, r2
     c9e:	bf28      	it	cs
     ca0:	4613      	movcs	r3, r2
     ca2:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     ca4:	9b03      	ldr	r3, [sp, #12]
     ca6:	685a      	ldr	r2, [r3, #4]
     ca8:	9b07      	ldr	r3, [sp, #28]
     caa:	4413      	add	r3, r2
     cac:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cb0:	9902      	ldr	r1, [sp, #8]
     cb2:	9805      	ldr	r0, [sp, #20]
     cb4:	f000 fc7c 	bl	15b0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     cb8:	9a08      	ldr	r2, [sp, #32]
     cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cbc:	4413      	add	r3, r2
     cbe:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     cc0:	9a02      	ldr	r2, [sp, #8]
     cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cc4:	4413      	add	r3, r2
     cc6:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     cc8:	9a01      	ldr	r2, [sp, #4]
     cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ccc:	1ad3      	subs	r3, r2, r3
     cce:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     cd0:	9a07      	ldr	r2, [sp, #28]
     cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cd4:	4413      	add	r3, r2
     cd6:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     cd8:	9b03      	ldr	r3, [sp, #12]
     cda:	689b      	ldr	r3, [r3, #8]
     cdc:	9a07      	ldr	r2, [sp, #28]
     cde:	429a      	cmp	r2, r3
     ce0:	d101      	bne.n	ce6 <_WriteBlocking+0x9e>
      WrOff = 0u;
     ce2:	2300      	movs	r3, #0
     ce4:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     ce6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     cea:	9b03      	ldr	r3, [sp, #12]
     cec:	9a07      	ldr	r2, [sp, #28]
     cee:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     cf0:	9b01      	ldr	r3, [sp, #4]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d1b2      	bne.n	c5c <_WriteBlocking+0x14>
  return NumBytesWritten;
     cf6:	9b08      	ldr	r3, [sp, #32]
}
     cf8:	4618      	mov	r0, r3
     cfa:	b00b      	add	sp, #44	; 0x2c
     cfc:	f85d fb04 	ldr.w	pc, [sp], #4

00000d00 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d00:	b500      	push	{lr}
     d02:	b089      	sub	sp, #36	; 0x24
     d04:	9003      	str	r0, [sp, #12]
     d06:	9102      	str	r1, [sp, #8]
     d08:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d0a:	9b03      	ldr	r3, [sp, #12]
     d0c:	68db      	ldr	r3, [r3, #12]
     d0e:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     d10:	9b03      	ldr	r3, [sp, #12]
     d12:	689a      	ldr	r2, [r3, #8]
     d14:	9b07      	ldr	r3, [sp, #28]
     d16:	1ad3      	subs	r3, r2, r3
     d18:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     d1a:	9a06      	ldr	r2, [sp, #24]
     d1c:	9b01      	ldr	r3, [sp, #4]
     d1e:	429a      	cmp	r2, r3
     d20:	d911      	bls.n	d46 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d22:	9b03      	ldr	r3, [sp, #12]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	9b07      	ldr	r3, [sp, #28]
     d28:	4413      	add	r3, r2
     d2a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d2c:	9a01      	ldr	r2, [sp, #4]
     d2e:	9902      	ldr	r1, [sp, #8]
     d30:	9804      	ldr	r0, [sp, #16]
     d32:	f000 fc3d 	bl	15b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d36:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     d3a:	9a07      	ldr	r2, [sp, #28]
     d3c:	9b01      	ldr	r3, [sp, #4]
     d3e:	441a      	add	r2, r3
     d40:	9b03      	ldr	r3, [sp, #12]
     d42:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     d44:	e01f      	b.n	d86 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     d46:	9b06      	ldr	r3, [sp, #24]
     d48:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d4a:	9b03      	ldr	r3, [sp, #12]
     d4c:	685a      	ldr	r2, [r3, #4]
     d4e:	9b07      	ldr	r3, [sp, #28]
     d50:	4413      	add	r3, r2
     d52:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     d54:	9a05      	ldr	r2, [sp, #20]
     d56:	9902      	ldr	r1, [sp, #8]
     d58:	9804      	ldr	r0, [sp, #16]
     d5a:	f000 fc29 	bl	15b0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     d5e:	9a01      	ldr	r2, [sp, #4]
     d60:	9b06      	ldr	r3, [sp, #24]
     d62:	1ad3      	subs	r3, r2, r3
     d64:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     d66:	9b03      	ldr	r3, [sp, #12]
     d68:	685b      	ldr	r3, [r3, #4]
     d6a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     d6c:	9a02      	ldr	r2, [sp, #8]
     d6e:	9b06      	ldr	r3, [sp, #24]
     d70:	4413      	add	r3, r2
     d72:	9a05      	ldr	r2, [sp, #20]
     d74:	4619      	mov	r1, r3
     d76:	9804      	ldr	r0, [sp, #16]
     d78:	f000 fc1a 	bl	15b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     d80:	9b03      	ldr	r3, [sp, #12]
     d82:	9a05      	ldr	r2, [sp, #20]
     d84:	60da      	str	r2, [r3, #12]
}
     d86:	bf00      	nop
     d88:	b009      	add	sp, #36	; 0x24
     d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00000d8e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     d8e:	b086      	sub	sp, #24
     d90:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     d92:	9b01      	ldr	r3, [sp, #4]
     d94:	691b      	ldr	r3, [r3, #16]
     d96:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     d98:	9b01      	ldr	r3, [sp, #4]
     d9a:	68db      	ldr	r3, [r3, #12]
     d9c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     d9e:	9a04      	ldr	r2, [sp, #16]
     da0:	9b03      	ldr	r3, [sp, #12]
     da2:	429a      	cmp	r2, r3
     da4:	d808      	bhi.n	db8 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     da6:	9b01      	ldr	r3, [sp, #4]
     da8:	689a      	ldr	r2, [r3, #8]
     daa:	9b03      	ldr	r3, [sp, #12]
     dac:	1ad2      	subs	r2, r2, r3
     dae:	9b04      	ldr	r3, [sp, #16]
     db0:	4413      	add	r3, r2
     db2:	3b01      	subs	r3, #1
     db4:	9305      	str	r3, [sp, #20]
     db6:	e004      	b.n	dc2 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     db8:	9a04      	ldr	r2, [sp, #16]
     dba:	9b03      	ldr	r3, [sp, #12]
     dbc:	1ad3      	subs	r3, r2, r3
     dbe:	3b01      	subs	r3, #1
     dc0:	9305      	str	r3, [sp, #20]
  }
  return r;
     dc2:	9b05      	ldr	r3, [sp, #20]
}
     dc4:	4618      	mov	r0, r3
     dc6:	b006      	add	sp, #24
     dc8:	4770      	bx	lr
	...

00000dcc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     dcc:	b500      	push	{lr}
     dce:	b089      	sub	sp, #36	; 0x24
     dd0:	9003      	str	r0, [sp, #12]
     dd2:	9102      	str	r1, [sp, #8]
     dd4:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     dd6:	9b02      	ldr	r3, [sp, #8]
     dd8:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     dda:	9b03      	ldr	r3, [sp, #12]
     ddc:	1c5a      	adds	r2, r3, #1
     dde:	4613      	mov	r3, r2
     de0:	005b      	lsls	r3, r3, #1
     de2:	4413      	add	r3, r2
     de4:	00db      	lsls	r3, r3, #3
     de6:	4a20      	ldr	r2, [pc, #128]	; (e68 <SEGGER_RTT_WriteNoLock+0x9c>)
     de8:	4413      	add	r3, r2
     dea:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     dec:	9b05      	ldr	r3, [sp, #20]
     dee:	695b      	ldr	r3, [r3, #20]
     df0:	2b02      	cmp	r3, #2
     df2:	d029      	beq.n	e48 <SEGGER_RTT_WriteNoLock+0x7c>
     df4:	2b02      	cmp	r3, #2
     df6:	d82e      	bhi.n	e56 <SEGGER_RTT_WriteNoLock+0x8a>
     df8:	2b00      	cmp	r3, #0
     dfa:	d002      	beq.n	e02 <SEGGER_RTT_WriteNoLock+0x36>
     dfc:	2b01      	cmp	r3, #1
     dfe:	d013      	beq.n	e28 <SEGGER_RTT_WriteNoLock+0x5c>
     e00:	e029      	b.n	e56 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e02:	9805      	ldr	r0, [sp, #20]
     e04:	f7ff ffc3 	bl	d8e <_GetAvailWriteSpace>
     e08:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e0a:	9a04      	ldr	r2, [sp, #16]
     e0c:	9b01      	ldr	r3, [sp, #4]
     e0e:	429a      	cmp	r2, r3
     e10:	d202      	bcs.n	e18 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     e12:	2300      	movs	r3, #0
     e14:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e16:	e021      	b.n	e5c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     e18:	9b01      	ldr	r3, [sp, #4]
     e1a:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     e1c:	9a01      	ldr	r2, [sp, #4]
     e1e:	9906      	ldr	r1, [sp, #24]
     e20:	9805      	ldr	r0, [sp, #20]
     e22:	f7ff ff6d 	bl	d00 <_WriteNoCheck>
    break;
     e26:	e019      	b.n	e5c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e28:	9805      	ldr	r0, [sp, #20]
     e2a:	f7ff ffb0 	bl	d8e <_GetAvailWriteSpace>
     e2e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     e30:	9a01      	ldr	r2, [sp, #4]
     e32:	9b04      	ldr	r3, [sp, #16]
     e34:	4293      	cmp	r3, r2
     e36:	bf28      	it	cs
     e38:	4613      	movcs	r3, r2
     e3a:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     e3c:	9a07      	ldr	r2, [sp, #28]
     e3e:	9906      	ldr	r1, [sp, #24]
     e40:	9805      	ldr	r0, [sp, #20]
     e42:	f7ff ff5d 	bl	d00 <_WriteNoCheck>
    break;
     e46:	e009      	b.n	e5c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     e48:	9a01      	ldr	r2, [sp, #4]
     e4a:	9906      	ldr	r1, [sp, #24]
     e4c:	9805      	ldr	r0, [sp, #20]
     e4e:	f7ff fefb 	bl	c48 <_WriteBlocking>
     e52:	9007      	str	r0, [sp, #28]
    break;
     e54:	e002      	b.n	e5c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     e56:	2300      	movs	r3, #0
     e58:	9307      	str	r3, [sp, #28]
    break;
     e5a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     e5c:	9b07      	ldr	r3, [sp, #28]
}
     e5e:	4618      	mov	r0, r3
     e60:	b009      	add	sp, #36	; 0x24
     e62:	f85d fb04 	ldr.w	pc, [sp], #4
     e66:	bf00      	nop
     e68:	1fff91fc 	.word	0x1fff91fc

00000e6c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e6c:	b500      	push	{lr}
     e6e:	b089      	sub	sp, #36	; 0x24
     e70:	9003      	str	r0, [sp, #12]
     e72:	9102      	str	r1, [sp, #8]
     e74:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     e76:	4b0f      	ldr	r3, [pc, #60]	; (eb4 <SEGGER_RTT_Write+0x48>)
     e78:	9307      	str	r3, [sp, #28]
     e7a:	9b07      	ldr	r3, [sp, #28]
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	b2db      	uxtb	r3, r3
     e80:	2b53      	cmp	r3, #83	; 0x53
     e82:	d001      	beq.n	e88 <SEGGER_RTT_Write+0x1c>
     e84:	f7ff fe86 	bl	b94 <_DoInit>
  SEGGER_RTT_LOCK();
     e88:	f3ef 8311 	mrs	r3, BASEPRI
     e8c:	f04f 0120 	mov.w	r1, #32
     e90:	f381 8811 	msr	BASEPRI, r1
     e94:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     e96:	9a01      	ldr	r2, [sp, #4]
     e98:	9902      	ldr	r1, [sp, #8]
     e9a:	9803      	ldr	r0, [sp, #12]
     e9c:	f7ff ff96 	bl	dcc <SEGGER_RTT_WriteNoLock>
     ea0:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     ea2:	9b06      	ldr	r3, [sp, #24]
     ea4:	f383 8811 	msr	BASEPRI, r3
  return Status;
     ea8:	9b05      	ldr	r3, [sp, #20]
}
     eaa:	4618      	mov	r0, r3
     eac:	b009      	add	sp, #36	; 0x24
     eae:	f85d fb04 	ldr.w	pc, [sp], #4
     eb2:	bf00      	nop
     eb4:	1fff91fc 	.word	0x1fff91fc

00000eb8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     eb8:	b508      	push	{r3, lr}
  _DoInit();
     eba:	f7ff fe6b 	bl	b94 <_DoInit>
}
     ebe:	bf00      	nop
     ec0:	bd08      	pop	{r3, pc}

00000ec2 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     ec2:	b500      	push	{lr}
     ec4:	b085      	sub	sp, #20
     ec6:	9001      	str	r0, [sp, #4]
     ec8:	460b      	mov	r3, r1
     eca:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     ece:	9b01      	ldr	r3, [sp, #4]
     ed0:	689b      	ldr	r3, [r3, #8]
     ed2:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     ed4:	9b03      	ldr	r3, [sp, #12]
     ed6:	1c5a      	adds	r2, r3, #1
     ed8:	9b01      	ldr	r3, [sp, #4]
     eda:	685b      	ldr	r3, [r3, #4]
     edc:	429a      	cmp	r2, r3
     ede:	d80f      	bhi.n	f00 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     ee0:	9b01      	ldr	r3, [sp, #4]
     ee2:	681a      	ldr	r2, [r3, #0]
     ee4:	9b03      	ldr	r3, [sp, #12]
     ee6:	4413      	add	r3, r2
     ee8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     eec:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     eee:	9b03      	ldr	r3, [sp, #12]
     ef0:	1c5a      	adds	r2, r3, #1
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     ef6:	9b01      	ldr	r3, [sp, #4]
     ef8:	68db      	ldr	r3, [r3, #12]
     efa:	1c5a      	adds	r2, r3, #1
     efc:	9b01      	ldr	r3, [sp, #4]
     efe:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f00:	9b01      	ldr	r3, [sp, #4]
     f02:	689a      	ldr	r2, [r3, #8]
     f04:	9b01      	ldr	r3, [sp, #4]
     f06:	685b      	ldr	r3, [r3, #4]
     f08:	429a      	cmp	r2, r3
     f0a:	d115      	bne.n	f38 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f0c:	9b01      	ldr	r3, [sp, #4]
     f0e:	6918      	ldr	r0, [r3, #16]
     f10:	9b01      	ldr	r3, [sp, #4]
     f12:	6819      	ldr	r1, [r3, #0]
     f14:	9b01      	ldr	r3, [sp, #4]
     f16:	689b      	ldr	r3, [r3, #8]
     f18:	461a      	mov	r2, r3
     f1a:	f7ff ffa7 	bl	e6c <SEGGER_RTT_Write>
     f1e:	4602      	mov	r2, r0
     f20:	9b01      	ldr	r3, [sp, #4]
     f22:	689b      	ldr	r3, [r3, #8]
     f24:	429a      	cmp	r2, r3
     f26:	d004      	beq.n	f32 <_StoreChar+0x70>
      p->ReturnValue = -1;
     f28:	9b01      	ldr	r3, [sp, #4]
     f2a:	f04f 32ff 	mov.w	r2, #4294967295
     f2e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     f30:	e002      	b.n	f38 <_StoreChar+0x76>
      p->Cnt = 0u;
     f32:	9b01      	ldr	r3, [sp, #4]
     f34:	2200      	movs	r2, #0
     f36:	609a      	str	r2, [r3, #8]
}
     f38:	bf00      	nop
     f3a:	b005      	add	sp, #20
     f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f40 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     f40:	b500      	push	{lr}
     f42:	b08b      	sub	sp, #44	; 0x2c
     f44:	9003      	str	r0, [sp, #12]
     f46:	9102      	str	r1, [sp, #8]
     f48:	9201      	str	r2, [sp, #4]
     f4a:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     f4c:	9b02      	ldr	r3, [sp, #8]
     f4e:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     f50:	2301      	movs	r3, #1
     f52:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     f54:	2301      	movs	r3, #1
     f56:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f58:	e007      	b.n	f6a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     f5a:	9a08      	ldr	r2, [sp, #32]
     f5c:	9b01      	ldr	r3, [sp, #4]
     f5e:	fbb2 f3f3 	udiv	r3, r2, r3
     f62:	9308      	str	r3, [sp, #32]
    Width++;
     f64:	9b07      	ldr	r3, [sp, #28]
     f66:	3301      	adds	r3, #1
     f68:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f6a:	9a08      	ldr	r2, [sp, #32]
     f6c:	9b01      	ldr	r3, [sp, #4]
     f6e:	429a      	cmp	r2, r3
     f70:	d2f3      	bcs.n	f5a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     f72:	9a00      	ldr	r2, [sp, #0]
     f74:	9b07      	ldr	r3, [sp, #28]
     f76:	429a      	cmp	r2, r3
     f78:	d901      	bls.n	f7e <_PrintUnsigned+0x3e>
    Width = NumDigits;
     f7a:	9b00      	ldr	r3, [sp, #0]
     f7c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f80:	f003 0301 	and.w	r3, r3, #1
     f84:	2b00      	cmp	r3, #0
     f86:	d128      	bne.n	fda <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f8a:	2b00      	cmp	r3, #0
     f8c:	d025      	beq.n	fda <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f90:	f003 0302 	and.w	r3, r3, #2
     f94:	2b00      	cmp	r3, #0
     f96:	d006      	beq.n	fa6 <_PrintUnsigned+0x66>
     f98:	9b00      	ldr	r3, [sp, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d103      	bne.n	fa6 <_PrintUnsigned+0x66>
        c = '0';
     f9e:	2330      	movs	r3, #48	; 0x30
     fa0:	f88d 301b 	strb.w	r3, [sp, #27]
     fa4:	e002      	b.n	fac <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     fa6:	2320      	movs	r3, #32
     fa8:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fac:	e00c      	b.n	fc8 <_PrintUnsigned+0x88>
        FieldWidth--;
     fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fb0:	3b01      	subs	r3, #1
     fb2:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
     fb4:	f89d 301b 	ldrb.w	r3, [sp, #27]
     fb8:	4619      	mov	r1, r3
     fba:	9803      	ldr	r0, [sp, #12]
     fbc:	f7ff ff81 	bl	ec2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
     fc0:	9b03      	ldr	r3, [sp, #12]
     fc2:	68db      	ldr	r3, [r3, #12]
     fc4:	2b00      	cmp	r3, #0
     fc6:	db07      	blt.n	fd8 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fca:	2b00      	cmp	r3, #0
     fcc:	d005      	beq.n	fda <_PrintUnsigned+0x9a>
     fce:	9a07      	ldr	r2, [sp, #28]
     fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fd2:	429a      	cmp	r2, r3
     fd4:	d3eb      	bcc.n	fae <_PrintUnsigned+0x6e>
     fd6:	e000      	b.n	fda <_PrintUnsigned+0x9a>
          break;
     fd8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     fda:	9b03      	ldr	r3, [sp, #12]
     fdc:	68db      	ldr	r3, [r3, #12]
     fde:	2b00      	cmp	r3, #0
     fe0:	db55      	blt.n	108e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     fe2:	9b00      	ldr	r3, [sp, #0]
     fe4:	2b01      	cmp	r3, #1
     fe6:	d903      	bls.n	ff0 <_PrintUnsigned+0xb0>
        NumDigits--;
     fe8:	9b00      	ldr	r3, [sp, #0]
     fea:	3b01      	subs	r3, #1
     fec:	9300      	str	r3, [sp, #0]
     fee:	e009      	b.n	1004 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
     ff0:	9a02      	ldr	r2, [sp, #8]
     ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ff4:	fbb2 f3f3 	udiv	r3, r2, r3
     ff8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
     ffa:	9a05      	ldr	r2, [sp, #20]
     ffc:	9b01      	ldr	r3, [sp, #4]
     ffe:	429a      	cmp	r2, r3
    1000:	d200      	bcs.n	1004 <_PrintUnsigned+0xc4>
          break;
    1002:	e005      	b.n	1010 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1004:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1006:	9a01      	ldr	r2, [sp, #4]
    1008:	fb02 f303 	mul.w	r3, r2, r3
    100c:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    100e:	e7e8      	b.n	fe2 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1010:	9a02      	ldr	r2, [sp, #8]
    1012:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1014:	fbb2 f3f3 	udiv	r3, r2, r3
    1018:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    101a:	9b05      	ldr	r3, [sp, #20]
    101c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    101e:	fb02 f303 	mul.w	r3, r2, r3
    1022:	9a02      	ldr	r2, [sp, #8]
    1024:	1ad3      	subs	r3, r2, r3
    1026:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1028:	4a1b      	ldr	r2, [pc, #108]	; (1098 <_PrintUnsigned+0x158>)
    102a:	9b05      	ldr	r3, [sp, #20]
    102c:	4413      	add	r3, r2
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	4619      	mov	r1, r3
    1032:	9803      	ldr	r0, [sp, #12]
    1034:	f7ff ff45 	bl	ec2 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1038:	9b03      	ldr	r3, [sp, #12]
    103a:	68db      	ldr	r3, [r3, #12]
    103c:	2b00      	cmp	r3, #0
    103e:	db08      	blt.n	1052 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1040:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1042:	9b01      	ldr	r3, [sp, #4]
    1044:	fbb2 f3f3 	udiv	r3, r2, r3
    1048:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    104a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    104c:	2b00      	cmp	r3, #0
    104e:	d1df      	bne.n	1010 <_PrintUnsigned+0xd0>
    1050:	e000      	b.n	1054 <_PrintUnsigned+0x114>
        break;
    1052:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1056:	f003 0301 	and.w	r3, r3, #1
    105a:	2b00      	cmp	r3, #0
    105c:	d017      	beq.n	108e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    105e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1060:	2b00      	cmp	r3, #0
    1062:	d014      	beq.n	108e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1064:	e00a      	b.n	107c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1068:	3b01      	subs	r3, #1
    106a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    106c:	2120      	movs	r1, #32
    106e:	9803      	ldr	r0, [sp, #12]
    1070:	f7ff ff27 	bl	ec2 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1074:	9b03      	ldr	r3, [sp, #12]
    1076:	68db      	ldr	r3, [r3, #12]
    1078:	2b00      	cmp	r3, #0
    107a:	db07      	blt.n	108c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    107c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    107e:	2b00      	cmp	r3, #0
    1080:	d005      	beq.n	108e <_PrintUnsigned+0x14e>
    1082:	9a07      	ldr	r2, [sp, #28]
    1084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1086:	429a      	cmp	r2, r3
    1088:	d3ed      	bcc.n	1066 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    108a:	e000      	b.n	108e <_PrintUnsigned+0x14e>
            break;
    108c:	bf00      	nop
}
    108e:	bf00      	nop
    1090:	b00b      	add	sp, #44	; 0x2c
    1092:	f85d fb04 	ldr.w	pc, [sp], #4
    1096:	bf00      	nop
    1098:	0001109c 	.word	0x0001109c

0000109c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    109c:	b500      	push	{lr}
    109e:	b089      	sub	sp, #36	; 0x24
    10a0:	9005      	str	r0, [sp, #20]
    10a2:	9104      	str	r1, [sp, #16]
    10a4:	9203      	str	r2, [sp, #12]
    10a6:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    10a8:	9b04      	ldr	r3, [sp, #16]
    10aa:	2b00      	cmp	r3, #0
    10ac:	bfb8      	it	lt
    10ae:	425b      	neglt	r3, r3
    10b0:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    10b2:	2301      	movs	r3, #1
    10b4:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10b6:	e007      	b.n	10c8 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    10b8:	9b03      	ldr	r3, [sp, #12]
    10ba:	9a06      	ldr	r2, [sp, #24]
    10bc:	fb92 f3f3 	sdiv	r3, r2, r3
    10c0:	9306      	str	r3, [sp, #24]
    Width++;
    10c2:	9b07      	ldr	r3, [sp, #28]
    10c4:	3301      	adds	r3, #1
    10c6:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10c8:	9b03      	ldr	r3, [sp, #12]
    10ca:	9a06      	ldr	r2, [sp, #24]
    10cc:	429a      	cmp	r2, r3
    10ce:	daf3      	bge.n	10b8 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    10d0:	9a02      	ldr	r2, [sp, #8]
    10d2:	9b07      	ldr	r3, [sp, #28]
    10d4:	429a      	cmp	r2, r3
    10d6:	d901      	bls.n	10dc <_PrintInt+0x40>
    Width = NumDigits;
    10d8:	9b02      	ldr	r3, [sp, #8]
    10da:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    10dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10de:	2b00      	cmp	r3, #0
    10e0:	d00a      	beq.n	10f8 <_PrintInt+0x5c>
    10e2:	9b04      	ldr	r3, [sp, #16]
    10e4:	2b00      	cmp	r3, #0
    10e6:	db04      	blt.n	10f2 <_PrintInt+0x56>
    10e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10ea:	f003 0304 	and.w	r3, r3, #4
    10ee:	2b00      	cmp	r3, #0
    10f0:	d002      	beq.n	10f8 <_PrintInt+0x5c>
    FieldWidth--;
    10f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f4:	3b01      	subs	r3, #1
    10f6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    10f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10fa:	f003 0302 	and.w	r3, r3, #2
    10fe:	2b00      	cmp	r3, #0
    1100:	d002      	beq.n	1108 <_PrintInt+0x6c>
    1102:	9b02      	ldr	r3, [sp, #8]
    1104:	2b00      	cmp	r3, #0
    1106:	d01c      	beq.n	1142 <_PrintInt+0xa6>
    1108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    110a:	f003 0301 	and.w	r3, r3, #1
    110e:	2b00      	cmp	r3, #0
    1110:	d117      	bne.n	1142 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1114:	2b00      	cmp	r3, #0
    1116:	d014      	beq.n	1142 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1118:	e00a      	b.n	1130 <_PrintInt+0x94>
        FieldWidth--;
    111a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    111c:	3b01      	subs	r3, #1
    111e:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1120:	2120      	movs	r1, #32
    1122:	9805      	ldr	r0, [sp, #20]
    1124:	f7ff fecd 	bl	ec2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1128:	9b05      	ldr	r3, [sp, #20]
    112a:	68db      	ldr	r3, [r3, #12]
    112c:	2b00      	cmp	r3, #0
    112e:	db07      	blt.n	1140 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1132:	2b00      	cmp	r3, #0
    1134:	d005      	beq.n	1142 <_PrintInt+0xa6>
    1136:	9a07      	ldr	r2, [sp, #28]
    1138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    113a:	429a      	cmp	r2, r3
    113c:	d3ed      	bcc.n	111a <_PrintInt+0x7e>
    113e:	e000      	b.n	1142 <_PrintInt+0xa6>
          break;
    1140:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1142:	9b05      	ldr	r3, [sp, #20]
    1144:	68db      	ldr	r3, [r3, #12]
    1146:	2b00      	cmp	r3, #0
    1148:	db4a      	blt.n	11e0 <_PrintInt+0x144>
    if (v < 0) {
    114a:	9b04      	ldr	r3, [sp, #16]
    114c:	2b00      	cmp	r3, #0
    114e:	da07      	bge.n	1160 <_PrintInt+0xc4>
      v = -v;
    1150:	9b04      	ldr	r3, [sp, #16]
    1152:	425b      	negs	r3, r3
    1154:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1156:	212d      	movs	r1, #45	; 0x2d
    1158:	9805      	ldr	r0, [sp, #20]
    115a:	f7ff feb2 	bl	ec2 <_StoreChar>
    115e:	e008      	b.n	1172 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1162:	f003 0304 	and.w	r3, r3, #4
    1166:	2b00      	cmp	r3, #0
    1168:	d003      	beq.n	1172 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    116a:	212b      	movs	r1, #43	; 0x2b
    116c:	9805      	ldr	r0, [sp, #20]
    116e:	f7ff fea8 	bl	ec2 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1172:	9b05      	ldr	r3, [sp, #20]
    1174:	68db      	ldr	r3, [r3, #12]
    1176:	2b00      	cmp	r3, #0
    1178:	db32      	blt.n	11e0 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    117a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    117c:	f003 0302 	and.w	r3, r3, #2
    1180:	2b00      	cmp	r3, #0
    1182:	d01f      	beq.n	11c4 <_PrintInt+0x128>
    1184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1186:	f003 0301 	and.w	r3, r3, #1
    118a:	2b00      	cmp	r3, #0
    118c:	d11a      	bne.n	11c4 <_PrintInt+0x128>
    118e:	9b02      	ldr	r3, [sp, #8]
    1190:	2b00      	cmp	r3, #0
    1192:	d117      	bne.n	11c4 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1196:	2b00      	cmp	r3, #0
    1198:	d014      	beq.n	11c4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    119a:	e00a      	b.n	11b2 <_PrintInt+0x116>
            FieldWidth--;
    119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    119e:	3b01      	subs	r3, #1
    11a0:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    11a2:	2130      	movs	r1, #48	; 0x30
    11a4:	9805      	ldr	r0, [sp, #20]
    11a6:	f7ff fe8c 	bl	ec2 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    11aa:	9b05      	ldr	r3, [sp, #20]
    11ac:	68db      	ldr	r3, [r3, #12]
    11ae:	2b00      	cmp	r3, #0
    11b0:	db07      	blt.n	11c2 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b4:	2b00      	cmp	r3, #0
    11b6:	d005      	beq.n	11c4 <_PrintInt+0x128>
    11b8:	9a07      	ldr	r2, [sp, #28]
    11ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11bc:	429a      	cmp	r2, r3
    11be:	d3ed      	bcc.n	119c <_PrintInt+0x100>
    11c0:	e000      	b.n	11c4 <_PrintInt+0x128>
              break;
    11c2:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    11c4:	9b05      	ldr	r3, [sp, #20]
    11c6:	68db      	ldr	r3, [r3, #12]
    11c8:	2b00      	cmp	r3, #0
    11ca:	db09      	blt.n	11e0 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    11cc:	9904      	ldr	r1, [sp, #16]
    11ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11d0:	9301      	str	r3, [sp, #4]
    11d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d4:	9300      	str	r3, [sp, #0]
    11d6:	9b02      	ldr	r3, [sp, #8]
    11d8:	9a03      	ldr	r2, [sp, #12]
    11da:	9805      	ldr	r0, [sp, #20]
    11dc:	f7ff feb0 	bl	f40 <_PrintUnsigned>
      }
    }
  }
}
    11e0:	bf00      	nop
    11e2:	b009      	add	sp, #36	; 0x24
    11e4:	f85d fb04 	ldr.w	pc, [sp], #4

000011e8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    11e8:	b500      	push	{lr}
    11ea:	b0a3      	sub	sp, #140	; 0x8c
    11ec:	9005      	str	r0, [sp, #20]
    11ee:	9104      	str	r1, [sp, #16]
    11f0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    11f2:	ab06      	add	r3, sp, #24
    11f4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    11f6:	2340      	movs	r3, #64	; 0x40
    11f8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    11fa:	2300      	movs	r3, #0
    11fc:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    11fe:	9b05      	ldr	r3, [sp, #20]
    1200:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1202:	2300      	movs	r3, #0
    1204:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1206:	9b04      	ldr	r3, [sp, #16]
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    120e:	9b04      	ldr	r3, [sp, #16]
    1210:	3301      	adds	r3, #1
    1212:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1214:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1218:	2b00      	cmp	r3, #0
    121a:	f000 819c 	beq.w	1556 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    121e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1222:	2b25      	cmp	r3, #37	; 0x25
    1224:	f040 818b 	bne.w	153e <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1228:	2300      	movs	r3, #0
    122a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    122c:	2301      	movs	r3, #1
    122e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1230:	9b04      	ldr	r3, [sp, #16]
    1232:	781b      	ldrb	r3, [r3, #0]
    1234:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1238:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    123c:	3b23      	subs	r3, #35	; 0x23
    123e:	2b0d      	cmp	r3, #13
    1240:	d83e      	bhi.n	12c0 <SEGGER_RTT_vprintf+0xd8>
    1242:	a201      	add	r2, pc, #4	; (adr r2, 1248 <SEGGER_RTT_vprintf+0x60>)
    1244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1248:	000012b1 	.word	0x000012b1
    124c:	000012c1 	.word	0x000012c1
    1250:	000012c1 	.word	0x000012c1
    1254:	000012c1 	.word	0x000012c1
    1258:	000012c1 	.word	0x000012c1
    125c:	000012c1 	.word	0x000012c1
    1260:	000012c1 	.word	0x000012c1
    1264:	000012c1 	.word	0x000012c1
    1268:	000012a1 	.word	0x000012a1
    126c:	000012c1 	.word	0x000012c1
    1270:	00001281 	.word	0x00001281
    1274:	000012c1 	.word	0x000012c1
    1278:	000012c1 	.word	0x000012c1
    127c:	00001291 	.word	0x00001291
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1280:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1282:	f043 0301 	orr.w	r3, r3, #1
    1286:	931e      	str	r3, [sp, #120]	; 0x78
    1288:	9b04      	ldr	r3, [sp, #16]
    128a:	3301      	adds	r3, #1
    128c:	9304      	str	r3, [sp, #16]
    128e:	e01a      	b.n	12c6 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1290:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1292:	f043 0302 	orr.w	r3, r3, #2
    1296:	931e      	str	r3, [sp, #120]	; 0x78
    1298:	9b04      	ldr	r3, [sp, #16]
    129a:	3301      	adds	r3, #1
    129c:	9304      	str	r3, [sp, #16]
    129e:	e012      	b.n	12c6 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    12a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12a2:	f043 0304 	orr.w	r3, r3, #4
    12a6:	931e      	str	r3, [sp, #120]	; 0x78
    12a8:	9b04      	ldr	r3, [sp, #16]
    12aa:	3301      	adds	r3, #1
    12ac:	9304      	str	r3, [sp, #16]
    12ae:	e00a      	b.n	12c6 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    12b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12b2:	f043 0308 	orr.w	r3, r3, #8
    12b6:	931e      	str	r3, [sp, #120]	; 0x78
    12b8:	9b04      	ldr	r3, [sp, #16]
    12ba:	3301      	adds	r3, #1
    12bc:	9304      	str	r3, [sp, #16]
    12be:	e002      	b.n	12c6 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    12c0:	2300      	movs	r3, #0
    12c2:	9320      	str	r3, [sp, #128]	; 0x80
    12c4:	bf00      	nop
        }
      } while (v);
    12c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    12c8:	2b00      	cmp	r3, #0
    12ca:	d1b1      	bne.n	1230 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    12cc:	2300      	movs	r3, #0
    12ce:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    12d0:	9b04      	ldr	r3, [sp, #16]
    12d2:	781b      	ldrb	r3, [r3, #0]
    12d4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    12d8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12dc:	2b2f      	cmp	r3, #47	; 0x2f
    12de:	d912      	bls.n	1306 <SEGGER_RTT_vprintf+0x11e>
    12e0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12e4:	2b39      	cmp	r3, #57	; 0x39
    12e6:	d80e      	bhi.n	1306 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    12e8:	9b04      	ldr	r3, [sp, #16]
    12ea:	3301      	adds	r3, #1
    12ec:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    12ee:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    12f0:	4613      	mov	r3, r2
    12f2:	009b      	lsls	r3, r3, #2
    12f4:	4413      	add	r3, r2
    12f6:	005b      	lsls	r3, r3, #1
    12f8:	461a      	mov	r2, r3
    12fa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12fe:	4413      	add	r3, r2
    1300:	3b30      	subs	r3, #48	; 0x30
    1302:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1304:	e7e4      	b.n	12d0 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1306:	2300      	movs	r3, #0
    1308:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    130a:	9b04      	ldr	r3, [sp, #16]
    130c:	781b      	ldrb	r3, [r3, #0]
    130e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1312:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1316:	2b2e      	cmp	r3, #46	; 0x2e
    1318:	d11d      	bne.n	1356 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    131a:	9b04      	ldr	r3, [sp, #16]
    131c:	3301      	adds	r3, #1
    131e:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1320:	9b04      	ldr	r3, [sp, #16]
    1322:	781b      	ldrb	r3, [r3, #0]
    1324:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1328:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    132c:	2b2f      	cmp	r3, #47	; 0x2f
    132e:	d912      	bls.n	1356 <SEGGER_RTT_vprintf+0x16e>
    1330:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1334:	2b39      	cmp	r3, #57	; 0x39
    1336:	d80e      	bhi.n	1356 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1338:	9b04      	ldr	r3, [sp, #16]
    133a:	3301      	adds	r3, #1
    133c:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    133e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1340:	4613      	mov	r3, r2
    1342:	009b      	lsls	r3, r3, #2
    1344:	4413      	add	r3, r2
    1346:	005b      	lsls	r3, r3, #1
    1348:	461a      	mov	r2, r3
    134a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    134e:	4413      	add	r3, r2
    1350:	3b30      	subs	r3, #48	; 0x30
    1352:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1354:	e7e4      	b.n	1320 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1356:	9b04      	ldr	r3, [sp, #16]
    1358:	781b      	ldrb	r3, [r3, #0]
    135a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    135e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1362:	2b6c      	cmp	r3, #108	; 0x6c
    1364:	d003      	beq.n	136e <SEGGER_RTT_vprintf+0x186>
    1366:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136a:	2b68      	cmp	r3, #104	; 0x68
    136c:	d107      	bne.n	137e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    136e:	9b04      	ldr	r3, [sp, #16]
    1370:	3301      	adds	r3, #1
    1372:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1374:	9b04      	ldr	r3, [sp, #16]
    1376:	781b      	ldrb	r3, [r3, #0]
    1378:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    137c:	e7ef      	b.n	135e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    137e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1382:	2b25      	cmp	r3, #37	; 0x25
    1384:	f000 80d0 	beq.w	1528 <SEGGER_RTT_vprintf+0x340>
    1388:	2b25      	cmp	r3, #37	; 0x25
    138a:	f2c0 80d3 	blt.w	1534 <SEGGER_RTT_vprintf+0x34c>
    138e:	2b78      	cmp	r3, #120	; 0x78
    1390:	f300 80d0 	bgt.w	1534 <SEGGER_RTT_vprintf+0x34c>
    1394:	2b58      	cmp	r3, #88	; 0x58
    1396:	f2c0 80cd 	blt.w	1534 <SEGGER_RTT_vprintf+0x34c>
    139a:	3b58      	subs	r3, #88	; 0x58
    139c:	2b20      	cmp	r3, #32
    139e:	f200 80c9 	bhi.w	1534 <SEGGER_RTT_vprintf+0x34c>
    13a2:	a201      	add	r2, pc, #4	; (adr r2, 13a8 <SEGGER_RTT_vprintf+0x1c0>)
    13a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13a8:	00001499 	.word	0x00001499
    13ac:	00001535 	.word	0x00001535
    13b0:	00001535 	.word	0x00001535
    13b4:	00001535 	.word	0x00001535
    13b8:	00001535 	.word	0x00001535
    13bc:	00001535 	.word	0x00001535
    13c0:	00001535 	.word	0x00001535
    13c4:	00001535 	.word	0x00001535
    13c8:	00001535 	.word	0x00001535
    13cc:	00001535 	.word	0x00001535
    13d0:	00001535 	.word	0x00001535
    13d4:	0000142d 	.word	0x0000142d
    13d8:	00001451 	.word	0x00001451
    13dc:	00001535 	.word	0x00001535
    13e0:	00001535 	.word	0x00001535
    13e4:	00001535 	.word	0x00001535
    13e8:	00001535 	.word	0x00001535
    13ec:	00001535 	.word	0x00001535
    13f0:	00001535 	.word	0x00001535
    13f4:	00001535 	.word	0x00001535
    13f8:	00001535 	.word	0x00001535
    13fc:	00001535 	.word	0x00001535
    1400:	00001535 	.word	0x00001535
    1404:	00001535 	.word	0x00001535
    1408:	00001505 	.word	0x00001505
    140c:	00001535 	.word	0x00001535
    1410:	00001535 	.word	0x00001535
    1414:	000014bd 	.word	0x000014bd
    1418:	00001535 	.word	0x00001535
    141c:	00001475 	.word	0x00001475
    1420:	00001535 	.word	0x00001535
    1424:	00001535 	.word	0x00001535
    1428:	00001499 	.word	0x00001499
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    142c:	9b03      	ldr	r3, [sp, #12]
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	1d19      	adds	r1, r3, #4
    1432:	9a03      	ldr	r2, [sp, #12]
    1434:	6011      	str	r1, [r2, #0]
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    143a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    143c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1440:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1444:	ab16      	add	r3, sp, #88	; 0x58
    1446:	4611      	mov	r1, r2
    1448:	4618      	mov	r0, r3
    144a:	f7ff fd3a 	bl	ec2 <_StoreChar>
        break;
    144e:	e072      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1450:	9b03      	ldr	r3, [sp, #12]
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	1d19      	adds	r1, r3, #4
    1456:	9a03      	ldr	r2, [sp, #12]
    1458:	6011      	str	r1, [r2, #0]
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    145e:	a816      	add	r0, sp, #88	; 0x58
    1460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1462:	9301      	str	r3, [sp, #4]
    1464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1466:	9300      	str	r3, [sp, #0]
    1468:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    146a:	220a      	movs	r2, #10
    146c:	9920      	ldr	r1, [sp, #128]	; 0x80
    146e:	f7ff fe15 	bl	109c <_PrintInt>
        break;
    1472:	e060      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1474:	9b03      	ldr	r3, [sp, #12]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	1d19      	adds	r1, r3, #4
    147a:	9a03      	ldr	r2, [sp, #12]
    147c:	6011      	str	r1, [r2, #0]
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1482:	9920      	ldr	r1, [sp, #128]	; 0x80
    1484:	a816      	add	r0, sp, #88	; 0x58
    1486:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1488:	9301      	str	r3, [sp, #4]
    148a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    148c:	9300      	str	r3, [sp, #0]
    148e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1490:	220a      	movs	r2, #10
    1492:	f7ff fd55 	bl	f40 <_PrintUnsigned>
        break;
    1496:	e04e      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1498:	9b03      	ldr	r3, [sp, #12]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	1d19      	adds	r1, r3, #4
    149e:	9a03      	ldr	r2, [sp, #12]
    14a0:	6011      	str	r1, [r2, #0]
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    14a6:	9920      	ldr	r1, [sp, #128]	; 0x80
    14a8:	a816      	add	r0, sp, #88	; 0x58
    14aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14ac:	9301      	str	r3, [sp, #4]
    14ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14b0:	9300      	str	r3, [sp, #0]
    14b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14b4:	2210      	movs	r2, #16
    14b6:	f7ff fd43 	bl	f40 <_PrintUnsigned>
        break;
    14ba:	e03c      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    14bc:	9b03      	ldr	r3, [sp, #12]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	1d19      	adds	r1, r3, #4
    14c2:	9a03      	ldr	r2, [sp, #12]
    14c4:	6011      	str	r1, [r2, #0]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    14ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14cc:	2b00      	cmp	r3, #0
    14ce:	d101      	bne.n	14d4 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    14d0:	4b2c      	ldr	r3, [pc, #176]	; (1584 <SEGGER_RTT_vprintf+0x39c>)
    14d2:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    14d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14d6:	781b      	ldrb	r3, [r3, #0]
    14d8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    14dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14de:	3301      	adds	r3, #1
    14e0:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    14e2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14e6:	2b00      	cmp	r3, #0
    14e8:	d00a      	beq.n	1500 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    14ea:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    14ee:	ab16      	add	r3, sp, #88	; 0x58
    14f0:	4611      	mov	r1, r2
    14f2:	4618      	mov	r0, r3
    14f4:	f7ff fce5 	bl	ec2 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    14f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14fa:	2b00      	cmp	r3, #0
    14fc:	daea      	bge.n	14d4 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    14fe:	e01a      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
              break;
    1500:	bf00      	nop
        break;
    1502:	e018      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1504:	9b03      	ldr	r3, [sp, #12]
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	1d19      	adds	r1, r3, #4
    150a:	9a03      	ldr	r2, [sp, #12]
    150c:	6011      	str	r1, [r2, #0]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1512:	9920      	ldr	r1, [sp, #128]	; 0x80
    1514:	a816      	add	r0, sp, #88	; 0x58
    1516:	2300      	movs	r3, #0
    1518:	9301      	str	r3, [sp, #4]
    151a:	2308      	movs	r3, #8
    151c:	9300      	str	r3, [sp, #0]
    151e:	2308      	movs	r3, #8
    1520:	2210      	movs	r2, #16
    1522:	f7ff fd0d 	bl	f40 <_PrintUnsigned>
        break;
    1526:	e006      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1528:	ab16      	add	r3, sp, #88	; 0x58
    152a:	2125      	movs	r1, #37	; 0x25
    152c:	4618      	mov	r0, r3
    152e:	f7ff fcc8 	bl	ec2 <_StoreChar>
        break;
    1532:	e000      	b.n	1536 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1534:	bf00      	nop
      }
      sFormat++;
    1536:	9b04      	ldr	r3, [sp, #16]
    1538:	3301      	adds	r3, #1
    153a:	9304      	str	r3, [sp, #16]
    153c:	e006      	b.n	154c <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    153e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1542:	ab16      	add	r3, sp, #88	; 0x58
    1544:	4611      	mov	r1, r2
    1546:	4618      	mov	r0, r3
    1548:	f7ff fcbb 	bl	ec2 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    154c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    154e:	2b00      	cmp	r3, #0
    1550:	f6bf ae59 	bge.w	1206 <SEGGER_RTT_vprintf+0x1e>
    1554:	e000      	b.n	1558 <SEGGER_RTT_vprintf+0x370>
      break;
    1556:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1558:	9b19      	ldr	r3, [sp, #100]	; 0x64
    155a:	2b00      	cmp	r3, #0
    155c:	dd0c      	ble.n	1578 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    155e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1560:	2b00      	cmp	r3, #0
    1562:	d005      	beq.n	1570 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1564:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1566:	ab06      	add	r3, sp, #24
    1568:	4619      	mov	r1, r3
    156a:	9805      	ldr	r0, [sp, #20]
    156c:	f7ff fc7e 	bl	e6c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1570:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1572:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1574:	4413      	add	r3, r2
    1576:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1578:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    157a:	4618      	mov	r0, r3
    157c:	b023      	add	sp, #140	; 0x8c
    157e:	f85d fb04 	ldr.w	pc, [sp], #4
    1582:	bf00      	nop
    1584:	0001015c 	.word	0x0001015c

00001588 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1588:	b40e      	push	{r1, r2, r3}
    158a:	b500      	push	{lr}
    158c:	b084      	sub	sp, #16
    158e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1590:	ab06      	add	r3, sp, #24
    1592:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1594:	ab02      	add	r3, sp, #8
    1596:	461a      	mov	r2, r3
    1598:	9905      	ldr	r1, [sp, #20]
    159a:	9801      	ldr	r0, [sp, #4]
    159c:	f7ff fe24 	bl	11e8 <SEGGER_RTT_vprintf>
    15a0:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    15a2:	9b03      	ldr	r3, [sp, #12]
}
    15a4:	4618      	mov	r0, r3
    15a6:	b004      	add	sp, #16
    15a8:	f85d eb04 	ldr.w	lr, [sp], #4
    15ac:	b003      	add	sp, #12
    15ae:	4770      	bx	lr

000015b0 <memcpy>:
    15b0:	440a      	add	r2, r1
    15b2:	4291      	cmp	r1, r2
    15b4:	f100 33ff 	add.w	r3, r0, #4294967295
    15b8:	d100      	bne.n	15bc <memcpy+0xc>
    15ba:	4770      	bx	lr
    15bc:	b510      	push	{r4, lr}
    15be:	f811 4b01 	ldrb.w	r4, [r1], #1
    15c2:	f803 4f01 	strb.w	r4, [r3, #1]!
    15c6:	4291      	cmp	r1, r2
    15c8:	d1f9      	bne.n	15be <memcpy+0xe>
    15ca:	bd10      	pop	{r4, pc}

000015cc <memset>:
    15cc:	4402      	add	r2, r0
    15ce:	4603      	mov	r3, r0
    15d0:	4293      	cmp	r3, r2
    15d2:	d100      	bne.n	15d6 <memset+0xa>
    15d4:	4770      	bx	lr
    15d6:	f803 1b01 	strb.w	r1, [r3], #1
    15da:	e7f9      	b.n	15d0 <memset+0x4>

000015dc <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    15dc:	b086      	sub	sp, #24
    15de:	9003      	str	r0, [sp, #12]
    15e0:	9102      	str	r1, [sp, #8]
    15e2:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    15e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    15e8:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    15ec:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    15ee:	9b01      	ldr	r3, [sp, #4]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d007      	beq.n	1604 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    15f4:	9b03      	ldr	r3, [sp, #12]
    15f6:	3310      	adds	r3, #16
    15f8:	009b      	lsls	r3, r3, #2
    15fa:	9a05      	ldr	r2, [sp, #20]
    15fc:	4413      	add	r3, r2
    15fe:	681a      	ldr	r2, [r3, #0]
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1604:	9b03      	ldr	r3, [sp, #12]
    1606:	3310      	adds	r3, #16
    1608:	009b      	lsls	r3, r3, #2
    160a:	9a05      	ldr	r2, [sp, #20]
    160c:	4413      	add	r3, r2
    160e:	9a02      	ldr	r2, [sp, #8]
    1610:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1612:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1616:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    161a:	bf00      	nop
    161c:	b006      	add	sp, #24
    161e:	4770      	bx	lr

00001620 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1620:	b082      	sub	sp, #8
    1622:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	f003 021f 	and.w	r2, r3, #31
    162a:	4905      	ldr	r1, [pc, #20]	; (1640 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    162c:	9b01      	ldr	r3, [sp, #4]
    162e:	095b      	lsrs	r3, r3, #5
    1630:	2001      	movs	r0, #1
    1632:	fa00 f202 	lsl.w	r2, r0, r2
    1636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    163a:	bf00      	nop
    163c:	b002      	add	sp, #8
    163e:	4770      	bx	lr
    1640:	e000e100 	.word	0xe000e100

00001644 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1644:	b082      	sub	sp, #8
    1646:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1648:	9b01      	ldr	r3, [sp, #4]
    164a:	f003 021f 	and.w	r2, r3, #31
    164e:	4906      	ldr	r1, [pc, #24]	; (1668 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1650:	9b01      	ldr	r3, [sp, #4]
    1652:	095b      	lsrs	r3, r3, #5
    1654:	2001      	movs	r0, #1
    1656:	fa00 f202 	lsl.w	r2, r0, r2
    165a:	3320      	adds	r3, #32
    165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1660:	bf00      	nop
    1662:	b002      	add	sp, #8
    1664:	4770      	bx	lr
    1666:	bf00      	nop
    1668:	e000e100 	.word	0xe000e100

0000166c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    166c:	b084      	sub	sp, #16
    166e:	9001      	str	r0, [sp, #4]
    1670:	460b      	mov	r3, r1
    1672:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1676:	2304      	movs	r3, #4
    1678:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    167c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1680:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1684:	fa02 f103 	lsl.w	r1, r2, r3
    1688:	4a04      	ldr	r2, [pc, #16]	; (169c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    168a:	9b01      	ldr	r3, [sp, #4]
    168c:	b2c9      	uxtb	r1, r1
    168e:	4413      	add	r3, r2
    1690:	460a      	mov	r2, r1
    1692:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1696:	bf00      	nop
    1698:	b004      	add	sp, #16
    169a:	4770      	bx	lr
    169c:	e000e100 	.word	0xe000e100

000016a0 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    16a0:	b084      	sub	sp, #16
    16a2:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    16a4:	2304      	movs	r3, #4
    16a6:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    16aa:	4a09      	ldr	r2, [pc, #36]	; (16d0 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    16ac:	9b01      	ldr	r3, [sp, #4]
    16ae:	4413      	add	r3, r2
    16b0:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    16b4:	b2db      	uxtb	r3, r3
    16b6:	461a      	mov	r2, r3
    16b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16bc:	fa42 f303 	asr.w	r3, r2, r3
    16c0:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    16c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    16c8:	4618      	mov	r0, r3
    16ca:	b004      	add	sp, #16
    16cc:	4770      	bx	lr
    16ce:	bf00      	nop
    16d0:	e000e100 	.word	0xe000e100

000016d4 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    16d4:	b082      	sub	sp, #8
    16d6:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16d8:	9b01      	ldr	r3, [sp, #4]
    16da:	f003 021f 	and.w	r2, r3, #31
    16de:	4906      	ldr	r1, [pc, #24]	; (16f8 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	095b      	lsrs	r3, r3, #5
    16e4:	2001      	movs	r0, #1
    16e6:	fa00 f202 	lsl.w	r2, r0, r2
    16ea:	3360      	adds	r3, #96	; 0x60
    16ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    16f0:	bf00      	nop
    16f2:	b002      	add	sp, #8
    16f4:	4770      	bx	lr
    16f6:	bf00      	nop
    16f8:	e000e100 	.word	0xe000e100

000016fc <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    16fc:	b500      	push	{lr}
    16fe:	b085      	sub	sp, #20
    1700:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1702:	2300      	movs	r3, #0
    1704:	9303      	str	r3, [sp, #12]
    1706:	e05d      	b.n	17c4 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1708:	9b01      	ldr	r3, [sp, #4]
    170a:	6859      	ldr	r1, [r3, #4]
    170c:	9a03      	ldr	r2, [sp, #12]
    170e:	4613      	mov	r3, r2
    1710:	005b      	lsls	r3, r3, #1
    1712:	4413      	add	r3, r2
    1714:	009b      	lsls	r3, r3, #2
    1716:	440b      	add	r3, r1
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	4618      	mov	r0, r3
    171c:	f000 f899 	bl	1852 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1720:	9b01      	ldr	r3, [sp, #4]
    1722:	6859      	ldr	r1, [r3, #4]
    1724:	9a03      	ldr	r2, [sp, #12]
    1726:	4613      	mov	r3, r2
    1728:	005b      	lsls	r3, r3, #1
    172a:	4413      	add	r3, r2
    172c:	009b      	lsls	r3, r3, #2
    172e:	440b      	add	r3, r1
    1730:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1732:	9b01      	ldr	r3, [sp, #4]
    1734:	6859      	ldr	r1, [r3, #4]
    1736:	9a03      	ldr	r2, [sp, #12]
    1738:	4613      	mov	r3, r2
    173a:	005b      	lsls	r3, r3, #1
    173c:	4413      	add	r3, r2
    173e:	009b      	lsls	r3, r3, #2
    1740:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1742:	795b      	ldrb	r3, [r3, #5]
    1744:	4619      	mov	r1, r3
    1746:	f000 f869 	bl	181c <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    174a:	9b01      	ldr	r3, [sp, #4]
    174c:	6859      	ldr	r1, [r3, #4]
    174e:	9a03      	ldr	r2, [sp, #12]
    1750:	4613      	mov	r3, r2
    1752:	005b      	lsls	r3, r3, #1
    1754:	4413      	add	r3, r2
    1756:	009b      	lsls	r3, r3, #2
    1758:	440b      	add	r3, r1
    175a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    175c:	9b01      	ldr	r3, [sp, #4]
    175e:	6859      	ldr	r1, [r3, #4]
    1760:	9a03      	ldr	r2, [sp, #12]
    1762:	4613      	mov	r3, r2
    1764:	005b      	lsls	r3, r3, #1
    1766:	4413      	add	r3, r2
    1768:	009b      	lsls	r3, r3, #2
    176a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    176c:	689b      	ldr	r3, [r3, #8]
    176e:	2200      	movs	r2, #0
    1770:	4619      	mov	r1, r3
    1772:	f000 f831 	bl	17d8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1776:	9b01      	ldr	r3, [sp, #4]
    1778:	6859      	ldr	r1, [r3, #4]
    177a:	9a03      	ldr	r2, [sp, #12]
    177c:	4613      	mov	r3, r2
    177e:	005b      	lsls	r3, r3, #1
    1780:	4413      	add	r3, r2
    1782:	009b      	lsls	r3, r3, #2
    1784:	440b      	add	r3, r1
    1786:	791b      	ldrb	r3, [r3, #4]
    1788:	2b00      	cmp	r3, #0
    178a:	d00c      	beq.n	17a6 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    178c:	9b01      	ldr	r3, [sp, #4]
    178e:	6859      	ldr	r1, [r3, #4]
    1790:	9a03      	ldr	r2, [sp, #12]
    1792:	4613      	mov	r3, r2
    1794:	005b      	lsls	r3, r3, #1
    1796:	4413      	add	r3, r2
    1798:	009b      	lsls	r3, r3, #2
    179a:	440b      	add	r3, r1
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	4618      	mov	r0, r3
    17a0:	f000 f828 	bl	17f4 <IntCtrl_Ip_EnableIrq>
    17a4:	e00b      	b.n	17be <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17a6:	9b01      	ldr	r3, [sp, #4]
    17a8:	6859      	ldr	r1, [r3, #4]
    17aa:	9a03      	ldr	r2, [sp, #12]
    17ac:	4613      	mov	r3, r2
    17ae:	005b      	lsls	r3, r3, #1
    17b0:	4413      	add	r3, r2
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	440b      	add	r3, r1
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	4618      	mov	r0, r3
    17ba:	f000 f825 	bl	1808 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    17be:	9b03      	ldr	r3, [sp, #12]
    17c0:	3301      	adds	r3, #1
    17c2:	9303      	str	r3, [sp, #12]
    17c4:	9b01      	ldr	r3, [sp, #4]
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	9a03      	ldr	r2, [sp, #12]
    17ca:	429a      	cmp	r2, r3
    17cc:	d39c      	bcc.n	1708 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    17ce:	2300      	movs	r3, #0
}
    17d0:	4618      	mov	r0, r3
    17d2:	b005      	add	sp, #20
    17d4:	f85d fb04 	ldr.w	pc, [sp], #4

000017d8 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17d8:	b500      	push	{lr}
    17da:	b085      	sub	sp, #20
    17dc:	9003      	str	r0, [sp, #12]
    17de:	9102      	str	r1, [sp, #8]
    17e0:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    17e2:	9a01      	ldr	r2, [sp, #4]
    17e4:	9902      	ldr	r1, [sp, #8]
    17e6:	9803      	ldr	r0, [sp, #12]
    17e8:	f7ff fef8 	bl	15dc <IntCtrl_Ip_InstallHandlerPrivileged>
}
    17ec:	bf00      	nop
    17ee:	b005      	add	sp, #20
    17f0:	f85d fb04 	ldr.w	pc, [sp], #4

000017f4 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    17f4:	b500      	push	{lr}
    17f6:	b083      	sub	sp, #12
    17f8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    17fa:	9801      	ldr	r0, [sp, #4]
    17fc:	f7ff ff10 	bl	1620 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1800:	bf00      	nop
    1802:	b003      	add	sp, #12
    1804:	f85d fb04 	ldr.w	pc, [sp], #4

00001808 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1808:	b500      	push	{lr}
    180a:	b083      	sub	sp, #12
    180c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    180e:	9801      	ldr	r0, [sp, #4]
    1810:	f7ff ff18 	bl	1644 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1814:	bf00      	nop
    1816:	b003      	add	sp, #12
    1818:	f85d fb04 	ldr.w	pc, [sp], #4

0000181c <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    181c:	b500      	push	{lr}
    181e:	b083      	sub	sp, #12
    1820:	9001      	str	r0, [sp, #4]
    1822:	460b      	mov	r3, r1
    1824:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1828:	f89d 3003 	ldrb.w	r3, [sp, #3]
    182c:	4619      	mov	r1, r3
    182e:	9801      	ldr	r0, [sp, #4]
    1830:	f7ff ff1c 	bl	166c <IntCtrl_Ip_SetPriorityPrivileged>
}
    1834:	bf00      	nop
    1836:	b003      	add	sp, #12
    1838:	f85d fb04 	ldr.w	pc, [sp], #4

0000183c <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    183c:	b500      	push	{lr}
    183e:	b083      	sub	sp, #12
    1840:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1842:	9801      	ldr	r0, [sp, #4]
    1844:	f7ff ff2c 	bl	16a0 <IntCtrl_Ip_GetPriorityPrivileged>
    1848:	4603      	mov	r3, r0
}
    184a:	4618      	mov	r0, r3
    184c:	b003      	add	sp, #12
    184e:	f85d fb04 	ldr.w	pc, [sp], #4

00001852 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1852:	b500      	push	{lr}
    1854:	b083      	sub	sp, #12
    1856:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1858:	9801      	ldr	r0, [sp, #4]
    185a:	f7ff ff3b 	bl	16d4 <IntCtrl_Ip_ClearPendingPrivileged>
}
    185e:	bf00      	nop
    1860:	b003      	add	sp, #12
    1862:	f85d fb04 	ldr.w	pc, [sp], #4
    1866:	bf00      	nop

00001868 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1868:	b500      	push	{lr}
    186a:	b083      	sub	sp, #12
    186c:	9001      	str	r0, [sp, #4]
    186e:	460b      	mov	r3, r1
    1870:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1874:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1878:	2b00      	cmp	r3, #0
    187a:	d003      	beq.n	1884 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    187c:	9801      	ldr	r0, [sp, #4]
    187e:	f7ff ffb9 	bl	17f4 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1882:	e002      	b.n	188a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1884:	9801      	ldr	r0, [sp, #4]
    1886:	f7ff ffbf 	bl	1808 <IntCtrl_Ip_DisableIrq>
}
    188a:	bf00      	nop
    188c:	b003      	add	sp, #12
    188e:	f85d fb04 	ldr.w	pc, [sp], #4

00001892 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1892:	b500      	push	{lr}
    1894:	b083      	sub	sp, #12
    1896:	9001      	str	r0, [sp, #4]
    1898:	460b      	mov	r3, r1
    189a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    189e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18a2:	4619      	mov	r1, r3
    18a4:	9801      	ldr	r0, [sp, #4]
    18a6:	f7ff ffb9 	bl	181c <IntCtrl_Ip_SetPriority>
}
    18aa:	bf00      	nop
    18ac:	b003      	add	sp, #12
    18ae:	f85d fb04 	ldr.w	pc, [sp], #4

000018b2 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    18b2:	b500      	push	{lr}
    18b4:	b083      	sub	sp, #12
    18b6:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    18b8:	9801      	ldr	r0, [sp, #4]
    18ba:	f7ff ffbf 	bl	183c <IntCtrl_Ip_GetPriority>
    18be:	4603      	mov	r3, r0
}
    18c0:	4618      	mov	r0, r3
    18c2:	b003      	add	sp, #12
    18c4:	f85d fb04 	ldr.w	pc, [sp], #4

000018c8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    18c8:	b500      	push	{lr}
    18ca:	b085      	sub	sp, #20
    18cc:	9003      	str	r0, [sp, #12]
    18ce:	9102      	str	r1, [sp, #8]
    18d0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    18d2:	9a01      	ldr	r2, [sp, #4]
    18d4:	9902      	ldr	r1, [sp, #8]
    18d6:	9803      	ldr	r0, [sp, #12]
    18d8:	f7ff ff7e 	bl	17d8 <IntCtrl_Ip_InstallHandler>
}
    18dc:	bf00      	nop
    18de:	b005      	add	sp, #20
    18e0:	f85d fb04 	ldr.w	pc, [sp], #4

000018e4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    18e4:	b500      	push	{lr}
    18e6:	b085      	sub	sp, #20
    18e8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    18ea:	2300      	movs	r3, #0
    18ec:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    18f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18f4:	4a05      	ldr	r2, [pc, #20]	; (190c <Platform_Init+0x28>)
    18f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	4618      	mov	r0, r3
    18fe:	f000 f8c7 	bl	1a90 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1902:	bf00      	nop
    1904:	b005      	add	sp, #20
    1906:	f85d fb04 	ldr.w	pc, [sp], #4
    190a:	bf00      	nop
    190c:	00010e80 	.word	0x00010e80

00001910 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1910:	b500      	push	{lr}
    1912:	b085      	sub	sp, #20
    1914:	9001      	str	r0, [sp, #4]
    1916:	460b      	mov	r3, r1
    1918:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    191c:	2300      	movs	r3, #0
    191e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1922:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1926:	4619      	mov	r1, r3
    1928:	9801      	ldr	r0, [sp, #4]
    192a:	f7ff ff9d 	bl	1868 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    192e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1932:	4618      	mov	r0, r3
    1934:	b005      	add	sp, #20
    1936:	f85d fb04 	ldr.w	pc, [sp], #4

0000193a <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    193a:	b500      	push	{lr}
    193c:	b085      	sub	sp, #20
    193e:	9001      	str	r0, [sp, #4]
    1940:	460b      	mov	r3, r1
    1942:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1946:	2300      	movs	r3, #0
    1948:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    194c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1950:	4619      	mov	r1, r3
    1952:	9801      	ldr	r0, [sp, #4]
    1954:	f7ff ff9d 	bl	1892 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1958:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    195c:	4618      	mov	r0, r3
    195e:	b005      	add	sp, #20
    1960:	f85d fb04 	ldr.w	pc, [sp], #4

00001964 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1964:	b500      	push	{lr}
    1966:	b085      	sub	sp, #20
    1968:	9001      	str	r0, [sp, #4]
    196a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    196c:	2300      	movs	r3, #0
    196e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1972:	9801      	ldr	r0, [sp, #4]
    1974:	f7ff ff9d 	bl	18b2 <Platform_Ipw_GetIrqPriority>
    1978:	4603      	mov	r3, r0
    197a:	461a      	mov	r2, r3
    197c:	9b00      	ldr	r3, [sp, #0]
    197e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1980:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1984:	4618      	mov	r0, r3
    1986:	b005      	add	sp, #20
    1988:	f85d fb04 	ldr.w	pc, [sp], #4

0000198c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    198c:	b500      	push	{lr}
    198e:	b087      	sub	sp, #28
    1990:	9003      	str	r0, [sp, #12]
    1992:	9102      	str	r1, [sp, #8]
    1994:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1996:	2300      	movs	r3, #0
    1998:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    199c:	9a01      	ldr	r2, [sp, #4]
    199e:	9902      	ldr	r1, [sp, #8]
    19a0:	9803      	ldr	r0, [sp, #12]
    19a2:	f7ff ff91 	bl	18c8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    19a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    19aa:	4618      	mov	r0, r3
    19ac:	b007      	add	sp, #28
    19ae:	f85d fb04 	ldr.w	pc, [sp], #4
    19b2:	bf00      	nop

000019b4 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    19b4:	b500      	push	{lr}
    19b6:	b085      	sub	sp, #20
    19b8:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19ba:	2300      	movs	r3, #0
    19bc:	9303      	str	r3, [sp, #12]
    19be:	e05d      	b.n	1a7c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19c0:	9b01      	ldr	r3, [sp, #4]
    19c2:	6859      	ldr	r1, [r3, #4]
    19c4:	9a03      	ldr	r2, [sp, #12]
    19c6:	4613      	mov	r3, r2
    19c8:	005b      	lsls	r3, r3, #1
    19ca:	4413      	add	r3, r2
    19cc:	009b      	lsls	r3, r3, #2
    19ce:	440b      	add	r3, r1
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	4618      	mov	r0, r3
    19d4:	f7ff ff3d 	bl	1852 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	6859      	ldr	r1, [r3, #4]
    19dc:	9a03      	ldr	r2, [sp, #12]
    19de:	4613      	mov	r3, r2
    19e0:	005b      	lsls	r3, r3, #1
    19e2:	4413      	add	r3, r2
    19e4:	009b      	lsls	r3, r3, #2
    19e6:	440b      	add	r3, r1
    19e8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19ea:	9b01      	ldr	r3, [sp, #4]
    19ec:	6859      	ldr	r1, [r3, #4]
    19ee:	9a03      	ldr	r2, [sp, #12]
    19f0:	4613      	mov	r3, r2
    19f2:	005b      	lsls	r3, r3, #1
    19f4:	4413      	add	r3, r2
    19f6:	009b      	lsls	r3, r3, #2
    19f8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19fa:	795b      	ldrb	r3, [r3, #5]
    19fc:	4619      	mov	r1, r3
    19fe:	f7ff ff0d 	bl	181c <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a02:	9b01      	ldr	r3, [sp, #4]
    1a04:	6859      	ldr	r1, [r3, #4]
    1a06:	9a03      	ldr	r2, [sp, #12]
    1a08:	4613      	mov	r3, r2
    1a0a:	005b      	lsls	r3, r3, #1
    1a0c:	4413      	add	r3, r2
    1a0e:	009b      	lsls	r3, r3, #2
    1a10:	440b      	add	r3, r1
    1a12:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a14:	9b01      	ldr	r3, [sp, #4]
    1a16:	6859      	ldr	r1, [r3, #4]
    1a18:	9a03      	ldr	r2, [sp, #12]
    1a1a:	4613      	mov	r3, r2
    1a1c:	005b      	lsls	r3, r3, #1
    1a1e:	4413      	add	r3, r2
    1a20:	009b      	lsls	r3, r3, #2
    1a22:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a24:	689b      	ldr	r3, [r3, #8]
    1a26:	2200      	movs	r2, #0
    1a28:	4619      	mov	r1, r3
    1a2a:	f7ff fed5 	bl	17d8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a2e:	9b01      	ldr	r3, [sp, #4]
    1a30:	6859      	ldr	r1, [r3, #4]
    1a32:	9a03      	ldr	r2, [sp, #12]
    1a34:	4613      	mov	r3, r2
    1a36:	005b      	lsls	r3, r3, #1
    1a38:	4413      	add	r3, r2
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	440b      	add	r3, r1
    1a3e:	791b      	ldrb	r3, [r3, #4]
    1a40:	2b00      	cmp	r3, #0
    1a42:	d00c      	beq.n	1a5e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a44:	9b01      	ldr	r3, [sp, #4]
    1a46:	6859      	ldr	r1, [r3, #4]
    1a48:	9a03      	ldr	r2, [sp, #12]
    1a4a:	4613      	mov	r3, r2
    1a4c:	005b      	lsls	r3, r3, #1
    1a4e:	4413      	add	r3, r2
    1a50:	009b      	lsls	r3, r3, #2
    1a52:	440b      	add	r3, r1
    1a54:	681b      	ldr	r3, [r3, #0]
    1a56:	4618      	mov	r0, r3
    1a58:	f7ff fecc 	bl	17f4 <IntCtrl_Ip_EnableIrq>
    1a5c:	e00b      	b.n	1a76 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	6859      	ldr	r1, [r3, #4]
    1a62:	9a03      	ldr	r2, [sp, #12]
    1a64:	4613      	mov	r3, r2
    1a66:	005b      	lsls	r3, r3, #1
    1a68:	4413      	add	r3, r2
    1a6a:	009b      	lsls	r3, r3, #2
    1a6c:	440b      	add	r3, r1
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	4618      	mov	r0, r3
    1a72:	f7ff fec9 	bl	1808 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a76:	9b03      	ldr	r3, [sp, #12]
    1a78:	3301      	adds	r3, #1
    1a7a:	9303      	str	r3, [sp, #12]
    1a7c:	9b01      	ldr	r3, [sp, #4]
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	9a03      	ldr	r2, [sp, #12]
    1a82:	429a      	cmp	r2, r3
    1a84:	d39c      	bcc.n	19c0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1a86:	2300      	movs	r3, #0
}
    1a88:	4618      	mov	r0, r3
    1a8a:	b005      	add	sp, #20
    1a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001a90 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1a90:	b500      	push	{lr}
    1a92:	b085      	sub	sp, #20
    1a94:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1a96:	2300      	movs	r3, #0
    1a98:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1a9c:	9b01      	ldr	r3, [sp, #4]
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d007      	beq.n	1ab4 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1aa4:	9b01      	ldr	r3, [sp, #4]
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	4618      	mov	r0, r3
    1aaa:	f7ff ff83 	bl	19b4 <Platform_Ipw_InitIntCtrl>
    1aae:	4603      	mov	r3, r0
    1ab0:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ab8:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1aba:	bf00      	nop
    1abc:	b005      	add	sp, #20
    1abe:	f85d fb04 	ldr.w	pc, [sp], #4

00001ac2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1ac2:	2300      	movs	r3, #0
}
    1ac4:	4618      	mov	r0, r3
    1ac6:	4770      	bx	lr

00001ac8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1ac8:	b082      	sub	sp, #8
    1aca:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1acc:	2301      	movs	r3, #1
}
    1ace:	4618      	mov	r0, r3
    1ad0:	b002      	add	sp, #8
    1ad2:	4770      	bx	lr

00001ad4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ad4:	b082      	sub	sp, #8
    1ad6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1ad8:	bf00      	nop
    1ada:	b002      	add	sp, #8
    1adc:	4770      	bx	lr

00001ade <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1ade:	b082      	sub	sp, #8
    1ae0:	9001      	str	r0, [sp, #4]
    return Micros;
    1ae2:	9b01      	ldr	r3, [sp, #4]
}
    1ae4:	4618      	mov	r0, r3
    1ae6:	b002      	add	sp, #8
    1ae8:	4770      	bx	lr

00001aea <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1aea:	b500      	push	{lr}
    1aec:	b083      	sub	sp, #12
    1aee:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1af0:	f000 f86c 	bl	1bcc <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1af4:	bf00      	nop
    1af6:	b003      	add	sp, #12
    1af8:	f85d fb04 	ldr.w	pc, [sp], #4

00001afc <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1afc:	b500      	push	{lr}
    1afe:	b085      	sub	sp, #20
    1b00:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b02:	2300      	movs	r3, #0
    1b04:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b06:	9b01      	ldr	r3, [sp, #4]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d003      	beq.n	1b14 <OsIf_GetCounter+0x18>
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	2b01      	cmp	r3, #1
    1b10:	d004      	beq.n	1b1c <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b12:	e007      	b.n	1b24 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b14:	f7ff ffd5 	bl	1ac2 <OsIf_Timer_Dummy_GetCounter>
    1b18:	9003      	str	r0, [sp, #12]
            break;
    1b1a:	e003      	b.n	1b24 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1b1c:	f000 f872 	bl	1c04 <OsIf_Timer_System_GetCounter>
    1b20:	9003      	str	r0, [sp, #12]
            break;
    1b22:	bf00      	nop
    }

    return Value;
    1b24:	9b03      	ldr	r3, [sp, #12]
}
    1b26:	4618      	mov	r0, r3
    1b28:	b005      	add	sp, #20
    1b2a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b2e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1b2e:	b500      	push	{lr}
    1b30:	b085      	sub	sp, #20
    1b32:	9001      	str	r0, [sp, #4]
    1b34:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b36:	2300      	movs	r3, #0
    1b38:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b3a:	9b00      	ldr	r3, [sp, #0]
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d003      	beq.n	1b48 <OsIf_GetElapsed+0x1a>
    1b40:	9b00      	ldr	r3, [sp, #0]
    1b42:	2b01      	cmp	r3, #1
    1b44:	d005      	beq.n	1b52 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b46:	e009      	b.n	1b5c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1b48:	9801      	ldr	r0, [sp, #4]
    1b4a:	f7ff ffbd 	bl	1ac8 <OsIf_Timer_Dummy_GetElapsed>
    1b4e:	9003      	str	r0, [sp, #12]
            break;
    1b50:	e004      	b.n	1b5c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1b52:	9801      	ldr	r0, [sp, #4]
    1b54:	f000 f864 	bl	1c20 <OsIf_Timer_System_GetElapsed>
    1b58:	9003      	str	r0, [sp, #12]
            break;
    1b5a:	bf00      	nop
    }

    return Value;
    1b5c:	9b03      	ldr	r3, [sp, #12]
}
    1b5e:	4618      	mov	r0, r3
    1b60:	b005      	add	sp, #20
    1b62:	f85d fb04 	ldr.w	pc, [sp], #4

00001b66 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1b66:	b500      	push	{lr}
    1b68:	b083      	sub	sp, #12
    1b6a:	9001      	str	r0, [sp, #4]
    1b6c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1b6e:	9b00      	ldr	r3, [sp, #0]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d003      	beq.n	1b7c <OsIf_SetTimerFrequency+0x16>
    1b74:	9b00      	ldr	r3, [sp, #0]
    1b76:	2b01      	cmp	r3, #1
    1b78:	d004      	beq.n	1b84 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b7a:	e007      	b.n	1b8c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1b7c:	9801      	ldr	r0, [sp, #4]
    1b7e:	f7ff ffa9 	bl	1ad4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1b82:	e003      	b.n	1b8c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1b84:	9801      	ldr	r0, [sp, #4]
    1b86:	f000 f85b 	bl	1c40 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1b8a:	bf00      	nop
    }
}
    1b8c:	bf00      	nop
    1b8e:	b003      	add	sp, #12
    1b90:	f85d fb04 	ldr.w	pc, [sp], #4

00001b94 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1b94:	b500      	push	{lr}
    1b96:	b085      	sub	sp, #20
    1b98:	9001      	str	r0, [sp, #4]
    1b9a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b9c:	2300      	movs	r3, #0
    1b9e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ba0:	9b00      	ldr	r3, [sp, #0]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d003      	beq.n	1bae <OsIf_MicrosToTicks+0x1a>
    1ba6:	9b00      	ldr	r3, [sp, #0]
    1ba8:	2b01      	cmp	r3, #1
    1baa:	d005      	beq.n	1bb8 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bac:	e009      	b.n	1bc2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1bae:	9801      	ldr	r0, [sp, #4]
    1bb0:	f7ff ff95 	bl	1ade <OsIf_Timer_Dummy_MicrosToTicks>
    1bb4:	9003      	str	r0, [sp, #12]
            break;
    1bb6:	e004      	b.n	1bc2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1bb8:	9801      	ldr	r0, [sp, #4]
    1bba:	f000 f84f 	bl	1c5c <OsIf_Timer_System_MicrosToTicks>
    1bbe:	9003      	str	r0, [sp, #12]
            break;
    1bc0:	bf00      	nop
    }

    return Value;
    1bc2:	9b03      	ldr	r3, [sp, #12]
}
    1bc4:	4618      	mov	r0, r3
    1bc6:	b005      	add	sp, #20
    1bc8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bcc <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1bcc:	b500      	push	{lr}
    1bce:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1bd0:	2300      	movs	r3, #0
    1bd2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1bd4:	4a09      	ldr	r2, [pc, #36]	; (1bfc <OsIf_Timer_System_Init+0x30>)
    1bd6:	9b01      	ldr	r3, [sp, #4]
    1bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bdc:	685a      	ldr	r2, [r3, #4]
    1bde:	4908      	ldr	r1, [pc, #32]	; (1c00 <OsIf_Timer_System_Init+0x34>)
    1be0:	9b01      	ldr	r3, [sp, #4]
    1be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1be6:	4a06      	ldr	r2, [pc, #24]	; (1c00 <OsIf_Timer_System_Init+0x34>)
    1be8:	9b01      	ldr	r3, [sp, #4]
    1bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bee:	4618      	mov	r0, r3
    1bf0:	f000 f868 	bl	1cc4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1bf4:	bf00      	nop
    1bf6:	b003      	add	sp, #12
    1bf8:	f85d fb04 	ldr.w	pc, [sp], #4
    1bfc:	00010e58 	.word	0x00010e58
    1c00:	1fff8b30 	.word	0x1fff8b30

00001c04 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c04:	b500      	push	{lr}
    1c06:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c08:	2300      	movs	r3, #0
    1c0a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c0c:	2300      	movs	r3, #0
    1c0e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1c10:	f000 f86c 	bl	1cec <OsIf_Timer_System_Internal_GetCounter>
    1c14:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c16:	9b01      	ldr	r3, [sp, #4]
}
    1c18:	4618      	mov	r0, r3
    1c1a:	b003      	add	sp, #12
    1c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c20 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1c20:	b500      	push	{lr}
    1c22:	b085      	sub	sp, #20
    1c24:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c26:	2300      	movs	r3, #0
    1c28:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c2a:	2300      	movs	r3, #0
    1c2c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1c2e:	9801      	ldr	r0, [sp, #4]
    1c30:	f000 f864 	bl	1cfc <OsIf_Timer_System_Internal_GetElapsed>
    1c34:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1c36:	9b03      	ldr	r3, [sp, #12]
}
    1c38:	4618      	mov	r0, r3
    1c3a:	b005      	add	sp, #20
    1c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c40 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1c40:	b084      	sub	sp, #16
    1c42:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c44:	2300      	movs	r3, #0
    1c46:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1c48:	4903      	ldr	r1, [pc, #12]	; (1c58 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1c4a:	9b03      	ldr	r3, [sp, #12]
    1c4c:	9a01      	ldr	r2, [sp, #4]
    1c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1c52:	bf00      	nop
    1c54:	b004      	add	sp, #16
    1c56:	4770      	bx	lr
    1c58:	1fff8b30 	.word	0x1fff8b30

00001c5c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5e:	b087      	sub	sp, #28
    1c60:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1c62:	2100      	movs	r1, #0
    1c64:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1c66:	2100      	movs	r1, #0
    1c68:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1c6a:	9901      	ldr	r1, [sp, #4]
    1c6c:	2000      	movs	r0, #0
    1c6e:	460e      	mov	r6, r1
    1c70:	4607      	mov	r7, r0
    1c72:	4812      	ldr	r0, [pc, #72]	; (1cbc <OsIf_Timer_System_MicrosToTicks+0x60>)
    1c74:	9904      	ldr	r1, [sp, #16]
    1c76:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1c7a:	2000      	movs	r0, #0
    1c7c:	460c      	mov	r4, r1
    1c7e:	4605      	mov	r5, r0
    1c80:	fb04 f007 	mul.w	r0, r4, r7
    1c84:	fb06 f105 	mul.w	r1, r6, r5
    1c88:	4401      	add	r1, r0
    1c8a:	fba6 2304 	umull	r2, r3, r6, r4
    1c8e:	4419      	add	r1, r3
    1c90:	460b      	mov	r3, r1
    1c92:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1c9e:	4a08      	ldr	r2, [pc, #32]	; (1cc0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1ca0:	f04f 0300 	mov.w	r3, #0
    1ca4:	f7fe fc7e 	bl	5a4 <__aeabi_uldivmod>
    1ca8:	4602      	mov	r2, r0
    1caa:	460b      	mov	r3, r1
    1cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1cb0:	9b02      	ldr	r3, [sp, #8]
    1cb2:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1cb4:	9b05      	ldr	r3, [sp, #20]
}
    1cb6:	4618      	mov	r0, r3
    1cb8:	b007      	add	sp, #28
    1cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cbc:	1fff8b30 	.word	0x1fff8b30
    1cc0:	000f4240 	.word	0x000f4240

00001cc4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1cc4:	b082      	sub	sp, #8
    1cc6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1cc8:	4b07      	ldr	r3, [pc, #28]	; (1ce8 <OsIf_Timer_System_Internal_Init+0x24>)
    1cca:	2200      	movs	r2, #0
    1ccc:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1cce:	4b06      	ldr	r3, [pc, #24]	; (1ce8 <OsIf_Timer_System_Internal_Init+0x24>)
    1cd0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1cd4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1cd6:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <OsIf_Timer_System_Internal_Init+0x24>)
    1cd8:	2200      	movs	r2, #0
    1cda:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1cdc:	4b02      	ldr	r3, [pc, #8]	; (1ce8 <OsIf_Timer_System_Internal_Init+0x24>)
    1cde:	2205      	movs	r2, #5
    1ce0:	601a      	str	r2, [r3, #0]
}
    1ce2:	bf00      	nop
    1ce4:	b002      	add	sp, #8
    1ce6:	4770      	bx	lr
    1ce8:	e000e010 	.word	0xe000e010

00001cec <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1cec:	4b02      	ldr	r3, [pc, #8]	; (1cf8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1cee:	689b      	ldr	r3, [r3, #8]
    1cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1cf4:	4618      	mov	r0, r3
    1cf6:	4770      	bx	lr
    1cf8:	e000e010 	.word	0xe000e010

00001cfc <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1cfc:	b084      	sub	sp, #16
    1cfe:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d00:	4b10      	ldr	r3, [pc, #64]	; (1d44 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d02:	689b      	ldr	r3, [r3, #8]
    1d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d08:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d0a:	2300      	movs	r3, #0
    1d0c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d0e:	9b01      	ldr	r3, [sp, #4]
    1d10:	681b      	ldr	r3, [r3, #0]
    1d12:	9a02      	ldr	r2, [sp, #8]
    1d14:	429a      	cmp	r2, r3
    1d16:	d909      	bls.n	1d2c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1d18:	9b01      	ldr	r3, [sp, #4]
    1d1a:	681a      	ldr	r2, [r3, #0]
    1d1c:	9b02      	ldr	r3, [sp, #8]
    1d1e:	1ad3      	subs	r3, r2, r3
    1d20:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d24:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d28:	9303      	str	r3, [sp, #12]
    1d2a:	e004      	b.n	1d36 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1d2c:	9b01      	ldr	r3, [sp, #4]
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	9b02      	ldr	r3, [sp, #8]
    1d32:	1ad3      	subs	r3, r2, r3
    1d34:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1d36:	9b01      	ldr	r3, [sp, #4]
    1d38:	9a02      	ldr	r2, [sp, #8]
    1d3a:	601a      	str	r2, [r3, #0]

    return dif;
    1d3c:	9b03      	ldr	r3, [sp, #12]
}
    1d3e:	4618      	mov	r0, r3
    1d40:	b004      	add	sp, #16
    1d42:	4770      	bx	lr
    1d44:	e000e010 	.word	0xe000e010

00001d48 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1d48:	b082      	sub	sp, #8
    1d4a:	9001      	str	r0, [sp, #4]
    1d4c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1d4e:	bf00      	nop
    1d50:	b002      	add	sp, #8
    1d52:	4770      	bx	lr

00001d54 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1d54:	b500      	push	{lr}
    1d56:	b085      	sub	sp, #20
    1d58:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1d5a:	4b24      	ldr	r3, [pc, #144]	; (1dec <Clock_Ip_UpdateDriverContext+0x98>)
    1d5c:	2201      	movs	r2, #1
    1d5e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1d60:	4b23      	ldr	r3, [pc, #140]	; (1df0 <Clock_Ip_UpdateDriverContext+0x9c>)
    1d62:	681b      	ldr	r3, [r3, #0]
    1d64:	2102      	movs	r1, #2
    1d66:	4618      	mov	r0, r3
    1d68:	f003 fc32 	bl	55d0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d6c:	2300      	movs	r3, #0
    1d6e:	f88d 300f 	strb.w	r3, [sp, #15]
    1d72:	e015      	b.n	1da0 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1d74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d78:	9a01      	ldr	r2, [sp, #4]
    1d7a:	334a      	adds	r3, #74	; 0x4a
    1d7c:	00db      	lsls	r3, r3, #3
    1d7e:	4413      	add	r3, r2
    1d80:	6858      	ldr	r0, [r3, #4]
    1d82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d86:	9a01      	ldr	r2, [sp, #4]
    1d88:	334a      	adds	r3, #74	; 0x4a
    1d8a:	00db      	lsls	r3, r3, #3
    1d8c:	4413      	add	r3, r2
    1d8e:	689b      	ldr	r3, [r3, #8]
    1d90:	4619      	mov	r1, r3
    1d92:	f001 fadc 	bl	334e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d9a:	3301      	adds	r3, #1
    1d9c:	f88d 300f 	strb.w	r3, [sp, #15]
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	7bdb      	ldrb	r3, [r3, #15]
    1da4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1da8:	429a      	cmp	r2, r3
    1daa:	d3e3      	bcc.n	1d74 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1dac:	f000 f824 	bl	1df8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1db0:	2301      	movs	r3, #1
    1db2:	f88d 300f 	strb.w	r3, [sp, #15]
    1db6:	e00e      	b.n	1dd6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1db8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dbc:	9b01      	ldr	r3, [sp, #4]
    1dbe:	327e      	adds	r2, #126	; 0x7e
    1dc0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1dc4:	490b      	ldr	r1, [pc, #44]	; (1df4 <Clock_Ip_UpdateDriverContext+0xa0>)
    1dc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dca:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1dcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dd0:	3301      	adds	r3, #1
    1dd2:	f88d 300f 	strb.w	r3, [sp, #15]
    1dd6:	9b01      	ldr	r3, [sp, #4]
    1dd8:	7cdb      	ldrb	r3, [r3, #19]
    1dda:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dde:	429a      	cmp	r2, r3
    1de0:	d3ea      	bcc.n	1db8 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1de2:	bf00      	nop
    1de4:	bf00      	nop
    1de6:	b005      	add	sp, #20
    1de8:	f85d fb04 	ldr.w	pc, [sp], #4
    1dec:	1fff8b10 	.word	0x1fff8b10
    1df0:	1fff8b34 	.word	0x1fff8b34
    1df4:	1fff8b40 	.word	0x1fff8b40

00001df8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1df8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1dfa:	4b23      	ldr	r3, [pc, #140]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	f083 0301 	eor.w	r3, r3, #1
    1e02:	b2db      	uxtb	r3, r3
    1e04:	2b00      	cmp	r3, #0
    1e06:	d03d      	beq.n	1e84 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e08:	4b1f      	ldr	r3, [pc, #124]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e0a:	2201      	movs	r2, #1
    1e0c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e0e:	4b1f      	ldr	r3, [pc, #124]	; (1e8c <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e10:	685b      	ldr	r3, [r3, #4]
    1e12:	2100      	movs	r1, #0
    1e14:	2000      	movs	r0, #0
    1e16:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1e18:	4b1c      	ldr	r3, [pc, #112]	; (1e8c <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e1a:	689b      	ldr	r3, [r3, #8]
    1e1c:	2057      	movs	r0, #87	; 0x57
    1e1e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e20:	4b1b      	ldr	r3, [pc, #108]	; (1e90 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	2000      	movs	r0, #0
    1e26:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e28:	4b1a      	ldr	r3, [pc, #104]	; (1e94 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	2000      	movs	r0, #0
    1e2e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1e30:	4b19      	ldr	r3, [pc, #100]	; (1e98 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	2000      	movs	r0, #0
    1e36:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e38:	4b18      	ldr	r3, [pc, #96]	; (1e9c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e3a:	685b      	ldr	r3, [r3, #4]
    1e3c:	2000      	movs	r0, #0
    1e3e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e40:	4b16      	ldr	r3, [pc, #88]	; (1e9c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e42:	689b      	ldr	r3, [r3, #8]
    1e44:	2057      	movs	r0, #87	; 0x57
    1e46:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e48:	4b15      	ldr	r3, [pc, #84]	; (1ea0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e4a:	681b      	ldr	r3, [r3, #0]
    1e4c:	2000      	movs	r0, #0
    1e4e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1e50:	4b13      	ldr	r3, [pc, #76]	; (1ea0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e52:	685b      	ldr	r3, [r3, #4]
    1e54:	2100      	movs	r1, #0
    1e56:	2057      	movs	r0, #87	; 0x57
    1e58:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e5a:	4b12      	ldr	r3, [pc, #72]	; (1ea4 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1e5c:	681b      	ldr	r3, [r3, #0]
    1e5e:	2000      	movs	r0, #0
    1e60:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e62:	4b11      	ldr	r3, [pc, #68]	; (1ea8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e64:	685b      	ldr	r3, [r3, #4]
    1e66:	2000      	movs	r0, #0
    1e68:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e6a:	4b0f      	ldr	r3, [pc, #60]	; (1ea8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e6c:	689b      	ldr	r3, [r3, #8]
    1e6e:	2057      	movs	r0, #87	; 0x57
    1e70:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e72:	4b0e      	ldr	r3, [pc, #56]	; (1eac <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1e74:	685b      	ldr	r3, [r3, #4]
    1e76:	2000      	movs	r0, #0
    1e78:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e7a:	4b0d      	ldr	r3, [pc, #52]	; (1eb0 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	2100      	movs	r1, #0
    1e80:	2000      	movs	r0, #0
    1e82:	4798      	blx	r3
    }
}
    1e84:	bf00      	nop
    1e86:	bd08      	pop	{r3, pc}
    1e88:	1fff8b38 	.word	0x1fff8b38
    1e8c:	00010800 	.word	0x00010800
    1e90:	00010714 	.word	0x00010714
    1e94:	00010750 	.word	0x00010750
    1e98:	00010758 	.word	0x00010758
    1e9c:	00010780 	.word	0x00010780
    1ea0:	0001078c 	.word	0x0001078c
    1ea4:	000107c4 	.word	0x000107c4
    1ea8:	00010810 	.word	0x00010810
    1eac:	0001083c 	.word	0x0001083c
    1eb0:	00010838 	.word	0x00010838

00001eb4 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1eb4:	b500      	push	{lr}
    1eb6:	b085      	sub	sp, #20
    1eb8:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1eba:	9b01      	ldr	r3, [sp, #4]
    1ebc:	7adb      	ldrb	r3, [r3, #11]
    1ebe:	9303      	str	r3, [sp, #12]
    1ec0:	e01f      	b.n	1f02 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ec2:	9b03      	ldr	r3, [sp, #12]
    1ec4:	1e5a      	subs	r2, r3, #1
    1ec6:	9b01      	ldr	r3, [sp, #4]
    1ec8:	320d      	adds	r2, #13
    1eca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1ece:	495a      	ldr	r1, [pc, #360]	; (2038 <Clock_Ip_ResetClockConfiguration+0x184>)
    1ed0:	4613      	mov	r3, r2
    1ed2:	00db      	lsls	r3, r3, #3
    1ed4:	4413      	add	r3, r2
    1ed6:	440b      	add	r3, r1
    1ed8:	3301      	adds	r3, #1
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	461a      	mov	r2, r3
    1ede:	4b57      	ldr	r3, [pc, #348]	; (203c <Clock_Ip_ResetClockConfiguration+0x188>)
    1ee0:	5c9b      	ldrb	r3, [r3, r2]
    1ee2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1ee4:	4a56      	ldr	r2, [pc, #344]	; (2040 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1ee6:	9b02      	ldr	r3, [sp, #8]
    1ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1eec:	9a03      	ldr	r2, [sp, #12]
    1eee:	3a01      	subs	r2, #1
    1ef0:	320d      	adds	r2, #13
    1ef2:	00d2      	lsls	r2, r2, #3
    1ef4:	9901      	ldr	r1, [sp, #4]
    1ef6:	440a      	add	r2, r1
    1ef8:	4610      	mov	r0, r2
    1efa:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1efc:	9b03      	ldr	r3, [sp, #12]
    1efe:	3b01      	subs	r3, #1
    1f00:	9303      	str	r3, [sp, #12]
    1f02:	9b03      	ldr	r3, [sp, #12]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d1dc      	bne.n	1ec2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f08:	9b01      	ldr	r3, [sp, #4]
    1f0a:	7b9b      	ldrb	r3, [r3, #14]
    1f0c:	9303      	str	r3, [sp, #12]
    1f0e:	e026      	b.n	1f5e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f10:	9b03      	ldr	r3, [sp, #12]
    1f12:	3b01      	subs	r3, #1
    1f14:	9a01      	ldr	r2, [sp, #4]
    1f16:	3324      	adds	r3, #36	; 0x24
    1f18:	011b      	lsls	r3, r3, #4
    1f1a:	4413      	add	r3, r2
    1f1c:	3304      	adds	r3, #4
    1f1e:	681a      	ldr	r2, [r3, #0]
    1f20:	4945      	ldr	r1, [pc, #276]	; (2038 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f22:	4613      	mov	r3, r2
    1f24:	00db      	lsls	r3, r3, #3
    1f26:	4413      	add	r3, r2
    1f28:	440b      	add	r3, r1
    1f2a:	3301      	adds	r3, #1
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	461a      	mov	r2, r3
    1f30:	4b44      	ldr	r3, [pc, #272]	; (2044 <Clock_Ip_ResetClockConfiguration+0x190>)
    1f32:	5c9b      	ldrb	r3, [r3, r2]
    1f34:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1f36:	4944      	ldr	r1, [pc, #272]	; (2048 <Clock_Ip_ResetClockConfiguration+0x194>)
    1f38:	9a02      	ldr	r2, [sp, #8]
    1f3a:	4613      	mov	r3, r2
    1f3c:	005b      	lsls	r3, r3, #1
    1f3e:	4413      	add	r3, r2
    1f40:	009b      	lsls	r3, r3, #2
    1f42:	440b      	add	r3, r1
    1f44:	681b      	ldr	r3, [r3, #0]
    1f46:	9a03      	ldr	r2, [sp, #12]
    1f48:	3a01      	subs	r2, #1
    1f4a:	3224      	adds	r2, #36	; 0x24
    1f4c:	0112      	lsls	r2, r2, #4
    1f4e:	9901      	ldr	r1, [sp, #4]
    1f50:	440a      	add	r2, r1
    1f52:	3204      	adds	r2, #4
    1f54:	4610      	mov	r0, r2
    1f56:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f58:	9b03      	ldr	r3, [sp, #12]
    1f5a:	3b01      	subs	r3, #1
    1f5c:	9303      	str	r3, [sp, #12]
    1f5e:	9b03      	ldr	r3, [sp, #12]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d1d5      	bne.n	1f10 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f64:	9b01      	ldr	r3, [sp, #4]
    1f66:	7a9b      	ldrb	r3, [r3, #10]
    1f68:	9303      	str	r3, [sp, #12]
    1f6a:	e02a      	b.n	1fc2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f6c:	9b03      	ldr	r3, [sp, #12]
    1f6e:	1e5a      	subs	r2, r3, #1
    1f70:	9901      	ldr	r1, [sp, #4]
    1f72:	4613      	mov	r3, r2
    1f74:	009b      	lsls	r3, r3, #2
    1f76:	4413      	add	r3, r2
    1f78:	00db      	lsls	r3, r3, #3
    1f7a:	440b      	add	r3, r1
    1f7c:	3340      	adds	r3, #64	; 0x40
    1f7e:	681a      	ldr	r2, [r3, #0]
    1f80:	492d      	ldr	r1, [pc, #180]	; (2038 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f82:	4613      	mov	r3, r2
    1f84:	00db      	lsls	r3, r3, #3
    1f86:	4413      	add	r3, r2
    1f88:	440b      	add	r3, r1
    1f8a:	3301      	adds	r3, #1
    1f8c:	781b      	ldrb	r3, [r3, #0]
    1f8e:	461a      	mov	r2, r3
    1f90:	4b2e      	ldr	r3, [pc, #184]	; (204c <Clock_Ip_ResetClockConfiguration+0x198>)
    1f92:	5c9b      	ldrb	r3, [r3, r2]
    1f94:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1f96:	492e      	ldr	r1, [pc, #184]	; (2050 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1f98:	9a02      	ldr	r2, [sp, #8]
    1f9a:	4613      	mov	r3, r2
    1f9c:	009b      	lsls	r3, r3, #2
    1f9e:	4413      	add	r3, r2
    1fa0:	009b      	lsls	r3, r3, #2
    1fa2:	440b      	add	r3, r1
    1fa4:	6819      	ldr	r1, [r3, #0]
    1fa6:	9b03      	ldr	r3, [sp, #12]
    1fa8:	1e5a      	subs	r2, r3, #1
    1faa:	4613      	mov	r3, r2
    1fac:	009b      	lsls	r3, r3, #2
    1fae:	4413      	add	r3, r2
    1fb0:	00db      	lsls	r3, r3, #3
    1fb2:	3340      	adds	r3, #64	; 0x40
    1fb4:	9a01      	ldr	r2, [sp, #4]
    1fb6:	4413      	add	r3, r2
    1fb8:	4618      	mov	r0, r3
    1fba:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fbc:	9b03      	ldr	r3, [sp, #12]
    1fbe:	3b01      	subs	r3, #1
    1fc0:	9303      	str	r3, [sp, #12]
    1fc2:	9b03      	ldr	r3, [sp, #12]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d1d1      	bne.n	1f6c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1fc8:	9b01      	ldr	r3, [sp, #4]
    1fca:	7a5b      	ldrb	r3, [r3, #9]
    1fcc:	9303      	str	r3, [sp, #12]
    1fce:	e02b      	b.n	2028 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fd0:	9b03      	ldr	r3, [sp, #12]
    1fd2:	1e5a      	subs	r2, r3, #1
    1fd4:	9901      	ldr	r1, [sp, #4]
    1fd6:	4613      	mov	r3, r2
    1fd8:	009b      	lsls	r3, r3, #2
    1fda:	4413      	add	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	440b      	add	r3, r1
    1fe0:	332c      	adds	r3, #44	; 0x2c
    1fe2:	681a      	ldr	r2, [r3, #0]
    1fe4:	4914      	ldr	r1, [pc, #80]	; (2038 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fe6:	4613      	mov	r3, r2
    1fe8:	00db      	lsls	r3, r3, #3
    1fea:	4413      	add	r3, r2
    1fec:	440b      	add	r3, r1
    1fee:	3301      	adds	r3, #1
    1ff0:	781b      	ldrb	r3, [r3, #0]
    1ff2:	461a      	mov	r2, r3
    1ff4:	4b17      	ldr	r3, [pc, #92]	; (2054 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1ff6:	5c9b      	ldrb	r3, [r3, r2]
    1ff8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1ffa:	4917      	ldr	r1, [pc, #92]	; (2058 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1ffc:	9a02      	ldr	r2, [sp, #8]
    1ffe:	4613      	mov	r3, r2
    2000:	009b      	lsls	r3, r3, #2
    2002:	4413      	add	r3, r2
    2004:	009b      	lsls	r3, r3, #2
    2006:	440b      	add	r3, r1
    2008:	6819      	ldr	r1, [r3, #0]
    200a:	9b03      	ldr	r3, [sp, #12]
    200c:	1e5a      	subs	r2, r3, #1
    200e:	4613      	mov	r3, r2
    2010:	009b      	lsls	r3, r3, #2
    2012:	4413      	add	r3, r2
    2014:	009b      	lsls	r3, r3, #2
    2016:	3328      	adds	r3, #40	; 0x28
    2018:	9a01      	ldr	r2, [sp, #4]
    201a:	4413      	add	r3, r2
    201c:	3304      	adds	r3, #4
    201e:	4618      	mov	r0, r3
    2020:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2022:	9b03      	ldr	r3, [sp, #12]
    2024:	3b01      	subs	r3, #1
    2026:	9303      	str	r3, [sp, #12]
    2028:	9b03      	ldr	r3, [sp, #12]
    202a:	2b00      	cmp	r3, #0
    202c:	d1d0      	bne.n	1fd0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    202e:	bf00      	nop
    2030:	bf00      	nop
    2032:	b005      	add	sp, #20
    2034:	f85d fb04 	ldr.w	pc, [sp], #4
    2038:	00010204 	.word	0x00010204
    203c:	000101d4 	.word	0x000101d4
    2040:	0001083c 	.word	0x0001083c
    2044:	000101b4 	.word	0x000101b4
    2048:	00010780 	.word	0x00010780
    204c:	000101c4 	.word	0x000101c4
    2050:	00010810 	.word	0x00010810
    2054:	00010184 	.word	0x00010184
    2058:	00010758 	.word	0x00010758

0000205c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    205c:	b500      	push	{lr}
    205e:	b085      	sub	sp, #20
    2060:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2062:	2301      	movs	r3, #1
    2064:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2066:	9801      	ldr	r0, [sp, #4]
    2068:	f000 f818 	bl	209c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    206c:	4b0a      	ldr	r3, [pc, #40]	; (2098 <Clock_Ip_Init+0x3c>)
    206e:	781b      	ldrb	r3, [r3, #0]
    2070:	2b00      	cmp	r3, #0
    2072:	d00a      	beq.n	208a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2074:	f000 fb74 	bl	2760 <Clock_Ip_GetPllStatus>
    2078:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    207a:	9b02      	ldr	r3, [sp, #8]
    207c:	2b00      	cmp	r3, #0
    207e:	d106      	bne.n	208e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2080:	f000 fbf2 	bl	2868 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2084:	2300      	movs	r3, #0
    2086:	9303      	str	r3, [sp, #12]
    2088:	e001      	b.n	208e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    208a:	2300      	movs	r3, #0
    208c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    208e:	9b03      	ldr	r3, [sp, #12]
}
    2090:	4618      	mov	r0, r3
    2092:	b005      	add	sp, #20
    2094:	f85d fb04 	ldr.w	pc, [sp], #4
    2098:	1fff8b3c 	.word	0x1fff8b3c

0000209c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    209c:	b510      	push	{r4, lr}
    209e:	b084      	sub	sp, #16
    20a0:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    20a2:	4a9f      	ldr	r2, [pc, #636]	; (2320 <Clock_Ip_InitClock+0x284>)
    20a4:	9b01      	ldr	r3, [sp, #4]
    20a6:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    20a8:	2101      	movs	r1, #1
    20aa:	9801      	ldr	r0, [sp, #4]
    20ac:	f003 fa90 	bl	55d0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    20b0:	4b9b      	ldr	r3, [pc, #620]	; (2320 <Clock_Ip_InitClock+0x284>)
    20b2:	681b      	ldr	r3, [r3, #0]
    20b4:	2b00      	cmp	r3, #0
    20b6:	d030      	beq.n	211a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    20b8:	2300      	movs	r3, #0
    20ba:	9303      	str	r3, [sp, #12]
    20bc:	e027      	b.n	210e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    20be:	9901      	ldr	r1, [sp, #4]
    20c0:	9a03      	ldr	r2, [sp, #12]
    20c2:	4613      	mov	r3, r2
    20c4:	009b      	lsls	r3, r3, #2
    20c6:	4413      	add	r3, r2
    20c8:	009b      	lsls	r3, r3, #2
    20ca:	440b      	add	r3, r1
    20cc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20d0:	681a      	ldr	r2, [r3, #0]
    20d2:	4994      	ldr	r1, [pc, #592]	; (2324 <Clock_Ip_InitClock+0x288>)
    20d4:	4613      	mov	r3, r2
    20d6:	00db      	lsls	r3, r3, #3
    20d8:	4413      	add	r3, r2
    20da:	440b      	add	r3, r1
    20dc:	3301      	adds	r3, #1
    20de:	781b      	ldrb	r3, [r3, #0]
    20e0:	461a      	mov	r2, r3
    20e2:	4b91      	ldr	r3, [pc, #580]	; (2328 <Clock_Ip_InitClock+0x28c>)
    20e4:	5c9b      	ldrb	r3, [r3, r2]
    20e6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    20e8:	4a90      	ldr	r2, [pc, #576]	; (232c <Clock_Ip_InitClock+0x290>)
    20ea:	9b02      	ldr	r3, [sp, #8]
    20ec:	011b      	lsls	r3, r3, #4
    20ee:	4413      	add	r3, r2
    20f0:	6819      	ldr	r1, [r3, #0]
    20f2:	9a03      	ldr	r2, [sp, #12]
    20f4:	4613      	mov	r3, r2
    20f6:	009b      	lsls	r3, r3, #2
    20f8:	4413      	add	r3, r2
    20fa:	009b      	lsls	r3, r3, #2
    20fc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2100:	9a01      	ldr	r2, [sp, #4]
    2102:	4413      	add	r3, r2
    2104:	4618      	mov	r0, r3
    2106:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2108:	9b03      	ldr	r3, [sp, #12]
    210a:	3301      	adds	r3, #1
    210c:	9303      	str	r3, [sp, #12]
    210e:	9b01      	ldr	r3, [sp, #4]
    2110:	7c9b      	ldrb	r3, [r3, #18]
    2112:	461a      	mov	r2, r3
    2114:	9b03      	ldr	r3, [sp, #12]
    2116:	4293      	cmp	r3, r2
    2118:	d3d1      	bcc.n	20be <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    211a:	9801      	ldr	r0, [sp, #4]
    211c:	f7ff feca 	bl	1eb4 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2120:	2300      	movs	r3, #0
    2122:	9303      	str	r3, [sp, #12]
    2124:	e029      	b.n	217a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2126:	9901      	ldr	r1, [sp, #4]
    2128:	9a03      	ldr	r2, [sp, #12]
    212a:	4613      	mov	r3, r2
    212c:	005b      	lsls	r3, r3, #1
    212e:	4413      	add	r3, r2
    2130:	009b      	lsls	r3, r3, #2
    2132:	440b      	add	r3, r1
    2134:	3314      	adds	r3, #20
    2136:	681a      	ldr	r2, [r3, #0]
    2138:	497a      	ldr	r1, [pc, #488]	; (2324 <Clock_Ip_InitClock+0x288>)
    213a:	4613      	mov	r3, r2
    213c:	00db      	lsls	r3, r3, #3
    213e:	4413      	add	r3, r2
    2140:	440b      	add	r3, r1
    2142:	3301      	adds	r3, #1
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	461a      	mov	r2, r3
    2148:	4b79      	ldr	r3, [pc, #484]	; (2330 <Clock_Ip_InitClock+0x294>)
    214a:	5c9b      	ldrb	r3, [r3, r2]
    214c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    214e:	4979      	ldr	r1, [pc, #484]	; (2334 <Clock_Ip_InitClock+0x298>)
    2150:	9a02      	ldr	r2, [sp, #8]
    2152:	4613      	mov	r3, r2
    2154:	005b      	lsls	r3, r3, #1
    2156:	4413      	add	r3, r2
    2158:	009b      	lsls	r3, r3, #2
    215a:	440b      	add	r3, r1
    215c:	6819      	ldr	r1, [r3, #0]
    215e:	9a03      	ldr	r2, [sp, #12]
    2160:	4613      	mov	r3, r2
    2162:	005b      	lsls	r3, r3, #1
    2164:	4413      	add	r3, r2
    2166:	009b      	lsls	r3, r3, #2
    2168:	3310      	adds	r3, #16
    216a:	9a01      	ldr	r2, [sp, #4]
    216c:	4413      	add	r3, r2
    216e:	3304      	adds	r3, #4
    2170:	4618      	mov	r0, r3
    2172:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2174:	9b03      	ldr	r3, [sp, #12]
    2176:	3301      	adds	r3, #1
    2178:	9303      	str	r3, [sp, #12]
    217a:	9b01      	ldr	r3, [sp, #4]
    217c:	7a1b      	ldrb	r3, [r3, #8]
    217e:	461a      	mov	r2, r3
    2180:	9b03      	ldr	r3, [sp, #12]
    2182:	4293      	cmp	r3, r2
    2184:	d3cf      	bcc.n	2126 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2186:	2300      	movs	r3, #0
    2188:	9303      	str	r3, [sp, #12]
    218a:	e02a      	b.n	21e2 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    218c:	9901      	ldr	r1, [sp, #4]
    218e:	9a03      	ldr	r2, [sp, #12]
    2190:	4613      	mov	r3, r2
    2192:	009b      	lsls	r3, r3, #2
    2194:	4413      	add	r3, r2
    2196:	009b      	lsls	r3, r3, #2
    2198:	440b      	add	r3, r1
    219a:	332c      	adds	r3, #44	; 0x2c
    219c:	681a      	ldr	r2, [r3, #0]
    219e:	4961      	ldr	r1, [pc, #388]	; (2324 <Clock_Ip_InitClock+0x288>)
    21a0:	4613      	mov	r3, r2
    21a2:	00db      	lsls	r3, r3, #3
    21a4:	4413      	add	r3, r2
    21a6:	440b      	add	r3, r1
    21a8:	3301      	adds	r3, #1
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	461a      	mov	r2, r3
    21ae:	4b62      	ldr	r3, [pc, #392]	; (2338 <Clock_Ip_InitClock+0x29c>)
    21b0:	5c9b      	ldrb	r3, [r3, r2]
    21b2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    21b4:	4961      	ldr	r1, [pc, #388]	; (233c <Clock_Ip_InitClock+0x2a0>)
    21b6:	9a02      	ldr	r2, [sp, #8]
    21b8:	4613      	mov	r3, r2
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	4413      	add	r3, r2
    21be:	009b      	lsls	r3, r3, #2
    21c0:	440b      	add	r3, r1
    21c2:	3304      	adds	r3, #4
    21c4:	6819      	ldr	r1, [r3, #0]
    21c6:	9a03      	ldr	r2, [sp, #12]
    21c8:	4613      	mov	r3, r2
    21ca:	009b      	lsls	r3, r3, #2
    21cc:	4413      	add	r3, r2
    21ce:	009b      	lsls	r3, r3, #2
    21d0:	3328      	adds	r3, #40	; 0x28
    21d2:	9a01      	ldr	r2, [sp, #4]
    21d4:	4413      	add	r3, r2
    21d6:	3304      	adds	r3, #4
    21d8:	4618      	mov	r0, r3
    21da:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21dc:	9b03      	ldr	r3, [sp, #12]
    21de:	3301      	adds	r3, #1
    21e0:	9303      	str	r3, [sp, #12]
    21e2:	9b01      	ldr	r3, [sp, #4]
    21e4:	7a5b      	ldrb	r3, [r3, #9]
    21e6:	461a      	mov	r2, r3
    21e8:	9b03      	ldr	r3, [sp, #12]
    21ea:	4293      	cmp	r3, r2
    21ec:	d3ce      	bcc.n	218c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    21ee:	9801      	ldr	r0, [sp, #4]
    21f0:	f7ff fdb0 	bl	1d54 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    21f4:	2300      	movs	r3, #0
    21f6:	9303      	str	r3, [sp, #12]
    21f8:	e028      	b.n	224c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    21fa:	9901      	ldr	r1, [sp, #4]
    21fc:	9a03      	ldr	r2, [sp, #12]
    21fe:	4613      	mov	r3, r2
    2200:	009b      	lsls	r3, r3, #2
    2202:	4413      	add	r3, r2
    2204:	009b      	lsls	r3, r3, #2
    2206:	440b      	add	r3, r1
    2208:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    220c:	681a      	ldr	r2, [r3, #0]
    220e:	4945      	ldr	r1, [pc, #276]	; (2324 <Clock_Ip_InitClock+0x288>)
    2210:	4613      	mov	r3, r2
    2212:	00db      	lsls	r3, r3, #3
    2214:	4413      	add	r3, r2
    2216:	440b      	add	r3, r1
    2218:	3301      	adds	r3, #1
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	461a      	mov	r2, r3
    221e:	4b48      	ldr	r3, [pc, #288]	; (2340 <Clock_Ip_InitClock+0x2a4>)
    2220:	5c9b      	ldrb	r3, [r3, r2]
    2222:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2224:	4a47      	ldr	r2, [pc, #284]	; (2344 <Clock_Ip_InitClock+0x2a8>)
    2226:	9b02      	ldr	r3, [sp, #8]
    2228:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    222c:	9a03      	ldr	r2, [sp, #12]
    222e:	4613      	mov	r3, r2
    2230:	009b      	lsls	r3, r3, #2
    2232:	4413      	add	r3, r2
    2234:	009b      	lsls	r3, r3, #2
    2236:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    223a:	9a01      	ldr	r2, [sp, #4]
    223c:	4413      	add	r3, r2
    223e:	3304      	adds	r3, #4
    2240:	9903      	ldr	r1, [sp, #12]
    2242:	4618      	mov	r0, r3
    2244:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2246:	9b03      	ldr	r3, [sp, #12]
    2248:	3301      	adds	r3, #1
    224a:	9303      	str	r3, [sp, #12]
    224c:	9b01      	ldr	r3, [sp, #4]
    224e:	7c5b      	ldrb	r3, [r3, #17]
    2250:	461a      	mov	r2, r3
    2252:	9b03      	ldr	r3, [sp, #12]
    2254:	4293      	cmp	r3, r2
    2256:	d3d0      	bcc.n	21fa <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2258:	2300      	movs	r3, #0
    225a:	9303      	str	r3, [sp, #12]
    225c:	e026      	b.n	22ac <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    225e:	9901      	ldr	r1, [sp, #4]
    2260:	9a03      	ldr	r2, [sp, #12]
    2262:	4613      	mov	r3, r2
    2264:	005b      	lsls	r3, r3, #1
    2266:	4413      	add	r3, r2
    2268:	009b      	lsls	r3, r3, #2
    226a:	440b      	add	r3, r1
    226c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2270:	681a      	ldr	r2, [r3, #0]
    2272:	492c      	ldr	r1, [pc, #176]	; (2324 <Clock_Ip_InitClock+0x288>)
    2274:	4613      	mov	r3, r2
    2276:	00db      	lsls	r3, r3, #3
    2278:	4413      	add	r3, r2
    227a:	440b      	add	r3, r1
    227c:	3301      	adds	r3, #1
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	461a      	mov	r2, r3
    2282:	4b31      	ldr	r3, [pc, #196]	; (2348 <Clock_Ip_InitClock+0x2ac>)
    2284:	5c9b      	ldrb	r3, [r3, r2]
    2286:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2288:	4a30      	ldr	r2, [pc, #192]	; (234c <Clock_Ip_InitClock+0x2b0>)
    228a:	9b02      	ldr	r3, [sp, #8]
    228c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2290:	9a03      	ldr	r2, [sp, #12]
    2292:	4613      	mov	r3, r2
    2294:	005b      	lsls	r3, r3, #1
    2296:	4413      	add	r3, r2
    2298:	009b      	lsls	r3, r3, #2
    229a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    229e:	9a01      	ldr	r2, [sp, #4]
    22a0:	4413      	add	r3, r2
    22a2:	4618      	mov	r0, r3
    22a4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22a6:	9b03      	ldr	r3, [sp, #12]
    22a8:	3301      	adds	r3, #1
    22aa:	9303      	str	r3, [sp, #12]
    22ac:	9b01      	ldr	r3, [sp, #4]
    22ae:	7b5b      	ldrb	r3, [r3, #13]
    22b0:	461a      	mov	r2, r3
    22b2:	9b03      	ldr	r3, [sp, #12]
    22b4:	4293      	cmp	r3, r2
    22b6:	d3d2      	bcc.n	225e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    22b8:	2300      	movs	r3, #0
    22ba:	9303      	str	r3, [sp, #12]
    22bc:	e026      	b.n	230c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    22be:	9901      	ldr	r1, [sp, #4]
    22c0:	9a03      	ldr	r2, [sp, #12]
    22c2:	4613      	mov	r3, r2
    22c4:	005b      	lsls	r3, r3, #1
    22c6:	4413      	add	r3, r2
    22c8:	009b      	lsls	r3, r3, #2
    22ca:	440b      	add	r3, r1
    22cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22d0:	681a      	ldr	r2, [r3, #0]
    22d2:	4914      	ldr	r1, [pc, #80]	; (2324 <Clock_Ip_InitClock+0x288>)
    22d4:	4613      	mov	r3, r2
    22d6:	00db      	lsls	r3, r3, #3
    22d8:	4413      	add	r3, r2
    22da:	440b      	add	r3, r1
    22dc:	3301      	adds	r3, #1
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	461a      	mov	r2, r3
    22e2:	4b1b      	ldr	r3, [pc, #108]	; (2350 <Clock_Ip_InitClock+0x2b4>)
    22e4:	5c9b      	ldrb	r3, [r3, r2]
    22e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    22e8:	4a1a      	ldr	r2, [pc, #104]	; (2354 <Clock_Ip_InitClock+0x2b8>)
    22ea:	9b02      	ldr	r3, [sp, #8]
    22ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    22f0:	9a03      	ldr	r2, [sp, #12]
    22f2:	4613      	mov	r3, r2
    22f4:	005b      	lsls	r3, r3, #1
    22f6:	4413      	add	r3, r2
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22fe:	9a01      	ldr	r2, [sp, #4]
    2300:	4413      	add	r3, r2
    2302:	4618      	mov	r0, r3
    2304:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2306:	9b03      	ldr	r3, [sp, #12]
    2308:	3301      	adds	r3, #1
    230a:	9303      	str	r3, [sp, #12]
    230c:	9b01      	ldr	r3, [sp, #4]
    230e:	7b1b      	ldrb	r3, [r3, #12]
    2310:	461a      	mov	r2, r3
    2312:	9b03      	ldr	r3, [sp, #12]
    2314:	4293      	cmp	r3, r2
    2316:	d3d2      	bcc.n	22be <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2318:	2300      	movs	r3, #0
    231a:	9303      	str	r3, [sp, #12]
    231c:	e044      	b.n	23a8 <Clock_Ip_InitClock+0x30c>
    231e:	bf00      	nop
    2320:	1fff8b34 	.word	0x1fff8b34
    2324:	00010204 	.word	0x00010204
    2328:	000101f4 	.word	0x000101f4
    232c:	00010800 	.word	0x00010800
    2330:	00010194 	.word	0x00010194
    2334:	000107c4 	.word	0x000107c4
    2338:	00010184 	.word	0x00010184
    233c:	00010758 	.word	0x00010758
    2340:	000101e4 	.word	0x000101e4
    2344:	00010838 	.word	0x00010838
    2348:	00010174 	.word	0x00010174
    234c:	00010750 	.word	0x00010750
    2350:	00010164 	.word	0x00010164
    2354:	00010714 	.word	0x00010714
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2358:	9901      	ldr	r1, [sp, #4]
    235a:	9a03      	ldr	r2, [sp, #12]
    235c:	4613      	mov	r3, r2
    235e:	005b      	lsls	r3, r3, #1
    2360:	4413      	add	r3, r2
    2362:	009b      	lsls	r3, r3, #2
    2364:	440b      	add	r3, r1
    2366:	f503 730e 	add.w	r3, r3, #568	; 0x238
    236a:	681a      	ldr	r2, [r3, #0]
    236c:	49ac      	ldr	r1, [pc, #688]	; (2620 <Clock_Ip_InitClock+0x584>)
    236e:	4613      	mov	r3, r2
    2370:	00db      	lsls	r3, r3, #3
    2372:	4413      	add	r3, r2
    2374:	440b      	add	r3, r1
    2376:	3301      	adds	r3, #1
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	461a      	mov	r2, r3
    237c:	4ba9      	ldr	r3, [pc, #676]	; (2624 <Clock_Ip_InitClock+0x588>)
    237e:	5c9b      	ldrb	r3, [r3, r2]
    2380:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2382:	4aa9      	ldr	r2, [pc, #676]	; (2628 <Clock_Ip_InitClock+0x58c>)
    2384:	9b02      	ldr	r3, [sp, #8]
    2386:	00db      	lsls	r3, r3, #3
    2388:	4413      	add	r3, r2
    238a:	6859      	ldr	r1, [r3, #4]
    238c:	9a03      	ldr	r2, [sp, #12]
    238e:	4613      	mov	r3, r2
    2390:	005b      	lsls	r3, r3, #1
    2392:	4413      	add	r3, r2
    2394:	009b      	lsls	r3, r3, #2
    2396:	f503 730e 	add.w	r3, r3, #568	; 0x238
    239a:	9a01      	ldr	r2, [sp, #4]
    239c:	4413      	add	r3, r2
    239e:	4618      	mov	r0, r3
    23a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23a2:	9b03      	ldr	r3, [sp, #12]
    23a4:	3301      	adds	r3, #1
    23a6:	9303      	str	r3, [sp, #12]
    23a8:	9b01      	ldr	r3, [sp, #4]
    23aa:	7b5b      	ldrb	r3, [r3, #13]
    23ac:	461a      	mov	r2, r3
    23ae:	9b03      	ldr	r3, [sp, #12]
    23b0:	4293      	cmp	r3, r2
    23b2:	d3d1      	bcc.n	2358 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    23b4:	2300      	movs	r3, #0
    23b6:	9303      	str	r3, [sp, #12]
    23b8:	e029      	b.n	240e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    23ba:	9901      	ldr	r1, [sp, #4]
    23bc:	9a03      	ldr	r2, [sp, #12]
    23be:	4613      	mov	r3, r2
    23c0:	009b      	lsls	r3, r3, #2
    23c2:	4413      	add	r3, r2
    23c4:	00db      	lsls	r3, r3, #3
    23c6:	440b      	add	r3, r1
    23c8:	3340      	adds	r3, #64	; 0x40
    23ca:	681a      	ldr	r2, [r3, #0]
    23cc:	4994      	ldr	r1, [pc, #592]	; (2620 <Clock_Ip_InitClock+0x584>)
    23ce:	4613      	mov	r3, r2
    23d0:	00db      	lsls	r3, r3, #3
    23d2:	4413      	add	r3, r2
    23d4:	440b      	add	r3, r1
    23d6:	3301      	adds	r3, #1
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	461a      	mov	r2, r3
    23dc:	4b93      	ldr	r3, [pc, #588]	; (262c <Clock_Ip_InitClock+0x590>)
    23de:	5c9b      	ldrb	r3, [r3, r2]
    23e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    23e2:	4993      	ldr	r1, [pc, #588]	; (2630 <Clock_Ip_InitClock+0x594>)
    23e4:	9a02      	ldr	r2, [sp, #8]
    23e6:	4613      	mov	r3, r2
    23e8:	009b      	lsls	r3, r3, #2
    23ea:	4413      	add	r3, r2
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	440b      	add	r3, r1
    23f0:	3304      	adds	r3, #4
    23f2:	6819      	ldr	r1, [r3, #0]
    23f4:	9a03      	ldr	r2, [sp, #12]
    23f6:	4613      	mov	r3, r2
    23f8:	009b      	lsls	r3, r3, #2
    23fa:	4413      	add	r3, r2
    23fc:	00db      	lsls	r3, r3, #3
    23fe:	3340      	adds	r3, #64	; 0x40
    2400:	9a01      	ldr	r2, [sp, #4]
    2402:	4413      	add	r3, r2
    2404:	4618      	mov	r0, r3
    2406:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2408:	9b03      	ldr	r3, [sp, #12]
    240a:	3301      	adds	r3, #1
    240c:	9303      	str	r3, [sp, #12]
    240e:	9b01      	ldr	r3, [sp, #4]
    2410:	7a9b      	ldrb	r3, [r3, #10]
    2412:	461a      	mov	r2, r3
    2414:	9b03      	ldr	r3, [sp, #12]
    2416:	4293      	cmp	r3, r2
    2418:	d3cf      	bcc.n	23ba <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    241a:	2300      	movs	r3, #0
    241c:	9303      	str	r3, [sp, #12]
    241e:	e029      	b.n	2474 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2420:	9901      	ldr	r1, [sp, #4]
    2422:	9a03      	ldr	r2, [sp, #12]
    2424:	4613      	mov	r3, r2
    2426:	009b      	lsls	r3, r3, #2
    2428:	4413      	add	r3, r2
    242a:	009b      	lsls	r3, r3, #2
    242c:	440b      	add	r3, r1
    242e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2432:	681a      	ldr	r2, [r3, #0]
    2434:	497a      	ldr	r1, [pc, #488]	; (2620 <Clock_Ip_InitClock+0x584>)
    2436:	4613      	mov	r3, r2
    2438:	00db      	lsls	r3, r3, #3
    243a:	4413      	add	r3, r2
    243c:	440b      	add	r3, r1
    243e:	3301      	adds	r3, #1
    2440:	781b      	ldrb	r3, [r3, #0]
    2442:	461a      	mov	r2, r3
    2444:	4b7b      	ldr	r3, [pc, #492]	; (2634 <Clock_Ip_InitClock+0x598>)
    2446:	5c9b      	ldrb	r3, [r3, r2]
    2448:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    244a:	4a7b      	ldr	r2, [pc, #492]	; (2638 <Clock_Ip_InitClock+0x59c>)
    244c:	9b02      	ldr	r3, [sp, #8]
    244e:	011b      	lsls	r3, r3, #4
    2450:	4413      	add	r3, r2
    2452:	3304      	adds	r3, #4
    2454:	681c      	ldr	r4, [r3, #0]
    2456:	9a03      	ldr	r2, [sp, #12]
    2458:	4613      	mov	r3, r2
    245a:	009b      	lsls	r3, r3, #2
    245c:	4413      	add	r3, r2
    245e:	009b      	lsls	r3, r3, #2
    2460:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2464:	9a01      	ldr	r2, [sp, #4]
    2466:	4413      	add	r3, r2
    2468:	9903      	ldr	r1, [sp, #12]
    246a:	4618      	mov	r0, r3
    246c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    246e:	9b03      	ldr	r3, [sp, #12]
    2470:	3301      	adds	r3, #1
    2472:	9303      	str	r3, [sp, #12]
    2474:	9b01      	ldr	r3, [sp, #4]
    2476:	7c9b      	ldrb	r3, [r3, #18]
    2478:	461a      	mov	r2, r3
    247a:	9b03      	ldr	r3, [sp, #12]
    247c:	4293      	cmp	r3, r2
    247e:	d3cf      	bcc.n	2420 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2480:	2300      	movs	r3, #0
    2482:	9303      	str	r3, [sp, #12]
    2484:	e02a      	b.n	24dc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2486:	9901      	ldr	r1, [sp, #4]
    2488:	9a03      	ldr	r2, [sp, #12]
    248a:	4613      	mov	r3, r2
    248c:	009b      	lsls	r3, r3, #2
    248e:	4413      	add	r3, r2
    2490:	009b      	lsls	r3, r3, #2
    2492:	440b      	add	r3, r1
    2494:	332c      	adds	r3, #44	; 0x2c
    2496:	681a      	ldr	r2, [r3, #0]
    2498:	4961      	ldr	r1, [pc, #388]	; (2620 <Clock_Ip_InitClock+0x584>)
    249a:	4613      	mov	r3, r2
    249c:	00db      	lsls	r3, r3, #3
    249e:	4413      	add	r3, r2
    24a0:	440b      	add	r3, r1
    24a2:	3301      	adds	r3, #1
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	461a      	mov	r2, r3
    24a8:	4b64      	ldr	r3, [pc, #400]	; (263c <Clock_Ip_InitClock+0x5a0>)
    24aa:	5c9b      	ldrb	r3, [r3, r2]
    24ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    24ae:	4964      	ldr	r1, [pc, #400]	; (2640 <Clock_Ip_InitClock+0x5a4>)
    24b0:	9a02      	ldr	r2, [sp, #8]
    24b2:	4613      	mov	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	4413      	add	r3, r2
    24b8:	009b      	lsls	r3, r3, #2
    24ba:	440b      	add	r3, r1
    24bc:	3308      	adds	r3, #8
    24be:	6819      	ldr	r1, [r3, #0]
    24c0:	9a03      	ldr	r2, [sp, #12]
    24c2:	4613      	mov	r3, r2
    24c4:	009b      	lsls	r3, r3, #2
    24c6:	4413      	add	r3, r2
    24c8:	009b      	lsls	r3, r3, #2
    24ca:	3328      	adds	r3, #40	; 0x28
    24cc:	9a01      	ldr	r2, [sp, #4]
    24ce:	4413      	add	r3, r2
    24d0:	3304      	adds	r3, #4
    24d2:	4618      	mov	r0, r3
    24d4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24d6:	9b03      	ldr	r3, [sp, #12]
    24d8:	3301      	adds	r3, #1
    24da:	9303      	str	r3, [sp, #12]
    24dc:	9b01      	ldr	r3, [sp, #4]
    24de:	7a5b      	ldrb	r3, [r3, #9]
    24e0:	461a      	mov	r2, r3
    24e2:	9b03      	ldr	r3, [sp, #12]
    24e4:	4293      	cmp	r3, r2
    24e6:	d3ce      	bcc.n	2486 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    24e8:	2300      	movs	r3, #0
    24ea:	9303      	str	r3, [sp, #12]
    24ec:	e029      	b.n	2542 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    24ee:	9901      	ldr	r1, [sp, #4]
    24f0:	9a03      	ldr	r2, [sp, #12]
    24f2:	4613      	mov	r3, r2
    24f4:	009b      	lsls	r3, r3, #2
    24f6:	4413      	add	r3, r2
    24f8:	00db      	lsls	r3, r3, #3
    24fa:	440b      	add	r3, r1
    24fc:	3340      	adds	r3, #64	; 0x40
    24fe:	681a      	ldr	r2, [r3, #0]
    2500:	4947      	ldr	r1, [pc, #284]	; (2620 <Clock_Ip_InitClock+0x584>)
    2502:	4613      	mov	r3, r2
    2504:	00db      	lsls	r3, r3, #3
    2506:	4413      	add	r3, r2
    2508:	440b      	add	r3, r1
    250a:	3301      	adds	r3, #1
    250c:	781b      	ldrb	r3, [r3, #0]
    250e:	461a      	mov	r2, r3
    2510:	4b46      	ldr	r3, [pc, #280]	; (262c <Clock_Ip_InitClock+0x590>)
    2512:	5c9b      	ldrb	r3, [r3, r2]
    2514:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2516:	4946      	ldr	r1, [pc, #280]	; (2630 <Clock_Ip_InitClock+0x594>)
    2518:	9a02      	ldr	r2, [sp, #8]
    251a:	4613      	mov	r3, r2
    251c:	009b      	lsls	r3, r3, #2
    251e:	4413      	add	r3, r2
    2520:	009b      	lsls	r3, r3, #2
    2522:	440b      	add	r3, r1
    2524:	330c      	adds	r3, #12
    2526:	6819      	ldr	r1, [r3, #0]
    2528:	9a03      	ldr	r2, [sp, #12]
    252a:	4613      	mov	r3, r2
    252c:	009b      	lsls	r3, r3, #2
    252e:	4413      	add	r3, r2
    2530:	00db      	lsls	r3, r3, #3
    2532:	3340      	adds	r3, #64	; 0x40
    2534:	9a01      	ldr	r2, [sp, #4]
    2536:	4413      	add	r3, r2
    2538:	4618      	mov	r0, r3
    253a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    253c:	9b03      	ldr	r3, [sp, #12]
    253e:	3301      	adds	r3, #1
    2540:	9303      	str	r3, [sp, #12]
    2542:	9b01      	ldr	r3, [sp, #4]
    2544:	7a9b      	ldrb	r3, [r3, #10]
    2546:	461a      	mov	r2, r3
    2548:	9b03      	ldr	r3, [sp, #12]
    254a:	4293      	cmp	r3, r2
    254c:	d3cf      	bcc.n	24ee <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    254e:	2300      	movs	r3, #0
    2550:	9303      	str	r3, [sp, #12]
    2552:	e025      	b.n	25a0 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2554:	9a01      	ldr	r2, [sp, #4]
    2556:	9b03      	ldr	r3, [sp, #12]
    2558:	3324      	adds	r3, #36	; 0x24
    255a:	011b      	lsls	r3, r3, #4
    255c:	4413      	add	r3, r2
    255e:	3304      	adds	r3, #4
    2560:	681a      	ldr	r2, [r3, #0]
    2562:	492f      	ldr	r1, [pc, #188]	; (2620 <Clock_Ip_InitClock+0x584>)
    2564:	4613      	mov	r3, r2
    2566:	00db      	lsls	r3, r3, #3
    2568:	4413      	add	r3, r2
    256a:	440b      	add	r3, r1
    256c:	3301      	adds	r3, #1
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	461a      	mov	r2, r3
    2572:	4b34      	ldr	r3, [pc, #208]	; (2644 <Clock_Ip_InitClock+0x5a8>)
    2574:	5c9b      	ldrb	r3, [r3, r2]
    2576:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2578:	4933      	ldr	r1, [pc, #204]	; (2648 <Clock_Ip_InitClock+0x5ac>)
    257a:	9a02      	ldr	r2, [sp, #8]
    257c:	4613      	mov	r3, r2
    257e:	005b      	lsls	r3, r3, #1
    2580:	4413      	add	r3, r2
    2582:	009b      	lsls	r3, r3, #2
    2584:	440b      	add	r3, r1
    2586:	3304      	adds	r3, #4
    2588:	681b      	ldr	r3, [r3, #0]
    258a:	9a03      	ldr	r2, [sp, #12]
    258c:	3224      	adds	r2, #36	; 0x24
    258e:	0112      	lsls	r2, r2, #4
    2590:	9901      	ldr	r1, [sp, #4]
    2592:	440a      	add	r2, r1
    2594:	3204      	adds	r2, #4
    2596:	4610      	mov	r0, r2
    2598:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    259a:	9b03      	ldr	r3, [sp, #12]
    259c:	3301      	adds	r3, #1
    259e:	9303      	str	r3, [sp, #12]
    25a0:	9b01      	ldr	r3, [sp, #4]
    25a2:	7b9b      	ldrb	r3, [r3, #14]
    25a4:	461a      	mov	r2, r3
    25a6:	9b03      	ldr	r3, [sp, #12]
    25a8:	4293      	cmp	r3, r2
    25aa:	d3d3      	bcc.n	2554 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    25ac:	4b27      	ldr	r3, [pc, #156]	; (264c <Clock_Ip_InitClock+0x5b0>)
    25ae:	2200      	movs	r2, #0
    25b0:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    25b2:	4b26      	ldr	r3, [pc, #152]	; (264c <Clock_Ip_InitClock+0x5b0>)
    25b4:	2200      	movs	r2, #0
    25b6:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    25b8:	4b24      	ldr	r3, [pc, #144]	; (264c <Clock_Ip_InitClock+0x5b0>)
    25ba:	2201      	movs	r2, #1
    25bc:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    25be:	4b23      	ldr	r3, [pc, #140]	; (264c <Clock_Ip_InitClock+0x5b0>)
    25c0:	2200      	movs	r2, #0
    25c2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    25c4:	f000 fa9c 	bl	2b00 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    25c8:	2300      	movs	r3, #0
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	e04c      	b.n	2668 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    25ce:	9a01      	ldr	r2, [sp, #4]
    25d0:	9b03      	ldr	r3, [sp, #12]
    25d2:	330d      	adds	r3, #13
    25d4:	00db      	lsls	r3, r3, #3
    25d6:	4413      	add	r3, r2
    25d8:	685b      	ldr	r3, [r3, #4]
    25da:	4a1d      	ldr	r2, [pc, #116]	; (2650 <Clock_Ip_InitClock+0x5b4>)
    25dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    25e0:	2b03      	cmp	r3, #3
    25e2:	d03b      	beq.n	265c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    25e4:	9b01      	ldr	r3, [sp, #4]
    25e6:	9a03      	ldr	r2, [sp, #12]
    25e8:	320d      	adds	r2, #13
    25ea:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    25ee:	490c      	ldr	r1, [pc, #48]	; (2620 <Clock_Ip_InitClock+0x584>)
    25f0:	4613      	mov	r3, r2
    25f2:	00db      	lsls	r3, r3, #3
    25f4:	4413      	add	r3, r2
    25f6:	440b      	add	r3, r1
    25f8:	3301      	adds	r3, #1
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	461a      	mov	r2, r3
    25fe:	4b15      	ldr	r3, [pc, #84]	; (2654 <Clock_Ip_InitClock+0x5b8>)
    2600:	5c9b      	ldrb	r3, [r3, r2]
    2602:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2604:	4a14      	ldr	r2, [pc, #80]	; (2658 <Clock_Ip_InitClock+0x5bc>)
    2606:	9b02      	ldr	r3, [sp, #8]
    2608:	00db      	lsls	r3, r3, #3
    260a:	4413      	add	r3, r2
    260c:	685b      	ldr	r3, [r3, #4]
    260e:	9a03      	ldr	r2, [sp, #12]
    2610:	320d      	adds	r2, #13
    2612:	00d2      	lsls	r2, r2, #3
    2614:	9901      	ldr	r1, [sp, #4]
    2616:	440a      	add	r2, r1
    2618:	4610      	mov	r0, r2
    261a:	4798      	blx	r3
    261c:	e021      	b.n	2662 <Clock_Ip_InitClock+0x5c6>
    261e:	bf00      	nop
    2620:	00010204 	.word	0x00010204
    2624:	00010174 	.word	0x00010174
    2628:	00010750 	.word	0x00010750
    262c:	000101c4 	.word	0x000101c4
    2630:	00010810 	.word	0x00010810
    2634:	000101f4 	.word	0x000101f4
    2638:	00010800 	.word	0x00010800
    263c:	00010184 	.word	0x00010184
    2640:	00010758 	.word	0x00010758
    2644:	000101b4 	.word	0x000101b4
    2648:	00010780 	.word	0x00010780
    264c:	1fff8b3c 	.word	0x1fff8b3c
    2650:	00010650 	.word	0x00010650
    2654:	000101d4 	.word	0x000101d4
    2658:	0001083c 	.word	0x0001083c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    265c:	4b3a      	ldr	r3, [pc, #232]	; (2748 <Clock_Ip_InitClock+0x6ac>)
    265e:	2201      	movs	r2, #1
    2660:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2662:	9b03      	ldr	r3, [sp, #12]
    2664:	3301      	adds	r3, #1
    2666:	9303      	str	r3, [sp, #12]
    2668:	9b01      	ldr	r3, [sp, #4]
    266a:	7adb      	ldrb	r3, [r3, #11]
    266c:	461a      	mov	r2, r3
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	4293      	cmp	r3, r2
    2672:	d3ac      	bcc.n	25ce <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2674:	4b34      	ldr	r3, [pc, #208]	; (2748 <Clock_Ip_InitClock+0x6ac>)
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	f083 0301 	eor.w	r3, r3, #1
    267c:	b2db      	uxtb	r3, r3
    267e:	2b00      	cmp	r3, #0
    2680:	d05e      	beq.n	2740 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2682:	2300      	movs	r3, #0
    2684:	9303      	str	r3, [sp, #12]
    2686:	e01f      	b.n	26c8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2688:	9a01      	ldr	r2, [sp, #4]
    268a:	9b03      	ldr	r3, [sp, #12]
    268c:	334e      	adds	r3, #78	; 0x4e
    268e:	00db      	lsls	r3, r3, #3
    2690:	4413      	add	r3, r2
    2692:	685a      	ldr	r2, [r3, #4]
    2694:	492d      	ldr	r1, [pc, #180]	; (274c <Clock_Ip_InitClock+0x6b0>)
    2696:	4613      	mov	r3, r2
    2698:	00db      	lsls	r3, r3, #3
    269a:	4413      	add	r3, r2
    269c:	440b      	add	r3, r1
    269e:	3301      	adds	r3, #1
    26a0:	781b      	ldrb	r3, [r3, #0]
    26a2:	461a      	mov	r2, r3
    26a4:	4b2a      	ldr	r3, [pc, #168]	; (2750 <Clock_Ip_InitClock+0x6b4>)
    26a6:	5c9b      	ldrb	r3, [r3, r2]
    26a8:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    26aa:	4a2a      	ldr	r2, [pc, #168]	; (2754 <Clock_Ip_InitClock+0x6b8>)
    26ac:	9b02      	ldr	r3, [sp, #8]
    26ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    26b2:	9a03      	ldr	r2, [sp, #12]
    26b4:	324e      	adds	r2, #78	; 0x4e
    26b6:	00d2      	lsls	r2, r2, #3
    26b8:	9901      	ldr	r1, [sp, #4]
    26ba:	440a      	add	r2, r1
    26bc:	3204      	adds	r2, #4
    26be:	4610      	mov	r0, r2
    26c0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26c2:	9b03      	ldr	r3, [sp, #12]
    26c4:	3301      	adds	r3, #1
    26c6:	9303      	str	r3, [sp, #12]
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	7c1b      	ldrb	r3, [r3, #16]
    26cc:	461a      	mov	r2, r3
    26ce:	9b03      	ldr	r3, [sp, #12]
    26d0:	4293      	cmp	r3, r2
    26d2:	d3d9      	bcc.n	2688 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    26d4:	2300      	movs	r3, #0
    26d6:	9303      	str	r3, [sp, #12]
    26d8:	e028      	b.n	272c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    26da:	9901      	ldr	r1, [sp, #4]
    26dc:	9a03      	ldr	r2, [sp, #12]
    26de:	4613      	mov	r3, r2
    26e0:	009b      	lsls	r3, r3, #2
    26e2:	4413      	add	r3, r2
    26e4:	009b      	lsls	r3, r3, #2
    26e6:	440b      	add	r3, r1
    26e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26ec:	681a      	ldr	r2, [r3, #0]
    26ee:	4917      	ldr	r1, [pc, #92]	; (274c <Clock_Ip_InitClock+0x6b0>)
    26f0:	4613      	mov	r3, r2
    26f2:	00db      	lsls	r3, r3, #3
    26f4:	4413      	add	r3, r2
    26f6:	440b      	add	r3, r1
    26f8:	3301      	adds	r3, #1
    26fa:	781b      	ldrb	r3, [r3, #0]
    26fc:	461a      	mov	r2, r3
    26fe:	4b16      	ldr	r3, [pc, #88]	; (2758 <Clock_Ip_InitClock+0x6bc>)
    2700:	5c9b      	ldrb	r3, [r3, r2]
    2702:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2704:	4a15      	ldr	r2, [pc, #84]	; (275c <Clock_Ip_InitClock+0x6c0>)
    2706:	9b02      	ldr	r3, [sp, #8]
    2708:	011b      	lsls	r3, r3, #4
    270a:	4413      	add	r3, r2
    270c:	330c      	adds	r3, #12
    270e:	6819      	ldr	r1, [r3, #0]
    2710:	9a03      	ldr	r2, [sp, #12]
    2712:	4613      	mov	r3, r2
    2714:	009b      	lsls	r3, r3, #2
    2716:	4413      	add	r3, r2
    2718:	009b      	lsls	r3, r3, #2
    271a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    271e:	9a01      	ldr	r2, [sp, #4]
    2720:	4413      	add	r3, r2
    2722:	4618      	mov	r0, r3
    2724:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2726:	9b03      	ldr	r3, [sp, #12]
    2728:	3301      	adds	r3, #1
    272a:	9303      	str	r3, [sp, #12]
    272c:	9b01      	ldr	r3, [sp, #4]
    272e:	7c9b      	ldrb	r3, [r3, #18]
    2730:	461a      	mov	r2, r3
    2732:	9b03      	ldr	r3, [sp, #12]
    2734:	4293      	cmp	r3, r2
    2736:	d3d0      	bcc.n	26da <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2738:	2104      	movs	r1, #4
    273a:	9801      	ldr	r0, [sp, #4]
    273c:	f002 ff48 	bl	55d0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2740:	bf00      	nop
    2742:	b004      	add	sp, #16
    2744:	bd10      	pop	{r4, pc}
    2746:	bf00      	nop
    2748:	1fff8b3c 	.word	0x1fff8b3c
    274c:	00010204 	.word	0x00010204
    2750:	000101a4 	.word	0x000101a4
    2754:	0001078c 	.word	0x0001078c
    2758:	000101f4 	.word	0x000101f4
    275c:	00010800 	.word	0x00010800

00002760 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2760:	b500      	push	{lr}
    2762:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2764:	2302      	movs	r3, #2
    2766:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2768:	2300      	movs	r3, #0
    276a:	9304      	str	r3, [sp, #16]
    276c:	e02c      	b.n	27c8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    276e:	4a36      	ldr	r2, [pc, #216]	; (2848 <Clock_Ip_GetPllStatus+0xe8>)
    2770:	9b04      	ldr	r3, [sp, #16]
    2772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2776:	4935      	ldr	r1, [pc, #212]	; (284c <Clock_Ip_GetPllStatus+0xec>)
    2778:	4613      	mov	r3, r2
    277a:	00db      	lsls	r3, r3, #3
    277c:	4413      	add	r3, r2
    277e:	440b      	add	r3, r1
    2780:	3301      	adds	r3, #1
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	461a      	mov	r2, r3
    2786:	4b32      	ldr	r3, [pc, #200]	; (2850 <Clock_Ip_GetPllStatus+0xf0>)
    2788:	5c9b      	ldrb	r3, [r3, r2]
    278a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    278c:	4931      	ldr	r1, [pc, #196]	; (2854 <Clock_Ip_GetPllStatus+0xf4>)
    278e:	9a03      	ldr	r2, [sp, #12]
    2790:	4613      	mov	r3, r2
    2792:	009b      	lsls	r3, r3, #2
    2794:	4413      	add	r3, r2
    2796:	009b      	lsls	r3, r3, #2
    2798:	440b      	add	r3, r1
    279a:	3308      	adds	r3, #8
    279c:	681b      	ldr	r3, [r3, #0]
    279e:	492a      	ldr	r1, [pc, #168]	; (2848 <Clock_Ip_GetPllStatus+0xe8>)
    27a0:	9a04      	ldr	r2, [sp, #16]
    27a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    27a6:	4610      	mov	r0, r2
    27a8:	4798      	blx	r3
    27aa:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    27ac:	9b02      	ldr	r3, [sp, #8]
    27ae:	2b01      	cmp	r3, #1
    27b0:	d102      	bne.n	27b8 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    27b2:	2301      	movs	r3, #1
    27b4:	9305      	str	r3, [sp, #20]
            break;
    27b6:	e00d      	b.n	27d4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    27b8:	9b02      	ldr	r3, [sp, #8]
    27ba:	2b02      	cmp	r3, #2
    27bc:	d101      	bne.n	27c2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    27be:	2300      	movs	r3, #0
    27c0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27c2:	9b04      	ldr	r3, [sp, #16]
    27c4:	3301      	adds	r3, #1
    27c6:	9304      	str	r3, [sp, #16]
    27c8:	4b23      	ldr	r3, [pc, #140]	; (2858 <Clock_Ip_GetPllStatus+0xf8>)
    27ca:	789b      	ldrb	r3, [r3, #2]
    27cc:	461a      	mov	r2, r3
    27ce:	9b04      	ldr	r3, [sp, #16]
    27d0:	4293      	cmp	r3, r2
    27d2:	d3cc      	bcc.n	276e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    27d4:	9b05      	ldr	r3, [sp, #20]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d130      	bne.n	283c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    27da:	2300      	movs	r3, #0
    27dc:	9304      	str	r3, [sp, #16]
    27de:	e027      	b.n	2830 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    27e0:	4a1e      	ldr	r2, [pc, #120]	; (285c <Clock_Ip_GetPllStatus+0xfc>)
    27e2:	9b04      	ldr	r3, [sp, #16]
    27e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27e8:	4918      	ldr	r1, [pc, #96]	; (284c <Clock_Ip_GetPllStatus+0xec>)
    27ea:	4613      	mov	r3, r2
    27ec:	00db      	lsls	r3, r3, #3
    27ee:	4413      	add	r3, r2
    27f0:	440b      	add	r3, r1
    27f2:	3301      	adds	r3, #1
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	461a      	mov	r2, r3
    27f8:	4b19      	ldr	r3, [pc, #100]	; (2860 <Clock_Ip_GetPllStatus+0x100>)
    27fa:	5c9b      	ldrb	r3, [r3, r2]
    27fc:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    27fe:	4919      	ldr	r1, [pc, #100]	; (2864 <Clock_Ip_GetPllStatus+0x104>)
    2800:	9a03      	ldr	r2, [sp, #12]
    2802:	4613      	mov	r3, r2
    2804:	005b      	lsls	r3, r3, #1
    2806:	4413      	add	r3, r2
    2808:	009b      	lsls	r3, r3, #2
    280a:	440b      	add	r3, r1
    280c:	3308      	adds	r3, #8
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	4912      	ldr	r1, [pc, #72]	; (285c <Clock_Ip_GetPllStatus+0xfc>)
    2812:	9a04      	ldr	r2, [sp, #16]
    2814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2818:	4610      	mov	r0, r2
    281a:	4798      	blx	r3
    281c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    281e:	9b01      	ldr	r3, [sp, #4]
    2820:	2b01      	cmp	r3, #1
    2822:	d102      	bne.n	282a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2824:	2301      	movs	r3, #1
    2826:	9305      	str	r3, [sp, #20]
                break;
    2828:	e008      	b.n	283c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    282a:	9b04      	ldr	r3, [sp, #16]
    282c:	3301      	adds	r3, #1
    282e:	9304      	str	r3, [sp, #16]
    2830:	4b09      	ldr	r3, [pc, #36]	; (2858 <Clock_Ip_GetPllStatus+0xf8>)
    2832:	78db      	ldrb	r3, [r3, #3]
    2834:	461a      	mov	r2, r3
    2836:	9b04      	ldr	r3, [sp, #16]
    2838:	4293      	cmp	r3, r2
    283a:	d3d1      	bcc.n	27e0 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    283c:	9b05      	ldr	r3, [sp, #20]
}
    283e:	4618      	mov	r0, r3
    2840:	b007      	add	sp, #28
    2842:	f85d fb04 	ldr.w	pc, [sp], #4
    2846:	bf00      	nop
    2848:	0001070c 	.word	0x0001070c
    284c:	00010204 	.word	0x00010204
    2850:	000101c4 	.word	0x000101c4
    2854:	00010810 	.word	0x00010810
    2858:	1fff8b3c 	.word	0x1fff8b3c
    285c:	00010710 	.word	0x00010710
    2860:	000101b4 	.word	0x000101b4
    2864:	00010780 	.word	0x00010780

00002868 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2868:	b500      	push	{lr}
    286a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    286c:	4b55      	ldr	r3, [pc, #340]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    286e:	681b      	ldr	r3, [r3, #0]
    2870:	2b00      	cmp	r3, #0
    2872:	f000 80a2 	beq.w	29ba <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2876:	2300      	movs	r3, #0
    2878:	9301      	str	r3, [sp, #4]
    287a:	e02c      	b.n	28d6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    287c:	4b51      	ldr	r3, [pc, #324]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    287e:	681a      	ldr	r2, [r3, #0]
    2880:	9b01      	ldr	r3, [sp, #4]
    2882:	330d      	adds	r3, #13
    2884:	00db      	lsls	r3, r3, #3
    2886:	4413      	add	r3, r2
    2888:	685b      	ldr	r3, [r3, #4]
    288a:	4a4f      	ldr	r2, [pc, #316]	; (29c8 <Clock_Ip_DistributePll+0x160>)
    288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2890:	2b03      	cmp	r3, #3
    2892:	d11d      	bne.n	28d0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2894:	4b4b      	ldr	r3, [pc, #300]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    2896:	681b      	ldr	r3, [r3, #0]
    2898:	9a01      	ldr	r2, [sp, #4]
    289a:	320d      	adds	r2, #13
    289c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    28a0:	494a      	ldr	r1, [pc, #296]	; (29cc <Clock_Ip_DistributePll+0x164>)
    28a2:	4613      	mov	r3, r2
    28a4:	00db      	lsls	r3, r3, #3
    28a6:	4413      	add	r3, r2
    28a8:	440b      	add	r3, r1
    28aa:	3301      	adds	r3, #1
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	461a      	mov	r2, r3
    28b0:	4b47      	ldr	r3, [pc, #284]	; (29d0 <Clock_Ip_DistributePll+0x168>)
    28b2:	5c9b      	ldrb	r3, [r3, r2]
    28b4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    28b6:	4a47      	ldr	r2, [pc, #284]	; (29d4 <Clock_Ip_DistributePll+0x16c>)
    28b8:	9b00      	ldr	r3, [sp, #0]
    28ba:	00db      	lsls	r3, r3, #3
    28bc:	4413      	add	r3, r2
    28be:	685b      	ldr	r3, [r3, #4]
    28c0:	4a40      	ldr	r2, [pc, #256]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    28c2:	6811      	ldr	r1, [r2, #0]
    28c4:	9a01      	ldr	r2, [sp, #4]
    28c6:	320d      	adds	r2, #13
    28c8:	00d2      	lsls	r2, r2, #3
    28ca:	440a      	add	r2, r1
    28cc:	4610      	mov	r0, r2
    28ce:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	3301      	adds	r3, #1
    28d4:	9301      	str	r3, [sp, #4]
    28d6:	4b3b      	ldr	r3, [pc, #236]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	7adb      	ldrb	r3, [r3, #11]
    28dc:	461a      	mov	r2, r3
    28de:	9b01      	ldr	r3, [sp, #4]
    28e0:	4293      	cmp	r3, r2
    28e2:	d3cb      	bcc.n	287c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    28e4:	4b3c      	ldr	r3, [pc, #240]	; (29d8 <Clock_Ip_DistributePll+0x170>)
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d066      	beq.n	29ba <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    28ec:	2300      	movs	r3, #0
    28ee:	9301      	str	r3, [sp, #4]
    28f0:	e021      	b.n	2936 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    28f2:	4b34      	ldr	r3, [pc, #208]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    28f4:	681a      	ldr	r2, [r3, #0]
    28f6:	9b01      	ldr	r3, [sp, #4]
    28f8:	334e      	adds	r3, #78	; 0x4e
    28fa:	00db      	lsls	r3, r3, #3
    28fc:	4413      	add	r3, r2
    28fe:	685a      	ldr	r2, [r3, #4]
    2900:	4932      	ldr	r1, [pc, #200]	; (29cc <Clock_Ip_DistributePll+0x164>)
    2902:	4613      	mov	r3, r2
    2904:	00db      	lsls	r3, r3, #3
    2906:	4413      	add	r3, r2
    2908:	440b      	add	r3, r1
    290a:	3301      	adds	r3, #1
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	461a      	mov	r2, r3
    2910:	4b32      	ldr	r3, [pc, #200]	; (29dc <Clock_Ip_DistributePll+0x174>)
    2912:	5c9b      	ldrb	r3, [r3, r2]
    2914:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2916:	4a32      	ldr	r2, [pc, #200]	; (29e0 <Clock_Ip_DistributePll+0x178>)
    2918:	9b00      	ldr	r3, [sp, #0]
    291a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    291e:	4a29      	ldr	r2, [pc, #164]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    2920:	6811      	ldr	r1, [r2, #0]
    2922:	9a01      	ldr	r2, [sp, #4]
    2924:	324e      	adds	r2, #78	; 0x4e
    2926:	00d2      	lsls	r2, r2, #3
    2928:	440a      	add	r2, r1
    292a:	3204      	adds	r2, #4
    292c:	4610      	mov	r0, r2
    292e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2930:	9b01      	ldr	r3, [sp, #4]
    2932:	3301      	adds	r3, #1
    2934:	9301      	str	r3, [sp, #4]
    2936:	4b23      	ldr	r3, [pc, #140]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    2938:	681b      	ldr	r3, [r3, #0]
    293a:	7c1b      	ldrb	r3, [r3, #16]
    293c:	461a      	mov	r2, r3
    293e:	9b01      	ldr	r3, [sp, #4]
    2940:	4293      	cmp	r3, r2
    2942:	d3d6      	bcc.n	28f2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2944:	2300      	movs	r3, #0
    2946:	9301      	str	r3, [sp, #4]
    2948:	e02a      	b.n	29a0 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    294a:	4b1e      	ldr	r3, [pc, #120]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    294c:	6819      	ldr	r1, [r3, #0]
    294e:	9a01      	ldr	r2, [sp, #4]
    2950:	4613      	mov	r3, r2
    2952:	009b      	lsls	r3, r3, #2
    2954:	4413      	add	r3, r2
    2956:	009b      	lsls	r3, r3, #2
    2958:	440b      	add	r3, r1
    295a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    295e:	681a      	ldr	r2, [r3, #0]
    2960:	491a      	ldr	r1, [pc, #104]	; (29cc <Clock_Ip_DistributePll+0x164>)
    2962:	4613      	mov	r3, r2
    2964:	00db      	lsls	r3, r3, #3
    2966:	4413      	add	r3, r2
    2968:	440b      	add	r3, r1
    296a:	3301      	adds	r3, #1
    296c:	781b      	ldrb	r3, [r3, #0]
    296e:	461a      	mov	r2, r3
    2970:	4b1c      	ldr	r3, [pc, #112]	; (29e4 <Clock_Ip_DistributePll+0x17c>)
    2972:	5c9b      	ldrb	r3, [r3, r2]
    2974:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2976:	4a1c      	ldr	r2, [pc, #112]	; (29e8 <Clock_Ip_DistributePll+0x180>)
    2978:	9b00      	ldr	r3, [sp, #0]
    297a:	011b      	lsls	r3, r3, #4
    297c:	4413      	add	r3, r2
    297e:	330c      	adds	r3, #12
    2980:	6819      	ldr	r1, [r3, #0]
    2982:	4b10      	ldr	r3, [pc, #64]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    2984:	6818      	ldr	r0, [r3, #0]
    2986:	9a01      	ldr	r2, [sp, #4]
    2988:	4613      	mov	r3, r2
    298a:	009b      	lsls	r3, r3, #2
    298c:	4413      	add	r3, r2
    298e:	009b      	lsls	r3, r3, #2
    2990:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2994:	4403      	add	r3, r0
    2996:	4618      	mov	r0, r3
    2998:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    299a:	9b01      	ldr	r3, [sp, #4]
    299c:	3301      	adds	r3, #1
    299e:	9301      	str	r3, [sp, #4]
    29a0:	4b08      	ldr	r3, [pc, #32]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	7c9b      	ldrb	r3, [r3, #18]
    29a6:	461a      	mov	r2, r3
    29a8:	9b01      	ldr	r3, [sp, #4]
    29aa:	4293      	cmp	r3, r2
    29ac:	d3cd      	bcc.n	294a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    29ae:	4b05      	ldr	r3, [pc, #20]	; (29c4 <Clock_Ip_DistributePll+0x15c>)
    29b0:	681b      	ldr	r3, [r3, #0]
    29b2:	2104      	movs	r1, #4
    29b4:	4618      	mov	r0, r3
    29b6:	f002 fe0b 	bl	55d0 <Clock_Ip_Command>
        }
    }
}
    29ba:	bf00      	nop
    29bc:	b003      	add	sp, #12
    29be:	f85d fb04 	ldr.w	pc, [sp], #4
    29c2:	bf00      	nop
    29c4:	1fff8b34 	.word	0x1fff8b34
    29c8:	00010650 	.word	0x00010650
    29cc:	00010204 	.word	0x00010204
    29d0:	000101d4 	.word	0x000101d4
    29d4:	0001083c 	.word	0x0001083c
    29d8:	1fff8b3c 	.word	0x1fff8b3c
    29dc:	000101a4 	.word	0x000101a4
    29e0:	0001078c 	.word	0x0001078c
    29e4:	000101f4 	.word	0x000101f4
    29e8:	00010800 	.word	0x00010800

000029ec <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    29ec:	b500      	push	{lr}
    29ee:	b085      	sub	sp, #20
    29f0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29f2:	490c      	ldr	r1, [pc, #48]	; (2a24 <Clock_Ip_DisableClockMonitor+0x38>)
    29f4:	9a01      	ldr	r2, [sp, #4]
    29f6:	4613      	mov	r3, r2
    29f8:	00db      	lsls	r3, r3, #3
    29fa:	4413      	add	r3, r2
    29fc:	440b      	add	r3, r1
    29fe:	3301      	adds	r3, #1
    2a00:	781b      	ldrb	r3, [r3, #0]
    2a02:	461a      	mov	r2, r3
    2a04:	4b08      	ldr	r3, [pc, #32]	; (2a28 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a06:	5c9b      	ldrb	r3, [r3, r2]
    2a08:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a0a:	4a08      	ldr	r2, [pc, #32]	; (2a2c <Clock_Ip_DisableClockMonitor+0x40>)
    2a0c:	9b03      	ldr	r3, [sp, #12]
    2a0e:	011b      	lsls	r3, r3, #4
    2a10:	4413      	add	r3, r2
    2a12:	3308      	adds	r3, #8
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	9801      	ldr	r0, [sp, #4]
    2a18:	4798      	blx	r3
}
    2a1a:	bf00      	nop
    2a1c:	b005      	add	sp, #20
    2a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a22:	bf00      	nop
    2a24:	00010204 	.word	0x00010204
    2a28:	000101f4 	.word	0x000101f4
    2a2c:	00010800 	.word	0x00010800

00002a30 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2a30:	b082      	sub	sp, #8
    2a32:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2a34:	4a02      	ldr	r2, [pc, #8]	; (2a40 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2a36:	9b01      	ldr	r3, [sp, #4]
    2a38:	6013      	str	r3, [r2, #0]
}
    2a3a:	bf00      	nop
    2a3c:	b002      	add	sp, #8
    2a3e:	4770      	bx	lr
    2a40:	1fff8b14 	.word	0x1fff8b14

00002a44 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2a44:	b500      	push	{lr}
    2a46:	b085      	sub	sp, #20
    2a48:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a4a:	490c      	ldr	r1, [pc, #48]	; (2a7c <Clock_Ip_DisableModuleClock+0x38>)
    2a4c:	9a01      	ldr	r2, [sp, #4]
    2a4e:	4613      	mov	r3, r2
    2a50:	00db      	lsls	r3, r3, #3
    2a52:	4413      	add	r3, r2
    2a54:	440b      	add	r3, r1
    2a56:	3301      	adds	r3, #1
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	461a      	mov	r2, r3
    2a5c:	4b08      	ldr	r3, [pc, #32]	; (2a80 <Clock_Ip_DisableModuleClock+0x3c>)
    2a5e:	5c9b      	ldrb	r3, [r3, r2]
    2a60:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2a62:	4a08      	ldr	r2, [pc, #32]	; (2a84 <Clock_Ip_DisableModuleClock+0x40>)
    2a64:	9b03      	ldr	r3, [sp, #12]
    2a66:	00db      	lsls	r3, r3, #3
    2a68:	4413      	add	r3, r2
    2a6a:	685b      	ldr	r3, [r3, #4]
    2a6c:	2101      	movs	r1, #1
    2a6e:	9801      	ldr	r0, [sp, #4]
    2a70:	4798      	blx	r3
}
    2a72:	bf00      	nop
    2a74:	b005      	add	sp, #20
    2a76:	f85d fb04 	ldr.w	pc, [sp], #4
    2a7a:	bf00      	nop
    2a7c:	00010204 	.word	0x00010204
    2a80:	000101a4 	.word	0x000101a4
    2a84:	0001078c 	.word	0x0001078c

00002a88 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2a88:	b500      	push	{lr}
    2a8a:	b085      	sub	sp, #20
    2a8c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a8e:	490c      	ldr	r1, [pc, #48]	; (2ac0 <Clock_Ip_EnableModuleClock+0x38>)
    2a90:	9a01      	ldr	r2, [sp, #4]
    2a92:	4613      	mov	r3, r2
    2a94:	00db      	lsls	r3, r3, #3
    2a96:	4413      	add	r3, r2
    2a98:	440b      	add	r3, r1
    2a9a:	3301      	adds	r3, #1
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	461a      	mov	r2, r3
    2aa0:	4b08      	ldr	r3, [pc, #32]	; (2ac4 <Clock_Ip_EnableModuleClock+0x3c>)
    2aa2:	5c9b      	ldrb	r3, [r3, r2]
    2aa4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2aa6:	4a08      	ldr	r2, [pc, #32]	; (2ac8 <Clock_Ip_EnableModuleClock+0x40>)
    2aa8:	9b03      	ldr	r3, [sp, #12]
    2aaa:	00db      	lsls	r3, r3, #3
    2aac:	4413      	add	r3, r2
    2aae:	685b      	ldr	r3, [r3, #4]
    2ab0:	2100      	movs	r1, #0
    2ab2:	9801      	ldr	r0, [sp, #4]
    2ab4:	4798      	blx	r3
}
    2ab6:	bf00      	nop
    2ab8:	b005      	add	sp, #20
    2aba:	f85d fb04 	ldr.w	pc, [sp], #4
    2abe:	bf00      	nop
    2ac0:	00010204 	.word	0x00010204
    2ac4:	000101a4 	.word	0x000101a4
    2ac8:	0001078c 	.word	0x0001078c

00002acc <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2acc:	b500      	push	{lr}
    2ace:	b083      	sub	sp, #12
    2ad0:	9001      	str	r0, [sp, #4]
    2ad2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2ad6:	2200      	movs	r2, #0
    2ad8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2ada:	4b08      	ldr	r3, [pc, #32]	; (2afc <Clock_Ip_PowerModeChangeNotification+0x30>)
    2adc:	681b      	ldr	r3, [r3, #0]
    2ade:	2102      	movs	r1, #2
    2ae0:	4618      	mov	r0, r3
    2ae2:	f002 fd75 	bl	55d0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2ae6:	9900      	ldr	r1, [sp, #0]
    2ae8:	9801      	ldr	r0, [sp, #4]
    2aea:	f002 fc51 	bl	5390 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2aee:	bf00      	nop
    2af0:	b003      	add	sp, #12
    2af2:	f85d fb04 	ldr.w	pc, [sp], #4
    2af6:	bf00      	nop
    2af8:	1fff8b10 	.word	0x1fff8b10
    2afc:	1fff8b34 	.word	0x1fff8b34

00002b00 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b00:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b02:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b06:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b08:	4b06      	ldr	r3, [pc, #24]	; (2b24 <Clock_Ip_SetWaitStates+0x24>)
    2b0a:	785b      	ldrb	r3, [r3, #1]
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d005      	beq.n	2b1c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2b10:	9b01      	ldr	r3, [sp, #4]
    2b12:	3b01      	subs	r3, #1
    2b14:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b16:	9b01      	ldr	r3, [sp, #4]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d1f9      	bne.n	2b10 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2b1c:	bf00      	nop
    2b1e:	b002      	add	sp, #8
    2b20:	4770      	bx	lr
    2b22:	bf00      	nop
    2b24:	1fff8b3c 	.word	0x1fff8b3c

00002b28 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b28:	b500      	push	{lr}
    2b2a:	b083      	sub	sp, #12
    2b2c:	9001      	str	r0, [sp, #4]
    2b2e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2b30:	4b04      	ldr	r3, [pc, #16]	; (2b44 <Clock_Ip_ReportClockErrors+0x1c>)
    2b32:	681b      	ldr	r3, [r3, #0]
    2b34:	9900      	ldr	r1, [sp, #0]
    2b36:	9801      	ldr	r0, [sp, #4]
    2b38:	4798      	blx	r3
}
    2b3a:	bf00      	nop
    2b3c:	b003      	add	sp, #12
    2b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b42:	bf00      	nop
    2b44:	1fff8b14 	.word	0x1fff8b14

00002b48 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2b48:	b500      	push	{lr}
    2b4a:	b085      	sub	sp, #20
    2b4c:	9003      	str	r0, [sp, #12]
    2b4e:	9102      	str	r1, [sp, #8]
    2b50:	9201      	str	r2, [sp, #4]
    2b52:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2b54:	2000      	movs	r0, #0
    2b56:	f7fe ffd1 	bl	1afc <OsIf_GetCounter>
    2b5a:	4602      	mov	r2, r0
    2b5c:	9b03      	ldr	r3, [sp, #12]
    2b5e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2b60:	9b02      	ldr	r3, [sp, #8]
    2b62:	2200      	movs	r2, #0
    2b64:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2b66:	2100      	movs	r1, #0
    2b68:	9800      	ldr	r0, [sp, #0]
    2b6a:	f7ff f813 	bl	1b94 <OsIf_MicrosToTicks>
    2b6e:	4602      	mov	r2, r0
    2b70:	9b01      	ldr	r3, [sp, #4]
    2b72:	601a      	str	r2, [r3, #0]
}
    2b74:	bf00      	nop
    2b76:	b005      	add	sp, #20
    2b78:	f85d fb04 	ldr.w	pc, [sp], #4

00002b7c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2b7c:	b500      	push	{lr}
    2b7e:	b087      	sub	sp, #28
    2b80:	9003      	str	r0, [sp, #12]
    2b82:	9102      	str	r1, [sp, #8]
    2b84:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2b86:	2300      	movs	r3, #0
    2b88:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2b8c:	2100      	movs	r1, #0
    2b8e:	9803      	ldr	r0, [sp, #12]
    2b90:	f7fe ffcd 	bl	1b2e <OsIf_GetElapsed>
    2b94:	4602      	mov	r2, r0
    2b96:	9b02      	ldr	r3, [sp, #8]
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	441a      	add	r2, r3
    2b9c:	9b02      	ldr	r3, [sp, #8]
    2b9e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2ba0:	9b02      	ldr	r3, [sp, #8]
    2ba2:	681b      	ldr	r3, [r3, #0]
    2ba4:	9a01      	ldr	r2, [sp, #4]
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d802      	bhi.n	2bb0 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2baa:	2301      	movs	r3, #1
    2bac:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2bb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2bb4:	4618      	mov	r0, r3
    2bb6:	b007      	add	sp, #28
    2bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bbc <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2bbc:	b082      	sub	sp, #8
    2bbe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2bc0:	bf00      	nop
    2bc2:	b002      	add	sp, #8
    2bc4:	4770      	bx	lr

00002bc6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2bc6:	b500      	push	{lr}
    2bc8:	b083      	sub	sp, #12
    2bca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bcc:	9b01      	ldr	r3, [sp, #4]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d002      	beq.n	2bd8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2bd2:	9801      	ldr	r0, [sp, #4]
    2bd4:	f000 f8ad 	bl	2d32 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bd8:	bf00      	nop
    2bda:	b003      	add	sp, #12
    2bdc:	f85d fb04 	ldr.w	pc, [sp], #4

00002be0 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2be0:	b500      	push	{lr}
    2be2:	b083      	sub	sp, #12
    2be4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2be6:	9b01      	ldr	r3, [sp, #4]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d002      	beq.n	2bf2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2bec:	9801      	ldr	r0, [sp, #4]
    2bee:	f000 f8cd 	bl	2d8c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bf2:	bf00      	nop
    2bf4:	b003      	add	sp, #12
    2bf6:	f85d fb04 	ldr.w	pc, [sp], #4

00002bfa <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2bfa:	b500      	push	{lr}
    2bfc:	b083      	sub	sp, #12
    2bfe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c00:	9b01      	ldr	r3, [sp, #4]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d002      	beq.n	2c0c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c06:	9801      	ldr	r0, [sp, #4]
    2c08:	f000 f8ee 	bl	2de8 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c0c:	bf00      	nop
    2c0e:	b003      	add	sp, #12
    2c10:	f85d fb04 	ldr.w	pc, [sp], #4

00002c14 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c14:	b500      	push	{lr}
    2c16:	b083      	sub	sp, #12
    2c18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c1a:	9b01      	ldr	r3, [sp, #4]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d002      	beq.n	2c26 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2c20:	9801      	ldr	r0, [sp, #4]
    2c22:	f000 f8f9 	bl	2e18 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c26:	bf00      	nop
    2c28:	b003      	add	sp, #12
    2c2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c2e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c2e:	b500      	push	{lr}
    2c30:	b083      	sub	sp, #12
    2c32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c34:	9b01      	ldr	r3, [sp, #4]
    2c36:	2b00      	cmp	r3, #0
    2c38:	d002      	beq.n	2c40 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2c3a:	9801      	ldr	r0, [sp, #4]
    2c3c:	f000 f904 	bl	2e48 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c40:	bf00      	nop
    2c42:	b003      	add	sp, #12
    2c44:	f85d fb04 	ldr.w	pc, [sp], #4

00002c48 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c48:	b500      	push	{lr}
    2c4a:	b083      	sub	sp, #12
    2c4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d002      	beq.n	2c5a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2c54:	9801      	ldr	r0, [sp, #4]
    2c56:	f000 f90f 	bl	2e78 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c5a:	bf00      	nop
    2c5c:	b003      	add	sp, #12
    2c5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c62 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c62:	b500      	push	{lr}
    2c64:	b083      	sub	sp, #12
    2c66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c68:	9b01      	ldr	r3, [sp, #4]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d002      	beq.n	2c74 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2c6e:	9801      	ldr	r0, [sp, #4]
    2c70:	f000 f91a 	bl	2ea8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c74:	bf00      	nop
    2c76:	b003      	add	sp, #12
    2c78:	f85d fb04 	ldr.w	pc, [sp], #4

00002c7c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c7c:	b500      	push	{lr}
    2c7e:	b083      	sub	sp, #12
    2c80:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c82:	9b01      	ldr	r3, [sp, #4]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d002      	beq.n	2c8e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2c88:	9801      	ldr	r0, [sp, #4]
    2c8a:	f000 f925 	bl	2ed8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c8e:	bf00      	nop
    2c90:	b003      	add	sp, #12
    2c92:	f85d fb04 	ldr.w	pc, [sp], #4

00002c96 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c96:	b500      	push	{lr}
    2c98:	b083      	sub	sp, #12
    2c9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c9c:	9b01      	ldr	r3, [sp, #4]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d002      	beq.n	2ca8 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2ca2:	9801      	ldr	r0, [sp, #4]
    2ca4:	f000 f930 	bl	2f08 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ca8:	bf00      	nop
    2caa:	b003      	add	sp, #12
    2cac:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb0 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cb0:	b500      	push	{lr}
    2cb2:	b083      	sub	sp, #12
    2cb4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cb6:	9b01      	ldr	r3, [sp, #4]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d002      	beq.n	2cc2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2cbc:	9801      	ldr	r0, [sp, #4]
    2cbe:	f000 f93b 	bl	2f38 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cc2:	bf00      	nop
    2cc4:	b003      	add	sp, #12
    2cc6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cca <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cca:	b500      	push	{lr}
    2ccc:	b083      	sub	sp, #12
    2cce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd0:	9b01      	ldr	r3, [sp, #4]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d002      	beq.n	2cdc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2cd6:	9801      	ldr	r0, [sp, #4]
    2cd8:	f000 f946 	bl	2f68 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cdc:	bf00      	nop
    2cde:	b003      	add	sp, #12
    2ce0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ce4 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2ce4:	b500      	push	{lr}
    2ce6:	b083      	sub	sp, #12
    2ce8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d002      	beq.n	2cf6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2cf0:	9801      	ldr	r0, [sp, #4]
    2cf2:	f000 f951 	bl	2f98 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cf6:	bf00      	nop
    2cf8:	b003      	add	sp, #12
    2cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00002cfe <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2cfe:	b500      	push	{lr}
    2d00:	b083      	sub	sp, #12
    2d02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d002      	beq.n	2d10 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d0a:	9801      	ldr	r0, [sp, #4]
    2d0c:	f000 f95e 	bl	2fcc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d10:	bf00      	nop
    2d12:	b003      	add	sp, #12
    2d14:	f85d fb04 	ldr.w	pc, [sp], #4

00002d18 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2d18:	b500      	push	{lr}
    2d1a:	b083      	sub	sp, #12
    2d1c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d1e:	9b01      	ldr	r3, [sp, #4]
    2d20:	2b00      	cmp	r3, #0
    2d22:	d002      	beq.n	2d2a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d24:	9801      	ldr	r0, [sp, #4]
    2d26:	f000 f98b 	bl	3040 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d2a:	bf00      	nop
    2d2c:	b003      	add	sp, #12
    2d2e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d32 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d32:	b086      	sub	sp, #24
    2d34:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d36:	9b01      	ldr	r3, [sp, #4]
    2d38:	681a      	ldr	r2, [r3, #0]
    2d3a:	4911      	ldr	r1, [pc, #68]	; (2d80 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2d3c:	4613      	mov	r3, r2
    2d3e:	00db      	lsls	r3, r3, #3
    2d40:	4413      	add	r3, r2
    2d42:	440b      	add	r3, r1
    2d44:	781b      	ldrb	r3, [r3, #0]
    2d46:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	685b      	ldr	r3, [r3, #4]
    2d4c:	4a0d      	ldr	r2, [pc, #52]	; (2d84 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2d4e:	5cd3      	ldrb	r3, [r2, r3]
    2d50:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d52:	4a0d      	ldr	r2, [pc, #52]	; (2d88 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d54:	9b05      	ldr	r3, [sp, #20]
    2d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2d5e:	9b03      	ldr	r3, [sp, #12]
    2d60:	f023 0307 	bic.w	r3, r3, #7
    2d64:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2d66:	9a03      	ldr	r2, [sp, #12]
    2d68:	9b04      	ldr	r3, [sp, #16]
    2d6a:	4313      	orrs	r3, r2
    2d6c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2d6e:	4a06      	ldr	r2, [pc, #24]	; (2d88 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d70:	9b05      	ldr	r3, [sp, #20]
    2d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d76:	9a03      	ldr	r2, [sp, #12]
    2d78:	601a      	str	r2, [r3, #0]
}
    2d7a:	bf00      	nop
    2d7c:	b006      	add	sp, #24
    2d7e:	4770      	bx	lr
    2d80:	00010204 	.word	0x00010204
    2d84:	000105fc 	.word	0x000105fc
    2d88:	00010640 	.word	0x00010640

00002d8c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d8c:	b086      	sub	sp, #24
    2d8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d90:	9b01      	ldr	r3, [sp, #4]
    2d92:	681a      	ldr	r2, [r3, #0]
    2d94:	4911      	ldr	r1, [pc, #68]	; (2ddc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2d96:	4613      	mov	r3, r2
    2d98:	00db      	lsls	r3, r3, #3
    2d9a:	4413      	add	r3, r2
    2d9c:	440b      	add	r3, r1
    2d9e:	781b      	ldrb	r3, [r3, #0]
    2da0:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2da2:	9b01      	ldr	r3, [sp, #4]
    2da4:	685b      	ldr	r3, [r3, #4]
    2da6:	4a0e      	ldr	r2, [pc, #56]	; (2de0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2da8:	5cd3      	ldrb	r3, [r2, r3]
    2daa:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2dac:	4a0d      	ldr	r2, [pc, #52]	; (2de4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2dae:	9b05      	ldr	r3, [sp, #20]
    2db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2db4:	681b      	ldr	r3, [r3, #0]
    2db6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2db8:	9b03      	ldr	r3, [sp, #12]
    2dba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2dbe:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2dc0:	9b04      	ldr	r3, [sp, #16]
    2dc2:	021b      	lsls	r3, r3, #8
    2dc4:	9a03      	ldr	r2, [sp, #12]
    2dc6:	4313      	orrs	r3, r2
    2dc8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2dca:	4a06      	ldr	r2, [pc, #24]	; (2de4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2dcc:	9b05      	ldr	r3, [sp, #20]
    2dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dd2:	9a03      	ldr	r2, [sp, #12]
    2dd4:	601a      	str	r2, [r3, #0]
}
    2dd6:	bf00      	nop
    2dd8:	b006      	add	sp, #24
    2dda:	4770      	bx	lr
    2ddc:	00010204 	.word	0x00010204
    2de0:	000105fc 	.word	0x000105fc
    2de4:	00010640 	.word	0x00010640

00002de8 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2de8:	b084      	sub	sp, #16
    2dea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2dec:	4b09      	ldr	r3, [pc, #36]	; (2e14 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2dee:	695b      	ldr	r3, [r3, #20]
    2df0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2df2:	9b03      	ldr	r3, [sp, #12]
    2df4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2df8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2dfa:	9b01      	ldr	r3, [sp, #4]
    2dfc:	685b      	ldr	r3, [r3, #4]
    2dfe:	3b01      	subs	r3, #1
    2e00:	041b      	lsls	r3, r3, #16
    2e02:	9a03      	ldr	r2, [sp, #12]
    2e04:	4313      	orrs	r3, r2
    2e06:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e08:	4a02      	ldr	r2, [pc, #8]	; (2e14 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e0a:	9b03      	ldr	r3, [sp, #12]
    2e0c:	6153      	str	r3, [r2, #20]
}
    2e0e:	bf00      	nop
    2e10:	b004      	add	sp, #16
    2e12:	4770      	bx	lr
    2e14:	40064000 	.word	0x40064000

00002e18 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e18:	b084      	sub	sp, #16
    2e1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e1c:	4b09      	ldr	r3, [pc, #36]	; (2e44 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e1e:	695b      	ldr	r3, [r3, #20]
    2e20:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2e22:	9b03      	ldr	r3, [sp, #12]
    2e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e28:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e2a:	9b01      	ldr	r3, [sp, #4]
    2e2c:	685b      	ldr	r3, [r3, #4]
    2e2e:	3b01      	subs	r3, #1
    2e30:	011b      	lsls	r3, r3, #4
    2e32:	9a03      	ldr	r2, [sp, #12]
    2e34:	4313      	orrs	r3, r2
    2e36:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e38:	4a02      	ldr	r2, [pc, #8]	; (2e44 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e3a:	9b03      	ldr	r3, [sp, #12]
    2e3c:	6153      	str	r3, [r2, #20]
}
    2e3e:	bf00      	nop
    2e40:	b004      	add	sp, #16
    2e42:	4770      	bx	lr
    2e44:	40064000 	.word	0x40064000

00002e48 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e48:	b084      	sub	sp, #16
    2e4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e4c:	4b09      	ldr	r3, [pc, #36]	; (2e74 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e4e:	695b      	ldr	r3, [r3, #20]
    2e50:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2e52:	9b03      	ldr	r3, [sp, #12]
    2e54:	f023 030f 	bic.w	r3, r3, #15
    2e58:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	685b      	ldr	r3, [r3, #4]
    2e5e:	3b01      	subs	r3, #1
    2e60:	9a03      	ldr	r2, [sp, #12]
    2e62:	4313      	orrs	r3, r2
    2e64:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e66:	4a03      	ldr	r2, [pc, #12]	; (2e74 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e68:	9b03      	ldr	r3, [sp, #12]
    2e6a:	6153      	str	r3, [r2, #20]
}
    2e6c:	bf00      	nop
    2e6e:	b004      	add	sp, #16
    2e70:	4770      	bx	lr
    2e72:	bf00      	nop
    2e74:	40064000 	.word	0x40064000

00002e78 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e78:	b084      	sub	sp, #16
    2e7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e7c:	4b09      	ldr	r3, [pc, #36]	; (2ea4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e7e:	699b      	ldr	r3, [r3, #24]
    2e80:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2e82:	9b03      	ldr	r3, [sp, #12]
    2e84:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e88:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2e8a:	9b01      	ldr	r3, [sp, #4]
    2e8c:	685b      	ldr	r3, [r3, #4]
    2e8e:	3b01      	subs	r3, #1
    2e90:	041b      	lsls	r3, r3, #16
    2e92:	9a03      	ldr	r2, [sp, #12]
    2e94:	4313      	orrs	r3, r2
    2e96:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e98:	4a02      	ldr	r2, [pc, #8]	; (2ea4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e9a:	9b03      	ldr	r3, [sp, #12]
    2e9c:	6193      	str	r3, [r2, #24]
}
    2e9e:	bf00      	nop
    2ea0:	b004      	add	sp, #16
    2ea2:	4770      	bx	lr
    2ea4:	40064000 	.word	0x40064000

00002ea8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ea8:	b084      	sub	sp, #16
    2eaa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2eac:	4b09      	ldr	r3, [pc, #36]	; (2ed4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2eae:	699b      	ldr	r3, [r3, #24]
    2eb0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2eb2:	9b03      	ldr	r3, [sp, #12]
    2eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2eb8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2eba:	9b01      	ldr	r3, [sp, #4]
    2ebc:	685b      	ldr	r3, [r3, #4]
    2ebe:	3b01      	subs	r3, #1
    2ec0:	011b      	lsls	r3, r3, #4
    2ec2:	9a03      	ldr	r2, [sp, #12]
    2ec4:	4313      	orrs	r3, r2
    2ec6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ec8:	4a02      	ldr	r2, [pc, #8]	; (2ed4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	6193      	str	r3, [r2, #24]
}
    2ece:	bf00      	nop
    2ed0:	b004      	add	sp, #16
    2ed2:	4770      	bx	lr
    2ed4:	40064000 	.word	0x40064000

00002ed8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ed8:	b084      	sub	sp, #16
    2eda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2edc:	4b09      	ldr	r3, [pc, #36]	; (2f04 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2ede:	699b      	ldr	r3, [r3, #24]
    2ee0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2ee2:	9b03      	ldr	r3, [sp, #12]
    2ee4:	f023 030f 	bic.w	r3, r3, #15
    2ee8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2eea:	9b01      	ldr	r3, [sp, #4]
    2eec:	685b      	ldr	r3, [r3, #4]
    2eee:	3b01      	subs	r3, #1
    2ef0:	9a03      	ldr	r2, [sp, #12]
    2ef2:	4313      	orrs	r3, r2
    2ef4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ef6:	4a03      	ldr	r2, [pc, #12]	; (2f04 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2ef8:	9b03      	ldr	r3, [sp, #12]
    2efa:	6193      	str	r3, [r2, #24]
}
    2efc:	bf00      	nop
    2efe:	b004      	add	sp, #16
    2f00:	4770      	bx	lr
    2f02:	bf00      	nop
    2f04:	40064000 	.word	0x40064000

00002f08 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f08:	b084      	sub	sp, #16
    2f0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f0c:	4b09      	ldr	r3, [pc, #36]	; (2f34 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f0e:	69db      	ldr	r3, [r3, #28]
    2f10:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2f12:	9b03      	ldr	r3, [sp, #12]
    2f14:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f18:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	685b      	ldr	r3, [r3, #4]
    2f1e:	3b01      	subs	r3, #1
    2f20:	041b      	lsls	r3, r3, #16
    2f22:	9a03      	ldr	r2, [sp, #12]
    2f24:	4313      	orrs	r3, r2
    2f26:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f28:	4a02      	ldr	r2, [pc, #8]	; (2f34 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f2a:	9b03      	ldr	r3, [sp, #12]
    2f2c:	61d3      	str	r3, [r2, #28]
}
    2f2e:	bf00      	nop
    2f30:	b004      	add	sp, #16
    2f32:	4770      	bx	lr
    2f34:	40064000 	.word	0x40064000

00002f38 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f38:	b084      	sub	sp, #16
    2f3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f3c:	4b09      	ldr	r3, [pc, #36]	; (2f64 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f3e:	69db      	ldr	r3, [r3, #28]
    2f40:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2f42:	9b03      	ldr	r3, [sp, #12]
    2f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f48:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2f4a:	9b01      	ldr	r3, [sp, #4]
    2f4c:	685b      	ldr	r3, [r3, #4]
    2f4e:	3b01      	subs	r3, #1
    2f50:	011b      	lsls	r3, r3, #4
    2f52:	9a03      	ldr	r2, [sp, #12]
    2f54:	4313      	orrs	r3, r2
    2f56:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f58:	4a02      	ldr	r2, [pc, #8]	; (2f64 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f5a:	9b03      	ldr	r3, [sp, #12]
    2f5c:	61d3      	str	r3, [r2, #28]
}
    2f5e:	bf00      	nop
    2f60:	b004      	add	sp, #16
    2f62:	4770      	bx	lr
    2f64:	40064000 	.word	0x40064000

00002f68 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f68:	b084      	sub	sp, #16
    2f6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f6c:	4b09      	ldr	r3, [pc, #36]	; (2f94 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f6e:	69db      	ldr	r3, [r3, #28]
    2f70:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2f72:	9b03      	ldr	r3, [sp, #12]
    2f74:	f023 030f 	bic.w	r3, r3, #15
    2f78:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2f7a:	9b01      	ldr	r3, [sp, #4]
    2f7c:	685b      	ldr	r3, [r3, #4]
    2f7e:	3b01      	subs	r3, #1
    2f80:	9a03      	ldr	r2, [sp, #12]
    2f82:	4313      	orrs	r3, r2
    2f84:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f86:	4a03      	ldr	r2, [pc, #12]	; (2f94 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f88:	9b03      	ldr	r3, [sp, #12]
    2f8a:	61d3      	str	r3, [r2, #28]
}
    2f8c:	bf00      	nop
    2f8e:	b004      	add	sp, #16
    2f90:	4770      	bx	lr
    2f92:	bf00      	nop
    2f94:	40064000 	.word	0x40064000

00002f98 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2f98:	b084      	sub	sp, #16
    2f9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2f9c:	4b0a      	ldr	r3, [pc, #40]	; (2fc8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2f9e:	685b      	ldr	r3, [r3, #4]
    2fa0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2fa2:	9b03      	ldr	r3, [sp, #12]
    2fa4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fa8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	685b      	ldr	r3, [r3, #4]
    2fae:	3b01      	subs	r3, #1
    2fb0:	021b      	lsls	r3, r3, #8
    2fb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2fb6:	9a03      	ldr	r2, [sp, #12]
    2fb8:	4313      	orrs	r3, r2
    2fba:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2fbc:	4a02      	ldr	r2, [pc, #8]	; (2fc8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2fbe:	9b03      	ldr	r3, [sp, #12]
    2fc0:	6053      	str	r3, [r2, #4]
}
    2fc2:	bf00      	nop
    2fc4:	b004      	add	sp, #16
    2fc6:	4770      	bx	lr
    2fc8:	40048000 	.word	0x40048000

00002fcc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fcc:	b084      	sub	sp, #16
    2fce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2fd0:	4919      	ldr	r1, [pc, #100]	; (3038 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2fd2:	9b01      	ldr	r3, [sp, #4]
    2fd4:	681a      	ldr	r2, [r3, #0]
    2fd6:	4819      	ldr	r0, [pc, #100]	; (303c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2fd8:	4613      	mov	r3, r2
    2fda:	00db      	lsls	r3, r3, #3
    2fdc:	4413      	add	r3, r2
    2fde:	4403      	add	r3, r0
    2fe0:	3305      	adds	r3, #5
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2fe8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2fea:	9b03      	ldr	r3, [sp, #12]
    2fec:	f023 030f 	bic.w	r3, r3, #15
    2ff0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2ff2:	9b01      	ldr	r3, [sp, #4]
    2ff4:	685b      	ldr	r3, [r3, #4]
    2ff6:	3b01      	subs	r3, #1
    2ff8:	f003 0307 	and.w	r3, r3, #7
    2ffc:	9a03      	ldr	r2, [sp, #12]
    2ffe:	4313      	orrs	r3, r2
    3000:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3002:	9b01      	ldr	r3, [sp, #4]
    3004:	7a1b      	ldrb	r3, [r3, #8]
    3006:	3b01      	subs	r3, #1
    3008:	00db      	lsls	r3, r3, #3
    300a:	f003 0308 	and.w	r3, r3, #8
    300e:	9a03      	ldr	r2, [sp, #12]
    3010:	4313      	orrs	r3, r2
    3012:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3014:	4908      	ldr	r1, [pc, #32]	; (3038 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3016:	9b01      	ldr	r3, [sp, #4]
    3018:	681a      	ldr	r2, [r3, #0]
    301a:	4808      	ldr	r0, [pc, #32]	; (303c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    301c:	4613      	mov	r3, r2
    301e:	00db      	lsls	r3, r3, #3
    3020:	4413      	add	r3, r2
    3022:	4403      	add	r3, r0
    3024:	3305      	adds	r3, #5
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	461a      	mov	r2, r3
    302a:	9b03      	ldr	r3, [sp, #12]
    302c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3030:	bf00      	nop
    3032:	b004      	add	sp, #16
    3034:	4770      	bx	lr
    3036:	bf00      	nop
    3038:	40065000 	.word	0x40065000
    303c:	00010204 	.word	0x00010204

00003040 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3040:	b084      	sub	sp, #16
    3042:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3044:	4b10      	ldr	r3, [pc, #64]	; (3088 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3048:	4a0f      	ldr	r2, [pc, #60]	; (3088 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    304e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3050:	4b0d      	ldr	r3, [pc, #52]	; (3088 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3054:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3056:	9b03      	ldr	r3, [sp, #12]
    3058:	f023 030f 	bic.w	r3, r3, #15
    305c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    305e:	9b01      	ldr	r3, [sp, #4]
    3060:	685b      	ldr	r3, [r3, #4]
    3062:	3b01      	subs	r3, #1
    3064:	005b      	lsls	r3, r3, #1
    3066:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    306a:	9b01      	ldr	r3, [sp, #4]
    306c:	7a1b      	ldrb	r3, [r3, #8]
    306e:	3b01      	subs	r3, #1
    3070:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3074:	4313      	orrs	r3, r2
    3076:	9a03      	ldr	r2, [sp, #12]
    3078:	4313      	orrs	r3, r2
    307a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    307c:	4a02      	ldr	r2, [pc, #8]	; (3088 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    307e:	9b03      	ldr	r3, [sp, #12]
    3080:	6693      	str	r3, [r2, #104]	; 0x68
}
    3082:	bf00      	nop
    3084:	b004      	add	sp, #16
    3086:	4770      	bx	lr
    3088:	40048000 	.word	0x40048000

0000308c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    308c:	b082      	sub	sp, #8
    308e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3090:	bf00      	nop
    3092:	b002      	add	sp, #8
    3094:	4770      	bx	lr
	...

00003098 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3098:	b082      	sub	sp, #8
    309a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    309c:	bf00      	nop
    309e:	b002      	add	sp, #8
    30a0:	4770      	bx	lr

000030a2 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    30a2:	b082      	sub	sp, #8
    30a4:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    30a6:	bf00      	nop
    30a8:	b002      	add	sp, #8
    30aa:	4770      	bx	lr

000030ac <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30ac:	b500      	push	{lr}
    30ae:	b083      	sub	sp, #12
    30b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30b2:	9b01      	ldr	r3, [sp, #4]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d002      	beq.n	30be <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    30b8:	9801      	ldr	r0, [sp, #4]
    30ba:	f000 f86a 	bl	3192 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30be:	bf00      	nop
    30c0:	b003      	add	sp, #12
    30c2:	f85d fb04 	ldr.w	pc, [sp], #4

000030c6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30c6:	b500      	push	{lr}
    30c8:	b083      	sub	sp, #12
    30ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30cc:	9b01      	ldr	r3, [sp, #4]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d002      	beq.n	30d8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    30d2:	9801      	ldr	r0, [sp, #4]
    30d4:	f000 f884 	bl	31e0 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    30d8:	bf00      	nop
    30da:	b003      	add	sp, #12
    30dc:	f85d fb04 	ldr.w	pc, [sp], #4

000030e0 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30e0:	b500      	push	{lr}
    30e2:	b089      	sub	sp, #36	; 0x24
    30e4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    30e6:	2300      	movs	r3, #0
    30e8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    30ec:	9b01      	ldr	r3, [sp, #4]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d031      	beq.n	3156 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    30f2:	4b1b      	ldr	r3, [pc, #108]	; (3160 <Clock_Ip_CompleteSOSC+0x80>)
    30f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30f8:	f003 0301 	and.w	r3, r3, #1
    30fc:	2b00      	cmp	r3, #0
    30fe:	d02a      	beq.n	3156 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3100:	aa03      	add	r2, sp, #12
    3102:	a904      	add	r1, sp, #16
    3104:	a805      	add	r0, sp, #20
    3106:	f24c 3350 	movw	r3, #50000	; 0xc350
    310a:	f7ff fd1d 	bl	2b48 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    310e:	4b14      	ldr	r3, [pc, #80]	; (3160 <Clock_Ip_CompleteSOSC+0x80>)
    3110:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3114:	0e1b      	lsrs	r3, r3, #24
    3116:	f003 0301 	and.w	r3, r3, #1
    311a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    311c:	9a03      	ldr	r2, [sp, #12]
    311e:	a904      	add	r1, sp, #16
    3120:	ab05      	add	r3, sp, #20
    3122:	4618      	mov	r0, r3
    3124:	f7ff fd2a 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3128:	4603      	mov	r3, r0
    312a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    312e:	9b06      	ldr	r3, [sp, #24]
    3130:	2b00      	cmp	r3, #0
    3132:	d106      	bne.n	3142 <Clock_Ip_CompleteSOSC+0x62>
    3134:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3138:	f083 0301 	eor.w	r3, r3, #1
    313c:	b2db      	uxtb	r3, r3
    313e:	2b00      	cmp	r3, #0
    3140:	d1e5      	bne.n	310e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3142:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3146:	2b00      	cmp	r3, #0
    3148:	d005      	beq.n	3156 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	4619      	mov	r1, r3
    3150:	2001      	movs	r0, #1
    3152:	f7ff fce9 	bl	2b28 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3156:	bf00      	nop
    3158:	b009      	add	sp, #36	; 0x24
    315a:	f85d fb04 	ldr.w	pc, [sp], #4
    315e:	bf00      	nop
    3160:	40064000 	.word	0x40064000

00003164 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3164:	b500      	push	{lr}
    3166:	b083      	sub	sp, #12
    3168:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    316a:	9801      	ldr	r0, [sp, #4]
    316c:	f000 f8c0 	bl	32f0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3170:	bf00      	nop
    3172:	b003      	add	sp, #12
    3174:	f85d fb04 	ldr.w	pc, [sp], #4

00003178 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3178:	b500      	push	{lr}
    317a:	b083      	sub	sp, #12
    317c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    317e:	9b01      	ldr	r3, [sp, #4]
    3180:	2b00      	cmp	r3, #0
    3182:	d002      	beq.n	318a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3184:	9801      	ldr	r0, [sp, #4]
    3186:	f000 f8c3 	bl	3310 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    318a:	bf00      	nop
    318c:	b003      	add	sp, #12
    318e:	f85d fb04 	ldr.w	pc, [sp], #4

00003192 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3192:	b082      	sub	sp, #8
    3194:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3196:	4b11      	ldr	r3, [pc, #68]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3198:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    319c:	4a0f      	ldr	r2, [pc, #60]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    319e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    31a6:	4b0d      	ldr	r3, [pc, #52]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31ac:	4a0b      	ldr	r2, [pc, #44]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    31b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    31b6:	4b09      	ldr	r3, [pc, #36]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31bc:	4a07      	ldr	r2, [pc, #28]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    31c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    31c6:	4b05      	ldr	r3, [pc, #20]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31cc:	4a03      	ldr	r2, [pc, #12]	; (31dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ce:	f023 0301 	bic.w	r3, r3, #1
    31d2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    31d6:	bf00      	nop
    31d8:	b002      	add	sp, #8
    31da:	4770      	bx	lr
    31dc:	40064000 	.word	0x40064000

000031e0 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    31e0:	b082      	sub	sp, #8
    31e2:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    31e4:	9b01      	ldr	r3, [sp, #4]
    31e6:	891b      	ldrh	r3, [r3, #8]
    31e8:	2b01      	cmp	r3, #1
    31ea:	d174      	bne.n	32d6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    31ec:	9b01      	ldr	r3, [sp, #4]
    31ee:	7bdb      	ldrb	r3, [r3, #15]
    31f0:	2b00      	cmp	r3, #0
    31f2:	d002      	beq.n	31fa <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    31f4:	2b01      	cmp	r3, #1
    31f6:	d009      	beq.n	320c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    31f8:	e011      	b.n	321e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    31fa:	4b39      	ldr	r3, [pc, #228]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3200:	4a37      	ldr	r2, [pc, #220]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3202:	f023 0308 	bic.w	r3, r3, #8
    3206:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    320a:	e008      	b.n	321e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    320c:	4b34      	ldr	r3, [pc, #208]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    320e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3212:	4a33      	ldr	r2, [pc, #204]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3214:	f043 0308 	orr.w	r3, r3, #8
    3218:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    321c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    321e:	4b30      	ldr	r3, [pc, #192]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3220:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3224:	4a2e      	ldr	r2, [pc, #184]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3226:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    322a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	4a2c      	ldr	r2, [pc, #176]	; (32e4 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3234:	4293      	cmp	r3, r2
    3236:	d90d      	bls.n	3254 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3238:	9b01      	ldr	r3, [sp, #4]
    323a:	685b      	ldr	r3, [r3, #4]
    323c:	4a2a      	ldr	r2, [pc, #168]	; (32e8 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    323e:	4293      	cmp	r3, r2
    3240:	d208      	bcs.n	3254 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3242:	4b27      	ldr	r3, [pc, #156]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3244:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3248:	4a25      	ldr	r2, [pc, #148]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    324a:	f043 0320 	orr.w	r3, r3, #32
    324e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3252:	e007      	b.n	3264 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3254:	4b22      	ldr	r3, [pc, #136]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3256:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    325a:	4a21      	ldr	r2, [pc, #132]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    325c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3260:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3264:	9b01      	ldr	r3, [sp, #4]
    3266:	7b1b      	ldrb	r3, [r3, #12]
    3268:	2b00      	cmp	r3, #0
    326a:	d108      	bne.n	327e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    326c:	4b1c      	ldr	r3, [pc, #112]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    326e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3272:	4a1b      	ldr	r2, [pc, #108]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3274:	f043 0304 	orr.w	r3, r3, #4
    3278:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    327c:	e007      	b.n	328e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    327e:	4b18      	ldr	r3, [pc, #96]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3280:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3284:	4a16      	ldr	r2, [pc, #88]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3286:	f023 0304 	bic.w	r3, r3, #4
    328a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    328e:	9b01      	ldr	r3, [sp, #4]
    3290:	7c1b      	ldrb	r3, [r3, #16]
    3292:	2b02      	cmp	r3, #2
    3294:	d011      	beq.n	32ba <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3296:	2b02      	cmp	r3, #2
    3298:	dc14      	bgt.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    329a:	2b00      	cmp	r3, #0
    329c:	d002      	beq.n	32a4 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    329e:	2b01      	cmp	r3, #1
    32a0:	d005      	beq.n	32ae <Clock_Ip_SetSOSC_TrustedCall+0xce>
    32a2:	e00f      	b.n	32c4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32a4:	4b0e      	ldr	r3, [pc, #56]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a6:	2201      	movs	r2, #1
    32a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32ac:	e014      	b.n	32d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32ae:	4b0c      	ldr	r3, [pc, #48]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    32b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32b8:	e00e      	b.n	32d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32ba:	4b09      	ldr	r3, [pc, #36]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32bc:	4a0b      	ldr	r2, [pc, #44]	; (32ec <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    32be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    32c2:	e009      	b.n	32d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    32c4:	4b06      	ldr	r3, [pc, #24]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32ca:	4a05      	ldr	r2, [pc, #20]	; (32e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32cc:	f043 0301 	orr.w	r3, r3, #1
    32d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    32d4:	e000      	b.n	32d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    32d6:	bf00      	nop
}
    32d8:	bf00      	nop
    32da:	b002      	add	sp, #8
    32dc:	4770      	bx	lr
    32de:	bf00      	nop
    32e0:	40064000 	.word	0x40064000
    32e4:	003d08ff 	.word	0x003d08ff
    32e8:	007a1200 	.word	0x007a1200
    32ec:	00030001 	.word	0x00030001

000032f0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    32f0:	b082      	sub	sp, #8
    32f2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    32f4:	4b05      	ldr	r3, [pc, #20]	; (330c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32fa:	4a04      	ldr	r2, [pc, #16]	; (330c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32fc:	f023 0301 	bic.w	r3, r3, #1
    3300:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3304:	bf00      	nop
    3306:	b002      	add	sp, #8
    3308:	4770      	bx	lr
    330a:	bf00      	nop
    330c:	40064000 	.word	0x40064000

00003310 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3310:	b082      	sub	sp, #8
    3312:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3314:	9b01      	ldr	r3, [sp, #4]
    3316:	891b      	ldrh	r3, [r3, #8]
    3318:	2b01      	cmp	r3, #1
    331a:	d107      	bne.n	332c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    331c:	4b05      	ldr	r3, [pc, #20]	; (3334 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    331e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3322:	4a04      	ldr	r2, [pc, #16]	; (3334 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3324:	f043 0301 	orr.w	r3, r3, #1
    3328:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    332c:	bf00      	nop
    332e:	b002      	add	sp, #8
    3330:	4770      	bx	lr
    3332:	bf00      	nop
    3334:	40064000 	.word	0x40064000

00003338 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3338:	b082      	sub	sp, #8
    333a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    333c:	bf00      	nop
    333e:	b002      	add	sp, #8
    3340:	4770      	bx	lr

00003342 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3342:	b082      	sub	sp, #8
    3344:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3346:	2300      	movs	r3, #0
}
    3348:	4618      	mov	r0, r3
    334a:	b002      	add	sp, #8
    334c:	4770      	bx	lr

0000334e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    334e:	b082      	sub	sp, #8
    3350:	9001      	str	r0, [sp, #4]
    3352:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3354:	bf00      	nop
    3356:	b002      	add	sp, #8
    3358:	4770      	bx	lr
	...

0000335c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    335c:	b082      	sub	sp, #8
    335e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3360:	bf00      	nop
    3362:	b002      	add	sp, #8
    3364:	4770      	bx	lr

00003366 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3366:	b082      	sub	sp, #8
    3368:	9001      	str	r0, [sp, #4]
    336a:	460b      	mov	r3, r1
    336c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3370:	bf00      	nop
    3372:	b002      	add	sp, #8
    3374:	4770      	bx	lr

00003376 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3376:	b500      	push	{lr}
    3378:	b083      	sub	sp, #12
    337a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    337c:	9b01      	ldr	r3, [sp, #4]
    337e:	2b00      	cmp	r3, #0
    3380:	d002      	beq.n	3388 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3382:	9801      	ldr	r0, [sp, #4]
    3384:	f000 f8e7 	bl	3556 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3388:	bf00      	nop
    338a:	b003      	add	sp, #12
    338c:	f85d fb04 	ldr.w	pc, [sp], #4

00003390 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3390:	b500      	push	{lr}
    3392:	b085      	sub	sp, #20
    3394:	9001      	str	r0, [sp, #4]
    3396:	460b      	mov	r3, r1
    3398:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    339c:	9b01      	ldr	r3, [sp, #4]
    339e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d003      	beq.n	33b0 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    33a8:	2300      	movs	r3, #0
    33aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    33ae:	e002      	b.n	33b6 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33b0:	2301      	movs	r3, #1
    33b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    33b6:	ab02      	add	r3, sp, #8
    33b8:	4618      	mov	r0, r3
    33ba:	f7ff ffdc 	bl	3376 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    33be:	bf00      	nop
    33c0:	b005      	add	sp, #20
    33c2:	f85d fb04 	ldr.w	pc, [sp], #4

000033c6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    33c6:	b500      	push	{lr}
    33c8:	b083      	sub	sp, #12
    33ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33cc:	9b01      	ldr	r3, [sp, #4]
    33ce:	2b00      	cmp	r3, #0
    33d0:	d002      	beq.n	33d8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    33d2:	9801      	ldr	r0, [sp, #4]
    33d4:	f000 f8d6 	bl	3584 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33d8:	bf00      	nop
    33da:	b003      	add	sp, #12
    33dc:	f85d fb04 	ldr.w	pc, [sp], #4

000033e0 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33e0:	b500      	push	{lr}
    33e2:	b085      	sub	sp, #20
    33e4:	9001      	str	r0, [sp, #4]
    33e6:	460b      	mov	r3, r1
    33e8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d003      	beq.n	3400 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    33f8:	2300      	movs	r3, #0
    33fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    33fe:	e002      	b.n	3406 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3400:	2301      	movs	r3, #1
    3402:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3406:	ab02      	add	r3, sp, #8
    3408:	4618      	mov	r0, r3
    340a:	f7ff ffdc 	bl	33c6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    340e:	bf00      	nop
    3410:	b005      	add	sp, #20
    3412:	f85d fb04 	ldr.w	pc, [sp], #4

00003416 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3416:	b500      	push	{lr}
    3418:	b083      	sub	sp, #12
    341a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    341c:	9b01      	ldr	r3, [sp, #4]
    341e:	2b00      	cmp	r3, #0
    3420:	d002      	beq.n	3428 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3422:	9801      	ldr	r0, [sp, #4]
    3424:	f000 f8c6 	bl	35b4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3428:	bf00      	nop
    342a:	b003      	add	sp, #12
    342c:	f85d fb04 	ldr.w	pc, [sp], #4

00003430 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3430:	b500      	push	{lr}
    3432:	b085      	sub	sp, #20
    3434:	9001      	str	r0, [sp, #4]
    3436:	460b      	mov	r3, r1
    3438:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    343c:	9b01      	ldr	r3, [sp, #4]
    343e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3440:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3444:	2b00      	cmp	r3, #0
    3446:	d003      	beq.n	3450 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3448:	2300      	movs	r3, #0
    344a:	f8ad 300c 	strh.w	r3, [sp, #12]
    344e:	e002      	b.n	3456 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3450:	2301      	movs	r3, #1
    3452:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3456:	ab02      	add	r3, sp, #8
    3458:	4618      	mov	r0, r3
    345a:	f7ff ffdc 	bl	3416 <Clock_Ip_ClockSetSimClkoutEnable>
}
    345e:	bf00      	nop
    3460:	b005      	add	sp, #20
    3462:	f85d fb04 	ldr.w	pc, [sp], #4

00003466 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3466:	b500      	push	{lr}
    3468:	b083      	sub	sp, #12
    346a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    346c:	9b01      	ldr	r3, [sp, #4]
    346e:	2b00      	cmp	r3, #0
    3470:	d002      	beq.n	3478 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3472:	9801      	ldr	r0, [sp, #4]
    3474:	f000 f8b6 	bl	35e4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3478:	bf00      	nop
    347a:	b003      	add	sp, #12
    347c:	f85d fb04 	ldr.w	pc, [sp], #4

00003480 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3480:	b500      	push	{lr}
    3482:	b085      	sub	sp, #20
    3484:	9001      	str	r0, [sp, #4]
    3486:	460b      	mov	r3, r1
    3488:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    348c:	9b01      	ldr	r3, [sp, #4]
    348e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3490:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3494:	2b00      	cmp	r3, #0
    3496:	d003      	beq.n	34a0 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3498:	2300      	movs	r3, #0
    349a:	f8ad 300c 	strh.w	r3, [sp, #12]
    349e:	e002      	b.n	34a6 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34a0:	2301      	movs	r3, #1
    34a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    34a6:	ab02      	add	r3, sp, #8
    34a8:	4618      	mov	r0, r3
    34aa:	f7ff ffdc 	bl	3466 <Clock_Ip_ClockSetPccCgcEnable>
}
    34ae:	bf00      	nop
    34b0:	b005      	add	sp, #20
    34b2:	f85d fb04 	ldr.w	pc, [sp], #4

000034b6 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    34b6:	b500      	push	{lr}
    34b8:	b083      	sub	sp, #12
    34ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34bc:	9b01      	ldr	r3, [sp, #4]
    34be:	2b00      	cmp	r3, #0
    34c0:	d002      	beq.n	34c8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    34c2:	9801      	ldr	r0, [sp, #4]
    34c4:	f000 f8bc 	bl	3640 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34c8:	bf00      	nop
    34ca:	b003      	add	sp, #12
    34cc:	f85d fb04 	ldr.w	pc, [sp], #4

000034d0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    34d0:	b500      	push	{lr}
    34d2:	b085      	sub	sp, #20
    34d4:	9001      	str	r0, [sp, #4]
    34d6:	460b      	mov	r3, r1
    34d8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34dc:	9b01      	ldr	r3, [sp, #4]
    34de:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d003      	beq.n	34f0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    34e8:	2300      	movs	r3, #0
    34ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    34ee:	e002      	b.n	34f6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34f0:	2301      	movs	r3, #1
    34f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    34f6:	ab02      	add	r3, sp, #8
    34f8:	4618      	mov	r0, r3
    34fa:	f7ff ffdc 	bl	34b6 <Clock_Ip_ClockSetSimGate>
}
    34fe:	bf00      	nop
    3500:	b005      	add	sp, #20
    3502:	f85d fb04 	ldr.w	pc, [sp], #4

00003506 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3506:	b500      	push	{lr}
    3508:	b083      	sub	sp, #12
    350a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	2b00      	cmp	r3, #0
    3510:	d002      	beq.n	3518 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3512:	9801      	ldr	r0, [sp, #4]
    3514:	f000 f8c0 	bl	3698 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3518:	bf00      	nop
    351a:	b003      	add	sp, #12
    351c:	f85d fb04 	ldr.w	pc, [sp], #4

00003520 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3520:	b500      	push	{lr}
    3522:	b085      	sub	sp, #20
    3524:	9001      	str	r0, [sp, #4]
    3526:	460b      	mov	r3, r1
    3528:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    352c:	9b01      	ldr	r3, [sp, #4]
    352e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3530:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3534:	2b00      	cmp	r3, #0
    3536:	d003      	beq.n	3540 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3538:	2300      	movs	r3, #0
    353a:	f8ad 300c 	strh.w	r3, [sp, #12]
    353e:	e002      	b.n	3546 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3540:	2301      	movs	r3, #1
    3542:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3546:	ab02      	add	r3, sp, #8
    3548:	4618      	mov	r0, r3
    354a:	f7ff ffdc 	bl	3506 <Clock_Ip_ClockSetSimTraceEnable>
}
    354e:	bf00      	nop
    3550:	b005      	add	sp, #20
    3552:	f85d fb04 	ldr.w	pc, [sp], #4

00003556 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3556:	b084      	sub	sp, #16
    3558:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    355a:	4b09      	ldr	r3, [pc, #36]	; (3580 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    355c:	691b      	ldr	r3, [r3, #16]
    355e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3560:	9b03      	ldr	r3, [sp, #12]
    3562:	f023 0301 	bic.w	r3, r3, #1
    3566:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3568:	9b01      	ldr	r3, [sp, #4]
    356a:	889b      	ldrh	r3, [r3, #4]
    356c:	461a      	mov	r2, r3
    356e:	9b03      	ldr	r3, [sp, #12]
    3570:	4313      	orrs	r3, r2
    3572:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3574:	4a02      	ldr	r2, [pc, #8]	; (3580 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3576:	9b03      	ldr	r3, [sp, #12]
    3578:	6113      	str	r3, [r2, #16]
}
    357a:	bf00      	nop
    357c:	b004      	add	sp, #16
    357e:	4770      	bx	lr
    3580:	40048000 	.word	0x40048000

00003584 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3584:	b084      	sub	sp, #16
    3586:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3588:	4b09      	ldr	r3, [pc, #36]	; (35b0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    358a:	691b      	ldr	r3, [r3, #16]
    358c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    358e:	9b03      	ldr	r3, [sp, #12]
    3590:	f023 0302 	bic.w	r3, r3, #2
    3594:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3596:	9b01      	ldr	r3, [sp, #4]
    3598:	889b      	ldrh	r3, [r3, #4]
    359a:	005b      	lsls	r3, r3, #1
    359c:	9a03      	ldr	r2, [sp, #12]
    359e:	4313      	orrs	r3, r2
    35a0:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    35a2:	4a03      	ldr	r2, [pc, #12]	; (35b0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    35a4:	9b03      	ldr	r3, [sp, #12]
    35a6:	6113      	str	r3, [r2, #16]
}
    35a8:	bf00      	nop
    35aa:	b004      	add	sp, #16
    35ac:	4770      	bx	lr
    35ae:	bf00      	nop
    35b0:	40048000 	.word	0x40048000

000035b4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35b4:	b084      	sub	sp, #16
    35b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    35b8:	4b09      	ldr	r3, [pc, #36]	; (35e0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35ba:	685b      	ldr	r3, [r3, #4]
    35bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    35be:	9b03      	ldr	r3, [sp, #12]
    35c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    35c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    35c6:	9b01      	ldr	r3, [sp, #4]
    35c8:	889b      	ldrh	r3, [r3, #4]
    35ca:	02db      	lsls	r3, r3, #11
    35cc:	9a03      	ldr	r2, [sp, #12]
    35ce:	4313      	orrs	r3, r2
    35d0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    35d2:	4a03      	ldr	r2, [pc, #12]	; (35e0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35d4:	9b03      	ldr	r3, [sp, #12]
    35d6:	6053      	str	r3, [r2, #4]
}
    35d8:	bf00      	nop
    35da:	b004      	add	sp, #16
    35dc:	4770      	bx	lr
    35de:	bf00      	nop
    35e0:	40048000 	.word	0x40048000

000035e4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35e4:	b084      	sub	sp, #16
    35e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    35e8:	4913      	ldr	r1, [pc, #76]	; (3638 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    35ea:	9b01      	ldr	r3, [sp, #4]
    35ec:	681a      	ldr	r2, [r3, #0]
    35ee:	4813      	ldr	r0, [pc, #76]	; (363c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    35f0:	4613      	mov	r3, r2
    35f2:	00db      	lsls	r3, r3, #3
    35f4:	4413      	add	r3, r2
    35f6:	4403      	add	r3, r0
    35f8:	3306      	adds	r3, #6
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3600:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3602:	9b03      	ldr	r3, [sp, #12]
    3604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3608:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	889b      	ldrh	r3, [r3, #4]
    360e:	079b      	lsls	r3, r3, #30
    3610:	9a03      	ldr	r2, [sp, #12]
    3612:	4313      	orrs	r3, r2
    3614:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3616:	4908      	ldr	r1, [pc, #32]	; (3638 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3618:	9b01      	ldr	r3, [sp, #4]
    361a:	681a      	ldr	r2, [r3, #0]
    361c:	4807      	ldr	r0, [pc, #28]	; (363c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    361e:	4613      	mov	r3, r2
    3620:	00db      	lsls	r3, r3, #3
    3622:	4413      	add	r3, r2
    3624:	4403      	add	r3, r0
    3626:	3306      	adds	r3, #6
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	461a      	mov	r2, r3
    362c:	9b03      	ldr	r3, [sp, #12]
    362e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3632:	bf00      	nop
    3634:	b004      	add	sp, #16
    3636:	4770      	bx	lr
    3638:	40065000 	.word	0x40065000
    363c:	00010204 	.word	0x00010204

00003640 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3640:	b086      	sub	sp, #24
    3642:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3644:	9b01      	ldr	r3, [sp, #4]
    3646:	889b      	ldrh	r3, [r3, #4]
    3648:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    364a:	9b01      	ldr	r3, [sp, #4]
    364c:	681a      	ldr	r2, [r3, #0]
    364e:	4910      	ldr	r1, [pc, #64]	; (3690 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3650:	4613      	mov	r3, r2
    3652:	00db      	lsls	r3, r3, #3
    3654:	4413      	add	r3, r2
    3656:	440b      	add	r3, r1
    3658:	3306      	adds	r3, #6
    365a:	781b      	ldrb	r3, [r3, #0]
    365c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    365e:	4b0d      	ldr	r3, [pc, #52]	; (3694 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3662:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3664:	2201      	movs	r2, #1
    3666:	9b04      	ldr	r3, [sp, #16]
    3668:	fa02 f303 	lsl.w	r3, r2, r3
    366c:	43db      	mvns	r3, r3
    366e:	9a03      	ldr	r2, [sp, #12]
    3670:	4013      	ands	r3, r2
    3672:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3674:	9a05      	ldr	r2, [sp, #20]
    3676:	9b04      	ldr	r3, [sp, #16]
    3678:	fa02 f303 	lsl.w	r3, r2, r3
    367c:	9a03      	ldr	r2, [sp, #12]
    367e:	4313      	orrs	r3, r2
    3680:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3682:	4a04      	ldr	r2, [pc, #16]	; (3694 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3684:	9b03      	ldr	r3, [sp, #12]
    3686:	6413      	str	r3, [r2, #64]	; 0x40
}
    3688:	bf00      	nop
    368a:	b006      	add	sp, #24
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	00010204 	.word	0x00010204
    3694:	40048000 	.word	0x40048000

00003698 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3698:	b084      	sub	sp, #16
    369a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    369c:	4b0a      	ldr	r3, [pc, #40]	; (36c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    369e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    36a0:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	889b      	ldrh	r3, [r3, #4]
    36a6:	2b01      	cmp	r3, #1
    36a8:	d104      	bne.n	36b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    36aa:	9b03      	ldr	r3, [sp, #12]
    36ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    36b0:	9303      	str	r3, [sp, #12]
    36b2:	e003      	b.n	36bc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    36b4:	9b03      	ldr	r3, [sp, #12]
    36b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    36ba:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    36bc:	4a02      	ldr	r2, [pc, #8]	; (36c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    36be:	9b03      	ldr	r3, [sp, #12]
    36c0:	6693      	str	r3, [r2, #104]	; 0x68
}
    36c2:	bf00      	nop
    36c4:	b004      	add	sp, #16
    36c6:	4770      	bx	lr
    36c8:	40048000 	.word	0x40048000

000036cc <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    36cc:	b082      	sub	sp, #8
    36ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36d0:	bf00      	nop
    36d2:	b002      	add	sp, #8
    36d4:	4770      	bx	lr

000036d6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    36d6:	b082      	sub	sp, #8
    36d8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    36da:	bf00      	nop
    36dc:	b002      	add	sp, #8
    36de:	4770      	bx	lr

000036e0 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36e0:	b500      	push	{lr}
    36e2:	b083      	sub	sp, #12
    36e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36e6:	9b01      	ldr	r3, [sp, #4]
    36e8:	2b00      	cmp	r3, #0
    36ea:	d002      	beq.n	36f2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    36ec:	9801      	ldr	r0, [sp, #4]
    36ee:	f000 f8d1 	bl	3894 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f2:	bf00      	nop
    36f4:	b003      	add	sp, #12
    36f6:	f85d fb04 	ldr.w	pc, [sp], #4

000036fa <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36fa:	b500      	push	{lr}
    36fc:	b083      	sub	sp, #12
    36fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	2b00      	cmp	r3, #0
    3704:	d002      	beq.n	370c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3706:	9801      	ldr	r0, [sp, #4]
    3708:	f000 f950 	bl	39ac <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    370c:	bf00      	nop
    370e:	b003      	add	sp, #12
    3710:	f85d fb04 	ldr.w	pc, [sp], #4

00003714 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3714:	b500      	push	{lr}
    3716:	b083      	sub	sp, #12
    3718:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    371a:	9801      	ldr	r0, [sp, #4]
    371c:	f000 f98e 	bl	3a3c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3720:	bf00      	nop
    3722:	b003      	add	sp, #12
    3724:	f85d fb04 	ldr.w	pc, [sp], #4

00003728 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3728:	b500      	push	{lr}
    372a:	b083      	sub	sp, #12
    372c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    372e:	9b01      	ldr	r3, [sp, #4]
    3730:	2b00      	cmp	r3, #0
    3732:	d002      	beq.n	373a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3734:	9801      	ldr	r0, [sp, #4]
    3736:	f000 f999 	bl	3a6c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    373a:	bf00      	nop
    373c:	b003      	add	sp, #12
    373e:	f85d fb04 	ldr.w	pc, [sp], #4

00003742 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3742:	b500      	push	{lr}
    3744:	b083      	sub	sp, #12
    3746:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3748:	9b01      	ldr	r3, [sp, #4]
    374a:	2b00      	cmp	r3, #0
    374c:	d002      	beq.n	3754 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    374e:	9801      	ldr	r0, [sp, #4]
    3750:	f000 f9b0 	bl	3ab4 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3754:	bf00      	nop
    3756:	b003      	add	sp, #12
    3758:	f85d fb04 	ldr.w	pc, [sp], #4

0000375c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    375c:	b500      	push	{lr}
    375e:	b083      	sub	sp, #12
    3760:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3762:	9801      	ldr	r0, [sp, #4]
    3764:	f000 f9ba 	bl	3adc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3768:	bf00      	nop
    376a:	b003      	add	sp, #12
    376c:	f85d fb04 	ldr.w	pc, [sp], #4

00003770 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3770:	b500      	push	{lr}
    3772:	b083      	sub	sp, #12
    3774:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3776:	9b01      	ldr	r3, [sp, #4]
    3778:	2b00      	cmp	r3, #0
    377a:	d002      	beq.n	3782 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    377c:	9801      	ldr	r0, [sp, #4]
    377e:	f000 f9bd 	bl	3afc <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3782:	bf00      	nop
    3784:	b003      	add	sp, #12
    3786:	f85d fb04 	ldr.w	pc, [sp], #4

0000378a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    378a:	b500      	push	{lr}
    378c:	b083      	sub	sp, #12
    378e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3790:	9b01      	ldr	r3, [sp, #4]
    3792:	2b00      	cmp	r3, #0
    3794:	d002      	beq.n	379c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3796:	9801      	ldr	r0, [sp, #4]
    3798:	f000 f9d4 	bl	3b44 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    379c:	bf00      	nop
    379e:	b003      	add	sp, #12
    37a0:	f85d fb04 	ldr.w	pc, [sp], #4

000037a4 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    37a4:	b500      	push	{lr}
    37a6:	b083      	sub	sp, #12
    37a8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    37aa:	9801      	ldr	r0, [sp, #4]
    37ac:	f000 f9de 	bl	3b6c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37b0:	bf00      	nop
    37b2:	b003      	add	sp, #12
    37b4:	f85d fb04 	ldr.w	pc, [sp], #4

000037b8 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    37b8:	b500      	push	{lr}
    37ba:	b089      	sub	sp, #36	; 0x24
    37bc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    37be:	2300      	movs	r3, #0
    37c0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    37c4:	4b20      	ldr	r3, [pc, #128]	; (3848 <SetInputSouceSytemClock+0x90>)
    37c6:	695b      	ldr	r3, [r3, #20]
    37c8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    37ca:	9b06      	ldr	r3, [sp, #24]
    37cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    37d0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    37d2:	9b01      	ldr	r3, [sp, #4]
    37d4:	061b      	lsls	r3, r3, #24
    37d6:	9a06      	ldr	r2, [sp, #24]
    37d8:	4313      	orrs	r3, r2
    37da:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    37dc:	4a1a      	ldr	r2, [pc, #104]	; (3848 <SetInputSouceSytemClock+0x90>)
    37de:	9b06      	ldr	r3, [sp, #24]
    37e0:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37e2:	aa02      	add	r2, sp, #8
    37e4:	a903      	add	r1, sp, #12
    37e6:	a804      	add	r0, sp, #16
    37e8:	f24c 3350 	movw	r3, #50000	; 0xc350
    37ec:	f7ff f9ac 	bl	2b48 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    37f0:	4b15      	ldr	r3, [pc, #84]	; (3848 <SetInputSouceSytemClock+0x90>)
    37f2:	691b      	ldr	r3, [r3, #16]
    37f4:	0e1b      	lsrs	r3, r3, #24
    37f6:	f003 030f 	and.w	r3, r3, #15
    37fa:	9a01      	ldr	r2, [sp, #4]
    37fc:	429a      	cmp	r2, r3
    37fe:	bf0c      	ite	eq
    3800:	2301      	moveq	r3, #1
    3802:	2300      	movne	r3, #0
    3804:	b2db      	uxtb	r3, r3
    3806:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3808:	9a02      	ldr	r2, [sp, #8]
    380a:	a903      	add	r1, sp, #12
    380c:	ab04      	add	r3, sp, #16
    380e:	4618      	mov	r0, r3
    3810:	f7ff f9b4 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3814:	4603      	mov	r3, r0
    3816:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    381a:	9b05      	ldr	r3, [sp, #20]
    381c:	2b00      	cmp	r3, #0
    381e:	d106      	bne.n	382e <SetInputSouceSytemClock+0x76>
    3820:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3824:	f083 0301 	eor.w	r3, r3, #1
    3828:	b2db      	uxtb	r3, r3
    382a:	2b00      	cmp	r3, #0
    382c:	d1e0      	bne.n	37f0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    382e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3832:	2b00      	cmp	r3, #0
    3834:	d003      	beq.n	383e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3836:	2105      	movs	r1, #5
    3838:	2001      	movs	r0, #1
    383a:	f7ff f975 	bl	2b28 <Clock_Ip_ReportClockErrors>
    }
}
    383e:	bf00      	nop
    3840:	b009      	add	sp, #36	; 0x24
    3842:	f85d fb04 	ldr.w	pc, [sp], #4
    3846:	bf00      	nop
    3848:	40064000 	.word	0x40064000

0000384c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    384c:	b500      	push	{lr}
    384e:	b083      	sub	sp, #12
    3850:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3852:	9b01      	ldr	r3, [sp, #4]
    3854:	2b00      	cmp	r3, #0
    3856:	d002      	beq.n	385e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3858:	9801      	ldr	r0, [sp, #4]
    385a:	f000 f997 	bl	3b8c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    385e:	bf00      	nop
    3860:	b003      	add	sp, #12
    3862:	f85d fb04 	ldr.w	pc, [sp], #4

00003866 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3866:	b500      	push	{lr}
    3868:	b083      	sub	sp, #12
    386a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    386c:	9b01      	ldr	r3, [sp, #4]
    386e:	2b00      	cmp	r3, #0
    3870:	d002      	beq.n	3878 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3872:	9801      	ldr	r0, [sp, #4]
    3874:	f000 fa7e 	bl	3d74 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3878:	bf00      	nop
    387a:	b003      	add	sp, #12
    387c:	f85d fb04 	ldr.w	pc, [sp], #4

00003880 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3880:	b500      	push	{lr}
    3882:	b083      	sub	sp, #12
    3884:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3886:	9801      	ldr	r0, [sp, #4]
    3888:	f000 fab8 	bl	3dfc <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    388c:	bf00      	nop
    388e:	b003      	add	sp, #12
    3890:	f85d fb04 	ldr.w	pc, [sp], #4

00003894 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3894:	b500      	push	{lr}
    3896:	b08b      	sub	sp, #44	; 0x2c
    3898:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    389a:	2300      	movs	r3, #0
    389c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    38a0:	9b01      	ldr	r3, [sp, #4]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d10b      	bne.n	38be <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    38a6:	2305      	movs	r3, #5
    38a8:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    38aa:	2301      	movs	r3, #1
    38ac:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    38b0:	2301      	movs	r3, #1
    38b2:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    38b6:	2301      	movs	r3, #1
    38b8:	f88d 3010 	strb.w	r3, [sp, #16]
    38bc:	e00e      	b.n	38dc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    38c4:	9b01      	ldr	r3, [sp, #4]
    38c6:	79db      	ldrb	r3, [r3, #7]
    38c8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	889b      	ldrh	r3, [r3, #4]
    38d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    38d4:	9b01      	ldr	r3, [sp, #4]
    38d6:	7a1b      	ldrb	r3, [r3, #8]
    38d8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    38dc:	4b32      	ldr	r3, [pc, #200]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38e2:	4a31      	ldr	r2, [pc, #196]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    38e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    38ec:	4b2e      	ldr	r3, [pc, #184]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38f2:	4a2d      	ldr	r2, [pc, #180]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38f4:	f023 0301 	bic.w	r3, r3, #1
    38f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    38fc:	4b2a      	ldr	r3, [pc, #168]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3902:	4a29      	ldr	r2, [pc, #164]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3904:	f023 0304 	bic.w	r3, r3, #4
    3908:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    390c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3910:	2b01      	cmp	r3, #1
    3912:	d144      	bne.n	399e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3914:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3918:	4a23      	ldr	r2, [pc, #140]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    391a:	f003 0301 	and.w	r3, r3, #1
    391e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3922:	4b21      	ldr	r3, [pc, #132]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3928:	4a1f      	ldr	r2, [pc, #124]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    392a:	f043 0301 	orr.w	r3, r3, #1
    392e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3932:	4b1d      	ldr	r3, [pc, #116]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3934:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3938:	f89d 3010 	ldrb.w	r3, [sp, #16]
    393c:	009b      	lsls	r3, r3, #2
    393e:	f003 0304 	and.w	r3, r3, #4
    3942:	4919      	ldr	r1, [pc, #100]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3944:	4313      	orrs	r3, r2
    3946:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    394a:	aa05      	add	r2, sp, #20
    394c:	a906      	add	r1, sp, #24
    394e:	a807      	add	r0, sp, #28
    3950:	f24c 3350 	movw	r3, #50000	; 0xc350
    3954:	f7ff f8f8 	bl	2b48 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3958:	4b13      	ldr	r3, [pc, #76]	; (39a8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    395a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    395e:	0e1b      	lsrs	r3, r3, #24
    3960:	f003 0301 	and.w	r3, r3, #1
    3964:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3966:	9a05      	ldr	r2, [sp, #20]
    3968:	a906      	add	r1, sp, #24
    396a:	ab07      	add	r3, sp, #28
    396c:	4618      	mov	r0, r3
    396e:	f7ff f905 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3972:	4603      	mov	r3, r0
    3974:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3978:	9b08      	ldr	r3, [sp, #32]
    397a:	2b00      	cmp	r3, #0
    397c:	d106      	bne.n	398c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    397e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3982:	f083 0301 	eor.w	r3, r3, #1
    3986:	b2db      	uxtb	r3, r3
    3988:	2b00      	cmp	r3, #0
    398a:	d1e5      	bne.n	3958 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    398c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3990:	2b00      	cmp	r3, #0
    3992:	d004      	beq.n	399e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3994:	9b02      	ldr	r3, [sp, #8]
    3996:	4619      	mov	r1, r3
    3998:	2001      	movs	r0, #1
    399a:	f7ff f8c5 	bl	2b28 <Clock_Ip_ReportClockErrors>
        }
    }
}
    399e:	bf00      	nop
    39a0:	b00b      	add	sp, #44	; 0x2c
    39a2:	f85d fb04 	ldr.w	pc, [sp], #4
    39a6:	bf00      	nop
    39a8:	40064000 	.word	0x40064000

000039ac <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    39ac:	b500      	push	{lr}
    39ae:	b089      	sub	sp, #36	; 0x24
    39b0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    39b2:	2300      	movs	r3, #0
    39b4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39b8:	4b1f      	ldr	r3, [pc, #124]	; (3a38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39be:	4a1e      	ldr	r2, [pc, #120]	; (3a38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39c0:	f043 0301 	orr.w	r3, r3, #1
    39c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    39c8:	4b1b      	ldr	r3, [pc, #108]	; (3a38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ce:	4a1a      	ldr	r2, [pc, #104]	; (3a38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39d0:	f043 0304 	orr.w	r3, r3, #4
    39d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39d8:	aa03      	add	r2, sp, #12
    39da:	a904      	add	r1, sp, #16
    39dc:	a805      	add	r0, sp, #20
    39de:	f24c 3350 	movw	r3, #50000	; 0xc350
    39e2:	f7ff f8b1 	bl	2b48 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39e6:	4b14      	ldr	r3, [pc, #80]	; (3a38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ec:	0e1b      	lsrs	r3, r3, #24
    39ee:	f003 0301 	and.w	r3, r3, #1
    39f2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39f4:	9a03      	ldr	r2, [sp, #12]
    39f6:	a904      	add	r1, sp, #16
    39f8:	ab05      	add	r3, sp, #20
    39fa:	4618      	mov	r0, r3
    39fc:	f7ff f8be 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3a00:	4603      	mov	r3, r0
    3a02:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a06:	9b06      	ldr	r3, [sp, #24]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d106      	bne.n	3a1a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a10:	f083 0301 	eor.w	r3, r3, #1
    3a14:	b2db      	uxtb	r3, r3
    3a16:	2b00      	cmp	r3, #0
    3a18:	d1e5      	bne.n	39e6 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3a1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d005      	beq.n	3a2e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a22:	9b01      	ldr	r3, [sp, #4]
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	4619      	mov	r1, r3
    3a28:	2001      	movs	r0, #1
    3a2a:	f7ff f87d 	bl	2b28 <Clock_Ip_ReportClockErrors>
    }
}
    3a2e:	bf00      	nop
    3a30:	b009      	add	sp, #36	; 0x24
    3a32:	f85d fb04 	ldr.w	pc, [sp], #4
    3a36:	bf00      	nop
    3a38:	40064000 	.word	0x40064000

00003a3c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3a3c:	b082      	sub	sp, #8
    3a3e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3a40:	4b09      	ldr	r3, [pc, #36]	; (3a68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a46:	4a08      	ldr	r2, [pc, #32]	; (3a68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a48:	f023 0301 	bic.w	r3, r3, #1
    3a4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a50:	4b05      	ldr	r3, [pc, #20]	; (3a68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a56:	4a04      	ldr	r2, [pc, #16]	; (3a68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a58:	f023 0304 	bic.w	r3, r3, #4
    3a5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a60:	bf00      	nop
    3a62:	b002      	add	sp, #8
    3a64:	4770      	bx	lr
    3a66:	bf00      	nop
    3a68:	40064000 	.word	0x40064000

00003a6c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a6c:	b082      	sub	sp, #8
    3a6e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3a70:	4b0f      	ldr	r3, [pc, #60]	; (3ab0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a76:	4a0e      	ldr	r2, [pc, #56]	; (3ab0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3a7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a80:	4b0b      	ldr	r3, [pc, #44]	; (3ab0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a86:	4a0a      	ldr	r2, [pc, #40]	; (3ab0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a88:	f023 0304 	bic.w	r3, r3, #4
    3a8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3a90:	4b07      	ldr	r3, [pc, #28]	; (3ab0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a96:	9b01      	ldr	r3, [sp, #4]
    3a98:	7a1b      	ldrb	r3, [r3, #8]
    3a9a:	009b      	lsls	r3, r3, #2
    3a9c:	f003 0304 	and.w	r3, r3, #4
    3aa0:	4903      	ldr	r1, [pc, #12]	; (3ab0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3aa2:	4313      	orrs	r3, r2
    3aa4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3aa8:	bf00      	nop
    3aaa:	b002      	add	sp, #8
    3aac:	4770      	bx	lr
    3aae:	bf00      	nop
    3ab0:	40064000 	.word	0x40064000

00003ab4 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ab4:	b082      	sub	sp, #8
    3ab6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3ab8:	9b01      	ldr	r3, [sp, #4]
    3aba:	889b      	ldrh	r3, [r3, #4]
    3abc:	2b01      	cmp	r3, #1
    3abe:	d107      	bne.n	3ad0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ac6:	4a04      	ldr	r2, [pc, #16]	; (3ad8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ac8:	f043 0304 	orr.w	r3, r3, #4
    3acc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ad0:	bf00      	nop
    3ad2:	b002      	add	sp, #8
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	40064000 	.word	0x40064000

00003adc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3adc:	b082      	sub	sp, #8
    3ade:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ae0:	4b05      	ldr	r3, [pc, #20]	; (3af8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ae6:	4a04      	ldr	r2, [pc, #16]	; (3af8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ae8:	f023 0304 	bic.w	r3, r3, #4
    3aec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3af0:	bf00      	nop
    3af2:	b002      	add	sp, #8
    3af4:	4770      	bx	lr
    3af6:	bf00      	nop
    3af8:	40064000 	.word	0x40064000

00003afc <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3afc:	b082      	sub	sp, #8
    3afe:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b00:	4b0f      	ldr	r3, [pc, #60]	; (3b40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b06:	4a0e      	ldr	r2, [pc, #56]	; (3b40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b10:	4b0b      	ldr	r3, [pc, #44]	; (3b40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b16:	4a0a      	ldr	r2, [pc, #40]	; (3b40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b18:	f023 0302 	bic.w	r3, r3, #2
    3b1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3b20:	4b07      	ldr	r3, [pc, #28]	; (3b40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b26:	9b01      	ldr	r3, [sp, #4]
    3b28:	7a5b      	ldrb	r3, [r3, #9]
    3b2a:	005b      	lsls	r3, r3, #1
    3b2c:	f003 0302 	and.w	r3, r3, #2
    3b30:	4903      	ldr	r1, [pc, #12]	; (3b40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b32:	4313      	orrs	r3, r2
    3b34:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b38:	bf00      	nop
    3b3a:	b002      	add	sp, #8
    3b3c:	4770      	bx	lr
    3b3e:	bf00      	nop
    3b40:	40064000 	.word	0x40064000

00003b44 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b44:	b082      	sub	sp, #8
    3b46:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b48:	9b01      	ldr	r3, [sp, #4]
    3b4a:	889b      	ldrh	r3, [r3, #4]
    3b4c:	2b01      	cmp	r3, #1
    3b4e:	d107      	bne.n	3b60 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3b50:	4b05      	ldr	r3, [pc, #20]	; (3b68 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b56:	4a04      	ldr	r2, [pc, #16]	; (3b68 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b58:	f043 0302 	orr.w	r3, r3, #2
    3b5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b60:	bf00      	nop
    3b62:	b002      	add	sp, #8
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop
    3b68:	40064000 	.word	0x40064000

00003b6c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3b6c:	b082      	sub	sp, #8
    3b6e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b70:	4b05      	ldr	r3, [pc, #20]	; (3b88 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b76:	4a04      	ldr	r2, [pc, #16]	; (3b88 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b78:	f023 0302 	bic.w	r3, r3, #2
    3b7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b80:	bf00      	nop
    3b82:	b002      	add	sp, #8
    3b84:	4770      	bx	lr
    3b86:	bf00      	nop
    3b88:	40064000 	.word	0x40064000

00003b8c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b8c:	b500      	push	{lr}
    3b8e:	b08b      	sub	sp, #44	; 0x2c
    3b90:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b92:	9b01      	ldr	r3, [sp, #4]
    3b94:	681a      	ldr	r2, [r3, #0]
    3b96:	4975      	ldr	r1, [pc, #468]	; (3d6c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3b98:	4613      	mov	r3, r2
    3b9a:	00db      	lsls	r3, r3, #3
    3b9c:	4413      	add	r3, r2
    3b9e:	440b      	add	r3, r1
    3ba0:	781b      	ldrb	r3, [r3, #0]
    3ba2:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3ba4:	2300      	movs	r3, #0
    3ba6:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3baa:	2300      	movs	r3, #0
    3bac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3bb0:	4b6f      	ldr	r3, [pc, #444]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bb6:	4a6e      	ldr	r2, [pc, #440]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bb8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3bbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3bc0:	4b6b      	ldr	r3, [pc, #428]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d07d      	beq.n	3cca <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bce:	9b01      	ldr	r3, [sp, #4]
    3bd0:	79db      	ldrb	r3, [r3, #7]
    3bd2:	461a      	mov	r2, r3
    3bd4:	4b66      	ldr	r3, [pc, #408]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bd6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3bda:	f003 0303 	and.w	r3, r3, #3
    3bde:	429a      	cmp	r2, r3
    3be0:	d10b      	bne.n	3bfa <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3be2:	9b01      	ldr	r3, [sp, #4]
    3be4:	799b      	ldrb	r3, [r3, #6]
    3be6:	461a      	mov	r2, r3
    3be8:	4b61      	ldr	r3, [pc, #388]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bee:	08db      	lsrs	r3, r3, #3
    3bf0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bf4:	429a      	cmp	r2, r3
    3bf6:	f000 80b4 	beq.w	3d62 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3bfa:	4b5d      	ldr	r3, [pc, #372]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c00:	f003 0301 	and.w	r3, r3, #1
    3c04:	2b00      	cmp	r3, #0
    3c06:	d105      	bne.n	3c14 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c08:	2301      	movs	r3, #1
    3c0a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c0e:	2000      	movs	r0, #0
    3c10:	f7ff fd66 	bl	36e0 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c14:	2002      	movs	r0, #2
    3c16:	f7ff fdcf 	bl	37b8 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c1a:	4b55      	ldr	r3, [pc, #340]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c1c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c20:	4a53      	ldr	r2, [pc, #332]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c22:	f023 0301 	bic.w	r3, r3, #1
    3c26:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c2a:	9b01      	ldr	r3, [sp, #4]
    3c2c:	889b      	ldrh	r3, [r3, #4]
    3c2e:	2b01      	cmp	r3, #1
    3c30:	f040 8097 	bne.w	3d62 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c34:	9b01      	ldr	r3, [sp, #4]
    3c36:	79db      	ldrb	r3, [r3, #7]
    3c38:	4a4d      	ldr	r2, [pc, #308]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c3a:	f003 0303 	and.w	r3, r3, #3
    3c3e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c42:	4b4b      	ldr	r3, [pc, #300]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c44:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c48:	9b01      	ldr	r3, [sp, #4]
    3c4a:	799b      	ldrb	r3, [r3, #6]
    3c4c:	00db      	lsls	r3, r3, #3
    3c4e:	f003 0308 	and.w	r3, r3, #8
    3c52:	4313      	orrs	r3, r2
    3c54:	4a46      	ldr	r2, [pc, #280]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c56:	f043 0301 	orr.w	r3, r3, #1
    3c5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c5e:	aa03      	add	r2, sp, #12
    3c60:	a904      	add	r1, sp, #16
    3c62:	a805      	add	r0, sp, #20
    3c64:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c68:	f7fe ff6e 	bl	2b48 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c6c:	4b40      	ldr	r3, [pc, #256]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c72:	0e1b      	lsrs	r3, r3, #24
    3c74:	f003 0301 	and.w	r3, r3, #1
    3c78:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c7a:	9a03      	ldr	r2, [sp, #12]
    3c7c:	a904      	add	r1, sp, #16
    3c7e:	ab05      	add	r3, sp, #20
    3c80:	4618      	mov	r0, r3
    3c82:	f7fe ff7b 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3c86:	4603      	mov	r3, r0
    3c88:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c8c:	9b06      	ldr	r3, [sp, #24]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d106      	bne.n	3ca0 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3c92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c96:	f083 0301 	eor.w	r3, r3, #1
    3c9a:	b2db      	uxtb	r3, r3
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d1e5      	bne.n	3c6c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3ca0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d005      	beq.n	3cb4 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3ca8:	9b01      	ldr	r3, [sp, #4]
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	4619      	mov	r1, r3
    3cae:	2001      	movs	r0, #1
    3cb0:	f7fe ff3a 	bl	2b28 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3cb4:	2003      	movs	r0, #3
    3cb6:	f7ff fd7f 	bl	37b8 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3cba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d04f      	beq.n	3d62 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3cc2:	2002      	movs	r0, #2
    3cc4:	f7ff fd26 	bl	3714 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3cc8:	e04b      	b.n	3d62 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cca:	4b29      	ldr	r3, [pc, #164]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ccc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cd0:	4a27      	ldr	r2, [pc, #156]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd2:	f023 0301 	bic.w	r3, r3, #1
    3cd6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3cda:	9b01      	ldr	r3, [sp, #4]
    3cdc:	889b      	ldrh	r3, [r3, #4]
    3cde:	2b01      	cmp	r3, #1
    3ce0:	d13f      	bne.n	3d62 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	79db      	ldrb	r3, [r3, #7]
    3ce6:	4a22      	ldr	r2, [pc, #136]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ce8:	f003 0303 	and.w	r3, r3, #3
    3cec:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cf0:	4b1f      	ldr	r3, [pc, #124]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cf6:	9b01      	ldr	r3, [sp, #4]
    3cf8:	799b      	ldrb	r3, [r3, #6]
    3cfa:	00db      	lsls	r3, r3, #3
    3cfc:	f003 0308 	and.w	r3, r3, #8
    3d00:	4313      	orrs	r3, r2
    3d02:	4a1b      	ldr	r2, [pc, #108]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d04:	f043 0301 	orr.w	r3, r3, #1
    3d08:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d0c:	aa03      	add	r2, sp, #12
    3d0e:	a904      	add	r1, sp, #16
    3d10:	a805      	add	r0, sp, #20
    3d12:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d16:	f7fe ff17 	bl	2b48 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d1a:	4b15      	ldr	r3, [pc, #84]	; (3d70 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d1c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d20:	0e1b      	lsrs	r3, r3, #24
    3d22:	f003 0301 	and.w	r3, r3, #1
    3d26:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d28:	9a03      	ldr	r2, [sp, #12]
    3d2a:	a904      	add	r1, sp, #16
    3d2c:	ab05      	add	r3, sp, #20
    3d2e:	4618      	mov	r0, r3
    3d30:	f7fe ff24 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3d34:	4603      	mov	r3, r0
    3d36:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d3a:	9b06      	ldr	r3, [sp, #24]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d106      	bne.n	3d4e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3d40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d44:	f083 0301 	eor.w	r3, r3, #1
    3d48:	b2db      	uxtb	r3, r3
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d1e5      	bne.n	3d1a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3d4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d52:	2b00      	cmp	r3, #0
    3d54:	d005      	beq.n	3d62 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d56:	9b01      	ldr	r3, [sp, #4]
    3d58:	681b      	ldr	r3, [r3, #0]
    3d5a:	4619      	mov	r1, r3
    3d5c:	2001      	movs	r0, #1
    3d5e:	f7fe fee3 	bl	2b28 <Clock_Ip_ReportClockErrors>
}
    3d62:	bf00      	nop
    3d64:	b00b      	add	sp, #44	; 0x2c
    3d66:	f85d fb04 	ldr.w	pc, [sp], #4
    3d6a:	bf00      	nop
    3d6c:	00010204 	.word	0x00010204
    3d70:	40064000 	.word	0x40064000

00003d74 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d74:	b500      	push	{lr}
    3d76:	b089      	sub	sp, #36	; 0x24
    3d78:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d7a:	2300      	movs	r3, #0
    3d7c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3d80:	9b01      	ldr	r3, [sp, #4]
    3d82:	889b      	ldrh	r3, [r3, #4]
    3d84:	2b01      	cmp	r3, #1
    3d86:	d132      	bne.n	3dee <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3d88:	4b1b      	ldr	r3, [pc, #108]	; (3df8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d8e:	4a1a      	ldr	r2, [pc, #104]	; (3df8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d90:	f043 0301 	orr.w	r3, r3, #1
    3d94:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d98:	aa03      	add	r2, sp, #12
    3d9a:	a904      	add	r1, sp, #16
    3d9c:	a805      	add	r0, sp, #20
    3d9e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3da2:	f7fe fed1 	bl	2b48 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3da6:	4b14      	ldr	r3, [pc, #80]	; (3df8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3da8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3dac:	0e1b      	lsrs	r3, r3, #24
    3dae:	f003 0301 	and.w	r3, r3, #1
    3db2:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3db4:	9a03      	ldr	r2, [sp, #12]
    3db6:	a904      	add	r1, sp, #16
    3db8:	ab05      	add	r3, sp, #20
    3dba:	4618      	mov	r0, r3
    3dbc:	f7fe fede 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3dc0:	4603      	mov	r3, r0
    3dc2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dc6:	9b06      	ldr	r3, [sp, #24]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d106      	bne.n	3dda <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3dcc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dd0:	f083 0301 	eor.w	r3, r3, #1
    3dd4:	b2db      	uxtb	r3, r3
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d1e5      	bne.n	3da6 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3dda:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d005      	beq.n	3dee <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3de2:	9b01      	ldr	r3, [sp, #4]
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	4619      	mov	r1, r3
    3de8:	2001      	movs	r0, #1
    3dea:	f7fe fe9d 	bl	2b28 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3dee:	bf00      	nop
    3df0:	b009      	add	sp, #36	; 0x24
    3df2:	f85d fb04 	ldr.w	pc, [sp], #4
    3df6:	bf00      	nop
    3df8:	40064000 	.word	0x40064000

00003dfc <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3dfc:	b082      	sub	sp, #8
    3dfe:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e00:	4b05      	ldr	r3, [pc, #20]	; (3e18 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e06:	4a04      	ldr	r2, [pc, #16]	; (3e18 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e08:	f023 0301 	bic.w	r3, r3, #1
    3e0c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3e10:	bf00      	nop
    3e12:	b002      	add	sp, #8
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop
    3e18:	40064000 	.word	0x40064000

00003e1c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3e1c:	b082      	sub	sp, #8
    3e1e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e20:	bf00      	nop
    3e22:	b002      	add	sp, #8
    3e24:	4770      	bx	lr

00003e26 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e26:	b082      	sub	sp, #8
    3e28:	9001      	str	r0, [sp, #4]
    3e2a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e2c:	bf00      	nop
    3e2e:	b002      	add	sp, #8
    3e30:	4770      	bx	lr

00003e32 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3e32:	b082      	sub	sp, #8
    3e34:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3e36:	bf00      	nop
    3e38:	b002      	add	sp, #8
    3e3a:	4770      	bx	lr

00003e3c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3e3c:	b082      	sub	sp, #8
    3e3e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e40:	bf00      	nop
    3e42:	b002      	add	sp, #8
    3e44:	4770      	bx	lr

00003e46 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3e46:	b082      	sub	sp, #8
    3e48:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3e4a:	2302      	movs	r3, #2
}
    3e4c:	4618      	mov	r0, r3
    3e4e:	b002      	add	sp, #8
    3e50:	4770      	bx	lr

00003e52 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3e52:	b082      	sub	sp, #8
    3e54:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3e56:	bf00      	nop
    3e58:	b002      	add	sp, #8
    3e5a:	4770      	bx	lr

00003e5c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e5c:	b500      	push	{lr}
    3e5e:	b083      	sub	sp, #12
    3e60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e62:	9b01      	ldr	r3, [sp, #4]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d002      	beq.n	3e6e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3e68:	9801      	ldr	r0, [sp, #4]
    3e6a:	f000 f870 	bl	3f4e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e6e:	bf00      	nop
    3e70:	b003      	add	sp, #12
    3e72:	f85d fb04 	ldr.w	pc, [sp], #4

00003e76 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e76:	b500      	push	{lr}
    3e78:	b083      	sub	sp, #12
    3e7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e7c:	9b01      	ldr	r3, [sp, #4]
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d002      	beq.n	3e88 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3e82:	9801      	ldr	r0, [sp, #4]
    3e84:	f000 f89a 	bl	3fbc <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e88:	bf00      	nop
    3e8a:	b003      	add	sp, #12
    3e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00003e90 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3e90:	b500      	push	{lr}
    3e92:	b089      	sub	sp, #36	; 0x24
    3e94:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3e96:	2301      	movs	r3, #1
    3e98:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3e9a:	2300      	movs	r3, #0
    3e9c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3ea0:	4b1e      	ldr	r3, [pc, #120]	; (3f1c <Clock_Ip_CompleteSpll+0x8c>)
    3ea2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ea6:	f003 0301 	and.w	r3, r3, #1
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d02f      	beq.n	3f0e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3eae:	aa02      	add	r2, sp, #8
    3eb0:	a903      	add	r1, sp, #12
    3eb2:	a804      	add	r0, sp, #16
    3eb4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3eb8:	f7fe fe46 	bl	2b48 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3ebc:	4b17      	ldr	r3, [pc, #92]	; (3f1c <Clock_Ip_CompleteSpll+0x8c>)
    3ebe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ec2:	0e1b      	lsrs	r3, r3, #24
    3ec4:	f003 0301 	and.w	r3, r3, #1
    3ec8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3eca:	9a02      	ldr	r2, [sp, #8]
    3ecc:	a903      	add	r1, sp, #12
    3ece:	ab04      	add	r3, sp, #16
    3ed0:	4618      	mov	r0, r3
    3ed2:	f7fe fe53 	bl	2b7c <Clock_Ip_TimeoutExpired>
    3ed6:	4603      	mov	r3, r0
    3ed8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3edc:	9b05      	ldr	r3, [sp, #20]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d106      	bne.n	3ef0 <Clock_Ip_CompleteSpll+0x60>
    3ee2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ee6:	f083 0301 	eor.w	r3, r3, #1
    3eea:	b2db      	uxtb	r3, r3
    3eec:	2b00      	cmp	r3, #0
    3eee:	d1e5      	bne.n	3ebc <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3ef0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ef4:	f083 0301 	eor.w	r3, r3, #1
    3ef8:	b2db      	uxtb	r3, r3
    3efa:	2b00      	cmp	r3, #0
    3efc:	d002      	beq.n	3f04 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3efe:	2302      	movs	r3, #2
    3f00:	9307      	str	r3, [sp, #28]
    3f02:	e006      	b.n	3f12 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f04:	9901      	ldr	r1, [sp, #4]
    3f06:	2001      	movs	r0, #1
    3f08:	f7fe fe0e 	bl	2b28 <Clock_Ip_ReportClockErrors>
    3f0c:	e001      	b.n	3f12 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f0e:	2300      	movs	r3, #0
    3f10:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3f12:	9b07      	ldr	r3, [sp, #28]
}
    3f14:	4618      	mov	r0, r3
    3f16:	b009      	add	sp, #36	; 0x24
    3f18:	f85d fb04 	ldr.w	pc, [sp], #4
    3f1c:	40064000 	.word	0x40064000

00003f20 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3f20:	b500      	push	{lr}
    3f22:	b083      	sub	sp, #12
    3f24:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f26:	9801      	ldr	r0, [sp, #4]
    3f28:	f000 f886 	bl	4038 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f2c:	bf00      	nop
    3f2e:	b003      	add	sp, #12
    3f30:	f85d fb04 	ldr.w	pc, [sp], #4

00003f34 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3f34:	b500      	push	{lr}
    3f36:	b083      	sub	sp, #12
    3f38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f3a:	9b01      	ldr	r3, [sp, #4]
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d002      	beq.n	3f46 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3f40:	9801      	ldr	r0, [sp, #4]
    3f42:	f000 f891 	bl	4068 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f46:	bf00      	nop
    3f48:	b003      	add	sp, #12
    3f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00003f4e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f4e:	b082      	sub	sp, #8
    3f50:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f52:	4b19      	ldr	r3, [pc, #100]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f54:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f58:	4a17      	ldr	r2, [pc, #92]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f5e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3f62:	4b15      	ldr	r3, [pc, #84]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f64:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f68:	4a13      	ldr	r2, [pc, #76]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3f6e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3f72:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f74:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f78:	4a0f      	ldr	r2, [pc, #60]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3f7e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3f82:	4b0d      	ldr	r3, [pc, #52]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f84:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f88:	4a0b      	ldr	r2, [pc, #44]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f8a:	f023 0301 	bic.w	r3, r3, #1
    3f8e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3f92:	4b09      	ldr	r3, [pc, #36]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f94:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f98:	4a07      	ldr	r2, [pc, #28]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3f9e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3fa2:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fa4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3fa8:	4a03      	ldr	r2, [pc, #12]	; (3fb8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3faa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3fae:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3fb2:	bf00      	nop
    3fb4:	b002      	add	sp, #8
    3fb6:	4770      	bx	lr
    3fb8:	40064000 	.word	0x40064000

00003fbc <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fbc:	b082      	sub	sp, #8
    3fbe:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3fc0:	9b01      	ldr	r3, [sp, #4]
    3fc2:	889b      	ldrh	r3, [r3, #4]
    3fc4:	2b01      	cmp	r3, #1
    3fc6:	d12f      	bne.n	4028 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fc8:	4b1a      	ldr	r3, [pc, #104]	; (4034 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fca:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3fce:	9b01      	ldr	r3, [sp, #4]
    3fd0:	7b5b      	ldrb	r3, [r3, #13]
    3fd2:	3b01      	subs	r3, #1
    3fd4:	021b      	lsls	r3, r3, #8
    3fd6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3fda:	9b01      	ldr	r3, [sp, #4]
    3fdc:	7d1b      	ldrb	r3, [r3, #20]
    3fde:	3b10      	subs	r3, #16
    3fe0:	041b      	lsls	r3, r3, #16
    3fe2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fe6:	430b      	orrs	r3, r1
    3fe8:	4912      	ldr	r1, [pc, #72]	; (4034 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fea:	4313      	orrs	r3, r2
    3fec:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3ff0:	9b01      	ldr	r3, [sp, #4]
    3ff2:	7fdb      	ldrb	r3, [r3, #31]
    3ff4:	2b02      	cmp	r3, #2
    3ff6:	d011      	beq.n	401c <Clock_Ip_SetSpll_TrustedCall+0x60>
    3ff8:	2b02      	cmp	r3, #2
    3ffa:	dc17      	bgt.n	402c <Clock_Ip_SetSpll_TrustedCall+0x70>
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d002      	beq.n	4006 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4000:	2b01      	cmp	r3, #1
    4002:	d005      	beq.n	4010 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4004:	e012      	b.n	402c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4006:	4b0b      	ldr	r3, [pc, #44]	; (4034 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4008:	2200      	movs	r2, #0
    400a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    400e:	e00e      	b.n	402e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4010:	4b08      	ldr	r3, [pc, #32]	; (4034 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4016:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    401a:	e008      	b.n	402e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    401c:	4b05      	ldr	r3, [pc, #20]	; (4034 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    401e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4022:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4026:	e002      	b.n	402e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4028:	bf00      	nop
    402a:	e000      	b.n	402e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    402c:	bf00      	nop
}
    402e:	bf00      	nop
    4030:	b002      	add	sp, #8
    4032:	4770      	bx	lr
    4034:	40064000 	.word	0x40064000

00004038 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4038:	b082      	sub	sp, #8
    403a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    403c:	4b09      	ldr	r3, [pc, #36]	; (4064 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    403e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4042:	4a08      	ldr	r2, [pc, #32]	; (4064 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4044:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4048:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    404c:	4b05      	ldr	r3, [pc, #20]	; (4064 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    404e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4052:	4a04      	ldr	r2, [pc, #16]	; (4064 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4054:	f023 0301 	bic.w	r3, r3, #1
    4058:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    405c:	bf00      	nop
    405e:	b002      	add	sp, #8
    4060:	4770      	bx	lr
    4062:	bf00      	nop
    4064:	40064000 	.word	0x40064000

00004068 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4068:	b082      	sub	sp, #8
    406a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    406c:	9b01      	ldr	r3, [sp, #4]
    406e:	889b      	ldrh	r3, [r3, #4]
    4070:	2b01      	cmp	r3, #1
    4072:	d107      	bne.n	4084 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4074:	4b05      	ldr	r3, [pc, #20]	; (408c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4076:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    407a:	4a04      	ldr	r2, [pc, #16]	; (408c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    407c:	f043 0301 	orr.w	r3, r3, #1
    4080:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4084:	bf00      	nop
    4086:	b002      	add	sp, #8
    4088:	4770      	bx	lr
    408a:	bf00      	nop
    408c:	40064000 	.word	0x40064000

00004090 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4090:	b082      	sub	sp, #8
    4092:	9001      	str	r0, [sp, #4]
    4094:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4096:	bf00      	nop
    4098:	b002      	add	sp, #8
    409a:	4770      	bx	lr

0000409c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    409c:	b082      	sub	sp, #8
    409e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40a0:	bf00      	nop
    40a2:	b002      	add	sp, #8
    40a4:	4770      	bx	lr

000040a6 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40a6:	b500      	push	{lr}
    40a8:	b083      	sub	sp, #12
    40aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40ac:	9b01      	ldr	r3, [sp, #4]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d002      	beq.n	40b8 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    40b2:	9801      	ldr	r0, [sp, #4]
    40b4:	f000 f8ee 	bl	4294 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40b8:	bf00      	nop
    40ba:	b003      	add	sp, #12
    40bc:	f85d fb04 	ldr.w	pc, [sp], #4

000040c0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40c0:	b500      	push	{lr}
    40c2:	b083      	sub	sp, #12
    40c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d002      	beq.n	40d2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    40cc:	9801      	ldr	r0, [sp, #4]
    40ce:	f000 f8ff 	bl	42d0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40d2:	bf00      	nop
    40d4:	b003      	add	sp, #12
    40d6:	f85d fb04 	ldr.w	pc, [sp], #4

000040da <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    40da:	b500      	push	{lr}
    40dc:	b083      	sub	sp, #12
    40de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40e0:	9b01      	ldr	r3, [sp, #4]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d002      	beq.n	40ec <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    40e6:	9801      	ldr	r0, [sp, #4]
    40e8:	f000 f912 	bl	4310 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40ec:	bf00      	nop
    40ee:	b003      	add	sp, #12
    40f0:	f85d fb04 	ldr.w	pc, [sp], #4

000040f4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40f4:	b500      	push	{lr}
    40f6:	b083      	sub	sp, #12
    40f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40fa:	9b01      	ldr	r3, [sp, #4]
    40fc:	2b00      	cmp	r3, #0
    40fe:	d002      	beq.n	4106 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4100:	9801      	ldr	r0, [sp, #4]
    4102:	f000 f925 	bl	4350 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4106:	bf00      	nop
    4108:	b003      	add	sp, #12
    410a:	f85d fb04 	ldr.w	pc, [sp], #4

0000410e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    410e:	b500      	push	{lr}
    4110:	b083      	sub	sp, #12
    4112:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4114:	9b01      	ldr	r3, [sp, #4]
    4116:	2b00      	cmp	r3, #0
    4118:	d002      	beq.n	4120 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    411a:	9801      	ldr	r0, [sp, #4]
    411c:	f000 f936 	bl	438c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4120:	bf00      	nop
    4122:	b003      	add	sp, #12
    4124:	f85d fb04 	ldr.w	pc, [sp], #4

00004128 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4128:	b500      	push	{lr}
    412a:	b083      	sub	sp, #12
    412c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    412e:	9b01      	ldr	r3, [sp, #4]
    4130:	2b00      	cmp	r3, #0
    4132:	d002      	beq.n	413a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4134:	9801      	ldr	r0, [sp, #4]
    4136:	f000 f949 	bl	43cc <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    413a:	bf00      	nop
    413c:	b003      	add	sp, #12
    413e:	f85d fb04 	ldr.w	pc, [sp], #4

00004142 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4142:	b500      	push	{lr}
    4144:	b083      	sub	sp, #12
    4146:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4148:	9b01      	ldr	r3, [sp, #4]
    414a:	2b00      	cmp	r3, #0
    414c:	d002      	beq.n	4154 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    414e:	9801      	ldr	r0, [sp, #4]
    4150:	f000 f958 	bl	4404 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4154:	bf00      	nop
    4156:	b003      	add	sp, #12
    4158:	f85d fb04 	ldr.w	pc, [sp], #4

0000415c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    415c:	b500      	push	{lr}
    415e:	b083      	sub	sp, #12
    4160:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4162:	9b01      	ldr	r3, [sp, #4]
    4164:	2b00      	cmp	r3, #0
    4166:	d002      	beq.n	416e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4168:	9801      	ldr	r0, [sp, #4]
    416a:	f000 f969 	bl	4440 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    416e:	bf00      	nop
    4170:	b003      	add	sp, #12
    4172:	f85d fb04 	ldr.w	pc, [sp], #4

00004176 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4176:	b500      	push	{lr}
    4178:	b083      	sub	sp, #12
    417a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    417c:	9b01      	ldr	r3, [sp, #4]
    417e:	2b00      	cmp	r3, #0
    4180:	d002      	beq.n	4188 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4182:	9801      	ldr	r0, [sp, #4]
    4184:	f000 f978 	bl	4478 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4188:	bf00      	nop
    418a:	b003      	add	sp, #12
    418c:	f85d fb04 	ldr.w	pc, [sp], #4

00004190 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4190:	b500      	push	{lr}
    4192:	b083      	sub	sp, #12
    4194:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4196:	9b01      	ldr	r3, [sp, #4]
    4198:	2b00      	cmp	r3, #0
    419a:	d002      	beq.n	41a2 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    419c:	9801      	ldr	r0, [sp, #4]
    419e:	f000 f989 	bl	44b4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a2:	bf00      	nop
    41a4:	b003      	add	sp, #12
    41a6:	f85d fb04 	ldr.w	pc, [sp], #4

000041aa <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41aa:	b500      	push	{lr}
    41ac:	b083      	sub	sp, #12
    41ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b0:	9b01      	ldr	r3, [sp, #4]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d002      	beq.n	41bc <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    41b6:	9801      	ldr	r0, [sp, #4]
    41b8:	f000 f998 	bl	44ec <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41bc:	bf00      	nop
    41be:	b003      	add	sp, #12
    41c0:	f85d fb04 	ldr.w	pc, [sp], #4

000041c4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41c4:	b500      	push	{lr}
    41c6:	b083      	sub	sp, #12
    41c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ca:	9b01      	ldr	r3, [sp, #4]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d002      	beq.n	41d6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    41d0:	9801      	ldr	r0, [sp, #4]
    41d2:	f000 f9a9 	bl	4528 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41d6:	bf00      	nop
    41d8:	b003      	add	sp, #12
    41da:	f85d fb04 	ldr.w	pc, [sp], #4

000041de <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41de:	b500      	push	{lr}
    41e0:	b083      	sub	sp, #12
    41e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41e4:	9b01      	ldr	r3, [sp, #4]
    41e6:	2b00      	cmp	r3, #0
    41e8:	d002      	beq.n	41f0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    41ea:	9801      	ldr	r0, [sp, #4]
    41ec:	f000 f9e6 	bl	45bc <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f0:	bf00      	nop
    41f2:	b003      	add	sp, #12
    41f4:	f85d fb04 	ldr.w	pc, [sp], #4

000041f8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41f8:	b500      	push	{lr}
    41fa:	b083      	sub	sp, #12
    41fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41fe:	9b01      	ldr	r3, [sp, #4]
    4200:	2b00      	cmp	r3, #0
    4202:	d002      	beq.n	420a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4204:	9801      	ldr	r0, [sp, #4]
    4206:	f000 fa25 	bl	4654 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    420a:	bf00      	nop
    420c:	b003      	add	sp, #12
    420e:	f85d fb04 	ldr.w	pc, [sp], #4

00004212 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4212:	b500      	push	{lr}
    4214:	b083      	sub	sp, #12
    4216:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4218:	9b01      	ldr	r3, [sp, #4]
    421a:	2b00      	cmp	r3, #0
    421c:	d002      	beq.n	4224 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    421e:	9801      	ldr	r0, [sp, #4]
    4220:	f000 fa2a 	bl	4678 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4224:	bf00      	nop
    4226:	b003      	add	sp, #12
    4228:	f85d fb04 	ldr.w	pc, [sp], #4

0000422c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    422c:	b500      	push	{lr}
    422e:	b083      	sub	sp, #12
    4230:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4232:	9b01      	ldr	r3, [sp, #4]
    4234:	2b00      	cmp	r3, #0
    4236:	d002      	beq.n	423e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4238:	9801      	ldr	r0, [sp, #4]
    423a:	f000 fa3b 	bl	46b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    423e:	bf00      	nop
    4240:	b003      	add	sp, #12
    4242:	f85d fb04 	ldr.w	pc, [sp], #4

00004246 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4246:	b500      	push	{lr}
    4248:	b083      	sub	sp, #12
    424a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    424c:	9b01      	ldr	r3, [sp, #4]
    424e:	2b00      	cmp	r3, #0
    4250:	d002      	beq.n	4258 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4252:	9801      	ldr	r0, [sp, #4]
    4254:	f000 fa56 	bl	4704 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4258:	bf00      	nop
    425a:	b003      	add	sp, #12
    425c:	f85d fb04 	ldr.w	pc, [sp], #4

00004260 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4260:	b500      	push	{lr}
    4262:	b083      	sub	sp, #12
    4264:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	2b00      	cmp	r3, #0
    426a:	d002      	beq.n	4272 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    426c:	9801      	ldr	r0, [sp, #4]
    426e:	f000 fa79 	bl	4764 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4272:	bf00      	nop
    4274:	b003      	add	sp, #12
    4276:	f85d fb04 	ldr.w	pc, [sp], #4

0000427a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    427a:	b500      	push	{lr}
    427c:	b083      	sub	sp, #12
    427e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4280:	9b01      	ldr	r3, [sp, #4]
    4282:	2b00      	cmp	r3, #0
    4284:	d002      	beq.n	428c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4286:	9801      	ldr	r0, [sp, #4]
    4288:	f000 fa8a 	bl	47a0 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    428c:	bf00      	nop
    428e:	b003      	add	sp, #12
    4290:	f85d fb04 	ldr.w	pc, [sp], #4

00004294 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4294:	b084      	sub	sp, #16
    4296:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4298:	4b0b      	ldr	r3, [pc, #44]	; (42c8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    429a:	795b      	ldrb	r3, [r3, #5]
    429c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    429e:	4b0b      	ldr	r3, [pc, #44]	; (42cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    42a0:	695b      	ldr	r3, [r3, #20]
    42a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42a4:	9b02      	ldr	r3, [sp, #8]
    42a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42aa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42ac:	9b03      	ldr	r3, [sp, #12]
    42ae:	061b      	lsls	r3, r3, #24
    42b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42b4:	9a02      	ldr	r2, [sp, #8]
    42b6:	4313      	orrs	r3, r2
    42b8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42ba:	4a04      	ldr	r2, [pc, #16]	; (42cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    42bc:	9b02      	ldr	r3, [sp, #8]
    42be:	6153      	str	r3, [r2, #20]
}
    42c0:	bf00      	nop
    42c2:	b004      	add	sp, #16
    42c4:	4770      	bx	lr
    42c6:	bf00      	nop
    42c8:	0001056c 	.word	0x0001056c
    42cc:	40064000 	.word	0x40064000

000042d0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42d0:	b084      	sub	sp, #16
    42d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42d4:	9b01      	ldr	r3, [sp, #4]
    42d6:	685b      	ldr	r3, [r3, #4]
    42d8:	4a0b      	ldr	r2, [pc, #44]	; (4308 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    42da:	5cd3      	ldrb	r3, [r2, r3]
    42dc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    42de:	4b0b      	ldr	r3, [pc, #44]	; (430c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42e0:	695b      	ldr	r3, [r3, #20]
    42e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42e4:	9b02      	ldr	r3, [sp, #8]
    42e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42ea:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42ec:	9b03      	ldr	r3, [sp, #12]
    42ee:	061b      	lsls	r3, r3, #24
    42f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42f4:	9a02      	ldr	r2, [sp, #8]
    42f6:	4313      	orrs	r3, r2
    42f8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42fa:	4a04      	ldr	r2, [pc, #16]	; (430c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42fc:	9b02      	ldr	r3, [sp, #8]
    42fe:	6153      	str	r3, [r2, #20]
}
    4300:	bf00      	nop
    4302:	b004      	add	sp, #16
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	0001056c 	.word	0x0001056c
    430c:	40064000 	.word	0x40064000

00004310 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4310:	b084      	sub	sp, #16
    4312:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4314:	9b01      	ldr	r3, [sp, #4]
    4316:	685b      	ldr	r3, [r3, #4]
    4318:	4a0b      	ldr	r2, [pc, #44]	; (4348 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    431a:	5cd3      	ldrb	r3, [r2, r3]
    431c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    431e:	4b0b      	ldr	r3, [pc, #44]	; (434c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4320:	699b      	ldr	r3, [r3, #24]
    4322:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4324:	9b02      	ldr	r3, [sp, #8]
    4326:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    432a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    432c:	9b03      	ldr	r3, [sp, #12]
    432e:	061b      	lsls	r3, r3, #24
    4330:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4334:	9a02      	ldr	r2, [sp, #8]
    4336:	4313      	orrs	r3, r2
    4338:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    433a:	4a04      	ldr	r2, [pc, #16]	; (434c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    433c:	9b02      	ldr	r3, [sp, #8]
    433e:	6193      	str	r3, [r2, #24]
}
    4340:	bf00      	nop
    4342:	b004      	add	sp, #16
    4344:	4770      	bx	lr
    4346:	bf00      	nop
    4348:	0001056c 	.word	0x0001056c
    434c:	40064000 	.word	0x40064000

00004350 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4350:	b084      	sub	sp, #16
    4352:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4354:	4b0b      	ldr	r3, [pc, #44]	; (4384 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4356:	795b      	ldrb	r3, [r3, #5]
    4358:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    435a:	4b0b      	ldr	r3, [pc, #44]	; (4388 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    435c:	69db      	ldr	r3, [r3, #28]
    435e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4360:	9b02      	ldr	r3, [sp, #8]
    4362:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4366:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4368:	9b03      	ldr	r3, [sp, #12]
    436a:	061b      	lsls	r3, r3, #24
    436c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4370:	9a02      	ldr	r2, [sp, #8]
    4372:	4313      	orrs	r3, r2
    4374:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4376:	4a04      	ldr	r2, [pc, #16]	; (4388 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4378:	9b02      	ldr	r3, [sp, #8]
    437a:	61d3      	str	r3, [r2, #28]
}
    437c:	bf00      	nop
    437e:	b004      	add	sp, #16
    4380:	4770      	bx	lr
    4382:	bf00      	nop
    4384:	0001056c 	.word	0x0001056c
    4388:	40064000 	.word	0x40064000

0000438c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    438c:	b084      	sub	sp, #16
    438e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	685b      	ldr	r3, [r3, #4]
    4394:	4a0b      	ldr	r2, [pc, #44]	; (43c4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4396:	5cd3      	ldrb	r3, [r2, r3]
    4398:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    439a:	4b0b      	ldr	r3, [pc, #44]	; (43c8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    439c:	69db      	ldr	r3, [r3, #28]
    439e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43a0:	9b02      	ldr	r3, [sp, #8]
    43a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43a6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43a8:	9b03      	ldr	r3, [sp, #12]
    43aa:	061b      	lsls	r3, r3, #24
    43ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43b0:	9a02      	ldr	r2, [sp, #8]
    43b2:	4313      	orrs	r3, r2
    43b4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43b6:	4a04      	ldr	r2, [pc, #16]	; (43c8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    43b8:	9b02      	ldr	r3, [sp, #8]
    43ba:	61d3      	str	r3, [r2, #28]
}
    43bc:	bf00      	nop
    43be:	b004      	add	sp, #16
    43c0:	4770      	bx	lr
    43c2:	bf00      	nop
    43c4:	0001056c 	.word	0x0001056c
    43c8:	40064000 	.word	0x40064000

000043cc <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43cc:	b084      	sub	sp, #16
    43ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43d0:	4b0a      	ldr	r3, [pc, #40]	; (43fc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    43d2:	7b9b      	ldrb	r3, [r3, #14]
    43d4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43d6:	4b0a      	ldr	r3, [pc, #40]	; (4400 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43d8:	691b      	ldr	r3, [r3, #16]
    43da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    43dc:	9b02      	ldr	r3, [sp, #8]
    43de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    43e2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    43e4:	9b03      	ldr	r3, [sp, #12]
    43e6:	011b      	lsls	r3, r3, #4
    43e8:	9a02      	ldr	r2, [sp, #8]
    43ea:	4313      	orrs	r3, r2
    43ec:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43ee:	4a04      	ldr	r2, [pc, #16]	; (4400 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43f0:	9b02      	ldr	r3, [sp, #8]
    43f2:	6113      	str	r3, [r2, #16]
}
    43f4:	bf00      	nop
    43f6:	b004      	add	sp, #16
    43f8:	4770      	bx	lr
    43fa:	bf00      	nop
    43fc:	00010514 	.word	0x00010514
    4400:	40048000 	.word	0x40048000

00004404 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4404:	b084      	sub	sp, #16
    4406:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4408:	9b01      	ldr	r3, [sp, #4]
    440a:	685b      	ldr	r3, [r3, #4]
    440c:	4a0a      	ldr	r2, [pc, #40]	; (4438 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    440e:	5cd3      	ldrb	r3, [r2, r3]
    4410:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4412:	4b0a      	ldr	r3, [pc, #40]	; (443c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4414:	691b      	ldr	r3, [r3, #16]
    4416:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4418:	9b02      	ldr	r3, [sp, #8]
    441a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    441e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4420:	9b03      	ldr	r3, [sp, #12]
    4422:	011b      	lsls	r3, r3, #4
    4424:	9a02      	ldr	r2, [sp, #8]
    4426:	4313      	orrs	r3, r2
    4428:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    442a:	4a04      	ldr	r2, [pc, #16]	; (443c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    442c:	9b02      	ldr	r3, [sp, #8]
    442e:	6113      	str	r3, [r2, #16]
}
    4430:	bf00      	nop
    4432:	b004      	add	sp, #16
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	00010514 	.word	0x00010514
    443c:	40048000 	.word	0x40048000

00004440 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4440:	b084      	sub	sp, #16
    4442:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4444:	4b0a      	ldr	r3, [pc, #40]	; (4470 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4446:	785b      	ldrb	r3, [r3, #1]
    4448:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    444a:	4b0a      	ldr	r3, [pc, #40]	; (4474 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    444c:	691b      	ldr	r3, [r3, #16]
    444e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4450:	9b02      	ldr	r3, [sp, #8]
    4452:	f023 030c 	bic.w	r3, r3, #12
    4456:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4458:	9b03      	ldr	r3, [sp, #12]
    445a:	009b      	lsls	r3, r3, #2
    445c:	9a02      	ldr	r2, [sp, #8]
    445e:	4313      	orrs	r3, r2
    4460:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4462:	4a04      	ldr	r2, [pc, #16]	; (4474 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4464:	9b02      	ldr	r3, [sp, #8]
    4466:	6113      	str	r3, [r2, #16]
}
    4468:	bf00      	nop
    446a:	b004      	add	sp, #16
    446c:	4770      	bx	lr
    446e:	bf00      	nop
    4470:	000105cc 	.word	0x000105cc
    4474:	40048000 	.word	0x40048000

00004478 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4478:	b084      	sub	sp, #16
    447a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    447c:	9b01      	ldr	r3, [sp, #4]
    447e:	685b      	ldr	r3, [r3, #4]
    4480:	4a0a      	ldr	r2, [pc, #40]	; (44ac <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4482:	5cd3      	ldrb	r3, [r2, r3]
    4484:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4486:	4b0a      	ldr	r3, [pc, #40]	; (44b0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4488:	691b      	ldr	r3, [r3, #16]
    448a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    448c:	9b02      	ldr	r3, [sp, #8]
    448e:	f023 030c 	bic.w	r3, r3, #12
    4492:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4494:	9b03      	ldr	r3, [sp, #12]
    4496:	009b      	lsls	r3, r3, #2
    4498:	9a02      	ldr	r2, [sp, #8]
    449a:	4313      	orrs	r3, r2
    449c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    449e:	4a04      	ldr	r2, [pc, #16]	; (44b0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    44a0:	9b02      	ldr	r3, [sp, #8]
    44a2:	6113      	str	r3, [r2, #16]
}
    44a4:	bf00      	nop
    44a6:	b004      	add	sp, #16
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	000105cc 	.word	0x000105cc
    44b0:	40048000 	.word	0x40048000

000044b4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44b4:	b084      	sub	sp, #16
    44b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44b8:	4b0a      	ldr	r3, [pc, #40]	; (44e4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    44ba:	795b      	ldrb	r3, [r3, #5]
    44bc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    44be:	4b0a      	ldr	r3, [pc, #40]	; (44e8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44c0:	6a1b      	ldr	r3, [r3, #32]
    44c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44c4:	9b02      	ldr	r3, [sp, #8]
    44c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44ca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44cc:	9b03      	ldr	r3, [sp, #12]
    44ce:	061b      	lsls	r3, r3, #24
    44d0:	9a02      	ldr	r2, [sp, #8]
    44d2:	4313      	orrs	r3, r2
    44d4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    44d6:	4a04      	ldr	r2, [pc, #16]	; (44e8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44d8:	9b02      	ldr	r3, [sp, #8]
    44da:	6213      	str	r3, [r2, #32]
}
    44dc:	bf00      	nop
    44de:	b004      	add	sp, #16
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop
    44e4:	0001056c 	.word	0x0001056c
    44e8:	40064000 	.word	0x40064000

000044ec <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44ec:	b084      	sub	sp, #16
    44ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44f0:	9b01      	ldr	r3, [sp, #4]
    44f2:	685b      	ldr	r3, [r3, #4]
    44f4:	4a0a      	ldr	r2, [pc, #40]	; (4520 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    44f6:	5cd3      	ldrb	r3, [r2, r3]
    44f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    44fa:	4b0a      	ldr	r3, [pc, #40]	; (4524 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    44fc:	6a1b      	ldr	r3, [r3, #32]
    44fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4500:	9b02      	ldr	r3, [sp, #8]
    4502:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4506:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4508:	9b03      	ldr	r3, [sp, #12]
    450a:	061b      	lsls	r3, r3, #24
    450c:	9a02      	ldr	r2, [sp, #8]
    450e:	4313      	orrs	r3, r2
    4510:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4512:	4a04      	ldr	r2, [pc, #16]	; (4524 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4514:	9b02      	ldr	r3, [sp, #8]
    4516:	6213      	str	r3, [r2, #32]
}
    4518:	bf00      	nop
    451a:	b004      	add	sp, #16
    451c:	4770      	bx	lr
    451e:	bf00      	nop
    4520:	0001056c 	.word	0x0001056c
    4524:	40064000 	.word	0x40064000

00004528 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4528:	b086      	sub	sp, #24
    452a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    452c:	4b20      	ldr	r3, [pc, #128]	; (45b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    452e:	795b      	ldrb	r3, [r3, #5]
    4530:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4532:	9b01      	ldr	r3, [sp, #4]
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	491f      	ldr	r1, [pc, #124]	; (45b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4538:	4613      	mov	r3, r2
    453a:	00db      	lsls	r3, r3, #3
    453c:	4413      	add	r3, r2
    453e:	440b      	add	r3, r1
    4540:	781b      	ldrb	r3, [r3, #0]
    4542:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4544:	4b1c      	ldr	r3, [pc, #112]	; (45b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4546:	68db      	ldr	r3, [r3, #12]
    4548:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    454a:	9b03      	ldr	r3, [sp, #12]
    454c:	2b03      	cmp	r3, #3
    454e:	d813      	bhi.n	4578 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4550:	9b03      	ldr	r3, [sp, #12]
    4552:	005b      	lsls	r3, r3, #1
    4554:	3318      	adds	r3, #24
    4556:	2203      	movs	r2, #3
    4558:	fa02 f303 	lsl.w	r3, r2, r3
    455c:	43db      	mvns	r3, r3
    455e:	9a05      	ldr	r2, [sp, #20]
    4560:	4013      	ands	r3, r2
    4562:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4564:	9b03      	ldr	r3, [sp, #12]
    4566:	005b      	lsls	r3, r3, #1
    4568:	3318      	adds	r3, #24
    456a:	9a04      	ldr	r2, [sp, #16]
    456c:	fa02 f303 	lsl.w	r3, r2, r3
    4570:	9a05      	ldr	r2, [sp, #20]
    4572:	4313      	orrs	r3, r2
    4574:	9305      	str	r3, [sp, #20]
    4576:	e014      	b.n	45a2 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4578:	9b03      	ldr	r3, [sp, #12]
    457a:	3b04      	subs	r3, #4
    457c:	005b      	lsls	r3, r3, #1
    457e:	3310      	adds	r3, #16
    4580:	2203      	movs	r2, #3
    4582:	fa02 f303 	lsl.w	r3, r2, r3
    4586:	43db      	mvns	r3, r3
    4588:	9a05      	ldr	r2, [sp, #20]
    458a:	4013      	ands	r3, r2
    458c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    458e:	9b03      	ldr	r3, [sp, #12]
    4590:	3b04      	subs	r3, #4
    4592:	005b      	lsls	r3, r3, #1
    4594:	3310      	adds	r3, #16
    4596:	9a04      	ldr	r2, [sp, #16]
    4598:	fa02 f303 	lsl.w	r3, r2, r3
    459c:	9a05      	ldr	r2, [sp, #20]
    459e:	4313      	orrs	r3, r2
    45a0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    45a2:	4a05      	ldr	r2, [pc, #20]	; (45b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45a4:	9b05      	ldr	r3, [sp, #20]
    45a6:	60d3      	str	r3, [r2, #12]
}
    45a8:	bf00      	nop
    45aa:	b006      	add	sp, #24
    45ac:	4770      	bx	lr
    45ae:	bf00      	nop
    45b0:	00010514 	.word	0x00010514
    45b4:	00010204 	.word	0x00010204
    45b8:	40048000 	.word	0x40048000

000045bc <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45bc:	b086      	sub	sp, #24
    45be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c0:	9b01      	ldr	r3, [sp, #4]
    45c2:	685b      	ldr	r3, [r3, #4]
    45c4:	4a20      	ldr	r2, [pc, #128]	; (4648 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    45c6:	5cd3      	ldrb	r3, [r2, r3]
    45c8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45ca:	9b01      	ldr	r3, [sp, #4]
    45cc:	681a      	ldr	r2, [r3, #0]
    45ce:	491f      	ldr	r1, [pc, #124]	; (464c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    45d0:	4613      	mov	r3, r2
    45d2:	00db      	lsls	r3, r3, #3
    45d4:	4413      	add	r3, r2
    45d6:	440b      	add	r3, r1
    45d8:	781b      	ldrb	r3, [r3, #0]
    45da:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45dc:	4b1c      	ldr	r3, [pc, #112]	; (4650 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    45de:	68db      	ldr	r3, [r3, #12]
    45e0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45e2:	9b03      	ldr	r3, [sp, #12]
    45e4:	2b03      	cmp	r3, #3
    45e6:	d813      	bhi.n	4610 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45e8:	9b03      	ldr	r3, [sp, #12]
    45ea:	005b      	lsls	r3, r3, #1
    45ec:	3318      	adds	r3, #24
    45ee:	2203      	movs	r2, #3
    45f0:	fa02 f303 	lsl.w	r3, r2, r3
    45f4:	43db      	mvns	r3, r3
    45f6:	9a05      	ldr	r2, [sp, #20]
    45f8:	4013      	ands	r3, r2
    45fa:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45fc:	9b03      	ldr	r3, [sp, #12]
    45fe:	005b      	lsls	r3, r3, #1
    4600:	3318      	adds	r3, #24
    4602:	9a04      	ldr	r2, [sp, #16]
    4604:	fa02 f303 	lsl.w	r3, r2, r3
    4608:	9a05      	ldr	r2, [sp, #20]
    460a:	4313      	orrs	r3, r2
    460c:	9305      	str	r3, [sp, #20]
    460e:	e014      	b.n	463a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4610:	9b03      	ldr	r3, [sp, #12]
    4612:	3b04      	subs	r3, #4
    4614:	005b      	lsls	r3, r3, #1
    4616:	3310      	adds	r3, #16
    4618:	2203      	movs	r2, #3
    461a:	fa02 f303 	lsl.w	r3, r2, r3
    461e:	43db      	mvns	r3, r3
    4620:	9a05      	ldr	r2, [sp, #20]
    4622:	4013      	ands	r3, r2
    4624:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4626:	9b03      	ldr	r3, [sp, #12]
    4628:	3b04      	subs	r3, #4
    462a:	005b      	lsls	r3, r3, #1
    462c:	3310      	adds	r3, #16
    462e:	9a04      	ldr	r2, [sp, #16]
    4630:	fa02 f303 	lsl.w	r3, r2, r3
    4634:	9a05      	ldr	r2, [sp, #20]
    4636:	4313      	orrs	r3, r2
    4638:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    463a:	4a05      	ldr	r2, [pc, #20]	; (4650 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    463c:	9b05      	ldr	r3, [sp, #20]
    463e:	60d3      	str	r3, [r2, #12]
}
    4640:	bf00      	nop
    4642:	b006      	add	sp, #24
    4644:	4770      	bx	lr
    4646:	bf00      	nop
    4648:	00010514 	.word	0x00010514
    464c:	00010204 	.word	0x00010204
    4650:	40048000 	.word	0x40048000

00004654 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4654:	b084      	sub	sp, #16
    4656:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4658:	4b06      	ldr	r3, [pc, #24]	; (4674 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    465e:	9b03      	ldr	r3, [sp, #12]
    4660:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4664:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4666:	4a03      	ldr	r2, [pc, #12]	; (4674 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4668:	9b03      	ldr	r3, [sp, #12]
    466a:	6053      	str	r3, [r2, #4]
}
    466c:	bf00      	nop
    466e:	b004      	add	sp, #16
    4670:	4770      	bx	lr
    4672:	bf00      	nop
    4674:	40048000 	.word	0x40048000

00004678 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4678:	b084      	sub	sp, #16
    467a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    467c:	9b01      	ldr	r3, [sp, #4]
    467e:	685b      	ldr	r3, [r3, #4]
    4680:	4a0a      	ldr	r2, [pc, #40]	; (46ac <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4682:	5cd3      	ldrb	r3, [r2, r3]
    4684:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4686:	4b0a      	ldr	r3, [pc, #40]	; (46b0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4688:	685b      	ldr	r3, [r3, #4]
    468a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    468c:	9b02      	ldr	r3, [sp, #8]
    468e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4692:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4694:	9b03      	ldr	r3, [sp, #12]
    4696:	011b      	lsls	r3, r3, #4
    4698:	9a02      	ldr	r2, [sp, #8]
    469a:	4313      	orrs	r3, r2
    469c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    469e:	4a04      	ldr	r2, [pc, #16]	; (46b0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    46a0:	9b02      	ldr	r3, [sp, #8]
    46a2:	6053      	str	r3, [r2, #4]
}
    46a4:	bf00      	nop
    46a6:	b004      	add	sp, #16
    46a8:	4770      	bx	lr
    46aa:	bf00      	nop
    46ac:	00010514 	.word	0x00010514
    46b0:	40048000 	.word	0x40048000

000046b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46b4:	b084      	sub	sp, #16
    46b6:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    46b8:	9b01      	ldr	r3, [sp, #4]
    46ba:	681a      	ldr	r2, [r3, #0]
    46bc:	490f      	ldr	r1, [pc, #60]	; (46fc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    46be:	4613      	mov	r3, r2
    46c0:	00db      	lsls	r3, r3, #3
    46c2:	4413      	add	r3, r2
    46c4:	440b      	add	r3, r1
    46c6:	3304      	adds	r3, #4
    46c8:	781b      	ldrb	r3, [r3, #0]
    46ca:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    46cc:	4a0c      	ldr	r2, [pc, #48]	; (4700 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46ce:	9b03      	ldr	r3, [sp, #12]
    46d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46d4:	490a      	ldr	r1, [pc, #40]	; (4700 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    46da:	9b03      	ldr	r3, [sp, #12]
    46dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    46e0:	4a07      	ldr	r2, [pc, #28]	; (4700 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46e2:	9b03      	ldr	r3, [sp, #12]
    46e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46e8:	4905      	ldr	r1, [pc, #20]	; (4700 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    46ee:	9b03      	ldr	r3, [sp, #12]
    46f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46f4:	bf00      	nop
    46f6:	b004      	add	sp, #16
    46f8:	4770      	bx	lr
    46fa:	bf00      	nop
    46fc:	00010204 	.word	0x00010204
    4700:	40065000 	.word	0x40065000

00004704 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4704:	b086      	sub	sp, #24
    4706:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	681a      	ldr	r2, [r3, #0]
    470c:	4912      	ldr	r1, [pc, #72]	; (4758 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    470e:	4613      	mov	r3, r2
    4710:	00db      	lsls	r3, r3, #3
    4712:	4413      	add	r3, r2
    4714:	440b      	add	r3, r1
    4716:	3304      	adds	r3, #4
    4718:	781b      	ldrb	r3, [r3, #0]
    471a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    471c:	9b01      	ldr	r3, [sp, #4]
    471e:	685b      	ldr	r3, [r3, #4]
    4720:	4a0e      	ldr	r2, [pc, #56]	; (475c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4722:	5cd3      	ldrb	r3, [r2, r3]
    4724:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4726:	4a0e      	ldr	r2, [pc, #56]	; (4760 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4728:	9b05      	ldr	r3, [sp, #20]
    472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    472e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4730:	9b03      	ldr	r3, [sp, #12]
    4732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4736:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4738:	9b04      	ldr	r3, [sp, #16]
    473a:	061b      	lsls	r3, r3, #24
    473c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4740:	9a03      	ldr	r2, [sp, #12]
    4742:	4313      	orrs	r3, r2
    4744:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4746:	4906      	ldr	r1, [pc, #24]	; (4760 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4748:	9b05      	ldr	r3, [sp, #20]
    474a:	9a03      	ldr	r2, [sp, #12]
    474c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4750:	bf00      	nop
    4752:	b006      	add	sp, #24
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	00010204 	.word	0x00010204
    475c:	0001059c 	.word	0x0001059c
    4760:	40065000 	.word	0x40065000

00004764 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4764:	b084      	sub	sp, #16
    4766:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4768:	4b0b      	ldr	r3, [pc, #44]	; (4798 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    476a:	7f1b      	ldrb	r3, [r3, #28]
    476c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    476e:	4b0b      	ldr	r3, [pc, #44]	; (479c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4770:	685b      	ldr	r3, [r3, #4]
    4772:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4774:	9b02      	ldr	r3, [sp, #8]
    4776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    477a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    477c:	9b03      	ldr	r3, [sp, #12]
    477e:	031b      	lsls	r3, r3, #12
    4780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4784:	9a02      	ldr	r2, [sp, #8]
    4786:	4313      	orrs	r3, r2
    4788:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    478a:	4a04      	ldr	r2, [pc, #16]	; (479c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    478c:	9b02      	ldr	r3, [sp, #8]
    478e:	6053      	str	r3, [r2, #4]
}
    4790:	bf00      	nop
    4792:	b004      	add	sp, #16
    4794:	4770      	bx	lr
    4796:	bf00      	nop
    4798:	00010514 	.word	0x00010514
    479c:	40048000 	.word	0x40048000

000047a0 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47a0:	b084      	sub	sp, #16
    47a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	685b      	ldr	r3, [r3, #4]
    47a8:	4a0b      	ldr	r2, [pc, #44]	; (47d8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    47aa:	5cd3      	ldrb	r3, [r2, r3]
    47ac:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    47ae:	4b0b      	ldr	r3, [pc, #44]	; (47dc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47b0:	685b      	ldr	r3, [r3, #4]
    47b2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47b4:	9b02      	ldr	r3, [sp, #8]
    47b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47ba:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47bc:	9b03      	ldr	r3, [sp, #12]
    47be:	031b      	lsls	r3, r3, #12
    47c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47c4:	9a02      	ldr	r2, [sp, #8]
    47c6:	4313      	orrs	r3, r2
    47c8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47ca:	4a04      	ldr	r2, [pc, #16]	; (47dc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47cc:	9b02      	ldr	r3, [sp, #8]
    47ce:	6053      	str	r3, [r2, #4]
}
    47d0:	bf00      	nop
    47d2:	b004      	add	sp, #16
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	00010514 	.word	0x00010514
    47dc:	40048000 	.word	0x40048000

000047e0 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    47e0:	b500      	push	{lr}
    47e2:	b085      	sub	sp, #20
    47e4:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    47e6:	2300      	movs	r3, #0
    47e8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    47ec:	9b01      	ldr	r3, [sp, #4]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d037      	beq.n	4862 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    47f2:	2300      	movs	r3, #0
    47f4:	9303      	str	r3, [sp, #12]
    47f6:	e02b      	b.n	4850 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    47f8:	4b29      	ldr	r3, [pc, #164]	; (48a0 <DisableSafeClock+0xc0>)
    47fa:	6819      	ldr	r1, [r3, #0]
    47fc:	9a03      	ldr	r2, [sp, #12]
    47fe:	4613      	mov	r3, r2
    4800:	005b      	lsls	r3, r3, #1
    4802:	4413      	add	r3, r2
    4804:	009b      	lsls	r3, r3, #2
    4806:	440b      	add	r3, r1
    4808:	3314      	adds	r3, #20
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	2b05      	cmp	r3, #5
    480e:	d11c      	bne.n	484a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4810:	2301      	movs	r3, #1
    4812:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4816:	4b22      	ldr	r3, [pc, #136]	; (48a0 <DisableSafeClock+0xc0>)
    4818:	6819      	ldr	r1, [r3, #0]
    481a:	9a03      	ldr	r2, [sp, #12]
    481c:	4613      	mov	r3, r2
    481e:	005b      	lsls	r3, r3, #1
    4820:	4413      	add	r3, r2
    4822:	009b      	lsls	r3, r3, #2
    4824:	440b      	add	r3, r1
    4826:	3318      	adds	r3, #24
    4828:	881b      	ldrh	r3, [r3, #0]
    482a:	2b00      	cmp	r3, #0
    482c:	d118      	bne.n	4860 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    482e:	4b1d      	ldr	r3, [pc, #116]	; (48a4 <DisableSafeClock+0xc4>)
    4830:	791b      	ldrb	r3, [r3, #4]
    4832:	4619      	mov	r1, r3
    4834:	4a1c      	ldr	r2, [pc, #112]	; (48a8 <DisableSafeClock+0xc8>)
    4836:	460b      	mov	r3, r1
    4838:	005b      	lsls	r3, r3, #1
    483a:	440b      	add	r3, r1
    483c:	009b      	lsls	r3, r3, #2
    483e:	4413      	add	r3, r2
    4840:	3308      	adds	r3, #8
    4842:	681b      	ldr	r3, [r3, #0]
    4844:	2005      	movs	r0, #5
    4846:	4798      	blx	r3
                }
                break;
    4848:	e00a      	b.n	4860 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    484a:	9b03      	ldr	r3, [sp, #12]
    484c:	3301      	adds	r3, #1
    484e:	9303      	str	r3, [sp, #12]
    4850:	4b13      	ldr	r3, [pc, #76]	; (48a0 <DisableSafeClock+0xc0>)
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	7a1b      	ldrb	r3, [r3, #8]
    4856:	461a      	mov	r2, r3
    4858:	9b03      	ldr	r3, [sp, #12]
    485a:	4293      	cmp	r3, r2
    485c:	d3cc      	bcc.n	47f8 <DisableSafeClock+0x18>
    485e:	e000      	b.n	4862 <DisableSafeClock+0x82>
                break;
    4860:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4862:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4866:	f083 0301 	eor.w	r3, r3, #1
    486a:	b2db      	uxtb	r3, r3
    486c:	2b00      	cmp	r3, #0
    486e:	d013      	beq.n	4898 <DisableSafeClock+0xb8>
    4870:	4b0e      	ldr	r3, [pc, #56]	; (48ac <DisableSafeClock+0xcc>)
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	f083 0301 	eor.w	r3, r3, #1
    4878:	b2db      	uxtb	r3, r3
    487a:	2b00      	cmp	r3, #0
    487c:	d00c      	beq.n	4898 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    487e:	4b09      	ldr	r3, [pc, #36]	; (48a4 <DisableSafeClock+0xc4>)
    4880:	791b      	ldrb	r3, [r3, #4]
    4882:	4619      	mov	r1, r3
    4884:	4a08      	ldr	r2, [pc, #32]	; (48a8 <DisableSafeClock+0xc8>)
    4886:	460b      	mov	r3, r1
    4888:	005b      	lsls	r3, r3, #1
    488a:	440b      	add	r3, r1
    488c:	009b      	lsls	r3, r3, #2
    488e:	4413      	add	r3, r2
    4890:	3308      	adds	r3, #8
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	2005      	movs	r0, #5
    4896:	4798      	blx	r3
    }
}
    4898:	bf00      	nop
    489a:	b005      	add	sp, #20
    489c:	f85d fb04 	ldr.w	pc, [sp], #4
    48a0:	1fff8b98 	.word	0x1fff8b98
    48a4:	00010194 	.word	0x00010194
    48a8:	000107c4 	.word	0x000107c4
    48ac:	1fff8b18 	.word	0x1fff8b18

000048b0 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    48b0:	4b06      	ldr	r3, [pc, #24]	; (48cc <SetFircToResetValue_TrustedCall+0x1c>)
    48b2:	2200      	movs	r2, #0
    48b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    48b8:	4b04      	ldr	r3, [pc, #16]	; (48cc <SetFircToResetValue_TrustedCall+0x1c>)
    48ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48be:	4a03      	ldr	r2, [pc, #12]	; (48cc <SetFircToResetValue_TrustedCall+0x1c>)
    48c0:	f043 0301 	orr.w	r3, r3, #1
    48c4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    48c8:	bf00      	nop
    48ca:	4770      	bx	lr
    48cc:	40064000 	.word	0x40064000

000048d0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    48d0:	b084      	sub	sp, #16
    48d2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    48d4:	2303      	movs	r3, #3
    48d6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    48d8:	2300      	movs	r3, #0
    48da:	9302      	str	r3, [sp, #8]
    48dc:	e028      	b.n	4930 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    48de:	9b01      	ldr	r3, [sp, #4]
    48e0:	9a02      	ldr	r2, [sp, #8]
    48e2:	320d      	adds	r2, #13
    48e4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    48e8:	2b28      	cmp	r3, #40	; 0x28
    48ea:	d10b      	bne.n	4904 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    48ec:	9a01      	ldr	r2, [sp, #4]
    48ee:	9b02      	ldr	r3, [sp, #8]
    48f0:	330d      	adds	r3, #13
    48f2:	00db      	lsls	r3, r3, #3
    48f4:	4413      	add	r3, r2
    48f6:	685b      	ldr	r3, [r3, #4]
    48f8:	4a2b      	ldr	r2, [pc, #172]	; (49a8 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    48fa:	5cd3      	ldrb	r3, [r2, r3]
    48fc:	011b      	lsls	r3, r3, #4
    48fe:	9a03      	ldr	r2, [sp, #12]
    4900:	4313      	orrs	r3, r2
    4902:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4904:	9b01      	ldr	r3, [sp, #4]
    4906:	9a02      	ldr	r2, [sp, #8]
    4908:	320d      	adds	r2, #13
    490a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    490e:	2b29      	cmp	r3, #41	; 0x29
    4910:	d10b      	bne.n	492a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4912:	9a01      	ldr	r2, [sp, #4]
    4914:	9b02      	ldr	r3, [sp, #8]
    4916:	330d      	adds	r3, #13
    4918:	00db      	lsls	r3, r3, #3
    491a:	4413      	add	r3, r2
    491c:	685b      	ldr	r3, [r3, #4]
    491e:	4a23      	ldr	r2, [pc, #140]	; (49ac <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4920:	5cd3      	ldrb	r3, [r2, r3]
    4922:	009b      	lsls	r3, r3, #2
    4924:	9a03      	ldr	r2, [sp, #12]
    4926:	4313      	orrs	r3, r2
    4928:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    492a:	9b02      	ldr	r3, [sp, #8]
    492c:	3301      	adds	r3, #1
    492e:	9302      	str	r3, [sp, #8]
    4930:	9b01      	ldr	r3, [sp, #4]
    4932:	7adb      	ldrb	r3, [r3, #11]
    4934:	461a      	mov	r2, r3
    4936:	9b02      	ldr	r3, [sp, #8]
    4938:	4293      	cmp	r3, r2
    493a:	d3d0      	bcc.n	48de <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    493c:	2300      	movs	r3, #0
    493e:	9302      	str	r3, [sp, #8]
    4940:	e026      	b.n	4990 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4942:	9a01      	ldr	r2, [sp, #4]
    4944:	9b02      	ldr	r3, [sp, #8]
    4946:	334e      	adds	r3, #78	; 0x4e
    4948:	00db      	lsls	r3, r3, #3
    494a:	4413      	add	r3, r2
    494c:	685b      	ldr	r3, [r3, #4]
    494e:	2b12      	cmp	r3, #18
    4950:	d109      	bne.n	4966 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4952:	9a01      	ldr	r2, [sp, #4]
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	334e      	adds	r3, #78	; 0x4e
    4958:	00db      	lsls	r3, r3, #3
    495a:	4413      	add	r3, r2
    495c:	891b      	ldrh	r3, [r3, #8]
    495e:	005b      	lsls	r3, r3, #1
    4960:	9a03      	ldr	r2, [sp, #12]
    4962:	4313      	orrs	r3, r2
    4964:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4966:	9a01      	ldr	r2, [sp, #4]
    4968:	9b02      	ldr	r3, [sp, #8]
    496a:	334e      	adds	r3, #78	; 0x4e
    496c:	00db      	lsls	r3, r3, #3
    496e:	4413      	add	r3, r2
    4970:	685b      	ldr	r3, [r3, #4]
    4972:	2b13      	cmp	r3, #19
    4974:	d109      	bne.n	498a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4976:	9a01      	ldr	r2, [sp, #4]
    4978:	9b02      	ldr	r3, [sp, #8]
    497a:	334e      	adds	r3, #78	; 0x4e
    497c:	00db      	lsls	r3, r3, #3
    497e:	4413      	add	r3, r2
    4980:	891b      	ldrh	r3, [r3, #8]
    4982:	461a      	mov	r2, r3
    4984:	9b03      	ldr	r3, [sp, #12]
    4986:	4313      	orrs	r3, r2
    4988:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    498a:	9b02      	ldr	r3, [sp, #8]
    498c:	3301      	adds	r3, #1
    498e:	9302      	str	r3, [sp, #8]
    4990:	9b01      	ldr	r3, [sp, #4]
    4992:	7c1b      	ldrb	r3, [r3, #16]
    4994:	461a      	mov	r2, r3
    4996:	9b02      	ldr	r3, [sp, #8]
    4998:	4293      	cmp	r3, r2
    499a:	d3d2      	bcc.n	4942 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    499c:	4a04      	ldr	r2, [pc, #16]	; (49b0 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    499e:	9b03      	ldr	r3, [sp, #12]
    49a0:	6113      	str	r3, [r2, #16]
}
    49a2:	bf00      	nop
    49a4:	b004      	add	sp, #16
    49a6:	4770      	bx	lr
    49a8:	00010514 	.word	0x00010514
    49ac:	000105cc 	.word	0x000105cc
    49b0:	40048000 	.word	0x40048000

000049b4 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    49b4:	b500      	push	{lr}
    49b6:	b089      	sub	sp, #36	; 0x24
    49b8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    49ba:	2300      	movs	r3, #0
    49bc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    49c0:	4a21      	ldr	r2, [pc, #132]	; (4a48 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    49c2:	9b01      	ldr	r3, [sp, #4]
    49c4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    49c6:	4b21      	ldr	r3, [pc, #132]	; (4a4c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49c8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49cc:	f003 0301 	and.w	r3, r3, #1
    49d0:	2b00      	cmp	r3, #0
    49d2:	d12e      	bne.n	4a32 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    49d4:	4b1e      	ldr	r3, [pc, #120]	; (4a50 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    49d6:	2200      	movs	r2, #0
    49d8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    49da:	f7ff ff69 	bl	48b0 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49de:	aa03      	add	r2, sp, #12
    49e0:	a904      	add	r1, sp, #16
    49e2:	a805      	add	r0, sp, #20
    49e4:	f24c 3350 	movw	r3, #50000	; 0xc350
    49e8:	f7fe f8ae 	bl	2b48 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49ec:	4b17      	ldr	r3, [pc, #92]	; (4a4c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49f2:	0e1b      	lsrs	r3, r3, #24
    49f4:	f003 0301 	and.w	r3, r3, #1
    49f8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49fa:	9a03      	ldr	r2, [sp, #12]
    49fc:	a904      	add	r1, sp, #16
    49fe:	ab05      	add	r3, sp, #20
    4a00:	4618      	mov	r0, r3
    4a02:	f7fe f8bb 	bl	2b7c <Clock_Ip_TimeoutExpired>
    4a06:	4603      	mov	r3, r0
    4a08:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a0c:	9b06      	ldr	r3, [sp, #24]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d106      	bne.n	4a20 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4a12:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a16:	f083 0301 	eor.w	r3, r3, #1
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d1e5      	bne.n	49ec <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4a20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a24:	2b00      	cmp	r3, #0
    4a26:	d007      	beq.n	4a38 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a28:	2105      	movs	r1, #5
    4a2a:	2001      	movs	r0, #1
    4a2c:	f7fe f87c 	bl	2b28 <Clock_Ip_ReportClockErrors>
    4a30:	e002      	b.n	4a38 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4a32:	4b07      	ldr	r3, [pc, #28]	; (4a50 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a34:	2201      	movs	r2, #1
    4a36:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4a38:	9801      	ldr	r0, [sp, #4]
    4a3a:	f7ff ff49 	bl	48d0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4a3e:	bf00      	nop
    4a40:	b009      	add	sp, #36	; 0x24
    4a42:	f85d fb04 	ldr.w	pc, [sp], #4
    4a46:	bf00      	nop
    4a48:	1fff8b98 	.word	0x1fff8b98
    4a4c:	40064000 	.word	0x40064000
    4a50:	1fff8b18 	.word	0x1fff8b18

00004a54 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4a54:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4a56:	2300      	movs	r3, #0
    4a58:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a5a:	4b29      	ldr	r3, [pc, #164]	; (4b00 <getFircConfig+0xac>)
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d024      	beq.n	4aac <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a62:	2300      	movs	r3, #0
    4a64:	9301      	str	r3, [sp, #4]
    4a66:	e01a      	b.n	4a9e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4a68:	4b25      	ldr	r3, [pc, #148]	; (4b00 <getFircConfig+0xac>)
    4a6a:	6819      	ldr	r1, [r3, #0]
    4a6c:	9a01      	ldr	r2, [sp, #4]
    4a6e:	4613      	mov	r3, r2
    4a70:	005b      	lsls	r3, r3, #1
    4a72:	4413      	add	r3, r2
    4a74:	009b      	lsls	r3, r3, #2
    4a76:	440b      	add	r3, r1
    4a78:	3314      	adds	r3, #20
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	2b05      	cmp	r3, #5
    4a7e:	d10b      	bne.n	4a98 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4a80:	4b1f      	ldr	r3, [pc, #124]	; (4b00 <getFircConfig+0xac>)
    4a82:	6819      	ldr	r1, [r3, #0]
    4a84:	9a01      	ldr	r2, [sp, #4]
    4a86:	4613      	mov	r3, r2
    4a88:	005b      	lsls	r3, r3, #1
    4a8a:	4413      	add	r3, r2
    4a8c:	009b      	lsls	r3, r3, #2
    4a8e:	3310      	adds	r3, #16
    4a90:	440b      	add	r3, r1
    4a92:	3304      	adds	r3, #4
    4a94:	9300      	str	r3, [sp, #0]
                break;
    4a96:	e009      	b.n	4aac <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a98:	9b01      	ldr	r3, [sp, #4]
    4a9a:	3301      	adds	r3, #1
    4a9c:	9301      	str	r3, [sp, #4]
    4a9e:	4b18      	ldr	r3, [pc, #96]	; (4b00 <getFircConfig+0xac>)
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	7a1b      	ldrb	r3, [r3, #8]
    4aa4:	461a      	mov	r2, r3
    4aa6:	9b01      	ldr	r3, [sp, #4]
    4aa8:	4293      	cmp	r3, r2
    4aaa:	d3dd      	bcc.n	4a68 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4aac:	9b00      	ldr	r3, [sp, #0]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d121      	bne.n	4af6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4ab2:	4b14      	ldr	r3, [pc, #80]	; (4b04 <getFircConfig+0xb0>)
    4ab4:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4ab6:	4b13      	ldr	r3, [pc, #76]	; (4b04 <getFircConfig+0xb0>)
    4ab8:	2205      	movs	r2, #5
    4aba:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4abc:	4b12      	ldr	r3, [pc, #72]	; (4b08 <getFircConfig+0xb4>)
    4abe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ac2:	b29b      	uxth	r3, r3
    4ac4:	f003 0301 	and.w	r3, r3, #1
    4ac8:	b29a      	uxth	r2, r3
    4aca:	4b0e      	ldr	r3, [pc, #56]	; (4b04 <getFircConfig+0xb0>)
    4acc:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4ace:	4b0e      	ldr	r3, [pc, #56]	; (4b08 <getFircConfig+0xb4>)
    4ad0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ad4:	b2db      	uxtb	r3, r3
    4ad6:	f003 0303 	and.w	r3, r3, #3
    4ada:	b2da      	uxtb	r2, r3
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <getFircConfig+0xb0>)
    4ade:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4ae0:	4b09      	ldr	r3, [pc, #36]	; (4b08 <getFircConfig+0xb4>)
    4ae2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ae6:	b2db      	uxtb	r3, r3
    4ae8:	10db      	asrs	r3, r3, #3
    4aea:	b2db      	uxtb	r3, r3
    4aec:	f003 0301 	and.w	r3, r3, #1
    4af0:	b2da      	uxtb	r2, r3
    4af2:	4b04      	ldr	r3, [pc, #16]	; (4b04 <getFircConfig+0xb0>)
    4af4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4af6:	9b00      	ldr	r3, [sp, #0]
}
    4af8:	4618      	mov	r0, r3
    4afa:	b002      	add	sp, #8
    4afc:	4770      	bx	lr
    4afe:	bf00      	nop
    4b00:	1fff8b98 	.word	0x1fff8b98
    4b04:	1fff8c04 	.word	0x1fff8c04
    4b08:	40064000 	.word	0x40064000

00004b0c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b0c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b0e:	2300      	movs	r3, #0
    4b10:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b12:	4b20      	ldr	r3, [pc, #128]	; (4b94 <getSoscConfig+0x88>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	2b00      	cmp	r3, #0
    4b18:	d024      	beq.n	4b64 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b1a:	2300      	movs	r3, #0
    4b1c:	9301      	str	r3, [sp, #4]
    4b1e:	e01a      	b.n	4b56 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4b20:	4b1c      	ldr	r3, [pc, #112]	; (4b94 <getSoscConfig+0x88>)
    4b22:	6819      	ldr	r1, [r3, #0]
    4b24:	9a01      	ldr	r2, [sp, #4]
    4b26:	4613      	mov	r3, r2
    4b28:	009b      	lsls	r3, r3, #2
    4b2a:	4413      	add	r3, r2
    4b2c:	009b      	lsls	r3, r3, #2
    4b2e:	440b      	add	r3, r1
    4b30:	332c      	adds	r3, #44	; 0x2c
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	2b08      	cmp	r3, #8
    4b36:	d10b      	bne.n	4b50 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4b38:	4b16      	ldr	r3, [pc, #88]	; (4b94 <getSoscConfig+0x88>)
    4b3a:	6819      	ldr	r1, [r3, #0]
    4b3c:	9a01      	ldr	r2, [sp, #4]
    4b3e:	4613      	mov	r3, r2
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	4413      	add	r3, r2
    4b44:	009b      	lsls	r3, r3, #2
    4b46:	3328      	adds	r3, #40	; 0x28
    4b48:	440b      	add	r3, r1
    4b4a:	3304      	adds	r3, #4
    4b4c:	9300      	str	r3, [sp, #0]
                break;
    4b4e:	e009      	b.n	4b64 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b50:	9b01      	ldr	r3, [sp, #4]
    4b52:	3301      	adds	r3, #1
    4b54:	9301      	str	r3, [sp, #4]
    4b56:	4b0f      	ldr	r3, [pc, #60]	; (4b94 <getSoscConfig+0x88>)
    4b58:	681b      	ldr	r3, [r3, #0]
    4b5a:	7a5b      	ldrb	r3, [r3, #9]
    4b5c:	461a      	mov	r2, r3
    4b5e:	9b01      	ldr	r3, [sp, #4]
    4b60:	4293      	cmp	r3, r2
    4b62:	d3dd      	bcc.n	4b20 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b64:	9b00      	ldr	r3, [sp, #0]
    4b66:	2b00      	cmp	r3, #0
    4b68:	d110      	bne.n	4b8c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4b6a:	4b0b      	ldr	r3, [pc, #44]	; (4b98 <getSoscConfig+0x8c>)
    4b6c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4b6e:	4b0a      	ldr	r3, [pc, #40]	; (4b98 <getSoscConfig+0x8c>)
    4b70:	2208      	movs	r2, #8
    4b72:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4b74:	4b09      	ldr	r3, [pc, #36]	; (4b9c <getSoscConfig+0x90>)
    4b76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4b7a:	b29b      	uxth	r3, r3
    4b7c:	f003 0301 	and.w	r3, r3, #1
    4b80:	b29a      	uxth	r2, r3
    4b82:	4b05      	ldr	r3, [pc, #20]	; (4b98 <getSoscConfig+0x8c>)
    4b84:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4b86:	4b04      	ldr	r3, [pc, #16]	; (4b98 <getSoscConfig+0x8c>)
    4b88:	4a05      	ldr	r2, [pc, #20]	; (4ba0 <getSoscConfig+0x94>)
    4b8a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4b8c:	9b00      	ldr	r3, [sp, #0]
}
    4b8e:	4618      	mov	r0, r3
    4b90:	b002      	add	sp, #8
    4b92:	4770      	bx	lr
    4b94:	1fff8b98 	.word	0x1fff8b98
    4b98:	1fff8c10 	.word	0x1fff8c10
    4b9c:	40064000 	.word	0x40064000
    4ba0:	02625a00 	.word	0x02625a00

00004ba4 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4ba4:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4ba6:	2300      	movs	r3, #0
    4ba8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4baa:	4b28      	ldr	r3, [pc, #160]	; (4c4c <getSpllConfig+0xa8>)
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d023      	beq.n	4bfa <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4bb2:	2300      	movs	r3, #0
    4bb4:	9301      	str	r3, [sp, #4]
    4bb6:	e019      	b.n	4bec <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4bb8:	4b24      	ldr	r3, [pc, #144]	; (4c4c <getSpllConfig+0xa8>)
    4bba:	6819      	ldr	r1, [r3, #0]
    4bbc:	9a01      	ldr	r2, [sp, #4]
    4bbe:	4613      	mov	r3, r2
    4bc0:	009b      	lsls	r3, r3, #2
    4bc2:	4413      	add	r3, r2
    4bc4:	00db      	lsls	r3, r3, #3
    4bc6:	440b      	add	r3, r1
    4bc8:	3340      	adds	r3, #64	; 0x40
    4bca:	681b      	ldr	r3, [r3, #0]
    4bcc:	2b09      	cmp	r3, #9
    4bce:	d10a      	bne.n	4be6 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4bd0:	4b1e      	ldr	r3, [pc, #120]	; (4c4c <getSpllConfig+0xa8>)
    4bd2:	6819      	ldr	r1, [r3, #0]
    4bd4:	9a01      	ldr	r2, [sp, #4]
    4bd6:	4613      	mov	r3, r2
    4bd8:	009b      	lsls	r3, r3, #2
    4bda:	4413      	add	r3, r2
    4bdc:	00db      	lsls	r3, r3, #3
    4bde:	3340      	adds	r3, #64	; 0x40
    4be0:	440b      	add	r3, r1
    4be2:	9300      	str	r3, [sp, #0]
                break;
    4be4:	e009      	b.n	4bfa <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4be6:	9b01      	ldr	r3, [sp, #4]
    4be8:	3301      	adds	r3, #1
    4bea:	9301      	str	r3, [sp, #4]
    4bec:	4b17      	ldr	r3, [pc, #92]	; (4c4c <getSpllConfig+0xa8>)
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	7a9b      	ldrb	r3, [r3, #10]
    4bf2:	461a      	mov	r2, r3
    4bf4:	9b01      	ldr	r3, [sp, #4]
    4bf6:	4293      	cmp	r3, r2
    4bf8:	d3de      	bcc.n	4bb8 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bfa:	9b00      	ldr	r3, [sp, #0]
    4bfc:	2b00      	cmp	r3, #0
    4bfe:	d121      	bne.n	4c44 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c00:	4b13      	ldr	r3, [pc, #76]	; (4c50 <getSpllConfig+0xac>)
    4c02:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c04:	4b12      	ldr	r3, [pc, #72]	; (4c50 <getSpllConfig+0xac>)
    4c06:	2209      	movs	r2, #9
    4c08:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c0a:	4b12      	ldr	r3, [pc, #72]	; (4c54 <getSpllConfig+0xb0>)
    4c0c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c10:	b29b      	uxth	r3, r3
    4c12:	f003 0301 	and.w	r3, r3, #1
    4c16:	b29a      	uxth	r2, r3
    4c18:	4b0d      	ldr	r3, [pc, #52]	; (4c50 <getSpllConfig+0xac>)
    4c1a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4c1c:	4b0d      	ldr	r3, [pc, #52]	; (4c54 <getSpllConfig+0xb0>)
    4c1e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c22:	0a1b      	lsrs	r3, r3, #8
    4c24:	b2db      	uxtb	r3, r3
    4c26:	f003 0307 	and.w	r3, r3, #7
    4c2a:	b2da      	uxtb	r2, r3
    4c2c:	4b08      	ldr	r3, [pc, #32]	; (4c50 <getSpllConfig+0xac>)
    4c2e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4c30:	4b08      	ldr	r3, [pc, #32]	; (4c54 <getSpllConfig+0xb0>)
    4c32:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c36:	0c1b      	lsrs	r3, r3, #16
    4c38:	b2db      	uxtb	r3, r3
    4c3a:	f003 031f 	and.w	r3, r3, #31
    4c3e:	b2da      	uxtb	r2, r3
    4c40:	4b03      	ldr	r3, [pc, #12]	; (4c50 <getSpllConfig+0xac>)
    4c42:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4c44:	9b00      	ldr	r3, [sp, #0]
}
    4c46:	4618      	mov	r0, r3
    4c48:	b002      	add	sp, #8
    4c4a:	4770      	bx	lr
    4c4c:	1fff8b98 	.word	0x1fff8b98
    4c50:	1fff8c24 	.word	0x1fff8c24
    4c54:	40064000 	.word	0x40064000

00004c58 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4c58:	b086      	sub	sp, #24
    4c5a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4c5c:	2300      	movs	r3, #0
    4c5e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4c60:	9b01      	ldr	r3, [sp, #4]
    4c62:	2b1b      	cmp	r3, #27
    4c64:	d00f      	beq.n	4c86 <getSelectorConfig+0x2e>
    4c66:	9b01      	ldr	r3, [sp, #4]
    4c68:	2b1b      	cmp	r3, #27
    4c6a:	d80f      	bhi.n	4c8c <getSelectorConfig+0x34>
    4c6c:	9b01      	ldr	r3, [sp, #4]
    4c6e:	2b19      	cmp	r3, #25
    4c70:	d003      	beq.n	4c7a <getSelectorConfig+0x22>
    4c72:	9b01      	ldr	r3, [sp, #4]
    4c74:	2b1a      	cmp	r3, #26
    4c76:	d003      	beq.n	4c80 <getSelectorConfig+0x28>
    4c78:	e008      	b.n	4c8c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4c7a:	2300      	movs	r3, #0
    4c7c:	9304      	str	r3, [sp, #16]
            break;
    4c7e:	e008      	b.n	4c92 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4c80:	2301      	movs	r3, #1
    4c82:	9304      	str	r3, [sp, #16]
            break;
    4c84:	e005      	b.n	4c92 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4c86:	2302      	movs	r3, #2
    4c88:	9304      	str	r3, [sp, #16]
            break;
    4c8a:	e002      	b.n	4c92 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4c8c:	2300      	movs	r3, #0
    4c8e:	9304      	str	r3, [sp, #16]
            break;
    4c90:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4c92:	4b36      	ldr	r3, [pc, #216]	; (4d6c <getSelectorConfig+0x114>)
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	2b00      	cmp	r3, #0
    4c98:	d01d      	beq.n	4cd6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4c9a:	2300      	movs	r3, #0
    4c9c:	9303      	str	r3, [sp, #12]
    4c9e:	e013      	b.n	4cc8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4ca0:	4b32      	ldr	r3, [pc, #200]	; (4d6c <getSelectorConfig+0x114>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	9a03      	ldr	r2, [sp, #12]
    4ca6:	320d      	adds	r2, #13
    4ca8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4cac:	9a01      	ldr	r2, [sp, #4]
    4cae:	429a      	cmp	r2, r3
    4cb0:	d107      	bne.n	4cc2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4cb2:	4b2e      	ldr	r3, [pc, #184]	; (4d6c <getSelectorConfig+0x114>)
    4cb4:	681a      	ldr	r2, [r3, #0]
    4cb6:	9b03      	ldr	r3, [sp, #12]
    4cb8:	330d      	adds	r3, #13
    4cba:	00db      	lsls	r3, r3, #3
    4cbc:	4413      	add	r3, r2
    4cbe:	9305      	str	r3, [sp, #20]
                break;
    4cc0:	e009      	b.n	4cd6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4cc2:	9b03      	ldr	r3, [sp, #12]
    4cc4:	3301      	adds	r3, #1
    4cc6:	9303      	str	r3, [sp, #12]
    4cc8:	4b28      	ldr	r3, [pc, #160]	; (4d6c <getSelectorConfig+0x114>)
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	7adb      	ldrb	r3, [r3, #11]
    4cce:	461a      	mov	r2, r3
    4cd0:	9b03      	ldr	r3, [sp, #12]
    4cd2:	4293      	cmp	r3, r2
    4cd4:	d3e4      	bcc.n	4ca0 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cd6:	9b05      	ldr	r3, [sp, #20]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d140      	bne.n	4d5e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4cdc:	9b04      	ldr	r3, [sp, #16]
    4cde:	00db      	lsls	r3, r3, #3
    4ce0:	4a23      	ldr	r2, [pc, #140]	; (4d70 <getSelectorConfig+0x118>)
    4ce2:	4413      	add	r3, r2
    4ce4:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4ce6:	4922      	ldr	r1, [pc, #136]	; (4d70 <getSelectorConfig+0x118>)
    4ce8:	9b04      	ldr	r3, [sp, #16]
    4cea:	9a01      	ldr	r2, [sp, #4]
    4cec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4cf0:	9b01      	ldr	r3, [sp, #4]
    4cf2:	2b1b      	cmp	r3, #27
    4cf4:	d025      	beq.n	4d42 <getSelectorConfig+0xea>
    4cf6:	9b01      	ldr	r3, [sp, #4]
    4cf8:	2b1b      	cmp	r3, #27
    4cfa:	d832      	bhi.n	4d62 <getSelectorConfig+0x10a>
    4cfc:	9b01      	ldr	r3, [sp, #4]
    4cfe:	2b19      	cmp	r3, #25
    4d00:	d003      	beq.n	4d0a <getSelectorConfig+0xb2>
    4d02:	9b01      	ldr	r3, [sp, #4]
    4d04:	2b1a      	cmp	r3, #26
    4d06:	d00e      	beq.n	4d26 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d08:	e02b      	b.n	4d62 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d0a:	4b1a      	ldr	r3, [pc, #104]	; (4d74 <getSelectorConfig+0x11c>)
    4d0c:	695b      	ldr	r3, [r3, #20]
    4d0e:	0e1b      	lsrs	r3, r3, #24
    4d10:	f003 030f 	and.w	r3, r3, #15
    4d14:	4a18      	ldr	r2, [pc, #96]	; (4d78 <getSelectorConfig+0x120>)
    4d16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d1a:	4915      	ldr	r1, [pc, #84]	; (4d70 <getSelectorConfig+0x118>)
    4d1c:	9b04      	ldr	r3, [sp, #16]
    4d1e:	00db      	lsls	r3, r3, #3
    4d20:	440b      	add	r3, r1
    4d22:	605a      	str	r2, [r3, #4]
                break;
    4d24:	e01e      	b.n	4d64 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d26:	4b13      	ldr	r3, [pc, #76]	; (4d74 <getSelectorConfig+0x11c>)
    4d28:	699b      	ldr	r3, [r3, #24]
    4d2a:	0e1b      	lsrs	r3, r3, #24
    4d2c:	f003 030f 	and.w	r3, r3, #15
    4d30:	4a11      	ldr	r2, [pc, #68]	; (4d78 <getSelectorConfig+0x120>)
    4d32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d36:	490e      	ldr	r1, [pc, #56]	; (4d70 <getSelectorConfig+0x118>)
    4d38:	9b04      	ldr	r3, [sp, #16]
    4d3a:	00db      	lsls	r3, r3, #3
    4d3c:	440b      	add	r3, r1
    4d3e:	605a      	str	r2, [r3, #4]
                break;
    4d40:	e010      	b.n	4d64 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4d42:	4b0c      	ldr	r3, [pc, #48]	; (4d74 <getSelectorConfig+0x11c>)
    4d44:	69db      	ldr	r3, [r3, #28]
    4d46:	0e1b      	lsrs	r3, r3, #24
    4d48:	f003 030f 	and.w	r3, r3, #15
    4d4c:	4a0a      	ldr	r2, [pc, #40]	; (4d78 <getSelectorConfig+0x120>)
    4d4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d52:	4907      	ldr	r1, [pc, #28]	; (4d70 <getSelectorConfig+0x118>)
    4d54:	9b04      	ldr	r3, [sp, #16]
    4d56:	00db      	lsls	r3, r3, #3
    4d58:	440b      	add	r3, r1
    4d5a:	605a      	str	r2, [r3, #4]
                break;
    4d5c:	e002      	b.n	4d64 <getSelectorConfig+0x10c>
        }
    }
    4d5e:	bf00      	nop
    4d60:	e000      	b.n	4d64 <getSelectorConfig+0x10c>
                break;
    4d62:	bf00      	nop

    return ReturnValue;
    4d64:	9b05      	ldr	r3, [sp, #20]
}
    4d66:	4618      	mov	r0, r3
    4d68:	b006      	add	sp, #24
    4d6a:	4770      	bx	lr
    4d6c:	1fff8b98 	.word	0x1fff8b98
    4d70:	1fff8c4c 	.word	0x1fff8c4c
    4d74:	40064000 	.word	0x40064000
    4d78:	00010894 	.word	0x00010894

00004d7c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4d7c:	b086      	sub	sp, #24
    4d7e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4d80:	2300      	movs	r3, #0
    4d82:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4d84:	2300      	movs	r3, #0
    4d86:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4d88:	9b01      	ldr	r3, [sp, #4]
    4d8a:	2b1f      	cmp	r3, #31
    4d8c:	d00f      	beq.n	4dae <getCoreDividerConfig+0x32>
    4d8e:	9b01      	ldr	r3, [sp, #4]
    4d90:	2b1f      	cmp	r3, #31
    4d92:	d80f      	bhi.n	4db4 <getCoreDividerConfig+0x38>
    4d94:	9b01      	ldr	r3, [sp, #4]
    4d96:	2b1d      	cmp	r3, #29
    4d98:	d003      	beq.n	4da2 <getCoreDividerConfig+0x26>
    4d9a:	9b01      	ldr	r3, [sp, #4]
    4d9c:	2b1e      	cmp	r3, #30
    4d9e:	d003      	beq.n	4da8 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4da0:	e008      	b.n	4db4 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4da2:	2300      	movs	r3, #0
    4da4:	9304      	str	r3, [sp, #16]
            break;
    4da6:	e006      	b.n	4db6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4da8:	2301      	movs	r3, #1
    4daa:	9304      	str	r3, [sp, #16]
            break;
    4dac:	e003      	b.n	4db6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4dae:	2302      	movs	r3, #2
    4db0:	9304      	str	r3, [sp, #16]
            break;
    4db2:	e000      	b.n	4db6 <getCoreDividerConfig+0x3a>
                break;
    4db4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4db6:	4b41      	ldr	r3, [pc, #260]	; (4ebc <getCoreDividerConfig+0x140>)
    4db8:	681b      	ldr	r3, [r3, #0]
    4dba:	2b00      	cmp	r3, #0
    4dbc:	d026      	beq.n	4e0c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4dbe:	2300      	movs	r3, #0
    4dc0:	9303      	str	r3, [sp, #12]
    4dc2:	e01c      	b.n	4dfe <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4dc4:	4b3d      	ldr	r3, [pc, #244]	; (4ebc <getCoreDividerConfig+0x140>)
    4dc6:	6819      	ldr	r1, [r3, #0]
    4dc8:	9a03      	ldr	r2, [sp, #12]
    4dca:	4613      	mov	r3, r2
    4dcc:	005b      	lsls	r3, r3, #1
    4dce:	4413      	add	r3, r2
    4dd0:	009b      	lsls	r3, r3, #2
    4dd2:	440b      	add	r3, r1
    4dd4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	9a01      	ldr	r2, [sp, #4]
    4ddc:	429a      	cmp	r2, r3
    4dde:	d10b      	bne.n	4df8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4de0:	4b36      	ldr	r3, [pc, #216]	; (4ebc <getCoreDividerConfig+0x140>)
    4de2:	6819      	ldr	r1, [r3, #0]
    4de4:	9a03      	ldr	r2, [sp, #12]
    4de6:	4613      	mov	r3, r2
    4de8:	005b      	lsls	r3, r3, #1
    4dea:	4413      	add	r3, r2
    4dec:	009b      	lsls	r3, r3, #2
    4dee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4df2:	440b      	add	r3, r1
    4df4:	9305      	str	r3, [sp, #20]
                break;
    4df6:	e009      	b.n	4e0c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4df8:	9b03      	ldr	r3, [sp, #12]
    4dfa:	3301      	adds	r3, #1
    4dfc:	9303      	str	r3, [sp, #12]
    4dfe:	4b2f      	ldr	r3, [pc, #188]	; (4ebc <getCoreDividerConfig+0x140>)
    4e00:	681b      	ldr	r3, [r3, #0]
    4e02:	7b1b      	ldrb	r3, [r3, #12]
    4e04:	461a      	mov	r2, r3
    4e06:	9b03      	ldr	r3, [sp, #12]
    4e08:	4293      	cmp	r3, r2
    4e0a:	d3db      	bcc.n	4dc4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e0c:	9b05      	ldr	r3, [sp, #20]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d14d      	bne.n	4eae <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4e12:	9a04      	ldr	r2, [sp, #16]
    4e14:	4613      	mov	r3, r2
    4e16:	005b      	lsls	r3, r3, #1
    4e18:	4413      	add	r3, r2
    4e1a:	009b      	lsls	r3, r3, #2
    4e1c:	4a28      	ldr	r2, [pc, #160]	; (4ec0 <getCoreDividerConfig+0x144>)
    4e1e:	4413      	add	r3, r2
    4e20:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4e22:	4927      	ldr	r1, [pc, #156]	; (4ec0 <getCoreDividerConfig+0x144>)
    4e24:	9a04      	ldr	r2, [sp, #16]
    4e26:	4613      	mov	r3, r2
    4e28:	005b      	lsls	r3, r3, #1
    4e2a:	4413      	add	r3, r2
    4e2c:	009b      	lsls	r3, r3, #2
    4e2e:	440b      	add	r3, r1
    4e30:	9a01      	ldr	r2, [sp, #4]
    4e32:	601a      	str	r2, [r3, #0]
        switch(Name)
    4e34:	9b01      	ldr	r3, [sp, #4]
    4e36:	2b1f      	cmp	r3, #31
    4e38:	d029      	beq.n	4e8e <getCoreDividerConfig+0x112>
    4e3a:	9b01      	ldr	r3, [sp, #4]
    4e3c:	2b1f      	cmp	r3, #31
    4e3e:	d838      	bhi.n	4eb2 <getCoreDividerConfig+0x136>
    4e40:	9b01      	ldr	r3, [sp, #4]
    4e42:	2b1d      	cmp	r3, #29
    4e44:	d003      	beq.n	4e4e <getCoreDividerConfig+0xd2>
    4e46:	9b01      	ldr	r3, [sp, #4]
    4e48:	2b1e      	cmp	r3, #30
    4e4a:	d010      	beq.n	4e6e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e4c:	e031      	b.n	4eb2 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4e4e:	4b1d      	ldr	r3, [pc, #116]	; (4ec4 <getCoreDividerConfig+0x148>)
    4e50:	695b      	ldr	r3, [r3, #20]
    4e52:	0c1b      	lsrs	r3, r3, #16
    4e54:	f003 030f 	and.w	r3, r3, #15
    4e58:	1c59      	adds	r1, r3, #1
    4e5a:	4819      	ldr	r0, [pc, #100]	; (4ec0 <getCoreDividerConfig+0x144>)
    4e5c:	9a04      	ldr	r2, [sp, #16]
    4e5e:	4613      	mov	r3, r2
    4e60:	005b      	lsls	r3, r3, #1
    4e62:	4413      	add	r3, r2
    4e64:	009b      	lsls	r3, r3, #2
    4e66:	4403      	add	r3, r0
    4e68:	3304      	adds	r3, #4
    4e6a:	6019      	str	r1, [r3, #0]
                break;
    4e6c:	e022      	b.n	4eb4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4e6e:	4b15      	ldr	r3, [pc, #84]	; (4ec4 <getCoreDividerConfig+0x148>)
    4e70:	699b      	ldr	r3, [r3, #24]
    4e72:	0c1b      	lsrs	r3, r3, #16
    4e74:	f003 030f 	and.w	r3, r3, #15
    4e78:	1c59      	adds	r1, r3, #1
    4e7a:	4811      	ldr	r0, [pc, #68]	; (4ec0 <getCoreDividerConfig+0x144>)
    4e7c:	9a04      	ldr	r2, [sp, #16]
    4e7e:	4613      	mov	r3, r2
    4e80:	005b      	lsls	r3, r3, #1
    4e82:	4413      	add	r3, r2
    4e84:	009b      	lsls	r3, r3, #2
    4e86:	4403      	add	r3, r0
    4e88:	3304      	adds	r3, #4
    4e8a:	6019      	str	r1, [r3, #0]
                break;
    4e8c:	e012      	b.n	4eb4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4e8e:	4b0d      	ldr	r3, [pc, #52]	; (4ec4 <getCoreDividerConfig+0x148>)
    4e90:	69db      	ldr	r3, [r3, #28]
    4e92:	0c1b      	lsrs	r3, r3, #16
    4e94:	f003 030f 	and.w	r3, r3, #15
    4e98:	1c59      	adds	r1, r3, #1
    4e9a:	4809      	ldr	r0, [pc, #36]	; (4ec0 <getCoreDividerConfig+0x144>)
    4e9c:	9a04      	ldr	r2, [sp, #16]
    4e9e:	4613      	mov	r3, r2
    4ea0:	005b      	lsls	r3, r3, #1
    4ea2:	4413      	add	r3, r2
    4ea4:	009b      	lsls	r3, r3, #2
    4ea6:	4403      	add	r3, r0
    4ea8:	3304      	adds	r3, #4
    4eaa:	6019      	str	r1, [r3, #0]
                break;
    4eac:	e002      	b.n	4eb4 <getCoreDividerConfig+0x138>
        }
    }
    4eae:	bf00      	nop
    4eb0:	e000      	b.n	4eb4 <getCoreDividerConfig+0x138>
                break;
    4eb2:	bf00      	nop

    return ReturnValue;
    4eb4:	9b05      	ldr	r3, [sp, #20]
}
    4eb6:	4618      	mov	r0, r3
    4eb8:	b006      	add	sp, #24
    4eba:	4770      	bx	lr
    4ebc:	1fff8b98 	.word	0x1fff8b98
    4ec0:	1fff8c64 	.word	0x1fff8c64
    4ec4:	40064000 	.word	0x40064000

00004ec8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4ec8:	b086      	sub	sp, #24
    4eca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4ecc:	2300      	movs	r3, #0
    4ece:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4ed0:	2300      	movs	r3, #0
    4ed2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4ed4:	9b01      	ldr	r3, [sp, #4]
    4ed6:	2b23      	cmp	r3, #35	; 0x23
    4ed8:	d00f      	beq.n	4efa <getBusDividerConfig+0x32>
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	2b23      	cmp	r3, #35	; 0x23
    4ede:	d80f      	bhi.n	4f00 <getBusDividerConfig+0x38>
    4ee0:	9b01      	ldr	r3, [sp, #4]
    4ee2:	2b21      	cmp	r3, #33	; 0x21
    4ee4:	d003      	beq.n	4eee <getBusDividerConfig+0x26>
    4ee6:	9b01      	ldr	r3, [sp, #4]
    4ee8:	2b22      	cmp	r3, #34	; 0x22
    4eea:	d003      	beq.n	4ef4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4eec:	e008      	b.n	4f00 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4eee:	2300      	movs	r3, #0
    4ef0:	9304      	str	r3, [sp, #16]
            break;
    4ef2:	e006      	b.n	4f02 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ef4:	2301      	movs	r3, #1
    4ef6:	9304      	str	r3, [sp, #16]
            break;
    4ef8:	e003      	b.n	4f02 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4efa:	2302      	movs	r3, #2
    4efc:	9304      	str	r3, [sp, #16]
            break;
    4efe:	e000      	b.n	4f02 <getBusDividerConfig+0x3a>
                break;
    4f00:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f02:	4b41      	ldr	r3, [pc, #260]	; (5008 <getBusDividerConfig+0x140>)
    4f04:	681b      	ldr	r3, [r3, #0]
    4f06:	2b00      	cmp	r3, #0
    4f08:	d026      	beq.n	4f58 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f0a:	2300      	movs	r3, #0
    4f0c:	9303      	str	r3, [sp, #12]
    4f0e:	e01c      	b.n	4f4a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f10:	4b3d      	ldr	r3, [pc, #244]	; (5008 <getBusDividerConfig+0x140>)
    4f12:	6819      	ldr	r1, [r3, #0]
    4f14:	9a03      	ldr	r2, [sp, #12]
    4f16:	4613      	mov	r3, r2
    4f18:	005b      	lsls	r3, r3, #1
    4f1a:	4413      	add	r3, r2
    4f1c:	009b      	lsls	r3, r3, #2
    4f1e:	440b      	add	r3, r1
    4f20:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f24:	681b      	ldr	r3, [r3, #0]
    4f26:	9a01      	ldr	r2, [sp, #4]
    4f28:	429a      	cmp	r2, r3
    4f2a:	d10b      	bne.n	4f44 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4f2c:	4b36      	ldr	r3, [pc, #216]	; (5008 <getBusDividerConfig+0x140>)
    4f2e:	6819      	ldr	r1, [r3, #0]
    4f30:	9a03      	ldr	r2, [sp, #12]
    4f32:	4613      	mov	r3, r2
    4f34:	005b      	lsls	r3, r3, #1
    4f36:	4413      	add	r3, r2
    4f38:	009b      	lsls	r3, r3, #2
    4f3a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f3e:	440b      	add	r3, r1
    4f40:	9305      	str	r3, [sp, #20]
                break;
    4f42:	e009      	b.n	4f58 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f44:	9b03      	ldr	r3, [sp, #12]
    4f46:	3301      	adds	r3, #1
    4f48:	9303      	str	r3, [sp, #12]
    4f4a:	4b2f      	ldr	r3, [pc, #188]	; (5008 <getBusDividerConfig+0x140>)
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	7b1b      	ldrb	r3, [r3, #12]
    4f50:	461a      	mov	r2, r3
    4f52:	9b03      	ldr	r3, [sp, #12]
    4f54:	4293      	cmp	r3, r2
    4f56:	d3db      	bcc.n	4f10 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f58:	9b05      	ldr	r3, [sp, #20]
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d14d      	bne.n	4ffa <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4f5e:	9a04      	ldr	r2, [sp, #16]
    4f60:	4613      	mov	r3, r2
    4f62:	005b      	lsls	r3, r3, #1
    4f64:	4413      	add	r3, r2
    4f66:	009b      	lsls	r3, r3, #2
    4f68:	4a28      	ldr	r2, [pc, #160]	; (500c <getBusDividerConfig+0x144>)
    4f6a:	4413      	add	r3, r2
    4f6c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4f6e:	4927      	ldr	r1, [pc, #156]	; (500c <getBusDividerConfig+0x144>)
    4f70:	9a04      	ldr	r2, [sp, #16]
    4f72:	4613      	mov	r3, r2
    4f74:	005b      	lsls	r3, r3, #1
    4f76:	4413      	add	r3, r2
    4f78:	009b      	lsls	r3, r3, #2
    4f7a:	440b      	add	r3, r1
    4f7c:	9a01      	ldr	r2, [sp, #4]
    4f7e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4f80:	9b01      	ldr	r3, [sp, #4]
    4f82:	2b23      	cmp	r3, #35	; 0x23
    4f84:	d029      	beq.n	4fda <getBusDividerConfig+0x112>
    4f86:	9b01      	ldr	r3, [sp, #4]
    4f88:	2b23      	cmp	r3, #35	; 0x23
    4f8a:	d838      	bhi.n	4ffe <getBusDividerConfig+0x136>
    4f8c:	9b01      	ldr	r3, [sp, #4]
    4f8e:	2b21      	cmp	r3, #33	; 0x21
    4f90:	d003      	beq.n	4f9a <getBusDividerConfig+0xd2>
    4f92:	9b01      	ldr	r3, [sp, #4]
    4f94:	2b22      	cmp	r3, #34	; 0x22
    4f96:	d010      	beq.n	4fba <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f98:	e031      	b.n	4ffe <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4f9a:	4b1d      	ldr	r3, [pc, #116]	; (5010 <getBusDividerConfig+0x148>)
    4f9c:	695b      	ldr	r3, [r3, #20]
    4f9e:	091b      	lsrs	r3, r3, #4
    4fa0:	f003 030f 	and.w	r3, r3, #15
    4fa4:	1c59      	adds	r1, r3, #1
    4fa6:	4819      	ldr	r0, [pc, #100]	; (500c <getBusDividerConfig+0x144>)
    4fa8:	9a04      	ldr	r2, [sp, #16]
    4faa:	4613      	mov	r3, r2
    4fac:	005b      	lsls	r3, r3, #1
    4fae:	4413      	add	r3, r2
    4fb0:	009b      	lsls	r3, r3, #2
    4fb2:	4403      	add	r3, r0
    4fb4:	3304      	adds	r3, #4
    4fb6:	6019      	str	r1, [r3, #0]
                break;
    4fb8:	e022      	b.n	5000 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4fba:	4b15      	ldr	r3, [pc, #84]	; (5010 <getBusDividerConfig+0x148>)
    4fbc:	699b      	ldr	r3, [r3, #24]
    4fbe:	091b      	lsrs	r3, r3, #4
    4fc0:	f003 030f 	and.w	r3, r3, #15
    4fc4:	1c59      	adds	r1, r3, #1
    4fc6:	4811      	ldr	r0, [pc, #68]	; (500c <getBusDividerConfig+0x144>)
    4fc8:	9a04      	ldr	r2, [sp, #16]
    4fca:	4613      	mov	r3, r2
    4fcc:	005b      	lsls	r3, r3, #1
    4fce:	4413      	add	r3, r2
    4fd0:	009b      	lsls	r3, r3, #2
    4fd2:	4403      	add	r3, r0
    4fd4:	3304      	adds	r3, #4
    4fd6:	6019      	str	r1, [r3, #0]
                break;
    4fd8:	e012      	b.n	5000 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4fda:	4b0d      	ldr	r3, [pc, #52]	; (5010 <getBusDividerConfig+0x148>)
    4fdc:	69db      	ldr	r3, [r3, #28]
    4fde:	091b      	lsrs	r3, r3, #4
    4fe0:	f003 030f 	and.w	r3, r3, #15
    4fe4:	1c59      	adds	r1, r3, #1
    4fe6:	4809      	ldr	r0, [pc, #36]	; (500c <getBusDividerConfig+0x144>)
    4fe8:	9a04      	ldr	r2, [sp, #16]
    4fea:	4613      	mov	r3, r2
    4fec:	005b      	lsls	r3, r3, #1
    4fee:	4413      	add	r3, r2
    4ff0:	009b      	lsls	r3, r3, #2
    4ff2:	4403      	add	r3, r0
    4ff4:	3304      	adds	r3, #4
    4ff6:	6019      	str	r1, [r3, #0]
                break;
    4ff8:	e002      	b.n	5000 <getBusDividerConfig+0x138>
        }
    }
    4ffa:	bf00      	nop
    4ffc:	e000      	b.n	5000 <getBusDividerConfig+0x138>
                break;
    4ffe:	bf00      	nop

    return ReturnValue;
    5000:	9b05      	ldr	r3, [sp, #20]
}
    5002:	4618      	mov	r0, r3
    5004:	b006      	add	sp, #24
    5006:	4770      	bx	lr
    5008:	1fff8b98 	.word	0x1fff8b98
    500c:	1fff8c88 	.word	0x1fff8c88
    5010:	40064000 	.word	0x40064000

00005014 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5014:	b086      	sub	sp, #24
    5016:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5018:	2300      	movs	r3, #0
    501a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    501c:	2300      	movs	r3, #0
    501e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5020:	9b01      	ldr	r3, [sp, #4]
    5022:	2b27      	cmp	r3, #39	; 0x27
    5024:	d00f      	beq.n	5046 <getSlowDividerConfig+0x32>
    5026:	9b01      	ldr	r3, [sp, #4]
    5028:	2b27      	cmp	r3, #39	; 0x27
    502a:	d80f      	bhi.n	504c <getSlowDividerConfig+0x38>
    502c:	9b01      	ldr	r3, [sp, #4]
    502e:	2b25      	cmp	r3, #37	; 0x25
    5030:	d003      	beq.n	503a <getSlowDividerConfig+0x26>
    5032:	9b01      	ldr	r3, [sp, #4]
    5034:	2b26      	cmp	r3, #38	; 0x26
    5036:	d003      	beq.n	5040 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5038:	e008      	b.n	504c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    503a:	2300      	movs	r3, #0
    503c:	9304      	str	r3, [sp, #16]
            break;
    503e:	e006      	b.n	504e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5040:	2301      	movs	r3, #1
    5042:	9304      	str	r3, [sp, #16]
            break;
    5044:	e003      	b.n	504e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5046:	2302      	movs	r3, #2
    5048:	9304      	str	r3, [sp, #16]
            break;
    504a:	e000      	b.n	504e <getSlowDividerConfig+0x3a>
                break;
    504c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    504e:	4b40      	ldr	r3, [pc, #256]	; (5150 <getSlowDividerConfig+0x13c>)
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	2b00      	cmp	r3, #0
    5054:	d026      	beq.n	50a4 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5056:	2300      	movs	r3, #0
    5058:	9303      	str	r3, [sp, #12]
    505a:	e01c      	b.n	5096 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    505c:	4b3c      	ldr	r3, [pc, #240]	; (5150 <getSlowDividerConfig+0x13c>)
    505e:	6819      	ldr	r1, [r3, #0]
    5060:	9a03      	ldr	r2, [sp, #12]
    5062:	4613      	mov	r3, r2
    5064:	005b      	lsls	r3, r3, #1
    5066:	4413      	add	r3, r2
    5068:	009b      	lsls	r3, r3, #2
    506a:	440b      	add	r3, r1
    506c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	9a01      	ldr	r2, [sp, #4]
    5074:	429a      	cmp	r2, r3
    5076:	d10b      	bne.n	5090 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5078:	4b35      	ldr	r3, [pc, #212]	; (5150 <getSlowDividerConfig+0x13c>)
    507a:	6819      	ldr	r1, [r3, #0]
    507c:	9a03      	ldr	r2, [sp, #12]
    507e:	4613      	mov	r3, r2
    5080:	005b      	lsls	r3, r3, #1
    5082:	4413      	add	r3, r2
    5084:	009b      	lsls	r3, r3, #2
    5086:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    508a:	440b      	add	r3, r1
    508c:	9305      	str	r3, [sp, #20]
                break;
    508e:	e009      	b.n	50a4 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5090:	9b03      	ldr	r3, [sp, #12]
    5092:	3301      	adds	r3, #1
    5094:	9303      	str	r3, [sp, #12]
    5096:	4b2e      	ldr	r3, [pc, #184]	; (5150 <getSlowDividerConfig+0x13c>)
    5098:	681b      	ldr	r3, [r3, #0]
    509a:	7b1b      	ldrb	r3, [r3, #12]
    509c:	461a      	mov	r2, r3
    509e:	9b03      	ldr	r3, [sp, #12]
    50a0:	4293      	cmp	r3, r2
    50a2:	d3db      	bcc.n	505c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50a4:	9b05      	ldr	r3, [sp, #20]
    50a6:	2b00      	cmp	r3, #0
    50a8:	d14a      	bne.n	5140 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    50aa:	9a04      	ldr	r2, [sp, #16]
    50ac:	4613      	mov	r3, r2
    50ae:	005b      	lsls	r3, r3, #1
    50b0:	4413      	add	r3, r2
    50b2:	009b      	lsls	r3, r3, #2
    50b4:	4a27      	ldr	r2, [pc, #156]	; (5154 <getSlowDividerConfig+0x140>)
    50b6:	4413      	add	r3, r2
    50b8:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    50ba:	4926      	ldr	r1, [pc, #152]	; (5154 <getSlowDividerConfig+0x140>)
    50bc:	9a04      	ldr	r2, [sp, #16]
    50be:	4613      	mov	r3, r2
    50c0:	005b      	lsls	r3, r3, #1
    50c2:	4413      	add	r3, r2
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	440b      	add	r3, r1
    50c8:	9a01      	ldr	r2, [sp, #4]
    50ca:	601a      	str	r2, [r3, #0]
        switch(Name)
    50cc:	9b01      	ldr	r3, [sp, #4]
    50ce:	2b27      	cmp	r3, #39	; 0x27
    50d0:	d027      	beq.n	5122 <getSlowDividerConfig+0x10e>
    50d2:	9b01      	ldr	r3, [sp, #4]
    50d4:	2b27      	cmp	r3, #39	; 0x27
    50d6:	d835      	bhi.n	5144 <getSlowDividerConfig+0x130>
    50d8:	9b01      	ldr	r3, [sp, #4]
    50da:	2b25      	cmp	r3, #37	; 0x25
    50dc:	d003      	beq.n	50e6 <getSlowDividerConfig+0xd2>
    50de:	9b01      	ldr	r3, [sp, #4]
    50e0:	2b26      	cmp	r3, #38	; 0x26
    50e2:	d00f      	beq.n	5104 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50e4:	e02e      	b.n	5144 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    50e6:	4b1c      	ldr	r3, [pc, #112]	; (5158 <getSlowDividerConfig+0x144>)
    50e8:	695b      	ldr	r3, [r3, #20]
    50ea:	f003 030f 	and.w	r3, r3, #15
    50ee:	1c59      	adds	r1, r3, #1
    50f0:	4818      	ldr	r0, [pc, #96]	; (5154 <getSlowDividerConfig+0x140>)
    50f2:	9a04      	ldr	r2, [sp, #16]
    50f4:	4613      	mov	r3, r2
    50f6:	005b      	lsls	r3, r3, #1
    50f8:	4413      	add	r3, r2
    50fa:	009b      	lsls	r3, r3, #2
    50fc:	4403      	add	r3, r0
    50fe:	3304      	adds	r3, #4
    5100:	6019      	str	r1, [r3, #0]
                break;
    5102:	e020      	b.n	5146 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5104:	4b14      	ldr	r3, [pc, #80]	; (5158 <getSlowDividerConfig+0x144>)
    5106:	699b      	ldr	r3, [r3, #24]
    5108:	f003 030f 	and.w	r3, r3, #15
    510c:	1c59      	adds	r1, r3, #1
    510e:	4811      	ldr	r0, [pc, #68]	; (5154 <getSlowDividerConfig+0x140>)
    5110:	9a04      	ldr	r2, [sp, #16]
    5112:	4613      	mov	r3, r2
    5114:	005b      	lsls	r3, r3, #1
    5116:	4413      	add	r3, r2
    5118:	009b      	lsls	r3, r3, #2
    511a:	4403      	add	r3, r0
    511c:	3304      	adds	r3, #4
    511e:	6019      	str	r1, [r3, #0]
                break;
    5120:	e011      	b.n	5146 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5122:	4b0d      	ldr	r3, [pc, #52]	; (5158 <getSlowDividerConfig+0x144>)
    5124:	69db      	ldr	r3, [r3, #28]
    5126:	f003 030f 	and.w	r3, r3, #15
    512a:	1c59      	adds	r1, r3, #1
    512c:	4809      	ldr	r0, [pc, #36]	; (5154 <getSlowDividerConfig+0x140>)
    512e:	9a04      	ldr	r2, [sp, #16]
    5130:	4613      	mov	r3, r2
    5132:	005b      	lsls	r3, r3, #1
    5134:	4413      	add	r3, r2
    5136:	009b      	lsls	r3, r3, #2
    5138:	4403      	add	r3, r0
    513a:	3304      	adds	r3, #4
    513c:	6019      	str	r1, [r3, #0]
                break;
    513e:	e002      	b.n	5146 <getSlowDividerConfig+0x132>
        }
    }
    5140:	bf00      	nop
    5142:	e000      	b.n	5146 <getSlowDividerConfig+0x132>
                break;
    5144:	bf00      	nop

    return ReturnValue;
    5146:	9b05      	ldr	r3, [sp, #20]
}
    5148:	4618      	mov	r0, r3
    514a:	b006      	add	sp, #24
    514c:	4770      	bx	lr
    514e:	bf00      	nop
    5150:	1fff8b98 	.word	0x1fff8b98
    5154:	1fff8cac 	.word	0x1fff8cac
    5158:	40064000 	.word	0x40064000

0000515c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    515c:	b500      	push	{lr}
    515e:	b083      	sub	sp, #12
    5160:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5162:	4b64      	ldr	r3, [pc, #400]	; (52f4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5164:	781b      	ldrb	r3, [r3, #0]
    5166:	f083 0301 	eor.w	r3, r3, #1
    516a:	b2db      	uxtb	r3, r3
    516c:	2b00      	cmp	r3, #0
    516e:	d05b      	beq.n	5228 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5170:	4b60      	ldr	r3, [pc, #384]	; (52f4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5172:	2201      	movs	r2, #1
    5174:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5176:	4b60      	ldr	r3, [pc, #384]	; (52f8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5178:	785b      	ldrb	r3, [r3, #1]
    517a:	461a      	mov	r2, r3
    517c:	4613      	mov	r3, r2
    517e:	009b      	lsls	r3, r3, #2
    5180:	4413      	add	r3, r2
    5182:	009b      	lsls	r3, r3, #2
    5184:	4a5d      	ldr	r2, [pc, #372]	; (52fc <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5186:	4413      	add	r3, r2
    5188:	4a5d      	ldr	r2, [pc, #372]	; (5300 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    518a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    518c:	4b5d      	ldr	r3, [pc, #372]	; (5304 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    518e:	785b      	ldrb	r3, [r3, #1]
    5190:	461a      	mov	r2, r3
    5192:	4613      	mov	r3, r2
    5194:	009b      	lsls	r3, r3, #2
    5196:	4413      	add	r3, r2
    5198:	009b      	lsls	r3, r3, #2
    519a:	4a5b      	ldr	r2, [pc, #364]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    519c:	4413      	add	r3, r2
    519e:	4a5b      	ldr	r2, [pc, #364]	; (530c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    51a0:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    51a2:	4b5b      	ldr	r3, [pc, #364]	; (5310 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    51a4:	791b      	ldrb	r3, [r3, #4]
    51a6:	461a      	mov	r2, r3
    51a8:	4613      	mov	r3, r2
    51aa:	005b      	lsls	r3, r3, #1
    51ac:	4413      	add	r3, r2
    51ae:	009b      	lsls	r3, r3, #2
    51b0:	4a58      	ldr	r2, [pc, #352]	; (5314 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    51b2:	4413      	add	r3, r2
    51b4:	4a58      	ldr	r2, [pc, #352]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    51b6:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    51b8:	4b58      	ldr	r3, [pc, #352]	; (531c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51ba:	795b      	ldrb	r3, [r3, #5]
    51bc:	00db      	lsls	r3, r3, #3
    51be:	4a58      	ldr	r2, [pc, #352]	; (5320 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51c0:	4413      	add	r3, r2
    51c2:	4a58      	ldr	r2, [pc, #352]	; (5324 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    51c4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    51c6:	4b55      	ldr	r3, [pc, #340]	; (531c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51c8:	79db      	ldrb	r3, [r3, #7]
    51ca:	00db      	lsls	r3, r3, #3
    51cc:	4a54      	ldr	r2, [pc, #336]	; (5320 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51ce:	4413      	add	r3, r2
    51d0:	4a55      	ldr	r2, [pc, #340]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    51d2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    51d4:	4b55      	ldr	r3, [pc, #340]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51d6:	799b      	ldrb	r3, [r3, #6]
    51d8:	009b      	lsls	r3, r3, #2
    51da:	4a55      	ldr	r2, [pc, #340]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51dc:	4413      	add	r3, r2
    51de:	4a55      	ldr	r2, [pc, #340]	; (5334 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    51e0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    51e2:	4b52      	ldr	r3, [pc, #328]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51e4:	7a1b      	ldrb	r3, [r3, #8]
    51e6:	009b      	lsls	r3, r3, #2
    51e8:	4a51      	ldr	r2, [pc, #324]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51ea:	4413      	add	r3, r2
    51ec:	4a52      	ldr	r2, [pc, #328]	; (5338 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    51ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    51f0:	4b4e      	ldr	r3, [pc, #312]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51f2:	7a5b      	ldrb	r3, [r3, #9]
    51f4:	009b      	lsls	r3, r3, #2
    51f6:	4a4e      	ldr	r2, [pc, #312]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51f8:	4413      	add	r3, r2
    51fa:	4a50      	ldr	r2, [pc, #320]	; (533c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    51fc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    51fe:	4b4b      	ldr	r3, [pc, #300]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5200:	7adb      	ldrb	r3, [r3, #11]
    5202:	009b      	lsls	r3, r3, #2
    5204:	4a4a      	ldr	r2, [pc, #296]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5206:	4413      	add	r3, r2
    5208:	4a4d      	ldr	r2, [pc, #308]	; (5340 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    520a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    520c:	4b47      	ldr	r3, [pc, #284]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    520e:	7b1b      	ldrb	r3, [r3, #12]
    5210:	009b      	lsls	r3, r3, #2
    5212:	4a47      	ldr	r2, [pc, #284]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5214:	4413      	add	r3, r2
    5216:	4a4b      	ldr	r2, [pc, #300]	; (5344 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5218:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    521a:	4b44      	ldr	r3, [pc, #272]	; (532c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    521c:	7b9b      	ldrb	r3, [r3, #14]
    521e:	009b      	lsls	r3, r3, #2
    5220:	4a43      	ldr	r2, [pc, #268]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5222:	4413      	add	r3, r2
    5224:	4a48      	ldr	r2, [pc, #288]	; (5348 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5226:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5228:	4b48      	ldr	r3, [pc, #288]	; (534c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	2b00      	cmp	r3, #0
    522e:	d002      	beq.n	5236 <Clock_Ip_ClockInitializeObjects+0xda>
    5230:	9b01      	ldr	r3, [sp, #4]
    5232:	2b00      	cmp	r3, #0
    5234:	d003      	beq.n	523e <Clock_Ip_ClockInitializeObjects+0xe2>
    5236:	4b46      	ldr	r3, [pc, #280]	; (5350 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5238:	781b      	ldrb	r3, [r3, #0]
    523a:	2b00      	cmp	r3, #0
    523c:	d056      	beq.n	52ec <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    523e:	f7ff fc09 	bl	4a54 <getFircConfig>
    5242:	4603      	mov	r3, r0
    5244:	4a43      	ldr	r2, [pc, #268]	; (5354 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5246:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5248:	f7ff fc60 	bl	4b0c <getSoscConfig>
    524c:	4603      	mov	r3, r0
    524e:	4a42      	ldr	r2, [pc, #264]	; (5358 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5250:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5252:	f7ff fca7 	bl	4ba4 <getSpllConfig>
    5256:	4603      	mov	r3, r0
    5258:	4a40      	ldr	r2, [pc, #256]	; (535c <Clock_Ip_ClockInitializeObjects+0x200>)
    525a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    525c:	2019      	movs	r0, #25
    525e:	f7ff fcfb 	bl	4c58 <getSelectorConfig>
    5262:	4603      	mov	r3, r0
    5264:	4a3e      	ldr	r2, [pc, #248]	; (5360 <Clock_Ip_ClockInitializeObjects+0x204>)
    5266:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5268:	201a      	movs	r0, #26
    526a:	f7ff fcf5 	bl	4c58 <getSelectorConfig>
    526e:	4603      	mov	r3, r0
    5270:	4a3c      	ldr	r2, [pc, #240]	; (5364 <Clock_Ip_ClockInitializeObjects+0x208>)
    5272:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5274:	201b      	movs	r0, #27
    5276:	f7ff fcef 	bl	4c58 <getSelectorConfig>
    527a:	4603      	mov	r3, r0
    527c:	4a3a      	ldr	r2, [pc, #232]	; (5368 <Clock_Ip_ClockInitializeObjects+0x20c>)
    527e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5280:	201d      	movs	r0, #29
    5282:	f7ff fd7b 	bl	4d7c <getCoreDividerConfig>
    5286:	4603      	mov	r3, r0
    5288:	4a38      	ldr	r2, [pc, #224]	; (536c <Clock_Ip_ClockInitializeObjects+0x210>)
    528a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    528c:	201e      	movs	r0, #30
    528e:	f7ff fd75 	bl	4d7c <getCoreDividerConfig>
    5292:	4603      	mov	r3, r0
    5294:	4a36      	ldr	r2, [pc, #216]	; (5370 <Clock_Ip_ClockInitializeObjects+0x214>)
    5296:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5298:	201f      	movs	r0, #31
    529a:	f7ff fd6f 	bl	4d7c <getCoreDividerConfig>
    529e:	4603      	mov	r3, r0
    52a0:	4a34      	ldr	r2, [pc, #208]	; (5374 <Clock_Ip_ClockInitializeObjects+0x218>)
    52a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    52a4:	2021      	movs	r0, #33	; 0x21
    52a6:	f7ff fe0f 	bl	4ec8 <getBusDividerConfig>
    52aa:	4603      	mov	r3, r0
    52ac:	4a32      	ldr	r2, [pc, #200]	; (5378 <Clock_Ip_ClockInitializeObjects+0x21c>)
    52ae:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    52b0:	2022      	movs	r0, #34	; 0x22
    52b2:	f7ff fe09 	bl	4ec8 <getBusDividerConfig>
    52b6:	4603      	mov	r3, r0
    52b8:	4a30      	ldr	r2, [pc, #192]	; (537c <Clock_Ip_ClockInitializeObjects+0x220>)
    52ba:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    52bc:	2023      	movs	r0, #35	; 0x23
    52be:	f7ff fe03 	bl	4ec8 <getBusDividerConfig>
    52c2:	4603      	mov	r3, r0
    52c4:	4a2e      	ldr	r2, [pc, #184]	; (5380 <Clock_Ip_ClockInitializeObjects+0x224>)
    52c6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    52c8:	2025      	movs	r0, #37	; 0x25
    52ca:	f7ff fea3 	bl	5014 <getSlowDividerConfig>
    52ce:	4603      	mov	r3, r0
    52d0:	4a2c      	ldr	r2, [pc, #176]	; (5384 <Clock_Ip_ClockInitializeObjects+0x228>)
    52d2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    52d4:	2026      	movs	r0, #38	; 0x26
    52d6:	f7ff fe9d 	bl	5014 <getSlowDividerConfig>
    52da:	4603      	mov	r3, r0
    52dc:	4a2a      	ldr	r2, [pc, #168]	; (5388 <Clock_Ip_ClockInitializeObjects+0x22c>)
    52de:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    52e0:	2027      	movs	r0, #39	; 0x27
    52e2:	f7ff fe97 	bl	5014 <getSlowDividerConfig>
    52e6:	4603      	mov	r3, r0
    52e8:	4a28      	ldr	r2, [pc, #160]	; (538c <Clock_Ip_ClockInitializeObjects+0x230>)
    52ea:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    52ec:	bf00      	nop
    52ee:	b003      	add	sp, #12
    52f0:	f85d fb04 	ldr.w	pc, [sp], #4
    52f4:	1fff8cd0 	.word	0x1fff8cd0
    52f8:	000101c4 	.word	0x000101c4
    52fc:	00010810 	.word	0x00010810
    5300:	1fff8b9c 	.word	0x1fff8b9c
    5304:	00010184 	.word	0x00010184
    5308:	00010758 	.word	0x00010758
    530c:	1fff8ba0 	.word	0x1fff8ba0
    5310:	00010194 	.word	0x00010194
    5314:	000107c4 	.word	0x000107c4
    5318:	1fff8ba4 	.word	0x1fff8ba4
    531c:	000101d4 	.word	0x000101d4
    5320:	0001083c 	.word	0x0001083c
    5324:	1fff8ba8 	.word	0x1fff8ba8
    5328:	1fff8be4 	.word	0x1fff8be4
    532c:	00010164 	.word	0x00010164
    5330:	00010714 	.word	0x00010714
    5334:	1fff8bac 	.word	0x1fff8bac
    5338:	1fff8be8 	.word	0x1fff8be8
    533c:	1fff8bb0 	.word	0x1fff8bb0
    5340:	1fff8bec 	.word	0x1fff8bec
    5344:	1fff8bb4 	.word	0x1fff8bb4
    5348:	1fff8bf0 	.word	0x1fff8bf0
    534c:	1fff8b19 	.word	0x1fff8b19
    5350:	1fff8b10 	.word	0x1fff8b10
    5354:	1fff8bb8 	.word	0x1fff8bb8
    5358:	1fff8bbc 	.word	0x1fff8bbc
    535c:	1fff8bc0 	.word	0x1fff8bc0
    5360:	1fff8bc4 	.word	0x1fff8bc4
    5364:	1fff8bc8 	.word	0x1fff8bc8
    5368:	1fff8bf4 	.word	0x1fff8bf4
    536c:	1fff8bcc 	.word	0x1fff8bcc
    5370:	1fff8bd0 	.word	0x1fff8bd0
    5374:	1fff8bf8 	.word	0x1fff8bf8
    5378:	1fff8bd4 	.word	0x1fff8bd4
    537c:	1fff8bd8 	.word	0x1fff8bd8
    5380:	1fff8bfc 	.word	0x1fff8bfc
    5384:	1fff8bdc 	.word	0x1fff8bdc
    5388:	1fff8be0 	.word	0x1fff8be0
    538c:	1fff8c00 	.word	0x1fff8c00

00005390 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5390:	b500      	push	{lr}
    5392:	b083      	sub	sp, #12
    5394:	9001      	str	r0, [sp, #4]
    5396:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5398:	9b01      	ldr	r3, [sp, #4]
    539a:	2b03      	cmp	r3, #3
    539c:	f000 8090 	beq.w	54c0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    53a0:	9b01      	ldr	r3, [sp, #4]
    53a2:	2b03      	cmp	r3, #3
    53a4:	f200 80d3 	bhi.w	554e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    53a8:	9b01      	ldr	r3, [sp, #4]
    53aa:	2b00      	cmp	r3, #0
    53ac:	d040      	beq.n	5430 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    53ae:	9b01      	ldr	r3, [sp, #4]
    53b0:	3b01      	subs	r3, #1
    53b2:	2b01      	cmp	r3, #1
    53b4:	f200 80cb 	bhi.w	554e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    53b8:	9b00      	ldr	r3, [sp, #0]
    53ba:	2b00      	cmp	r3, #0
    53bc:	f040 80c9 	bne.w	5552 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    53c0:	4b68      	ldr	r3, [pc, #416]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    53c2:	2200      	movs	r2, #0
    53c4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    53c6:	4b68      	ldr	r3, [pc, #416]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53c8:	681b      	ldr	r3, [r3, #0]
    53ca:	685b      	ldr	r3, [r3, #4]
    53cc:	4a67      	ldr	r2, [pc, #412]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    53ce:	6812      	ldr	r2, [r2, #0]
    53d0:	4610      	mov	r0, r2
    53d2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    53d4:	4b66      	ldr	r3, [pc, #408]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    53d6:	681b      	ldr	r3, [r3, #0]
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	4a66      	ldr	r2, [pc, #408]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    53dc:	6812      	ldr	r2, [r2, #0]
    53de:	4610      	mov	r0, r2
    53e0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    53e2:	4b65      	ldr	r3, [pc, #404]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    53e4:	681b      	ldr	r3, [r3, #0]
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	4a64      	ldr	r2, [pc, #400]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    53ea:	6812      	ldr	r2, [r2, #0]
    53ec:	4610      	mov	r0, r2
    53ee:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    53f0:	4b63      	ldr	r3, [pc, #396]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	681b      	ldr	r3, [r3, #0]
    53f6:	4a63      	ldr	r2, [pc, #396]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    53f8:	6812      	ldr	r2, [r2, #0]
    53fa:	4610      	mov	r0, r2
    53fc:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    53fe:	4b62      	ldr	r3, [pc, #392]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5400:	681b      	ldr	r3, [r3, #0]
    5402:	691b      	ldr	r3, [r3, #16]
    5404:	4a61      	ldr	r2, [pc, #388]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5406:	6812      	ldr	r2, [r2, #0]
    5408:	6812      	ldr	r2, [r2, #0]
    540a:	4610      	mov	r0, r2
    540c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    540e:	4b60      	ldr	r3, [pc, #384]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5410:	681b      	ldr	r3, [r3, #0]
    5412:	68db      	ldr	r3, [r3, #12]
    5414:	4a5f      	ldr	r2, [pc, #380]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5416:	6812      	ldr	r2, [r2, #0]
    5418:	6812      	ldr	r2, [r2, #0]
    541a:	4610      	mov	r0, r2
    541c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    541e:	4b5e      	ldr	r3, [pc, #376]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	689b      	ldr	r3, [r3, #8]
    5424:	4a5d      	ldr	r2, [pc, #372]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5426:	6812      	ldr	r2, [r2, #0]
    5428:	6812      	ldr	r2, [r2, #0]
    542a:	4610      	mov	r0, r2
    542c:	4798      	blx	r3
            }
        }
        break;
    542e:	e090      	b.n	5552 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5430:	9b00      	ldr	r3, [sp, #0]
    5432:	2b02      	cmp	r3, #2
    5434:	f040 808f 	bne.w	5556 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5438:	4b4a      	ldr	r3, [pc, #296]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    543a:	2201      	movs	r2, #1
    543c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    543e:	4b56      	ldr	r3, [pc, #344]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5440:	681b      	ldr	r3, [r3, #0]
    5442:	685b      	ldr	r3, [r3, #4]
    5444:	4a55      	ldr	r2, [pc, #340]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5446:	6812      	ldr	r2, [r2, #0]
    5448:	4610      	mov	r0, r2
    544a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    544c:	4b50      	ldr	r3, [pc, #320]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    544e:	681b      	ldr	r3, [r3, #0]
    5450:	691b      	ldr	r3, [r3, #16]
    5452:	4a50      	ldr	r2, [pc, #320]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5454:	6812      	ldr	r2, [r2, #0]
    5456:	4610      	mov	r0, r2
    5458:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    545a:	4b4d      	ldr	r3, [pc, #308]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    545c:	681b      	ldr	r3, [r3, #0]
    545e:	689b      	ldr	r3, [r3, #8]
    5460:	4a4c      	ldr	r2, [pc, #304]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5462:	6812      	ldr	r2, [r2, #0]
    5464:	4610      	mov	r0, r2
    5466:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5468:	4b47      	ldr	r3, [pc, #284]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    546a:	681b      	ldr	r3, [r3, #0]
    546c:	68db      	ldr	r3, [r3, #12]
    546e:	4a47      	ldr	r2, [pc, #284]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5470:	6812      	ldr	r2, [r2, #0]
    5472:	4610      	mov	r0, r2
    5474:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5476:	4b44      	ldr	r3, [pc, #272]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	689b      	ldr	r3, [r3, #8]
    547c:	4a43      	ldr	r2, [pc, #268]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    547e:	6812      	ldr	r2, [r2, #0]
    5480:	6812      	ldr	r2, [r2, #0]
    5482:	4610      	mov	r0, r2
    5484:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5486:	4b38      	ldr	r3, [pc, #224]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	685b      	ldr	r3, [r3, #4]
    548c:	4a44      	ldr	r2, [pc, #272]	; (55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    548e:	6812      	ldr	r2, [r2, #0]
    5490:	4610      	mov	r0, r2
    5492:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5494:	4b36      	ldr	r3, [pc, #216]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	4a42      	ldr	r2, [pc, #264]	; (55a4 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    549c:	6812      	ldr	r2, [r2, #0]
    549e:	4610      	mov	r0, r2
    54a0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    54a2:	4b35      	ldr	r3, [pc, #212]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    54a4:	681b      	ldr	r3, [r3, #0]
    54a6:	681b      	ldr	r3, [r3, #0]
    54a8:	4a3f      	ldr	r2, [pc, #252]	; (55a8 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    54aa:	6812      	ldr	r2, [r2, #0]
    54ac:	4610      	mov	r0, r2
    54ae:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    54b0:	4b33      	ldr	r3, [pc, #204]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	681b      	ldr	r3, [r3, #0]
    54b6:	4a3d      	ldr	r2, [pc, #244]	; (55ac <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    54b8:	6812      	ldr	r2, [r2, #0]
    54ba:	4610      	mov	r0, r2
    54bc:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    54be:	e04a      	b.n	5556 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54c0:	9b00      	ldr	r3, [sp, #0]
    54c2:	2b02      	cmp	r3, #2
    54c4:	d149      	bne.n	555a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54c6:	4b27      	ldr	r3, [pc, #156]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54c8:	2201      	movs	r2, #1
    54ca:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54cc:	4b32      	ldr	r3, [pc, #200]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54ce:	681b      	ldr	r3, [r3, #0]
    54d0:	685b      	ldr	r3, [r3, #4]
    54d2:	4a32      	ldr	r2, [pc, #200]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54d4:	6812      	ldr	r2, [r2, #0]
    54d6:	4610      	mov	r0, r2
    54d8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54da:	4b2d      	ldr	r3, [pc, #180]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	691b      	ldr	r3, [r3, #16]
    54e0:	4a2c      	ldr	r2, [pc, #176]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54e2:	6812      	ldr	r2, [r2, #0]
    54e4:	4610      	mov	r0, r2
    54e6:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54e8:	4b29      	ldr	r3, [pc, #164]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	689b      	ldr	r3, [r3, #8]
    54ee:	4a29      	ldr	r2, [pc, #164]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54f0:	6812      	ldr	r2, [r2, #0]
    54f2:	4610      	mov	r0, r2
    54f4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54f6:	4b24      	ldr	r3, [pc, #144]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	68db      	ldr	r3, [r3, #12]
    54fc:	4a23      	ldr	r2, [pc, #140]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54fe:	6812      	ldr	r2, [r2, #0]
    5500:	4610      	mov	r0, r2
    5502:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5504:	4b20      	ldr	r3, [pc, #128]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	689b      	ldr	r3, [r3, #8]
    550a:	4a20      	ldr	r2, [pc, #128]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    550c:	6812      	ldr	r2, [r2, #0]
    550e:	6812      	ldr	r2, [r2, #0]
    5510:	4610      	mov	r0, r2
    5512:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5514:	4b26      	ldr	r3, [pc, #152]	; (55b0 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	685b      	ldr	r3, [r3, #4]
    551a:	4a26      	ldr	r2, [pc, #152]	; (55b4 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    551c:	6812      	ldr	r2, [r2, #0]
    551e:	4610      	mov	r0, r2
    5520:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5522:	4b25      	ldr	r3, [pc, #148]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	681b      	ldr	r3, [r3, #0]
    5528:	4a24      	ldr	r2, [pc, #144]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    552a:	6812      	ldr	r2, [r2, #0]
    552c:	4610      	mov	r0, r2
    552e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5530:	4b23      	ldr	r3, [pc, #140]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	4a23      	ldr	r2, [pc, #140]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5538:	6812      	ldr	r2, [r2, #0]
    553a:	4610      	mov	r0, r2
    553c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    553e:	4b22      	ldr	r3, [pc, #136]	; (55c8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	4a21      	ldr	r2, [pc, #132]	; (55cc <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5546:	6812      	ldr	r2, [r2, #0]
    5548:	4610      	mov	r0, r2
    554a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    554c:	e005      	b.n	555a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    554e:	bf00      	nop
    5550:	e004      	b.n	555c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5552:	bf00      	nop
    5554:	e002      	b.n	555c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5556:	bf00      	nop
    5558:	e000      	b.n	555c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    555a:	bf00      	nop
    }

}
    555c:	bf00      	nop
    555e:	b003      	add	sp, #12
    5560:	f85d fb04 	ldr.w	pc, [sp], #4
    5564:	1fff8b19 	.word	0x1fff8b19
    5568:	1fff8ba8 	.word	0x1fff8ba8
    556c:	1fff8bc8 	.word	0x1fff8bc8
    5570:	1fff8bac 	.word	0x1fff8bac
    5574:	1fff8bd0 	.word	0x1fff8bd0
    5578:	1fff8bb0 	.word	0x1fff8bb0
    557c:	1fff8bd8 	.word	0x1fff8bd8
    5580:	1fff8bb4 	.word	0x1fff8bb4
    5584:	1fff8be0 	.word	0x1fff8be0
    5588:	1fff8b9c 	.word	0x1fff8b9c
    558c:	1fff8bc0 	.word	0x1fff8bc0
    5590:	1fff8ba0 	.word	0x1fff8ba0
    5594:	1fff8bbc 	.word	0x1fff8bbc
    5598:	1fff8ba4 	.word	0x1fff8ba4
    559c:	1fff8bb8 	.word	0x1fff8bb8
    55a0:	1fff8bc4 	.word	0x1fff8bc4
    55a4:	1fff8bcc 	.word	0x1fff8bcc
    55a8:	1fff8bd4 	.word	0x1fff8bd4
    55ac:	1fff8bdc 	.word	0x1fff8bdc
    55b0:	1fff8be4 	.word	0x1fff8be4
    55b4:	1fff8bf4 	.word	0x1fff8bf4
    55b8:	1fff8be8 	.word	0x1fff8be8
    55bc:	1fff8bf8 	.word	0x1fff8bf8
    55c0:	1fff8bec 	.word	0x1fff8bec
    55c4:	1fff8bfc 	.word	0x1fff8bfc
    55c8:	1fff8bf0 	.word	0x1fff8bf0
    55cc:	1fff8c00 	.word	0x1fff8c00

000055d0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    55d0:	b500      	push	{lr}
    55d2:	b083      	sub	sp, #12
    55d4:	9001      	str	r0, [sp, #4]
    55d6:	9100      	str	r1, [sp, #0]
    switch(Command)
    55d8:	9b00      	ldr	r3, [sp, #0]
    55da:	2b04      	cmp	r3, #4
    55dc:	d010      	beq.n	5600 <Clock_Ip_Command+0x30>
    55de:	9b00      	ldr	r3, [sp, #0]
    55e0:	2b04      	cmp	r3, #4
    55e2:	d811      	bhi.n	5608 <Clock_Ip_Command+0x38>
    55e4:	9b00      	ldr	r3, [sp, #0]
    55e6:	2b01      	cmp	r3, #1
    55e8:	d006      	beq.n	55f8 <Clock_Ip_Command+0x28>
    55ea:	9b00      	ldr	r3, [sp, #0]
    55ec:	2b02      	cmp	r3, #2
    55ee:	d10b      	bne.n	5608 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    55f0:	9801      	ldr	r0, [sp, #4]
    55f2:	f7ff fdb3 	bl	515c <Clock_Ip_ClockInitializeObjects>
            break;
    55f6:	e008      	b.n	560a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    55f8:	9801      	ldr	r0, [sp, #4]
    55fa:	f7ff f9db 	bl	49b4 <Clock_Ip_SpecificPlatformInitClock>
            break;
    55fe:	e004      	b.n	560a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5600:	9801      	ldr	r0, [sp, #4]
    5602:	f7ff f8ed 	bl	47e0 <DisableSafeClock>
            break;
    5606:	e000      	b.n	560a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5608:	bf00      	nop
    }
}
    560a:	bf00      	nop
    560c:	b003      	add	sp, #12
    560e:	f85d fb04 	ldr.w	pc, [sp], #4
    5612:	bf00      	nop

00005614 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5614:	b500      	push	{lr}
    5616:	b085      	sub	sp, #20
    5618:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    561a:	4a20      	ldr	r2, [pc, #128]	; (569c <Mcu_Init+0x88>)
    561c:	9b01      	ldr	r3, [sp, #4]
    561e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5620:	2300      	movs	r3, #0
    5622:	9303      	str	r3, [sp, #12]
    5624:	e010      	b.n	5648 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5626:	4b1d      	ldr	r3, [pc, #116]	; (569c <Mcu_Init+0x88>)
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	6919      	ldr	r1, [r3, #16]
    562c:	9a03      	ldr	r2, [sp, #12]
    562e:	4613      	mov	r3, r2
    5630:	005b      	lsls	r3, r3, #1
    5632:	4413      	add	r3, r2
    5634:	009b      	lsls	r3, r3, #2
    5636:	440b      	add	r3, r1
    5638:	681b      	ldr	r3, [r3, #0]
    563a:	9a03      	ldr	r2, [sp, #12]
    563c:	b2d1      	uxtb	r1, r2
    563e:	4a18      	ldr	r2, [pc, #96]	; (56a0 <Mcu_Init+0x8c>)
    5640:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5642:	9b03      	ldr	r3, [sp, #12]
    5644:	3301      	adds	r3, #1
    5646:	9303      	str	r3, [sp, #12]
    5648:	4b14      	ldr	r3, [pc, #80]	; (569c <Mcu_Init+0x88>)
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	689b      	ldr	r3, [r3, #8]
    564e:	9a03      	ldr	r2, [sp, #12]
    5650:	429a      	cmp	r2, r3
    5652:	d3e8      	bcc.n	5626 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5654:	2300      	movs	r3, #0
    5656:	9303      	str	r3, [sp, #12]
    5658:	e010      	b.n	567c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    565a:	4b10      	ldr	r3, [pc, #64]	; (569c <Mcu_Init+0x88>)
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	6959      	ldr	r1, [r3, #20]
    5660:	9a03      	ldr	r2, [sp, #12]
    5662:	4613      	mov	r3, r2
    5664:	01db      	lsls	r3, r3, #7
    5666:	1a9b      	subs	r3, r3, r2
    5668:	00db      	lsls	r3, r3, #3
    566a:	440b      	add	r3, r1
    566c:	681b      	ldr	r3, [r3, #0]
    566e:	9a03      	ldr	r2, [sp, #12]
    5670:	b2d1      	uxtb	r1, r2
    5672:	4a0c      	ldr	r2, [pc, #48]	; (56a4 <Mcu_Init+0x90>)
    5674:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5676:	9b03      	ldr	r3, [sp, #12]
    5678:	3301      	adds	r3, #1
    567a:	9303      	str	r3, [sp, #12]
    567c:	4b07      	ldr	r3, [pc, #28]	; (569c <Mcu_Init+0x88>)
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	68db      	ldr	r3, [r3, #12]
    5682:	9a03      	ldr	r2, [sp, #12]
    5684:	429a      	cmp	r2, r3
    5686:	d3e8      	bcc.n	565a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5688:	4b04      	ldr	r3, [pc, #16]	; (569c <Mcu_Init+0x88>)
    568a:	681b      	ldr	r3, [r3, #0]
    568c:	699b      	ldr	r3, [r3, #24]
    568e:	4618      	mov	r0, r3
    5690:	f000 f88a 	bl	57a8 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5694:	bf00      	nop
    5696:	b005      	add	sp, #20
    5698:	f85d fb04 	ldr.w	pc, [sp], #4
    569c:	1fff8cdc 	.word	0x1fff8cdc
    56a0:	1fff8cd8 	.word	0x1fff8cd8
    56a4:	1fff8cd4 	.word	0x1fff8cd4

000056a8 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    56a8:	b084      	sub	sp, #16
    56aa:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    56ac:	2301      	movs	r3, #1
    56ae:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    56b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    56b6:	4618      	mov	r0, r3
    56b8:	b004      	add	sp, #16
    56ba:	4770      	bx	lr

000056bc <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    56bc:	b500      	push	{lr}
    56be:	b085      	sub	sp, #20
    56c0:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    56c2:	4a0e      	ldr	r2, [pc, #56]	; (56fc <Mcu_InitClock+0x40>)
    56c4:	9b01      	ldr	r3, [sp, #4]
    56c6:	4413      	add	r3, r2
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    56ce:	4b0c      	ldr	r3, [pc, #48]	; (5700 <Mcu_InitClock+0x44>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	6959      	ldr	r1, [r3, #20]
    56d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    56d8:	4613      	mov	r3, r2
    56da:	01db      	lsls	r3, r3, #7
    56dc:	1a9b      	subs	r3, r3, r2
    56de:	00db      	lsls	r3, r3, #3
    56e0:	440b      	add	r3, r1
    56e2:	4618      	mov	r0, r3
    56e4:	f000 f86a 	bl	57bc <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    56e8:	2300      	movs	r3, #0
    56ea:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    56ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    56f2:	4618      	mov	r0, r3
    56f4:	b005      	add	sp, #20
    56f6:	f85d fb04 	ldr.w	pc, [sp], #4
    56fa:	bf00      	nop
    56fc:	1fff8cd4 	.word	0x1fff8cd4
    5700:	1fff8cdc 	.word	0x1fff8cdc

00005704 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5704:	b500      	push	{lr}
    5706:	b085      	sub	sp, #20
    5708:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    570a:	4a0d      	ldr	r2, [pc, #52]	; (5740 <Mcu_SetMode+0x3c>)
    570c:	9b01      	ldr	r3, [sp, #4]
    570e:	4413      	add	r3, r2
    5710:	781b      	ldrb	r3, [r3, #0]
    5712:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5716:	f009 fa51 	bl	ebbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    571a:	4b0a      	ldr	r3, [pc, #40]	; (5744 <Mcu_SetMode+0x40>)
    571c:	681b      	ldr	r3, [r3, #0]
    571e:	6919      	ldr	r1, [r3, #16]
    5720:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5724:	4613      	mov	r3, r2
    5726:	005b      	lsls	r3, r3, #1
    5728:	4413      	add	r3, r2
    572a:	009b      	lsls	r3, r3, #2
    572c:	440b      	add	r3, r1
    572e:	4618      	mov	r0, r3
    5730:	f000 f84e 	bl	57d0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5734:	f009 fa6e 	bl	ec14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5738:	bf00      	nop
    573a:	b005      	add	sp, #20
    573c:	f85d fb04 	ldr.w	pc, [sp], #4
    5740:	1fff8cd8 	.word	0x1fff8cd8
    5744:	1fff8cdc 	.word	0x1fff8cdc

00005748 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5748:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    574a:	2302      	movs	r3, #2
    574c:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    574e:	9b01      	ldr	r3, [sp, #4]
}
    5750:	4618      	mov	r0, r3
    5752:	b002      	add	sp, #8
    5754:	4770      	bx	lr

00005756 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5756:	b500      	push	{lr}
    5758:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    575a:	f000 f843 	bl	57e4 <Mcu_Ipw_GetResetReason>
    575e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5760:	9b01      	ldr	r3, [sp, #4]
}
    5762:	4618      	mov	r0, r3
    5764:	b003      	add	sp, #12
    5766:	f85d fb04 	ldr.w	pc, [sp], #4

0000576a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    576a:	b500      	push	{lr}
    576c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    576e:	f000 f83f 	bl	57f0 <Mcu_Ipw_GetResetRawValue>
    5772:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5774:	9b01      	ldr	r3, [sp, #4]
}
    5776:	4618      	mov	r0, r3
    5778:	b003      	add	sp, #12
    577a:	f85d fb04 	ldr.w	pc, [sp], #4

0000577e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    577e:	b500      	push	{lr}
    5780:	b083      	sub	sp, #12
    5782:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5784:	9801      	ldr	r0, [sp, #4]
    5786:	f000 f839 	bl	57fc <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    578a:	bf00      	nop
    578c:	b003      	add	sp, #12
    578e:	f85d fb04 	ldr.w	pc, [sp], #4

00005792 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5792:	b082      	sub	sp, #8
    5794:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5796:	4b03      	ldr	r3, [pc, #12]	; (57a4 <Mcu_ClkSrcFailureNotification+0x12>)
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    579c:	bf00      	nop
    579e:	b002      	add	sp, #8
    57a0:	4770      	bx	lr
    57a2:	bf00      	nop
    57a4:	1fff8cdc 	.word	0x1fff8cdc

000057a8 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    57a8:	b500      	push	{lr}
    57aa:	b083      	sub	sp, #12
    57ac:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    57ae:	9801      	ldr	r0, [sp, #4]
    57b0:	f000 f882 	bl	58b8 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    57b4:	bf00      	nop
    57b6:	b003      	add	sp, #12
    57b8:	f85d fb04 	ldr.w	pc, [sp], #4

000057bc <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    57bc:	b500      	push	{lr}
    57be:	b083      	sub	sp, #12
    57c0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    57c2:	9801      	ldr	r0, [sp, #4]
    57c4:	f7fc fc6a 	bl	209c <Clock_Ip_InitClock>
}
    57c8:	bf00      	nop
    57ca:	b003      	add	sp, #12
    57cc:	f85d fb04 	ldr.w	pc, [sp], #4

000057d0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    57d0:	b500      	push	{lr}
    57d2:	b083      	sub	sp, #12
    57d4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    57d6:	9801      	ldr	r0, [sp, #4]
    57d8:	f000 f820 	bl	581c <Power_Ip_SetMode>
}
    57dc:	bf00      	nop
    57de:	b003      	add	sp, #12
    57e0:	f85d fb04 	ldr.w	pc, [sp], #4

000057e4 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    57e4:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    57e6:	f000 f84f 	bl	5888 <Power_Ip_GetResetReason>
    57ea:	4603      	mov	r3, r0
}
    57ec:	4618      	mov	r0, r3
    57ee:	bd08      	pop	{r3, pc}

000057f0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    57f0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    57f2:	f000 f857 	bl	58a4 <Power_Ip_GetResetRawValue>
    57f6:	4603      	mov	r3, r0
}
    57f8:	4618      	mov	r0, r3
    57fa:	bd08      	pop	{r3, pc}

000057fc <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57fc:	b500      	push	{lr}
    57fe:	b083      	sub	sp, #12
    5800:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5802:	9b01      	ldr	r3, [sp, #4]
    5804:	2b00      	cmp	r3, #0
    5806:	d102      	bne.n	580e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5808:	f000 f86c 	bl	58e4 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    580c:	e001      	b.n	5812 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    580e:	f000 f86e 	bl	58ee <Power_Ip_EnableSleepOnExit>
}
    5812:	bf00      	nop
    5814:	b003      	add	sp, #12
    5816:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000581c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    581c:	b500      	push	{lr}
    581e:	b085      	sub	sp, #20
    5820:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5822:	9b01      	ldr	r3, [sp, #4]
    5824:	685b      	ldr	r3, [r3, #4]
    5826:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5828:	9802      	ldr	r0, [sp, #8]
    582a:	f000 f9f5 	bl	5c18 <Power_Ip_SMC_ModeCheckEntry>
    582e:	4603      	mov	r3, r0
    5830:	2b00      	cmp	r3, #0
    5832:	d002      	beq.n	583a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5834:	2301      	movs	r3, #1
    5836:	9303      	str	r3, [sp, #12]
    5838:	e003      	b.n	5842 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    583a:	9801      	ldr	r0, [sp, #4]
    583c:	f000 fa1e 	bl	5c7c <Power_Ip_SMC_ModeConfig>
    5840:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5842:	9b03      	ldr	r3, [sp, #12]
    5844:	2b01      	cmp	r3, #1
    5846:	d103      	bne.n	5850 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5848:	21ff      	movs	r1, #255	; 0xff
    584a:	2003      	movs	r0, #3
    584c:	f000 f8f4 	bl	5a38 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5850:	bf00      	nop
    5852:	b005      	add	sp, #20
    5854:	f85d fb04 	ldr.w	pc, [sp], #4

00005858 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5858:	b084      	sub	sp, #16
    585a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    585c:	230c      	movs	r3, #12
    585e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5860:	4a08      	ldr	r2, [pc, #32]	; (5884 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5862:	9b01      	ldr	r3, [sp, #4]
    5864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5868:	2b0e      	cmp	r3, #14
    586a:	d805      	bhi.n	5878 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    586c:	4a05      	ldr	r2, [pc, #20]	; (5884 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    586e:	9b01      	ldr	r3, [sp, #4]
    5870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5874:	9303      	str	r3, [sp, #12]
    5876:	e001      	b.n	587c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5878:	230c      	movs	r3, #12
    587a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    587c:	9b03      	ldr	r3, [sp, #12]
}
    587e:	4618      	mov	r0, r3
    5880:	b004      	add	sp, #16
    5882:	4770      	bx	lr
    5884:	000108b0 	.word	0x000108b0

00005888 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5888:	b500      	push	{lr}
    588a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    588c:	f000 f940 	bl	5b10 <Power_Ip_RCM_GetResetReason>
    5890:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5892:	9801      	ldr	r0, [sp, #4]
    5894:	f7ff ffe0 	bl	5858 <Power_Ip_ConvertIntergeToResetType>
    5898:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    589a:	9b00      	ldr	r3, [sp, #0]
}
    589c:	4618      	mov	r0, r3
    589e:	b003      	add	sp, #12
    58a0:	f85d fb04 	ldr.w	pc, [sp], #4

000058a4 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    58a4:	b500      	push	{lr}
    58a6:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    58a8:	f000 f98a 	bl	5bc0 <Power_Ip_RCM_GetResetRawValue>
    58ac:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    58ae:	9b01      	ldr	r3, [sp, #4]
}
    58b0:	4618      	mov	r0, r3
    58b2:	b003      	add	sp, #12
    58b4:	f85d fb04 	ldr.w	pc, [sp], #4

000058b8 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    58b8:	b500      	push	{lr}
    58ba:	b083      	sub	sp, #12
    58bc:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    58be:	9b01      	ldr	r3, [sp, #4]
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	4618      	mov	r0, r3
    58c4:	f000 f90e 	bl	5ae4 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    58c8:	9b01      	ldr	r3, [sp, #4]
    58ca:	685b      	ldr	r3, [r3, #4]
    58cc:	4618      	mov	r0, r3
    58ce:	f000 f86d 	bl	59ac <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    58d2:	9b01      	ldr	r3, [sp, #4]
    58d4:	689b      	ldr	r3, [r3, #8]
    58d6:	4618      	mov	r0, r3
    58d8:	f000 f990 	bl	5bfc <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    58dc:	bf00      	nop
    58de:	b003      	add	sp, #12
    58e0:	f85d fb04 	ldr.w	pc, [sp], #4

000058e4 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    58e4:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    58e6:	f000 f811 	bl	590c <Power_Ip_CM4_DisableSleepOnExit>
}
    58ea:	bf00      	nop
    58ec:	bd08      	pop	{r3, pc}

000058ee <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    58ee:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    58f0:	f000 f820 	bl	5934 <Power_Ip_CM4_EnableSleepOnExit>
}
    58f4:	bf00      	nop
    58f6:	bd08      	pop	{r3, pc}

000058f8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    58f8:	b082      	sub	sp, #8
    58fa:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    58fc:	4a02      	ldr	r2, [pc, #8]	; (5908 <Power_Ip_InstallNotificationsCallback+0x10>)
    58fe:	9b01      	ldr	r3, [sp, #4]
    5900:	6013      	str	r3, [r2, #0]
}
    5902:	bf00      	nop
    5904:	b002      	add	sp, #8
    5906:	4770      	bx	lr
    5908:	1fff8b1c 	.word	0x1fff8b1c

0000590c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    590c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    590e:	2300      	movs	r3, #0
    5910:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5912:	4b07      	ldr	r3, [pc, #28]	; (5930 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	685b      	ldr	r3, [r3, #4]
    5918:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    591a:	9b01      	ldr	r3, [sp, #4]
    591c:	f023 0302 	bic.w	r3, r3, #2
    5920:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5922:	4b03      	ldr	r3, [pc, #12]	; (5930 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	9a01      	ldr	r2, [sp, #4]
    5928:	605a      	str	r2, [r3, #4]
}
    592a:	bf00      	nop
    592c:	b002      	add	sp, #8
    592e:	4770      	bx	lr
    5930:	1fff8b20 	.word	0x1fff8b20

00005934 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5934:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5936:	2300      	movs	r3, #0
    5938:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    593a:	4b07      	ldr	r3, [pc, #28]	; (5958 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    593c:	681b      	ldr	r3, [r3, #0]
    593e:	685b      	ldr	r3, [r3, #4]
    5940:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5942:	9b01      	ldr	r3, [sp, #4]
    5944:	f043 0302 	orr.w	r3, r3, #2
    5948:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    594a:	4b03      	ldr	r3, [pc, #12]	; (5958 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	9a01      	ldr	r2, [sp, #4]
    5950:	605a      	str	r2, [r3, #4]
}
    5952:	bf00      	nop
    5954:	b002      	add	sp, #8
    5956:	4770      	bx	lr
    5958:	1fff8b20 	.word	0x1fff8b20

0000595c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    595c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    595e:	2300      	movs	r3, #0
    5960:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5962:	4b07      	ldr	r3, [pc, #28]	; (5980 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	685b      	ldr	r3, [r3, #4]
    5968:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    596a:	9b01      	ldr	r3, [sp, #4]
    596c:	f043 0304 	orr.w	r3, r3, #4
    5970:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5972:	4b03      	ldr	r3, [pc, #12]	; (5980 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5974:	681b      	ldr	r3, [r3, #0]
    5976:	9a01      	ldr	r2, [sp, #4]
    5978:	605a      	str	r2, [r3, #4]
}
    597a:	bf00      	nop
    597c:	b002      	add	sp, #8
    597e:	4770      	bx	lr
    5980:	1fff8b20 	.word	0x1fff8b20

00005984 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5984:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5986:	2300      	movs	r3, #0
    5988:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    598a:	4b07      	ldr	r3, [pc, #28]	; (59a8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    598c:	681b      	ldr	r3, [r3, #0]
    598e:	685b      	ldr	r3, [r3, #4]
    5990:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5992:	9b01      	ldr	r3, [sp, #4]
    5994:	f023 0304 	bic.w	r3, r3, #4
    5998:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    599a:	4b03      	ldr	r3, [pc, #12]	; (59a8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	9a01      	ldr	r2, [sp, #4]
    59a0:	605a      	str	r2, [r3, #4]
}
    59a2:	bf00      	nop
    59a4:	b002      	add	sp, #8
    59a6:	4770      	bx	lr
    59a8:	1fff8b20 	.word	0x1fff8b20

000059ac <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    59ac:	b084      	sub	sp, #16
    59ae:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    59b0:	4b20      	ldr	r3, [pc, #128]	; (5a34 <Power_Ip_PMC_PowerInit+0x88>)
    59b2:	781b      	ldrb	r3, [r3, #0]
    59b4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    59b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59bc:	f003 030f 	and.w	r3, r3, #15
    59c0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    59c4:	9b01      	ldr	r3, [sp, #4]
    59c6:	781a      	ldrb	r2, [r3, #0]
    59c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59cc:	4313      	orrs	r3, r2
    59ce:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    59d2:	4a18      	ldr	r2, [pc, #96]	; (5a34 <Power_Ip_PMC_PowerInit+0x88>)
    59d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59d8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    59da:	4b16      	ldr	r3, [pc, #88]	; (5a34 <Power_Ip_PMC_PowerInit+0x88>)
    59dc:	785b      	ldrb	r3, [r3, #1]
    59de:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    59e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59e6:	f003 031f 	and.w	r3, r3, #31
    59ea:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    59ee:	9b01      	ldr	r3, [sp, #4]
    59f0:	785a      	ldrb	r2, [r3, #1]
    59f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59f6:	4313      	orrs	r3, r2
    59f8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    59fc:	4a0d      	ldr	r2, [pc, #52]	; (5a34 <Power_Ip_PMC_PowerInit+0x88>)
    59fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a02:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a04:	4b0b      	ldr	r3, [pc, #44]	; (5a34 <Power_Ip_PMC_PowerInit+0x88>)
    5a06:	789b      	ldrb	r3, [r3, #2]
    5a08:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a14:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5a18:	9b01      	ldr	r3, [sp, #4]
    5a1a:	789a      	ldrb	r2, [r3, #2]
    5a1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a20:	4313      	orrs	r3, r2
    5a22:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a26:	4a03      	ldr	r2, [pc, #12]	; (5a34 <Power_Ip_PMC_PowerInit+0x88>)
    5a28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a2c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5a2e:	bf00      	nop
    5a30:	b004      	add	sp, #16
    5a32:	4770      	bx	lr
    5a34:	4007d000 	.word	0x4007d000

00005a38 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a38:	b500      	push	{lr}
    5a3a:	b083      	sub	sp, #12
    5a3c:	9001      	str	r0, [sp, #4]
    5a3e:	460b      	mov	r3, r1
    5a40:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5a44:	4b05      	ldr	r3, [pc, #20]	; (5a5c <Power_Ip_ReportPowerErrors+0x24>)
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5a4c:	4611      	mov	r1, r2
    5a4e:	9801      	ldr	r0, [sp, #4]
    5a50:	4798      	blx	r3
}
    5a52:	bf00      	nop
    5a54:	b003      	add	sp, #12
    5a56:	f85d fb04 	ldr.w	pc, [sp], #4
    5a5a:	bf00      	nop
    5a5c:	1fff8b1c 	.word	0x1fff8b1c

00005a60 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a60:	b082      	sub	sp, #8
    5a62:	9001      	str	r0, [sp, #4]
    5a64:	460b      	mov	r3, r1
    5a66:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5a6a:	bf00      	nop
    5a6c:	b002      	add	sp, #8
    5a6e:	4770      	bx	lr

00005a70 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5a70:	b500      	push	{lr}
    5a72:	b085      	sub	sp, #20
    5a74:	9003      	str	r0, [sp, #12]
    5a76:	9102      	str	r1, [sp, #8]
    5a78:	9201      	str	r2, [sp, #4]
    5a7a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5a7c:	2000      	movs	r0, #0
    5a7e:	f7fc f83d 	bl	1afc <OsIf_GetCounter>
    5a82:	4602      	mov	r2, r0
    5a84:	9b03      	ldr	r3, [sp, #12]
    5a86:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5a88:	9b02      	ldr	r3, [sp, #8]
    5a8a:	2200      	movs	r2, #0
    5a8c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5a8e:	2100      	movs	r1, #0
    5a90:	9800      	ldr	r0, [sp, #0]
    5a92:	f7fc f87f 	bl	1b94 <OsIf_MicrosToTicks>
    5a96:	4602      	mov	r2, r0
    5a98:	9b01      	ldr	r3, [sp, #4]
    5a9a:	601a      	str	r2, [r3, #0]
}
    5a9c:	bf00      	nop
    5a9e:	b005      	add	sp, #20
    5aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00005aa4 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5aa4:	b500      	push	{lr}
    5aa6:	b087      	sub	sp, #28
    5aa8:	9003      	str	r0, [sp, #12]
    5aaa:	9102      	str	r1, [sp, #8]
    5aac:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5aae:	2300      	movs	r3, #0
    5ab0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5ab4:	2100      	movs	r1, #0
    5ab6:	9803      	ldr	r0, [sp, #12]
    5ab8:	f7fc f839 	bl	1b2e <OsIf_GetElapsed>
    5abc:	4602      	mov	r2, r0
    5abe:	9b02      	ldr	r3, [sp, #8]
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	441a      	add	r2, r3
    5ac4:	9b02      	ldr	r3, [sp, #8]
    5ac6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5ac8:	9b02      	ldr	r3, [sp, #8]
    5aca:	681b      	ldr	r3, [r3, #0]
    5acc:	9a01      	ldr	r2, [sp, #4]
    5ace:	429a      	cmp	r2, r3
    5ad0:	d802      	bhi.n	5ad8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5ad2:	2301      	movs	r3, #1
    5ad4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5ad8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5adc:	4618      	mov	r0, r3
    5ade:	b007      	add	sp, #28
    5ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ae4 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5ae4:	b082      	sub	sp, #8
    5ae6:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5ae8:	9b01      	ldr	r3, [sp, #4]
    5aea:	681a      	ldr	r2, [r3, #0]
    5aec:	4907      	ldr	r1, [pc, #28]	; (5b0c <Power_Ip_RCM_ResetInit+0x28>)
    5aee:	f641 7307 	movw	r3, #7943	; 0x1f07
    5af2:	4013      	ands	r3, r2
    5af4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	685a      	ldr	r2, [r3, #4]
    5afa:	4904      	ldr	r1, [pc, #16]	; (5b0c <Power_Ip_RCM_ResetInit+0x28>)
    5afc:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b00:	4013      	ands	r3, r2
    5b02:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b04:	bf00      	nop
    5b06:	b002      	add	sp, #8
    5b08:	4770      	bx	lr
    5b0a:	bf00      	nop
    5b0c:	4007f000 	.word	0x4007f000

00005b10 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5b10:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5b12:	230c      	movs	r3, #12
    5b14:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b16:	2300      	movs	r3, #0
    5b18:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5b1a:	2300      	movs	r3, #0
    5b1c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5b1e:	2300      	movs	r3, #0
    5b20:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b22:	4b25      	ldr	r3, [pc, #148]	; (5bb8 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b24:	699a      	ldr	r2, [r3, #24]
    5b26:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b2a:	4013      	ands	r3, r2
    5b2c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5b2e:	9b03      	ldr	r3, [sp, #12]
    5b30:	2b00      	cmp	r3, #0
    5b32:	d008      	beq.n	5b46 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5b34:	4920      	ldr	r1, [pc, #128]	; (5bb8 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b36:	9a03      	ldr	r2, [sp, #12]
    5b38:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b3c:	4013      	ands	r3, r2
    5b3e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b40:	4a1e      	ldr	r2, [pc, #120]	; (5bbc <Power_Ip_RCM_GetResetReason+0xac>)
    5b42:	9b03      	ldr	r3, [sp, #12]
    5b44:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5b46:	4b1d      	ldr	r3, [pc, #116]	; (5bbc <Power_Ip_RCM_GetResetReason+0xac>)
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5b4c:	9a02      	ldr	r2, [sp, #8]
    5b4e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b52:	4013      	ands	r3, r2
    5b54:	2b82      	cmp	r3, #130	; 0x82
    5b56:	d102      	bne.n	5b5e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5b58:	2305      	movs	r3, #5
    5b5a:	9307      	str	r3, [sp, #28]
    5b5c:	e027      	b.n	5bae <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b5e:	2300      	movs	r3, #0
    5b60:	9306      	str	r3, [sp, #24]
    5b62:	e021      	b.n	5ba8 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5b64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b68:	9b06      	ldr	r3, [sp, #24]
    5b6a:	fa22 f303 	lsr.w	r3, r2, r3
    5b6e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5b70:	9a01      	ldr	r2, [sp, #4]
    5b72:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5b76:	4013      	ands	r3, r2
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d012      	beq.n	5ba2 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5b7c:	9a01      	ldr	r2, [sp, #4]
    5b7e:	9b02      	ldr	r3, [sp, #8]
    5b80:	4013      	ands	r3, r2
    5b82:	2b00      	cmp	r3, #0
    5b84:	d00a      	beq.n	5b9c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5b86:	9b05      	ldr	r3, [sp, #20]
    5b88:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5b8a:	9b04      	ldr	r3, [sp, #16]
    5b8c:	3301      	adds	r3, #1
    5b8e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5b90:	9b04      	ldr	r3, [sp, #16]
    5b92:	2b01      	cmp	r3, #1
    5b94:	d902      	bls.n	5b9c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5b96:	230d      	movs	r3, #13
    5b98:	9307      	str	r3, [sp, #28]
                        break;
    5b9a:	e008      	b.n	5bae <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5b9c:	9b05      	ldr	r3, [sp, #20]
    5b9e:	3301      	adds	r3, #1
    5ba0:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5ba2:	9b06      	ldr	r3, [sp, #24]
    5ba4:	3301      	adds	r3, #1
    5ba6:	9306      	str	r3, [sp, #24]
    5ba8:	9b06      	ldr	r3, [sp, #24]
    5baa:	2b1f      	cmp	r3, #31
    5bac:	d9da      	bls.n	5b64 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5bae:	9b07      	ldr	r3, [sp, #28]
}
    5bb0:	4618      	mov	r0, r3
    5bb2:	b008      	add	sp, #32
    5bb4:	4770      	bx	lr
    5bb6:	bf00      	nop
    5bb8:	4007f000 	.word	0x4007f000
    5bbc:	1fff8ce0 	.word	0x1fff8ce0

00005bc0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5bc0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bc2:	4b0c      	ldr	r3, [pc, #48]	; (5bf4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bc4:	699a      	ldr	r2, [r3, #24]
    5bc6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bca:	4013      	ands	r3, r2
    5bcc:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5bce:	9b01      	ldr	r3, [sp, #4]
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d008      	beq.n	5be6 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bd4:	4907      	ldr	r1, [pc, #28]	; (5bf4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bd6:	9a01      	ldr	r2, [sp, #4]
    5bd8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bdc:	4013      	ands	r3, r2
    5bde:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5be0:	4a05      	ldr	r2, [pc, #20]	; (5bf8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5be2:	9b01      	ldr	r3, [sp, #4]
    5be4:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5be6:	4b04      	ldr	r3, [pc, #16]	; (5bf8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5be8:	681b      	ldr	r3, [r3, #0]
    5bea:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5bec:	9b00      	ldr	r3, [sp, #0]
}
    5bee:	4618      	mov	r0, r3
    5bf0:	b002      	add	sp, #8
    5bf2:	4770      	bx	lr
    5bf4:	4007f000 	.word	0x4007f000
    5bf8:	1fff8ce0 	.word	0x1fff8ce0

00005bfc <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5bfc:	b082      	sub	sp, #8
    5bfe:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c00:	9b01      	ldr	r3, [sp, #4]
    5c02:	681b      	ldr	r3, [r3, #0]
    5c04:	4a03      	ldr	r2, [pc, #12]	; (5c14 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c0a:	6093      	str	r3, [r2, #8]
}
    5c0c:	bf00      	nop
    5c0e:	b002      	add	sp, #8
    5c10:	4770      	bx	lr
    5c12:	bf00      	nop
    5c14:	4007e000 	.word	0x4007e000

00005c18 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5c18:	b084      	sub	sp, #16
    5c1a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5c1c:	2301      	movs	r3, #1
    5c1e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5c20:	4b15      	ldr	r3, [pc, #84]	; (5c78 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5c22:	695b      	ldr	r3, [r3, #20]
    5c24:	b2db      	uxtb	r3, r3
    5c26:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	2b02      	cmp	r3, #2
    5c2c:	d012      	beq.n	5c54 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5c2e:	9b01      	ldr	r3, [sp, #4]
    5c30:	2b02      	cmp	r3, #2
    5c32:	d818      	bhi.n	5c66 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5c34:	9b01      	ldr	r3, [sp, #4]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d003      	beq.n	5c42 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5c3a:	9b01      	ldr	r3, [sp, #4]
    5c3c:	2b01      	cmp	r3, #1
    5c3e:	d003      	beq.n	5c48 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5c40:	e011      	b.n	5c66 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5c42:	2300      	movs	r3, #0
    5c44:	9303      	str	r3, [sp, #12]
            break;
    5c46:	e013      	b.n	5c70 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5c48:	9b02      	ldr	r3, [sp, #8]
    5c4a:	2b01      	cmp	r3, #1
    5c4c:	d10d      	bne.n	5c6a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c4e:	2300      	movs	r3, #0
    5c50:	9303      	str	r3, [sp, #12]
            break;
    5c52:	e00a      	b.n	5c6a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5c54:	9b02      	ldr	r3, [sp, #8]
    5c56:	2b01      	cmp	r3, #1
    5c58:	d002      	beq.n	5c60 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5c5a:	9b02      	ldr	r3, [sp, #8]
    5c5c:	2b10      	cmp	r3, #16
    5c5e:	d106      	bne.n	5c6e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c60:	2300      	movs	r3, #0
    5c62:	9303      	str	r3, [sp, #12]
            break;
    5c64:	e003      	b.n	5c6e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5c66:	bf00      	nop
    5c68:	e002      	b.n	5c70 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c6a:	bf00      	nop
    5c6c:	e000      	b.n	5c70 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c6e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5c70:	9b03      	ldr	r3, [sp, #12]
}
    5c72:	4618      	mov	r0, r3
    5c74:	b004      	add	sp, #16
    5c76:	4770      	bx	lr
    5c78:	4007e000 	.word	0x4007e000

00005c7c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5c7c:	b500      	push	{lr}
    5c7e:	b08b      	sub	sp, #44	; 0x2c
    5c80:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5c82:	2300      	movs	r3, #0
    5c84:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5c86:	2300      	movs	r3, #0
    5c88:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5c8a:	2300      	movs	r3, #0
    5c8c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5c90:	9b01      	ldr	r3, [sp, #4]
    5c92:	685b      	ldr	r3, [r3, #4]
    5c94:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5c96:	9b08      	ldr	r3, [sp, #32]
    5c98:	2b02      	cmp	r3, #2
    5c9a:	d076      	beq.n	5d8a <Power_Ip_SMC_ModeConfig+0x10e>
    5c9c:	9b08      	ldr	r3, [sp, #32]
    5c9e:	2b02      	cmp	r3, #2
    5ca0:	f200 80ab 	bhi.w	5dfa <Power_Ip_SMC_ModeConfig+0x17e>
    5ca4:	9b08      	ldr	r3, [sp, #32]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d003      	beq.n	5cb2 <Power_Ip_SMC_ModeConfig+0x36>
    5caa:	9b08      	ldr	r3, [sp, #32]
    5cac:	2b01      	cmp	r3, #1
    5cae:	d034      	beq.n	5d1a <Power_Ip_SMC_ModeConfig+0x9e>
    5cb0:	e0a3      	b.n	5dfa <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5cb2:	4b58      	ldr	r3, [pc, #352]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5cb4:	68db      	ldr	r3, [r3, #12]
    5cb6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5cb8:	9b06      	ldr	r3, [sp, #24]
    5cba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5cbe:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5cc0:	4a54      	ldr	r2, [pc, #336]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5cc2:	9b06      	ldr	r3, [sp, #24]
    5cc4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5cc6:	aa02      	add	r2, sp, #8
    5cc8:	a903      	add	r1, sp, #12
    5cca:	a804      	add	r0, sp, #16
    5ccc:	f24c 3350 	movw	r3, #50000	; 0xc350
    5cd0:	f7ff fece 	bl	5a70 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5cd4:	9a02      	ldr	r2, [sp, #8]
    5cd6:	a903      	add	r1, sp, #12
    5cd8:	ab04      	add	r3, sp, #16
    5cda:	4618      	mov	r0, r3
    5cdc:	f7ff fee2 	bl	5aa4 <Power_Ip_TimeoutExpired>
    5ce0:	4603      	mov	r3, r0
    5ce2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5ce6:	4b4b      	ldr	r3, [pc, #300]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5ce8:	695b      	ldr	r3, [r3, #20]
    5cea:	f003 0301 	and.w	r3, r3, #1
    5cee:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5cf0:	9b05      	ldr	r3, [sp, #20]
    5cf2:	2b01      	cmp	r3, #1
    5cf4:	d006      	beq.n	5d04 <Power_Ip_SMC_ModeConfig+0x88>
    5cf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5cfa:	f083 0301 	eor.w	r3, r3, #1
    5cfe:	b2db      	uxtb	r3, r3
    5d00:	2b00      	cmp	r3, #0
    5d02:	d1e7      	bne.n	5cd4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d04:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d079      	beq.n	5e00 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d0c:	2301      	movs	r3, #1
    5d0e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d10:	21ff      	movs	r1, #255	; 0xff
    5d12:	2000      	movs	r0, #0
    5d14:	f7ff fe90 	bl	5a38 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d18:	e072      	b.n	5e00 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5d1a:	4b3e      	ldr	r3, [pc, #248]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5d1c:	68db      	ldr	r3, [r3, #12]
    5d1e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d20:	9b06      	ldr	r3, [sp, #24]
    5d22:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d26:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d28:	9b06      	ldr	r3, [sp, #24]
    5d2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5d2e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d30:	4a38      	ldr	r2, [pc, #224]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5d32:	9b06      	ldr	r3, [sp, #24]
    5d34:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d36:	aa02      	add	r2, sp, #8
    5d38:	a903      	add	r1, sp, #12
    5d3a:	a804      	add	r0, sp, #16
    5d3c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d40:	f7ff fe96 	bl	5a70 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d44:	9a02      	ldr	r2, [sp, #8]
    5d46:	a903      	add	r1, sp, #12
    5d48:	ab04      	add	r3, sp, #16
    5d4a:	4618      	mov	r0, r3
    5d4c:	f7ff feaa 	bl	5aa4 <Power_Ip_TimeoutExpired>
    5d50:	4603      	mov	r3, r0
    5d52:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5d56:	4b2f      	ldr	r3, [pc, #188]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5d58:	695b      	ldr	r3, [r3, #20]
    5d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d5e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d60:	9b05      	ldr	r3, [sp, #20]
    5d62:	2b80      	cmp	r3, #128	; 0x80
    5d64:	d006      	beq.n	5d74 <Power_Ip_SMC_ModeConfig+0xf8>
    5d66:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d6a:	f083 0301 	eor.w	r3, r3, #1
    5d6e:	b2db      	uxtb	r3, r3
    5d70:	2b00      	cmp	r3, #0
    5d72:	d1e7      	bne.n	5d44 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5d74:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d043      	beq.n	5e04 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d7c:	2301      	movs	r3, #1
    5d7e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d80:	21ff      	movs	r1, #255	; 0xff
    5d82:	2000      	movs	r0, #0
    5d84:	f7ff fe58 	bl	5a38 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d88:	e03c      	b.n	5e04 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5d8a:	4b22      	ldr	r3, [pc, #136]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5d8c:	68db      	ldr	r3, [r3, #12]
    5d8e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d90:	9b06      	ldr	r3, [sp, #24]
    5d92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d96:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5d98:	9b06      	ldr	r3, [sp, #24]
    5d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d9e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5da0:	4a1c      	ldr	r2, [pc, #112]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5da2:	9b06      	ldr	r3, [sp, #24]
    5da4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5da6:	aa02      	add	r2, sp, #8
    5da8:	a903      	add	r1, sp, #12
    5daa:	a804      	add	r0, sp, #16
    5dac:	f24c 3350 	movw	r3, #50000	; 0xc350
    5db0:	f7ff fe5e 	bl	5a70 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5db4:	9a02      	ldr	r2, [sp, #8]
    5db6:	a903      	add	r1, sp, #12
    5db8:	ab04      	add	r3, sp, #16
    5dba:	4618      	mov	r0, r3
    5dbc:	f7ff fe72 	bl	5aa4 <Power_Ip_TimeoutExpired>
    5dc0:	4603      	mov	r3, r0
    5dc2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5dc6:	4b13      	ldr	r3, [pc, #76]	; (5e14 <Power_Ip_SMC_ModeConfig+0x198>)
    5dc8:	695b      	ldr	r3, [r3, #20]
    5dca:	f003 0304 	and.w	r3, r3, #4
    5dce:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dd0:	9b05      	ldr	r3, [sp, #20]
    5dd2:	2b04      	cmp	r3, #4
    5dd4:	d006      	beq.n	5de4 <Power_Ip_SMC_ModeConfig+0x168>
    5dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dda:	f083 0301 	eor.w	r3, r3, #1
    5dde:	b2db      	uxtb	r3, r3
    5de0:	2b00      	cmp	r3, #0
    5de2:	d1e7      	bne.n	5db4 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5de4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d00d      	beq.n	5e08 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dec:	2301      	movs	r3, #1
    5dee:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5df0:	21ff      	movs	r1, #255	; 0xff
    5df2:	2000      	movs	r0, #0
    5df4:	f7ff fe20 	bl	5a38 <Power_Ip_ReportPowerErrors>
            }

            break;
    5df8:	e006      	b.n	5e08 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dfa:	2301      	movs	r3, #1
    5dfc:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5dfe:	e004      	b.n	5e0a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e00:	bf00      	nop
    5e02:	e002      	b.n	5e0a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e04:	bf00      	nop
    5e06:	e000      	b.n	5e0a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e08:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e0c:	4618      	mov	r0, r3
    5e0e:	b00b      	add	sp, #44	; 0x2c
    5e10:	f85d fb04 	ldr.w	pc, [sp], #4
    5e14:	4007e000 	.word	0x4007e000

00005e18 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5e18:	b500      	push	{lr}
    5e1a:	b085      	sub	sp, #20
    5e1c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5e1e:	9b01      	ldr	r3, [sp, #4]
    5e20:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5e22:	9803      	ldr	r0, [sp, #12]
    5e24:	f000 fbc8 	bl	65b8 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e28:	4a03      	ldr	r2, [pc, #12]	; (5e38 <Port_Init+0x20>)
    5e2a:	9b03      	ldr	r3, [sp, #12]
    5e2c:	6013      	str	r3, [r2, #0]
        }
    }
}
    5e2e:	bf00      	nop
    5e30:	b005      	add	sp, #20
    5e32:	f85d fb04 	ldr.w	pc, [sp], #4
    5e36:	bf00      	nop
    5e38:	1fff8ce4 	.word	0x1fff8ce4

00005e3c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5e3c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5e3e:	4b03      	ldr	r3, [pc, #12]	; (5e4c <Port_RefreshPortDirection+0x10>)
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	4618      	mov	r0, r3
    5e44:	f000 fc10 	bl	6668 <Port_Ipw_RefreshPortDirection>
    }
}
    5e48:	bf00      	nop
    5e4a:	bd08      	pop	{r3, pc}
    5e4c:	1fff8ce4 	.word	0x1fff8ce4

00005e50 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5e50:	b086      	sub	sp, #24
    5e52:	9003      	str	r0, [sp, #12]
    5e54:	9102      	str	r1, [sp, #8]
    5e56:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5e58:	23ff      	movs	r3, #255	; 0xff
    5e5a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5e5c:	9b03      	ldr	r3, [sp, #12]
    5e5e:	4a39      	ldr	r2, [pc, #228]	; (5f44 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5e60:	4293      	cmp	r3, r2
    5e62:	d151      	bne.n	5f08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5e64:	9b02      	ldr	r3, [sp, #8]
    5e66:	2b10      	cmp	r3, #16
    5e68:	d867      	bhi.n	5f3a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5e6a:	a201      	add	r2, pc, #4	; (adr r2, 5e70 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e70:	00005eb5 	.word	0x00005eb5
    5e74:	00005ec3 	.word	0x00005ec3
    5e78:	00005f3b 	.word	0x00005f3b
    5e7c:	00005f3b 	.word	0x00005f3b
    5e80:	00005f3b 	.word	0x00005f3b
    5e84:	00005f3b 	.word	0x00005f3b
    5e88:	00005f3b 	.word	0x00005f3b
    5e8c:	00005f3b 	.word	0x00005f3b
    5e90:	00005f3b 	.word	0x00005f3b
    5e94:	00005f3b 	.word	0x00005f3b
    5e98:	00005f3b 	.word	0x00005f3b
    5e9c:	00005f3b 	.word	0x00005f3b
    5ea0:	00005f3b 	.word	0x00005f3b
    5ea4:	00005ed1 	.word	0x00005ed1
    5ea8:	00005edf 	.word	0x00005edf
    5eac:	00005eed 	.word	0x00005eed
    5eb0:	00005efb 	.word	0x00005efb
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5eb4:	2301      	movs	r3, #1
    5eb6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5eb8:	9a05      	ldr	r2, [sp, #20]
    5eba:	9b01      	ldr	r3, [sp, #4]
    5ebc:	4313      	orrs	r3, r2
    5ebe:	9305      	str	r3, [sp, #20]
                break;
    5ec0:	e03c      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5ec2:	2302      	movs	r3, #2
    5ec4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ec6:	9a05      	ldr	r2, [sp, #20]
    5ec8:	9b01      	ldr	r3, [sp, #4]
    5eca:	4313      	orrs	r3, r2
    5ecc:	9305      	str	r3, [sp, #20]
                break;
    5ece:	e035      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5ed0:	2304      	movs	r3, #4
    5ed2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ed4:	9a05      	ldr	r2, [sp, #20]
    5ed6:	9b01      	ldr	r3, [sp, #4]
    5ed8:	4313      	orrs	r3, r2
    5eda:	9305      	str	r3, [sp, #20]
                break;
    5edc:	e02e      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5ede:	2308      	movs	r3, #8
    5ee0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ee2:	9a05      	ldr	r2, [sp, #20]
    5ee4:	9b01      	ldr	r3, [sp, #4]
    5ee6:	4313      	orrs	r3, r2
    5ee8:	9305      	str	r3, [sp, #20]
                break;
    5eea:	e027      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5eec:	230e      	movs	r3, #14
    5eee:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5ef0:	9a05      	ldr	r2, [sp, #20]
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	4013      	ands	r3, r2
    5ef6:	9305      	str	r3, [sp, #20]
                break;
    5ef8:	e020      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5efa:	230d      	movs	r3, #13
    5efc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5efe:	9a05      	ldr	r2, [sp, #20]
    5f00:	9b01      	ldr	r3, [sp, #4]
    5f02:	4013      	ands	r3, r2
    5f04:	9305      	str	r3, [sp, #20]
                break;
    5f06:	e019      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f08:	9b03      	ldr	r3, [sp, #12]
    5f0a:	4a0f      	ldr	r2, [pc, #60]	; (5f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f0c:	4293      	cmp	r3, r2
    5f0e:	d115      	bne.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5f10:	9b02      	ldr	r3, [sp, #8]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d003      	beq.n	5f1e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f16:	9b02      	ldr	r3, [sp, #8]
    5f18:	2b01      	cmp	r3, #1
    5f1a:	d007      	beq.n	5f2c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5f1c:	e00e      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5f1e:	230b      	movs	r3, #11
    5f20:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f22:	9a05      	ldr	r2, [sp, #20]
    5f24:	9b01      	ldr	r3, [sp, #4]
    5f26:	4013      	ands	r3, r2
    5f28:	9305      	str	r3, [sp, #20]
                break;
    5f2a:	e007      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5f2c:	2307      	movs	r3, #7
    5f2e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f30:	9a05      	ldr	r2, [sp, #20]
    5f32:	9b01      	ldr	r3, [sp, #4]
    5f34:	4013      	ands	r3, r2
    5f36:	9305      	str	r3, [sp, #20]
                break;
    5f38:	e000      	b.n	5f3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5f3a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5f3c:	9b05      	ldr	r3, [sp, #20]
}
    5f3e:	4618      	mov	r0, r3
    5f40:	b006      	add	sp, #24
    5f42:	4770      	bx	lr
    5f44:	4004a000 	.word	0x4004a000
    5f48:	4004b000 	.word	0x4004b000

00005f4c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5f4c:	b500      	push	{lr}
    5f4e:	b089      	sub	sp, #36	; 0x24
    5f50:	9003      	str	r0, [sp, #12]
    5f52:	9102      	str	r1, [sp, #8]
    5f54:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5f56:	9b01      	ldr	r3, [sp, #4]
    5f58:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5f5a:	9b01      	ldr	r3, [sp, #4]
    5f5c:	2b08      	cmp	r3, #8
    5f5e:	d121      	bne.n	5fa4 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5f60:	4b13      	ldr	r3, [pc, #76]	; (5fb0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f62:	685b      	ldr	r3, [r3, #4]
    5f64:	f003 030f 	and.w	r3, r3, #15
    5f68:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5f6a:	9a06      	ldr	r2, [sp, #24]
    5f6c:	9902      	ldr	r1, [sp, #8]
    5f6e:	9803      	ldr	r0, [sp, #12]
    5f70:	f7ff ff6e 	bl	5e50 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5f74:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5f76:	9b05      	ldr	r3, [sp, #20]
    5f78:	2bff      	cmp	r3, #255	; 0xff
    5f7a:	d011      	beq.n	5fa0 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5f7c:	f009 f8ae 	bl	f0dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5f80:	4b0b      	ldr	r3, [pc, #44]	; (5fb0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f82:	685b      	ldr	r3, [r3, #4]
    5f84:	4a0a      	ldr	r2, [pc, #40]	; (5fb0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f86:	f023 030f 	bic.w	r3, r3, #15
    5f8a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5f8c:	4b08      	ldr	r3, [pc, #32]	; (5fb0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f8e:	685a      	ldr	r2, [r3, #4]
    5f90:	9b05      	ldr	r3, [sp, #20]
    5f92:	f003 030f 	and.w	r3, r3, #15
    5f96:	4906      	ldr	r1, [pc, #24]	; (5fb0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f98:	4313      	orrs	r3, r2
    5f9a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5f9c:	f009 f8ca 	bl	f134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5fa0:	2300      	movs	r3, #0
    5fa2:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5fa4:	9b07      	ldr	r3, [sp, #28]
}
    5fa6:	4618      	mov	r0, r3
    5fa8:	b009      	add	sp, #36	; 0x24
    5faa:	f85d fb04 	ldr.w	pc, [sp], #4
    5fae:	bf00      	nop
    5fb0:	40048000 	.word	0x40048000

00005fb4 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5fb4:	b500      	push	{lr}
    5fb6:	b087      	sub	sp, #28
    5fb8:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5fba:	2300      	movs	r3, #0
    5fbc:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5fbe:	2300      	movs	r3, #0
    5fc0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5fc2:	2300      	movs	r3, #0
    5fc4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5fc6:	9b01      	ldr	r3, [sp, #4]
    5fc8:	68db      	ldr	r3, [r3, #12]
    5fca:	2b02      	cmp	r3, #2
    5fcc:	d00a      	beq.n	5fe4 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5fce:	9b05      	ldr	r3, [sp, #20]
    5fd0:	f043 0302 	orr.w	r3, r3, #2
    5fd4:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5fd6:	9b01      	ldr	r3, [sp, #4]
    5fd8:	68db      	ldr	r3, [r3, #12]
    5fda:	f003 0301 	and.w	r3, r3, #1
    5fde:	9a05      	ldr	r2, [sp, #20]
    5fe0:	4313      	orrs	r3, r2
    5fe2:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5fe4:	9b01      	ldr	r3, [sp, #4]
    5fe6:	699b      	ldr	r3, [r3, #24]
    5fe8:	019b      	lsls	r3, r3, #6
    5fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fee:	9a05      	ldr	r2, [sp, #20]
    5ff0:	4313      	orrs	r3, r2
    5ff2:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5ff4:	9b01      	ldr	r3, [sp, #4]
    5ff6:	6a1b      	ldr	r3, [r3, #32]
    5ff8:	03db      	lsls	r3, r3, #15
    5ffa:	b29b      	uxth	r3, r3
    5ffc:	9a05      	ldr	r2, [sp, #20]
    5ffe:	4313      	orrs	r3, r2
    6000:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6002:	9b01      	ldr	r3, [sp, #4]
    6004:	7f1b      	ldrb	r3, [r3, #28]
    6006:	2b00      	cmp	r3, #0
    6008:	d001      	beq.n	600e <Port_Ci_Port_Ip_PinInit+0x5a>
    600a:	2310      	movs	r3, #16
    600c:	e000      	b.n	6010 <Port_Ci_Port_Ip_PinInit+0x5c>
    600e:	2300      	movs	r3, #0
    6010:	9a05      	ldr	r2, [sp, #20]
    6012:	4313      	orrs	r3, r2
    6014:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6016:	9b01      	ldr	r3, [sp, #4]
    6018:	691b      	ldr	r3, [r3, #16]
    601a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    601c:	9b01      	ldr	r3, [sp, #4]
    601e:	6818      	ldr	r0, [r3, #0]
    6020:	9b01      	ldr	r3, [sp, #4]
    6022:	689b      	ldr	r3, [r3, #8]
    6024:	9a04      	ldr	r2, [sp, #16]
    6026:	4619      	mov	r1, r3
    6028:	f7ff ff90 	bl	5f4c <Port_Ci_Port_Ip_ConfigureInterleave>
    602c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    602e:	9b03      	ldr	r3, [sp, #12]
    6030:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6032:	9b04      	ldr	r3, [sp, #16]
    6034:	021b      	lsls	r3, r3, #8
    6036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    603a:	9a05      	ldr	r2, [sp, #20]
    603c:	4313      	orrs	r3, r2
    603e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6040:	f008 feb2 	bl	eda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6044:	9b01      	ldr	r3, [sp, #4]
    6046:	681b      	ldr	r3, [r3, #0]
    6048:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    604c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	689b      	ldr	r3, [r3, #8]
    6052:	2201      	movs	r2, #1
    6054:	fa02 f303 	lsl.w	r3, r2, r3
    6058:	43db      	mvns	r3, r3
    605a:	9a02      	ldr	r2, [sp, #8]
    605c:	4013      	ands	r3, r2
    605e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6060:	9b01      	ldr	r3, [sp, #4]
    6062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6066:	2b00      	cmp	r3, #0
    6068:	d001      	beq.n	606e <Port_Ci_Port_Ip_PinInit+0xba>
    606a:	2201      	movs	r2, #1
    606c:	e000      	b.n	6070 <Port_Ci_Port_Ip_PinInit+0xbc>
    606e:	2200      	movs	r2, #0
    6070:	9b01      	ldr	r3, [sp, #4]
    6072:	689b      	ldr	r3, [r3, #8]
    6074:	fa02 f303 	lsl.w	r3, r2, r3
    6078:	9a02      	ldr	r2, [sp, #8]
    607a:	4313      	orrs	r3, r2
    607c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    607e:	9b01      	ldr	r3, [sp, #4]
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	9a02      	ldr	r2, [sp, #8]
    6084:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6088:	f008 feba 	bl	ee00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    608c:	9b04      	ldr	r3, [sp, #16]
    608e:	2b01      	cmp	r3, #1
    6090:	d16d      	bne.n	616e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6092:	9b01      	ldr	r3, [sp, #4]
    6094:	695b      	ldr	r3, [r3, #20]
    6096:	2b02      	cmp	r3, #2
    6098:	d138      	bne.n	610c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    609a:	9b01      	ldr	r3, [sp, #4]
    609c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60a0:	2b01      	cmp	r3, #1
    60a2:	d10f      	bne.n	60c4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    60a4:	f008 fed2 	bl	ee4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    60a8:	9b01      	ldr	r3, [sp, #4]
    60aa:	685b      	ldr	r3, [r3, #4]
    60ac:	6859      	ldr	r1, [r3, #4]
    60ae:	9b01      	ldr	r3, [sp, #4]
    60b0:	689b      	ldr	r3, [r3, #8]
    60b2:	2201      	movs	r2, #1
    60b4:	409a      	lsls	r2, r3
    60b6:	9b01      	ldr	r3, [sp, #4]
    60b8:	685b      	ldr	r3, [r3, #4]
    60ba:	430a      	orrs	r2, r1
    60bc:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    60be:	f008 fef1 	bl	eea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    60c2:	e013      	b.n	60ec <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    60c4:	9b01      	ldr	r3, [sp, #4]
    60c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60ca:	2b00      	cmp	r3, #0
    60cc:	d10e      	bne.n	60ec <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    60ce:	f008 ff0f 	bl	eef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    60d2:	9b01      	ldr	r3, [sp, #4]
    60d4:	685b      	ldr	r3, [r3, #4]
    60d6:	6899      	ldr	r1, [r3, #8]
    60d8:	9b01      	ldr	r3, [sp, #4]
    60da:	689b      	ldr	r3, [r3, #8]
    60dc:	2201      	movs	r2, #1
    60de:	409a      	lsls	r2, r3
    60e0:	9b01      	ldr	r3, [sp, #4]
    60e2:	685b      	ldr	r3, [r3, #4]
    60e4:	430a      	orrs	r2, r1
    60e6:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    60e8:	f008 ff2e 	bl	ef48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    60ec:	f008 ff52 	bl	ef94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    60f0:	9b01      	ldr	r3, [sp, #4]
    60f2:	685b      	ldr	r3, [r3, #4]
    60f4:	6959      	ldr	r1, [r3, #20]
    60f6:	9b01      	ldr	r3, [sp, #4]
    60f8:	689b      	ldr	r3, [r3, #8]
    60fa:	2201      	movs	r2, #1
    60fc:	409a      	lsls	r2, r3
    60fe:	9b01      	ldr	r3, [sp, #4]
    6100:	685b      	ldr	r3, [r3, #4]
    6102:	430a      	orrs	r2, r1
    6104:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6106:	f008 ff71 	bl	efec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    610a:	e030      	b.n	616e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    610c:	f008 ff42 	bl	ef94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6110:	9b01      	ldr	r3, [sp, #4]
    6112:	685b      	ldr	r3, [r3, #4]
    6114:	6959      	ldr	r1, [r3, #20]
    6116:	9b01      	ldr	r3, [sp, #4]
    6118:	689b      	ldr	r3, [r3, #8]
    611a:	2201      	movs	r2, #1
    611c:	fa02 f303 	lsl.w	r3, r2, r3
    6120:	43da      	mvns	r2, r3
    6122:	9b01      	ldr	r3, [sp, #4]
    6124:	685b      	ldr	r3, [r3, #4]
    6126:	400a      	ands	r2, r1
    6128:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    612a:	f008 ff5f 	bl	efec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    612e:	f008 ff83 	bl	f038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6132:	9b01      	ldr	r3, [sp, #4]
    6134:	685b      	ldr	r3, [r3, #4]
    6136:	6999      	ldr	r1, [r3, #24]
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	689b      	ldr	r3, [r3, #8]
    613c:	2201      	movs	r2, #1
    613e:	fa02 f303 	lsl.w	r3, r2, r3
    6142:	43da      	mvns	r2, r3
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	685b      	ldr	r3, [r3, #4]
    6148:	400a      	ands	r2, r1
    614a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    614c:	9b01      	ldr	r3, [sp, #4]
    614e:	695b      	ldr	r3, [r3, #20]
    6150:	2b03      	cmp	r3, #3
    6152:	d10a      	bne.n	616a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6154:	9b01      	ldr	r3, [sp, #4]
    6156:	685b      	ldr	r3, [r3, #4]
    6158:	6999      	ldr	r1, [r3, #24]
    615a:	9b01      	ldr	r3, [sp, #4]
    615c:	689b      	ldr	r3, [r3, #8]
    615e:	2201      	movs	r2, #1
    6160:	409a      	lsls	r2, r3
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	685b      	ldr	r3, [r3, #4]
    6166:	430a      	orrs	r2, r1
    6168:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    616a:	f008 ff91 	bl	f090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	681b      	ldr	r3, [r3, #0]
    6172:	9a01      	ldr	r2, [sp, #4]
    6174:	6892      	ldr	r2, [r2, #8]
    6176:	9905      	ldr	r1, [sp, #20]
    6178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    617c:	bf00      	nop
    617e:	b007      	add	sp, #28
    6180:	f85d fb04 	ldr.w	pc, [sp], #4

00006184 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6184:	b500      	push	{lr}
    6186:	b085      	sub	sp, #20
    6188:	9001      	str	r0, [sp, #4]
    618a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    618c:	2300      	movs	r3, #0
    618e:	9303      	str	r3, [sp, #12]
    6190:	e00d      	b.n	61ae <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6192:	9a03      	ldr	r2, [sp, #12]
    6194:	4613      	mov	r3, r2
    6196:	009b      	lsls	r3, r3, #2
    6198:	4413      	add	r3, r2
    619a:	00db      	lsls	r3, r3, #3
    619c:	461a      	mov	r2, r3
    619e:	9b00      	ldr	r3, [sp, #0]
    61a0:	4413      	add	r3, r2
    61a2:	4618      	mov	r0, r3
    61a4:	f7ff ff06 	bl	5fb4 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    61a8:	9b03      	ldr	r3, [sp, #12]
    61aa:	3301      	adds	r3, #1
    61ac:	9303      	str	r3, [sp, #12]
    61ae:	9a03      	ldr	r2, [sp, #12]
    61b0:	9b01      	ldr	r3, [sp, #4]
    61b2:	429a      	cmp	r2, r3
    61b4:	d3ed      	bcc.n	6192 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    61b6:	2300      	movs	r3, #0
}
    61b8:	4618      	mov	r0, r3
    61ba:	b005      	add	sp, #20
    61bc:	f85d fb04 	ldr.w	pc, [sp], #4

000061c0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    61c0:	b500      	push	{lr}
    61c2:	b087      	sub	sp, #28
    61c4:	9003      	str	r0, [sp, #12]
    61c6:	9102      	str	r1, [sp, #8]
    61c8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    61ca:	9a01      	ldr	r2, [sp, #4]
    61cc:	9902      	ldr	r1, [sp, #8]
    61ce:	9803      	ldr	r0, [sp, #12]
    61d0:	f7ff febc 	bl	5f4c <Port_Ci_Port_Ip_ConfigureInterleave>
    61d4:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    61d6:	f008 ffd3 	bl	f180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    61da:	9b03      	ldr	r3, [sp, #12]
    61dc:	9a02      	ldr	r2, [sp, #8]
    61de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61e2:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    61e4:	9b04      	ldr	r3, [sp, #16]
    61e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    61ea:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    61ec:	9b05      	ldr	r3, [sp, #20]
    61ee:	021b      	lsls	r3, r3, #8
    61f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    61f4:	9a04      	ldr	r2, [sp, #16]
    61f6:	4313      	orrs	r3, r2
    61f8:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    61fa:	9b03      	ldr	r3, [sp, #12]
    61fc:	9a02      	ldr	r2, [sp, #8]
    61fe:	9904      	ldr	r1, [sp, #16]
    6200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6204:	f008 ffe8 	bl	f1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6208:	bf00      	nop
    620a:	b007      	add	sp, #28
    620c:	f85d fb04 	ldr.w	pc, [sp], #4

00006210 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6210:	b500      	push	{lr}
    6212:	b083      	sub	sp, #12
    6214:	9001      	str	r0, [sp, #4]
    6216:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6218:	f009 f804 	bl	f224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    621c:	9b01      	ldr	r3, [sp, #4]
    621e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6222:	2101      	movs	r1, #1
    6224:	9b00      	ldr	r3, [sp, #0]
    6226:	fa01 f303 	lsl.w	r3, r1, r3
    622a:	431a      	orrs	r2, r3
    622c:	9b01      	ldr	r3, [sp, #4]
    622e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6232:	f009 f823 	bl	f27c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6236:	bf00      	nop
    6238:	b003      	add	sp, #12
    623a:	f85d fb04 	ldr.w	pc, [sp], #4

0000623e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    623e:	b500      	push	{lr}
    6240:	b083      	sub	sp, #12
    6242:	9001      	str	r0, [sp, #4]
    6244:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6246:	f009 f83f 	bl	f2c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    624a:	9b01      	ldr	r3, [sp, #4]
    624c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6250:	2101      	movs	r1, #1
    6252:	9b00      	ldr	r3, [sp, #0]
    6254:	fa01 f303 	lsl.w	r3, r1, r3
    6258:	43db      	mvns	r3, r3
    625a:	401a      	ands	r2, r3
    625c:	9b01      	ldr	r3, [sp, #4]
    625e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6262:	f009 f85d 	bl	f320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6266:	bf00      	nop
    6268:	b003      	add	sp, #12
    626a:	f85d fb04 	ldr.w	pc, [sp], #4

0000626e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    626e:	b082      	sub	sp, #8
    6270:	9001      	str	r0, [sp, #4]
    6272:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6274:	9b00      	ldr	r3, [sp, #0]
    6276:	785b      	ldrb	r3, [r3, #1]
    6278:	f003 0201 	and.w	r2, r3, #1
    627c:	9b01      	ldr	r3, [sp, #4]
    627e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6282:	9b00      	ldr	r3, [sp, #0]
    6284:	789b      	ldrb	r3, [r3, #2]
    6286:	f003 021f 	and.w	r2, r3, #31
    628a:	9b01      	ldr	r3, [sp, #4]
    628c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6290:	bf00      	nop
    6292:	b002      	add	sp, #8
    6294:	4770      	bx	lr

00006296 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6296:	b086      	sub	sp, #24
    6298:	9003      	str	r0, [sp, #12]
    629a:	9301      	str	r3, [sp, #4]
    629c:	460b      	mov	r3, r1
    629e:	f8ad 300a 	strh.w	r3, [sp, #10]
    62a2:	4613      	mov	r3, r2
    62a4:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    62a8:	2300      	movs	r3, #0
    62aa:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    62ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62b2:	f043 0301 	orr.w	r3, r3, #1
    62b6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    62ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62be:	f043 0302 	orr.w	r3, r3, #2
    62c2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    62c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ca:	f043 0310 	orr.w	r3, r3, #16
    62ce:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    62d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62da:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    62de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    62e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    62ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    62f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    62f6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    62fa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    62fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6302:	4013      	ands	r3, r2
    6304:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6308:	9b01      	ldr	r3, [sp, #4]
    630a:	2b00      	cmp	r3, #0
    630c:	d003      	beq.n	6316 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    630e:	9b01      	ldr	r3, [sp, #4]
    6310:	2b01      	cmp	r3, #1
    6312:	d00a      	beq.n	632a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6314:	e013      	b.n	633e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6316:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    631a:	041a      	lsls	r2, r3, #16
    631c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6320:	431a      	orrs	r2, r3
    6322:	9b03      	ldr	r3, [sp, #12]
    6324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6328:	e009      	b.n	633e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    632a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    632e:	041a      	lsls	r2, r3, #16
    6330:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6334:	431a      	orrs	r2, r3
    6336:	9b03      	ldr	r3, [sp, #12]
    6338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    633c:	bf00      	nop
    }
}
    633e:	bf00      	nop
    6340:	b006      	add	sp, #24
    6342:	4770      	bx	lr

00006344 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6344:	b500      	push	{lr}
    6346:	b087      	sub	sp, #28
    6348:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    634a:	9b01      	ldr	r3, [sp, #4]
    634c:	885b      	ldrh	r3, [r3, #2]
    634e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6352:	9b01      	ldr	r3, [sp, #4]
    6354:	689b      	ldr	r3, [r3, #8]
    6356:	7a1b      	ldrb	r3, [r3, #8]
    6358:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    635c:	9b01      	ldr	r3, [sp, #4]
    635e:	689b      	ldr	r3, [r3, #8]
    6360:	681b      	ldr	r3, [r3, #0]
    6362:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6364:	9b01      	ldr	r3, [sp, #4]
    6366:	689b      	ldr	r3, [r3, #8]
    6368:	685b      	ldr	r3, [r3, #4]
    636a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    636c:	2300      	movs	r3, #0
    636e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6372:	e111      	b.n	6598 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6374:	9b02      	ldr	r3, [sp, #8]
    6376:	2b02      	cmp	r3, #2
    6378:	d169      	bne.n	644e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    637a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    637e:	2b01      	cmp	r3, #1
    6380:	d11a      	bne.n	63b8 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	685a      	ldr	r2, [r3, #4]
    6386:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    638a:	005b      	lsls	r3, r3, #1
    638c:	4413      	add	r3, r2
    638e:	881b      	ldrh	r3, [r3, #0]
    6390:	f003 021f 	and.w	r2, r3, #31
    6394:	9b01      	ldr	r3, [sp, #4]
    6396:	6859      	ldr	r1, [r3, #4]
    6398:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    639c:	005b      	lsls	r3, r3, #1
    639e:	440b      	add	r3, r1
    63a0:	881b      	ldrh	r3, [r3, #0]
    63a2:	095b      	lsrs	r3, r3, #5
    63a4:	b29b      	uxth	r3, r3
    63a6:	4619      	mov	r1, r3
    63a8:	4b81      	ldr	r3, [pc, #516]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    63aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63ae:	2101      	movs	r1, #1
    63b0:	fa01 f202 	lsl.w	r2, r1, r2
    63b4:	605a      	str	r2, [r3, #4]
    63b6:	e01d      	b.n	63f4 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    63b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63bc:	2b00      	cmp	r3, #0
    63be:	d119      	bne.n	63f4 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63c0:	9b01      	ldr	r3, [sp, #4]
    63c2:	685a      	ldr	r2, [r3, #4]
    63c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63c8:	005b      	lsls	r3, r3, #1
    63ca:	4413      	add	r3, r2
    63cc:	881b      	ldrh	r3, [r3, #0]
    63ce:	f003 021f 	and.w	r2, r3, #31
    63d2:	9b01      	ldr	r3, [sp, #4]
    63d4:	6859      	ldr	r1, [r3, #4]
    63d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63da:	005b      	lsls	r3, r3, #1
    63dc:	440b      	add	r3, r1
    63de:	881b      	ldrh	r3, [r3, #0]
    63e0:	095b      	lsrs	r3, r3, #5
    63e2:	b29b      	uxth	r3, r3
    63e4:	4619      	mov	r1, r3
    63e6:	4b72      	ldr	r3, [pc, #456]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    63e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63ec:	2101      	movs	r1, #1
    63ee:	fa01 f202 	lsl.w	r2, r1, r2
    63f2:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    63f4:	f008 ffba 	bl	f36c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63f8:	9b01      	ldr	r3, [sp, #4]
    63fa:	685a      	ldr	r2, [r3, #4]
    63fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6400:	005b      	lsls	r3, r3, #1
    6402:	4413      	add	r3, r2
    6404:	881b      	ldrh	r3, [r3, #0]
    6406:	095b      	lsrs	r3, r3, #5
    6408:	b29b      	uxth	r3, r3
    640a:	461a      	mov	r2, r3
    640c:	4b68      	ldr	r3, [pc, #416]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    640e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6412:	6959      	ldr	r1, [r3, #20]
    6414:	9b01      	ldr	r3, [sp, #4]
    6416:	685a      	ldr	r2, [r3, #4]
    6418:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    641c:	005b      	lsls	r3, r3, #1
    641e:	4413      	add	r3, r2
    6420:	881b      	ldrh	r3, [r3, #0]
    6422:	f003 031f 	and.w	r3, r3, #31
    6426:	2201      	movs	r2, #1
    6428:	409a      	lsls	r2, r3
    642a:	9b01      	ldr	r3, [sp, #4]
    642c:	6858      	ldr	r0, [r3, #4]
    642e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6432:	005b      	lsls	r3, r3, #1
    6434:	4403      	add	r3, r0
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	095b      	lsrs	r3, r3, #5
    643a:	b29b      	uxth	r3, r3
    643c:	4618      	mov	r0, r3
    643e:	4b5c      	ldr	r3, [pc, #368]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6440:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6444:	430a      	orrs	r2, r1
    6446:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6448:	f008 ffbc 	bl	f3c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    644c:	e086      	b.n	655c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    644e:	f008 ff8d 	bl	f36c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6452:	9b01      	ldr	r3, [sp, #4]
    6454:	685a      	ldr	r2, [r3, #4]
    6456:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    645a:	005b      	lsls	r3, r3, #1
    645c:	4413      	add	r3, r2
    645e:	881b      	ldrh	r3, [r3, #0]
    6460:	095b      	lsrs	r3, r3, #5
    6462:	b29b      	uxth	r3, r3
    6464:	461a      	mov	r2, r3
    6466:	4b52      	ldr	r3, [pc, #328]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    646c:	6959      	ldr	r1, [r3, #20]
    646e:	9b01      	ldr	r3, [sp, #4]
    6470:	685a      	ldr	r2, [r3, #4]
    6472:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6476:	005b      	lsls	r3, r3, #1
    6478:	4413      	add	r3, r2
    647a:	881b      	ldrh	r3, [r3, #0]
    647c:	f003 031f 	and.w	r3, r3, #31
    6480:	2201      	movs	r2, #1
    6482:	fa02 f303 	lsl.w	r3, r2, r3
    6486:	43da      	mvns	r2, r3
    6488:	9b01      	ldr	r3, [sp, #4]
    648a:	6858      	ldr	r0, [r3, #4]
    648c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6490:	005b      	lsls	r3, r3, #1
    6492:	4403      	add	r3, r0
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	095b      	lsrs	r3, r3, #5
    6498:	b29b      	uxth	r3, r3
    649a:	4618      	mov	r0, r3
    649c:	4b44      	ldr	r3, [pc, #272]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    649e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64a2:	400a      	ands	r2, r1
    64a4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64a6:	f008 ff8d 	bl	f3c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    64aa:	f008 ffb1 	bl	f410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64ae:	9b01      	ldr	r3, [sp, #4]
    64b0:	685a      	ldr	r2, [r3, #4]
    64b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64b6:	005b      	lsls	r3, r3, #1
    64b8:	4413      	add	r3, r2
    64ba:	881b      	ldrh	r3, [r3, #0]
    64bc:	095b      	lsrs	r3, r3, #5
    64be:	b29b      	uxth	r3, r3
    64c0:	461a      	mov	r2, r3
    64c2:	4b3b      	ldr	r3, [pc, #236]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    64c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64c8:	6999      	ldr	r1, [r3, #24]
    64ca:	9b01      	ldr	r3, [sp, #4]
    64cc:	685a      	ldr	r2, [r3, #4]
    64ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64d2:	005b      	lsls	r3, r3, #1
    64d4:	4413      	add	r3, r2
    64d6:	881b      	ldrh	r3, [r3, #0]
    64d8:	f003 031f 	and.w	r3, r3, #31
    64dc:	2201      	movs	r2, #1
    64de:	fa02 f303 	lsl.w	r3, r2, r3
    64e2:	43da      	mvns	r2, r3
    64e4:	9b01      	ldr	r3, [sp, #4]
    64e6:	6858      	ldr	r0, [r3, #4]
    64e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ec:	005b      	lsls	r3, r3, #1
    64ee:	4403      	add	r3, r0
    64f0:	881b      	ldrh	r3, [r3, #0]
    64f2:	095b      	lsrs	r3, r3, #5
    64f4:	b29b      	uxth	r3, r3
    64f6:	4618      	mov	r0, r3
    64f8:	4b2d      	ldr	r3, [pc, #180]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    64fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64fe:	400a      	ands	r2, r1
    6500:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6502:	9b02      	ldr	r3, [sp, #8]
    6504:	2b03      	cmp	r3, #3
    6506:	d127      	bne.n	6558 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6508:	9b01      	ldr	r3, [sp, #4]
    650a:	685a      	ldr	r2, [r3, #4]
    650c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6510:	005b      	lsls	r3, r3, #1
    6512:	4413      	add	r3, r2
    6514:	881b      	ldrh	r3, [r3, #0]
    6516:	095b      	lsrs	r3, r3, #5
    6518:	b29b      	uxth	r3, r3
    651a:	461a      	mov	r2, r3
    651c:	4b24      	ldr	r3, [pc, #144]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6522:	6999      	ldr	r1, [r3, #24]
    6524:	9b01      	ldr	r3, [sp, #4]
    6526:	685a      	ldr	r2, [r3, #4]
    6528:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    652c:	005b      	lsls	r3, r3, #1
    652e:	4413      	add	r3, r2
    6530:	881b      	ldrh	r3, [r3, #0]
    6532:	f003 031f 	and.w	r3, r3, #31
    6536:	2201      	movs	r2, #1
    6538:	409a      	lsls	r2, r3
    653a:	9b01      	ldr	r3, [sp, #4]
    653c:	6858      	ldr	r0, [r3, #4]
    653e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6542:	005b      	lsls	r3, r3, #1
    6544:	4403      	add	r3, r0
    6546:	881b      	ldrh	r3, [r3, #0]
    6548:	095b      	lsrs	r3, r3, #5
    654a:	b29b      	uxth	r3, r3
    654c:	4618      	mov	r0, r3
    654e:	4b18      	ldr	r3, [pc, #96]	; (65b0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6554:	430a      	orrs	r2, r1
    6556:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6558:	f008 ff86 	bl	f468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    655c:	9b01      	ldr	r3, [sp, #4]
    655e:	685a      	ldr	r2, [r3, #4]
    6560:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6564:	005b      	lsls	r3, r3, #1
    6566:	4413      	add	r3, r2
    6568:	881b      	ldrh	r3, [r3, #0]
    656a:	095b      	lsrs	r3, r3, #5
    656c:	b29b      	uxth	r3, r3
    656e:	461a      	mov	r2, r3
    6570:	4b10      	ldr	r3, [pc, #64]	; (65b4 <Port_Ipw_Init_UnusedPins+0x270>)
    6572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6576:	9a01      	ldr	r2, [sp, #4]
    6578:	6851      	ldr	r1, [r2, #4]
    657a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    657e:	0052      	lsls	r2, r2, #1
    6580:	440a      	add	r2, r1
    6582:	8812      	ldrh	r2, [r2, #0]
    6584:	f002 021f 	and.w	r2, r2, #31
    6588:	9903      	ldr	r1, [sp, #12]
    658a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    658e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6592:	3301      	adds	r3, #1
    6594:	f8ad 3016 	strh.w	r3, [sp, #22]
    6598:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    659c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    65a0:	429a      	cmp	r2, r3
    65a2:	f4ff aee7 	bcc.w	6374 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    65a6:	bf00      	nop
    65a8:	bf00      	nop
    65aa:	b007      	add	sp, #28
    65ac:	f85d fb04 	ldr.w	pc, [sp], #4
    65b0:	00010900 	.word	0x00010900
    65b4:	000108ec 	.word	0x000108ec

000065b8 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    65b8:	b500      	push	{lr}
    65ba:	b085      	sub	sp, #20
    65bc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    65be:	9b01      	ldr	r3, [sp, #4]
    65c0:	7c1b      	ldrb	r3, [r3, #16]
    65c2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    65c6:	2300      	movs	r3, #0
    65c8:	f8ad 300e 	strh.w	r3, [sp, #14]
    65cc:	e035      	b.n	663a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    65ce:	9b01      	ldr	r3, [sp, #4]
    65d0:	695a      	ldr	r2, [r3, #20]
    65d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65d6:	00db      	lsls	r3, r3, #3
    65d8:	4413      	add	r3, r2
    65da:	781b      	ldrb	r3, [r3, #0]
    65dc:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    65e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65e4:	4a1f      	ldr	r2, [pc, #124]	; (6664 <Port_Ipw_Init+0xac>)
    65e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    65ea:	9b01      	ldr	r3, [sp, #4]
    65ec:	695a      	ldr	r2, [r3, #20]
    65ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65f2:	00db      	lsls	r3, r3, #3
    65f4:	4413      	add	r3, r2
    65f6:	4619      	mov	r1, r3
    65f8:	f7ff fe39 	bl	626e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    65fc:	f009 f8a2 	bl	f744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6600:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6604:	4a17      	ldr	r2, [pc, #92]	; (6664 <Port_Ipw_Init+0xac>)
    6606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    660a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	695a      	ldr	r2, [r3, #20]
    6612:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6616:	00db      	lsls	r3, r3, #3
    6618:	4413      	add	r3, r2
    661a:	685a      	ldr	r2, [r3, #4]
    661c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6620:	4810      	ldr	r0, [pc, #64]	; (6664 <Port_Ipw_Init+0xac>)
    6622:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6626:	430a      	orrs	r2, r1
    6628:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    662c:	f009 f8b6 	bl	f79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6630:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6634:	3301      	adds	r3, #1
    6636:	f8ad 300e 	strh.w	r3, [sp, #14]
    663a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    663e:	b29b      	uxth	r3, r3
    6640:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6644:	429a      	cmp	r2, r3
    6646:	d3c2      	bcc.n	65ce <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6648:	9b01      	ldr	r3, [sp, #4]
    664a:	6a1b      	ldr	r3, [r3, #32]
    664c:	4619      	mov	r1, r3
    664e:	2004      	movs	r0, #4
    6650:	f7ff fd98 	bl	6184 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6654:	9801      	ldr	r0, [sp, #4]
    6656:	f7ff fe75 	bl	6344 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    665a:	bf00      	nop
    665c:	b005      	add	sp, #20
    665e:	f85d fb04 	ldr.w	pc, [sp], #4
    6662:	bf00      	nop
    6664:	000108ec 	.word	0x000108ec

00006668 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6668:	b500      	push	{lr}
    666a:	b085      	sub	sp, #20
    666c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    666e:	9b01      	ldr	r3, [sp, #4]
    6670:	881b      	ldrh	r3, [r3, #0]
    6672:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6676:	2300      	movs	r3, #0
    6678:	f8ad 300e 	strh.w	r3, [sp, #14]
    667c:	e0d2      	b.n	6824 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    667e:	9b01      	ldr	r3, [sp, #4]
    6680:	68d9      	ldr	r1, [r3, #12]
    6682:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6686:	4613      	mov	r3, r2
    6688:	009b      	lsls	r3, r3, #2
    668a:	4413      	add	r3, r2
    668c:	009b      	lsls	r3, r3, #2
    668e:	440b      	add	r3, r1
    6690:	7c5b      	ldrb	r3, [r3, #17]
    6692:	f083 0301 	eor.w	r3, r3, #1
    6696:	b2db      	uxtb	r3, r3
    6698:	2b00      	cmp	r3, #0
    669a:	f000 80be 	beq.w	681a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	68d9      	ldr	r1, [r3, #12]
    66a2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66a6:	4613      	mov	r3, r2
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	4413      	add	r3, r2
    66ac:	009b      	lsls	r3, r3, #2
    66ae:	440b      	add	r3, r1
    66b0:	7c1b      	ldrb	r3, [r3, #16]
    66b2:	2b00      	cmp	r3, #0
    66b4:	f000 80b1 	beq.w	681a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    66b8:	9b01      	ldr	r3, [sp, #4]
    66ba:	68d9      	ldr	r1, [r3, #12]
    66bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66c0:	4613      	mov	r3, r2
    66c2:	009b      	lsls	r3, r3, #2
    66c4:	4413      	add	r3, r2
    66c6:	009b      	lsls	r3, r3, #2
    66c8:	440b      	add	r3, r1
    66ca:	881b      	ldrh	r3, [r3, #0]
    66cc:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    66d0:	9b01      	ldr	r3, [sp, #4]
    66d2:	68d9      	ldr	r1, [r3, #12]
    66d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66d8:	4613      	mov	r3, r2
    66da:	009b      	lsls	r3, r3, #2
    66dc:	4413      	add	r3, r2
    66de:	009b      	lsls	r3, r3, #2
    66e0:	440b      	add	r3, r1
    66e2:	68db      	ldr	r3, [r3, #12]
    66e4:	2b02      	cmp	r3, #2
    66e6:	d11d      	bne.n	6724 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    66e8:	f009 f974 	bl	f9d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66f0:	095b      	lsrs	r3, r3, #5
    66f2:	b29b      	uxth	r3, r3
    66f4:	461a      	mov	r2, r3
    66f6:	4b51      	ldr	r3, [pc, #324]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    66f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66fc:	6959      	ldr	r1, [r3, #20]
    66fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6702:	f003 031f 	and.w	r3, r3, #31
    6706:	2201      	movs	r2, #1
    6708:	409a      	lsls	r2, r3
    670a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    670e:	095b      	lsrs	r3, r3, #5
    6710:	b29b      	uxth	r3, r3
    6712:	4618      	mov	r0, r3
    6714:	4b49      	ldr	r3, [pc, #292]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6716:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    671a:	430a      	orrs	r2, r1
    671c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    671e:	f009 f985 	bl	fa2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6722:	e07a      	b.n	681a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	68d9      	ldr	r1, [r3, #12]
    6728:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    672c:	4613      	mov	r3, r2
    672e:	009b      	lsls	r3, r3, #2
    6730:	4413      	add	r3, r2
    6732:	009b      	lsls	r3, r3, #2
    6734:	440b      	add	r3, r1
    6736:	68db      	ldr	r3, [r3, #12]
    6738:	2b01      	cmp	r3, #1
    673a:	d00b      	beq.n	6754 <Port_Ipw_RefreshPortDirection+0xec>
    673c:	9b01      	ldr	r3, [sp, #4]
    673e:	68d9      	ldr	r1, [r3, #12]
    6740:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6744:	4613      	mov	r3, r2
    6746:	009b      	lsls	r3, r3, #2
    6748:	4413      	add	r3, r2
    674a:	009b      	lsls	r3, r3, #2
    674c:	440b      	add	r3, r1
    674e:	68db      	ldr	r3, [r3, #12]
    6750:	2b03      	cmp	r3, #3
    6752:	d162      	bne.n	681a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6754:	f009 f93e 	bl	f9d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6758:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    675c:	095b      	lsrs	r3, r3, #5
    675e:	b29b      	uxth	r3, r3
    6760:	461a      	mov	r2, r3
    6762:	4b36      	ldr	r3, [pc, #216]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6768:	6959      	ldr	r1, [r3, #20]
    676a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    676e:	f003 031f 	and.w	r3, r3, #31
    6772:	2201      	movs	r2, #1
    6774:	fa02 f303 	lsl.w	r3, r2, r3
    6778:	43da      	mvns	r2, r3
    677a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    677e:	095b      	lsrs	r3, r3, #5
    6780:	b29b      	uxth	r3, r3
    6782:	4618      	mov	r0, r3
    6784:	4b2d      	ldr	r3, [pc, #180]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6786:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    678a:	400a      	ands	r2, r1
    678c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    678e:	f009 f94d 	bl	fa2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6792:	f009 f971 	bl	fa78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6796:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    679a:	095b      	lsrs	r3, r3, #5
    679c:	b29b      	uxth	r3, r3
    679e:	461a      	mov	r2, r3
    67a0:	4b26      	ldr	r3, [pc, #152]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67a6:	6999      	ldr	r1, [r3, #24]
    67a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ac:	f003 031f 	and.w	r3, r3, #31
    67b0:	2201      	movs	r2, #1
    67b2:	fa02 f303 	lsl.w	r3, r2, r3
    67b6:	43da      	mvns	r2, r3
    67b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67bc:	095b      	lsrs	r3, r3, #5
    67be:	b29b      	uxth	r3, r3
    67c0:	4618      	mov	r0, r3
    67c2:	4b1e      	ldr	r3, [pc, #120]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67c8:	400a      	ands	r2, r1
    67ca:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67cc:	9b01      	ldr	r3, [sp, #4]
    67ce:	68d9      	ldr	r1, [r3, #12]
    67d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67d4:	4613      	mov	r3, r2
    67d6:	009b      	lsls	r3, r3, #2
    67d8:	4413      	add	r3, r2
    67da:	009b      	lsls	r3, r3, #2
    67dc:	440b      	add	r3, r1
    67de:	68db      	ldr	r3, [r3, #12]
    67e0:	2b03      	cmp	r3, #3
    67e2:	d118      	bne.n	6816 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e8:	095b      	lsrs	r3, r3, #5
    67ea:	b29b      	uxth	r3, r3
    67ec:	461a      	mov	r2, r3
    67ee:	4b13      	ldr	r3, [pc, #76]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67f4:	6999      	ldr	r1, [r3, #24]
    67f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67fa:	f003 031f 	and.w	r3, r3, #31
    67fe:	2201      	movs	r2, #1
    6800:	409a      	lsls	r2, r3
    6802:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6806:	095b      	lsrs	r3, r3, #5
    6808:	b29b      	uxth	r3, r3
    680a:	4618      	mov	r0, r3
    680c:	4b0b      	ldr	r3, [pc, #44]	; (683c <Port_Ipw_RefreshPortDirection+0x1d4>)
    680e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6812:	430a      	orrs	r2, r1
    6814:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6816:	f009 f95b 	bl	fad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    681a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    681e:	3301      	adds	r3, #1
    6820:	f8ad 300e 	strh.w	r3, [sp, #14]
    6824:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6828:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    682c:	429a      	cmp	r2, r3
    682e:	f4ff af26 	bcc.w	667e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6832:	bf00      	nop
    6834:	bf00      	nop
    6836:	b005      	add	sp, #20
    6838:	f85d fb04 	ldr.w	pc, [sp], #4
    683c:	00010900 	.word	0x00010900

00006840 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    6840:	b500      	push	{lr}
    6842:	b083      	sub	sp, #12
    6844:	4603      	mov	r3, r0
    6846:	460a      	mov	r2, r1
    6848:	f88d 3007 	strb.w	r3, [sp, #7]
    684c:	4613      	mov	r3, r2
    684e:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    6852:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6856:	f89d 2007 	ldrb.w	r2, [sp, #7]
    685a:	2100      	movs	r1, #0
    685c:	207b      	movs	r0, #123	; 0x7b
    685e:	f009 fbd7 	bl	10010 <Det_ReportRuntimeError>
}
    6862:	bf00      	nop
    6864:	b003      	add	sp, #12
    6866:	f85d fb04 	ldr.w	pc, [sp], #4

0000686a <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    686a:	b500      	push	{lr}
    686c:	b085      	sub	sp, #20
    686e:	4603      	mov	r3, r0
    6870:	460a      	mov	r2, r1
    6872:	f88d 3007 	strb.w	r3, [sp, #7]
    6876:	4613      	mov	r3, r2
    6878:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    687c:	2300      	movs	r3, #0
    687e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6882:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6886:	490e      	ldr	r1, [pc, #56]	; (68c0 <Adc_ValidateNotBusyNoQueue+0x56>)
    6888:	4613      	mov	r3, r2
    688a:	005b      	lsls	r3, r3, #1
    688c:	4413      	add	r3, r2
    688e:	009b      	lsls	r3, r3, #2
    6890:	440b      	add	r3, r1
    6892:	881b      	ldrh	r3, [r3, #0]
    6894:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6898:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    689c:	2b00      	cmp	r3, #0
    689e:	d008      	beq.n	68b2 <Adc_ValidateNotBusyNoQueue+0x48>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    68a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68a4:	210b      	movs	r1, #11
    68a6:	4618      	mov	r0, r3
    68a8:	f7ff ffca 	bl	6840 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    68ac:	2301      	movs	r3, #1
    68ae:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    68b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    68b6:	4618      	mov	r0, r3
    68b8:	b005      	add	sp, #20
    68ba:	f85d fb04 	ldr.w	pc, [sp], #4
    68be:	bf00      	nop
    68c0:	1fff8d00 	.word	0x1fff8d00

000068c4 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    68c4:	b500      	push	{lr}
    68c6:	b085      	sub	sp, #20
    68c8:	4603      	mov	r3, r0
    68ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    68ce:	460b      	mov	r3, r1
    68d0:	f88d 3005 	strb.w	r3, [sp, #5]
    68d4:	4613      	mov	r3, r2
    68d6:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    68da:	2301      	movs	r3, #1
    68dc:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    68e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    68e4:	4917      	ldr	r1, [pc, #92]	; (6944 <Adc_ValidateNotBusyNoPrio+0x80>)
    68e6:	4613      	mov	r3, r2
    68e8:	009b      	lsls	r3, r3, #2
    68ea:	4413      	add	r3, r2
    68ec:	009b      	lsls	r3, r3, #2
    68ee:	440b      	add	r3, r1
    68f0:	681b      	ldr	r3, [r3, #0]
    68f2:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    68f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68f8:	f083 0301 	eor.w	r3, r3, #1
    68fc:	b2db      	uxtb	r3, r3
    68fe:	2b00      	cmp	r3, #0
    6900:	d007      	beq.n	6912 <Adc_ValidateNotBusyNoPrio+0x4e>
    6902:	9b02      	ldr	r3, [sp, #8]
    6904:	2b00      	cmp	r3, #0
    6906:	d004      	beq.n	6912 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6908:	210b      	movs	r1, #11
    690a:	2002      	movs	r0, #2
    690c:	f7ff ff98 	bl	6840 <Adc_ReportDetRuntimeError>
    6910:	e011      	b.n	6936 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    6912:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6916:	2b00      	cmp	r3, #0
    6918:	d00a      	beq.n	6930 <Adc_ValidateNotBusyNoPrio+0x6c>
    691a:	9b02      	ldr	r3, [sp, #8]
    691c:	2b00      	cmp	r3, #0
    691e:	d007      	beq.n	6930 <Adc_ValidateNotBusyNoPrio+0x6c>
    6920:	9b02      	ldr	r3, [sp, #8]
    6922:	2b03      	cmp	r3, #3
    6924:	d004      	beq.n	6930 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6926:	210b      	movs	r1, #11
    6928:	2002      	movs	r0, #2
    692a:	f7ff ff89 	bl	6840 <Adc_ReportDetRuntimeError>
    692e:	e002      	b.n	6936 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6930:	2300      	movs	r3, #0
    6932:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    6936:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    693a:	4618      	mov	r0, r3
    693c:	b005      	add	sp, #20
    693e:	f85d fb04 	ldr.w	pc, [sp], #4
    6942:	bf00      	nop
    6944:	1fff8cec 	.word	0x1fff8cec

00006948 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    6948:	b500      	push	{lr}
    694a:	b087      	sub	sp, #28
    694c:	4603      	mov	r3, r0
    694e:	460a      	mov	r2, r1
    6950:	f88d 3007 	strb.w	r3, [sp, #7]
    6954:	4613      	mov	r3, r2
    6956:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    695a:	2300      	movs	r3, #0
    695c:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6960:	2300      	movs	r3, #0
    6962:	f8ad 3016 	strh.w	r3, [sp, #22]
    6966:	e02c      	b.n	69c2 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    6968:	f89d 3006 	ldrb.w	r3, [sp, #6]
    696c:	4a1d      	ldr	r2, [pc, #116]	; (69e4 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    696e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6972:	685a      	ldr	r2, [r3, #4]
    6974:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6978:	2134      	movs	r1, #52	; 0x34
    697a:	fb01 f303 	mul.w	r3, r1, r3
    697e:	4413      	add	r3, r2
    6980:	881b      	ldrh	r3, [r3, #0]
    6982:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6986:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    698a:	4917      	ldr	r1, [pc, #92]	; (69e8 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    698c:	4613      	mov	r3, r2
    698e:	009b      	lsls	r3, r3, #2
    6990:	4413      	add	r3, r2
    6992:	009b      	lsls	r3, r3, #2
    6994:	440b      	add	r3, r1
    6996:	681b      	ldr	r3, [r3, #0]
    6998:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    699a:	9b03      	ldr	r3, [sp, #12]
    699c:	2b00      	cmp	r3, #0
    699e:	d00b      	beq.n	69b8 <Adc_ValidateCheckGroupNotConversion+0x70>
    69a0:	9b03      	ldr	r3, [sp, #12]
    69a2:	2b03      	cmp	r3, #3
    69a4:	d008      	beq.n	69b8 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    69a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69aa:	210b      	movs	r1, #11
    69ac:	4618      	mov	r0, r3
    69ae:	f7ff ff47 	bl	6840 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    69b2:	2301      	movs	r3, #1
    69b4:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    69b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69bc:	3301      	adds	r3, #1
    69be:	f8ad 3016 	strh.w	r3, [sp, #22]
    69c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    69c6:	4a07      	ldr	r2, [pc, #28]	; (69e4 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    69c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69cc:	891b      	ldrh	r3, [r3, #8]
    69ce:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69d2:	429a      	cmp	r2, r3
    69d4:	d3c8      	bcc.n	6968 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    69d6:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    69da:	4618      	mov	r0, r3
    69dc:	b007      	add	sp, #28
    69de:	f85d fb04 	ldr.w	pc, [sp], #4
    69e2:	bf00      	nop
    69e4:	1fff8ce8 	.word	0x1fff8ce8
    69e8:	1fff8cec 	.word	0x1fff8cec

000069ec <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    69ec:	b500      	push	{lr}
    69ee:	b085      	sub	sp, #20
    69f0:	4603      	mov	r3, r0
    69f2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    69f6:	2300      	movs	r3, #0
    69f8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    69fc:	2301      	movs	r3, #1
    69fe:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6a02:	2300      	movs	r3, #0
    6a04:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a08:	2300      	movs	r3, #0
    6a0a:	f88d 300d 	strb.w	r3, [sp, #13]
    6a0e:	e01d      	b.n	6a4c <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a14:	4a1b      	ldr	r2, [pc, #108]	; (6a84 <Adc_ValidateDeInitNotBusy+0x98>)
    6a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a1a:	681a      	ldr	r2, [r3, #0]
    6a1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a20:	4413      	add	r3, r2
    6a22:	7f9b      	ldrb	r3, [r3, #30]
    6a24:	2b01      	cmp	r3, #1
    6a26:	d10c      	bne.n	6a42 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6a28:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a2c:	2101      	movs	r1, #1
    6a2e:	4618      	mov	r0, r3
    6a30:	f7ff ff1b 	bl	686a <Adc_ValidateNotBusyNoQueue>
    6a34:	4603      	mov	r3, r0
    6a36:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6a3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a3e:	2b01      	cmp	r3, #1
    6a40:	d009      	beq.n	6a56 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a42:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a46:	3301      	adds	r3, #1
    6a48:	f88d 300d 	strb.w	r3, [sp, #13]
    6a4c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a50:	2b01      	cmp	r3, #1
    6a52:	d9dd      	bls.n	6a10 <Adc_ValidateDeInitNotBusy+0x24>
    6a54:	e000      	b.n	6a58 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6a56:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d10b      	bne.n	6a78 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6a60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a64:	4619      	mov	r1, r3
    6a66:	2001      	movs	r0, #1
    6a68:	f7ff ff6e 	bl	6948 <Adc_ValidateCheckGroupNotConversion>
    6a6c:	4603      	mov	r3, r0
    6a6e:	2b00      	cmp	r3, #0
    6a70:	d102      	bne.n	6a78 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6a72:	2300      	movs	r3, #0
    6a74:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6a78:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6a7c:	4618      	mov	r0, r3
    6a7e:	b005      	add	sp, #20
    6a80:	f85d fb04 	ldr.w	pc, [sp], #4
    6a84:	1fff8ce8 	.word	0x1fff8ce8

00006a88 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6a88:	b500      	push	{lr}
    6a8a:	b085      	sub	sp, #20
    6a8c:	4603      	mov	r3, r0
    6a8e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6a92:	2301      	movs	r3, #1
    6a94:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6a98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6a9c:	490b      	ldr	r1, [pc, #44]	; (6acc <Adc_ValidateSetupBufferNotBusy+0x44>)
    6a9e:	4613      	mov	r3, r2
    6aa0:	009b      	lsls	r3, r3, #2
    6aa2:	4413      	add	r3, r2
    6aa4:	009b      	lsls	r3, r3, #2
    6aa6:	440b      	add	r3, r1
    6aa8:	681b      	ldr	r3, [r3, #0]
    6aaa:	2b00      	cmp	r3, #0
    6aac:	d004      	beq.n	6ab8 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6aae:	210b      	movs	r1, #11
    6ab0:	200c      	movs	r0, #12
    6ab2:	f7ff fec5 	bl	6840 <Adc_ReportDetRuntimeError>
    6ab6:	e002      	b.n	6abe <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6ab8:	2300      	movs	r3, #0
    6aba:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6abe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ac2:	4618      	mov	r0, r3
    6ac4:	b005      	add	sp, #20
    6ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    6aca:	bf00      	nop
    6acc:	1fff8cec 	.word	0x1fff8cec

00006ad0 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6ad0:	b500      	push	{lr}
    6ad2:	b085      	sub	sp, #20
    6ad4:	4603      	mov	r3, r0
    6ad6:	460a      	mov	r2, r1
    6ad8:	f8ad 3006 	strh.w	r3, [sp, #6]
    6adc:	4613      	mov	r3, r2
    6ade:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6ae2:	2300      	movs	r3, #0
    6ae4:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6ae8:	2300      	movs	r3, #0
    6aea:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6aee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6af2:	4a32      	ldr	r2, [pc, #200]	; (6bbc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af8:	68da      	ldr	r2, [r3, #12]
    6afa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6afe:	005b      	lsls	r3, r3, #1
    6b00:	4413      	add	r3, r2
    6b02:	881b      	ldrh	r3, [r3, #0]
    6b04:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b08:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b0c:	4a2b      	ldr	r2, [pc, #172]	; (6bbc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b12:	685a      	ldr	r2, [r3, #4]
    6b14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b18:	2134      	movs	r1, #52	; 0x34
    6b1a:	fb01 f303 	mul.w	r3, r1, r3
    6b1e:	4413      	add	r3, r2
    6b20:	689b      	ldr	r3, [r3, #8]
    6b22:	2b00      	cmp	r3, #0
    6b24:	d02c      	beq.n	6b80 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b2a:	4a24      	ldr	r2, [pc, #144]	; (6bbc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b30:	685a      	ldr	r2, [r3, #4]
    6b32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b36:	2134      	movs	r1, #52	; 0x34
    6b38:	fb01 f303 	mul.w	r3, r1, r3
    6b3c:	4413      	add	r3, r2
    6b3e:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b40:	2b01      	cmp	r3, #1
    6b42:	d120      	bne.n	6b86 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b44:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b48:	4a1c      	ldr	r2, [pc, #112]	; (6bbc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b4e:	685a      	ldr	r2, [r3, #4]
    6b50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b54:	2134      	movs	r1, #52	; 0x34
    6b56:	fb01 f303 	mul.w	r3, r1, r3
    6b5a:	4413      	add	r3, r2
    6b5c:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b5e:	2b01      	cmp	r3, #1
    6b60:	d111      	bne.n	6b86 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6b62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b66:	4a15      	ldr	r2, [pc, #84]	; (6bbc <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b6c:	685a      	ldr	r2, [r3, #4]
    6b6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b72:	2134      	movs	r1, #52	; 0x34
    6b74:	fb01 f303 	mul.w	r3, r1, r3
    6b78:	4413      	add	r3, r2
    6b7a:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d102      	bne.n	6b86 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6b80:	2301      	movs	r3, #1
    6b82:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6b86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b8a:	2b01      	cmp	r3, #1
    6b8c:	d104      	bne.n	6b98 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6b8e:	210b      	movs	r1, #11
    6b90:	2002      	movs	r0, #2
    6b92:	f7ff fe55 	bl	6840 <Adc_ReportDetRuntimeError>
    6b96:	e00b      	b.n	6bb0 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6b98:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6b9c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6ba0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ba4:	4618      	mov	r0, r3
    6ba6:	f7ff fe8d 	bl	68c4 <Adc_ValidateNotBusyNoPrio>
    6baa:	4603      	mov	r3, r0
    6bac:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6bb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6bb4:	4618      	mov	r0, r3
    6bb6:	b005      	add	sp, #20
    6bb8:	f85d fb04 	ldr.w	pc, [sp], #4
    6bbc:	1fff8ce8 	.word	0x1fff8ce8

00006bc0 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6bc0:	b500      	push	{lr}
    6bc2:	b085      	sub	sp, #20
    6bc4:	4603      	mov	r3, r0
    6bc6:	f88d 3007 	strb.w	r3, [sp, #7]
    6bca:	460b      	mov	r3, r1
    6bcc:	f8ad 3004 	strh.w	r3, [sp, #4]
    6bd0:	4613      	mov	r3, r2
    6bd2:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6bd6:	2300      	movs	r3, #0
    6bd8:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6bdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6be0:	2b0b      	cmp	r3, #11
    6be2:	d03b      	beq.n	6c5c <Adc_ValidateStateNotIdle+0x9c>
    6be4:	2b0b      	cmp	r3, #11
    6be6:	dc4e      	bgt.n	6c86 <Adc_ValidateStateNotIdle+0xc6>
    6be8:	2b03      	cmp	r3, #3
    6bea:	d022      	beq.n	6c32 <Adc_ValidateStateNotIdle+0x72>
    6bec:	2b04      	cmp	r3, #4
    6bee:	d14a      	bne.n	6c86 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6bf0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bf4:	492a      	ldr	r1, [pc, #168]	; (6ca0 <Adc_ValidateStateNotIdle+0xe0>)
    6bf6:	4613      	mov	r3, r2
    6bf8:	009b      	lsls	r3, r3, #2
    6bfa:	4413      	add	r3, r2
    6bfc:	009b      	lsls	r3, r3, #2
    6bfe:	440b      	add	r3, r1
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	2b00      	cmp	r3, #0
    6c04:	d141      	bne.n	6c8a <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6c06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c0a:	4925      	ldr	r1, [pc, #148]	; (6ca0 <Adc_ValidateStateNotIdle+0xe0>)
    6c0c:	4613      	mov	r3, r2
    6c0e:	009b      	lsls	r3, r3, #2
    6c10:	4413      	add	r3, r2
    6c12:	009b      	lsls	r3, r3, #2
    6c14:	440b      	add	r3, r1
    6c16:	3304      	adds	r3, #4
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d135      	bne.n	6c8a <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c22:	210c      	movs	r1, #12
    6c24:	4618      	mov	r0, r3
    6c26:	f7ff fe0b 	bl	6840 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6c2a:	2301      	movs	r3, #1
    6c2c:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6c30:	e02b      	b.n	6c8a <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c32:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c36:	491a      	ldr	r1, [pc, #104]	; (6ca0 <Adc_ValidateStateNotIdle+0xe0>)
    6c38:	4613      	mov	r3, r2
    6c3a:	009b      	lsls	r3, r3, #2
    6c3c:	4413      	add	r3, r2
    6c3e:	009b      	lsls	r3, r3, #2
    6c40:	440b      	add	r3, r1
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	2b00      	cmp	r3, #0
    6c46:	d122      	bne.n	6c8e <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c4c:	210c      	movs	r1, #12
    6c4e:	4618      	mov	r0, r3
    6c50:	f7ff fdf6 	bl	6840 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6c54:	2301      	movs	r3, #1
    6c56:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6c5a:	e018      	b.n	6c8e <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c60:	490f      	ldr	r1, [pc, #60]	; (6ca0 <Adc_ValidateStateNotIdle+0xe0>)
    6c62:	4613      	mov	r3, r2
    6c64:	009b      	lsls	r3, r3, #2
    6c66:	4413      	add	r3, r2
    6c68:	009b      	lsls	r3, r3, #2
    6c6a:	440b      	add	r3, r1
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	2b00      	cmp	r3, #0
    6c70:	d10f      	bne.n	6c92 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c76:	210c      	movs	r1, #12
    6c78:	4618      	mov	r0, r3
    6c7a:	f7ff fde1 	bl	6840 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6c7e:	2301      	movs	r3, #1
    6c80:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6c84:	e005      	b.n	6c92 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6c86:	bf00      	nop
    6c88:	e004      	b.n	6c94 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c8a:	bf00      	nop
    6c8c:	e002      	b.n	6c94 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c8e:	bf00      	nop
    6c90:	e000      	b.n	6c94 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c92:	bf00      	nop
        }
    }

    return ValidState;
    6c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c98:	4618      	mov	r0, r3
    6c9a:	b005      	add	sp, #20
    6c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ca0:	1fff8cec 	.word	0x1fff8cec

00006ca4 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6ca4:	b084      	sub	sp, #16
    6ca6:	4603      	mov	r3, r0
    6ca8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6cac:	2300      	movs	r3, #0
    6cae:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6cb2:	2300      	movs	r3, #0
    6cb4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6cb8:	2300      	movs	r3, #0
    6cba:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cbe:	e049      	b.n	6d54 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc4:	4a2a      	ldr	r2, [pc, #168]	; (6d70 <Adc_InitGroupsStatus+0xcc>)
    6cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cca:	685a      	ldr	r2, [r3, #4]
    6ccc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cd0:	2134      	movs	r1, #52	; 0x34
    6cd2:	fb01 f303 	mul.w	r3, r1, r3
    6cd6:	4413      	add	r3, r2
    6cd8:	881b      	ldrh	r3, [r3, #0]
    6cda:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6cde:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6ce2:	4924      	ldr	r1, [pc, #144]	; (6d74 <Adc_InitGroupsStatus+0xd0>)
    6ce4:	4613      	mov	r3, r2
    6ce6:	009b      	lsls	r3, r3, #2
    6ce8:	4413      	add	r3, r2
    6cea:	009b      	lsls	r3, r3, #2
    6cec:	440b      	add	r3, r1
    6cee:	2200      	movs	r2, #0
    6cf0:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6cf2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cf6:	491f      	ldr	r1, [pc, #124]	; (6d74 <Adc_InitGroupsStatus+0xd0>)
    6cf8:	4613      	mov	r3, r2
    6cfa:	009b      	lsls	r3, r3, #2
    6cfc:	4413      	add	r3, r2
    6cfe:	009b      	lsls	r3, r3, #2
    6d00:	440b      	add	r3, r1
    6d02:	3304      	adds	r3, #4
    6d04:	2200      	movs	r2, #0
    6d06:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    6d08:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d0c:	4919      	ldr	r1, [pc, #100]	; (6d74 <Adc_InitGroupsStatus+0xd0>)
    6d0e:	4613      	mov	r3, r2
    6d10:	009b      	lsls	r3, r3, #2
    6d12:	4413      	add	r3, r2
    6d14:	009b      	lsls	r3, r3, #2
    6d16:	440b      	add	r3, r1
    6d18:	3308      	adds	r3, #8
    6d1a:	2200      	movs	r2, #0
    6d1c:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    6d1e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d22:	4914      	ldr	r1, [pc, #80]	; (6d74 <Adc_InitGroupsStatus+0xd0>)
    6d24:	4613      	mov	r3, r2
    6d26:	009b      	lsls	r3, r3, #2
    6d28:	4413      	add	r3, r2
    6d2a:	009b      	lsls	r3, r3, #2
    6d2c:	440b      	add	r3, r1
    6d2e:	330c      	adds	r3, #12
    6d30:	2200      	movs	r2, #0
    6d32:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    6d34:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d38:	490e      	ldr	r1, [pc, #56]	; (6d74 <Adc_InitGroupsStatus+0xd0>)
    6d3a:	4613      	mov	r3, r2
    6d3c:	009b      	lsls	r3, r3, #2
    6d3e:	4413      	add	r3, r2
    6d40:	009b      	lsls	r3, r3, #2
    6d42:	440b      	add	r3, r1
    6d44:	3310      	adds	r3, #16
    6d46:	2200      	movs	r2, #0
    6d48:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6d4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d4e:	3301      	adds	r3, #1
    6d50:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d58:	4a05      	ldr	r2, [pc, #20]	; (6d70 <Adc_InitGroupsStatus+0xcc>)
    6d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d5e:	891b      	ldrh	r3, [r3, #8]
    6d60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d64:	429a      	cmp	r2, r3
    6d66:	d3ab      	bcc.n	6cc0 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    6d68:	bf00      	nop
    6d6a:	bf00      	nop
    6d6c:	b004      	add	sp, #16
    6d6e:	4770      	bx	lr
    6d70:	1fff8ce8 	.word	0x1fff8ce8
    6d74:	1fff8cec 	.word	0x1fff8cec

00006d78 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    6d78:	b084      	sub	sp, #16
    6d7a:	4603      	mov	r3, r0
    6d7c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6d80:	2300      	movs	r3, #0
    6d82:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    6d86:	2300      	movs	r3, #0
    6d88:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d8c:	2300      	movs	r3, #0
    6d8e:	f88d 300f 	strb.w	r3, [sp, #15]
    6d92:	e040      	b.n	6e16 <Adc_InitUnitStatus+0x9e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d98:	4a23      	ldr	r2, [pc, #140]	; (6e28 <Adc_InitUnitStatus+0xb0>)
    6d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d9e:	681a      	ldr	r2, [r3, #0]
    6da0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6da4:	4413      	add	r3, r2
    6da6:	7f9b      	ldrb	r3, [r3, #30]
    6da8:	2b01      	cmp	r3, #1
    6daa:	d12f      	bne.n	6e0c <Adc_InitUnitStatus+0x94>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    6dac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6db0:	491e      	ldr	r1, [pc, #120]	; (6e2c <Adc_InitUnitStatus+0xb4>)
    6db2:	4613      	mov	r3, r2
    6db4:	005b      	lsls	r3, r3, #1
    6db6:	4413      	add	r3, r2
    6db8:	009b      	lsls	r3, r3, #2
    6dba:	440b      	add	r3, r1
    6dbc:	2200      	movs	r2, #0
    6dbe:	801a      	strh	r2, [r3, #0]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6dc0:	2300      	movs	r3, #0
    6dc2:	f8ad 300c 	strh.w	r3, [sp, #12]
    6dc6:	e012      	b.n	6dee <Adc_InitUnitStatus+0x76>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    6dc8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6dcc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6dd0:	4816      	ldr	r0, [pc, #88]	; (6e2c <Adc_InitUnitStatus+0xb4>)
    6dd2:	4613      	mov	r3, r2
    6dd4:	005b      	lsls	r3, r3, #1
    6dd6:	4413      	add	r3, r2
    6dd8:	005b      	lsls	r3, r3, #1
    6dda:	440b      	add	r3, r1
    6ddc:	005b      	lsls	r3, r3, #1
    6dde:	4403      	add	r3, r0
    6de0:	2200      	movs	r2, #0
    6de2:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6de4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6de8:	3301      	adds	r3, #1
    6dea:	f8ad 300c 	strh.w	r3, [sp, #12]
    6dee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6df2:	2b03      	cmp	r3, #3
    6df4:	d9e8      	bls.n	6dc8 <Adc_InitUnitStatus+0x50>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    6df6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6dfa:	490c      	ldr	r1, [pc, #48]	; (6e2c <Adc_InitUnitStatus+0xb4>)
    6dfc:	4613      	mov	r3, r2
    6dfe:	005b      	lsls	r3, r3, #1
    6e00:	4413      	add	r3, r2
    6e02:	009b      	lsls	r3, r3, #2
    6e04:	440b      	add	r3, r1
    6e06:	330a      	adds	r3, #10
    6e08:	2200      	movs	r2, #0
    6e0a:	701a      	strb	r2, [r3, #0]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e10:	3301      	adds	r3, #1
    6e12:	f88d 300f 	strb.w	r3, [sp, #15]
    6e16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e1a:	2b01      	cmp	r3, #1
    6e1c:	d9ba      	bls.n	6d94 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    6e1e:	bf00      	nop
    6e20:	bf00      	nop
    6e22:	b004      	add	sp, #16
    6e24:	4770      	bx	lr
    6e26:	bf00      	nop
    6e28:	1fff8ce8 	.word	0x1fff8ce8
    6e2c:	1fff8d00 	.word	0x1fff8d00

00006e30 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    6e30:	b084      	sub	sp, #16
    6e32:	9001      	str	r0, [sp, #4]
    6e34:	460b      	mov	r3, r1
    6e36:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    6e3a:	2300      	movs	r3, #0
    6e3c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    6e40:	2301      	movs	r3, #1
    6e42:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    6e46:	9b01      	ldr	r3, [sp, #4]
    6e48:	7c1b      	ldrb	r3, [r3, #16]
    6e4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e4e:	429a      	cmp	r2, r3
    6e50:	d11c      	bne.n	6e8c <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e52:	2300      	movs	r3, #0
    6e54:	f88d 300f 	strb.w	r3, [sp, #15]
    6e58:	e012      	b.n	6e80 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    6e5a:	9b01      	ldr	r3, [sp, #4]
    6e5c:	695a      	ldr	r2, [r3, #20]
    6e5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e62:	4413      	add	r3, r2
    6e64:	781b      	ldrb	r3, [r3, #0]
    6e66:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e6a:	429a      	cmp	r2, r3
    6e6c:	d103      	bne.n	6e76 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    6e6e:	2300      	movs	r3, #0
    6e70:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    6e74:	e00a      	b.n	6e8c <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e7a:	3301      	adds	r3, #1
    6e7c:	f88d 300f 	strb.w	r3, [sp, #15]
    6e80:	9b01      	ldr	r3, [sp, #4]
    6e82:	7e1b      	ldrb	r3, [r3, #24]
    6e84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6e88:	429a      	cmp	r2, r3
    6e8a:	d3e6      	bcc.n	6e5a <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    6e8c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6e90:	4618      	mov	r0, r3
    6e92:	b004      	add	sp, #16
    6e94:	4770      	bx	lr

00006e96 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    6e96:	b500      	push	{lr}
    6e98:	b085      	sub	sp, #20
    6e9a:	4603      	mov	r3, r0
    6e9c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ea0:	460b      	mov	r3, r1
    6ea2:	f88d 3005 	strb.w	r3, [sp, #5]
    6ea6:	4613      	mov	r3, r2
    6ea8:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    6eac:	2300      	movs	r3, #0
    6eae:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6eb2:	2300      	movs	r3, #0
    6eb4:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    6eb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ebc:	4953      	ldr	r1, [pc, #332]	; (700c <Adc_UpdateStatusStartConversion+0x176>)
    6ebe:	4613      	mov	r3, r2
    6ec0:	009b      	lsls	r3, r3, #2
    6ec2:	4413      	add	r3, r2
    6ec4:	009b      	lsls	r3, r3, #2
    6ec6:	440b      	add	r3, r1
    6ec8:	2201      	movs	r2, #1
    6eca:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    6ecc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ed0:	494e      	ldr	r1, [pc, #312]	; (700c <Adc_UpdateStatusStartConversion+0x176>)
    6ed2:	4613      	mov	r3, r2
    6ed4:	009b      	lsls	r3, r3, #2
    6ed6:	4413      	add	r3, r2
    6ed8:	009b      	lsls	r3, r3, #2
    6eda:	440b      	add	r3, r1
    6edc:	3308      	adds	r3, #8
    6ede:	2200      	movs	r2, #0
    6ee0:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6ee2:	f003 ff59 	bl	ad98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6ee6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6eea:	4949      	ldr	r1, [pc, #292]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6eec:	4613      	mov	r3, r2
    6eee:	005b      	lsls	r3, r3, #1
    6ef0:	4413      	add	r3, r2
    6ef2:	009b      	lsls	r3, r3, #2
    6ef4:	440b      	add	r3, r1
    6ef6:	881b      	ldrh	r3, [r3, #0]
    6ef8:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    6efc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d022      	beq.n	6f4a <Adc_UpdateStatusStartConversion+0xb4>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    6f04:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f08:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    6f0c:	4840      	ldr	r0, [pc, #256]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6f0e:	4613      	mov	r3, r2
    6f10:	005b      	lsls	r3, r3, #1
    6f12:	4413      	add	r3, r2
    6f14:	005b      	lsls	r3, r3, #1
    6f16:	440b      	add	r3, r1
    6f18:	005b      	lsls	r3, r3, #1
    6f1a:	4403      	add	r3, r0
    6f1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f20:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6f22:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f26:	493a      	ldr	r1, [pc, #232]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6f28:	4613      	mov	r3, r2
    6f2a:	005b      	lsls	r3, r3, #1
    6f2c:	4413      	add	r3, r2
    6f2e:	009b      	lsls	r3, r3, #2
    6f30:	440b      	add	r3, r1
    6f32:	881b      	ldrh	r3, [r3, #0]
    6f34:	b29b      	uxth	r3, r3
    6f36:	3301      	adds	r3, #1
    6f38:	b298      	uxth	r0, r3
    6f3a:	4935      	ldr	r1, [pc, #212]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6f3c:	4613      	mov	r3, r2
    6f3e:	005b      	lsls	r3, r3, #1
    6f40:	4413      	add	r3, r2
    6f42:	009b      	lsls	r3, r3, #2
    6f44:	440b      	add	r3, r1
    6f46:	4602      	mov	r2, r0
    6f48:	801a      	strh	r2, [r3, #0]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6f4a:	f003 ff51 	bl	adf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6f4e:	f003 ff23 	bl	ad98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6f52:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f56:	492e      	ldr	r1, [pc, #184]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6f58:	4613      	mov	r3, r2
    6f5a:	005b      	lsls	r3, r3, #1
    6f5c:	4413      	add	r3, r2
    6f5e:	009b      	lsls	r3, r3, #2
    6f60:	440b      	add	r3, r1
    6f62:	881b      	ldrh	r3, [r3, #0]
    6f64:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    6f68:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f6c:	4928      	ldr	r1, [pc, #160]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6f6e:	4613      	mov	r3, r2
    6f70:	005b      	lsls	r3, r3, #1
    6f72:	4413      	add	r3, r2
    6f74:	009b      	lsls	r3, r3, #2
    6f76:	440b      	add	r3, r1
    6f78:	3302      	adds	r3, #2
    6f7a:	881b      	ldrh	r3, [r3, #0]
    6f7c:	b29b      	uxth	r3, r3
    6f7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f82:	429a      	cmp	r2, r3
    6f84:	d003      	beq.n	6f8e <Adc_UpdateStatusStartConversion+0xf8>
    6f86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d136      	bne.n	6ffc <Adc_UpdateStatusStartConversion+0x166>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    6f8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f92:	491f      	ldr	r1, [pc, #124]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6f94:	4613      	mov	r3, r2
    6f96:	005b      	lsls	r3, r3, #1
    6f98:	4413      	add	r3, r2
    6f9a:	009b      	lsls	r3, r3, #2
    6f9c:	440b      	add	r3, r1
    6f9e:	881b      	ldrh	r3, [r3, #0]
    6fa0:	b29b      	uxth	r3, r3
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	d11f      	bne.n	6fe6 <Adc_UpdateStatusStartConversion+0x150>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    6fa6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6faa:	4919      	ldr	r1, [pc, #100]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6fac:	4613      	mov	r3, r2
    6fae:	005b      	lsls	r3, r3, #1
    6fb0:	4413      	add	r3, r2
    6fb2:	009b      	lsls	r3, r3, #2
    6fb4:	440b      	add	r3, r1
    6fb6:	3302      	adds	r3, #2
    6fb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6fbc:	801a      	strh	r2, [r3, #0]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6fbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6fc2:	4913      	ldr	r1, [pc, #76]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6fc4:	4613      	mov	r3, r2
    6fc6:	005b      	lsls	r3, r3, #1
    6fc8:	4413      	add	r3, r2
    6fca:	009b      	lsls	r3, r3, #2
    6fcc:	440b      	add	r3, r1
    6fce:	881b      	ldrh	r3, [r3, #0]
    6fd0:	b29b      	uxth	r3, r3
    6fd2:	3301      	adds	r3, #1
    6fd4:	b298      	uxth	r0, r3
    6fd6:	490e      	ldr	r1, [pc, #56]	; (7010 <Adc_UpdateStatusStartConversion+0x17a>)
    6fd8:	4613      	mov	r3, r2
    6fda:	005b      	lsls	r3, r3, #1
    6fdc:	4413      	add	r3, r2
    6fde:	009b      	lsls	r3, r3, #2
    6fe0:	440b      	add	r3, r1
    6fe2:	4602      	mov	r2, r0
    6fe4:	801a      	strh	r2, [r3, #0]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6fe6:	f003 ff03 	bl	adf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    6fea:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6fee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ff2:	4611      	mov	r1, r2
    6ff4:	4618      	mov	r0, r3
    6ff6:	f002 fc31 	bl	985c <Adc_Ipw_StartNormalConversion>
    6ffa:	e002      	b.n	7002 <Adc_UpdateStatusStartConversion+0x16c>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6ffc:	f003 fef8 	bl	adf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    7000:	bf00      	nop
    7002:	bf00      	nop
    7004:	b005      	add	sp, #20
    7006:	f85d fb04 	ldr.w	pc, [sp], #4
    700a:	bf00      	nop
    700c:	1fff8cec 	.word	0x1fff8cec
    7010:	1fff8d00 	.word	0x1fff8d00

00007014 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    7014:	b500      	push	{lr}
    7016:	b085      	sub	sp, #20
    7018:	9001      	str	r0, [sp, #4]
    701a:	4608      	mov	r0, r1
    701c:	4611      	mov	r1, r2
    701e:	461a      	mov	r2, r3
    7020:	4603      	mov	r3, r0
    7022:	f8ad 3002 	strh.w	r3, [sp, #2]
    7026:	460b      	mov	r3, r1
    7028:	f88d 3001 	strb.w	r3, [sp, #1]
    702c:	4613      	mov	r3, r2
    702e:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7032:	2300      	movs	r3, #0
    7034:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    7038:	f89d 2001 	ldrb.w	r2, [sp, #1]
    703c:	492b      	ldr	r1, [pc, #172]	; (70ec <Adc_StopSwGroupConversion+0xd8>)
    703e:	4613      	mov	r3, r2
    7040:	005b      	lsls	r3, r3, #1
    7042:	4413      	add	r3, r2
    7044:	009b      	lsls	r3, r3, #2
    7046:	440b      	add	r3, r1
    7048:	881b      	ldrh	r3, [r3, #0]
    704a:	b29a      	uxth	r2, r3
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7050:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7054:	4925      	ldr	r1, [pc, #148]	; (70ec <Adc_StopSwGroupConversion+0xd8>)
    7056:	4613      	mov	r3, r2
    7058:	005b      	lsls	r3, r3, #1
    705a:	4413      	add	r3, r2
    705c:	009b      	lsls	r3, r3, #2
    705e:	440b      	add	r3, r1
    7060:	881b      	ldrh	r3, [r3, #0]
    7062:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7066:	2300      	movs	r3, #0
    7068:	f8ad 300c 	strh.w	r3, [sp, #12]
    706c:	e032      	b.n	70d4 <Adc_StopSwGroupConversion+0xc0>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    706e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    7072:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7076:	481d      	ldr	r0, [pc, #116]	; (70ec <Adc_StopSwGroupConversion+0xd8>)
    7078:	4613      	mov	r3, r2
    707a:	005b      	lsls	r3, r3, #1
    707c:	4413      	add	r3, r2
    707e:	005b      	lsls	r3, r3, #1
    7080:	440b      	add	r3, r1
    7082:	005b      	lsls	r3, r3, #1
    7084:	4403      	add	r3, r0
    7086:	885b      	ldrh	r3, [r3, #2]
    7088:	b29b      	uxth	r3, r3
    708a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    708e:	429a      	cmp	r2, r3
    7090:	d11b      	bne.n	70ca <Adc_StopSwGroupConversion+0xb6>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    7092:	9b01      	ldr	r3, [sp, #4]
    7094:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7098:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    709a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    709e:	2b00      	cmp	r3, #0
    70a0:	d10b      	bne.n	70ba <Adc_StopSwGroupConversion+0xa6>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    70a2:	f89d 2000 	ldrb.w	r2, [sp]
    70a6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    70aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
    70ae:	4618      	mov	r0, r3
    70b0:	f002 fc92 	bl	99d8 <Adc_Ipw_StopCurrentConversion>
    70b4:	4603      	mov	r3, r0
    70b6:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    70ba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70be:	f89d 3001 	ldrb.w	r3, [sp, #1]
    70c2:	4611      	mov	r1, r2
    70c4:	4618      	mov	r0, r3
    70c6:	f001 fd9d 	bl	8c04 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    70ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70ce:	3301      	adds	r3, #1
    70d0:	f8ad 300c 	strh.w	r3, [sp, #12]
    70d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    70dc:	429a      	cmp	r2, r3
    70de:	d3c6      	bcc.n	706e <Adc_StopSwGroupConversion+0x5a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    70e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    70e4:	4618      	mov	r0, r3
    70e6:	b005      	add	sp, #20
    70e8:	f85d fb04 	ldr.w	pc, [sp], #4
    70ec:	1fff8d00 	.word	0x1fff8d00

000070f0 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    70f0:	b500      	push	{lr}
    70f2:	b089      	sub	sp, #36	; 0x24
    70f4:	4603      	mov	r3, r0
    70f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    70fa:	460b      	mov	r3, r1
    70fc:	f88d 3005 	strb.w	r3, [sp, #5]
    7100:	4613      	mov	r3, r2
    7102:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7106:	f89d 3004 	ldrb.w	r3, [sp, #4]
    710a:	4a51      	ldr	r2, [pc, #324]	; (7250 <Adc_UpdateStatusStopConversion+0x160>)
    710c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7110:	68da      	ldr	r2, [r3, #12]
    7112:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7116:	005b      	lsls	r3, r3, #1
    7118:	4413      	add	r3, r2
    711a:	881b      	ldrh	r3, [r3, #0]
    711c:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7120:	2300      	movs	r3, #0
    7122:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7126:	2300      	movs	r3, #0
    7128:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    712c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7130:	4a47      	ldr	r2, [pc, #284]	; (7250 <Adc_UpdateStatusStopConversion+0x160>)
    7132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7136:	685a      	ldr	r2, [r3, #4]
    7138:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    713c:	2134      	movs	r1, #52	; 0x34
    713e:	fb01 f303 	mul.w	r3, r1, r3
    7142:	4413      	add	r3, r2
    7144:	689b      	ldr	r3, [r3, #8]
    7146:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    7148:	f89d 3004 	ldrb.w	r3, [sp, #4]
    714c:	4a40      	ldr	r2, [pc, #256]	; (7250 <Adc_UpdateStatusStopConversion+0x160>)
    714e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7152:	685a      	ldr	r2, [r3, #4]
    7154:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7158:	2134      	movs	r1, #52	; 0x34
    715a:	fb01 f303 	mul.w	r3, r1, r3
    715e:	4413      	add	r3, r2
    7160:	685b      	ldr	r3, [r3, #4]
    7162:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    7164:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7168:	4a39      	ldr	r2, [pc, #228]	; (7250 <Adc_UpdateStatusStopConversion+0x160>)
    716a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    716e:	685a      	ldr	r2, [r3, #4]
    7170:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7174:	2134      	movs	r1, #52	; 0x34
    7176:	fb01 f303 	mul.w	r3, r1, r3
    717a:	4413      	add	r3, r2
    717c:	699b      	ldr	r3, [r3, #24]
    717e:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7180:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7184:	4933      	ldr	r1, [pc, #204]	; (7254 <Adc_UpdateStatusStopConversion+0x164>)
    7186:	4613      	mov	r3, r2
    7188:	009b      	lsls	r3, r3, #2
    718a:	4413      	add	r3, r2
    718c:	009b      	lsls	r3, r3, #2
    718e:	440b      	add	r3, r1
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    7194:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7198:	492e      	ldr	r1, [pc, #184]	; (7254 <Adc_UpdateStatusStopConversion+0x164>)
    719a:	4613      	mov	r3, r2
    719c:	009b      	lsls	r3, r3, #2
    719e:	4413      	add	r3, r2
    71a0:	009b      	lsls	r3, r3, #2
    71a2:	440b      	add	r3, r1
    71a4:	3308      	adds	r3, #8
    71a6:	2200      	movs	r2, #0
    71a8:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    71aa:	9b06      	ldr	r3, [sp, #24]
    71ac:	2b00      	cmp	r3, #0
    71ae:	d005      	beq.n	71bc <Adc_UpdateStatusStopConversion+0xcc>
    71b0:	9b05      	ldr	r3, [sp, #20]
    71b2:	2b01      	cmp	r3, #1
    71b4:	d110      	bne.n	71d8 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    71b6:	9b04      	ldr	r3, [sp, #16]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d10d      	bne.n	71d8 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    71bc:	9b03      	ldr	r3, [sp, #12]
    71be:	2b03      	cmp	r3, #3
    71c0:	d10a      	bne.n	71d8 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    71c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71c6:	4923      	ldr	r1, [pc, #140]	; (7254 <Adc_UpdateStatusStopConversion+0x164>)
    71c8:	4613      	mov	r3, r2
    71ca:	009b      	lsls	r3, r3, #2
    71cc:	4413      	add	r3, r2
    71ce:	009b      	lsls	r3, r3, #2
    71d0:	440b      	add	r3, r1
    71d2:	2200      	movs	r2, #0
    71d4:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    71d6:	e036      	b.n	7246 <Adc_UpdateStatusStopConversion+0x156>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    71d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    71e0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    71e4:	f10d 000a 	add.w	r0, sp, #10
    71e8:	f7ff ff14 	bl	7014 <Adc_StopSwGroupConversion>
    71ec:	4603      	mov	r3, r0
    71ee:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    71f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71f6:	4917      	ldr	r1, [pc, #92]	; (7254 <Adc_UpdateStatusStopConversion+0x164>)
    71f8:	4613      	mov	r3, r2
    71fa:	009b      	lsls	r3, r3, #2
    71fc:	4413      	add	r3, r2
    71fe:	009b      	lsls	r3, r3, #2
    7200:	440b      	add	r3, r1
    7202:	2200      	movs	r2, #0
    7204:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    7206:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    720a:	2b00      	cmp	r3, #0
    720c:	d113      	bne.n	7236 <Adc_UpdateStatusStopConversion+0x146>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    720e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7212:	4911      	ldr	r1, [pc, #68]	; (7258 <Adc_UpdateStatusStopConversion+0x168>)
    7214:	4613      	mov	r3, r2
    7216:	005b      	lsls	r3, r3, #1
    7218:	4413      	add	r3, r2
    721a:	009b      	lsls	r3, r3, #2
    721c:	440b      	add	r3, r1
    721e:	881b      	ldrh	r3, [r3, #0]
    7220:	b29b      	uxth	r3, r3
    7222:	2b00      	cmp	r3, #0
    7224:	d007      	beq.n	7236 <Adc_UpdateStatusStopConversion+0x146>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7226:	f89d 2004 	ldrb.w	r2, [sp, #4]
    722a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    722e:	4611      	mov	r1, r2
    7230:	4618      	mov	r0, r3
    7232:	f002 fb13 	bl	985c <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7236:	f89d 301d 	ldrb.w	r3, [sp, #29]
    723a:	2b01      	cmp	r3, #1
    723c:	d103      	bne.n	7246 <Adc_UpdateStatusStopConversion+0x156>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    723e:	212b      	movs	r1, #43	; 0x2b
    7240:	2003      	movs	r0, #3
    7242:	f7ff fafd 	bl	6840 <Adc_ReportDetRuntimeError>
}
    7246:	bf00      	nop
    7248:	b009      	add	sp, #36	; 0x24
    724a:	f85d fb04 	ldr.w	pc, [sp], #4
    724e:	bf00      	nop
    7250:	1fff8ce8 	.word	0x1fff8ce8
    7254:	1fff8cec 	.word	0x1fff8cec
    7258:	1fff8d00 	.word	0x1fff8d00

0000725c <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    725c:	b500      	push	{lr}
    725e:	b085      	sub	sp, #20
    7260:	4603      	mov	r3, r0
    7262:	f8ad 3006 	strh.w	r3, [sp, #6]
    7266:	460b      	mov	r3, r1
    7268:	f88d 3005 	strb.w	r3, [sp, #5]
    726c:	4613      	mov	r3, r2
    726e:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7272:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7276:	4a18      	ldr	r2, [pc, #96]	; (72d8 <Adc_UpdateStatusReadGroup+0x7c>)
    7278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    727c:	68da      	ldr	r2, [r3, #12]
    727e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7282:	005b      	lsls	r3, r3, #1
    7284:	4413      	add	r3, r2
    7286:	881b      	ldrh	r3, [r3, #0]
    7288:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    728c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7290:	4a11      	ldr	r2, [pc, #68]	; (72d8 <Adc_UpdateStatusReadGroup+0x7c>)
    7292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7296:	685a      	ldr	r2, [r3, #4]
    7298:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    729c:	2134      	movs	r1, #52	; 0x34
    729e:	fb01 f303 	mul.w	r3, r1, r3
    72a2:	4413      	add	r3, r2
    72a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    72a8:	2b01      	cmp	r3, #1
    72aa:	d109      	bne.n	72c0 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    72ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72b0:	f89d 1005 	ldrb.w	r1, [sp, #5]
    72b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72b8:	4618      	mov	r0, r3
    72ba:	f000 f80f 	bl	72dc <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    72be:	e007      	b.n	72d0 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    72c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72c8:	4611      	mov	r1, r2
    72ca:	4618      	mov	r0, r3
    72cc:	f000 f8f6 	bl	74bc <Adc_UpdateStatusReadGroupInt>
}
    72d0:	bf00      	nop
    72d2:	b005      	add	sp, #20
    72d4:	f85d fb04 	ldr.w	pc, [sp], #4
    72d8:	1fff8ce8 	.word	0x1fff8ce8

000072dc <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    72dc:	b500      	push	{lr}
    72de:	b085      	sub	sp, #20
    72e0:	4603      	mov	r3, r0
    72e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    72e6:	460b      	mov	r3, r1
    72e8:	f88d 3005 	strb.w	r3, [sp, #5]
    72ec:	4613      	mov	r3, r2
    72ee:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    72f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    72f6:	4a2c      	ldr	r2, [pc, #176]	; (73a8 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    72f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72fc:	68da      	ldr	r2, [r3, #12]
    72fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7302:	005b      	lsls	r3, r3, #1
    7304:	4413      	add	r3, r2
    7306:	881b      	ldrh	r3, [r3, #0]
    7308:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    730c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7310:	4926      	ldr	r1, [pc, #152]	; (73ac <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    7312:	4613      	mov	r3, r2
    7314:	009b      	lsls	r3, r3, #2
    7316:	4413      	add	r3, r2
    7318:	009b      	lsls	r3, r3, #2
    731a:	440b      	add	r3, r1
    731c:	3304      	adds	r3, #4
    731e:	2201      	movs	r2, #1
    7320:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    7322:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7326:	2b00      	cmp	r3, #0
    7328:	d03a      	beq.n	73a0 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    732a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    732e:	4a1e      	ldr	r2, [pc, #120]	; (73a8 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7334:	685a      	ldr	r2, [r3, #4]
    7336:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    733a:	2134      	movs	r1, #52	; 0x34
    733c:	fb01 f303 	mul.w	r3, r1, r3
    7340:	4413      	add	r3, r2
    7342:	689b      	ldr	r3, [r3, #8]
    7344:	2b01      	cmp	r3, #1
    7346:	d10a      	bne.n	735e <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7348:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    734c:	4917      	ldr	r1, [pc, #92]	; (73ac <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    734e:	4613      	mov	r3, r2
    7350:	009b      	lsls	r3, r3, #2
    7352:	4413      	add	r3, r2
    7354:	009b      	lsls	r3, r3, #2
    7356:	440b      	add	r3, r1
    7358:	2201      	movs	r2, #1
    735a:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    735c:	e020      	b.n	73a0 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    735e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7362:	4a11      	ldr	r2, [pc, #68]	; (73a8 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7368:	685a      	ldr	r2, [r3, #4]
    736a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    736e:	2134      	movs	r1, #52	; 0x34
    7370:	fb01 f303 	mul.w	r3, r1, r3
    7374:	4413      	add	r3, r2
    7376:	695b      	ldr	r3, [r3, #20]
    7378:	2b00      	cmp	r3, #0
    737a:	d111      	bne.n	73a0 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    737c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7380:	490a      	ldr	r1, [pc, #40]	; (73ac <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    7382:	4613      	mov	r3, r2
    7384:	009b      	lsls	r3, r3, #2
    7386:	4413      	add	r3, r2
    7388:	009b      	lsls	r3, r3, #2
    738a:	440b      	add	r3, r1
    738c:	2200      	movs	r2, #0
    738e:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    7390:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7394:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7398:	4611      	mov	r1, r2
    739a:	4618      	mov	r0, r3
    739c:	f000 f808 	bl	73b0 <Adc_UpdateSwQueueIndexNoInt>
}
    73a0:	bf00      	nop
    73a2:	b005      	add	sp, #20
    73a4:	f85d fb04 	ldr.w	pc, [sp], #4
    73a8:	1fff8ce8 	.word	0x1fff8ce8
    73ac:	1fff8cec 	.word	0x1fff8cec

000073b0 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    73b0:	b500      	push	{lr}
    73b2:	b085      	sub	sp, #20
    73b4:	4603      	mov	r3, r0
    73b6:	460a      	mov	r2, r1
    73b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    73bc:	4613      	mov	r3, r2
    73be:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    73c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73c6:	4a3b      	ldr	r2, [pc, #236]	; (74b4 <Adc_UpdateSwQueueIndexNoInt+0x104>)
    73c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73cc:	68da      	ldr	r2, [r3, #12]
    73ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73d2:	005b      	lsls	r3, r3, #1
    73d4:	4413      	add	r3, r2
    73d6:	881b      	ldrh	r3, [r3, #0]
    73d8:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    73dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73e0:	4a34      	ldr	r2, [pc, #208]	; (74b4 <Adc_UpdateSwQueueIndexNoInt+0x104>)
    73e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e6:	685a      	ldr	r2, [r3, #4]
    73e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    73ec:	2134      	movs	r1, #52	; 0x34
    73ee:	fb01 f303 	mul.w	r3, r1, r3
    73f2:	4413      	add	r3, r2
    73f4:	789b      	ldrb	r3, [r3, #2]
    73f6:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    73fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    73fe:	492e      	ldr	r1, [pc, #184]	; (74b8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    7400:	4613      	mov	r3, r2
    7402:	005b      	lsls	r3, r3, #1
    7404:	4413      	add	r3, r2
    7406:	009b      	lsls	r3, r3, #2
    7408:	440b      	add	r3, r1
    740a:	881b      	ldrh	r3, [r3, #0]
    740c:	b29b      	uxth	r3, r3
    740e:	2b00      	cmp	r3, #0
    7410:	d04c      	beq.n	74ac <Adc_UpdateSwQueueIndexNoInt+0xfc>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7412:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7416:	4928      	ldr	r1, [pc, #160]	; (74b8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    7418:	4613      	mov	r3, r2
    741a:	005b      	lsls	r3, r3, #1
    741c:	4413      	add	r3, r2
    741e:	009b      	lsls	r3, r3, #2
    7420:	440b      	add	r3, r1
    7422:	881b      	ldrh	r3, [r3, #0]
    7424:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7428:	2300      	movs	r3, #0
    742a:	f8ad 300e 	strh.w	r3, [sp, #14]
    742e:	e01f      	b.n	7470 <Adc_UpdateSwQueueIndexNoInt+0xc0>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    7430:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7434:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7438:	481f      	ldr	r0, [pc, #124]	; (74b8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    743a:	4613      	mov	r3, r2
    743c:	005b      	lsls	r3, r3, #1
    743e:	4413      	add	r3, r2
    7440:	005b      	lsls	r3, r3, #1
    7442:	440b      	add	r3, r1
    7444:	005b      	lsls	r3, r3, #1
    7446:	4403      	add	r3, r0
    7448:	885b      	ldrh	r3, [r3, #2]
    744a:	b29b      	uxth	r3, r3
    744c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7450:	429a      	cmp	r2, r3
    7452:	d108      	bne.n	7466 <Adc_UpdateSwQueueIndexNoInt+0xb6>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    7454:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7458:	f89d 300b 	ldrb.w	r3, [sp, #11]
    745c:	4611      	mov	r1, r2
    745e:	4618      	mov	r0, r3
    7460:	f001 fbd0 	bl	8c04 <Adc_Ipw_RemoveFromQueue>
                    break;
    7464:	e00a      	b.n	747c <Adc_UpdateSwQueueIndexNoInt+0xcc>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7466:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    746a:	3301      	adds	r3, #1
    746c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7470:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7474:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7478:	429a      	cmp	r2, r3
    747a:	d3d9      	bcc.n	7430 <Adc_UpdateSwQueueIndexNoInt+0x80>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    747c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7480:	2b00      	cmp	r3, #0
    7482:	d113      	bne.n	74ac <Adc_UpdateSwQueueIndexNoInt+0xfc>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    7484:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7488:	490b      	ldr	r1, [pc, #44]	; (74b8 <Adc_UpdateSwQueueIndexNoInt+0x108>)
    748a:	4613      	mov	r3, r2
    748c:	005b      	lsls	r3, r3, #1
    748e:	4413      	add	r3, r2
    7490:	009b      	lsls	r3, r3, #2
    7492:	440b      	add	r3, r1
    7494:	881b      	ldrh	r3, [r3, #0]
    7496:	b29b      	uxth	r3, r3
    7498:	2b00      	cmp	r3, #0
    749a:	d007      	beq.n	74ac <Adc_UpdateSwQueueIndexNoInt+0xfc>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    749c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    74a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74a4:	4611      	mov	r1, r2
    74a6:	4618      	mov	r0, r3
    74a8:	f002 f9d8 	bl	985c <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    74ac:	bf00      	nop
    74ae:	b005      	add	sp, #20
    74b0:	f85d fb04 	ldr.w	pc, [sp], #4
    74b4:	1fff8ce8 	.word	0x1fff8ce8
    74b8:	1fff8d00 	.word	0x1fff8d00

000074bc <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    74bc:	b084      	sub	sp, #16
    74be:	4603      	mov	r3, r0
    74c0:	460a      	mov	r2, r1
    74c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    74c6:	4613      	mov	r3, r2
    74c8:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    74cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74d0:	4a47      	ldr	r2, [pc, #284]	; (75f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    74d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74d6:	68da      	ldr	r2, [r3, #12]
    74d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74dc:	005b      	lsls	r3, r3, #1
    74de:	4413      	add	r3, r2
    74e0:	881b      	ldrh	r3, [r3, #0]
    74e2:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    74e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74ea:	4942      	ldr	r1, [pc, #264]	; (75f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    74ec:	4613      	mov	r3, r2
    74ee:	009b      	lsls	r3, r3, #2
    74f0:	4413      	add	r3, r2
    74f2:	009b      	lsls	r3, r3, #2
    74f4:	440b      	add	r3, r1
    74f6:	681b      	ldr	r3, [r3, #0]
    74f8:	2b02      	cmp	r3, #2
    74fa:	d10a      	bne.n	7512 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    74fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7500:	493c      	ldr	r1, [pc, #240]	; (75f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    7502:	4613      	mov	r3, r2
    7504:	009b      	lsls	r3, r3, #2
    7506:	4413      	add	r3, r2
    7508:	009b      	lsls	r3, r3, #2
    750a:	440b      	add	r3, r1
    750c:	2201      	movs	r2, #1
    750e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    7510:	e06a      	b.n	75e8 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7512:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7516:	4937      	ldr	r1, [pc, #220]	; (75f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    7518:	4613      	mov	r3, r2
    751a:	009b      	lsls	r3, r3, #2
    751c:	4413      	add	r3, r2
    751e:	009b      	lsls	r3, r3, #2
    7520:	440b      	add	r3, r1
    7522:	681b      	ldr	r3, [r3, #0]
    7524:	2b03      	cmp	r3, #3
    7526:	d15f      	bne.n	75e8 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7528:	f89d 3005 	ldrb.w	r3, [sp, #5]
    752c:	4a30      	ldr	r2, [pc, #192]	; (75f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7532:	685a      	ldr	r2, [r3, #4]
    7534:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7538:	2134      	movs	r1, #52	; 0x34
    753a:	fb01 f303 	mul.w	r3, r1, r3
    753e:	4413      	add	r3, r2
    7540:	695b      	ldr	r3, [r3, #20]
    7542:	2b00      	cmp	r3, #0
    7544:	d150      	bne.n	75e8 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7546:	f89d 3005 	ldrb.w	r3, [sp, #5]
    754a:	4a29      	ldr	r2, [pc, #164]	; (75f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    754c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7550:	685a      	ldr	r2, [r3, #4]
    7552:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7556:	2134      	movs	r1, #52	; 0x34
    7558:	fb01 f303 	mul.w	r3, r1, r3
    755c:	4413      	add	r3, r2
    755e:	689b      	ldr	r3, [r3, #8]
    7560:	2b00      	cmp	r3, #0
    7562:	d02c      	beq.n	75be <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7564:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7568:	4a21      	ldr	r2, [pc, #132]	; (75f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    756a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    756e:	685a      	ldr	r2, [r3, #4]
    7570:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7574:	2134      	movs	r1, #52	; 0x34
    7576:	fb01 f303 	mul.w	r3, r1, r3
    757a:	4413      	add	r3, r2
    757c:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    757e:	2b01      	cmp	r3, #1
    7580:	d128      	bne.n	75d4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7582:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7586:	4a1a      	ldr	r2, [pc, #104]	; (75f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    7588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    758c:	685a      	ldr	r2, [r3, #4]
    758e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7592:	2134      	movs	r1, #52	; 0x34
    7594:	fb01 f303 	mul.w	r3, r1, r3
    7598:	4413      	add	r3, r2
    759a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    759c:	2b01      	cmp	r3, #1
    759e:	d119      	bne.n	75d4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    75a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75a4:	4a12      	ldr	r2, [pc, #72]	; (75f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    75a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75aa:	685a      	ldr	r2, [r3, #4]
    75ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75b0:	2134      	movs	r1, #52	; 0x34
    75b2:	fb01 f303 	mul.w	r3, r1, r3
    75b6:	4413      	add	r3, r2
    75b8:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    75ba:	2b00      	cmp	r3, #0
    75bc:	d10a      	bne.n	75d4 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    75be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75c2:	490c      	ldr	r1, [pc, #48]	; (75f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    75c4:	4613      	mov	r3, r2
    75c6:	009b      	lsls	r3, r3, #2
    75c8:	4413      	add	r3, r2
    75ca:	009b      	lsls	r3, r3, #2
    75cc:	440b      	add	r3, r1
    75ce:	2200      	movs	r2, #0
    75d0:	601a      	str	r2, [r3, #0]
}
    75d2:	e009      	b.n	75e8 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    75d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75d8:	4906      	ldr	r1, [pc, #24]	; (75f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    75da:	4613      	mov	r3, r2
    75dc:	009b      	lsls	r3, r3, #2
    75de:	4413      	add	r3, r2
    75e0:	009b      	lsls	r3, r3, #2
    75e2:	440b      	add	r3, r1
    75e4:	2201      	movs	r2, #1
    75e6:	601a      	str	r2, [r3, #0]
}
    75e8:	bf00      	nop
    75ea:	b004      	add	sp, #16
    75ec:	4770      	bx	lr
    75ee:	bf00      	nop
    75f0:	1fff8ce8 	.word	0x1fff8ce8
    75f4:	1fff8cec 	.word	0x1fff8cec

000075f8 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    75f8:	b084      	sub	sp, #16
    75fa:	4603      	mov	r3, r0
    75fc:	460a      	mov	r2, r1
    75fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    7602:	4613      	mov	r3, r2
    7604:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7608:	f89d 3005 	ldrb.w	r3, [sp, #5]
    760c:	4a46      	ldr	r2, [pc, #280]	; (7728 <Adc_UpdateStatusAfterGetStream+0x130>)
    760e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7612:	68da      	ldr	r2, [r3, #12]
    7614:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7618:	005b      	lsls	r3, r3, #1
    761a:	4413      	add	r3, r2
    761c:	881b      	ldrh	r3, [r3, #0]
    761e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7622:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7626:	4941      	ldr	r1, [pc, #260]	; (772c <Adc_UpdateStatusAfterGetStream+0x134>)
    7628:	4613      	mov	r3, r2
    762a:	009b      	lsls	r3, r3, #2
    762c:	4413      	add	r3, r2
    762e:	009b      	lsls	r3, r3, #2
    7630:	440b      	add	r3, r1
    7632:	681b      	ldr	r3, [r3, #0]
    7634:	2b02      	cmp	r3, #2
    7636:	d109      	bne.n	764c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7638:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    763c:	493b      	ldr	r1, [pc, #236]	; (772c <Adc_UpdateStatusAfterGetStream+0x134>)
    763e:	4613      	mov	r3, r2
    7640:	009b      	lsls	r3, r3, #2
    7642:	4413      	add	r3, r2
    7644:	009b      	lsls	r3, r3, #2
    7646:	440b      	add	r3, r1
    7648:	2201      	movs	r2, #1
    764a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    764c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7650:	4936      	ldr	r1, [pc, #216]	; (772c <Adc_UpdateStatusAfterGetStream+0x134>)
    7652:	4613      	mov	r3, r2
    7654:	009b      	lsls	r3, r3, #2
    7656:	4413      	add	r3, r2
    7658:	009b      	lsls	r3, r3, #2
    765a:	440b      	add	r3, r1
    765c:	681b      	ldr	r3, [r3, #0]
    765e:	2b03      	cmp	r3, #3
    7660:	d15f      	bne.n	7722 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7662:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7666:	4a30      	ldr	r2, [pc, #192]	; (7728 <Adc_UpdateStatusAfterGetStream+0x130>)
    7668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    766c:	685a      	ldr	r2, [r3, #4]
    766e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7672:	2134      	movs	r1, #52	; 0x34
    7674:	fb01 f303 	mul.w	r3, r1, r3
    7678:	4413      	add	r3, r2
    767a:	695b      	ldr	r3, [r3, #20]
    767c:	2b00      	cmp	r3, #0
    767e:	d150      	bne.n	7722 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7680:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7684:	4a28      	ldr	r2, [pc, #160]	; (7728 <Adc_UpdateStatusAfterGetStream+0x130>)
    7686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    768a:	685a      	ldr	r2, [r3, #4]
    768c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7690:	2134      	movs	r1, #52	; 0x34
    7692:	fb01 f303 	mul.w	r3, r1, r3
    7696:	4413      	add	r3, r2
    7698:	689b      	ldr	r3, [r3, #8]
    769a:	2b00      	cmp	r3, #0
    769c:	d02c      	beq.n	76f8 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    769e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76a2:	4a21      	ldr	r2, [pc, #132]	; (7728 <Adc_UpdateStatusAfterGetStream+0x130>)
    76a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a8:	685a      	ldr	r2, [r3, #4]
    76aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76ae:	2134      	movs	r1, #52	; 0x34
    76b0:	fb01 f303 	mul.w	r3, r1, r3
    76b4:	4413      	add	r3, r2
    76b6:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    76b8:	2b01      	cmp	r3, #1
    76ba:	d128      	bne.n	770e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76c0:	4a19      	ldr	r2, [pc, #100]	; (7728 <Adc_UpdateStatusAfterGetStream+0x130>)
    76c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76c6:	685a      	ldr	r2, [r3, #4]
    76c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76cc:	2134      	movs	r1, #52	; 0x34
    76ce:	fb01 f303 	mul.w	r3, r1, r3
    76d2:	4413      	add	r3, r2
    76d4:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    76d6:	2b01      	cmp	r3, #1
    76d8:	d119      	bne.n	770e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    76da:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76de:	4a12      	ldr	r2, [pc, #72]	; (7728 <Adc_UpdateStatusAfterGetStream+0x130>)
    76e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e4:	685a      	ldr	r2, [r3, #4]
    76e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76ea:	2134      	movs	r1, #52	; 0x34
    76ec:	fb01 f303 	mul.w	r3, r1, r3
    76f0:	4413      	add	r3, r2
    76f2:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76f4:	2b00      	cmp	r3, #0
    76f6:	d10a      	bne.n	770e <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    76f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76fc:	490b      	ldr	r1, [pc, #44]	; (772c <Adc_UpdateStatusAfterGetStream+0x134>)
    76fe:	4613      	mov	r3, r2
    7700:	009b      	lsls	r3, r3, #2
    7702:	4413      	add	r3, r2
    7704:	009b      	lsls	r3, r3, #2
    7706:	440b      	add	r3, r1
    7708:	2200      	movs	r2, #0
    770a:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    770c:	e009      	b.n	7722 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    770e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7712:	4906      	ldr	r1, [pc, #24]	; (772c <Adc_UpdateStatusAfterGetStream+0x134>)
    7714:	4613      	mov	r3, r2
    7716:	009b      	lsls	r3, r3, #2
    7718:	4413      	add	r3, r2
    771a:	009b      	lsls	r3, r3, #2
    771c:	440b      	add	r3, r1
    771e:	2201      	movs	r2, #1
    7720:	601a      	str	r2, [r3, #0]
}
    7722:	bf00      	nop
    7724:	b004      	add	sp, #16
    7726:	4770      	bx	lr
    7728:	1fff8ce8 	.word	0x1fff8ce8
    772c:	1fff8cec 	.word	0x1fff8cec

00007730 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    7730:	b500      	push	{lr}
    7732:	b085      	sub	sp, #20
    7734:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7736:	f002 fa99 	bl	9c6c <Adc_GetCoreID>
    773a:	4603      	mov	r3, r0
    773c:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7740:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7744:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7748:	f89d 300c 	ldrb.w	r3, [sp, #12]
    774c:	b2db      	uxtb	r3, r3
    774e:	4619      	mov	r1, r3
    7750:	9801      	ldr	r0, [sp, #4]
    7752:	f7ff fb6d 	bl	6e30 <Adc_CheckCurrentCoreId>
    7756:	4603      	mov	r3, r0
    7758:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    775c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7760:	2b00      	cmp	r3, #0
    7762:	d12c      	bne.n	77be <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    7764:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7768:	b2db      	uxtb	r3, r3
    776a:	4619      	mov	r1, r3
    776c:	4a16      	ldr	r2, [pc, #88]	; (77c8 <Adc_Init+0x98>)
    776e:	9b01      	ldr	r3, [sp, #4]
    7770:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7774:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7778:	b2db      	uxtb	r3, r3
    777a:	4618      	mov	r0, r3
    777c:	f7ff fafc 	bl	6d78 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    7780:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7784:	b2db      	uxtb	r3, r3
    7786:	4618      	mov	r0, r3
    7788:	f7ff fa8c 	bl	6ca4 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    778c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7790:	b2db      	uxtb	r3, r3
    7792:	461a      	mov	r2, r3
    7794:	4b0c      	ldr	r3, [pc, #48]	; (77c8 <Adc_Init+0x98>)
    7796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    779a:	681b      	ldr	r3, [r3, #0]
    779c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    77a0:	4611      	mov	r1, r2
    77a2:	4618      	mov	r0, r3
    77a4:	f001 ff9a 	bl	96dc <Adc_Ipw_Init>
    77a8:	4603      	mov	r3, r0
    77aa:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    77ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    77b2:	2b01      	cmp	r3, #1
    77b4:	d103      	bne.n	77be <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    77b6:	212b      	movs	r1, #43	; 0x2b
    77b8:	2000      	movs	r0, #0
    77ba:	f7ff f841 	bl	6840 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    77be:	bf00      	nop
    77c0:	b005      	add	sp, #20
    77c2:	f85d fb04 	ldr.w	pc, [sp], #4
    77c6:	bf00      	nop
    77c8:	1fff8ce8 	.word	0x1fff8ce8

000077cc <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    77cc:	b500      	push	{lr}
    77ce:	b085      	sub	sp, #20
    77d0:	4603      	mov	r3, r0
    77d2:	9100      	str	r1, [sp, #0]
    77d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    77d8:	2301      	movs	r3, #1
    77da:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    77de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77e2:	4618      	mov	r0, r3
    77e4:	f7ff f950 	bl	6a88 <Adc_ValidateSetupBufferNotBusy>
    77e8:	4603      	mov	r3, r0
    77ea:	2b00      	cmp	r3, #0
    77ec:	d10d      	bne.n	780a <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    77ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77f2:	4909      	ldr	r1, [pc, #36]	; (7818 <Adc_SetupResultBuffer+0x4c>)
    77f4:	4613      	mov	r3, r2
    77f6:	009b      	lsls	r3, r3, #2
    77f8:	4413      	add	r3, r2
    77fa:	009b      	lsls	r3, r3, #2
    77fc:	440b      	add	r3, r1
    77fe:	330c      	adds	r3, #12
    7800:	9a00      	ldr	r2, [sp, #0]
    7802:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7804:	2300      	movs	r3, #0
    7806:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    780a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    780e:	4618      	mov	r0, r3
    7810:	b005      	add	sp, #20
    7812:	f85d fb04 	ldr.w	pc, [sp], #4
    7816:	bf00      	nop
    7818:	1fff8cec 	.word	0x1fff8cec

0000781c <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    781c:	b500      	push	{lr}
    781e:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7820:	2300      	movs	r3, #0
    7822:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7826:	f002 fa21 	bl	9c6c <Adc_GetCoreID>
    782a:	4603      	mov	r3, r0
    782c:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7830:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7834:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7838:	f89d 3002 	ldrb.w	r3, [sp, #2]
    783c:	b2db      	uxtb	r3, r3
    783e:	461a      	mov	r2, r3
    7840:	4b2f      	ldr	r3, [pc, #188]	; (7900 <Adc_DeInit+0xe4>)
    7842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7846:	f89d 2006 	ldrb.w	r2, [sp, #6]
    784a:	4611      	mov	r1, r2
    784c:	4618      	mov	r0, r3
    784e:	f7ff faef 	bl	6e30 <Adc_CheckCurrentCoreId>
    7852:	4603      	mov	r3, r0
    7854:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7858:	f89d 3005 	ldrb.w	r3, [sp, #5]
    785c:	2b00      	cmp	r3, #0
    785e:	d14b      	bne.n	78f8 <Adc_DeInit+0xdc>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    7860:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7864:	b2db      	uxtb	r3, r3
    7866:	4618      	mov	r0, r3
    7868:	f7ff f8c0 	bl	69ec <Adc_ValidateDeInitNotBusy>
    786c:	4603      	mov	r3, r0
    786e:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    7872:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7876:	2b00      	cmp	r3, #0
    7878:	d13e      	bne.n	78f8 <Adc_DeInit+0xdc>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    787a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    787e:	b2db      	uxtb	r3, r3
    7880:	4618      	mov	r0, r3
    7882:	f001 ff70 	bl	9766 <Adc_Ipw_DeInit>
    7886:	4603      	mov	r3, r0
    7888:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    788c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7890:	2b01      	cmp	r3, #1
    7892:	d103      	bne.n	789c <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7894:	212b      	movs	r1, #43	; 0x2b
    7896:	2001      	movs	r0, #1
    7898:	f7fe ffd2 	bl	6840 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    789c:	2300      	movs	r3, #0
    789e:	f88d 3007 	strb.w	r3, [sp, #7]
    78a2:	e01d      	b.n	78e0 <Adc_DeInit+0xc4>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    78a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    78a8:	b2db      	uxtb	r3, r3
    78aa:	461a      	mov	r2, r3
    78ac:	4b14      	ldr	r3, [pc, #80]	; (7900 <Adc_DeInit+0xe4>)
    78ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78b2:	681a      	ldr	r2, [r3, #0]
    78b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b8:	4413      	add	r3, r2
    78ba:	7f9b      	ldrb	r3, [r3, #30]
    78bc:	2b01      	cmp	r3, #1
    78be:	d10a      	bne.n	78d6 <Adc_DeInit+0xba>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    78c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    78c4:	490f      	ldr	r1, [pc, #60]	; (7904 <Adc_DeInit+0xe8>)
    78c6:	4613      	mov	r3, r2
    78c8:	005b      	lsls	r3, r3, #1
    78ca:	4413      	add	r3, r2
    78cc:	009b      	lsls	r3, r3, #2
    78ce:	440b      	add	r3, r1
    78d0:	330a      	adds	r3, #10
    78d2:	2200      	movs	r2, #0
    78d4:	701a      	strb	r2, [r3, #0]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    78d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78da:	3301      	adds	r3, #1
    78dc:	f88d 3007 	strb.w	r3, [sp, #7]
    78e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78e4:	2b01      	cmp	r3, #1
    78e6:	d9dd      	bls.n	78a4 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    78e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    78ec:	b2db      	uxtb	r3, r3
    78ee:	4619      	mov	r1, r3
    78f0:	4b03      	ldr	r3, [pc, #12]	; (7900 <Adc_DeInit+0xe4>)
    78f2:	2200      	movs	r2, #0
    78f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    78f8:	bf00      	nop
    78fa:	b003      	add	sp, #12
    78fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7900:	1fff8ce8 	.word	0x1fff8ce8
    7904:	1fff8d00 	.word	0x1fff8d00

00007908 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    7908:	b500      	push	{lr}
    790a:	b085      	sub	sp, #20
    790c:	4603      	mov	r3, r0
    790e:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7912:	2300      	movs	r3, #0
    7914:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7918:	2300      	movs	r3, #0
    791a:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    791e:	f002 f9a5 	bl	9c6c <Adc_GetCoreID>
    7922:	4603      	mov	r3, r0
    7924:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7928:	f89d 300c 	ldrb.w	r3, [sp, #12]
    792c:	b2db      	uxtb	r3, r3
    792e:	461a      	mov	r2, r3
    7930:	4b1a      	ldr	r3, [pc, #104]	; (799c <Adc_StartGroupConversion+0x94>)
    7932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7936:	68da      	ldr	r2, [r3, #12]
    7938:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    793c:	005b      	lsls	r3, r3, #1
    793e:	4413      	add	r3, r2
    7940:	881b      	ldrh	r3, [r3, #0]
    7942:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    7946:	f89d 300c 	ldrb.w	r3, [sp, #12]
    794a:	b2da      	uxtb	r2, r3
    794c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7950:	4611      	mov	r1, r2
    7952:	4618      	mov	r0, r3
    7954:	f7ff f8bc 	bl	6ad0 <Adc_ValidateStateStartGroupConvNotBusy>
    7958:	4603      	mov	r3, r0
    795a:	2b00      	cmp	r3, #0
    795c:	d11a      	bne.n	7994 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    795e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7962:	b2db      	uxtb	r3, r3
    7964:	461a      	mov	r2, r3
    7966:	4b0d      	ldr	r3, [pc, #52]	; (799c <Adc_StartGroupConversion+0x94>)
    7968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    796c:	685a      	ldr	r2, [r3, #4]
    796e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7972:	2134      	movs	r1, #52	; 0x34
    7974:	fb01 f303 	mul.w	r3, r1, r3
    7978:	4413      	add	r3, r2
    797a:	789b      	ldrb	r3, [r3, #2]
    797c:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7980:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7984:	b2da      	uxtb	r2, r3
    7986:	f89d 100d 	ldrb.w	r1, [sp, #13]
    798a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    798e:	4618      	mov	r0, r3
    7990:	f7ff fa81 	bl	6e96 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7994:	bf00      	nop
    7996:	b005      	add	sp, #20
    7998:	f85d fb04 	ldr.w	pc, [sp], #4
    799c:	1fff8ce8 	.word	0x1fff8ce8

000079a0 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    79a0:	b500      	push	{lr}
    79a2:	b085      	sub	sp, #20
    79a4:	4603      	mov	r3, r0
    79a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    79aa:	2300      	movs	r3, #0
    79ac:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    79b0:	2300      	movs	r3, #0
    79b2:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    79b6:	f002 f959 	bl	9c6c <Adc_GetCoreID>
    79ba:	4603      	mov	r3, r0
    79bc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    79c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79c4:	b2da      	uxtb	r2, r3
    79c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79ca:	4619      	mov	r1, r3
    79cc:	2003      	movs	r0, #3
    79ce:	f7ff f8f7 	bl	6bc0 <Adc_ValidateStateNotIdle>
    79d2:	4603      	mov	r3, r0
    79d4:	2b00      	cmp	r3, #0
    79d6:	d129      	bne.n	7a2c <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    79d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79dc:	b2db      	uxtb	r3, r3
    79de:	461a      	mov	r2, r3
    79e0:	4b14      	ldr	r3, [pc, #80]	; (7a34 <Adc_StopGroupConversion+0x94>)
    79e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79e6:	68da      	ldr	r2, [r3, #12]
    79e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79ec:	005b      	lsls	r3, r3, #1
    79ee:	4413      	add	r3, r2
    79f0:	881b      	ldrh	r3, [r3, #0]
    79f2:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    79f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79fa:	b2db      	uxtb	r3, r3
    79fc:	461a      	mov	r2, r3
    79fe:	4b0d      	ldr	r3, [pc, #52]	; (7a34 <Adc_StopGroupConversion+0x94>)
    7a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a04:	685a      	ldr	r2, [r3, #4]
    7a06:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7a0a:	2134      	movs	r1, #52	; 0x34
    7a0c:	fb01 f303 	mul.w	r3, r1, r3
    7a10:	4413      	add	r3, r2
    7a12:	789b      	ldrb	r3, [r3, #2]
    7a14:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    7a18:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a1c:	b2da      	uxtb	r2, r3
    7a1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7a22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a26:	4618      	mov	r0, r3
    7a28:	f7ff fb62 	bl	70f0 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7a2c:	bf00      	nop
    7a2e:	b005      	add	sp, #20
    7a30:	f85d fb04 	ldr.w	pc, [sp], #4
    7a34:	1fff8ce8 	.word	0x1fff8ce8

00007a38 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7a38:	b500      	push	{lr}
    7a3a:	b085      	sub	sp, #20
    7a3c:	4603      	mov	r3, r0
    7a3e:	9100      	str	r1, [sp, #0]
    7a40:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7a44:	2301      	movs	r3, #1
    7a46:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7a4a:	2301      	movs	r3, #1
    7a4c:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7a50:	f002 f90c 	bl	9c6c <Adc_GetCoreID>
    7a54:	4603      	mov	r3, r0
    7a56:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7a5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a5e:	b2da      	uxtb	r2, r3
    7a60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a64:	4619      	mov	r1, r3
    7a66:	2004      	movs	r0, #4
    7a68:	f7ff f8aa 	bl	6bc0 <Adc_ValidateStateNotIdle>
    7a6c:	4603      	mov	r3, r0
    7a6e:	2b00      	cmp	r3, #0
    7a70:	d121      	bne.n	7ab6 <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7a72:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a76:	b2db      	uxtb	r3, r3
    7a78:	f10d 020d 	add.w	r2, sp, #13
    7a7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7a80:	9900      	ldr	r1, [sp, #0]
    7a82:	f002 f848 	bl	9b16 <Adc_Ipw_ReadGroup>
    7a86:	4603      	mov	r3, r0
    7a88:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7a8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a90:	2b00      	cmp	r3, #0
    7a92:	d006      	beq.n	7aa2 <Adc_ReadGroup+0x6a>
    7a94:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a98:	f083 0301 	eor.w	r3, r3, #1
    7a9c:	b2db      	uxtb	r3, r3
    7a9e:	2b00      	cmp	r3, #0
    7aa0:	d009      	beq.n	7ab6 <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7aa2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7aa6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7aaa:	b2da      	uxtb	r2, r3
    7aac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ab0:	4618      	mov	r0, r3
    7ab2:	f7ff fbd3 	bl	725c <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7aba:	4618      	mov	r0, r3
    7abc:	b005      	add	sp, #20
    7abe:	f85d fb04 	ldr.w	pc, [sp], #4

00007ac2 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7ac2:	b084      	sub	sp, #16
    7ac4:	4603      	mov	r3, r0
    7ac6:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7aca:	2300      	movs	r3, #0
    7acc:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7ace:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ad2:	4906      	ldr	r1, [pc, #24]	; (7aec <Adc_GetGroupStatus+0x2a>)
    7ad4:	4613      	mov	r3, r2
    7ad6:	009b      	lsls	r3, r3, #2
    7ad8:	4413      	add	r3, r2
    7ada:	009b      	lsls	r3, r3, #2
    7adc:	440b      	add	r3, r1
    7ade:	681b      	ldr	r3, [r3, #0]
    7ae0:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7ae2:	9b03      	ldr	r3, [sp, #12]
}
    7ae4:	4618      	mov	r0, r3
    7ae6:	b004      	add	sp, #16
    7ae8:	4770      	bx	lr
    7aea:	bf00      	nop
    7aec:	1fff8cec 	.word	0x1fff8cec

00007af0 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7af0:	b500      	push	{lr}
    7af2:	b085      	sub	sp, #20
    7af4:	4603      	mov	r3, r0
    7af6:	9100      	str	r1, [sp, #0]
    7af8:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7afc:	f002 f8b6 	bl	9c6c <Adc_GetCoreID>
    7b00:	4603      	mov	r3, r0
    7b02:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7b06:	2300      	movs	r3, #0
    7b08:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7b0c:	2300      	movs	r3, #0
    7b0e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7b12:	2300      	movs	r3, #0
    7b14:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7b18:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b1c:	b2da      	uxtb	r2, r3
    7b1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b22:	4619      	mov	r1, r3
    7b24:	200b      	movs	r0, #11
    7b26:	f7ff f84b 	bl	6bc0 <Adc_ValidateStateNotIdle>
    7b2a:	4603      	mov	r3, r0
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	f040 808e 	bne.w	7c4e <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7b32:	9b00      	ldr	r3, [sp, #0]
    7b34:	2200      	movs	r2, #0
    7b36:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b3c:	4948      	ldr	r1, [pc, #288]	; (7c60 <Adc_GetStreamLastPointer+0x170>)
    7b3e:	4613      	mov	r3, r2
    7b40:	009b      	lsls	r3, r3, #2
    7b42:	4413      	add	r3, r2
    7b44:	009b      	lsls	r3, r3, #2
    7b46:	440b      	add	r3, r1
    7b48:	681b      	ldr	r3, [r3, #0]
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	f000 8082 	beq.w	7c54 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7b50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b54:	4942      	ldr	r1, [pc, #264]	; (7c60 <Adc_GetStreamLastPointer+0x170>)
    7b56:	4613      	mov	r3, r2
    7b58:	009b      	lsls	r3, r3, #2
    7b5a:	4413      	add	r3, r2
    7b5c:	009b      	lsls	r3, r3, #2
    7b5e:	440b      	add	r3, r1
    7b60:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b62:	2b01      	cmp	r3, #1
    7b64:	d076      	beq.n	7c54 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b66:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b6a:	b2db      	uxtb	r3, r3
    7b6c:	461a      	mov	r2, r3
    7b6e:	4b3d      	ldr	r3, [pc, #244]	; (7c64 <Adc_GetStreamLastPointer+0x174>)
    7b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b74:	68da      	ldr	r2, [r3, #12]
    7b76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b7a:	005b      	lsls	r3, r3, #1
    7b7c:	4413      	add	r3, r2
    7b7e:	881b      	ldrh	r3, [r3, #0]
    7b80:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7b84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b88:	4935      	ldr	r1, [pc, #212]	; (7c60 <Adc_GetStreamLastPointer+0x170>)
    7b8a:	4613      	mov	r3, r2
    7b8c:	009b      	lsls	r3, r3, #2
    7b8e:	4413      	add	r3, r2
    7b90:	009b      	lsls	r3, r3, #2
    7b92:	440b      	add	r3, r1
    7b94:	3308      	adds	r3, #8
    7b96:	881b      	ldrh	r3, [r3, #0]
    7b98:	b29b      	uxth	r3, r3
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d123      	bne.n	7be6 <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7b9e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ba2:	b2db      	uxtb	r3, r3
    7ba4:	461a      	mov	r2, r3
    7ba6:	4b2f      	ldr	r3, [pc, #188]	; (7c64 <Adc_GetStreamLastPointer+0x174>)
    7ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bac:	685a      	ldr	r2, [r3, #4]
    7bae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7bb2:	2134      	movs	r1, #52	; 0x34
    7bb4:	fb01 f303 	mul.w	r3, r1, r3
    7bb8:	4413      	add	r3, r2
    7bba:	8b9b      	ldrh	r3, [r3, #28]
    7bbc:	3b01      	subs	r3, #1
    7bbe:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7bc2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7bc6:	b2db      	uxtb	r3, r3
    7bc8:	461a      	mov	r2, r3
    7bca:	4b26      	ldr	r3, [pc, #152]	; (7c64 <Adc_GetStreamLastPointer+0x174>)
    7bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bd0:	685a      	ldr	r2, [r3, #4]
    7bd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7bd6:	2134      	movs	r1, #52	; 0x34
    7bd8:	fb01 f303 	mul.w	r3, r1, r3
    7bdc:	4413      	add	r3, r2
    7bde:	8b9b      	ldrh	r3, [r3, #28]
    7be0:	f8ad 300e 	strh.w	r3, [sp, #14]
    7be4:	e019      	b.n	7c1a <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7be6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7bea:	491d      	ldr	r1, [pc, #116]	; (7c60 <Adc_GetStreamLastPointer+0x170>)
    7bec:	4613      	mov	r3, r2
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	4413      	add	r3, r2
    7bf2:	009b      	lsls	r3, r3, #2
    7bf4:	440b      	add	r3, r1
    7bf6:	3308      	adds	r3, #8
    7bf8:	881b      	ldrh	r3, [r3, #0]
    7bfa:	b29b      	uxth	r3, r3
    7bfc:	3b01      	subs	r3, #1
    7bfe:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7c02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c06:	4916      	ldr	r1, [pc, #88]	; (7c60 <Adc_GetStreamLastPointer+0x170>)
    7c08:	4613      	mov	r3, r2
    7c0a:	009b      	lsls	r3, r3, #2
    7c0c:	4413      	add	r3, r2
    7c0e:	009b      	lsls	r3, r3, #2
    7c10:	440b      	add	r3, r1
    7c12:	3308      	adds	r3, #8
    7c14:	881b      	ldrh	r3, [r3, #0]
    7c16:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7c1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c1e:	4910      	ldr	r1, [pc, #64]	; (7c60 <Adc_GetStreamLastPointer+0x170>)
    7c20:	4613      	mov	r3, r2
    7c22:	009b      	lsls	r3, r3, #2
    7c24:	4413      	add	r3, r2
    7c26:	009b      	lsls	r3, r3, #2
    7c28:	440b      	add	r3, r1
    7c2a:	330c      	adds	r3, #12
    7c2c:	681a      	ldr	r2, [r3, #0]
    7c2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c32:	005b      	lsls	r3, r3, #1
    7c34:	441a      	add	r2, r3
    7c36:	9b00      	ldr	r3, [sp, #0]
    7c38:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7c3a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7c3e:	b2da      	uxtb	r2, r3
    7c40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c44:	4611      	mov	r1, r2
    7c46:	4618      	mov	r0, r3
    7c48:	f7ff fcd6 	bl	75f8 <Adc_UpdateStatusAfterGetStream>
    7c4c:	e002      	b.n	7c54 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7c4e:	9b00      	ldr	r3, [sp, #0]
    7c50:	2200      	movs	r2, #0
    7c52:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7c54:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7c58:	4618      	mov	r0, r3
    7c5a:	b005      	add	sp, #20
    7c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c60:	1fff8cec 	.word	0x1fff8cec
    7c64:	1fff8ce8 	.word	0x1fff8ce8

00007c68 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7c68:	b082      	sub	sp, #8
    7c6a:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7c6c:	9b01      	ldr	r3, [sp, #4]
    7c6e:	222b      	movs	r2, #43	; 0x2b
    7c70:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7c72:	9b01      	ldr	r3, [sp, #4]
    7c74:	227b      	movs	r2, #123	; 0x7b
    7c76:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7c78:	9b01      	ldr	r3, [sp, #4]
    7c7a:	2202      	movs	r2, #2
    7c7c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7c7e:	9b01      	ldr	r3, [sp, #4]
    7c80:	2200      	movs	r2, #0
    7c82:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7c84:	9b01      	ldr	r3, [sp, #4]
    7c86:	2200      	movs	r2, #0
    7c88:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7c8a:	bf00      	nop
    7c8c:	b002      	add	sp, #8
    7c8e:	4770      	bx	lr

00007c90 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7c90:	b500      	push	{lr}
    7c92:	b085      	sub	sp, #20
    7c94:	4603      	mov	r3, r0
    7c96:	9100      	str	r1, [sp, #0]
    7c98:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7c9c:	2300      	movs	r3, #0
    7c9e:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7ca2:	f001 ffe3 	bl	9c6c <Adc_GetCoreID>
    7ca6:	4603      	mov	r3, r0
    7ca8:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7cac:	9b00      	ldr	r3, [sp, #0]
    7cae:	2201      	movs	r2, #1
    7cb0:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cb6:	2129      	movs	r1, #41	; 0x29
    7cb8:	4618      	mov	r0, r3
    7cba:	f7fe fdd6 	bl	686a <Adc_ValidateNotBusyNoQueue>
    7cbe:	4603      	mov	r3, r0
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	d115      	bne.n	7cf0 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7cc4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cc8:	b2db      	uxtb	r3, r3
    7cca:	4619      	mov	r1, r3
    7ccc:	2029      	movs	r0, #41	; 0x29
    7cce:	f7fe fe3b 	bl	6948 <Adc_ValidateCheckGroupNotConversion>
    7cd2:	4603      	mov	r3, r0
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d10b      	bne.n	7cf0 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7cd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cdc:	b2da      	uxtb	r2, r3
    7cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ce2:	9900      	ldr	r1, [sp, #0]
    7ce4:	4618      	mov	r0, r3
    7ce6:	f001 ff97 	bl	9c18 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7cea:	2301      	movs	r3, #1
    7cec:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7cf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d007      	beq.n	7d08 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7cf8:	9b00      	ldr	r3, [sp, #0]
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	2b01      	cmp	r3, #1
    7cfe:	d103      	bne.n	7d08 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7d00:	212b      	movs	r1, #43	; 0x2b
    7d02:	2029      	movs	r0, #41	; 0x29
    7d04:	f7fe fd9c 	bl	6840 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7d08:	bf00      	nop
    7d0a:	b005      	add	sp, #20
    7d0c:	f85d fb04 	ldr.w	pc, [sp], #4

00007d10 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7d10:	b086      	sub	sp, #24
    7d12:	9003      	str	r0, [sp, #12]
    7d14:	9102      	str	r1, [sp, #8]
    7d16:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7d18:	9b03      	ldr	r3, [sp, #12]
    7d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7d1e:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7d20:	9b02      	ldr	r3, [sp, #8]
    7d22:	43db      	mvns	r3, r3
    7d24:	9a05      	ldr	r2, [sp, #20]
    7d26:	4013      	ands	r3, r2
    7d28:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7d2a:	9a05      	ldr	r2, [sp, #20]
    7d2c:	9b01      	ldr	r3, [sp, #4]
    7d2e:	4313      	orrs	r3, r2
    7d30:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7d32:	9b03      	ldr	r3, [sp, #12]
    7d34:	9a05      	ldr	r2, [sp, #20]
    7d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7d3a:	bf00      	nop
    7d3c:	b006      	add	sp, #24
    7d3e:	4770      	bx	lr

00007d40 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7d40:	b086      	sub	sp, #24
    7d42:	9003      	str	r0, [sp, #12]
    7d44:	9102      	str	r1, [sp, #8]
    7d46:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7d48:	9b03      	ldr	r3, [sp, #12]
    7d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7d4c:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7d4e:	9b05      	ldr	r3, [sp, #20]
    7d50:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7d54:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7d56:	9b02      	ldr	r3, [sp, #8]
    7d58:	015b      	lsls	r3, r3, #5
    7d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7d5e:	9a05      	ldr	r2, [sp, #20]
    7d60:	4313      	orrs	r3, r2
    7d62:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	f003 0303 	and.w	r3, r3, #3
    7d6a:	9a05      	ldr	r2, [sp, #20]
    7d6c:	4313      	orrs	r3, r2
    7d6e:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7d70:	9b03      	ldr	r3, [sp, #12]
    7d72:	9a05      	ldr	r2, [sp, #20]
    7d74:	641a      	str	r2, [r3, #64]	; 0x40
}
    7d76:	bf00      	nop
    7d78:	b006      	add	sp, #24
    7d7a:	4770      	bx	lr

00007d7c <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7d7c:	b084      	sub	sp, #16
    7d7e:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7d80:	2300      	movs	r3, #0
    7d82:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7d84:	9b01      	ldr	r3, [sp, #4]
    7d86:	095b      	lsrs	r3, r3, #5
    7d88:	f003 0303 	and.w	r3, r3, #3
    7d8c:	2b03      	cmp	r3, #3
    7d8e:	d00c      	beq.n	7daa <Adc_HwAcc_GetClockDivide+0x2e>
    7d90:	2b03      	cmp	r3, #3
    7d92:	d80d      	bhi.n	7db0 <Adc_HwAcc_GetClockDivide+0x34>
    7d94:	2b01      	cmp	r3, #1
    7d96:	d002      	beq.n	7d9e <Adc_HwAcc_GetClockDivide+0x22>
    7d98:	2b02      	cmp	r3, #2
    7d9a:	d003      	beq.n	7da4 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7d9c:	e008      	b.n	7db0 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7d9e:	2301      	movs	r3, #1
    7da0:	9303      	str	r3, [sp, #12]
            break;
    7da2:	e006      	b.n	7db2 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7da4:	2302      	movs	r3, #2
    7da6:	9303      	str	r3, [sp, #12]
            break;
    7da8:	e003      	b.n	7db2 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7daa:	2303      	movs	r3, #3
    7dac:	9303      	str	r3, [sp, #12]
            break;
    7dae:	e000      	b.n	7db2 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7db0:	bf00      	nop
    }
    return ReturnValue;
    7db2:	9b03      	ldr	r3, [sp, #12]
}
    7db4:	4618      	mov	r0, r3
    7db6:	b004      	add	sp, #16
    7db8:	4770      	bx	lr

00007dba <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7dba:	b084      	sub	sp, #16
    7dbc:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7dbe:	2300      	movs	r3, #0
    7dc0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7dc2:	9b01      	ldr	r3, [sp, #4]
    7dc4:	f003 0303 	and.w	r3, r3, #3
    7dc8:	2b03      	cmp	r3, #3
    7dca:	d00c      	beq.n	7de6 <Adc_HwAcc_GetInputClock+0x2c>
    7dcc:	2b03      	cmp	r3, #3
    7dce:	d80d      	bhi.n	7dec <Adc_HwAcc_GetInputClock+0x32>
    7dd0:	2b01      	cmp	r3, #1
    7dd2:	d002      	beq.n	7dda <Adc_HwAcc_GetInputClock+0x20>
    7dd4:	2b02      	cmp	r3, #2
    7dd6:	d003      	beq.n	7de0 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7dd8:	e008      	b.n	7dec <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7dda:	2301      	movs	r3, #1
    7ddc:	9303      	str	r3, [sp, #12]
            break;
    7dde:	e006      	b.n	7dee <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7de0:	2302      	movs	r3, #2
    7de2:	9303      	str	r3, [sp, #12]
            break;
    7de4:	e003      	b.n	7dee <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7de6:	2303      	movs	r3, #3
    7de8:	9303      	str	r3, [sp, #12]
            break;
    7dea:	e000      	b.n	7dee <Adc_HwAcc_GetInputClock+0x34>
            break;
    7dec:	bf00      	nop
    }
    return ReturnValue;
    7dee:	9b03      	ldr	r3, [sp, #12]
}
    7df0:	4618      	mov	r0, r3
    7df2:	b004      	add	sp, #16
    7df4:	4770      	bx	lr

00007df6 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7df6:	b084      	sub	sp, #16
    7df8:	9001      	str	r0, [sp, #4]
    7dfa:	460b      	mov	r3, r1
    7dfc:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7e00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d002      	beq.n	7e0e <Adc_HwAcc_SetSampleTime+0x18>
    7e08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7e0c:	e000      	b.n	7e10 <Adc_HwAcc_SetSampleTime+0x1a>
    7e0e:	2301      	movs	r3, #1
    7e10:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7e18:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7e1a:	9b02      	ldr	r3, [sp, #8]
    7e1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7e20:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7e22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e26:	9a02      	ldr	r2, [sp, #8]
    7e28:	4313      	orrs	r3, r2
    7e2a:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7e2c:	9b01      	ldr	r3, [sp, #4]
    7e2e:	9a02      	ldr	r2, [sp, #8]
    7e30:	645a      	str	r2, [r3, #68]	; 0x44
}
    7e32:	bf00      	nop
    7e34:	b004      	add	sp, #16
    7e36:	4770      	bx	lr

00007e38 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7e38:	b086      	sub	sp, #24
    7e3a:	9003      	str	r0, [sp, #12]
    7e3c:	460b      	mov	r3, r1
    7e3e:	9201      	str	r2, [sp, #4]
    7e40:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7e44:	9b03      	ldr	r3, [sp, #12]
    7e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7e4a:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7e4c:	9b05      	ldr	r3, [sp, #20]
    7e4e:	f023 0307 	bic.w	r3, r3, #7
    7e52:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7e54:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e58:	2b00      	cmp	r3, #0
    7e5a:	d001      	beq.n	7e60 <Adc_HwAcc_SetAveraging+0x28>
    7e5c:	2304      	movs	r3, #4
    7e5e:	e000      	b.n	7e62 <Adc_HwAcc_SetAveraging+0x2a>
    7e60:	2300      	movs	r3, #0
    7e62:	9a05      	ldr	r2, [sp, #20]
    7e64:	4313      	orrs	r3, r2
    7e66:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7e68:	9b01      	ldr	r3, [sp, #4]
    7e6a:	f003 0303 	and.w	r3, r3, #3
    7e6e:	9a05      	ldr	r2, [sp, #20]
    7e70:	4313      	orrs	r3, r2
    7e72:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7e74:	9b03      	ldr	r3, [sp, #12]
    7e76:	9a05      	ldr	r2, [sp, #20]
    7e78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7e7c:	bf00      	nop
    7e7e:	b006      	add	sp, #24
    7e80:	4770      	bx	lr

00007e82 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    7e82:	b084      	sub	sp, #16
    7e84:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    7e86:	2300      	movs	r3, #0
    7e88:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7e8a:	9b01      	ldr	r3, [sp, #4]
    7e8c:	f003 0303 	and.w	r3, r3, #3
    7e90:	2b03      	cmp	r3, #3
    7e92:	d00c      	beq.n	7eae <Adc_HwAcc_GetAverageSelect+0x2c>
    7e94:	2b03      	cmp	r3, #3
    7e96:	d80d      	bhi.n	7eb4 <Adc_HwAcc_GetAverageSelect+0x32>
    7e98:	2b01      	cmp	r3, #1
    7e9a:	d002      	beq.n	7ea2 <Adc_HwAcc_GetAverageSelect+0x20>
    7e9c:	2b02      	cmp	r3, #2
    7e9e:	d003      	beq.n	7ea8 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7ea0:	e008      	b.n	7eb4 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    7ea2:	2301      	movs	r3, #1
    7ea4:	9303      	str	r3, [sp, #12]
            break;
    7ea6:	e006      	b.n	7eb6 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7ea8:	2302      	movs	r3, #2
    7eaa:	9303      	str	r3, [sp, #12]
            break;
    7eac:	e003      	b.n	7eb6 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7eae:	2303      	movs	r3, #3
    7eb0:	9303      	str	r3, [sp, #12]
            break;
    7eb2:	e000      	b.n	7eb6 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7eb4:	bf00      	nop
    }
    return ReturnValue;
    7eb6:	9b03      	ldr	r3, [sp, #12]
}
    7eb8:	4618      	mov	r0, r3
    7eba:	b004      	add	sp, #16
    7ebc:	4770      	bx	lr

00007ebe <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7ebe:	b084      	sub	sp, #16
    7ec0:	9001      	str	r0, [sp, #4]
    7ec2:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7eca:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7ecc:	9b03      	ldr	r3, [sp, #12]
    7ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7ed2:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7ed4:	9b00      	ldr	r3, [sp, #0]
    7ed6:	019b      	lsls	r3, r3, #6
    7ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7edc:	9a03      	ldr	r2, [sp, #12]
    7ede:	4313      	orrs	r3, r2
    7ee0:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7ee2:	9b01      	ldr	r3, [sp, #4]
    7ee4:	9a03      	ldr	r2, [sp, #12]
    7ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7eea:	bf00      	nop
    7eec:	b004      	add	sp, #16
    7eee:	4770      	bx	lr

00007ef0 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7ef0:	b084      	sub	sp, #16
    7ef2:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7ef4:	2300      	movs	r3, #0
    7ef6:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7ef8:	9b01      	ldr	r3, [sp, #4]
    7efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7efe:	2b00      	cmp	r3, #0
    7f00:	d001      	beq.n	7f06 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7f02:	2301      	movs	r3, #1
    7f04:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7f06:	9b03      	ldr	r3, [sp, #12]
}
    7f08:	4618      	mov	r0, r3
    7f0a:	b004      	add	sp, #16
    7f0c:	4770      	bx	lr

00007f0e <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7f0e:	b086      	sub	sp, #24
    7f10:	9003      	str	r0, [sp, #12]
    7f12:	9201      	str	r2, [sp, #4]
    7f14:	461a      	mov	r2, r3
    7f16:	460b      	mov	r3, r1
    7f18:	f88d 300b 	strb.w	r3, [sp, #11]
    7f1c:	4613      	mov	r3, r2
    7f1e:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7f22:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f26:	9b03      	ldr	r3, [sp, #12]
    7f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f2c:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7f2e:	9b05      	ldr	r3, [sp, #20]
    7f30:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7f34:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7f36:	9b01      	ldr	r3, [sp, #4]
    7f38:	f003 031f 	and.w	r3, r3, #31
    7f3c:	9a05      	ldr	r2, [sp, #20]
    7f3e:	4313      	orrs	r3, r2
    7f40:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7f42:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7f46:	2b00      	cmp	r3, #0
    7f48:	d001      	beq.n	7f4e <Adc_HwAcc_SetChannel+0x40>
    7f4a:	2340      	movs	r3, #64	; 0x40
    7f4c:	e000      	b.n	7f50 <Adc_HwAcc_SetChannel+0x42>
    7f4e:	2300      	movs	r3, #0
    7f50:	9a05      	ldr	r2, [sp, #20]
    7f52:	4313      	orrs	r3, r2
    7f54:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7f56:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f5a:	9b03      	ldr	r3, [sp, #12]
    7f5c:	9905      	ldr	r1, [sp, #20]
    7f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7f62:	bf00      	nop
    7f64:	b006      	add	sp, #24
    7f66:	4770      	bx	lr

00007f68 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7f68:	b082      	sub	sp, #8
    7f6a:	9001      	str	r0, [sp, #4]
    7f6c:	460b      	mov	r3, r1
    7f6e:	f8ad 3002 	strh.w	r3, [sp, #2]
    7f72:	4613      	mov	r3, r2
    7f74:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7f78:	f8bd 3000 	ldrh.w	r3, [sp]
    7f7c:	b2da      	uxtb	r2, r3
    7f7e:	9b01      	ldr	r3, [sp, #4]
    7f80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    7f84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7f88:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7f8c:	9b01      	ldr	r3, [sp, #4]
    7f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    7f92:	bf00      	nop
    7f94:	b002      	add	sp, #8
    7f96:	4770      	bx	lr

00007f98 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7f98:	b082      	sub	sp, #8
    7f9a:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	099b      	lsrs	r3, r3, #6
    7fa0:	f003 0301 	and.w	r3, r3, #1
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	bf14      	ite	ne
    7fa8:	2301      	movne	r3, #1
    7faa:	2300      	moveq	r3, #0
    7fac:	b2db      	uxtb	r3, r3
}
    7fae:	4618      	mov	r0, r3
    7fb0:	b002      	add	sp, #8
    7fb2:	4770      	bx	lr

00007fb4 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7fb4:	b082      	sub	sp, #8
    7fb6:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7fb8:	9b01      	ldr	r3, [sp, #4]
    7fba:	09db      	lsrs	r3, r3, #7
    7fbc:	f003 0301 	and.w	r3, r3, #1
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	bf14      	ite	ne
    7fc4:	2301      	movne	r3, #1
    7fc6:	2300      	moveq	r3, #0
    7fc8:	b2db      	uxtb	r3, r3
}
    7fca:	4618      	mov	r0, r3
    7fcc:	b002      	add	sp, #8
    7fce:	4770      	bx	lr

00007fd0 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7fd0:	b084      	sub	sp, #16
    7fd2:	9001      	str	r0, [sp, #4]
    7fd4:	460b      	mov	r3, r1
    7fd6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7fda:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7fde:	9b01      	ldr	r3, [sp, #4]
    7fe0:	3212      	adds	r2, #18
    7fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fe6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7fea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7ff2:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7ff6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7ffa:	4618      	mov	r0, r3
    7ffc:	b004      	add	sp, #16
    7ffe:	4770      	bx	lr

00008000 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8000:	b500      	push	{lr}
    8002:	b085      	sub	sp, #20
    8004:	9003      	str	r0, [sp, #12]
    8006:	9102      	str	r1, [sp, #8]
    8008:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    800a:	f003 ffbd 	bl	bf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    800e:	9b02      	ldr	r3, [sp, #8]
    8010:	7a59      	ldrb	r1, [r3, #9]
    8012:	9b02      	ldr	r3, [sp, #8]
    8014:	68db      	ldr	r3, [r3, #12]
    8016:	461a      	mov	r2, r3
    8018:	9803      	ldr	r0, [sp, #12]
    801a:	f7ff ff0d 	bl	7e38 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    801e:	f003 ffdf 	bl	bfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8022:	f003 fe17 	bl	bc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8026:	9901      	ldr	r1, [sp, #4]
    8028:	9803      	ldr	r0, [sp, #12]
    802a:	f7ff ff48 	bl	7ebe <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    802e:	f003 fe3d 	bl	bcac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8032:	f003 fb2d 	bl	b690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8036:	9b02      	ldr	r3, [sp, #8]
    8038:	7a1b      	ldrb	r3, [r3, #8]
    803a:	4619      	mov	r1, r3
    803c:	9803      	ldr	r0, [sp, #12]
    803e:	f7ff feda 	bl	7df6 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    8042:	f003 fb51 	bl	b6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    8046:	f003 fa7f 	bl	b548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    804a:	9b02      	ldr	r3, [sp, #8]
    804c:	6819      	ldr	r1, [r3, #0]
    804e:	9b02      	ldr	r3, [sp, #8]
    8050:	685b      	ldr	r3, [r3, #4]
    8052:	461a      	mov	r2, r3
    8054:	9803      	ldr	r0, [sp, #12]
    8056:	f7ff fe73 	bl	7d40 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    805a:	f003 faa1 	bl	b5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    805e:	bf00      	nop
    8060:	b005      	add	sp, #20
    8062:	f85d fb04 	ldr.w	pc, [sp], #4

00008066 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    8066:	b500      	push	{lr}
    8068:	b087      	sub	sp, #28
    806a:	9001      	str	r0, [sp, #4]
    806c:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    806e:	4a67      	ldr	r2, [pc, #412]	; (820c <Adc_Ip_Init+0x1a6>)
    8070:	9b01      	ldr	r3, [sp, #4]
    8072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8076:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    8078:	2300      	movs	r3, #0
    807a:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    807c:	2300      	movs	r3, #0
    807e:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8080:	9b00      	ldr	r3, [sp, #0]
    8082:	6819      	ldr	r1, [r3, #0]
    8084:	9b00      	ldr	r3, [sp, #0]
    8086:	689b      	ldr	r3, [r3, #8]
    8088:	461a      	mov	r2, r3
    808a:	9802      	ldr	r0, [sp, #8]
    808c:	f7ff fe58 	bl	7d40 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8090:	9b00      	ldr	r3, [sp, #0]
    8092:	7b1b      	ldrb	r3, [r3, #12]
    8094:	4619      	mov	r1, r3
    8096:	9802      	ldr	r0, [sp, #8]
    8098:	f7ff fead 	bl	7df6 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    809c:	9b00      	ldr	r3, [sp, #0]
    809e:	7b59      	ldrb	r1, [r3, #13]
    80a0:	9b00      	ldr	r3, [sp, #0]
    80a2:	691b      	ldr	r3, [r3, #16]
    80a4:	461a      	mov	r2, r3
    80a6:	9802      	ldr	r0, [sp, #8]
    80a8:	f7ff fec6 	bl	7e38 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    80ac:	9b00      	ldr	r3, [sp, #0]
    80ae:	695b      	ldr	r3, [r3, #20]
    80b0:	4619      	mov	r1, r3
    80b2:	9801      	ldr	r0, [sp, #4]
    80b4:	f000 f9ea 	bl	848c <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    80b8:	9b04      	ldr	r3, [sp, #16]
    80ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80be:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    80c0:	9b00      	ldr	r3, [sp, #0]
    80c2:	699b      	ldr	r3, [r3, #24]
    80c4:	019b      	lsls	r3, r3, #6
    80c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    80ca:	9a05      	ldr	r2, [sp, #20]
    80cc:	4313      	orrs	r3, r2
    80ce:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    80d0:	9b00      	ldr	r3, [sp, #0]
    80d2:	7f1b      	ldrb	r3, [r3, #28]
    80d4:	2b00      	cmp	r3, #0
    80d6:	d004      	beq.n	80e2 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    80d8:	9b05      	ldr	r3, [sp, #20]
    80da:	f043 0304 	orr.w	r3, r3, #4
    80de:	9305      	str	r3, [sp, #20]
    80e0:	e003      	b.n	80ea <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    80e2:	9b04      	ldr	r3, [sp, #16]
    80e4:	f043 0304 	orr.w	r3, r3, #4
    80e8:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    80ea:	9b04      	ldr	r3, [sp, #16]
    80ec:	f043 0303 	orr.w	r3, r3, #3
    80f0:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    80f2:	9b00      	ldr	r3, [sp, #0]
    80f4:	6a1b      	ldr	r3, [r3, #32]
    80f6:	f003 0303 	and.w	r3, r3, #3
    80fa:	9a05      	ldr	r2, [sp, #20]
    80fc:	4313      	orrs	r3, r2
    80fe:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8100:	9b04      	ldr	r3, [sp, #16]
    8102:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    8106:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    8108:	9b00      	ldr	r3, [sp, #0]
    810a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    810e:	2b00      	cmp	r3, #0
    8110:	d001      	beq.n	8116 <Adc_Ip_Init+0xb0>
    8112:	2320      	movs	r3, #32
    8114:	e000      	b.n	8118 <Adc_Ip_Init+0xb2>
    8116:	2300      	movs	r3, #0
    8118:	9a05      	ldr	r2, [sp, #20]
    811a:	4313      	orrs	r3, r2
    811c:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    811e:	9b00      	ldr	r3, [sp, #0]
    8120:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    8124:	2b00      	cmp	r3, #0
    8126:	d001      	beq.n	812c <Adc_Ip_Init+0xc6>
    8128:	2310      	movs	r3, #16
    812a:	e000      	b.n	812e <Adc_Ip_Init+0xc8>
    812c:	2300      	movs	r3, #0
    812e:	9a05      	ldr	r2, [sp, #20]
    8130:	4313      	orrs	r3, r2
    8132:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    8134:	9b00      	ldr	r3, [sp, #0]
    8136:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    813a:	2b00      	cmp	r3, #0
    813c:	d001      	beq.n	8142 <Adc_Ip_Init+0xdc>
    813e:	2308      	movs	r3, #8
    8140:	e000      	b.n	8144 <Adc_Ip_Init+0xde>
    8142:	2300      	movs	r3, #0
    8144:	9a05      	ldr	r2, [sp, #20]
    8146:	4313      	orrs	r3, r2
    8148:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    814a:	9b00      	ldr	r3, [sp, #0]
    814c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    814e:	461a      	mov	r2, r3
    8150:	9b02      	ldr	r3, [sp, #8]
    8152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    8156:	9b00      	ldr	r3, [sp, #0]
    8158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    815a:	461a      	mov	r2, r3
    815c:	9b02      	ldr	r3, [sp, #8]
    815e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    8162:	9a05      	ldr	r2, [sp, #20]
    8164:	9904      	ldr	r1, [sp, #16]
    8166:	9802      	ldr	r0, [sp, #8]
    8168:	f7ff fdd2 	bl	7d10 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    816c:	9b00      	ldr	r3, [sp, #0]
    816e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    8170:	9b00      	ldr	r3, [sp, #0]
    8172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8174:	461a      	mov	r2, r3
    8176:	9802      	ldr	r0, [sp, #8]
    8178:	f7ff fef6 	bl	7f68 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    817c:	9b00      	ldr	r3, [sp, #0]
    817e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8182:	4619      	mov	r1, r3
    8184:	9801      	ldr	r0, [sp, #4]
    8186:	f000 f955 	bl	8434 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    818a:	9b00      	ldr	r3, [sp, #0]
    818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    818e:	2b00      	cmp	r3, #0
    8190:	d01c      	beq.n	81cc <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8192:	2300      	movs	r3, #0
    8194:	f88d 300f 	strb.w	r3, [sp, #15]
    8198:	e011      	b.n	81be <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    819a:	9b00      	ldr	r3, [sp, #0]
    819c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    819e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81a2:	4613      	mov	r3, r2
    81a4:	005b      	lsls	r3, r3, #1
    81a6:	4413      	add	r3, r2
    81a8:	009b      	lsls	r3, r3, #2
    81aa:	440b      	add	r3, r1
    81ac:	4619      	mov	r1, r3
    81ae:	9801      	ldr	r0, [sp, #4]
    81b0:	f000 f9c2 	bl	8538 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    81b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81b8:	3301      	adds	r3, #1
    81ba:	f88d 300f 	strb.w	r3, [sp, #15]
    81be:	9b00      	ldr	r3, [sp, #0]
    81c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    81c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81c8:	429a      	cmp	r2, r3
    81ca:	d3e6      	bcc.n	819a <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    81cc:	9b00      	ldr	r3, [sp, #0]
    81ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    81d0:	490f      	ldr	r1, [pc, #60]	; (8210 <Adc_Ip_Init+0x1aa>)
    81d2:	9b01      	ldr	r3, [sp, #4]
    81d4:	204c      	movs	r0, #76	; 0x4c
    81d6:	fb00 f303 	mul.w	r3, r0, r3
    81da:	440b      	add	r3, r1
    81dc:	3308      	adds	r3, #8
    81de:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    81e0:	9b00      	ldr	r3, [sp, #0]
    81e2:	685a      	ldr	r2, [r3, #4]
    81e4:	490a      	ldr	r1, [pc, #40]	; (8210 <Adc_Ip_Init+0x1aa>)
    81e6:	9b01      	ldr	r3, [sp, #4]
    81e8:	204c      	movs	r0, #76	; 0x4c
    81ea:	fb00 f303 	mul.w	r3, r0, r3
    81ee:	440b      	add	r3, r1
    81f0:	3304      	adds	r3, #4
    81f2:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    81f4:	4a06      	ldr	r2, [pc, #24]	; (8210 <Adc_Ip_Init+0x1aa>)
    81f6:	9b01      	ldr	r3, [sp, #4]
    81f8:	214c      	movs	r1, #76	; 0x4c
    81fa:	fb01 f303 	mul.w	r3, r1, r3
    81fe:	4413      	add	r3, r2
    8200:	2201      	movs	r2, #1
    8202:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8204:	bf00      	nop
    8206:	b007      	add	sp, #28
    8208:	f85d fb04 	ldr.w	pc, [sp], #4
    820c:	00010914 	.word	0x00010914
    8210:	1fff8d18 	.word	0x1fff8d18

00008214 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    8214:	b500      	push	{lr}
    8216:	b0c3      	sub	sp, #268	; 0x10c
    8218:	ab42      	add	r3, sp, #264	; 0x108
    821a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    821e:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8220:	2300      	movs	r3, #0
    8222:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    8224:	2303      	movs	r3, #3
    8226:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    8228:	2300      	movs	r3, #0
    822a:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    822c:	230c      	movs	r3, #12
    822e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    8232:	2300      	movs	r3, #0
    8234:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    8238:	2300      	movs	r3, #0
    823a:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    823c:	2300      	movs	r3, #0
    823e:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8240:	2300      	movs	r3, #0
    8242:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    8244:	2300      	movs	r3, #0
    8246:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    824a:	2300      	movs	r3, #0
    824c:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    824e:	2300      	movs	r3, #0
    8250:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    8254:	2300      	movs	r3, #0
    8256:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    825a:	2300      	movs	r3, #0
    825c:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    8260:	2300      	movs	r3, #0
    8262:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    8266:	2300      	movs	r3, #0
    8268:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    826c:	2300      	movs	r3, #0
    826e:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    8272:	2304      	movs	r3, #4
    8274:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    8278:	2300      	movs	r3, #0
    827a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    827e:	2310      	movs	r3, #16
    8280:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    8284:	2300      	movs	r3, #0
    8286:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    828a:	e02b      	b.n	82e4 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    828c:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8290:	ab42      	add	r3, sp, #264	; 0x108
    8292:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8296:	4613      	mov	r3, r2
    8298:	005b      	lsls	r3, r3, #1
    829a:	4413      	add	r3, r2
    829c:	009b      	lsls	r3, r3, #2
    829e:	440b      	add	r3, r1
    82a0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82a4:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    82a6:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82aa:	ab42      	add	r3, sp, #264	; 0x108
    82ac:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    82b0:	4613      	mov	r3, r2
    82b2:	005b      	lsls	r3, r3, #1
    82b4:	4413      	add	r3, r2
    82b6:	009b      	lsls	r3, r3, #2
    82b8:	440b      	add	r3, r1
    82ba:	3304      	adds	r3, #4
    82bc:	221f      	movs	r2, #31
    82be:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    82c0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82c4:	ab42      	add	r3, sp, #264	; 0x108
    82c6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    82ca:	4613      	mov	r3, r2
    82cc:	005b      	lsls	r3, r3, #1
    82ce:	4413      	add	r3, r2
    82d0:	009b      	lsls	r3, r3, #2
    82d2:	440b      	add	r3, r1
    82d4:	3308      	adds	r3, #8
    82d6:	2200      	movs	r2, #0
    82d8:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    82da:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    82de:	3301      	adds	r3, #1
    82e0:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    82e4:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    82e8:	2b0f      	cmp	r3, #15
    82ea:	d9cf      	bls.n	828c <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    82ec:	ab02      	add	r3, sp, #8
    82ee:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    82f0:	2300      	movs	r3, #0
    82f2:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    82f4:	aa32      	add	r2, sp, #200	; 0xc8
    82f6:	ab42      	add	r3, sp, #264	; 0x108
    82f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    82fc:	4611      	mov	r1, r2
    82fe:	6818      	ldr	r0, [r3, #0]
    8300:	f7ff feb1 	bl	8066 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    8304:	4a07      	ldr	r2, [pc, #28]	; (8324 <Adc_Ip_DeInit+0x110>)
    8306:	ab42      	add	r3, sp, #264	; 0x108
    8308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    830c:	681b      	ldr	r3, [r3, #0]
    830e:	214c      	movs	r1, #76	; 0x4c
    8310:	fb01 f303 	mul.w	r3, r1, r3
    8314:	4413      	add	r3, r2
    8316:	2200      	movs	r2, #0
    8318:	701a      	strb	r2, [r3, #0]
}
    831a:	bf00      	nop
    831c:	b043      	add	sp, #268	; 0x10c
    831e:	f85d fb04 	ldr.w	pc, [sp], #4
    8322:	bf00      	nop
    8324:	1fff8d18 	.word	0x1fff8d18

00008328 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    8328:	b500      	push	{lr}
    832a:	b087      	sub	sp, #28
    832c:	9003      	str	r0, [sp, #12]
    832e:	460b      	mov	r3, r1
    8330:	9201      	str	r2, [sp, #4]
    8332:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8336:	4a0a      	ldr	r2, [pc, #40]	; (8360 <Adc_Ip_SetAveraging+0x38>)
    8338:	9b03      	ldr	r3, [sp, #12]
    833a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    833e:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8340:	f003 fd7e 	bl	be40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    8344:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8348:	9a01      	ldr	r2, [sp, #4]
    834a:	4619      	mov	r1, r3
    834c:	9805      	ldr	r0, [sp, #20]
    834e:	f7ff fd73 	bl	7e38 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    8352:	f003 fda1 	bl	be98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    8356:	bf00      	nop
    8358:	b007      	add	sp, #28
    835a:	f85d fb04 	ldr.w	pc, [sp], #4
    835e:	bf00      	nop
    8360:	00010914 	.word	0x00010914

00008364 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    8364:	b500      	push	{lr}
    8366:	b085      	sub	sp, #20
    8368:	9001      	str	r0, [sp, #4]
    836a:	460b      	mov	r3, r1
    836c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8370:	4a09      	ldr	r2, [pc, #36]	; (8398 <Adc_Ip_SetSampleTime+0x34>)
    8372:	9b01      	ldr	r3, [sp, #4]
    8374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8378:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    837a:	f003 f9db 	bl	b734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    837e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8382:	4619      	mov	r1, r3
    8384:	9803      	ldr	r0, [sp, #12]
    8386:	f7ff fd36 	bl	7df6 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    838a:	f003 f9ff 	bl	b78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    838e:	bf00      	nop
    8390:	b005      	add	sp, #20
    8392:	f85d fb04 	ldr.w	pc, [sp], #4
    8396:	bf00      	nop
    8398:	00010914 	.word	0x00010914

0000839c <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    839c:	b500      	push	{lr}
    839e:	b085      	sub	sp, #20
    83a0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83a2:	4a0a      	ldr	r2, [pc, #40]	; (83cc <Adc_Ip_EnableDma+0x30>)
    83a4:	9b01      	ldr	r3, [sp, #4]
    83a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83aa:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    83ac:	f003 fcf6 	bl	bd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    83b0:	9b03      	ldr	r3, [sp, #12]
    83b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    83b6:	f043 0204 	orr.w	r2, r3, #4
    83ba:	9b03      	ldr	r3, [sp, #12]
    83bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    83c0:	f003 fd18 	bl	bdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    83c4:	bf00      	nop
    83c6:	b005      	add	sp, #20
    83c8:	f85d fb04 	ldr.w	pc, [sp], #4
    83cc:	00010914 	.word	0x00010914

000083d0 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    83d0:	b500      	push	{lr}
    83d2:	b085      	sub	sp, #20
    83d4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83d6:	4a0a      	ldr	r2, [pc, #40]	; (8400 <Adc_Ip_DisableDma+0x30>)
    83d8:	9b01      	ldr	r3, [sp, #4]
    83da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83de:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    83e0:	f003 fb94 	bl	bb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    83e4:	9b03      	ldr	r3, [sp, #12]
    83e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    83ea:	f023 0204 	bic.w	r2, r3, #4
    83ee:	9b03      	ldr	r3, [sp, #12]
    83f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    83f4:	f003 fbb6 	bl	bb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    83f8:	bf00      	nop
    83fa:	b005      	add	sp, #20
    83fc:	f85d fb04 	ldr.w	pc, [sp], #4
    8400:	00010914 	.word	0x00010914

00008404 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    8404:	b500      	push	{lr}
    8406:	b085      	sub	sp, #20
    8408:	9001      	str	r0, [sp, #4]
    840a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    840c:	4a08      	ldr	r2, [pc, #32]	; (8430 <Adc_Ip_SetTriggerMode+0x2c>)
    840e:	9b01      	ldr	r3, [sp, #4]
    8410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8414:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    8416:	f003 fbcb 	bl	bbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    841a:	9900      	ldr	r1, [sp, #0]
    841c:	9803      	ldr	r0, [sp, #12]
    841e:	f7ff fd4e 	bl	7ebe <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    8422:	f003 fbf1 	bl	bc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    8426:	bf00      	nop
    8428:	b005      	add	sp, #20
    842a:	f85d fb04 	ldr.w	pc, [sp], #4
    842e:	bf00      	nop
    8430:	00010914 	.word	0x00010914

00008434 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    8434:	b500      	push	{lr}
    8436:	b085      	sub	sp, #20
    8438:	9001      	str	r0, [sp, #4]
    843a:	460b      	mov	r3, r1
    843c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8440:	4a11      	ldr	r2, [pc, #68]	; (8488 <Adc_Ip_SetContinuousMode+0x54>)
    8442:	9b01      	ldr	r3, [sp, #4]
    8444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8448:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    844a:	f003 fdef 	bl	c02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    844e:	9b03      	ldr	r3, [sp, #12]
    8450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8454:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    8456:	9b02      	ldr	r3, [sp, #8]
    8458:	f023 0308 	bic.w	r3, r3, #8
    845c:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    845e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8462:	2b00      	cmp	r3, #0
    8464:	d001      	beq.n	846a <Adc_Ip_SetContinuousMode+0x36>
    8466:	2308      	movs	r3, #8
    8468:	e000      	b.n	846c <Adc_Ip_SetContinuousMode+0x38>
    846a:	2300      	movs	r3, #0
    846c:	9a02      	ldr	r2, [sp, #8]
    846e:	4313      	orrs	r3, r2
    8470:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    8472:	9b03      	ldr	r3, [sp, #12]
    8474:	9a02      	ldr	r2, [sp, #8]
    8476:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    847a:	f003 fe03 	bl	c084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    847e:	bf00      	nop
    8480:	b005      	add	sp, #20
    8482:	f85d fb04 	ldr.w	pc, [sp], #4
    8486:	bf00      	nop
    8488:	00010914 	.word	0x00010914

0000848c <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    848c:	b500      	push	{lr}
    848e:	b085      	sub	sp, #20
    8490:	9001      	str	r0, [sp, #4]
    8492:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8494:	4a0e      	ldr	r2, [pc, #56]	; (84d0 <Adc_Ip_SetResolution+0x44>)
    8496:	9b01      	ldr	r3, [sp, #4]
    8498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    849c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    849e:	f002 fe15 	bl	b0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    84a2:	9b03      	ldr	r3, [sp, #12]
    84a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84a6:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    84a8:	9b02      	ldr	r3, [sp, #8]
    84aa:	f023 030c 	bic.w	r3, r3, #12
    84ae:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    84b0:	9b00      	ldr	r3, [sp, #0]
    84b2:	009b      	lsls	r3, r3, #2
    84b4:	f003 030c 	and.w	r3, r3, #12
    84b8:	9a02      	ldr	r2, [sp, #8]
    84ba:	4313      	orrs	r3, r2
    84bc:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    84be:	9b03      	ldr	r3, [sp, #12]
    84c0:	9a02      	ldr	r2, [sp, #8]
    84c2:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    84c4:	f002 fe2e 	bl	b124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    84c8:	bf00      	nop
    84ca:	b005      	add	sp, #20
    84cc:	f85d fb04 	ldr.w	pc, [sp], #4
    84d0:	00010914 	.word	0x00010914

000084d4 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    84d4:	b500      	push	{lr}
    84d6:	b085      	sub	sp, #20
    84d8:	9001      	str	r0, [sp, #4]
    84da:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84dc:	4a15      	ldr	r2, [pc, #84]	; (8534 <Adc_Ip_SetClockMode+0x60>)
    84de:	9b01      	ldr	r3, [sp, #4]
    84e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84e4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    84e6:	f002 ff8b 	bl	b400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    84ea:	9b00      	ldr	r3, [sp, #0]
    84ec:	6819      	ldr	r1, [r3, #0]
    84ee:	9b00      	ldr	r3, [sp, #0]
    84f0:	685b      	ldr	r3, [r3, #4]
    84f2:	461a      	mov	r2, r3
    84f4:	9803      	ldr	r0, [sp, #12]
    84f6:	f7ff fc23 	bl	7d40 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    84fa:	f002 ffad 	bl	b458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    84fe:	f003 f875 	bl	b5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8502:	9b00      	ldr	r3, [sp, #0]
    8504:	7a1b      	ldrb	r3, [r3, #8]
    8506:	4619      	mov	r1, r3
    8508:	9803      	ldr	r0, [sp, #12]
    850a:	f7ff fc74 	bl	7df6 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    850e:	f003 f899 	bl	b644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    8512:	f003 fce7 	bl	bee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8516:	9b00      	ldr	r3, [sp, #0]
    8518:	7a59      	ldrb	r1, [r3, #9]
    851a:	9b00      	ldr	r3, [sp, #0]
    851c:	68db      	ldr	r3, [r3, #12]
    851e:	461a      	mov	r2, r3
    8520:	9803      	ldr	r0, [sp, #12]
    8522:	f7ff fc89 	bl	7e38 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    8526:	f003 fd09 	bl	bf3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    852a:	bf00      	nop
    852c:	b005      	add	sp, #20
    852e:	f85d fb04 	ldr.w	pc, [sp], #4
    8532:	bf00      	nop
    8534:	00010914 	.word	0x00010914

00008538 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    8538:	b510      	push	{r4, lr}
    853a:	b084      	sub	sp, #16
    853c:	9001      	str	r0, [sp, #4]
    853e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8540:	4a13      	ldr	r2, [pc, #76]	; (8590 <Adc_Ip_ConfigChannel+0x58>)
    8542:	9b01      	ldr	r3, [sp, #4]
    8544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8548:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    854a:	9b00      	ldr	r3, [sp, #0]
    854c:	685b      	ldr	r3, [r3, #4]
    854e:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    8550:	f003 fa8a 	bl	ba68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    8554:	9b00      	ldr	r3, [sp, #0]
    8556:	7819      	ldrb	r1, [r3, #0]
    8558:	9b00      	ldr	r3, [sp, #0]
    855a:	7a1b      	ldrb	r3, [r3, #8]
    855c:	9a02      	ldr	r2, [sp, #8]
    855e:	9803      	ldr	r0, [sp, #12]
    8560:	f7ff fcd5 	bl	7f0e <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    8564:	f003 faac 	bl	bac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    8568:	9b00      	ldr	r3, [sp, #0]
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	461c      	mov	r4, r3
    856e:	9b00      	ldr	r3, [sp, #0]
    8570:	6859      	ldr	r1, [r3, #4]
    8572:	4808      	ldr	r0, [pc, #32]	; (8594 <Adc_Ip_ConfigChannel+0x5c>)
    8574:	9a01      	ldr	r2, [sp, #4]
    8576:	4613      	mov	r3, r2
    8578:	00db      	lsls	r3, r3, #3
    857a:	4413      	add	r3, r2
    857c:	005b      	lsls	r3, r3, #1
    857e:	4413      	add	r3, r2
    8580:	4423      	add	r3, r4
    8582:	3302      	adds	r3, #2
    8584:	009b      	lsls	r3, r3, #2
    8586:	4403      	add	r3, r0
    8588:	6059      	str	r1, [r3, #4]
}
    858a:	bf00      	nop
    858c:	b004      	add	sp, #16
    858e:	bd10      	pop	{r4, pc}
    8590:	00010914 	.word	0x00010914
    8594:	1fff8d18 	.word	0x1fff8d18

00008598 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    8598:	b500      	push	{lr}
    859a:	b089      	sub	sp, #36	; 0x24
    859c:	9001      	str	r0, [sp, #4]
    859e:	460b      	mov	r3, r1
    85a0:	f88d 3003 	strb.w	r3, [sp, #3]
    85a4:	4613      	mov	r3, r2
    85a6:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85aa:	4a24      	ldr	r2, [pc, #144]	; (863c <Adc_Ip_SetDisabledChannel+0xa4>)
    85ac:	9b01      	ldr	r3, [sp, #4]
    85ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85b2:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    85b4:	2300      	movs	r3, #0
    85b6:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    85b8:	2100      	movs	r1, #0
    85ba:	4821      	ldr	r0, [pc, #132]	; (8640 <Adc_Ip_SetDisabledChannel+0xa8>)
    85bc:	f7f9 faea 	bl	1b94 <OsIf_MicrosToTicks>
    85c0:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    85c2:	2000      	movs	r0, #0
    85c4:	f7f9 fa9a 	bl	1afc <OsIf_GetCounter>
    85c8:	4603      	mov	r3, r0
    85ca:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    85cc:	2300      	movs	r3, #0
    85ce:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    85d0:	f003 f902 	bl	b7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    85d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85d8:	9b05      	ldr	r3, [sp, #20]
    85da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    85de:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85e2:	f043 011f 	orr.w	r1, r3, #31
    85e6:	9b05      	ldr	r3, [sp, #20]
    85e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    85ec:	f003 f920 	bl	b830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    85f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    85f4:	2b00      	cmp	r3, #0
    85f6:	d01c      	beq.n	8632 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    85f8:	e008      	b.n	860c <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    85fa:	ab03      	add	r3, sp, #12
    85fc:	2100      	movs	r1, #0
    85fe:	4618      	mov	r0, r3
    8600:	f7f9 fa95 	bl	1b2e <OsIf_GetElapsed>
    8604:	4602      	mov	r2, r0
    8606:	9b06      	ldr	r3, [sp, #24]
    8608:	4413      	add	r3, r2
    860a:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    860c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8610:	9b05      	ldr	r3, [sp, #20]
    8612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8616:	f003 031f 	and.w	r3, r3, #31
    861a:	2b1f      	cmp	r3, #31
    861c:	d003      	beq.n	8626 <Adc_Ip_SetDisabledChannel+0x8e>
    861e:	9a06      	ldr	r2, [sp, #24]
    8620:	9b04      	ldr	r3, [sp, #16]
    8622:	429a      	cmp	r2, r3
    8624:	d3e9      	bcc.n	85fa <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    8626:	9a06      	ldr	r2, [sp, #24]
    8628:	9b04      	ldr	r3, [sp, #16]
    862a:	429a      	cmp	r2, r3
    862c:	d301      	bcc.n	8632 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    862e:	2302      	movs	r3, #2
    8630:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    8632:	9b07      	ldr	r3, [sp, #28]
}
    8634:	4618      	mov	r0, r3
    8636:	b009      	add	sp, #36	; 0x24
    8638:	f85d fb04 	ldr.w	pc, [sp], #4
    863c:	00010914 	.word	0x00010914
    8640:	000186a0 	.word	0x000186a0

00008644 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    8644:	b500      	push	{lr}
    8646:	b087      	sub	sp, #28
    8648:	9003      	str	r0, [sp, #12]
    864a:	9102      	str	r1, [sp, #8]
    864c:	4613      	mov	r3, r2
    864e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8652:	4a0a      	ldr	r2, [pc, #40]	; (867c <Adc_Ip_StartConversion+0x38>)
    8654:	9b03      	ldr	r3, [sp, #12]
    8656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    865a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    865c:	f003 f90e 	bl	b87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8664:	9a02      	ldr	r2, [sp, #8]
    8666:	2100      	movs	r1, #0
    8668:	9805      	ldr	r0, [sp, #20]
    866a:	f7ff fc50 	bl	7f0e <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    866e:	f003 f931 	bl	b8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    8672:	bf00      	nop
    8674:	b007      	add	sp, #28
    8676:	f85d fb04 	ldr.w	pc, [sp], #4
    867a:	bf00      	nop
    867c:	00010914 	.word	0x00010914

00008680 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    8680:	b084      	sub	sp, #16
    8682:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8684:	4a0b      	ldr	r2, [pc, #44]	; (86b4 <Adc_Ip_GetConvActiveFlag+0x34>)
    8686:	9b01      	ldr	r3, [sp, #4]
    8688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868c:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    868e:	9b03      	ldr	r3, [sp, #12]
    8690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8694:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    8696:	9b02      	ldr	r3, [sp, #8]
    8698:	09db      	lsrs	r3, r3, #7
    869a:	f003 0301 	and.w	r3, r3, #1
    869e:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    86a0:	9b02      	ldr	r3, [sp, #8]
    86a2:	2b00      	cmp	r3, #0
    86a4:	bf14      	ite	ne
    86a6:	2301      	movne	r3, #1
    86a8:	2300      	moveq	r3, #0
    86aa:	b2db      	uxtb	r3, r3
}
    86ac:	4618      	mov	r0, r3
    86ae:	b004      	add	sp, #16
    86b0:	4770      	bx	lr
    86b2:	bf00      	nop
    86b4:	00010914 	.word	0x00010914

000086b8 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    86b8:	b500      	push	{lr}
    86ba:	b085      	sub	sp, #20
    86bc:	9001      	str	r0, [sp, #4]
    86be:	460b      	mov	r3, r1
    86c0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86c4:	4a08      	ldr	r2, [pc, #32]	; (86e8 <Adc_Ip_GetChanInterrupt+0x30>)
    86c6:	9b01      	ldr	r3, [sp, #4]
    86c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    86d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86d4:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    86d6:	9803      	ldr	r0, [sp, #12]
    86d8:	f7ff fc5e 	bl	7f98 <Adc_HwAcc_GetAIEN>
    86dc:	4603      	mov	r3, r0
}
    86de:	4618      	mov	r0, r3
    86e0:	b005      	add	sp, #20
    86e2:	f85d fb04 	ldr.w	pc, [sp], #4
    86e6:	bf00      	nop
    86e8:	00010914 	.word	0x00010914

000086ec <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    86ec:	b500      	push	{lr}
    86ee:	b085      	sub	sp, #20
    86f0:	9001      	str	r0, [sp, #4]
    86f2:	460b      	mov	r3, r1
    86f4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86f8:	4a08      	ldr	r2, [pc, #32]	; (871c <Adc_Ip_GetConvCompleteFlag+0x30>)
    86fa:	9b01      	ldr	r3, [sp, #4]
    86fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8700:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8708:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    870a:	9803      	ldr	r0, [sp, #12]
    870c:	f7ff fc52 	bl	7fb4 <Adc_HwAcc_GetCOCO>
    8710:	4603      	mov	r3, r0
}
    8712:	4618      	mov	r0, r3
    8714:	b005      	add	sp, #20
    8716:	f85d fb04 	ldr.w	pc, [sp], #4
    871a:	bf00      	nop
    871c:	00010914 	.word	0x00010914

00008720 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8720:	b500      	push	{lr}
    8722:	b085      	sub	sp, #20
    8724:	9001      	str	r0, [sp, #4]
    8726:	460b      	mov	r3, r1
    8728:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    872c:	4a07      	ldr	r2, [pc, #28]	; (874c <Adc_Ip_GetConvData+0x2c>)
    872e:	9b01      	ldr	r3, [sp, #4]
    8730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8734:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    8736:	f89d 3003 	ldrb.w	r3, [sp, #3]
    873a:	4619      	mov	r1, r3
    873c:	9803      	ldr	r0, [sp, #12]
    873e:	f7ff fc47 	bl	7fd0 <Adc_HwAcc_GetData>
    8742:	4603      	mov	r3, r0
}
    8744:	4618      	mov	r0, r3
    8746:	b005      	add	sp, #20
    8748:	f85d fb04 	ldr.w	pc, [sp], #4
    874c:	00010914 	.word	0x00010914

00008750 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8750:	b500      	push	{lr}
    8752:	b093      	sub	sp, #76	; 0x4c
    8754:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8756:	4a59      	ldr	r2, [pc, #356]	; (88bc <Adc_Ip_DoCalibration+0x16c>)
    8758:	9b01      	ldr	r3, [sp, #4]
    875a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    875e:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8760:	2300      	movs	r3, #0
    8762:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8764:	2100      	movs	r1, #0
    8766:	4856      	ldr	r0, [pc, #344]	; (88c0 <Adc_Ip_DoCalibration+0x170>)
    8768:	f7f9 fa14 	bl	1b94 <OsIf_MicrosToTicks>
    876c:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    876e:	2000      	movs	r0, #0
    8770:	f7f9 f9c4 	bl	1afc <OsIf_GetCounter>
    8774:	4603      	mov	r3, r0
    8776:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    8778:	2300      	movs	r3, #0
    877a:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    877c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    877e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8782:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    8784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8786:	089b      	lsrs	r3, r3, #2
    8788:	f003 0301 	and.w	r3, r3, #1
    878c:	2b00      	cmp	r3, #0
    878e:	bf14      	ite	ne
    8790:	2301      	movne	r3, #1
    8792:	2300      	moveq	r3, #0
    8794:	b2db      	uxtb	r3, r3
    8796:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    879a:	980d      	ldr	r0, [sp, #52]	; 0x34
    879c:	f7ff fb71 	bl	7e82 <Adc_HwAcc_GetAverageSelect>
    87a0:	4603      	mov	r3, r0
    87a2:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    87a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    87a8:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    87aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87ac:	b2db      	uxtb	r3, r3
    87ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    87b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    87b8:	4618      	mov	r0, r3
    87ba:	f7ff fb99 	bl	7ef0 <Adc_HwAcc_GetTriggerMode>
    87be:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    87c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    87c4:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    87c6:	980d      	ldr	r0, [sp, #52]	; 0x34
    87c8:	f7ff fad8 	bl	7d7c <Adc_HwAcc_GetClockDivide>
    87cc:	4603      	mov	r3, r0
    87ce:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    87d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    87d2:	f7ff faf2 	bl	7dba <Adc_HwAcc_GetInputClock>
    87d6:	4603      	mov	r3, r0
    87d8:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    87da:	2301      	movs	r3, #1
    87dc:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    87e0:	2303      	movs	r3, #3
    87e2:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    87e4:	230c      	movs	r3, #12
    87e6:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    87ea:	4a36      	ldr	r2, [pc, #216]	; (88c4 <Adc_Ip_DoCalibration+0x174>)
    87ec:	9b01      	ldr	r3, [sp, #4]
    87ee:	214c      	movs	r1, #76	; 0x4c
    87f0:	fb01 f303 	mul.w	r3, r1, r3
    87f4:	4413      	add	r3, r2
    87f6:	3304      	adds	r3, #4
    87f8:	681b      	ldr	r3, [r3, #0]
    87fa:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    87fc:	9b08      	ldr	r3, [sp, #32]
    87fe:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8800:	ab03      	add	r3, sp, #12
    8802:	2200      	movs	r2, #0
    8804:	4619      	mov	r1, r3
    8806:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8808:	f7ff fbfa 	bl	8000 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    880c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    880e:	2200      	movs	r2, #0
    8810:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8816:	2200      	movs	r2, #0
    8818:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    881c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    881e:	2200      	movs	r2, #0
    8820:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8826:	2200      	movs	r2, #0
    8828:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    882c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    882e:	2200      	movs	r2, #0
    8830:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8836:	2200      	movs	r2, #0
    8838:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    883c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    883e:	2200      	movs	r2, #0
    8840:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8844:	f003 fba0 	bl	bf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    884a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    884e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8856:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    885a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    885e:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8864:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8868:	f003 fbba 	bl	bfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    886c:	e008      	b.n	8880 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    886e:	ab0b      	add	r3, sp, #44	; 0x2c
    8870:	2100      	movs	r1, #0
    8872:	4618      	mov	r0, r3
    8874:	f7f9 f95b 	bl	1b2e <OsIf_GetElapsed>
    8878:	4602      	mov	r2, r0
    887a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    887c:	4413      	add	r3, r2
    887e:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8886:	f003 0380 	and.w	r3, r3, #128	; 0x80
    888a:	2b00      	cmp	r3, #0
    888c:	d003      	beq.n	8896 <Adc_Ip_DoCalibration+0x146>
    888e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8892:	429a      	cmp	r2, r3
    8894:	d3eb      	bcc.n	886e <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8896:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    889a:	429a      	cmp	r2, r3
    889c:	d301      	bcc.n	88a2 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    889e:	2302      	movs	r3, #2
    88a0:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    88a2:	ab07      	add	r3, sp, #28
    88a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    88a6:	4619      	mov	r1, r3
    88a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    88aa:	f7ff fba9 	bl	8000 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    88ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    88b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    88b4:	4618      	mov	r0, r3
    88b6:	b013      	add	sp, #76	; 0x4c
    88b8:	f85d fb04 	ldr.w	pc, [sp], #4
    88bc:	00010914 	.word	0x00010914
    88c0:	000186a0 	.word	0x000186a0
    88c4:	1fff8d18 	.word	0x1fff8d18

000088c8 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    88c8:	b500      	push	{lr}
    88ca:	b089      	sub	sp, #36	; 0x24
    88cc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88ce:	4a1e      	ldr	r2, [pc, #120]	; (8948 <Adc_Ip_ClearLatchedTriggers+0x80>)
    88d0:	9b01      	ldr	r3, [sp, #4]
    88d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d6:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    88d8:	2300      	movs	r3, #0
    88da:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    88dc:	2100      	movs	r1, #0
    88de:	481b      	ldr	r0, [pc, #108]	; (894c <Adc_Ip_ClearLatchedTriggers+0x84>)
    88e0:	f7f9 f958 	bl	1b94 <OsIf_MicrosToTicks>
    88e4:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    88e6:	2000      	movs	r0, #0
    88e8:	f7f9 f908 	bl	1afc <OsIf_GetCounter>
    88ec:	4603      	mov	r3, r0
    88ee:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    88f0:	2300      	movs	r3, #0
    88f2:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    88f4:	f002 fdd6 	bl	b4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    88f8:	9b05      	ldr	r3, [sp, #20]
    88fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8900:	9b05      	ldr	r3, [sp, #20]
    8902:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8904:	f002 fdfa 	bl	b4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8908:	e008      	b.n	891c <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    890a:	ab03      	add	r3, sp, #12
    890c:	2100      	movs	r1, #0
    890e:	4618      	mov	r0, r3
    8910:	f7f9 f90d 	bl	1b2e <OsIf_GetElapsed>
    8914:	4602      	mov	r2, r0
    8916:	9b06      	ldr	r3, [sp, #24]
    8918:	4413      	add	r3, r2
    891a:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    891c:	9b05      	ldr	r3, [sp, #20]
    891e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8922:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8926:	2b00      	cmp	r3, #0
    8928:	d003      	beq.n	8932 <Adc_Ip_ClearLatchedTriggers+0x6a>
    892a:	9a06      	ldr	r2, [sp, #24]
    892c:	9b04      	ldr	r3, [sp, #16]
    892e:	429a      	cmp	r2, r3
    8930:	d3eb      	bcc.n	890a <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8932:	9a06      	ldr	r2, [sp, #24]
    8934:	9b04      	ldr	r3, [sp, #16]
    8936:	429a      	cmp	r2, r3
    8938:	d301      	bcc.n	893e <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    893a:	2302      	movs	r3, #2
    893c:	9307      	str	r3, [sp, #28]
    }

    return Status;
    893e:	9b07      	ldr	r3, [sp, #28]
}
    8940:	4618      	mov	r0, r3
    8942:	b009      	add	sp, #36	; 0x24
    8944:	f85d fb04 	ldr.w	pc, [sp], #4
    8948:	00010914 	.word	0x00010914
    894c:	000186a0 	.word	0x000186a0

00008950 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8950:	b500      	push	{lr}
    8952:	b085      	sub	sp, #20
    8954:	9001      	str	r0, [sp, #4]
    8956:	460b      	mov	r3, r1
    8958:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    895c:	4a0c      	ldr	r2, [pc, #48]	; (8990 <Adc_Ip_EnableChannelNotification+0x40>)
    895e:	9b01      	ldr	r3, [sp, #4]
    8960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8964:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8966:	f002 ffdb 	bl	b920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    896a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    896e:	9b03      	ldr	r3, [sp, #12]
    8970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8974:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8978:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    897c:	9b03      	ldr	r3, [sp, #12]
    897e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    8982:	f002 fff9 	bl	b978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    8986:	bf00      	nop
    8988:	b005      	add	sp, #20
    898a:	f85d fb04 	ldr.w	pc, [sp], #4
    898e:	bf00      	nop
    8990:	00010914 	.word	0x00010914

00008994 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    8994:	b500      	push	{lr}
    8996:	b085      	sub	sp, #20
    8998:	9001      	str	r0, [sp, #4]
    899a:	460b      	mov	r3, r1
    899c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89a0:	4a0c      	ldr	r2, [pc, #48]	; (89d4 <Adc_Ip_DisableChannelNotification+0x40>)
    89a2:	9b01      	ldr	r3, [sp, #4]
    89a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    89aa:	f003 f80b 	bl	b9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    89ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89b2:	9b03      	ldr	r3, [sp, #12]
    89b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89bc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    89c0:	9b03      	ldr	r3, [sp, #12]
    89c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    89c6:	f003 f829 	bl	ba1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    89ca:	bf00      	nop
    89cc:	b005      	add	sp, #20
    89ce:	f85d fb04 	ldr.w	pc, [sp], #4
    89d2:	bf00      	nop
    89d4:	00010914 	.word	0x00010914

000089d8 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    89d8:	b500      	push	{lr}
    89da:	b085      	sub	sp, #20
    89dc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89de:	4a0a      	ldr	r2, [pc, #40]	; (8a08 <Adc_Ip_ClearTrigErrReg+0x30>)
    89e0:	9b01      	ldr	r3, [sp, #4]
    89e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    89e8:	f003 f986 	bl	bcf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    89ec:	9b03      	ldr	r3, [sp, #12]
    89ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    89f2:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    89f6:	9b03      	ldr	r3, [sp, #12]
    89f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    89fc:	f003 f9a8 	bl	bd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8a00:	bf00      	nop
    8a02:	b005      	add	sp, #20
    8a04:	f85d fb04 	ldr.w	pc, [sp], #4
    8a08:	00010914 	.word	0x00010914

00008a0c <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8a0c:	b084      	sub	sp, #16
    8a0e:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a10:	4a06      	ldr	r2, [pc, #24]	; (8a2c <Adc_Ip_GetTrigErrReg+0x20>)
    8a12:	9b01      	ldr	r3, [sp, #4]
    8a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a18:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8a1a:	9b03      	ldr	r3, [sp, #12]
    8a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a20:	0e1b      	lsrs	r3, r3, #24
    8a22:	f003 030f 	and.w	r3, r3, #15
}
    8a26:	4618      	mov	r0, r3
    8a28:	b004      	add	sp, #16
    8a2a:	4770      	bx	lr
    8a2c:	00010914 	.word	0x00010914

00008a30 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8a30:	b082      	sub	sp, #8
    8a32:	9001      	str	r0, [sp, #4]
    8a34:	460b      	mov	r3, r1
    8a36:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8a3a:	4a06      	ldr	r2, [pc, #24]	; (8a54 <Adc_Ip_GetDataAddress+0x24>)
    8a3c:	9b01      	ldr	r3, [sp, #4]
    8a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8a42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a46:	3312      	adds	r3, #18
    8a48:	009b      	lsls	r3, r3, #2
    8a4a:	4413      	add	r3, r2
}
    8a4c:	4618      	mov	r0, r3
    8a4e:	b002      	add	sp, #8
    8a50:	4770      	bx	lr
    8a52:	bf00      	nop
    8a54:	00010914 	.word	0x00010914

00008a58 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8a58:	b088      	sub	sp, #32
    8a5a:	9003      	str	r0, [sp, #12]
    8a5c:	9102      	str	r1, [sp, #8]
    8a5e:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a60:	4a25      	ldr	r2, [pc, #148]	; (8af8 <Adc_Ip_GetChanData+0xa0>)
    8a62:	9b03      	ldr	r3, [sp, #12]
    8a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a68:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8a6a:	2300      	movs	r3, #0
    8a6c:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8a6e:	2300      	movs	r3, #0
    8a70:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8a74:	2300      	movs	r3, #0
    8a76:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a7a:	2300      	movs	r3, #0
    8a7c:	f88d 3019 	strb.w	r3, [sp, #25]
    8a80:	e019      	b.n	8ab6 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8a82:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8a86:	481d      	ldr	r0, [pc, #116]	; (8afc <Adc_Ip_GetChanData+0xa4>)
    8a88:	9a03      	ldr	r2, [sp, #12]
    8a8a:	4613      	mov	r3, r2
    8a8c:	00db      	lsls	r3, r3, #3
    8a8e:	4413      	add	r3, r2
    8a90:	005b      	lsls	r3, r3, #1
    8a92:	4413      	add	r3, r2
    8a94:	440b      	add	r3, r1
    8a96:	3302      	adds	r3, #2
    8a98:	009b      	lsls	r3, r3, #2
    8a9a:	4403      	add	r3, r0
    8a9c:	685b      	ldr	r3, [r3, #4]
    8a9e:	9a02      	ldr	r2, [sp, #8]
    8aa0:	429a      	cmp	r2, r3
    8aa2:	d103      	bne.n	8aac <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8aa4:	2301      	movs	r3, #1
    8aa6:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8aaa:	e008      	b.n	8abe <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8aac:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8ab0:	3301      	adds	r3, #1
    8ab2:	f88d 3019 	strb.w	r3, [sp, #25]
    8ab6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8aba:	2b0f      	cmp	r3, #15
    8abc:	d9e1      	bls.n	8a82 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8abe:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d00e      	beq.n	8ae4 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8ac6:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8aca:	9b05      	ldr	r3, [sp, #20]
    8acc:	3212      	adds	r2, #18
    8ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ad2:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8ad6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8ade:	f8ad 301a 	strh.w	r3, [sp, #26]
    8ae2:	e001      	b.n	8ae8 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8ae4:	2301      	movs	r3, #1
    8ae6:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8ae8:	9b01      	ldr	r3, [sp, #4]
    8aea:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8aee:	801a      	strh	r2, [r3, #0]

    return Status;
    8af0:	9b07      	ldr	r3, [sp, #28]
}
    8af2:	4618      	mov	r0, r3
    8af4:	b008      	add	sp, #32
    8af6:	4770      	bx	lr
    8af8:	00010914 	.word	0x00010914
    8afc:	1fff8d18 	.word	0x1fff8d18

00008b00 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8b00:	b500      	push	{lr}
    8b02:	b085      	sub	sp, #20
    8b04:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8b06:	2300      	movs	r3, #0
    8b08:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8b0c:	2300      	movs	r3, #0
    8b0e:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8b12:	4a32      	ldr	r2, [pc, #200]	; (8bdc <Adc_Ip_IRQHandler+0xdc>)
    8b14:	9b01      	ldr	r3, [sp, #4]
    8b16:	214c      	movs	r1, #76	; 0x4c
    8b18:	fb01 f303 	mul.w	r3, r1, r3
    8b1c:	4413      	add	r3, r2
    8b1e:	781b      	ldrb	r3, [r3, #0]
    8b20:	2b00      	cmp	r3, #0
    8b22:	d040      	beq.n	8ba6 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8b24:	4a2d      	ldr	r2, [pc, #180]	; (8bdc <Adc_Ip_IRQHandler+0xdc>)
    8b26:	9b01      	ldr	r3, [sp, #4]
    8b28:	214c      	movs	r1, #76	; 0x4c
    8b2a:	fb01 f303 	mul.w	r3, r1, r3
    8b2e:	4413      	add	r3, r2
    8b30:	3308      	adds	r3, #8
    8b32:	681b      	ldr	r3, [r3, #0]
    8b34:	2b00      	cmp	r3, #0
    8b36:	d04d      	beq.n	8bd4 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b38:	2300      	movs	r3, #0
    8b3a:	f88d 300f 	strb.w	r3, [sp, #15]
    8b3e:	e02d      	b.n	8b9c <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b40:	4a27      	ldr	r2, [pc, #156]	; (8be0 <Adc_Ip_IRQHandler+0xe0>)
    8b42:	9b01      	ldr	r3, [sp, #4]
    8b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b50:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8b52:	9802      	ldr	r0, [sp, #8]
    8b54:	f7ff fa20 	bl	7f98 <Adc_HwAcc_GetAIEN>
    8b58:	4603      	mov	r3, r0
    8b5a:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8b5e:	9802      	ldr	r0, [sp, #8]
    8b60:	f7ff fa28 	bl	7fb4 <Adc_HwAcc_GetCOCO>
    8b64:	4603      	mov	r3, r0
    8b66:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8b6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8b6e:	2b00      	cmp	r3, #0
    8b70:	d00f      	beq.n	8b92 <Adc_Ip_IRQHandler+0x92>
    8b72:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d00b      	beq.n	8b92 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8b7a:	4a18      	ldr	r2, [pc, #96]	; (8bdc <Adc_Ip_IRQHandler+0xdc>)
    8b7c:	9b01      	ldr	r3, [sp, #4]
    8b7e:	214c      	movs	r1, #76	; 0x4c
    8b80:	fb01 f303 	mul.w	r3, r1, r3
    8b84:	4413      	add	r3, r2
    8b86:	3308      	adds	r3, #8
    8b88:	681b      	ldr	r3, [r3, #0]
    8b8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b8e:	4610      	mov	r0, r2
    8b90:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b96:	3301      	adds	r3, #1
    8b98:	f88d 300f 	strb.w	r3, [sp, #15]
    8b9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ba0:	2b0f      	cmp	r3, #15
    8ba2:	d9cd      	bls.n	8b40 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8ba4:	e016      	b.n	8bd4 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8ba6:	2300      	movs	r3, #0
    8ba8:	f88d 300f 	strb.w	r3, [sp, #15]
    8bac:	e00e      	b.n	8bcc <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8bae:	4a0c      	ldr	r2, [pc, #48]	; (8be0 <Adc_Ip_IRQHandler+0xe0>)
    8bb0:	9b01      	ldr	r3, [sp, #4]
    8bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8bba:	4611      	mov	r1, r2
    8bbc:	4618      	mov	r0, r3
    8bbe:	f7ff fa07 	bl	7fd0 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8bc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bc6:	3301      	adds	r3, #1
    8bc8:	f88d 300f 	strb.w	r3, [sp, #15]
    8bcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bd0:	2b0f      	cmp	r3, #15
    8bd2:	d9ec      	bls.n	8bae <Adc_Ip_IRQHandler+0xae>
}
    8bd4:	bf00      	nop
    8bd6:	b005      	add	sp, #20
    8bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    8bdc:	1fff8d18 	.word	0x1fff8d18
    8be0:	00010914 	.word	0x00010914

00008be4 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8be4:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8be6:	2000      	movs	r0, #0
    8be8:	f7ff ff8a 	bl	8b00 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8bec:	f3bf 8f4f 	dsb	sy
}
    8bf0:	bf00      	nop
    8bf2:	bd08      	pop	{r3, pc}

00008bf4 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8bf4:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8bf6:	2001      	movs	r0, #1
    8bf8:	f7ff ff82 	bl	8b00 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8bfc:	f3bf 8f4f 	dsb	sy
}
    8c00:	bf00      	nop
    8c02:	bd08      	pop	{r3, pc}

00008c04 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8c04:	b530      	push	{r4, r5, lr}
    8c06:	b085      	sub	sp, #20
    8c08:	4603      	mov	r3, r0
    8c0a:	460a      	mov	r2, r1
    8c0c:	f88d 3007 	strb.w	r3, [sp, #7]
    8c10:	4613      	mov	r3, r2
    8c12:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8c16:	2300      	movs	r3, #0
    8c18:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8c1c:	2300      	movs	r3, #0
    8c1e:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8c22:	f002 f867 	bl	acf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8c26:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8c2a:	492f      	ldr	r1, [pc, #188]	; (8ce8 <Adc_Ipw_RemoveFromQueue+0xe4>)
    8c2c:	4613      	mov	r3, r2
    8c2e:	005b      	lsls	r3, r3, #1
    8c30:	4413      	add	r3, r2
    8c32:	009b      	lsls	r3, r3, #2
    8c34:	440b      	add	r3, r1
    8c36:	881b      	ldrh	r3, [r3, #0]
    8c38:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8c3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c40:	2b01      	cmp	r3, #1
    8c42:	d80a      	bhi.n	8c5a <Adc_Ipw_RemoveFromQueue+0x56>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8c44:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8c48:	4927      	ldr	r1, [pc, #156]	; (8ce8 <Adc_Ipw_RemoveFromQueue+0xe4>)
    8c4a:	4613      	mov	r3, r2
    8c4c:	005b      	lsls	r3, r3, #1
    8c4e:	4413      	add	r3, r2
    8c50:	009b      	lsls	r3, r3, #2
    8c52:	440b      	add	r3, r1
    8c54:	2200      	movs	r2, #0
    8c56:	801a      	strh	r2, [r3, #0]
    8c58:	e041      	b.n	8cde <Adc_Ipw_RemoveFromQueue+0xda>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8c5e:	3301      	adds	r3, #1
    8c60:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c64:	e021      	b.n	8caa <Adc_Ipw_RemoveFromQueue+0xa6>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8c66:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c6a:	f8bd 400e 	ldrh.w	r4, [sp, #14]
    8c6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8c72:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8c76:	1e58      	subs	r0, r3, #1
    8c78:	4d1b      	ldr	r5, [pc, #108]	; (8ce8 <Adc_Ipw_RemoveFromQueue+0xe4>)
    8c7a:	460b      	mov	r3, r1
    8c7c:	005b      	lsls	r3, r3, #1
    8c7e:	440b      	add	r3, r1
    8c80:	005b      	lsls	r3, r3, #1
    8c82:	4423      	add	r3, r4
    8c84:	005b      	lsls	r3, r3, #1
    8c86:	442b      	add	r3, r5
    8c88:	885b      	ldrh	r3, [r3, #2]
    8c8a:	b29c      	uxth	r4, r3
    8c8c:	4916      	ldr	r1, [pc, #88]	; (8ce8 <Adc_Ipw_RemoveFromQueue+0xe4>)
    8c8e:	4613      	mov	r3, r2
    8c90:	005b      	lsls	r3, r3, #1
    8c92:	4413      	add	r3, r2
    8c94:	005b      	lsls	r3, r3, #1
    8c96:	4403      	add	r3, r0
    8c98:	005b      	lsls	r3, r3, #1
    8c9a:	440b      	add	r3, r1
    8c9c:	4622      	mov	r2, r4
    8c9e:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8ca0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8ca4:	3301      	adds	r3, #1
    8ca6:	f8ad 300e 	strh.w	r3, [sp, #14]
    8caa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8cae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8cb2:	429a      	cmp	r2, r3
    8cb4:	d3d7      	bcc.n	8c66 <Adc_Ipw_RemoveFromQueue+0x62>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8cb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8cba:	490b      	ldr	r1, [pc, #44]	; (8ce8 <Adc_Ipw_RemoveFromQueue+0xe4>)
    8cbc:	4613      	mov	r3, r2
    8cbe:	005b      	lsls	r3, r3, #1
    8cc0:	4413      	add	r3, r2
    8cc2:	009b      	lsls	r3, r3, #2
    8cc4:	440b      	add	r3, r1
    8cc6:	881b      	ldrh	r3, [r3, #0]
    8cc8:	b29b      	uxth	r3, r3
    8cca:	3b01      	subs	r3, #1
    8ccc:	b298      	uxth	r0, r3
    8cce:	4906      	ldr	r1, [pc, #24]	; (8ce8 <Adc_Ipw_RemoveFromQueue+0xe4>)
    8cd0:	4613      	mov	r3, r2
    8cd2:	005b      	lsls	r3, r3, #1
    8cd4:	4413      	add	r3, r2
    8cd6:	009b      	lsls	r3, r3, #2
    8cd8:	440b      	add	r3, r1
    8cda:	4602      	mov	r2, r0
    8cdc:	801a      	strh	r2, [r3, #0]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8cde:	f002 f835 	bl	ad4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8ce2:	bf00      	nop
    8ce4:	b005      	add	sp, #20
    8ce6:	bd30      	pop	{r4, r5, pc}
    8ce8:	1fff8d00 	.word	0x1fff8d00

00008cec <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8cec:	b500      	push	{lr}
    8cee:	b087      	sub	sp, #28
    8cf0:	9003      	str	r0, [sp, #12]
    8cf2:	9102      	str	r1, [sp, #8]
    8cf4:	9201      	str	r2, [sp, #4]
    8cf6:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8cfa:	2300      	movs	r3, #0
    8cfc:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8d00:	9b03      	ldr	r3, [sp, #12]
    8d02:	789b      	ldrb	r3, [r3, #2]
    8d04:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8d08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d0c:	4a29      	ldr	r2, [pc, #164]	; (8db4 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d12:	681a      	ldr	r2, [r3, #0]
    8d14:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8d18:	4413      	add	r3, r2
    8d1a:	7c1b      	ldrb	r3, [r3, #16]
    8d1c:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8d20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d24:	4a23      	ldr	r2, [pc, #140]	; (8db4 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d2a:	681b      	ldr	r3, [r3, #0]
    8d2c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8d34:	695b      	ldr	r3, [r3, #20]
    8d36:	4618      	mov	r0, r3
    8d38:	f000 fbd2 	bl	94e0 <Adc_Ipw_CalculateNumsBitShift>
    8d3c:	4603      	mov	r3, r0
    8d3e:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8d42:	9b03      	ldr	r3, [sp, #12]
    8d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8d48:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d4c:	2300      	movs	r3, #0
    8d4e:	f88d 3017 	strb.w	r3, [sp, #23]
    8d52:	e022      	b.n	8d9a <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8d54:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d58:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d5c:	4611      	mov	r1, r2
    8d5e:	4618      	mov	r0, r3
    8d60:	f7ff fcde 	bl	8720 <Adc_Ip_GetConvData>
    8d64:	4603      	mov	r3, r0
    8d66:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8d6a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8d6e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d72:	fa02 f303 	lsl.w	r3, r2, r3
    8d76:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8d7a:	9b01      	ldr	r3, [sp, #4]
    8d7c:	2201      	movs	r2, #1
    8d7e:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8d80:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d84:	005b      	lsls	r3, r3, #1
    8d86:	9a02      	ldr	r2, [sp, #8]
    8d88:	4413      	add	r3, r2
    8d8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8d8e:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d90:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d94:	3301      	adds	r3, #1
    8d96:	f88d 3017 	strb.w	r3, [sp, #23]
    8d9a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d9e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8da2:	429a      	cmp	r2, r3
    8da4:	d3d6      	bcc.n	8d54 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8da6:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8daa:	4618      	mov	r0, r3
    8dac:	b007      	add	sp, #28
    8dae:	f85d fb04 	ldr.w	pc, [sp], #4
    8db2:	bf00      	nop
    8db4:	1fff8ce8 	.word	0x1fff8ce8

00008db8 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8db8:	b500      	push	{lr}
    8dba:	b087      	sub	sp, #28
    8dbc:	9003      	str	r0, [sp, #12]
    8dbe:	9102      	str	r1, [sp, #8]
    8dc0:	9201      	str	r2, [sp, #4]
    8dc2:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8dc6:	2301      	movs	r3, #1
    8dc8:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8dcc:	2300      	movs	r3, #0
    8dce:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8dd2:	9b03      	ldr	r3, [sp, #12]
    8dd4:	789b      	ldrb	r3, [r3, #2]
    8dd6:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8dda:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dde:	4a19      	ldr	r2, [pc, #100]	; (8e44 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    8de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de4:	681a      	ldr	r2, [r3, #0]
    8de6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8dea:	4413      	add	r3, r2
    8dec:	7c1b      	ldrb	r3, [r3, #16]
    8dee:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    8df2:	9b03      	ldr	r3, [sp, #12]
    8df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8df8:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    8dfc:	f89d 2013 	ldrb.w	r2, [sp, #19]
    8e00:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8e04:	2100      	movs	r1, #0
    8e06:	4618      	mov	r0, r3
    8e08:	f000 fe4a 	bl	9aa0 <Adc_Ipw_CheckValidConversion>
    8e0c:	4603      	mov	r3, r0
    8e0e:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    8e12:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e16:	2b00      	cmp	r3, #0
    8e18:	d00a      	beq.n	8e30 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    8e1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e1e:	9a01      	ldr	r2, [sp, #4]
    8e20:	9902      	ldr	r1, [sp, #8]
    8e22:	9803      	ldr	r0, [sp, #12]
    8e24:	f7ff ff62 	bl	8cec <Adc_Ipw_ReadGroupConvData>
    8e28:	4603      	mov	r3, r0
    8e2a:	f88d 3017 	strb.w	r3, [sp, #23]
    8e2e:	e002      	b.n	8e36 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    8e30:	2301      	movs	r3, #1
    8e32:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    8e36:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8e3a:	4618      	mov	r0, r3
    8e3c:	b007      	add	sp, #28
    8e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    8e42:	bf00      	nop
    8e44:	1fff8ce8 	.word	0x1fff8ce8

00008e48 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    8e48:	b088      	sub	sp, #32
    8e4a:	4603      	mov	r3, r0
    8e4c:	9100      	str	r1, [sp, #0]
    8e4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e52:	4613      	mov	r3, r2
    8e54:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8e58:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e5c:	4a3a      	ldr	r2, [pc, #232]	; (8f48 <Adc_Ipw_WriteDataBuffer+0x100>)
    8e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e62:	68da      	ldr	r2, [r3, #12]
    8e64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8e68:	005b      	lsls	r3, r3, #1
    8e6a:	4413      	add	r3, r2
    8e6c:	881b      	ldrh	r3, [r3, #0]
    8e6e:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    8e72:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e76:	4a34      	ldr	r2, [pc, #208]	; (8f48 <Adc_Ipw_WriteDataBuffer+0x100>)
    8e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e7c:	685a      	ldr	r2, [r3, #4]
    8e7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8e82:	2134      	movs	r1, #52	; 0x34
    8e84:	fb01 f303 	mul.w	r3, r1, r3
    8e88:	4413      	add	r3, r2
    8e8a:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8e8c:	9b04      	ldr	r3, [sp, #16]
    8e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8e92:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    8e96:	2300      	movs	r3, #0
    8e98:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8e9a:	2300      	movs	r3, #0
    8e9c:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8ea0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ea4:	4929      	ldr	r1, [pc, #164]	; (8f4c <Adc_Ipw_WriteDataBuffer+0x104>)
    8ea6:	4613      	mov	r3, r2
    8ea8:	009b      	lsls	r3, r3, #2
    8eaa:	4413      	add	r3, r2
    8eac:	009b      	lsls	r3, r3, #2
    8eae:	440b      	add	r3, r1
    8eb0:	3308      	adds	r3, #8
    8eb2:	881b      	ldrh	r3, [r3, #0]
    8eb4:	b29b      	uxth	r3, r3
    8eb6:	3b01      	subs	r3, #1
    8eb8:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8ebc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ec0:	4922      	ldr	r1, [pc, #136]	; (8f4c <Adc_Ipw_WriteDataBuffer+0x104>)
    8ec2:	4613      	mov	r3, r2
    8ec4:	009b      	lsls	r3, r3, #2
    8ec6:	4413      	add	r3, r2
    8ec8:	009b      	lsls	r3, r3, #2
    8eca:	440b      	add	r3, r1
    8ecc:	3308      	adds	r3, #8
    8ece:	881b      	ldrh	r3, [r3, #0]
    8ed0:	b29b      	uxth	r3, r3
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d104      	bne.n	8ee0 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    8ed6:	9b04      	ldr	r3, [sp, #16]
    8ed8:	8b9b      	ldrh	r3, [r3, #28]
    8eda:	3b01      	subs	r3, #1
    8edc:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8ee0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ee4:	4919      	ldr	r1, [pc, #100]	; (8f4c <Adc_Ipw_WriteDataBuffer+0x104>)
    8ee6:	4613      	mov	r3, r2
    8ee8:	009b      	lsls	r3, r3, #2
    8eea:	4413      	add	r3, r2
    8eec:	009b      	lsls	r3, r3, #2
    8eee:	440b      	add	r3, r1
    8ef0:	330c      	adds	r3, #12
    8ef2:	681a      	ldr	r2, [r3, #0]
    8ef4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8ef8:	005b      	lsls	r3, r3, #1
    8efa:	4413      	add	r3, r2
    8efc:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    8efe:	9b04      	ldr	r3, [sp, #16]
    8f00:	8b9b      	ldrh	r3, [r3, #28]
    8f02:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    8f06:	2300      	movs	r3, #0
    8f08:	f88d 301f 	strb.w	r3, [sp, #31]
    8f0c:	e012      	b.n	8f34 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    8f0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8f12:	005b      	lsls	r3, r3, #1
    8f14:	9a00      	ldr	r2, [sp, #0]
    8f16:	4413      	add	r3, r2
    8f18:	9a06      	ldr	r2, [sp, #24]
    8f1a:	8812      	ldrh	r2, [r2, #0]
    8f1c:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    8f1e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8f22:	005b      	lsls	r3, r3, #1
    8f24:	9a06      	ldr	r2, [sp, #24]
    8f26:	4413      	add	r3, r2
    8f28:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    8f2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8f2e:	3301      	adds	r3, #1
    8f30:	f88d 301f 	strb.w	r3, [sp, #31]
    8f34:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8f38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f3c:	429a      	cmp	r2, r3
    8f3e:	d3e6      	bcc.n	8f0e <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    8f40:	bf00      	nop
    8f42:	bf00      	nop
    8f44:	b008      	add	sp, #32
    8f46:	4770      	bx	lr
    8f48:	1fff8ce8 	.word	0x1fff8ce8
    8f4c:	1fff8cec 	.word	0x1fff8cec

00008f50 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    8f50:	b500      	push	{lr}
    8f52:	b089      	sub	sp, #36	; 0x24
    8f54:	9200      	str	r2, [sp, #0]
    8f56:	461a      	mov	r2, r3
    8f58:	4603      	mov	r3, r0
    8f5a:	f88d 3007 	strb.w	r3, [sp, #7]
    8f5e:	460b      	mov	r3, r1
    8f60:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f64:	4613      	mov	r3, r2
    8f66:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    8f6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f6e:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    8f72:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f76:	f003 0307 	and.w	r3, r3, #7
    8f7a:	b2db      	uxtb	r3, r3
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d006      	beq.n	8f8e <Adc_Ipw_ConfigurePdbChannels+0x3e>
    8f80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f84:	08db      	lsrs	r3, r3, #3
    8f86:	b2db      	uxtb	r3, r3
    8f88:	3301      	adds	r3, #1
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	e003      	b.n	8f96 <Adc_Ipw_ConfigurePdbChannels+0x46>
    8f8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f92:	08db      	lsrs	r3, r3, #3
    8f94:	b2db      	uxtb	r3, r3
    8f96:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    8f9a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f9e:	4987      	ldr	r1, [pc, #540]	; (91bc <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    8fa0:	4613      	mov	r3, r2
    8fa2:	009b      	lsls	r3, r3, #2
    8fa4:	4413      	add	r3, r2
    8fa6:	009b      	lsls	r3, r3, #2
    8fa8:	440b      	add	r3, r1
    8faa:	3310      	adds	r3, #16
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    8fb2:	4b83      	ldr	r3, [pc, #524]	; (91c0 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    8fb4:	681b      	ldr	r3, [r3, #0]
    8fb6:	681a      	ldr	r2, [r3, #0]
    8fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fbc:	4413      	add	r3, r2
    8fbe:	7c1b      	ldrb	r3, [r3, #16]
    8fc0:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    8fc4:	9b00      	ldr	r3, [sp, #0]
    8fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fc8:	691b      	ldr	r3, [r3, #16]
    8fca:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    8fcc:	2300      	movs	r3, #0
    8fce:	f88d 301f 	strb.w	r3, [sp, #31]
    8fd2:	e0e6      	b.n	91a2 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    8fd4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8fd8:	08db      	lsrs	r3, r3, #3
    8fda:	b2db      	uxtb	r3, r3
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d102      	bne.n	8fe6 <Adc_Ipw_ConfigurePdbChannels+0x96>
    8fe0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8fe4:	e000      	b.n	8fe8 <Adc_Ipw_ConfigurePdbChannels+0x98>
    8fe6:	2308      	movs	r3, #8
    8fe8:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    8fec:	9b00      	ldr	r3, [sp, #0]
    8fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8ff0:	7bdb      	ldrb	r3, [r3, #15]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d05e      	beq.n	90b4 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    8ff6:	9b00      	ldr	r3, [sp, #0]
    8ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8ffa:	7b9b      	ldrb	r3, [r3, #14]
    8ffc:	f083 0301 	eor.w	r3, r3, #1
    9000:	b2db      	uxtb	r3, r3
    9002:	2b00      	cmp	r3, #0
    9004:	d02a      	beq.n	905c <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9006:	f89d 3013 	ldrb.w	r3, [sp, #19]
    900a:	f1c3 0308 	rsb	r3, r3, #8
    900e:	22ff      	movs	r2, #255	; 0xff
    9010:	fa22 f303 	lsr.w	r3, r2, r3
    9014:	b2db      	uxtb	r3, r3
    9016:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    901a:	2300      	movs	r3, #0
    901c:	f88d 301e 	strb.w	r3, [sp, #30]
    9020:	e015      	b.n	904e <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    9022:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9026:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    902a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    902e:	4413      	add	r3, r2
    9030:	005b      	lsls	r3, r3, #1
    9032:	9a05      	ldr	r2, [sp, #20]
    9034:	4413      	add	r3, r2
    9036:	881b      	ldrh	r3, [r3, #0]
    9038:	f89d 201e 	ldrb.w	r2, [sp, #30]
    903c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9040:	f001 fd36 	bl	aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9044:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9048:	3301      	adds	r3, #1
    904a:	f88d 301e 	strb.w	r3, [sp, #30]
    904e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9052:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9056:	429a      	cmp	r2, r3
    9058:	d3e3      	bcc.n	9022 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    905a:	e051      	b.n	9100 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    905c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9060:	2b00      	cmp	r3, #0
    9062:	d110      	bne.n	9086 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9064:	2301      	movs	r3, #1
    9066:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    906a:	9b05      	ldr	r3, [sp, #20]
    906c:	881b      	ldrh	r3, [r3, #0]
    906e:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9072:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9076:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    907a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    907e:	2200      	movs	r2, #0
    9080:	f001 fd16 	bl	aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9084:	e03c      	b.n	9100 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    9086:	2301      	movs	r3, #1
    9088:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    908c:	9b00      	ldr	r3, [sp, #0]
    908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9090:	899a      	ldrh	r2, [r3, #12]
    9092:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9096:	b29b      	uxth	r3, r3
    9098:	fb12 f303 	smulbb	r3, r2, r3
    909c:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    90a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90a8:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90ac:	2200      	movs	r2, #0
    90ae:	f001 fcff 	bl	aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    90b2:	e025      	b.n	9100 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    90b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d10b      	bne.n	90d4 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    90bc:	2301      	movs	r3, #1
    90be:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    90c2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90c6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90ca:	2300      	movs	r3, #0
    90cc:	2200      	movs	r2, #0
    90ce:	f001 fcef 	bl	aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    90d2:	e015      	b.n	9100 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    90d4:	2301      	movs	r3, #1
    90d6:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    90da:	9b00      	ldr	r3, [sp, #0]
    90dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    90de:	899a      	ldrh	r2, [r3, #12]
    90e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90e4:	b29b      	uxth	r3, r3
    90e6:	fb12 f303 	smulbb	r3, r2, r3
    90ea:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    90ee:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90f6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90fa:	2200      	movs	r2, #0
    90fc:	f001 fcd8 	bl	aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9100:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9104:	4618      	mov	r0, r3
    9106:	f001 fba7 	bl	a858 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    910a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    910e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9112:	1ad3      	subs	r3, r2, r3
    9114:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9118:	f89d 3013 	ldrb.w	r3, [sp, #19]
    911c:	b29a      	uxth	r2, r3
    911e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9122:	4413      	add	r3, r2
    9124:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9128:	9b00      	ldr	r3, [sp, #0]
    912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    912c:	7b9b      	ldrb	r3, [r3, #14]
    912e:	2b00      	cmp	r3, #0
    9130:	d01d      	beq.n	916e <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    9132:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9136:	2b00      	cmp	r3, #0
    9138:	d10c      	bne.n	9154 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    913a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    913e:	f1c3 0308 	rsb	r3, r3, #8
    9142:	22ff      	movs	r2, #255	; 0xff
    9144:	fa22 f303 	lsr.w	r3, r2, r3
    9148:	b2db      	uxtb	r3, r3
    914a:	3b01      	subs	r3, #1
    914c:	b2db      	uxtb	r3, r3
    914e:	f88d 300e 	strb.w	r3, [sp, #14]
    9152:	e00f      	b.n	9174 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9154:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9158:	f1c3 0308 	rsb	r3, r3, #8
    915c:	22ff      	movs	r2, #255	; 0xff
    915e:	fa22 f303 	lsr.w	r3, r2, r3
    9162:	b2db      	uxtb	r3, r3
    9164:	3b01      	subs	r3, #1
    9166:	b2db      	uxtb	r3, r3
    9168:	f88d 300e 	strb.w	r3, [sp, #14]
    916c:	e002      	b.n	9174 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    916e:	2300      	movs	r3, #0
    9170:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9174:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9178:	f1c3 0308 	rsb	r3, r3, #8
    917c:	22ff      	movs	r2, #255	; 0xff
    917e:	fa22 f303 	lsr.w	r3, r2, r3
    9182:	b2db      	uxtb	r3, r3
    9184:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9188:	f89d 3018 	ldrb.w	r3, [sp, #24]
    918c:	aa03      	add	r2, sp, #12
    918e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9192:	4618      	mov	r0, r3
    9194:	f001 fb9c 	bl	a8d0 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9198:	f89d 301f 	ldrb.w	r3, [sp, #31]
    919c:	3301      	adds	r3, #1
    919e:	f88d 301f 	strb.w	r3, [sp, #31]
    91a2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    91a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    91aa:	429a      	cmp	r2, r3
    91ac:	f4ff af12 	bcc.w	8fd4 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    91b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    91b4:	4618      	mov	r0, r3
    91b6:	b009      	add	sp, #36	; 0x24
    91b8:	f85d fb04 	ldr.w	pc, [sp], #4
    91bc:	1fff8cec 	.word	0x1fff8cec
    91c0:	1fff8ce8 	.word	0x1fff8ce8

000091c4 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    91c4:	b500      	push	{lr}
    91c6:	b089      	sub	sp, #36	; 0x24
    91c8:	9202      	str	r2, [sp, #8]
    91ca:	9301      	str	r3, [sp, #4]
    91cc:	4603      	mov	r3, r0
    91ce:	f88d 300f 	strb.w	r3, [sp, #15]
    91d2:	460b      	mov	r3, r1
    91d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    91d8:	2300      	movs	r3, #0
    91da:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    91de:	4b62      	ldr	r3, [pc, #392]	; (9368 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    91e0:	681b      	ldr	r3, [r3, #0]
    91e2:	681a      	ldr	r2, [r3, #0]
    91e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91e8:	4413      	add	r3, r2
    91ea:	7c1b      	ldrb	r3, [r3, #16]
    91ec:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    91f0:	9b02      	ldr	r3, [sp, #8]
    91f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91f4:	691b      	ldr	r3, [r3, #16]
    91f6:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    91f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91fc:	f003 0307 	and.w	r3, r3, #7
    9200:	b2db      	uxtb	r3, r3
    9202:	2b00      	cmp	r3, #0
    9204:	d006      	beq.n	9214 <Adc_Ipw_ConfigurePdbConversion+0x50>
    9206:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    920a:	08db      	lsrs	r3, r3, #3
    920c:	b2db      	uxtb	r3, r3
    920e:	3301      	adds	r3, #1
    9210:	b2db      	uxtb	r3, r3
    9212:	e003      	b.n	921c <Adc_Ipw_ConfigurePdbConversion+0x58>
    9214:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9218:	08db      	lsrs	r3, r3, #3
    921a:	b2db      	uxtb	r3, r3
    921c:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9220:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9224:	4618      	mov	r0, r3
    9226:	f001 fa81 	bl	a72c <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    922a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    922e:	9901      	ldr	r1, [sp, #4]
    9230:	4618      	mov	r0, r3
    9232:	f001 faa9 	bl	a788 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    9236:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    923a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    923e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9242:	9a02      	ldr	r2, [sp, #8]
    9244:	f7ff fe84 	bl	8f50 <Adc_Ipw_ConfigurePdbChannels>
    9248:	4603      	mov	r3, r0
    924a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    924e:	9b02      	ldr	r3, [sp, #8]
    9250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9252:	7bdb      	ldrb	r3, [r3, #15]
    9254:	2b00      	cmp	r3, #0
    9256:	d02f      	beq.n	92b8 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9258:	9b02      	ldr	r3, [sp, #8]
    925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    925c:	7b9b      	ldrb	r3, [r3, #14]
    925e:	f083 0301 	eor.w	r3, r3, #1
    9262:	b2db      	uxtb	r3, r3
    9264:	2b00      	cmp	r3, #0
    9266:	d017      	beq.n	9298 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9268:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    926c:	493f      	ldr	r1, [pc, #252]	; (936c <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    926e:	4613      	mov	r3, r2
    9270:	009b      	lsls	r3, r3, #2
    9272:	4413      	add	r3, r2
    9274:	009b      	lsls	r3, r3, #2
    9276:	440b      	add	r3, r1
    9278:	3310      	adds	r3, #16
    927a:	781b      	ldrb	r3, [r3, #0]
    927c:	461a      	mov	r2, r3
    927e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9282:	4413      	add	r3, r2
    9284:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9288:	3b01      	subs	r3, #1
    928a:	005b      	lsls	r3, r3, #1
    928c:	9a05      	ldr	r2, [sp, #20]
    928e:	4413      	add	r3, r2
    9290:	881b      	ldrh	r3, [r3, #0]
    9292:	f8ad 301c 	strh.w	r3, [sp, #28]
    9296:	e01a      	b.n	92ce <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    9298:	9b05      	ldr	r3, [sp, #20]
    929a:	881a      	ldrh	r2, [r3, #0]
    929c:	9b02      	ldr	r3, [sp, #8]
    929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92a0:	8999      	ldrh	r1, [r3, #12]
    92a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    92a6:	3b01      	subs	r3, #1
    92a8:	b29b      	uxth	r3, r3
    92aa:	fb11 f303 	smulbb	r3, r1, r3
    92ae:	b29b      	uxth	r3, r3
    92b0:	4413      	add	r3, r2
    92b2:	f8ad 301c 	strh.w	r3, [sp, #28]
    92b6:	e00a      	b.n	92ce <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    92b8:	9b02      	ldr	r3, [sp, #8]
    92ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92bc:	899a      	ldrh	r2, [r3, #12]
    92be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    92c2:	3b01      	subs	r3, #1
    92c4:	b29b      	uxth	r3, r3
    92c6:	fb12 f303 	smulbb	r3, r2, r3
    92ca:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    92ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
    92d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    92d6:	4611      	mov	r1, r2
    92d8:	4618      	mov	r0, r3
    92da:	f001 fad5 	bl	a888 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    92de:	f89d 301b 	ldrb.w	r3, [sp, #27]
    92e2:	4618      	mov	r0, r3
    92e4:	f001 fab8 	bl	a858 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    92e8:	2300      	movs	r3, #0
    92ea:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    92ee:	2300      	movs	r3, #0
    92f0:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    92f4:	2300      	movs	r3, #0
    92f6:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    92fa:	e00c      	b.n	9316 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    92fc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9300:	aa04      	add	r2, sp, #16
    9302:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9306:	4618      	mov	r0, r3
    9308:	f001 fae2 	bl	a8d0 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    930c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9310:	3301      	adds	r3, #1
    9312:	f88d 301f 	strb.w	r3, [sp, #31]
    9316:	f89d 301f 	ldrb.w	r3, [sp, #31]
    931a:	2b01      	cmp	r3, #1
    931c:	d9ee      	bls.n	92fc <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    931e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9322:	4912      	ldr	r1, [pc, #72]	; (936c <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9324:	4613      	mov	r3, r2
    9326:	009b      	lsls	r3, r3, #2
    9328:	4413      	add	r3, r2
    932a:	009b      	lsls	r3, r3, #2
    932c:	440b      	add	r3, r1
    932e:	3310      	adds	r3, #16
    9330:	7819      	ldrb	r1, [r3, #0]
    9332:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9336:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    933a:	440b      	add	r3, r1
    933c:	b2d8      	uxtb	r0, r3
    933e:	490b      	ldr	r1, [pc, #44]	; (936c <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9340:	4613      	mov	r3, r2
    9342:	009b      	lsls	r3, r3, #2
    9344:	4413      	add	r3, r2
    9346:	009b      	lsls	r3, r3, #2
    9348:	440b      	add	r3, r1
    934a:	3310      	adds	r3, #16
    934c:	4602      	mov	r2, r0
    934e:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    9350:	9b01      	ldr	r3, [sp, #4]
    9352:	2b0f      	cmp	r3, #15
    9354:	d104      	bne.n	9360 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9356:	f89d 301b 	ldrb.w	r3, [sp, #27]
    935a:	4618      	mov	r0, r3
    935c:	f001 fa54 	bl	a808 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    9360:	bf00      	nop
    9362:	b009      	add	sp, #36	; 0x24
    9364:	f85d fb04 	ldr.w	pc, [sp], #4
    9368:	1fff8ce8 	.word	0x1fff8ce8
    936c:	1fff8cec 	.word	0x1fff8cec

00009370 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    9370:	b500      	push	{lr}
    9372:	b087      	sub	sp, #28
    9374:	4603      	mov	r3, r0
    9376:	f88d 3007 	strb.w	r3, [sp, #7]
    937a:	460b      	mov	r3, r1
    937c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9380:	4613      	mov	r3, r2
    9382:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9386:	f89d 3006 	ldrb.w	r3, [sp, #6]
    938a:	4a38      	ldr	r2, [pc, #224]	; (946c <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    938c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9390:	68da      	ldr	r2, [r3, #12]
    9392:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9396:	005b      	lsls	r3, r3, #1
    9398:	4413      	add	r3, r2
    939a:	881b      	ldrh	r3, [r3, #0]
    939c:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    93a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93a4:	4a31      	ldr	r2, [pc, #196]	; (946c <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    93a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93aa:	681a      	ldr	r2, [r3, #0]
    93ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93b0:	4413      	add	r3, r2
    93b2:	7c1b      	ldrb	r3, [r3, #16]
    93b4:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    93b8:	2300      	movs	r3, #0
    93ba:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    93be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93c2:	4618      	mov	r0, r3
    93c4:	f001 fb9e 	bl	ab04 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    93c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93cc:	4a27      	ldr	r2, [pc, #156]	; (946c <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    93ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d2:	685a      	ldr	r2, [r3, #4]
    93d4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    93d8:	2134      	movs	r1, #52	; 0x34
    93da:	fb01 f303 	mul.w	r3, r1, r3
    93de:	4413      	add	r3, r2
    93e0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    93e4:	2b01      	cmp	r3, #1
    93e6:	d114      	bne.n	9412 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    93e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93ec:	4a1f      	ldr	r2, [pc, #124]	; (946c <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    93ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f2:	685a      	ldr	r2, [r3, #4]
    93f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    93f8:	2134      	movs	r1, #52	; 0x34
    93fa:	fb01 f303 	mul.w	r3, r1, r3
    93fe:	4413      	add	r3, r2
    9400:	689b      	ldr	r3, [r3, #8]
    9402:	2b01      	cmp	r3, #1
    9404:	d105      	bne.n	9412 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    9406:	f89d 3013 	ldrb.w	r3, [sp, #19]
    940a:	2100      	movs	r1, #0
    940c:	4618      	mov	r0, r3
    940e:	f7ff f811 	bl	8434 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9412:	2300      	movs	r3, #0
    9414:	f88d 3016 	strb.w	r3, [sp, #22]
    9418:	e013      	b.n	9442 <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    941a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    941e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9422:	2201      	movs	r2, #1
    9424:	4618      	mov	r0, r3
    9426:	f7ff f8b7 	bl	8598 <Adc_Ip_SetDisabledChannel>
    942a:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    942c:	9b03      	ldr	r3, [sp, #12]
    942e:	2b02      	cmp	r3, #2
    9430:	d102      	bne.n	9438 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    9432:	2301      	movs	r3, #1
    9434:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9438:	f89d 3016 	ldrb.w	r3, [sp, #22]
    943c:	3301      	adds	r3, #1
    943e:	f88d 3016 	strb.w	r3, [sp, #22]
    9442:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9446:	490a      	ldr	r1, [pc, #40]	; (9470 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    9448:	4613      	mov	r3, r2
    944a:	005b      	lsls	r3, r3, #1
    944c:	4413      	add	r3, r2
    944e:	009b      	lsls	r3, r3, #2
    9450:	440b      	add	r3, r1
    9452:	330a      	adds	r3, #10
    9454:	781b      	ldrb	r3, [r3, #0]
    9456:	f89d 2016 	ldrb.w	r2, [sp, #22]
    945a:	429a      	cmp	r2, r3
    945c:	d3dd      	bcc.n	941a <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    945e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9462:	4618      	mov	r0, r3
    9464:	b007      	add	sp, #28
    9466:	f85d fb04 	ldr.w	pc, [sp], #4
    946a:	bf00      	nop
    946c:	1fff8ce8 	.word	0x1fff8ce8
    9470:	1fff8d00 	.word	0x1fff8d00

00009474 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9474:	b500      	push	{lr}
    9476:	b085      	sub	sp, #20
    9478:	4603      	mov	r3, r0
    947a:	9100      	str	r1, [sp, #0]
    947c:	f88d 3007 	strb.w	r3, [sp, #7]
    9480:	4613      	mov	r3, r2
    9482:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9486:	f89d 3006 	ldrb.w	r3, [sp, #6]
    948a:	4a14      	ldr	r2, [pc, #80]	; (94dc <Adc_Ipw_PrepareGroupStart+0x68>)
    948c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9490:	681a      	ldr	r2, [r3, #0]
    9492:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9496:	4413      	add	r3, r2
    9498:	7c1b      	ldrb	r3, [r3, #16]
    949a:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    949e:	9b00      	ldr	r3, [sp, #0]
    94a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	2b01      	cmp	r3, #1
    94a6:	d108      	bne.n	94ba <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    94a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    94ac:	9b00      	ldr	r3, [sp, #0]
    94ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94b0:	685b      	ldr	r3, [r3, #4]
    94b2:	461a      	mov	r2, r3
    94b4:	2101      	movs	r1, #1
    94b6:	f7fe ff37 	bl	8328 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    94ba:	9b00      	ldr	r3, [sp, #0]
    94bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    94be:	7a1b      	ldrb	r3, [r3, #8]
    94c0:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    94c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94c8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    94cc:	4611      	mov	r1, r2
    94ce:	4618      	mov	r0, r3
    94d0:	f7fe ff48 	bl	8364 <Adc_Ip_SetSampleTime>
}
    94d4:	bf00      	nop
    94d6:	b005      	add	sp, #20
    94d8:	f85d fb04 	ldr.w	pc, [sp], #4
    94dc:	1fff8ce8 	.word	0x1fff8ce8

000094e0 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    94e0:	b084      	sub	sp, #16
    94e2:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    94e4:	2300      	movs	r3, #0
    94e6:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    94ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    94ee:	4618      	mov	r0, r3
    94f0:	b004      	add	sp, #16
    94f2:	4770      	bx	lr

000094f4 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    94f4:	b500      	push	{lr}
    94f6:	b08f      	sub	sp, #60	; 0x3c
    94f8:	9202      	str	r2, [sp, #8]
    94fa:	461a      	mov	r2, r3
    94fc:	4603      	mov	r3, r0
    94fe:	f88d 300f 	strb.w	r3, [sp, #15]
    9502:	460b      	mov	r3, r1
    9504:	f8ad 300c 	strh.w	r3, [sp, #12]
    9508:	4613      	mov	r3, r2
    950a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    950e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9512:	4a6f      	ldr	r2, [pc, #444]	; (96d0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    9514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9518:	68da      	ldr	r2, [r3, #12]
    951a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    951e:	005b      	lsls	r3, r3, #1
    9520:	4413      	add	r3, r2
    9522:	881b      	ldrh	r3, [r3, #0]
    9524:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9528:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    952c:	4a68      	ldr	r2, [pc, #416]	; (96d0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    952e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9532:	685a      	ldr	r2, [r3, #4]
    9534:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    9538:	2134      	movs	r1, #52	; 0x34
    953a:	fb01 f303 	mul.w	r3, r1, r3
    953e:	4413      	add	r3, r2
    9540:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9542:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9546:	4a62      	ldr	r2, [pc, #392]	; (96d0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    9548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    954c:	681a      	ldr	r2, [r3, #0]
    954e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9552:	4413      	add	r3, r2
    9554:	7c1b      	ldrb	r3, [r3, #16]
    9556:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    955a:	2300      	movs	r3, #0
    955c:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    955e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9562:	495c      	ldr	r1, [pc, #368]	; (96d4 <Adc_Ipw_ConfigureConversion+0x1e0>)
    9564:	4613      	mov	r3, r2
    9566:	009b      	lsls	r3, r3, #2
    9568:	4413      	add	r3, r2
    956a:	009b      	lsls	r3, r3, #2
    956c:	440b      	add	r3, r1
    956e:	3310      	adds	r3, #16
    9570:	781b      	ldrb	r3, [r3, #0]
    9572:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    9576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9578:	6a1b      	ldr	r3, [r3, #32]
    957a:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    957c:	2300      	movs	r3, #0
    957e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9582:	e030      	b.n	95e6 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9584:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9588:	4a51      	ldr	r2, [pc, #324]	; (96d0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    958a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    958e:	681b      	ldr	r3, [r3, #0]
    9590:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    959a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    959e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95a2:	440b      	add	r3, r1
    95a4:	005b      	lsls	r3, r3, #1
    95a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    95a8:	440b      	add	r3, r1
    95aa:	881b      	ldrh	r3, [r3, #0]
    95ac:	4619      	mov	r1, r3
    95ae:	460b      	mov	r3, r1
    95b0:	005b      	lsls	r3, r3, #1
    95b2:	440b      	add	r3, r1
    95b4:	009b      	lsls	r3, r3, #2
    95b6:	4413      	add	r3, r2
    95b8:	685b      	ldr	r3, [r3, #4]
    95ba:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    95bc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95c0:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    95c4:	9b08      	ldr	r3, [sp, #32]
    95c6:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    95c8:	2300      	movs	r3, #0
    95ca:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    95ce:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    95d2:	aa05      	add	r2, sp, #20
    95d4:	4611      	mov	r1, r2
    95d6:	4618      	mov	r0, r3
    95d8:	f7fe ffae 	bl	8538 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    95dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95e0:	3301      	adds	r3, #1
    95e2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    95e6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    95ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    95ee:	3b01      	subs	r3, #1
    95f0:	429a      	cmp	r2, r3
    95f2:	d3c7      	bcc.n	9584 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    95f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    95f8:	4a35      	ldr	r2, [pc, #212]	; (96d0 <Adc_Ipw_ConfigureConversion+0x1dc>)
    95fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95fe:	681b      	ldr	r3, [r3, #0]
    9600:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    960a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    960e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9612:	440b      	add	r3, r1
    9614:	005b      	lsls	r3, r3, #1
    9616:	990a      	ldr	r1, [sp, #40]	; 0x28
    9618:	440b      	add	r3, r1
    961a:	881b      	ldrh	r3, [r3, #0]
    961c:	4619      	mov	r1, r3
    961e:	460b      	mov	r3, r1
    9620:	005b      	lsls	r3, r3, #1
    9622:	440b      	add	r3, r1
    9624:	009b      	lsls	r3, r3, #2
    9626:	4413      	add	r3, r2
    9628:	685b      	ldr	r3, [r3, #4]
    962a:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    962c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9630:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9634:	9b08      	ldr	r3, [sp, #32]
    9636:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    963a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    963e:	2b00      	cmp	r3, #0
    9640:	d103      	bne.n	964a <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    9642:	2301      	movs	r3, #1
    9644:	f88d 301c 	strb.w	r3, [sp, #28]
    9648:	e002      	b.n	9650 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    964a:	2300      	movs	r3, #0
    964c:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9650:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9654:	aa05      	add	r2, sp, #20
    9656:	4611      	mov	r1, r2
    9658:	4618      	mov	r0, r3
    965a:	f7fe ff6d 	bl	8538 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    965e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9662:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9666:	e014      	b.n	9692 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    9668:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    966c:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9670:	231f      	movs	r3, #31
    9672:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9674:	2300      	movs	r3, #0
    9676:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    967a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    967e:	aa05      	add	r2, sp, #20
    9680:	4611      	mov	r1, r2
    9682:	4618      	mov	r0, r3
    9684:	f7fe ff58 	bl	8538 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9688:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    968c:	3301      	adds	r3, #1
    968e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9692:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9696:	2b0f      	cmp	r3, #15
    9698:	d9e6      	bls.n	9668 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    969a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    969e:	490e      	ldr	r1, [pc, #56]	; (96d8 <Adc_Ipw_ConfigureConversion+0x1e4>)
    96a0:	4613      	mov	r3, r2
    96a2:	005b      	lsls	r3, r3, #1
    96a4:	4413      	add	r3, r2
    96a6:	009b      	lsls	r3, r3, #2
    96a8:	440b      	add	r3, r1
    96aa:	330a      	adds	r3, #10
    96ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
    96b0:	701a      	strb	r2, [r3, #0]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    96b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    96b6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    96ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    96be:	9300      	str	r3, [sp, #0]
    96c0:	9b02      	ldr	r3, [sp, #8]
    96c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    96c4:	f7ff fd7e 	bl	91c4 <Adc_Ipw_ConfigurePdbConversion>
}
    96c8:	bf00      	nop
    96ca:	b00f      	add	sp, #60	; 0x3c
    96cc:	f85d fb04 	ldr.w	pc, [sp], #4
    96d0:	1fff8ce8 	.word	0x1fff8ce8
    96d4:	1fff8cec 	.word	0x1fff8cec
    96d8:	1fff8d00 	.word	0x1fff8d00

000096dc <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    96dc:	b500      	push	{lr}
    96de:	b085      	sub	sp, #20
    96e0:	9001      	str	r0, [sp, #4]
    96e2:	460b      	mov	r3, r1
    96e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    96e8:	2300      	movs	r3, #0
    96ea:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    96ee:	2300      	movs	r3, #0
    96f0:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    96f4:	2300      	movs	r3, #0
    96f6:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96fa:	2300      	movs	r3, #0
    96fc:	f88d 300f 	strb.w	r3, [sp, #15]
    9700:	e027      	b.n	9752 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    9702:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9706:	9a01      	ldr	r2, [sp, #4]
    9708:	4413      	add	r3, r2
    970a:	7f9b      	ldrb	r3, [r3, #30]
    970c:	2b01      	cmp	r3, #1
    970e:	d11b      	bne.n	9748 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9710:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9714:	9a01      	ldr	r2, [sp, #4]
    9716:	4413      	add	r3, r2
    9718:	7c1b      	ldrb	r3, [r3, #16]
    971a:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    971e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9722:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9726:	9b01      	ldr	r3, [sp, #4]
    9728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    972c:	4619      	mov	r1, r3
    972e:	f7fe fc9a 	bl	8066 <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    9732:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9736:	f89d 200f 	ldrb.w	r2, [sp, #15]
    973a:	9b01      	ldr	r3, [sp, #4]
    973c:	3202      	adds	r2, #2
    973e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9742:	4619      	mov	r1, r3
    9744:	f000 fec5 	bl	a4d2 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9748:	f89d 300f 	ldrb.w	r3, [sp, #15]
    974c:	3301      	adds	r3, #1
    974e:	f88d 300f 	strb.w	r3, [sp, #15]
    9752:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9756:	2b00      	cmp	r3, #0
    9758:	d0d3      	beq.n	9702 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    975a:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    975e:	4618      	mov	r0, r3
    9760:	b005      	add	sp, #20
    9762:	f85d fb04 	ldr.w	pc, [sp], #4

00009766 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    9766:	b500      	push	{lr}
    9768:	b087      	sub	sp, #28
    976a:	4603      	mov	r3, r0
    976c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    9770:	2300      	movs	r3, #0
    9772:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9776:	2300      	movs	r3, #0
    9778:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    977c:	2300      	movs	r3, #0
    977e:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    9782:	2300      	movs	r3, #0
    9784:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    9788:	2300      	movs	r3, #0
    978a:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    978e:	2300      	movs	r3, #0
    9790:	f88d 3017 	strb.w	r3, [sp, #23]
    9794:	e026      	b.n	97e4 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9796:	f89d 3007 	ldrb.w	r3, [sp, #7]
    979a:	4a2e      	ldr	r2, [pc, #184]	; (9854 <Adc_Ipw_DeInit+0xee>)
    979c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a0:	681a      	ldr	r2, [r3, #0]
    97a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97a6:	4413      	add	r3, r2
    97a8:	7f9b      	ldrb	r3, [r3, #30]
    97aa:	2b01      	cmp	r3, #1
    97ac:	d115      	bne.n	97da <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    97ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97b2:	4a28      	ldr	r2, [pc, #160]	; (9854 <Adc_Ipw_DeInit+0xee>)
    97b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b8:	681a      	ldr	r2, [r3, #0]
    97ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97be:	4413      	add	r3, r2
    97c0:	7c1b      	ldrb	r3, [r3, #16]
    97c2:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    97c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    97ca:	4618      	mov	r0, r3
    97cc:	f7fe fd22 	bl	8214 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    97d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    97d4:	4618      	mov	r0, r3
    97d6:	f000 ff25 	bl	a624 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    97da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97de:	3301      	adds	r3, #1
    97e0:	f88d 3017 	strb.w	r3, [sp, #23]
    97e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    97e8:	2b00      	cmp	r3, #0
    97ea:	d0d4      	beq.n	9796 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    97ec:	2300      	movs	r3, #0
    97ee:	f8ad 3014 	strh.w	r3, [sp, #20]
    97f2:	e01e      	b.n	9832 <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    97f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97f8:	4a16      	ldr	r2, [pc, #88]	; (9854 <Adc_Ipw_DeInit+0xee>)
    97fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97fe:	685a      	ldr	r2, [r3, #4]
    9800:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9804:	2134      	movs	r1, #52	; 0x34
    9806:	fb01 f303 	mul.w	r3, r1, r3
    980a:	4413      	add	r3, r2
    980c:	881b      	ldrh	r3, [r3, #0]
    980e:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9812:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9816:	4910      	ldr	r1, [pc, #64]	; (9858 <Adc_Ipw_DeInit+0xf2>)
    9818:	4613      	mov	r3, r2
    981a:	009b      	lsls	r3, r3, #2
    981c:	4413      	add	r3, r2
    981e:	009b      	lsls	r3, r3, #2
    9820:	440b      	add	r3, r1
    9822:	330c      	adds	r3, #12
    9824:	2200      	movs	r2, #0
    9826:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9828:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    982c:	3301      	adds	r3, #1
    982e:	f8ad 3014 	strh.w	r3, [sp, #20]
    9832:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9836:	4a07      	ldr	r2, [pc, #28]	; (9854 <Adc_Ipw_DeInit+0xee>)
    9838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983c:	891b      	ldrh	r3, [r3, #8]
    983e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9842:	429a      	cmp	r2, r3
    9844:	d3d6      	bcc.n	97f4 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    9846:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    984a:	4618      	mov	r0, r3
    984c:	b007      	add	sp, #28
    984e:	f85d fb04 	ldr.w	pc, [sp], #4
    9852:	bf00      	nop
    9854:	1fff8ce8 	.word	0x1fff8ce8
    9858:	1fff8cec 	.word	0x1fff8cec

0000985c <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    985c:	b500      	push	{lr}
    985e:	b089      	sub	sp, #36	; 0x24
    9860:	4603      	mov	r3, r0
    9862:	460a      	mov	r2, r1
    9864:	f88d 300f 	strb.w	r3, [sp, #15]
    9868:	4613      	mov	r3, r2
    986a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    986e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9872:	4956      	ldr	r1, [pc, #344]	; (99cc <Adc_Ipw_StartNormalConversion+0x170>)
    9874:	4613      	mov	r3, r2
    9876:	005b      	lsls	r3, r3, #1
    9878:	4413      	add	r3, r2
    987a:	009b      	lsls	r3, r3, #2
    987c:	440b      	add	r3, r1
    987e:	3302      	adds	r3, #2
    9880:	881b      	ldrh	r3, [r3, #0]
    9882:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    9886:	f89d 300e 	ldrb.w	r3, [sp, #14]
    988a:	4a51      	ldr	r2, [pc, #324]	; (99d0 <Adc_Ipw_StartNormalConversion+0x174>)
    988c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9890:	68da      	ldr	r2, [r3, #12]
    9892:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9896:	005b      	lsls	r3, r3, #1
    9898:	4413      	add	r3, r2
    989a:	881b      	ldrh	r3, [r3, #0]
    989c:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    98a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98a4:	4a4a      	ldr	r2, [pc, #296]	; (99d0 <Adc_Ipw_StartNormalConversion+0x174>)
    98a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98aa:	685a      	ldr	r2, [r3, #4]
    98ac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    98b0:	2134      	movs	r1, #52	; 0x34
    98b2:	fb01 f303 	mul.w	r3, r1, r3
    98b6:	4413      	add	r3, r2
    98b8:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    98ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98be:	4a44      	ldr	r2, [pc, #272]	; (99d0 <Adc_Ipw_StartNormalConversion+0x174>)
    98c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98c4:	681a      	ldr	r2, [r3, #0]
    98c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98ca:	4413      	add	r3, r2
    98cc:	7c1b      	ldrb	r3, [r3, #16]
    98ce:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    98d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    98d6:	493d      	ldr	r1, [pc, #244]	; (99cc <Adc_Ipw_StartNormalConversion+0x170>)
    98d8:	4613      	mov	r3, r2
    98da:	005b      	lsls	r3, r3, #1
    98dc:	4413      	add	r3, r2
    98de:	009b      	lsls	r3, r3, #2
    98e0:	440b      	add	r3, r1
    98e2:	881b      	ldrh	r3, [r3, #0]
    98e4:	b29b      	uxth	r3, r3
    98e6:	2b00      	cmp	r3, #0
    98e8:	d06b      	beq.n	99c2 <Adc_Ipw_StartNormalConversion+0x166>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    98ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
    98ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98f2:	9905      	ldr	r1, [sp, #20]
    98f4:	4618      	mov	r0, r3
    98f6:	f7ff fdbd 	bl	9474 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    98fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    98fe:	4935      	ldr	r1, [pc, #212]	; (99d4 <Adc_Ipw_StartNormalConversion+0x178>)
    9900:	4613      	mov	r3, r2
    9902:	009b      	lsls	r3, r3, #2
    9904:	4413      	add	r3, r2
    9906:	009b      	lsls	r3, r3, #2
    9908:	440b      	add	r3, r1
    990a:	3310      	adds	r3, #16
    990c:	2200      	movs	r2, #0
    990e:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    9910:	9b05      	ldr	r3, [sp, #20]
    9912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9916:	2b0f      	cmp	r3, #15
    9918:	d806      	bhi.n	9928 <Adc_Ipw_StartNormalConversion+0xcc>
    991a:	9b05      	ldr	r3, [sp, #20]
    991c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9920:	f003 030f 	and.w	r3, r3, #15
    9924:	b2db      	uxtb	r3, r3
    9926:	e000      	b.n	992a <Adc_Ipw_StartNormalConversion+0xce>
    9928:	2310      	movs	r3, #16
    992a:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    992e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9932:	4926      	ldr	r1, [pc, #152]	; (99cc <Adc_Ipw_StartNormalConversion+0x170>)
    9934:	4613      	mov	r3, r2
    9936:	005b      	lsls	r3, r3, #1
    9938:	4413      	add	r3, r2
    993a:	009b      	lsls	r3, r3, #2
    993c:	440b      	add	r3, r1
    993e:	330a      	adds	r3, #10
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	2b00      	cmp	r3, #0
    9944:	d10b      	bne.n	995e <Adc_Ipw_StartNormalConversion+0x102>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    9946:	f89d 200f 	ldrb.w	r2, [sp, #15]
    994a:	4920      	ldr	r1, [pc, #128]	; (99cc <Adc_Ipw_StartNormalConversion+0x170>)
    994c:	4613      	mov	r3, r2
    994e:	005b      	lsls	r3, r3, #1
    9950:	4413      	add	r3, r2
    9952:	009b      	lsls	r3, r3, #2
    9954:	440b      	add	r3, r1
    9956:	330a      	adds	r3, #10
    9958:	f89d 2012 	ldrb.w	r2, [sp, #18]
    995c:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    995e:	2300      	movs	r3, #0
    9960:	f88d 301f 	strb.w	r3, [sp, #31]
    9964:	e00c      	b.n	9980 <Adc_Ipw_StartNormalConversion+0x124>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9966:	f89d 3013 	ldrb.w	r3, [sp, #19]
    996a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    996e:	4611      	mov	r1, r2
    9970:	4618      	mov	r0, r3
    9972:	f7fe fed5 	bl	8720 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9976:	f89d 301f 	ldrb.w	r3, [sp, #31]
    997a:	3301      	adds	r3, #1
    997c:	f88d 301f 	strb.w	r3, [sp, #31]
    9980:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9984:	4911      	ldr	r1, [pc, #68]	; (99cc <Adc_Ipw_StartNormalConversion+0x170>)
    9986:	4613      	mov	r3, r2
    9988:	005b      	lsls	r3, r3, #1
    998a:	4413      	add	r3, r2
    998c:	009b      	lsls	r3, r3, #2
    998e:	440b      	add	r3, r1
    9990:	330a      	adds	r3, #10
    9992:	781b      	ldrb	r3, [r3, #0]
    9994:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9998:	429a      	cmp	r2, r3
    999a:	d3e4      	bcc.n	9966 <Adc_Ipw_StartNormalConversion+0x10a>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    999c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    99a0:	2101      	movs	r1, #1
    99a2:	4618      	mov	r0, r3
    99a4:	f7fe fd2e 	bl	8404 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    99a8:	f89d 2012 	ldrb.w	r2, [sp, #18]
    99ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    99b0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    99b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    99b8:	9300      	str	r3, [sp, #0]
    99ba:	4613      	mov	r3, r2
    99bc:	220f      	movs	r2, #15
    99be:	f7ff fd99 	bl	94f4 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    99c2:	bf00      	nop
    99c4:	b009      	add	sp, #36	; 0x24
    99c6:	f85d fb04 	ldr.w	pc, [sp], #4
    99ca:	bf00      	nop
    99cc:	1fff8d00 	.word	0x1fff8d00
    99d0:	1fff8ce8 	.word	0x1fff8ce8
    99d4:	1fff8cec 	.word	0x1fff8cec

000099d8 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    99d8:	b500      	push	{lr}
    99da:	b085      	sub	sp, #20
    99dc:	4603      	mov	r3, r0
    99de:	f88d 3007 	strb.w	r3, [sp, #7]
    99e2:	460b      	mov	r3, r1
    99e4:	f8ad 3004 	strh.w	r3, [sp, #4]
    99e8:	4613      	mov	r3, r2
    99ea:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    99ee:	2300      	movs	r3, #0
    99f0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    99f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99f8:	4a26      	ldr	r2, [pc, #152]	; (9a94 <Adc_Ipw_StopCurrentConversion+0xbc>)
    99fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99fe:	681a      	ldr	r2, [r3, #0]
    9a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a04:	4413      	add	r3, r2
    9a06:	7c1b      	ldrb	r3, [r3, #16]
    9a08:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9a0c:	2300      	movs	r3, #0
    9a0e:	f88d 300f 	strb.w	r3, [sp, #15]
    9a12:	e014      	b.n	9a3e <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9a14:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a18:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9a1c:	2200      	movs	r2, #0
    9a1e:	4618      	mov	r0, r3
    9a20:	f7fe fdba 	bl	8598 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9a24:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a28:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a2c:	4611      	mov	r1, r2
    9a2e:	4618      	mov	r0, r3
    9a30:	f7fe fe76 	bl	8720 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9a34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a38:	3301      	adds	r3, #1
    9a3a:	f88d 300f 	strb.w	r3, [sp, #15]
    9a3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9a42:	4915      	ldr	r1, [pc, #84]	; (9a98 <Adc_Ipw_StopCurrentConversion+0xc0>)
    9a44:	4613      	mov	r3, r2
    9a46:	005b      	lsls	r3, r3, #1
    9a48:	4413      	add	r3, r2
    9a4a:	009b      	lsls	r3, r3, #2
    9a4c:	440b      	add	r3, r1
    9a4e:	330a      	adds	r3, #10
    9a50:	781b      	ldrb	r3, [r3, #0]
    9a52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a56:	429a      	cmp	r2, r3
    9a58:	d3dc      	bcc.n	9a14 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9a5a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9a5e:	490f      	ldr	r1, [pc, #60]	; (9a9c <Adc_Ipw_StopCurrentConversion+0xc4>)
    9a60:	4613      	mov	r3, r2
    9a62:	009b      	lsls	r3, r3, #2
    9a64:	4413      	add	r3, r2
    9a66:	009b      	lsls	r3, r3, #2
    9a68:	440b      	add	r3, r1
    9a6a:	3310      	adds	r3, #16
    9a6c:	2200      	movs	r2, #0
    9a6e:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    9a70:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9a74:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9a78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a7c:	4618      	mov	r0, r3
    9a7e:	f7ff fc77 	bl	9370 <Adc_Ipw_StopConversionCheckTimeout>
    9a82:	4603      	mov	r3, r0
    9a84:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9a88:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9a8c:	4618      	mov	r0, r3
    9a8e:	b005      	add	sp, #20
    9a90:	f85d fb04 	ldr.w	pc, [sp], #4
    9a94:	1fff8ce8 	.word	0x1fff8ce8
    9a98:	1fff8d00 	.word	0x1fff8d00
    9a9c:	1fff8cec 	.word	0x1fff8cec

00009aa0 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9aa0:	b500      	push	{lr}
    9aa2:	b085      	sub	sp, #20
    9aa4:	4603      	mov	r3, r0
    9aa6:	f88d 3007 	strb.w	r3, [sp, #7]
    9aaa:	460b      	mov	r3, r1
    9aac:	f88d 3006 	strb.w	r3, [sp, #6]
    9ab0:	4613      	mov	r3, r2
    9ab2:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9ab6:	2301      	movs	r3, #1
    9ab8:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9abc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ac0:	f88d 300f 	strb.w	r3, [sp, #15]
    9ac4:	e019      	b.n	9afa <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9ac6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9aca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9ace:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ad2:	1ad3      	subs	r3, r2, r3
    9ad4:	b2db      	uxtb	r3, r3
    9ad6:	4619      	mov	r1, r3
    9ad8:	f7fe fe08 	bl	86ec <Adc_Ip_GetConvCompleteFlag>
    9adc:	4603      	mov	r3, r0
    9ade:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9ae2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ae6:	f083 0301 	eor.w	r3, r3, #1
    9aea:	b2db      	uxtb	r3, r3
    9aec:	2b00      	cmp	r3, #0
    9aee:	d10b      	bne.n	9b08 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9af0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9af4:	3301      	adds	r3, #1
    9af6:	f88d 300f 	strb.w	r3, [sp, #15]
    9afa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9afe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b02:	429a      	cmp	r2, r3
    9b04:	d3df      	bcc.n	9ac6 <Adc_Ipw_CheckValidConversion+0x26>
    9b06:	e000      	b.n	9b0a <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9b08:	bf00      	nop
        }
    }

    return ValidConversion;
    9b0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9b0e:	4618      	mov	r0, r3
    9b10:	b005      	add	sp, #20
    9b12:	f85d fb04 	ldr.w	pc, [sp], #4

00009b16 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9b16:	b500      	push	{lr}
    9b18:	b089      	sub	sp, #36	; 0x24
    9b1a:	9102      	str	r1, [sp, #8]
    9b1c:	9201      	str	r2, [sp, #4]
    9b1e:	461a      	mov	r2, r3
    9b20:	4603      	mov	r3, r0
    9b22:	f8ad 300e 	strh.w	r3, [sp, #14]
    9b26:	4613      	mov	r3, r2
    9b28:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9b2c:	2300      	movs	r3, #0
    9b2e:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9b32:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b36:	4a35      	ldr	r2, [pc, #212]	; (9c0c <Adc_Ipw_ReadGroup+0xf6>)
    9b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b3c:	68da      	ldr	r2, [r3, #12]
    9b3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b42:	005b      	lsls	r3, r3, #1
    9b44:	4413      	add	r3, r2
    9b46:	881b      	ldrh	r3, [r3, #0]
    9b48:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9b4c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b50:	4a2e      	ldr	r2, [pc, #184]	; (9c0c <Adc_Ipw_ReadGroup+0xf6>)
    9b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b56:	685a      	ldr	r2, [r3, #4]
    9b58:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9b5c:	2134      	movs	r1, #52	; 0x34
    9b5e:	fb01 f303 	mul.w	r3, r1, r3
    9b62:	4413      	add	r3, r2
    9b64:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9b66:	9b06      	ldr	r3, [sp, #24]
    9b68:	789b      	ldrb	r3, [r3, #2]
    9b6a:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9b6e:	9b06      	ldr	r3, [sp, #24]
    9b70:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9b74:	2b01      	cmp	r3, #1
    9b76:	d128      	bne.n	9bca <Adc_Ipw_ReadGroup+0xb4>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9b78:	9b06      	ldr	r3, [sp, #24]
    9b7a:	68db      	ldr	r3, [r3, #12]
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d115      	bne.n	9bac <Adc_Ipw_ReadGroup+0x96>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9b80:	9b06      	ldr	r3, [sp, #24]
    9b82:	695b      	ldr	r3, [r3, #20]
    9b84:	2b00      	cmp	r3, #0
    9b86:	d111      	bne.n	9bac <Adc_Ipw_ReadGroup+0x96>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9b88:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9b8c:	4920      	ldr	r1, [pc, #128]	; (9c10 <Adc_Ipw_ReadGroup+0xfa>)
    9b8e:	4613      	mov	r3, r2
    9b90:	005b      	lsls	r3, r3, #1
    9b92:	4413      	add	r3, r2
    9b94:	009b      	lsls	r3, r3, #2
    9b96:	440b      	add	r3, r1
    9b98:	3302      	adds	r3, #2
    9b9a:	881b      	ldrh	r3, [r3, #0]
    9b9c:	b29b      	uxth	r3, r3
    9b9e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9ba2:	429a      	cmp	r2, r3
    9ba4:	d002      	beq.n	9bac <Adc_Ipw_ReadGroup+0x96>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9ba6:	2301      	movs	r3, #1
    9ba8:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9bac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	d124      	bne.n	9bfe <Adc_Ipw_ReadGroup+0xe8>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9bb4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9bb8:	9a01      	ldr	r2, [sp, #4]
    9bba:	9902      	ldr	r1, [sp, #8]
    9bbc:	9806      	ldr	r0, [sp, #24]
    9bbe:	f7ff f8fb 	bl	8db8 <Adc_Ipw_ReadGroupNoInt>
    9bc2:	4603      	mov	r3, r0
    9bc4:	f88d 301f 	strb.w	r3, [sp, #31]
    9bc8:	e019      	b.n	9bfe <Adc_Ipw_ReadGroup+0xe8>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9bca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9bce:	4911      	ldr	r1, [pc, #68]	; (9c14 <Adc_Ipw_ReadGroup+0xfe>)
    9bd0:	4613      	mov	r3, r2
    9bd2:	009b      	lsls	r3, r3, #2
    9bd4:	4413      	add	r3, r2
    9bd6:	009b      	lsls	r3, r3, #2
    9bd8:	440b      	add	r3, r1
    9bda:	681b      	ldr	r3, [r3, #0]
    9bdc:	2b01      	cmp	r3, #1
    9bde:	d102      	bne.n	9be6 <Adc_Ipw_ReadGroup+0xd0>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9be0:	2301      	movs	r3, #1
    9be2:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9be6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9bea:	2b00      	cmp	r3, #0
    9bec:	d107      	bne.n	9bfe <Adc_Ipw_ReadGroup+0xe8>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9bee:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9bf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9bf6:	9902      	ldr	r1, [sp, #8]
    9bf8:	4618      	mov	r0, r3
    9bfa:	f7ff f925 	bl	8e48 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9bfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9c02:	4618      	mov	r0, r3
    9c04:	b009      	add	sp, #36	; 0x24
    9c06:	f85d fb04 	ldr.w	pc, [sp], #4
    9c0a:	bf00      	nop
    9c0c:	1fff8ce8 	.word	0x1fff8ce8
    9c10:	1fff8d00 	.word	0x1fff8d00
    9c14:	1fff8cec 	.word	0x1fff8cec

00009c18 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9c18:	b500      	push	{lr}
    9c1a:	b085      	sub	sp, #20
    9c1c:	4603      	mov	r3, r0
    9c1e:	9100      	str	r1, [sp, #0]
    9c20:	f88d 3007 	strb.w	r3, [sp, #7]
    9c24:	4613      	mov	r3, r2
    9c26:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9c2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c2e:	4a0e      	ldr	r2, [pc, #56]	; (9c68 <Adc_Ipw_Calibrate+0x50>)
    9c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c34:	681a      	ldr	r2, [r3, #0]
    9c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c3a:	4413      	add	r3, r2
    9c3c:	7c1b      	ldrb	r3, [r3, #16]
    9c3e:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9c42:	9b00      	ldr	r3, [sp, #0]
    9c44:	2200      	movs	r2, #0
    9c46:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9c48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c4c:	4618      	mov	r0, r3
    9c4e:	f7fe fd7f 	bl	8750 <Adc_Ip_DoCalibration>
    9c52:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9c54:	9b02      	ldr	r3, [sp, #8]
    9c56:	2b00      	cmp	r3, #0
    9c58:	d002      	beq.n	9c60 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9c5a:	9b00      	ldr	r3, [sp, #0]
    9c5c:	2201      	movs	r2, #1
    9c5e:	701a      	strb	r2, [r3, #0]
    }
}
    9c60:	bf00      	nop
    9c62:	b005      	add	sp, #20
    9c64:	f85d fb04 	ldr.w	pc, [sp], #4
    9c68:	1fff8ce8 	.word	0x1fff8ce8

00009c6c <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9c6c:	2300      	movs	r3, #0
}
    9c6e:	4618      	mov	r0, r3
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop

00009c74 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9c74:	b500      	push	{lr}
    9c76:	b083      	sub	sp, #12
    9c78:	4603      	mov	r3, r0
    9c7a:	460a      	mov	r2, r1
    9c7c:	f88d 3007 	strb.w	r3, [sp, #7]
    9c80:	4613      	mov	r3, r2
    9c82:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9c86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c8a:	2100      	movs	r1, #0
    9c8c:	4618      	mov	r0, r3
    9c8e:	f7fe ffb9 	bl	8c04 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9c92:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9c96:	490b      	ldr	r1, [pc, #44]	; (9cc4 <Adc_Ipw_UpdateQueue+0x50>)
    9c98:	4613      	mov	r3, r2
    9c9a:	005b      	lsls	r3, r3, #1
    9c9c:	4413      	add	r3, r2
    9c9e:	009b      	lsls	r3, r3, #2
    9ca0:	440b      	add	r3, r1
    9ca2:	881b      	ldrh	r3, [r3, #0]
    9ca4:	b29b      	uxth	r3, r3
    9ca6:	2b00      	cmp	r3, #0
    9ca8:	d007      	beq.n	9cba <Adc_Ipw_UpdateQueue+0x46>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9caa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cb2:	4611      	mov	r1, r2
    9cb4:	4618      	mov	r0, r3
    9cb6:	f7ff fdd1 	bl	985c <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9cba:	bf00      	nop
    9cbc:	b003      	add	sp, #12
    9cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    9cc2:	bf00      	nop
    9cc4:	1fff8d00 	.word	0x1fff8d00

00009cc8 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9cc8:	b510      	push	{r4, lr}
    9cca:	b08a      	sub	sp, #40	; 0x28
    9ccc:	4604      	mov	r4, r0
    9cce:	4608      	mov	r0, r1
    9cd0:	4611      	mov	r1, r2
    9cd2:	461a      	mov	r2, r3
    9cd4:	4623      	mov	r3, r4
    9cd6:	f88d 300f 	strb.w	r3, [sp, #15]
    9cda:	4603      	mov	r3, r0
    9cdc:	f8ad 300c 	strh.w	r3, [sp, #12]
    9ce0:	460b      	mov	r3, r1
    9ce2:	f8ad 300a 	strh.w	r3, [sp, #10]
    9ce6:	4613      	mov	r3, r2
    9ce8:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9cec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cf0:	4a68      	ldr	r2, [pc, #416]	; (9e94 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf6:	68da      	ldr	r2, [r3, #12]
    9cf8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9cfc:	005b      	lsls	r3, r3, #1
    9cfe:	4413      	add	r3, r2
    9d00:	881b      	ldrh	r3, [r3, #0]
    9d02:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9d06:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d0a:	4963      	ldr	r1, [pc, #396]	; (9e98 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d0c:	4613      	mov	r3, r2
    9d0e:	009b      	lsls	r3, r3, #2
    9d10:	4413      	add	r3, r2
    9d12:	009b      	lsls	r3, r3, #2
    9d14:	440b      	add	r3, r1
    9d16:	3310      	adds	r3, #16
    9d18:	781b      	ldrb	r3, [r3, #0]
    9d1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9d1e:	2300      	movs	r3, #0
    9d20:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9d22:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d26:	4a5b      	ldr	r2, [pc, #364]	; (9e94 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d2c:	681a      	ldr	r2, [r3, #0]
    9d2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d32:	4413      	add	r3, r2
    9d34:	7c1b      	ldrb	r3, [r3, #16]
    9d36:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9d3a:	2300      	movs	r3, #0
    9d3c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9d40:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d44:	4a53      	ldr	r2, [pc, #332]	; (9e94 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d4a:	681b      	ldr	r3, [r3, #0]
    9d4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d54:	695b      	ldr	r3, [r3, #20]
    9d56:	4618      	mov	r0, r3
    9d58:	f7ff fbc2 	bl	94e0 <Adc_Ipw_CalculateNumsBitShift>
    9d5c:	4603      	mov	r3, r0
    9d5e:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9d62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d66:	4a4b      	ldr	r2, [pc, #300]	; (9e94 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d6c:	685a      	ldr	r2, [r3, #4]
    9d6e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9d72:	2134      	movs	r1, #52	; 0x34
    9d74:	fb01 f303 	mul.w	r3, r1, r3
    9d78:	4413      	add	r3, r2
    9d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9d7e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9d82:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9d86:	4a43      	ldr	r2, [pc, #268]	; (9e94 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d8c:	685a      	ldr	r2, [r3, #4]
    9d8e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9d92:	2134      	movs	r1, #52	; 0x34
    9d94:	fb01 f303 	mul.w	r3, r1, r3
    9d98:	4413      	add	r3, r2
    9d9a:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9d9c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9da0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9da4:	429a      	cmp	r2, r3
    9da6:	d870      	bhi.n	9e8a <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9da8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9dac:	f003 030f 	and.w	r3, r3, #15
    9db0:	b2db      	uxtb	r3, r3
    9db2:	2b00      	cmp	r3, #0
    9db4:	d104      	bne.n	9dc0 <Adc_Ipw_CheckConversionChannels+0xf8>
    9db6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9dba:	3b10      	subs	r3, #16
    9dbc:	b2db      	uxtb	r3, r3
    9dbe:	e004      	b.n	9dca <Adc_Ipw_CheckConversionChannels+0x102>
    9dc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9dc4:	f023 030f 	bic.w	r3, r3, #15
    9dc8:	b2db      	uxtb	r3, r3
    9dca:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9dce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9dd2:	4931      	ldr	r1, [pc, #196]	; (9e98 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9dd4:	4613      	mov	r3, r2
    9dd6:	009b      	lsls	r3, r3, #2
    9dd8:	4413      	add	r3, r2
    9dda:	009b      	lsls	r3, r3, #2
    9ddc:	440b      	add	r3, r1
    9dde:	330c      	adds	r3, #12
    9de0:	6819      	ldr	r1, [r3, #0]
    9de2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9de6:	482c      	ldr	r0, [pc, #176]	; (9e98 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9de8:	4613      	mov	r3, r2
    9dea:	009b      	lsls	r3, r3, #2
    9dec:	4413      	add	r3, r2
    9dee:	009b      	lsls	r3, r3, #2
    9df0:	4403      	add	r3, r0
    9df2:	3308      	adds	r3, #8
    9df4:	881b      	ldrh	r3, [r3, #0]
    9df6:	b29b      	uxth	r3, r3
    9df8:	005b      	lsls	r3, r3, #1
    9dfa:	440b      	add	r3, r1
    9dfc:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9dfe:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9e02:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9e06:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9e0a:	4618      	mov	r0, r3
    9e0c:	f7ff fe48 	bl	9aa0 <Adc_Ipw_CheckValidConversion>
    9e10:	4603      	mov	r3, r0
    9e12:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9e16:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d032      	beq.n	9e84 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9e1e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9e22:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9e26:	e026      	b.n	9e76 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    9e28:	f89d 001b 	ldrb.w	r0, [sp, #27]
    9e2c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9e30:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9e34:	1ad3      	subs	r3, r2, r3
    9e36:	b2db      	uxtb	r3, r3
    9e38:	4619      	mov	r1, r3
    9e3a:	f7fe fc71 	bl	8720 <Adc_Ip_GetConvData>
    9e3e:	4603      	mov	r3, r0
    9e40:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    9e44:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9e48:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9e4c:	fa02 f303 	lsl.w	r3, r2, r3
    9e50:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    9e54:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9e58:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    9e5c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9e60:	9300      	str	r3, [sp, #0]
    9e62:	460b      	mov	r3, r1
    9e64:	9907      	ldr	r1, [sp, #28]
    9e66:	9805      	ldr	r0, [sp, #20]
    9e68:	f000 fa02 	bl	a270 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    9e6c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9e70:	3301      	adds	r3, #1
    9e72:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9e76:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9e7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9e7e:	429a      	cmp	r2, r3
    9e80:	d3d2      	bcc.n	9e28 <Adc_Ipw_CheckConversionChannels+0x160>
    9e82:	e002      	b.n	9e8a <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    9e84:	2301      	movs	r3, #1
    9e86:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    9e8a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    9e8e:	4618      	mov	r0, r3
    9e90:	b00a      	add	sp, #40	; 0x28
    9e92:	bd10      	pop	{r4, pc}
    9e94:	1fff8ce8 	.word	0x1fff8ce8
    9e98:	1fff8cec 	.word	0x1fff8cec

00009e9c <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9e9c:	b500      	push	{lr}
    9e9e:	b087      	sub	sp, #28
    9ea0:	4603      	mov	r3, r0
    9ea2:	f88d 300f 	strb.w	r3, [sp, #15]
    9ea6:	460b      	mov	r3, r1
    9ea8:	f8ad 300c 	strh.w	r3, [sp, #12]
    9eac:	4613      	mov	r3, r2
    9eae:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9eb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9eb6:	4a33      	ldr	r2, [pc, #204]	; (9f84 <Adc_Ipw_RestartConversion+0xe8>)
    9eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ebc:	68da      	ldr	r2, [r3, #12]
    9ebe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9ec2:	005b      	lsls	r3, r3, #1
    9ec4:	4413      	add	r3, r2
    9ec6:	881b      	ldrh	r3, [r3, #0]
    9ec8:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9ecc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ed0:	4a2c      	ldr	r2, [pc, #176]	; (9f84 <Adc_Ipw_RestartConversion+0xe8>)
    9ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ed6:	681a      	ldr	r2, [r3, #0]
    9ed8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9edc:	4413      	add	r3, r2
    9ede:	7c1b      	ldrb	r3, [r3, #16]
    9ee0:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9ee4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ee8:	4a26      	ldr	r2, [pc, #152]	; (9f84 <Adc_Ipw_RestartConversion+0xe8>)
    9eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eee:	685a      	ldr	r2, [r3, #4]
    9ef0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9ef4:	2134      	movs	r1, #52	; 0x34
    9ef6:	fb01 f303 	mul.w	r3, r1, r3
    9efa:	4413      	add	r3, r2
    9efc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9f00:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    9f04:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f08:	2b0f      	cmp	r3, #15
    9f0a:	d805      	bhi.n	9f18 <Adc_Ipw_RestartConversion+0x7c>
    9f0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f10:	f003 030f 	and.w	r3, r3, #15
    9f14:	b2db      	uxtb	r3, r3
    9f16:	e000      	b.n	9f1a <Adc_Ipw_RestartConversion+0x7e>
    9f18:	2310      	movs	r3, #16
    9f1a:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    9f1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f22:	2b10      	cmp	r3, #16
    9f24:	d811      	bhi.n	9f4a <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    9f26:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9f2a:	4917      	ldr	r1, [pc, #92]	; (9f88 <Adc_Ipw_RestartConversion+0xec>)
    9f2c:	4613      	mov	r3, r2
    9f2e:	009b      	lsls	r3, r3, #2
    9f30:	4413      	add	r3, r2
    9f32:	009b      	lsls	r3, r3, #2
    9f34:	440b      	add	r3, r1
    9f36:	3310      	adds	r3, #16
    9f38:	f89d 2014 	ldrb.w	r2, [sp, #20]
    9f3c:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9f3e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9f42:	4618      	mov	r0, r3
    9f44:	f000 fc60 	bl	a808 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    9f48:	e017      	b.n	9f7a <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9f4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9f4e:	490e      	ldr	r1, [pc, #56]	; (9f88 <Adc_Ipw_RestartConversion+0xec>)
    9f50:	4613      	mov	r3, r2
    9f52:	009b      	lsls	r3, r3, #2
    9f54:	4413      	add	r3, r2
    9f56:	009b      	lsls	r3, r3, #2
    9f58:	440b      	add	r3, r1
    9f5a:	3310      	adds	r3, #16
    9f5c:	2200      	movs	r2, #0
    9f5e:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9f60:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9f64:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9f68:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9f6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9f70:	9300      	str	r3, [sp, #0]
    9f72:	4613      	mov	r3, r2
    9f74:	220f      	movs	r2, #15
    9f76:	f7ff fabd 	bl	94f4 <Adc_Ipw_ConfigureConversion>
}
    9f7a:	bf00      	nop
    9f7c:	b007      	add	sp, #28
    9f7e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f82:	bf00      	nop
    9f84:	1fff8ce8 	.word	0x1fff8ce8
    9f88:	1fff8cec 	.word	0x1fff8cec

00009f8c <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    9f8c:	b084      	sub	sp, #16
    9f8e:	4603      	mov	r3, r0
    9f90:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    9f94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9f98:	4907      	ldr	r1, [pc, #28]	; (9fb8 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    9f9a:	4613      	mov	r3, r2
    9f9c:	009b      	lsls	r3, r3, #2
    9f9e:	4413      	add	r3, r2
    9fa0:	009b      	lsls	r3, r3, #2
    9fa2:	440b      	add	r3, r1
    9fa4:	3308      	adds	r3, #8
    9fa6:	881b      	ldrh	r3, [r3, #0]
    9fa8:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    9fac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    9fb0:	4618      	mov	r0, r3
    9fb2:	b004      	add	sp, #16
    9fb4:	4770      	bx	lr
    9fb6:	bf00      	nop
    9fb8:	1fff8cec 	.word	0x1fff8cec

00009fbc <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    9fbc:	b510      	push	{r4, lr}
    9fbe:	b084      	sub	sp, #16
    9fc0:	4604      	mov	r4, r0
    9fc2:	4608      	mov	r0, r1
    9fc4:	4611      	mov	r1, r2
    9fc6:	461a      	mov	r2, r3
    9fc8:	4623      	mov	r3, r4
    9fca:	f88d 3007 	strb.w	r3, [sp, #7]
    9fce:	4603      	mov	r3, r0
    9fd0:	f8ad 3004 	strh.w	r3, [sp, #4]
    9fd4:	460b      	mov	r3, r1
    9fd6:	f8ad 3002 	strh.w	r3, [sp, #2]
    9fda:	4613      	mov	r3, r2
    9fdc:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9fe0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fe4:	4a4f      	ldr	r2, [pc, #316]	; (a124 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fea:	68da      	ldr	r2, [r3, #12]
    9fec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9ff0:	005b      	lsls	r3, r3, #1
    9ff2:	4413      	add	r3, r2
    9ff4:	881b      	ldrh	r3, [r3, #0]
    9ff6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9ffa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9ffe:	494a      	ldr	r1, [pc, #296]	; (a128 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a000:	4613      	mov	r3, r2
    a002:	009b      	lsls	r3, r3, #2
    a004:	4413      	add	r3, r2
    a006:	009b      	lsls	r3, r3, #2
    a008:	440b      	add	r3, r1
    a00a:	3304      	adds	r3, #4
    a00c:	2201      	movs	r2, #1
    a00e:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    a010:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a014:	4944      	ldr	r1, [pc, #272]	; (a128 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a016:	4613      	mov	r3, r2
    a018:	009b      	lsls	r3, r3, #2
    a01a:	4413      	add	r3, r2
    a01c:	009b      	lsls	r3, r3, #2
    a01e:	440b      	add	r3, r1
    a020:	681b      	ldr	r3, [r3, #0]
    a022:	2b01      	cmp	r3, #1
    a024:	d109      	bne.n	a03a <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    a026:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a02a:	493f      	ldr	r1, [pc, #252]	; (a128 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a02c:	4613      	mov	r3, r2
    a02e:	009b      	lsls	r3, r3, #2
    a030:	4413      	add	r3, r2
    a032:	009b      	lsls	r3, r3, #2
    a034:	440b      	add	r3, r1
    a036:	2202      	movs	r2, #2
    a038:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    a03a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a03e:	4618      	mov	r0, r3
    a040:	f7ff ffa4 	bl	9f8c <Adc_Ipw_GetCurrentSampleCount>
    a044:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    a046:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a04a:	9a02      	ldr	r2, [sp, #8]
    a04c:	429a      	cmp	r2, r3
    a04e:	d35d      	bcc.n	a10c <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    a050:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a054:	4934      	ldr	r1, [pc, #208]	; (a128 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a056:	4613      	mov	r3, r2
    a058:	009b      	lsls	r3, r3, #2
    a05a:	4413      	add	r3, r2
    a05c:	009b      	lsls	r3, r3, #2
    a05e:	440b      	add	r3, r1
    a060:	2203      	movs	r2, #3
    a062:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a064:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a068:	4a2e      	ldr	r2, [pc, #184]	; (a124 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a06e:	685a      	ldr	r2, [r3, #4]
    a070:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a074:	2134      	movs	r1, #52	; 0x34
    a076:	fb01 f303 	mul.w	r3, r1, r3
    a07a:	4413      	add	r3, r2
    a07c:	699b      	ldr	r3, [r3, #24]
    a07e:	2b00      	cmp	r3, #0
    a080:	d117      	bne.n	a0b2 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    a082:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a086:	4a27      	ldr	r2, [pc, #156]	; (a124 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08c:	685a      	ldr	r2, [r3, #4]
    a08e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a092:	2134      	movs	r1, #52	; 0x34
    a094:	fb01 f303 	mul.w	r3, r1, r3
    a098:	4413      	add	r3, r2
    a09a:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a09c:	2b01      	cmp	r3, #1
    a09e:	d108      	bne.n	a0b2 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a0a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a0a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a0a8:	4611      	mov	r1, r2
    a0aa:	4618      	mov	r0, r3
    a0ac:	f7ff fde2 	bl	9c74 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a0b0:	e035      	b.n	a11e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a0b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0b6:	4a1b      	ldr	r2, [pc, #108]	; (a124 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0bc:	685a      	ldr	r2, [r3, #4]
    a0be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a0c2:	2134      	movs	r1, #52	; 0x34
    a0c4:	fb01 f303 	mul.w	r3, r1, r3
    a0c8:	4413      	add	r3, r2
    a0ca:	689b      	ldr	r3, [r3, #8]
    a0cc:	2b01      	cmp	r3, #1
    a0ce:	d114      	bne.n	a0fa <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a0d0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a0d4:	4914      	ldr	r1, [pc, #80]	; (a128 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a0d6:	4613      	mov	r3, r2
    a0d8:	009b      	lsls	r3, r3, #2
    a0da:	4413      	add	r3, r2
    a0dc:	009b      	lsls	r3, r3, #2
    a0de:	440b      	add	r3, r1
    a0e0:	3308      	adds	r3, #8
    a0e2:	2200      	movs	r2, #0
    a0e4:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a0e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a0ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a0ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a0f2:	4618      	mov	r0, r3
    a0f4:	f7ff fed2 	bl	9e9c <Adc_Ipw_RestartConversion>
}
    a0f8:	e011      	b.n	a11e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a0fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a0fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a102:	4611      	mov	r1, r2
    a104:	4618      	mov	r0, r3
    a106:	f7ff fdb5 	bl	9c74 <Adc_Ipw_UpdateQueue>
}
    a10a:	e008      	b.n	a11e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a10c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a110:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a114:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a118:	4618      	mov	r0, r3
    a11a:	f7ff febf 	bl	9e9c <Adc_Ipw_RestartConversion>
}
    a11e:	bf00      	nop
    a120:	b004      	add	sp, #16
    a122:	bd10      	pop	{r4, pc}
    a124:	1fff8ce8 	.word	0x1fff8ce8
    a128:	1fff8cec 	.word	0x1fff8cec

0000a12c <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a12c:	b510      	push	{r4, lr}
    a12e:	b088      	sub	sp, #32
    a130:	4604      	mov	r4, r0
    a132:	4608      	mov	r0, r1
    a134:	4611      	mov	r1, r2
    a136:	461a      	mov	r2, r3
    a138:	4623      	mov	r3, r4
    a13a:	f88d 300f 	strb.w	r3, [sp, #15]
    a13e:	4603      	mov	r3, r0
    a140:	f8ad 300c 	strh.w	r3, [sp, #12]
    a144:	460b      	mov	r3, r1
    a146:	f88d 300e 	strb.w	r3, [sp, #14]
    a14a:	4613      	mov	r3, r2
    a14c:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a150:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a154:	4a44      	ldr	r2, [pc, #272]	; (a268 <Adc_Ipw_EndConversion+0x13c>)
    a156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15a:	68da      	ldr	r2, [r3, #12]
    a15c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a160:	005b      	lsls	r3, r3, #1
    a162:	4413      	add	r3, r2
    a164:	881b      	ldrh	r3, [r3, #0]
    a166:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a16a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a16e:	4a3e      	ldr	r2, [pc, #248]	; (a268 <Adc_Ipw_EndConversion+0x13c>)
    a170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a174:	685a      	ldr	r2, [r3, #4]
    a176:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a17a:	2134      	movs	r1, #52	; 0x34
    a17c:	fb01 f303 	mul.w	r3, r1, r3
    a180:	4413      	add	r3, r2
    a182:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a184:	9b06      	ldr	r3, [sp, #24]
    a186:	8b9a      	ldrh	r2, [r3, #28]
    a188:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a18c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a190:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a194:	f7ff fd98 	bl	9cc8 <Adc_Ipw_CheckConversionChannels>
    a198:	4603      	mov	r3, r0
    a19a:	2b00      	cmp	r3, #0
    a19c:	d160      	bne.n	a260 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a19e:	9b06      	ldr	r3, [sp, #24]
    a1a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a1a4:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a1a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a1ac:	492f      	ldr	r1, [pc, #188]	; (a26c <Adc_Ipw_EndConversion+0x140>)
    a1ae:	4613      	mov	r3, r2
    a1b0:	009b      	lsls	r3, r3, #2
    a1b2:	4413      	add	r3, r2
    a1b4:	009b      	lsls	r3, r3, #2
    a1b6:	440b      	add	r3, r1
    a1b8:	3310      	adds	r3, #16
    a1ba:	781b      	ldrb	r3, [r3, #0]
    a1bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a1c0:	429a      	cmp	r2, r3
    a1c2:	d929      	bls.n	a218 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a1c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a1c8:	4928      	ldr	r1, [pc, #160]	; (a26c <Adc_Ipw_EndConversion+0x140>)
    a1ca:	4613      	mov	r3, r2
    a1cc:	009b      	lsls	r3, r3, #2
    a1ce:	4413      	add	r3, r2
    a1d0:	009b      	lsls	r3, r3, #2
    a1d2:	440b      	add	r3, r1
    a1d4:	3310      	adds	r3, #16
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a1dc:	1ad3      	subs	r3, r2, r3
    a1de:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a1e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1e6:	2b0f      	cmp	r3, #15
    a1e8:	d805      	bhi.n	a1f6 <Adc_Ipw_EndConversion+0xca>
    a1ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1ee:	f003 030f 	and.w	r3, r3, #15
    a1f2:	b2db      	uxtb	r3, r3
    a1f4:	e000      	b.n	a1f8 <Adc_Ipw_EndConversion+0xcc>
    a1f6:	2310      	movs	r3, #16
    a1f8:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a1fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a200:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a204:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a208:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a20c:	9300      	str	r3, [sp, #0]
    a20e:	4613      	mov	r3, r2
    a210:	220f      	movs	r2, #15
    a212:	f7ff f96f 	bl	94f4 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a216:	e023      	b.n	a260 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a218:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a21c:	4913      	ldr	r1, [pc, #76]	; (a26c <Adc_Ipw_EndConversion+0x140>)
    a21e:	4613      	mov	r3, r2
    a220:	009b      	lsls	r3, r3, #2
    a222:	4413      	add	r3, r2
    a224:	009b      	lsls	r3, r3, #2
    a226:	440b      	add	r3, r1
    a228:	3308      	adds	r3, #8
    a22a:	881b      	ldrh	r3, [r3, #0]
    a22c:	b29b      	uxth	r3, r3
    a22e:	3301      	adds	r3, #1
    a230:	b298      	uxth	r0, r3
    a232:	490e      	ldr	r1, [pc, #56]	; (a26c <Adc_Ipw_EndConversion+0x140>)
    a234:	4613      	mov	r3, r2
    a236:	009b      	lsls	r3, r3, #2
    a238:	4413      	add	r3, r2
    a23a:	009b      	lsls	r3, r3, #2
    a23c:	440b      	add	r3, r1
    a23e:	3308      	adds	r3, #8
    a240:	4602      	mov	r2, r0
    a242:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a244:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a248:	2b00      	cmp	r3, #0
    a24a:	d009      	beq.n	a260 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a24c:	9b06      	ldr	r3, [sp, #24]
    a24e:	8b9a      	ldrh	r2, [r3, #28]
    a250:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a254:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a258:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a25c:	f7ff feae 	bl	9fbc <Adc_Ipw_UpdateSoftwareGroupState>
}
    a260:	bf00      	nop
    a262:	b008      	add	sp, #32
    a264:	bd10      	pop	{r4, pc}
    a266:	bf00      	nop
    a268:	1fff8ce8 	.word	0x1fff8ce8
    a26c:	1fff8cec 	.word	0x1fff8cec

0000a270 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a270:	b084      	sub	sp, #16
    a272:	9003      	str	r0, [sp, #12]
    a274:	9102      	str	r1, [sp, #8]
    a276:	4611      	mov	r1, r2
    a278:	461a      	mov	r2, r3
    a27a:	460b      	mov	r3, r1
    a27c:	f8ad 3006 	strh.w	r3, [sp, #6]
    a280:	4613      	mov	r3, r2
    a282:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a286:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a28a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a28e:	fb02 f303 	mul.w	r3, r2, r3
    a292:	005b      	lsls	r3, r3, #1
    a294:	9a02      	ldr	r2, [sp, #8]
    a296:	4413      	add	r3, r2
    a298:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a29c:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a29e:	bf00      	nop
    a2a0:	b004      	add	sp, #16
    a2a2:	4770      	bx	lr

0000a2a4 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a2a4:	b500      	push	{lr}
    a2a6:	b085      	sub	sp, #20
    a2a8:	4603      	mov	r3, r0
    a2aa:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a2ae:	f7ff fcdd 	bl	9c6c <Adc_GetCoreID>
    a2b2:	4603      	mov	r3, r0
    a2b4:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a2b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2bc:	b2db      	uxtb	r3, r3
    a2be:	461a      	mov	r2, r3
    a2c0:	4b18      	ldr	r3, [pc, #96]	; (a324 <Adc_Ipw_EndConversionNotification+0x80>)
    a2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2c6:	681a      	ldr	r2, [r3, #0]
    a2c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2cc:	4413      	add	r3, r2
    a2ce:	f893 3020 	ldrb.w	r3, [r3, #32]
    a2d2:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a2d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a2da:	4913      	ldr	r1, [pc, #76]	; (a328 <Adc_Ipw_EndConversionNotification+0x84>)
    a2dc:	4613      	mov	r3, r2
    a2de:	005b      	lsls	r3, r3, #1
    a2e0:	4413      	add	r3, r2
    a2e2:	009b      	lsls	r3, r3, #2
    a2e4:	440b      	add	r3, r1
    a2e6:	3302      	adds	r3, #2
    a2e8:	881b      	ldrh	r3, [r3, #0]
    a2ea:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a2ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a2f2:	490d      	ldr	r1, [pc, #52]	; (a328 <Adc_Ipw_EndConversionNotification+0x84>)
    a2f4:	4613      	mov	r3, r2
    a2f6:	005b      	lsls	r3, r3, #1
    a2f8:	4413      	add	r3, r2
    a2fa:	009b      	lsls	r3, r3, #2
    a2fc:	440b      	add	r3, r1
    a2fe:	881b      	ldrh	r3, [r3, #0]
    a300:	b29b      	uxth	r3, r3
    a302:	2b00      	cmp	r3, #0
    a304:	d009      	beq.n	a31a <Adc_Ipw_EndConversionNotification+0x76>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a306:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a30a:	b2db      	uxtb	r3, r3
    a30c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a310:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a314:	2201      	movs	r2, #1
    a316:	f7ff ff09 	bl	a12c <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a31a:	bf00      	nop
    a31c:	b005      	add	sp, #20
    a31e:	f85d fb04 	ldr.w	pc, [sp], #4
    a322:	bf00      	nop
    a324:	1fff8ce8 	.word	0x1fff8ce8
    a328:	1fff8d00 	.word	0x1fff8d00

0000a32c <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a32c:	b500      	push	{lr}
    a32e:	b085      	sub	sp, #20
    a330:	4603      	mov	r3, r0
    a332:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a336:	2300      	movs	r3, #0
    a338:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a33c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a340:	4618      	mov	r0, r3
    a342:	f7ff ffaf 	bl	a2a4 <Adc_Ipw_EndConversionNotification>
}
    a346:	bf00      	nop
    a348:	b005      	add	sp, #20
    a34a:	f85d fb04 	ldr.w	pc, [sp], #4
    a34e:	bf00      	nop

0000a350 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a350:	b084      	sub	sp, #16
    a352:	9003      	str	r0, [sp, #12]
    a354:	9201      	str	r2, [sp, #4]
    a356:	461a      	mov	r2, r3
    a358:	460b      	mov	r3, r1
    a35a:	f88d 300b 	strb.w	r3, [sp, #11]
    a35e:	4613      	mov	r3, r2
    a360:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a364:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a368:	2b00      	cmp	r3, #0
    a36a:	d016      	beq.n	a39a <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a36c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a370:	9903      	ldr	r1, [sp, #12]
    a372:	4613      	mov	r3, r2
    a374:	009b      	lsls	r3, r3, #2
    a376:	4413      	add	r3, r2
    a378:	00db      	lsls	r3, r3, #3
    a37a:	440b      	add	r3, r1
    a37c:	3310      	adds	r3, #16
    a37e:	6819      	ldr	r1, [r3, #0]
    a380:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a384:	9b01      	ldr	r3, [sp, #4]
    a386:	4319      	orrs	r1, r3
    a388:	9803      	ldr	r0, [sp, #12]
    a38a:	4613      	mov	r3, r2
    a38c:	009b      	lsls	r3, r3, #2
    a38e:	4413      	add	r3, r2
    a390:	00db      	lsls	r3, r3, #3
    a392:	4403      	add	r3, r0
    a394:	3310      	adds	r3, #16
    a396:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a398:	e016      	b.n	a3c8 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a39a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a39e:	9903      	ldr	r1, [sp, #12]
    a3a0:	4613      	mov	r3, r2
    a3a2:	009b      	lsls	r3, r3, #2
    a3a4:	4413      	add	r3, r2
    a3a6:	00db      	lsls	r3, r3, #3
    a3a8:	440b      	add	r3, r1
    a3aa:	3310      	adds	r3, #16
    a3ac:	6819      	ldr	r1, [r3, #0]
    a3ae:	9b01      	ldr	r3, [sp, #4]
    a3b0:	43db      	mvns	r3, r3
    a3b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a3b6:	4019      	ands	r1, r3
    a3b8:	9803      	ldr	r0, [sp, #12]
    a3ba:	4613      	mov	r3, r2
    a3bc:	009b      	lsls	r3, r3, #2
    a3be:	4413      	add	r3, r2
    a3c0:	00db      	lsls	r3, r3, #3
    a3c2:	4403      	add	r3, r0
    a3c4:	3310      	adds	r3, #16
    a3c6:	6019      	str	r1, [r3, #0]
}
    a3c8:	bf00      	nop
    a3ca:	b004      	add	sp, #16
    a3cc:	4770      	bx	lr

0000a3ce <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a3ce:	b082      	sub	sp, #8
    a3d0:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a3d2:	9b01      	ldr	r3, [sp, #4]
    a3d4:	681b      	ldr	r3, [r3, #0]
    a3d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a3da:	9b01      	ldr	r3, [sp, #4]
    a3dc:	601a      	str	r2, [r3, #0]
}
    a3de:	bf00      	nop
    a3e0:	b002      	add	sp, #8
    a3e2:	4770      	bx	lr

0000a3e4 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a3e4:	b082      	sub	sp, #8
    a3e6:	9001      	str	r0, [sp, #4]
    a3e8:	460b      	mov	r3, r1
    a3ea:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a3ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d006      	beq.n	a404 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a3f6:	9b01      	ldr	r3, [sp, #4]
    a3f8:	681b      	ldr	r3, [r3, #0]
    a3fa:	f043 0202 	orr.w	r2, r3, #2
    a3fe:	9b01      	ldr	r3, [sp, #4]
    a400:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a402:	e005      	b.n	a410 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a404:	9b01      	ldr	r3, [sp, #4]
    a406:	681b      	ldr	r3, [r3, #0]
    a408:	f023 0202 	bic.w	r2, r3, #2
    a40c:	9b01      	ldr	r3, [sp, #4]
    a40e:	601a      	str	r2, [r3, #0]
}
    a410:	bf00      	nop
    a412:	b002      	add	sp, #8
    a414:	4770      	bx	lr

0000a416 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a416:	b086      	sub	sp, #24
    a418:	9003      	str	r0, [sp, #12]
    a41a:	460b      	mov	r3, r1
    a41c:	9201      	str	r2, [sp, #4]
    a41e:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a422:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a426:	9903      	ldr	r1, [sp, #12]
    a428:	4613      	mov	r3, r2
    a42a:	009b      	lsls	r3, r3, #2
    a42c:	4413      	add	r3, r2
    a42e:	00db      	lsls	r3, r3, #3
    a430:	440b      	add	r3, r1
    a432:	3310      	adds	r3, #16
    a434:	681b      	ldr	r3, [r3, #0]
    a436:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a438:	9b05      	ldr	r3, [sp, #20]
    a43a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a43e:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a440:	9b01      	ldr	r3, [sp, #4]
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	461a      	mov	r2, r3
    a446:	9b05      	ldr	r3, [sp, #20]
    a448:	4313      	orrs	r3, r2
    a44a:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a44c:	9b01      	ldr	r3, [sp, #4]
    a44e:	785b      	ldrb	r3, [r3, #1]
    a450:	021b      	lsls	r3, r3, #8
    a452:	b29b      	uxth	r3, r3
    a454:	9a05      	ldr	r2, [sp, #20]
    a456:	4313      	orrs	r3, r2
    a458:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a45a:	9b01      	ldr	r3, [sp, #4]
    a45c:	789b      	ldrb	r3, [r3, #2]
    a45e:	041b      	lsls	r3, r3, #16
    a460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a464:	9a05      	ldr	r2, [sp, #20]
    a466:	4313      	orrs	r3, r2
    a468:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a46a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a46e:	9903      	ldr	r1, [sp, #12]
    a470:	4613      	mov	r3, r2
    a472:	009b      	lsls	r3, r3, #2
    a474:	4413      	add	r3, r2
    a476:	00db      	lsls	r3, r3, #3
    a478:	440b      	add	r3, r1
    a47a:	3310      	adds	r3, #16
    a47c:	9a05      	ldr	r2, [sp, #20]
    a47e:	601a      	str	r2, [r3, #0]
}
    a480:	bf00      	nop
    a482:	b006      	add	sp, #24
    a484:	4770      	bx	lr

0000a486 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a486:	b082      	sub	sp, #8
    a488:	9001      	str	r0, [sp, #4]
    a48a:	460b      	mov	r3, r1
    a48c:	f88d 3003 	strb.w	r3, [sp, #3]
    a490:	4613      	mov	r3, r2
    a492:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a496:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a49a:	9901      	ldr	r1, [sp, #4]
    a49c:	4613      	mov	r3, r2
    a49e:	009b      	lsls	r3, r3, #2
    a4a0:	4413      	add	r3, r2
    a4a2:	00db      	lsls	r3, r3, #3
    a4a4:	440b      	add	r3, r1
    a4a6:	3314      	adds	r3, #20
    a4a8:	6819      	ldr	r1, [r3, #0]
    a4aa:	f8bd 3000 	ldrh.w	r3, [sp]
    a4ae:	041b      	lsls	r3, r3, #16
    a4b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a4b4:	43db      	mvns	r3, r3
    a4b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a4ba:	4019      	ands	r1, r3
    a4bc:	9801      	ldr	r0, [sp, #4]
    a4be:	4613      	mov	r3, r2
    a4c0:	009b      	lsls	r3, r3, #2
    a4c2:	4413      	add	r3, r2
    a4c4:	00db      	lsls	r3, r3, #3
    a4c6:	4403      	add	r3, r0
    a4c8:	3314      	adds	r3, #20
    a4ca:	6019      	str	r1, [r3, #0]
}
    a4cc:	bf00      	nop
    a4ce:	b002      	add	sp, #8
    a4d0:	4770      	bx	lr

0000a4d2 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a4d2:	b500      	push	{lr}
    a4d4:	b087      	sub	sp, #28
    a4d6:	9001      	str	r0, [sp, #4]
    a4d8:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a4da:	4a50      	ldr	r2, [pc, #320]	; (a61c <Pdb_Adc_Ip_Init+0x14a>)
    a4dc:	9b01      	ldr	r3, [sp, #4]
    a4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e2:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a4e4:	2300      	movs	r3, #0
    a4e6:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a4e8:	9b00      	ldr	r3, [sp, #0]
    a4ea:	681b      	ldr	r3, [r3, #0]
    a4ec:	049b      	lsls	r3, r3, #18
    a4ee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a4f2:	9a04      	ldr	r2, [sp, #16]
    a4f4:	4313      	orrs	r3, r2
    a4f6:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a4f8:	9b00      	ldr	r3, [sp, #0]
    a4fa:	685b      	ldr	r3, [r3, #4]
    a4fc:	031b      	lsls	r3, r3, #12
    a4fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a502:	9a04      	ldr	r2, [sp, #16]
    a504:	4313      	orrs	r3, r2
    a506:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a508:	9b00      	ldr	r3, [sp, #0]
    a50a:	689b      	ldr	r3, [r3, #8]
    a50c:	009b      	lsls	r3, r3, #2
    a50e:	f003 030c 	and.w	r3, r3, #12
    a512:	9a04      	ldr	r2, [sp, #16]
    a514:	4313      	orrs	r3, r2
    a516:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a518:	9b00      	ldr	r3, [sp, #0]
    a51a:	68db      	ldr	r3, [r3, #12]
    a51c:	021b      	lsls	r3, r3, #8
    a51e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a522:	9a04      	ldr	r2, [sp, #16]
    a524:	4313      	orrs	r3, r2
    a526:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a528:	9b00      	ldr	r3, [sp, #0]
    a52a:	7c1b      	ldrb	r3, [r3, #16]
    a52c:	2b00      	cmp	r3, #0
    a52e:	d003      	beq.n	a538 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a530:	9b04      	ldr	r3, [sp, #16]
    a532:	f043 0302 	orr.w	r3, r3, #2
    a536:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a538:	9b00      	ldr	r3, [sp, #0]
    a53a:	7c5b      	ldrb	r3, [r3, #17]
    a53c:	2b00      	cmp	r3, #0
    a53e:	d003      	beq.n	a548 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a540:	9b04      	ldr	r3, [sp, #16]
    a542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a546:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a548:	9b00      	ldr	r3, [sp, #0]
    a54a:	69db      	ldr	r3, [r3, #28]
    a54c:	2b00      	cmp	r3, #0
    a54e:	d003      	beq.n	a558 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a550:	9b04      	ldr	r3, [sp, #16]
    a552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a556:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a558:	9b03      	ldr	r3, [sp, #12]
    a55a:	9a04      	ldr	r2, [sp, #16]
    a55c:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a55e:	9b00      	ldr	r3, [sp, #0]
    a560:	8a5b      	ldrh	r3, [r3, #18]
    a562:	4619      	mov	r1, r3
    a564:	9801      	ldr	r0, [sp, #4]
    a566:	f000 f98f 	bl	a888 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a56a:	9b00      	ldr	r3, [sp, #0]
    a56c:	7d1b      	ldrb	r3, [r3, #20]
    a56e:	2b00      	cmp	r3, #0
    a570:	d03e      	beq.n	a5f0 <Pdb_Adc_Ip_Init+0x11e>
    a572:	9b00      	ldr	r3, [sp, #0]
    a574:	699b      	ldr	r3, [r3, #24]
    a576:	2b00      	cmp	r3, #0
    a578:	d03a      	beq.n	a5f0 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a57a:	2300      	movs	r3, #0
    a57c:	f88d 3017 	strb.w	r3, [sp, #23]
    a580:	e030      	b.n	a5e4 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a582:	9b00      	ldr	r3, [sp, #0]
    a584:	6999      	ldr	r1, [r3, #24]
    a586:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a58a:	4613      	mov	r3, r2
    a58c:	009b      	lsls	r3, r3, #2
    a58e:	4413      	add	r3, r2
    a590:	009b      	lsls	r3, r3, #2
    a592:	440b      	add	r3, r1
    a594:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a596:	9b02      	ldr	r3, [sp, #8]
    a598:	7819      	ldrb	r1, [r3, #0]
    a59a:	9b02      	ldr	r3, [sp, #8]
    a59c:	3301      	adds	r3, #1
    a59e:	461a      	mov	r2, r3
    a5a0:	9803      	ldr	r0, [sp, #12]
    a5a2:	f7ff ff38 	bl	a416 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a5a6:	2300      	movs	r3, #0
    a5a8:	f88d 3016 	strb.w	r3, [sp, #22]
    a5ac:	e011      	b.n	a5d2 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a5ae:	9b02      	ldr	r3, [sp, #8]
    a5b0:	7819      	ldrb	r1, [r3, #0]
    a5b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a5b6:	9a02      	ldr	r2, [sp, #8]
    a5b8:	005b      	lsls	r3, r3, #1
    a5ba:	4413      	add	r3, r2
    a5bc:	889b      	ldrh	r3, [r3, #4]
    a5be:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a5c2:	9801      	ldr	r0, [sp, #4]
    a5c4:	f000 fa74 	bl	aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a5c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a5cc:	3301      	adds	r3, #1
    a5ce:	f88d 3016 	strb.w	r3, [sp, #22]
    a5d2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a5d6:	2b07      	cmp	r3, #7
    a5d8:	d9e9      	bls.n	a5ae <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a5da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a5de:	3301      	adds	r3, #1
    a5e0:	f88d 3017 	strb.w	r3, [sp, #23]
    a5e4:	9b00      	ldr	r3, [sp, #0]
    a5e6:	7d1b      	ldrb	r3, [r3, #20]
    a5e8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a5ec:	429a      	cmp	r2, r3
    a5ee:	d3c8      	bcc.n	a582 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a5f0:	9801      	ldr	r0, [sp, #4]
    a5f2:	f000 f89b 	bl	a72c <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a5f6:	9801      	ldr	r0, [sp, #4]
    a5f8:	f000 f92e 	bl	a858 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a5fc:	9b00      	ldr	r3, [sp, #0]
    a5fe:	69da      	ldr	r2, [r3, #28]
    a600:	4907      	ldr	r1, [pc, #28]	; (a620 <Pdb_Adc_Ip_Init+0x14e>)
    a602:	9b01      	ldr	r3, [sp, #4]
    a604:	00db      	lsls	r3, r3, #3
    a606:	440b      	add	r3, r1
    a608:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a60a:	4a05      	ldr	r2, [pc, #20]	; (a620 <Pdb_Adc_Ip_Init+0x14e>)
    a60c:	9b01      	ldr	r3, [sp, #4]
    a60e:	2101      	movs	r1, #1
    a610:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a614:	bf00      	nop
    a616:	b007      	add	sp, #28
    a618:	f85d fb04 	ldr.w	pc, [sp], #4
    a61c:	0001091c 	.word	0x0001091c
    a620:	1fff8db0 	.word	0x1fff8db0

0000a624 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a624:	b500      	push	{lr}
    a626:	b097      	sub	sp, #92	; 0x5c
    a628:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a62a:	2300      	movs	r3, #0
    a62c:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a62e:	2300      	movs	r3, #0
    a630:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a632:	2300      	movs	r3, #0
    a634:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a636:	2300      	movs	r3, #0
    a638:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a63a:	2300      	movs	r3, #0
    a63c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a640:	2300      	movs	r3, #0
    a642:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a646:	2300      	movs	r3, #0
    a648:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a64c:	2302      	movs	r3, #2
    a64e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a652:	2300      	movs	r3, #0
    a654:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a658:	e04d      	b.n	a6f6 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a65a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a65e:	4613      	mov	r3, r2
    a660:	009b      	lsls	r3, r3, #2
    a662:	4413      	add	r3, r2
    a664:	009b      	lsls	r3, r3, #2
    a666:	aa16      	add	r2, sp, #88	; 0x58
    a668:	4413      	add	r3, r2
    a66a:	3b4c      	subs	r3, #76	; 0x4c
    a66c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a670:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a672:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a676:	4613      	mov	r3, r2
    a678:	009b      	lsls	r3, r3, #2
    a67a:	4413      	add	r3, r2
    a67c:	009b      	lsls	r3, r3, #2
    a67e:	aa16      	add	r2, sp, #88	; 0x58
    a680:	4413      	add	r3, r2
    a682:	3b4b      	subs	r3, #75	; 0x4b
    a684:	2200      	movs	r2, #0
    a686:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a688:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a68c:	4613      	mov	r3, r2
    a68e:	009b      	lsls	r3, r3, #2
    a690:	4413      	add	r3, r2
    a692:	009b      	lsls	r3, r3, #2
    a694:	aa16      	add	r2, sp, #88	; 0x58
    a696:	4413      	add	r3, r2
    a698:	3b4a      	subs	r3, #74	; 0x4a
    a69a:	2200      	movs	r2, #0
    a69c:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a69e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a6a2:	4613      	mov	r3, r2
    a6a4:	009b      	lsls	r3, r3, #2
    a6a6:	4413      	add	r3, r2
    a6a8:	009b      	lsls	r3, r3, #2
    a6aa:	aa16      	add	r2, sp, #88	; 0x58
    a6ac:	4413      	add	r3, r2
    a6ae:	3b49      	subs	r3, #73	; 0x49
    a6b0:	2200      	movs	r2, #0
    a6b2:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a6b4:	2300      	movs	r3, #0
    a6b6:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a6ba:	e013      	b.n	a6e4 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a6bc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a6c0:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a6c4:	4613      	mov	r3, r2
    a6c6:	009b      	lsls	r3, r3, #2
    a6c8:	4413      	add	r3, r2
    a6ca:	005b      	lsls	r3, r3, #1
    a6cc:	440b      	add	r3, r1
    a6ce:	005b      	lsls	r3, r3, #1
    a6d0:	aa16      	add	r2, sp, #88	; 0x58
    a6d2:	4413      	add	r3, r2
    a6d4:	2200      	movs	r2, #0
    a6d6:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a6da:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a6de:	3301      	adds	r3, #1
    a6e0:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a6e4:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a6e8:	2b07      	cmp	r3, #7
    a6ea:	d9e7      	bls.n	a6bc <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a6ec:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a6f0:	3301      	adds	r3, #1
    a6f2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a6f6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a6fa:	2b01      	cmp	r3, #1
    a6fc:	d9ad      	bls.n	a65a <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a6fe:	ab03      	add	r3, sp, #12
    a700:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a702:	2300      	movs	r3, #0
    a704:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a706:	ab0d      	add	r3, sp, #52	; 0x34
    a708:	4619      	mov	r1, r3
    a70a:	9801      	ldr	r0, [sp, #4]
    a70c:	f7ff fee1 	bl	a4d2 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a710:	9801      	ldr	r0, [sp, #4]
    a712:	f000 f823 	bl	a75c <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a716:	4a04      	ldr	r2, [pc, #16]	; (a728 <Pdb_Adc_Ip_DeInit+0x104>)
    a718:	9b01      	ldr	r3, [sp, #4]
    a71a:	2100      	movs	r1, #0
    a71c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a720:	bf00      	nop
    a722:	b017      	add	sp, #92	; 0x5c
    a724:	f85d fb04 	ldr.w	pc, [sp], #4
    a728:	1fff8db0 	.word	0x1fff8db0

0000a72c <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a72c:	b500      	push	{lr}
    a72e:	b085      	sub	sp, #20
    a730:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a732:	4a09      	ldr	r2, [pc, #36]	; (a758 <Pdb_Adc_Ip_Enable+0x2c>)
    a734:	9b01      	ldr	r3, [sp, #4]
    a736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a73a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a73c:	f001 fdbe 	bl	c2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a740:	9b03      	ldr	r3, [sp, #12]
    a742:	681b      	ldr	r3, [r3, #0]
    a744:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a748:	9b03      	ldr	r3, [sp, #12]
    a74a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a74c:	f001 fde2 	bl	c314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a750:	bf00      	nop
    a752:	b005      	add	sp, #20
    a754:	f85d fb04 	ldr.w	pc, [sp], #4
    a758:	0001091c 	.word	0x0001091c

0000a75c <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a75c:	b500      	push	{lr}
    a75e:	b085      	sub	sp, #20
    a760:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a762:	4a08      	ldr	r2, [pc, #32]	; (a784 <Pdb_Adc_Ip_Disable+0x28>)
    a764:	9b01      	ldr	r3, [sp, #4]
    a766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a76a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a76c:	f001 fdf8 	bl	c360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a770:	9803      	ldr	r0, [sp, #12]
    a772:	f7ff fe2c 	bl	a3ce <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a776:	f001 fe1f 	bl	c3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a77a:	bf00      	nop
    a77c:	b005      	add	sp, #20
    a77e:	f85d fb04 	ldr.w	pc, [sp], #4
    a782:	bf00      	nop
    a784:	0001091c 	.word	0x0001091c

0000a788 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a788:	b500      	push	{lr}
    a78a:	b085      	sub	sp, #20
    a78c:	9001      	str	r0, [sp, #4]
    a78e:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a790:	4a0e      	ldr	r2, [pc, #56]	; (a7cc <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a792:	9b01      	ldr	r3, [sp, #4]
    a794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a798:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a79a:	f001 fe33 	bl	c404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a79e:	9b03      	ldr	r3, [sp, #12]
    a7a0:	681b      	ldr	r3, [r3, #0]
    a7a2:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a7a4:	9b02      	ldr	r3, [sp, #8]
    a7a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a7aa:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a7ac:	9b00      	ldr	r3, [sp, #0]
    a7ae:	021b      	lsls	r3, r3, #8
    a7b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a7b4:	9a02      	ldr	r2, [sp, #8]
    a7b6:	4313      	orrs	r3, r2
    a7b8:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a7ba:	9b03      	ldr	r3, [sp, #12]
    a7bc:	9a02      	ldr	r2, [sp, #8]
    a7be:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a7c0:	f001 fe4c 	bl	c45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a7c4:	bf00      	nop
    a7c6:	b005      	add	sp, #20
    a7c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a7cc:	0001091c 	.word	0x0001091c

0000a7d0 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a7d0:	b500      	push	{lr}
    a7d2:	b085      	sub	sp, #20
    a7d4:	9001      	str	r0, [sp, #4]
    a7d6:	460b      	mov	r3, r1
    a7d8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7dc:	4a09      	ldr	r2, [pc, #36]	; (a804 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a7de:	9b01      	ldr	r3, [sp, #4]
    a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a7e6:	f001 fe5f 	bl	c4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a7ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a7ee:	4619      	mov	r1, r3
    a7f0:	9803      	ldr	r0, [sp, #12]
    a7f2:	f7ff fdf7 	bl	a3e4 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a7f6:	f001 fe83 	bl	c500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a7fa:	bf00      	nop
    a7fc:	b005      	add	sp, #20
    a7fe:	f85d fb04 	ldr.w	pc, [sp], #4
    a802:	bf00      	nop
    a804:	0001091c 	.word	0x0001091c

0000a808 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a808:	b500      	push	{lr}
    a80a:	b085      	sub	sp, #20
    a80c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a80e:	4a09      	ldr	r2, [pc, #36]	; (a834 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a810:	9b01      	ldr	r3, [sp, #4]
    a812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a816:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    a818:	f001 fe98 	bl	c54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    a81c:	9b03      	ldr	r3, [sp, #12]
    a81e:	681b      	ldr	r3, [r3, #0]
    a820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    a824:	9b03      	ldr	r3, [sp, #12]
    a826:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    a828:	f001 febc 	bl	c5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    a82c:	bf00      	nop
    a82e:	b005      	add	sp, #20
    a830:	f85d fb04 	ldr.w	pc, [sp], #4
    a834:	0001091c 	.word	0x0001091c

0000a838 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    a838:	b084      	sub	sp, #16
    a83a:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a83c:	4a05      	ldr	r2, [pc, #20]	; (a854 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    a83e:	9b01      	ldr	r3, [sp, #4]
    a840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a844:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    a846:	9b03      	ldr	r3, [sp, #12]
    a848:	689b      	ldr	r3, [r3, #8]
    a84a:	b29b      	uxth	r3, r3
}
    a84c:	4618      	mov	r0, r3
    a84e:	b004      	add	sp, #16
    a850:	4770      	bx	lr
    a852:	bf00      	nop
    a854:	0001091c 	.word	0x0001091c

0000a858 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    a858:	b500      	push	{lr}
    a85a:	b085      	sub	sp, #20
    a85c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a85e:	4a09      	ldr	r2, [pc, #36]	; (a884 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    a860:	9b01      	ldr	r3, [sp, #4]
    a862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a866:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    a868:	f001 fec2 	bl	c5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    a86c:	9b03      	ldr	r3, [sp, #12]
    a86e:	681b      	ldr	r3, [r3, #0]
    a870:	f043 0201 	orr.w	r2, r3, #1
    a874:	9b03      	ldr	r3, [sp, #12]
    a876:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    a878:	f001 fee6 	bl	c648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    a87c:	bf00      	nop
    a87e:	b005      	add	sp, #20
    a880:	f85d fb04 	ldr.w	pc, [sp], #4
    a884:	0001091c 	.word	0x0001091c

0000a888 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    a888:	b500      	push	{lr}
    a88a:	b085      	sub	sp, #20
    a88c:	9001      	str	r0, [sp, #4]
    a88e:	460b      	mov	r3, r1
    a890:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a894:	4a0d      	ldr	r2, [pc, #52]	; (a8cc <Pdb_Adc_Ip_SetModulus+0x44>)
    a896:	9b01      	ldr	r3, [sp, #4]
    a898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a89c:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    a89e:	f002 f989 	bl	cbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    a8a2:	9b03      	ldr	r3, [sp, #12]
    a8a4:	685b      	ldr	r3, [r3, #4]
    a8a6:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    a8a8:	9b02      	ldr	r3, [sp, #8]
    a8aa:	0c1b      	lsrs	r3, r3, #16
    a8ac:	041b      	lsls	r3, r3, #16
    a8ae:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    a8b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a8b4:	9a02      	ldr	r2, [sp, #8]
    a8b6:	4313      	orrs	r3, r2
    a8b8:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    a8ba:	9b03      	ldr	r3, [sp, #12]
    a8bc:	9a02      	ldr	r2, [sp, #8]
    a8be:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    a8c0:	f002 f9a4 	bl	cc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    a8c4:	bf00      	nop
    a8c6:	b005      	add	sp, #20
    a8c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a8cc:	0001091c 	.word	0x0001091c

0000a8d0 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a8d0:	b500      	push	{lr}
    a8d2:	b087      	sub	sp, #28
    a8d4:	9003      	str	r0, [sp, #12]
    a8d6:	460b      	mov	r3, r1
    a8d8:	9201      	str	r2, [sp, #4]
    a8da:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a8de:	4a0a      	ldr	r2, [pc, #40]	; (a908 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    a8e0:	9b03      	ldr	r3, [sp, #12]
    a8e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8e6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    a8e8:	f001 ff26 	bl	c738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    a8ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a8f0:	9a01      	ldr	r2, [sp, #4]
    a8f2:	4619      	mov	r1, r3
    a8f4:	9805      	ldr	r0, [sp, #20]
    a8f6:	f7ff fd8e 	bl	a416 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    a8fa:	f001 ff49 	bl	c790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    a8fe:	bf00      	nop
    a900:	b007      	add	sp, #28
    a902:	f85d fb04 	ldr.w	pc, [sp], #4
    a906:	bf00      	nop
    a908:	0001091c 	.word	0x0001091c

0000a90c <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    a90c:	b084      	sub	sp, #16
    a90e:	9001      	str	r0, [sp, #4]
    a910:	460b      	mov	r3, r1
    a912:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a916:	4a0c      	ldr	r2, [pc, #48]	; (a948 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    a918:	9b01      	ldr	r3, [sp, #4]
    a91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a91e:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    a920:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a924:	9903      	ldr	r1, [sp, #12]
    a926:	4613      	mov	r3, r2
    a928:	009b      	lsls	r3, r3, #2
    a92a:	4413      	add	r3, r2
    a92c:	00db      	lsls	r3, r3, #3
    a92e:	440b      	add	r3, r1
    a930:	3314      	adds	r3, #20
    a932:	681b      	ldr	r3, [r3, #0]
    a934:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    a936:	9b02      	ldr	r3, [sp, #8]
    a938:	0c1b      	lsrs	r3, r3, #16
    a93a:	b2db      	uxtb	r3, r3
    a93c:	9302      	str	r3, [sp, #8]

    return Result;
    a93e:	9b02      	ldr	r3, [sp, #8]
}
    a940:	4618      	mov	r0, r3
    a942:	b004      	add	sp, #16
    a944:	4770      	bx	lr
    a946:	bf00      	nop
    a948:	0001091c 	.word	0x0001091c

0000a94c <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    a94c:	b500      	push	{lr}
    a94e:	b085      	sub	sp, #20
    a950:	9001      	str	r0, [sp, #4]
    a952:	460b      	mov	r3, r1
    a954:	f88d 3003 	strb.w	r3, [sp, #3]
    a958:	4613      	mov	r3, r2
    a95a:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a95e:	4a0a      	ldr	r2, [pc, #40]	; (a988 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    a960:	9b01      	ldr	r3, [sp, #4]
    a962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a966:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    a968:	f002 f880 	bl	ca6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    a96c:	f8bd 2000 	ldrh.w	r2, [sp]
    a970:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a974:	4619      	mov	r1, r3
    a976:	9803      	ldr	r0, [sp, #12]
    a978:	f7ff fd85 	bl	a486 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    a97c:	f002 f8a2 	bl	cac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    a980:	bf00      	nop
    a982:	b005      	add	sp, #20
    a984:	f85d fb04 	ldr.w	pc, [sp], #4
    a988:	0001091c 	.word	0x0001091c

0000a98c <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    a98c:	b500      	push	{lr}
    a98e:	b085      	sub	sp, #20
    a990:	9001      	str	r0, [sp, #4]
    a992:	4608      	mov	r0, r1
    a994:	4611      	mov	r1, r2
    a996:	461a      	mov	r2, r3
    a998:	4603      	mov	r3, r0
    a99a:	f88d 3003 	strb.w	r3, [sp, #3]
    a99e:	460b      	mov	r3, r1
    a9a0:	f88d 3002 	strb.w	r3, [sp, #2]
    a9a4:	4613      	mov	r3, r2
    a9a6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9aa:	4a10      	ldr	r2, [pc, #64]	; (a9ec <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    a9ac:	9b01      	ldr	r3, [sp, #4]
    a9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a9b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a9b8:	2201      	movs	r2, #1
    a9ba:	fa02 f303 	lsl.w	r3, r2, r3
    a9be:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    a9c0:	9b02      	ldr	r3, [sp, #8]
    a9c2:	041b      	lsls	r3, r3, #16
    a9c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a9c8:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    a9ca:	f001 ff07 	bl	c7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a9ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a9d2:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a9d6:	9a02      	ldr	r2, [sp, #8]
    a9d8:	9803      	ldr	r0, [sp, #12]
    a9da:	f7ff fcb9 	bl	a350 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    a9de:	f001 ff29 	bl	c834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    a9e2:	bf00      	nop
    a9e4:	b005      	add	sp, #20
    a9e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a9ea:	bf00      	nop
    a9ec:	0001091c 	.word	0x0001091c

0000a9f0 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    a9f0:	b500      	push	{lr}
    a9f2:	b085      	sub	sp, #20
    a9f4:	9001      	str	r0, [sp, #4]
    a9f6:	4608      	mov	r0, r1
    a9f8:	4611      	mov	r1, r2
    a9fa:	461a      	mov	r2, r3
    a9fc:	4603      	mov	r3, r0
    a9fe:	f88d 3003 	strb.w	r3, [sp, #3]
    aa02:	460b      	mov	r3, r1
    aa04:	f88d 3002 	strb.w	r3, [sp, #2]
    aa08:	4613      	mov	r3, r2
    aa0a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa0e:	4a0f      	ldr	r2, [pc, #60]	; (aa4c <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    aa10:	9b01      	ldr	r3, [sp, #4]
    aa12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa16:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    aa18:	f89d 3002 	ldrb.w	r3, [sp, #2]
    aa1c:	2201      	movs	r2, #1
    aa1e:	fa02 f303 	lsl.w	r3, r2, r3
    aa22:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    aa24:	9b02      	ldr	r3, [sp, #8]
    aa26:	b2db      	uxtb	r3, r3
    aa28:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    aa2a:	f001 ff29 	bl	c880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    aa2e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    aa32:	f89d 1003 	ldrb.w	r1, [sp, #3]
    aa36:	9a02      	ldr	r2, [sp, #8]
    aa38:	9803      	ldr	r0, [sp, #12]
    aa3a:	f7ff fc89 	bl	a350 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    aa3e:	f001 ff4b 	bl	c8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    aa42:	bf00      	nop
    aa44:	b005      	add	sp, #20
    aa46:	f85d fb04 	ldr.w	pc, [sp], #4
    aa4a:	bf00      	nop
    aa4c:	0001091c 	.word	0x0001091c

0000aa50 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    aa50:	b500      	push	{lr}
    aa52:	b085      	sub	sp, #20
    aa54:	9001      	str	r0, [sp, #4]
    aa56:	4608      	mov	r0, r1
    aa58:	4611      	mov	r1, r2
    aa5a:	461a      	mov	r2, r3
    aa5c:	4603      	mov	r3, r0
    aa5e:	f88d 3003 	strb.w	r3, [sp, #3]
    aa62:	460b      	mov	r3, r1
    aa64:	f88d 3002 	strb.w	r3, [sp, #2]
    aa68:	4613      	mov	r3, r2
    aa6a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa6e:	4a0f      	ldr	r2, [pc, #60]	; (aaac <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    aa70:	9b01      	ldr	r3, [sp, #4]
    aa72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa76:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    aa78:	f89d 3002 	ldrb.w	r3, [sp, #2]
    aa7c:	2201      	movs	r2, #1
    aa7e:	fa02 f303 	lsl.w	r3, r2, r3
    aa82:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    aa84:	9b02      	ldr	r3, [sp, #8]
    aa86:	021b      	lsls	r3, r3, #8
    aa88:	b29b      	uxth	r3, r3
    aa8a:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    aa8c:	f001 ff4a 	bl	c924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    aa90:	f89d 3001 	ldrb.w	r3, [sp, #1]
    aa94:	f89d 1003 	ldrb.w	r1, [sp, #3]
    aa98:	9a02      	ldr	r2, [sp, #8]
    aa9a:	9803      	ldr	r0, [sp, #12]
    aa9c:	f7ff fc58 	bl	a350 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    aaa0:	f001 ff6c 	bl	c97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    aaa4:	bf00      	nop
    aaa6:	b005      	add	sp, #20
    aaa8:	f85d fb04 	ldr.w	pc, [sp], #4
    aaac:	0001091c 	.word	0x0001091c

0000aab0 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    aab0:	b410      	push	{r4}
    aab2:	b085      	sub	sp, #20
    aab4:	9001      	str	r0, [sp, #4]
    aab6:	4608      	mov	r0, r1
    aab8:	4611      	mov	r1, r2
    aaba:	461a      	mov	r2, r3
    aabc:	4603      	mov	r3, r0
    aabe:	f88d 3003 	strb.w	r3, [sp, #3]
    aac2:	460b      	mov	r3, r1
    aac4:	f88d 3002 	strb.w	r3, [sp, #2]
    aac8:	4613      	mov	r3, r2
    aaca:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aace:	4a0c      	ldr	r2, [pc, #48]	; (ab00 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    aad0:	9b01      	ldr	r3, [sp, #4]
    aad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aad6:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    aad8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aadc:	f89d 4002 	ldrb.w	r4, [sp, #2]
    aae0:	f8bd 0000 	ldrh.w	r0, [sp]
    aae4:	9903      	ldr	r1, [sp, #12]
    aae6:	4613      	mov	r3, r2
    aae8:	009b      	lsls	r3, r3, #2
    aaea:	4413      	add	r3, r2
    aaec:	005b      	lsls	r3, r3, #1
    aaee:	4423      	add	r3, r4
    aaf0:	3306      	adds	r3, #6
    aaf2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    aaf6:	bf00      	nop
    aaf8:	b005      	add	sp, #20
    aafa:	f85d 4b04 	ldr.w	r4, [sp], #4
    aafe:	4770      	bx	lr
    ab00:	0001091c 	.word	0x0001091c

0000ab04 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    ab04:	b500      	push	{lr}
    ab06:	b087      	sub	sp, #28
    ab08:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab0a:	4a19      	ldr	r2, [pc, #100]	; (ab70 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    ab0c:	9b01      	ldr	r3, [sp, #4]
    ab0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab12:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    ab14:	2300      	movs	r3, #0
    ab16:	f88d 300c 	strb.w	r3, [sp, #12]
    ab1a:	2300      	movs	r3, #0
    ab1c:	f88d 300d 	strb.w	r3, [sp, #13]
    ab20:	2300      	movs	r3, #0
    ab22:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    ab26:	f001 fdb5 	bl	c694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ab2a:	9804      	ldr	r0, [sp, #16]
    ab2c:	f7ff fc4f 	bl	a3ce <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    ab30:	2100      	movs	r1, #0
    ab32:	9804      	ldr	r0, [sp, #16]
    ab34:	f7ff fc56 	bl	a3e4 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    ab38:	f001 fdd8 	bl	c6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab3c:	2300      	movs	r3, #0
    ab3e:	f88d 3017 	strb.w	r3, [sp, #23]
    ab42:	e00b      	b.n	ab5c <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    ab44:	aa03      	add	r2, sp, #12
    ab46:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab4a:	4619      	mov	r1, r3
    ab4c:	9804      	ldr	r0, [sp, #16]
    ab4e:	f000 f899 	bl	ac84 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab56:	3301      	adds	r3, #1
    ab58:	f88d 3017 	strb.w	r3, [sp, #23]
    ab5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab60:	2b01      	cmp	r3, #1
    ab62:	d9ef      	bls.n	ab44 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    ab64:	bf00      	nop
    ab66:	bf00      	nop
    ab68:	b007      	add	sp, #28
    ab6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab6e:	bf00      	nop
    ab70:	0001091c 	.word	0x0001091c

0000ab74 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    ab74:	b500      	push	{lr}
    ab76:	b087      	sub	sp, #28
    ab78:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ab7a:	4a40      	ldr	r2, [pc, #256]	; (ac7c <Pdb_Adc_Ip_IRQHandler+0x108>)
    ab7c:	9b01      	ldr	r3, [sp, #4]
    ab7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab82:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    ab84:	4a3e      	ldr	r2, [pc, #248]	; (ac80 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ab86:	9b01      	ldr	r3, [sp, #4]
    ab88:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	d04d      	beq.n	ac2c <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    ab90:	9b04      	ldr	r3, [sp, #16]
    ab92:	681b      	ldr	r3, [r3, #0]
    ab94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    ab98:	2b00      	cmp	r3, #0
    ab9a:	d06a      	beq.n	ac72 <Pdb_Adc_Ip_IRQHandler+0xfe>
    ab9c:	4a38      	ldr	r2, [pc, #224]	; (ac80 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ab9e:	9b01      	ldr	r3, [sp, #4]
    aba0:	00db      	lsls	r3, r3, #3
    aba2:	4413      	add	r3, r2
    aba4:	685b      	ldr	r3, [r3, #4]
    aba6:	2b00      	cmp	r3, #0
    aba8:	d063      	beq.n	ac72 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    abaa:	2300      	movs	r3, #0
    abac:	f88d 3017 	strb.w	r3, [sp, #23]
    abb0:	e037      	b.n	ac22 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    abb2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    abb6:	9904      	ldr	r1, [sp, #16]
    abb8:	4613      	mov	r3, r2
    abba:	009b      	lsls	r3, r3, #2
    abbc:	4413      	add	r3, r2
    abbe:	00db      	lsls	r3, r3, #3
    abc0:	440b      	add	r3, r1
    abc2:	3314      	adds	r3, #20
    abc4:	681b      	ldr	r3, [r3, #0]
    abc6:	b29b      	uxth	r3, r3
    abc8:	b2db      	uxtb	r3, r3
    abca:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    abce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    abd2:	2b00      	cmp	r3, #0
    abd4:	d020      	beq.n	ac18 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    abd6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    abda:	9904      	ldr	r1, [sp, #16]
    abdc:	4613      	mov	r3, r2
    abde:	009b      	lsls	r3, r3, #2
    abe0:	4413      	add	r3, r2
    abe2:	00db      	lsls	r3, r3, #3
    abe4:	440b      	add	r3, r1
    abe6:	3314      	adds	r3, #20
    abe8:	681b      	ldr	r3, [r3, #0]
    abea:	f89d 2017 	ldrb.w	r2, [sp, #23]
    abee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    abf2:	9804      	ldr	r0, [sp, #16]
    abf4:	4613      	mov	r3, r2
    abf6:	009b      	lsls	r3, r3, #2
    abf8:	4413      	add	r3, r2
    abfa:	00db      	lsls	r3, r3, #3
    abfc:	4403      	add	r3, r0
    abfe:	3314      	adds	r3, #20
    ac00:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    ac02:	4a1f      	ldr	r2, [pc, #124]	; (ac80 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ac04:	9b01      	ldr	r3, [sp, #4]
    ac06:	00db      	lsls	r3, r3, #3
    ac08:	4413      	add	r3, r2
    ac0a:	685b      	ldr	r3, [r3, #4]
    ac0c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ac10:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ac14:	4610      	mov	r0, r2
    ac16:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ac18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac1c:	3301      	adds	r3, #1
    ac1e:	f88d 3017 	strb.w	r3, [sp, #23]
    ac22:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac26:	2b01      	cmp	r3, #1
    ac28:	d9c3      	bls.n	abb2 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ac2a:	e022      	b.n	ac72 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ac2c:	2300      	movs	r3, #0
    ac2e:	f88d 3017 	strb.w	r3, [sp, #23]
    ac32:	e01a      	b.n	ac6a <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ac34:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ac38:	9904      	ldr	r1, [sp, #16]
    ac3a:	4613      	mov	r3, r2
    ac3c:	009b      	lsls	r3, r3, #2
    ac3e:	4413      	add	r3, r2
    ac40:	00db      	lsls	r3, r3, #3
    ac42:	440b      	add	r3, r1
    ac44:	3314      	adds	r3, #20
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ac4c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ac50:	9804      	ldr	r0, [sp, #16]
    ac52:	4613      	mov	r3, r2
    ac54:	009b      	lsls	r3, r3, #2
    ac56:	4413      	add	r3, r2
    ac58:	00db      	lsls	r3, r3, #3
    ac5a:	4403      	add	r3, r0
    ac5c:	3314      	adds	r3, #20
    ac5e:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ac60:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac64:	3301      	adds	r3, #1
    ac66:	f88d 3017 	strb.w	r3, [sp, #23]
    ac6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ac6e:	2b01      	cmp	r3, #1
    ac70:	d9e0      	bls.n	ac34 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    ac72:	bf00      	nop
    ac74:	b007      	add	sp, #28
    ac76:	f85d fb04 	ldr.w	pc, [sp], #4
    ac7a:	bf00      	nop
    ac7c:	0001091c 	.word	0x0001091c
    ac80:	1fff8db0 	.word	0x1fff8db0

0000ac84 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    ac84:	b500      	push	{lr}
    ac86:	b085      	sub	sp, #20
    ac88:	9003      	str	r0, [sp, #12]
    ac8a:	460b      	mov	r3, r1
    ac8c:	9201      	str	r2, [sp, #4]
    ac8e:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    ac92:	f001 fe99 	bl	c9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    ac96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac9a:	9a01      	ldr	r2, [sp, #4]
    ac9c:	4619      	mov	r1, r3
    ac9e:	9803      	ldr	r0, [sp, #12]
    aca0:	f7ff fbb9 	bl	a416 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    aca4:	f001 febc 	bl	ca20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    aca8:	f001 ff32 	bl	cb10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    acac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    acb0:	22ff      	movs	r2, #255	; 0xff
    acb2:	4619      	mov	r1, r3
    acb4:	9803      	ldr	r0, [sp, #12]
    acb6:	f7ff fbe6 	bl	a486 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    acba:	f89d 200b 	ldrb.w	r2, [sp, #11]
    acbe:	9903      	ldr	r1, [sp, #12]
    acc0:	4613      	mov	r3, r2
    acc2:	009b      	lsls	r3, r3, #2
    acc4:	4413      	add	r3, r2
    acc6:	00db      	lsls	r3, r3, #3
    acc8:	440b      	add	r3, r1
    acca:	3314      	adds	r3, #20
    accc:	681b      	ldr	r3, [r3, #0]
    acce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    acd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    acd6:	9803      	ldr	r0, [sp, #12]
    acd8:	4613      	mov	r3, r2
    acda:	009b      	lsls	r3, r3, #2
    acdc:	4413      	add	r3, r2
    acde:	00db      	lsls	r3, r3, #3
    ace0:	4403      	add	r3, r0
    ace2:	3314      	adds	r3, #20
    ace4:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    ace6:	f001 ff3f 	bl	cb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    acea:	bf00      	nop
    acec:	b005      	add	sp, #20
    acee:	f85d fb04 	ldr.w	pc, [sp], #4
    acf2:	bf00      	nop

0000acf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    acf4:	b500      	push	{lr}
    acf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acf8:	f7f5 ff40 	bl	b7c <Sys_GetCoreID>
    acfc:	4603      	mov	r3, r0
    acfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    ad00:	4a10      	ldr	r2, [pc, #64]	; (ad44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ad02:	9b01      	ldr	r3, [sp, #4]
    ad04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad08:	2b00      	cmp	r3, #0
    ad0a:	d10d      	bne.n	ad28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad0c:	f7f5 fe54 	bl	9b8 <Adc_schm_read_msr>
    ad10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad12:	9b00      	ldr	r3, [sp, #0]
    ad14:	f003 0301 	and.w	r3, r3, #1
    ad18:	2b00      	cmp	r3, #0
    ad1a:	d100      	bne.n	ad1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ad1e:	490a      	ldr	r1, [pc, #40]	; (ad48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    ad20:	9b01      	ldr	r3, [sp, #4]
    ad22:	9a00      	ldr	r2, [sp, #0]
    ad24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    ad28:	4a06      	ldr	r2, [pc, #24]	; (ad44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ad2a:	9b01      	ldr	r3, [sp, #4]
    ad2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad30:	1c5a      	adds	r2, r3, #1
    ad32:	4904      	ldr	r1, [pc, #16]	; (ad44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ad34:	9b01      	ldr	r3, [sp, #4]
    ad36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad3a:	bf00      	nop
    ad3c:	b003      	add	sp, #12
    ad3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad42:	bf00      	nop
    ad44:	1fff8dc4 	.word	0x1fff8dc4
    ad48:	1fff8dc0 	.word	0x1fff8dc0

0000ad4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    ad4c:	b500      	push	{lr}
    ad4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad50:	f7f5 ff14 	bl	b7c <Sys_GetCoreID>
    ad54:	4603      	mov	r3, r0
    ad56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    ad58:	4a0d      	ldr	r2, [pc, #52]	; (ad90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ad5a:	9b01      	ldr	r3, [sp, #4]
    ad5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad60:	1e5a      	subs	r2, r3, #1
    ad62:	490b      	ldr	r1, [pc, #44]	; (ad90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ad64:	9b01      	ldr	r3, [sp, #4]
    ad66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ad6a:	4a0a      	ldr	r2, [pc, #40]	; (ad94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    ad6c:	9b01      	ldr	r3, [sp, #4]
    ad6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad72:	f003 0301 	and.w	r3, r3, #1
    ad76:	2b00      	cmp	r3, #0
    ad78:	d106      	bne.n	ad88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    ad7a:	4a05      	ldr	r2, [pc, #20]	; (ad90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ad7c:	9b01      	ldr	r3, [sp, #4]
    ad7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad82:	2b00      	cmp	r3, #0
    ad84:	d100      	bne.n	ad88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad88:	bf00      	nop
    ad8a:	b003      	add	sp, #12
    ad8c:	f85d fb04 	ldr.w	pc, [sp], #4
    ad90:	1fff8dc4 	.word	0x1fff8dc4
    ad94:	1fff8dc0 	.word	0x1fff8dc0

0000ad98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ad98:	b500      	push	{lr}
    ad9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad9c:	f7f5 feee 	bl	b7c <Sys_GetCoreID>
    ada0:	4603      	mov	r3, r0
    ada2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    ada4:	4a10      	ldr	r2, [pc, #64]	; (ade8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ada6:	9b01      	ldr	r3, [sp, #4]
    ada8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adac:	2b00      	cmp	r3, #0
    adae:	d10d      	bne.n	adcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    adb0:	f7f5 fe02 	bl	9b8 <Adc_schm_read_msr>
    adb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adb6:	9b00      	ldr	r3, [sp, #0]
    adb8:	f003 0301 	and.w	r3, r3, #1
    adbc:	2b00      	cmp	r3, #0
    adbe:	d100      	bne.n	adc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    adc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    adc2:	490a      	ldr	r1, [pc, #40]	; (adec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    adc4:	9b01      	ldr	r3, [sp, #4]
    adc6:	9a00      	ldr	r2, [sp, #0]
    adc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    adcc:	4a06      	ldr	r2, [pc, #24]	; (ade8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    adce:	9b01      	ldr	r3, [sp, #4]
    add0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add4:	1c5a      	adds	r2, r3, #1
    add6:	4904      	ldr	r1, [pc, #16]	; (ade8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    add8:	9b01      	ldr	r3, [sp, #4]
    adda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    adde:	bf00      	nop
    ade0:	b003      	add	sp, #12
    ade2:	f85d fb04 	ldr.w	pc, [sp], #4
    ade6:	bf00      	nop
    ade8:	1fff8dcc 	.word	0x1fff8dcc
    adec:	1fff8dc8 	.word	0x1fff8dc8

0000adf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    adf0:	b500      	push	{lr}
    adf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adf4:	f7f5 fec2 	bl	b7c <Sys_GetCoreID>
    adf8:	4603      	mov	r3, r0
    adfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    adfc:	4a0d      	ldr	r2, [pc, #52]	; (ae34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    adfe:	9b01      	ldr	r3, [sp, #4]
    ae00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae04:	1e5a      	subs	r2, r3, #1
    ae06:	490b      	ldr	r1, [pc, #44]	; (ae34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ae08:	9b01      	ldr	r3, [sp, #4]
    ae0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ae0e:	4a0a      	ldr	r2, [pc, #40]	; (ae38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ae10:	9b01      	ldr	r3, [sp, #4]
    ae12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae16:	f003 0301 	and.w	r3, r3, #1
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d106      	bne.n	ae2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ae1e:	4a05      	ldr	r2, [pc, #20]	; (ae34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ae20:	9b01      	ldr	r3, [sp, #4]
    ae22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae26:	2b00      	cmp	r3, #0
    ae28:	d100      	bne.n	ae2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae2c:	bf00      	nop
    ae2e:	b003      	add	sp, #12
    ae30:	f85d fb04 	ldr.w	pc, [sp], #4
    ae34:	1fff8dcc 	.word	0x1fff8dcc
    ae38:	1fff8dc8 	.word	0x1fff8dc8

0000ae3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ae3c:	b500      	push	{lr}
    ae3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae40:	f7f5 fe9c 	bl	b7c <Sys_GetCoreID>
    ae44:	4603      	mov	r3, r0
    ae46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ae48:	4a10      	ldr	r2, [pc, #64]	; (ae8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ae4a:	9b01      	ldr	r3, [sp, #4]
    ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae50:	2b00      	cmp	r3, #0
    ae52:	d10d      	bne.n	ae70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae54:	f7f5 fdb0 	bl	9b8 <Adc_schm_read_msr>
    ae58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae5a:	9b00      	ldr	r3, [sp, #0]
    ae5c:	f003 0301 	and.w	r3, r3, #1
    ae60:	2b00      	cmp	r3, #0
    ae62:	d100      	bne.n	ae66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ae66:	490a      	ldr	r1, [pc, #40]	; (ae90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    ae68:	9b01      	ldr	r3, [sp, #4]
    ae6a:	9a00      	ldr	r2, [sp, #0]
    ae6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    ae70:	4a06      	ldr	r2, [pc, #24]	; (ae8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ae72:	9b01      	ldr	r3, [sp, #4]
    ae74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae78:	1c5a      	adds	r2, r3, #1
    ae7a:	4904      	ldr	r1, [pc, #16]	; (ae8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ae7c:	9b01      	ldr	r3, [sp, #4]
    ae7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae82:	bf00      	nop
    ae84:	b003      	add	sp, #12
    ae86:	f85d fb04 	ldr.w	pc, [sp], #4
    ae8a:	bf00      	nop
    ae8c:	1fff8dd4 	.word	0x1fff8dd4
    ae90:	1fff8dd0 	.word	0x1fff8dd0

0000ae94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ae94:	b500      	push	{lr}
    ae96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae98:	f7f5 fe70 	bl	b7c <Sys_GetCoreID>
    ae9c:	4603      	mov	r3, r0
    ae9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    aea0:	4a0d      	ldr	r2, [pc, #52]	; (aed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    aea2:	9b01      	ldr	r3, [sp, #4]
    aea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea8:	1e5a      	subs	r2, r3, #1
    aeaa:	490b      	ldr	r1, [pc, #44]	; (aed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    aeac:	9b01      	ldr	r3, [sp, #4]
    aeae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    aeb2:	4a0a      	ldr	r2, [pc, #40]	; (aedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    aeb4:	9b01      	ldr	r3, [sp, #4]
    aeb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeba:	f003 0301 	and.w	r3, r3, #1
    aebe:	2b00      	cmp	r3, #0
    aec0:	d106      	bne.n	aed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    aec2:	4a05      	ldr	r2, [pc, #20]	; (aed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    aec4:	9b01      	ldr	r3, [sp, #4]
    aec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeca:	2b00      	cmp	r3, #0
    aecc:	d100      	bne.n	aed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aed0:	bf00      	nop
    aed2:	b003      	add	sp, #12
    aed4:	f85d fb04 	ldr.w	pc, [sp], #4
    aed8:	1fff8dd4 	.word	0x1fff8dd4
    aedc:	1fff8dd0 	.word	0x1fff8dd0

0000aee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    aee0:	b500      	push	{lr}
    aee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aee4:	f7f5 fe4a 	bl	b7c <Sys_GetCoreID>
    aee8:	4603      	mov	r3, r0
    aeea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    aeec:	4a10      	ldr	r2, [pc, #64]	; (af30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    aeee:	9b01      	ldr	r3, [sp, #4]
    aef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef4:	2b00      	cmp	r3, #0
    aef6:	d10d      	bne.n	af14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aef8:	f7f5 fd5e 	bl	9b8 <Adc_schm_read_msr>
    aefc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aefe:	9b00      	ldr	r3, [sp, #0]
    af00:	f003 0301 	and.w	r3, r3, #1
    af04:	2b00      	cmp	r3, #0
    af06:	d100      	bne.n	af0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    af0a:	490a      	ldr	r1, [pc, #40]	; (af34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    af0c:	9b01      	ldr	r3, [sp, #4]
    af0e:	9a00      	ldr	r2, [sp, #0]
    af10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    af14:	4a06      	ldr	r2, [pc, #24]	; (af30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    af16:	9b01      	ldr	r3, [sp, #4]
    af18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af1c:	1c5a      	adds	r2, r3, #1
    af1e:	4904      	ldr	r1, [pc, #16]	; (af30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    af20:	9b01      	ldr	r3, [sp, #4]
    af22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af26:	bf00      	nop
    af28:	b003      	add	sp, #12
    af2a:	f85d fb04 	ldr.w	pc, [sp], #4
    af2e:	bf00      	nop
    af30:	1fff8ddc 	.word	0x1fff8ddc
    af34:	1fff8dd8 	.word	0x1fff8dd8

0000af38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    af38:	b500      	push	{lr}
    af3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af3c:	f7f5 fe1e 	bl	b7c <Sys_GetCoreID>
    af40:	4603      	mov	r3, r0
    af42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    af44:	4a0d      	ldr	r2, [pc, #52]	; (af7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    af46:	9b01      	ldr	r3, [sp, #4]
    af48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af4c:	1e5a      	subs	r2, r3, #1
    af4e:	490b      	ldr	r1, [pc, #44]	; (af7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    af50:	9b01      	ldr	r3, [sp, #4]
    af52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    af56:	4a0a      	ldr	r2, [pc, #40]	; (af80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    af58:	9b01      	ldr	r3, [sp, #4]
    af5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af5e:	f003 0301 	and.w	r3, r3, #1
    af62:	2b00      	cmp	r3, #0
    af64:	d106      	bne.n	af74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    af66:	4a05      	ldr	r2, [pc, #20]	; (af7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    af68:	9b01      	ldr	r3, [sp, #4]
    af6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6e:	2b00      	cmp	r3, #0
    af70:	d100      	bne.n	af74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af74:	bf00      	nop
    af76:	b003      	add	sp, #12
    af78:	f85d fb04 	ldr.w	pc, [sp], #4
    af7c:	1fff8ddc 	.word	0x1fff8ddc
    af80:	1fff8dd8 	.word	0x1fff8dd8

0000af84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    af84:	b500      	push	{lr}
    af86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af88:	f7f5 fdf8 	bl	b7c <Sys_GetCoreID>
    af8c:	4603      	mov	r3, r0
    af8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    af90:	4a10      	ldr	r2, [pc, #64]	; (afd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    af92:	9b01      	ldr	r3, [sp, #4]
    af94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af98:	2b00      	cmp	r3, #0
    af9a:	d10d      	bne.n	afb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af9c:	f7f5 fd0c 	bl	9b8 <Adc_schm_read_msr>
    afa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    afa2:	9b00      	ldr	r3, [sp, #0]
    afa4:	f003 0301 	and.w	r3, r3, #1
    afa8:	2b00      	cmp	r3, #0
    afaa:	d100      	bne.n	afae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    afae:	490a      	ldr	r1, [pc, #40]	; (afd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    afb0:	9b01      	ldr	r3, [sp, #4]
    afb2:	9a00      	ldr	r2, [sp, #0]
    afb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    afb8:	4a06      	ldr	r2, [pc, #24]	; (afd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    afba:	9b01      	ldr	r3, [sp, #4]
    afbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc0:	1c5a      	adds	r2, r3, #1
    afc2:	4904      	ldr	r1, [pc, #16]	; (afd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    afc4:	9b01      	ldr	r3, [sp, #4]
    afc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afca:	bf00      	nop
    afcc:	b003      	add	sp, #12
    afce:	f85d fb04 	ldr.w	pc, [sp], #4
    afd2:	bf00      	nop
    afd4:	1fff8de4 	.word	0x1fff8de4
    afd8:	1fff8de0 	.word	0x1fff8de0

0000afdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    afdc:	b500      	push	{lr}
    afde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afe0:	f7f5 fdcc 	bl	b7c <Sys_GetCoreID>
    afe4:	4603      	mov	r3, r0
    afe6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    afe8:	4a0d      	ldr	r2, [pc, #52]	; (b020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    afea:	9b01      	ldr	r3, [sp, #4]
    afec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aff0:	1e5a      	subs	r2, r3, #1
    aff2:	490b      	ldr	r1, [pc, #44]	; (b020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    aff4:	9b01      	ldr	r3, [sp, #4]
    aff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    affa:	4a0a      	ldr	r2, [pc, #40]	; (b024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    affc:	9b01      	ldr	r3, [sp, #4]
    affe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b002:	f003 0301 	and.w	r3, r3, #1
    b006:	2b00      	cmp	r3, #0
    b008:	d106      	bne.n	b018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    b00a:	4a05      	ldr	r2, [pc, #20]	; (b020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    b00c:	9b01      	ldr	r3, [sp, #4]
    b00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b012:	2b00      	cmp	r3, #0
    b014:	d100      	bne.n	b018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b018:	bf00      	nop
    b01a:	b003      	add	sp, #12
    b01c:	f85d fb04 	ldr.w	pc, [sp], #4
    b020:	1fff8de4 	.word	0x1fff8de4
    b024:	1fff8de0 	.word	0x1fff8de0

0000b028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b028:	b500      	push	{lr}
    b02a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b02c:	f7f5 fda6 	bl	b7c <Sys_GetCoreID>
    b030:	4603      	mov	r3, r0
    b032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    b034:	4a10      	ldr	r2, [pc, #64]	; (b078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b036:	9b01      	ldr	r3, [sp, #4]
    b038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b03c:	2b00      	cmp	r3, #0
    b03e:	d10d      	bne.n	b05c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b040:	f7f5 fcba 	bl	9b8 <Adc_schm_read_msr>
    b044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b046:	9b00      	ldr	r3, [sp, #0]
    b048:	f003 0301 	and.w	r3, r3, #1
    b04c:	2b00      	cmp	r3, #0
    b04e:	d100      	bne.n	b052 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    b052:	490a      	ldr	r1, [pc, #40]	; (b07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    b054:	9b01      	ldr	r3, [sp, #4]
    b056:	9a00      	ldr	r2, [sp, #0]
    b058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    b05c:	4a06      	ldr	r2, [pc, #24]	; (b078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b05e:	9b01      	ldr	r3, [sp, #4]
    b060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b064:	1c5a      	adds	r2, r3, #1
    b066:	4904      	ldr	r1, [pc, #16]	; (b078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    b068:	9b01      	ldr	r3, [sp, #4]
    b06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b06e:	bf00      	nop
    b070:	b003      	add	sp, #12
    b072:	f85d fb04 	ldr.w	pc, [sp], #4
    b076:	bf00      	nop
    b078:	1fff8dec 	.word	0x1fff8dec
    b07c:	1fff8de8 	.word	0x1fff8de8

0000b080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    b080:	b500      	push	{lr}
    b082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b084:	f7f5 fd7a 	bl	b7c <Sys_GetCoreID>
    b088:	4603      	mov	r3, r0
    b08a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    b08c:	4a0d      	ldr	r2, [pc, #52]	; (b0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b08e:	9b01      	ldr	r3, [sp, #4]
    b090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b094:	1e5a      	subs	r2, r3, #1
    b096:	490b      	ldr	r1, [pc, #44]	; (b0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b098:	9b01      	ldr	r3, [sp, #4]
    b09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    b09e:	4a0a      	ldr	r2, [pc, #40]	; (b0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    b0a0:	9b01      	ldr	r3, [sp, #4]
    b0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a6:	f003 0301 	and.w	r3, r3, #1
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d106      	bne.n	b0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b0ae:	4a05      	ldr	r2, [pc, #20]	; (b0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b0b0:	9b01      	ldr	r3, [sp, #4]
    b0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d100      	bne.n	b0bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0bc:	bf00      	nop
    b0be:	b003      	add	sp, #12
    b0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c4:	1fff8dec 	.word	0x1fff8dec
    b0c8:	1fff8de8 	.word	0x1fff8de8

0000b0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b0cc:	b500      	push	{lr}
    b0ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0d0:	f7f5 fd54 	bl	b7c <Sys_GetCoreID>
    b0d4:	4603      	mov	r3, r0
    b0d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b0d8:	4a10      	ldr	r2, [pc, #64]	; (b11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b0da:	9b01      	ldr	r3, [sp, #4]
    b0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d10d      	bne.n	b100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0e4:	f7f5 fc68 	bl	9b8 <Adc_schm_read_msr>
    b0e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0ea:	9b00      	ldr	r3, [sp, #0]
    b0ec:	f003 0301 	and.w	r3, r3, #1
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b0f6:	490a      	ldr	r1, [pc, #40]	; (b120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b0f8:	9b01      	ldr	r3, [sp, #4]
    b0fa:	9a00      	ldr	r2, [sp, #0]
    b0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b100:	4a06      	ldr	r2, [pc, #24]	; (b11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b102:	9b01      	ldr	r3, [sp, #4]
    b104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b108:	1c5a      	adds	r2, r3, #1
    b10a:	4904      	ldr	r1, [pc, #16]	; (b11c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b10c:	9b01      	ldr	r3, [sp, #4]
    b10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b112:	bf00      	nop
    b114:	b003      	add	sp, #12
    b116:	f85d fb04 	ldr.w	pc, [sp], #4
    b11a:	bf00      	nop
    b11c:	1fff8df4 	.word	0x1fff8df4
    b120:	1fff8df0 	.word	0x1fff8df0

0000b124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b124:	b500      	push	{lr}
    b126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b128:	f7f5 fd28 	bl	b7c <Sys_GetCoreID>
    b12c:	4603      	mov	r3, r0
    b12e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b130:	4a0d      	ldr	r2, [pc, #52]	; (b168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b132:	9b01      	ldr	r3, [sp, #4]
    b134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b138:	1e5a      	subs	r2, r3, #1
    b13a:	490b      	ldr	r1, [pc, #44]	; (b168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b13c:	9b01      	ldr	r3, [sp, #4]
    b13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b142:	4a0a      	ldr	r2, [pc, #40]	; (b16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b144:	9b01      	ldr	r3, [sp, #4]
    b146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b14a:	f003 0301 	and.w	r3, r3, #1
    b14e:	2b00      	cmp	r3, #0
    b150:	d106      	bne.n	b160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b152:	4a05      	ldr	r2, [pc, #20]	; (b168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b154:	9b01      	ldr	r3, [sp, #4]
    b156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b15a:	2b00      	cmp	r3, #0
    b15c:	d100      	bne.n	b160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b15e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b160:	bf00      	nop
    b162:	b003      	add	sp, #12
    b164:	f85d fb04 	ldr.w	pc, [sp], #4
    b168:	1fff8df4 	.word	0x1fff8df4
    b16c:	1fff8df0 	.word	0x1fff8df0

0000b170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b170:	b500      	push	{lr}
    b172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b174:	f7f5 fd02 	bl	b7c <Sys_GetCoreID>
    b178:	4603      	mov	r3, r0
    b17a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b17c:	4a10      	ldr	r2, [pc, #64]	; (b1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b17e:	9b01      	ldr	r3, [sp, #4]
    b180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b184:	2b00      	cmp	r3, #0
    b186:	d10d      	bne.n	b1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b188:	f7f5 fc16 	bl	9b8 <Adc_schm_read_msr>
    b18c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b18e:	9b00      	ldr	r3, [sp, #0]
    b190:	f003 0301 	and.w	r3, r3, #1
    b194:	2b00      	cmp	r3, #0
    b196:	d100      	bne.n	b19a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b19a:	490a      	ldr	r1, [pc, #40]	; (b1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b19c:	9b01      	ldr	r3, [sp, #4]
    b19e:	9a00      	ldr	r2, [sp, #0]
    b1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b1a4:	4a06      	ldr	r2, [pc, #24]	; (b1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b1a6:	9b01      	ldr	r3, [sp, #4]
    b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ac:	1c5a      	adds	r2, r3, #1
    b1ae:	4904      	ldr	r1, [pc, #16]	; (b1c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b1b0:	9b01      	ldr	r3, [sp, #4]
    b1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1b6:	bf00      	nop
    b1b8:	b003      	add	sp, #12
    b1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    b1be:	bf00      	nop
    b1c0:	1fff8dfc 	.word	0x1fff8dfc
    b1c4:	1fff8df8 	.word	0x1fff8df8

0000b1c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b1c8:	b500      	push	{lr}
    b1ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1cc:	f7f5 fcd6 	bl	b7c <Sys_GetCoreID>
    b1d0:	4603      	mov	r3, r0
    b1d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b1d4:	4a0d      	ldr	r2, [pc, #52]	; (b20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b1d6:	9b01      	ldr	r3, [sp, #4]
    b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1dc:	1e5a      	subs	r2, r3, #1
    b1de:	490b      	ldr	r1, [pc, #44]	; (b20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b1e0:	9b01      	ldr	r3, [sp, #4]
    b1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b1e6:	4a0a      	ldr	r2, [pc, #40]	; (b210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b1e8:	9b01      	ldr	r3, [sp, #4]
    b1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ee:	f003 0301 	and.w	r3, r3, #1
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d106      	bne.n	b204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b1f6:	4a05      	ldr	r2, [pc, #20]	; (b20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b1f8:	9b01      	ldr	r3, [sp, #4]
    b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fe:	2b00      	cmp	r3, #0
    b200:	d100      	bne.n	b204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b204:	bf00      	nop
    b206:	b003      	add	sp, #12
    b208:	f85d fb04 	ldr.w	pc, [sp], #4
    b20c:	1fff8dfc 	.word	0x1fff8dfc
    b210:	1fff8df8 	.word	0x1fff8df8

0000b214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b214:	b500      	push	{lr}
    b216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b218:	f7f5 fcb0 	bl	b7c <Sys_GetCoreID>
    b21c:	4603      	mov	r3, r0
    b21e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b220:	4a10      	ldr	r2, [pc, #64]	; (b264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b222:	9b01      	ldr	r3, [sp, #4]
    b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b228:	2b00      	cmp	r3, #0
    b22a:	d10d      	bne.n	b248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b22c:	f7f5 fbc4 	bl	9b8 <Adc_schm_read_msr>
    b230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b232:	9b00      	ldr	r3, [sp, #0]
    b234:	f003 0301 	and.w	r3, r3, #1
    b238:	2b00      	cmp	r3, #0
    b23a:	d100      	bne.n	b23e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b23c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b23e:	490a      	ldr	r1, [pc, #40]	; (b268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b240:	9b01      	ldr	r3, [sp, #4]
    b242:	9a00      	ldr	r2, [sp, #0]
    b244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b248:	4a06      	ldr	r2, [pc, #24]	; (b264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b24a:	9b01      	ldr	r3, [sp, #4]
    b24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b250:	1c5a      	adds	r2, r3, #1
    b252:	4904      	ldr	r1, [pc, #16]	; (b264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b254:	9b01      	ldr	r3, [sp, #4]
    b256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b25a:	bf00      	nop
    b25c:	b003      	add	sp, #12
    b25e:	f85d fb04 	ldr.w	pc, [sp], #4
    b262:	bf00      	nop
    b264:	1fff8e04 	.word	0x1fff8e04
    b268:	1fff8e00 	.word	0x1fff8e00

0000b26c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b26c:	b500      	push	{lr}
    b26e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b270:	f7f5 fc84 	bl	b7c <Sys_GetCoreID>
    b274:	4603      	mov	r3, r0
    b276:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b278:	4a0d      	ldr	r2, [pc, #52]	; (b2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b27a:	9b01      	ldr	r3, [sp, #4]
    b27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b280:	1e5a      	subs	r2, r3, #1
    b282:	490b      	ldr	r1, [pc, #44]	; (b2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b284:	9b01      	ldr	r3, [sp, #4]
    b286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b28a:	4a0a      	ldr	r2, [pc, #40]	; (b2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b28c:	9b01      	ldr	r3, [sp, #4]
    b28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b292:	f003 0301 	and.w	r3, r3, #1
    b296:	2b00      	cmp	r3, #0
    b298:	d106      	bne.n	b2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b29a:	4a05      	ldr	r2, [pc, #20]	; (b2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b29c:	9b01      	ldr	r3, [sp, #4]
    b29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	d100      	bne.n	b2a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2a8:	bf00      	nop
    b2aa:	b003      	add	sp, #12
    b2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b0:	1fff8e04 	.word	0x1fff8e04
    b2b4:	1fff8e00 	.word	0x1fff8e00

0000b2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b2b8:	b500      	push	{lr}
    b2ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2bc:	f7f5 fc5e 	bl	b7c <Sys_GetCoreID>
    b2c0:	4603      	mov	r3, r0
    b2c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b2c4:	4a10      	ldr	r2, [pc, #64]	; (b308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b2c6:	9b01      	ldr	r3, [sp, #4]
    b2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2cc:	2b00      	cmp	r3, #0
    b2ce:	d10d      	bne.n	b2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2d0:	f7f5 fb72 	bl	9b8 <Adc_schm_read_msr>
    b2d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2d6:	9b00      	ldr	r3, [sp, #0]
    b2d8:	f003 0301 	and.w	r3, r3, #1
    b2dc:	2b00      	cmp	r3, #0
    b2de:	d100      	bne.n	b2e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b2e2:	490a      	ldr	r1, [pc, #40]	; (b30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b2e4:	9b01      	ldr	r3, [sp, #4]
    b2e6:	9a00      	ldr	r2, [sp, #0]
    b2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b2ec:	4a06      	ldr	r2, [pc, #24]	; (b308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b2ee:	9b01      	ldr	r3, [sp, #4]
    b2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f4:	1c5a      	adds	r2, r3, #1
    b2f6:	4904      	ldr	r1, [pc, #16]	; (b308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b2f8:	9b01      	ldr	r3, [sp, #4]
    b2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2fe:	bf00      	nop
    b300:	b003      	add	sp, #12
    b302:	f85d fb04 	ldr.w	pc, [sp], #4
    b306:	bf00      	nop
    b308:	1fff8e0c 	.word	0x1fff8e0c
    b30c:	1fff8e08 	.word	0x1fff8e08

0000b310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b310:	b500      	push	{lr}
    b312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b314:	f7f5 fc32 	bl	b7c <Sys_GetCoreID>
    b318:	4603      	mov	r3, r0
    b31a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b31c:	4a0d      	ldr	r2, [pc, #52]	; (b354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b31e:	9b01      	ldr	r3, [sp, #4]
    b320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b324:	1e5a      	subs	r2, r3, #1
    b326:	490b      	ldr	r1, [pc, #44]	; (b354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b328:	9b01      	ldr	r3, [sp, #4]
    b32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b32e:	4a0a      	ldr	r2, [pc, #40]	; (b358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b330:	9b01      	ldr	r3, [sp, #4]
    b332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b336:	f003 0301 	and.w	r3, r3, #1
    b33a:	2b00      	cmp	r3, #0
    b33c:	d106      	bne.n	b34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b33e:	4a05      	ldr	r2, [pc, #20]	; (b354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b340:	9b01      	ldr	r3, [sp, #4]
    b342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b346:	2b00      	cmp	r3, #0
    b348:	d100      	bne.n	b34c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b34a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b34c:	bf00      	nop
    b34e:	b003      	add	sp, #12
    b350:	f85d fb04 	ldr.w	pc, [sp], #4
    b354:	1fff8e0c 	.word	0x1fff8e0c
    b358:	1fff8e08 	.word	0x1fff8e08

0000b35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b35c:	b500      	push	{lr}
    b35e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b360:	f7f5 fc0c 	bl	b7c <Sys_GetCoreID>
    b364:	4603      	mov	r3, r0
    b366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b368:	4a10      	ldr	r2, [pc, #64]	; (b3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b36a:	9b01      	ldr	r3, [sp, #4]
    b36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b370:	2b00      	cmp	r3, #0
    b372:	d10d      	bne.n	b390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b374:	f7f5 fb20 	bl	9b8 <Adc_schm_read_msr>
    b378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b37a:	9b00      	ldr	r3, [sp, #0]
    b37c:	f003 0301 	and.w	r3, r3, #1
    b380:	2b00      	cmp	r3, #0
    b382:	d100      	bne.n	b386 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b386:	490a      	ldr	r1, [pc, #40]	; (b3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b388:	9b01      	ldr	r3, [sp, #4]
    b38a:	9a00      	ldr	r2, [sp, #0]
    b38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b390:	4a06      	ldr	r2, [pc, #24]	; (b3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b392:	9b01      	ldr	r3, [sp, #4]
    b394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b398:	1c5a      	adds	r2, r3, #1
    b39a:	4904      	ldr	r1, [pc, #16]	; (b3ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b39c:	9b01      	ldr	r3, [sp, #4]
    b39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3a2:	bf00      	nop
    b3a4:	b003      	add	sp, #12
    b3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    b3aa:	bf00      	nop
    b3ac:	1fff8e14 	.word	0x1fff8e14
    b3b0:	1fff8e10 	.word	0x1fff8e10

0000b3b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b3b4:	b500      	push	{lr}
    b3b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3b8:	f7f5 fbe0 	bl	b7c <Sys_GetCoreID>
    b3bc:	4603      	mov	r3, r0
    b3be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b3c0:	4a0d      	ldr	r2, [pc, #52]	; (b3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b3c2:	9b01      	ldr	r3, [sp, #4]
    b3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c8:	1e5a      	subs	r2, r3, #1
    b3ca:	490b      	ldr	r1, [pc, #44]	; (b3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b3cc:	9b01      	ldr	r3, [sp, #4]
    b3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b3d2:	4a0a      	ldr	r2, [pc, #40]	; (b3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b3d4:	9b01      	ldr	r3, [sp, #4]
    b3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3da:	f003 0301 	and.w	r3, r3, #1
    b3de:	2b00      	cmp	r3, #0
    b3e0:	d106      	bne.n	b3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b3e2:	4a05      	ldr	r2, [pc, #20]	; (b3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b3e4:	9b01      	ldr	r3, [sp, #4]
    b3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ea:	2b00      	cmp	r3, #0
    b3ec:	d100      	bne.n	b3f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3f0:	bf00      	nop
    b3f2:	b003      	add	sp, #12
    b3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f8:	1fff8e14 	.word	0x1fff8e14
    b3fc:	1fff8e10 	.word	0x1fff8e10

0000b400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b400:	b500      	push	{lr}
    b402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b404:	f7f5 fbba 	bl	b7c <Sys_GetCoreID>
    b408:	4603      	mov	r3, r0
    b40a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b40c:	4a10      	ldr	r2, [pc, #64]	; (b450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b414:	2b00      	cmp	r3, #0
    b416:	d10d      	bne.n	b434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b418:	f7f5 face 	bl	9b8 <Adc_schm_read_msr>
    b41c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b41e:	9b00      	ldr	r3, [sp, #0]
    b420:	f003 0301 	and.w	r3, r3, #1
    b424:	2b00      	cmp	r3, #0
    b426:	d100      	bne.n	b42a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b42a:	490a      	ldr	r1, [pc, #40]	; (b454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b42c:	9b01      	ldr	r3, [sp, #4]
    b42e:	9a00      	ldr	r2, [sp, #0]
    b430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b434:	4a06      	ldr	r2, [pc, #24]	; (b450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b436:	9b01      	ldr	r3, [sp, #4]
    b438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b43c:	1c5a      	adds	r2, r3, #1
    b43e:	4904      	ldr	r1, [pc, #16]	; (b450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b440:	9b01      	ldr	r3, [sp, #4]
    b442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b446:	bf00      	nop
    b448:	b003      	add	sp, #12
    b44a:	f85d fb04 	ldr.w	pc, [sp], #4
    b44e:	bf00      	nop
    b450:	1fff8e1c 	.word	0x1fff8e1c
    b454:	1fff8e18 	.word	0x1fff8e18

0000b458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b458:	b500      	push	{lr}
    b45a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b45c:	f7f5 fb8e 	bl	b7c <Sys_GetCoreID>
    b460:	4603      	mov	r3, r0
    b462:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b464:	4a0d      	ldr	r2, [pc, #52]	; (b49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b466:	9b01      	ldr	r3, [sp, #4]
    b468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b46c:	1e5a      	subs	r2, r3, #1
    b46e:	490b      	ldr	r1, [pc, #44]	; (b49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b470:	9b01      	ldr	r3, [sp, #4]
    b472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b476:	4a0a      	ldr	r2, [pc, #40]	; (b4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b478:	9b01      	ldr	r3, [sp, #4]
    b47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47e:	f003 0301 	and.w	r3, r3, #1
    b482:	2b00      	cmp	r3, #0
    b484:	d106      	bne.n	b494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b486:	4a05      	ldr	r2, [pc, #20]	; (b49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b488:	9b01      	ldr	r3, [sp, #4]
    b48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b48e:	2b00      	cmp	r3, #0
    b490:	d100      	bne.n	b494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b494:	bf00      	nop
    b496:	b003      	add	sp, #12
    b498:	f85d fb04 	ldr.w	pc, [sp], #4
    b49c:	1fff8e1c 	.word	0x1fff8e1c
    b4a0:	1fff8e18 	.word	0x1fff8e18

0000b4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b4a4:	b500      	push	{lr}
    b4a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4a8:	f7f5 fb68 	bl	b7c <Sys_GetCoreID>
    b4ac:	4603      	mov	r3, r0
    b4ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    b4b0:	4a10      	ldr	r2, [pc, #64]	; (b4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b4b2:	9b01      	ldr	r3, [sp, #4]
    b4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d10d      	bne.n	b4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4bc:	f7f5 fa7c 	bl	9b8 <Adc_schm_read_msr>
    b4c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4c2:	9b00      	ldr	r3, [sp, #0]
    b4c4:	f003 0301 	and.w	r3, r3, #1
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d100      	bne.n	b4ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b4ce:	490a      	ldr	r1, [pc, #40]	; (b4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    b4d0:	9b01      	ldr	r3, [sp, #4]
    b4d2:	9a00      	ldr	r2, [sp, #0]
    b4d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    b4d8:	4a06      	ldr	r2, [pc, #24]	; (b4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b4da:	9b01      	ldr	r3, [sp, #4]
    b4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e0:	1c5a      	adds	r2, r3, #1
    b4e2:	4904      	ldr	r1, [pc, #16]	; (b4f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b4e4:	9b01      	ldr	r3, [sp, #4]
    b4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4ea:	bf00      	nop
    b4ec:	b003      	add	sp, #12
    b4ee:	f85d fb04 	ldr.w	pc, [sp], #4
    b4f2:	bf00      	nop
    b4f4:	1fff8e24 	.word	0x1fff8e24
    b4f8:	1fff8e20 	.word	0x1fff8e20

0000b4fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b4fc:	b500      	push	{lr}
    b4fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b500:	f7f5 fb3c 	bl	b7c <Sys_GetCoreID>
    b504:	4603      	mov	r3, r0
    b506:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    b508:	4a0d      	ldr	r2, [pc, #52]	; (b540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b50a:	9b01      	ldr	r3, [sp, #4]
    b50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b510:	1e5a      	subs	r2, r3, #1
    b512:	490b      	ldr	r1, [pc, #44]	; (b540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b514:	9b01      	ldr	r3, [sp, #4]
    b516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b51a:	4a0a      	ldr	r2, [pc, #40]	; (b544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    b51c:	9b01      	ldr	r3, [sp, #4]
    b51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b522:	f003 0301 	and.w	r3, r3, #1
    b526:	2b00      	cmp	r3, #0
    b528:	d106      	bne.n	b538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    b52a:	4a05      	ldr	r2, [pc, #20]	; (b540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b52c:	9b01      	ldr	r3, [sp, #4]
    b52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b532:	2b00      	cmp	r3, #0
    b534:	d100      	bne.n	b538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b538:	bf00      	nop
    b53a:	b003      	add	sp, #12
    b53c:	f85d fb04 	ldr.w	pc, [sp], #4
    b540:	1fff8e24 	.word	0x1fff8e24
    b544:	1fff8e20 	.word	0x1fff8e20

0000b548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b548:	b500      	push	{lr}
    b54a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b54c:	f7f5 fb16 	bl	b7c <Sys_GetCoreID>
    b550:	4603      	mov	r3, r0
    b552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    b554:	4a10      	ldr	r2, [pc, #64]	; (b598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b556:	9b01      	ldr	r3, [sp, #4]
    b558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b55c:	2b00      	cmp	r3, #0
    b55e:	d10d      	bne.n	b57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b560:	f7f5 fa2a 	bl	9b8 <Adc_schm_read_msr>
    b564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b566:	9b00      	ldr	r3, [sp, #0]
    b568:	f003 0301 	and.w	r3, r3, #1
    b56c:	2b00      	cmp	r3, #0
    b56e:	d100      	bne.n	b572 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b572:	490a      	ldr	r1, [pc, #40]	; (b59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    b574:	9b01      	ldr	r3, [sp, #4]
    b576:	9a00      	ldr	r2, [sp, #0]
    b578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    b57c:	4a06      	ldr	r2, [pc, #24]	; (b598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b57e:	9b01      	ldr	r3, [sp, #4]
    b580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b584:	1c5a      	adds	r2, r3, #1
    b586:	4904      	ldr	r1, [pc, #16]	; (b598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b588:	9b01      	ldr	r3, [sp, #4]
    b58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b58e:	bf00      	nop
    b590:	b003      	add	sp, #12
    b592:	f85d fb04 	ldr.w	pc, [sp], #4
    b596:	bf00      	nop
    b598:	1fff8e2c 	.word	0x1fff8e2c
    b59c:	1fff8e28 	.word	0x1fff8e28

0000b5a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b5a0:	b500      	push	{lr}
    b5a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5a4:	f7f5 faea 	bl	b7c <Sys_GetCoreID>
    b5a8:	4603      	mov	r3, r0
    b5aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    b5ac:	4a0d      	ldr	r2, [pc, #52]	; (b5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b5ae:	9b01      	ldr	r3, [sp, #4]
    b5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b4:	1e5a      	subs	r2, r3, #1
    b5b6:	490b      	ldr	r1, [pc, #44]	; (b5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b5b8:	9b01      	ldr	r3, [sp, #4]
    b5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b5be:	4a0a      	ldr	r2, [pc, #40]	; (b5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    b5c0:	9b01      	ldr	r3, [sp, #4]
    b5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5c6:	f003 0301 	and.w	r3, r3, #1
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d106      	bne.n	b5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    b5ce:	4a05      	ldr	r2, [pc, #20]	; (b5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b5d0:	9b01      	ldr	r3, [sp, #4]
    b5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d6:	2b00      	cmp	r3, #0
    b5d8:	d100      	bne.n	b5dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5dc:	bf00      	nop
    b5de:	b003      	add	sp, #12
    b5e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b5e4:	1fff8e2c 	.word	0x1fff8e2c
    b5e8:	1fff8e28 	.word	0x1fff8e28

0000b5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b5ec:	b500      	push	{lr}
    b5ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5f0:	f7f5 fac4 	bl	b7c <Sys_GetCoreID>
    b5f4:	4603      	mov	r3, r0
    b5f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    b5f8:	4a10      	ldr	r2, [pc, #64]	; (b63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b5fa:	9b01      	ldr	r3, [sp, #4]
    b5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b600:	2b00      	cmp	r3, #0
    b602:	d10d      	bne.n	b620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b604:	f7f5 f9d8 	bl	9b8 <Adc_schm_read_msr>
    b608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b60a:	9b00      	ldr	r3, [sp, #0]
    b60c:	f003 0301 	and.w	r3, r3, #1
    b610:	2b00      	cmp	r3, #0
    b612:	d100      	bne.n	b616 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b616:	490a      	ldr	r1, [pc, #40]	; (b640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    b618:	9b01      	ldr	r3, [sp, #4]
    b61a:	9a00      	ldr	r2, [sp, #0]
    b61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    b620:	4a06      	ldr	r2, [pc, #24]	; (b63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b622:	9b01      	ldr	r3, [sp, #4]
    b624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b628:	1c5a      	adds	r2, r3, #1
    b62a:	4904      	ldr	r1, [pc, #16]	; (b63c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b62c:	9b01      	ldr	r3, [sp, #4]
    b62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b632:	bf00      	nop
    b634:	b003      	add	sp, #12
    b636:	f85d fb04 	ldr.w	pc, [sp], #4
    b63a:	bf00      	nop
    b63c:	1fff8e34 	.word	0x1fff8e34
    b640:	1fff8e30 	.word	0x1fff8e30

0000b644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b644:	b500      	push	{lr}
    b646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b648:	f7f5 fa98 	bl	b7c <Sys_GetCoreID>
    b64c:	4603      	mov	r3, r0
    b64e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    b650:	4a0d      	ldr	r2, [pc, #52]	; (b688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b652:	9b01      	ldr	r3, [sp, #4]
    b654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b658:	1e5a      	subs	r2, r3, #1
    b65a:	490b      	ldr	r1, [pc, #44]	; (b688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b65c:	9b01      	ldr	r3, [sp, #4]
    b65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b662:	4a0a      	ldr	r2, [pc, #40]	; (b68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    b664:	9b01      	ldr	r3, [sp, #4]
    b666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b66a:	f003 0301 	and.w	r3, r3, #1
    b66e:	2b00      	cmp	r3, #0
    b670:	d106      	bne.n	b680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    b672:	4a05      	ldr	r2, [pc, #20]	; (b688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b674:	9b01      	ldr	r3, [sp, #4]
    b676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b67a:	2b00      	cmp	r3, #0
    b67c:	d100      	bne.n	b680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b67e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b680:	bf00      	nop
    b682:	b003      	add	sp, #12
    b684:	f85d fb04 	ldr.w	pc, [sp], #4
    b688:	1fff8e34 	.word	0x1fff8e34
    b68c:	1fff8e30 	.word	0x1fff8e30

0000b690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b690:	b500      	push	{lr}
    b692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b694:	f7f5 fa72 	bl	b7c <Sys_GetCoreID>
    b698:	4603      	mov	r3, r0
    b69a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    b69c:	4a10      	ldr	r2, [pc, #64]	; (b6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b69e:	9b01      	ldr	r3, [sp, #4]
    b6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d10d      	bne.n	b6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6a8:	f7f5 f986 	bl	9b8 <Adc_schm_read_msr>
    b6ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6ae:	9b00      	ldr	r3, [sp, #0]
    b6b0:	f003 0301 	and.w	r3, r3, #1
    b6b4:	2b00      	cmp	r3, #0
    b6b6:	d100      	bne.n	b6ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b6ba:	490a      	ldr	r1, [pc, #40]	; (b6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    b6bc:	9b01      	ldr	r3, [sp, #4]
    b6be:	9a00      	ldr	r2, [sp, #0]
    b6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    b6c4:	4a06      	ldr	r2, [pc, #24]	; (b6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b6c6:	9b01      	ldr	r3, [sp, #4]
    b6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6cc:	1c5a      	adds	r2, r3, #1
    b6ce:	4904      	ldr	r1, [pc, #16]	; (b6e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b6d0:	9b01      	ldr	r3, [sp, #4]
    b6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6d6:	bf00      	nop
    b6d8:	b003      	add	sp, #12
    b6da:	f85d fb04 	ldr.w	pc, [sp], #4
    b6de:	bf00      	nop
    b6e0:	1fff8e3c 	.word	0x1fff8e3c
    b6e4:	1fff8e38 	.word	0x1fff8e38

0000b6e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b6e8:	b500      	push	{lr}
    b6ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6ec:	f7f5 fa46 	bl	b7c <Sys_GetCoreID>
    b6f0:	4603      	mov	r3, r0
    b6f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    b6f4:	4a0d      	ldr	r2, [pc, #52]	; (b72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b6f6:	9b01      	ldr	r3, [sp, #4]
    b6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6fc:	1e5a      	subs	r2, r3, #1
    b6fe:	490b      	ldr	r1, [pc, #44]	; (b72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b700:	9b01      	ldr	r3, [sp, #4]
    b702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b706:	4a0a      	ldr	r2, [pc, #40]	; (b730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    b708:	9b01      	ldr	r3, [sp, #4]
    b70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b70e:	f003 0301 	and.w	r3, r3, #1
    b712:	2b00      	cmp	r3, #0
    b714:	d106      	bne.n	b724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    b716:	4a05      	ldr	r2, [pc, #20]	; (b72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b718:	9b01      	ldr	r3, [sp, #4]
    b71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b71e:	2b00      	cmp	r3, #0
    b720:	d100      	bne.n	b724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b724:	bf00      	nop
    b726:	b003      	add	sp, #12
    b728:	f85d fb04 	ldr.w	pc, [sp], #4
    b72c:	1fff8e3c 	.word	0x1fff8e3c
    b730:	1fff8e38 	.word	0x1fff8e38

0000b734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b734:	b500      	push	{lr}
    b736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b738:	f7f5 fa20 	bl	b7c <Sys_GetCoreID>
    b73c:	4603      	mov	r3, r0
    b73e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    b740:	4a10      	ldr	r2, [pc, #64]	; (b784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b742:	9b01      	ldr	r3, [sp, #4]
    b744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b748:	2b00      	cmp	r3, #0
    b74a:	d10d      	bne.n	b768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b74c:	f7f5 f934 	bl	9b8 <Adc_schm_read_msr>
    b750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b752:	9b00      	ldr	r3, [sp, #0]
    b754:	f003 0301 	and.w	r3, r3, #1
    b758:	2b00      	cmp	r3, #0
    b75a:	d100      	bne.n	b75e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b75c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b75e:	490a      	ldr	r1, [pc, #40]	; (b788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    b760:	9b01      	ldr	r3, [sp, #4]
    b762:	9a00      	ldr	r2, [sp, #0]
    b764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    b768:	4a06      	ldr	r2, [pc, #24]	; (b784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b76a:	9b01      	ldr	r3, [sp, #4]
    b76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b770:	1c5a      	adds	r2, r3, #1
    b772:	4904      	ldr	r1, [pc, #16]	; (b784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b774:	9b01      	ldr	r3, [sp, #4]
    b776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b77a:	bf00      	nop
    b77c:	b003      	add	sp, #12
    b77e:	f85d fb04 	ldr.w	pc, [sp], #4
    b782:	bf00      	nop
    b784:	1fff8e44 	.word	0x1fff8e44
    b788:	1fff8e40 	.word	0x1fff8e40

0000b78c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b78c:	b500      	push	{lr}
    b78e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b790:	f7f5 f9f4 	bl	b7c <Sys_GetCoreID>
    b794:	4603      	mov	r3, r0
    b796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    b798:	4a0d      	ldr	r2, [pc, #52]	; (b7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b79a:	9b01      	ldr	r3, [sp, #4]
    b79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7a0:	1e5a      	subs	r2, r3, #1
    b7a2:	490b      	ldr	r1, [pc, #44]	; (b7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b7a4:	9b01      	ldr	r3, [sp, #4]
    b7a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b7aa:	4a0a      	ldr	r2, [pc, #40]	; (b7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    b7ac:	9b01      	ldr	r3, [sp, #4]
    b7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b2:	f003 0301 	and.w	r3, r3, #1
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d106      	bne.n	b7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    b7ba:	4a05      	ldr	r2, [pc, #20]	; (b7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b7bc:	9b01      	ldr	r3, [sp, #4]
    b7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d100      	bne.n	b7c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7c8:	bf00      	nop
    b7ca:	b003      	add	sp, #12
    b7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7d0:	1fff8e44 	.word	0x1fff8e44
    b7d4:	1fff8e40 	.word	0x1fff8e40

0000b7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b7d8:	b500      	push	{lr}
    b7da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7dc:	f7f5 f9ce 	bl	b7c <Sys_GetCoreID>
    b7e0:	4603      	mov	r3, r0
    b7e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    b7e4:	4a10      	ldr	r2, [pc, #64]	; (b828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b7e6:	9b01      	ldr	r3, [sp, #4]
    b7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d10d      	bne.n	b80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7f0:	f7f5 f8e2 	bl	9b8 <Adc_schm_read_msr>
    b7f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7f6:	9b00      	ldr	r3, [sp, #0]
    b7f8:	f003 0301 	and.w	r3, r3, #1
    b7fc:	2b00      	cmp	r3, #0
    b7fe:	d100      	bne.n	b802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b802:	490a      	ldr	r1, [pc, #40]	; (b82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    b804:	9b01      	ldr	r3, [sp, #4]
    b806:	9a00      	ldr	r2, [sp, #0]
    b808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    b80c:	4a06      	ldr	r2, [pc, #24]	; (b828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b80e:	9b01      	ldr	r3, [sp, #4]
    b810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b814:	1c5a      	adds	r2, r3, #1
    b816:	4904      	ldr	r1, [pc, #16]	; (b828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b818:	9b01      	ldr	r3, [sp, #4]
    b81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b81e:	bf00      	nop
    b820:	b003      	add	sp, #12
    b822:	f85d fb04 	ldr.w	pc, [sp], #4
    b826:	bf00      	nop
    b828:	1fff8e4c 	.word	0x1fff8e4c
    b82c:	1fff8e48 	.word	0x1fff8e48

0000b830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b830:	b500      	push	{lr}
    b832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b834:	f7f5 f9a2 	bl	b7c <Sys_GetCoreID>
    b838:	4603      	mov	r3, r0
    b83a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    b83c:	4a0d      	ldr	r2, [pc, #52]	; (b874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b83e:	9b01      	ldr	r3, [sp, #4]
    b840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b844:	1e5a      	subs	r2, r3, #1
    b846:	490b      	ldr	r1, [pc, #44]	; (b874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b848:	9b01      	ldr	r3, [sp, #4]
    b84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b84e:	4a0a      	ldr	r2, [pc, #40]	; (b878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    b850:	9b01      	ldr	r3, [sp, #4]
    b852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b856:	f003 0301 	and.w	r3, r3, #1
    b85a:	2b00      	cmp	r3, #0
    b85c:	d106      	bne.n	b86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    b85e:	4a05      	ldr	r2, [pc, #20]	; (b874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b860:	9b01      	ldr	r3, [sp, #4]
    b862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b866:	2b00      	cmp	r3, #0
    b868:	d100      	bne.n	b86c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b86a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b86c:	bf00      	nop
    b86e:	b003      	add	sp, #12
    b870:	f85d fb04 	ldr.w	pc, [sp], #4
    b874:	1fff8e4c 	.word	0x1fff8e4c
    b878:	1fff8e48 	.word	0x1fff8e48

0000b87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b87c:	b500      	push	{lr}
    b87e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b880:	f7f5 f97c 	bl	b7c <Sys_GetCoreID>
    b884:	4603      	mov	r3, r0
    b886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    b888:	4a10      	ldr	r2, [pc, #64]	; (b8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b88a:	9b01      	ldr	r3, [sp, #4]
    b88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b890:	2b00      	cmp	r3, #0
    b892:	d10d      	bne.n	b8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b894:	f7f5 f890 	bl	9b8 <Adc_schm_read_msr>
    b898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b89a:	9b00      	ldr	r3, [sp, #0]
    b89c:	f003 0301 	and.w	r3, r3, #1
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d100      	bne.n	b8a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b8a6:	490a      	ldr	r1, [pc, #40]	; (b8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    b8a8:	9b01      	ldr	r3, [sp, #4]
    b8aa:	9a00      	ldr	r2, [sp, #0]
    b8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    b8b0:	4a06      	ldr	r2, [pc, #24]	; (b8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b8b2:	9b01      	ldr	r3, [sp, #4]
    b8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b8:	1c5a      	adds	r2, r3, #1
    b8ba:	4904      	ldr	r1, [pc, #16]	; (b8cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b8bc:	9b01      	ldr	r3, [sp, #4]
    b8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8c2:	bf00      	nop
    b8c4:	b003      	add	sp, #12
    b8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    b8ca:	bf00      	nop
    b8cc:	1fff8e54 	.word	0x1fff8e54
    b8d0:	1fff8e50 	.word	0x1fff8e50

0000b8d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b8d4:	b500      	push	{lr}
    b8d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8d8:	f7f5 f950 	bl	b7c <Sys_GetCoreID>
    b8dc:	4603      	mov	r3, r0
    b8de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    b8e0:	4a0d      	ldr	r2, [pc, #52]	; (b918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b8e2:	9b01      	ldr	r3, [sp, #4]
    b8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8e8:	1e5a      	subs	r2, r3, #1
    b8ea:	490b      	ldr	r1, [pc, #44]	; (b918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b8ec:	9b01      	ldr	r3, [sp, #4]
    b8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b8f2:	4a0a      	ldr	r2, [pc, #40]	; (b91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    b8f4:	9b01      	ldr	r3, [sp, #4]
    b8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8fa:	f003 0301 	and.w	r3, r3, #1
    b8fe:	2b00      	cmp	r3, #0
    b900:	d106      	bne.n	b910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    b902:	4a05      	ldr	r2, [pc, #20]	; (b918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b904:	9b01      	ldr	r3, [sp, #4]
    b906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d100      	bne.n	b910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b90e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b910:	bf00      	nop
    b912:	b003      	add	sp, #12
    b914:	f85d fb04 	ldr.w	pc, [sp], #4
    b918:	1fff8e54 	.word	0x1fff8e54
    b91c:	1fff8e50 	.word	0x1fff8e50

0000b920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b920:	b500      	push	{lr}
    b922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b924:	f7f5 f92a 	bl	b7c <Sys_GetCoreID>
    b928:	4603      	mov	r3, r0
    b92a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    b92c:	4a10      	ldr	r2, [pc, #64]	; (b970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b92e:	9b01      	ldr	r3, [sp, #4]
    b930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b934:	2b00      	cmp	r3, #0
    b936:	d10d      	bne.n	b954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b938:	f7f5 f83e 	bl	9b8 <Adc_schm_read_msr>
    b93c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b93e:	9b00      	ldr	r3, [sp, #0]
    b940:	f003 0301 	and.w	r3, r3, #1
    b944:	2b00      	cmp	r3, #0
    b946:	d100      	bne.n	b94a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b94a:	490a      	ldr	r1, [pc, #40]	; (b974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    b94c:	9b01      	ldr	r3, [sp, #4]
    b94e:	9a00      	ldr	r2, [sp, #0]
    b950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    b954:	4a06      	ldr	r2, [pc, #24]	; (b970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b956:	9b01      	ldr	r3, [sp, #4]
    b958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b95c:	1c5a      	adds	r2, r3, #1
    b95e:	4904      	ldr	r1, [pc, #16]	; (b970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b960:	9b01      	ldr	r3, [sp, #4]
    b962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b966:	bf00      	nop
    b968:	b003      	add	sp, #12
    b96a:	f85d fb04 	ldr.w	pc, [sp], #4
    b96e:	bf00      	nop
    b970:	1fff8e5c 	.word	0x1fff8e5c
    b974:	1fff8e58 	.word	0x1fff8e58

0000b978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b978:	b500      	push	{lr}
    b97a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b97c:	f7f5 f8fe 	bl	b7c <Sys_GetCoreID>
    b980:	4603      	mov	r3, r0
    b982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    b984:	4a0d      	ldr	r2, [pc, #52]	; (b9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b986:	9b01      	ldr	r3, [sp, #4]
    b988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b98c:	1e5a      	subs	r2, r3, #1
    b98e:	490b      	ldr	r1, [pc, #44]	; (b9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b990:	9b01      	ldr	r3, [sp, #4]
    b992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b996:	4a0a      	ldr	r2, [pc, #40]	; (b9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    b998:	9b01      	ldr	r3, [sp, #4]
    b99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b99e:	f003 0301 	and.w	r3, r3, #1
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d106      	bne.n	b9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    b9a6:	4a05      	ldr	r2, [pc, #20]	; (b9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b9a8:	9b01      	ldr	r3, [sp, #4]
    b9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d100      	bne.n	b9b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9b4:	bf00      	nop
    b9b6:	b003      	add	sp, #12
    b9b8:	f85d fb04 	ldr.w	pc, [sp], #4
    b9bc:	1fff8e5c 	.word	0x1fff8e5c
    b9c0:	1fff8e58 	.word	0x1fff8e58

0000b9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b9c4:	b500      	push	{lr}
    b9c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9c8:	f7f5 f8d8 	bl	b7c <Sys_GetCoreID>
    b9cc:	4603      	mov	r3, r0
    b9ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    b9d0:	4a10      	ldr	r2, [pc, #64]	; (ba14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b9d2:	9b01      	ldr	r3, [sp, #4]
    b9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9d8:	2b00      	cmp	r3, #0
    b9da:	d10d      	bne.n	b9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9dc:	f7f4 ffec 	bl	9b8 <Adc_schm_read_msr>
    b9e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9e2:	9b00      	ldr	r3, [sp, #0]
    b9e4:	f003 0301 	and.w	r3, r3, #1
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d100      	bne.n	b9ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b9ee:	490a      	ldr	r1, [pc, #40]	; (ba18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    b9f0:	9b01      	ldr	r3, [sp, #4]
    b9f2:	9a00      	ldr	r2, [sp, #0]
    b9f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    b9f8:	4a06      	ldr	r2, [pc, #24]	; (ba14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b9fa:	9b01      	ldr	r3, [sp, #4]
    b9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba00:	1c5a      	adds	r2, r3, #1
    ba02:	4904      	ldr	r1, [pc, #16]	; (ba14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    ba04:	9b01      	ldr	r3, [sp, #4]
    ba06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba0a:	bf00      	nop
    ba0c:	b003      	add	sp, #12
    ba0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ba12:	bf00      	nop
    ba14:	1fff8e64 	.word	0x1fff8e64
    ba18:	1fff8e60 	.word	0x1fff8e60

0000ba1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    ba1c:	b500      	push	{lr}
    ba1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba20:	f7f5 f8ac 	bl	b7c <Sys_GetCoreID>
    ba24:	4603      	mov	r3, r0
    ba26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    ba28:	4a0d      	ldr	r2, [pc, #52]	; (ba60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    ba2a:	9b01      	ldr	r3, [sp, #4]
    ba2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba30:	1e5a      	subs	r2, r3, #1
    ba32:	490b      	ldr	r1, [pc, #44]	; (ba60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    ba34:	9b01      	ldr	r3, [sp, #4]
    ba36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    ba3a:	4a0a      	ldr	r2, [pc, #40]	; (ba64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    ba3c:	9b01      	ldr	r3, [sp, #4]
    ba3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba42:	f003 0301 	and.w	r3, r3, #1
    ba46:	2b00      	cmp	r3, #0
    ba48:	d106      	bne.n	ba58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    ba4a:	4a05      	ldr	r2, [pc, #20]	; (ba60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    ba4c:	9b01      	ldr	r3, [sp, #4]
    ba4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba52:	2b00      	cmp	r3, #0
    ba54:	d100      	bne.n	ba58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba58:	bf00      	nop
    ba5a:	b003      	add	sp, #12
    ba5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ba60:	1fff8e64 	.word	0x1fff8e64
    ba64:	1fff8e60 	.word	0x1fff8e60

0000ba68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ba68:	b500      	push	{lr}
    ba6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba6c:	f7f5 f886 	bl	b7c <Sys_GetCoreID>
    ba70:	4603      	mov	r3, r0
    ba72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    ba74:	4a10      	ldr	r2, [pc, #64]	; (bab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ba76:	9b01      	ldr	r3, [sp, #4]
    ba78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d10d      	bne.n	ba9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba80:	f7f4 ff9a 	bl	9b8 <Adc_schm_read_msr>
    ba84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba86:	9b00      	ldr	r3, [sp, #0]
    ba88:	f003 0301 	and.w	r3, r3, #1
    ba8c:	2b00      	cmp	r3, #0
    ba8e:	d100      	bne.n	ba92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    ba92:	490a      	ldr	r1, [pc, #40]	; (babc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    ba94:	9b01      	ldr	r3, [sp, #4]
    ba96:	9a00      	ldr	r2, [sp, #0]
    ba98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    ba9c:	4a06      	ldr	r2, [pc, #24]	; (bab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ba9e:	9b01      	ldr	r3, [sp, #4]
    baa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baa4:	1c5a      	adds	r2, r3, #1
    baa6:	4904      	ldr	r1, [pc, #16]	; (bab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    baa8:	9b01      	ldr	r3, [sp, #4]
    baaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    baae:	bf00      	nop
    bab0:	b003      	add	sp, #12
    bab2:	f85d fb04 	ldr.w	pc, [sp], #4
    bab6:	bf00      	nop
    bab8:	1fff8e6c 	.word	0x1fff8e6c
    babc:	1fff8e68 	.word	0x1fff8e68

0000bac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    bac0:	b500      	push	{lr}
    bac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bac4:	f7f5 f85a 	bl	b7c <Sys_GetCoreID>
    bac8:	4603      	mov	r3, r0
    baca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    bacc:	4a0d      	ldr	r2, [pc, #52]	; (bb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bace:	9b01      	ldr	r3, [sp, #4]
    bad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bad4:	1e5a      	subs	r2, r3, #1
    bad6:	490b      	ldr	r1, [pc, #44]	; (bb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    bad8:	9b01      	ldr	r3, [sp, #4]
    bada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    bade:	4a0a      	ldr	r2, [pc, #40]	; (bb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    bae0:	9b01      	ldr	r3, [sp, #4]
    bae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bae6:	f003 0301 	and.w	r3, r3, #1
    baea:	2b00      	cmp	r3, #0
    baec:	d106      	bne.n	bafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    baee:	4a05      	ldr	r2, [pc, #20]	; (bb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    baf0:	9b01      	ldr	r3, [sp, #4]
    baf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baf6:	2b00      	cmp	r3, #0
    baf8:	d100      	bne.n	bafc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bafa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bafc:	bf00      	nop
    bafe:	b003      	add	sp, #12
    bb00:	f85d fb04 	ldr.w	pc, [sp], #4
    bb04:	1fff8e6c 	.word	0x1fff8e6c
    bb08:	1fff8e68 	.word	0x1fff8e68

0000bb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bb0c:	b500      	push	{lr}
    bb0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb10:	f7f5 f834 	bl	b7c <Sys_GetCoreID>
    bb14:	4603      	mov	r3, r0
    bb16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    bb18:	4a10      	ldr	r2, [pc, #64]	; (bb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bb1a:	9b01      	ldr	r3, [sp, #4]
    bb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb20:	2b00      	cmp	r3, #0
    bb22:	d10d      	bne.n	bb40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb24:	f7f4 ff48 	bl	9b8 <Adc_schm_read_msr>
    bb28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb2a:	9b00      	ldr	r3, [sp, #0]
    bb2c:	f003 0301 	and.w	r3, r3, #1
    bb30:	2b00      	cmp	r3, #0
    bb32:	d100      	bne.n	bb36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    bb36:	490a      	ldr	r1, [pc, #40]	; (bb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    bb38:	9b01      	ldr	r3, [sp, #4]
    bb3a:	9a00      	ldr	r2, [sp, #0]
    bb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    bb40:	4a06      	ldr	r2, [pc, #24]	; (bb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bb42:	9b01      	ldr	r3, [sp, #4]
    bb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb48:	1c5a      	adds	r2, r3, #1
    bb4a:	4904      	ldr	r1, [pc, #16]	; (bb5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    bb4c:	9b01      	ldr	r3, [sp, #4]
    bb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb52:	bf00      	nop
    bb54:	b003      	add	sp, #12
    bb56:	f85d fb04 	ldr.w	pc, [sp], #4
    bb5a:	bf00      	nop
    bb5c:	1fff8e74 	.word	0x1fff8e74
    bb60:	1fff8e70 	.word	0x1fff8e70

0000bb64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bb64:	b500      	push	{lr}
    bb66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb68:	f7f5 f808 	bl	b7c <Sys_GetCoreID>
    bb6c:	4603      	mov	r3, r0
    bb6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    bb70:	4a0d      	ldr	r2, [pc, #52]	; (bba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bb72:	9b01      	ldr	r3, [sp, #4]
    bb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb78:	1e5a      	subs	r2, r3, #1
    bb7a:	490b      	ldr	r1, [pc, #44]	; (bba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bb7c:	9b01      	ldr	r3, [sp, #4]
    bb7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    bb82:	4a0a      	ldr	r2, [pc, #40]	; (bbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    bb84:	9b01      	ldr	r3, [sp, #4]
    bb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb8a:	f003 0301 	and.w	r3, r3, #1
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d106      	bne.n	bba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    bb92:	4a05      	ldr	r2, [pc, #20]	; (bba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bb94:	9b01      	ldr	r3, [sp, #4]
    bb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	d100      	bne.n	bba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bb9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bba0:	bf00      	nop
    bba2:	b003      	add	sp, #12
    bba4:	f85d fb04 	ldr.w	pc, [sp], #4
    bba8:	1fff8e74 	.word	0x1fff8e74
    bbac:	1fff8e70 	.word	0x1fff8e70

0000bbb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bbb0:	b500      	push	{lr}
    bbb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbb4:	f7f4 ffe2 	bl	b7c <Sys_GetCoreID>
    bbb8:	4603      	mov	r3, r0
    bbba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    bbbc:	4a10      	ldr	r2, [pc, #64]	; (bc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bbbe:	9b01      	ldr	r3, [sp, #4]
    bbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d10d      	bne.n	bbe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbc8:	f7f4 fef6 	bl	9b8 <Adc_schm_read_msr>
    bbcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbce:	9b00      	ldr	r3, [sp, #0]
    bbd0:	f003 0301 	and.w	r3, r3, #1
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d100      	bne.n	bbda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    bbda:	490a      	ldr	r1, [pc, #40]	; (bc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    bbdc:	9b01      	ldr	r3, [sp, #4]
    bbde:	9a00      	ldr	r2, [sp, #0]
    bbe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    bbe4:	4a06      	ldr	r2, [pc, #24]	; (bc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bbe6:	9b01      	ldr	r3, [sp, #4]
    bbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbec:	1c5a      	adds	r2, r3, #1
    bbee:	4904      	ldr	r1, [pc, #16]	; (bc00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bbf0:	9b01      	ldr	r3, [sp, #4]
    bbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbf6:	bf00      	nop
    bbf8:	b003      	add	sp, #12
    bbfa:	f85d fb04 	ldr.w	pc, [sp], #4
    bbfe:	bf00      	nop
    bc00:	1fff8e7c 	.word	0x1fff8e7c
    bc04:	1fff8e78 	.word	0x1fff8e78

0000bc08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bc08:	b500      	push	{lr}
    bc0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc0c:	f7f4 ffb6 	bl	b7c <Sys_GetCoreID>
    bc10:	4603      	mov	r3, r0
    bc12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    bc14:	4a0d      	ldr	r2, [pc, #52]	; (bc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bc16:	9b01      	ldr	r3, [sp, #4]
    bc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc1c:	1e5a      	subs	r2, r3, #1
    bc1e:	490b      	ldr	r1, [pc, #44]	; (bc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bc20:	9b01      	ldr	r3, [sp, #4]
    bc22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    bc26:	4a0a      	ldr	r2, [pc, #40]	; (bc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    bc28:	9b01      	ldr	r3, [sp, #4]
    bc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc2e:	f003 0301 	and.w	r3, r3, #1
    bc32:	2b00      	cmp	r3, #0
    bc34:	d106      	bne.n	bc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    bc36:	4a05      	ldr	r2, [pc, #20]	; (bc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bc38:	9b01      	ldr	r3, [sp, #4]
    bc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc3e:	2b00      	cmp	r3, #0
    bc40:	d100      	bne.n	bc44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc44:	bf00      	nop
    bc46:	b003      	add	sp, #12
    bc48:	f85d fb04 	ldr.w	pc, [sp], #4
    bc4c:	1fff8e7c 	.word	0x1fff8e7c
    bc50:	1fff8e78 	.word	0x1fff8e78

0000bc54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bc54:	b500      	push	{lr}
    bc56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc58:	f7f4 ff90 	bl	b7c <Sys_GetCoreID>
    bc5c:	4603      	mov	r3, r0
    bc5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    bc60:	4a10      	ldr	r2, [pc, #64]	; (bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bc62:	9b01      	ldr	r3, [sp, #4]
    bc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d10d      	bne.n	bc88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc6c:	f7f4 fea4 	bl	9b8 <Adc_schm_read_msr>
    bc70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc72:	9b00      	ldr	r3, [sp, #0]
    bc74:	f003 0301 	and.w	r3, r3, #1
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d100      	bne.n	bc7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    bc7e:	490a      	ldr	r1, [pc, #40]	; (bca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    bc80:	9b01      	ldr	r3, [sp, #4]
    bc82:	9a00      	ldr	r2, [sp, #0]
    bc84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    bc88:	4a06      	ldr	r2, [pc, #24]	; (bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bc8a:	9b01      	ldr	r3, [sp, #4]
    bc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc90:	1c5a      	adds	r2, r3, #1
    bc92:	4904      	ldr	r1, [pc, #16]	; (bca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bc94:	9b01      	ldr	r3, [sp, #4]
    bc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc9a:	bf00      	nop
    bc9c:	b003      	add	sp, #12
    bc9e:	f85d fb04 	ldr.w	pc, [sp], #4
    bca2:	bf00      	nop
    bca4:	1fff8e84 	.word	0x1fff8e84
    bca8:	1fff8e80 	.word	0x1fff8e80

0000bcac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bcac:	b500      	push	{lr}
    bcae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcb0:	f7f4 ff64 	bl	b7c <Sys_GetCoreID>
    bcb4:	4603      	mov	r3, r0
    bcb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    bcb8:	4a0d      	ldr	r2, [pc, #52]	; (bcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bcba:	9b01      	ldr	r3, [sp, #4]
    bcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcc0:	1e5a      	subs	r2, r3, #1
    bcc2:	490b      	ldr	r1, [pc, #44]	; (bcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bcc4:	9b01      	ldr	r3, [sp, #4]
    bcc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    bcca:	4a0a      	ldr	r2, [pc, #40]	; (bcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    bccc:	9b01      	ldr	r3, [sp, #4]
    bcce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd2:	f003 0301 	and.w	r3, r3, #1
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	d106      	bne.n	bce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    bcda:	4a05      	ldr	r2, [pc, #20]	; (bcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bcdc:	9b01      	ldr	r3, [sp, #4]
    bcde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bce2:	2b00      	cmp	r3, #0
    bce4:	d100      	bne.n	bce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bce8:	bf00      	nop
    bcea:	b003      	add	sp, #12
    bcec:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf0:	1fff8e84 	.word	0x1fff8e84
    bcf4:	1fff8e80 	.word	0x1fff8e80

0000bcf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bcf8:	b500      	push	{lr}
    bcfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcfc:	f7f4 ff3e 	bl	b7c <Sys_GetCoreID>
    bd00:	4603      	mov	r3, r0
    bd02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    bd04:	4a10      	ldr	r2, [pc, #64]	; (bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bd06:	9b01      	ldr	r3, [sp, #4]
    bd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	d10d      	bne.n	bd2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd10:	f7f4 fe52 	bl	9b8 <Adc_schm_read_msr>
    bd14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd16:	9b00      	ldr	r3, [sp, #0]
    bd18:	f003 0301 	and.w	r3, r3, #1
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	d100      	bne.n	bd22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    bd22:	490a      	ldr	r1, [pc, #40]	; (bd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    bd24:	9b01      	ldr	r3, [sp, #4]
    bd26:	9a00      	ldr	r2, [sp, #0]
    bd28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    bd2c:	4a06      	ldr	r2, [pc, #24]	; (bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bd2e:	9b01      	ldr	r3, [sp, #4]
    bd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd34:	1c5a      	adds	r2, r3, #1
    bd36:	4904      	ldr	r1, [pc, #16]	; (bd48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bd38:	9b01      	ldr	r3, [sp, #4]
    bd3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd3e:	bf00      	nop
    bd40:	b003      	add	sp, #12
    bd42:	f85d fb04 	ldr.w	pc, [sp], #4
    bd46:	bf00      	nop
    bd48:	1fff8e8c 	.word	0x1fff8e8c
    bd4c:	1fff8e88 	.word	0x1fff8e88

0000bd50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bd50:	b500      	push	{lr}
    bd52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd54:	f7f4 ff12 	bl	b7c <Sys_GetCoreID>
    bd58:	4603      	mov	r3, r0
    bd5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    bd5c:	4a0d      	ldr	r2, [pc, #52]	; (bd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bd5e:	9b01      	ldr	r3, [sp, #4]
    bd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd64:	1e5a      	subs	r2, r3, #1
    bd66:	490b      	ldr	r1, [pc, #44]	; (bd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bd68:	9b01      	ldr	r3, [sp, #4]
    bd6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    bd6e:	4a0a      	ldr	r2, [pc, #40]	; (bd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    bd70:	9b01      	ldr	r3, [sp, #4]
    bd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd76:	f003 0301 	and.w	r3, r3, #1
    bd7a:	2b00      	cmp	r3, #0
    bd7c:	d106      	bne.n	bd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    bd7e:	4a05      	ldr	r2, [pc, #20]	; (bd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bd80:	9b01      	ldr	r3, [sp, #4]
    bd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd86:	2b00      	cmp	r3, #0
    bd88:	d100      	bne.n	bd8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd8c:	bf00      	nop
    bd8e:	b003      	add	sp, #12
    bd90:	f85d fb04 	ldr.w	pc, [sp], #4
    bd94:	1fff8e8c 	.word	0x1fff8e8c
    bd98:	1fff8e88 	.word	0x1fff8e88

0000bd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bd9c:	b500      	push	{lr}
    bd9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bda0:	f7f4 feec 	bl	b7c <Sys_GetCoreID>
    bda4:	4603      	mov	r3, r0
    bda6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    bda8:	4a10      	ldr	r2, [pc, #64]	; (bdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bdaa:	9b01      	ldr	r3, [sp, #4]
    bdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d10d      	bne.n	bdd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdb4:	f7f4 fe00 	bl	9b8 <Adc_schm_read_msr>
    bdb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdba:	9b00      	ldr	r3, [sp, #0]
    bdbc:	f003 0301 	and.w	r3, r3, #1
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d100      	bne.n	bdc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    bdc6:	490a      	ldr	r1, [pc, #40]	; (bdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    bdc8:	9b01      	ldr	r3, [sp, #4]
    bdca:	9a00      	ldr	r2, [sp, #0]
    bdcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    bdd0:	4a06      	ldr	r2, [pc, #24]	; (bdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bdd2:	9b01      	ldr	r3, [sp, #4]
    bdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdd8:	1c5a      	adds	r2, r3, #1
    bdda:	4904      	ldr	r1, [pc, #16]	; (bdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bddc:	9b01      	ldr	r3, [sp, #4]
    bdde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bde2:	bf00      	nop
    bde4:	b003      	add	sp, #12
    bde6:	f85d fb04 	ldr.w	pc, [sp], #4
    bdea:	bf00      	nop
    bdec:	1fff8e94 	.word	0x1fff8e94
    bdf0:	1fff8e90 	.word	0x1fff8e90

0000bdf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bdf4:	b500      	push	{lr}
    bdf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdf8:	f7f4 fec0 	bl	b7c <Sys_GetCoreID>
    bdfc:	4603      	mov	r3, r0
    bdfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    be00:	4a0d      	ldr	r2, [pc, #52]	; (be38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    be02:	9b01      	ldr	r3, [sp, #4]
    be04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be08:	1e5a      	subs	r2, r3, #1
    be0a:	490b      	ldr	r1, [pc, #44]	; (be38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    be0c:	9b01      	ldr	r3, [sp, #4]
    be0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    be12:	4a0a      	ldr	r2, [pc, #40]	; (be3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    be14:	9b01      	ldr	r3, [sp, #4]
    be16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be1a:	f003 0301 	and.w	r3, r3, #1
    be1e:	2b00      	cmp	r3, #0
    be20:	d106      	bne.n	be30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    be22:	4a05      	ldr	r2, [pc, #20]	; (be38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    be24:	9b01      	ldr	r3, [sp, #4]
    be26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be2a:	2b00      	cmp	r3, #0
    be2c:	d100      	bne.n	be30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be30:	bf00      	nop
    be32:	b003      	add	sp, #12
    be34:	f85d fb04 	ldr.w	pc, [sp], #4
    be38:	1fff8e94 	.word	0x1fff8e94
    be3c:	1fff8e90 	.word	0x1fff8e90

0000be40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    be40:	b500      	push	{lr}
    be42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be44:	f7f4 fe9a 	bl	b7c <Sys_GetCoreID>
    be48:	4603      	mov	r3, r0
    be4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    be4c:	4a10      	ldr	r2, [pc, #64]	; (be90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    be4e:	9b01      	ldr	r3, [sp, #4]
    be50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be54:	2b00      	cmp	r3, #0
    be56:	d10d      	bne.n	be74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be58:	f7f4 fdae 	bl	9b8 <Adc_schm_read_msr>
    be5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be5e:	9b00      	ldr	r3, [sp, #0]
    be60:	f003 0301 	and.w	r3, r3, #1
    be64:	2b00      	cmp	r3, #0
    be66:	d100      	bne.n	be6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    be6a:	490a      	ldr	r1, [pc, #40]	; (be94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    be6c:	9b01      	ldr	r3, [sp, #4]
    be6e:	9a00      	ldr	r2, [sp, #0]
    be70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    be74:	4a06      	ldr	r2, [pc, #24]	; (be90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    be76:	9b01      	ldr	r3, [sp, #4]
    be78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be7c:	1c5a      	adds	r2, r3, #1
    be7e:	4904      	ldr	r1, [pc, #16]	; (be90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    be80:	9b01      	ldr	r3, [sp, #4]
    be82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be86:	bf00      	nop
    be88:	b003      	add	sp, #12
    be8a:	f85d fb04 	ldr.w	pc, [sp], #4
    be8e:	bf00      	nop
    be90:	1fff8e9c 	.word	0x1fff8e9c
    be94:	1fff8e98 	.word	0x1fff8e98

0000be98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    be98:	b500      	push	{lr}
    be9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be9c:	f7f4 fe6e 	bl	b7c <Sys_GetCoreID>
    bea0:	4603      	mov	r3, r0
    bea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    bea4:	4a0d      	ldr	r2, [pc, #52]	; (bedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bea6:	9b01      	ldr	r3, [sp, #4]
    bea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beac:	1e5a      	subs	r2, r3, #1
    beae:	490b      	ldr	r1, [pc, #44]	; (bedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    beb0:	9b01      	ldr	r3, [sp, #4]
    beb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    beb6:	4a0a      	ldr	r2, [pc, #40]	; (bee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    beb8:	9b01      	ldr	r3, [sp, #4]
    beba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bebe:	f003 0301 	and.w	r3, r3, #1
    bec2:	2b00      	cmp	r3, #0
    bec4:	d106      	bne.n	bed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    bec6:	4a05      	ldr	r2, [pc, #20]	; (bedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    bec8:	9b01      	ldr	r3, [sp, #4]
    beca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bece:	2b00      	cmp	r3, #0
    bed0:	d100      	bne.n	bed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bed4:	bf00      	nop
    bed6:	b003      	add	sp, #12
    bed8:	f85d fb04 	ldr.w	pc, [sp], #4
    bedc:	1fff8e9c 	.word	0x1fff8e9c
    bee0:	1fff8e98 	.word	0x1fff8e98

0000bee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    bee4:	b500      	push	{lr}
    bee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bee8:	f7f4 fe48 	bl	b7c <Sys_GetCoreID>
    beec:	4603      	mov	r3, r0
    beee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    bef0:	4a10      	ldr	r2, [pc, #64]	; (bf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bef2:	9b01      	ldr	r3, [sp, #4]
    bef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bef8:	2b00      	cmp	r3, #0
    befa:	d10d      	bne.n	bf18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    befc:	f7f4 fd5c 	bl	9b8 <Adc_schm_read_msr>
    bf00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf02:	9b00      	ldr	r3, [sp, #0]
    bf04:	f003 0301 	and.w	r3, r3, #1
    bf08:	2b00      	cmp	r3, #0
    bf0a:	d100      	bne.n	bf0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    bf0e:	490a      	ldr	r1, [pc, #40]	; (bf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    bf10:	9b01      	ldr	r3, [sp, #4]
    bf12:	9a00      	ldr	r2, [sp, #0]
    bf14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    bf18:	4a06      	ldr	r2, [pc, #24]	; (bf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bf1a:	9b01      	ldr	r3, [sp, #4]
    bf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf20:	1c5a      	adds	r2, r3, #1
    bf22:	4904      	ldr	r1, [pc, #16]	; (bf34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    bf24:	9b01      	ldr	r3, [sp, #4]
    bf26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf2a:	bf00      	nop
    bf2c:	b003      	add	sp, #12
    bf2e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf32:	bf00      	nop
    bf34:	1fff8ea4 	.word	0x1fff8ea4
    bf38:	1fff8ea0 	.word	0x1fff8ea0

0000bf3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    bf3c:	b500      	push	{lr}
    bf3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf40:	f7f4 fe1c 	bl	b7c <Sys_GetCoreID>
    bf44:	4603      	mov	r3, r0
    bf46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    bf48:	4a0d      	ldr	r2, [pc, #52]	; (bf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    bf4a:	9b01      	ldr	r3, [sp, #4]
    bf4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf50:	1e5a      	subs	r2, r3, #1
    bf52:	490b      	ldr	r1, [pc, #44]	; (bf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    bf54:	9b01      	ldr	r3, [sp, #4]
    bf56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    bf5a:	4a0a      	ldr	r2, [pc, #40]	; (bf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    bf5c:	9b01      	ldr	r3, [sp, #4]
    bf5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf62:	f003 0301 	and.w	r3, r3, #1
    bf66:	2b00      	cmp	r3, #0
    bf68:	d106      	bne.n	bf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    bf6a:	4a05      	ldr	r2, [pc, #20]	; (bf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    bf6c:	9b01      	ldr	r3, [sp, #4]
    bf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf72:	2b00      	cmp	r3, #0
    bf74:	d100      	bne.n	bf78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf78:	bf00      	nop
    bf7a:	b003      	add	sp, #12
    bf7c:	f85d fb04 	ldr.w	pc, [sp], #4
    bf80:	1fff8ea4 	.word	0x1fff8ea4
    bf84:	1fff8ea0 	.word	0x1fff8ea0

0000bf88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    bf88:	b500      	push	{lr}
    bf8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf8c:	f7f4 fdf6 	bl	b7c <Sys_GetCoreID>
    bf90:	4603      	mov	r3, r0
    bf92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    bf94:	4a10      	ldr	r2, [pc, #64]	; (bfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bf96:	9b01      	ldr	r3, [sp, #4]
    bf98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d10d      	bne.n	bfbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bfa0:	f7f4 fd0a 	bl	9b8 <Adc_schm_read_msr>
    bfa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfa6:	9b00      	ldr	r3, [sp, #0]
    bfa8:	f003 0301 	and.w	r3, r3, #1
    bfac:	2b00      	cmp	r3, #0
    bfae:	d100      	bne.n	bfb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    bfb2:	490a      	ldr	r1, [pc, #40]	; (bfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    bfb4:	9b01      	ldr	r3, [sp, #4]
    bfb6:	9a00      	ldr	r2, [sp, #0]
    bfb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    bfbc:	4a06      	ldr	r2, [pc, #24]	; (bfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bfbe:	9b01      	ldr	r3, [sp, #4]
    bfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc4:	1c5a      	adds	r2, r3, #1
    bfc6:	4904      	ldr	r1, [pc, #16]	; (bfd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bfc8:	9b01      	ldr	r3, [sp, #4]
    bfca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfce:	bf00      	nop
    bfd0:	b003      	add	sp, #12
    bfd2:	f85d fb04 	ldr.w	pc, [sp], #4
    bfd6:	bf00      	nop
    bfd8:	1fff8eac 	.word	0x1fff8eac
    bfdc:	1fff8ea8 	.word	0x1fff8ea8

0000bfe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    bfe0:	b500      	push	{lr}
    bfe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfe4:	f7f4 fdca 	bl	b7c <Sys_GetCoreID>
    bfe8:	4603      	mov	r3, r0
    bfea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    bfec:	4a0d      	ldr	r2, [pc, #52]	; (c024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bfee:	9b01      	ldr	r3, [sp, #4]
    bff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bff4:	1e5a      	subs	r2, r3, #1
    bff6:	490b      	ldr	r1, [pc, #44]	; (c024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bff8:	9b01      	ldr	r3, [sp, #4]
    bffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    bffe:	4a0a      	ldr	r2, [pc, #40]	; (c028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    c000:	9b01      	ldr	r3, [sp, #4]
    c002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c006:	f003 0301 	and.w	r3, r3, #1
    c00a:	2b00      	cmp	r3, #0
    c00c:	d106      	bne.n	c01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    c00e:	4a05      	ldr	r2, [pc, #20]	; (c024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    c010:	9b01      	ldr	r3, [sp, #4]
    c012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c016:	2b00      	cmp	r3, #0
    c018:	d100      	bne.n	c01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c01c:	bf00      	nop
    c01e:	b003      	add	sp, #12
    c020:	f85d fb04 	ldr.w	pc, [sp], #4
    c024:	1fff8eac 	.word	0x1fff8eac
    c028:	1fff8ea8 	.word	0x1fff8ea8

0000c02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c02c:	b500      	push	{lr}
    c02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c030:	f7f4 fda4 	bl	b7c <Sys_GetCoreID>
    c034:	4603      	mov	r3, r0
    c036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    c038:	4a10      	ldr	r2, [pc, #64]	; (c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c03a:	9b01      	ldr	r3, [sp, #4]
    c03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c040:	2b00      	cmp	r3, #0
    c042:	d10d      	bne.n	c060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c044:	f7f4 fcb8 	bl	9b8 <Adc_schm_read_msr>
    c048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c04a:	9b00      	ldr	r3, [sp, #0]
    c04c:	f003 0301 	and.w	r3, r3, #1
    c050:	2b00      	cmp	r3, #0
    c052:	d100      	bne.n	c056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    c056:	490a      	ldr	r1, [pc, #40]	; (c080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    c058:	9b01      	ldr	r3, [sp, #4]
    c05a:	9a00      	ldr	r2, [sp, #0]
    c05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    c060:	4a06      	ldr	r2, [pc, #24]	; (c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c062:	9b01      	ldr	r3, [sp, #4]
    c064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c068:	1c5a      	adds	r2, r3, #1
    c06a:	4904      	ldr	r1, [pc, #16]	; (c07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    c06c:	9b01      	ldr	r3, [sp, #4]
    c06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c072:	bf00      	nop
    c074:	b003      	add	sp, #12
    c076:	f85d fb04 	ldr.w	pc, [sp], #4
    c07a:	bf00      	nop
    c07c:	1fff8eb4 	.word	0x1fff8eb4
    c080:	1fff8eb0 	.word	0x1fff8eb0

0000c084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    c084:	b500      	push	{lr}
    c086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c088:	f7f4 fd78 	bl	b7c <Sys_GetCoreID>
    c08c:	4603      	mov	r3, r0
    c08e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    c090:	4a0d      	ldr	r2, [pc, #52]	; (c0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c092:	9b01      	ldr	r3, [sp, #4]
    c094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c098:	1e5a      	subs	r2, r3, #1
    c09a:	490b      	ldr	r1, [pc, #44]	; (c0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c09c:	9b01      	ldr	r3, [sp, #4]
    c09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    c0a2:	4a0a      	ldr	r2, [pc, #40]	; (c0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    c0a4:	9b01      	ldr	r3, [sp, #4]
    c0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0aa:	f003 0301 	and.w	r3, r3, #1
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d106      	bne.n	c0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c0b2:	4a05      	ldr	r2, [pc, #20]	; (c0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c0b4:	9b01      	ldr	r3, [sp, #4]
    c0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	d100      	bne.n	c0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0c0:	bf00      	nop
    c0c2:	b003      	add	sp, #12
    c0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c0c8:	1fff8eb4 	.word	0x1fff8eb4
    c0cc:	1fff8eb0 	.word	0x1fff8eb0

0000c0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c0d0:	b500      	push	{lr}
    c0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0d4:	f7f4 fd52 	bl	b7c <Sys_GetCoreID>
    c0d8:	4603      	mov	r3, r0
    c0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c0dc:	4a10      	ldr	r2, [pc, #64]	; (c120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c0de:	9b01      	ldr	r3, [sp, #4]
    c0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0e4:	2b00      	cmp	r3, #0
    c0e6:	d10d      	bne.n	c104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0e8:	f7f4 fc66 	bl	9b8 <Adc_schm_read_msr>
    c0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0ee:	9b00      	ldr	r3, [sp, #0]
    c0f0:	f003 0301 	and.w	r3, r3, #1
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d100      	bne.n	c0fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c0fa:	490a      	ldr	r1, [pc, #40]	; (c124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c0fc:	9b01      	ldr	r3, [sp, #4]
    c0fe:	9a00      	ldr	r2, [sp, #0]
    c100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c104:	4a06      	ldr	r2, [pc, #24]	; (c120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c106:	9b01      	ldr	r3, [sp, #4]
    c108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c10c:	1c5a      	adds	r2, r3, #1
    c10e:	4904      	ldr	r1, [pc, #16]	; (c120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c110:	9b01      	ldr	r3, [sp, #4]
    c112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c116:	bf00      	nop
    c118:	b003      	add	sp, #12
    c11a:	f85d fb04 	ldr.w	pc, [sp], #4
    c11e:	bf00      	nop
    c120:	1fff8ebc 	.word	0x1fff8ebc
    c124:	1fff8eb8 	.word	0x1fff8eb8

0000c128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c128:	b500      	push	{lr}
    c12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c12c:	f7f4 fd26 	bl	b7c <Sys_GetCoreID>
    c130:	4603      	mov	r3, r0
    c132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c134:	4a0d      	ldr	r2, [pc, #52]	; (c16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c136:	9b01      	ldr	r3, [sp, #4]
    c138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c13c:	1e5a      	subs	r2, r3, #1
    c13e:	490b      	ldr	r1, [pc, #44]	; (c16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c140:	9b01      	ldr	r3, [sp, #4]
    c142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c146:	4a0a      	ldr	r2, [pc, #40]	; (c170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c148:	9b01      	ldr	r3, [sp, #4]
    c14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c14e:	f003 0301 	and.w	r3, r3, #1
    c152:	2b00      	cmp	r3, #0
    c154:	d106      	bne.n	c164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c156:	4a05      	ldr	r2, [pc, #20]	; (c16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c158:	9b01      	ldr	r3, [sp, #4]
    c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c15e:	2b00      	cmp	r3, #0
    c160:	d100      	bne.n	c164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c164:	bf00      	nop
    c166:	b003      	add	sp, #12
    c168:	f85d fb04 	ldr.w	pc, [sp], #4
    c16c:	1fff8ebc 	.word	0x1fff8ebc
    c170:	1fff8eb8 	.word	0x1fff8eb8

0000c174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c174:	b500      	push	{lr}
    c176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c178:	f7f4 fd00 	bl	b7c <Sys_GetCoreID>
    c17c:	4603      	mov	r3, r0
    c17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c180:	4a10      	ldr	r2, [pc, #64]	; (c1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c182:	9b01      	ldr	r3, [sp, #4]
    c184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c188:	2b00      	cmp	r3, #0
    c18a:	d10d      	bne.n	c1a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c18c:	f7f4 fc14 	bl	9b8 <Adc_schm_read_msr>
    c190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c192:	9b00      	ldr	r3, [sp, #0]
    c194:	f003 0301 	and.w	r3, r3, #1
    c198:	2b00      	cmp	r3, #0
    c19a:	d100      	bne.n	c19e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c19e:	490a      	ldr	r1, [pc, #40]	; (c1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c1a0:	9b01      	ldr	r3, [sp, #4]
    c1a2:	9a00      	ldr	r2, [sp, #0]
    c1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c1a8:	4a06      	ldr	r2, [pc, #24]	; (c1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c1aa:	9b01      	ldr	r3, [sp, #4]
    c1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1b0:	1c5a      	adds	r2, r3, #1
    c1b2:	4904      	ldr	r1, [pc, #16]	; (c1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c1b4:	9b01      	ldr	r3, [sp, #4]
    c1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1ba:	bf00      	nop
    c1bc:	b003      	add	sp, #12
    c1be:	f85d fb04 	ldr.w	pc, [sp], #4
    c1c2:	bf00      	nop
    c1c4:	1fff8ec4 	.word	0x1fff8ec4
    c1c8:	1fff8ec0 	.word	0x1fff8ec0

0000c1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c1cc:	b500      	push	{lr}
    c1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1d0:	f7f4 fcd4 	bl	b7c <Sys_GetCoreID>
    c1d4:	4603      	mov	r3, r0
    c1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c1d8:	4a0d      	ldr	r2, [pc, #52]	; (c210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c1da:	9b01      	ldr	r3, [sp, #4]
    c1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1e0:	1e5a      	subs	r2, r3, #1
    c1e2:	490b      	ldr	r1, [pc, #44]	; (c210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c1e4:	9b01      	ldr	r3, [sp, #4]
    c1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c1ea:	4a0a      	ldr	r2, [pc, #40]	; (c214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c1ec:	9b01      	ldr	r3, [sp, #4]
    c1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1f2:	f003 0301 	and.w	r3, r3, #1
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	d106      	bne.n	c208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c1fa:	4a05      	ldr	r2, [pc, #20]	; (c210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c1fc:	9b01      	ldr	r3, [sp, #4]
    c1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c202:	2b00      	cmp	r3, #0
    c204:	d100      	bne.n	c208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c208:	bf00      	nop
    c20a:	b003      	add	sp, #12
    c20c:	f85d fb04 	ldr.w	pc, [sp], #4
    c210:	1fff8ec4 	.word	0x1fff8ec4
    c214:	1fff8ec0 	.word	0x1fff8ec0

0000c218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c218:	b500      	push	{lr}
    c21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c21c:	f7f4 fcae 	bl	b7c <Sys_GetCoreID>
    c220:	4603      	mov	r3, r0
    c222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c224:	4a10      	ldr	r2, [pc, #64]	; (c268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c226:	9b01      	ldr	r3, [sp, #4]
    c228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c22c:	2b00      	cmp	r3, #0
    c22e:	d10d      	bne.n	c24c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c230:	f7f4 fbc2 	bl	9b8 <Adc_schm_read_msr>
    c234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c236:	9b00      	ldr	r3, [sp, #0]
    c238:	f003 0301 	and.w	r3, r3, #1
    c23c:	2b00      	cmp	r3, #0
    c23e:	d100      	bne.n	c242 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c242:	490a      	ldr	r1, [pc, #40]	; (c26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c244:	9b01      	ldr	r3, [sp, #4]
    c246:	9a00      	ldr	r2, [sp, #0]
    c248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c24c:	4a06      	ldr	r2, [pc, #24]	; (c268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c24e:	9b01      	ldr	r3, [sp, #4]
    c250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c254:	1c5a      	adds	r2, r3, #1
    c256:	4904      	ldr	r1, [pc, #16]	; (c268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c258:	9b01      	ldr	r3, [sp, #4]
    c25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c25e:	bf00      	nop
    c260:	b003      	add	sp, #12
    c262:	f85d fb04 	ldr.w	pc, [sp], #4
    c266:	bf00      	nop
    c268:	1fff8ecc 	.word	0x1fff8ecc
    c26c:	1fff8ec8 	.word	0x1fff8ec8

0000c270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c270:	b500      	push	{lr}
    c272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c274:	f7f4 fc82 	bl	b7c <Sys_GetCoreID>
    c278:	4603      	mov	r3, r0
    c27a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c27c:	4a0d      	ldr	r2, [pc, #52]	; (c2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c27e:	9b01      	ldr	r3, [sp, #4]
    c280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c284:	1e5a      	subs	r2, r3, #1
    c286:	490b      	ldr	r1, [pc, #44]	; (c2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c288:	9b01      	ldr	r3, [sp, #4]
    c28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c28e:	4a0a      	ldr	r2, [pc, #40]	; (c2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c290:	9b01      	ldr	r3, [sp, #4]
    c292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c296:	f003 0301 	and.w	r3, r3, #1
    c29a:	2b00      	cmp	r3, #0
    c29c:	d106      	bne.n	c2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c29e:	4a05      	ldr	r2, [pc, #20]	; (c2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c2a0:	9b01      	ldr	r3, [sp, #4]
    c2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2a6:	2b00      	cmp	r3, #0
    c2a8:	d100      	bne.n	c2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2ac:	bf00      	nop
    c2ae:	b003      	add	sp, #12
    c2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b4:	1fff8ecc 	.word	0x1fff8ecc
    c2b8:	1fff8ec8 	.word	0x1fff8ec8

0000c2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c2bc:	b500      	push	{lr}
    c2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2c0:	f7f4 fc5c 	bl	b7c <Sys_GetCoreID>
    c2c4:	4603      	mov	r3, r0
    c2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c2c8:	4a10      	ldr	r2, [pc, #64]	; (c30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c2ca:	9b01      	ldr	r3, [sp, #4]
    c2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d10d      	bne.n	c2f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2d4:	f7f4 fb70 	bl	9b8 <Adc_schm_read_msr>
    c2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2da:	9b00      	ldr	r3, [sp, #0]
    c2dc:	f003 0301 	and.w	r3, r3, #1
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d100      	bne.n	c2e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c2e6:	490a      	ldr	r1, [pc, #40]	; (c310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c2e8:	9b01      	ldr	r3, [sp, #4]
    c2ea:	9a00      	ldr	r2, [sp, #0]
    c2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c2f0:	4a06      	ldr	r2, [pc, #24]	; (c30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c2f2:	9b01      	ldr	r3, [sp, #4]
    c2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2f8:	1c5a      	adds	r2, r3, #1
    c2fa:	4904      	ldr	r1, [pc, #16]	; (c30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c2fc:	9b01      	ldr	r3, [sp, #4]
    c2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c302:	bf00      	nop
    c304:	b003      	add	sp, #12
    c306:	f85d fb04 	ldr.w	pc, [sp], #4
    c30a:	bf00      	nop
    c30c:	1fff8ed4 	.word	0x1fff8ed4
    c310:	1fff8ed0 	.word	0x1fff8ed0

0000c314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c314:	b500      	push	{lr}
    c316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c318:	f7f4 fc30 	bl	b7c <Sys_GetCoreID>
    c31c:	4603      	mov	r3, r0
    c31e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c320:	4a0d      	ldr	r2, [pc, #52]	; (c358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c322:	9b01      	ldr	r3, [sp, #4]
    c324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c328:	1e5a      	subs	r2, r3, #1
    c32a:	490b      	ldr	r1, [pc, #44]	; (c358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c32c:	9b01      	ldr	r3, [sp, #4]
    c32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c332:	4a0a      	ldr	r2, [pc, #40]	; (c35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c334:	9b01      	ldr	r3, [sp, #4]
    c336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33a:	f003 0301 	and.w	r3, r3, #1
    c33e:	2b00      	cmp	r3, #0
    c340:	d106      	bne.n	c350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c342:	4a05      	ldr	r2, [pc, #20]	; (c358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c344:	9b01      	ldr	r3, [sp, #4]
    c346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c34a:	2b00      	cmp	r3, #0
    c34c:	d100      	bne.n	c350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c350:	bf00      	nop
    c352:	b003      	add	sp, #12
    c354:	f85d fb04 	ldr.w	pc, [sp], #4
    c358:	1fff8ed4 	.word	0x1fff8ed4
    c35c:	1fff8ed0 	.word	0x1fff8ed0

0000c360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c360:	b500      	push	{lr}
    c362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c364:	f7f4 fc0a 	bl	b7c <Sys_GetCoreID>
    c368:	4603      	mov	r3, r0
    c36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c36c:	4a10      	ldr	r2, [pc, #64]	; (c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c36e:	9b01      	ldr	r3, [sp, #4]
    c370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c374:	2b00      	cmp	r3, #0
    c376:	d10d      	bne.n	c394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c378:	f7f4 fb1e 	bl	9b8 <Adc_schm_read_msr>
    c37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c37e:	9b00      	ldr	r3, [sp, #0]
    c380:	f003 0301 	and.w	r3, r3, #1
    c384:	2b00      	cmp	r3, #0
    c386:	d100      	bne.n	c38a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c38a:	490a      	ldr	r1, [pc, #40]	; (c3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c38c:	9b01      	ldr	r3, [sp, #4]
    c38e:	9a00      	ldr	r2, [sp, #0]
    c390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c394:	4a06      	ldr	r2, [pc, #24]	; (c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c396:	9b01      	ldr	r3, [sp, #4]
    c398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c39c:	1c5a      	adds	r2, r3, #1
    c39e:	4904      	ldr	r1, [pc, #16]	; (c3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c3a0:	9b01      	ldr	r3, [sp, #4]
    c3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3a6:	bf00      	nop
    c3a8:	b003      	add	sp, #12
    c3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    c3ae:	bf00      	nop
    c3b0:	1fff8edc 	.word	0x1fff8edc
    c3b4:	1fff8ed8 	.word	0x1fff8ed8

0000c3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c3b8:	b500      	push	{lr}
    c3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3bc:	f7f4 fbde 	bl	b7c <Sys_GetCoreID>
    c3c0:	4603      	mov	r3, r0
    c3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c3c4:	4a0d      	ldr	r2, [pc, #52]	; (c3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c3c6:	9b01      	ldr	r3, [sp, #4]
    c3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3cc:	1e5a      	subs	r2, r3, #1
    c3ce:	490b      	ldr	r1, [pc, #44]	; (c3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c3d0:	9b01      	ldr	r3, [sp, #4]
    c3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c3d6:	4a0a      	ldr	r2, [pc, #40]	; (c400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c3d8:	9b01      	ldr	r3, [sp, #4]
    c3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3de:	f003 0301 	and.w	r3, r3, #1
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d106      	bne.n	c3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c3e6:	4a05      	ldr	r2, [pc, #20]	; (c3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c3e8:	9b01      	ldr	r3, [sp, #4]
    c3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d100      	bne.n	c3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3f4:	bf00      	nop
    c3f6:	b003      	add	sp, #12
    c3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    c3fc:	1fff8edc 	.word	0x1fff8edc
    c400:	1fff8ed8 	.word	0x1fff8ed8

0000c404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c404:	b500      	push	{lr}
    c406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c408:	f7f4 fbb8 	bl	b7c <Sys_GetCoreID>
    c40c:	4603      	mov	r3, r0
    c40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c410:	4a10      	ldr	r2, [pc, #64]	; (c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c412:	9b01      	ldr	r3, [sp, #4]
    c414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c418:	2b00      	cmp	r3, #0
    c41a:	d10d      	bne.n	c438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c41c:	f7f4 facc 	bl	9b8 <Adc_schm_read_msr>
    c420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c422:	9b00      	ldr	r3, [sp, #0]
    c424:	f003 0301 	and.w	r3, r3, #1
    c428:	2b00      	cmp	r3, #0
    c42a:	d100      	bne.n	c42e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c42e:	490a      	ldr	r1, [pc, #40]	; (c458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c430:	9b01      	ldr	r3, [sp, #4]
    c432:	9a00      	ldr	r2, [sp, #0]
    c434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c438:	4a06      	ldr	r2, [pc, #24]	; (c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c43a:	9b01      	ldr	r3, [sp, #4]
    c43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c440:	1c5a      	adds	r2, r3, #1
    c442:	4904      	ldr	r1, [pc, #16]	; (c454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c444:	9b01      	ldr	r3, [sp, #4]
    c446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c44a:	bf00      	nop
    c44c:	b003      	add	sp, #12
    c44e:	f85d fb04 	ldr.w	pc, [sp], #4
    c452:	bf00      	nop
    c454:	1fff8ee4 	.word	0x1fff8ee4
    c458:	1fff8ee0 	.word	0x1fff8ee0

0000c45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c45c:	b500      	push	{lr}
    c45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c460:	f7f4 fb8c 	bl	b7c <Sys_GetCoreID>
    c464:	4603      	mov	r3, r0
    c466:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c468:	4a0d      	ldr	r2, [pc, #52]	; (c4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c46a:	9b01      	ldr	r3, [sp, #4]
    c46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c470:	1e5a      	subs	r2, r3, #1
    c472:	490b      	ldr	r1, [pc, #44]	; (c4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c474:	9b01      	ldr	r3, [sp, #4]
    c476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c47a:	4a0a      	ldr	r2, [pc, #40]	; (c4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c47c:	9b01      	ldr	r3, [sp, #4]
    c47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c482:	f003 0301 	and.w	r3, r3, #1
    c486:	2b00      	cmp	r3, #0
    c488:	d106      	bne.n	c498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c48a:	4a05      	ldr	r2, [pc, #20]	; (c4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c48c:	9b01      	ldr	r3, [sp, #4]
    c48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c492:	2b00      	cmp	r3, #0
    c494:	d100      	bne.n	c498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c498:	bf00      	nop
    c49a:	b003      	add	sp, #12
    c49c:	f85d fb04 	ldr.w	pc, [sp], #4
    c4a0:	1fff8ee4 	.word	0x1fff8ee4
    c4a4:	1fff8ee0 	.word	0x1fff8ee0

0000c4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c4a8:	b500      	push	{lr}
    c4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4ac:	f7f4 fb66 	bl	b7c <Sys_GetCoreID>
    c4b0:	4603      	mov	r3, r0
    c4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    c4b4:	4a10      	ldr	r2, [pc, #64]	; (c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c4b6:	9b01      	ldr	r3, [sp, #4]
    c4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d10d      	bne.n	c4dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4c0:	f7f4 fa7a 	bl	9b8 <Adc_schm_read_msr>
    c4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4c6:	9b00      	ldr	r3, [sp, #0]
    c4c8:	f003 0301 	and.w	r3, r3, #1
    c4cc:	2b00      	cmp	r3, #0
    c4ce:	d100      	bne.n	c4d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    c4d2:	490a      	ldr	r1, [pc, #40]	; (c4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    c4d4:	9b01      	ldr	r3, [sp, #4]
    c4d6:	9a00      	ldr	r2, [sp, #0]
    c4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    c4dc:	4a06      	ldr	r2, [pc, #24]	; (c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c4de:	9b01      	ldr	r3, [sp, #4]
    c4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e4:	1c5a      	adds	r2, r3, #1
    c4e6:	4904      	ldr	r1, [pc, #16]	; (c4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c4e8:	9b01      	ldr	r3, [sp, #4]
    c4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4ee:	bf00      	nop
    c4f0:	b003      	add	sp, #12
    c4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    c4f6:	bf00      	nop
    c4f8:	1fff8eec 	.word	0x1fff8eec
    c4fc:	1fff8ee8 	.word	0x1fff8ee8

0000c500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c500:	b500      	push	{lr}
    c502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c504:	f7f4 fb3a 	bl	b7c <Sys_GetCoreID>
    c508:	4603      	mov	r3, r0
    c50a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    c50c:	4a0d      	ldr	r2, [pc, #52]	; (c544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c50e:	9b01      	ldr	r3, [sp, #4]
    c510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c514:	1e5a      	subs	r2, r3, #1
    c516:	490b      	ldr	r1, [pc, #44]	; (c544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c518:	9b01      	ldr	r3, [sp, #4]
    c51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    c51e:	4a0a      	ldr	r2, [pc, #40]	; (c548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    c520:	9b01      	ldr	r3, [sp, #4]
    c522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c526:	f003 0301 	and.w	r3, r3, #1
    c52a:	2b00      	cmp	r3, #0
    c52c:	d106      	bne.n	c53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    c52e:	4a05      	ldr	r2, [pc, #20]	; (c544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c530:	9b01      	ldr	r3, [sp, #4]
    c532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c536:	2b00      	cmp	r3, #0
    c538:	d100      	bne.n	c53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c53c:	bf00      	nop
    c53e:	b003      	add	sp, #12
    c540:	f85d fb04 	ldr.w	pc, [sp], #4
    c544:	1fff8eec 	.word	0x1fff8eec
    c548:	1fff8ee8 	.word	0x1fff8ee8

0000c54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c54c:	b500      	push	{lr}
    c54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c550:	f7f4 fb14 	bl	b7c <Sys_GetCoreID>
    c554:	4603      	mov	r3, r0
    c556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    c558:	4a10      	ldr	r2, [pc, #64]	; (c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c55a:	9b01      	ldr	r3, [sp, #4]
    c55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c560:	2b00      	cmp	r3, #0
    c562:	d10d      	bne.n	c580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c564:	f7f4 fa28 	bl	9b8 <Adc_schm_read_msr>
    c568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c56a:	9b00      	ldr	r3, [sp, #0]
    c56c:	f003 0301 	and.w	r3, r3, #1
    c570:	2b00      	cmp	r3, #0
    c572:	d100      	bne.n	c576 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    c576:	490a      	ldr	r1, [pc, #40]	; (c5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    c578:	9b01      	ldr	r3, [sp, #4]
    c57a:	9a00      	ldr	r2, [sp, #0]
    c57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    c580:	4a06      	ldr	r2, [pc, #24]	; (c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c582:	9b01      	ldr	r3, [sp, #4]
    c584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c588:	1c5a      	adds	r2, r3, #1
    c58a:	4904      	ldr	r1, [pc, #16]	; (c59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c58c:	9b01      	ldr	r3, [sp, #4]
    c58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c592:	bf00      	nop
    c594:	b003      	add	sp, #12
    c596:	f85d fb04 	ldr.w	pc, [sp], #4
    c59a:	bf00      	nop
    c59c:	1fff8ef4 	.word	0x1fff8ef4
    c5a0:	1fff8ef0 	.word	0x1fff8ef0

0000c5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c5a4:	b500      	push	{lr}
    c5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5a8:	f7f4 fae8 	bl	b7c <Sys_GetCoreID>
    c5ac:	4603      	mov	r3, r0
    c5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    c5b0:	4a0d      	ldr	r2, [pc, #52]	; (c5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c5b2:	9b01      	ldr	r3, [sp, #4]
    c5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5b8:	1e5a      	subs	r2, r3, #1
    c5ba:	490b      	ldr	r1, [pc, #44]	; (c5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c5bc:	9b01      	ldr	r3, [sp, #4]
    c5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    c5c2:	4a0a      	ldr	r2, [pc, #40]	; (c5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    c5c4:	9b01      	ldr	r3, [sp, #4]
    c5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ca:	f003 0301 	and.w	r3, r3, #1
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	d106      	bne.n	c5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    c5d2:	4a05      	ldr	r2, [pc, #20]	; (c5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c5d4:	9b01      	ldr	r3, [sp, #4]
    c5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5da:	2b00      	cmp	r3, #0
    c5dc:	d100      	bne.n	c5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5e0:	bf00      	nop
    c5e2:	b003      	add	sp, #12
    c5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e8:	1fff8ef4 	.word	0x1fff8ef4
    c5ec:	1fff8ef0 	.word	0x1fff8ef0

0000c5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c5f0:	b500      	push	{lr}
    c5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5f4:	f7f4 fac2 	bl	b7c <Sys_GetCoreID>
    c5f8:	4603      	mov	r3, r0
    c5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    c5fc:	4a10      	ldr	r2, [pc, #64]	; (c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c5fe:	9b01      	ldr	r3, [sp, #4]
    c600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c604:	2b00      	cmp	r3, #0
    c606:	d10d      	bne.n	c624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c608:	f7f4 f9d6 	bl	9b8 <Adc_schm_read_msr>
    c60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c60e:	9b00      	ldr	r3, [sp, #0]
    c610:	f003 0301 	and.w	r3, r3, #1
    c614:	2b00      	cmp	r3, #0
    c616:	d100      	bne.n	c61a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    c61a:	490a      	ldr	r1, [pc, #40]	; (c644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    c61c:	9b01      	ldr	r3, [sp, #4]
    c61e:	9a00      	ldr	r2, [sp, #0]
    c620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    c624:	4a06      	ldr	r2, [pc, #24]	; (c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c626:	9b01      	ldr	r3, [sp, #4]
    c628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c62c:	1c5a      	adds	r2, r3, #1
    c62e:	4904      	ldr	r1, [pc, #16]	; (c640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c630:	9b01      	ldr	r3, [sp, #4]
    c632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c636:	bf00      	nop
    c638:	b003      	add	sp, #12
    c63a:	f85d fb04 	ldr.w	pc, [sp], #4
    c63e:	bf00      	nop
    c640:	1fff8efc 	.word	0x1fff8efc
    c644:	1fff8ef8 	.word	0x1fff8ef8

0000c648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c648:	b500      	push	{lr}
    c64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c64c:	f7f4 fa96 	bl	b7c <Sys_GetCoreID>
    c650:	4603      	mov	r3, r0
    c652:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    c654:	4a0d      	ldr	r2, [pc, #52]	; (c68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c656:	9b01      	ldr	r3, [sp, #4]
    c658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c65c:	1e5a      	subs	r2, r3, #1
    c65e:	490b      	ldr	r1, [pc, #44]	; (c68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c660:	9b01      	ldr	r3, [sp, #4]
    c662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    c666:	4a0a      	ldr	r2, [pc, #40]	; (c690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    c668:	9b01      	ldr	r3, [sp, #4]
    c66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c66e:	f003 0301 	and.w	r3, r3, #1
    c672:	2b00      	cmp	r3, #0
    c674:	d106      	bne.n	c684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    c676:	4a05      	ldr	r2, [pc, #20]	; (c68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c678:	9b01      	ldr	r3, [sp, #4]
    c67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c67e:	2b00      	cmp	r3, #0
    c680:	d100      	bne.n	c684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c684:	bf00      	nop
    c686:	b003      	add	sp, #12
    c688:	f85d fb04 	ldr.w	pc, [sp], #4
    c68c:	1fff8efc 	.word	0x1fff8efc
    c690:	1fff8ef8 	.word	0x1fff8ef8

0000c694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c694:	b500      	push	{lr}
    c696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c698:	f7f4 fa70 	bl	b7c <Sys_GetCoreID>
    c69c:	4603      	mov	r3, r0
    c69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    c6a0:	4a10      	ldr	r2, [pc, #64]	; (c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c6a2:	9b01      	ldr	r3, [sp, #4]
    c6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d10d      	bne.n	c6c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6ac:	f7f4 f984 	bl	9b8 <Adc_schm_read_msr>
    c6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6b2:	9b00      	ldr	r3, [sp, #0]
    c6b4:	f003 0301 	and.w	r3, r3, #1
    c6b8:	2b00      	cmp	r3, #0
    c6ba:	d100      	bne.n	c6be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    c6be:	490a      	ldr	r1, [pc, #40]	; (c6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    c6c0:	9b01      	ldr	r3, [sp, #4]
    c6c2:	9a00      	ldr	r2, [sp, #0]
    c6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    c6c8:	4a06      	ldr	r2, [pc, #24]	; (c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c6ca:	9b01      	ldr	r3, [sp, #4]
    c6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6d0:	1c5a      	adds	r2, r3, #1
    c6d2:	4904      	ldr	r1, [pc, #16]	; (c6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c6d4:	9b01      	ldr	r3, [sp, #4]
    c6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6da:	bf00      	nop
    c6dc:	b003      	add	sp, #12
    c6de:	f85d fb04 	ldr.w	pc, [sp], #4
    c6e2:	bf00      	nop
    c6e4:	1fff8f04 	.word	0x1fff8f04
    c6e8:	1fff8f00 	.word	0x1fff8f00

0000c6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c6ec:	b500      	push	{lr}
    c6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6f0:	f7f4 fa44 	bl	b7c <Sys_GetCoreID>
    c6f4:	4603      	mov	r3, r0
    c6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    c6f8:	4a0d      	ldr	r2, [pc, #52]	; (c730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c6fa:	9b01      	ldr	r3, [sp, #4]
    c6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c700:	1e5a      	subs	r2, r3, #1
    c702:	490b      	ldr	r1, [pc, #44]	; (c730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c704:	9b01      	ldr	r3, [sp, #4]
    c706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    c70a:	4a0a      	ldr	r2, [pc, #40]	; (c734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    c70c:	9b01      	ldr	r3, [sp, #4]
    c70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c712:	f003 0301 	and.w	r3, r3, #1
    c716:	2b00      	cmp	r3, #0
    c718:	d106      	bne.n	c728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    c71a:	4a05      	ldr	r2, [pc, #20]	; (c730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c71c:	9b01      	ldr	r3, [sp, #4]
    c71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c722:	2b00      	cmp	r3, #0
    c724:	d100      	bne.n	c728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c728:	bf00      	nop
    c72a:	b003      	add	sp, #12
    c72c:	f85d fb04 	ldr.w	pc, [sp], #4
    c730:	1fff8f04 	.word	0x1fff8f04
    c734:	1fff8f00 	.word	0x1fff8f00

0000c738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c738:	b500      	push	{lr}
    c73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c73c:	f7f4 fa1e 	bl	b7c <Sys_GetCoreID>
    c740:	4603      	mov	r3, r0
    c742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    c744:	4a10      	ldr	r2, [pc, #64]	; (c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c746:	9b01      	ldr	r3, [sp, #4]
    c748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c74c:	2b00      	cmp	r3, #0
    c74e:	d10d      	bne.n	c76c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c750:	f7f4 f932 	bl	9b8 <Adc_schm_read_msr>
    c754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c756:	9b00      	ldr	r3, [sp, #0]
    c758:	f003 0301 	and.w	r3, r3, #1
    c75c:	2b00      	cmp	r3, #0
    c75e:	d100      	bne.n	c762 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    c762:	490a      	ldr	r1, [pc, #40]	; (c78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    c764:	9b01      	ldr	r3, [sp, #4]
    c766:	9a00      	ldr	r2, [sp, #0]
    c768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    c76c:	4a06      	ldr	r2, [pc, #24]	; (c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c76e:	9b01      	ldr	r3, [sp, #4]
    c770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c774:	1c5a      	adds	r2, r3, #1
    c776:	4904      	ldr	r1, [pc, #16]	; (c788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c778:	9b01      	ldr	r3, [sp, #4]
    c77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c77e:	bf00      	nop
    c780:	b003      	add	sp, #12
    c782:	f85d fb04 	ldr.w	pc, [sp], #4
    c786:	bf00      	nop
    c788:	1fff8f0c 	.word	0x1fff8f0c
    c78c:	1fff8f08 	.word	0x1fff8f08

0000c790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c790:	b500      	push	{lr}
    c792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c794:	f7f4 f9f2 	bl	b7c <Sys_GetCoreID>
    c798:	4603      	mov	r3, r0
    c79a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    c79c:	4a0d      	ldr	r2, [pc, #52]	; (c7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c79e:	9b01      	ldr	r3, [sp, #4]
    c7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7a4:	1e5a      	subs	r2, r3, #1
    c7a6:	490b      	ldr	r1, [pc, #44]	; (c7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c7a8:	9b01      	ldr	r3, [sp, #4]
    c7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    c7ae:	4a0a      	ldr	r2, [pc, #40]	; (c7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    c7b0:	9b01      	ldr	r3, [sp, #4]
    c7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7b6:	f003 0301 	and.w	r3, r3, #1
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d106      	bne.n	c7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    c7be:	4a05      	ldr	r2, [pc, #20]	; (c7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c7c0:	9b01      	ldr	r3, [sp, #4]
    c7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d100      	bne.n	c7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7cc:	bf00      	nop
    c7ce:	b003      	add	sp, #12
    c7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d4:	1fff8f0c 	.word	0x1fff8f0c
    c7d8:	1fff8f08 	.word	0x1fff8f08

0000c7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c7dc:	b500      	push	{lr}
    c7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7e0:	f7f4 f9cc 	bl	b7c <Sys_GetCoreID>
    c7e4:	4603      	mov	r3, r0
    c7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    c7e8:	4a10      	ldr	r2, [pc, #64]	; (c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c7ea:	9b01      	ldr	r3, [sp, #4]
    c7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	d10d      	bne.n	c810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7f4:	f7f4 f8e0 	bl	9b8 <Adc_schm_read_msr>
    c7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7fa:	9b00      	ldr	r3, [sp, #0]
    c7fc:	f003 0301 	and.w	r3, r3, #1
    c800:	2b00      	cmp	r3, #0
    c802:	d100      	bne.n	c806 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    c806:	490a      	ldr	r1, [pc, #40]	; (c830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    c808:	9b01      	ldr	r3, [sp, #4]
    c80a:	9a00      	ldr	r2, [sp, #0]
    c80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    c810:	4a06      	ldr	r2, [pc, #24]	; (c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c812:	9b01      	ldr	r3, [sp, #4]
    c814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c818:	1c5a      	adds	r2, r3, #1
    c81a:	4904      	ldr	r1, [pc, #16]	; (c82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c81c:	9b01      	ldr	r3, [sp, #4]
    c81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c822:	bf00      	nop
    c824:	b003      	add	sp, #12
    c826:	f85d fb04 	ldr.w	pc, [sp], #4
    c82a:	bf00      	nop
    c82c:	1fff8f14 	.word	0x1fff8f14
    c830:	1fff8f10 	.word	0x1fff8f10

0000c834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c834:	b500      	push	{lr}
    c836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c838:	f7f4 f9a0 	bl	b7c <Sys_GetCoreID>
    c83c:	4603      	mov	r3, r0
    c83e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    c840:	4a0d      	ldr	r2, [pc, #52]	; (c878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c842:	9b01      	ldr	r3, [sp, #4]
    c844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c848:	1e5a      	subs	r2, r3, #1
    c84a:	490b      	ldr	r1, [pc, #44]	; (c878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c84c:	9b01      	ldr	r3, [sp, #4]
    c84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    c852:	4a0a      	ldr	r2, [pc, #40]	; (c87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    c854:	9b01      	ldr	r3, [sp, #4]
    c856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c85a:	f003 0301 	and.w	r3, r3, #1
    c85e:	2b00      	cmp	r3, #0
    c860:	d106      	bne.n	c870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    c862:	4a05      	ldr	r2, [pc, #20]	; (c878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c864:	9b01      	ldr	r3, [sp, #4]
    c866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c86a:	2b00      	cmp	r3, #0
    c86c:	d100      	bne.n	c870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c870:	bf00      	nop
    c872:	b003      	add	sp, #12
    c874:	f85d fb04 	ldr.w	pc, [sp], #4
    c878:	1fff8f14 	.word	0x1fff8f14
    c87c:	1fff8f10 	.word	0x1fff8f10

0000c880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c880:	b500      	push	{lr}
    c882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c884:	f7f4 f97a 	bl	b7c <Sys_GetCoreID>
    c888:	4603      	mov	r3, r0
    c88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    c88c:	4a10      	ldr	r2, [pc, #64]	; (c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c88e:	9b01      	ldr	r3, [sp, #4]
    c890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c894:	2b00      	cmp	r3, #0
    c896:	d10d      	bne.n	c8b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c898:	f7f4 f88e 	bl	9b8 <Adc_schm_read_msr>
    c89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c89e:	9b00      	ldr	r3, [sp, #0]
    c8a0:	f003 0301 	and.w	r3, r3, #1
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d100      	bne.n	c8aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    c8aa:	490a      	ldr	r1, [pc, #40]	; (c8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    c8ac:	9b01      	ldr	r3, [sp, #4]
    c8ae:	9a00      	ldr	r2, [sp, #0]
    c8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    c8b4:	4a06      	ldr	r2, [pc, #24]	; (c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c8b6:	9b01      	ldr	r3, [sp, #4]
    c8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8bc:	1c5a      	adds	r2, r3, #1
    c8be:	4904      	ldr	r1, [pc, #16]	; (c8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c8c0:	9b01      	ldr	r3, [sp, #4]
    c8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8c6:	bf00      	nop
    c8c8:	b003      	add	sp, #12
    c8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ce:	bf00      	nop
    c8d0:	1fff8f1c 	.word	0x1fff8f1c
    c8d4:	1fff8f18 	.word	0x1fff8f18

0000c8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c8d8:	b500      	push	{lr}
    c8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8dc:	f7f4 f94e 	bl	b7c <Sys_GetCoreID>
    c8e0:	4603      	mov	r3, r0
    c8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    c8e4:	4a0d      	ldr	r2, [pc, #52]	; (c91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c8e6:	9b01      	ldr	r3, [sp, #4]
    c8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8ec:	1e5a      	subs	r2, r3, #1
    c8ee:	490b      	ldr	r1, [pc, #44]	; (c91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c8f0:	9b01      	ldr	r3, [sp, #4]
    c8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    c8f6:	4a0a      	ldr	r2, [pc, #40]	; (c920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    c8f8:	9b01      	ldr	r3, [sp, #4]
    c8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8fe:	f003 0301 	and.w	r3, r3, #1
    c902:	2b00      	cmp	r3, #0
    c904:	d106      	bne.n	c914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    c906:	4a05      	ldr	r2, [pc, #20]	; (c91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c908:	9b01      	ldr	r3, [sp, #4]
    c90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c90e:	2b00      	cmp	r3, #0
    c910:	d100      	bne.n	c914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c914:	bf00      	nop
    c916:	b003      	add	sp, #12
    c918:	f85d fb04 	ldr.w	pc, [sp], #4
    c91c:	1fff8f1c 	.word	0x1fff8f1c
    c920:	1fff8f18 	.word	0x1fff8f18

0000c924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c924:	b500      	push	{lr}
    c926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c928:	f7f4 f928 	bl	b7c <Sys_GetCoreID>
    c92c:	4603      	mov	r3, r0
    c92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    c930:	4a10      	ldr	r2, [pc, #64]	; (c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c932:	9b01      	ldr	r3, [sp, #4]
    c934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c938:	2b00      	cmp	r3, #0
    c93a:	d10d      	bne.n	c958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c93c:	f7f4 f83c 	bl	9b8 <Adc_schm_read_msr>
    c940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c942:	9b00      	ldr	r3, [sp, #0]
    c944:	f003 0301 	and.w	r3, r3, #1
    c948:	2b00      	cmp	r3, #0
    c94a:	d100      	bne.n	c94e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    c94e:	490a      	ldr	r1, [pc, #40]	; (c978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    c950:	9b01      	ldr	r3, [sp, #4]
    c952:	9a00      	ldr	r2, [sp, #0]
    c954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    c958:	4a06      	ldr	r2, [pc, #24]	; (c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c95a:	9b01      	ldr	r3, [sp, #4]
    c95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c960:	1c5a      	adds	r2, r3, #1
    c962:	4904      	ldr	r1, [pc, #16]	; (c974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c964:	9b01      	ldr	r3, [sp, #4]
    c966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c96a:	bf00      	nop
    c96c:	b003      	add	sp, #12
    c96e:	f85d fb04 	ldr.w	pc, [sp], #4
    c972:	bf00      	nop
    c974:	1fff8f24 	.word	0x1fff8f24
    c978:	1fff8f20 	.word	0x1fff8f20

0000c97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c97c:	b500      	push	{lr}
    c97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c980:	f7f4 f8fc 	bl	b7c <Sys_GetCoreID>
    c984:	4603      	mov	r3, r0
    c986:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    c988:	4a0d      	ldr	r2, [pc, #52]	; (c9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c98a:	9b01      	ldr	r3, [sp, #4]
    c98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c990:	1e5a      	subs	r2, r3, #1
    c992:	490b      	ldr	r1, [pc, #44]	; (c9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c994:	9b01      	ldr	r3, [sp, #4]
    c996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    c99a:	4a0a      	ldr	r2, [pc, #40]	; (c9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    c99c:	9b01      	ldr	r3, [sp, #4]
    c99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9a2:	f003 0301 	and.w	r3, r3, #1
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d106      	bne.n	c9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    c9aa:	4a05      	ldr	r2, [pc, #20]	; (c9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c9ac:	9b01      	ldr	r3, [sp, #4]
    c9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	d100      	bne.n	c9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9b8:	bf00      	nop
    c9ba:	b003      	add	sp, #12
    c9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c0:	1fff8f24 	.word	0x1fff8f24
    c9c4:	1fff8f20 	.word	0x1fff8f20

0000c9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c9c8:	b500      	push	{lr}
    c9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9cc:	f7f4 f8d6 	bl	b7c <Sys_GetCoreID>
    c9d0:	4603      	mov	r3, r0
    c9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    c9d4:	4a10      	ldr	r2, [pc, #64]	; (ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c9d6:	9b01      	ldr	r3, [sp, #4]
    c9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d10d      	bne.n	c9fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9e0:	f7f3 ffea 	bl	9b8 <Adc_schm_read_msr>
    c9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9e6:	9b00      	ldr	r3, [sp, #0]
    c9e8:	f003 0301 	and.w	r3, r3, #1
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d100      	bne.n	c9f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    c9f2:	490a      	ldr	r1, [pc, #40]	; (ca1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    c9f4:	9b01      	ldr	r3, [sp, #4]
    c9f6:	9a00      	ldr	r2, [sp, #0]
    c9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    c9fc:	4a06      	ldr	r2, [pc, #24]	; (ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c9fe:	9b01      	ldr	r3, [sp, #4]
    ca00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca04:	1c5a      	adds	r2, r3, #1
    ca06:	4904      	ldr	r1, [pc, #16]	; (ca18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    ca08:	9b01      	ldr	r3, [sp, #4]
    ca0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca0e:	bf00      	nop
    ca10:	b003      	add	sp, #12
    ca12:	f85d fb04 	ldr.w	pc, [sp], #4
    ca16:	bf00      	nop
    ca18:	1fff8f2c 	.word	0x1fff8f2c
    ca1c:	1fff8f28 	.word	0x1fff8f28

0000ca20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    ca20:	b500      	push	{lr}
    ca22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca24:	f7f4 f8aa 	bl	b7c <Sys_GetCoreID>
    ca28:	4603      	mov	r3, r0
    ca2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    ca2c:	4a0d      	ldr	r2, [pc, #52]	; (ca64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    ca2e:	9b01      	ldr	r3, [sp, #4]
    ca30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca34:	1e5a      	subs	r2, r3, #1
    ca36:	490b      	ldr	r1, [pc, #44]	; (ca64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    ca38:	9b01      	ldr	r3, [sp, #4]
    ca3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    ca3e:	4a0a      	ldr	r2, [pc, #40]	; (ca68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    ca40:	9b01      	ldr	r3, [sp, #4]
    ca42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca46:	f003 0301 	and.w	r3, r3, #1
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d106      	bne.n	ca5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    ca4e:	4a05      	ldr	r2, [pc, #20]	; (ca64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    ca50:	9b01      	ldr	r3, [sp, #4]
    ca52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca56:	2b00      	cmp	r3, #0
    ca58:	d100      	bne.n	ca5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca5c:	bf00      	nop
    ca5e:	b003      	add	sp, #12
    ca60:	f85d fb04 	ldr.w	pc, [sp], #4
    ca64:	1fff8f2c 	.word	0x1fff8f2c
    ca68:	1fff8f28 	.word	0x1fff8f28

0000ca6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    ca6c:	b500      	push	{lr}
    ca6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca70:	f7f4 f884 	bl	b7c <Sys_GetCoreID>
    ca74:	4603      	mov	r3, r0
    ca76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    ca78:	4a10      	ldr	r2, [pc, #64]	; (cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    ca7a:	9b01      	ldr	r3, [sp, #4]
    ca7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d10d      	bne.n	caa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca84:	f7f3 ff98 	bl	9b8 <Adc_schm_read_msr>
    ca88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca8a:	9b00      	ldr	r3, [sp, #0]
    ca8c:	f003 0301 	and.w	r3, r3, #1
    ca90:	2b00      	cmp	r3, #0
    ca92:	d100      	bne.n	ca96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    ca96:	490a      	ldr	r1, [pc, #40]	; (cac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    ca98:	9b01      	ldr	r3, [sp, #4]
    ca9a:	9a00      	ldr	r2, [sp, #0]
    ca9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    caa0:	4a06      	ldr	r2, [pc, #24]	; (cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    caa2:	9b01      	ldr	r3, [sp, #4]
    caa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa8:	1c5a      	adds	r2, r3, #1
    caaa:	4904      	ldr	r1, [pc, #16]	; (cabc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    caac:	9b01      	ldr	r3, [sp, #4]
    caae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cab2:	bf00      	nop
    cab4:	b003      	add	sp, #12
    cab6:	f85d fb04 	ldr.w	pc, [sp], #4
    caba:	bf00      	nop
    cabc:	1fff8f34 	.word	0x1fff8f34
    cac0:	1fff8f30 	.word	0x1fff8f30

0000cac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    cac4:	b500      	push	{lr}
    cac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cac8:	f7f4 f858 	bl	b7c <Sys_GetCoreID>
    cacc:	4603      	mov	r3, r0
    cace:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    cad0:	4a0d      	ldr	r2, [pc, #52]	; (cb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    cad2:	9b01      	ldr	r3, [sp, #4]
    cad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cad8:	1e5a      	subs	r2, r3, #1
    cada:	490b      	ldr	r1, [pc, #44]	; (cb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    cadc:	9b01      	ldr	r3, [sp, #4]
    cade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    cae2:	4a0a      	ldr	r2, [pc, #40]	; (cb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    cae4:	9b01      	ldr	r3, [sp, #4]
    cae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caea:	f003 0301 	and.w	r3, r3, #1
    caee:	2b00      	cmp	r3, #0
    caf0:	d106      	bne.n	cb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    caf2:	4a05      	ldr	r2, [pc, #20]	; (cb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    caf4:	9b01      	ldr	r3, [sp, #4]
    caf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cafa:	2b00      	cmp	r3, #0
    cafc:	d100      	bne.n	cb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb00:	bf00      	nop
    cb02:	b003      	add	sp, #12
    cb04:	f85d fb04 	ldr.w	pc, [sp], #4
    cb08:	1fff8f34 	.word	0x1fff8f34
    cb0c:	1fff8f30 	.word	0x1fff8f30

0000cb10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cb10:	b500      	push	{lr}
    cb12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb14:	f7f4 f832 	bl	b7c <Sys_GetCoreID>
    cb18:	4603      	mov	r3, r0
    cb1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    cb1c:	4a10      	ldr	r2, [pc, #64]	; (cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cb1e:	9b01      	ldr	r3, [sp, #4]
    cb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb24:	2b00      	cmp	r3, #0
    cb26:	d10d      	bne.n	cb44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb28:	f7f3 ff46 	bl	9b8 <Adc_schm_read_msr>
    cb2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb2e:	9b00      	ldr	r3, [sp, #0]
    cb30:	f003 0301 	and.w	r3, r3, #1
    cb34:	2b00      	cmp	r3, #0
    cb36:	d100      	bne.n	cb3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    cb3a:	490a      	ldr	r1, [pc, #40]	; (cb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    cb3c:	9b01      	ldr	r3, [sp, #4]
    cb3e:	9a00      	ldr	r2, [sp, #0]
    cb40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    cb44:	4a06      	ldr	r2, [pc, #24]	; (cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cb46:	9b01      	ldr	r3, [sp, #4]
    cb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb4c:	1c5a      	adds	r2, r3, #1
    cb4e:	4904      	ldr	r1, [pc, #16]	; (cb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cb50:	9b01      	ldr	r3, [sp, #4]
    cb52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb56:	bf00      	nop
    cb58:	b003      	add	sp, #12
    cb5a:	f85d fb04 	ldr.w	pc, [sp], #4
    cb5e:	bf00      	nop
    cb60:	1fff8f3c 	.word	0x1fff8f3c
    cb64:	1fff8f38 	.word	0x1fff8f38

0000cb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cb68:	b500      	push	{lr}
    cb6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb6c:	f7f4 f806 	bl	b7c <Sys_GetCoreID>
    cb70:	4603      	mov	r3, r0
    cb72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    cb74:	4a0d      	ldr	r2, [pc, #52]	; (cbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cb76:	9b01      	ldr	r3, [sp, #4]
    cb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb7c:	1e5a      	subs	r2, r3, #1
    cb7e:	490b      	ldr	r1, [pc, #44]	; (cbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cb80:	9b01      	ldr	r3, [sp, #4]
    cb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    cb86:	4a0a      	ldr	r2, [pc, #40]	; (cbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb8e:	f003 0301 	and.w	r3, r3, #1
    cb92:	2b00      	cmp	r3, #0
    cb94:	d106      	bne.n	cba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    cb96:	4a05      	ldr	r2, [pc, #20]	; (cbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cb98:	9b01      	ldr	r3, [sp, #4]
    cb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d100      	bne.n	cba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cba4:	bf00      	nop
    cba6:	b003      	add	sp, #12
    cba8:	f85d fb04 	ldr.w	pc, [sp], #4
    cbac:	1fff8f3c 	.word	0x1fff8f3c
    cbb0:	1fff8f38 	.word	0x1fff8f38

0000cbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cbb4:	b500      	push	{lr}
    cbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbb8:	f7f3 ffe0 	bl	b7c <Sys_GetCoreID>
    cbbc:	4603      	mov	r3, r0
    cbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    cbc0:	4a10      	ldr	r2, [pc, #64]	; (cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cbc2:	9b01      	ldr	r3, [sp, #4]
    cbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d10d      	bne.n	cbe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbcc:	f7f3 fef4 	bl	9b8 <Adc_schm_read_msr>
    cbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbd2:	9b00      	ldr	r3, [sp, #0]
    cbd4:	f003 0301 	and.w	r3, r3, #1
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d100      	bne.n	cbde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    cbde:	490a      	ldr	r1, [pc, #40]	; (cc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    cbe0:	9b01      	ldr	r3, [sp, #4]
    cbe2:	9a00      	ldr	r2, [sp, #0]
    cbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    cbe8:	4a06      	ldr	r2, [pc, #24]	; (cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cbea:	9b01      	ldr	r3, [sp, #4]
    cbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbf0:	1c5a      	adds	r2, r3, #1
    cbf2:	4904      	ldr	r1, [pc, #16]	; (cc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cbf4:	9b01      	ldr	r3, [sp, #4]
    cbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbfa:	bf00      	nop
    cbfc:	b003      	add	sp, #12
    cbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    cc02:	bf00      	nop
    cc04:	1fff8f44 	.word	0x1fff8f44
    cc08:	1fff8f40 	.word	0x1fff8f40

0000cc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cc0c:	b500      	push	{lr}
    cc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc10:	f7f3 ffb4 	bl	b7c <Sys_GetCoreID>
    cc14:	4603      	mov	r3, r0
    cc16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    cc18:	4a0d      	ldr	r2, [pc, #52]	; (cc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cc1a:	9b01      	ldr	r3, [sp, #4]
    cc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc20:	1e5a      	subs	r2, r3, #1
    cc22:	490b      	ldr	r1, [pc, #44]	; (cc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cc24:	9b01      	ldr	r3, [sp, #4]
    cc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    cc2a:	4a0a      	ldr	r2, [pc, #40]	; (cc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    cc2c:	9b01      	ldr	r3, [sp, #4]
    cc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc32:	f003 0301 	and.w	r3, r3, #1
    cc36:	2b00      	cmp	r3, #0
    cc38:	d106      	bne.n	cc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    cc3a:	4a05      	ldr	r2, [pc, #20]	; (cc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cc3c:	9b01      	ldr	r3, [sp, #4]
    cc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc42:	2b00      	cmp	r3, #0
    cc44:	d100      	bne.n	cc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc48:	bf00      	nop
    cc4a:	b003      	add	sp, #12
    cc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc50:	1fff8f44 	.word	0x1fff8f44
    cc54:	1fff8f40 	.word	0x1fff8f40

0000cc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cc58:	b500      	push	{lr}
    cc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc5c:	f7f3 ff8e 	bl	b7c <Sys_GetCoreID>
    cc60:	4603      	mov	r3, r0
    cc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    cc64:	4a10      	ldr	r2, [pc, #64]	; (cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cc66:	9b01      	ldr	r3, [sp, #4]
    cc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	d10d      	bne.n	cc8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc70:	f7f3 fea2 	bl	9b8 <Adc_schm_read_msr>
    cc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc76:	9b00      	ldr	r3, [sp, #0]
    cc78:	f003 0301 	and.w	r3, r3, #1
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	d100      	bne.n	cc82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    cc82:	490a      	ldr	r1, [pc, #40]	; (ccac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    cc84:	9b01      	ldr	r3, [sp, #4]
    cc86:	9a00      	ldr	r2, [sp, #0]
    cc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    cc8c:	4a06      	ldr	r2, [pc, #24]	; (cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cc8e:	9b01      	ldr	r3, [sp, #4]
    cc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc94:	1c5a      	adds	r2, r3, #1
    cc96:	4904      	ldr	r1, [pc, #16]	; (cca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cc98:	9b01      	ldr	r3, [sp, #4]
    cc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc9e:	bf00      	nop
    cca0:	b003      	add	sp, #12
    cca2:	f85d fb04 	ldr.w	pc, [sp], #4
    cca6:	bf00      	nop
    cca8:	1fff8f4c 	.word	0x1fff8f4c
    ccac:	1fff8f48 	.word	0x1fff8f48

0000ccb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    ccb0:	b500      	push	{lr}
    ccb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccb4:	f7f3 ff62 	bl	b7c <Sys_GetCoreID>
    ccb8:	4603      	mov	r3, r0
    ccba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    ccbc:	4a0d      	ldr	r2, [pc, #52]	; (ccf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    ccbe:	9b01      	ldr	r3, [sp, #4]
    ccc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccc4:	1e5a      	subs	r2, r3, #1
    ccc6:	490b      	ldr	r1, [pc, #44]	; (ccf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    ccc8:	9b01      	ldr	r3, [sp, #4]
    ccca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    ccce:	4a0a      	ldr	r2, [pc, #40]	; (ccf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    ccd0:	9b01      	ldr	r3, [sp, #4]
    ccd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd6:	f003 0301 	and.w	r3, r3, #1
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d106      	bne.n	ccec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    ccde:	4a05      	ldr	r2, [pc, #20]	; (ccf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cce0:	9b01      	ldr	r3, [sp, #4]
    cce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce6:	2b00      	cmp	r3, #0
    cce8:	d100      	bne.n	ccec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ccec:	bf00      	nop
    ccee:	b003      	add	sp, #12
    ccf0:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf4:	1fff8f4c 	.word	0x1fff8f4c
    ccf8:	1fff8f48 	.word	0x1fff8f48

0000ccfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ccfc:	b500      	push	{lr}
    ccfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd00:	f7f3 ff3c 	bl	b7c <Sys_GetCoreID>
    cd04:	4603      	mov	r3, r0
    cd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    cd08:	4a10      	ldr	r2, [pc, #64]	; (cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cd0a:	9b01      	ldr	r3, [sp, #4]
    cd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d10d      	bne.n	cd30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd14:	f7f3 fe50 	bl	9b8 <Adc_schm_read_msr>
    cd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd1a:	9b00      	ldr	r3, [sp, #0]
    cd1c:	f003 0301 	and.w	r3, r3, #1
    cd20:	2b00      	cmp	r3, #0
    cd22:	d100      	bne.n	cd26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    cd26:	490a      	ldr	r1, [pc, #40]	; (cd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    cd28:	9b01      	ldr	r3, [sp, #4]
    cd2a:	9a00      	ldr	r2, [sp, #0]
    cd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    cd30:	4a06      	ldr	r2, [pc, #24]	; (cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cd32:	9b01      	ldr	r3, [sp, #4]
    cd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd38:	1c5a      	adds	r2, r3, #1
    cd3a:	4904      	ldr	r1, [pc, #16]	; (cd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cd3c:	9b01      	ldr	r3, [sp, #4]
    cd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd42:	bf00      	nop
    cd44:	b003      	add	sp, #12
    cd46:	f85d fb04 	ldr.w	pc, [sp], #4
    cd4a:	bf00      	nop
    cd4c:	1fff8f54 	.word	0x1fff8f54
    cd50:	1fff8f50 	.word	0x1fff8f50

0000cd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cd54:	b500      	push	{lr}
    cd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd58:	f7f3 ff10 	bl	b7c <Sys_GetCoreID>
    cd5c:	4603      	mov	r3, r0
    cd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    cd60:	4a0d      	ldr	r2, [pc, #52]	; (cd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cd62:	9b01      	ldr	r3, [sp, #4]
    cd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd68:	1e5a      	subs	r2, r3, #1
    cd6a:	490b      	ldr	r1, [pc, #44]	; (cd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cd6c:	9b01      	ldr	r3, [sp, #4]
    cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    cd72:	4a0a      	ldr	r2, [pc, #40]	; (cd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    cd74:	9b01      	ldr	r3, [sp, #4]
    cd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd7a:	f003 0301 	and.w	r3, r3, #1
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d106      	bne.n	cd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    cd82:	4a05      	ldr	r2, [pc, #20]	; (cd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cd84:	9b01      	ldr	r3, [sp, #4]
    cd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd8a:	2b00      	cmp	r3, #0
    cd8c:	d100      	bne.n	cd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd90:	bf00      	nop
    cd92:	b003      	add	sp, #12
    cd94:	f85d fb04 	ldr.w	pc, [sp], #4
    cd98:	1fff8f54 	.word	0x1fff8f54
    cd9c:	1fff8f50 	.word	0x1fff8f50

0000cda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cda0:	b500      	push	{lr}
    cda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda4:	f7f3 feea 	bl	b7c <Sys_GetCoreID>
    cda8:	4603      	mov	r3, r0
    cdaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    cdac:	4a10      	ldr	r2, [pc, #64]	; (cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cdae:	9b01      	ldr	r3, [sp, #4]
    cdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb4:	2b00      	cmp	r3, #0
    cdb6:	d10d      	bne.n	cdd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdb8:	f7f3 fdfe 	bl	9b8 <Adc_schm_read_msr>
    cdbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdbe:	9b00      	ldr	r3, [sp, #0]
    cdc0:	f003 0301 	and.w	r3, r3, #1
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	d100      	bne.n	cdca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    cdca:	490a      	ldr	r1, [pc, #40]	; (cdf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    cdcc:	9b01      	ldr	r3, [sp, #4]
    cdce:	9a00      	ldr	r2, [sp, #0]
    cdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    cdd4:	4a06      	ldr	r2, [pc, #24]	; (cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cdd6:	9b01      	ldr	r3, [sp, #4]
    cdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cddc:	1c5a      	adds	r2, r3, #1
    cdde:	4904      	ldr	r1, [pc, #16]	; (cdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cde0:	9b01      	ldr	r3, [sp, #4]
    cde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cde6:	bf00      	nop
    cde8:	b003      	add	sp, #12
    cdea:	f85d fb04 	ldr.w	pc, [sp], #4
    cdee:	bf00      	nop
    cdf0:	1fff8f5c 	.word	0x1fff8f5c
    cdf4:	1fff8f58 	.word	0x1fff8f58

0000cdf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cdf8:	b500      	push	{lr}
    cdfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdfc:	f7f3 febe 	bl	b7c <Sys_GetCoreID>
    ce00:	4603      	mov	r3, r0
    ce02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    ce04:	4a0d      	ldr	r2, [pc, #52]	; (ce3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ce06:	9b01      	ldr	r3, [sp, #4]
    ce08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce0c:	1e5a      	subs	r2, r3, #1
    ce0e:	490b      	ldr	r1, [pc, #44]	; (ce3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ce10:	9b01      	ldr	r3, [sp, #4]
    ce12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    ce16:	4a0a      	ldr	r2, [pc, #40]	; (ce40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    ce18:	9b01      	ldr	r3, [sp, #4]
    ce1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce1e:	f003 0301 	and.w	r3, r3, #1
    ce22:	2b00      	cmp	r3, #0
    ce24:	d106      	bne.n	ce34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    ce26:	4a05      	ldr	r2, [pc, #20]	; (ce3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    ce28:	9b01      	ldr	r3, [sp, #4]
    ce2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d100      	bne.n	ce34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce34:	bf00      	nop
    ce36:	b003      	add	sp, #12
    ce38:	f85d fb04 	ldr.w	pc, [sp], #4
    ce3c:	1fff8f5c 	.word	0x1fff8f5c
    ce40:	1fff8f58 	.word	0x1fff8f58

0000ce44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    ce44:	b500      	push	{lr}
    ce46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce48:	f7f3 fe98 	bl	b7c <Sys_GetCoreID>
    ce4c:	4603      	mov	r3, r0
    ce4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    ce50:	4a10      	ldr	r2, [pc, #64]	; (ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    ce52:	9b01      	ldr	r3, [sp, #4]
    ce54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d10d      	bne.n	ce78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce5c:	f7f3 fdac 	bl	9b8 <Adc_schm_read_msr>
    ce60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce62:	9b00      	ldr	r3, [sp, #0]
    ce64:	f003 0301 	and.w	r3, r3, #1
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d100      	bne.n	ce6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    ce6e:	490a      	ldr	r1, [pc, #40]	; (ce98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    ce70:	9b01      	ldr	r3, [sp, #4]
    ce72:	9a00      	ldr	r2, [sp, #0]
    ce74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    ce78:	4a06      	ldr	r2, [pc, #24]	; (ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    ce7a:	9b01      	ldr	r3, [sp, #4]
    ce7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce80:	1c5a      	adds	r2, r3, #1
    ce82:	4904      	ldr	r1, [pc, #16]	; (ce94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    ce84:	9b01      	ldr	r3, [sp, #4]
    ce86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce8a:	bf00      	nop
    ce8c:	b003      	add	sp, #12
    ce8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ce92:	bf00      	nop
    ce94:	1fff8f64 	.word	0x1fff8f64
    ce98:	1fff8f60 	.word	0x1fff8f60

0000ce9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    ce9c:	b500      	push	{lr}
    ce9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cea0:	f7f3 fe6c 	bl	b7c <Sys_GetCoreID>
    cea4:	4603      	mov	r3, r0
    cea6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    cea8:	4a0d      	ldr	r2, [pc, #52]	; (cee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ceaa:	9b01      	ldr	r3, [sp, #4]
    ceac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb0:	1e5a      	subs	r2, r3, #1
    ceb2:	490b      	ldr	r1, [pc, #44]	; (cee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ceb4:	9b01      	ldr	r3, [sp, #4]
    ceb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    ceba:	4a0a      	ldr	r2, [pc, #40]	; (cee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    cebc:	9b01      	ldr	r3, [sp, #4]
    cebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec2:	f003 0301 	and.w	r3, r3, #1
    cec6:	2b00      	cmp	r3, #0
    cec8:	d106      	bne.n	ced8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    ceca:	4a05      	ldr	r2, [pc, #20]	; (cee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    cecc:	9b01      	ldr	r3, [sp, #4]
    cece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ced2:	2b00      	cmp	r3, #0
    ced4:	d100      	bne.n	ced8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ced6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ced8:	bf00      	nop
    ceda:	b003      	add	sp, #12
    cedc:	f85d fb04 	ldr.w	pc, [sp], #4
    cee0:	1fff8f64 	.word	0x1fff8f64
    cee4:	1fff8f60 	.word	0x1fff8f60

0000cee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    cee8:	b500      	push	{lr}
    ceea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ceec:	f7f3 fe46 	bl	b7c <Sys_GetCoreID>
    cef0:	4603      	mov	r3, r0
    cef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    cef4:	4a10      	ldr	r2, [pc, #64]	; (cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cef6:	9b01      	ldr	r3, [sp, #4]
    cef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cefc:	2b00      	cmp	r3, #0
    cefe:	d10d      	bne.n	cf1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf00:	f7f3 fd5a 	bl	9b8 <Adc_schm_read_msr>
    cf04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf06:	9b00      	ldr	r3, [sp, #0]
    cf08:	f003 0301 	and.w	r3, r3, #1
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d100      	bne.n	cf12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    cf12:	490a      	ldr	r1, [pc, #40]	; (cf3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    cf14:	9b01      	ldr	r3, [sp, #4]
    cf16:	9a00      	ldr	r2, [sp, #0]
    cf18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    cf1c:	4a06      	ldr	r2, [pc, #24]	; (cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cf1e:	9b01      	ldr	r3, [sp, #4]
    cf20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf24:	1c5a      	adds	r2, r3, #1
    cf26:	4904      	ldr	r1, [pc, #16]	; (cf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    cf28:	9b01      	ldr	r3, [sp, #4]
    cf2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf2e:	bf00      	nop
    cf30:	b003      	add	sp, #12
    cf32:	f85d fb04 	ldr.w	pc, [sp], #4
    cf36:	bf00      	nop
    cf38:	1fff8f6c 	.word	0x1fff8f6c
    cf3c:	1fff8f68 	.word	0x1fff8f68

0000cf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    cf40:	b500      	push	{lr}
    cf42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf44:	f7f3 fe1a 	bl	b7c <Sys_GetCoreID>
    cf48:	4603      	mov	r3, r0
    cf4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    cf4c:	4a0d      	ldr	r2, [pc, #52]	; (cf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    cf4e:	9b01      	ldr	r3, [sp, #4]
    cf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf54:	1e5a      	subs	r2, r3, #1
    cf56:	490b      	ldr	r1, [pc, #44]	; (cf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    cf58:	9b01      	ldr	r3, [sp, #4]
    cf5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    cf5e:	4a0a      	ldr	r2, [pc, #40]	; (cf88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    cf60:	9b01      	ldr	r3, [sp, #4]
    cf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf66:	f003 0301 	and.w	r3, r3, #1
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d106      	bne.n	cf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    cf6e:	4a05      	ldr	r2, [pc, #20]	; (cf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    cf70:	9b01      	ldr	r3, [sp, #4]
    cf72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d100      	bne.n	cf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf7c:	bf00      	nop
    cf7e:	b003      	add	sp, #12
    cf80:	f85d fb04 	ldr.w	pc, [sp], #4
    cf84:	1fff8f6c 	.word	0x1fff8f6c
    cf88:	1fff8f68 	.word	0x1fff8f68

0000cf8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    cf8c:	b500      	push	{lr}
    cf8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf90:	f7f3 fdf4 	bl	b7c <Sys_GetCoreID>
    cf94:	4603      	mov	r3, r0
    cf96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    cf98:	4a10      	ldr	r2, [pc, #64]	; (cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cf9a:	9b01      	ldr	r3, [sp, #4]
    cf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d10d      	bne.n	cfc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfa4:	f7f3 fd08 	bl	9b8 <Adc_schm_read_msr>
    cfa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfaa:	9b00      	ldr	r3, [sp, #0]
    cfac:	f003 0301 	and.w	r3, r3, #1
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d100      	bne.n	cfb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    cfb6:	490a      	ldr	r1, [pc, #40]	; (cfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    cfb8:	9b01      	ldr	r3, [sp, #4]
    cfba:	9a00      	ldr	r2, [sp, #0]
    cfbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    cfc0:	4a06      	ldr	r2, [pc, #24]	; (cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cfc2:	9b01      	ldr	r3, [sp, #4]
    cfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc8:	1c5a      	adds	r2, r3, #1
    cfca:	4904      	ldr	r1, [pc, #16]	; (cfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cfcc:	9b01      	ldr	r3, [sp, #4]
    cfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfd2:	bf00      	nop
    cfd4:	b003      	add	sp, #12
    cfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    cfda:	bf00      	nop
    cfdc:	1fff8f74 	.word	0x1fff8f74
    cfe0:	1fff8f70 	.word	0x1fff8f70

0000cfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    cfe4:	b500      	push	{lr}
    cfe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe8:	f7f3 fdc8 	bl	b7c <Sys_GetCoreID>
    cfec:	4603      	mov	r3, r0
    cfee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    cff0:	4a0d      	ldr	r2, [pc, #52]	; (d028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cff2:	9b01      	ldr	r3, [sp, #4]
    cff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff8:	1e5a      	subs	r2, r3, #1
    cffa:	490b      	ldr	r1, [pc, #44]	; (d028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cffc:	9b01      	ldr	r3, [sp, #4]
    cffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    d002:	4a0a      	ldr	r2, [pc, #40]	; (d02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    d004:	9b01      	ldr	r3, [sp, #4]
    d006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d00a:	f003 0301 	and.w	r3, r3, #1
    d00e:	2b00      	cmp	r3, #0
    d010:	d106      	bne.n	d020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    d012:	4a05      	ldr	r2, [pc, #20]	; (d028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    d014:	9b01      	ldr	r3, [sp, #4]
    d016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d01a:	2b00      	cmp	r3, #0
    d01c:	d100      	bne.n	d020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d020:	bf00      	nop
    d022:	b003      	add	sp, #12
    d024:	f85d fb04 	ldr.w	pc, [sp], #4
    d028:	1fff8f74 	.word	0x1fff8f74
    d02c:	1fff8f70 	.word	0x1fff8f70

0000d030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d030:	b500      	push	{lr}
    d032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d034:	f7f3 fda2 	bl	b7c <Sys_GetCoreID>
    d038:	4603      	mov	r3, r0
    d03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    d03c:	4a10      	ldr	r2, [pc, #64]	; (d080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d03e:	9b01      	ldr	r3, [sp, #4]
    d040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d044:	2b00      	cmp	r3, #0
    d046:	d10d      	bne.n	d064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d048:	f7f3 fcb6 	bl	9b8 <Adc_schm_read_msr>
    d04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d04e:	9b00      	ldr	r3, [sp, #0]
    d050:	f003 0301 	and.w	r3, r3, #1
    d054:	2b00      	cmp	r3, #0
    d056:	d100      	bne.n	d05a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    d05a:	490a      	ldr	r1, [pc, #40]	; (d084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    d05c:	9b01      	ldr	r3, [sp, #4]
    d05e:	9a00      	ldr	r2, [sp, #0]
    d060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    d064:	4a06      	ldr	r2, [pc, #24]	; (d080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d066:	9b01      	ldr	r3, [sp, #4]
    d068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06c:	1c5a      	adds	r2, r3, #1
    d06e:	4904      	ldr	r1, [pc, #16]	; (d080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    d070:	9b01      	ldr	r3, [sp, #4]
    d072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d076:	bf00      	nop
    d078:	b003      	add	sp, #12
    d07a:	f85d fb04 	ldr.w	pc, [sp], #4
    d07e:	bf00      	nop
    d080:	1fff8f7c 	.word	0x1fff8f7c
    d084:	1fff8f78 	.word	0x1fff8f78

0000d088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    d088:	b500      	push	{lr}
    d08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d08c:	f7f3 fd76 	bl	b7c <Sys_GetCoreID>
    d090:	4603      	mov	r3, r0
    d092:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    d094:	4a0d      	ldr	r2, [pc, #52]	; (d0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d096:	9b01      	ldr	r3, [sp, #4]
    d098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d09c:	1e5a      	subs	r2, r3, #1
    d09e:	490b      	ldr	r1, [pc, #44]	; (d0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d0a0:	9b01      	ldr	r3, [sp, #4]
    d0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    d0a6:	4a0a      	ldr	r2, [pc, #40]	; (d0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d0a8:	9b01      	ldr	r3, [sp, #4]
    d0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ae:	f003 0301 	and.w	r3, r3, #1
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d106      	bne.n	d0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d0b6:	4a05      	ldr	r2, [pc, #20]	; (d0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d0b8:	9b01      	ldr	r3, [sp, #4]
    d0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d100      	bne.n	d0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0c4:	bf00      	nop
    d0c6:	b003      	add	sp, #12
    d0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d0cc:	1fff8f7c 	.word	0x1fff8f7c
    d0d0:	1fff8f78 	.word	0x1fff8f78

0000d0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d0d4:	b500      	push	{lr}
    d0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0d8:	f7f3 fd50 	bl	b7c <Sys_GetCoreID>
    d0dc:	4603      	mov	r3, r0
    d0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d0e0:	4a10      	ldr	r2, [pc, #64]	; (d124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d0e2:	9b01      	ldr	r3, [sp, #4]
    d0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	d10d      	bne.n	d108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0ec:	f7f3 fc64 	bl	9b8 <Adc_schm_read_msr>
    d0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0f2:	9b00      	ldr	r3, [sp, #0]
    d0f4:	f003 0301 	and.w	r3, r3, #1
    d0f8:	2b00      	cmp	r3, #0
    d0fa:	d100      	bne.n	d0fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d0fe:	490a      	ldr	r1, [pc, #40]	; (d128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d100:	9b01      	ldr	r3, [sp, #4]
    d102:	9a00      	ldr	r2, [sp, #0]
    d104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d108:	4a06      	ldr	r2, [pc, #24]	; (d124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d10a:	9b01      	ldr	r3, [sp, #4]
    d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d110:	1c5a      	adds	r2, r3, #1
    d112:	4904      	ldr	r1, [pc, #16]	; (d124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d114:	9b01      	ldr	r3, [sp, #4]
    d116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d11a:	bf00      	nop
    d11c:	b003      	add	sp, #12
    d11e:	f85d fb04 	ldr.w	pc, [sp], #4
    d122:	bf00      	nop
    d124:	1fff8f84 	.word	0x1fff8f84
    d128:	1fff8f80 	.word	0x1fff8f80

0000d12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d12c:	b500      	push	{lr}
    d12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d130:	f7f3 fd24 	bl	b7c <Sys_GetCoreID>
    d134:	4603      	mov	r3, r0
    d136:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d138:	4a0d      	ldr	r2, [pc, #52]	; (d170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d13a:	9b01      	ldr	r3, [sp, #4]
    d13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d140:	1e5a      	subs	r2, r3, #1
    d142:	490b      	ldr	r1, [pc, #44]	; (d170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d144:	9b01      	ldr	r3, [sp, #4]
    d146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d14a:	4a0a      	ldr	r2, [pc, #40]	; (d174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d14c:	9b01      	ldr	r3, [sp, #4]
    d14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d152:	f003 0301 	and.w	r3, r3, #1
    d156:	2b00      	cmp	r3, #0
    d158:	d106      	bne.n	d168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d15a:	4a05      	ldr	r2, [pc, #20]	; (d170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d15c:	9b01      	ldr	r3, [sp, #4]
    d15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d162:	2b00      	cmp	r3, #0
    d164:	d100      	bne.n	d168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d168:	bf00      	nop
    d16a:	b003      	add	sp, #12
    d16c:	f85d fb04 	ldr.w	pc, [sp], #4
    d170:	1fff8f84 	.word	0x1fff8f84
    d174:	1fff8f80 	.word	0x1fff8f80

0000d178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d178:	b500      	push	{lr}
    d17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d17c:	f7f3 fcfe 	bl	b7c <Sys_GetCoreID>
    d180:	4603      	mov	r3, r0
    d182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d184:	4a10      	ldr	r2, [pc, #64]	; (d1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d186:	9b01      	ldr	r3, [sp, #4]
    d188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d18c:	2b00      	cmp	r3, #0
    d18e:	d10d      	bne.n	d1ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d190:	f7f3 fc12 	bl	9b8 <Adc_schm_read_msr>
    d194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d196:	9b00      	ldr	r3, [sp, #0]
    d198:	f003 0301 	and.w	r3, r3, #1
    d19c:	2b00      	cmp	r3, #0
    d19e:	d100      	bne.n	d1a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d1a2:	490a      	ldr	r1, [pc, #40]	; (d1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d1a4:	9b01      	ldr	r3, [sp, #4]
    d1a6:	9a00      	ldr	r2, [sp, #0]
    d1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d1ac:	4a06      	ldr	r2, [pc, #24]	; (d1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d1ae:	9b01      	ldr	r3, [sp, #4]
    d1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b4:	1c5a      	adds	r2, r3, #1
    d1b6:	4904      	ldr	r1, [pc, #16]	; (d1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d1b8:	9b01      	ldr	r3, [sp, #4]
    d1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1be:	bf00      	nop
    d1c0:	b003      	add	sp, #12
    d1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c6:	bf00      	nop
    d1c8:	1fff8f8c 	.word	0x1fff8f8c
    d1cc:	1fff8f88 	.word	0x1fff8f88

0000d1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d1d0:	b500      	push	{lr}
    d1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1d4:	f7f3 fcd2 	bl	b7c <Sys_GetCoreID>
    d1d8:	4603      	mov	r3, r0
    d1da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d1dc:	4a0d      	ldr	r2, [pc, #52]	; (d214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d1de:	9b01      	ldr	r3, [sp, #4]
    d1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e4:	1e5a      	subs	r2, r3, #1
    d1e6:	490b      	ldr	r1, [pc, #44]	; (d214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d1e8:	9b01      	ldr	r3, [sp, #4]
    d1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d1ee:	4a0a      	ldr	r2, [pc, #40]	; (d218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d1f0:	9b01      	ldr	r3, [sp, #4]
    d1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f6:	f003 0301 	and.w	r3, r3, #1
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d106      	bne.n	d20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d1fe:	4a05      	ldr	r2, [pc, #20]	; (d214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d200:	9b01      	ldr	r3, [sp, #4]
    d202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d206:	2b00      	cmp	r3, #0
    d208:	d100      	bne.n	d20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d20c:	bf00      	nop
    d20e:	b003      	add	sp, #12
    d210:	f85d fb04 	ldr.w	pc, [sp], #4
    d214:	1fff8f8c 	.word	0x1fff8f8c
    d218:	1fff8f88 	.word	0x1fff8f88

0000d21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d21c:	b500      	push	{lr}
    d21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d220:	f7f3 fcac 	bl	b7c <Sys_GetCoreID>
    d224:	4603      	mov	r3, r0
    d226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d228:	4a10      	ldr	r2, [pc, #64]	; (d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d22a:	9b01      	ldr	r3, [sp, #4]
    d22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d230:	2b00      	cmp	r3, #0
    d232:	d10d      	bne.n	d250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d234:	f7f3 fbc0 	bl	9b8 <Adc_schm_read_msr>
    d238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d23a:	9b00      	ldr	r3, [sp, #0]
    d23c:	f003 0301 	and.w	r3, r3, #1
    d240:	2b00      	cmp	r3, #0
    d242:	d100      	bne.n	d246 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d246:	490a      	ldr	r1, [pc, #40]	; (d270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d248:	9b01      	ldr	r3, [sp, #4]
    d24a:	9a00      	ldr	r2, [sp, #0]
    d24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d250:	4a06      	ldr	r2, [pc, #24]	; (d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d252:	9b01      	ldr	r3, [sp, #4]
    d254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d258:	1c5a      	adds	r2, r3, #1
    d25a:	4904      	ldr	r1, [pc, #16]	; (d26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d25c:	9b01      	ldr	r3, [sp, #4]
    d25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d262:	bf00      	nop
    d264:	b003      	add	sp, #12
    d266:	f85d fb04 	ldr.w	pc, [sp], #4
    d26a:	bf00      	nop
    d26c:	1fff8f94 	.word	0x1fff8f94
    d270:	1fff8f90 	.word	0x1fff8f90

0000d274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d274:	b500      	push	{lr}
    d276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d278:	f7f3 fc80 	bl	b7c <Sys_GetCoreID>
    d27c:	4603      	mov	r3, r0
    d27e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d280:	4a0d      	ldr	r2, [pc, #52]	; (d2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d282:	9b01      	ldr	r3, [sp, #4]
    d284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d288:	1e5a      	subs	r2, r3, #1
    d28a:	490b      	ldr	r1, [pc, #44]	; (d2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d28c:	9b01      	ldr	r3, [sp, #4]
    d28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d292:	4a0a      	ldr	r2, [pc, #40]	; (d2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d294:	9b01      	ldr	r3, [sp, #4]
    d296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d29a:	f003 0301 	and.w	r3, r3, #1
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d106      	bne.n	d2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d2a2:	4a05      	ldr	r2, [pc, #20]	; (d2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d2a4:	9b01      	ldr	r3, [sp, #4]
    d2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	d100      	bne.n	d2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2b0:	bf00      	nop
    d2b2:	b003      	add	sp, #12
    d2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    d2b8:	1fff8f94 	.word	0x1fff8f94
    d2bc:	1fff8f90 	.word	0x1fff8f90

0000d2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d2c0:	b500      	push	{lr}
    d2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c4:	f7f3 fc5a 	bl	b7c <Sys_GetCoreID>
    d2c8:	4603      	mov	r3, r0
    d2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d2cc:	4a10      	ldr	r2, [pc, #64]	; (d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d2ce:	9b01      	ldr	r3, [sp, #4]
    d2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d10d      	bne.n	d2f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2d8:	f7f3 fb6e 	bl	9b8 <Adc_schm_read_msr>
    d2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2de:	9b00      	ldr	r3, [sp, #0]
    d2e0:	f003 0301 	and.w	r3, r3, #1
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d100      	bne.n	d2ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d2ea:	490a      	ldr	r1, [pc, #40]	; (d314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d2ec:	9b01      	ldr	r3, [sp, #4]
    d2ee:	9a00      	ldr	r2, [sp, #0]
    d2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d2f4:	4a06      	ldr	r2, [pc, #24]	; (d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d2f6:	9b01      	ldr	r3, [sp, #4]
    d2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fc:	1c5a      	adds	r2, r3, #1
    d2fe:	4904      	ldr	r1, [pc, #16]	; (d310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d300:	9b01      	ldr	r3, [sp, #4]
    d302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d306:	bf00      	nop
    d308:	b003      	add	sp, #12
    d30a:	f85d fb04 	ldr.w	pc, [sp], #4
    d30e:	bf00      	nop
    d310:	1fff8f9c 	.word	0x1fff8f9c
    d314:	1fff8f98 	.word	0x1fff8f98

0000d318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d318:	b500      	push	{lr}
    d31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d31c:	f7f3 fc2e 	bl	b7c <Sys_GetCoreID>
    d320:	4603      	mov	r3, r0
    d322:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d324:	4a0d      	ldr	r2, [pc, #52]	; (d35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d326:	9b01      	ldr	r3, [sp, #4]
    d328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d32c:	1e5a      	subs	r2, r3, #1
    d32e:	490b      	ldr	r1, [pc, #44]	; (d35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d330:	9b01      	ldr	r3, [sp, #4]
    d332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d336:	4a0a      	ldr	r2, [pc, #40]	; (d360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d338:	9b01      	ldr	r3, [sp, #4]
    d33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33e:	f003 0301 	and.w	r3, r3, #1
    d342:	2b00      	cmp	r3, #0
    d344:	d106      	bne.n	d354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d346:	4a05      	ldr	r2, [pc, #20]	; (d35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d348:	9b01      	ldr	r3, [sp, #4]
    d34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34e:	2b00      	cmp	r3, #0
    d350:	d100      	bne.n	d354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d354:	bf00      	nop
    d356:	b003      	add	sp, #12
    d358:	f85d fb04 	ldr.w	pc, [sp], #4
    d35c:	1fff8f9c 	.word	0x1fff8f9c
    d360:	1fff8f98 	.word	0x1fff8f98

0000d364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d364:	b500      	push	{lr}
    d366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d368:	f7f3 fc08 	bl	b7c <Sys_GetCoreID>
    d36c:	4603      	mov	r3, r0
    d36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d370:	4a10      	ldr	r2, [pc, #64]	; (d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d372:	9b01      	ldr	r3, [sp, #4]
    d374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d378:	2b00      	cmp	r3, #0
    d37a:	d10d      	bne.n	d398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d37c:	f7f3 fb1c 	bl	9b8 <Adc_schm_read_msr>
    d380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d382:	9b00      	ldr	r3, [sp, #0]
    d384:	f003 0301 	and.w	r3, r3, #1
    d388:	2b00      	cmp	r3, #0
    d38a:	d100      	bne.n	d38e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d38e:	490a      	ldr	r1, [pc, #40]	; (d3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d390:	9b01      	ldr	r3, [sp, #4]
    d392:	9a00      	ldr	r2, [sp, #0]
    d394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d398:	4a06      	ldr	r2, [pc, #24]	; (d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d39a:	9b01      	ldr	r3, [sp, #4]
    d39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3a0:	1c5a      	adds	r2, r3, #1
    d3a2:	4904      	ldr	r1, [pc, #16]	; (d3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d3a4:	9b01      	ldr	r3, [sp, #4]
    d3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3aa:	bf00      	nop
    d3ac:	b003      	add	sp, #12
    d3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    d3b2:	bf00      	nop
    d3b4:	1fff8fa4 	.word	0x1fff8fa4
    d3b8:	1fff8fa0 	.word	0x1fff8fa0

0000d3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d3bc:	b500      	push	{lr}
    d3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3c0:	f7f3 fbdc 	bl	b7c <Sys_GetCoreID>
    d3c4:	4603      	mov	r3, r0
    d3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d3c8:	4a0d      	ldr	r2, [pc, #52]	; (d400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d3ca:	9b01      	ldr	r3, [sp, #4]
    d3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d0:	1e5a      	subs	r2, r3, #1
    d3d2:	490b      	ldr	r1, [pc, #44]	; (d400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d3d4:	9b01      	ldr	r3, [sp, #4]
    d3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d3da:	4a0a      	ldr	r2, [pc, #40]	; (d404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d3dc:	9b01      	ldr	r3, [sp, #4]
    d3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3e2:	f003 0301 	and.w	r3, r3, #1
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d106      	bne.n	d3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d3ea:	4a05      	ldr	r2, [pc, #20]	; (d400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d3ec:	9b01      	ldr	r3, [sp, #4]
    d3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d100      	bne.n	d3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3f8:	bf00      	nop
    d3fa:	b003      	add	sp, #12
    d3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    d400:	1fff8fa4 	.word	0x1fff8fa4
    d404:	1fff8fa0 	.word	0x1fff8fa0

0000d408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d408:	b500      	push	{lr}
    d40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d40c:	f7f3 fbb6 	bl	b7c <Sys_GetCoreID>
    d410:	4603      	mov	r3, r0
    d412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d414:	4a10      	ldr	r2, [pc, #64]	; (d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d416:	9b01      	ldr	r3, [sp, #4]
    d418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d41c:	2b00      	cmp	r3, #0
    d41e:	d10d      	bne.n	d43c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d420:	f7f3 faca 	bl	9b8 <Adc_schm_read_msr>
    d424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d426:	9b00      	ldr	r3, [sp, #0]
    d428:	f003 0301 	and.w	r3, r3, #1
    d42c:	2b00      	cmp	r3, #0
    d42e:	d100      	bne.n	d432 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d432:	490a      	ldr	r1, [pc, #40]	; (d45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d434:	9b01      	ldr	r3, [sp, #4]
    d436:	9a00      	ldr	r2, [sp, #0]
    d438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d43c:	4a06      	ldr	r2, [pc, #24]	; (d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d43e:	9b01      	ldr	r3, [sp, #4]
    d440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d444:	1c5a      	adds	r2, r3, #1
    d446:	4904      	ldr	r1, [pc, #16]	; (d458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d448:	9b01      	ldr	r3, [sp, #4]
    d44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d44e:	bf00      	nop
    d450:	b003      	add	sp, #12
    d452:	f85d fb04 	ldr.w	pc, [sp], #4
    d456:	bf00      	nop
    d458:	1fff8fac 	.word	0x1fff8fac
    d45c:	1fff8fa8 	.word	0x1fff8fa8

0000d460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d460:	b500      	push	{lr}
    d462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d464:	f7f3 fb8a 	bl	b7c <Sys_GetCoreID>
    d468:	4603      	mov	r3, r0
    d46a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d46c:	4a0d      	ldr	r2, [pc, #52]	; (d4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d46e:	9b01      	ldr	r3, [sp, #4]
    d470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d474:	1e5a      	subs	r2, r3, #1
    d476:	490b      	ldr	r1, [pc, #44]	; (d4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d478:	9b01      	ldr	r3, [sp, #4]
    d47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d47e:	4a0a      	ldr	r2, [pc, #40]	; (d4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d480:	9b01      	ldr	r3, [sp, #4]
    d482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d486:	f003 0301 	and.w	r3, r3, #1
    d48a:	2b00      	cmp	r3, #0
    d48c:	d106      	bne.n	d49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d48e:	4a05      	ldr	r2, [pc, #20]	; (d4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d490:	9b01      	ldr	r3, [sp, #4]
    d492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d496:	2b00      	cmp	r3, #0
    d498:	d100      	bne.n	d49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d49c:	bf00      	nop
    d49e:	b003      	add	sp, #12
    d4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a4:	1fff8fac 	.word	0x1fff8fac
    d4a8:	1fff8fa8 	.word	0x1fff8fa8

0000d4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d4ac:	b500      	push	{lr}
    d4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b0:	f7f3 fb64 	bl	b7c <Sys_GetCoreID>
    d4b4:	4603      	mov	r3, r0
    d4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    d4b8:	4a10      	ldr	r2, [pc, #64]	; (d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d4ba:	9b01      	ldr	r3, [sp, #4]
    d4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d10d      	bne.n	d4e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4c4:	f7f3 fa78 	bl	9b8 <Adc_schm_read_msr>
    d4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4ca:	9b00      	ldr	r3, [sp, #0]
    d4cc:	f003 0301 	and.w	r3, r3, #1
    d4d0:	2b00      	cmp	r3, #0
    d4d2:	d100      	bne.n	d4d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    d4d6:	490a      	ldr	r1, [pc, #40]	; (d500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    d4d8:	9b01      	ldr	r3, [sp, #4]
    d4da:	9a00      	ldr	r2, [sp, #0]
    d4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    d4e0:	4a06      	ldr	r2, [pc, #24]	; (d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d4e2:	9b01      	ldr	r3, [sp, #4]
    d4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e8:	1c5a      	adds	r2, r3, #1
    d4ea:	4904      	ldr	r1, [pc, #16]	; (d4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d4ec:	9b01      	ldr	r3, [sp, #4]
    d4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4f2:	bf00      	nop
    d4f4:	b003      	add	sp, #12
    d4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    d4fa:	bf00      	nop
    d4fc:	1fff8fb4 	.word	0x1fff8fb4
    d500:	1fff8fb0 	.word	0x1fff8fb0

0000d504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d504:	b500      	push	{lr}
    d506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d508:	f7f3 fb38 	bl	b7c <Sys_GetCoreID>
    d50c:	4603      	mov	r3, r0
    d50e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    d510:	4a0d      	ldr	r2, [pc, #52]	; (d548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d512:	9b01      	ldr	r3, [sp, #4]
    d514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d518:	1e5a      	subs	r2, r3, #1
    d51a:	490b      	ldr	r1, [pc, #44]	; (d548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d51c:	9b01      	ldr	r3, [sp, #4]
    d51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    d522:	4a0a      	ldr	r2, [pc, #40]	; (d54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    d524:	9b01      	ldr	r3, [sp, #4]
    d526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d52a:	f003 0301 	and.w	r3, r3, #1
    d52e:	2b00      	cmp	r3, #0
    d530:	d106      	bne.n	d540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    d532:	4a05      	ldr	r2, [pc, #20]	; (d548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d534:	9b01      	ldr	r3, [sp, #4]
    d536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d53a:	2b00      	cmp	r3, #0
    d53c:	d100      	bne.n	d540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d540:	bf00      	nop
    d542:	b003      	add	sp, #12
    d544:	f85d fb04 	ldr.w	pc, [sp], #4
    d548:	1fff8fb4 	.word	0x1fff8fb4
    d54c:	1fff8fb0 	.word	0x1fff8fb0

0000d550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d550:	b500      	push	{lr}
    d552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d554:	f7f3 fb12 	bl	b7c <Sys_GetCoreID>
    d558:	4603      	mov	r3, r0
    d55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    d55c:	4a10      	ldr	r2, [pc, #64]	; (d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d55e:	9b01      	ldr	r3, [sp, #4]
    d560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d564:	2b00      	cmp	r3, #0
    d566:	d10d      	bne.n	d584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d568:	f7f3 fa26 	bl	9b8 <Adc_schm_read_msr>
    d56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d56e:	9b00      	ldr	r3, [sp, #0]
    d570:	f003 0301 	and.w	r3, r3, #1
    d574:	2b00      	cmp	r3, #0
    d576:	d100      	bne.n	d57a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    d57a:	490a      	ldr	r1, [pc, #40]	; (d5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    d57c:	9b01      	ldr	r3, [sp, #4]
    d57e:	9a00      	ldr	r2, [sp, #0]
    d580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    d584:	4a06      	ldr	r2, [pc, #24]	; (d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d586:	9b01      	ldr	r3, [sp, #4]
    d588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58c:	1c5a      	adds	r2, r3, #1
    d58e:	4904      	ldr	r1, [pc, #16]	; (d5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d590:	9b01      	ldr	r3, [sp, #4]
    d592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d596:	bf00      	nop
    d598:	b003      	add	sp, #12
    d59a:	f85d fb04 	ldr.w	pc, [sp], #4
    d59e:	bf00      	nop
    d5a0:	1fff8fbc 	.word	0x1fff8fbc
    d5a4:	1fff8fb8 	.word	0x1fff8fb8

0000d5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d5a8:	b500      	push	{lr}
    d5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5ac:	f7f3 fae6 	bl	b7c <Sys_GetCoreID>
    d5b0:	4603      	mov	r3, r0
    d5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    d5b4:	4a0d      	ldr	r2, [pc, #52]	; (d5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d5b6:	9b01      	ldr	r3, [sp, #4]
    d5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5bc:	1e5a      	subs	r2, r3, #1
    d5be:	490b      	ldr	r1, [pc, #44]	; (d5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d5c0:	9b01      	ldr	r3, [sp, #4]
    d5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    d5c6:	4a0a      	ldr	r2, [pc, #40]	; (d5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    d5c8:	9b01      	ldr	r3, [sp, #4]
    d5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ce:	f003 0301 	and.w	r3, r3, #1
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d106      	bne.n	d5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    d5d6:	4a05      	ldr	r2, [pc, #20]	; (d5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d5d8:	9b01      	ldr	r3, [sp, #4]
    d5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d100      	bne.n	d5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5e4:	bf00      	nop
    d5e6:	b003      	add	sp, #12
    d5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ec:	1fff8fbc 	.word	0x1fff8fbc
    d5f0:	1fff8fb8 	.word	0x1fff8fb8

0000d5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d5f4:	b500      	push	{lr}
    d5f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5f8:	f7f3 fac0 	bl	b7c <Sys_GetCoreID>
    d5fc:	4603      	mov	r3, r0
    d5fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    d600:	4a10      	ldr	r2, [pc, #64]	; (d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d602:	9b01      	ldr	r3, [sp, #4]
    d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d608:	2b00      	cmp	r3, #0
    d60a:	d10d      	bne.n	d628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d60c:	f7f3 f9d4 	bl	9b8 <Adc_schm_read_msr>
    d610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d612:	9b00      	ldr	r3, [sp, #0]
    d614:	f003 0301 	and.w	r3, r3, #1
    d618:	2b00      	cmp	r3, #0
    d61a:	d100      	bne.n	d61e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d61c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    d61e:	490a      	ldr	r1, [pc, #40]	; (d648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    d620:	9b01      	ldr	r3, [sp, #4]
    d622:	9a00      	ldr	r2, [sp, #0]
    d624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    d628:	4a06      	ldr	r2, [pc, #24]	; (d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d62a:	9b01      	ldr	r3, [sp, #4]
    d62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d630:	1c5a      	adds	r2, r3, #1
    d632:	4904      	ldr	r1, [pc, #16]	; (d644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d634:	9b01      	ldr	r3, [sp, #4]
    d636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d63a:	bf00      	nop
    d63c:	b003      	add	sp, #12
    d63e:	f85d fb04 	ldr.w	pc, [sp], #4
    d642:	bf00      	nop
    d644:	1fff8fc4 	.word	0x1fff8fc4
    d648:	1fff8fc0 	.word	0x1fff8fc0

0000d64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d64c:	b500      	push	{lr}
    d64e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d650:	f7f3 fa94 	bl	b7c <Sys_GetCoreID>
    d654:	4603      	mov	r3, r0
    d656:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    d658:	4a0d      	ldr	r2, [pc, #52]	; (d690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d65a:	9b01      	ldr	r3, [sp, #4]
    d65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d660:	1e5a      	subs	r2, r3, #1
    d662:	490b      	ldr	r1, [pc, #44]	; (d690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d664:	9b01      	ldr	r3, [sp, #4]
    d666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    d66a:	4a0a      	ldr	r2, [pc, #40]	; (d694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    d66c:	9b01      	ldr	r3, [sp, #4]
    d66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d672:	f003 0301 	and.w	r3, r3, #1
    d676:	2b00      	cmp	r3, #0
    d678:	d106      	bne.n	d688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    d67a:	4a05      	ldr	r2, [pc, #20]	; (d690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d67c:	9b01      	ldr	r3, [sp, #4]
    d67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d682:	2b00      	cmp	r3, #0
    d684:	d100      	bne.n	d688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d688:	bf00      	nop
    d68a:	b003      	add	sp, #12
    d68c:	f85d fb04 	ldr.w	pc, [sp], #4
    d690:	1fff8fc4 	.word	0x1fff8fc4
    d694:	1fff8fc0 	.word	0x1fff8fc0

0000d698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d698:	b500      	push	{lr}
    d69a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d69c:	f7f3 fa6e 	bl	b7c <Sys_GetCoreID>
    d6a0:	4603      	mov	r3, r0
    d6a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    d6a4:	4a10      	ldr	r2, [pc, #64]	; (d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d6a6:	9b01      	ldr	r3, [sp, #4]
    d6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	d10d      	bne.n	d6cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6b0:	f7f3 f982 	bl	9b8 <Adc_schm_read_msr>
    d6b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6b6:	9b00      	ldr	r3, [sp, #0]
    d6b8:	f003 0301 	and.w	r3, r3, #1
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d100      	bne.n	d6c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    d6c2:	490a      	ldr	r1, [pc, #40]	; (d6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    d6c4:	9b01      	ldr	r3, [sp, #4]
    d6c6:	9a00      	ldr	r2, [sp, #0]
    d6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    d6cc:	4a06      	ldr	r2, [pc, #24]	; (d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d6ce:	9b01      	ldr	r3, [sp, #4]
    d6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d4:	1c5a      	adds	r2, r3, #1
    d6d6:	4904      	ldr	r1, [pc, #16]	; (d6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d6d8:	9b01      	ldr	r3, [sp, #4]
    d6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6de:	bf00      	nop
    d6e0:	b003      	add	sp, #12
    d6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e6:	bf00      	nop
    d6e8:	1fff8fcc 	.word	0x1fff8fcc
    d6ec:	1fff8fc8 	.word	0x1fff8fc8

0000d6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d6f0:	b500      	push	{lr}
    d6f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6f4:	f7f3 fa42 	bl	b7c <Sys_GetCoreID>
    d6f8:	4603      	mov	r3, r0
    d6fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    d6fc:	4a0d      	ldr	r2, [pc, #52]	; (d734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d6fe:	9b01      	ldr	r3, [sp, #4]
    d700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d704:	1e5a      	subs	r2, r3, #1
    d706:	490b      	ldr	r1, [pc, #44]	; (d734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d708:	9b01      	ldr	r3, [sp, #4]
    d70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    d70e:	4a0a      	ldr	r2, [pc, #40]	; (d738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    d710:	9b01      	ldr	r3, [sp, #4]
    d712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d716:	f003 0301 	and.w	r3, r3, #1
    d71a:	2b00      	cmp	r3, #0
    d71c:	d106      	bne.n	d72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    d71e:	4a05      	ldr	r2, [pc, #20]	; (d734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d720:	9b01      	ldr	r3, [sp, #4]
    d722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d726:	2b00      	cmp	r3, #0
    d728:	d100      	bne.n	d72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d72a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d72c:	bf00      	nop
    d72e:	b003      	add	sp, #12
    d730:	f85d fb04 	ldr.w	pc, [sp], #4
    d734:	1fff8fcc 	.word	0x1fff8fcc
    d738:	1fff8fc8 	.word	0x1fff8fc8

0000d73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d73c:	b500      	push	{lr}
    d73e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d740:	f7f3 fa1c 	bl	b7c <Sys_GetCoreID>
    d744:	4603      	mov	r3, r0
    d746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    d748:	4a10      	ldr	r2, [pc, #64]	; (d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d74a:	9b01      	ldr	r3, [sp, #4]
    d74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d750:	2b00      	cmp	r3, #0
    d752:	d10d      	bne.n	d770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d754:	f7f3 f930 	bl	9b8 <Adc_schm_read_msr>
    d758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d75a:	9b00      	ldr	r3, [sp, #0]
    d75c:	f003 0301 	and.w	r3, r3, #1
    d760:	2b00      	cmp	r3, #0
    d762:	d100      	bne.n	d766 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    d766:	490a      	ldr	r1, [pc, #40]	; (d790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    d768:	9b01      	ldr	r3, [sp, #4]
    d76a:	9a00      	ldr	r2, [sp, #0]
    d76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    d770:	4a06      	ldr	r2, [pc, #24]	; (d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d772:	9b01      	ldr	r3, [sp, #4]
    d774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d778:	1c5a      	adds	r2, r3, #1
    d77a:	4904      	ldr	r1, [pc, #16]	; (d78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d77c:	9b01      	ldr	r3, [sp, #4]
    d77e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d782:	bf00      	nop
    d784:	b003      	add	sp, #12
    d786:	f85d fb04 	ldr.w	pc, [sp], #4
    d78a:	bf00      	nop
    d78c:	1fff8fd4 	.word	0x1fff8fd4
    d790:	1fff8fd0 	.word	0x1fff8fd0

0000d794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d794:	b500      	push	{lr}
    d796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d798:	f7f3 f9f0 	bl	b7c <Sys_GetCoreID>
    d79c:	4603      	mov	r3, r0
    d79e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    d7a0:	4a0d      	ldr	r2, [pc, #52]	; (d7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d7a2:	9b01      	ldr	r3, [sp, #4]
    d7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a8:	1e5a      	subs	r2, r3, #1
    d7aa:	490b      	ldr	r1, [pc, #44]	; (d7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d7ac:	9b01      	ldr	r3, [sp, #4]
    d7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    d7b2:	4a0a      	ldr	r2, [pc, #40]	; (d7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    d7b4:	9b01      	ldr	r3, [sp, #4]
    d7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ba:	f003 0301 	and.w	r3, r3, #1
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d106      	bne.n	d7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    d7c2:	4a05      	ldr	r2, [pc, #20]	; (d7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d7c4:	9b01      	ldr	r3, [sp, #4]
    d7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	d100      	bne.n	d7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7d0:	bf00      	nop
    d7d2:	b003      	add	sp, #12
    d7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    d7d8:	1fff8fd4 	.word	0x1fff8fd4
    d7dc:	1fff8fd0 	.word	0x1fff8fd0

0000d7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d7e0:	b500      	push	{lr}
    d7e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e4:	f7f3 f9ca 	bl	b7c <Sys_GetCoreID>
    d7e8:	4603      	mov	r3, r0
    d7ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    d7ec:	4a10      	ldr	r2, [pc, #64]	; (d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d7ee:	9b01      	ldr	r3, [sp, #4]
    d7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	d10d      	bne.n	d814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7f8:	f7f3 f8de 	bl	9b8 <Adc_schm_read_msr>
    d7fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7fe:	9b00      	ldr	r3, [sp, #0]
    d800:	f003 0301 	and.w	r3, r3, #1
    d804:	2b00      	cmp	r3, #0
    d806:	d100      	bne.n	d80a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    d80a:	490a      	ldr	r1, [pc, #40]	; (d834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    d80c:	9b01      	ldr	r3, [sp, #4]
    d80e:	9a00      	ldr	r2, [sp, #0]
    d810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    d814:	4a06      	ldr	r2, [pc, #24]	; (d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d816:	9b01      	ldr	r3, [sp, #4]
    d818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81c:	1c5a      	adds	r2, r3, #1
    d81e:	4904      	ldr	r1, [pc, #16]	; (d830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d820:	9b01      	ldr	r3, [sp, #4]
    d822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d826:	bf00      	nop
    d828:	b003      	add	sp, #12
    d82a:	f85d fb04 	ldr.w	pc, [sp], #4
    d82e:	bf00      	nop
    d830:	1fff8fdc 	.word	0x1fff8fdc
    d834:	1fff8fd8 	.word	0x1fff8fd8

0000d838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d838:	b500      	push	{lr}
    d83a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d83c:	f7f3 f99e 	bl	b7c <Sys_GetCoreID>
    d840:	4603      	mov	r3, r0
    d842:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    d844:	4a0d      	ldr	r2, [pc, #52]	; (d87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d846:	9b01      	ldr	r3, [sp, #4]
    d848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d84c:	1e5a      	subs	r2, r3, #1
    d84e:	490b      	ldr	r1, [pc, #44]	; (d87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d850:	9b01      	ldr	r3, [sp, #4]
    d852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    d856:	4a0a      	ldr	r2, [pc, #40]	; (d880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    d858:	9b01      	ldr	r3, [sp, #4]
    d85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d85e:	f003 0301 	and.w	r3, r3, #1
    d862:	2b00      	cmp	r3, #0
    d864:	d106      	bne.n	d874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    d866:	4a05      	ldr	r2, [pc, #20]	; (d87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d868:	9b01      	ldr	r3, [sp, #4]
    d86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86e:	2b00      	cmp	r3, #0
    d870:	d100      	bne.n	d874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d874:	bf00      	nop
    d876:	b003      	add	sp, #12
    d878:	f85d fb04 	ldr.w	pc, [sp], #4
    d87c:	1fff8fdc 	.word	0x1fff8fdc
    d880:	1fff8fd8 	.word	0x1fff8fd8

0000d884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d884:	b500      	push	{lr}
    d886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d888:	f7f3 f978 	bl	b7c <Sys_GetCoreID>
    d88c:	4603      	mov	r3, r0
    d88e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    d890:	4a10      	ldr	r2, [pc, #64]	; (d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d892:	9b01      	ldr	r3, [sp, #4]
    d894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d898:	2b00      	cmp	r3, #0
    d89a:	d10d      	bne.n	d8b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d89c:	f7f3 f88c 	bl	9b8 <Adc_schm_read_msr>
    d8a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8a2:	9b00      	ldr	r3, [sp, #0]
    d8a4:	f003 0301 	and.w	r3, r3, #1
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d100      	bne.n	d8ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    d8ae:	490a      	ldr	r1, [pc, #40]	; (d8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    d8b0:	9b01      	ldr	r3, [sp, #4]
    d8b2:	9a00      	ldr	r2, [sp, #0]
    d8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    d8b8:	4a06      	ldr	r2, [pc, #24]	; (d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d8ba:	9b01      	ldr	r3, [sp, #4]
    d8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c0:	1c5a      	adds	r2, r3, #1
    d8c2:	4904      	ldr	r1, [pc, #16]	; (d8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d8c4:	9b01      	ldr	r3, [sp, #4]
    d8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8ca:	bf00      	nop
    d8cc:	b003      	add	sp, #12
    d8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    d8d2:	bf00      	nop
    d8d4:	1fff8fe4 	.word	0x1fff8fe4
    d8d8:	1fff8fe0 	.word	0x1fff8fe0

0000d8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d8dc:	b500      	push	{lr}
    d8de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8e0:	f7f3 f94c 	bl	b7c <Sys_GetCoreID>
    d8e4:	4603      	mov	r3, r0
    d8e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    d8e8:	4a0d      	ldr	r2, [pc, #52]	; (d920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d8ea:	9b01      	ldr	r3, [sp, #4]
    d8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f0:	1e5a      	subs	r2, r3, #1
    d8f2:	490b      	ldr	r1, [pc, #44]	; (d920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d8f4:	9b01      	ldr	r3, [sp, #4]
    d8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    d8fa:	4a0a      	ldr	r2, [pc, #40]	; (d924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    d8fc:	9b01      	ldr	r3, [sp, #4]
    d8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d902:	f003 0301 	and.w	r3, r3, #1
    d906:	2b00      	cmp	r3, #0
    d908:	d106      	bne.n	d918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    d90a:	4a05      	ldr	r2, [pc, #20]	; (d920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d90c:	9b01      	ldr	r3, [sp, #4]
    d90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d912:	2b00      	cmp	r3, #0
    d914:	d100      	bne.n	d918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d918:	bf00      	nop
    d91a:	b003      	add	sp, #12
    d91c:	f85d fb04 	ldr.w	pc, [sp], #4
    d920:	1fff8fe4 	.word	0x1fff8fe4
    d924:	1fff8fe0 	.word	0x1fff8fe0

0000d928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d928:	b500      	push	{lr}
    d92a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d92c:	f7f3 f926 	bl	b7c <Sys_GetCoreID>
    d930:	4603      	mov	r3, r0
    d932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    d934:	4a10      	ldr	r2, [pc, #64]	; (d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d936:	9b01      	ldr	r3, [sp, #4]
    d938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d93c:	2b00      	cmp	r3, #0
    d93e:	d10d      	bne.n	d95c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d940:	f7f3 f83a 	bl	9b8 <Adc_schm_read_msr>
    d944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d946:	9b00      	ldr	r3, [sp, #0]
    d948:	f003 0301 	and.w	r3, r3, #1
    d94c:	2b00      	cmp	r3, #0
    d94e:	d100      	bne.n	d952 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    d952:	490a      	ldr	r1, [pc, #40]	; (d97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    d954:	9b01      	ldr	r3, [sp, #4]
    d956:	9a00      	ldr	r2, [sp, #0]
    d958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    d95c:	4a06      	ldr	r2, [pc, #24]	; (d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d95e:	9b01      	ldr	r3, [sp, #4]
    d960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d964:	1c5a      	adds	r2, r3, #1
    d966:	4904      	ldr	r1, [pc, #16]	; (d978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d968:	9b01      	ldr	r3, [sp, #4]
    d96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d96e:	bf00      	nop
    d970:	b003      	add	sp, #12
    d972:	f85d fb04 	ldr.w	pc, [sp], #4
    d976:	bf00      	nop
    d978:	1fff8fec 	.word	0x1fff8fec
    d97c:	1fff8fe8 	.word	0x1fff8fe8

0000d980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d980:	b500      	push	{lr}
    d982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d984:	f7f3 f8fa 	bl	b7c <Sys_GetCoreID>
    d988:	4603      	mov	r3, r0
    d98a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    d98c:	4a0d      	ldr	r2, [pc, #52]	; (d9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d98e:	9b01      	ldr	r3, [sp, #4]
    d990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d994:	1e5a      	subs	r2, r3, #1
    d996:	490b      	ldr	r1, [pc, #44]	; (d9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d998:	9b01      	ldr	r3, [sp, #4]
    d99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    d99e:	4a0a      	ldr	r2, [pc, #40]	; (d9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    d9a0:	9b01      	ldr	r3, [sp, #4]
    d9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a6:	f003 0301 	and.w	r3, r3, #1
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d106      	bne.n	d9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    d9ae:	4a05      	ldr	r2, [pc, #20]	; (d9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d9b0:	9b01      	ldr	r3, [sp, #4]
    d9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d100      	bne.n	d9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9bc:	bf00      	nop
    d9be:	b003      	add	sp, #12
    d9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c4:	1fff8fec 	.word	0x1fff8fec
    d9c8:	1fff8fe8 	.word	0x1fff8fe8

0000d9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d9cc:	b500      	push	{lr}
    d9ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d0:	f7f3 f8d4 	bl	b7c <Sys_GetCoreID>
    d9d4:	4603      	mov	r3, r0
    d9d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    d9d8:	4a10      	ldr	r2, [pc, #64]	; (da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d9da:	9b01      	ldr	r3, [sp, #4]
    d9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d10d      	bne.n	da00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9e4:	f7f2 ffe8 	bl	9b8 <Adc_schm_read_msr>
    d9e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9ea:	9b00      	ldr	r3, [sp, #0]
    d9ec:	f003 0301 	and.w	r3, r3, #1
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d100      	bne.n	d9f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    d9f6:	490a      	ldr	r1, [pc, #40]	; (da20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    d9f8:	9b01      	ldr	r3, [sp, #4]
    d9fa:	9a00      	ldr	r2, [sp, #0]
    d9fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    da00:	4a06      	ldr	r2, [pc, #24]	; (da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    da02:	9b01      	ldr	r3, [sp, #4]
    da04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da08:	1c5a      	adds	r2, r3, #1
    da0a:	4904      	ldr	r1, [pc, #16]	; (da1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    da0c:	9b01      	ldr	r3, [sp, #4]
    da0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da12:	bf00      	nop
    da14:	b003      	add	sp, #12
    da16:	f85d fb04 	ldr.w	pc, [sp], #4
    da1a:	bf00      	nop
    da1c:	1fff8ff4 	.word	0x1fff8ff4
    da20:	1fff8ff0 	.word	0x1fff8ff0

0000da24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    da24:	b500      	push	{lr}
    da26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da28:	f7f3 f8a8 	bl	b7c <Sys_GetCoreID>
    da2c:	4603      	mov	r3, r0
    da2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    da30:	4a0d      	ldr	r2, [pc, #52]	; (da68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    da32:	9b01      	ldr	r3, [sp, #4]
    da34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da38:	1e5a      	subs	r2, r3, #1
    da3a:	490b      	ldr	r1, [pc, #44]	; (da68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    da3c:	9b01      	ldr	r3, [sp, #4]
    da3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    da42:	4a0a      	ldr	r2, [pc, #40]	; (da6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    da44:	9b01      	ldr	r3, [sp, #4]
    da46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da4a:	f003 0301 	and.w	r3, r3, #1
    da4e:	2b00      	cmp	r3, #0
    da50:	d106      	bne.n	da60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    da52:	4a05      	ldr	r2, [pc, #20]	; (da68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    da54:	9b01      	ldr	r3, [sp, #4]
    da56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da5a:	2b00      	cmp	r3, #0
    da5c:	d100      	bne.n	da60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da60:	bf00      	nop
    da62:	b003      	add	sp, #12
    da64:	f85d fb04 	ldr.w	pc, [sp], #4
    da68:	1fff8ff4 	.word	0x1fff8ff4
    da6c:	1fff8ff0 	.word	0x1fff8ff0

0000da70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    da70:	b500      	push	{lr}
    da72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da74:	f7f3 f882 	bl	b7c <Sys_GetCoreID>
    da78:	4603      	mov	r3, r0
    da7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    da7c:	4a10      	ldr	r2, [pc, #64]	; (dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    da7e:	9b01      	ldr	r3, [sp, #4]
    da80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da84:	2b00      	cmp	r3, #0
    da86:	d10d      	bne.n	daa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da88:	f7f2 ff96 	bl	9b8 <Adc_schm_read_msr>
    da8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da8e:	9b00      	ldr	r3, [sp, #0]
    da90:	f003 0301 	and.w	r3, r3, #1
    da94:	2b00      	cmp	r3, #0
    da96:	d100      	bne.n	da9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    da9a:	490a      	ldr	r1, [pc, #40]	; (dac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    da9c:	9b01      	ldr	r3, [sp, #4]
    da9e:	9a00      	ldr	r2, [sp, #0]
    daa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    daa4:	4a06      	ldr	r2, [pc, #24]	; (dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    daa6:	9b01      	ldr	r3, [sp, #4]
    daa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daac:	1c5a      	adds	r2, r3, #1
    daae:	4904      	ldr	r1, [pc, #16]	; (dac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    dab0:	9b01      	ldr	r3, [sp, #4]
    dab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dab6:	bf00      	nop
    dab8:	b003      	add	sp, #12
    daba:	f85d fb04 	ldr.w	pc, [sp], #4
    dabe:	bf00      	nop
    dac0:	1fff8ffc 	.word	0x1fff8ffc
    dac4:	1fff8ff8 	.word	0x1fff8ff8

0000dac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    dac8:	b500      	push	{lr}
    daca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dacc:	f7f3 f856 	bl	b7c <Sys_GetCoreID>
    dad0:	4603      	mov	r3, r0
    dad2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    dad4:	4a0d      	ldr	r2, [pc, #52]	; (db0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dad6:	9b01      	ldr	r3, [sp, #4]
    dad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dadc:	1e5a      	subs	r2, r3, #1
    dade:	490b      	ldr	r1, [pc, #44]	; (db0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    dae0:	9b01      	ldr	r3, [sp, #4]
    dae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    dae6:	4a0a      	ldr	r2, [pc, #40]	; (db10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    dae8:	9b01      	ldr	r3, [sp, #4]
    daea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daee:	f003 0301 	and.w	r3, r3, #1
    daf2:	2b00      	cmp	r3, #0
    daf4:	d106      	bne.n	db04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    daf6:	4a05      	ldr	r2, [pc, #20]	; (db0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    daf8:	9b01      	ldr	r3, [sp, #4]
    dafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafe:	2b00      	cmp	r3, #0
    db00:	d100      	bne.n	db04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db04:	bf00      	nop
    db06:	b003      	add	sp, #12
    db08:	f85d fb04 	ldr.w	pc, [sp], #4
    db0c:	1fff8ffc 	.word	0x1fff8ffc
    db10:	1fff8ff8 	.word	0x1fff8ff8

0000db14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    db14:	b500      	push	{lr}
    db16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db18:	f7f3 f830 	bl	b7c <Sys_GetCoreID>
    db1c:	4603      	mov	r3, r0
    db1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    db20:	4a10      	ldr	r2, [pc, #64]	; (db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    db22:	9b01      	ldr	r3, [sp, #4]
    db24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db28:	2b00      	cmp	r3, #0
    db2a:	d10d      	bne.n	db48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db2c:	f7f2 ff44 	bl	9b8 <Adc_schm_read_msr>
    db30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db32:	9b00      	ldr	r3, [sp, #0]
    db34:	f003 0301 	and.w	r3, r3, #1
    db38:	2b00      	cmp	r3, #0
    db3a:	d100      	bne.n	db3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    db3e:	490a      	ldr	r1, [pc, #40]	; (db68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    db40:	9b01      	ldr	r3, [sp, #4]
    db42:	9a00      	ldr	r2, [sp, #0]
    db44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    db48:	4a06      	ldr	r2, [pc, #24]	; (db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    db4a:	9b01      	ldr	r3, [sp, #4]
    db4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db50:	1c5a      	adds	r2, r3, #1
    db52:	4904      	ldr	r1, [pc, #16]	; (db64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    db54:	9b01      	ldr	r3, [sp, #4]
    db56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db5a:	bf00      	nop
    db5c:	b003      	add	sp, #12
    db5e:	f85d fb04 	ldr.w	pc, [sp], #4
    db62:	bf00      	nop
    db64:	1fff9004 	.word	0x1fff9004
    db68:	1fff9000 	.word	0x1fff9000

0000db6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    db6c:	b500      	push	{lr}
    db6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db70:	f7f3 f804 	bl	b7c <Sys_GetCoreID>
    db74:	4603      	mov	r3, r0
    db76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    db78:	4a0d      	ldr	r2, [pc, #52]	; (dbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    db7a:	9b01      	ldr	r3, [sp, #4]
    db7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db80:	1e5a      	subs	r2, r3, #1
    db82:	490b      	ldr	r1, [pc, #44]	; (dbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    db84:	9b01      	ldr	r3, [sp, #4]
    db86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    db8a:	4a0a      	ldr	r2, [pc, #40]	; (dbb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    db8c:	9b01      	ldr	r3, [sp, #4]
    db8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db92:	f003 0301 	and.w	r3, r3, #1
    db96:	2b00      	cmp	r3, #0
    db98:	d106      	bne.n	dba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    db9a:	4a05      	ldr	r2, [pc, #20]	; (dbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    db9c:	9b01      	ldr	r3, [sp, #4]
    db9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba2:	2b00      	cmp	r3, #0
    dba4:	d100      	bne.n	dba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dba8:	bf00      	nop
    dbaa:	b003      	add	sp, #12
    dbac:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb0:	1fff9004 	.word	0x1fff9004
    dbb4:	1fff9000 	.word	0x1fff9000

0000dbb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    dbb8:	b500      	push	{lr}
    dbba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbbc:	f7f2 ffde 	bl	b7c <Sys_GetCoreID>
    dbc0:	4603      	mov	r3, r0
    dbc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    dbc4:	4a10      	ldr	r2, [pc, #64]	; (dc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dbc6:	9b01      	ldr	r3, [sp, #4]
    dbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbcc:	2b00      	cmp	r3, #0
    dbce:	d10d      	bne.n	dbec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbd0:	f7f2 fef2 	bl	9b8 <Adc_schm_read_msr>
    dbd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbd6:	9b00      	ldr	r3, [sp, #0]
    dbd8:	f003 0301 	and.w	r3, r3, #1
    dbdc:	2b00      	cmp	r3, #0
    dbde:	d100      	bne.n	dbe2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    dbe2:	490a      	ldr	r1, [pc, #40]	; (dc0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    dbe4:	9b01      	ldr	r3, [sp, #4]
    dbe6:	9a00      	ldr	r2, [sp, #0]
    dbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    dbec:	4a06      	ldr	r2, [pc, #24]	; (dc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dbee:	9b01      	ldr	r3, [sp, #4]
    dbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf4:	1c5a      	adds	r2, r3, #1
    dbf6:	4904      	ldr	r1, [pc, #16]	; (dc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    dbf8:	9b01      	ldr	r3, [sp, #4]
    dbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbfe:	bf00      	nop
    dc00:	b003      	add	sp, #12
    dc02:	f85d fb04 	ldr.w	pc, [sp], #4
    dc06:	bf00      	nop
    dc08:	1fff900c 	.word	0x1fff900c
    dc0c:	1fff9008 	.word	0x1fff9008

0000dc10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    dc10:	b500      	push	{lr}
    dc12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc14:	f7f2 ffb2 	bl	b7c <Sys_GetCoreID>
    dc18:	4603      	mov	r3, r0
    dc1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    dc1c:	4a0d      	ldr	r2, [pc, #52]	; (dc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dc1e:	9b01      	ldr	r3, [sp, #4]
    dc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc24:	1e5a      	subs	r2, r3, #1
    dc26:	490b      	ldr	r1, [pc, #44]	; (dc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dc28:	9b01      	ldr	r3, [sp, #4]
    dc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    dc2e:	4a0a      	ldr	r2, [pc, #40]	; (dc58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    dc30:	9b01      	ldr	r3, [sp, #4]
    dc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc36:	f003 0301 	and.w	r3, r3, #1
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d106      	bne.n	dc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    dc3e:	4a05      	ldr	r2, [pc, #20]	; (dc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dc40:	9b01      	ldr	r3, [sp, #4]
    dc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc46:	2b00      	cmp	r3, #0
    dc48:	d100      	bne.n	dc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc4c:	bf00      	nop
    dc4e:	b003      	add	sp, #12
    dc50:	f85d fb04 	ldr.w	pc, [sp], #4
    dc54:	1fff900c 	.word	0x1fff900c
    dc58:	1fff9008 	.word	0x1fff9008

0000dc5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dc5c:	b500      	push	{lr}
    dc5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc60:	f7f2 ff8c 	bl	b7c <Sys_GetCoreID>
    dc64:	4603      	mov	r3, r0
    dc66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    dc68:	4a10      	ldr	r2, [pc, #64]	; (dcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dc6a:	9b01      	ldr	r3, [sp, #4]
    dc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d10d      	bne.n	dc90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc74:	f7f2 fea0 	bl	9b8 <Adc_schm_read_msr>
    dc78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc7a:	9b00      	ldr	r3, [sp, #0]
    dc7c:	f003 0301 	and.w	r3, r3, #1
    dc80:	2b00      	cmp	r3, #0
    dc82:	d100      	bne.n	dc86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    dc86:	490a      	ldr	r1, [pc, #40]	; (dcb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    dc88:	9b01      	ldr	r3, [sp, #4]
    dc8a:	9a00      	ldr	r2, [sp, #0]
    dc8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    dc90:	4a06      	ldr	r2, [pc, #24]	; (dcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dc92:	9b01      	ldr	r3, [sp, #4]
    dc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc98:	1c5a      	adds	r2, r3, #1
    dc9a:	4904      	ldr	r1, [pc, #16]	; (dcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dc9c:	9b01      	ldr	r3, [sp, #4]
    dc9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dca2:	bf00      	nop
    dca4:	b003      	add	sp, #12
    dca6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcaa:	bf00      	nop
    dcac:	1fff9014 	.word	0x1fff9014
    dcb0:	1fff9010 	.word	0x1fff9010

0000dcb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dcb4:	b500      	push	{lr}
    dcb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb8:	f7f2 ff60 	bl	b7c <Sys_GetCoreID>
    dcbc:	4603      	mov	r3, r0
    dcbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    dcc0:	4a0d      	ldr	r2, [pc, #52]	; (dcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dcc2:	9b01      	ldr	r3, [sp, #4]
    dcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc8:	1e5a      	subs	r2, r3, #1
    dcca:	490b      	ldr	r1, [pc, #44]	; (dcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dccc:	9b01      	ldr	r3, [sp, #4]
    dcce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    dcd2:	4a0a      	ldr	r2, [pc, #40]	; (dcfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    dcd4:	9b01      	ldr	r3, [sp, #4]
    dcd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcda:	f003 0301 	and.w	r3, r3, #1
    dcde:	2b00      	cmp	r3, #0
    dce0:	d106      	bne.n	dcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    dce2:	4a05      	ldr	r2, [pc, #20]	; (dcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dce4:	9b01      	ldr	r3, [sp, #4]
    dce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcea:	2b00      	cmp	r3, #0
    dcec:	d100      	bne.n	dcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcf0:	bf00      	nop
    dcf2:	b003      	add	sp, #12
    dcf4:	f85d fb04 	ldr.w	pc, [sp], #4
    dcf8:	1fff9014 	.word	0x1fff9014
    dcfc:	1fff9010 	.word	0x1fff9010

0000dd00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dd00:	b500      	push	{lr}
    dd02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd04:	f7f2 ff3a 	bl	b7c <Sys_GetCoreID>
    dd08:	4603      	mov	r3, r0
    dd0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    dd0c:	4a10      	ldr	r2, [pc, #64]	; (dd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dd0e:	9b01      	ldr	r3, [sp, #4]
    dd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd14:	2b00      	cmp	r3, #0
    dd16:	d10d      	bne.n	dd34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd18:	f7f2 fe4e 	bl	9b8 <Adc_schm_read_msr>
    dd1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd1e:	9b00      	ldr	r3, [sp, #0]
    dd20:	f003 0301 	and.w	r3, r3, #1
    dd24:	2b00      	cmp	r3, #0
    dd26:	d100      	bne.n	dd2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    dd2a:	490a      	ldr	r1, [pc, #40]	; (dd54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    dd2c:	9b01      	ldr	r3, [sp, #4]
    dd2e:	9a00      	ldr	r2, [sp, #0]
    dd30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    dd34:	4a06      	ldr	r2, [pc, #24]	; (dd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dd36:	9b01      	ldr	r3, [sp, #4]
    dd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3c:	1c5a      	adds	r2, r3, #1
    dd3e:	4904      	ldr	r1, [pc, #16]	; (dd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dd40:	9b01      	ldr	r3, [sp, #4]
    dd42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd46:	bf00      	nop
    dd48:	b003      	add	sp, #12
    dd4a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd4e:	bf00      	nop
    dd50:	1fff901c 	.word	0x1fff901c
    dd54:	1fff9018 	.word	0x1fff9018

0000dd58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dd58:	b500      	push	{lr}
    dd5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd5c:	f7f2 ff0e 	bl	b7c <Sys_GetCoreID>
    dd60:	4603      	mov	r3, r0
    dd62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    dd64:	4a0d      	ldr	r2, [pc, #52]	; (dd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dd66:	9b01      	ldr	r3, [sp, #4]
    dd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd6c:	1e5a      	subs	r2, r3, #1
    dd6e:	490b      	ldr	r1, [pc, #44]	; (dd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dd70:	9b01      	ldr	r3, [sp, #4]
    dd72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    dd76:	4a0a      	ldr	r2, [pc, #40]	; (dda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    dd78:	9b01      	ldr	r3, [sp, #4]
    dd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7e:	f003 0301 	and.w	r3, r3, #1
    dd82:	2b00      	cmp	r3, #0
    dd84:	d106      	bne.n	dd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    dd86:	4a05      	ldr	r2, [pc, #20]	; (dd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dd88:	9b01      	ldr	r3, [sp, #4]
    dd8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d100      	bne.n	dd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd94:	bf00      	nop
    dd96:	b003      	add	sp, #12
    dd98:	f85d fb04 	ldr.w	pc, [sp], #4
    dd9c:	1fff901c 	.word	0x1fff901c
    dda0:	1fff9018 	.word	0x1fff9018

0000dda4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dda4:	b500      	push	{lr}
    dda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dda8:	f7f2 fee8 	bl	b7c <Sys_GetCoreID>
    ddac:	4603      	mov	r3, r0
    ddae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    ddb0:	4a10      	ldr	r2, [pc, #64]	; (ddf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    ddb2:	9b01      	ldr	r3, [sp, #4]
    ddb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d10d      	bne.n	ddd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddbc:	f7f2 fdfc 	bl	9b8 <Adc_schm_read_msr>
    ddc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddc2:	9b00      	ldr	r3, [sp, #0]
    ddc4:	f003 0301 	and.w	r3, r3, #1
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d100      	bne.n	ddce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    ddce:	490a      	ldr	r1, [pc, #40]	; (ddf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    ddd0:	9b01      	ldr	r3, [sp, #4]
    ddd2:	9a00      	ldr	r2, [sp, #0]
    ddd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    ddd8:	4a06      	ldr	r2, [pc, #24]	; (ddf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    ddda:	9b01      	ldr	r3, [sp, #4]
    dddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dde0:	1c5a      	adds	r2, r3, #1
    dde2:	4904      	ldr	r1, [pc, #16]	; (ddf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dde4:	9b01      	ldr	r3, [sp, #4]
    dde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddea:	bf00      	nop
    ddec:	b003      	add	sp, #12
    ddee:	f85d fb04 	ldr.w	pc, [sp], #4
    ddf2:	bf00      	nop
    ddf4:	1fff9024 	.word	0x1fff9024
    ddf8:	1fff9020 	.word	0x1fff9020

0000ddfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    ddfc:	b500      	push	{lr}
    ddfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de00:	f7f2 febc 	bl	b7c <Sys_GetCoreID>
    de04:	4603      	mov	r3, r0
    de06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    de08:	4a0d      	ldr	r2, [pc, #52]	; (de40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    de0a:	9b01      	ldr	r3, [sp, #4]
    de0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de10:	1e5a      	subs	r2, r3, #1
    de12:	490b      	ldr	r1, [pc, #44]	; (de40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    de14:	9b01      	ldr	r3, [sp, #4]
    de16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    de1a:	4a0a      	ldr	r2, [pc, #40]	; (de44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    de1c:	9b01      	ldr	r3, [sp, #4]
    de1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de22:	f003 0301 	and.w	r3, r3, #1
    de26:	2b00      	cmp	r3, #0
    de28:	d106      	bne.n	de38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    de2a:	4a05      	ldr	r2, [pc, #20]	; (de40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    de2c:	9b01      	ldr	r3, [sp, #4]
    de2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de32:	2b00      	cmp	r3, #0
    de34:	d100      	bne.n	de38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de38:	bf00      	nop
    de3a:	b003      	add	sp, #12
    de3c:	f85d fb04 	ldr.w	pc, [sp], #4
    de40:	1fff9024 	.word	0x1fff9024
    de44:	1fff9020 	.word	0x1fff9020

0000de48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    de48:	b500      	push	{lr}
    de4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de4c:	f7f2 fe96 	bl	b7c <Sys_GetCoreID>
    de50:	4603      	mov	r3, r0
    de52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    de54:	4a10      	ldr	r2, [pc, #64]	; (de98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    de56:	9b01      	ldr	r3, [sp, #4]
    de58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de5c:	2b00      	cmp	r3, #0
    de5e:	d10d      	bne.n	de7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de60:	f7f2 fdaa 	bl	9b8 <Adc_schm_read_msr>
    de64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de66:	9b00      	ldr	r3, [sp, #0]
    de68:	f003 0301 	and.w	r3, r3, #1
    de6c:	2b00      	cmp	r3, #0
    de6e:	d100      	bne.n	de72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    de72:	490a      	ldr	r1, [pc, #40]	; (de9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    de74:	9b01      	ldr	r3, [sp, #4]
    de76:	9a00      	ldr	r2, [sp, #0]
    de78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    de7c:	4a06      	ldr	r2, [pc, #24]	; (de98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    de7e:	9b01      	ldr	r3, [sp, #4]
    de80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de84:	1c5a      	adds	r2, r3, #1
    de86:	4904      	ldr	r1, [pc, #16]	; (de98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    de88:	9b01      	ldr	r3, [sp, #4]
    de8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de8e:	bf00      	nop
    de90:	b003      	add	sp, #12
    de92:	f85d fb04 	ldr.w	pc, [sp], #4
    de96:	bf00      	nop
    de98:	1fff902c 	.word	0x1fff902c
    de9c:	1fff9028 	.word	0x1fff9028

0000dea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    dea0:	b500      	push	{lr}
    dea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dea4:	f7f2 fe6a 	bl	b7c <Sys_GetCoreID>
    dea8:	4603      	mov	r3, r0
    deaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    deac:	4a0d      	ldr	r2, [pc, #52]	; (dee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    deae:	9b01      	ldr	r3, [sp, #4]
    deb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deb4:	1e5a      	subs	r2, r3, #1
    deb6:	490b      	ldr	r1, [pc, #44]	; (dee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    deb8:	9b01      	ldr	r3, [sp, #4]
    deba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    debe:	4a0a      	ldr	r2, [pc, #40]	; (dee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    dec0:	9b01      	ldr	r3, [sp, #4]
    dec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec6:	f003 0301 	and.w	r3, r3, #1
    deca:	2b00      	cmp	r3, #0
    decc:	d106      	bne.n	dedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    dece:	4a05      	ldr	r2, [pc, #20]	; (dee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    ded0:	9b01      	ldr	r3, [sp, #4]
    ded2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded6:	2b00      	cmp	r3, #0
    ded8:	d100      	bne.n	dedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    deda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dedc:	bf00      	nop
    dede:	b003      	add	sp, #12
    dee0:	f85d fb04 	ldr.w	pc, [sp], #4
    dee4:	1fff902c 	.word	0x1fff902c
    dee8:	1fff9028 	.word	0x1fff9028

0000deec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    deec:	b500      	push	{lr}
    deee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    def0:	f7f2 fe44 	bl	b7c <Sys_GetCoreID>
    def4:	4603      	mov	r3, r0
    def6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    def8:	4a10      	ldr	r2, [pc, #64]	; (df3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    defa:	9b01      	ldr	r3, [sp, #4]
    defc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df00:	2b00      	cmp	r3, #0
    df02:	d10d      	bne.n	df20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df04:	f7f2 fd58 	bl	9b8 <Adc_schm_read_msr>
    df08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df0a:	9b00      	ldr	r3, [sp, #0]
    df0c:	f003 0301 	and.w	r3, r3, #1
    df10:	2b00      	cmp	r3, #0
    df12:	d100      	bne.n	df16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    df16:	490a      	ldr	r1, [pc, #40]	; (df40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    df18:	9b01      	ldr	r3, [sp, #4]
    df1a:	9a00      	ldr	r2, [sp, #0]
    df1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    df20:	4a06      	ldr	r2, [pc, #24]	; (df3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    df22:	9b01      	ldr	r3, [sp, #4]
    df24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df28:	1c5a      	adds	r2, r3, #1
    df2a:	4904      	ldr	r1, [pc, #16]	; (df3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    df2c:	9b01      	ldr	r3, [sp, #4]
    df2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df32:	bf00      	nop
    df34:	b003      	add	sp, #12
    df36:	f85d fb04 	ldr.w	pc, [sp], #4
    df3a:	bf00      	nop
    df3c:	1fff9034 	.word	0x1fff9034
    df40:	1fff9030 	.word	0x1fff9030

0000df44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    df44:	b500      	push	{lr}
    df46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df48:	f7f2 fe18 	bl	b7c <Sys_GetCoreID>
    df4c:	4603      	mov	r3, r0
    df4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    df50:	4a0d      	ldr	r2, [pc, #52]	; (df88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    df52:	9b01      	ldr	r3, [sp, #4]
    df54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df58:	1e5a      	subs	r2, r3, #1
    df5a:	490b      	ldr	r1, [pc, #44]	; (df88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    df5c:	9b01      	ldr	r3, [sp, #4]
    df5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    df62:	4a0a      	ldr	r2, [pc, #40]	; (df8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    df64:	9b01      	ldr	r3, [sp, #4]
    df66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df6a:	f003 0301 	and.w	r3, r3, #1
    df6e:	2b00      	cmp	r3, #0
    df70:	d106      	bne.n	df80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    df72:	4a05      	ldr	r2, [pc, #20]	; (df88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    df74:	9b01      	ldr	r3, [sp, #4]
    df76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df7a:	2b00      	cmp	r3, #0
    df7c:	d100      	bne.n	df80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df80:	bf00      	nop
    df82:	b003      	add	sp, #12
    df84:	f85d fb04 	ldr.w	pc, [sp], #4
    df88:	1fff9034 	.word	0x1fff9034
    df8c:	1fff9030 	.word	0x1fff9030

0000df90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    df90:	b500      	push	{lr}
    df92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df94:	f7f2 fdf2 	bl	b7c <Sys_GetCoreID>
    df98:	4603      	mov	r3, r0
    df9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    df9c:	4a10      	ldr	r2, [pc, #64]	; (dfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    df9e:	9b01      	ldr	r3, [sp, #4]
    dfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d10d      	bne.n	dfc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfa8:	f7f2 fd06 	bl	9b8 <Adc_schm_read_msr>
    dfac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfae:	9b00      	ldr	r3, [sp, #0]
    dfb0:	f003 0301 	and.w	r3, r3, #1
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d100      	bne.n	dfba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    dfba:	490a      	ldr	r1, [pc, #40]	; (dfe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    dfbc:	9b01      	ldr	r3, [sp, #4]
    dfbe:	9a00      	ldr	r2, [sp, #0]
    dfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    dfc4:	4a06      	ldr	r2, [pc, #24]	; (dfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    dfc6:	9b01      	ldr	r3, [sp, #4]
    dfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfcc:	1c5a      	adds	r2, r3, #1
    dfce:	4904      	ldr	r1, [pc, #16]	; (dfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    dfd0:	9b01      	ldr	r3, [sp, #4]
    dfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfd6:	bf00      	nop
    dfd8:	b003      	add	sp, #12
    dfda:	f85d fb04 	ldr.w	pc, [sp], #4
    dfde:	bf00      	nop
    dfe0:	1fff903c 	.word	0x1fff903c
    dfe4:	1fff9038 	.word	0x1fff9038

0000dfe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    dfe8:	b500      	push	{lr}
    dfea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfec:	f7f2 fdc6 	bl	b7c <Sys_GetCoreID>
    dff0:	4603      	mov	r3, r0
    dff2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    dff4:	4a0d      	ldr	r2, [pc, #52]	; (e02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    dff6:	9b01      	ldr	r3, [sp, #4]
    dff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dffc:	1e5a      	subs	r2, r3, #1
    dffe:	490b      	ldr	r1, [pc, #44]	; (e02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e000:	9b01      	ldr	r3, [sp, #4]
    e002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    e006:	4a0a      	ldr	r2, [pc, #40]	; (e030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    e008:	9b01      	ldr	r3, [sp, #4]
    e00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e00e:	f003 0301 	and.w	r3, r3, #1
    e012:	2b00      	cmp	r3, #0
    e014:	d106      	bne.n	e024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    e016:	4a05      	ldr	r2, [pc, #20]	; (e02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    e018:	9b01      	ldr	r3, [sp, #4]
    e01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01e:	2b00      	cmp	r3, #0
    e020:	d100      	bne.n	e024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e024:	bf00      	nop
    e026:	b003      	add	sp, #12
    e028:	f85d fb04 	ldr.w	pc, [sp], #4
    e02c:	1fff903c 	.word	0x1fff903c
    e030:	1fff9038 	.word	0x1fff9038

0000e034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e034:	b500      	push	{lr}
    e036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e038:	f7f2 fda0 	bl	b7c <Sys_GetCoreID>
    e03c:	4603      	mov	r3, r0
    e03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    e040:	4a10      	ldr	r2, [pc, #64]	; (e084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e042:	9b01      	ldr	r3, [sp, #4]
    e044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e048:	2b00      	cmp	r3, #0
    e04a:	d10d      	bne.n	e068 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e04c:	f7f2 fcb4 	bl	9b8 <Adc_schm_read_msr>
    e050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e052:	9b00      	ldr	r3, [sp, #0]
    e054:	f003 0301 	and.w	r3, r3, #1
    e058:	2b00      	cmp	r3, #0
    e05a:	d100      	bne.n	e05e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    e05e:	490a      	ldr	r1, [pc, #40]	; (e088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    e060:	9b01      	ldr	r3, [sp, #4]
    e062:	9a00      	ldr	r2, [sp, #0]
    e064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    e068:	4a06      	ldr	r2, [pc, #24]	; (e084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e06a:	9b01      	ldr	r3, [sp, #4]
    e06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e070:	1c5a      	adds	r2, r3, #1
    e072:	4904      	ldr	r1, [pc, #16]	; (e084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    e074:	9b01      	ldr	r3, [sp, #4]
    e076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e07a:	bf00      	nop
    e07c:	b003      	add	sp, #12
    e07e:	f85d fb04 	ldr.w	pc, [sp], #4
    e082:	bf00      	nop
    e084:	1fff9044 	.word	0x1fff9044
    e088:	1fff9040 	.word	0x1fff9040

0000e08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    e08c:	b500      	push	{lr}
    e08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e090:	f7f2 fd74 	bl	b7c <Sys_GetCoreID>
    e094:	4603      	mov	r3, r0
    e096:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    e098:	4a0d      	ldr	r2, [pc, #52]	; (e0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e09a:	9b01      	ldr	r3, [sp, #4]
    e09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a0:	1e5a      	subs	r2, r3, #1
    e0a2:	490b      	ldr	r1, [pc, #44]	; (e0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e0a4:	9b01      	ldr	r3, [sp, #4]
    e0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e0aa:	4a0a      	ldr	r2, [pc, #40]	; (e0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e0ac:	9b01      	ldr	r3, [sp, #4]
    e0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b2:	f003 0301 	and.w	r3, r3, #1
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d106      	bne.n	e0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e0ba:	4a05      	ldr	r2, [pc, #20]	; (e0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e0bc:	9b01      	ldr	r3, [sp, #4]
    e0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d100      	bne.n	e0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0c8:	bf00      	nop
    e0ca:	b003      	add	sp, #12
    e0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e0d0:	1fff9044 	.word	0x1fff9044
    e0d4:	1fff9040 	.word	0x1fff9040

0000e0d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e0d8:	b500      	push	{lr}
    e0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0dc:	f7f2 fd4e 	bl	b7c <Sys_GetCoreID>
    e0e0:	4603      	mov	r3, r0
    e0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e0e4:	4a10      	ldr	r2, [pc, #64]	; (e128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e0e6:	9b01      	ldr	r3, [sp, #4]
    e0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d10d      	bne.n	e10c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0f0:	f7f2 fc62 	bl	9b8 <Adc_schm_read_msr>
    e0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0f6:	9b00      	ldr	r3, [sp, #0]
    e0f8:	f003 0301 	and.w	r3, r3, #1
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d100      	bne.n	e102 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e102:	490a      	ldr	r1, [pc, #40]	; (e12c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e104:	9b01      	ldr	r3, [sp, #4]
    e106:	9a00      	ldr	r2, [sp, #0]
    e108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e10c:	4a06      	ldr	r2, [pc, #24]	; (e128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e10e:	9b01      	ldr	r3, [sp, #4]
    e110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e114:	1c5a      	adds	r2, r3, #1
    e116:	4904      	ldr	r1, [pc, #16]	; (e128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e118:	9b01      	ldr	r3, [sp, #4]
    e11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e11e:	bf00      	nop
    e120:	b003      	add	sp, #12
    e122:	f85d fb04 	ldr.w	pc, [sp], #4
    e126:	bf00      	nop
    e128:	1fff904c 	.word	0x1fff904c
    e12c:	1fff9048 	.word	0x1fff9048

0000e130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e130:	b500      	push	{lr}
    e132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e134:	f7f2 fd22 	bl	b7c <Sys_GetCoreID>
    e138:	4603      	mov	r3, r0
    e13a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e13c:	4a0d      	ldr	r2, [pc, #52]	; (e174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e13e:	9b01      	ldr	r3, [sp, #4]
    e140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e144:	1e5a      	subs	r2, r3, #1
    e146:	490b      	ldr	r1, [pc, #44]	; (e174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e148:	9b01      	ldr	r3, [sp, #4]
    e14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e14e:	4a0a      	ldr	r2, [pc, #40]	; (e178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e150:	9b01      	ldr	r3, [sp, #4]
    e152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e156:	f003 0301 	and.w	r3, r3, #1
    e15a:	2b00      	cmp	r3, #0
    e15c:	d106      	bne.n	e16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e15e:	4a05      	ldr	r2, [pc, #20]	; (e174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e160:	9b01      	ldr	r3, [sp, #4]
    e162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e166:	2b00      	cmp	r3, #0
    e168:	d100      	bne.n	e16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e16c:	bf00      	nop
    e16e:	b003      	add	sp, #12
    e170:	f85d fb04 	ldr.w	pc, [sp], #4
    e174:	1fff904c 	.word	0x1fff904c
    e178:	1fff9048 	.word	0x1fff9048

0000e17c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e17c:	b500      	push	{lr}
    e17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e180:	f7f2 fcfc 	bl	b7c <Sys_GetCoreID>
    e184:	4603      	mov	r3, r0
    e186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e188:	4a10      	ldr	r2, [pc, #64]	; (e1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e18a:	9b01      	ldr	r3, [sp, #4]
    e18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e190:	2b00      	cmp	r3, #0
    e192:	d10d      	bne.n	e1b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e194:	f7f2 fc10 	bl	9b8 <Adc_schm_read_msr>
    e198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e19a:	9b00      	ldr	r3, [sp, #0]
    e19c:	f003 0301 	and.w	r3, r3, #1
    e1a0:	2b00      	cmp	r3, #0
    e1a2:	d100      	bne.n	e1a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e1a6:	490a      	ldr	r1, [pc, #40]	; (e1d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e1a8:	9b01      	ldr	r3, [sp, #4]
    e1aa:	9a00      	ldr	r2, [sp, #0]
    e1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e1b0:	4a06      	ldr	r2, [pc, #24]	; (e1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e1b2:	9b01      	ldr	r3, [sp, #4]
    e1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b8:	1c5a      	adds	r2, r3, #1
    e1ba:	4904      	ldr	r1, [pc, #16]	; (e1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e1bc:	9b01      	ldr	r3, [sp, #4]
    e1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1c2:	bf00      	nop
    e1c4:	b003      	add	sp, #12
    e1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e1ca:	bf00      	nop
    e1cc:	1fff9054 	.word	0x1fff9054
    e1d0:	1fff9050 	.word	0x1fff9050

0000e1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e1d4:	b500      	push	{lr}
    e1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d8:	f7f2 fcd0 	bl	b7c <Sys_GetCoreID>
    e1dc:	4603      	mov	r3, r0
    e1de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e1e0:	4a0d      	ldr	r2, [pc, #52]	; (e218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e1e2:	9b01      	ldr	r3, [sp, #4]
    e1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e8:	1e5a      	subs	r2, r3, #1
    e1ea:	490b      	ldr	r1, [pc, #44]	; (e218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e1ec:	9b01      	ldr	r3, [sp, #4]
    e1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e1f2:	4a0a      	ldr	r2, [pc, #40]	; (e21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e1f4:	9b01      	ldr	r3, [sp, #4]
    e1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1fa:	f003 0301 	and.w	r3, r3, #1
    e1fe:	2b00      	cmp	r3, #0
    e200:	d106      	bne.n	e210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e202:	4a05      	ldr	r2, [pc, #20]	; (e218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e204:	9b01      	ldr	r3, [sp, #4]
    e206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e20a:	2b00      	cmp	r3, #0
    e20c:	d100      	bne.n	e210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e210:	bf00      	nop
    e212:	b003      	add	sp, #12
    e214:	f85d fb04 	ldr.w	pc, [sp], #4
    e218:	1fff9054 	.word	0x1fff9054
    e21c:	1fff9050 	.word	0x1fff9050

0000e220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e220:	b500      	push	{lr}
    e222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e224:	f7f2 fcaa 	bl	b7c <Sys_GetCoreID>
    e228:	4603      	mov	r3, r0
    e22a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e22c:	4a10      	ldr	r2, [pc, #64]	; (e270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e22e:	9b01      	ldr	r3, [sp, #4]
    e230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e234:	2b00      	cmp	r3, #0
    e236:	d10d      	bne.n	e254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e238:	f7f2 fbbe 	bl	9b8 <Adc_schm_read_msr>
    e23c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e23e:	9b00      	ldr	r3, [sp, #0]
    e240:	f003 0301 	and.w	r3, r3, #1
    e244:	2b00      	cmp	r3, #0
    e246:	d100      	bne.n	e24a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e24a:	490a      	ldr	r1, [pc, #40]	; (e274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e24c:	9b01      	ldr	r3, [sp, #4]
    e24e:	9a00      	ldr	r2, [sp, #0]
    e250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e254:	4a06      	ldr	r2, [pc, #24]	; (e270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e256:	9b01      	ldr	r3, [sp, #4]
    e258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25c:	1c5a      	adds	r2, r3, #1
    e25e:	4904      	ldr	r1, [pc, #16]	; (e270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e260:	9b01      	ldr	r3, [sp, #4]
    e262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e266:	bf00      	nop
    e268:	b003      	add	sp, #12
    e26a:	f85d fb04 	ldr.w	pc, [sp], #4
    e26e:	bf00      	nop
    e270:	1fff905c 	.word	0x1fff905c
    e274:	1fff9058 	.word	0x1fff9058

0000e278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e278:	b500      	push	{lr}
    e27a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e27c:	f7f2 fc7e 	bl	b7c <Sys_GetCoreID>
    e280:	4603      	mov	r3, r0
    e282:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e284:	4a0d      	ldr	r2, [pc, #52]	; (e2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e286:	9b01      	ldr	r3, [sp, #4]
    e288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e28c:	1e5a      	subs	r2, r3, #1
    e28e:	490b      	ldr	r1, [pc, #44]	; (e2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e290:	9b01      	ldr	r3, [sp, #4]
    e292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e296:	4a0a      	ldr	r2, [pc, #40]	; (e2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e298:	9b01      	ldr	r3, [sp, #4]
    e29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29e:	f003 0301 	and.w	r3, r3, #1
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d106      	bne.n	e2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e2a6:	4a05      	ldr	r2, [pc, #20]	; (e2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e2a8:	9b01      	ldr	r3, [sp, #4]
    e2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d100      	bne.n	e2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2b4:	bf00      	nop
    e2b6:	b003      	add	sp, #12
    e2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    e2bc:	1fff905c 	.word	0x1fff905c
    e2c0:	1fff9058 	.word	0x1fff9058

0000e2c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e2c4:	b500      	push	{lr}
    e2c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2c8:	f7f2 fc58 	bl	b7c <Sys_GetCoreID>
    e2cc:	4603      	mov	r3, r0
    e2ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e2d0:	4a10      	ldr	r2, [pc, #64]	; (e314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e2d2:	9b01      	ldr	r3, [sp, #4]
    e2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d10d      	bne.n	e2f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2dc:	f7f2 fb6c 	bl	9b8 <Adc_schm_read_msr>
    e2e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2e2:	9b00      	ldr	r3, [sp, #0]
    e2e4:	f003 0301 	and.w	r3, r3, #1
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d100      	bne.n	e2ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e2ee:	490a      	ldr	r1, [pc, #40]	; (e318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e2f0:	9b01      	ldr	r3, [sp, #4]
    e2f2:	9a00      	ldr	r2, [sp, #0]
    e2f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e2f8:	4a06      	ldr	r2, [pc, #24]	; (e314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e2fa:	9b01      	ldr	r3, [sp, #4]
    e2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e300:	1c5a      	adds	r2, r3, #1
    e302:	4904      	ldr	r1, [pc, #16]	; (e314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e304:	9b01      	ldr	r3, [sp, #4]
    e306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e30a:	bf00      	nop
    e30c:	b003      	add	sp, #12
    e30e:	f85d fb04 	ldr.w	pc, [sp], #4
    e312:	bf00      	nop
    e314:	1fff9064 	.word	0x1fff9064
    e318:	1fff9060 	.word	0x1fff9060

0000e31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e31c:	b500      	push	{lr}
    e31e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e320:	f7f2 fc2c 	bl	b7c <Sys_GetCoreID>
    e324:	4603      	mov	r3, r0
    e326:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e328:	4a0d      	ldr	r2, [pc, #52]	; (e360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e32a:	9b01      	ldr	r3, [sp, #4]
    e32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e330:	1e5a      	subs	r2, r3, #1
    e332:	490b      	ldr	r1, [pc, #44]	; (e360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e334:	9b01      	ldr	r3, [sp, #4]
    e336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e33a:	4a0a      	ldr	r2, [pc, #40]	; (e364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e33c:	9b01      	ldr	r3, [sp, #4]
    e33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e342:	f003 0301 	and.w	r3, r3, #1
    e346:	2b00      	cmp	r3, #0
    e348:	d106      	bne.n	e358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e34a:	4a05      	ldr	r2, [pc, #20]	; (e360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e34c:	9b01      	ldr	r3, [sp, #4]
    e34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e352:	2b00      	cmp	r3, #0
    e354:	d100      	bne.n	e358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e358:	bf00      	nop
    e35a:	b003      	add	sp, #12
    e35c:	f85d fb04 	ldr.w	pc, [sp], #4
    e360:	1fff9064 	.word	0x1fff9064
    e364:	1fff9060 	.word	0x1fff9060

0000e368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e368:	b500      	push	{lr}
    e36a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e36c:	f7f2 fc06 	bl	b7c <Sys_GetCoreID>
    e370:	4603      	mov	r3, r0
    e372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e374:	4a10      	ldr	r2, [pc, #64]	; (e3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e376:	9b01      	ldr	r3, [sp, #4]
    e378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e37c:	2b00      	cmp	r3, #0
    e37e:	d10d      	bne.n	e39c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e380:	f7f2 fb1a 	bl	9b8 <Adc_schm_read_msr>
    e384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e386:	9b00      	ldr	r3, [sp, #0]
    e388:	f003 0301 	and.w	r3, r3, #1
    e38c:	2b00      	cmp	r3, #0
    e38e:	d100      	bne.n	e392 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e392:	490a      	ldr	r1, [pc, #40]	; (e3bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e394:	9b01      	ldr	r3, [sp, #4]
    e396:	9a00      	ldr	r2, [sp, #0]
    e398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e39c:	4a06      	ldr	r2, [pc, #24]	; (e3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e39e:	9b01      	ldr	r3, [sp, #4]
    e3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a4:	1c5a      	adds	r2, r3, #1
    e3a6:	4904      	ldr	r1, [pc, #16]	; (e3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e3a8:	9b01      	ldr	r3, [sp, #4]
    e3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3ae:	bf00      	nop
    e3b0:	b003      	add	sp, #12
    e3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b6:	bf00      	nop
    e3b8:	1fff906c 	.word	0x1fff906c
    e3bc:	1fff9068 	.word	0x1fff9068

0000e3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e3c0:	b500      	push	{lr}
    e3c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3c4:	f7f2 fbda 	bl	b7c <Sys_GetCoreID>
    e3c8:	4603      	mov	r3, r0
    e3ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e3cc:	4a0d      	ldr	r2, [pc, #52]	; (e404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e3ce:	9b01      	ldr	r3, [sp, #4]
    e3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d4:	1e5a      	subs	r2, r3, #1
    e3d6:	490b      	ldr	r1, [pc, #44]	; (e404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e3d8:	9b01      	ldr	r3, [sp, #4]
    e3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e3de:	4a0a      	ldr	r2, [pc, #40]	; (e408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e3e0:	9b01      	ldr	r3, [sp, #4]
    e3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e6:	f003 0301 	and.w	r3, r3, #1
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d106      	bne.n	e3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e3ee:	4a05      	ldr	r2, [pc, #20]	; (e404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e3f0:	9b01      	ldr	r3, [sp, #4]
    e3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d100      	bne.n	e3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3fc:	bf00      	nop
    e3fe:	b003      	add	sp, #12
    e400:	f85d fb04 	ldr.w	pc, [sp], #4
    e404:	1fff906c 	.word	0x1fff906c
    e408:	1fff9068 	.word	0x1fff9068

0000e40c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e40c:	b500      	push	{lr}
    e40e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e410:	f7f2 fbb4 	bl	b7c <Sys_GetCoreID>
    e414:	4603      	mov	r3, r0
    e416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e418:	4a10      	ldr	r2, [pc, #64]	; (e45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e41a:	9b01      	ldr	r3, [sp, #4]
    e41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e420:	2b00      	cmp	r3, #0
    e422:	d10d      	bne.n	e440 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e424:	f7f2 fac8 	bl	9b8 <Adc_schm_read_msr>
    e428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e42a:	9b00      	ldr	r3, [sp, #0]
    e42c:	f003 0301 	and.w	r3, r3, #1
    e430:	2b00      	cmp	r3, #0
    e432:	d100      	bne.n	e436 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e436:	490a      	ldr	r1, [pc, #40]	; (e460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e438:	9b01      	ldr	r3, [sp, #4]
    e43a:	9a00      	ldr	r2, [sp, #0]
    e43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e440:	4a06      	ldr	r2, [pc, #24]	; (e45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e442:	9b01      	ldr	r3, [sp, #4]
    e444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e448:	1c5a      	adds	r2, r3, #1
    e44a:	4904      	ldr	r1, [pc, #16]	; (e45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e44c:	9b01      	ldr	r3, [sp, #4]
    e44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e452:	bf00      	nop
    e454:	b003      	add	sp, #12
    e456:	f85d fb04 	ldr.w	pc, [sp], #4
    e45a:	bf00      	nop
    e45c:	1fff9074 	.word	0x1fff9074
    e460:	1fff9070 	.word	0x1fff9070

0000e464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e464:	b500      	push	{lr}
    e466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e468:	f7f2 fb88 	bl	b7c <Sys_GetCoreID>
    e46c:	4603      	mov	r3, r0
    e46e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e470:	4a0d      	ldr	r2, [pc, #52]	; (e4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e472:	9b01      	ldr	r3, [sp, #4]
    e474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e478:	1e5a      	subs	r2, r3, #1
    e47a:	490b      	ldr	r1, [pc, #44]	; (e4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e47c:	9b01      	ldr	r3, [sp, #4]
    e47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e482:	4a0a      	ldr	r2, [pc, #40]	; (e4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e484:	9b01      	ldr	r3, [sp, #4]
    e486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48a:	f003 0301 	and.w	r3, r3, #1
    e48e:	2b00      	cmp	r3, #0
    e490:	d106      	bne.n	e4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e492:	4a05      	ldr	r2, [pc, #20]	; (e4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e494:	9b01      	ldr	r3, [sp, #4]
    e496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e49a:	2b00      	cmp	r3, #0
    e49c:	d100      	bne.n	e4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e49e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4a0:	bf00      	nop
    e4a2:	b003      	add	sp, #12
    e4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4a8:	1fff9074 	.word	0x1fff9074
    e4ac:	1fff9070 	.word	0x1fff9070

0000e4b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e4b0:	b500      	push	{lr}
    e4b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b4:	f7f2 fb62 	bl	b7c <Sys_GetCoreID>
    e4b8:	4603      	mov	r3, r0
    e4ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    e4bc:	4a10      	ldr	r2, [pc, #64]	; (e500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e4be:	9b01      	ldr	r3, [sp, #4]
    e4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c4:	2b00      	cmp	r3, #0
    e4c6:	d10d      	bne.n	e4e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4c8:	f7f2 fa76 	bl	9b8 <Adc_schm_read_msr>
    e4cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4ce:	9b00      	ldr	r3, [sp, #0]
    e4d0:	f003 0301 	and.w	r3, r3, #1
    e4d4:	2b00      	cmp	r3, #0
    e4d6:	d100      	bne.n	e4da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    e4da:	490a      	ldr	r1, [pc, #40]	; (e504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    e4dc:	9b01      	ldr	r3, [sp, #4]
    e4de:	9a00      	ldr	r2, [sp, #0]
    e4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    e4e4:	4a06      	ldr	r2, [pc, #24]	; (e500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e4e6:	9b01      	ldr	r3, [sp, #4]
    e4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ec:	1c5a      	adds	r2, r3, #1
    e4ee:	4904      	ldr	r1, [pc, #16]	; (e500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e4f0:	9b01      	ldr	r3, [sp, #4]
    e4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4f6:	bf00      	nop
    e4f8:	b003      	add	sp, #12
    e4fa:	f85d fb04 	ldr.w	pc, [sp], #4
    e4fe:	bf00      	nop
    e500:	1fff907c 	.word	0x1fff907c
    e504:	1fff9078 	.word	0x1fff9078

0000e508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e508:	b500      	push	{lr}
    e50a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e50c:	f7f2 fb36 	bl	b7c <Sys_GetCoreID>
    e510:	4603      	mov	r3, r0
    e512:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    e514:	4a0d      	ldr	r2, [pc, #52]	; (e54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e516:	9b01      	ldr	r3, [sp, #4]
    e518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e51c:	1e5a      	subs	r2, r3, #1
    e51e:	490b      	ldr	r1, [pc, #44]	; (e54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e520:	9b01      	ldr	r3, [sp, #4]
    e522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    e526:	4a0a      	ldr	r2, [pc, #40]	; (e550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    e528:	9b01      	ldr	r3, [sp, #4]
    e52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52e:	f003 0301 	and.w	r3, r3, #1
    e532:	2b00      	cmp	r3, #0
    e534:	d106      	bne.n	e544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    e536:	4a05      	ldr	r2, [pc, #20]	; (e54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e538:	9b01      	ldr	r3, [sp, #4]
    e53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53e:	2b00      	cmp	r3, #0
    e540:	d100      	bne.n	e544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e544:	bf00      	nop
    e546:	b003      	add	sp, #12
    e548:	f85d fb04 	ldr.w	pc, [sp], #4
    e54c:	1fff907c 	.word	0x1fff907c
    e550:	1fff9078 	.word	0x1fff9078

0000e554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e554:	b500      	push	{lr}
    e556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e558:	f7f2 fb10 	bl	b7c <Sys_GetCoreID>
    e55c:	4603      	mov	r3, r0
    e55e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    e560:	4a10      	ldr	r2, [pc, #64]	; (e5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e562:	9b01      	ldr	r3, [sp, #4]
    e564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e568:	2b00      	cmp	r3, #0
    e56a:	d10d      	bne.n	e588 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e56c:	f7f2 fa24 	bl	9b8 <Adc_schm_read_msr>
    e570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e572:	9b00      	ldr	r3, [sp, #0]
    e574:	f003 0301 	and.w	r3, r3, #1
    e578:	2b00      	cmp	r3, #0
    e57a:	d100      	bne.n	e57e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e57c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    e57e:	490a      	ldr	r1, [pc, #40]	; (e5a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    e580:	9b01      	ldr	r3, [sp, #4]
    e582:	9a00      	ldr	r2, [sp, #0]
    e584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    e588:	4a06      	ldr	r2, [pc, #24]	; (e5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e58a:	9b01      	ldr	r3, [sp, #4]
    e58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e590:	1c5a      	adds	r2, r3, #1
    e592:	4904      	ldr	r1, [pc, #16]	; (e5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e594:	9b01      	ldr	r3, [sp, #4]
    e596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e59a:	bf00      	nop
    e59c:	b003      	add	sp, #12
    e59e:	f85d fb04 	ldr.w	pc, [sp], #4
    e5a2:	bf00      	nop
    e5a4:	1fff9084 	.word	0x1fff9084
    e5a8:	1fff9080 	.word	0x1fff9080

0000e5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e5ac:	b500      	push	{lr}
    e5ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5b0:	f7f2 fae4 	bl	b7c <Sys_GetCoreID>
    e5b4:	4603      	mov	r3, r0
    e5b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    e5b8:	4a0d      	ldr	r2, [pc, #52]	; (e5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e5ba:	9b01      	ldr	r3, [sp, #4]
    e5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5c0:	1e5a      	subs	r2, r3, #1
    e5c2:	490b      	ldr	r1, [pc, #44]	; (e5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e5c4:	9b01      	ldr	r3, [sp, #4]
    e5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    e5ca:	4a0a      	ldr	r2, [pc, #40]	; (e5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    e5cc:	9b01      	ldr	r3, [sp, #4]
    e5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5d2:	f003 0301 	and.w	r3, r3, #1
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d106      	bne.n	e5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    e5da:	4a05      	ldr	r2, [pc, #20]	; (e5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e5dc:	9b01      	ldr	r3, [sp, #4]
    e5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5e2:	2b00      	cmp	r3, #0
    e5e4:	d100      	bne.n	e5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5e8:	bf00      	nop
    e5ea:	b003      	add	sp, #12
    e5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f0:	1fff9084 	.word	0x1fff9084
    e5f4:	1fff9080 	.word	0x1fff9080

0000e5f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e5f8:	b500      	push	{lr}
    e5fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5fc:	f7f2 fabe 	bl	b7c <Sys_GetCoreID>
    e600:	4603      	mov	r3, r0
    e602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    e604:	4a10      	ldr	r2, [pc, #64]	; (e648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e606:	9b01      	ldr	r3, [sp, #4]
    e608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e60c:	2b00      	cmp	r3, #0
    e60e:	d10d      	bne.n	e62c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e610:	f7f2 f9d2 	bl	9b8 <Adc_schm_read_msr>
    e614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e616:	9b00      	ldr	r3, [sp, #0]
    e618:	f003 0301 	and.w	r3, r3, #1
    e61c:	2b00      	cmp	r3, #0
    e61e:	d100      	bne.n	e622 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    e622:	490a      	ldr	r1, [pc, #40]	; (e64c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    e624:	9b01      	ldr	r3, [sp, #4]
    e626:	9a00      	ldr	r2, [sp, #0]
    e628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    e62c:	4a06      	ldr	r2, [pc, #24]	; (e648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e62e:	9b01      	ldr	r3, [sp, #4]
    e630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e634:	1c5a      	adds	r2, r3, #1
    e636:	4904      	ldr	r1, [pc, #16]	; (e648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e63e:	bf00      	nop
    e640:	b003      	add	sp, #12
    e642:	f85d fb04 	ldr.w	pc, [sp], #4
    e646:	bf00      	nop
    e648:	1fff908c 	.word	0x1fff908c
    e64c:	1fff9088 	.word	0x1fff9088

0000e650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e650:	b500      	push	{lr}
    e652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e654:	f7f2 fa92 	bl	b7c <Sys_GetCoreID>
    e658:	4603      	mov	r3, r0
    e65a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    e65c:	4a0d      	ldr	r2, [pc, #52]	; (e694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e65e:	9b01      	ldr	r3, [sp, #4]
    e660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e664:	1e5a      	subs	r2, r3, #1
    e666:	490b      	ldr	r1, [pc, #44]	; (e694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e668:	9b01      	ldr	r3, [sp, #4]
    e66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    e66e:	4a0a      	ldr	r2, [pc, #40]	; (e698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    e670:	9b01      	ldr	r3, [sp, #4]
    e672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e676:	f003 0301 	and.w	r3, r3, #1
    e67a:	2b00      	cmp	r3, #0
    e67c:	d106      	bne.n	e68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    e67e:	4a05      	ldr	r2, [pc, #20]	; (e694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e680:	9b01      	ldr	r3, [sp, #4]
    e682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e686:	2b00      	cmp	r3, #0
    e688:	d100      	bne.n	e68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e68a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e68c:	bf00      	nop
    e68e:	b003      	add	sp, #12
    e690:	f85d fb04 	ldr.w	pc, [sp], #4
    e694:	1fff908c 	.word	0x1fff908c
    e698:	1fff9088 	.word	0x1fff9088

0000e69c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e69c:	b500      	push	{lr}
    e69e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6a0:	f7f2 fa6c 	bl	b7c <Sys_GetCoreID>
    e6a4:	4603      	mov	r3, r0
    e6a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    e6a8:	4a10      	ldr	r2, [pc, #64]	; (e6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e6aa:	9b01      	ldr	r3, [sp, #4]
    e6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b0:	2b00      	cmp	r3, #0
    e6b2:	d10d      	bne.n	e6d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6b4:	f7f2 f980 	bl	9b8 <Adc_schm_read_msr>
    e6b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6ba:	9b00      	ldr	r3, [sp, #0]
    e6bc:	f003 0301 	and.w	r3, r3, #1
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d100      	bne.n	e6c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    e6c6:	490a      	ldr	r1, [pc, #40]	; (e6f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	9a00      	ldr	r2, [sp, #0]
    e6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    e6d0:	4a06      	ldr	r2, [pc, #24]	; (e6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e6d2:	9b01      	ldr	r3, [sp, #4]
    e6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d8:	1c5a      	adds	r2, r3, #1
    e6da:	4904      	ldr	r1, [pc, #16]	; (e6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6e2:	bf00      	nop
    e6e4:	b003      	add	sp, #12
    e6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    e6ea:	bf00      	nop
    e6ec:	1fff9094 	.word	0x1fff9094
    e6f0:	1fff9090 	.word	0x1fff9090

0000e6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e6f4:	b500      	push	{lr}
    e6f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f8:	f7f2 fa40 	bl	b7c <Sys_GetCoreID>
    e6fc:	4603      	mov	r3, r0
    e6fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    e700:	4a0d      	ldr	r2, [pc, #52]	; (e738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e702:	9b01      	ldr	r3, [sp, #4]
    e704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e708:	1e5a      	subs	r2, r3, #1
    e70a:	490b      	ldr	r1, [pc, #44]	; (e738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e70c:	9b01      	ldr	r3, [sp, #4]
    e70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    e712:	4a0a      	ldr	r2, [pc, #40]	; (e73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    e714:	9b01      	ldr	r3, [sp, #4]
    e716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e71a:	f003 0301 	and.w	r3, r3, #1
    e71e:	2b00      	cmp	r3, #0
    e720:	d106      	bne.n	e730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    e722:	4a05      	ldr	r2, [pc, #20]	; (e738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e724:	9b01      	ldr	r3, [sp, #4]
    e726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e72a:	2b00      	cmp	r3, #0
    e72c:	d100      	bne.n	e730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e72e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e730:	bf00      	nop
    e732:	b003      	add	sp, #12
    e734:	f85d fb04 	ldr.w	pc, [sp], #4
    e738:	1fff9094 	.word	0x1fff9094
    e73c:	1fff9090 	.word	0x1fff9090

0000e740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e740:	b500      	push	{lr}
    e742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e744:	f7f2 fa1a 	bl	b7c <Sys_GetCoreID>
    e748:	4603      	mov	r3, r0
    e74a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    e74c:	4a10      	ldr	r2, [pc, #64]	; (e790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e74e:	9b01      	ldr	r3, [sp, #4]
    e750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e754:	2b00      	cmp	r3, #0
    e756:	d10d      	bne.n	e774 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e758:	f7f2 f92e 	bl	9b8 <Adc_schm_read_msr>
    e75c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e75e:	9b00      	ldr	r3, [sp, #0]
    e760:	f003 0301 	and.w	r3, r3, #1
    e764:	2b00      	cmp	r3, #0
    e766:	d100      	bne.n	e76a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    e76a:	490a      	ldr	r1, [pc, #40]	; (e794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    e76c:	9b01      	ldr	r3, [sp, #4]
    e76e:	9a00      	ldr	r2, [sp, #0]
    e770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    e774:	4a06      	ldr	r2, [pc, #24]	; (e790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e776:	9b01      	ldr	r3, [sp, #4]
    e778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77c:	1c5a      	adds	r2, r3, #1
    e77e:	4904      	ldr	r1, [pc, #16]	; (e790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e780:	9b01      	ldr	r3, [sp, #4]
    e782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e786:	bf00      	nop
    e788:	b003      	add	sp, #12
    e78a:	f85d fb04 	ldr.w	pc, [sp], #4
    e78e:	bf00      	nop
    e790:	1fff909c 	.word	0x1fff909c
    e794:	1fff9098 	.word	0x1fff9098

0000e798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e798:	b500      	push	{lr}
    e79a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e79c:	f7f2 f9ee 	bl	b7c <Sys_GetCoreID>
    e7a0:	4603      	mov	r3, r0
    e7a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    e7a4:	4a0d      	ldr	r2, [pc, #52]	; (e7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e7a6:	9b01      	ldr	r3, [sp, #4]
    e7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ac:	1e5a      	subs	r2, r3, #1
    e7ae:	490b      	ldr	r1, [pc, #44]	; (e7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e7b0:	9b01      	ldr	r3, [sp, #4]
    e7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    e7b6:	4a0a      	ldr	r2, [pc, #40]	; (e7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    e7b8:	9b01      	ldr	r3, [sp, #4]
    e7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7be:	f003 0301 	and.w	r3, r3, #1
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d106      	bne.n	e7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    e7c6:	4a05      	ldr	r2, [pc, #20]	; (e7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e7c8:	9b01      	ldr	r3, [sp, #4]
    e7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d100      	bne.n	e7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7d4:	bf00      	nop
    e7d6:	b003      	add	sp, #12
    e7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    e7dc:	1fff909c 	.word	0x1fff909c
    e7e0:	1fff9098 	.word	0x1fff9098

0000e7e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e7e4:	b500      	push	{lr}
    e7e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7e8:	f7f2 f9c8 	bl	b7c <Sys_GetCoreID>
    e7ec:	4603      	mov	r3, r0
    e7ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    e7f0:	4a10      	ldr	r2, [pc, #64]	; (e834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e7f2:	9b01      	ldr	r3, [sp, #4]
    e7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d10d      	bne.n	e818 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7fc:	f7f2 f8dc 	bl	9b8 <Adc_schm_read_msr>
    e800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e802:	9b00      	ldr	r3, [sp, #0]
    e804:	f003 0301 	and.w	r3, r3, #1
    e808:	2b00      	cmp	r3, #0
    e80a:	d100      	bne.n	e80e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e80c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    e80e:	490a      	ldr	r1, [pc, #40]	; (e838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    e810:	9b01      	ldr	r3, [sp, #4]
    e812:	9a00      	ldr	r2, [sp, #0]
    e814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    e818:	4a06      	ldr	r2, [pc, #24]	; (e834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e81a:	9b01      	ldr	r3, [sp, #4]
    e81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e820:	1c5a      	adds	r2, r3, #1
    e822:	4904      	ldr	r1, [pc, #16]	; (e834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e824:	9b01      	ldr	r3, [sp, #4]
    e826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e82a:	bf00      	nop
    e82c:	b003      	add	sp, #12
    e82e:	f85d fb04 	ldr.w	pc, [sp], #4
    e832:	bf00      	nop
    e834:	1fff90a4 	.word	0x1fff90a4
    e838:	1fff90a0 	.word	0x1fff90a0

0000e83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e83c:	b500      	push	{lr}
    e83e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e840:	f7f2 f99c 	bl	b7c <Sys_GetCoreID>
    e844:	4603      	mov	r3, r0
    e846:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    e848:	4a0d      	ldr	r2, [pc, #52]	; (e880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e84a:	9b01      	ldr	r3, [sp, #4]
    e84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e850:	1e5a      	subs	r2, r3, #1
    e852:	490b      	ldr	r1, [pc, #44]	; (e880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e854:	9b01      	ldr	r3, [sp, #4]
    e856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    e85a:	4a0a      	ldr	r2, [pc, #40]	; (e884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    e85c:	9b01      	ldr	r3, [sp, #4]
    e85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e862:	f003 0301 	and.w	r3, r3, #1
    e866:	2b00      	cmp	r3, #0
    e868:	d106      	bne.n	e878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    e86a:	4a05      	ldr	r2, [pc, #20]	; (e880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e86c:	9b01      	ldr	r3, [sp, #4]
    e86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e872:	2b00      	cmp	r3, #0
    e874:	d100      	bne.n	e878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e878:	bf00      	nop
    e87a:	b003      	add	sp, #12
    e87c:	f85d fb04 	ldr.w	pc, [sp], #4
    e880:	1fff90a4 	.word	0x1fff90a4
    e884:	1fff90a0 	.word	0x1fff90a0

0000e888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e888:	b500      	push	{lr}
    e88a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e88c:	f7f2 f976 	bl	b7c <Sys_GetCoreID>
    e890:	4603      	mov	r3, r0
    e892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    e894:	4a10      	ldr	r2, [pc, #64]	; (e8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e896:	9b01      	ldr	r3, [sp, #4]
    e898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e89c:	2b00      	cmp	r3, #0
    e89e:	d10d      	bne.n	e8bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8a0:	f7f2 f88a 	bl	9b8 <Adc_schm_read_msr>
    e8a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8a6:	9b00      	ldr	r3, [sp, #0]
    e8a8:	f003 0301 	and.w	r3, r3, #1
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d100      	bne.n	e8b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    e8b2:	490a      	ldr	r1, [pc, #40]	; (e8dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    e8b4:	9b01      	ldr	r3, [sp, #4]
    e8b6:	9a00      	ldr	r2, [sp, #0]
    e8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    e8bc:	4a06      	ldr	r2, [pc, #24]	; (e8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e8be:	9b01      	ldr	r3, [sp, #4]
    e8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c4:	1c5a      	adds	r2, r3, #1
    e8c6:	4904      	ldr	r1, [pc, #16]	; (e8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e8c8:	9b01      	ldr	r3, [sp, #4]
    e8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8ce:	bf00      	nop
    e8d0:	b003      	add	sp, #12
    e8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d6:	bf00      	nop
    e8d8:	1fff90ac 	.word	0x1fff90ac
    e8dc:	1fff90a8 	.word	0x1fff90a8

0000e8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e8e0:	b500      	push	{lr}
    e8e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8e4:	f7f2 f94a 	bl	b7c <Sys_GetCoreID>
    e8e8:	4603      	mov	r3, r0
    e8ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    e8ec:	4a0d      	ldr	r2, [pc, #52]	; (e924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e8ee:	9b01      	ldr	r3, [sp, #4]
    e8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8f4:	1e5a      	subs	r2, r3, #1
    e8f6:	490b      	ldr	r1, [pc, #44]	; (e924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e8f8:	9b01      	ldr	r3, [sp, #4]
    e8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    e8fe:	4a0a      	ldr	r2, [pc, #40]	; (e928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    e900:	9b01      	ldr	r3, [sp, #4]
    e902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e906:	f003 0301 	and.w	r3, r3, #1
    e90a:	2b00      	cmp	r3, #0
    e90c:	d106      	bne.n	e91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    e90e:	4a05      	ldr	r2, [pc, #20]	; (e924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e910:	9b01      	ldr	r3, [sp, #4]
    e912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e916:	2b00      	cmp	r3, #0
    e918:	d100      	bne.n	e91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e91a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e91c:	bf00      	nop
    e91e:	b003      	add	sp, #12
    e920:	f85d fb04 	ldr.w	pc, [sp], #4
    e924:	1fff90ac 	.word	0x1fff90ac
    e928:	1fff90a8 	.word	0x1fff90a8

0000e92c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e92c:	b500      	push	{lr}
    e92e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e930:	f7f2 f924 	bl	b7c <Sys_GetCoreID>
    e934:	4603      	mov	r3, r0
    e936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    e938:	4a10      	ldr	r2, [pc, #64]	; (e97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e93a:	9b01      	ldr	r3, [sp, #4]
    e93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e940:	2b00      	cmp	r3, #0
    e942:	d10d      	bne.n	e960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e944:	f7f2 f838 	bl	9b8 <Adc_schm_read_msr>
    e948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e94a:	9b00      	ldr	r3, [sp, #0]
    e94c:	f003 0301 	and.w	r3, r3, #1
    e950:	2b00      	cmp	r3, #0
    e952:	d100      	bne.n	e956 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    e956:	490a      	ldr	r1, [pc, #40]	; (e980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    e958:	9b01      	ldr	r3, [sp, #4]
    e95a:	9a00      	ldr	r2, [sp, #0]
    e95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    e960:	4a06      	ldr	r2, [pc, #24]	; (e97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e962:	9b01      	ldr	r3, [sp, #4]
    e964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e968:	1c5a      	adds	r2, r3, #1
    e96a:	4904      	ldr	r1, [pc, #16]	; (e97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e96c:	9b01      	ldr	r3, [sp, #4]
    e96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e972:	bf00      	nop
    e974:	b003      	add	sp, #12
    e976:	f85d fb04 	ldr.w	pc, [sp], #4
    e97a:	bf00      	nop
    e97c:	1fff90b4 	.word	0x1fff90b4
    e980:	1fff90b0 	.word	0x1fff90b0

0000e984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e984:	b500      	push	{lr}
    e986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e988:	f7f2 f8f8 	bl	b7c <Sys_GetCoreID>
    e98c:	4603      	mov	r3, r0
    e98e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    e990:	4a0d      	ldr	r2, [pc, #52]	; (e9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e992:	9b01      	ldr	r3, [sp, #4]
    e994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e998:	1e5a      	subs	r2, r3, #1
    e99a:	490b      	ldr	r1, [pc, #44]	; (e9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e99c:	9b01      	ldr	r3, [sp, #4]
    e99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    e9a2:	4a0a      	ldr	r2, [pc, #40]	; (e9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    e9a4:	9b01      	ldr	r3, [sp, #4]
    e9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9aa:	f003 0301 	and.w	r3, r3, #1
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d106      	bne.n	e9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    e9b2:	4a05      	ldr	r2, [pc, #20]	; (e9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e9b4:	9b01      	ldr	r3, [sp, #4]
    e9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ba:	2b00      	cmp	r3, #0
    e9bc:	d100      	bne.n	e9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9c0:	bf00      	nop
    e9c2:	b003      	add	sp, #12
    e9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e9c8:	1fff90b4 	.word	0x1fff90b4
    e9cc:	1fff90b0 	.word	0x1fff90b0

0000e9d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e9d0:	b500      	push	{lr}
    e9d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d4:	f7f2 f8d2 	bl	b7c <Sys_GetCoreID>
    e9d8:	4603      	mov	r3, r0
    e9da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    e9dc:	4a10      	ldr	r2, [pc, #64]	; (ea20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e9de:	9b01      	ldr	r3, [sp, #4]
    e9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	d10d      	bne.n	ea04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9e8:	f7f1 ffe6 	bl	9b8 <Adc_schm_read_msr>
    e9ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ee:	9b00      	ldr	r3, [sp, #0]
    e9f0:	f003 0301 	and.w	r3, r3, #1
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d100      	bne.n	e9fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    e9fa:	490a      	ldr	r1, [pc, #40]	; (ea24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    e9fc:	9b01      	ldr	r3, [sp, #4]
    e9fe:	9a00      	ldr	r2, [sp, #0]
    ea00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    ea04:	4a06      	ldr	r2, [pc, #24]	; (ea20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ea06:	9b01      	ldr	r3, [sp, #4]
    ea08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0c:	1c5a      	adds	r2, r3, #1
    ea0e:	4904      	ldr	r1, [pc, #16]	; (ea20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    ea10:	9b01      	ldr	r3, [sp, #4]
    ea12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea16:	bf00      	nop
    ea18:	b003      	add	sp, #12
    ea1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea1e:	bf00      	nop
    ea20:	1fff90bc 	.word	0x1fff90bc
    ea24:	1fff90b8 	.word	0x1fff90b8

0000ea28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    ea28:	b500      	push	{lr}
    ea2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea2c:	f7f2 f8a6 	bl	b7c <Sys_GetCoreID>
    ea30:	4603      	mov	r3, r0
    ea32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    ea34:	4a0d      	ldr	r2, [pc, #52]	; (ea6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ea36:	9b01      	ldr	r3, [sp, #4]
    ea38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea3c:	1e5a      	subs	r2, r3, #1
    ea3e:	490b      	ldr	r1, [pc, #44]	; (ea6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ea40:	9b01      	ldr	r3, [sp, #4]
    ea42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    ea46:	4a0a      	ldr	r2, [pc, #40]	; (ea70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    ea48:	9b01      	ldr	r3, [sp, #4]
    ea4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea4e:	f003 0301 	and.w	r3, r3, #1
    ea52:	2b00      	cmp	r3, #0
    ea54:	d106      	bne.n	ea64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    ea56:	4a05      	ldr	r2, [pc, #20]	; (ea6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    ea58:	9b01      	ldr	r3, [sp, #4]
    ea5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5e:	2b00      	cmp	r3, #0
    ea60:	d100      	bne.n	ea64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea64:	bf00      	nop
    ea66:	b003      	add	sp, #12
    ea68:	f85d fb04 	ldr.w	pc, [sp], #4
    ea6c:	1fff90bc 	.word	0x1fff90bc
    ea70:	1fff90b8 	.word	0x1fff90b8

0000ea74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    ea74:	b500      	push	{lr}
    ea76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea78:	f7f2 f880 	bl	b7c <Sys_GetCoreID>
    ea7c:	4603      	mov	r3, r0
    ea7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    ea80:	4a10      	ldr	r2, [pc, #64]	; (eac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ea82:	9b01      	ldr	r3, [sp, #4]
    ea84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d10d      	bne.n	eaa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea8c:	f7f1 ff94 	bl	9b8 <Adc_schm_read_msr>
    ea90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea92:	9b00      	ldr	r3, [sp, #0]
    ea94:	f003 0301 	and.w	r3, r3, #1
    ea98:	2b00      	cmp	r3, #0
    ea9a:	d100      	bne.n	ea9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    ea9e:	490a      	ldr	r1, [pc, #40]	; (eac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    eaa0:	9b01      	ldr	r3, [sp, #4]
    eaa2:	9a00      	ldr	r2, [sp, #0]
    eaa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    eaa8:	4a06      	ldr	r2, [pc, #24]	; (eac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    eaaa:	9b01      	ldr	r3, [sp, #4]
    eaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eab0:	1c5a      	adds	r2, r3, #1
    eab2:	4904      	ldr	r1, [pc, #16]	; (eac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    eab4:	9b01      	ldr	r3, [sp, #4]
    eab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eaba:	bf00      	nop
    eabc:	b003      	add	sp, #12
    eabe:	f85d fb04 	ldr.w	pc, [sp], #4
    eac2:	bf00      	nop
    eac4:	1fff90c4 	.word	0x1fff90c4
    eac8:	1fff90c0 	.word	0x1fff90c0

0000eacc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    eacc:	b500      	push	{lr}
    eace:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ead0:	f7f2 f854 	bl	b7c <Sys_GetCoreID>
    ead4:	4603      	mov	r3, r0
    ead6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    ead8:	4a0d      	ldr	r2, [pc, #52]	; (eb10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    eada:	9b01      	ldr	r3, [sp, #4]
    eadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eae0:	1e5a      	subs	r2, r3, #1
    eae2:	490b      	ldr	r1, [pc, #44]	; (eb10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    eae4:	9b01      	ldr	r3, [sp, #4]
    eae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    eaea:	4a0a      	ldr	r2, [pc, #40]	; (eb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    eaec:	9b01      	ldr	r3, [sp, #4]
    eaee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaf2:	f003 0301 	and.w	r3, r3, #1
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d106      	bne.n	eb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    eafa:	4a05      	ldr	r2, [pc, #20]	; (eb10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    eafc:	9b01      	ldr	r3, [sp, #4]
    eafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb02:	2b00      	cmp	r3, #0
    eb04:	d100      	bne.n	eb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb08:	bf00      	nop
    eb0a:	b003      	add	sp, #12
    eb0c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb10:	1fff90c4 	.word	0x1fff90c4
    eb14:	1fff90c0 	.word	0x1fff90c0

0000eb18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    eb18:	b500      	push	{lr}
    eb1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb1c:	f7f2 f82e 	bl	b7c <Sys_GetCoreID>
    eb20:	4603      	mov	r3, r0
    eb22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    eb24:	4a10      	ldr	r2, [pc, #64]	; (eb68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eb26:	9b01      	ldr	r3, [sp, #4]
    eb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb2c:	2b00      	cmp	r3, #0
    eb2e:	d10d      	bne.n	eb4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb30:	f7f1 ff42 	bl	9b8 <Adc_schm_read_msr>
    eb34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb36:	9b00      	ldr	r3, [sp, #0]
    eb38:	f003 0301 	and.w	r3, r3, #1
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d100      	bne.n	eb42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    eb42:	490a      	ldr	r1, [pc, #40]	; (eb6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    eb44:	9b01      	ldr	r3, [sp, #4]
    eb46:	9a00      	ldr	r2, [sp, #0]
    eb48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    eb4c:	4a06      	ldr	r2, [pc, #24]	; (eb68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eb4e:	9b01      	ldr	r3, [sp, #4]
    eb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb54:	1c5a      	adds	r2, r3, #1
    eb56:	4904      	ldr	r1, [pc, #16]	; (eb68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eb58:	9b01      	ldr	r3, [sp, #4]
    eb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb5e:	bf00      	nop
    eb60:	b003      	add	sp, #12
    eb62:	f85d fb04 	ldr.w	pc, [sp], #4
    eb66:	bf00      	nop
    eb68:	1fff90cc 	.word	0x1fff90cc
    eb6c:	1fff90c8 	.word	0x1fff90c8

0000eb70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    eb70:	b500      	push	{lr}
    eb72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb74:	f7f2 f802 	bl	b7c <Sys_GetCoreID>
    eb78:	4603      	mov	r3, r0
    eb7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    eb7c:	4a0d      	ldr	r2, [pc, #52]	; (ebb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eb7e:	9b01      	ldr	r3, [sp, #4]
    eb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb84:	1e5a      	subs	r2, r3, #1
    eb86:	490b      	ldr	r1, [pc, #44]	; (ebb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eb88:	9b01      	ldr	r3, [sp, #4]
    eb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    eb8e:	4a0a      	ldr	r2, [pc, #40]	; (ebb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    eb90:	9b01      	ldr	r3, [sp, #4]
    eb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb96:	f003 0301 	and.w	r3, r3, #1
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	d106      	bne.n	ebac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    eb9e:	4a05      	ldr	r2, [pc, #20]	; (ebb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eba0:	9b01      	ldr	r3, [sp, #4]
    eba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba6:	2b00      	cmp	r3, #0
    eba8:	d100      	bne.n	ebac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ebaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ebac:	bf00      	nop
    ebae:	b003      	add	sp, #12
    ebb0:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb4:	1fff90cc 	.word	0x1fff90cc
    ebb8:	1fff90c8 	.word	0x1fff90c8

0000ebbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    ebbc:	b500      	push	{lr}
    ebbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebc0:	f7f1 ffdc 	bl	b7c <Sys_GetCoreID>
    ebc4:	4603      	mov	r3, r0
    ebc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    ebc8:	4a10      	ldr	r2, [pc, #64]	; (ec0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ebca:	9b01      	ldr	r3, [sp, #4]
    ebcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	d10d      	bne.n	ebf0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebd4:	f7f1 fef9 	bl	9ca <Mcu_schm_read_msr>
    ebd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebda:	9b00      	ldr	r3, [sp, #0]
    ebdc:	f003 0301 	and.w	r3, r3, #1
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d100      	bne.n	ebe6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ebe6:	490a      	ldr	r1, [pc, #40]	; (ec10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    ebe8:	9b01      	ldr	r3, [sp, #4]
    ebea:	9a00      	ldr	r2, [sp, #0]
    ebec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    ebf0:	4a06      	ldr	r2, [pc, #24]	; (ec0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ebf2:	9b01      	ldr	r3, [sp, #4]
    ebf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf8:	1c5a      	adds	r2, r3, #1
    ebfa:	4904      	ldr	r1, [pc, #16]	; (ec0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    ebfc:	9b01      	ldr	r3, [sp, #4]
    ebfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec02:	bf00      	nop
    ec04:	b003      	add	sp, #12
    ec06:	f85d fb04 	ldr.w	pc, [sp], #4
    ec0a:	bf00      	nop
    ec0c:	1fff90d4 	.word	0x1fff90d4
    ec10:	1fff90d0 	.word	0x1fff90d0

0000ec14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    ec14:	b500      	push	{lr}
    ec16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec18:	f7f1 ffb0 	bl	b7c <Sys_GetCoreID>
    ec1c:	4603      	mov	r3, r0
    ec1e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    ec20:	4a0d      	ldr	r2, [pc, #52]	; (ec58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ec22:	9b01      	ldr	r3, [sp, #4]
    ec24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec28:	1e5a      	subs	r2, r3, #1
    ec2a:	490b      	ldr	r1, [pc, #44]	; (ec58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ec2c:	9b01      	ldr	r3, [sp, #4]
    ec2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ec32:	4a0a      	ldr	r2, [pc, #40]	; (ec5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    ec34:	9b01      	ldr	r3, [sp, #4]
    ec36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec3a:	f003 0301 	and.w	r3, r3, #1
    ec3e:	2b00      	cmp	r3, #0
    ec40:	d106      	bne.n	ec50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    ec42:	4a05      	ldr	r2, [pc, #20]	; (ec58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    ec44:	9b01      	ldr	r3, [sp, #4]
    ec46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	d100      	bne.n	ec50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec50:	bf00      	nop
    ec52:	b003      	add	sp, #12
    ec54:	f85d fb04 	ldr.w	pc, [sp], #4
    ec58:	1fff90d4 	.word	0x1fff90d4
    ec5c:	1fff90d0 	.word	0x1fff90d0

0000ec60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ec60:	b500      	push	{lr}
    ec62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec64:	f7f1 ff8a 	bl	b7c <Sys_GetCoreID>
    ec68:	4603      	mov	r3, r0
    ec6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    ec6c:	4a10      	ldr	r2, [pc, #64]	; (ecb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ec6e:	9b01      	ldr	r3, [sp, #4]
    ec70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec74:	2b00      	cmp	r3, #0
    ec76:	d10d      	bne.n	ec94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec78:	f7f1 fea7 	bl	9ca <Mcu_schm_read_msr>
    ec7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec7e:	9b00      	ldr	r3, [sp, #0]
    ec80:	f003 0301 	and.w	r3, r3, #1
    ec84:	2b00      	cmp	r3, #0
    ec86:	d100      	bne.n	ec8a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ec8a:	490a      	ldr	r1, [pc, #40]	; (ecb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    ec8c:	9b01      	ldr	r3, [sp, #4]
    ec8e:	9a00      	ldr	r2, [sp, #0]
    ec90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    ec94:	4a06      	ldr	r2, [pc, #24]	; (ecb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ec96:	9b01      	ldr	r3, [sp, #4]
    ec98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9c:	1c5a      	adds	r2, r3, #1
    ec9e:	4904      	ldr	r1, [pc, #16]	; (ecb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    eca0:	9b01      	ldr	r3, [sp, #4]
    eca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eca6:	bf00      	nop
    eca8:	b003      	add	sp, #12
    ecaa:	f85d fb04 	ldr.w	pc, [sp], #4
    ecae:	bf00      	nop
    ecb0:	1fff90dc 	.word	0x1fff90dc
    ecb4:	1fff90d8 	.word	0x1fff90d8

0000ecb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ecb8:	b500      	push	{lr}
    ecba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecbc:	f7f1 ff5e 	bl	b7c <Sys_GetCoreID>
    ecc0:	4603      	mov	r3, r0
    ecc2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    ecc4:	4a0d      	ldr	r2, [pc, #52]	; (ecfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ecc6:	9b01      	ldr	r3, [sp, #4]
    ecc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eccc:	1e5a      	subs	r2, r3, #1
    ecce:	490b      	ldr	r1, [pc, #44]	; (ecfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ecd0:	9b01      	ldr	r3, [sp, #4]
    ecd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ecd6:	4a0a      	ldr	r2, [pc, #40]	; (ed00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    ecd8:	9b01      	ldr	r3, [sp, #4]
    ecda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecde:	f003 0301 	and.w	r3, r3, #1
    ece2:	2b00      	cmp	r3, #0
    ece4:	d106      	bne.n	ecf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    ece6:	4a05      	ldr	r2, [pc, #20]	; (ecfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ece8:	9b01      	ldr	r3, [sp, #4]
    ecea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecee:	2b00      	cmp	r3, #0
    ecf0:	d100      	bne.n	ecf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecf4:	bf00      	nop
    ecf6:	b003      	add	sp, #12
    ecf8:	f85d fb04 	ldr.w	pc, [sp], #4
    ecfc:	1fff90dc 	.word	0x1fff90dc
    ed00:	1fff90d8 	.word	0x1fff90d8

0000ed04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ed04:	b500      	push	{lr}
    ed06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed08:	f7f1 ff38 	bl	b7c <Sys_GetCoreID>
    ed0c:	4603      	mov	r3, r0
    ed0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    ed10:	4a10      	ldr	r2, [pc, #64]	; (ed54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ed12:	9b01      	ldr	r3, [sp, #4]
    ed14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed18:	2b00      	cmp	r3, #0
    ed1a:	d10d      	bne.n	ed38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed1c:	f7f1 fe55 	bl	9ca <Mcu_schm_read_msr>
    ed20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed22:	9b00      	ldr	r3, [sp, #0]
    ed24:	f003 0301 	and.w	r3, r3, #1
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d100      	bne.n	ed2e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ed2e:	490a      	ldr	r1, [pc, #40]	; (ed58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    ed30:	9b01      	ldr	r3, [sp, #4]
    ed32:	9a00      	ldr	r2, [sp, #0]
    ed34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    ed38:	4a06      	ldr	r2, [pc, #24]	; (ed54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ed3a:	9b01      	ldr	r3, [sp, #4]
    ed3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed40:	1c5a      	adds	r2, r3, #1
    ed42:	4904      	ldr	r1, [pc, #16]	; (ed54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ed44:	9b01      	ldr	r3, [sp, #4]
    ed46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed4a:	bf00      	nop
    ed4c:	b003      	add	sp, #12
    ed4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed52:	bf00      	nop
    ed54:	1fff90e4 	.word	0x1fff90e4
    ed58:	1fff90e0 	.word	0x1fff90e0

0000ed5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ed5c:	b500      	push	{lr}
    ed5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed60:	f7f1 ff0c 	bl	b7c <Sys_GetCoreID>
    ed64:	4603      	mov	r3, r0
    ed66:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    ed68:	4a0d      	ldr	r2, [pc, #52]	; (eda0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ed6a:	9b01      	ldr	r3, [sp, #4]
    ed6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed70:	1e5a      	subs	r2, r3, #1
    ed72:	490b      	ldr	r1, [pc, #44]	; (eda0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ed74:	9b01      	ldr	r3, [sp, #4]
    ed76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ed7a:	4a0a      	ldr	r2, [pc, #40]	; (eda4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    ed7c:	9b01      	ldr	r3, [sp, #4]
    ed7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed82:	f003 0301 	and.w	r3, r3, #1
    ed86:	2b00      	cmp	r3, #0
    ed88:	d106      	bne.n	ed98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    ed8a:	4a05      	ldr	r2, [pc, #20]	; (eda0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ed8c:	9b01      	ldr	r3, [sp, #4]
    ed8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed92:	2b00      	cmp	r3, #0
    ed94:	d100      	bne.n	ed98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed98:	bf00      	nop
    ed9a:	b003      	add	sp, #12
    ed9c:	f85d fb04 	ldr.w	pc, [sp], #4
    eda0:	1fff90e4 	.word	0x1fff90e4
    eda4:	1fff90e0 	.word	0x1fff90e0

0000eda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    eda8:	b500      	push	{lr}
    edaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edac:	f7f1 fee6 	bl	b7c <Sys_GetCoreID>
    edb0:	4603      	mov	r3, r0
    edb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    edb4:	4a10      	ldr	r2, [pc, #64]	; (edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    edb6:	9b01      	ldr	r3, [sp, #4]
    edb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edbc:	2b00      	cmp	r3, #0
    edbe:	d10d      	bne.n	eddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edc0:	f7f1 fe0c 	bl	9dc <Port_schm_read_msr>
    edc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edc6:	9b00      	ldr	r3, [sp, #0]
    edc8:	f003 0301 	and.w	r3, r3, #1
    edcc:	2b00      	cmp	r3, #0
    edce:	d100      	bne.n	edd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    edd2:	490a      	ldr	r1, [pc, #40]	; (edfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    edd4:	9b01      	ldr	r3, [sp, #4]
    edd6:	9a00      	ldr	r2, [sp, #0]
    edd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    eddc:	4a06      	ldr	r2, [pc, #24]	; (edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    edde:	9b01      	ldr	r3, [sp, #4]
    ede0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede4:	1c5a      	adds	r2, r3, #1
    ede6:	4904      	ldr	r1, [pc, #16]	; (edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ede8:	9b01      	ldr	r3, [sp, #4]
    edea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edee:	bf00      	nop
    edf0:	b003      	add	sp, #12
    edf2:	f85d fb04 	ldr.w	pc, [sp], #4
    edf6:	bf00      	nop
    edf8:	1fff90ec 	.word	0x1fff90ec
    edfc:	1fff90e8 	.word	0x1fff90e8

0000ee00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ee00:	b500      	push	{lr}
    ee02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee04:	f7f1 feba 	bl	b7c <Sys_GetCoreID>
    ee08:	4603      	mov	r3, r0
    ee0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    ee0c:	4a0d      	ldr	r2, [pc, #52]	; (ee44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ee0e:	9b01      	ldr	r3, [sp, #4]
    ee10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee14:	1e5a      	subs	r2, r3, #1
    ee16:	490b      	ldr	r1, [pc, #44]	; (ee44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ee18:	9b01      	ldr	r3, [sp, #4]
    ee1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ee1e:	4a0a      	ldr	r2, [pc, #40]	; (ee48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    ee20:	9b01      	ldr	r3, [sp, #4]
    ee22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee26:	f003 0301 	and.w	r3, r3, #1
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d106      	bne.n	ee3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    ee2e:	4a05      	ldr	r2, [pc, #20]	; (ee44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ee30:	9b01      	ldr	r3, [sp, #4]
    ee32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee36:	2b00      	cmp	r3, #0
    ee38:	d100      	bne.n	ee3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee3c:	bf00      	nop
    ee3e:	b003      	add	sp, #12
    ee40:	f85d fb04 	ldr.w	pc, [sp], #4
    ee44:	1fff90ec 	.word	0x1fff90ec
    ee48:	1fff90e8 	.word	0x1fff90e8

0000ee4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ee4c:	b500      	push	{lr}
    ee4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee50:	f7f1 fe94 	bl	b7c <Sys_GetCoreID>
    ee54:	4603      	mov	r3, r0
    ee56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    ee58:	4a10      	ldr	r2, [pc, #64]	; (ee9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ee5a:	9b01      	ldr	r3, [sp, #4]
    ee5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee60:	2b00      	cmp	r3, #0
    ee62:	d10d      	bne.n	ee80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee64:	f7f1 fdba 	bl	9dc <Port_schm_read_msr>
    ee68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee6a:	9b00      	ldr	r3, [sp, #0]
    ee6c:	f003 0301 	and.w	r3, r3, #1
    ee70:	2b00      	cmp	r3, #0
    ee72:	d100      	bne.n	ee76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ee76:	490a      	ldr	r1, [pc, #40]	; (eea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    ee78:	9b01      	ldr	r3, [sp, #4]
    ee7a:	9a00      	ldr	r2, [sp, #0]
    ee7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    ee80:	4a06      	ldr	r2, [pc, #24]	; (ee9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ee82:	9b01      	ldr	r3, [sp, #4]
    ee84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee88:	1c5a      	adds	r2, r3, #1
    ee8a:	4904      	ldr	r1, [pc, #16]	; (ee9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ee8c:	9b01      	ldr	r3, [sp, #4]
    ee8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee92:	bf00      	nop
    ee94:	b003      	add	sp, #12
    ee96:	f85d fb04 	ldr.w	pc, [sp], #4
    ee9a:	bf00      	nop
    ee9c:	1fff90f4 	.word	0x1fff90f4
    eea0:	1fff90f0 	.word	0x1fff90f0

0000eea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    eea4:	b500      	push	{lr}
    eea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eea8:	f7f1 fe68 	bl	b7c <Sys_GetCoreID>
    eeac:	4603      	mov	r3, r0
    eeae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    eeb0:	4a0d      	ldr	r2, [pc, #52]	; (eee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    eeb2:	9b01      	ldr	r3, [sp, #4]
    eeb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb8:	1e5a      	subs	r2, r3, #1
    eeba:	490b      	ldr	r1, [pc, #44]	; (eee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    eebc:	9b01      	ldr	r3, [sp, #4]
    eebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    eec2:	4a0a      	ldr	r2, [pc, #40]	; (eeec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    eec4:	9b01      	ldr	r3, [sp, #4]
    eec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeca:	f003 0301 	and.w	r3, r3, #1
    eece:	2b00      	cmp	r3, #0
    eed0:	d106      	bne.n	eee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    eed2:	4a05      	ldr	r2, [pc, #20]	; (eee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    eed4:	9b01      	ldr	r3, [sp, #4]
    eed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeda:	2b00      	cmp	r3, #0
    eedc:	d100      	bne.n	eee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eee0:	bf00      	nop
    eee2:	b003      	add	sp, #12
    eee4:	f85d fb04 	ldr.w	pc, [sp], #4
    eee8:	1fff90f4 	.word	0x1fff90f4
    eeec:	1fff90f0 	.word	0x1fff90f0

0000eef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    eef0:	b500      	push	{lr}
    eef2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef4:	f7f1 fe42 	bl	b7c <Sys_GetCoreID>
    eef8:	4603      	mov	r3, r0
    eefa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    eefc:	4a10      	ldr	r2, [pc, #64]	; (ef40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    eefe:	9b01      	ldr	r3, [sp, #4]
    ef00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef04:	2b00      	cmp	r3, #0
    ef06:	d10d      	bne.n	ef24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef08:	f7f1 fd68 	bl	9dc <Port_schm_read_msr>
    ef0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef0e:	9b00      	ldr	r3, [sp, #0]
    ef10:	f003 0301 	and.w	r3, r3, #1
    ef14:	2b00      	cmp	r3, #0
    ef16:	d100      	bne.n	ef1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ef1a:	490a      	ldr	r1, [pc, #40]	; (ef44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    ef1c:	9b01      	ldr	r3, [sp, #4]
    ef1e:	9a00      	ldr	r2, [sp, #0]
    ef20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    ef24:	4a06      	ldr	r2, [pc, #24]	; (ef40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ef26:	9b01      	ldr	r3, [sp, #4]
    ef28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2c:	1c5a      	adds	r2, r3, #1
    ef2e:	4904      	ldr	r1, [pc, #16]	; (ef40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ef30:	9b01      	ldr	r3, [sp, #4]
    ef32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef36:	bf00      	nop
    ef38:	b003      	add	sp, #12
    ef3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef3e:	bf00      	nop
    ef40:	1fff90fc 	.word	0x1fff90fc
    ef44:	1fff90f8 	.word	0x1fff90f8

0000ef48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    ef48:	b500      	push	{lr}
    ef4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef4c:	f7f1 fe16 	bl	b7c <Sys_GetCoreID>
    ef50:	4603      	mov	r3, r0
    ef52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    ef54:	4a0d      	ldr	r2, [pc, #52]	; (ef8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ef56:	9b01      	ldr	r3, [sp, #4]
    ef58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef5c:	1e5a      	subs	r2, r3, #1
    ef5e:	490b      	ldr	r1, [pc, #44]	; (ef8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ef60:	9b01      	ldr	r3, [sp, #4]
    ef62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ef66:	4a0a      	ldr	r2, [pc, #40]	; (ef90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    ef68:	9b01      	ldr	r3, [sp, #4]
    ef6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef6e:	f003 0301 	and.w	r3, r3, #1
    ef72:	2b00      	cmp	r3, #0
    ef74:	d106      	bne.n	ef84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    ef76:	4a05      	ldr	r2, [pc, #20]	; (ef8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ef78:	9b01      	ldr	r3, [sp, #4]
    ef7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7e:	2b00      	cmp	r3, #0
    ef80:	d100      	bne.n	ef84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef84:	bf00      	nop
    ef86:	b003      	add	sp, #12
    ef88:	f85d fb04 	ldr.w	pc, [sp], #4
    ef8c:	1fff90fc 	.word	0x1fff90fc
    ef90:	1fff90f8 	.word	0x1fff90f8

0000ef94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    ef94:	b500      	push	{lr}
    ef96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef98:	f7f1 fdf0 	bl	b7c <Sys_GetCoreID>
    ef9c:	4603      	mov	r3, r0
    ef9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    efa0:	4a10      	ldr	r2, [pc, #64]	; (efe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    efa2:	9b01      	ldr	r3, [sp, #4]
    efa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efa8:	2b00      	cmp	r3, #0
    efaa:	d10d      	bne.n	efc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efac:	f7f1 fd16 	bl	9dc <Port_schm_read_msr>
    efb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efb2:	9b00      	ldr	r3, [sp, #0]
    efb4:	f003 0301 	and.w	r3, r3, #1
    efb8:	2b00      	cmp	r3, #0
    efba:	d100      	bne.n	efbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    efbe:	490a      	ldr	r1, [pc, #40]	; (efe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    efc0:	9b01      	ldr	r3, [sp, #4]
    efc2:	9a00      	ldr	r2, [sp, #0]
    efc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    efc8:	4a06      	ldr	r2, [pc, #24]	; (efe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    efca:	9b01      	ldr	r3, [sp, #4]
    efcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efd0:	1c5a      	adds	r2, r3, #1
    efd2:	4904      	ldr	r1, [pc, #16]	; (efe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    efd4:	9b01      	ldr	r3, [sp, #4]
    efd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efda:	bf00      	nop
    efdc:	b003      	add	sp, #12
    efde:	f85d fb04 	ldr.w	pc, [sp], #4
    efe2:	bf00      	nop
    efe4:	1fff9104 	.word	0x1fff9104
    efe8:	1fff9100 	.word	0x1fff9100

0000efec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    efec:	b500      	push	{lr}
    efee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eff0:	f7f1 fdc4 	bl	b7c <Sys_GetCoreID>
    eff4:	4603      	mov	r3, r0
    eff6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    eff8:	4a0d      	ldr	r2, [pc, #52]	; (f030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    effa:	9b01      	ldr	r3, [sp, #4]
    effc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f000:	1e5a      	subs	r2, r3, #1
    f002:	490b      	ldr	r1, [pc, #44]	; (f030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f004:	9b01      	ldr	r3, [sp, #4]
    f006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f00a:	4a0a      	ldr	r2, [pc, #40]	; (f034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    f00c:	9b01      	ldr	r3, [sp, #4]
    f00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f012:	f003 0301 	and.w	r3, r3, #1
    f016:	2b00      	cmp	r3, #0
    f018:	d106      	bne.n	f028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    f01a:	4a05      	ldr	r2, [pc, #20]	; (f030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    f01c:	9b01      	ldr	r3, [sp, #4]
    f01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f022:	2b00      	cmp	r3, #0
    f024:	d100      	bne.n	f028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f026:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f028:	bf00      	nop
    f02a:	b003      	add	sp, #12
    f02c:	f85d fb04 	ldr.w	pc, [sp], #4
    f030:	1fff9104 	.word	0x1fff9104
    f034:	1fff9100 	.word	0x1fff9100

0000f038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f038:	b500      	push	{lr}
    f03a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f03c:	f7f1 fd9e 	bl	b7c <Sys_GetCoreID>
    f040:	4603      	mov	r3, r0
    f042:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    f044:	4a10      	ldr	r2, [pc, #64]	; (f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f046:	9b01      	ldr	r3, [sp, #4]
    f048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f04c:	2b00      	cmp	r3, #0
    f04e:	d10d      	bne.n	f06c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f050:	f7f1 fcc4 	bl	9dc <Port_schm_read_msr>
    f054:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f056:	9b00      	ldr	r3, [sp, #0]
    f058:	f003 0301 	and.w	r3, r3, #1
    f05c:	2b00      	cmp	r3, #0
    f05e:	d100      	bne.n	f062 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f060:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f062:	490a      	ldr	r1, [pc, #40]	; (f08c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    f064:	9b01      	ldr	r3, [sp, #4]
    f066:	9a00      	ldr	r2, [sp, #0]
    f068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    f06c:	4a06      	ldr	r2, [pc, #24]	; (f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f06e:	9b01      	ldr	r3, [sp, #4]
    f070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f074:	1c5a      	adds	r2, r3, #1
    f076:	4904      	ldr	r1, [pc, #16]	; (f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    f078:	9b01      	ldr	r3, [sp, #4]
    f07a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f07e:	bf00      	nop
    f080:	b003      	add	sp, #12
    f082:	f85d fb04 	ldr.w	pc, [sp], #4
    f086:	bf00      	nop
    f088:	1fff910c 	.word	0x1fff910c
    f08c:	1fff9108 	.word	0x1fff9108

0000f090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    f090:	b500      	push	{lr}
    f092:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f094:	f7f1 fd72 	bl	b7c <Sys_GetCoreID>
    f098:	4603      	mov	r3, r0
    f09a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    f09c:	4a0d      	ldr	r2, [pc, #52]	; (f0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f09e:	9b01      	ldr	r3, [sp, #4]
    f0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a4:	1e5a      	subs	r2, r3, #1
    f0a6:	490b      	ldr	r1, [pc, #44]	; (f0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f0a8:	9b01      	ldr	r3, [sp, #4]
    f0aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f0ae:	4a0a      	ldr	r2, [pc, #40]	; (f0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f0b0:	9b01      	ldr	r3, [sp, #4]
    f0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b6:	f003 0301 	and.w	r3, r3, #1
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d106      	bne.n	f0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f0be:	4a05      	ldr	r2, [pc, #20]	; (f0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f0c0:	9b01      	ldr	r3, [sp, #4]
    f0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c6:	2b00      	cmp	r3, #0
    f0c8:	d100      	bne.n	f0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0cc:	bf00      	nop
    f0ce:	b003      	add	sp, #12
    f0d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d4:	1fff910c 	.word	0x1fff910c
    f0d8:	1fff9108 	.word	0x1fff9108

0000f0dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f0dc:	b500      	push	{lr}
    f0de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0e0:	f7f1 fd4c 	bl	b7c <Sys_GetCoreID>
    f0e4:	4603      	mov	r3, r0
    f0e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f0e8:	4a10      	ldr	r2, [pc, #64]	; (f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f0ea:	9b01      	ldr	r3, [sp, #4]
    f0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	d10d      	bne.n	f110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0f4:	f7f1 fc72 	bl	9dc <Port_schm_read_msr>
    f0f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0fa:	9b00      	ldr	r3, [sp, #0]
    f0fc:	f003 0301 	and.w	r3, r3, #1
    f100:	2b00      	cmp	r3, #0
    f102:	d100      	bne.n	f106 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f104:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f106:	490a      	ldr	r1, [pc, #40]	; (f130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f108:	9b01      	ldr	r3, [sp, #4]
    f10a:	9a00      	ldr	r2, [sp, #0]
    f10c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f110:	4a06      	ldr	r2, [pc, #24]	; (f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f112:	9b01      	ldr	r3, [sp, #4]
    f114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f118:	1c5a      	adds	r2, r3, #1
    f11a:	4904      	ldr	r1, [pc, #16]	; (f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f11c:	9b01      	ldr	r3, [sp, #4]
    f11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f122:	bf00      	nop
    f124:	b003      	add	sp, #12
    f126:	f85d fb04 	ldr.w	pc, [sp], #4
    f12a:	bf00      	nop
    f12c:	1fff9114 	.word	0x1fff9114
    f130:	1fff9110 	.word	0x1fff9110

0000f134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f134:	b500      	push	{lr}
    f136:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f138:	f7f1 fd20 	bl	b7c <Sys_GetCoreID>
    f13c:	4603      	mov	r3, r0
    f13e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f140:	4a0d      	ldr	r2, [pc, #52]	; (f178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f142:	9b01      	ldr	r3, [sp, #4]
    f144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f148:	1e5a      	subs	r2, r3, #1
    f14a:	490b      	ldr	r1, [pc, #44]	; (f178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f14c:	9b01      	ldr	r3, [sp, #4]
    f14e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f152:	4a0a      	ldr	r2, [pc, #40]	; (f17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f154:	9b01      	ldr	r3, [sp, #4]
    f156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f15a:	f003 0301 	and.w	r3, r3, #1
    f15e:	2b00      	cmp	r3, #0
    f160:	d106      	bne.n	f170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f162:	4a05      	ldr	r2, [pc, #20]	; (f178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f164:	9b01      	ldr	r3, [sp, #4]
    f166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f16a:	2b00      	cmp	r3, #0
    f16c:	d100      	bne.n	f170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f16e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f170:	bf00      	nop
    f172:	b003      	add	sp, #12
    f174:	f85d fb04 	ldr.w	pc, [sp], #4
    f178:	1fff9114 	.word	0x1fff9114
    f17c:	1fff9110 	.word	0x1fff9110

0000f180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f180:	b500      	push	{lr}
    f182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f184:	f7f1 fcfa 	bl	b7c <Sys_GetCoreID>
    f188:	4603      	mov	r3, r0
    f18a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f18c:	4a10      	ldr	r2, [pc, #64]	; (f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f18e:	9b01      	ldr	r3, [sp, #4]
    f190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f194:	2b00      	cmp	r3, #0
    f196:	d10d      	bne.n	f1b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f198:	f7f1 fc20 	bl	9dc <Port_schm_read_msr>
    f19c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f19e:	9b00      	ldr	r3, [sp, #0]
    f1a0:	f003 0301 	and.w	r3, r3, #1
    f1a4:	2b00      	cmp	r3, #0
    f1a6:	d100      	bne.n	f1aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f1aa:	490a      	ldr	r1, [pc, #40]	; (f1d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f1ac:	9b01      	ldr	r3, [sp, #4]
    f1ae:	9a00      	ldr	r2, [sp, #0]
    f1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f1b4:	4a06      	ldr	r2, [pc, #24]	; (f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f1b6:	9b01      	ldr	r3, [sp, #4]
    f1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1bc:	1c5a      	adds	r2, r3, #1
    f1be:	4904      	ldr	r1, [pc, #16]	; (f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f1c0:	9b01      	ldr	r3, [sp, #4]
    f1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1c6:	bf00      	nop
    f1c8:	b003      	add	sp, #12
    f1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ce:	bf00      	nop
    f1d0:	1fff911c 	.word	0x1fff911c
    f1d4:	1fff9118 	.word	0x1fff9118

0000f1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f1d8:	b500      	push	{lr}
    f1da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1dc:	f7f1 fcce 	bl	b7c <Sys_GetCoreID>
    f1e0:	4603      	mov	r3, r0
    f1e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f1e4:	4a0d      	ldr	r2, [pc, #52]	; (f21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f1e6:	9b01      	ldr	r3, [sp, #4]
    f1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ec:	1e5a      	subs	r2, r3, #1
    f1ee:	490b      	ldr	r1, [pc, #44]	; (f21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f1f0:	9b01      	ldr	r3, [sp, #4]
    f1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f1f6:	4a0a      	ldr	r2, [pc, #40]	; (f220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f1f8:	9b01      	ldr	r3, [sp, #4]
    f1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1fe:	f003 0301 	and.w	r3, r3, #1
    f202:	2b00      	cmp	r3, #0
    f204:	d106      	bne.n	f214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f206:	4a05      	ldr	r2, [pc, #20]	; (f21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f208:	9b01      	ldr	r3, [sp, #4]
    f20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20e:	2b00      	cmp	r3, #0
    f210:	d100      	bne.n	f214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f214:	bf00      	nop
    f216:	b003      	add	sp, #12
    f218:	f85d fb04 	ldr.w	pc, [sp], #4
    f21c:	1fff911c 	.word	0x1fff911c
    f220:	1fff9118 	.word	0x1fff9118

0000f224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f224:	b500      	push	{lr}
    f226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f228:	f7f1 fca8 	bl	b7c <Sys_GetCoreID>
    f22c:	4603      	mov	r3, r0
    f22e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f230:	4a10      	ldr	r2, [pc, #64]	; (f274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f232:	9b01      	ldr	r3, [sp, #4]
    f234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f238:	2b00      	cmp	r3, #0
    f23a:	d10d      	bne.n	f258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f23c:	f7f1 fbce 	bl	9dc <Port_schm_read_msr>
    f240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f242:	9b00      	ldr	r3, [sp, #0]
    f244:	f003 0301 	and.w	r3, r3, #1
    f248:	2b00      	cmp	r3, #0
    f24a:	d100      	bne.n	f24e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f24c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f24e:	490a      	ldr	r1, [pc, #40]	; (f278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f250:	9b01      	ldr	r3, [sp, #4]
    f252:	9a00      	ldr	r2, [sp, #0]
    f254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f258:	4a06      	ldr	r2, [pc, #24]	; (f274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f25a:	9b01      	ldr	r3, [sp, #4]
    f25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f260:	1c5a      	adds	r2, r3, #1
    f262:	4904      	ldr	r1, [pc, #16]	; (f274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f264:	9b01      	ldr	r3, [sp, #4]
    f266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f26a:	bf00      	nop
    f26c:	b003      	add	sp, #12
    f26e:	f85d fb04 	ldr.w	pc, [sp], #4
    f272:	bf00      	nop
    f274:	1fff9124 	.word	0x1fff9124
    f278:	1fff9120 	.word	0x1fff9120

0000f27c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f27c:	b500      	push	{lr}
    f27e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f280:	f7f1 fc7c 	bl	b7c <Sys_GetCoreID>
    f284:	4603      	mov	r3, r0
    f286:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f288:	4a0d      	ldr	r2, [pc, #52]	; (f2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f28a:	9b01      	ldr	r3, [sp, #4]
    f28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f290:	1e5a      	subs	r2, r3, #1
    f292:	490b      	ldr	r1, [pc, #44]	; (f2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f294:	9b01      	ldr	r3, [sp, #4]
    f296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f29a:	4a0a      	ldr	r2, [pc, #40]	; (f2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f29c:	9b01      	ldr	r3, [sp, #4]
    f29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2a2:	f003 0301 	and.w	r3, r3, #1
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d106      	bne.n	f2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f2aa:	4a05      	ldr	r2, [pc, #20]	; (f2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f2ac:	9b01      	ldr	r3, [sp, #4]
    f2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2b2:	2b00      	cmp	r3, #0
    f2b4:	d100      	bne.n	f2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2b8:	bf00      	nop
    f2ba:	b003      	add	sp, #12
    f2bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c0:	1fff9124 	.word	0x1fff9124
    f2c4:	1fff9120 	.word	0x1fff9120

0000f2c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f2c8:	b500      	push	{lr}
    f2ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2cc:	f7f1 fc56 	bl	b7c <Sys_GetCoreID>
    f2d0:	4603      	mov	r3, r0
    f2d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f2d4:	4a10      	ldr	r2, [pc, #64]	; (f318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f2d6:	9b01      	ldr	r3, [sp, #4]
    f2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2dc:	2b00      	cmp	r3, #0
    f2de:	d10d      	bne.n	f2fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2e0:	f7f1 fb7c 	bl	9dc <Port_schm_read_msr>
    f2e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2e6:	9b00      	ldr	r3, [sp, #0]
    f2e8:	f003 0301 	and.w	r3, r3, #1
    f2ec:	2b00      	cmp	r3, #0
    f2ee:	d100      	bne.n	f2f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f2f2:	490a      	ldr	r1, [pc, #40]	; (f31c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f2f4:	9b01      	ldr	r3, [sp, #4]
    f2f6:	9a00      	ldr	r2, [sp, #0]
    f2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f2fc:	4a06      	ldr	r2, [pc, #24]	; (f318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f2fe:	9b01      	ldr	r3, [sp, #4]
    f300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f304:	1c5a      	adds	r2, r3, #1
    f306:	4904      	ldr	r1, [pc, #16]	; (f318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f308:	9b01      	ldr	r3, [sp, #4]
    f30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f30e:	bf00      	nop
    f310:	b003      	add	sp, #12
    f312:	f85d fb04 	ldr.w	pc, [sp], #4
    f316:	bf00      	nop
    f318:	1fff912c 	.word	0x1fff912c
    f31c:	1fff9128 	.word	0x1fff9128

0000f320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f320:	b500      	push	{lr}
    f322:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f324:	f7f1 fc2a 	bl	b7c <Sys_GetCoreID>
    f328:	4603      	mov	r3, r0
    f32a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f32c:	4a0d      	ldr	r2, [pc, #52]	; (f364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f32e:	9b01      	ldr	r3, [sp, #4]
    f330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f334:	1e5a      	subs	r2, r3, #1
    f336:	490b      	ldr	r1, [pc, #44]	; (f364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f338:	9b01      	ldr	r3, [sp, #4]
    f33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f33e:	4a0a      	ldr	r2, [pc, #40]	; (f368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f340:	9b01      	ldr	r3, [sp, #4]
    f342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f346:	f003 0301 	and.w	r3, r3, #1
    f34a:	2b00      	cmp	r3, #0
    f34c:	d106      	bne.n	f35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f34e:	4a05      	ldr	r2, [pc, #20]	; (f364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f350:	9b01      	ldr	r3, [sp, #4]
    f352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f356:	2b00      	cmp	r3, #0
    f358:	d100      	bne.n	f35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f35a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f35c:	bf00      	nop
    f35e:	b003      	add	sp, #12
    f360:	f85d fb04 	ldr.w	pc, [sp], #4
    f364:	1fff912c 	.word	0x1fff912c
    f368:	1fff9128 	.word	0x1fff9128

0000f36c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f36c:	b500      	push	{lr}
    f36e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f370:	f7f1 fc04 	bl	b7c <Sys_GetCoreID>
    f374:	4603      	mov	r3, r0
    f376:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f378:	4a10      	ldr	r2, [pc, #64]	; (f3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f37a:	9b01      	ldr	r3, [sp, #4]
    f37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f380:	2b00      	cmp	r3, #0
    f382:	d10d      	bne.n	f3a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f384:	f7f1 fb2a 	bl	9dc <Port_schm_read_msr>
    f388:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f38a:	9b00      	ldr	r3, [sp, #0]
    f38c:	f003 0301 	and.w	r3, r3, #1
    f390:	2b00      	cmp	r3, #0
    f392:	d100      	bne.n	f396 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f394:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f396:	490a      	ldr	r1, [pc, #40]	; (f3c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f398:	9b01      	ldr	r3, [sp, #4]
    f39a:	9a00      	ldr	r2, [sp, #0]
    f39c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f3a0:	4a06      	ldr	r2, [pc, #24]	; (f3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f3a2:	9b01      	ldr	r3, [sp, #4]
    f3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a8:	1c5a      	adds	r2, r3, #1
    f3aa:	4904      	ldr	r1, [pc, #16]	; (f3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f3ac:	9b01      	ldr	r3, [sp, #4]
    f3ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3b2:	bf00      	nop
    f3b4:	b003      	add	sp, #12
    f3b6:	f85d fb04 	ldr.w	pc, [sp], #4
    f3ba:	bf00      	nop
    f3bc:	1fff9134 	.word	0x1fff9134
    f3c0:	1fff9130 	.word	0x1fff9130

0000f3c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f3c4:	b500      	push	{lr}
    f3c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3c8:	f7f1 fbd8 	bl	b7c <Sys_GetCoreID>
    f3cc:	4603      	mov	r3, r0
    f3ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f3d0:	4a0d      	ldr	r2, [pc, #52]	; (f408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f3d2:	9b01      	ldr	r3, [sp, #4]
    f3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3d8:	1e5a      	subs	r2, r3, #1
    f3da:	490b      	ldr	r1, [pc, #44]	; (f408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f3dc:	9b01      	ldr	r3, [sp, #4]
    f3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f3e2:	4a0a      	ldr	r2, [pc, #40]	; (f40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f3e4:	9b01      	ldr	r3, [sp, #4]
    f3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ea:	f003 0301 	and.w	r3, r3, #1
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d106      	bne.n	f400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f3f2:	4a05      	ldr	r2, [pc, #20]	; (f408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f3f4:	9b01      	ldr	r3, [sp, #4]
    f3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3fa:	2b00      	cmp	r3, #0
    f3fc:	d100      	bne.n	f400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f400:	bf00      	nop
    f402:	b003      	add	sp, #12
    f404:	f85d fb04 	ldr.w	pc, [sp], #4
    f408:	1fff9134 	.word	0x1fff9134
    f40c:	1fff9130 	.word	0x1fff9130

0000f410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f410:	b500      	push	{lr}
    f412:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f414:	f7f1 fbb2 	bl	b7c <Sys_GetCoreID>
    f418:	4603      	mov	r3, r0
    f41a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f41c:	4a10      	ldr	r2, [pc, #64]	; (f460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f41e:	9b01      	ldr	r3, [sp, #4]
    f420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f424:	2b00      	cmp	r3, #0
    f426:	d10d      	bne.n	f444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f428:	f7f1 fad8 	bl	9dc <Port_schm_read_msr>
    f42c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f42e:	9b00      	ldr	r3, [sp, #0]
    f430:	f003 0301 	and.w	r3, r3, #1
    f434:	2b00      	cmp	r3, #0
    f436:	d100      	bne.n	f43a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f438:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f43a:	490a      	ldr	r1, [pc, #40]	; (f464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f43c:	9b01      	ldr	r3, [sp, #4]
    f43e:	9a00      	ldr	r2, [sp, #0]
    f440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f444:	4a06      	ldr	r2, [pc, #24]	; (f460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f446:	9b01      	ldr	r3, [sp, #4]
    f448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44c:	1c5a      	adds	r2, r3, #1
    f44e:	4904      	ldr	r1, [pc, #16]	; (f460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f450:	9b01      	ldr	r3, [sp, #4]
    f452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f456:	bf00      	nop
    f458:	b003      	add	sp, #12
    f45a:	f85d fb04 	ldr.w	pc, [sp], #4
    f45e:	bf00      	nop
    f460:	1fff913c 	.word	0x1fff913c
    f464:	1fff9138 	.word	0x1fff9138

0000f468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f468:	b500      	push	{lr}
    f46a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f46c:	f7f1 fb86 	bl	b7c <Sys_GetCoreID>
    f470:	4603      	mov	r3, r0
    f472:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    f474:	4a0d      	ldr	r2, [pc, #52]	; (f4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f476:	9b01      	ldr	r3, [sp, #4]
    f478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f47c:	1e5a      	subs	r2, r3, #1
    f47e:	490b      	ldr	r1, [pc, #44]	; (f4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f480:	9b01      	ldr	r3, [sp, #4]
    f482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f486:	4a0a      	ldr	r2, [pc, #40]	; (f4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    f488:	9b01      	ldr	r3, [sp, #4]
    f48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f48e:	f003 0301 	and.w	r3, r3, #1
    f492:	2b00      	cmp	r3, #0
    f494:	d106      	bne.n	f4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    f496:	4a05      	ldr	r2, [pc, #20]	; (f4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f498:	9b01      	ldr	r3, [sp, #4]
    f49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f49e:	2b00      	cmp	r3, #0
    f4a0:	d100      	bne.n	f4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4a4:	bf00      	nop
    f4a6:	b003      	add	sp, #12
    f4a8:	f85d fb04 	ldr.w	pc, [sp], #4
    f4ac:	1fff913c 	.word	0x1fff913c
    f4b0:	1fff9138 	.word	0x1fff9138

0000f4b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f4b4:	b500      	push	{lr}
    f4b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4b8:	f7f1 fb60 	bl	b7c <Sys_GetCoreID>
    f4bc:	4603      	mov	r3, r0
    f4be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    f4c0:	4a10      	ldr	r2, [pc, #64]	; (f504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f4c2:	9b01      	ldr	r3, [sp, #4]
    f4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c8:	2b00      	cmp	r3, #0
    f4ca:	d10d      	bne.n	f4e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4cc:	f7f1 fa86 	bl	9dc <Port_schm_read_msr>
    f4d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4d2:	9b00      	ldr	r3, [sp, #0]
    f4d4:	f003 0301 	and.w	r3, r3, #1
    f4d8:	2b00      	cmp	r3, #0
    f4da:	d100      	bne.n	f4de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f4de:	490a      	ldr	r1, [pc, #40]	; (f508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    f4e0:	9b01      	ldr	r3, [sp, #4]
    f4e2:	9a00      	ldr	r2, [sp, #0]
    f4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    f4e8:	4a06      	ldr	r2, [pc, #24]	; (f504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f4ea:	9b01      	ldr	r3, [sp, #4]
    f4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f0:	1c5a      	adds	r2, r3, #1
    f4f2:	4904      	ldr	r1, [pc, #16]	; (f504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f4f4:	9b01      	ldr	r3, [sp, #4]
    f4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4fa:	bf00      	nop
    f4fc:	b003      	add	sp, #12
    f4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    f502:	bf00      	nop
    f504:	1fff9144 	.word	0x1fff9144
    f508:	1fff9140 	.word	0x1fff9140

0000f50c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f50c:	b500      	push	{lr}
    f50e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f510:	f7f1 fb34 	bl	b7c <Sys_GetCoreID>
    f514:	4603      	mov	r3, r0
    f516:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    f518:	4a0d      	ldr	r2, [pc, #52]	; (f550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f51a:	9b01      	ldr	r3, [sp, #4]
    f51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f520:	1e5a      	subs	r2, r3, #1
    f522:	490b      	ldr	r1, [pc, #44]	; (f550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f524:	9b01      	ldr	r3, [sp, #4]
    f526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f52a:	4a0a      	ldr	r2, [pc, #40]	; (f554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    f52c:	9b01      	ldr	r3, [sp, #4]
    f52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f532:	f003 0301 	and.w	r3, r3, #1
    f536:	2b00      	cmp	r3, #0
    f538:	d106      	bne.n	f548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    f53a:	4a05      	ldr	r2, [pc, #20]	; (f550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f53c:	9b01      	ldr	r3, [sp, #4]
    f53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f542:	2b00      	cmp	r3, #0
    f544:	d100      	bne.n	f548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f546:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f548:	bf00      	nop
    f54a:	b003      	add	sp, #12
    f54c:	f85d fb04 	ldr.w	pc, [sp], #4
    f550:	1fff9144 	.word	0x1fff9144
    f554:	1fff9140 	.word	0x1fff9140

0000f558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f558:	b500      	push	{lr}
    f55a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f55c:	f7f1 fb0e 	bl	b7c <Sys_GetCoreID>
    f560:	4603      	mov	r3, r0
    f562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    f564:	4a10      	ldr	r2, [pc, #64]	; (f5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f566:	9b01      	ldr	r3, [sp, #4]
    f568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f56c:	2b00      	cmp	r3, #0
    f56e:	d10d      	bne.n	f58c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f570:	f7f1 fa34 	bl	9dc <Port_schm_read_msr>
    f574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f576:	9b00      	ldr	r3, [sp, #0]
    f578:	f003 0301 	and.w	r3, r3, #1
    f57c:	2b00      	cmp	r3, #0
    f57e:	d100      	bne.n	f582 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f582:	490a      	ldr	r1, [pc, #40]	; (f5ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    f584:	9b01      	ldr	r3, [sp, #4]
    f586:	9a00      	ldr	r2, [sp, #0]
    f588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    f58c:	4a06      	ldr	r2, [pc, #24]	; (f5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f58e:	9b01      	ldr	r3, [sp, #4]
    f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f594:	1c5a      	adds	r2, r3, #1
    f596:	4904      	ldr	r1, [pc, #16]	; (f5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f598:	9b01      	ldr	r3, [sp, #4]
    f59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f59e:	bf00      	nop
    f5a0:	b003      	add	sp, #12
    f5a2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5a6:	bf00      	nop
    f5a8:	1fff914c 	.word	0x1fff914c
    f5ac:	1fff9148 	.word	0x1fff9148

0000f5b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f5b0:	b500      	push	{lr}
    f5b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5b4:	f7f1 fae2 	bl	b7c <Sys_GetCoreID>
    f5b8:	4603      	mov	r3, r0
    f5ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    f5bc:	4a0d      	ldr	r2, [pc, #52]	; (f5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f5be:	9b01      	ldr	r3, [sp, #4]
    f5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5c4:	1e5a      	subs	r2, r3, #1
    f5c6:	490b      	ldr	r1, [pc, #44]	; (f5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f5c8:	9b01      	ldr	r3, [sp, #4]
    f5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f5ce:	4a0a      	ldr	r2, [pc, #40]	; (f5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    f5d0:	9b01      	ldr	r3, [sp, #4]
    f5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d6:	f003 0301 	and.w	r3, r3, #1
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d106      	bne.n	f5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    f5de:	4a05      	ldr	r2, [pc, #20]	; (f5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f5e0:	9b01      	ldr	r3, [sp, #4]
    f5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	d100      	bne.n	f5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5ec:	bf00      	nop
    f5ee:	b003      	add	sp, #12
    f5f0:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f4:	1fff914c 	.word	0x1fff914c
    f5f8:	1fff9148 	.word	0x1fff9148

0000f5fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f5fc:	b500      	push	{lr}
    f5fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f600:	f7f1 fabc 	bl	b7c <Sys_GetCoreID>
    f604:	4603      	mov	r3, r0
    f606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    f608:	4a10      	ldr	r2, [pc, #64]	; (f64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f60a:	9b01      	ldr	r3, [sp, #4]
    f60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f610:	2b00      	cmp	r3, #0
    f612:	d10d      	bne.n	f630 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f614:	f7f1 f9e2 	bl	9dc <Port_schm_read_msr>
    f618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f61a:	9b00      	ldr	r3, [sp, #0]
    f61c:	f003 0301 	and.w	r3, r3, #1
    f620:	2b00      	cmp	r3, #0
    f622:	d100      	bne.n	f626 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f626:	490a      	ldr	r1, [pc, #40]	; (f650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    f628:	9b01      	ldr	r3, [sp, #4]
    f62a:	9a00      	ldr	r2, [sp, #0]
    f62c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    f630:	4a06      	ldr	r2, [pc, #24]	; (f64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f632:	9b01      	ldr	r3, [sp, #4]
    f634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f638:	1c5a      	adds	r2, r3, #1
    f63a:	4904      	ldr	r1, [pc, #16]	; (f64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f63c:	9b01      	ldr	r3, [sp, #4]
    f63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f642:	bf00      	nop
    f644:	b003      	add	sp, #12
    f646:	f85d fb04 	ldr.w	pc, [sp], #4
    f64a:	bf00      	nop
    f64c:	1fff9154 	.word	0x1fff9154
    f650:	1fff9150 	.word	0x1fff9150

0000f654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f654:	b500      	push	{lr}
    f656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f658:	f7f1 fa90 	bl	b7c <Sys_GetCoreID>
    f65c:	4603      	mov	r3, r0
    f65e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    f660:	4a0d      	ldr	r2, [pc, #52]	; (f698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f662:	9b01      	ldr	r3, [sp, #4]
    f664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f668:	1e5a      	subs	r2, r3, #1
    f66a:	490b      	ldr	r1, [pc, #44]	; (f698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f66c:	9b01      	ldr	r3, [sp, #4]
    f66e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f672:	4a0a      	ldr	r2, [pc, #40]	; (f69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    f674:	9b01      	ldr	r3, [sp, #4]
    f676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f67a:	f003 0301 	and.w	r3, r3, #1
    f67e:	2b00      	cmp	r3, #0
    f680:	d106      	bne.n	f690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    f682:	4a05      	ldr	r2, [pc, #20]	; (f698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f684:	9b01      	ldr	r3, [sp, #4]
    f686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f68a:	2b00      	cmp	r3, #0
    f68c:	d100      	bne.n	f690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f68e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f690:	bf00      	nop
    f692:	b003      	add	sp, #12
    f694:	f85d fb04 	ldr.w	pc, [sp], #4
    f698:	1fff9154 	.word	0x1fff9154
    f69c:	1fff9150 	.word	0x1fff9150

0000f6a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f6a0:	b500      	push	{lr}
    f6a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6a4:	f7f1 fa6a 	bl	b7c <Sys_GetCoreID>
    f6a8:	4603      	mov	r3, r0
    f6aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    f6ac:	4a10      	ldr	r2, [pc, #64]	; (f6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f6ae:	9b01      	ldr	r3, [sp, #4]
    f6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6b4:	2b00      	cmp	r3, #0
    f6b6:	d10d      	bne.n	f6d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6b8:	f7f1 f990 	bl	9dc <Port_schm_read_msr>
    f6bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6be:	9b00      	ldr	r3, [sp, #0]
    f6c0:	f003 0301 	and.w	r3, r3, #1
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d100      	bne.n	f6ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f6ca:	490a      	ldr	r1, [pc, #40]	; (f6f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    f6cc:	9b01      	ldr	r3, [sp, #4]
    f6ce:	9a00      	ldr	r2, [sp, #0]
    f6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    f6d4:	4a06      	ldr	r2, [pc, #24]	; (f6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f6d6:	9b01      	ldr	r3, [sp, #4]
    f6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6dc:	1c5a      	adds	r2, r3, #1
    f6de:	4904      	ldr	r1, [pc, #16]	; (f6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f6e0:	9b01      	ldr	r3, [sp, #4]
    f6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6e6:	bf00      	nop
    f6e8:	b003      	add	sp, #12
    f6ea:	f85d fb04 	ldr.w	pc, [sp], #4
    f6ee:	bf00      	nop
    f6f0:	1fff915c 	.word	0x1fff915c
    f6f4:	1fff9158 	.word	0x1fff9158

0000f6f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f6f8:	b500      	push	{lr}
    f6fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6fc:	f7f1 fa3e 	bl	b7c <Sys_GetCoreID>
    f700:	4603      	mov	r3, r0
    f702:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    f704:	4a0d      	ldr	r2, [pc, #52]	; (f73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f706:	9b01      	ldr	r3, [sp, #4]
    f708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f70c:	1e5a      	subs	r2, r3, #1
    f70e:	490b      	ldr	r1, [pc, #44]	; (f73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f710:	9b01      	ldr	r3, [sp, #4]
    f712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f716:	4a0a      	ldr	r2, [pc, #40]	; (f740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    f718:	9b01      	ldr	r3, [sp, #4]
    f71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f71e:	f003 0301 	and.w	r3, r3, #1
    f722:	2b00      	cmp	r3, #0
    f724:	d106      	bne.n	f734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    f726:	4a05      	ldr	r2, [pc, #20]	; (f73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f728:	9b01      	ldr	r3, [sp, #4]
    f72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f72e:	2b00      	cmp	r3, #0
    f730:	d100      	bne.n	f734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f734:	bf00      	nop
    f736:	b003      	add	sp, #12
    f738:	f85d fb04 	ldr.w	pc, [sp], #4
    f73c:	1fff915c 	.word	0x1fff915c
    f740:	1fff9158 	.word	0x1fff9158

0000f744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f744:	b500      	push	{lr}
    f746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f748:	f7f1 fa18 	bl	b7c <Sys_GetCoreID>
    f74c:	4603      	mov	r3, r0
    f74e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    f750:	4a10      	ldr	r2, [pc, #64]	; (f794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f752:	9b01      	ldr	r3, [sp, #4]
    f754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f758:	2b00      	cmp	r3, #0
    f75a:	d10d      	bne.n	f778 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f75c:	f7f1 f93e 	bl	9dc <Port_schm_read_msr>
    f760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f762:	9b00      	ldr	r3, [sp, #0]
    f764:	f003 0301 	and.w	r3, r3, #1
    f768:	2b00      	cmp	r3, #0
    f76a:	d100      	bne.n	f76e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f76c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    f76e:	490a      	ldr	r1, [pc, #40]	; (f798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    f770:	9b01      	ldr	r3, [sp, #4]
    f772:	9a00      	ldr	r2, [sp, #0]
    f774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    f778:	4a06      	ldr	r2, [pc, #24]	; (f794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f77a:	9b01      	ldr	r3, [sp, #4]
    f77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f780:	1c5a      	adds	r2, r3, #1
    f782:	4904      	ldr	r1, [pc, #16]	; (f794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f784:	9b01      	ldr	r3, [sp, #4]
    f786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f78a:	bf00      	nop
    f78c:	b003      	add	sp, #12
    f78e:	f85d fb04 	ldr.w	pc, [sp], #4
    f792:	bf00      	nop
    f794:	1fff9164 	.word	0x1fff9164
    f798:	1fff9160 	.word	0x1fff9160

0000f79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f79c:	b500      	push	{lr}
    f79e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7a0:	f7f1 f9ec 	bl	b7c <Sys_GetCoreID>
    f7a4:	4603      	mov	r3, r0
    f7a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    f7a8:	4a0d      	ldr	r2, [pc, #52]	; (f7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f7aa:	9b01      	ldr	r3, [sp, #4]
    f7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7b0:	1e5a      	subs	r2, r3, #1
    f7b2:	490b      	ldr	r1, [pc, #44]	; (f7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f7b4:	9b01      	ldr	r3, [sp, #4]
    f7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    f7ba:	4a0a      	ldr	r2, [pc, #40]	; (f7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    f7bc:	9b01      	ldr	r3, [sp, #4]
    f7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7c2:	f003 0301 	and.w	r3, r3, #1
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	d106      	bne.n	f7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    f7ca:	4a05      	ldr	r2, [pc, #20]	; (f7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f7cc:	9b01      	ldr	r3, [sp, #4]
    f7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7d2:	2b00      	cmp	r3, #0
    f7d4:	d100      	bne.n	f7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7d8:	bf00      	nop
    f7da:	b003      	add	sp, #12
    f7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    f7e0:	1fff9164 	.word	0x1fff9164
    f7e4:	1fff9160 	.word	0x1fff9160

0000f7e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f7e8:	b500      	push	{lr}
    f7ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7ec:	f7f1 f9c6 	bl	b7c <Sys_GetCoreID>
    f7f0:	4603      	mov	r3, r0
    f7f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    f7f4:	4a10      	ldr	r2, [pc, #64]	; (f838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f7f6:	9b01      	ldr	r3, [sp, #4]
    f7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7fc:	2b00      	cmp	r3, #0
    f7fe:	d10d      	bne.n	f81c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f800:	f7f1 f8ec 	bl	9dc <Port_schm_read_msr>
    f804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f806:	9b00      	ldr	r3, [sp, #0]
    f808:	f003 0301 	and.w	r3, r3, #1
    f80c:	2b00      	cmp	r3, #0
    f80e:	d100      	bne.n	f812 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    f812:	490a      	ldr	r1, [pc, #40]	; (f83c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    f814:	9b01      	ldr	r3, [sp, #4]
    f816:	9a00      	ldr	r2, [sp, #0]
    f818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    f81c:	4a06      	ldr	r2, [pc, #24]	; (f838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f81e:	9b01      	ldr	r3, [sp, #4]
    f820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f824:	1c5a      	adds	r2, r3, #1
    f826:	4904      	ldr	r1, [pc, #16]	; (f838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f828:	9b01      	ldr	r3, [sp, #4]
    f82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f82e:	bf00      	nop
    f830:	b003      	add	sp, #12
    f832:	f85d fb04 	ldr.w	pc, [sp], #4
    f836:	bf00      	nop
    f838:	1fff916c 	.word	0x1fff916c
    f83c:	1fff9168 	.word	0x1fff9168

0000f840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f840:	b500      	push	{lr}
    f842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f844:	f7f1 f99a 	bl	b7c <Sys_GetCoreID>
    f848:	4603      	mov	r3, r0
    f84a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    f84c:	4a0d      	ldr	r2, [pc, #52]	; (f884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f84e:	9b01      	ldr	r3, [sp, #4]
    f850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f854:	1e5a      	subs	r2, r3, #1
    f856:	490b      	ldr	r1, [pc, #44]	; (f884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f858:	9b01      	ldr	r3, [sp, #4]
    f85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    f85e:	4a0a      	ldr	r2, [pc, #40]	; (f888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    f860:	9b01      	ldr	r3, [sp, #4]
    f862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f866:	f003 0301 	and.w	r3, r3, #1
    f86a:	2b00      	cmp	r3, #0
    f86c:	d106      	bne.n	f87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    f86e:	4a05      	ldr	r2, [pc, #20]	; (f884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f870:	9b01      	ldr	r3, [sp, #4]
    f872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f876:	2b00      	cmp	r3, #0
    f878:	d100      	bne.n	f87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f87a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f87c:	bf00      	nop
    f87e:	b003      	add	sp, #12
    f880:	f85d fb04 	ldr.w	pc, [sp], #4
    f884:	1fff916c 	.word	0x1fff916c
    f888:	1fff9168 	.word	0x1fff9168

0000f88c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f88c:	b500      	push	{lr}
    f88e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f890:	f7f1 f974 	bl	b7c <Sys_GetCoreID>
    f894:	4603      	mov	r3, r0
    f896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    f898:	4a10      	ldr	r2, [pc, #64]	; (f8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f89a:	9b01      	ldr	r3, [sp, #4]
    f89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8a0:	2b00      	cmp	r3, #0
    f8a2:	d10d      	bne.n	f8c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8a4:	f7f1 f89a 	bl	9dc <Port_schm_read_msr>
    f8a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8aa:	9b00      	ldr	r3, [sp, #0]
    f8ac:	f003 0301 	and.w	r3, r3, #1
    f8b0:	2b00      	cmp	r3, #0
    f8b2:	d100      	bne.n	f8b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    f8b6:	490a      	ldr	r1, [pc, #40]	; (f8e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    f8b8:	9b01      	ldr	r3, [sp, #4]
    f8ba:	9a00      	ldr	r2, [sp, #0]
    f8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    f8c0:	4a06      	ldr	r2, [pc, #24]	; (f8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f8c2:	9b01      	ldr	r3, [sp, #4]
    f8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8c8:	1c5a      	adds	r2, r3, #1
    f8ca:	4904      	ldr	r1, [pc, #16]	; (f8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f8cc:	9b01      	ldr	r3, [sp, #4]
    f8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8d2:	bf00      	nop
    f8d4:	b003      	add	sp, #12
    f8d6:	f85d fb04 	ldr.w	pc, [sp], #4
    f8da:	bf00      	nop
    f8dc:	1fff9174 	.word	0x1fff9174
    f8e0:	1fff9170 	.word	0x1fff9170

0000f8e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f8e4:	b500      	push	{lr}
    f8e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8e8:	f7f1 f948 	bl	b7c <Sys_GetCoreID>
    f8ec:	4603      	mov	r3, r0
    f8ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    f8f0:	4a0d      	ldr	r2, [pc, #52]	; (f928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f8f2:	9b01      	ldr	r3, [sp, #4]
    f8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8f8:	1e5a      	subs	r2, r3, #1
    f8fa:	490b      	ldr	r1, [pc, #44]	; (f928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f8fc:	9b01      	ldr	r3, [sp, #4]
    f8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    f902:	4a0a      	ldr	r2, [pc, #40]	; (f92c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    f904:	9b01      	ldr	r3, [sp, #4]
    f906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f90a:	f003 0301 	and.w	r3, r3, #1
    f90e:	2b00      	cmp	r3, #0
    f910:	d106      	bne.n	f920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    f912:	4a05      	ldr	r2, [pc, #20]	; (f928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f914:	9b01      	ldr	r3, [sp, #4]
    f916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f91a:	2b00      	cmp	r3, #0
    f91c:	d100      	bne.n	f920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f91e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f920:	bf00      	nop
    f922:	b003      	add	sp, #12
    f924:	f85d fb04 	ldr.w	pc, [sp], #4
    f928:	1fff9174 	.word	0x1fff9174
    f92c:	1fff9170 	.word	0x1fff9170

0000f930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f930:	b500      	push	{lr}
    f932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f934:	f7f1 f922 	bl	b7c <Sys_GetCoreID>
    f938:	4603      	mov	r3, r0
    f93a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    f93c:	4a10      	ldr	r2, [pc, #64]	; (f980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f93e:	9b01      	ldr	r3, [sp, #4]
    f940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f944:	2b00      	cmp	r3, #0
    f946:	d10d      	bne.n	f964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f948:	f7f1 f848 	bl	9dc <Port_schm_read_msr>
    f94c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f94e:	9b00      	ldr	r3, [sp, #0]
    f950:	f003 0301 	and.w	r3, r3, #1
    f954:	2b00      	cmp	r3, #0
    f956:	d100      	bne.n	f95a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    f95a:	490a      	ldr	r1, [pc, #40]	; (f984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    f95c:	9b01      	ldr	r3, [sp, #4]
    f95e:	9a00      	ldr	r2, [sp, #0]
    f960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    f964:	4a06      	ldr	r2, [pc, #24]	; (f980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f966:	9b01      	ldr	r3, [sp, #4]
    f968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f96c:	1c5a      	adds	r2, r3, #1
    f96e:	4904      	ldr	r1, [pc, #16]	; (f980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f970:	9b01      	ldr	r3, [sp, #4]
    f972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f976:	bf00      	nop
    f978:	b003      	add	sp, #12
    f97a:	f85d fb04 	ldr.w	pc, [sp], #4
    f97e:	bf00      	nop
    f980:	1fff917c 	.word	0x1fff917c
    f984:	1fff9178 	.word	0x1fff9178

0000f988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f988:	b500      	push	{lr}
    f98a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f98c:	f7f1 f8f6 	bl	b7c <Sys_GetCoreID>
    f990:	4603      	mov	r3, r0
    f992:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    f994:	4a0d      	ldr	r2, [pc, #52]	; (f9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f996:	9b01      	ldr	r3, [sp, #4]
    f998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f99c:	1e5a      	subs	r2, r3, #1
    f99e:	490b      	ldr	r1, [pc, #44]	; (f9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f9a0:	9b01      	ldr	r3, [sp, #4]
    f9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    f9a6:	4a0a      	ldr	r2, [pc, #40]	; (f9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    f9a8:	9b01      	ldr	r3, [sp, #4]
    f9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ae:	f003 0301 	and.w	r3, r3, #1
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d106      	bne.n	f9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    f9b6:	4a05      	ldr	r2, [pc, #20]	; (f9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f9b8:	9b01      	ldr	r3, [sp, #4]
    f9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9be:	2b00      	cmp	r3, #0
    f9c0:	d100      	bne.n	f9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9c4:	bf00      	nop
    f9c6:	b003      	add	sp, #12
    f9c8:	f85d fb04 	ldr.w	pc, [sp], #4
    f9cc:	1fff917c 	.word	0x1fff917c
    f9d0:	1fff9178 	.word	0x1fff9178

0000f9d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f9d4:	b500      	push	{lr}
    f9d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9d8:	f7f1 f8d0 	bl	b7c <Sys_GetCoreID>
    f9dc:	4603      	mov	r3, r0
    f9de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    f9e0:	4a10      	ldr	r2, [pc, #64]	; (fa24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f9e2:	9b01      	ldr	r3, [sp, #4]
    f9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d10d      	bne.n	fa08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9ec:	f7f0 fff6 	bl	9dc <Port_schm_read_msr>
    f9f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9f2:	9b00      	ldr	r3, [sp, #0]
    f9f4:	f003 0301 	and.w	r3, r3, #1
    f9f8:	2b00      	cmp	r3, #0
    f9fa:	d100      	bne.n	f9fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    f9fe:	490a      	ldr	r1, [pc, #40]	; (fa28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    fa00:	9b01      	ldr	r3, [sp, #4]
    fa02:	9a00      	ldr	r2, [sp, #0]
    fa04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    fa08:	4a06      	ldr	r2, [pc, #24]	; (fa24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fa0a:	9b01      	ldr	r3, [sp, #4]
    fa0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa10:	1c5a      	adds	r2, r3, #1
    fa12:	4904      	ldr	r1, [pc, #16]	; (fa24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    fa14:	9b01      	ldr	r3, [sp, #4]
    fa16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa1a:	bf00      	nop
    fa1c:	b003      	add	sp, #12
    fa1e:	f85d fb04 	ldr.w	pc, [sp], #4
    fa22:	bf00      	nop
    fa24:	1fff9184 	.word	0x1fff9184
    fa28:	1fff9180 	.word	0x1fff9180

0000fa2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    fa2c:	b500      	push	{lr}
    fa2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa30:	f7f1 f8a4 	bl	b7c <Sys_GetCoreID>
    fa34:	4603      	mov	r3, r0
    fa36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    fa38:	4a0d      	ldr	r2, [pc, #52]	; (fa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fa3a:	9b01      	ldr	r3, [sp, #4]
    fa3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa40:	1e5a      	subs	r2, r3, #1
    fa42:	490b      	ldr	r1, [pc, #44]	; (fa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fa44:	9b01      	ldr	r3, [sp, #4]
    fa46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    fa4a:	4a0a      	ldr	r2, [pc, #40]	; (fa74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    fa4c:	9b01      	ldr	r3, [sp, #4]
    fa4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa52:	f003 0301 	and.w	r3, r3, #1
    fa56:	2b00      	cmp	r3, #0
    fa58:	d106      	bne.n	fa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    fa5a:	4a05      	ldr	r2, [pc, #20]	; (fa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    fa5c:	9b01      	ldr	r3, [sp, #4]
    fa5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa62:	2b00      	cmp	r3, #0
    fa64:	d100      	bne.n	fa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa68:	bf00      	nop
    fa6a:	b003      	add	sp, #12
    fa6c:	f85d fb04 	ldr.w	pc, [sp], #4
    fa70:	1fff9184 	.word	0x1fff9184
    fa74:	1fff9180 	.word	0x1fff9180

0000fa78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fa78:	b500      	push	{lr}
    fa7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa7c:	f7f1 f87e 	bl	b7c <Sys_GetCoreID>
    fa80:	4603      	mov	r3, r0
    fa82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    fa84:	4a10      	ldr	r2, [pc, #64]	; (fac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fa86:	9b01      	ldr	r3, [sp, #4]
    fa88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa8c:	2b00      	cmp	r3, #0
    fa8e:	d10d      	bne.n	faac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa90:	f7f0 ffa4 	bl	9dc <Port_schm_read_msr>
    fa94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa96:	9b00      	ldr	r3, [sp, #0]
    fa98:	f003 0301 	and.w	r3, r3, #1
    fa9c:	2b00      	cmp	r3, #0
    fa9e:	d100      	bne.n	faa2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    faa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    faa2:	490a      	ldr	r1, [pc, #40]	; (facc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    faa4:	9b01      	ldr	r3, [sp, #4]
    faa6:	9a00      	ldr	r2, [sp, #0]
    faa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    faac:	4a06      	ldr	r2, [pc, #24]	; (fac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    faae:	9b01      	ldr	r3, [sp, #4]
    fab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab4:	1c5a      	adds	r2, r3, #1
    fab6:	4904      	ldr	r1, [pc, #16]	; (fac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fab8:	9b01      	ldr	r3, [sp, #4]
    faba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fabe:	bf00      	nop
    fac0:	b003      	add	sp, #12
    fac2:	f85d fb04 	ldr.w	pc, [sp], #4
    fac6:	bf00      	nop
    fac8:	1fff918c 	.word	0x1fff918c
    facc:	1fff9188 	.word	0x1fff9188

0000fad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fad0:	b500      	push	{lr}
    fad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fad4:	f7f1 f852 	bl	b7c <Sys_GetCoreID>
    fad8:	4603      	mov	r3, r0
    fada:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    fadc:	4a0d      	ldr	r2, [pc, #52]	; (fb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fade:	9b01      	ldr	r3, [sp, #4]
    fae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fae4:	1e5a      	subs	r2, r3, #1
    fae6:	490b      	ldr	r1, [pc, #44]	; (fb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fae8:	9b01      	ldr	r3, [sp, #4]
    faea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    faee:	4a0a      	ldr	r2, [pc, #40]	; (fb18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    faf0:	9b01      	ldr	r3, [sp, #4]
    faf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf6:	f003 0301 	and.w	r3, r3, #1
    fafa:	2b00      	cmp	r3, #0
    fafc:	d106      	bne.n	fb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    fafe:	4a05      	ldr	r2, [pc, #20]	; (fb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fb00:	9b01      	ldr	r3, [sp, #4]
    fb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb06:	2b00      	cmp	r3, #0
    fb08:	d100      	bne.n	fb0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb0c:	bf00      	nop
    fb0e:	b003      	add	sp, #12
    fb10:	f85d fb04 	ldr.w	pc, [sp], #4
    fb14:	1fff918c 	.word	0x1fff918c
    fb18:	1fff9188 	.word	0x1fff9188

0000fb1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fb1c:	b500      	push	{lr}
    fb1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb20:	f7f1 f82c 	bl	b7c <Sys_GetCoreID>
    fb24:	4603      	mov	r3, r0
    fb26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    fb28:	4a10      	ldr	r2, [pc, #64]	; (fb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fb2a:	9b01      	ldr	r3, [sp, #4]
    fb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb30:	2b00      	cmp	r3, #0
    fb32:	d10d      	bne.n	fb50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb34:	f7f0 ff52 	bl	9dc <Port_schm_read_msr>
    fb38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb3a:	9b00      	ldr	r3, [sp, #0]
    fb3c:	f003 0301 	and.w	r3, r3, #1
    fb40:	2b00      	cmp	r3, #0
    fb42:	d100      	bne.n	fb46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fb46:	490a      	ldr	r1, [pc, #40]	; (fb70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    fb48:	9b01      	ldr	r3, [sp, #4]
    fb4a:	9a00      	ldr	r2, [sp, #0]
    fb4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    fb50:	4a06      	ldr	r2, [pc, #24]	; (fb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fb52:	9b01      	ldr	r3, [sp, #4]
    fb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb58:	1c5a      	adds	r2, r3, #1
    fb5a:	4904      	ldr	r1, [pc, #16]	; (fb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fb5c:	9b01      	ldr	r3, [sp, #4]
    fb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb62:	bf00      	nop
    fb64:	b003      	add	sp, #12
    fb66:	f85d fb04 	ldr.w	pc, [sp], #4
    fb6a:	bf00      	nop
    fb6c:	1fff9194 	.word	0x1fff9194
    fb70:	1fff9190 	.word	0x1fff9190

0000fb74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fb74:	b500      	push	{lr}
    fb76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb78:	f7f1 f800 	bl	b7c <Sys_GetCoreID>
    fb7c:	4603      	mov	r3, r0
    fb7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    fb80:	4a0d      	ldr	r2, [pc, #52]	; (fbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fb82:	9b01      	ldr	r3, [sp, #4]
    fb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb88:	1e5a      	subs	r2, r3, #1
    fb8a:	490b      	ldr	r1, [pc, #44]	; (fbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fb8c:	9b01      	ldr	r3, [sp, #4]
    fb8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fb92:	4a0a      	ldr	r2, [pc, #40]	; (fbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    fb94:	9b01      	ldr	r3, [sp, #4]
    fb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb9a:	f003 0301 	and.w	r3, r3, #1
    fb9e:	2b00      	cmp	r3, #0
    fba0:	d106      	bne.n	fbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    fba2:	4a05      	ldr	r2, [pc, #20]	; (fbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fba4:	9b01      	ldr	r3, [sp, #4]
    fba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbaa:	2b00      	cmp	r3, #0
    fbac:	d100      	bne.n	fbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbb0:	bf00      	nop
    fbb2:	b003      	add	sp, #12
    fbb4:	f85d fb04 	ldr.w	pc, [sp], #4
    fbb8:	1fff9194 	.word	0x1fff9194
    fbbc:	1fff9190 	.word	0x1fff9190

0000fbc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fbc0:	b500      	push	{lr}
    fbc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbc4:	f7f0 ffda 	bl	b7c <Sys_GetCoreID>
    fbc8:	4603      	mov	r3, r0
    fbca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    fbcc:	4a10      	ldr	r2, [pc, #64]	; (fc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fbce:	9b01      	ldr	r3, [sp, #4]
    fbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d10d      	bne.n	fbf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbd8:	f7f0 ff00 	bl	9dc <Port_schm_read_msr>
    fbdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbde:	9b00      	ldr	r3, [sp, #0]
    fbe0:	f003 0301 	and.w	r3, r3, #1
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	d100      	bne.n	fbea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbe8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    fbea:	490a      	ldr	r1, [pc, #40]	; (fc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    fbec:	9b01      	ldr	r3, [sp, #4]
    fbee:	9a00      	ldr	r2, [sp, #0]
    fbf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    fbf4:	4a06      	ldr	r2, [pc, #24]	; (fc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fbf6:	9b01      	ldr	r3, [sp, #4]
    fbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbfc:	1c5a      	adds	r2, r3, #1
    fbfe:	4904      	ldr	r1, [pc, #16]	; (fc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fc00:	9b01      	ldr	r3, [sp, #4]
    fc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc06:	bf00      	nop
    fc08:	b003      	add	sp, #12
    fc0a:	f85d fb04 	ldr.w	pc, [sp], #4
    fc0e:	bf00      	nop
    fc10:	1fff919c 	.word	0x1fff919c
    fc14:	1fff9198 	.word	0x1fff9198

0000fc18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fc18:	b500      	push	{lr}
    fc1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc1c:	f7f0 ffae 	bl	b7c <Sys_GetCoreID>
    fc20:	4603      	mov	r3, r0
    fc22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    fc24:	4a0d      	ldr	r2, [pc, #52]	; (fc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fc26:	9b01      	ldr	r3, [sp, #4]
    fc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc2c:	1e5a      	subs	r2, r3, #1
    fc2e:	490b      	ldr	r1, [pc, #44]	; (fc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fc30:	9b01      	ldr	r3, [sp, #4]
    fc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fc36:	4a0a      	ldr	r2, [pc, #40]	; (fc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    fc38:	9b01      	ldr	r3, [sp, #4]
    fc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc3e:	f003 0301 	and.w	r3, r3, #1
    fc42:	2b00      	cmp	r3, #0
    fc44:	d106      	bne.n	fc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    fc46:	4a05      	ldr	r2, [pc, #20]	; (fc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fc48:	9b01      	ldr	r3, [sp, #4]
    fc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc4e:	2b00      	cmp	r3, #0
    fc50:	d100      	bne.n	fc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc54:	bf00      	nop
    fc56:	b003      	add	sp, #12
    fc58:	f85d fb04 	ldr.w	pc, [sp], #4
    fc5c:	1fff919c 	.word	0x1fff919c
    fc60:	1fff9198 	.word	0x1fff9198

0000fc64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fc64:	b500      	push	{lr}
    fc66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc68:	f7f0 ff88 	bl	b7c <Sys_GetCoreID>
    fc6c:	4603      	mov	r3, r0
    fc6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    fc70:	4a10      	ldr	r2, [pc, #64]	; (fcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fc72:	9b01      	ldr	r3, [sp, #4]
    fc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc78:	2b00      	cmp	r3, #0
    fc7a:	d10d      	bne.n	fc98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc7c:	f7f0 feae 	bl	9dc <Port_schm_read_msr>
    fc80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc82:	9b00      	ldr	r3, [sp, #0]
    fc84:	f003 0301 	and.w	r3, r3, #1
    fc88:	2b00      	cmp	r3, #0
    fc8a:	d100      	bne.n	fc8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    fc8e:	490a      	ldr	r1, [pc, #40]	; (fcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    fc90:	9b01      	ldr	r3, [sp, #4]
    fc92:	9a00      	ldr	r2, [sp, #0]
    fc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    fc98:	4a06      	ldr	r2, [pc, #24]	; (fcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fc9a:	9b01      	ldr	r3, [sp, #4]
    fc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca0:	1c5a      	adds	r2, r3, #1
    fca2:	4904      	ldr	r1, [pc, #16]	; (fcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fca4:	9b01      	ldr	r3, [sp, #4]
    fca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fcaa:	bf00      	nop
    fcac:	b003      	add	sp, #12
    fcae:	f85d fb04 	ldr.w	pc, [sp], #4
    fcb2:	bf00      	nop
    fcb4:	1fff91a4 	.word	0x1fff91a4
    fcb8:	1fff91a0 	.word	0x1fff91a0

0000fcbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fcbc:	b500      	push	{lr}
    fcbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcc0:	f7f0 ff5c 	bl	b7c <Sys_GetCoreID>
    fcc4:	4603      	mov	r3, r0
    fcc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    fcc8:	4a0d      	ldr	r2, [pc, #52]	; (fd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fcca:	9b01      	ldr	r3, [sp, #4]
    fccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcd0:	1e5a      	subs	r2, r3, #1
    fcd2:	490b      	ldr	r1, [pc, #44]	; (fd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fcd4:	9b01      	ldr	r3, [sp, #4]
    fcd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    fcda:	4a0a      	ldr	r2, [pc, #40]	; (fd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    fcdc:	9b01      	ldr	r3, [sp, #4]
    fcde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fce2:	f003 0301 	and.w	r3, r3, #1
    fce6:	2b00      	cmp	r3, #0
    fce8:	d106      	bne.n	fcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    fcea:	4a05      	ldr	r2, [pc, #20]	; (fd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fcec:	9b01      	ldr	r3, [sp, #4]
    fcee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcf2:	2b00      	cmp	r3, #0
    fcf4:	d100      	bne.n	fcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcf8:	bf00      	nop
    fcfa:	b003      	add	sp, #12
    fcfc:	f85d fb04 	ldr.w	pc, [sp], #4
    fd00:	1fff91a4 	.word	0x1fff91a4
    fd04:	1fff91a0 	.word	0x1fff91a0

0000fd08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fd08:	b500      	push	{lr}
    fd0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd0c:	f7f0 ff36 	bl	b7c <Sys_GetCoreID>
    fd10:	4603      	mov	r3, r0
    fd12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    fd14:	4a10      	ldr	r2, [pc, #64]	; (fd58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fd16:	9b01      	ldr	r3, [sp, #4]
    fd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d10d      	bne.n	fd3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd20:	f7f0 fe5c 	bl	9dc <Port_schm_read_msr>
    fd24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd26:	9b00      	ldr	r3, [sp, #0]
    fd28:	f003 0301 	and.w	r3, r3, #1
    fd2c:	2b00      	cmp	r3, #0
    fd2e:	d100      	bne.n	fd32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fd32:	490a      	ldr	r1, [pc, #40]	; (fd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    fd34:	9b01      	ldr	r3, [sp, #4]
    fd36:	9a00      	ldr	r2, [sp, #0]
    fd38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    fd3c:	4a06      	ldr	r2, [pc, #24]	; (fd58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fd3e:	9b01      	ldr	r3, [sp, #4]
    fd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd44:	1c5a      	adds	r2, r3, #1
    fd46:	4904      	ldr	r1, [pc, #16]	; (fd58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fd48:	9b01      	ldr	r3, [sp, #4]
    fd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd4e:	bf00      	nop
    fd50:	b003      	add	sp, #12
    fd52:	f85d fb04 	ldr.w	pc, [sp], #4
    fd56:	bf00      	nop
    fd58:	1fff91ac 	.word	0x1fff91ac
    fd5c:	1fff91a8 	.word	0x1fff91a8

0000fd60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fd60:	b500      	push	{lr}
    fd62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd64:	f7f0 ff0a 	bl	b7c <Sys_GetCoreID>
    fd68:	4603      	mov	r3, r0
    fd6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    fd6c:	4a0d      	ldr	r2, [pc, #52]	; (fda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fd6e:	9b01      	ldr	r3, [sp, #4]
    fd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd74:	1e5a      	subs	r2, r3, #1
    fd76:	490b      	ldr	r1, [pc, #44]	; (fda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fd78:	9b01      	ldr	r3, [sp, #4]
    fd7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    fd7e:	4a0a      	ldr	r2, [pc, #40]	; (fda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    fd80:	9b01      	ldr	r3, [sp, #4]
    fd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd86:	f003 0301 	and.w	r3, r3, #1
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d106      	bne.n	fd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    fd8e:	4a05      	ldr	r2, [pc, #20]	; (fda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fd90:	9b01      	ldr	r3, [sp, #4]
    fd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd96:	2b00      	cmp	r3, #0
    fd98:	d100      	bne.n	fd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd9c:	bf00      	nop
    fd9e:	b003      	add	sp, #12
    fda0:	f85d fb04 	ldr.w	pc, [sp], #4
    fda4:	1fff91ac 	.word	0x1fff91ac
    fda8:	1fff91a8 	.word	0x1fff91a8

0000fdac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fdac:	b500      	push	{lr}
    fdae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdb0:	f7f0 fee4 	bl	b7c <Sys_GetCoreID>
    fdb4:	4603      	mov	r3, r0
    fdb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    fdb8:	4a10      	ldr	r2, [pc, #64]	; (fdfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fdba:	9b01      	ldr	r3, [sp, #4]
    fdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	d10d      	bne.n	fde0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdc4:	f7f0 fe0a 	bl	9dc <Port_schm_read_msr>
    fdc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdca:	9b00      	ldr	r3, [sp, #0]
    fdcc:	f003 0301 	and.w	r3, r3, #1
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	d100      	bne.n	fdd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    fdd6:	490a      	ldr	r1, [pc, #40]	; (fe00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    fdd8:	9b01      	ldr	r3, [sp, #4]
    fdda:	9a00      	ldr	r2, [sp, #0]
    fddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    fde0:	4a06      	ldr	r2, [pc, #24]	; (fdfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fde2:	9b01      	ldr	r3, [sp, #4]
    fde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fde8:	1c5a      	adds	r2, r3, #1
    fdea:	4904      	ldr	r1, [pc, #16]	; (fdfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fdec:	9b01      	ldr	r3, [sp, #4]
    fdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdf2:	bf00      	nop
    fdf4:	b003      	add	sp, #12
    fdf6:	f85d fb04 	ldr.w	pc, [sp], #4
    fdfa:	bf00      	nop
    fdfc:	1fff91b4 	.word	0x1fff91b4
    fe00:	1fff91b0 	.word	0x1fff91b0

0000fe04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fe04:	b500      	push	{lr}
    fe06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe08:	f7f0 feb8 	bl	b7c <Sys_GetCoreID>
    fe0c:	4603      	mov	r3, r0
    fe0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    fe10:	4a0d      	ldr	r2, [pc, #52]	; (fe48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fe12:	9b01      	ldr	r3, [sp, #4]
    fe14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe18:	1e5a      	subs	r2, r3, #1
    fe1a:	490b      	ldr	r1, [pc, #44]	; (fe48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fe1c:	9b01      	ldr	r3, [sp, #4]
    fe1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    fe22:	4a0a      	ldr	r2, [pc, #40]	; (fe4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    fe24:	9b01      	ldr	r3, [sp, #4]
    fe26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe2a:	f003 0301 	and.w	r3, r3, #1
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d106      	bne.n	fe40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    fe32:	4a05      	ldr	r2, [pc, #20]	; (fe48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fe34:	9b01      	ldr	r3, [sp, #4]
    fe36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe3a:	2b00      	cmp	r3, #0
    fe3c:	d100      	bne.n	fe40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe40:	bf00      	nop
    fe42:	b003      	add	sp, #12
    fe44:	f85d fb04 	ldr.w	pc, [sp], #4
    fe48:	1fff91b4 	.word	0x1fff91b4
    fe4c:	1fff91b0 	.word	0x1fff91b0

0000fe50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fe50:	b500      	push	{lr}
    fe52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe54:	f7f0 fe92 	bl	b7c <Sys_GetCoreID>
    fe58:	4603      	mov	r3, r0
    fe5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    fe5c:	4a10      	ldr	r2, [pc, #64]	; (fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fe5e:	9b01      	ldr	r3, [sp, #4]
    fe60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe64:	2b00      	cmp	r3, #0
    fe66:	d10d      	bne.n	fe84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe68:	f7f0 fdb8 	bl	9dc <Port_schm_read_msr>
    fe6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe6e:	9b00      	ldr	r3, [sp, #0]
    fe70:	f003 0301 	and.w	r3, r3, #1
    fe74:	2b00      	cmp	r3, #0
    fe76:	d100      	bne.n	fe7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    fe7a:	490a      	ldr	r1, [pc, #40]	; (fea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    fe7c:	9b01      	ldr	r3, [sp, #4]
    fe7e:	9a00      	ldr	r2, [sp, #0]
    fe80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    fe84:	4a06      	ldr	r2, [pc, #24]	; (fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fe86:	9b01      	ldr	r3, [sp, #4]
    fe88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8c:	1c5a      	adds	r2, r3, #1
    fe8e:	4904      	ldr	r1, [pc, #16]	; (fea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fe90:	9b01      	ldr	r3, [sp, #4]
    fe92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe96:	bf00      	nop
    fe98:	b003      	add	sp, #12
    fe9a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe9e:	bf00      	nop
    fea0:	1fff91bc 	.word	0x1fff91bc
    fea4:	1fff91b8 	.word	0x1fff91b8

0000fea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fea8:	b500      	push	{lr}
    feaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feac:	f7f0 fe66 	bl	b7c <Sys_GetCoreID>
    feb0:	4603      	mov	r3, r0
    feb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    feb4:	4a0d      	ldr	r2, [pc, #52]	; (feec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    feb6:	9b01      	ldr	r3, [sp, #4]
    feb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    febc:	1e5a      	subs	r2, r3, #1
    febe:	490b      	ldr	r1, [pc, #44]	; (feec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fec0:	9b01      	ldr	r3, [sp, #4]
    fec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    fec6:	4a0a      	ldr	r2, [pc, #40]	; (fef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    fec8:	9b01      	ldr	r3, [sp, #4]
    feca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fece:	f003 0301 	and.w	r3, r3, #1
    fed2:	2b00      	cmp	r3, #0
    fed4:	d106      	bne.n	fee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    fed6:	4a05      	ldr	r2, [pc, #20]	; (feec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fed8:	9b01      	ldr	r3, [sp, #4]
    feda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fede:	2b00      	cmp	r3, #0
    fee0:	d100      	bne.n	fee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fee4:	bf00      	nop
    fee6:	b003      	add	sp, #12
    fee8:	f85d fb04 	ldr.w	pc, [sp], #4
    feec:	1fff91bc 	.word	0x1fff91bc
    fef0:	1fff91b8 	.word	0x1fff91b8

0000fef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fef4:	b500      	push	{lr}
    fef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fef8:	f7f0 fe40 	bl	b7c <Sys_GetCoreID>
    fefc:	4603      	mov	r3, r0
    fefe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    ff00:	4a10      	ldr	r2, [pc, #64]	; (ff44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    ff02:	9b01      	ldr	r3, [sp, #4]
    ff04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff08:	2b00      	cmp	r3, #0
    ff0a:	d10d      	bne.n	ff28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff0c:	f7f0 fd66 	bl	9dc <Port_schm_read_msr>
    ff10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff12:	9b00      	ldr	r3, [sp, #0]
    ff14:	f003 0301 	and.w	r3, r3, #1
    ff18:	2b00      	cmp	r3, #0
    ff1a:	d100      	bne.n	ff1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    ff1e:	490a      	ldr	r1, [pc, #40]	; (ff48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    ff20:	9b01      	ldr	r3, [sp, #4]
    ff22:	9a00      	ldr	r2, [sp, #0]
    ff24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    ff28:	4a06      	ldr	r2, [pc, #24]	; (ff44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    ff2a:	9b01      	ldr	r3, [sp, #4]
    ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff30:	1c5a      	adds	r2, r3, #1
    ff32:	4904      	ldr	r1, [pc, #16]	; (ff44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff3a:	bf00      	nop
    ff3c:	b003      	add	sp, #12
    ff3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff42:	bf00      	nop
    ff44:	1fff91c4 	.word	0x1fff91c4
    ff48:	1fff91c0 	.word	0x1fff91c0

0000ff4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    ff4c:	b500      	push	{lr}
    ff4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff50:	f7f0 fe14 	bl	b7c <Sys_GetCoreID>
    ff54:	4603      	mov	r3, r0
    ff56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    ff58:	4a0d      	ldr	r2, [pc, #52]	; (ff90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    ff5a:	9b01      	ldr	r3, [sp, #4]
    ff5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff60:	1e5a      	subs	r2, r3, #1
    ff62:	490b      	ldr	r1, [pc, #44]	; (ff90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    ff64:	9b01      	ldr	r3, [sp, #4]
    ff66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    ff6a:	4a0a      	ldr	r2, [pc, #40]	; (ff94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    ff6c:	9b01      	ldr	r3, [sp, #4]
    ff6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff72:	f003 0301 	and.w	r3, r3, #1
    ff76:	2b00      	cmp	r3, #0
    ff78:	d106      	bne.n	ff88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    ff7a:	4a05      	ldr	r2, [pc, #20]	; (ff90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    ff7c:	9b01      	ldr	r3, [sp, #4]
    ff7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff82:	2b00      	cmp	r3, #0
    ff84:	d100      	bne.n	ff88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff88:	bf00      	nop
    ff8a:	b003      	add	sp, #12
    ff8c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff90:	1fff91c4 	.word	0x1fff91c4
    ff94:	1fff91c0 	.word	0x1fff91c0

0000ff98 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    ff98:	bf00      	nop
    ff9a:	4770      	bx	lr

0000ff9c <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    ff9c:	b510      	push	{r4, lr}
    ff9e:	b084      	sub	sp, #16
    ffa0:	4604      	mov	r4, r0
    ffa2:	4608      	mov	r0, r1
    ffa4:	4611      	mov	r1, r2
    ffa6:	461a      	mov	r2, r3
    ffa8:	4623      	mov	r3, r4
    ffaa:	f8ad 3006 	strh.w	r3, [sp, #6]
    ffae:	4603      	mov	r3, r0
    ffb0:	f88d 3005 	strb.w	r3, [sp, #5]
    ffb4:	460b      	mov	r3, r1
    ffb6:	f88d 3004 	strb.w	r3, [sp, #4]
    ffba:	4613      	mov	r3, r2
    ffbc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffc0:	f7f0 fddc 	bl	b7c <Sys_GetCoreID>
    ffc4:	4603      	mov	r3, r0
    ffc6:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    ffc8:	490d      	ldr	r1, [pc, #52]	; (10000 <Det_ReportError+0x64>)
    ffca:	9b03      	ldr	r3, [sp, #12]
    ffcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ffd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    ffd4:	4a0b      	ldr	r2, [pc, #44]	; (10004 <Det_ReportError+0x68>)
    ffd6:	9b03      	ldr	r3, [sp, #12]
    ffd8:	4413      	add	r3, r2
    ffda:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ffde:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    ffe0:	4a09      	ldr	r2, [pc, #36]	; (10008 <Det_ReportError+0x6c>)
    ffe2:	9b03      	ldr	r3, [sp, #12]
    ffe4:	4413      	add	r3, r2
    ffe6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ffea:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    ffec:	4a07      	ldr	r2, [pc, #28]	; (1000c <Det_ReportError+0x70>)
    ffee:	9b03      	ldr	r3, [sp, #12]
    fff0:	4413      	add	r3, r2
    fff2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    fff6:	701a      	strb	r2, [r3, #0]

    return E_OK;
    fff8:	2300      	movs	r3, #0
}
    fffa:	4618      	mov	r0, r3
    fffc:	b004      	add	sp, #16
    fffe:	bd10      	pop	{r4, pc}
   10000:	1fff91f0 	.word	0x1fff91f0
   10004:	1fff91c8 	.word	0x1fff91c8
   10008:	1fff91cc 	.word	0x1fff91cc
   1000c:	1fff91d0 	.word	0x1fff91d0

00010010 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   10010:	b510      	push	{r4, lr}
   10012:	b084      	sub	sp, #16
   10014:	4604      	mov	r4, r0
   10016:	4608      	mov	r0, r1
   10018:	4611      	mov	r1, r2
   1001a:	461a      	mov	r2, r3
   1001c:	4623      	mov	r3, r4
   1001e:	f8ad 3006 	strh.w	r3, [sp, #6]
   10022:	4603      	mov	r3, r0
   10024:	f88d 3005 	strb.w	r3, [sp, #5]
   10028:	460b      	mov	r3, r1
   1002a:	f88d 3004 	strb.w	r3, [sp, #4]
   1002e:	4613      	mov	r3, r2
   10030:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10034:	f7f0 fda2 	bl	b7c <Sys_GetCoreID>
   10038:	4603      	mov	r3, r0
   1003a:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   1003c:	490d      	ldr	r1, [pc, #52]	; (10074 <Det_ReportRuntimeError+0x64>)
   1003e:	9b03      	ldr	r3, [sp, #12]
   10040:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10044:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   10048:	4a0b      	ldr	r2, [pc, #44]	; (10078 <Det_ReportRuntimeError+0x68>)
   1004a:	9b03      	ldr	r3, [sp, #12]
   1004c:	4413      	add	r3, r2
   1004e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10052:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   10054:	4a09      	ldr	r2, [pc, #36]	; (1007c <Det_ReportRuntimeError+0x6c>)
   10056:	9b03      	ldr	r3, [sp, #12]
   10058:	4413      	add	r3, r2
   1005a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1005e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   10060:	4a07      	ldr	r2, [pc, #28]	; (10080 <Det_ReportRuntimeError+0x70>)
   10062:	9b03      	ldr	r3, [sp, #12]
   10064:	4413      	add	r3, r2
   10066:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1006a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   1006c:	2300      	movs	r3, #0
}
   1006e:	4618      	mov	r0, r3
   10070:	b004      	add	sp, #16
   10072:	bd10      	pop	{r4, pc}
   10074:	1fff91f4 	.word	0x1fff91f4
   10078:	1fff91d4 	.word	0x1fff91d4
   1007c:	1fff91d8 	.word	0x1fff91d8
   10080:	1fff91dc 	.word	0x1fff91dc

00010084 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   10084:	b510      	push	{r4, lr}
   10086:	b084      	sub	sp, #16
   10088:	4604      	mov	r4, r0
   1008a:	4608      	mov	r0, r1
   1008c:	4611      	mov	r1, r2
   1008e:	461a      	mov	r2, r3
   10090:	4623      	mov	r3, r4
   10092:	f8ad 3006 	strh.w	r3, [sp, #6]
   10096:	4603      	mov	r3, r0
   10098:	f88d 3005 	strb.w	r3, [sp, #5]
   1009c:	460b      	mov	r3, r1
   1009e:	f88d 3004 	strb.w	r3, [sp, #4]
   100a2:	4613      	mov	r3, r2
   100a4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100a8:	f7f0 fd68 	bl	b7c <Sys_GetCoreID>
   100ac:	4603      	mov	r3, r0
   100ae:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   100b0:	490d      	ldr	r1, [pc, #52]	; (100e8 <Det_ReportTransientFault+0x64>)
   100b2:	9b03      	ldr	r3, [sp, #12]
   100b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   100b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   100bc:	4a0b      	ldr	r2, [pc, #44]	; (100ec <Det_ReportTransientFault+0x68>)
   100be:	9b03      	ldr	r3, [sp, #12]
   100c0:	4413      	add	r3, r2
   100c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   100c6:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   100c8:	4a09      	ldr	r2, [pc, #36]	; (100f0 <Det_ReportTransientFault+0x6c>)
   100ca:	9b03      	ldr	r3, [sp, #12]
   100cc:	4413      	add	r3, r2
   100ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
   100d2:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   100d4:	4a07      	ldr	r2, [pc, #28]	; (100f4 <Det_ReportTransientFault+0x70>)
   100d6:	9b03      	ldr	r3, [sp, #12]
   100d8:	4413      	add	r3, r2
   100da:	f89d 2003 	ldrb.w	r2, [sp, #3]
   100de:	701a      	strb	r2, [r3, #0]

    return E_OK;
   100e0:	2300      	movs	r3, #0
}
   100e2:	4618      	mov	r0, r3
   100e4:	b004      	add	sp, #16
   100e6:	bd10      	pop	{r4, pc}
   100e8:	1fff91ec 	.word	0x1fff91ec
   100ec:	1fff91e0 	.word	0x1fff91e0
   100f0:	1fff91e4 	.word	0x1fff91e4
   100f4:	1fff91e8 	.word	0x1fff91e8

000100f8 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   100f8:	bf00      	nop
   100fa:	4770      	bx	lr

000100fc <Fls_ACEraseRomEnd>:
   100fc:	31746f50 	.word	0x31746f50
   10100:	35484320 	.word	0x35484320
   10104:	6c617620 	.word	0x6c617620
   10108:	203a6575 	.word	0x203a6575
   1010c:	202c6425 	.word	0x202c6425
   10110:	31746f50 	.word	0x31746f50
   10114:	34484320 	.word	0x34484320
   10118:	6c617620 	.word	0x6c617620
   1011c:	203a6575 	.word	0x203a6575
   10120:	202c6425 	.word	0x202c6425
   10124:	32746f50 	.word	0x32746f50
   10128:	38484320 	.word	0x38484320
   1012c:	6c617620 	.word	0x6c617620
   10130:	203a6575 	.word	0x203a6575
   10134:	202c6425 	.word	0x202c6425
   10138:	32746f50 	.word	0x32746f50
   1013c:	39484320 	.word	0x39484320
   10140:	6c617620 	.word	0x6c617620
   10144:	203a6575 	.word	0x203a6575
   10148:	0a206425 	.word	0x0a206425
   1014c:	00000000 	.word	0x00000000
   10150:	6d726554 	.word	0x6d726554
   10154:	6c616e69 	.word	0x6c616e69
   10158:	00000000 	.word	0x00000000
   1015c:	4c554e28 	.word	0x4c554e28
   10160:	0000294c 	.word	0x0000294c

00010164 <Clock_Ip_au8DividerCallbackIndex>:
   10164:	0e0d0c00 06030201 0a070409 000b0805     ................

00010174 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00010184 <Clock_Ip_au8XoscCallbackIndex>:
   10184:	00000100 00000000 00000000 00000000     ................

00010194 <Clock_Ip_au8IrcoscCallbackIndex>:
   10194:	03020100 00000004 00000000 00000000     ................

000101a4 <Clock_Ip_au8GateCallbackIndex>:
   101a4:	06010200 01040301 00000500 00000000     ................

000101b4 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000101c4 <Clock_Ip_au8PllCallbackIndex>:
   101c4:	00000100 00000000 00000000 00000000     ................

000101d4 <Clock_Ip_au8SelectorCallbackIndex>:
   101d4:	0a090800 03020109 07060504 00000000     ................

000101e4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000101f4 <Clock_Ip_au8CmuCallbackIndex>:
	...

00010204 <Clock_Ip_au8ClockFeatures>:
	...
   10214:	01000000 00000000 00000000 00000002     ................
   10224:	00000000 00000300 00000000 00040000     ................
   10234:	00000000 05000000 00000000 00000000     ................
   10244:	00000006 00000000 00000100 00000000     ................
   10254:	00010000 00000000 04000000 00000000     ................
   10264:	00000000 00000005 00000001 00000401     ................
   10274:	00000200 00050100 00030000 04020000     ................
   10284:	04000000 02000000 00000005 00000005     ................
   10294:	00000403 00000600 00050300 00070000     ................
   102a4:	05000000 00000000 00000000 00000006     ................
	...
   102e4:	00050000 00000000 06000000 00000100     ................
   102f4:	00000000 00030007 00000000 00000000     ................
   10304:	00000000 00060000 00000000 07000000     ................
   10314:	00000100 00000000 00030008 00000000     ................
	...
   1032c:	00090000 00000000 0a000000 00000100     ................
   1033c:	00000000 0003000b 00000000 00000000     ................
   1034c:	00000000 000c0000 00000000 0d000000     ................
   1035c:	00000100 00000000 0003000e 00000000     ................
   1036c:	00000800 00000000 00090000 00000000     ................
   1037c:	0a000000 00000000 00000000 0000000b     ................
   1038c:	00000000 00000b01 00000000 000b0200     ................
   1039c:	00000000 0b030000 00000000 00000000     ................
	...
   103b4:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   103c4:	01000000 00000000 00000000 00000007     ................
   103d4:	00007300 00000700 00320000 00090000     .s........2.....
   103e4:	02000000 07000000 00000000 00000021     ............!...
   103f4:	00000009 00000400 00000900 00030000     ................
   10404:	00070000 61000000 07000000 00000000     .......a........
   10414:	00000024 00000007 00002500 00000700     $........%......
   10424:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   10434:	00000000 00000020 38000004 00003800     .... ......8.8..
   10444:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   10454:	04000000 00260000 00000026 66000004     ......&.&......f
   10464:	00006600 00000400 00370037 00040000     .f......7.7.....
   10474:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   10484:	2e000004 00002e00 00000200 00404040     ............@@@.
   10494:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   104a4:	0000006b 6c000004 00006c00 00000900     k......l.l......
   104b4:	00010000 00090000 00000000 07000000     ................
   104c4:	00000000 00000036 00000007 00003100     ....6........1..
   104d4:	00000700 00490000 00070000 4a000000     ......I........J
   104e4:	07000000 00000000 0000004b 00000007     ........K.......
   104f4:	00004c00 00000700 004d0000 00070000     .L........M.....
   10504:	3d000000 03000000 00000000 00000000     ...=............

00010514 <Clock_Ip_au16SelectorEntryHardwareValue>:
   10514:	01010a03 01010001 04040002 02000603     ................
   10524:	00010810 02020100 00000000 00000007     ................
   10534:	00000009 00000000 00000c0e 00000000     ................
	...

0001056c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   1056c:	00020000 00000300 00000601 00000000     ................
	...

0001059c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   1059c:	00000700 00000000 02020000 01010303     ................
   105ac:	03020606 00000000 00000000 00000000     ................
	...

000105cc <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   105cc:	00000001 00000000 02020000 01010303     ................
   105dc:	03020606 00000000 00000000 00000000     ................
	...

000105fc <Clock_Ip_au8DividerValueHardwareValue>:
   105fc:	00020100 00000003 00000004 00000000     ................
   1060c:	00000005 00000000 00000000 00000000     ................
   1061c:	00000006 00000000 00000000 00000000     ................
	...
   1063c:	00000007                                ....

00010640 <Clock_Ip_apxScgPeriphAsyncDivs>:
   10640:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00010650 <Clock_Ip_aeSourceTypeClockName>:
   10650:	00000000 00000001 00000001 00000001     ................
   10660:	00000001 00000001 00000001 00000001     ................
   10670:	00000002 00000003 00000001 00000001     ................
   10680:	00000001 00000001 00000002 00000002     ................
   10690:	00000003 00000003 00000001 00000001     ................
   106a0:	00000004 00000004 00000004 00000004     ................
	...

0001070c <Clock_Ip_aeHwPllName>:
   1070c:	00000009                                ....

00010710 <Clock_Ip_aeHwDfsName>:
   10710:	00000057                                W...

00010714 <Clock_Ip_axDividerCallbacks>:
   10714:	00002bbd 00002bc7 00002be1 00002bfb     .+...+...+...+..
   10724:	00002c15 00002c2f 00002c49 00002c63     .,../,..I,..c,..
   10734:	00002c7d 00002c97 00002cb1 00002ccb     },...,...,...,..
   10744:	00002ce5 00002cff 00002d19              .,...,...-..

00010750 <Clock_Ip_axDividerTriggerCallbacks>:
   10750:	0000308d 0000308d                       .0...0..

00010758 <Clock_Ip_axExtOscCallbacks>:
   10758:	00003099 00003099 00003099 000030a3     .0...0...0...0..
   10768:	00003099 000030ad 000030c7 000030e1     .0...0...0...0..
   10778:	00003165 00003179                       e1..y1..

00010780 <Clock_Ip_axFracDivCallbacks>:
   10780:	00003339 00003339 00003343              93..93..C3..

0001078c <Clock_Ip_axGateCallbacks>:
   1078c:	0000335d 00003367 00003467 00003481     ]3..g3..g4...4..
   1079c:	00003417 00003431 000033c7 000033e1     .4..14...3...3..
   107ac:	00003377 00003391 000034b7 000034d1     w3...3...4...4..
   107bc:	00003507 00003521                       .5..!5..

000107c4 <Clock_Ip_axIntOscCallbacks>:
   107c4:	000036cd 000036cd 000036d7 000036e1     .6...6...6...6..
   107d4:	000036fb 00003715 00003729 00003743     .6...7..)7..C7..
   107e4:	0000375d 00003771 0000378b 000037a5     ]7..q7...7...7..
   107f4:	0000384d 00003867 00003881              M8..g8...8..

00010800 <Clock_Ip_axCmuCallbacks>:
   10800:	00003e1d 00003e27 00003e33 00003e1d     .>..'>..3>...>..

00010810 <Clock_Ip_axPllCallbacks>:
   10810:	00003e3d 00003e3d 00003e47 00003e3d     =>..=>..G>..=>..
   10820:	00003e53 00003e5d 00003e77 00003e91     S>..]>..w>...>..
   10830:	00003f35 00003f21                       5?..!?..

00010838 <Clock_Ip_axPcfsCallbacks>:
   10838:	00004091                                .@..

0001083c <Clock_Ip_axSelectorCallbacks>:
   1083c:	0000409d 0000409d 000040a7 000040c1     .@...@...@...@..
   1084c:	0000409d 000040db 000040f5 0000410f     .@...@...@...A..
   1085c:	00004129 00004143 0000415d 00004177     )A..CA..]A..wA..
   1086c:	00004191 000041ab 000041c5 000041df     .A...A...A...A..
   1087c:	000041f9 00004213 0000422d 00004247     .A...B..-B..GB..
   1088c:	00004261 0000427b                       aB..{B..

00010894 <ClockSource>:
   10894:	00000000 00000008 00000002 00000005     ................
	...
   108ac:	00000009                                ....

000108b0 <ResetReasonArray>:
   108b0:	00000000 00000001 00000002 00000003     ................
   108c0:	00000004 00000005 00000006 00000007     ................
   108d0:	00000008 00000009 0000000a 0000000b     ................
   108e0:	0000000c 0000000d 0000000e              ............

000108ec <Port_au32PortCiPortBaseAddr>:
   108ec:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   108fc:	4004d000                                ...@

00010900 <Port_au32PortCiGpioBaseAddr>:
   10900:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10910:	400ff100                                ...@

00010914 <Adc_Ip_apxBase>:
   10914:	4003b000 40027000                       ...@.p.@

0001091c <Pdb_Adc_Ip_apxBase>:
   1091c:	40036000 40031000                       .`.@...@

00010924 <AdcIpChansConfig_0>:
   10924:	00000000 00000005 00000000 00000001     ................
   10934:	00000008 00000000 00000002 00000004     ................
   10944:	00000000 00000003 00000009 00000000     ................

00010954 <AdcIpConfig_0>:
   10954:	00000000 00000003 00000000 0000000c     ................
   10964:	00000000 00000001 00000001 00000000     ................
	...
   1097c:	00ff0000 00000000 00000000 00010924     ............$...
   1098c:	0000a32d                                -...

00010990 <AdcIpwCfg>:
   10990:	00010954 00000000 00010e5c 00000000     T.......\.......
   109a0:	ff01ff00 00000001 00000004 0001ffff     ................
   109b0:	0000ff00                                ....

000109b4 <AdcIpwGroupConfig_0>:
   109b4:	00000001 00000001 000000c8 00010000     ................
   109c4:	00000000                                ....

000109c8 <Adc_Group0_Assignment_0>:
   109c8:	00010000 00030002                       ........

000109d0 <Adc_GroupsCfg>:
	...
   109ec:	00000001 000109c8 00090004 00000004     ................
   109fc:	00000000 000109b4                       ........

00010a04 <Adc_au16GroupIdToIndexMap>:
   10a04:	00000000                                ....

00010a08 <Adc_Partition_Assignment>:
   10a08:	00000000                                ....

00010a0c <Adc_Config>:
   10a0c:	00010990 000109d0 00000001 00010a04     ................
   10a1c:	00000000 00010a08 00000001              ............

00010a28 <Mcu_aClockConfigPB>:
	...
   10a30:	1c000101 04000010 01000029 00000005     ........).......
   10a40:	00000001 00000000 00000057 00000000     ........W.......
   10a50:	00000000 00000008 007a1200 00000001     ..........z.....
   10a60:	00000001 00000000 00000057 00000000     ........W.......
   10a70:	00000057 00000000 00000000 00000000     W...............
	...
   10a90:	00000019 00000005 0000001a 00000002     ................
   10aa0:	0000001b 00000005 0000002a 00000005     ........*.......
   10ab0:	00000028 0000000e 00000029 00000001     (.......).......
   10ac0:	00000056 0000001c 00000032 0000002a     V.......2...*...
   10ad0:	0000002b 00000014 0000002c 00000014     +.......,.......
   10ae0:	0000002d 00000014 0000002e 00000014     -...............
   10af0:	0000003f 00000000 00000040 00000000     ?.......@.......
   10b00:	00000041 00000000 00000042 00000000     A.......B.......
   10b10:	00000031 00000000 00000045 00000000     1.......E.......
   10b20:	00000046 00000000 00000047 00000000     F.......G.......
   10b30:	00000044 00000000 00000030 0000000d     D.......0.......
   10b40:	0000003d 00000000 00000043 00000000     =.......C.......
   10b50:	00000049 00000000 0000004a 00000000     I.......J.......
   10b60:	0000004b 00000000 00000048 00000000     K.......H.......
   10b70:	0000000c 00000001 00000000 0000000d     ................
   10b80:	00000002 00000000 0000000e 00000001     ................
   10b90:	00000000 0000000f 00000001 00000000     ................
   10ba0:	0000001d 00000001 00000000 0000001e     ................
   10bb0:	00000008 00000000 0000001f 00000001     ................
   10bc0:	00000000 00000021 00000001 00000000     ....!...........
   10bd0:	00000022 00000002 00000000 00000023     "...........#...
   10be0:	00000001 00000000 00000025 00000003     ........%.......
   10bf0:	00000000 00000026 00000004 00000000     ....&...........
   10c00:	00000027 00000002 00000000 00000032     '...........2...
   10c10:	00000001 00000000 00000048 00000001     ........H.......
   10c20:	00000001 00000056 00000001 00000001     ....V...........
   10c30:	00000057 00000000 00000000 00000057     W...........W...
	...
   10c48:	00000057 00000000 00000000 00000057     W...........W...
	...
   10c60:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   10c7c:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10c8c:	00000016 00007d00 00000017 00008000     .....}..........
   10c9c:	00000012 00000001 00000013 00000001     ................
   10cac:	00000030 00000001 00000031 00000000     0.......1.......
   10cbc:	00000032 00000000 00000033 00000000     2.......3.......
   10ccc:	00000034 00000000 00000035 00000001     4.......5.......
   10cdc:	00000036 00000000 00000037 00000001     6.......7.......
   10cec:	00000038 00000001 00000039 00000000     8.......9.......
   10cfc:	0000003a 00000000 0000003b 00000000     :.......;.......
   10d0c:	0000003c 00000000 0000003d 00000000     <.......=.......
   10d1c:	0000003e 00000000 0000003f 00000000     >.......?.......
   10d2c:	00000040 00000000 00000041 00000000     @.......A.......
   10d3c:	00000042 00000000 00000043 00000000     B.......C.......
   10d4c:	00000044 00000000 00000045 00000000     D.......E.......
   10d5c:	00000046 00000000 00000047 00000000     F.......G.......
   10d6c:	00000048 00000000 00000049 00000000     H.......I.......
   10d7c:	0000004a 00000000 0000004b 00000000     J.......K.......
   10d8c:	0000004c 00000001 0000004d 00000001     L.......M.......
   10d9c:	0000004e 00000001 0000004f 00000000     N.......O.......
   10dac:	00000050 00000001 00000051 00000001     P.......Q.......
   10dbc:	00000052 00000001 00000053 00000001     R.......S.......
   10dcc:	00000054 00000001 00000055 00000000     T.......U.......
   10ddc:	00000056 00000001 00000057 00000000     V.......W.......
   10dec:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010e20 <aIrqConfiguration>:
   10e20:	00000027 00000f01 00008be5              '...........

00010e2c <intCtrlConfig>:
   10e2c:	00000001 00010e20                       .... ...

00010e34 <Mcu_Config>:
   10e34:	0000005a 00000000 00000001 00000001     Z...............
   10e44:	00011070 00010a28 0001107c              p...(...|...

00010e50 <OsIf_xPredefinedConfig>:
   10e50:	00000000 02dc6c00                       .....l..

00010e58 <OsIf_apxPredefinedConfig>:
   10e58:	00010e50                                P...

00010e5c <PdbAdcIpConfig_0>:
	...
   10e68:	0000000f ffff0000 00000000 00000000     ................
   10e78:	00000000                                ....

00010e7c <Platform_uConfiguration>:
   10e7c:	00010e84                                ....

00010e80 <Platform_Config>:
   10e80:	00010e7c                                |...

00010e84 <ipwConfig>:
   10e84:	00010e2c 00000000                       ,.......

00010e8c <g_pin_mux_InitConfigArr>:
   10e8c:	4004a000 00000000 00000001 00000002     ...@............
   10e9c:	00000000 00000002 00000000 00000000     ................
	...
   10eb4:	4004a000 00000000 0000000d 00000002     ...@............
   10ec4:	00000000 00000002 00000000 00000000     ................
	...
   10edc:	4004a000 00000000 00000000 00000002     ...@............
   10eec:	00000000 00000002 00000000 00000000     ................
	...
   10f04:	4004b000 00000000 00000001 00000002     ...@............
   10f14:	00000000 00000002 00000000 00000000     ................
	...

00010f2c <au8Port_PartitionList>:
   10f2c:	00000001                                ....

00010f30 <au32Port_PinToPartitionMap>:
   10f30:	00000001 00000001 00000001 00000001     ................

00010f40 <Port_au16NoUnUsedPadsArrayDefault>:
   10f40:	00010000 00030002 00070006 00090008     ................
   10f50:	000c000b 000e000d 0010000f 00220011     ..............".
   10f60:	00240023 00260025 00280027 002a0029     #.$.%.&.'.(.).*.
   10f70:	002c002b 002f002e 00310030 00420040     +.,.../.0.1.@.B.
   10f80:	00460043 00480047 004a0049 004c004b     C.F.G.H.I.J.K.L.
   10f90:	004e004d 0050004f 00600051 00620061     M.N.O.P.Q.`.a.b.
   10fa0:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
   10fb0:	006c006b 006e006d 0070006f 00800071     k.l.m.n.o.p.q...
   10fc0:	00820081 00840083 00860085 00880087     ................
   10fd0:	008a0089 008c008b 008e008d 0090008f     ................

00010fe0 <Port_UnUsedPin>:
   10fe0:	00000100 00000001 00000000              ............

00010fec <Port_aPinConfigDefault>:
   10fec:	00000021 00000000 00000002 00000000     !...............
   10ffc:	00010000 0000002d 00000000 00000002     ....-...........
   1100c:	00000000 00010000 00000020 00000000     ........ .......
   1101c:	00000002 00000000 00010000 00000041     ............A...
   1102c:	00000000 00000002 00000000 00010000     ................

0001103c <Port_Config>:
   1103c:	00500004 00010f40 00010fe0 00010fec     ..P.@...........
	...
   11054:	00010f30 00010f2c 00010e8c              0...,.......

00011060 <Power_Ip_RCM_ConfigPB>:
	...

00011068 <Power_Ip_PMC_ConfigPB>:
   11068:	00000000                                ....

0001106c <Power_Ip_SMC_ConfigPB>:
   1106c:	00000000                                ....

00011070 <Power_Ip_aModeConfigPB>:
	...

0001107c <Power_Ip_HwIPsConfigPB>:
   1107c:	00011060 00011068 0001106c              `...h...l...

00011088 <_aInitStr.0>:
   11088:	00000000 54540000 45522052 53454747     ......TTR REGGES
   11098:	00000000                                ....

0001109c <_aV2C.0>:
   1109c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000110ac <__INIT_TABLE>:
   110ac:	00000002 	.word	0x00000002
   110b0:	1fff8b10 	.word	0x1fff8b10
   110b4:	000110d4 	.word	0x000110d4
   110b8:	000110e8 	.word	0x000110e8
   110bc:	1fff8800 	.word	0x1fff8800
   110c0:	00000000 	.word	0x00000000
   110c4:	00000310 	.word	0x00000310

000110c8 <__ZERO_TABLE>:
   110c8:	00000001 	.word	0x00000001
   110cc:	1fff8b30 	.word	0x1fff8b30
   110d0:	1fff96c0 	.word	0x1fff96c0
